uint64_t sub_100803764@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD v38[2];
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v41 = a3;
  v5 = type metadata accessor for BeaconEstimatedLocation(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v43 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v38 - v10;
  v12 = __chkstk_darwin(v9);
  v42 = (uint64_t)v38 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)v38 - v14;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  __chkstk_darwin(v16);
  v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = _swiftEmptyArrayStorage;
  v46 = _swiftEmptyArrayStorage;
  v20 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v20)
  {
    v39 = v18;
    v40 = v6;
    v44 = v5;
    v21 = *(unsigned __int8 *)(v6 + 80);
    v22 = *(_QWORD *)(v6 + 72);
    v38[1] = a1;
    v45 = (v21 + 32) & ~v21;
    v23 = a1 + v45;
    do
    {
      sub_10005972C(v23, (uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
      if (a2 == 19 || v15[*(int *)(v44 + 44)] == a2)
      {
        sub_1000126EC((uint64_t)v15, (uint64_t)v11, type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
          sub_10009A5D0(0, v19[2] + 1, 1);
        v19 = v46;
        v25 = v46[2];
        v24 = v46[3];
        if (v25 >= v24 >> 1)
        {
          sub_10009A5D0(v24 > 1, v25 + 1, 1);
          v19 = v46;
        }
        v19[2] = v25 + 1;
        sub_1000126EC((uint64_t)v11, (uint64_t)v19 + v45 + v25 * v22, type metadata accessor for BeaconEstimatedLocation);
      }
      else
      {
        sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
      }
      v23 += v22;
      --v20;
    }
    while (v20);
    v19 = v46;
    v5 = v44;
    v18 = v39;
    v6 = v40;
  }
  swift_bridgeObjectRelease();
  v26 = v19[2];
  v28 = v42;
  v27 = (uint64_t)v43;
  if (!v26)
  {
    v31 = 1;
LABEL_17:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v18, v31, 1, v5);
    swift_release(v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v18, 1, v5) == 1)
    {
      sub_100004048((uint64_t)v18, (uint64_t *)&unk_1010F7810);
      v32 = type metadata accessor for Date(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v41, 1, 1, v32);
    }
    else
    {
      v33 = &v18[*(int *)(v5 + 40)];
      v34 = type metadata accessor for Date(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = v41;
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v41, v33, v34);
      sub_1000126B0((uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v34);
    }
  }
  v29 = (uint64_t)v19 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  sub_10005972C(v29, v42, type metadata accessor for BeaconEstimatedLocation);
  result = swift_retain();
  if (v26 == 1)
  {
LABEL_15:
    swift_release(v19);
    sub_1000126EC(v28, (uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
    v31 = 0;
    goto LABEL_17;
  }
  v37 = 1;
  while (v37 < v19[2])
  {
    sub_10005972C(v29 + *(_QWORD *)(v6 + 72) * v37, v27, type metadata accessor for BeaconEstimatedLocation);
    if ((static Date.< infix(_:_:)(v28 + *(int *)(v5 + 40), v27 + *(int *)(v5 + 40)) & 1) != 0)
    {
      sub_1000126B0(v28, type metadata accessor for BeaconEstimatedLocation);
      result = sub_1000126EC(v27, v28, type metadata accessor for BeaconEstimatedLocation);
    }
    else
    {
      result = sub_1000126B0(v27, type metadata accessor for BeaconEstimatedLocation);
    }
    if (v26 == ++v37)
      goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100803B60(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  char v83[16];
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  __int128 aBlock;
  uint64_t (*v88)(uint64_t);
  void *v89;
  uint64_t (*v90)();
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  char v94[8];

  v81 = a5;
  v82 = a4;
  v78 = a3;
  v75 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v73 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v71 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for BeaconObservation(0);
  v9 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BeaconEstimatedLocation(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v80 = sub_10001A9A8(&qword_1010F4A20);
  __chkstk_darwin(v80);
  v79 = (uint64_t)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1;
  v84 = *(_QWORD *)(a1 + 160);
  v85 = a2;
  v17 = OS_dispatch_queue.sync<A>(execute:)(sub_1008807F8, v83, (char *)&type metadata for () + 8);
  v18 = v12;
  v65 = v9;
  v66 = v11;
  v62 = v13;
  v63 = v14;
  v69 = (uint64_t)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = v16;
  v76 = a2;
  LODWORD(v68) = static os_log_type_t.default.getter(v17);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v19 = qword_1011B7D38;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v21 = swift_allocObject(v20, 72, 7);
  v64 = xmmword_100E22B00;
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  v22 = v76;
  v23 = v69;
  sub_10005972C(v76, v69, type metadata accessor for BeaconEstimatedLocation);
  v24 = v23;
  v25 = v18;
  v26 = String.init<A>(describing:)(v24, v18);
  v28 = v27;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = sub_10001AA00();
  *(_QWORD *)(v21 + 32) = v26;
  *(_QWORD *)(v21 + 40) = v28;
  os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v19, "Saved BeaconEstimatedLocation record %@", 39, 2, v21);
  swift_bridgeObjectRelease();
  v29 = v78;
  v30 = (uint64_t)v66;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v68 = qword_1011B7160;
  v31 = v22 + *(int *)(v25 + 24);
  v32 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  v33 = v22 + *(int *)(v25 + 40);
  v34 = v77;
  v35 = v30 + *(int *)(v77 + 20);
  v36 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v35, v33, v36);
  *(_BYTE *)(v30 + *(int *)(v34 + 24)) = 0;
  v37 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v38 = *(unsigned __int8 *)(v65 + 80);
  v39 = (v38 + 32) & ~v38;
  v40 = swift_allocObject(v37, v39 + *(_QWORD *)(v65 + 72), v38 | 7);
  *(_OWORD *)(v40 + 16) = v64;
  sub_10005972C(v30, v40 + v39, type metadata accessor for BeaconObservation);
  v41 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v41);
  *(&v62 - 4) = v68;
  *(&v62 - 3) = v40;
  *(&v62 - 2) = 0;
  *(&v62 - 1) = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v62 - 6, (char *)&type metadata for () + 8);
  swift_bridgeObjectRelease();
  sub_1000126B0(v30, type metadata accessor for BeaconObservation);
  v42 = v67;
  sub_10080B648(v31, (uint64_t)v94);
  sub_10000F9B8((uint64_t)v94, (uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
  if (v89)
  {
    sub_10000F9FC(&aBlock, (uint64_t)&v93);
    v43 = static Date.> infix(_:_:)(v33, v29);
    v44 = v82;
    if ((v43 & 1) != 0)
    {
      v45 = v69;
      sub_10005972C(v76, v69, type metadata accessor for BeaconEstimatedLocation);
      sub_100030784((uint64_t)&v93, (uint64_t)&v92);
      v46 = *(unsigned __int8 *)(v62 + 80);
      v47 = (v46 + 24) & ~v46;
      v48 = (v63 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
      v49 = swift_allocObject(&unk_1010964C8, v48 + 40, v46 | 7);
      *(_QWORD *)(v49 + 16) = v42;
      sub_1000126EC(v45, v49 + v47, type metadata accessor for BeaconEstimatedLocation);
      sub_10000F9FC(&v92, v49 + v48);
      v90 = sub_10088093C;
      v91 = v49;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v88 = sub_100016FB8;
      v89 = &unk_1010964E0;
      v50 = _Block_copy(&aBlock);
      v51 = swift_retain();
      v52 = v71;
      static DispatchQoS.unspecified.getter(v51);
      v86 = _swiftEmptyArrayStorage;
      v53 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v54 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v55 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v56 = v73;
      v57 = v54;
      v58 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v86, v57, v55, v75, v53);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v52, v56, v50);
      _Block_release(v50);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v56, v58);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v52, v70);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v93);
      swift_release(v91);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v93);
    }
  }
  else
  {
    sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
    v44 = v82;
  }
  v59 = v80;
  v60 = v79;
  sub_10005972C(v76, v79, type metadata accessor for BeaconEstimatedLocation);
  swift_storeEnumTagMultiPayload(v60, v59, 0);
  v44(v60);
  sub_100004048(v60, &qword_1010F4A20);
  return sub_100004048((uint64_t)v94, (uint64_t *)&unk_1010EE310);
}

uint64_t sub_100804404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = sub_10001A9A8((uint64_t *)&unk_101108230);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10005972C(a2, (uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
  sub_100030784(a3, v9);
  PassthroughSubject.send(_:)(v8);
  return sub_100004048((uint64_t)v8, (uint64_t *)&unk_101108230);
}

uint64_t sub_1008044C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = sub_10001A9A8(&qword_1010F8318);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_101094F60, v9 + v7, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100804604(a3, (uint64_t (*)(_QWORD, _QWORD))sub_100879D74, v10);
  return swift_release();
}

uint64_t sub_1008045A4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 1) != 0)
  {
    v5 = a1;
    swift_errorRetain(a1);
    v4 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(throwing:)(&v5, v4);
  }
  else
  {
    v2 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(returning:)(v2, v2);
  }
}

uint64_t sub_100804604(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD, _QWORD);
  uint64_t v31;
  uint64_t v32;

  v32 = a3;
  v30 = a2;
  v28 = *v3;
  v29 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EC870);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CloudKitChangeSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - v15;
  sub_10000F9B8(a1, (uint64_t)v9, &qword_1010EC870);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100004048((uint64_t)v9, &qword_1010EC870);
    return v30(0, 0);
  }
  else
  {
    sub_1000126EC((uint64_t)v9, (uint64_t)v16, type metadata accessor for CloudKitChangeSet);
    v27 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_changeSetSequence);
    v18 = v29;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v6, v16, v29);
    sub_10005972C((uint64_t)v16, (uint64_t)v14, type metadata accessor for CloudKitChangeSet);
    v19 = *(unsigned __int8 *)(v11 + 80);
    v20 = (v19 + 16) & ~v19;
    v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    v24 = swift_allocObject(&unk_101094F88, v23 + 8, v19 | 7);
    sub_1000126EC((uint64_t)v14, v24 + v20, type metadata accessor for CloudKitChangeSet);
    *(_QWORD *)(v24 + v21) = v3;
    v25 = (_QWORD *)(v24 + v22);
    v26 = v32;
    *v25 = v30;
    v25[1] = v26;
    *(_QWORD *)(v24 + v23) = v28;
    swift_retain();
    swift_retain();
    Sequencer.perform(identifier:_:enqueueCompletion:)(v6, sub_100879E90, v24, 0, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v18);
    return sub_1000126B0((uint64_t)v16, type metadata accessor for CloudKitChangeSet);
  }
}

id sub_100804898(uint64_t a1, int a2, void (*a3)(char *), uint64_t a4)
{
  return sub_100805690(a1, a2, a3, a4, &qword_1010EEC50, type metadata accessor for OwnedBeaconGroup, (uint64_t)sub_100088ECC, (uint64_t)sub_10087E484, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_100808FE0);
}

id sub_1008048E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint8_t *v20;
  void *v21;
  id v22;
  unsigned int v23;
  NSString v24;
  unsigned int v25;
  id result;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE v48[12];

  v5 = v4;
  v46 = a1;
  v9 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BeaconNamingRecord(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B77E8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v44 = v9;
  v45 = a4;
  if (v19)
  {
    v20 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v20 = 67109120;
    v47 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v20 + 4, v20 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc(v20, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v21 = (void *)qword_1011B7C08;
  v22 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v23 = objc_msgSend(v22, "isInternalBuild");

  if (v23)
  {
    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(v21, "BOOLForKey:", v24);

  }
  else
  {
    v25 = 0;
  }
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v27 = result;
    v28 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v25) & 1) == 0))
    {
      return (id)sub_100809338(v46, a3, v45);
    }
    else
    {
      v43 = (void (*)(char *))a3;
      sub_10005972C(v46, (uint64_t)v14, type metadata accessor for BeaconNamingRecord);
      v29 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      __chkstk_darwin(v29);
      *(&v42 - 2) = v30;
      *(&v42 - 1) = (uint64_t)v14;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE130, &v42 - 4, (char *)&type metadata for () + 8);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = v46;
      sub_10005972C(v46, (uint64_t)v11, type metadata accessor for BeaconNamingRecord);
      swift_storeEnumTagMultiPayload(v11, v44, 0);
      v43(v11);
      v36 = sub_100004048((uint64_t)v11, &qword_101108090);
      if (((v28 != 0) & ~v25) != 0)
      {
        v41 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v41);
        *(&v42 - 4) = v5;
        *(&v42 - 3) = v35;
        *(&v42 - 2) = (uint64_t)v14;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_10087D668, &v42 - 6);
      }
      else
      {
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          v39 = v28 != 0;
          v40 = swift_slowAlloc(14, -1);
          *(_DWORD *)v40 = 67109376;
          v47 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 4, v40 + 8);
          *(_WORD *)(v40 + 8) = 1024;
          v47 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 10, v40 + 14);
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v40, 0xEu);
          swift_slowDealloc(v40, -1, -1);
        }

      }
      return (id)sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconNamingRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100804FB8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint8_t *v20;
  void *v21;
  id v22;
  unsigned int v23;
  NSString v24;
  unsigned int v25;
  id result;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE v48[12];

  v5 = v4;
  v46 = a1;
  v9 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B77E8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v44 = v9;
  v45 = a4;
  if (v19)
  {
    v20 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v20 = 67109120;
    v47 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v20 + 4, v20 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc(v20, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v21 = (void *)qword_1011B7C08;
  v22 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v23 = objc_msgSend(v22, "isInternalBuild");

  if (v23)
  {
    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(v21, "BOOLForKey:", v24);

  }
  else
  {
    v25 = 0;
  }
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v27 = result;
    v28 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v25) & 1) == 0))
    {
      return (id)sub_10080918C(v46, a3, v45);
    }
    else
    {
      v43 = (void (*)(char *))a3;
      sub_10005972C(v46, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      v29 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      __chkstk_darwin(v29);
      *(&v42 - 2) = v30;
      *(&v42 - 1) = (uint64_t)v14;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100088E9C, &v42 - 4, (char *)&type metadata for () + 8);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = v46;
      sub_10005972C(v46, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      swift_storeEnumTagMultiPayload(v11, v44, 0);
      v43(v11);
      v36 = sub_100004048((uint64_t)v11, (uint64_t *)&unk_101108050);
      if (((v28 != 0) & ~v25) != 0)
      {
        v41 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v41);
        *(&v42 - 4) = v5;
        *(&v42 - 3) = v35;
        *(&v42 - 2) = (uint64_t)v14;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_10087CA44, &v42 - 6);
      }
      else
      {
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          v39 = v28 != 0;
          v40 = swift_slowAlloc(14, -1);
          *(_DWORD *)v40 = 67109376;
          v47 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 4, v40 + 8);
          *(_WORD *)(v40 + 8) = 1024;
          v47 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 10, v40 + 14);
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v40, 0xEu);
          swift_slowDealloc(v40, -1, -1);
        }

      }
      return (id)sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100805690(uint64_t a1, int a2, void (*a3)(char *), uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, void (*)(_QWORD), uint64_t))
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  void *v25;
  id v26;
  unsigned int v27;
  NSString v28;
  id result;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t (*v38)(_QWORD);
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *);
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  int v51;
  _BYTE v52[12];

  v44 = a8;
  v48 = a3;
  v47 = a4;
  v46 = sub_10001A9A8(a5);
  __chkstk_darwin(v46);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = a6;
  v16 = a6(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v44 - v17;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B77E8);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v45 = a5;
  if (v23)
  {
    v24 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v24 = 67109120;
    v51 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v24 + 4, v24 + 8);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Saving record. Disk First? %{BOOL}d", v24, 8u);
    swift_slowDealloc(v24, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v25 = (void *)qword_1011B7C08;
  v26 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v27 = objc_msgSend(v26, "isInternalBuild");

  if (v27)
  {
    v28 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v25, "BOOLForKey:", v28, v44, v45, v46);

  }
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v30 = result;
    v31 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v31 && (v31, ((a2 | v27) & 1) == 0))
    {
      return (id)a9(a1, (void (*)(_QWORD))v48, v47);
    }
    else
    {
      v32 = sub_10005972C(a1, (uint64_t)v18, v50);
      __chkstk_darwin(v32);
      *(&v44 - 2) = v33;
      *(&v44 - 1) = (uint64_t)v18;
      v34 = OS_dispatch_queue.sync<A>(execute:)(a7, &v44 - 4, (char *)&type metadata for () + 8);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved LocalStorageBacked record. Calling completion.", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = v50;
      sub_10005972C(a1, (uint64_t)v15, v50);
      swift_storeEnumTagMultiPayload(v15, v46, 0);
      v48(v15);
      v39 = sub_100004048((uint64_t)v15, v45);
      if (((v31 != 0) & ~v27) != 0)
      {
        v43 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v43);
        *(&v44 - 4) = v49;
        *(&v44 - 3) = a1;
        *(&v44 - 2) = (uint64_t)v18;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, v44, &v44 - 6);
      }
      else
      {
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.info.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          v42 = swift_slowAlloc(14, -1);
          *(_DWORD *)v42 = 67109376;
          v51 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v42 + 4, v42 + 8);
          *(_WORD *)(v42 + 8) = 1024;
          v51 = v31 != 0;
          v38 = v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v42 + 10, v42 + 14);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v42, 0xEu);
          swift_slowDealloc(v42, -1, -1);
        }

      }
      return (id)sub_1000126B0((uint64_t)v18, v38);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100805D38(uint64_t a1, int a2, void (*a3)(char *), uint64_t a4)
{
  return sub_100805690(a1, a2, a3, a4, (uint64_t *)&unk_101108180, type metadata accessor for ShareRecord, (uint64_t)sub_100088EE4, (uint64_t)sub_10087D9F0, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_1008099E8);
}

id sub_100805D80(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint8_t *v20;
  void *v21;
  id v22;
  unsigned int v23;
  NSString v24;
  unsigned int v25;
  id result;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE v48[12];

  v5 = v4;
  v46 = a1;
  v9 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B77E8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v44 = v9;
  v45 = a4;
  if (v19)
  {
    v20 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v20 = 67109120;
    v47 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v20 + 4, v20 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc(v20, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v21 = (void *)qword_1011B7C08;
  v22 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v23 = objc_msgSend(v22, "isInternalBuild");

  if (v23)
  {
    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(v21, "BOOLForKey:", v24);

  }
  else
  {
    v25 = 0;
  }
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v27 = result;
    v28 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v25) & 1) == 0))
    {
      return (id)sub_100809B94(v46, a3, v45);
    }
    else
    {
      v43 = (void (*)(char *))a3;
      sub_10005972C(v46, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      v29 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      __chkstk_darwin(v29);
      *(&v42 - 2) = v30;
      *(&v42 - 1) = (uint64_t)v14;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100088EB4, &v42 - 4, &type metadata for () + 1);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = v46;
      sub_10005972C(v46, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
      swift_storeEnumTagMultiPayload(v11, v44, 0);
      v43(v11);
      v36 = sub_100004048((uint64_t)v11, &qword_1010F21B0);
      if (((v28 != 0) & ~v25) != 0)
      {
        v41 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v41);
        *(&v42 - 4) = v5;
        *(&v42 - 3) = v35;
        *(&v42 - 2) = (uint64_t)v14;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100878F8C, &v42 - 6);
      }
      else
      {
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          v39 = v28 != 0;
          v40 = swift_slowAlloc(14, -1);
          *(_DWORD *)v40 = 67109376;
          v47 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 4, v40 + 8);
          *(_WORD *)(v40 + 8) = 1024;
          v47 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v40 + 10, v40 + 14);
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v40, 0xEu);
          swift_slowDealloc(v40, -1, -1);
        }

      }
      return (id)sub_1000126B0((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100806458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a3;
  v25 = a2;
  v5 = type metadata accessor for OwnedBeaconGroup(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B77E8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = v27;
  sub_10005972C(v27, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  sub_10005972C(a4, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v20 + 8) & ~v18;
  v22 = swift_allocObject(&unk_101095C08, v21 + v7, v18 | 7);
  *(_QWORD *)(v22 + 16) = v26;
  sub_1000126EC((uint64_t)v11, v22 + v19, type metadata accessor for OwnedBeaconGroup);
  *(_QWORD *)(v22 + v20) = v25;
  sub_1000126EC((uint64_t)v9, v22 + v21, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  swift_retain();
  sub_100805690(v17, 0, (void (*)(char *))sub_10087E750, v22, &qword_1010EEC50, type metadata accessor for OwnedBeaconGroup, (uint64_t)sub_100088ECC, (uint64_t)sub_10087E484, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_100808FE0);
  return swift_release(v22);
}

uint64_t sub_10080669C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a3;
  v25 = a2;
  v5 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B77E8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = v27;
  sub_10005972C(v27, (uint64_t)v11, type metadata accessor for OwnedDeviceKeyRecord);
  sub_10005972C(a4, (uint64_t)v9, type metadata accessor for OwnedDeviceKeyRecord);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v20 + 8) & ~v18;
  v22 = swift_allocObject(&unk_101095410, v21 + v7, v18 | 7);
  *(_QWORD *)(v22 + 16) = v26;
  sub_1000126EC((uint64_t)v11, v22 + v19, type metadata accessor for OwnedDeviceKeyRecord);
  *(_QWORD *)(v22 + v20) = v25;
  sub_1000126EC((uint64_t)v9, v22 + v21, type metadata accessor for OwnedDeviceKeyRecord);
  swift_retain();
  swift_retain();
  sub_100805690(v17, 0, (void (*)(char *))sub_10087C1DC, v22, &qword_10110AAC0, type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)sub_100088F8C, (uint64_t)sub_10087BF2C, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_1008094E4);
  return swift_release(v22);
}

uint64_t sub_1008068E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t found;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a3;
  v25 = a2;
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v6 = *(_QWORD *)(found - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(found);
  v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B77E8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = v27;
  sub_10005972C(v27, (uint64_t)v11, type metadata accessor for NotifyWhenFoundRecord);
  sub_10005972C(a4, (uint64_t)v9, type metadata accessor for NotifyWhenFoundRecord);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v20 + 8) & ~v18;
  v22 = swift_allocObject(&unk_101096FE0, v21 + v7, v18 | 7);
  *(_QWORD *)(v22 + 16) = v26;
  sub_1000126EC((uint64_t)v11, v22 + v19, type metadata accessor for NotifyWhenFoundRecord);
  *(_QWORD *)(v22 + v20) = v25;
  sub_1000126EC((uint64_t)v9, v22 + v21, type metadata accessor for NotifyWhenFoundRecord);
  swift_retain();
  swift_retain();
  sub_100805690(v17, 0, (void (*)(char *))sub_1008827F4, v22, &qword_1010F3448, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)sub_100882D54, (uint64_t)sub_100882E24, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_100809690);
  return swift_release();
}

uint64_t sub_100806B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a3;
  v25 = a2;
  v5 = type metadata accessor for LostModeRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B77E8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = v27;
  sub_10005972C(v27, (uint64_t)v11, type metadata accessor for LostModeRecord);
  sub_10005972C(a4, (uint64_t)v9, type metadata accessor for LostModeRecord);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v20 + 8) & ~v18;
  v22 = swift_allocObject(&unk_101096E00, v21 + v7, v18 | 7);
  *(_QWORD *)(v22 + 16) = v26;
  sub_1000126EC((uint64_t)v11, v22 + v19, type metadata accessor for LostModeRecord);
  *(_QWORD *)(v22 + v20) = v25;
  sub_1000126EC((uint64_t)v9, v22 + v21, type metadata accessor for LostModeRecord);
  swift_retain();
  swift_retain();
  sub_100805690(v17, 0, (void (*)(char *))sub_100882344, v22, &qword_1011036B8, type metadata accessor for LostModeRecord, (uint64_t)sub_1007BE1BC, (uint64_t)sub_100882E10, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_10080983C);
  return swift_release();
}

uint64_t sub_100806D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a3;
  v25 = a2;
  v5 = type metadata accessor for ShareRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B77E8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = v27;
  sub_10005972C(v27, (uint64_t)v11, type metadata accessor for ShareRecord);
  sub_10005972C(a4, (uint64_t)v9, type metadata accessor for ShareRecord);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v20 + 8) & ~v18;
  v22 = swift_allocObject(&unk_1010959D8, v21 + v7, v18 | 7);
  *(_QWORD *)(v22 + 16) = v26;
  sub_1000126EC((uint64_t)v11, v22 + v19, type metadata accessor for ShareRecord);
  *(_QWORD *)(v22 + v20) = v25;
  sub_1000126EC((uint64_t)v9, v22 + v21, type metadata accessor for ShareRecord);
  swift_retain();
  swift_retain();
  sub_100805690(v17, 0, (void (*)(char *))sub_10087DDA4, v22, (uint64_t *)&unk_101108180, type metadata accessor for ShareRecord, (uint64_t)sub_100088EE4, (uint64_t)sub_10087D9F0, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_1008099E8);
  return swift_release();
}

uint64_t sub_100806FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6, uint64_t a7, void (*a8)(uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, _QWORD, uint64_t, uint64_t);

  v38 = a7;
  v39 = a8;
  v36 = a1;
  v37 = a3;
  v35 = a2;
  v11 = a5(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - v16;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B77E8);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    v34 = v12;
    v23 = a6;
    v24 = a4;
    v25 = v22;
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Saving record to cloud.", v22, 2u);
    v26 = v25;
    a4 = v24;
    a6 = v23;
    v12 = v34;
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = v37;
  sub_10005972C(v37, (uint64_t)v17, a5);
  sub_10005972C(a4, (uint64_t)v15, a5);
  v28 = *(unsigned __int8 *)(v12 + 80);
  v29 = (v28 + 24) & ~v28;
  v30 = (v13 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v28 + v30 + 8) & ~v28;
  v32 = swift_allocObject(a6, v31 + v13, v28 | 7);
  *(_QWORD *)(v32 + 16) = v36;
  sub_1000126EC((uint64_t)v17, v32 + v29, a5);
  *(_QWORD *)(v32 + v30) = v35;
  sub_1000126EC((uint64_t)v15, v32 + v31, a5);
  swift_retain();
  swift_retain();
  v39(v27, 0, v38, v32);
  return swift_release(v32);
}

uint64_t sub_1008071D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a3;
  v25 = a2;
  v5 = type metadata accessor for SafeLocation(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B77E8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = v27;
  sub_10005972C(v27, (uint64_t)v11, type metadata accessor for SafeLocation);
  sub_10005972C(a4, (uint64_t)v9, type metadata accessor for SafeLocation);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v20 + 8) & ~v18;
  v22 = swift_allocObject(&unk_101095E88, v21 + v7, v18 | 7);
  *(_QWORD *)(v22 + 16) = v26;
  sub_1000126EC((uint64_t)v11, v22 + v19, type metadata accessor for SafeLocation);
  *(_QWORD *)(v22 + v20) = v25;
  sub_1000126EC((uint64_t)v9, v22 + v21, type metadata accessor for SafeLocation);
  swift_retain();
  swift_retain();
  sub_100805690(v17, 0, (void (*)(char *))sub_10087EF08, v22, (uint64_t *)&unk_101106E30, type metadata accessor for SafeLocation, (uint64_t)sub_1007BE144, (uint64_t)sub_100882DC0, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_100809D40);
  return swift_release();
}

uint64_t sub_10080741C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a3;
  v25 = a2;
  v5 = type metadata accessor for LeashRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B77E8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = v27;
  sub_10005972C(v27, (uint64_t)v11, type metadata accessor for LeashRecord);
  sub_10005972C(a4, (uint64_t)v9, type metadata accessor for LeashRecord);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v20 + 8) & ~v18;
  v22 = swift_allocObject(&unk_101094D08, v21 + v7, v18 | 7);
  *(_QWORD *)(v22 + 16) = v26;
  sub_1000126EC((uint64_t)v11, v22 + v19, type metadata accessor for LeashRecord);
  *(_QWORD *)(v22 + v20) = v25;
  sub_1000126EC((uint64_t)v9, v22 + v21, type metadata accessor for LeashRecord);
  swift_retain();
  swift_retain();
  sub_100805690(v17, 0, (void (*)(char *))sub_100878DA8, v22, (uint64_t *)&unk_101106E50, type metadata accessor for LeashRecord, (uint64_t)sub_1007BE158, (uint64_t)sub_100882D70, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_100809EEC);
  return swift_release();
}

uint64_t sub_100807660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v27 = a3;
  v25 = a2;
  v5 = type metadata accessor for KeyAlignmentRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - v10;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B77E8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving record to cloud.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = v27;
  sub_10005972C(v27, (uint64_t)v11, type metadata accessor for KeyAlignmentRecord);
  sub_10005972C(a4, (uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v20 + 8) & ~v18;
  v22 = swift_allocObject(&unk_1010958E8, v21 + v7, v18 | 7);
  *(_QWORD *)(v22 + 16) = v26;
  sub_1000126EC((uint64_t)v11, v22 + v19, type metadata accessor for KeyAlignmentRecord);
  *(_QWORD *)(v22 + v20) = v25;
  sub_1000126EC((uint64_t)v9, v22 + v21, type metadata accessor for KeyAlignmentRecord);
  swift_retain();
  swift_retain();
  sub_100805690(v17, 0, (void (*)(char *))sub_10087D604, v22, &qword_1011082B0, type metadata accessor for KeyAlignmentRecord, (uint64_t)sub_100088F74, (uint64_t)sub_10087D34C, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_10080A098);
  return swift_release(v22);
}

void sub_1008078A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  NSObject *v48;
  uint64_t v49;
  uint8_t *v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];

  v16 = a6(0);
  __chkstk_darwin(v16);
  v18 = (char *)v51 - v17;
  v19 = sub_10001A9A8(a7);
  __chkstk_darwin(v19);
  v21 = (_QWORD *)((char *)v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v21, a7);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    v22 = a10;
    v23 = *v21;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v52 = a5;
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B77E8);
    swift_errorRetain(v23);
    v26 = swift_errorRetain(v23);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v51[0] = a10;
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v53 = v23;
      v54[0] = v30;
      v51[1] = v25;
      *(_DWORD *)v29 = 136446210;
      swift_errorRetain(v23);
      v31 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v32 = String.init<A>(describing:)(&v53, v31);
      v53 = sub_100016940(v32, v33, v54);
      v22 = v51[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Saving to cloud failed. Saving the status to disk record. %{public}s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }

    v42 = QueueSynchronizer.conditionalSync<A>(_:)(v22);
    __chkstk_darwin(v42);
    v51[-2] = v43;
    v51[-1] = v52;
    v44 = OS_dispatch_queue.sync<A>(execute:)(a11, &v51[-4], (char *)&type metadata for () + 8);
    v48 = Logger.logObject.getter(v44);
    v49 = static os_log_type_t.default.getter(v48);
    if (os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v49, "Saved LocalStorageBacked record", v50, 2u);
      swift_slowDealloc(v50, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {
      swift_errorRelease(v23);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v21, (uint64_t)v18, a6);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B77E8);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Saved to cloud. Updating local record", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    v39 = QueueSynchronizer.conditionalSync<A>(_:)(a8);
    __chkstk_darwin(v39);
    v51[-2] = v40;
    v51[-1] = v18;
    v41 = OS_dispatch_queue.sync<A>(execute:)(a9, &v51[-4], (char *)&type metadata for () + 8);
    v45 = Logger.logObject.getter(v41);
    v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Saved LocalStorageBacked record", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    sub_1000126B0((uint64_t)v18, a6);
  }
}

void sub_100808090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  NSObject *v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[2];

  v14 = a6(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - v15;
  v17 = sub_10001A9A8(a7);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v19, a7);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    v20 = *v19;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B77E8);
    swift_errorRetain(v20);
    v23 = swift_errorRetain(v20);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(12, -1);
      v51 = v22;
      v27 = (uint8_t *)v26;
      v28 = swift_slowAlloc(32, -1);
      v52 = v20;
      v53[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v50 = v27 + 4;
      swift_errorRetain(v20);
      v29 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v30 = String.init<A>(describing:)(&v52, v29);
      v52 = sub_100016940(v30, v31, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v50, v27 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Saving to cloud failed. Saving the status to disk record. %{public}s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_errorRelease(v20);
      swift_errorRelease(v20);
    }

    __chkstk_darwin(v40);
    *(&v49 - 2) = v41;
    *(&v49 - 1) = a5;
    v42 = OS_dispatch_queue.sync<A>(execute:)(a9, &v49 - 4, (char *)&type metadata for () + 8);
    v46 = Logger.logObject.getter(v42);
    v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v47, "Saved LocalStorageBacked record", v48, 2u);
      swift_slowDealloc(v48, -1, -1);

      swift_errorRelease(v20);
    }
    else
    {
      swift_errorRelease(v20);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v19, (uint64_t)v16, a6);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B77E8);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Saved to cloud. Updating local record", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    __chkstk_darwin(v37);
    *(&v49 - 2) = v38;
    *(&v49 - 1) = (uint64_t)v16;
    v39 = OS_dispatch_queue.sync<A>(execute:)(a8, &v49 - 4, (char *)&type metadata for () + 8);
    v43 = Logger.logObject.getter(v39);
    v44 = static os_log_type_t.default.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Saved LocalStorageBacked record", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    sub_1000126B0((uint64_t)v16, a6);
  }
}

void sub_10080883C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  NSObject *v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[2];

  v7 = type metadata accessor for KeyAlignmentRecord(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1011082B0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v12, &qword_1011082B0);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    v13 = *v12;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B77E8);
    swift_errorRetain(v13);
    v16 = swift_errorRetain(v13);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v42 = v13;
      v43[0] = v20;
      v41 = v15;
      *(_DWORD *)v19 = 136446210;
      swift_errorRetain(v13);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v22 = String.init<A>(describing:)(&v42, v21);
      v42 = sub_100016940(v22, v23, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving to cloud failed. Saving the status to disk record. %{public}s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_errorRelease(v13);
      swift_errorRelease(v13);
    }

    __chkstk_darwin(v32);
    *(&v41 - 2) = v33;
    *(&v41 - 1) = a5;
    v34 = OS_dispatch_queue.sync<A>(execute:)(sub_100882D40, &v41 - 4, (char *)&type metadata for () + 8);
    v38 = Logger.logObject.getter(v34);
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, (os_log_type_t)v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "Saved LocalStorageBacked record", v40, 2u);
      swift_slowDealloc(v40, -1, -1);

      swift_errorRelease(v13);
    }
    else
    {
      swift_errorRelease(v13);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B77E8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Saved to cloud. Updating local record", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    __chkstk_darwin(v29);
    *(&v41 - 2) = v30;
    *(&v41 - 1) = (uint64_t)v9;
    v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100882D40, &v41 - 4, (char *)&type metadata for () + 8);
    v35 = Logger.logObject.getter(v31);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved LocalStorageBacked record", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    sub_1000126B0((uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
  }
}

uint64_t sub_100808FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;

  v4 = v3;
  v8 = type metadata accessor for OwnedBeaconGroup(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA5C04(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  v15 = sub_1007FDEC4();
  v16 = sub_100BC4FF8(v14);
  swift_release(v15);
  v17 = swift_allocObject(&unk_101095BB8, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  swift_retain();
  v18 = Future.addFailure(block:)(sub_10087E4A0, v17);
  swift_release(v18);
  swift_release(v17);
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_101095BE0, v21 + 16, v19 | 7);
  *(_QWORD *)(v22 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v22 + v20, type metadata accessor for OwnedBeaconGroup);
  v23 = (_QWORD *)(v22 + v21);
  *v23 = a2;
  v23[1] = a3;
  swift_retain();
  swift_retain();
  v24 = Future.addSuccess(block:)(sub_10087E5B4, v22);

  swift_release(v16);
  swift_release(v24);
  return swift_release(v22);
}

uint64_t sub_10080918C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;

  v4 = v3;
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA5F20(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  v15 = sub_1007FDEC4();
  v16 = sub_100BC4FF8(v14);
  swift_release(v15);
  v17 = swift_allocObject(&unk_1010957A8, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  swift_retain();
  v18 = Future.addFailure(block:)(sub_10087CA80, v17);
  swift_release(v18);
  swift_release(v17);
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_1010957D0, v21 + 16, v19 | 7);
  *(_QWORD *)(v22 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v22 + v20, type metadata accessor for OwnedBeaconRecord);
  v23 = (_QWORD *)(v22 + v21);
  *v23 = a2;
  v23[1] = a3;
  swift_retain();
  swift_retain();
  v24 = Future.addSuccess(block:)(sub_10087CAA4, v22);

  swift_release(v16);
  swift_release(v24);
  return swift_release(v22);
}

uint64_t sub_100809338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;

  v4 = v3;
  v8 = type metadata accessor for BeaconNamingRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA6264(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  v15 = sub_1007FDEC4();
  v16 = sub_100BC4FF8(v14);
  swift_release(v15);
  v17 = swift_allocObject(&unk_101095910, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  swift_retain();
  v18 = Future.addFailure(block:)(sub_10087D6A4, v17);
  swift_release(v18);
  swift_release(v17);
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for BeaconNamingRecord);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_101095938, v21 + 16, v19 | 7);
  *(_QWORD *)(v22 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v22 + v20, type metadata accessor for BeaconNamingRecord);
  v23 = (_QWORD *)(v22 + v21);
  *v23 = a2;
  v23[1] = a3;
  swift_retain();
  swift_retain();
  v24 = Future.addSuccess(block:)(sub_10087D7B4, v22);

  swift_release(v16);
  swift_release(v24);
  return swift_release(v22);
}

uint64_t sub_1008094E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;

  v4 = v3;
  v8 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA66A4(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  v15 = sub_1007FDEC4();
  v16 = sub_100BC4FF8(v14);
  swift_release(v15);
  v17 = swift_allocObject(&unk_1010953C0, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  swift_retain();
  v18 = Future.addFailure(block:)(sub_10087BF48, v17);
  swift_release(v18);
  swift_release(v17);
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for OwnedDeviceKeyRecord);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_1010953E8, v21 + 16, v19 | 7);
  *(_QWORD *)(v22 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v22 + v20, type metadata accessor for OwnedDeviceKeyRecord);
  v23 = (_QWORD *)(v22 + v21);
  *v23 = a2;
  v23[1] = a3;
  swift_retain();
  swift_retain();
  v24 = Future.addSuccess(block:)(sub_10087C058, v22);

  swift_release(v16);
  swift_release(v24);
  return swift_release(v22);
}

uint64_t sub_100809690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t found;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v4 = v3;
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v9 = *(_QWORD *)(found - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(found);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA66E0(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1007FDEC4();
  sub_100BC4FF8(v14);
  swift_release();
  v15 = swift_allocObject(&unk_101096F90, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_10088257C, v15);
  swift_release();
  swift_release();
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for NotifyWhenFoundRecord);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_101096FB8, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v19 + v17, type metadata accessor for NotifyWhenFoundRecord);
  v20 = (_QWORD *)(v19 + v18);
  *v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_10088266C, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10080983C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v4 = v3;
  v8 = type metadata accessor for LostModeRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA5B38(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1007FDEC4();
  sub_100BC4FF8(v14);
  swift_release();
  v15 = swift_allocObject(&unk_101096DB0, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_100882080, v15);
  swift_release();
  swift_release();
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for LostModeRecord);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_101096DD8, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v19 + v17, type metadata accessor for LostModeRecord);
  v20 = (_QWORD *)(v19 + v18);
  *v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1008821A0, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1008099E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v4 = v3;
  v8 = type metadata accessor for ShareRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA5AB8(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1007FDEC4();
  sub_100BC4FF8(v14);
  swift_release();
  v15 = swift_allocObject(&unk_101095988, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_10087DA0C, v15);
  swift_release();
  swift_release();
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for ShareRecord);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1010959B0, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v19 + v17, type metadata accessor for ShareRecord);
  v20 = (_QWORD *)(v19 + v18);
  *v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_10087DB70, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100809B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v4 = v3;
  v8 = type metadata accessor for SharedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA65F0(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1007FDEC4();
  sub_100BC4FF8(v14);
  swift_release();
  v15 = swift_allocObject(&unk_101094DD0, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_100878FC8, v15);
  swift_release();
  swift_release();
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_101094DF8, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v19 + v17, type metadata accessor for SharedBeaconRecord);
  v20 = (_QWORD *)(v19 + v18);
  *v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1008791A0, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100809D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v4 = v3;
  v8 = type metadata accessor for SafeLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA5AF8(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1007FDEC4();
  sub_100BC4FF8(v14);
  swift_release();
  v15 = swift_allocObject(&unk_101095E38, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_10087ECBC, v15);
  swift_release();
  swift_release();
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for SafeLocation);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_101095E60, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v19 + v17, type metadata accessor for SafeLocation);
  v20 = (_QWORD *)(v19 + v18);
  *v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_10087EDAC, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100809EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v4 = v3;
  v8 = type metadata accessor for LeashRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA5774(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  sub_1007FDEC4();
  sub_100BC4FF8(v14);
  swift_release();
  v15 = swift_allocObject(&unk_101094CB8, 32, 7);
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_100878B8C, v15);
  swift_release();
  swift_release();
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for LeashRecord);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_101094CE0, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v19 + v17, type metadata accessor for LeashRecord);
  v20 = (_QWORD *)(v19 + v18);
  *v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100878C6C, v19);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10080A098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;

  v4 = v3;
  v8 = type metadata accessor for KeyAlignmentRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  sub_100CA62A0(a1);
  v14 = v13;
  objc_autoreleasePoolPop(v12);
  v15 = sub_1007FDEC4();
  v16 = sub_100BC4FF8(v14);
  swift_release(v15);
  v17 = swift_allocObject(&unk_101095898, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  swift_retain();
  v18 = Future.addFailure(block:)(sub_10087D368, v17);
  swift_release(v18);
  swift_release(v17);
  sub_10005972C(a1, (uint64_t)v11, type metadata accessor for KeyAlignmentRecord);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_1010958C0, v21 + 16, v19 | 7);
  *(_QWORD *)(v22 + 16) = v4;
  sub_1000126EC((uint64_t)v11, v22 + v20, type metadata accessor for KeyAlignmentRecord);
  v23 = (_QWORD *)(v22 + v21);
  *v23 = a2;
  v23[1] = a3;
  swift_retain();
  swift_retain();
  v24 = Future.addSuccess(block:)(sub_10087D47C, v22);

  swift_release(v16);
  swift_release(v24);
  return swift_release(v22);
}

uint64_t sub_10080A244(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a3;
  v7 = sub_10001A9A8(a4);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = static os_log_type_t.error.getter(v8);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v12 = qword_1011B7D38;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  v21 = a1;
  swift_errorRetain(a1);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v16 = String.init<A>(describing:)(&v21, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Save failed: %@", 15, 2, v14, v20);
  swift_bridgeObjectRelease();
  *v10 = a1;
  swift_storeEnumTagMultiPayload(v10, v7, 1);
  swift_errorRetain(a1);
  a2(v10);
  return sub_100004048((uint64_t)v10, a4);
}

uint64_t sub_10080A3D4(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t *a6, uint64_t (*a7)(_QWORD), void (*a8)(id), uint64_t a9)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *);
  uint64_t *v35;
  void (*v36)(id);

  v35 = a6;
  v36 = a8;
  v33 = a5;
  v34 = a4;
  v29 = a3;
  v30 = a2;
  v32 = sub_10001A9A8(a6);
  __chkstk_darwin(v32);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a7;
  v13 = a7(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v27 - v15;
  v17 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v18 = qword_1011B7D38;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v19, 72, 7);
  v31 = xmmword_100E22B00;
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v20 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
  *(_QWORD *)(v20 + 64) = sub_10001AC90((unint64_t *)&qword_1010ED720, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v20 + 32) = a1;
  v21 = a1;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Saved record %@", 15, 2, v20);
  swift_bridgeObjectRelease();
  v22 = v21;
  v36(v22);
  v23 = v30;
  v24 = __chkstk_darwin(a9);
  *(&v27 - 4) = v29;
  *(&v27 - 3) = v23;
  *(&v27 - 2) = (uint64_t)v16;
  OS_dispatch_queue.sync<A>(execute:)(v24, &v27 - 6, (char *)&type metadata for () + 8);
  v25 = v28;
  sub_10005972C((uint64_t)v16, (uint64_t)v12, v28);
  swift_storeEnumTagMultiPayload(v12, v32, 0);
  v34(v12);
  sub_100004048((uint64_t)v12, v35);
  sub_1007EF48C();
  return sub_1000126B0((uint64_t)v16, v25);
}

uint64_t sub_10080A728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v9[4];

  QueueSynchronizer.conditionalSync<A>(_:)(a4);
  v9[2] = *(_QWORD *)(a2 + 160);
  v9[3] = a3;
  return OS_dispatch_queue.sync<A>(execute:)(a5, v9, (char *)&type metadata for () + 8);
}

void sub_10080A7A4(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t (**v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52[2];

  v50 = a1;
  v51 = a5;
  v48 = a3;
  v49 = a4;
  v45 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v45);
  v46 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharedBeaconRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v47 = (char *)&v43 - v13;
  v14 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v15 = qword_1011B7D38;
  v44 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v44, 72, 7);
  v17 = v16;
  v43 = xmmword_100E22B00;
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  if ((a2 & 1) != 0)
    v18 = 1702195828;
  else
    v18 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v19 = 0xE400000000000000;
  else
    v19 = 0xE500000000000000;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v19;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Modify record. Disk First? (%@)", 31, 2, v17, v43);
  swift_bridgeObjectRelease();
  v20 = objc_autoreleasePoolPush();
  if ((a2 & 1) != 0)
  {
    v21 = v50;
    sub_100CA65F0(v50);
    v23 = v22;
    objc_autoreleasePoolPop(v20);
    v52[0] = v23;
    v24 = (uint64_t)v47;
    sub_10005972C(v21, (uint64_t)v47, type metadata accessor for SharedBeaconRecord);
    v48(v24);
    sub_1007B5B44(v52, v24);
    v25 = v51;
    v26 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    __chkstk_darwin(v26);
    *((_QWORD *)&v43 - 2) = v27;
    *((_QWORD *)&v43 - 1) = v24;
    OS_dispatch_queue.sync<A>(execute:)(sub_1007BE16C, &v43 - 2, &type metadata for () + 1);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    sub_1007EEF64(8);
    v41 = v46;
    sub_10005972C(v24, v46, type metadata accessor for SharedBeaconRecord);
    swift_storeEnumTagMultiPayload(v41, v45, 0);
    sub_100CB4864(v41);
    sub_100004048(v41, &qword_1010F21B0);
    v42 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v42);
    *((_QWORD *)&v43 - 4) = v25;
    *((_QWORD *)&v43 - 3) = v52;
    *((_QWORD *)&v43 - 2) = v21;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_1008799B0, &v43 - 3);
    sub_1000126B0(v24, type metadata accessor for SharedBeaconRecord);

  }
  else
  {
    v28 = v50;
    sub_100CA65F0(v50);
    v47 = v29;
    objc_autoreleasePoolPop(v20);
    sub_1007FDEC4();
    sub_10005972C(v28, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
    v30 = *(unsigned __int8 *)(v8 + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = v30 | 7;
    v33 = swift_allocObject(&unk_101094E98, v31 + v9, v30 | 7);
    v34 = v49;
    *(_QWORD *)(v33 + 16) = v48;
    *(_QWORD *)(v33 + 24) = v34;
    sub_1000126EC((uint64_t)v11, v33 + v31, type metadata accessor for SharedBeaconRecord);
    swift_retain();
    v35 = v47;
    sub_100BC910C(v47, (void (*)(id *))sub_1008797C8, v33);
    swift_release();
    swift_release();
    Future.addFailure(block:)(sub_10080B364, 0);
    swift_release();
    sub_10005972C(v28, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
    v36 = (v30 + 16) & ~v30;
    v37 = (v9 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    v39 = swift_allocObject(&unk_101094EC0, v38 + 16, v32);
    sub_1000126EC((uint64_t)v11, v39 + v36, type metadata accessor for SharedBeaconRecord);
    *(_QWORD *)(v39 + v37) = v51;
    v40 = (uint64_t (**)(uint64_t))(v39 + v38);
    *v40 = sub_100CB4864;
    v40[1] = 0;
    swift_retain();
    Future.addSuccess(block:)(sub_10087999C, v39);

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_10080AD54(uint64_t a1, char a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  void (*v40)(uint64_t);
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (**v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  id v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(uint64_t);
  void (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61[2];

  v59 = a1;
  v60 = a5;
  v56 = a3;
  v57 = a4;
  v52 = sub_10001A9A8((uint64_t *)&unk_101108180);
  __chkstk_darwin(v52);
  v53 = (uint64_t)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ShareRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v55 = (char *)&v49 - v14;
  v15 = swift_allocObject(&unk_101095C58, 24, 7);
  v58 = v15;
  v54 = a6;
  *(_QWORD *)(v15 + 16) = a6;
  v16 = static os_log_type_t.default.getter(v15);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v17 = qword_1011B7D38;
  v51 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v51, 72, 7);
  v19 = (_QWORD *)v18;
  v49 = xmmword_100E22B00;
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  if ((a2 & 1) != 0)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v50 = sub_10001AA00();
  v19[8] = v50;
  v19[4] = v20;
  v19[5] = v21;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Modify record. Disk First? (%@)", 31, 2, v19, v49, v50);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    v22 = objc_autoreleasePoolPush();
    v23 = v59;
    sub_100CA5AB8(v59);
    v25 = v24;
    objc_autoreleasePoolPop(v22);
    v61[0] = v25;
    v26 = v55;
    sub_10005972C(v23, (uint64_t)v55, type metadata accessor for ShareRecord);
    *(_QWORD *)&v26[*(int *)(v9 + 44)] = v54;
    v27 = sub_100790BEC(v61, (uint64_t)v26);
    v28 = v60;
    __chkstk_darwin(v27);
    *((_QWORD *)&v49 - 2) = v29;
    *((_QWORD *)&v49 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_1007BE180, &v49 - 2, &type metadata for () + 1);
    sub_1007EEF64(8);
    v46 = v53;
    sub_10005972C((uint64_t)v26, v53, type metadata accessor for ShareRecord);
    swift_storeEnumTagMultiPayload(v46, v52, 0);
    v56(v46);
    sub_100004048(v46, (uint64_t *)&unk_101108180);
    v47 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v47);
    *((_QWORD *)&v49 - 4) = v28;
    *((_QWORD *)&v49 - 3) = v61;
    *((_QWORD *)&v49 - 2) = v23;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_10087EA40, &v49 - 3);
    sub_1000126B0((uint64_t)v26, type metadata accessor for ShareRecord);
    v48 = v61[0];
    swift_release();

  }
  else
  {
    v30 = objc_autoreleasePoolPush();
    v31 = v59;
    sub_100CA5AB8(v59);
    v33 = v32;
    v55 = v32;
    objc_autoreleasePoolPop(v30);
    sub_1007FDEC4();
    sub_10005972C(v31, (uint64_t)v13, type metadata accessor for ShareRecord);
    v34 = *(unsigned __int8 *)(v10 + 80);
    v35 = (v34 + 32) & ~v34;
    v54 = v34 | 7;
    v36 = swift_allocObject(&unk_101095C80, v35 + v11, v34 | 7);
    v37 = v58;
    *(_QWORD *)(v36 + 16) = sub_10087E790;
    *(_QWORD *)(v36 + 24) = v37;
    sub_1000126EC((uint64_t)v13, v36 + v35, type metadata accessor for ShareRecord);
    swift_retain();
    sub_100BC910C(v33, (void (*)(id *))sub_10087E8C4, v36);
    swift_release();
    swift_release();
    v38 = swift_allocObject(&unk_101095CA8, 32, 7);
    v39 = v56;
    v40 = v57;
    *(_QWORD *)(v38 + 16) = v56;
    *(_QWORD *)(v38 + 24) = v40;
    swift_retain();
    Future.addFailure(block:)(sub_10087E8D8, v38);
    swift_release();
    swift_release();
    sub_10005972C(v31, (uint64_t)v13, type metadata accessor for ShareRecord);
    v41 = (v34 + 16) & ~v34;
    v42 = (v11 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
    v44 = swift_allocObject(&unk_101095CD0, v43 + 16, v54);
    sub_1000126EC((uint64_t)v13, v44 + v41, type metadata accessor for ShareRecord);
    *(_QWORD *)(v44 + v42) = v60;
    v45 = (void (**)(uint64_t))(v44 + v43);
    *v45 = v39;
    v45[1] = v40;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_10087EA2C, v44);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_10080B364(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = sub_10001A9A8(&qword_1010F21B0);
  v3 = __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = static os_log_type_t.error.getter(v3);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v7 = qword_1011B7D38;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v16 = a1;
  swift_errorRetain(a1);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v11 = String.init<A>(describing:)(&v16, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Update failed: %@", 17, 2, v9);
  swift_bridgeObjectRelease();
  *v5 = a1;
  swift_storeEnumTagMultiPayload(v5, v2, 1);
  swift_errorRetain(a1);
  sub_100CB4864((uint64_t)v5);
  return sub_100004048((uint64_t)v5, &qword_1010F21B0);
}

uint64_t sub_10080B4E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 64);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v1 = static os_log_type_t.info.getter(v7);
  if (qword_1010EA260 != -1)
LABEL_5:
    swift_once(&qword_1010EA260, sub_100B5DA30);
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1011B7D40, "Received IDS push to refresh CloudKit state", 43, 2, _swiftEmptyArrayStorage);
  v8 = *(_QWORD *)(sub_1007FDEC4() + 120);
  v9 = *(_QWORD *)(v8 + 16);
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100880470, v8, v9, &type metadata for () + 1, &type metadata for () + 1);
  swift_release();
  return swift_release();
}

uint64_t sub_10080B648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v40 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v36 - v12;
  v39 = static os_log_type_t.info.getter(v11);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v14 = qword_1011B7D38;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  v37 = a1;
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v14, "beaconRecord(for uuid: %@)", 26, 2, v16);
  v20 = swift_bridgeObjectRelease(v16);
  static SystemInfo.lockState.getter(v20);
  v21 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v7);
  v22 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v16) = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v7, v22);
  v23 = *(void (**)(char *, uint64_t))(v21 + 8);
  v23(v10, v7);
  v24 = ((uint64_t (*)(char *, uint64_t))v23)(v13, v7);
  if ((v16 & 1) != 0)
  {
    v25 = static os_log_type_t.default.getter(v24);
    result = os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D38, "beaconRecord call failed because in device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
    v27 = (_OWORD *)v38;
    *(_QWORD *)(v38 + 32) = 0;
    *v27 = 0u;
    v27[1] = 0u;
  }
  else
  {
    v28 = sub_100017368();
    v29 = v28;
    v30 = *(_QWORD *)(v28 + 16);
    v31 = v37;
    if (v30)
    {
      v32 = v28 + 32;
      while (1)
      {
        sub_100030784(v32, (uint64_t)&v41);
        v33 = v42;
        v34 = v43;
        sub_10001AA44(&v41, v42);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 8) + 32))(v33);
        LOBYTE(v33) = static UUID.== infix(_:_:)(v6, v31);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        if ((v33 & 1) != 0)
          break;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v41);
        v32 += 40;
        if (!--v30)
          goto LABEL_9;
      }
      sub_10000F9FC(&v41, v38);
    }
    else
    {
LABEL_9:
      v35 = (_OWORD *)v38;
      *(_QWORD *)(v38 + 32) = 0;
      *v35 = 0u;
      v35[1] = 0u;
    }
    return swift_bridgeObjectRelease(v29);
  }
  return result;
}

uint64_t sub_10080B950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a2;
  v3 = type metadata accessor for OwnedBeaconRecord(0);
  v37 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v36 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v33 - v11;
  v35 = static os_log_type_t.info.getter(v10);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v13 = qword_1011B7D38;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = UUID.uuidString.getter(v15);
  v18 = v17;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v13, "ownedBeaconRecord(for uuid: %@)", 31, 2, v15);
  v19 = swift_bridgeObjectRelease(v15);
  static SystemInfo.lockState.getter(v19);
  v20 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v9, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  v21 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v16) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v21);
  v22 = *(void (**)(char *, uint64_t))(v20 + 8);
  v22(v9, v6);
  v23 = ((uint64_t (*)(char *, uint64_t))v22)(v12, v6);
  if ((v16 & 1) != 0)
  {
    v24 = static os_log_type_t.default.getter(v23);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D38, "ownedBeaconRecord call failed because in device is in beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v34, 1, 1, v3);
  }
  else
  {
    v26 = sub_1000188D0();
    v27 = v26;
    v28 = *((_QWORD *)v26 + 2);
    v29 = v37;
    if (v28)
    {
      v30 = (uint64_t)&v26[(*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80)];
      v31 = *(_QWORD *)(v37 + 72);
      while (1)
      {
        sub_10005972C(v30, (uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
        if ((static UUID.== infix(_:_:)(&v5[*(int *)(v3 + 20)], a1) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
        v30 += v31;
        if (!--v28)
          goto LABEL_9;
      }
      v32 = v34;
      sub_1000126EC((uint64_t)v5, v34, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v3);
    }
    else
    {
LABEL_9:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v34, 1, 1, v3);
    }
    return swift_bridgeObjectRelease(v27);
  }
}

_QWORD *sub_10080BC6C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];

  v3 = v2;
  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  v13 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  sub_10001BBBC(a1, a2);
  v18 = sub_10001BBBC(a1, a2);
  v43 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v40 = v10;
    v41 = v7;
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    v45[0] = v39;
    *(_DWORD *)v21 = 136315138;
    v22 = sub_10001BBBC(a1, a2);
    static String.Encoding.utf8.getter(v22);
    v23 = String.init(data:encoding:)(a1, a2, v15);
    v42 = v3;
    if (!v24)
      v23 = Data.hexString.getter(a1, a2);
    v25 = v23;
    v26 = v24;
    sub_10001BC14(a1, a2);
    v44 = sub_100016940(v25, v26, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "ownedBeaconGroups(serialNumber: %s", v21, 0xCu);
    v27 = v39;
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    v7 = v41;
    v10 = v40;
  }
  else
  {
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);

  }
  static SystemInfo.lockState.getter(v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  v29 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v30 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v6, v29);
  v31 = *(void (**)(char *, uint64_t))(v7 + 8);
  v31(v10, v6);
  v32 = ((uint64_t (*)(char *, uint64_t))v31)(v12, v6);
  if ((v30 & 1) != 0)
  {
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "ownedBeaconGroup call failed because in device is in beforeFirstUnlock state", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    return _swiftEmptyArrayStorage;
  }
  else
  {
    v37 = sub_1000188D0();
    sub_10001BBBC(a1, a2);
    v36 = sub_10085D120((uint64_t)v37, a1, a2);
    sub_10001BC14(a1, a2);
    swift_bridgeObjectRelease();
  }
  return v36;
}

uint64_t sub_10080C058@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, void *, uint64_t);
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  char v77;
  void (*v78)(char *, void *, uint64_t);
  char *v79;
  char *v80;
  char *v81;
  char v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  Swift::String v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, void *, uint64_t);
  char *v137;
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147[8];
  uint64_t v148;

  v135 = a2;
  v119 = type metadata accessor for URL(0);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v140 = (char *)&v114 - v8;
  v9 = sub_10001A9A8(&qword_1010ED860);
  v10 = __chkstk_darwin(v9);
  v129 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v114 - v12;
  v116 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v14 = __chkstk_darwin(v116);
  v121 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v122 = (uint64_t)&v114 - v17;
  __chkstk_darwin(v16);
  v124 = (uint64_t)&v114 - v18;
  v145 = type metadata accessor for SharedBeaconRecord(0);
  v139 = *(_QWORD *)(v145 - 8);
  v19 = __chkstk_darwin(v145);
  v120 = (uint64_t)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v141 = (char *)&v114 - v22;
  __chkstk_darwin(v21);
  v131 = (uint64_t)&v114 - v23;
  v24 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v134 = *(char **)(v24 - 8);
  v25 = __chkstk_darwin(v24);
  v142 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v132 = (char *)&v114 - v27;
  v144 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v144 - 8);
  v29 = __chkstk_darwin(v144);
  v31 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v29);
  v137 = (char *)&v114 - v33;
  v34 = __chkstk_darwin(v32);
  v133 = (char *)&v114 - v35;
  v36 = __chkstk_darwin(v34);
  v126 = (char *)&v114 - v37;
  __chkstk_darwin(v36);
  v39 = (char *)&v114 - v38;
  v40._countAndFlagsBits = 0xD00000000000001ELL;
  v40._object = (void *)0x8000000100EE8890;
  prohibitAsyncContext(functionName:)(v40);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v41 = type metadata accessor for Logger(0);
  v42 = sub_10001A9E8(v41, (uint64_t)qword_1011B77E8);
  v43 = *(void (**)(char *, void *, uint64_t))(v28 + 16);
  v143 = a1;
  v136 = v43;
  v44 = ((uint64_t (*)(char *, void *, uint64_t))v43)(v39, a1, v144);
  v125 = v42;
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.info.getter(v45);
  v47 = os_log_type_enabled(v45, v46);
  v128 = v7;
  v127 = v31;
  if (v47)
  {
    v48 = swift_slowAlloc(22, -1);
    v115 = swift_slowAlloc(32, -1);
    v148 = v115;
    *(_DWORD *)v48 = 141558275;
    v146 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v48 + 4, v48 + 12);
    *(_WORD *)(v48 + 12) = 2081;
    v138 = (void (*)(char *, uint64_t))(v48 + 14);
    v49 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v50 = v144;
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v144, v49);
    v146 = sub_100016940(v51, v52, &v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v138, v48 + 22);
    swift_bridgeObjectRelease();
    v138 = *(void (**)(char *, uint64_t))(v28 + 8);
    v138(v39, v50);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "legacySharedBeaconRecord(for uuid: %{private,mask.hash}s", (uint8_t *)v48, 0x16u);
    v53 = v115;
    swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    v138 = *(void (**)(char *, uint64_t))(v28 + 8);
    v138(v39, v144);
  }

  v54 = v28;
  v55 = v132;
  static SystemInfo.lockState.getter(v56);
  v57 = v134;
  v58 = v142;
  (*((void (**)(char *, _QWORD, uint64_t))v134 + 13))(v142, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v24);
  v59 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v60 = dispatch thunk of static Equatable.== infix(_:_:)(v55, v58, v24, v59);
  v61 = (void (*)(char *, uint64_t))*((_QWORD *)v57 + 1);
  v61(v58, v24);
  v62 = ((uint64_t (*)(char *, uint64_t))v61)(v55, v24);
  v63 = v133;
  if ((v60 & 1) != 0)
  {
    v64 = Logger.logObject.getter(v62);
    v65 = static os_log_type_t.error.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "legacySharedBeaconRecord call failed because in device is in beforeFirstUnlock state", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v135, 1, 1, v145);
  }
  v134 = sub_1000181C8();
  v68 = *((_QWORD *)v134 + 2);
  v69 = v145;
  v70 = (uint64_t)v140;
  v71 = (uint64_t)v141;
  v72 = v126;
  if (!v68)
  {
LABEL_20:
    v84 = v54;
    v85 = v139;
    v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
    v87 = v124;
    v86(v124, 1, 1, v69);
    goto LABEL_23;
  }
  v73 = (uint64_t)&v134[(*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80)];
  v142 = *(char **)(v139 + 72);
  v123 = v54;
  while (1)
  {
    sub_10005972C(v73, v71, type metadata accessor for SharedBeaconRecord);
    sub_10000F9B8(v71 + *(int *)(v69 + 80), v70, (uint64_t *)&unk_1010F47B0);
    v74 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 48))(v70, 1, v74) == 1)
    {
      sub_100004048(v70, (uint64_t *)&unk_1010F47B0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v13, 1, 1, v144);
LABEL_13:
      sub_100004048((uint64_t)v13, &qword_1010ED860);
      if ((static UUID.== infix(_:_:)(v71 + *(int *)(v145 + 20), v143) & 1) != 0)
        goto LABEL_22;
      goto LABEL_14;
    }
    sub_10000F9B8(v70 + *(int *)(v74 + 20), (uint64_t)v13, &qword_1010ED860);
    sub_1000126B0(v70, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v13, 1, v144) == 1)
      goto LABEL_13;
    v75 = v144;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v72, v13, v144);
    v76 = v143;
    v77 = static UUID.== infix(_:_:)(v71 + *(int *)(v145 + 20), v143);
    v78 = v136;
    v136(v63, v72, v75);
    v79 = v72;
    v80 = v63;
    v81 = v137;
    v78(v137, v76, v75);
    if ((v77 & 1) != 0)
      break;
    v82 = static UUID.== infix(_:_:)(v80, v81);
    v83 = v138;
    v138(v81, v75);
    v83(v80, v75);
    v83(v79, v75);
    v54 = v123;
    v63 = v80;
    v72 = v79;
    v70 = (uint64_t)v140;
    v71 = (uint64_t)v141;
    if ((v82 & 1) != 0)
      goto LABEL_22;
LABEL_14:
    sub_1000126B0(v71, type metadata accessor for SharedBeaconRecord);
    v73 += (uint64_t)v142;
    --v68;
    v69 = v145;
    if (!v68)
      goto LABEL_20;
  }
  v88 = v138;
  v138(v81, v75);
  v88(v80, v75);
  v88(v79, v75);
  v54 = v123;
  v71 = (uint64_t)v141;
LABEL_22:
  v84 = v54;
  v87 = v124;
  sub_1000126EC(v71, v124, type metadata accessor for SharedBeaconRecord);
  v85 = v139;
  v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
  v69 = v145;
  v86(v87, 0, 1, v145);
LABEL_23:
  swift_bridgeObjectRelease();
  v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  v90 = v89(v87, 1, v69) == 1;
  v91 = v131;
  v92 = v87;
  v94 = (uint64_t)v128;
  v93 = (uint64_t)v129;
  v95 = v127;
  if (!v90)
  {
    sub_1000126EC(v92, v131, type metadata accessor for SharedBeaconRecord);
    sub_10000F9B8(v91 + *(int *)(v69 + 80), v94, (uint64_t *)&unk_1010F47B0);
    v96 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 48))(v94, 1, v96);
    if (v97 == 1)
    {
      sub_100004048(v94, (uint64_t *)&unk_1010F47B0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v93, 1, 1, v144);
      v98 = (uint64_t)v121;
      goto LABEL_29;
    }
    sub_10000F9B8(v94 + *(int *)(v96 + 20), v93, &qword_1010ED860);
    sub_1000126B0(v94, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v93, 1, v144);
    v98 = (uint64_t)v121;
    if (v99 == 1)
    {
LABEL_29:
      sub_100004048(v93, &qword_1010ED860);
      v100 = v122;
      sub_10005972C(v91, v122, type metadata accessor for SharedBeaconRecord);
      v86(v100, 0, 1, v69);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v95, v93, v144);
      v101 = *(_QWORD *)(v130 + 160);
      if (qword_1010EA5B8 != -1)
        swift_once(&qword_1010EA5B8, sub_100D3AD18);
      v102 = v119;
      v103 = sub_10001A9E8(v119, (uint64_t)qword_1011B8448);
      v104 = v118;
      v105 = v117;
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v117, v103, v102);
      v106._object = (void *)0x8000000100ED68C0;
      v106._countAndFlagsBits = 0xD000000000000014;
      prohibitAsyncContext(functionName:)(v106);
      v148 = v69;
      v107 = sub_10001A9A8(&qword_1010ECA78);
      v108 = String.init<A>(describing:)(&v148, v107);
      v110 = v109;
      v111 = objc_autoreleasePoolPush();
      v142 = (char *)&v114;
      v143 = v111;
      __chkstk_darwin(v111);
      *(&v114 - 6) = v101;
      *(&v114 - 5) = (uint64_t)v95;
      *(&v114 - 4) = (uint64_t)v105;
      *(&v114 - 3) = v108;
      *(&v114 - 2) = v110;
      v100 = v122;
      OS_dispatch_queue.sync<A>(execute:)(sub_10087FC8C, &v114 - 8, v116);
      v69 = v145;
      objc_autoreleasePoolPop(v143);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v102);
      v138(v95, v144);
      v98 = (uint64_t)v121;
      v91 = v131;
    }
    sub_10000F9B8(v100, v98, (uint64_t *)&unk_1010EE180);
    if (v89(v98, 1, v69) == 1)
    {
      sub_1000126B0(v91, type metadata accessor for SharedBeaconRecord);
      sub_100004048(v98, (uint64_t *)&unk_1010EE180);
      return sub_100005CF0(v100, v135, (uint64_t *)&unk_1010EE180);
    }
    v112 = v120;
    sub_1000126EC(v98, v120, type metadata accessor for SharedBeaconRecord);
    v113 = *(unsigned __int8 *)(v112 + *(int *)(v69 + 64));
    sub_1000126B0(v112, type metadata accessor for SharedBeaconRecord);
    v100 = v122;
    sub_1000126B0(v91, type metadata accessor for SharedBeaconRecord);
    if (v113 == 1)
      return sub_100005CF0(v100, v135, (uint64_t *)&unk_1010EE180);
    v92 = v100;
  }
  sub_100004048(v92, (uint64_t *)&unk_1010EE180);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v86)(v135, 1, 1, v69);
}

uint64_t sub_10080CD54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint8_t *v40;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v54 = a2;
  v3 = type metadata accessor for SharedBeaconRecord(0);
  v59 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v57 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v56 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v55 = (char *)&v49 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B77E8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v58 = a1;
  v17 = v16(v13, a1, v10);
  v53 = v15;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(32, -1);
    v51 = v21;
    *(_DWORD *)v20 = 141558275;
    v60 = 1752392040;
    v61 = v21;
    v52 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v50 = v20 + 14;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v10, v22);
    v25 = v24;
    v60 = sub_100016940(v23, v24, &v61);
    v3 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v50, v20 + 22);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "sharedBeaconRecord(for uuid: %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
    v26 = v51;
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  v27 = v55;
  static SystemInfo.lockState.getter(v28);
  v30 = v56;
  v29 = v57;
  (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  v31 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)(v27, v30, v6, v31);
  v33 = *(void (**)(char *, uint64_t))(v29 + 8);
  v33(v30, v6);
  v34 = ((uint64_t (*)(char *, uint64_t))v33)(v27, v6);
  v35 = v58;
  if ((v32 & 1) != 0)
  {
    v36 = Logger.logObject.getter(v34);
    v37 = static os_log_type_t.error.getter(v36);
    v38 = os_log_type_enabled(v36, v37);
    v39 = v59;
    if (v38)
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "sharedBeaconRecord call failed because in device is in beforeFirstUnlock state", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v54, 1, 1, v3);
  }
  else
  {
    v42 = sub_1000181C8();
    v43 = v42;
    v44 = *((_QWORD *)v42 + 2);
    v45 = v59;
    if (v44)
    {
      v46 = (uint64_t)&v42[(*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80)];
      v47 = *(_QWORD *)(v59 + 72);
      while (1)
      {
        sub_10005972C(v46, (uint64_t)v5, type metadata accessor for SharedBeaconRecord);
        if ((static UUID.== infix(_:_:)(&v5[*(int *)(v3 + 20)], v35) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
        v46 += v47;
        if (!--v44)
          goto LABEL_14;
      }
      v48 = v54;
      sub_1000126EC((uint64_t)v5, v54, type metadata accessor for SharedBeaconRecord);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v48, 0, 1, v3);
    }
    else
    {
LABEL_14:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v54, 1, 1, v3);
    }
    return swift_bridgeObjectRelease(v43);
  }
}

_QWORD *sub_10080D208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];

  v0 = sub_10001A9A8(&qword_10110EE80);
  __chkstk_darwin(v0);
  v2 = (_QWORD *)((char *)v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for StableIdentifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B11004(v5, v2);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    v8 = sub_100004048((uint64_t)v2, &qword_10110EE80);
    v9 = static os_log_type_t.error.getter(v8);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v10 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D28, "Local beaconing record Stable Identifier not found.", 51, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    sub_1000126EC((uint64_t)v2, (uint64_t)v7, type metadata accessor for StableIdentifier);
    v11 = objc_autoreleasePoolPush();
    v12 = sub_1000188D0();
    __chkstk_darwin(v12);
    v15[-2] = v7;
    v15[0] = sub_10008B550((uint64_t (*)(char *))sub_1008803D4, &v15[-4], v13);
    swift_bridgeObjectRetain(v15[0]);
    sub_1007F76C8(v15);
    swift_bridgeObjectRelease();
    v10 = (_QWORD *)v15[0];
    objc_autoreleasePoolPop(v11);
    sub_1000126B0((uint64_t)v7, type metadata accessor for StableIdentifier);
  }
  return v10;
}

_QWORD *sub_10080D3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *result;
  _QWORD v21[2];

  v0 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v0);
  v2 = (_QWORD *)((char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v4 = objc_msgSend(v3, "aa_primaryAppleAccount");

  if (!v4)
    goto LABEL_8;
  v5 = objc_msgSend(v4, "aa_altDSID");
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v9 = v8;

    v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v10 = v7 & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      *v2 = v7;
      v2[1] = v9;
      swift_storeEnumTagMultiPayload(v2, v0, 4);
      v11 = objc_autoreleasePoolPush();
      v12 = sub_1000188D0();
      __chkstk_darwin(v12);
      v21[-2] = v2;
      v21[0] = sub_10008B550((uint64_t (*)(char *))sub_1008803D4, &v21[-4], v13);
      swift_bridgeObjectRetain(v21[0]);
      sub_1007F76C8(v21);
      swift_bridgeObjectRelease();
      v14 = v21[0];
      objc_autoreleasePoolPop(v11);

      sub_1000126B0((uint64_t)v2, type metadata accessor for StableIdentifier);
      return (_QWORD *)v14;
    }

    swift_bridgeObjectRelease();
LABEL_8:
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7A18);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Could not obtain aa_primaryAppleAccount!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  result = (_QWORD *)swift_release(v21[0]);
  __break(1u);
  return result;
}

uint64_t sub_10080D650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  v8 = sub_100C6F9A8();
  if ((v8 & 1) == 0)
    return 1;
  v9 = a1 + *(int *)(v7 + 20);
  __chkstk_darwin(v8);
  *(&v22 - 2) = a2;
  *(&v22 - 1) = v9;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
  v10 = type metadata accessor for BeaconNamingRecord(0);
  v11 = 1;
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v6, 1, v10);
  v13 = sub_100004048((uint64_t)v6, (uint64_t *)&unk_101105880);
  if (v12 == 1)
  {
    v14 = static os_log_type_t.info.getter(v13);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v15 = qword_1011B7D38;
    v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_10001AA00();
    *(_QWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 40) = v20;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Filtering out OwnedBeaconRecord for %@ since associated BeaconNamingRecord is missing.", 86, 2, v17);
    swift_bridgeObjectRelease(v17);
    return 0;
  }
  return v11;
}

uint64_t sub_10080D84C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v56;
  unint64_t v57;
  void (*v58)(unint64_t, uint64_t);
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  void (*v84)(uint64_t, char *, uint64_t);
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  unint64_t v90;
  int v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(unint64_t, char *, uint64_t);
  uint64_t v103;
  uint64_t *v104;
  _QWORD *v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  char v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t result;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t *v143;
  uint64_t *v144;
  void (*v145)(unint64_t, char *, uint64_t);
  char *v146;
  unsigned int (*v147)(uint64_t, uint64_t, uint64_t);
  char *v148;
  unint64_t v149;
  void (*v150)(unint64_t, uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE v157[16];
  char v158[8];
  char v159[8];
  _QWORD *v160;

  v132 = type metadata accessor for DispatchPredicate(0);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (uint64_t *)((char *)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010ED860);
  v11 = __chkstk_darwin(v10);
  v134 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v138 = (char *)&v128 - v14;
  v15 = __chkstk_darwin(v13);
  v135 = (char *)&v128 - v16;
  v17 = __chkstk_darwin(v15);
  v140 = (char *)&v128 - v18;
  __chkstk_darwin(v17);
  v141 = (char *)&v128 - v19;
  v20 = type metadata accessor for UUID(0);
  v151 = *(_QWORD *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v137 = (char *)&v128 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v152 = (uint64_t)&v128 - v24;
  v25 = __chkstk_darwin(v23);
  v139 = (char *)&v128 - v26;
  v27 = __chkstk_darwin(v25);
  v149 = (unint64_t)&v128 - v28;
  __chkstk_darwin(v27);
  v154 = (char *)&v128 - v29;
  v156 = type metadata accessor for SharedBeaconRecord(0);
  v30 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v32 = (char *)&v128 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = a1;
  v33 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper);
  v144 = (uint64_t *)(v33 + 16);
  swift_beginAccess(v33 + 16, v159, 1, 0);
  v34 = *(_QWORD *)(v33 + 16);
  *(_QWORD *)(v33 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v34);
  v143 = (uint64_t *)(v33 + 24);
  swift_beginAccess(v33 + 24, v158, 1, 0);
  v35 = *(_QWORD *)(v33 + 24);
  *(_QWORD *)(v33 + 24) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v35);
  v36 = *(char **)(a2 + 16);
  if (v36)
  {
    v129 = a3;
    v37 = a2 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    v155 = *(_QWORD *)(v30 + 72);
    v128 = a2;
    swift_bridgeObjectRetain(a2);
    v38 = (uint64_t)v141;
    v39 = (_QWORD *)v151;
    v136 = v9;
    v142 = v32;
    while (1)
    {
      sub_10005972C(v37, (uint64_t)v32, type metadata accessor for SharedBeaconRecord);
      sub_10000F9B8((uint64_t)&v32[*(int *)(v156 + 80)], (uint64_t)v9, (uint64_t *)&unk_1010F47B0);
      v40 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v9, 1, v40) == 1)
        break;
      sub_10000F9B8((uint64_t)&v9[*(int *)(v40 + 20)], v38, &qword_1010ED860);
      sub_1000126B0((uint64_t)v9, type metadata accessor for SharedBeaconRecord.PropertyListContent);
      v41 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v39[6];
      if (v41(v38, 1, v20) == 1)
        goto LABEL_4;
      v148 = v36;
      v42 = v41;
      v43 = v32;
      v44 = (void (*)(char *, uint64_t, uint64_t))v39[4];
      v45 = v154;
      v44(v154, v38, v20);
      v46 = (void (*)(uint64_t))v39[2];
      v47 = v149;
      v146 = &v43[*(int *)(v156 + 20)];
      v46(v149);
      v48 = (uint64_t)v140;
      v150 = (void (*)(unint64_t, uint64_t, uint64_t))v46;
      ((void (*)(char *, char *, uint64_t))v46)(v140, v45, v20);
      v153 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v39[7];
      v153(v48, 0, 1, v20);
      v49 = v144;
      swift_beginAccess(v144, v157, 33, 0);
      v147 = v42;
      v50 = v42(v48, 1, v20);
      v145 = (void (*)(unint64_t, char *, uint64_t))v44;
      if (v50 == 1)
      {
        sub_100004048(v48, &qword_1010ED860);
        v51 = *v49;
        swift_bridgeObjectRetain(*v49);
        v52 = sub_100003FB0(v47);
        v54 = v53;
        swift_bridgeObjectRelease(v51);
        if ((v54 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v49);
          v56 = (_QWORD *)*v49;
          v160 = (_QWORD *)*v49;
          *v49 = 0x8000000000000000;
          v9 = v136;
          v36 = v148;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100A9AA68();
            v56 = v160;
          }
          v57 = *(_QWORD *)(v151 + 72) * v52;
          v58 = *(void (**)(unint64_t, uint64_t))(v151 + 8);
          v58(v56[6] + v57, v20);
          v59 = (uint64_t)v160;
          v60 = v160[7] + v57;
          v61 = (uint64_t)v135;
          v44(v135, v60, v20);
          sub_10010589C(v52, v59);
          v62 = *v144;
          *v144 = v59;
          swift_bridgeObjectRelease(v62);
          v153(v61, 0, 1, v20);
          v32 = v142;
        }
        else
        {
          v61 = (uint64_t)v135;
          v153((uint64_t)v135, 1, 1, v20);
          v58 = *(void (**)(unint64_t, uint64_t))(v151 + 8);
          v9 = v136;
          v32 = v142;
          v36 = v148;
        }
        v148 = (char *)v58;
        v58(v149, v20);
        sub_100004048(v61, &qword_1010ED860);
      }
      else
      {
        v44(v139, v48, v20);
        v63 = swift_isUniquelyReferenced_nonNull_native(*v49);
        v160 = (_QWORD *)*v49;
        v64 = v160;
        *v49 = 0x8000000000000000;
        v66 = sub_100003FB0(v47);
        v67 = v64[2];
        v68 = (v65 & 1) == 0;
        v69 = v67 + v68;
        if (__OFADD__(v67, v68))
        {
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
          __break(1u);
          return result;
        }
        v70 = v65;
        if (v64[3] >= v69)
        {
          v9 = v136;
          v32 = v142;
          v36 = v148;
          if ((v63 & 1) == 0)
            sub_100A9AA68();
        }
        else
        {
          sub_100A86BBC(v69, v63);
          v71 = sub_100003FB0(v149);
          v9 = v136;
          v32 = v142;
          v36 = v148;
          if ((v70 & 1) != (v72 & 1))
            goto LABEL_53;
          v66 = v71;
        }
        v73 = v151;
        v74 = v160;
        if ((v70 & 1) != 0)
        {
          (*(void (**)(unint64_t, char *, uint64_t))(v151 + 40))(v160[7] + *(_QWORD *)(v151 + 72) * v66, v139, v20);
          v75 = v149;
        }
        else
        {
          v160[(v66 >> 6) + 8] |= 1 << v66;
          v76 = *(_QWORD *)(v73 + 72) * v66;
          v75 = v149;
          v150(v74[6] + v76, v149, v20);
          v145(v74[7] + v76, v139, v20);
          v77 = v74[2];
          v78 = __OFADD__(v77, 1);
          v79 = v77 + 1;
          if (v78)
            goto LABEL_50;
          v74[2] = v79;
        }
        v80 = *v144;
        *v144 = (uint64_t)v160;
        swift_bridgeObjectRelease(v80);
        v148 = *(char **)(v73 + 8);
        ((void (*)(uint64_t, uint64_t))v148)(v75, v20);
      }
      v81 = (uint64_t)v138;
      v82 = v152;
      v83 = v143;
      swift_endAccess(v157);
      v84 = (void (*)(uint64_t, char *, uint64_t))v150;
      v150(v82, (uint64_t)v154, v20);
      v84(v81, v146, v20);
      v153(v81, 0, 1, v20);
      swift_beginAccess(v83, v157, 33, 0);
      if (v147(v81, 1, v20) == 1)
      {
        sub_100004048(v81, &qword_1010ED860);
        v85 = v83;
        v86 = *v83;
        swift_bridgeObjectRetain(v86);
        v87 = sub_100003FB0(v82);
        v89 = v88;
        swift_bridgeObjectRelease(v86);
        if ((v89 & 1) != 0)
        {
          v90 = v87;
          v91 = swift_isUniquelyReferenced_nonNull_native(*v85);
          v92 = (_QWORD *)*v85;
          v160 = (_QWORD *)*v85;
          *v85 = 0x8000000000000000;
          v93 = v148;
          if (!v91)
          {
            sub_100A9AA68();
            v92 = v160;
          }
          v94 = v92[6];
          v95 = *(_QWORD *)(v151 + 72);
          v150 = (void (*)(unint64_t, uint64_t, uint64_t))v90;
          v96 = v95 * v90;
          ((void (*)(unint64_t, uint64_t))v93)(v94 + v96, v20);
          v97 = (uint64_t)v160;
          v98 = v160[7] + v96;
          v99 = (uint64_t)v134;
          v145((unint64_t)v134, (char *)v98, v20);
          sub_10010589C((int64_t)v150, v97);
          v100 = *v85;
          *v85 = v97;
          swift_bridgeObjectRelease(v100);
          v101 = 0;
        }
        else
        {
          v101 = 1;
          v99 = (uint64_t)v134;
          v93 = v148;
        }
        v153(v99, v101, 1, v20);
        ((void (*)(uint64_t, uint64_t))v93)(v152, v20);
        sub_100004048(v99, &qword_1010ED860);
        v38 = (uint64_t)v141;
        v39 = (_QWORD *)v151;
      }
      else
      {
        v102 = v145;
        v145((unint64_t)v137, (char *)v81, v20);
        v103 = swift_isUniquelyReferenced_nonNull_native(*v83);
        v104 = v83;
        v105 = (_QWORD *)*v83;
        v160 = v105;
        *v104 = 0x8000000000000000;
        v107 = sub_100003FB0(v82);
        v108 = v105[2];
        v109 = (v106 & 1) == 0;
        v110 = v108 + v109;
        if (__OFADD__(v108, v109))
          goto LABEL_49;
        v111 = v106;
        if (v105[3] >= v110)
        {
          if ((v103 & 1) == 0)
            sub_100A9AA68();
        }
        else
        {
          sub_100A86BBC(v110, v103);
          v112 = sub_100003FB0(v152);
          if ((v111 & 1) != (v113 & 1))
            goto LABEL_53;
          v107 = v112;
        }
        v93 = v148;
        v114 = v160;
        if ((v111 & 1) != 0)
        {
          v39 = (_QWORD *)v151;
          (*(void (**)(unint64_t, char *, uint64_t))(v151 + 40))(v160[7] + *(_QWORD *)(v151 + 72) * v107, v137, v20);
        }
        else
        {
          v160[(v107 >> 6) + 8] |= 1 << v107;
          v39 = (_QWORD *)v151;
          v115 = *(_QWORD *)(v151 + 72) * v107;
          v150(v114[6] + v115, v152, v20);
          v102(v114[7] + v115, v137, v20);
          v116 = v114[2];
          v78 = __OFADD__(v116, 1);
          v117 = v116 + 1;
          if (v78)
            goto LABEL_51;
          v114[2] = v117;
        }
        v118 = *v143;
        *v143 = (uint64_t)v160;
        swift_bridgeObjectRelease(v118);
        ((void (*)(uint64_t, uint64_t))v93)(v152, v20);
        v38 = (uint64_t)v141;
        v32 = v142;
      }
      swift_endAccess(v157);
      ((void (*)(char *, uint64_t))v93)(v154, v20);
      sub_1000126B0((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
LABEL_5:
      v37 += v155;
      if (!--v36)
      {
        a2 = v128;
        swift_bridgeObjectRelease(v128);
        a3 = v129;
        goto LABEL_46;
      }
    }
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F47B0);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v39[7])(v38, 1, 1, v20);
LABEL_4:
    sub_1000126B0((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
    sub_100004048(v38, &qword_1010ED860);
    goto LABEL_5;
  }
LABEL_46:
  v20 = a2;
  v119 = v133;
  v120 = *(void **)(v133 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueue);
  v121 = v130;
  *v130 = v120;
  v122 = v131;
  v123 = v132;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v131 + 104))(v121, enum case for DispatchPredicate.onQueue(_:), v132);
  v124 = v120;
  LOBYTE(v120) = _dispatchPreconditionTest(_:)(v121);
  (*(void (**)(_QWORD *, uint64_t))(v122 + 8))(v121, v123);
  if ((v120 & 1) == 0)
    goto LABEL_52;
  swift_bridgeObjectRetain(v20);
  swift_retain();
  v125 = sub_10085F610(v20, v119);
  swift_bridgeObjectRelease(v20);
  swift_release(v119);
  v126 = *(_QWORD *)(v119 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords);
  *(_QWORD *)(v119 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords) = v125;
  swift_bridgeObjectRetain(v125);
  result = swift_bridgeObjectRelease(v126);
  *a3 = v125;
  return result;
}

uint64_t sub_10080E4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch(sub_10080E4D8, 0, 0);
}

uint64_t sub_10080E4D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 40) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_10080E550;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10088038C, *(_QWORD *)(v0 + 24), v3);
}

uint64_t sub_10080E550()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_release();
  return swift_task_switch(sub_10080E5B0, 0, 0);
}

uint64_t sub_10080E5B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[4];
  v2 = v0[2];
  v0[6] = v2;
  swift_bridgeObjectRetain(v1);
  v4 = sub_100508C94(v3);
  v0[7] = v4;
  swift_bridgeObjectRelease();
  v5 = (_QWORD *)swift_task_alloc(dword_1010F3C3C);
  v0[8] = v5;
  *v5 = v0;
  v5[1] = sub_10080E638;
  return sub_10024E2A8((uint64_t)v4, v2);
}

uint64_t sub_10080E638()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_release();
  return swift_task_switch(sub_1000BB7E4, 0, 0);
}

uint64_t sub_10080E694@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v5 = type metadata accessor for BeaconKeyManager(0);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, a1, v4, &type metadata for () + 1, v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10080E70C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return swift_task_switch(sub_10080E724, 0, 0);
}

uint64_t sub_10080E724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 80);
  *(_QWORD *)(v0 + 72) = v1;
  if (v1)
  {
    swift_retain();
    return swift_task_switch(sub_10080E84C, v1, 0);
  }
  else
  {
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7648);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing CloudStorageService!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    **(_QWORD **)(v0 + 56) = _swiftEmptyArrayStorage;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10080E84C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110CE34);
  *(_QWORD *)(v0 + 80) = v1;
  *v1 = v0;
  v1[1] = sub_10080E898;
  return sub_10001C938();
}

uint64_t sub_10080E898(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10080E948;
  }
  else
  {
    *(_QWORD *)(v4 + 96) = a1;
    v6 = sub_10080E90C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10080E90C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  **(_QWORD **)(v0 + 56) = *(_QWORD *)(v0 + 96);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10080E948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7648);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 88);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 48) = sub_100016940(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure to return accessory records %s!", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    swift_errorRelease(v7);
  }

  swift_errorRelease(*(_QWORD *)(v0 + 88));
  swift_release();
  **(_QWORD **)(v0 + 56) = _swiftEmptyArrayStorage;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10080EB48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  sub_1000181C8();
  swift_bridgeObjectRelease();
  return sub_1002544DC(a1, a2);
}

uint64_t sub_10080EB9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper);
  swift_beginAccess(v5 + 24, v15, 32, 0);
  v6 = *(_QWORD *)(v5 + 24);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_100003FB0(a2), (v8 & 1) != 0))
  {
    v9 = v7;
    v10 = *(_QWORD *)(v6 + 56);
    v11 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(a3, v10 + *(_QWORD *)(v12 + 72) * v9, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a3, 0, 1, v11);
  }
  else
  {
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 1, 1, v13);
  }
  return swift_endAccess(v15);
}

uint64_t sub_10080EC88(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t (*v27)(uint64_t);
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;

  v5 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v8);
  v38 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ShareRecord(0);
  v41 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  v11 = __chkstk_darwin(v10);
  v40 = (uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - v13;
  v36 = a2;
  result = (uint64_t)sub_10088A6EC();
  v16 = result;
  v17 = _swiftEmptyArrayStorage;
  v44 = _swiftEmptyArrayStorage;
  v39 = *(_QWORD *)(result + 16);
  if (v39)
  {
    v33 = v7;
    v34 = a1;
    v35 = v2;
    v18 = 0;
    v19 = _swiftEmptyArrayStorage;
    v20 = type metadata accessor for ShareRecord;
    v37 = result;
    while (v18 < *(_QWORD *)(v16 + 16))
    {
      v21 = *(_QWORD *)(v41 + 72);
      v43 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      sub_10005972C(v16 + v43 + v21 * v18, (uint64_t)v14, v20);
      v22 = (uint64_t)&v14[*(int *)(v42 + 32)];
      v23 = (uint64_t)v14;
      v24 = v38;
      sub_10000F9B8(v22, v38, (uint64_t *)&unk_1010EA690);
      v25 = type metadata accessor for Date(0);
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25);
      sub_100004048(v24, (uint64_t *)&unk_1010EA690);
      if (v26 == 1)
      {
        result = sub_1000126B0(v23, v20);
        v14 = (char *)v23;
      }
      else
      {
        v27 = v20;
        sub_1000126EC(v23, v40, v20);
        v14 = (char *)v23;
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
          sub_10009AFB8(0, v19[2] + 1, 1);
        v19 = v44;
        v29 = v44[2];
        v28 = v44[3];
        if (v29 >= v28 >> 1)
        {
          sub_10009AFB8(v28 > 1, v29 + 1, 1);
          v19 = v44;
        }
        v19[2] = v29 + 1;
        v30 = (uint64_t)v19 + v43 + v29 * v21;
        v20 = v27;
        result = sub_1000126EC(v40, v30, v27);
        v16 = v37;
      }
      if (v39 == ++v18)
      {
        v17 = v44;
        a1 = v34;
        v7 = v33;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    if (v17[2])
    {
      sub_10005972C(v36, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
      v44 = (_QWORD *)*a1;
      *a1 = 0x8000000000000000;
      sub_10010C3C0((uint64_t)v17, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
      *a1 = v44;
      swift_bridgeObjectRelease();
      return sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10080EFD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, int a7)
{
  return sub_10080F05C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_100087A38, type metadata accessor for OwnedBeaconRecord, (unint64_t *)&unk_10110EE70, (uint64_t)&unk_100E57ABC);
}

uint64_t sub_10080F018(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, int a7)
{
  return sub_10080F05C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_100087A38, type metadata accessor for SharedBeaconRecord, &qword_10110A9A8, (uint64_t)&unk_100E6F570);
}

uint64_t sub_10080F05C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, int a7, uint64_t a8, uint64_t (*a9)(uint64_t), unint64_t *a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  int v37;
  _QWORD v38[6];
  _BYTE v39[32];

  v34 = a8;
  v35 = a6;
  v37 = a7;
  v36 = a5;
  v30 = a4;
  v13 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BeaconStoreFileRecord(0);
  v32 = *(_QWORD *)(v16 - 8);
  v33 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_projectBox(a2);
  v31 = static os_log_type_t.default.getter(v19);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v20 = qword_1011B7D38;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
  v23 = a1;
  v24 = objc_msgSend(v23, "description");
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  *(_QWORD *)(v22 + 56) = &type metadata for String;
  *(_QWORD *)(v22 + 64) = sub_10001AA00();
  *(_QWORD *)(v22 + 32) = v25;
  *(_QWORD *)(v22 + 40) = v27;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v20, "cloudBacked item deleted: %@", 28, 2, v22);
  swift_bridgeObjectRelease(v22);
  swift_beginAccess(v19, v39, 0, 0);
  sub_10000F9B8(v19, (uint64_t)v15, &qword_10110A908);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, v33) == 1)
  {
    sub_100004048((uint64_t)v15, &qword_10110A908);
  }
  else
  {
    sub_1000126EC((uint64_t)v15, (uint64_t)v18, type metadata accessor for BeaconStoreFileRecord);
    sub_100893644((uint64_t)v18);
    sub_1000126B0((uint64_t)v18, type metadata accessor for BeaconStoreFileRecord);
  }
  QueueSynchronizer.conditionalSync<A>(_:)(v34);
  sub_1007EEF64(9);
  v36(0);
  result = sub_1007EF48C();
  if ((v37 & 1) != 0)
  {
    v38[3] = a9(0);
    v38[4] = sub_100006204(a10, a9, a11);
    v29 = sub_100018F08(v38);
    sub_10005972C(v30, (uint64_t)v29, a9);
    PassthroughSubject.send(_:)(v38);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  }
  return result;
}

uint64_t sub_10080F340(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, int a7, uint64_t (*a8)(uint64_t), unint64_t *a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t (*v29)(uint64_t);
  _QWORD *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  int v37;
  uint64_t v38;
  _QWORD v39[5];
  char v40[24];

  v31 = a4;
  v32 = a8;
  v37 = a7;
  v35 = a6;
  v36 = a5;
  v38 = a3;
  v12 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BeaconStoreFileRecord(0);
  v33 = *(_QWORD *)(v15 - 8);
  v34 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_projectBox(a2);
  v19 = static os_log_type_t.default.getter(v18);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v20 = qword_1011B7D38;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
  v23 = a1;
  v24 = objc_msgSend(v23, "description");
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  *(_QWORD *)(v22 + 56) = &type metadata for String;
  *(_QWORD *)(v22 + 64) = sub_10001AA00();
  *(_QWORD *)(v22 + 32) = v25;
  *(_QWORD *)(v22 + 40) = v27;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "cloudBacked item deleted: %@", 28, 2, v22);
  swift_bridgeObjectRelease(v22);
  swift_beginAccess(v18, v40, 0, 0);
  sub_10000F9B8(v18, (uint64_t)v14, &qword_10110A908);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v14, 1, v34) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_10110A908);
  }
  else
  {
    sub_1000126EC((uint64_t)v14, (uint64_t)v17, type metadata accessor for BeaconStoreFileRecord);
    sub_100893644((uint64_t)v17);
    sub_1000126B0((uint64_t)v17, type metadata accessor for BeaconStoreFileRecord);
  }
  sub_1007EEF64(9);
  v36(0);
  result = sub_1007EF48C();
  if ((v37 & 1) != 0)
  {
    v29 = v32;
    v39[3] = v32(0);
    v39[4] = sub_100006204(a9, v29, a10);
    v30 = sub_100018F08(v39);
    sub_10005972C(v31, (uint64_t)v30, v29);
    PassthroughSubject.send(_:)(v39);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  }
  return result;
}

uint64_t sub_10080F5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _BYTE v31[24];

  v8 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v8);
  v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = type metadata accessor for BeaconStoreFileRecord(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v31[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = swift_projectBox(a2);
  swift_beginAccess(v15, v31, 0, 0);
  sub_10000F9B8(v15, (uint64_t)v10, &qword_10110A908);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v16 = sub_100004048((uint64_t)v10, &qword_10110A908);
  }
  else
  {
    sub_1000126EC((uint64_t)v10, (uint64_t)v14, type metadata accessor for BeaconStoreFileRecord);
    sub_100894288((uint64_t)v14);
    v16 = sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconStoreFileRecord);
  }
  v17 = static os_log_type_t.error.getter(v16);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v18 = qword_1011B7D38;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v19, 112, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B10;
  v21 = type metadata accessor for OwnedBeaconGroup(0);
  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v25 = sub_10001AA00();
  *(_QWORD *)(v20 + 64) = v25;
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  v30 = a1;
  swift_errorRetain(a1);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v27 = String.init<A>(describing:)(&v30, v26);
  *(_QWORD *)(v20 + 96) = &type metadata for String;
  *(_QWORD *)(v20 + 104) = v25;
  *(_QWORD *)(v20 + 72) = v27;
  *(_QWORD *)(v20 + 80) = v28;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Error deleting cloudBacked %@: %@", 33, 2, v20);
  swift_bridgeObjectRelease();
  return a5(a1);
}

uint64_t sub_10080F84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_10080F864(a1, a2, a3, a4, a5, a6, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_10080F858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_10080F864(a1, a2, a3, a4, a5, a6, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_10080F864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  _BYTE v35[24];

  v33 = a5;
  v10 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BeaconStoreFileRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_projectBox(a2);
  swift_beginAccess(v17, v35, 0, 0);
  sub_10000F9B8(v17, (uint64_t)v12, &qword_10110A908);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v18 = sub_100004048((uint64_t)v12, &qword_10110A908);
  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v16, type metadata accessor for BeaconStoreFileRecord);
    sub_100894288((uint64_t)v16);
    v18 = sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconStoreFileRecord);
  }
  v19 = static os_log_type_t.error.getter(v18);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v20 = qword_1011B7D38;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v22 = swift_allocObject(v21, 112, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B10;
  v23 = a7(0);
  v24 = UUID.uuidString.getter(v23);
  v26 = v25;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  v27 = sub_10001AA00();
  *(_QWORD *)(v22 + 64) = v27;
  *(_QWORD *)(v22 + 32) = v24;
  *(_QWORD *)(v22 + 40) = v26;
  v34 = a1;
  swift_errorRetain(a1);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v29 = String.init<A>(describing:)(&v34, v28);
  *(_QWORD *)(v22 + 96) = &type metadata for String;
  *(_QWORD *)(v22 + 104) = v27;
  *(_QWORD *)(v22 + 72) = v29;
  *(_QWORD *)(v22 + 80) = v30;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Error deleting cloudBacked %@: %@", 33, 2, v22);
  swift_bridgeObjectRelease(v22);
  return v33(a1);
}

uint64_t sub_10080FABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t (*v32)(uint64_t);
  uint64_t (*v33)(uint64_t);
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int *v46;
  char *v47;
  uint64_t v48;
  int *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t, unint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;

  v1 = type metadata accessor for StableIdentifier(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v98 = (uint64_t)&v76 - v6;
  __chkstk_darwin(v5);
  v97 = (uint64_t)&v76 - v7;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v8);
  v84 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v86 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v83 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v85 = (uint64_t)&v76 - v13;
  v87 = type metadata accessor for URL(0);
  v80 = *(_QWORD *)(v87 - 8);
  v14 = __chkstk_darwin(v87);
  v79 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v78 = (char *)&v76 - v17;
  __chkstk_darwin(v16);
  v89 = (char *)&v76 - v18;
  v19 = sub_10001A9A8(&qword_1010FB1F0);
  v20 = __chkstk_darwin(v19);
  v81 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v82 = (uint64_t)&v76 - v22;
  v23 = type metadata accessor for OwnedBeaconRecord(0);
  v95 = *(_QWORD *)(v23 - 8);
  v96 = v23;
  v24 = __chkstk_darwin(v23);
  v99 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v76 - v26;
  v28 = sub_1000188D0();
  v29 = _swiftEmptyArrayStorage;
  v101 = _swiftEmptyArrayStorage;
  v94 = *((_QWORD *)v28 + 2);
  v88 = v0;
  if (!v94)
  {
LABEL_19:
    swift_bridgeObjectRelease(v28);
    v100 = v29[2];
    swift_release(v29);
    v29 = *(_QWORD **)(v0 + 160);
    if (qword_1010E9A98 != -1)
      goto LABEL_23;
    goto LABEL_20;
  }
  v93 = v1;
  v77 = v10;
  v30 = 0;
  v90 = v4 + 8;
  v91 = v4;
  v31 = _swiftEmptyArrayStorage;
  v32 = type metadata accessor for OwnedBeaconRecord;
  v33 = type metadata accessor for StableIdentifier;
  v92 = v28;
  while (v30 < *((_QWORD *)v28 + 2))
  {
    v10 = (*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
    v100 = *(_QWORD *)(v95 + 72);
    v34 = v32;
    sub_10005972C((uint64_t)&v28[v10 + v100 * v30], (uint64_t)v27, v32);
    v35 = (uint64_t)v27;
    v36 = (uint64_t)&v27[*(int *)(v96 + 24)];
    v37 = v33;
    v38 = v97;
    sub_10005972C(v36, v97, v37);
    v39 = v93;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v38, v93);
    v41 = v38;
    v33 = v37;
    sub_1000126B0(v41, v37);
    v42 = v36;
    v43 = v98;
    sub_10005972C(v42, v98, v37);
    v44 = v43;
    if (EnumCaseMultiPayload == 1)
    {
      sub_1000126B0(v43, v37);
      v32 = v34;
      v27 = (char *)v35;
      goto LABEL_13;
    }
    v29 = v91;
    sub_10005972C(v44, (uint64_t)v91, v37);
    v45 = swift_getEnumCaseMultiPayload(v29, v39);
    if (v45 == 2)
    {
      v49 = (int *)sub_10001A9A8(&qword_101106F40);
      v50 = v90;
      swift_bridgeObjectRelease(*(_QWORD *)&v90[v49[12]]);
      swift_bridgeObjectRelease(*(_QWORD *)&v50[v49[16]]);
      swift_bridgeObjectRelease(*(_QWORD *)&v50[v49[20]]);
      v48 = *(_QWORD *)&v50[v49[28]];
      v32 = v34;
      v27 = (char *)v35;
LABEL_12:
      swift_bridgeObjectRelease(v48);
      v51 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v91, v51);
      sub_1000126B0(v98, v33);
      v31 = v101;
LABEL_13:
      sub_1000126EC((uint64_t)v27, (uint64_t)v99, v32);
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
        sub_10009A680(0, v31[2] + 1, 1);
      v31 = v101;
      v53 = v101[2];
      v52 = v101[3];
      v29 = (_QWORD *)(v53 + 1);
      if (v53 >= v52 >> 1)
      {
        sub_10009A680(v52 > 1, v53 + 1, 1);
        v31 = v101;
      }
      v31[2] = v29;
      sub_1000126EC((uint64_t)v99, (uint64_t)v31 + v10 + v53 * v100, v32);
      goto LABEL_4;
    }
    v32 = v34;
    v27 = (char *)v35;
    if (v45 == 3)
    {
      v46 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      v47 = v90;
      swift_bridgeObjectRelease(*(_QWORD *)&v90[v46[12]]);
      swift_bridgeObjectRelease(*(_QWORD *)&v47[v46[16]]);
      v48 = *(_QWORD *)&v47[v46[20]];
      goto LABEL_12;
    }
    sub_1000126B0((uint64_t)v91, v33);
    sub_1000126B0(v98, v33);
    sub_1000126B0(v35, v34);
LABEL_4:
    ++v30;
    v28 = v92;
    if (v94 == v30)
    {
      v29 = v101;
      v0 = v88;
      v10 = v77;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_23:
  swift_once(&qword_1010E9A98, sub_1001FFA50);
LABEL_20:
  v54 = v87;
  v55 = sub_10001A9E8(v87, (uint64_t)qword_1011B6C00);
  v56 = v80;
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
  v58 = v89;
  v57(v89, v55, v54);
  v59 = v78;
  v57(v78, (uint64_t)v58, v54);
  v60 = (uint64_t)v83;
  v99 = &v83[*(int *)(v10 + 40)];
  v61 = (uint64_t)v99;
  v62 = type metadata accessor for DirectorySequence(0);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56);
  v63(v61, 1, 1, v62);
  v57((char *)v60, (uint64_t)v59, v54);
  *(_QWORD *)(v60 + *(int *)(v10 + 36)) = v29;
  v64 = v79;
  v57(v79, (uint64_t)v59, v54);
  swift_retain();
  v65 = (uint64_t)v84;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v64, 0, 0);
  v66 = *(void (**)(char *, uint64_t))(v56 + 8);
  v66(v59, v54);
  v63(v65, 0, 1, v62);
  sub_100004084(v65, (uint64_t)v99, (uint64_t *)&unk_1010F77A0);
  v67 = v85;
  sub_100005CF0(v60, v85, (uint64_t *)&unk_1011057F0);
  v68 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v86 + 56);
  v69 = (uint64_t)v81;
  v68(v81, 1, 1, v10);
  sub_100004048(v69, &qword_101105800);
  sub_100005CF0(v67, v69, (uint64_t *)&unk_1011057F0);
  v68((char *)v69, 0, 1, v10);
  v70 = v82;
  sub_100005CF0(v69, v82, &qword_1010FB1F0);
  v66(v89, v54);
  v71 = sub_100010220(v70);
  sub_100004048(v70, &qword_1010FB1F0);
  v72 = v88;
  swift_retain();
  v73 = sub_10085A38C(v71, v72);
  swift_release(v71);
  swift_release(v72);
  v74 = v73[2];
  swift_bridgeObjectRelease(v73);
  result = v74 + v100;
  if (__OFADD__(v74, v100))
    __break(1u);
  return result;
}

uint64_t sub_10081026C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void);
  uint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(void);
  char *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  BOOL v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  int isUniquelyReferenced_nonNull_native;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(void);
  uint64_t v117;
  char *v118;
  void (*v119)(uint64_t, uint64_t);
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  _QWORD *v141;

  v1 = v0;
  v138 = type metadata accessor for MemberPeerTrust(0);
  v131 = *(_QWORD *)(v138 - 8);
  v2 = __chkstk_darwin(v138);
  v135 = (uint64_t)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v136 = (uint64_t)&v109 - v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v109 - v6;
  v128 = type metadata accessor for UUID(0);
  v134 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v139 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v127 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for MemberSharingCircle(0);
  v110 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v133 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v123 = *(_QWORD *)(v132 - 8);
  v12 = __chkstk_darwin(v132);
  v120 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v122 = (uint64_t)&v109 - v14;
  v15 = sub_10001A9A8(&qword_1010FB1F0);
  v16 = __chkstk_darwin(v15);
  v121 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v124 = (uint64_t)&v109 - v18;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v19);
  v130 = (char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_101111970);
  v119 = *(void (**)(uint64_t, uint64_t))(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (uint64_t)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v118 = (char *)&v109 - v25;
  v26 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v126 = (char *)&v109 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v32 = (uint64_t)&v109 - v31;
  __chkstk_darwin(v30);
  v34 = (uint64_t)&v109 - v33;
  v35 = sub_10001A9A8(&qword_10110ABC0);
  v36 = __chkstk_darwin(v35);
  v113 = (char *)&v109 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v114 = (uint64_t)&v109 - v38;
  v129 = *(_QWORD *)(v1 + 160);
  if (qword_1010EA170 != -1)
    goto LABEL_104;
  while (1)
  {
    v39 = sub_10001A9E8(v26, (uint64_t)qword_1011B7BC0);
    v117 = v27;
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
    v40(v34, v39, v26);
    v40(v32, v34, v26);
    v111 = v24 + *(int *)(v21 + 40);
    v41 = v111;
    v42 = type metadata accessor for DirectorySequence(0);
    v43 = *(_QWORD *)(v42 - 8);
    v125 = v34;
    v44 = *(void (**)(void))(v43 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44)(v41, 1, 1, v42);
    v40(v24, v32, v26);
    v45 = *(int *)(v21 + 36);
    v112 = v21;
    *(_QWORD *)(v24 + v45) = v129;
    v46 = v126;
    v40((uint64_t)v126, v32, v26);
    swift_retain();
    v47 = v130;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v46, 0, 0);
    v48 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
    v115 = v32;
    v48(v32, v26);
    v117 = v42;
    v116 = v44;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v44)(v47, 0, 1, v42);
    v49 = (uint64_t)v47;
    v50 = v125;
    sub_100004084(v49, v111, (uint64_t *)&unk_1010F77A0);
    v51 = (uint64_t)v118;
    sub_100005CF0(v24, (uint64_t)v118, (uint64_t *)&unk_101111970);
    v52 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v119 + 7);
    v53 = (uint64_t)v113;
    v54 = v112;
    v52(v113, 1, 1, v112);
    sub_100004048(v53, (uint64_t *)&unk_101111980);
    sub_100005CF0(v51, v53, (uint64_t *)&unk_101111970);
    v52((char *)v53, 0, 1, v54);
    v55 = v114;
    sub_100005CF0(v53, v114, &qword_10110ABC0);
    v119 = v48;
    v48(v50, v26);
    v56 = sub_100891788(v55);
    sub_100004048(v55, &qword_10110ABC0);
    if (qword_1010E9A98 != -1)
      swift_once(&qword_1010E9A98, sub_1001FFA50);
    v57 = sub_10001A9E8(v26, (uint64_t)qword_1011B6C00);
    v40(v50, v57, v26);
    v58 = v115;
    v40(v115, v50, v26);
    v59 = v132;
    v60 = (uint64_t)v120;
    v118 = &v120[*(int *)(v132 + 40)];
    v61 = v117;
    v62 = v116;
    v116();
    v40(v60, v58, v26);
    *(_QWORD *)(v60 + *(int *)(v59 + 36)) = v129;
    v63 = v126;
    v40((uint64_t)v126, v58, v26);
    swift_retain();
    v64 = (uint64_t)v130;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v63, 0, 0);
    v65 = v119;
    v119(v58, v26);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v62)(v64, 0, 1, v61);
    sub_100004084(v64, (uint64_t)v118, (uint64_t *)&unk_1010F77A0);
    v66 = v122;
    sub_100005CF0(v60, v122, (uint64_t *)&unk_1011057F0);
    v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56);
    v27 = (uint64_t)v121;
    v68 = v132;
    v67(v121, 1, 1, v132);
    sub_100004048(v27, &qword_101105800);
    sub_100005CF0(v66, v27, (uint64_t *)&unk_1011057F0);
    v67((char *)v27, 0, 1, v68);
    v69 = v124;
    sub_100005CF0(v27, v124, &qword_1010FB1F0);
    v65(v125, v26);
    v70 = sub_100010220(v69);
    sub_100004048(v69, &qword_1010FB1F0);
    v141 = _swiftEmptyArrayStorage;
    v21 = *(_QWORD *)(v70 + 16);
    v24 = v134;
    if (!v21)
      break;
    v130 = (char *)v56;
    v26 = v70 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
    v71 = *(_QWORD *)(v110 + 72);
    v132 = v70;
    swift_retain();
    v72 = (uint64_t)v133;
    while (1)
    {
      sub_10005972C(v26, v72, type metadata accessor for MemberSharingCircle);
      v32 = *(_QWORD *)(v72 + *(int *)(v137 + 36));
      v27 = *(_QWORD *)(v32 + 16);
      if (!v27)
      {
        v73 = _swiftEmptyArrayStorage;
        goto LABEL_7;
      }
      v74 = sub_10001A9A8(&qword_1011003C0);
      v34 = *(_QWORD *)(v24 + 72);
      v75 = *(unsigned __int8 *)(v24 + 80);
      v24 = (v75 + 32) & ~v75;
      v73 = (_QWORD *)swift_allocObject(v74, v24 + v34 * v27, v75 | 7);
      v76 = j__malloc_size(v73);
      if (!v34)
        break;
      v77 = v76 - v24 == 0x8000000000000000 && v34 == -1;
      if (v77)
        goto LABEL_100;
      v73[2] = v27;
      v73[3] = 2 * ((uint64_t)(v76 - v24) / v34);
      swift_bridgeObjectRetain_n(v32, 2);
      v34 = sub_10050A294(&v140, (char *)v73 + v24, v27, v32);
      sub_10007CC38(v140);
      if (v34 != v27)
        goto LABEL_98;
      swift_bridgeObjectRelease();
      v72 = (uint64_t)v133;
      v24 = v134;
LABEL_7:
      sub_1000126B0(v72, type metadata accessor for MemberSharingCircle);
      sub_1003028FC((uint64_t)v73);
      v26 += v71;
      if (!--v21)
      {
        swift_release_n(v132, 2);
        v78 = v141;
        v56 = (unint64_t)v130;
        goto LABEL_18;
      }
    }
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    swift_once(&qword_1010EA170, sub_100AB843C);
  }
  swift_release();
  v78 = _swiftEmptyArrayStorage;
LABEL_18:
  v32 = sub_10001B664((uint64_t)v78);
  swift_bridgeObjectRelease();
  v79 = 0;
  v80 = *(_QWORD *)(v32 + 56);
  v125 = v32 + 56;
  v129 = v32;
  v81 = 1 << *(_BYTE *)(v32 + 32);
  v82 = -1;
  if (v81 < 64)
    v82 = ~(-1 << v81);
  v83 = v82 & v80;
  v126 = (char *)((unint64_t)(v81 + 63) >> 6);
  v34 = (uint64_t)type metadata accessor for MemberPeerTrust;
  v26 = v138;
  v21 = (uint64_t)v127;
  v84 = v128;
  while (2)
  {
    if (v83)
    {
      v132 = (v83 - 1) & v83;
      v133 = v79;
      v88 = __clz(__rbit64(v83)) | ((_QWORD)v79 << 6);
LABEL_41:
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16))(v21, *(_QWORD *)(v129 + 48) + *(_QWORD *)(v24 + 72) * v88, v84);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v84);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v21, 1, v84) == 1)
        goto LABEL_85;
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v139, v21, v84);
      v24 = *(_QWORD *)(v56 + 16);
      if (v24)
      {
        v93 = v131;
        v94 = (*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
        v95 = v56 + v94;
        v130 = (char *)v56;
        swift_bridgeObjectRetain(v56);
        v32 = 0;
        v27 = *(_QWORD *)(v93 + 72);
        v137 = v94;
        v21 = v27 + v94;
        v96 = 1;
        while (1)
        {
          sub_10005972C(v95, (uint64_t)v7, type metadata accessor for MemberPeerTrust);
          v97 = static UUID.== infix(_:_:)(&v7[*(int *)(v26 + 20)], v139);
          sub_1000126B0((uint64_t)v7, type metadata accessor for MemberPeerTrust);
          if ((v97 & 1) != 0)
            break;
          ++v32;
          v95 += v27;
          ++v96;
          v21 += v27;
          if (v24 == v32)
          {
            v56 = (unint64_t)v130;
            swift_bridgeObjectRelease();
            v26 = *(_QWORD *)(v56 + 16);
            goto LABEL_47;
          }
        }
        v56 = (unint64_t)v130;
        swift_bridgeObjectRelease();
        v26 = v32 + 1;
        if (__OFADD__(v32, 1))
          goto LABEL_102;
        v103 = *(_QWORD *)(v56 + 16);
        v24 = v32;
        if (v26 != v103)
        {
          while (v96 < v103)
          {
            v32 = v56;
            v104 = v56 + v21;
            sub_10005972C(v56 + v21, (uint64_t)v7, type metadata accessor for MemberPeerTrust);
            v105 = static UUID.== infix(_:_:)(&v7[*(int *)(v138 + 20)], v139);
            sub_1000126B0((uint64_t)v7, type metadata accessor for MemberPeerTrust);
            if ((v105 & 1) != 0)
            {
              v56 = v32;
            }
            else if (v96 == v24)
            {
              v56 = v32;
              v86 = __OFADD__(v24++, 1);
              if (v86)
                goto LABEL_88;
            }
            else
            {
              if (v24 < 0)
                goto LABEL_89;
              v106 = *(_QWORD *)(v32 + 16);
              if (v24 >= v106)
                goto LABEL_90;
              v26 = v32;
              v107 = v32 + v137;
              v32 = v24 * v27;
              sub_10005972C(v107 + v24 * v27, v136, type metadata accessor for MemberPeerTrust);
              if (v96 >= v106)
                goto LABEL_91;
              sub_10005972C(v104, v135, type metadata accessor for MemberPeerTrust);
              v56 = v26;
              if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
                v56 = sub_1008C5EB0(v26);
              if ((unint64_t)v24 >= *(_QWORD *)(v56 + 16))
                goto LABEL_92;
              sub_10010FA18(v135, v56 + v137 + v32, type metadata accessor for MemberPeerTrust);
              if (v96 >= *(_QWORD *)(v56 + 16))
                goto LABEL_93;
              sub_10010FA18(v136, v56 + v21, type metadata accessor for MemberPeerTrust);
              v86 = __OFADD__(v24++, 1);
              if (v86)
                goto LABEL_88;
            }
            v26 = v96 + 1;
            if (__OFADD__(v96, 1))
              goto LABEL_87;
            v103 = *(_QWORD *)(v56 + 16);
            ++v96;
            v21 += v27;
            if (v26 == v103)
              goto LABEL_47;
          }
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }
LABEL_47:
        if (v26 < v24)
        {
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
        if ((v24 & 0x8000000000000000) == 0)
          goto LABEL_51;
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
      v26 = 0;
LABEL_51:
      v21 = v24 - v26;
      v32 = v24;
      if (__OFADD__(v26, v24 - v26))
        goto LABEL_96;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v56);
      if (!isUniquelyReferenced_nonNull_native || v24 > *(_QWORD *)(v56 + 24) >> 1)
      {
        if (v26 <= v24)
          v99 = v24;
        else
          v99 = v26;
        v56 = sub_1007C8874(isUniquelyReferenced_nonNull_native, v99, 1, v56);
      }
      v27 = v56 + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
      v100 = *(_QWORD *)(v131 + 72);
      v32 = v100 * v24;
      v34 = v27 + v100 * v24;
      swift_arrayDestroy(v34, v26 - v24, v138);
      v77 = v26 == v24;
      v84 = v128;
      v24 = v134;
      if (!v77)
      {
        v101 = *(_QWORD *)(v56 + 16) - v26;
        if (v101 < 0)
        {
          result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
          __break(1u);
          return result;
        }
        v24 = v128;
        v102 = v27 + v100 * v26;
        if (v32 < v100 * v26 || v34 >= (unint64_t)(v102 + v101 * v100))
        {
          swift_arrayInitWithTakeFrontToBack(v34, v102, v101, v138);
        }
        else if (v32 != v100 * v26)
        {
          swift_arrayInitWithTakeBackToFront(v34, v102);
        }
        v85 = *(_QWORD *)(v56 + 16);
        v86 = __OFADD__(v85, v21);
        v87 = v85 + v21;
        if (v86)
          goto LABEL_99;
        *(_QWORD *)(v56 + 16) = v87;
        v84 = v24;
        v24 = v134;
      }
      (*(void (**)(char *, uint64_t))(v24 + 8))(v139, v84);
      v26 = v138;
      v21 = (uint64_t)v127;
      v34 = (uint64_t)type metadata accessor for MemberPeerTrust;
      v83 = v132;
      v79 = v133;
      continue;
    }
    break;
  }
  v89 = (uint64_t)(v79 + 1);
  if (__OFADD__(v79, 1))
    goto LABEL_101;
  if (v89 < (uint64_t)v126)
  {
    v90 = *(_QWORD *)(v125 + 8 * v89);
    v91 = (uint64_t)(v79 + 1);
    if (!v90)
    {
      v91 = (uint64_t)(v79 + 2);
      if ((uint64_t)(v79 + 2) >= (uint64_t)v126)
        goto LABEL_84;
      v90 = *(_QWORD *)(v125 + 8 * v91);
      if (!v90)
      {
        v91 = (uint64_t)(v79 + 3);
        if ((uint64_t)(v79 + 3) >= (uint64_t)v126)
          goto LABEL_84;
        v90 = *(_QWORD *)(v125 + 8 * v91);
        if (!v90)
        {
          v92 = v79 + 4;
          if ((uint64_t)(v79 + 4) >= (uint64_t)v126)
            goto LABEL_84;
          v90 = *(_QWORD *)(v125 + 8 * (_QWORD)v92);
          if (!v90)
          {
            while (1)
            {
              v91 = (uint64_t)(v92 + 1);
              if (__OFADD__(v92, 1))
                goto LABEL_103;
              if (v91 >= (uint64_t)v126)
                goto LABEL_84;
              v90 = *(_QWORD *)(v125 + 8 * v91);
              ++v92;
              if (v90)
                goto LABEL_40;
            }
          }
          v91 = (uint64_t)(v79 + 4);
        }
      }
    }
LABEL_40:
    v132 = (v90 - 1) & v90;
    v133 = (char *)v91;
    v88 = __clz(__rbit64(v90)) + (v91 << 6);
    goto LABEL_41;
  }
LABEL_84:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v21, 1, 1, v84);
LABEL_85:
  swift_release();
  return v56;
}

uint64_t sub_10081114C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void);
  uint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(void);
  char *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  BOOL v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  int isUniquelyReferenced_nonNull_native;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(void);
  uint64_t v117;
  char *v118;
  void (*v119)(uint64_t, uint64_t);
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  _QWORD *v141;

  v1 = v0;
  v138 = type metadata accessor for OwnerPeerTrust(0);
  v131 = *(_QWORD *)(v138 - 8);
  v2 = __chkstk_darwin(v138);
  v135 = (uint64_t)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v136 = (uint64_t)&v109 - v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v109 - v6;
  v128 = type metadata accessor for UUID(0);
  v134 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v139 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v127 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for OwnerSharingCircle(0);
  v110 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v133 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v123 = *(_QWORD *)(v132 - 8);
  v12 = __chkstk_darwin(v132);
  v120 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v122 = (uint64_t)&v109 - v14;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v16 = __chkstk_darwin(v15);
  v121 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v124 = (uint64_t)&v109 - v18;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v19);
  v130 = (char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_101111780);
  v119 = *(void (**)(uint64_t, uint64_t))(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (uint64_t)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v118 = (char *)&v109 - v25;
  v26 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v126 = (char *)&v109 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v32 = (uint64_t)&v109 - v31;
  __chkstk_darwin(v30);
  v34 = (uint64_t)&v109 - v33;
  v35 = sub_10001A9A8(&qword_10110ABB8);
  v36 = __chkstk_darwin(v35);
  v113 = (char *)&v109 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v114 = (uint64_t)&v109 - v38;
  v129 = *(_QWORD *)(v1 + 160);
  if (qword_1010E9A10 != -1)
    goto LABEL_104;
  while (1)
  {
    v39 = sub_10001A9E8(v26, (uint64_t)qword_1011B6A90);
    v117 = v27;
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
    v40(v34, v39, v26);
    v40(v32, v34, v26);
    v111 = v24 + *(int *)(v21 + 40);
    v41 = v111;
    v42 = type metadata accessor for DirectorySequence(0);
    v43 = *(_QWORD *)(v42 - 8);
    v125 = v34;
    v44 = *(void (**)(void))(v43 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44)(v41, 1, 1, v42);
    v40(v24, v32, v26);
    v45 = *(int *)(v21 + 36);
    v112 = v21;
    *(_QWORD *)(v24 + v45) = v129;
    v46 = v126;
    v40((uint64_t)v126, v32, v26);
    swift_retain();
    v47 = v130;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v46, 0, 0);
    v48 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
    v115 = v32;
    v48(v32, v26);
    v117 = v42;
    v116 = v44;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v44)(v47, 0, 1, v42);
    v49 = (uint64_t)v47;
    v50 = v125;
    sub_100004084(v49, v111, (uint64_t *)&unk_1010F77A0);
    v51 = (uint64_t)v118;
    sub_100005CF0(v24, (uint64_t)v118, (uint64_t *)&unk_101111780);
    v52 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v119 + 7);
    v53 = (uint64_t)v113;
    v54 = v112;
    v52(v113, 1, 1, v112);
    sub_100004048(v53, (uint64_t *)&unk_101111790);
    sub_100005CF0(v51, v53, (uint64_t *)&unk_101111780);
    v52((char *)v53, 0, 1, v54);
    v55 = v114;
    sub_100005CF0(v53, v114, &qword_10110ABB8);
    v119 = v48;
    v48(v50, v26);
    v56 = sub_100890DE0(v55);
    sub_100004048(v55, &qword_10110ABB8);
    if (qword_1010EA118 != -1)
      swift_once(&qword_1010EA118, sub_100A2ECA4);
    v57 = sub_10001A9E8(v26, (uint64_t)qword_1011B7B10);
    v40(v50, v57, v26);
    v58 = v115;
    v40(v115, v50, v26);
    v59 = v132;
    v60 = (uint64_t)v120;
    v118 = &v120[*(int *)(v132 + 40)];
    v61 = v117;
    v62 = v116;
    v116();
    v40(v60, v58, v26);
    *(_QWORD *)(v60 + *(int *)(v59 + 36)) = v129;
    v63 = v126;
    v40((uint64_t)v126, v58, v26);
    swift_retain();
    v64 = (uint64_t)v130;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v63, 0, 0);
    v65 = v119;
    v119(v58, v26);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v62)(v64, 0, 1, v61);
    sub_100004084(v64, (uint64_t)v118, (uint64_t *)&unk_1010F77A0);
    v66 = v122;
    sub_100005CF0(v60, v122, (uint64_t *)&unk_1011115B0);
    v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56);
    v27 = (uint64_t)v121;
    v68 = v132;
    v67(v121, 1, 1, v132);
    sub_100004048(v27, (uint64_t *)&unk_1010F77C0);
    sub_100005CF0(v66, v27, (uint64_t *)&unk_1011115B0);
    v67((char *)v27, 0, 1, v68);
    v69 = v124;
    sub_100005CF0(v27, v124, (uint64_t *)&unk_1010F77B0);
    v65(v125, v26);
    v70 = sub_100892130(v69);
    sub_100004048(v69, (uint64_t *)&unk_1010F77B0);
    v141 = _swiftEmptyArrayStorage;
    v21 = *(_QWORD *)(v70 + 16);
    v24 = v134;
    if (!v21)
      break;
    v130 = (char *)v56;
    v26 = v70 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
    v71 = *(_QWORD *)(v110 + 72);
    v132 = v70;
    swift_retain();
    v72 = (uint64_t)v133;
    while (1)
    {
      sub_10005972C(v26, v72, type metadata accessor for OwnerSharingCircle);
      v32 = *(_QWORD *)(v72 + *(int *)(v137 + 32));
      v27 = *(_QWORD *)(v32 + 16);
      if (!v27)
      {
        v73 = _swiftEmptyArrayStorage;
        goto LABEL_7;
      }
      v74 = sub_10001A9A8(&qword_1011003C0);
      v34 = *(_QWORD *)(v24 + 72);
      v75 = *(unsigned __int8 *)(v24 + 80);
      v24 = (v75 + 32) & ~v75;
      v73 = (_QWORD *)swift_allocObject(v74, v24 + v34 * v27, v75 | 7);
      v76 = j__malloc_size(v73);
      if (!v34)
        break;
      v77 = v76 - v24 == 0x8000000000000000 && v34 == -1;
      if (v77)
        goto LABEL_100;
      v73[2] = v27;
      v73[3] = 2 * ((uint64_t)(v76 - v24) / v34);
      swift_bridgeObjectRetain_n(v32, 2);
      v34 = sub_10050A294(&v140, (char *)v73 + v24, v27, v32);
      sub_10007CC38(v140);
      if (v34 != v27)
        goto LABEL_98;
      swift_bridgeObjectRelease();
      v72 = (uint64_t)v133;
      v24 = v134;
LABEL_7:
      sub_1000126B0(v72, type metadata accessor for OwnerSharingCircle);
      sub_1003028FC((uint64_t)v73);
      v26 += v71;
      if (!--v21)
      {
        swift_release_n(v132, 2);
        v78 = v141;
        v56 = (unint64_t)v130;
        goto LABEL_18;
      }
    }
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    swift_once(&qword_1010E9A10, sub_1001EB610);
  }
  swift_release();
  v78 = _swiftEmptyArrayStorage;
LABEL_18:
  v32 = sub_10001B664((uint64_t)v78);
  swift_bridgeObjectRelease();
  v79 = 0;
  v80 = *(_QWORD *)(v32 + 56);
  v125 = v32 + 56;
  v129 = v32;
  v81 = 1 << *(_BYTE *)(v32 + 32);
  v82 = -1;
  if (v81 < 64)
    v82 = ~(-1 << v81);
  v83 = v82 & v80;
  v126 = (char *)((unint64_t)(v81 + 63) >> 6);
  v34 = (uint64_t)type metadata accessor for OwnerPeerTrust;
  v26 = v138;
  v21 = (uint64_t)v127;
  v84 = v128;
  while (2)
  {
    if (v83)
    {
      v132 = (v83 - 1) & v83;
      v133 = v79;
      v88 = __clz(__rbit64(v83)) | ((_QWORD)v79 << 6);
LABEL_41:
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16))(v21, *(_QWORD *)(v129 + 48) + *(_QWORD *)(v24 + 72) * v88, v84);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v84);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v21, 1, v84) == 1)
        goto LABEL_85;
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v139, v21, v84);
      v24 = *(_QWORD *)(v56 + 16);
      if (v24)
      {
        v93 = v131;
        v94 = (*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
        v95 = v56 + v94;
        v130 = (char *)v56;
        swift_bridgeObjectRetain(v56);
        v32 = 0;
        v27 = *(_QWORD *)(v93 + 72);
        v137 = v94;
        v21 = v27 + v94;
        v96 = 1;
        while (1)
        {
          sub_10005972C(v95, (uint64_t)v7, type metadata accessor for OwnerPeerTrust);
          v97 = static UUID.== infix(_:_:)(&v7[*(int *)(v26 + 20)], v139);
          sub_1000126B0((uint64_t)v7, type metadata accessor for OwnerPeerTrust);
          if ((v97 & 1) != 0)
            break;
          ++v32;
          v95 += v27;
          ++v96;
          v21 += v27;
          if (v24 == v32)
          {
            v56 = (unint64_t)v130;
            swift_bridgeObjectRelease();
            v26 = *(_QWORD *)(v56 + 16);
            goto LABEL_47;
          }
        }
        v56 = (unint64_t)v130;
        swift_bridgeObjectRelease();
        v26 = v32 + 1;
        if (__OFADD__(v32, 1))
          goto LABEL_102;
        v103 = *(_QWORD *)(v56 + 16);
        v24 = v32;
        if (v26 != v103)
        {
          while (v96 < v103)
          {
            v32 = v56;
            v104 = v56 + v21;
            sub_10005972C(v56 + v21, (uint64_t)v7, type metadata accessor for OwnerPeerTrust);
            v105 = static UUID.== infix(_:_:)(&v7[*(int *)(v138 + 20)], v139);
            sub_1000126B0((uint64_t)v7, type metadata accessor for OwnerPeerTrust);
            if ((v105 & 1) != 0)
            {
              v56 = v32;
            }
            else if (v96 == v24)
            {
              v56 = v32;
              v86 = __OFADD__(v24++, 1);
              if (v86)
                goto LABEL_88;
            }
            else
            {
              if (v24 < 0)
                goto LABEL_89;
              v106 = *(_QWORD *)(v32 + 16);
              if (v24 >= v106)
                goto LABEL_90;
              v26 = v32;
              v107 = v32 + v137;
              v32 = v24 * v27;
              sub_10005972C(v107 + v24 * v27, v136, type metadata accessor for OwnerPeerTrust);
              if (v96 >= v106)
                goto LABEL_91;
              sub_10005972C(v104, v135, type metadata accessor for OwnerPeerTrust);
              v56 = v26;
              if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
                v56 = sub_1008C5EC4(v26);
              if ((unint64_t)v24 >= *(_QWORD *)(v56 + 16))
                goto LABEL_92;
              sub_10010FA18(v135, v56 + v137 + v32, type metadata accessor for OwnerPeerTrust);
              if (v96 >= *(_QWORD *)(v56 + 16))
                goto LABEL_93;
              sub_10010FA18(v136, v56 + v21, type metadata accessor for OwnerPeerTrust);
              v86 = __OFADD__(v24++, 1);
              if (v86)
                goto LABEL_88;
            }
            v26 = v96 + 1;
            if (__OFADD__(v96, 1))
              goto LABEL_87;
            v103 = *(_QWORD *)(v56 + 16);
            ++v96;
            v21 += v27;
            if (v26 == v103)
              goto LABEL_47;
          }
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }
LABEL_47:
        if (v26 < v24)
        {
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
        if ((v24 & 0x8000000000000000) == 0)
          goto LABEL_51;
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
      v26 = 0;
LABEL_51:
      v21 = v24 - v26;
      v32 = v24;
      if (__OFADD__(v26, v24 - v26))
        goto LABEL_96;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v56);
      if (!isUniquelyReferenced_nonNull_native || v24 > *(_QWORD *)(v56 + 24) >> 1)
      {
        if (v26 <= v24)
          v99 = v24;
        else
          v99 = v26;
        v56 = sub_1007C8838(isUniquelyReferenced_nonNull_native, v99, 1, v56);
      }
      v27 = v56 + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
      v100 = *(_QWORD *)(v131 + 72);
      v32 = v100 * v24;
      v34 = v27 + v100 * v24;
      swift_arrayDestroy(v34, v26 - v24, v138);
      v77 = v26 == v24;
      v84 = v128;
      v24 = v134;
      if (!v77)
      {
        v101 = *(_QWORD *)(v56 + 16) - v26;
        if (v101 < 0)
        {
          result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
          __break(1u);
          return result;
        }
        v24 = v128;
        v102 = v27 + v100 * v26;
        if (v32 < v100 * v26 || v34 >= (unint64_t)(v102 + v101 * v100))
        {
          swift_arrayInitWithTakeFrontToBack(v34, v102, v101, v138);
        }
        else if (v32 != v100 * v26)
        {
          swift_arrayInitWithTakeBackToFront(v34, v102);
        }
        v85 = *(_QWORD *)(v56 + 16);
        v86 = __OFADD__(v85, v21);
        v87 = v85 + v21;
        if (v86)
          goto LABEL_99;
        *(_QWORD *)(v56 + 16) = v87;
        v84 = v24;
        v24 = v134;
      }
      (*(void (**)(char *, uint64_t))(v24 + 8))(v139, v84);
      v26 = v138;
      v21 = (uint64_t)v127;
      v34 = (uint64_t)type metadata accessor for OwnerPeerTrust;
      v83 = v132;
      v79 = v133;
      continue;
    }
    break;
  }
  v89 = (uint64_t)(v79 + 1);
  if (__OFADD__(v79, 1))
    goto LABEL_101;
  if (v89 < (uint64_t)v126)
  {
    v90 = *(_QWORD *)(v125 + 8 * v89);
    v91 = (uint64_t)(v79 + 1);
    if (!v90)
    {
      v91 = (uint64_t)(v79 + 2);
      if ((uint64_t)(v79 + 2) >= (uint64_t)v126)
        goto LABEL_84;
      v90 = *(_QWORD *)(v125 + 8 * v91);
      if (!v90)
      {
        v91 = (uint64_t)(v79 + 3);
        if ((uint64_t)(v79 + 3) >= (uint64_t)v126)
          goto LABEL_84;
        v90 = *(_QWORD *)(v125 + 8 * v91);
        if (!v90)
        {
          v92 = v79 + 4;
          if ((uint64_t)(v79 + 4) >= (uint64_t)v126)
            goto LABEL_84;
          v90 = *(_QWORD *)(v125 + 8 * (_QWORD)v92);
          if (!v90)
          {
            while (1)
            {
              v91 = (uint64_t)(v92 + 1);
              if (__OFADD__(v92, 1))
                goto LABEL_103;
              if (v91 >= (uint64_t)v126)
                goto LABEL_84;
              v90 = *(_QWORD *)(v125 + 8 * v91);
              ++v92;
              if (v90)
                goto LABEL_40;
            }
          }
          v91 = (uint64_t)(v79 + 4);
        }
      }
    }
LABEL_40:
    v132 = (v90 - 1) & v90;
    v133 = (char *)v91;
    v88 = __clz(__rbit64(v90)) + (v91 << 6);
    goto LABEL_41;
  }
LABEL_84:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v21, 1, 1, v84);
LABEL_85:
  swift_release();
  return v56;
}

uint64_t sub_10081202C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;

  v6 = type metadata accessor for OwnerSharingCircle(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v7 + 36)) - 1 > 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = static UUID.== infix(_:_:)(a1 + *(int *)(v6 + 24), a3);
    if (a2)
    {
      sub_10005972C(a1, (uint64_t)v9, type metadata accessor for OwnerSharingCircle);
      if ((v10 & 1) != 0)
        v10 = sub_100A0658C(v9[*(int *)(v6 + 28)], a2);
      else
        v10 = 0;
      sub_1000126B0((uint64_t)v9, type metadata accessor for OwnerSharingCircle);
    }
  }
  return v10 & 1;
}

uint64_t sub_100812120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MemberSharingCircle(0);
  return static UUID.== infix(_:_:)(a1 + *(int *)(v4 + 28), a2) & 1;
}

uint64_t sub_10081216C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MemberSharingCircle(0);
  return static UUID.== infix(_:_:)(a1 + *(int *)(v4 + 24), a2) & 1;
}

uint64_t sub_1008121B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = sub_1009AB2F0(a1);
  if (v1)
  {
    v4 = static os_log_type_t.error.getter(v3);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v5 = qword_1011B7D38;
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v7 = swift_allocObject(v6, 112, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
    v8 = UUID.uuidString.getter(v7);
    v10 = v9;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    v11 = sub_10001AA00();
    *(_QWORD *)(v7 + 64) = v11;
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v10;
    v18 = v1;
    swift_errorRetain(v1);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v13 = String.init<A>(describing:)(&v18, v12);
    *(_QWORD *)(v7 + 96) = &type metadata for String;
    *(_QWORD *)(v7 + 104) = v11;
    *(_QWORD *)(v7 + 72) = v13;
    *(_QWORD *)(v7 + 80) = v14;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Error reading sharingCircleSecrets %@: %@", 41, 2, v7);
    swift_errorRelease(v1);
    swift_bridgeObjectRelease();
    v15 = type metadata accessor for SharingCircleSecretValue(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    v17 = type metadata accessor for SharingCircleSecretValue(0);
    return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 0, 1, v17);
  }
}

uint64_t sub_10081234C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(void);
  uint64_t v58;
  void (*v59)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, unint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  void (*v69)(uint64_t, unint64_t);
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t, char *);
  uint64_t v72;
  size_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  size_t v80;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(unint64_t, uint64_t);
  _QWORD *v86;
  unsigned int (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  uint64_t v89;
  unint64_t v90;
  Swift::String v91;
  Swift::String v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char v99;
  char v100;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  _BOOL8 v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  Swift::String v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t result;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(void);
  void (*v150)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  char *v160;
  void (*v161)(uint64_t, char *);
  void (*v162)(uint64_t, uint64_t, char *);
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  size_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  _QWORD *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  unint64_t v196;

  v169 = a1;
  v158 = a2;
  v2 = type metadata accessor for OwnerPeerTrust(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v157 = (uint64_t)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v151 = (uint64_t)&v148 - v6;
  v7 = sub_10001A9A8(&qword_1010ED860);
  v8 = __chkstk_darwin(v7);
  v179 = (char *)&v148 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v182 = (char *)&v148 - v11;
  v12 = __chkstk_darwin(v10);
  v174 = (char *)&v148 - v13;
  __chkstk_darwin(v12);
  v183 = (char *)&v148 - v14;
  v15 = type metadata accessor for UUID(0);
  v185 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v181 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v187 = (char *)&v148 - v19;
  v20 = __chkstk_darwin(v18);
  v194 = (char *)&v148 - v21;
  v22 = __chkstk_darwin(v20);
  v193 = (char *)&v148 - v23;
  __chkstk_darwin(v22);
  v166 = (char *)&v148 - v24;
  v25 = type metadata accessor for OwnerSharingCircle(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v152 = (uint64_t)&v148 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v186 = (uint64_t)&v148 - v29;
  v30 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v30);
  v190 = (char *)&v148 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v191 = *(_QWORD **)(v178 - 8);
  v32 = __chkstk_darwin(v178);
  v177 = (char *)&v148 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v189 = (uint64_t)&v148 - v34;
  v35 = type metadata accessor for URL(0);
  v36 = *(char **)(v35 - 8);
  v37 = __chkstk_darwin(v35);
  v173 = (char *)&v148 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v41 = (uint64_t)&v148 - v40;
  __chkstk_darwin(v39);
  v43 = (uint64_t)&v148 - v42;
  v44 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v45 = __chkstk_darwin(v44);
  v180 = (char *)&v148 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v188 = (uint64_t)&v148 - v47;
  v48 = sub_10001A9A8(&qword_1010EE0E0);
  v49 = __chkstk_darwin(v48);
  v156 = (char *)&v148 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  v52 = (char *)&v148 - v51;
  v164 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v53 = __chkstk_darwin(v164);
  v154 = (uint64_t)&v148 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __chkstk_darwin(v53);
  v165 = (char *)&v148 - v56;
  __chkstk_darwin(v55);
  v167 = v3;
  v57 = *(void (**)(void))(v3 + 56);
  v153 = (uint64_t)&v148 - v58;
  v175 = v2;
  v149 = v57;
  v57();
  v176 = v26;
  v59 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56);
  v155 = v52;
  v184 = v25;
  v150 = v59;
  v59((uint64_t)v52, 1, 1, v25);
  v60 = *((_QWORD *)v192 + 20);
  if (qword_1010EA118 != -1)
    goto LABEL_64;
  while (1)
  {
    v61 = sub_10001A9E8(v35, (uint64_t)qword_1011B7B10);
    v172 = v36;
    v62 = (void (*)(uint64_t, uint64_t, unint64_t))*((_QWORD *)v36 + 2);
    v168 = v43;
    v62(v43, v61, v35);
    v62(v41, v43, v35);
    v36 = (char *)v178;
    v63 = (uint64_t)v177;
    v192 = &v177[*(int *)(v178 + 40)];
    v64 = (uint64_t)v192;
    v65 = type metadata accessor for DirectorySequence(0);
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56);
    v66(v64, 1, 1, v65);
    v62(v63, v41, v35);
    *(_QWORD *)(v63 + *((int *)v36 + 9)) = v60;
    v67 = v173;
    v162 = (void (*)(uint64_t, uint64_t, char *))v62;
    v62((uint64_t)v173, v41, v35);
    v163 = v60;
    swift_retain();
    v68 = (uint64_t)v190;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v67, 0, 0);
    v69 = (void (*)(uint64_t, unint64_t))*((_QWORD *)v172 + 1);
    v69(v41, v35);
    v66(v68, 0, 1, v65);
    sub_100004084(v68, (uint64_t)v192, (uint64_t *)&unk_1010F77A0);
    v70 = v189;
    sub_100005CF0(v63, v189, (uint64_t *)&unk_1011115B0);
    v71 = (void (*)(char *, uint64_t, uint64_t, char *))v191[7];
    v72 = (uint64_t)v180;
    v71(v180, 1, 1, v36);
    sub_100004048(v72, (uint64_t *)&unk_1010F77C0);
    sub_100005CF0(v70, v72, (uint64_t *)&unk_1011115B0);
    v71((char *)v72, 0, 1, v36);
    v60 = v188;
    sub_100005CF0(v72, v188, (uint64_t *)&unk_1010F77B0);
    v161 = (void (*)(uint64_t, char *))v69;
    v69(v168, v35);
    v73 = sub_100892130(v60);
    sub_100004048(v60, (uint64_t *)&unk_1010F77B0);
    v173 = *(char **)(v73 + 16);
    if (!v173)
      break;
    v160 = (char *)v35;
    v35 = 0;
    v170 = 0;
    v43 = (uint64_t)type metadata accessor for OwnerSharingCircle;
    v172 = (char *)(v73 + ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80)));
    v159 = (void *)0x8000000100ED68C0;
    v74 = v183;
    v41 = v185;
    v171 = v73;
    while (v35 < *(_QWORD *)(v73 + 16))
    {
      v75 = v186;
      sub_10005972C((uint64_t)&v172[*(_QWORD *)(v176 + 72) * v35], v186, type metadata accessor for OwnerSharingCircle);
      v76 = *(_QWORD *)(v75 + *(int *)(v184 + 32));
      v43 = *(_QWORD *)(v76 + 16);
      if (v43)
      {
        v77 = sub_10001A9A8(&qword_1011003C0);
        v60 = *(_QWORD *)(v41 + 72);
        v78 = *(unsigned __int8 *)(v41 + 80);
        v41 = (v78 + 32) & ~v78;
        v79 = (_QWORD *)swift_allocObject(v77, v41 + v60 * v43, v78 | 7);
        v80 = j__malloc_size(v79);
        if (!v60)
          goto LABEL_61;
        if (v80 - v41 == 0x8000000000000000 && v60 == -1)
          goto LABEL_63;
        v79[2] = v43;
        v79[3] = 2 * ((uint64_t)(v80 - v41) / v60);
        swift_bridgeObjectRetain_n(v76, 2);
        v41 = sub_10050A294(&v195, (char *)v79 + v41, v43, v76);
        sub_10007CC38((uint64_t)v195);
        if (v41 != v43)
          goto LABEL_62;
        swift_bridgeObjectRelease();
        v41 = v185;
      }
      else
      {
        v79 = _swiftEmptyArrayStorage;
      }
      v177 = (char *)v35;
      v82 = (char *)v79[2];
      v178 = (uint64_t)v79;
      if (v82)
      {
        v83 = (uint64_t)v79
            + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
        swift_retain();
        v188 = *(_QWORD *)(v41 + 72);
        v35 = *(_QWORD *)(v41 + 16);
        v36 = (char *)_swiftEmptyDictionarySingleton;
        ((void (*)(char *, uint64_t, uint64_t))v35)(v74, v83, v15);
        while (1)
        {
          v86 = *(_QWORD **)(v41 + 56);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v86)(v74, 0, 1, v15);
          v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
          if (v87(v74, 1, v15) == 1)
            break;
          v189 = v83;
          v190 = v82;
          v191 = v86;
          v192 = v36;
          v36 = *(char **)(v41 + 32);
          v88 = v193;
          ((void (*)(char *, char *, uint64_t))v36)(v193, v74, v15);
          v89 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v195 = (char *)dispatch thunk of CustomStringConvertible.description.getter(v15, v89);
          v196 = v90;
          v91._countAndFlagsBits = 124;
          v91._object = (void *)0xE100000000000000;
          String.append(_:)(v91);
          v92._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v89);
          String.append(_:)(v92);
          swift_bridgeObjectRelease();
          v41 = String.utf8Data.getter(v195, v196);
          v94 = v93;
          swift_bridgeObjectRelease();
          v195 = (char *)v41;
          v196 = v94;
          v95 = sub_100035530();
          v60 = (uint64_t)v194;
          DataProtocol.stableUUID.getter(&type metadata for Data, v95);
          sub_10001BC14(v41, v94);
          v43 = (uint64_t)v187;
          ((void (*)(char *, uint64_t, uint64_t))v35)(v187, v60, v15);
          v96 = (uint64_t)v182;
          v97 = v88;
          v86 = v191;
          ((void (*)(char *, char *, uint64_t))v35)(v182, v97, v15);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v86)(v96, 0, 1, v15);
          if (v87((char *)v96, 1, v15) == 1)
          {
            v180 = v36;
            sub_100004048(v96, &qword_1010ED860);
            v36 = v192;
            swift_bridgeObjectRetain(v192);
            v98 = sub_100003FB0(v43);
            v100 = v99;
            swift_bridgeObjectRelease();
            if ((v100 & 1) != 0)
            {
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
              v195 = v36;
              v84 = (uint64_t)v179;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_100A9AA68();
                v36 = v195;
              }
              v102 = v98 * v188;
              v41 = v185;
              v85 = *(void (**)(unint64_t, uint64_t))(v185 + 8);
              v85(*((_QWORD *)v36 + 6) + v98 * v188, v15);
              v36 = v195;
              ((void (*)(uint64_t, uint64_t, uint64_t))v180)(v84, *((_QWORD *)v195 + 7) + v102, v15);
              sub_10010589C(v98, (uint64_t)v36);
              swift_bridgeObjectRelease();
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v86)(v84, 0, 1, v15);
            }
            else
            {
              v84 = (uint64_t)v179;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v86)(v179, 1, 1, v15);
              v41 = v185;
              v85 = *(void (**)(unint64_t, uint64_t))(v185 + 8);
            }
            v85((unint64_t)v187, v15);
            sub_100004048(v84, &qword_1010ED860);
            v74 = v183;
          }
          else
          {
            ((void (*)(char *, uint64_t, uint64_t))v36)(v181, v96, v15);
            v103 = (uint64_t)v192;
            v104 = swift_isUniquelyReferenced_nonNull_native(v192);
            v195 = (char *)v103;
            v106 = sub_100003FB0(v43);
            v107 = *(_QWORD *)(v103 + 16);
            v108 = (v105 & 1) == 0;
            v109 = v107 + v108;
            if (__OFADD__(v107, v108))
            {
              __break(1u);
LABEL_59:
              __break(1u);
              goto LABEL_60;
            }
            v110 = v105;
            if (*(_QWORD *)(v103 + 24) >= v109)
            {
              if ((v104 & 1) == 0)
                sub_100A9AA68();
            }
            else
            {
              sub_100A86BBC(v109, v104);
              v111 = sub_100003FB0(v43);
              if ((v110 & 1) != (v112 & 1))
              {
                result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v15);
                __break(1u);
                return result;
              }
              v106 = v111;
            }
            v74 = v183;
            v113 = v195;
            if ((v110 & 1) != 0)
            {
              v41 = v185;
              (*(void (**)(unint64_t, char *, uint64_t))(v185 + 40))(*((_QWORD *)v195 + 7) + v106 * v188, v181, v15);
            }
            else
            {
              *(_QWORD *)&v195[8 * (v106 >> 6) + 64] |= 1 << v106;
              v41 = v106 * v188;
              ((void (*)(unint64_t, uint64_t, uint64_t))v35)(*((_QWORD *)v113 + 6) + v106 * v188, v43, v15);
              ((void (*)(uint64_t, char *, uint64_t))v36)(*((_QWORD *)v113 + 7) + v41, v181, v15);
              v114 = *((_QWORD *)v113 + 2);
              v115 = __OFADD__(v114, 1);
              v116 = v114 + 1;
              if (v115)
                goto LABEL_59;
              *((_QWORD *)v113 + 2) = v116;
              v41 = v185;
            }
            v36 = v195;
            swift_bridgeObjectRelease();
            v85 = *(void (**)(unint64_t, uint64_t))(v41 + 8);
            v85(v43, v15);
          }
          v85((unint64_t)v194, v15);
          v85((unint64_t)v193, v15);
          v83 = v189 + v188;
          v82 = v190 - 1;
          if (v190 == (char *)1)
            goto LABEL_40;
          ((void (*)(char *, uint64_t, uint64_t))v35)(v74, v83, v15);
        }
      }
      else
      {
        swift_retain();
        v86 = *(_QWORD **)(v41 + 56);
        v36 = (char *)_swiftEmptyDictionarySingleton;
LABEL_40:
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v86)(v74, 1, 1, v15);
      }
      swift_release_n(v178, 2);
      v60 = (uint64_t)v174;
      if (*((_QWORD *)v36 + 2) && (v117 = sub_100003FB0(v169), (v118 & 1) != 0))
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 16))(v60, *((_QWORD *)v36 + 7) + *(_QWORD *)(v41 + 72) * v117, v15);
        v119 = 0;
      }
      else
      {
        v119 = 1;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v86)(v60, v119, 1, v15);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v60, 1, v15) == 1)
      {
        v43 = (uint64_t)type metadata accessor for OwnerSharingCircle;
        sub_1000126B0(v186, type metadata accessor for OwnerSharingCircle);
        sub_100004048(v60, &qword_1010ED860);
      }
      else
      {
        v120 = v166;
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v166, v60, v15);
        if (qword_1010E9A10 != -1)
          swift_once(&qword_1010E9A10, sub_1001EB610);
        v36 = v160;
        v121 = sub_10001A9E8((uint64_t)v160, (uint64_t)qword_1011B6A90);
        v122 = v168;
        v162(v168, v121, v36);
        v123._countAndFlagsBits = 0xD000000000000014;
        v123._object = v159;
        prohibitAsyncContext(functionName:)(v123);
        v195 = (char *)v175;
        v124 = sub_10001A9A8(&qword_1010ECA60);
        v125 = String.init<A>(describing:)(&v195, v124);
        v127 = v126;
        v128 = objc_autoreleasePoolPush();
        v60 = (uint64_t)&v148;
        __chkstk_darwin(v128);
        *(&v148 - 6) = v129;
        *(&v148 - 5) = (uint64_t)v120;
        *(&v148 - 4) = v122;
        *(&v148 - 3) = v125;
        *(&v148 - 2) = v127;
        v130 = (uint64_t)v165;
        v131 = v170;
        OS_dispatch_queue.sync<A>(execute:)(sub_1008802A0, &v148 - 8, v164);
        v170 = v131;
        objc_autoreleasePoolPop(v128);
        swift_bridgeObjectRelease();
        v161(v122, v36);
        v41 = v185;
        (*(void (**)(char *, uint64_t))(v185 + 8))(v120, v15);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v130, 1, v175) != 1)
        {
          swift_release();
          v132 = (uint64_t)v155;
          sub_100004048((uint64_t)v155, &qword_1010EE0E0);
          v133 = v153;
          sub_100004048(v153, (uint64_t *)&unk_1010EE160);
          v134 = v151;
          sub_1000126EC(v130, v151, type metadata accessor for OwnerPeerTrust);
          sub_1000126EC(v134, v133, type metadata accessor for OwnerPeerTrust);
          ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v149)(v133, 0, 1, v175);
          sub_1000126EC(v186, v132, type metadata accessor for OwnerSharingCircle);
          v150(v132, 0, 1, v184);
          goto LABEL_52;
        }
        v43 = (uint64_t)type metadata accessor for OwnerSharingCircle;
        sub_1000126B0(v186, type metadata accessor for OwnerSharingCircle);
        sub_100004048(v130, (uint64_t *)&unk_1010EE160);
        v74 = v183;
      }
      v73 = v171;
      v35 = (unint64_t)(v177 + 1);
      if (v177 + 1 == v173)
        goto LABEL_50;
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_once(&qword_1010EA118, sub_100A2ECA4);
  }
LABEL_50:
  swift_release();
  v132 = (uint64_t)v155;
  v133 = v153;
LABEL_52:
  v135 = v154;
  sub_100005CF0(v133, v154, (uint64_t *)&unk_1010EE160);
  v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v135, 1, v175);
  v137 = v157;
  v138 = (uint64_t)v156;
  if (v136 == 1)
  {
    sub_100004048(v132, &qword_1010EE0E0);
    v139 = (uint64_t *)&unk_1010EE160;
    v140 = v135;
LABEL_56:
    sub_100004048(v140, v139);
    v141 = sub_10001A9A8(&qword_1010EC848);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 56))(v158, 1, 1, v141);
  }
  sub_1000126EC(v135, v157, type metadata accessor for OwnerPeerTrust);
  sub_100005CF0(v132, v138, &qword_1010EE0E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v138, 1, v184) == 1)
  {
    sub_1000126B0(v137, type metadata accessor for OwnerPeerTrust);
    v139 = &qword_1010EE0E0;
    v140 = v138;
    goto LABEL_56;
  }
  v143 = v152;
  sub_1000126EC(v138, v152, type metadata accessor for OwnerSharingCircle);
  v144 = sub_10001A9A8(&qword_1010EC848);
  v145 = v137;
  v146 = v158;
  v147 = v158 + *(int *)(v144 + 48);
  sub_1000126EC(v145, v158, type metadata accessor for OwnerPeerTrust);
  sub_1000126EC(v143, v147, type metadata accessor for OwnerSharingCircle);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 56))(v146, 0, 1, v144);
}

size_t sub_1008135AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  size_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  os_log_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132[3];

  v5 = v4;
  v126 = a1;
  v127 = a2;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v8);
  v120 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110ABA8);
  v122 = *(_QWORD *)(v10 - 8);
  v123 = v10;
  v11 = __chkstk_darwin(v10);
  v118 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v121 = (uint64_t)&v109 - v13;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v114 = v14;
  v115 = v15;
  v16 = __chkstk_darwin(v14);
  v113 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v112 = (char *)&v109 - v19;
  __chkstk_darwin(v18);
  v128 = (char *)&v109 - v20;
  v21 = sub_10001A9A8((uint64_t *)&unk_101111600);
  v22 = __chkstk_darwin(v21);
  v117 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v119 = (uint64_t)&v109 - v24;
  v25 = type metadata accessor for MemberSharingCircle(0);
  v26 = __chkstk_darwin(v25);
  v110 = (uint64_t)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v109 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v109 - v31;
  v33 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v33);
  v35 = (char *)&v109 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = v25;
  v130 = a4;
  v36 = a4 + *(int *)(v25 + 24);
  sub_10080CD54(v36, (uint64_t)v35);
  v37 = type metadata accessor for SharedBeaconRecord(0);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48);
  v124 = v35;
  v39 = v38(v35, 1, v37);
  if ((_DWORD)v39 == 1)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v40 = type metadata accessor for Logger(0);
    sub_10001A9E8(v40, (uint64_t)qword_1011B6748);
    v41 = sub_10005972C(v130, (uint64_t)v32, type metadata accessor for MemberSharingCircle);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    v44 = v43;
    if (os_log_type_enabled(v42, v43))
    {
      v45 = swift_slowAlloc(22, -1);
      v46 = swift_slowAlloc(32, -1);
      v125 = v46;
      *(_DWORD *)v45 = 141558275;
      v131 = 1752392040;
      v132[0] = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2081;
      v109 = v45 + 14;
      v116 = v42;
      v47 = type metadata accessor for UUID(0);
      LODWORD(v111) = v44;
      v48 = v47;
      v49 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
      v131 = sub_100016940(v50, v51, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v109, v45 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v32, type metadata accessor for MemberSharingCircle);
      v52 = v116;
      _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v111, "No shared beacon record for beaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v45, 0x16u);
      v53 = v125;
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {
      sub_1000126B0((uint64_t)v32, type metadata accessor for MemberSharingCircle);

    }
  }
  __chkstk_darwin(v39);
  *(&v109 - 2) = v5;
  *(&v109 - 1) = v36;
  sub_10001A9A8((uint64_t *)&unk_101105880);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
  v116 = 0;
  v54 = type metadata accessor for BeaconNamingRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(a3, 1, v54) == 1)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v55 = type metadata accessor for Logger(0);
    sub_10001A9E8(v55, (uint64_t)qword_1011B6748);
    v56 = sub_10005972C(v130, (uint64_t)v30, type metadata accessor for MemberSharingCircle);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(22, -1);
      v60 = swift_slowAlloc(32, -1);
      *(_DWORD *)v59 = 141558275;
      v131 = 1752392040;
      v132[0] = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v59 + 4, v59 + 12);
      *(_WORD *)(v59 + 12) = 2081;
      v125 = v59 + 14;
      v61 = (uint64_t)v30;
      v62 = type metadata accessor for UUID(0);
      v63 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v64 = dispatch thunk of CustomStringConvertible.description.getter(v62, v63);
      v131 = sub_100016940(v64, v65, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v125, v59 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v61, type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "No beaconName record to delete for beaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v30, type metadata accessor for MemberSharingCircle);
    }

  }
  v125 = v5;
  v66 = *(_QWORD *)(v5 + 160);
  if (qword_1010EA0F0 != -1)
    swift_once(&qword_1010EA0F0, sub_1009AC81C);
  v67 = v114;
  v68 = sub_10001A9E8(v114, (uint64_t)qword_1011B7AC8);
  v69 = UUID.uuidString.getter(v68);
  v70 = v128;
  URL.appendingPathComponent(_:isDirectory:)(v69, v71, 1);
  swift_bridgeObjectRelease();
  v72 = v115;
  v73 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
  v74 = v112;
  v73(v112, v70, v67);
  v75 = v123;
  v76 = (uint64_t)v118;
  v111 = &v118[*(int *)(v123 + 40)];
  v77 = (uint64_t)v111;
  v78 = type metadata accessor for DirectorySequence(0);
  v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56);
  v79(v77, 1, 1, v78);
  v73((char *)v76, v74, v67);
  *(_QWORD *)(v76 + *(int *)(v75 + 36)) = v66;
  v80 = v113;
  v73(v113, v74, v67);
  swift_retain();
  v81 = (uint64_t)v120;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v80, 0, 0);
  v82 = *(void (**)(char *, uint64_t))(v72 + 8);
  v82(v74, v67);
  v79(v81, 0, 1, v78);
  sub_100004084(v81, (uint64_t)v111, (uint64_t *)&unk_1010F77A0);
  v83 = v121;
  sub_100005CF0(v76, v121, &qword_10110ABA8);
  v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v122 + 56);
  v85 = (uint64_t)v117;
  v84(v117, 1, 1, v75);
  sub_100004048(v85, &qword_10110ABB0);
  sub_100005CF0(v83, v85, &qword_10110ABA8);
  v84((char *)v85, 0, 1, v75);
  v86 = v85;
  v87 = v119;
  sub_100005CF0(v86, v119, (uint64_t *)&unk_101111600);
  v82(v128, v67);
  v88 = sub_10001A9A8((uint64_t *)&unk_101111610);
  v89 = swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
  sub_100005CF0(v87, v89 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v89 + 16), (uint64_t *)&unk_101111600);
  v90 = sub_100892AD8(v89 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v89 + 16));
  swift_setDeallocating(v89);
  sub_100004048(v89 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v89 + 16), (uint64_t *)&unk_101111600);
  swift_deallocClassInstance(v89, *(unsigned int *)(*(_QWORD *)v89 + 48), *(unsigned __int16 *)(*(_QWORD *)v89 + 52));
  v91 = v129;
  if (!*(_QWORD *)(v90 + 16))
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v92 = type metadata accessor for Logger(0);
    sub_10001A9E8(v92, (uint64_t)qword_1011B6748);
    v93 = v110;
    v94 = sub_10005972C(v130, v110, type metadata accessor for MemberSharingCircle);
    v95 = Logger.logObject.getter(v94);
    v96 = static os_log_type_t.error.getter(v95);
    if (os_log_type_enabled(v95, v96))
    {
      v97 = swift_slowAlloc(22, -1);
      v98 = swift_slowAlloc(32, -1);
      *(_DWORD *)v97 = 141558275;
      v131 = 1752392040;
      v132[0] = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v97 + 4, v97 + 12);
      *(_WORD *)(v97 + 12) = 2081;
      v99 = type metadata accessor for UUID(0);
      v100 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v101 = v99;
      v91 = v129;
      v102 = dispatch thunk of CustomStringConvertible.description.getter(v101, v100);
      v131 = sub_100016940(v102, v103, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v97 + 14, v97 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v93, type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "No sharedSecrets records to delete for circleIdentifier: %{private,mask.hash}s.", (uint8_t *)v97, 0x16u);
      swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v97, -1, -1);
    }
    else
    {
      sub_1000126B0(v93, type metadata accessor for MemberSharingCircle);
    }

  }
  v104 = v130;
  v105 = swift_bridgeObjectRetain(*(_QWORD *)(v130 + *(int *)(v91 + 36)));
  v106 = sub_100508A54(v105);
  swift_bridgeObjectRelease();
  v107 = v125;
  swift_retain();
  sub_10085DF34(v106, v107);
  swift_release();
  swift_release();
  sub_10005972C(v104, v126, type metadata accessor for MemberSharingCircle);
  sub_100005CF0((uint64_t)v124, v127, (uint64_t *)&unk_1010EE180);
  return v90;
}

size_t sub_100814198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84[3];

  v4 = v3;
  v79 = a3;
  v81 = a1;
  v6 = type metadata accessor for OwnerSharingCircle(0);
  __chkstk_darwin(v6);
  v66 = (uint64_t)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v8);
  v76 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_10001A9A8(&qword_10110ABA8);
  v77 = *(_QWORD *)(v73 - 8);
  v10 = __chkstk_darwin(v73);
  v71 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v75 = (uint64_t)&v65 - v12;
  v13 = type metadata accessor for URL(0);
  v72 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v68 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v65 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v65 - v19;
  v21 = sub_10001A9A8((uint64_t *)&unk_101111600);
  v22 = __chkstk_darwin(v21);
  v70 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v74 = (uint64_t)&v65 - v24;
  v82 = v6;
  v80 = a2;
  v78 = v4;
  v25 = *(_QWORD *)(v4 + 160);
  if (qword_1010EA0F0 != -1)
    swift_once(&qword_1010EA0F0, sub_1009AC81C);
  v26 = sub_10001A9E8(v13, (uint64_t)qword_1011B7AC8);
  v27 = UUID.uuidString.getter(v26);
  v69 = v20;
  URL.appendingPathComponent(_:isDirectory:)(v27, v28, 1);
  swift_bridgeObjectRelease();
  v29 = v72;
  v30 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  v30(v18, v20, v13);
  v31 = v73;
  v32 = (uint64_t)v71;
  v67 = &v71[*(int *)(v73 + 40)];
  v33 = (uint64_t)v67;
  v34 = type metadata accessor for DirectorySequence(0);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v35(v33, 1, 1, v34);
  v30((char *)v32, v18, v13);
  *(_QWORD *)(v32 + *(int *)(v31 + 36)) = v25;
  v36 = v68;
  v30(v68, v18, v13);
  swift_retain();
  v37 = (uint64_t)v76;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v36, 0, 0);
  v38 = *(void (**)(char *, uint64_t))(v29 + 8);
  v38(v18, v13);
  v35(v37, 0, 1, v34);
  sub_100004084(v37, (uint64_t)v67, (uint64_t *)&unk_1010F77A0);
  v39 = v75;
  sub_100005CF0(v32, v75, &qword_10110ABA8);
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56);
  v41 = (uint64_t)v70;
  v40(v70, 1, 1, v31);
  sub_100004048(v41, &qword_10110ABB0);
  sub_100005CF0(v39, v41, &qword_10110ABA8);
  v40((char *)v41, 0, 1, v31);
  v42 = v74;
  sub_100005CF0(v41, v74, (uint64_t *)&unk_101111600);
  v38(v69, v13);
  v43 = sub_10001A9A8((uint64_t *)&unk_101111610);
  v44 = swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  sub_100005CF0(v42, v44 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v44 + 16), (uint64_t *)&unk_101111600);
  v45 = sub_100892AD8(v44 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v44 + 16));
  swift_setDeallocating(v44);
  sub_100004048(v44 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v44 + 16), (uint64_t *)&unk_101111600);
  swift_deallocClassInstance(v44, *(unsigned int *)(*(_QWORD *)v44 + 48), *(unsigned __int16 *)(*(_QWORD *)v44 + 52));
  v46 = v80;
  if (!*(_QWORD *)(v45 + 16))
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v47 = type metadata accessor for Logger(0);
    sub_10001A9E8(v47, (uint64_t)qword_1011B6748);
    v48 = v66;
    v49 = sub_10005972C(v46, v66, type metadata accessor for OwnerSharingCircle);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc(22, -1);
      v53 = swift_slowAlloc(32, -1);
      *(_DWORD *)v52 = 141558275;
      v83 = 1752392040;
      v84[0] = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v52 + 4, v52 + 12);
      *(_WORD *)(v52 + 12) = 2081;
      v54 = type metadata accessor for UUID(0);
      v55 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v54, v55);
      v83 = sub_100016940(v56, v57, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v52 + 14, v52 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v66, type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "No sharedSecrets records to delete for circleIdentifier: %{private,mask.hash}s.", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      sub_1000126B0(v48, type metadata accessor for OwnerSharingCircle);
    }

  }
  v58 = swift_bridgeObjectRetain(*(_QWORD *)(v46 + *(int *)(v82 + 32)));
  v59 = sub_100508A54(v58);
  swift_bridgeObjectRelease();
  v60 = sub_10001B664(v59);
  v61 = swift_release();
  __chkstk_darwin(v61);
  v63 = v78;
  v62 = v79;
  *(&v65 - 2) = v60;
  *(&v65 - 1) = v63;
  sub_10085E638(v62, (void (*)(_QWORD, _QWORD, __n128))sub_1008802BC);
  swift_bridgeObjectRelease();
  sub_10005972C(v46, v81, type metadata accessor for OwnerSharingCircle);
  return v45;
}

uint64_t sub_100814890@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[2];

  v67 = (char *)a3;
  v75 = a4;
  v6 = type metadata accessor for OwnerPeerTrust(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v66 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v9);
  v70 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v72 = *(_QWORD *)(v69 - 8);
  v11 = __chkstk_darwin(v69);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v71 = (uint64_t)&v61 - v14;
  v15 = type metadata accessor for URL(0);
  v74 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v61 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v61 - v22;
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v68 = (uint64_t)&v61 - v28;
  v29 = *(int *)(v6 + 20);
  v73 = a1;
  if ((sub_100A07660(a1 + v29, a2) & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v75, 1, 1, v6);
  v62 = v18;
  v64 = v7;
  v65 = v6;
  v30 = *((_QWORD *)v67 + 20);
  if (qword_1010EA118 != -1)
    swift_once(&qword_1010EA118, sub_100A2ECA4);
  v31 = sub_10001A9E8(v15, (uint64_t)qword_1011B7B10);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
  v63 = v23;
  v32(v23, v31, v15);
  v32(v21, (uint64_t)v23, v15);
  v33 = v69;
  v67 = &v13[*(int *)(v69 + 40)];
  v34 = (uint64_t)v67;
  v35 = type metadata accessor for DirectorySequence(0);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v36(v34, 1, 1, v35);
  v32(v13, (uint64_t)v21, v15);
  *(_QWORD *)&v13[*(int *)(v33 + 36)] = v30;
  v37 = v62;
  v32(v62, (uint64_t)v21, v15);
  swift_retain();
  v38 = (uint64_t)v70;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v37, 0, 0);
  v39 = *(void (**)(char *, uint64_t))(v74 + 8);
  v39(v21, v15);
  v36(v38, 0, 1, v35);
  sub_100004084(v38, (uint64_t)v67, (uint64_t *)&unk_1010F77A0);
  v40 = v71;
  sub_100005CF0((uint64_t)v13, v71, (uint64_t *)&unk_1011115B0);
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
  v41(v27, 1, 1, v33);
  sub_100004048((uint64_t)v27, (uint64_t *)&unk_1010F77C0);
  sub_100005CF0(v40, (uint64_t)v27, (uint64_t *)&unk_1011115B0);
  v41(v27, 0, 1, v33);
  v42 = v68;
  sub_100005CF0((uint64_t)v27, v68, (uint64_t *)&unk_1010F77B0);
  v39(v63, v15);
  v43 = sub_100892130(v42);
  v44 = sub_100004048(v42, (uint64_t *)&unk_1010F77B0);
  __chkstk_darwin(v44);
  v45 = v73;
  *(&v61 - 2) = v73;
  v46 = *(_QWORD *)(sub_10008B4C0((uint64_t (*)(char *))sub_1008802C4, (unint64_t *)&v61 - 4, v43) + 16);
  swift_bridgeObjectRelease();
  if (v46 <= 1)
  {
    v60 = v75;
    sub_10005972C(v45, v75, type metadata accessor for OwnerPeerTrust);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v60, 0, 1, v65);
  }
  else
  {
    v47 = v65;
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v48 = type metadata accessor for Logger(0);
    sub_10001A9E8(v48, (uint64_t)qword_1011B6748);
    v49 = v66;
    v50 = sub_10005972C(v45, v66, type metadata accessor for OwnerPeerTrust);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc(22, -1);
      v54 = swift_slowAlloc(32, -1);
      *(_DWORD *)v53 = 141558275;
      v76 = 1752392040;
      v77[0] = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v53 + 4, v53 + 12);
      *(_WORD *)(v53 + 12) = 2081;
      v55 = type metadata accessor for UUID(0);
      v56 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v55, v56);
      v76 = sub_100016940(v57, v58, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v53 + 14, v53 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v49, type metadata accessor for OwnerPeerTrust);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "No peerTrust to delete for peerTrustIdentifier: %{private,mask.hash}s.\nThere are more shared beacons with the sharee.", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      sub_1000126B0(v49, type metadata accessor for OwnerPeerTrust);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v75, 1, 1, v47);
  }
}

uint64_t sub_100814F18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  if (*(_QWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for OwnerSharingCircle(0) + 32)) + 16))
  {
    v3 = type metadata accessor for OwnerPeerTrust(0);
    sub_100003FB0(a2 + *(int *)(v3 + 20));
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

char *sub_100814F80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, _QWORD *);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  size_t v106;
  __n128 v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  void (*v135)(char *, uint64_t, uint64_t);
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  int64_t v157;
  char *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;

  v143 = sub_10001A9A8((uint64_t *)&unk_1011117D0);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v156 = (uint64_t)&v126 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_10001A9A8(&qword_10110ABA8);
  v140 = *(_QWORD *)(v141 - 8);
  v3 = __chkstk_darwin(v141);
  v139 = (char *)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v138 = (uint64_t)&v126 - v5;
  v6 = sub_10001A9A8((uint64_t *)&unk_101111600);
  v7 = __chkstk_darwin(v6);
  v137 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v136 = (uint64_t)&v126 - v9;
  v10 = type metadata accessor for OwnerSharingCircle(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (uint64_t)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v154 = (char *)&v126 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v126 - v17;
  v19 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v23);
  v149 = (char *)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = (_QWORD *)sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v133 = (void (*)(char *, uint64_t))*(v153 - 1);
  v25 = __chkstk_darwin(v153);
  v152 = (uint64_t)&v126 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v131 = (uint64_t)&v126 - v27;
  v148 = type metadata accessor for URL(0);
  v134 = *(_QWORD *)(v148 - 8);
  v28 = __chkstk_darwin(v148);
  v147 = (char *)&v126 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v146 = (char *)&v126 - v31;
  __chkstk_darwin(v30);
  v158 = (char *)&v126 - v32;
  v33 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v34 = __chkstk_darwin(v33);
  v128 = (char *)&v126 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v129 = (uint64_t)&v126 - v36;
  v37 = *(_QWORD *)(a1 + 16);
  v38 = _swiftEmptyArrayStorage;
  v130 = a1;
  v159 = v10;
  v132 = v11;
  v151 = v14;
  v157 = v37;
  if (v37)
  {
    v160 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v37, 0);
    v39 = a1;
    v40 = v37;
    v41 = v39 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v155 = *(_QWORD *)(v11 + 72);
    do
    {
      sub_10005972C(v41, (uint64_t)v18, type metadata accessor for OwnerSharingCircle);
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v22, &v18[*(int *)(v10 + 20)], v19);
      sub_1000126B0((uint64_t)v18, type metadata accessor for OwnerSharingCircle);
      v38 = v160;
      if ((swift_isUniquelyReferenced_nonNull_native(v160) & 1) == 0)
      {
        sub_10009A578(0, v38[2] + 1, 1);
        v38 = v160;
      }
      v43 = v38[2];
      v42 = v38[3];
      if (v43 >= v42 >> 1)
      {
        sub_10009A578(v42 > 1, v43 + 1, 1);
        v38 = v160;
      }
      v38[2] = v43 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))((unint64_t)v38+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v43, v22, v19);
      v160 = v38;
      v41 += v155;
      --v40;
      v10 = v159;
    }
    while (v40);
    v14 = v151;
  }
  v127 = sub_10001B664((uint64_t)v38);
  swift_bridgeObjectRelease();
  v145 = *(_QWORD *)(v150 + 160);
  if (qword_1010EA118 != -1)
    goto LABEL_45;
  while (1)
  {
    v44 = v148;
    v45 = sub_10001A9E8(v148, (uint64_t)qword_1011B7B10);
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 16);
    v47 = v158;
    v46(v158, v45, v44);
    v48 = v146;
    v46(v146, (uint64_t)v47, v44);
    v49 = v152;
    v50 = (uint64_t)v153;
    v155 = v152 + *((int *)v153 + 10);
    v51 = v155;
    v52 = type metadata accessor for DirectorySequence(0);
    v144 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
    v144(v51, 1, 1, v52);
    v46((char *)v49, (uint64_t)v48, v44);
    *(_QWORD *)(v49 + *(int *)(v50 + 36)) = v145;
    v53 = v147;
    v135 = v46;
    v46(v147, (uint64_t)v48, v44);
    swift_retain();
    v54 = (uint64_t)v149;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v53, 0, 0);
    v55 = *(void (**)(char *, uint64_t))(v134 + 8);
    v56 = v48;
    v57 = v44;
    v55(v56, v44);
    v134 = v52;
    v144(v54, 0, 1, v52);
    sub_100004084(v54, v155, (uint64_t *)&unk_1010F77A0);
    v58 = v131;
    sub_100005CF0(v152, v131, (uint64_t *)&unk_1011115B0);
    v59 = (void (*)(char *, uint64_t, uint64_t, _QWORD *))*((_QWORD *)v133 + 7);
    v60 = (uint64_t)v128;
    v61 = (uint64_t)v153;
    v59(v128, 1, 1, v153);
    sub_100004048(v60, (uint64_t *)&unk_1010F77C0);
    sub_100005CF0(v58, v60, (uint64_t *)&unk_1011115B0);
    v59((char *)v60, 0, 1, (_QWORD *)v61);
    v62 = v129;
    sub_100005CF0(v60, v129, (uint64_t *)&unk_1010F77B0);
    v133 = v55;
    v55(v158, v57);
    v63 = sub_100892130(v62);
    sub_100004048(v62, (uint64_t *)&unk_1010F77B0);
    v64 = sub_10085F2DC(v63, v127);
    v155 = 0;
    swift_release();
    swift_bridgeObjectRelease();
    v161 = _swiftEmptyArrayStorage;
    v65 = v64[2];
    if (!v65)
      break;
    v66 = (uint64_t)v64 + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
    v67 = *(_QWORD *)(v132 + 72);
    v153 = v64;
    swift_bridgeObjectRetain(v64);
    v68 = (uint64_t)v154;
    while (1)
    {
      sub_10005972C(v66, v68, type metadata accessor for OwnerSharingCircle);
      v70 = *(_QWORD *)(v68 + *(int *)(v10 + 32));
      v14 = *(_QWORD *)(v70 + 16);
      if (!v14)
      {
        v69 = _swiftEmptyArrayStorage;
        goto LABEL_13;
      }
      v71 = sub_10001A9A8(&qword_1011003C0);
      v10 = *(_QWORD *)(v20 + 72);
      v72 = *(unsigned __int8 *)(v20 + 80);
      v73 = (v72 + 32) & ~v72;
      v69 = (_QWORD *)swift_allocObject(v71, v73 + v10 * v14, v72 | 7);
      v74 = j__malloc_size(v69);
      if (!v10)
        break;
      if (v74 - v73 == 0x8000000000000000 && v10 == -1)
        goto LABEL_44;
      v69[2] = v14;
      v69[3] = 2 * ((uint64_t)(v74 - v73) / v10);
      swift_bridgeObjectRetain_n(v70, 2);
      v10 = sub_10050A294(&v160, (char *)v69 + v73, v14, v70);
      sub_10007CC38((uint64_t)v160);
      if (v10 != v14)
        goto LABEL_43;
      swift_bridgeObjectRelease();
      v10 = v159;
      v68 = (uint64_t)v154;
LABEL_13:
      sub_1000126B0(v68, type metadata accessor for OwnerSharingCircle);
      sub_1003028FC((uint64_t)v69);
      v66 += v67;
      if (!--v65)
      {
        swift_bridgeObjectRelease_n(v153, 2);
        v76 = v161;
        v77 = v130;
        v14 = v151;
        v78 = v132;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    swift_once(&qword_1010EA118, sub_100A2ECA4);
  }
  swift_bridgeObjectRelease();
  v76 = _swiftEmptyArrayStorage;
  v78 = v132;
  v77 = v130;
LABEL_24:
  v79 = sub_10001B664((uint64_t)v76);
  swift_bridgeObjectRelease();
  v80 = v157;
  if (v157)
  {
    v81 = v77 + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80));
    v131 = *(_QWORD *)(v78 + 72);
    swift_bridgeObjectRetain(v77);
    v82 = (char *)_swiftEmptyArrayStorage;
    v83 = &_swiftEmptySetSingleton;
    v132 = v79;
    do
    {
      v153 = v83;
      v154 = v82;
      v157 = v80;
      v152 = v81;
      sub_10005972C(v81, v14, type metadata accessor for OwnerSharingCircle);
      if (qword_1010EA0F0 != -1)
        swift_once(&qword_1010EA0F0, sub_1009AC81C);
      v84 = v148;
      v85 = sub_10001A9E8(v148, (uint64_t)qword_1011B7AC8);
      v86 = UUID.uuidString.getter(v85);
      v87 = v158;
      URL.appendingPathComponent(_:isDirectory:)(v86, v88, 1);
      swift_bridgeObjectRelease();
      v89 = v146;
      v90 = (void (*)(char *, char *, uint64_t))v135;
      v135(v146, (uint64_t)v87, v84);
      v91 = v141;
      v92 = v139;
      v93 = (uint64_t)&v139[*(int *)(v141 + 40)];
      v94 = v134;
      v95 = v144;
      v144(v93, 1, 1, v134);
      v90(v92, v89, v84);
      *(_QWORD *)&v92[*(int *)(v91 + 36)] = v145;
      v96 = v147;
      v90(v147, v89, v84);
      swift_retain();
      v97 = (uint64_t)v149;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v96, 0, 0);
      v98 = v133;
      v133(v89, v84);
      v95(v97, 0, 1, v94);
      sub_100004084(v97, v93, (uint64_t *)&unk_1010F77A0);
      v99 = (uint64_t)v92;
      v100 = v138;
      sub_100005CF0(v99, v138, &qword_10110ABA8);
      v101 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56);
      v102 = (uint64_t)v137;
      v101(v137, 1, 1, v91);
      sub_100004048(v102, &qword_10110ABB0);
      sub_100005CF0(v100, v102, &qword_10110ABA8);
      v101((char *)v102, 0, 1, v91);
      v103 = v136;
      sub_100005CF0(v102, v136, (uint64_t *)&unk_101111600);
      v98(v158, v84);
      v104 = sub_10001A9A8((uint64_t *)&unk_101111610);
      v105 = swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
      sub_100005CF0(v103, v105 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v105 + 16), (uint64_t *)&unk_101111600);
      v106 = sub_100892AD8(v105 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v105 + 16));
      swift_setDeallocating(v105);
      sub_100004048(v105 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v105 + 16), (uint64_t *)&unk_101111600);
      swift_deallocClassInstance(v105, *(unsigned int *)(*(_QWORD *)v105 + 48), *(unsigned __int16 *)(*(_QWORD *)v105 + 52));
      v14 = v151;
      v107 = swift_bridgeObjectRetain(*(_QWORD *)(v151 + *(int *)(v159 + 32)));
      v108 = sub_100508A54(v107);
      swift_bridgeObjectRelease();
      v109 = (_QWORD *)sub_10001B664(v108);
      swift_release();
      if (*(_QWORD *)(v132 + 16) <= v109[2] >> 3)
      {
        v160 = v109;
        sub_10063AFB0(v132);
        v110 = v160;
      }
      else
      {
        v110 = sub_10063D7D8(v132, (uint64_t)v109);
      }
      v111 = (uint64_t)v153;
      if (v153[2] <= v110[2] >> 3)
      {
        v160 = v110;
        sub_10063AFB0((uint64_t)v153);
        v112 = v160;
      }
      else
      {
        v112 = sub_10063D7D8((uint64_t)v153, (uint64_t)v110);
      }
      swift_bridgeObjectRetain(v112);
      v83 = (_QWORD *)sub_100BBD084(v113, v111);
      v114 = v150;
      swift_retain();
      v115 = v155;
      sub_10085E898((uint64_t)v112, v114);
      v117 = v116;
      v155 = v115;
      swift_bridgeObjectRelease();
      swift_release();
      v118 = *(int *)(v143 + 48);
      v119 = *(int *)(v143 + 64);
      v120 = v156;
      sub_10005972C(v14, v156, type metadata accessor for OwnerSharingCircle);
      *(_QWORD *)(v120 + v118) = v106;
      *(_QWORD *)(v120 + v119) = v117;
      v82 = v154;
      if ((swift_isUniquelyReferenced_nonNull_native(v154) & 1) == 0)
        v82 = (char *)sub_1007C884C(0, *((_QWORD *)v82 + 2) + 1, 1, (unint64_t)v82);
      v121 = v157;
      v122 = v152;
      v124 = *((_QWORD *)v82 + 2);
      v123 = *((_QWORD *)v82 + 3);
      if (v124 >= v123 >> 1)
        v82 = (char *)sub_1007C884C(v123 > 1, v124 + 1, 1, (unint64_t)v82);
      *((_QWORD *)v82 + 2) = v124 + 1;
      sub_100005CF0(v156, (uint64_t)&v82[((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80))+ *(_QWORD *)(v142 + 72) * v124], (uint64_t *)&unk_1011117D0);
      sub_1000126B0(v14, type metadata accessor for OwnerSharingCircle);
      v81 = v122 + v131;
      v80 = v121 - 1;
    }
    while (v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v82 = (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  return v82;
}

uint64_t sub_100815DC4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t *v85;
  int v86;
  void (*v87)(char *, uint64_t);
  uint64_t (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  _QWORD *v90;
  uint64_t *v91;
  _QWORD *v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v92 = *(_QWORD **)(v4 - 8);
  v93 = (void (*)(char *, uint64_t))v4;
  __chkstk_darwin(v4);
  v91 = (uint64_t *)((char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v95 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v84 - v14;
  v17 = a1[3];
  v16 = a1[4];
  v90 = a1;
  sub_10001AA44(a1, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 32))(v17);
  v97 = v2;
  v18 = *(_QWORD *)(v2 + 160);
  if (qword_1010EA1B8 != -1)
    swift_once(&qword_1010EA1B8, sub_100AFC4C0);
  v19 = sub_10001A9E8(v6, (uint64_t)qword_1011B7C40);
  v88 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v20 = v88(v9, v19, v6);
  __chkstk_darwin(v20);
  v94 = v18;
  *(&v84 - 4) = v18;
  *(&v84 - 3) = (uint64_t)v15;
  *(&v84 - 2) = (uint64_t)v9;
  OS_dispatch_queue.sync<A>(execute:)(sub_10044AB30, &v84 - 6, &type metadata for Bool);
  v89 = 0;
  v21 = v101;
  v87 = *(void (**)(char *, uint64_t))(v7 + 8);
  v98 = v9;
  v87(v9, v6);
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v15, v10);
  v23 = v90;
  if ((v21 & 1) == 0)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B6748);
    v25 = sub_100030784((uint64_t)v23, (uint64_t)&v101);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(32, -1);
      v96 = v30;
      *(_DWORD *)v29 = 141558275;
      v99 = 1752392040;
      v100 = v30;
      v85 = &v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v29 + 4, v29 + 12);
      *(_WORD *)(v29 + 12) = 2081;
      v84 = v29 + 14;
      v86 = v28;
      v32 = v102;
      v31 = v103;
      sub_10001AA44(&v101, v102);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 8) + 32))(v32);
      v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v10, v33);
      v36 = v35;
      v22(v15, v10);
      v99 = sub_100016940(v34, v36, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v85, v84, v29 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v101);
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v86, "Could not remove KeySyncRecord for %{private,mask.hash}s.", (uint8_t *)v29, 0x16u);
      v37 = v96;
      swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v101);
    }

  }
  v96 = v10;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v38 = qword_1011B7160;
  v40 = v23[3];
  v39 = v23[4];
  sub_10001AA44(v23, v40);
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 8) + 32))(v40);
  v42 = v91;
  v43 = static DispatchWorkItemFlags.barrier.getter(v41);
  __chkstk_darwin(v43);
  *(&v84 - 4) = v38;
  *(&v84 - 3) = (uint64_t)v15;
  *(&v84 - 2) = (uint64_t)sub_1000683B8;
  *(&v84 - 1) = 0;
  v44 = v89;
  OS_dispatch_queue.sync<A>(flags:execute:)(v42, sub_1001D3478);
  ((void (*)(uint64_t *, _QWORD))v92[1])(v42, v93);
  v93 = v22;
  v22(v15, v96);
  v45 = v97;
  v46 = *(_QWORD *)(v97 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v47 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v45, v46, (char *)&type metadata for () + 8, v47);
  v48 = v101;
  v49 = v23[3];
  v50 = v23[4];
  v51 = sub_10001AA44(v23, v49);
  sub_100DF5D30((uint64_t)v51, 0, 0, v48, v49, v50);
  swift_release();
  sub_100030784((uint64_t)v23, (uint64_t)&v101);
  v52 = swift_allocObject(&unk_1010963B0, 64, 7);
  *(_QWORD *)(v52 + 16) = v45;
  sub_10000F9FC(&v101, v52 + 24);
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&unk_10110AB90, v52, (char *)&type metadata for () + 8);
  if (v44)
  {
    swift_release();
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v53 = type metadata accessor for Logger(0);
    sub_10001A9E8(v53, (uint64_t)qword_1011B6748);
    v54 = sub_100030784((uint64_t)v23, (uint64_t)&v101);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc(22, -1);
      v58 = swift_slowAlloc(32, -1);
      v92 = (_QWORD *)v58;
      *(_DWORD *)v57 = 141558275;
      v99 = 1752392040;
      v100 = v58;
      v91 = &v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v57 + 4, v57 + 12);
      *(_WORD *)(v57 + 12) = 2081;
      v89 = v57 + 14;
      v60 = v102;
      v59 = v103;
      sub_10001AA44(&v101, v102);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v59 + 8) + 8) + 32))(v60);
      v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v62 = v96;
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v96, v61);
      v65 = v64;
      v93(v15, v62);
      v99 = sub_100016940(v63, v65, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v91, v89, v57 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v101);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Could not remove attributes for %{private,mask.hash}s.", (uint8_t *)v57, 0x16u);
      v66 = v92;
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v101);
    }
    swift_errorRelease(v44);

  }
  else
  {
    swift_release();
  }
  sub_100030784((uint64_t)v23, (uint64_t)&v101);
  v67 = swift_allocObject(&unk_1010963D8, 64, 7);
  *(_QWORD *)(v67 + 16) = v97;
  sub_10000F9FC(&v101, v67 + 24);
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&unk_10110ABA0, v67, (char *)&type metadata for () + 8);
  swift_release();
  v69 = v23[3];
  v68 = v23[4];
  sub_10001AA44(v23, v69);
  v70 = *(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 8) + 8) + 32);
  v71 = (uint64_t)v95;
  v70(v69);
  v72 = sub_10088AA6C(v71);
  v73 = v72[2];
  if (v73)
  {
    v74 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
    v75 = *(unsigned __int8 *)(v74 + 80);
    v92 = v72;
    v76 = (char *)v72 + ((v75 + 32) & ~v75);
    if (qword_1010EA060 != -1)
      swift_once(&qword_1010EA060, sub_100967AE8);
    v97 = *(_QWORD *)(v74 + 72);
    v77 = v98;
    v78 = v87;
    v79 = v88;
    do
    {
      v80 = sub_10001A9E8(v6, (uint64_t)qword_1011B7970);
      v81 = v79(v77, v80, v6);
      __chkstk_darwin(v81);
      *(&v84 - 2) = (uint64_t)v98;
      *(&v84 - 1) = v82;
      OS_dispatch_queue.sync<A>(execute:)(sub_1000880B0, &v84 - 4, &type metadata for Bool);
      v77 = v98;
      v78(v98, v6);
      v76 += v97;
      --v73;
    }
    while (v73);
  }
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v93)(v95, v96);
}

uint64_t sub_10081695C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v6);
  v3[8] = swift_task_alloc(v6);
  return swift_task_switch(sub_1008169CC, 0, 0);
}

uint64_t sub_1008169CC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uid_t v7;
  _QWORD *v8;

  v1 = v0[3];
  v2 = (_QWORD *)v0[4];
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v4 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v1, v3, &type metadata for () + 1, v4);
  v0[9] = v0[2];
  v6 = v2[3];
  v5 = v2[4];
  sub_10001AA44(v2, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 32))(v6);
  v7 = getuid();
  sub_100A06500(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1010FCEF4);
  v0[10] = v8;
  *v8 = v0;
  v8[1] = sub_100816ACC;
  return sub_100479DCC(v0[8], v0[7]);
}

uint64_t sub_100816ACC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100816B84, 0, 0);
  v5 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(v3 + 48);
  v6 = *(_QWORD *)(v3 + 56);
  v8 = *(_QWORD *)(v3 + 40);
  swift_release();
  v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v6, v8);
  v9(v5, v8);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100816B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 72));
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v4);
  v5(v1, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100816BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v6);
  v3[8] = swift_task_alloc(v6);
  return swift_task_switch(sub_100816C64, 0, 0);
}

uint64_t sub_100816C64()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uid_t v7;
  _QWORD *v8;

  v1 = v0[3];
  v2 = (_QWORD *)v0[4];
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v4 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v1, v3, &type metadata for () + 1, v4);
  v0[9] = v0[2];
  v6 = v2[3];
  v5 = v2[4];
  sub_10001AA44(v2, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 32))(v6);
  v7 = getuid();
  sub_100A06500(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1010FCE8C);
  v0[10] = v8;
  *v8 = v0;
  v8[1] = sub_100816D64;
  return sub_100473F20(v0[7], v0[8]);
}

uint64_t sub_100816D64()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = *(_QWORD *)(v3 + 56);
    v5 = *(_QWORD *)(v3 + 40);
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 48) + 8);
    *(_QWORD *)(v3 + 96) = v6;
    v6(v4, v5);
    return swift_task_switch(sub_100816E40, 0, 0);
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 64);
    v9 = *(_QWORD *)(v3 + 56);
    v10 = *(_QWORD *)(v3 + 40);
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 48) + 8);
    v11(v9, v10);
    v11(v8, v10);
    swift_release();
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
}

uint64_t sub_100816E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD))(v0 + 96))(v1, *(_QWORD *)(v0 + 40));
  swift_release(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100816EA4(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[27];
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v46[16] = a3;
  v46[8] = a2;
  v46[18] = a1;
  v46[13] = a4;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE540);
  __chkstk_darwin(v4);
  v46[11] = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101109310);
  v7 = __chkstk_darwin(v6);
  v46[6] = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v46[12] = (char *)v46 - v10;
  v11 = __chkstk_darwin(v9);
  v12 = __chkstk_darwin(v11);
  v46[17] = (char *)v46 - v13;
  v14 = __chkstk_darwin(v12);
  v46[7] = (char *)v46 - v15;
  __chkstk_darwin(v14);
  v46[14] = (char *)v46 - v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v17);
  v52 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v50 = *(_QWORD *)(v19 - 8);
  v51 = v19;
  v20 = __chkstk_darwin(v19);
  v49 = (char *)v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v48 = (char *)v46 - v22;
  v47 = type metadata accessor for URL(0);
  v56 = *(_QWORD *)(v47 - 8);
  v23 = __chkstk_darwin(v47);
  v46[26] = (char *)v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v46[25] = (char *)v46 - v26;
  __chkstk_darwin(v25);
  v55 = (char *)v46 - v27;
  v28 = sub_10001A9A8(&qword_1010FB1F0);
  v29 = __chkstk_darwin(v28);
  v46[24] = (char *)v46 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v46[23] = (char *)v46 - v31;
  v32 = type metadata accessor for UUID(0);
  v33 = __chkstk_darwin(v32);
  v34 = __chkstk_darwin(v33);
  v35 = __chkstk_darwin(v34);
  v46[9] = (char *)v46 - v36;
  v37 = __chkstk_darwin(v35);
  v46[15] = (char *)v46 - v38;
  v39 = __chkstk_darwin(v37);
  v46[10] = (char *)v46 - v40;
  __chkstk_darwin(v39);
  v53 = (char *)v46 - v41;
  v42 = sub_10001A9A8(&qword_1010ED860);
  v43 = __chkstk_darwin(v42);
  v54 = (char *)v46 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MACAddress.data.getter(v43);
  __asm { BR              X10 }
}

uint64_t sub_1008172E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void (*v83)(_QWORD, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void (*v158)(uint64_t, uint64_t);
  void (*v159)(uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD v185[2];
  unint64_t v186;

  if (BYTE6(v5) == 6)
  {
    *(_QWORD *)(v9 - 168) = v8;
    *(_QWORD *)(v9 - 424) = v6;
    *(_QWORD *)(v9 - 408) = v2;
    v10 = *(_QWORD *)(v9 - 112);
    v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v13 = type metadata accessor for BeaconKeyManager(0);
    v14 = *(_QWORD *)(v9 - 136);
    v15 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v10, v11, &type metadata for () + 1, v13);
    *(_QWORD *)(v9 - 136) = v14;
    v16 = *(_QWORD *)(v9 - 72);
    __chkstk_darwin(v15);
    v185[0] = v16;
    v185[1] = a1;
    *(_QWORD *)(v9 - 416) = a1;
    v186 = v5;
    v17 = sub_10001A9A8((uint64_t *)&unk_101115F20);
    v18 = *(_QWORD *)(v9 - 136);
    OS_dispatch_queue.sync<A>(execute:)(sub_1006ADC3C, &v184, v17);
    swift_release();
    v19 = *(_QWORD *)(v9 - 72);
    if (*(_QWORD *)(v19 + 16))
    {
      *(_QWORD *)(v9 - 432) = v5;
      v20 = sub_1007ECE10(v19);
      v21 = v18;
      swift_bridgeObjectRelease();
      v22 = v20;
      *(_QWORD *)(v9 - 72) = _swiftEmptyArrayStorage;
      v23 = v20[2];
      v24 = *(_QWORD *)(v9 - 168);
      *(_QWORD *)(v9 - 272) = v7;
      *(_QWORD *)(v9 - 448) = v1;
      *(_QWORD *)(v9 - 440) = v22;
      if (v23)
      {
        v25 = (char *)v22
            + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
        *(_QWORD *)(v9 - 288) = *(_QWORD *)(v24 + 72);
        *(_QWORD *)(v9 - 280) = *(_QWORD *)(v24 + 16);
        swift_retain();
        v26 = swift_bridgeObjectRetain(v22);
        v27 = *(_QWORD *)(v9 - 184);
        while (1)
        {
          v28 = *(_QWORD *)(v9 - 176);
          (*(void (**)(uint64_t, char *, uint64_t, __n128))(v9 - 280))(v28, v25, v7, v26);
          v29 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56);
          v29(v28, 0, 1, v7);
          v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v28, 1, v7);
          *(_QWORD *)(v9 - 136) = v21;
          if (v30 == 1)
            break;
          *(_QWORD *)(v9 - 296) = v29;
          *(_QWORD *)(v9 - 152) = v25;
          *(_QWORD *)(v9 - 144) = v23;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))(v27, v28, v7);
          v31 = *(_QWORD *)(*(_QWORD *)(v9 - 112) + 160);
          if (qword_1010E9A98 != -1)
            swift_once(&qword_1010E9A98, sub_1001FFA50);
          v32 = *(_QWORD *)(v9 - 232);
          v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B6C00);
          v34 = *(_QWORD *)(v9 - 128);
          v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 120) + 16);
          v35(v34, v33, v32);
          v36 = *(_QWORD *)(v9 - 248);
          v35(v36, v34, v32);
          v37 = *(_QWORD *)(v9 - 200);
          v38 = *(_QWORD *)(v9 - 216);
          v39 = v38 + *(int *)(v37 + 40);
          *(_QWORD *)(v9 - 160) = v39;
          v40 = type metadata accessor for DirectorySequence(0);
          v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
          v41(v39, 1, 1, v40);
          v35(v38, v36, v32);
          *(_QWORD *)(v38 + *(int *)(v37 + 36)) = v31;
          v42 = *(_QWORD *)(v9 - 240);
          v35(v42, v36, v32);
          swift_retain();
          v43 = *(_QWORD *)(v9 - 192);
          DirectorySequence.init(at:includingPropertiesForKeys:options:)(v42, 0, 0);
          v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 120) + 8);
          v44(v36, v32);
          v41(v43, 0, 1, v40);
          sub_100004084(v43, *(_QWORD *)(v9 - 160), (uint64_t *)&unk_1010F77A0);
          v45 = v38;
          v46 = *(_QWORD *)(v9 - 224);
          sub_100005CF0(v45, v46, (uint64_t *)&unk_1011057F0);
          v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 208) + 56);
          v48 = *(_QWORD *)(v9 - 256);
          v47(v48, 1, 1, v37);
          sub_100004048(v48, &qword_101105800);
          sub_100005CF0(v46, v48, (uint64_t *)&unk_1011057F0);
          v47(v48, 0, 1, v37);
          sub_100005CF0(v48, *(_QWORD *)(v9 - 264), &qword_1010FB1F0);
          v49 = ((uint64_t (*)(_QWORD, uint64_t))v44)(*(_QWORD *)(v9 - 128), v32);
          __chkstk_darwin(v49);
          v186 = *(_QWORD *)(v9 - 184);
          v50 = v186;
          v51 = *(_QWORD *)(v9 - 136);
          sub_100A7A30C(sub_100880184, (uint64_t)v185);
          v53 = v52;
          v54 = *(char **)(v9 - 112);
          swift_retain();
          v55 = sub_10085CC50(v53, v54);
          v21 = v51;
          swift_bridgeObjectRelease();
          swift_release();
          sub_100305054((uint64_t)v55);
          v24 = *(_QWORD *)(v9 - 168);
          v7 = *(_QWORD *)(v9 - 272);
          (*(void (**)(unint64_t, uint64_t))(v24 + 8))(v50, v7);
          v25 = (char *)(*(_QWORD *)(v9 - 152) + *(_QWORD *)(v9 - 288));
          v23 = *(_QWORD *)(v9 - 144) - 1;
          v27 = v50;
          if (*(_QWORD *)(v9 - 144) == 1)
          {
            v83 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(v9 - 296);
            goto LABEL_22;
          }
        }
        v82 = *(_QWORD *)(v9 - 320);
      }
      else
      {
        v83 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(v24 + 56);
        swift_retain();
        v26 = swift_bridgeObjectRetain(v22);
LABEL_22:
        *(_QWORD *)(v9 - 136) = v21;
        v83(*(_QWORD *)(v9 - 176), 1, 1, v7, v26);
        v82 = *(_QWORD *)(v9 - 320);
      }
      v84 = *(_QWORD *)(v9 - 368);
      swift_release();
      swift_bridgeObjectRelease_n(*(_QWORD *)(v9 - 440), 2);
      v85 = *(_QWORD *)(v9 - 72);
      v86 = *(_QWORD *)(v85 + 16);
      v87 = *(_QWORD *)(v9 - 312);
      if (v86 <= 1)
      {
        v101 = *(_QWORD *)(v9 - 336);
      }
      else
      {
        if (qword_1010E9938 != -1)
          swift_once(&qword_1010E9938, sub_1000AFBB0);
        v88 = type metadata accessor for Logger(0);
        sub_10001A9E8(v88, (uint64_t)qword_1011B6748);
        v89 = *(_QWORD *)(v9 - 168);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v89 + 16))(v84, *(_QWORD *)(v9 - 304), v7);
        swift_bridgeObjectRetain_n(v82, 2);
        swift_bridgeObjectRetain_n(v85, 2);
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.error.getter(v91);
        v93 = v92;
        if (os_log_type_enabled(v91, v92))
        {
          v94 = swift_slowAlloc(42, -1);
          v95 = swift_slowAlloc(64, -1);
          *(_QWORD *)(v9 - 112) = v95;
          *(_QWORD *)(v9 - 72) = v95;
          *(_DWORD *)v94 = 141558787;
          *(_QWORD *)(v9 - 96) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v94 + 4, v94 + 12);
          *(_WORD *)(v94 + 12) = 2081;
          v96 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          *(_DWORD *)(v9 - 120) = v93;
          v97 = dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)(v9 - 272), v96);
          *(_QWORD *)(v9 - 96) = sub_100016940(v97, v98, (uint64_t *)(v9 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v94 + 14, v94 + 22);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, _QWORD))(v89 + 8))(v84, *(_QWORD *)(v9 - 272));
          *(_WORD *)(v94 + 22) = 2080;
          swift_bridgeObjectRetain(*(_QWORD *)(v9 - 320));
          *(_QWORD *)(v9 - 96) = sub_100016940(*(_QWORD *)(v9 - 384), *(_QWORD *)(v9 - 320), (uint64_t *)(v9 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v94 + 24, v94 + 32);
          swift_bridgeObjectRelease_n(*(_QWORD *)(v9 - 320), 3);
          *(_WORD *)(v94 + 32) = 2048;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v9 - 96) = v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v94 + 34, v94 + 42);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)*(_DWORD *)(v9 - 120), "Warning: Multiple memberCircles found for unknownBeacon: %{private,mask.hash}s,\nownerHandle: %s, owner peer trust count: %ld.", (uint8_t *)v94, 0x2Au);
          v99 = *(_QWORD *)(v9 - 112);
          swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v99, -1, -1);
          v100 = v94;
          v82 = *(_QWORD *)(v9 - 320);
          swift_slowDealloc(v100, -1, -1);

        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v84, v7);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v82, 2);
        }
        v86 = *(_QWORD *)(v85 + 16);
        v101 = *(_QWORD *)(v9 - 336);
        v87 = *(_QWORD *)(v9 - 312);
      }
      v107 = *(_QWORD *)(v9 - 360);
      v108 = *(_QWORD *)(v9 - 328);
      v109 = *(_QWORD *)(v9 - 424);
      if (v86)
      {
        sub_10000F9B8(v85 + ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80)), *(_QWORD *)(v9 - 360), (uint64_t *)&unk_101109310);
        v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56);
        v111 = v107;
        v112 = 0;
      }
      else
      {
        v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56);
        v111 = *(_QWORD *)(v9 - 360);
        v112 = 1;
      }
      v113 = *(_QWORD *)(v9 - 408);
      v110(v111, v112, 1, v113);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v107, 1, v113) == 1)
      {
        sub_100004048(v107, (uint64_t *)&unk_1010EE540);
        if (qword_1010E9938 != -1)
          swift_once(&qword_1010E9938, sub_1000AFBB0);
        v114 = type metadata accessor for Logger(0);
        sub_10001A9E8(v114, (uint64_t)qword_1011B6748);
        v115 = *(_QWORD *)(v9 - 168);
        v116 = *(_QWORD *)(v9 - 376);
        v117 = *(_QWORD *)(v9 - 272);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v115 + 16))(v116, *(_QWORD *)(v9 - 304), v117);
        swift_bridgeObjectRetain_n(v82, 2);
        v119 = Logger.logObject.getter(v118);
        v120 = static os_log_type_t.error.getter(v119);
        v121 = v120;
        if (os_log_type_enabled(v119, v120))
        {
          v122 = swift_slowAlloc(32, -1);
          v123 = swift_slowAlloc(64, -1);
          *(_QWORD *)(v9 - 112) = v123;
          *(_QWORD *)(v9 - 72) = v123;
          *(_DWORD *)v122 = 141558531;
          *(_QWORD *)(v9 - 96) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v122 + 4, v122 + 12);
          *(_WORD *)(v122 + 12) = 2081;
          *(_QWORD *)(v9 - 128) = v110;
          *(_QWORD *)(v9 - 120) = v119;
          v124 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          *(_DWORD *)(v9 - 144) = v121;
          v125 = *(_QWORD *)(v9 - 376);
          v126 = dispatch thunk of CustomStringConvertible.description.getter(v117, v124);
          *(_QWORD *)(v9 - 96) = sub_100016940(v126, v127, (uint64_t *)(v9 - 72));
          v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 - 128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v122 + 14, v122 + 22);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v125, v117);
          *(_WORD *)(v122 + 22) = 2080;
          swift_bridgeObjectRetain(v82);
          *(_QWORD *)(v9 - 96) = sub_100016940(*(_QWORD *)(v9 - 384), v82, (uint64_t *)(v9 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v122 + 24, v122 + 32);
          swift_bridgeObjectRelease_n(v82, 3);
          v128 = *(NSObject **)(v9 - 120);
          _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)*(_DWORD *)(v9 - 144), "No peer trust found for unknownBeacon: %{private,mask.hash}s, ownerHandle: %s.", (uint8_t *)v122, 0x20u);
          v129 = *(_QWORD *)(v9 - 112);
          swift_arrayDestroy(v129, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v129, -1, -1);
          swift_slowDealloc(v122, -1, -1);
          sub_10001BC14(*(_QWORD *)(v9 - 416), *(_QWORD *)(v9 - 432));

        }
        else
        {
          sub_10001BC14(*(_QWORD *)(v9 - 416), *(_QWORD *)(v9 - 432));
          (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v116, v117);

          swift_bridgeObjectRelease_n(v82, 2);
        }
        return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v110)(*(_QWORD *)(v9 - 344), 1, 1, v113);
      }
      else
      {
        v130 = *(int *)(v113 + 48);
        v131 = v113;
        v132 = v101 + v130;
        v133 = v107 + v130;
        sub_1000126EC(v107, v101, type metadata accessor for MemberPeerTrust);
        sub_1000126EC(v133, v132, type metadata accessor for MemberSharingCircle);
        v134 = v101;
        if (qword_1010E9938 != -1)
          swift_once(&qword_1010E9938, sub_1000AFBB0);
        v135 = type metadata accessor for Logger(0);
        sub_10001A9E8(v135, (uint64_t)qword_1011B6748);
        v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 168) + 16);
        v137 = *(_QWORD *)(v9 - 304);
        v138 = *(_QWORD *)(v9 - 272);
        *(_QWORD *)(v9 - 112) = v136;
        v136(v108, v137, v138);
        v139 = *(int *)(v131 + 48);
        v140 = v131;
        v141 = *(_QWORD *)(v9 - 392);
        v142 = v141 + v139;
        sub_10005972C(v134, v141, type metadata accessor for MemberPeerTrust);
        sub_10005972C(v132, v142, type metadata accessor for MemberSharingCircle);
        sub_100005CF0(v141, v87, (uint64_t *)&unk_101109310);
        v143 = *(_QWORD *)(v9 - 448);
        v144 = v143 + *(int *)(v140 + 48);
        sub_10005972C(v134, v143, type metadata accessor for MemberPeerTrust);
        sub_10005972C(v132, v144, type metadata accessor for MemberSharingCircle);
        v145 = *(_QWORD *)(v9 - 352);
        v146 = sub_100005CF0(v143, v145, (uint64_t *)&unk_101109310);
        v147 = Logger.logObject.getter(v146);
        v148 = static os_log_type_t.default.getter(v147);
        v149 = v148;
        v150 = v132;
        if (os_log_type_enabled(v147, v148))
        {
          v151 = swift_slowAlloc(62, -1);
          v152 = swift_slowAlloc(96, -1);
          *(_QWORD *)(v9 - 144) = v152;
          *(_QWORD *)(v9 - 72) = v152;
          *(_DWORD *)v151 = 141559299;
          *(_QWORD *)(v9 - 96) = 1752392040;
          *(_QWORD *)(v9 - 128) = v132;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v151 + 4, v151 + 12);
          *(_WORD *)(v151 + 12) = 2081;
          v153 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v154 = *(_QWORD *)(v9 - 272);
          *(_QWORD *)(v9 - 120) = v153;
          *(_DWORD *)(v9 - 152) = v149;
          v155 = *(_QWORD *)(v9 - 328);
          v156 = dispatch thunk of CustomStringConvertible.description.getter(v154, v153);
          *(_QWORD *)(v9 - 96) = sub_100016940(v156, v157, (uint64_t *)(v9 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v151 + 14, v151 + 22);
          swift_bridgeObjectRelease();
          v158 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 168) + 8);
          v158(v155, v154);
          v159 = v158;
          *(_QWORD *)(v9 - 168) = v158;
          *(_WORD *)(v151 + 22) = 2160;
          *(_QWORD *)(v9 - 96) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v151 + 24, v151 + 32);
          *(_WORD *)(v151 + 32) = 2081;
          *(_QWORD *)(v9 - 192) = v151 + 34;
          v160 = *(int *)(*(_QWORD *)(v9 - 408) + 48);
          v161 = *(_QWORD *)(v9 - 400);
          v162 = v161 + v160;
          v163 = *(_QWORD *)(v9 - 312);
          v164 = v163 + v160;
          sub_10005972C(v163, v161, type metadata accessor for MemberPeerTrust);
          sub_10005972C(v164, v162, type metadata accessor for MemberSharingCircle);
          v165 = v161 + *(int *)(type metadata accessor for MemberPeerTrust(0) + 20);
          *(_QWORD *)(v9 - 160) = v147;
          v166 = *(_QWORD *)(v9 - 184);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 - 112))(v166, v165, v154);
          sub_1000126B0(v161, type metadata accessor for MemberPeerTrust);
          sub_1000126B0(v162, type metadata accessor for MemberSharingCircle);
          v167 = dispatch thunk of CustomStringConvertible.description.getter(v154, *(_QWORD *)(v9 - 120));
          v169 = v168;
          v159(v166, v154);
          *(_QWORD *)(v9 - 96) = sub_100016940(v167, v169, (uint64_t *)(v9 - 72));
          *(_QWORD *)(v9 - 176) = v9 - 88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, *(_QWORD *)(v9 - 192), v151 + 42);
          swift_bridgeObjectRelease();
          sub_100004048(v163, (uint64_t *)&unk_101109310);
          *(_WORD *)(v151 + 42) = 2160;
          *(_QWORD *)(v9 - 96) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v151 + 44, v151 + 52);
          *(_WORD *)(v151 + 52) = 2081;
          v170 = *(int *)(*(_QWORD *)(v9 - 408) + 48);
          v171 = v161 + v170;
          v172 = *(_QWORD *)(v9 - 352);
          v173 = v172 + v170;
          sub_10005972C(v172, v161, type metadata accessor for MemberPeerTrust);
          v174 = v173;
          v175 = *(_QWORD *)(v9 - 408);
          sub_10005972C(v174, v171, type metadata accessor for MemberSharingCircle);
          v176 = type metadata accessor for MemberSharingCircle(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 - 112))(v166, v171 + *(int *)(v176 + 20), v154);
          sub_1000126B0(v171, type metadata accessor for MemberSharingCircle);
          sub_1000126B0(v161, type metadata accessor for MemberPeerTrust);
          v177 = dispatch thunk of CustomStringConvertible.description.getter(v154, *(_QWORD *)(v9 - 120));
          v179 = v178;
          (*(void (**)(uint64_t, uint64_t))(v9 - 168))(v166, v154);
          *(_QWORD *)(v9 - 96) = sub_100016940(v177, v179, (uint64_t *)(v9 - 72));
          v150 = *(_QWORD *)(v9 - 128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, *(_QWORD *)(v9 - 176), v151 + 54, v151 + 62);
          swift_bridgeObjectRelease();
          sub_100004048(*(_QWORD *)(v9 - 352), (uint64_t *)&unk_101109310);
          v180 = *(NSObject **)(v9 - 160);
          _os_log_impl((void *)&_mh_execute_header, v180, (os_log_type_t)*(_DWORD *)(v9 - 152), "Share request data for unknownBeacon: %{private,mask.hash}s,\nowner peer trust: %{private,mask.hash}s,\nshare: %{private,mask.hash}s.", (uint8_t *)v151, 0x3Eu);
          v181 = *(_QWORD *)(v9 - 144);
          swift_arrayDestroy(v181, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v181, -1, -1);
          swift_slowDealloc(v151, -1, -1);
          sub_10001BC14(*(_QWORD *)(v9 - 416), *(_QWORD *)(v9 - 432));

          v182 = *(_QWORD *)(v9 - 344);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v9 - 168) + 8))(*(_QWORD *)(v9 - 328), *(_QWORD *)(v9 - 272));
          sub_100004048(*(_QWORD *)(v9 - 312), (uint64_t *)&unk_101109310);
          sub_100004048(v145, (uint64_t *)&unk_101109310);
          sub_10001BC14(*(_QWORD *)(v9 - 416), *(_QWORD *)(v9 - 432));

          v182 = *(_QWORD *)(v9 - 344);
          v175 = *(_QWORD *)(v9 - 408);
        }
        v183 = v182 + *(int *)(v175 + 48);
        sub_1000126EC(*(_QWORD *)(v9 - 336), v182, type metadata accessor for MemberPeerTrust);
        sub_1000126EC(v150, v183, type metadata accessor for MemberSharingCircle);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 424) + 56))(v182, 0, 1, v175);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v71 = *(_QWORD *)(v9 - 168);
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v72 = type metadata accessor for Logger(0);
      sub_10001A9E8(v72, (uint64_t)qword_1011B6748);
      v73 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v71 + 16))(v4, *(_QWORD *)(v9 - 304), v7);
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.error.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        v76 = v4;
        v77 = swift_slowAlloc(22, -1);
        v78 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v9 - 72) = v78;
        *(_DWORD *)v77 = 141558275;
        *(_QWORD *)(v9 - 96) = 1752392040;
        *(_QWORD *)(v9 - 432) = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v77 + 4, v77 + 12);
        *(_WORD *)(v77 + 12) = 2081;
        v79 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v80 = dispatch thunk of CustomStringConvertible.description.getter(v7, v79);
        *(_QWORD *)(v9 - 96) = sub_100016940(v80, v81, (uint64_t *)(v9 - 72));
        v5 = *(_QWORD *)(v9 - 432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v77 + 14, v77 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 168) + 8))(v76, v7);
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Cannot reconcile advertisement for unknownBeacon: %{private,mask.hash}s.", (uint8_t *)v77, 0x16u);
        swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v78, -1, -1);
        swift_slowDealloc(v77, -1, -1);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v4, v7);
      }

      type metadata accessor for SPBeaconSharingError(0);
      v103 = v102;
      *(_QWORD *)(v9 - 96) = 4;
      v104 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v105 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)byte_100E21930);
      v106 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v9 - 72), v9 - 96, v104, v103, v105);
      swift_willThrow(v106);
      return sub_10001BC14(*(_QWORD *)(v9 - 416), v5);
    }
  }
  else
  {
    sub_10001BC14(a1, v5);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v56 = type metadata accessor for Logger(0);
    sub_10001A9E8(v56, (uint64_t)qword_1011B6748);
    v57 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 16))(v3, *(_QWORD *)(v9 - 304), v7);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(22, -1);
      v61 = swift_slowAlloc(32, -1);
      *(_QWORD *)(v9 - 72) = v61;
      *(_DWORD *)v60 = 141558275;
      *(_QWORD *)(v9 - 96) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v60 + 4, v60 + 12);
      *(_WORD *)(v60 + 12) = 2081;
      *(_QWORD *)(v9 - 168) = v8;
      v62 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v7, v62);
      *(_QWORD *)(v9 - 96) = sub_100016940(v63, v64, (uint64_t *)(v9 - 72));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 - 96, v9 - 88, v60 + 14, v60 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 168) + 8))(v3, v7);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Cannot reconcile advertisement for unknownBeacon: %{private,mask.hash}s.", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v7);
    }

    type metadata accessor for SPBeaconSharingError(0);
    v66 = v65;
    *(_QWORD *)(v9 - 96) = 4;
    v67 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v68 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)byte_100E21930);
    v69 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v9 - 72), v9 - 96, v67, v66, v68);
    return swift_willThrow(v69);
  }
}

uint64_t sub_1008188D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  v35 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101102FB0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  sub_10081C45C(a1, (uint64_t)&v33 - v12);
  v14 = type metadata accessor for WildModeAssociationRecord(0);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
  if (v15(v13, 1, v14) != 1)
    return sub_1000126EC((uint64_t)v13, a2, type metadata accessor for WildModeAssociationRecord);
  sub_100004048((uint64_t)v13, &qword_101102FB0);
  sub_10081C0CC(a1, (uint64_t)v11);
  if (v15(v11, 1, v14) != 1)
  {
    v13 = v11;
    return sub_1000126EC((uint64_t)v13, a2, type metadata accessor for WildModeAssociationRecord);
  }
  sub_100004048((uint64_t)v11, &qword_101102FB0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v17 = v34;
  v18 = v35;
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 16))(v7, a1, v34);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(32, -1);
    v38 = v23;
    *(_DWORD *)v22 = 141558275;
    v36 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2081;
    v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v17, v24);
    v36 = sub_100016940(v25, v26, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v17);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "No wild mode association record found for unknownBeacon: %{private,mask.hash}s.", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v17);
  }

  type metadata accessor for SPOwnerSessionError(0);
  v29 = v28;
  v36 = 2;
  v30 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v31 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  v32 = _BridgedStoredNSError.init(_:userInfo:)(&v38, &v36, v30, v29, v31);
  return swift_willThrow(v32);
}

uint64_t sub_100818C6C(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD aBlock[7];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  __chkstk_darwin(v6);
  v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  __chkstk_darwin(v8);
  v34 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1007FDEC4();
  v11 = (_QWORD *)swift_allocObject(&unk_101096338, 40, 7);
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v2;
  v40 = a2;
  swift_retain_n(a2, 2);
  swift_retain_n(v2, 2);
  v12 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v13 = LOBYTE(aBlock[0]);
  v14 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v15 = qword_1011B7D48;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v17 + 56) = &type metadata for Bool;
  *(_QWORD *)(v17 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 32) = v13;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "localAvailable: %d", v33);
  v18 = swift_bridgeObjectRelease();
  v19 = static os_log_type_t.default.getter(v18);
  v20 = qword_1011B7D48;
  if (v13)
  {
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    a1(v3);
  }
  else
  {
    v21 = os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v20, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v33 = *(_QWORD *)(v10 + 64);
    v23 = (_QWORD *)swift_allocObject(&unk_101096360, 40, 7);
    v23[2] = v10;
    v23[3] = sub_1000170EC;
    v23[4] = v11;
    aBlock[4] = sub_100882D68;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101096378;
    v24 = _Block_copy(aBlock);
    swift_retain();
    v25 = swift_retain();
    v26 = v34;
    static DispatchQoS.unspecified.getter(v25);
    v41 = _swiftEmptyArrayStorage;
    v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v30 = v37;
    v31 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v28, v29, v39, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v26, v30, v24);
    _Block_release(v24);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v36);
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100819068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = sub_10001A9A8(&qword_101108DF0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (char *)swift_allocObject(&unk_101095118, v12 + v6, v11 | 7);
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v13[v12], (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  sub_100691AC0((uint64_t)v9, (uint64_t)&unk_10110AA58, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_1008191B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  v6 = sub_10001A9A8(&qword_101108DF0);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[7] = v8;
  v5[8] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10081921C, 0, 0);
}

uint64_t sub_10081921C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[4], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101095140, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  *v10 = v0;
  v10[1] = sub_100726E28;
  return unsafeBlocking<A>(_:)(v0[2], sub_10087B2DC, v8, &type metadata for () + 1);
}

uint64_t sub_1008192FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_10001A9A8(&qword_101108DF0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_101095168, v7 + v5, v6 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  sub_100818C6C((void (*)(uint64_t))sub_10087B32C, v8);
  return swift_release();
}

_QWORD *sub_1008193D8(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v6 = type metadata accessor for TimeBasedKeysCriteria(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2[3];
  v13 = a2[4];
  sub_10001AA44(a2, v12);
  v14 = sub_100ABA6B0(v12, v13);
  if (!v14)
  {
    v36 = v9;
    v15 = 0;
    goto LABEL_5;
  }
  if (v14 == 1)
  {
    v36 = v9;
    v15 = 1;
LABEL_5:
    v17 = a2[3];
    v16 = a2[4];
    sub_10001AA44(a2, v17);
    dispatch thunk of RawRepresentable.rawValue.getter(v40, v17, *(_QWORD *)(v16 + 56));
    v18 = v40[0];
    *v8 = v15;
    *((_QWORD *)v8 + 1) = v18;
    v8[16] = a3;
    swift_storeEnumTagMultiPayload(v8, v6, 3);
    sub_100834754(a1, (uint64_t)v8);
    v32 = __chkstk_darwin(v31);
    *(&v35 - 2) = a1;
    v33 = sub_10085D940(v32, (uint64_t (*)(_QWORD, _QWORD, __n128))sub_100880160);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v8, type metadata accessor for TimeBasedKeysCriteria);
    return v33;
  }
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B77E8);
  v20 = sub_100030784(a1, (uint64_t)v40);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(32, -1);
    *(_DWORD *)v23 = 141558275;
    v38 = 1752392040;
    v39 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2081;
    v26 = v41;
    v25 = v42;
    sub_10001AA44(v40, v41);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 8) + 32))(v26);
    v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v9, v27);
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v9);
    v38 = sub_100016940(v28, v30, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Secure locations index for %{private,mask.hash}s.\nIgnore update.", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
  }

  return 0;
}

void sub_100819A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34[10];
  uint64_t v35;
  _QWORD v36[3];
  _BYTE v37[8];

  v6 = type metadata accessor for KeySyncRecord(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v34[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v34[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v11, &qword_1010FD0B0);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    v12 = *v11;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B77E8);
    swift_errorRetain(v12);
    v14 = swift_errorRetain(v12);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v34[0] = v18;
      *(_DWORD *)v17 = 136315138;
      swift_getErrorValue(v12, v37, v36);
      v19 = Error.localizedDescription.getter(v36[1], v36[2]);
      v35 = sub_100016940(v19, v20, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to update KeySyncRecord record: %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(v12);
    }
    else
    {
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      swift_errorRelease(v12);

    }
  }
  else
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B77E8);
    sub_10005972C(a2, (uint64_t)v8, type metadata accessor for KeySyncRecord);
    v22 = sub_100879D2C(a3, (uint64_t)v34);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(32, -1);
      v26 = swift_slowAlloc(64, -1);
      v35 = v26;
      *(_DWORD *)v25 = 141558531;
      v33 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2081;
      v27 = type metadata accessor for UUID(0);
      v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
      v33 = sub_100016940(v29, v30, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v25 + 14, v25 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v8, type metadata accessor for KeySyncRecord);
      *(_WORD *)(v25 + 22) = 2082;
      v31 = sub_100C55FDC();
      v33 = sub_100016940(v31, v32, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v25 + 24, v25 + 32);
      swift_bridgeObjectRelease();
      sub_100879CF8((uint64_t)v34);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Updated KeySyncRecord %{private,mask.hash}s,\ncontext %{public}s.", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v8, type metadata accessor for KeySyncRecord);
      sub_100879CF8((uint64_t)v34);
    }

    sub_100004048((uint64_t)v11, &qword_1010FD0B0);
  }
}

void sub_100819EE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v2 = type metadata accessor for OwnedBeaconRecord(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v55 = (uint64_t)&v55 - v6;
  v7 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KeySyncRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v56 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for KeyAlignmentRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v57 = (uint64_t)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v2;
  if ((sub_100C6F9A8() & 1) == 0)
    goto LABEL_7;
  v19 = a1 + *(int *)(v59 + 20);
  sub_1008892B4((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    v20 = (uint64_t *)&unk_1010F47D0;
    v21 = (uint64_t)v15;
LABEL_6:
    sub_100004048(v21, v20);
LABEL_7:
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B77E8);
    v25 = sub_10005972C(a1, (uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(32, -1);
      *(_DWORD *)v28 = 141558275;
      v60 = 1752392040;
      v61 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v28 + 4, v28 + 12);
      *(_WORD *)(v28 + 12) = 2081;
      v30 = type metadata accessor for UUID(0);
      v31 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
      v34 = v33;
      v60 = sub_100016940(v32, v33, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease(v34);
      sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "KeyAlignmentRecord with the identifier not found - %{private,mask.hash}s.", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    }

    return;
  }
  v22 = v57;
  sub_1000126EC((uint64_t)v15, v57, type metadata accessor for KeyAlignmentRecord);
  v23 = v58;
  sub_10081AECC(v19, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1000126B0(v22, type metadata accessor for KeyAlignmentRecord);
    v20 = &qword_1010F7AE0;
    v21 = (uint64_t)v9;
    goto LABEL_6;
  }
  v35 = v23;
  v36 = v19;
  v37 = v56;
  sub_1000126EC((uint64_t)v9, v56, type metadata accessor for KeySyncRecord);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v38 = type metadata accessor for Logger(0);
  sub_10001A9E8(v38, (uint64_t)qword_1011B77E8);
  v39 = v55;
  v40 = sub_10005972C(a1, v55, type metadata accessor for OwnedBeaconRecord);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc(22, -1);
    v44 = swift_slowAlloc(32, -1);
    *(_DWORD *)v43 = 141558275;
    v60 = 1752392040;
    v61 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2081;
    v45 = type metadata accessor for UUID(0);
    v59 = v36;
    v46 = v39;
    v47 = v45;
    v48 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
    v51 = v50;
    v60 = sub_100016940(v49, v50, &v61);
    v22 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease(v51);
    v52 = v46;
    v36 = v59;
    sub_1000126B0(v52, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Updating KeyAlignmentRecord for identifier %{private,mask.hash}s.", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    v53 = v44;
    v35 = v58;
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    sub_1000126B0(v39, type metadata accessor for OwnedBeaconRecord);
  }

  v54 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v54);
  *(&v55 - 4) = v35;
  *(&v55 - 3) = v22;
  *(&v55 - 2) = v37;
  *(&v55 - 1) = v36;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-saveKeyAlignment", 46, 2, sub_10087FE7C, &v55 - 6, (char *)&type metadata for () + 8);
  sub_1000126B0(v37, type metadata accessor for KeySyncRecord);
  sub_1000126B0(v22, type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_10081A57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a2;
  v29 = a5;
  v26 = a4;
  v35 = a3;
  v32 = a1;
  v6 = type metadata accessor for KeyAlignmentRecord(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v7;
  __chkstk_darwin(v6);
  v34 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v28 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for KeySyncRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  sub_10005972C(a4, (uint64_t)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_1010962E8, v17 + v14, v16 | 7);
  sub_1000126EC((uint64_t)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for KeySyncRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v9);
  sub_10005972C(v35, v34, type metadata accessor for KeyAlignmentRecord);
  sub_10005972C(v26, (uint64_t)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for KeySyncRecord);
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = *(unsigned __int8 *)(v30 + 80);
  v22 = (v11 + v21 + v20) & ~v21;
  v23 = (v31 + v16 + v22) & ~v16;
  v24 = swift_allocObject(&unk_101096310, v23 + v14, v16 | v19 | v21 | 7);
  *(_QWORD *)(v24 + 16) = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v24 + v20, v28, v27);
  sub_1000126EC(v34, v24 + v22, type metadata accessor for KeyAlignmentRecord);
  sub_1000126EC((uint64_t)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23, type metadata accessor for KeySyncRecord);
  swift_retain();
  sub_1007A277C(v35, 0, (void (*)(uint64_t))sub_10087FF38, v18, sub_1008800C8, (void (*)(uint64_t))v24);
  swift_release(v18);
  return swift_release(v24);
}

uint64_t sub_10081A7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for KeySyncRecord(0);
  v5 = *(_QWORD *)(a2 + *(int *)(v4 + 20));
  v6 = type metadata accessor for KeyAlignmentRecord(0);
  *(_QWORD *)(a1 + *(int *)(v6 + 28)) = v5;
  v7 = a2 + *(int *)(v4 + 28);
  v8 = a1 + *(int *)(v6 + 32);
  v9 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v8, v7, v9);
}

void sub_10081A858(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  char v59[8];
  uint64_t v60;
  uint64_t v61;

  v54 = a4;
  v55 = a5;
  v57 = a3;
  v53 = type metadata accessor for KeySyncRecord(0);
  __chkstk_darwin(v53);
  v56 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for KeyAlignmentRecord(0);
  __chkstk_darwin(v52);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v52 - v14;
  v16 = sub_10001A9A8(&qword_1011082B0);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v18, &qword_1011082B0);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    v19 = *v18;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B77E8);
    v21 = v9;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v57, v9);
    swift_errorRetain(v19);
    v22 = swift_errorRetain(v19);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(32, -1);
      v26 = swift_slowAlloc(64, -1);
      v57 = v26;
      *(_DWORD *)v25 = 141558531;
      v60 = 1752392040;
      v61 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2081;
      v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v21, v27);
      v30 = v29;
      v60 = sub_100016940(v28, v29, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v25 + 14, v25 + 22);
      swift_bridgeObjectRelease(v30);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v21);
      *(_WORD *)(v25 + 22) = 2082;
      swift_getErrorValue(v19, v59, v58);
      v31 = Error.localizedDescription.getter(v58[1], v58[2]);
      v33 = v32;
      v60 = sub_100016940(v31, v32, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v25 + 24, v25 + 32);
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Could not update last seen key index to alignment record uuid - %{private,mask.hash}s due to %{public}s.", (uint8_t *)v25, 0x20u);
      v34 = v57;
      swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      swift_errorRelease(v19);
    }
    else
    {
      swift_errorRelease(v19);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      swift_errorRelease(v19);
      swift_errorRelease(v19);

    }
  }
  else
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v35 = type metadata accessor for Logger(0);
    sub_10001A9E8(v35, (uint64_t)qword_1011B77E8);
    v36 = v9;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v57, v9);
    sub_10005972C((uint64_t)v54, (uint64_t)v8, type metadata accessor for KeyAlignmentRecord);
    v37 = v56;
    v38 = sub_10005972C(v55, v56, type metadata accessor for KeySyncRecord);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    v41 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      v42 = swift_slowAlloc(42, -1);
      LODWORD(v55) = v41;
      v43 = v42;
      v44 = swift_slowAlloc(32, -1);
      v57 = v44;
      *(_DWORD *)v43 = 141558787;
      v60 = 1752392040;
      v61 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v43 + 4, v43 + 12);
      *(_WORD *)(v43 + 12) = 2081;
      v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = v39;
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v36, v45);
      v48 = v47;
      v60 = sub_100016940(v46, v47, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v43 + 14, v43 + 22);
      swift_bridgeObjectRelease(v48);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v36);
      *(_WORD *)(v43 + 22) = 2048;
      v49 = *(_QWORD *)&v8[*(int *)(v52 + 28)];
      sub_1000126B0((uint64_t)v8, type metadata accessor for KeyAlignmentRecord);
      v60 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v43 + 24, v43 + 32);
      *(_WORD *)(v43 + 32) = 2048;
      v50 = *(_QWORD *)(v37 + *(int *)(v53 + 20));
      sub_1000126B0(v37, type metadata accessor for KeySyncRecord);
      v60 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v43 + 34, v43 + 42);
      v39 = v54;
      _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v55, "Successfully updated last seen key index for beacon key alignment record uuid - %{private,mask.hash}s old_index - %llu new_index - %llu.", (uint8_t *)v43, 0x2Au);
      v51 = v57;
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      sub_1000126B0(v37, type metadata accessor for KeySyncRecord);
      sub_1000126B0((uint64_t)v8, type metadata accessor for KeyAlignmentRecord);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v36);
    }

    sub_100004048((uint64_t)v18, &qword_1011082B0);
  }
}

uint64_t sub_10081AECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[5];

  v3 = v2;
  v60 = a2;
  v5 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for KeyAlignmentRecord(0);
  v11 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v56 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for KeySyncRecord(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = __chkstk_darwin(v16);
  v55 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v54 - v20;
  sub_10080B648(a1, (uint64_t)v62);
  v22 = v62[3];
  sub_100004048((uint64_t)v62, (uint64_t *)&unk_1010EE310);
  if (v22)
  {
    v54 = v3;
    sub_10088969C(a1, (uint64_t)v15);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16) == 1)
    {
      sub_100004048((uint64_t)v15, &qword_1010F7AE0);
      sub_1008892B4((uint64_t)v10);
      v23 = v57;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v57) == 1)
      {
        sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F47D0);
        v24 = 1;
        v25 = v60;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v17 + 56))(v25, v24, 1, v16);
      }
      v40 = v56;
      v41 = sub_1000126EC((uint64_t)v10, v56, type metadata accessor for KeyAlignmentRecord);
      v42 = static os_log_type_t.default.getter(v41);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_1011B7D38, "Key sync record not found. Creating a new one.", 46, 2, _swiftEmptyArrayStorage);
      v43 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v55, a1, v59);
      v44 = *(_QWORD *)(v40 + *(int *)(v23 + 28));
      v45 = v40 + *(int *)(v23 + 32);
      v46 = &v43[v16[7]];
      v47 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v46, v45, v47);
      v48 = &v43[v16[6]];
      v49 = &v43[v16[8]];
      v50 = &v43[v16[9]];
      v51 = &v43[v16[11]];
      *(_QWORD *)&v43[v16[5]] = v44;
      *(_QWORD *)v48 = 0;
      v48[8] = 1;
      *(_QWORD *)v49 = 1;
      v49[8] = 0;
      *(_QWORD *)v50 = 96;
      v50[8] = 0;
      *(_QWORD *)&v43[v16[10]] = 1;
      *(_QWORD *)v51 = 0;
      v51[8] = 1;
      v52 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v52);
      *(&v54 - 2) = v54;
      *(&v54 - 1) = (uint64_t)v43;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-keySyncSave", 41, 2, sub_10087FE20, &v54 - 4, (char *)&type metadata for () + 8);
      sub_1000126B0(v40, type metadata accessor for KeyAlignmentRecord);
      v38 = (uint64_t)v43;
      v25 = v60;
      v39 = v60;
    }
    else
    {
      sub_1000126EC((uint64_t)v15, (uint64_t)v21, type metadata accessor for KeySyncRecord);
      v38 = (uint64_t)v21;
      v25 = v60;
      v39 = v60;
    }
    sub_1000126EC(v38, v39, type metadata accessor for KeySyncRecord);
    v24 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v17 + 56))(v25, v24, 1, v16);
  }
  v56 = v17;
  v57 = (uint64_t)v16;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v26 = type metadata accessor for Logger(0);
  sub_10001A9E8(v26, (uint64_t)qword_1011B77E8);
  v27 = v58;
  v28 = v59;
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16))(v7, a1, v59);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v33 = swift_slowAlloc(32, -1);
    *(_DWORD *)v32 = 141558275;
    v61 = 1752392040;
    v62[0] = v33;
    v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v32 + 4, v32 + 12);
    *(_WORD *)(v32 + 12) = 2081;
    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    v61 = sub_100016940(v35, v36, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v32 + 14, v32 + 22);
    swift_bridgeObjectRelease(v37);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "No BeaconRecord for %{private,mask.hash}s -- Not creating a KeySyncRecord", (uint8_t *)v32, 0x16u);
    v24 = 1;
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);

    v24 = 1;
  }
  v25 = v60;
  v17 = v56;
  v16 = (int *)v57;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v17 + 56))(v25, v24, 1, v16);
}

uint64_t sub_10081B49C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[3];
  _BYTE v17[8];

  v2 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v4, &qword_1010FD0B0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v6 = *v4;
    v7 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v8 = qword_1011B7D38;
    v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
    swift_getErrorValue(v6, v17, v16);
    v11 = Error.localizedDescription.getter(v16[1], v16[2]);
    v13 = v12;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = sub_10001AA00();
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = v13;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Error saving key sync record - %@", 33, 2, v10);
    swift_bridgeObjectRelease(v10);
    return swift_errorRelease(v6);
  }
  else
  {
    v15 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7D38, "Key sync record saved successfully.", 35, 2, _swiftEmptyArrayStorage);
    return sub_100004048((uint64_t)v4, &qword_1010FD0B0);
  }
}

uint64_t sub_10081B688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];
  char v43[24];
  char *v44;

  v6 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_101105880);
  v10 = __chkstk_darwin(v9);
  v39 = (uint64_t)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v37 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)v37 - v15;
  v37[1] = a1;
  v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache, v43, 0, 0);
  v18 = *v17;
  v19 = *(_QWORD *)(*v17 + 16);
  v44 = v8;
  v40 = v6;
  v41 = a2;
  if (v19)
  {
    v37[0] = a3;
    swift_bridgeObjectRetain(v18);
    v20 = sub_100003FB0(a2);
    if ((v21 & 1) != 0)
    {
      v22 = v20;
      v23 = *(_QWORD *)(v18 + 56);
      v24 = type metadata accessor for BeaconNamingRecord(0);
      v25 = *(_QWORD *)(v24 - 8);
      sub_10005972C(v23 + *(_QWORD *)(v25 + 72) * v22, (uint64_t)v16, type metadata accessor for BeaconNamingRecord);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v16, 0, 1, v24);
    }
    else
    {
      v24 = type metadata accessor for BeaconNamingRecord(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v16, 1, 1, v24);
    }
    a3 = v37[0];
    swift_bridgeObjectRelease(v18);
    type metadata accessor for BeaconNamingRecord(0);
    v27 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v16, 1, v24) != 1)
    {
      sub_1000126EC((uint64_t)v16, a3, type metadata accessor for BeaconNamingRecord);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(a3, 0, 1, v24);
    }
  }
  else
  {
    v26 = type metadata accessor for BeaconNamingRecord(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v16, 1, 1, v26);
  }
  sub_100004048((uint64_t)v16, (uint64_t *)&unk_101105880);
  v28 = v41;
  v29 = sub_10088AE0C(v41);
  v30 = v29[2];
  v31 = type metadata accessor for BeaconNamingRecord(0);
  v32 = *(_QWORD *)(v31 - 8);
  if (v30)
  {
    sub_10005972C((uint64_t)v29 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80)), (uint64_t)v14, type metadata accessor for BeaconNamingRecord);
    v33 = 0;
  }
  else
  {
    v33 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v14, v33, 1, v31);
  swift_bridgeObjectRelease(v29);
  v35 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v28, v40);
  v36 = v39;
  sub_10000F9B8((uint64_t)v14, v39, (uint64_t *)&unk_101105880);
  swift_beginAccess(v17, v42, 33, 0);
  sub_1000FFF70(v36, v35);
  swift_endAccess(v42);
  return sub_100005CF0((uint64_t)v14, a3, (uint64_t *)&unk_101105880);
}

uint64_t sub_10081B9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1008771F4);
  return a4(a1);
}

uint64_t sub_10081BA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v14[24];

  v4 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(v9, a2);
  v11 = type metadata accessor for BeaconNamingRecord(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache, v14, 33, 0);
  sub_1000FFF70((uint64_t)v6, (uint64_t)v9);
  return swift_endAccess(v14);
}

uint64_t sub_10081BB64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;

  v18[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + 160);
  if (qword_1010E9D40 != -1)
    swift_once(&qword_1010E9D40, sub_100601994);
  v9 = sub_10001A9E8(v4, (uint64_t)qword_1011B7200);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  v10._object = (void *)0x8000000100ED68C0;
  v10._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v10);
  v19 = type metadata accessor for BeaconProductInfoRecord(0);
  v11 = sub_10001A9A8(&qword_10110AA60);
  v12 = String.init<A>(describing:)(&v19, v11);
  v18[0] = v5;
  v14 = v13;
  v15 = objc_autoreleasePoolPush();
  __chkstk_darwin(v15);
  v18[-6] = v8;
  v18[-5] = a1;
  v18[-4] = v7;
  v18[-3] = v12;
  v18[-2] = v14;
  v16 = sub_10001A9A8(&qword_10110EEB0);
  OS_dispatch_queue.sync<A>(execute:)(sub_10087B544, &v18[-8], v16);
  objc_autoreleasePoolPop(v15);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v18[0] + 8))(v7, v4);
}

void sub_10081BD08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 96))(v9, v10) & 1) == 0)
  {
    v11 = a1[3];
    v12 = a1[4];
    sub_10001AA44(a1, v11);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 104))(v11, v12) & 1) != 0)
    {
      v14 = a1[3];
      v13 = a1[4];
      sub_10001AA44(a1, v14);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8) + 32))(v14);
      sub_10081BB64((uint64_t)v5, (uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v15 = type metadata accessor for BeaconProductInfoRecord(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v8, 1, v15) == 1)
      {
        v16 = sub_100004048((uint64_t)v8, &qword_10110EEB0);
        v17 = static os_log_type_t.error.getter(v16);
        if (qword_1010EA258 != -1)
          swift_once(&qword_1010EA258, sub_100B5D9CC);
        os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D38, "No txPower in productInfo -- defaulting to 4", 44, 2, _swiftEmptyArrayStorage);
      }
      else
      {
        v18 = *(double *)&v8[*(int *)(v15 + 60)];
        v19 = sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconProductInfoRecord);
        sub_10085CA9C(v19, v18);
      }
    }
  }
}

_QWORD *sub_10081BF2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v0 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v16 - v6;
  static SystemInfo.lockState.getter(v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v0);
  v8 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v0, v8);
  dispatch thunk of RawRepresentable.rawValue.getter(&v16, v0, v8);
  v10 = v16;
  v9 = v17;
  v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v12 = ((uint64_t (*)(char *, uint64_t))v11)(v7, v0);
  if (v9 != v10)
    return sub_10001E32C();
  v13 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v14 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7D38, "wildModeAssociationRecords call failed because in device is in beforeFirstUnlock state", 86, 2, _swiftEmptyArrayStorage);
  return v14;
}

uint64_t sub_10081C0CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a2;
  v3 = type metadata accessor for URL(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v40 - v12;
  v14 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v15 = qword_1011B7D38;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v41 = a1;
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "wildModeAssociationRecord(for uuid: %@)", 39, 2, v17);
  v21 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  v22 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v15) = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v6, v22);
  v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v10, v6);
  v24 = ((uint64_t (*)(char *, uint64_t))v23)(v13, v6);
  if ((v15 & 1) != 0)
  {
    v25 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D38, "wildModeAssociationRecord call failed because in device is in beforeFirstUnlock state", 85, 2, _swiftEmptyArrayStorage);
    v26 = type metadata accessor for WildModeAssociationRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v44, 1, 1, v26);
  }
  else
  {
    v28 = *(_QWORD *)(v40[1] + 160);
    if (qword_1010E99F8 != -1)
      swift_once(&qword_1010E99F8, sub_1001D7F04);
    v29 = v43;
    v30 = sub_10001A9E8(v43, (uint64_t)qword_1011B6A48);
    v31 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v5, v30, v29);
    v32._object = (void *)0x8000000100ED68C0;
    v32._countAndFlagsBits = 0xD000000000000014;
    prohibitAsyncContext(functionName:)(v32);
    v45 = type metadata accessor for WildModeAssociationRecord(0);
    v33 = sub_10001A9A8(&qword_10110AB28);
    v34 = String.init<A>(describing:)(&v45, v33);
    v36 = v35;
    v37 = objc_autoreleasePoolPush();
    __chkstk_darwin(v37);
    v38 = v41;
    v40[-6] = v28;
    v40[-5] = v38;
    v40[-4] = v5;
    v40[-3] = v34;
    v40[-2] = v36;
    v39 = sub_10001A9A8(&qword_101102FB0);
    OS_dispatch_queue.sync<A>(execute:)(sub_10087FAE8, &v40[-8], v39);
    objc_autoreleasePoolPop(v37);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v5, v29);
  }
}

uint64_t sub_10081C45C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v46 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v48 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v52);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = __chkstk_darwin(v8);
  v49 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v56 = (uint64_t)&v45 - v11;
  v55 = type metadata accessor for WildModeAssociationRecord(0);
  v47 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v54 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v45 - v19;
  LODWORD(v51) = static os_log_type_t.default.getter(v18);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v50 = (char *)qword_1011B7D38;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
  v53 = a1;
  v23 = UUID.uuidString.getter(v22);
  v25 = v24;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  *(_QWORD *)(v22 + 64) = sub_10001AA00();
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v25;
  os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v50, "wildModeAssociationRecord(beaconUUID: %@)", 41, 2, v22);
  v26 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  v27 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v23) = dispatch thunk of static Equatable.== infix(_:_:)(v20, v17, v13, v27);
  v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v17, v13);
  v29 = ((uint64_t (*)(char *, uint64_t))v28)(v20, v13);
  if ((v23 & 1) != 0)
  {
    v30 = static os_log_type_t.default.getter(v29);
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7D38, "wildModeAssociationRecord call failed because in device is in beforeFirstUnlock state", 85, 2, _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, 1, 1, v55);
  }
  v45 = sub_10081BF2C();
  v32 = v45[2];
  v33 = (uint64_t)v49;
  v34 = v54;
  if (!v32)
  {
LABEL_15:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v46, 1, 1, v55);
    return swift_bridgeObjectRelease();
  }
  v35 = (uint64_t)v45 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
  v51 = *(_QWORD *)(v47 + 72);
  v50 = v7;
  while (1)
  {
    sub_10005972C(v35, v34, type metadata accessor for WildModeAssociationRecord);
    v36 = v56;
    v37 = v34 + *(int *)(v55 + 20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v56, v53, v3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v36, 0, 1, v3);
    v38 = (uint64_t)&v7[*(int *)(v52 + 48)];
    sub_10000F9B8(v37, (uint64_t)v7, &qword_1010ED860);
    sub_10000F9B8(v36, v38, &qword_1010ED860);
    v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    if (v39(v7, 1, v3) == 1)
      break;
    sub_10000F9B8((uint64_t)v7, v33, &qword_1010ED860);
    if (v39((char *)v38, 1, v3) == 1)
    {
      sub_100004048(v56, &qword_1010ED860);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v33, v3);
      goto LABEL_8;
    }
    v40 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v48, v38, v3);
    v41 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v42 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v40, v3, v41);
    v43 = *(void (**)(char *, uint64_t))(v4 + 8);
    v33 = (uint64_t)v49;
    v43(v40, v3);
    sub_100004048(v56, &qword_1010ED860);
    v43((char *)v33, v3);
    sub_100004048((uint64_t)v7, &qword_1010ED860);
    if ((v42 & 1) != 0)
      goto LABEL_17;
LABEL_9:
    v34 = v54;
    sub_1000126B0(v54, type metadata accessor for WildModeAssociationRecord);
    v35 += v51;
    if (!--v32)
      goto LABEL_15;
  }
  sub_100004048(v36, &qword_1010ED860);
  if (v39((char *)v38, 1, v3) != 1)
  {
LABEL_8:
    v7 = v50;
    sub_100004048((uint64_t)v50, (uint64_t *)&unk_10110EE90);
    goto LABEL_9;
  }
  sub_100004048((uint64_t)v50, &qword_1010ED860);
LABEL_17:
  v44 = v46;
  sub_1000126EC(v54, v46, type metadata accessor for WildModeAssociationRecord);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v55);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10081CA20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[2];

  v2 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)v26 - v8;
  v10 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v11 = qword_1011B7D38;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
  v14 = MACAddress.description.getter(v13);
  v16 = v15;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "wildModeAssociationRecords(advertisement: %@)", 45, 2, v13);
  v17 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
  v18 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v14) = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v2, v18);
  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v6, v2);
  v20 = ((uint64_t (*)(char *, uint64_t))v19)(v9, v2);
  if ((v14 & 1) != 0)
  {
    v21 = static os_log_type_t.default.getter(v20);
    v22 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D38, "wildModeAssociationRecord call failed because in device is in beforeFirstUnlock state", 85, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v23 = sub_10081BF2C();
    __chkstk_darwin(v23);
    v26[-2] = a1;
    return sub_10001CED8((uint64_t (*)(char *))sub_10087FDA8, &v26[-4], v24);
  }
  return (uint64_t)v22;
}

uint64_t sub_10081CC74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10081CC9C(a1, "secureLocationsCachedPayload(identifier: %s", (uint64_t (*)(_QWORD))sub_10088A338, a2);
}

uint64_t sub_10081CC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10081CC9C(a1, "secureLocationsCachedShared(identifier: %s", (uint64_t (*)(_QWORD))sub_10088A4DC, a2);
}

uint64_t sub_10081CC9C@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  const char *v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v26 = a1;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v27 = a3;
    v19 = v18;
    v30 = v18;
    v25[1] = v4;
    v25[2] = a4;
    *(_DWORD *)v17 = 136315138;
    v20 = UUID.uuidString.getter(v18);
    v29 = sub_100016940(v20, v21, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v28, v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v22 = v19;
    a3 = v27;
    swift_slowDealloc(v22, -1, -1);
    v23 = v17;
    a1 = v26;
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  return a3(a1);
}

_QWORD *sub_10081CEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v0 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v16 - v6;
  static SystemInfo.lockState.getter(v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v0);
  v8 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v0, v8);
  dispatch thunk of RawRepresentable.rawValue.getter(&v16, v0, v8);
  v10 = v16;
  v9 = v17;
  v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v12 = ((uint64_t (*)(char *, uint64_t))v11)(v7, v0);
  if (v9 != v10)
    return sub_10001BB98();
  v13 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v14 = _swiftEmptyArrayStorage;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7D38, "ownedBeaconGroups call failed because in device is in beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
  return v14;
}

void *sub_10081D058(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Class v23;
  Class v24;
  uint64_t v25;
  void *v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  Class v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;

  v2 = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v8 = __chkstk_darwin(v7);
  v54 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v51 - v10;
  v12 = objc_msgSend(objc_allocWithZone((Class)SPBeaconGroup), "init");
  v13 = v12;
  v14 = 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    v14 = *(_QWORD *)(a1 + 16);
  objc_msgSend(v12, "setVersion:", v14);
  v15 = type metadata accessor for OwnedBeaconGroup(0);
  v16 = a1 + *(int *)(v15 + 24);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v13, "setIdentifier:", isa);

  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setName:", v18);

  v20 = MACAddress.data.getter(v19);
  v22 = v21;
  v23 = Data._bridgeToObjectiveC()().super.isa;
  sub_10001BC14(v20, v22);
  objc_msgSend(v13, "setMacAddress:", v23);

  objc_msgSend(v13, "setClassification:", 0);
  objc_msgSend(v13, "setIsPairingComplete:", sub_1003690A8() & 1);
  objc_msgSend(v13, "setIsFindMyNetworkEnabled:", *(unsigned __int8 *)(a1 + *(int *)(v15 + 32)));
  objc_msgSend(v13, "setStatus:", sub_10081D61C(a1));
  sub_10036AC6C();
  type metadata accessor for UUID(0);
  sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v24 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v13, "setBeaconIdentifiers:", v24);

  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v25 = qword_1011B7160;
  v26 = objc_autoreleasePoolPush();
  sub_10058DC14(v25, v16, 0, 0, &v55);
  objc_autoreleasePoolPop(v26);
  LOBYTE(v26) = sub_100372A20((uint64_t)v11, v55);
  swift_bridgeObjectRelease();
  sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010EA690);
  objc_msgSend(v13, "setIsClassicConnected:", v26 & 1);
  sub_1007F78E4(a1);
  sub_10001A9A8((uint64_t *)&unk_1010F7790);
  sub_1000193A4(&qword_10110AAE0, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
  v27 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v13, "setMultipartStatus:", v27);

  sub_10036AC6C();
  v29 = v28;
  swift_retain();
  sub_10085EE68(v29, v2);
  LOBYTE(v27) = v30;
  swift_bridgeObjectRelease();
  swift_release(v2);
  objc_msgSend(v13, "setIsConnected:", v27 & 1);
  v31 = sub_100889F60(v16);
  v32 = v31[2];
  v33 = (int *)type metadata accessor for LostModeRecord(0);
  v34 = *((_QWORD *)v33 - 1);
  if (v32)
  {
    sub_10005972C((uint64_t)v31 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80)), (uint64_t)v6, type metadata accessor for LostModeRecord);
    v35 = 0;
  }
  else
  {
    v35 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v34 + 56))(v6, v35, 1, v33);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v6, 1, v33) == 1)
  {
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010F47F0);
    v36 = 0;
  }
  else
  {
    v37 = (uint64_t *)&v6[v33[9]];
    v38 = *v37;
    v39 = v37[1];
    v40 = v33[8];
    v41 = (uint64_t *)&v6[v33[7]];
    v42 = *v41;
    v43 = v41[1];
    v44 = *(_QWORD *)&v6[v40 + 8];
    v52 = *(_QWORD *)&v6[v40];
    v53 = v38;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v43);
    v45 = objc_autoreleasePoolPush();
    v46 = (uint64_t)v54;
    sub_10084EE24((uint64_t)v6);
    objc_autoreleasePoolPop(v45);
    v47 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 0, 1, v47);
    v48 = objc_allocWithZone((Class)SPLostModeInfo);
    v36 = sub_10084F34C(v53, v39, v42, v43, v52, v44, v46);
    sub_1000126B0((uint64_t)v6, type metadata accessor for LostModeRecord);
  }
  objc_msgSend(v13, "setLostModeInfo:", v36);

  sub_100370730();
  sub_10000F4A0(0, (unint64_t *)&unk_1010F9900, SPPairingState_ptr);
  v49 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v13, "setBeaconMap:", v49);

  return v13;
}

uint64_t sub_10081D61C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t (*v85)(_QWORD *, uint64_t, uint64_t);
  int v86;
  _QWORD *v87;
  uint64_t v88;
  void (*v89)(void);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  _BOOL4 v105;
  uint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  uint64_t v127;
  uint8_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  _QWORD *v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint8_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  void (*v161)(char *, char *, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  _QWORD v185[2];
  char *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t *v201;
  void (*v202)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v203;
  char *v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;

  v2 = type metadata accessor for OwnedBeaconGroup(0);
  v3 = __chkstk_darwin(v2);
  v5 = (_QWORD *)((char *)v185 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __chkstk_darwin(v3);
  v195 = (uint64_t)v185 - v7;
  v8 = __chkstk_darwin(v6);
  v193 = (uint64_t)v185 - v9;
  v10 = __chkstk_darwin(v8);
  v192 = (uint64_t)v185 - v11;
  __chkstk_darwin(v10);
  v190 = (uint64_t)v185 - v12;
  v13 = type metadata accessor for Date(0);
  v206 = *(_QWORD **)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v199 = (uint64_t)v185 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v198 = (char *)v185 - v16;
  v207 = sub_10001A9A8(&qword_1010ED3C8);
  v209 = *(_QWORD *)(v207 - 8);
  v17 = __chkstk_darwin(v207);
  v19 = (char *)v185 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v201 = (_QWORD *)((char *)v185 - v21);
  v22 = __chkstk_darwin(v20);
  v191 = (_QWORD *)((char *)v185 - v23);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)v185 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)v185 - v28;
  v30 = __chkstk_darwin(v27);
  v204 = (char *)v185 - v31;
  v32 = __chkstk_darwin(v30);
  v196 = (_QWORD *)((char *)v185 - v33);
  v34 = __chkstk_darwin(v32);
  v36 = (_QWORD *)((char *)v185 - v35);
  v37 = __chkstk_darwin(v34);
  v205 = (_QWORD *)((char *)v185 - v38);
  __chkstk_darwin(v37);
  v40 = (_QWORD *)((char *)v185 - v39);
  v41 = sub_10001A9A8(&qword_10110AAF0);
  v42 = __chkstk_darwin(v41);
  v200 = (char *)v185 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v42);
  v45 = __chkstk_darwin(v44);
  v203 = (uint64_t)v185 - v46;
  v47 = __chkstk_darwin(v45);
  v208 = (uint64_t)v185 - v48;
  __chkstk_darwin(v47);
  v51 = (char *)v185 - v50;
  v52 = *(int *)(v2 + 40);
  v210 = a1;
  v53 = *(_QWORD *)(*(_QWORD *)(a1 + v52) + 16);
  if (v53 >= 0x100)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
    JUMPOUT(0x10081EB9CLL);
  }
  if (v53 == 1)
  {
    if (qword_1010E9F80 == -1)
    {
LABEL_4:
      v54 = type metadata accessor for Logger(0);
      sub_10001A9E8(v54, (uint64_t)qword_1011B77E8);
      v55 = sub_10005972C(v210, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.default.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = swift_slowAlloc(32, -1);
        v212 = v59;
        *(_DWORD *)v58 = 136315138;
        v60 = type metadata accessor for UUID(0);
        v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v62 = dispatch thunk of CustomStringConvertible.description.getter(v60, v61);
        v211 = sub_100016940(v62, v63, &v212);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, &v212, v58 + 4, v58 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s is a single beacon group, returning .grouped", v58, 0xCu);
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);
      }
      else
      {
        sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
      }

      return 2;
    }
LABEL_78:
    swift_once(&qword_1010E9F80, sub_1007FA778);
    goto LABEL_4;
  }
  v188 = (_QWORD *)v49;
  v186 = v19;
  v194 = v13;
  v187 = v2;
  sub_10036AC6C();
  v65 = v64;
  v66 = (uint64_t)v202;
  swift_retain();
  v67 = sub_10085F9EC(v65, v66);
  swift_release(v66);
  swift_bridgeObjectRelease();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v189 = sub_100C1AED0(v212);
  swift_bridgeObjectRelease();
  v68 = *(_QWORD *)(v67 + 16);
  v69 = v209;
  v197 = v51;
  if (v68)
  {
    v70 = v67 + ((*(unsigned __int8 *)(v209 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80));
    v71 = *(_QWORD *)(v209 + 72);
    swift_bridgeObjectRetain(v67);
    v72 = v68;
    while (1)
    {
      sub_10000F9B8(v70, (uint64_t)v40, &qword_1010ED3C8);
      if (*v40 == 1)
        break;
      sub_100004048((uint64_t)v40, &qword_1010ED3C8);
      v70 += v71;
      if (!--v72)
      {
        swift_bridgeObjectRelease();
        v51 = v197;
        v69 = v209;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    v51 = v197;
    sub_100005CF0((uint64_t)v40, (uint64_t)v197, &qword_1010ED3C8);
    v69 = v209;
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56);
    v74 = v51;
    v75 = 0;
  }
  else
  {
LABEL_13:
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56);
    v74 = v51;
    v75 = 1;
  }
  v77 = v207;
  v202 = v73;
  v73((uint64_t)v74, v75, 1, v207);
  if (v68)
  {
    v78 = v67 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
    v79 = *(_QWORD *)(v69 + 72);
    swift_bridgeObjectRetain(v67);
    v80 = v68;
    while (1)
    {
      sub_10000F9B8(v78, (uint64_t)v36, &qword_1010ED3C8);
      if (*v36 == 4)
        break;
      sub_100004048((uint64_t)v36, &qword_1010ED3C8);
      v78 += v79;
      if (!--v80)
      {
        swift_bridgeObjectRelease();
        v81 = 1;
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease();
    sub_100005CF0((uint64_t)v36, v208, &qword_1010ED3C8);
    v81 = 0;
LABEL_24:
    v77 = v207;
    v69 = v209;
  }
  else
  {
    v81 = 1;
  }
  v82 = (double)v189;
  v83 = v208;
  v202(v208, v81, 1, v77);
  v84 = (_QWORD *)v203;
  sub_10000F9B8((uint64_t)v51, v203, &qword_10110AAF0);
  v85 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v69 + 48);
  v86 = v85(v84, 1, v77);
  v87 = v205;
  v189 = (uint64_t)v85;
  if (v86 == 1)
  {
    sub_100004048((uint64_t)v84, &qword_10110AAF0);
  }
  else
  {
    v88 = *(int *)(v77 + 48);
    *v205 = *v84;
    v89 = (void (*)(void))v206[4];
    v203 = (uint64_t)v87 + v88;
    v90 = v77;
    v91 = v194;
    v89();
    v92 = v83;
    v93 = v188;
    sub_10000F9B8(v92, (uint64_t)v188, &qword_10110AAF0);
    if (v85(v93, 1, v90) == 1)
    {
      sub_100004048((uint64_t)v87, &qword_1010ED3C8);
      sub_100004048((uint64_t)v93, &qword_10110AAF0);
      v77 = v90;
    }
    else
    {
      v185[1] = (char *)v196 + *(int *)(v90 + 48);
      *v196 = *v93;
      v89();
      v94 = v198;
      Date.addingTimeInterval(_:)(v82);
      v95 = v199;
      static Date.trustedNow.getter(v199);
      v96 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      LODWORD(v203) = dispatch thunk of static Comparable.< infix(_:_:)(v94, v95, v91, v96);
      v97 = (void (*)(uint64_t, uint64_t))v206[1];
      v97(v95, v91);
      v97((uint64_t)v94, v91);
      Date.addingTimeInterval(_:)(v82);
      static Date.trustedNow.getter(v95);
      v98 = dispatch thunk of static Comparable.< infix(_:_:)(v94, v95, v91, v96);
      v97(v95, v91);
      v97((uint64_t)v94, v91);
      if ((v203 & 1) == 0 && (v98 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v99 = (uint64_t)v197;
        if (qword_1010E9F80 != -1)
          swift_once(&qword_1010E9F80, sub_1007FA778);
        v100 = type metadata accessor for Logger(0);
        sub_10001A9E8(v100, (uint64_t)qword_1011B77E8);
        v101 = v190;
        v102 = sub_10005972C(v210, v190, type metadata accessor for OwnedBeaconGroup);
        v103 = Logger.logObject.getter(v102);
        v104 = static os_log_type_t.default.getter(v103);
        v105 = os_log_type_enabled(v103, v104);
        v106 = v208;
        if (v105)
        {
          v107 = (uint8_t *)swift_slowAlloc(12, -1);
          v108 = swift_slowAlloc(32, -1);
          v212 = v108;
          *(_DWORD *)v107 = 136315138;
          v109 = type metadata accessor for UUID(0);
          v110 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v111 = dispatch thunk of CustomStringConvertible.description.getter(v109, v110);
          v211 = sub_100016940(v111, v112, &v212);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, &v212, v107 + 4, v107 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v101, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl((void *)&_mh_execute_header, v103, v104, "Buds from group %s report separated & separatedInCase, returning separatedInCase", v107, 0xCu);
          swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v108, -1, -1);
          swift_slowDealloc(v107, -1, -1);

          sub_100004048((uint64_t)v196, &qword_1010ED3C8);
          sub_100004048((uint64_t)v205, &qword_1010ED3C8);
          v113 = v208;
        }
        else
        {

          sub_1000126B0(v101, type metadata accessor for OwnedBeaconGroup);
          sub_100004048((uint64_t)v196, &qword_1010ED3C8);
          sub_100004048((uint64_t)v205, &qword_1010ED3C8);
          v113 = v106;
        }
        sub_100004048(v113, &qword_10110AAF0);
        sub_100004048(v99, &qword_10110AAF0);
        return 4;
      }
      sub_100004048((uint64_t)v196, &qword_1010ED3C8);
      sub_100004048((uint64_t)v205, &qword_1010ED3C8);
      v77 = v207;
    }
    v69 = v209;
  }
  v114 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v189;
  if (v68)
  {
    if (!*(_QWORD *)(v67 + 16))
    {
      __break(1u);
      goto LABEL_80;
    }
    v115 = v67 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
    sub_10000F9B8(v115, (uint64_t)v29, &qword_1010ED3C8);
    swift_bridgeObjectRetain(v67);
    if (v68 != 1)
    {
      v155 = 1;
      v5 = &qword_1010ED3C8;
      while (v155 < *(_QWORD *)(v67 + 16))
      {
        sub_10000F9B8(v115 + *(_QWORD *)(v69 + 72) * v155, (uint64_t)v26, &qword_1010ED3C8);
        if ((static Date.< infix(_:_:)(&v29[*(int *)(v77 + 48)], &v26[*(int *)(v77 + 48)]) & 1) != 0)
        {
          sub_100004048((uint64_t)v29, &qword_1010ED3C8);
          sub_100005CF0((uint64_t)v26, (uint64_t)v29, &qword_1010ED3C8);
        }
        else
        {
          sub_100004048((uint64_t)v26, &qword_1010ED3C8);
        }
        if (v68 == ++v155)
          goto LABEL_40;
      }
      __break(1u);
      goto LABEL_78;
    }
LABEL_40:
    swift_bridgeObjectRelease();
    v116 = v200;
    sub_100005CF0((uint64_t)v29, (uint64_t)v200, &qword_1010ED3C8);
    v117 = (uint64_t)v116;
    v118 = 0;
  }
  else
  {
    v116 = v200;
    v117 = (uint64_t)v200;
    v118 = 1;
  }
  v202(v117, v118, 1, v77);
  swift_bridgeObjectRelease();
  v119 = v114(v116, 1, v77);
  v120 = v201;
  if (v119 == 1)
  {
    sub_100004048((uint64_t)v116, &qword_10110AAF0);
    if (qword_1010E9F80 == -1)
    {
LABEL_44:
      v121 = type metadata accessor for Logger(0);
      sub_10001A9E8(v121, (uint64_t)qword_1011B77E8);
      v122 = v195;
      v123 = sub_10005972C(v210, v195, type metadata accessor for OwnedBeaconGroup);
      v124 = Logger.logObject.getter(v123);
      v125 = static os_log_type_t.default.getter(v124);
      v126 = os_log_type_enabled(v124, v125);
      v127 = v208;
      if (v126)
      {
        v128 = (uint8_t *)swift_slowAlloc(12, -1);
        v129 = swift_slowAlloc(32, -1);
        v212 = v129;
        *(_DWORD *)v128 = 136315138;
        v130 = type metadata accessor for UUID(0);
        v131 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v132 = dispatch thunk of CustomStringConvertible.description.getter(v130, v131);
        v211 = sub_100016940(v132, v133, &v212);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, &v212, v128 + 4, v128 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v122, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v124, v125, "No multipart observation for group %s has been found, returning .unknown", v128, 0xCu);
        swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v129, -1, -1);
        swift_slowDealloc(v128, -1, -1);

      }
      else
      {

        sub_1000126B0(v122, type metadata accessor for OwnedBeaconGroup);
      }
      v156 = v127;
LABEL_66:
      sub_100004048(v156, &qword_10110AAF0);
      sub_100004048((uint64_t)v197, &qword_10110AAF0);
      return 0;
    }
LABEL_80:
    swift_once(&qword_1010E9F80, sub_1007FA778);
    goto LABEL_44;
  }
  v134 = *(int *)(v77 + 48);
  v135 = v204;
  v136 = &v204[v134];
  *(_QWORD *)v204 = *(_QWORD *)v116;
  v137 = v206;
  v138 = (void (*)(char *, char *, uint64_t))v206[4];
  v139 = v194;
  v138(&v135[v134], &v116[v134], v194);
  v140 = v198;
  Date.addingTimeInterval(_:)(v82);
  v141 = v199;
  static Date.trustedNow.getter(v199);
  v142 = static Date.< infix(_:_:)(v140, v141);
  v143 = (void (*)(uint64_t, uint64_t))v137[1];
  v143(v141, v139);
  v143((uint64_t)v140, v139);
  if ((v142 & 1) != 0)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v144 = type metadata accessor for Logger(0);
    sub_10001A9E8(v144, (uint64_t)qword_1011B77E8);
    v145 = v192;
    v146 = sub_10005972C(v210, v192, type metadata accessor for OwnedBeaconGroup);
    v147 = Logger.logObject.getter(v146);
    v148 = static os_log_type_t.default.getter(v147);
    if (os_log_type_enabled(v147, v148))
    {
      v149 = (uint8_t *)swift_slowAlloc(12, -1);
      v150 = swift_slowAlloc(32, -1);
      v212 = v150;
      *(_DWORD *)v149 = 136315138;
      v151 = type metadata accessor for UUID(0);
      v152 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v153 = dispatch thunk of CustomStringConvertible.description.getter(v151, v152);
      v211 = sub_100016940(v153, v154, &v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, &v212, v149 + 4, v149 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v145, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v147, v148, "Last multipart observation for group %s has expired, returning .unknown", v149, 0xCu);
      swift_arrayDestroy(v150, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v150, -1, -1);
      swift_slowDealloc(v149, -1, -1);

    }
    else
    {

      sub_1000126B0(v145, type metadata accessor for OwnedBeaconGroup);
    }
    sub_100004048((uint64_t)v204, &qword_1010ED3C8);
    v156 = v208;
    goto LABEL_66;
  }
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v157 = type metadata accessor for Logger(0);
  sub_10001A9E8(v157, (uint64_t)qword_1011B77E8);
  v158 = v207;
  v159 = (uint64_t)v191;
  v160 = (char *)v191 + *(int *)(v207 + 48);
  *v191 = *(_QWORD *)v204;
  v161 = (void (*)(char *, char *, uint64_t))v206[2];
  v162 = v194;
  v161(v160, v136, v194);
  sub_100005CF0(v159, (uint64_t)v120, &qword_1010ED3C8);
  v163 = v193;
  v164 = sub_10005972C(v210, v193, type metadata accessor for OwnedBeaconGroup);
  v165 = Logger.logObject.getter(v164);
  v166 = static os_log_type_t.default.getter(v165);
  if (os_log_type_enabled(v165, (os_log_type_t)v166))
  {
    LODWORD(v210) = v166;
    v167 = swift_slowAlloc(22, -1);
    v209 = swift_slowAlloc(64, -1);
    v212 = v209;
    *(_DWORD *)v167 = 136315394;
    v168 = *(int *)(v158 + 48);
    v169 = v186;
    v170 = &v186[v168];
    v171 = (char *)v120 + v168;
    v172 = *v120;
    *(_QWORD *)v186 = v172;
    v161(&v169[v168], v171, v162);
    v143((uint64_t)v170, v162);
    v173 = 0x6574617261706573;
    v174 = 0xE900000000000064;
    v175 = v193;
    switch(v172)
    {
      case 0:
        v174 = 0xE700000000000000;
        v173 = 0x6E776F6E6B6E75;
        break;
      case 1:
        break;
      case 2:
        v174 = 0xE700000000000000;
        v173 = 0x646570756F7267;
        break;
      case 3:
        v174 = 0xED0000657361436ELL;
        v173 = 0x49646570756F7267;
        break;
      case 4:
        v174 = 0xEF657361436E4964;
        break;
      default:
        v174 = 0xE700000000000000;
        v173 = 0x6E776F6E6B6E75;
        v175 = v193;
        break;
    }
    v211 = sub_100016940(v173, v174, &v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, &v212, v167 + 4, v167 + 12);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v201, &qword_1010ED3C8);
    *(_WORD *)(v167 + 12) = 2080;
    v176 = type metadata accessor for UUID(0);
    v177 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v178 = dispatch thunk of CustomStringConvertible.description.getter(v176, v177);
    v211 = sub_100016940(v178, v179, &v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, &v212, v167 + 14, v167 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v175, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v165, (os_log_type_t)v210, "Returning %s for group %s", (uint8_t *)v167, 0x16u);
    v180 = v209;
    swift_arrayDestroy(v209, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v180, -1, -1);
    swift_slowDealloc(v167, -1, -1);

  }
  else
  {

    sub_1000126B0(v163, type metadata accessor for OwnedBeaconGroup);
    sub_100004048((uint64_t)v120, &qword_1010ED3C8);
  }
  sub_100004048(v208, &qword_10110AAF0);
  sub_100004048((uint64_t)v197, &qword_10110AAF0);
  v181 = &v186[*(int *)(v207 + 48)];
  v76 = *(_QWORD *)v204;
  *(_QWORD *)v186 = *(_QWORD *)v204;
  v182 = v136;
  v183 = v194;
  v138(v181, v182, v194);
  v143((uint64_t)v181, v183);
  return v76;
}

uint64_t sub_10081EBB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t result;
  _QWORD v20[5];

  v2 = type metadata accessor for SharedBeaconGroup(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v20[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v20[-1] - v6;
  v8 = type metadata accessor for OwnedBeaconGroup(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v20[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v20[-1] - v12;
  sub_100030784(a1, (uint64_t)v20);
  v14 = sub_10001A9A8(&qword_101108FB0);
  if (swift_dynamicCast(v13, v20, v14, v8, 0))
  {
    sub_1000126EC((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    v15 = sub_10081D058((uint64_t)v11);
    v16 = (uint64_t)v11;
    v17 = type metadata accessor for OwnedBeaconGroup;
LABEL_5:
    sub_1000126B0(v16, v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    return (uint64_t)v15;
  }
  if (swift_dynamicCast(v7, v20, v14, v2, 0))
  {
    sub_1000126EC((uint64_t)v7, (uint64_t)v5, type metadata accessor for SharedBeaconGroup);
    v15 = sub_1008607EC();
    v16 = (uint64_t)v5;
    v17 = type metadata accessor for SharedBeaconGroup;
    goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x8000000100ED87B0, "searchpartyd/BeaconStore.swift", 30, 2, 2441, 0);
  __break(1u);
  return result;
}

uint64_t sub_10081EDA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a2;
  v3 = type metadata accessor for URL(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v40 - v12;
  v14 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v15 = qword_1011B7D38;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v41 = a1;
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "ownedBeaconGroup(for uuid: %{mask.hash}@)", 41, 2, v17);
  v21 = swift_bridgeObjectRelease(v17);
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  v22 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v15) = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v6, v22);
  v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v10, v6);
  v24 = ((uint64_t (*)(char *, uint64_t))v23)(v13, v6);
  if ((v15 & 1) != 0)
  {
    v25 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D38, "ownedBeaconGroup call failed because in device is in beforeFirstUnlock state", 76, 2, _swiftEmptyArrayStorage);
    v26 = type metadata accessor for OwnedBeaconGroup(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v44, 1, 1, v26);
  }
  else
  {
    v28 = *(_QWORD *)(v40[1] + 160);
    if (qword_1010E9B90 != -1)
      swift_once(&qword_1010E9B90, sub_10036E07C);
    v29 = v43;
    v30 = sub_10001A9E8(v43, (uint64_t)qword_1011B6DE0);
    v31 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v5, v30, v29);
    v32._object = (void *)0x8000000100ED68C0;
    v32._countAndFlagsBits = 0xD000000000000014;
    prohibitAsyncContext(functionName:)(v32);
    v45 = type metadata accessor for OwnedBeaconGroup(0);
    v33 = sub_10001A9A8(&qword_10110AB20);
    v34 = String.init<A>(describing:)(&v45, v33);
    v36 = v35;
    v37 = objc_autoreleasePoolPush();
    __chkstk_darwin(v37);
    v38 = v41;
    v40[-6] = v28;
    v40[-5] = v38;
    v40[-4] = v5;
    v40[-3] = v34;
    v40[-2] = v36;
    v39 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
    OS_dispatch_queue.sync<A>(execute:)(sub_10087FACC, &v40[-8], v39);
    objc_autoreleasePoolPop(v37);
    swift_bridgeObjectRelease(v36);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v5, v29);
  }
}

uint64_t sub_10081F138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[5];

  v43 = a3;
  v5 = type metadata accessor for OwnedBeaconGroup(0);
  v44 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v50 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v42 - v11;
  v13 = type metadata accessor for String.Encoding(0);
  v14 = __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v49) = static os_log_type_t.default.getter(v14);
  if (qword_1010EA258 != -1)
LABEL_21:
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v17 = qword_1011B7D38;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
  static String.Encoding.utf8.getter(v19);
  v20 = String.init(data:encoding:)(a1, a2, v16);
  v47 = a1;
  v48 = a2;
  if (!v21)
    v20 = Data.hexString.getter(a1, a2);
  v22 = v20;
  v23 = v21;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 64) = sub_10001AA00();
  *(_QWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v23;
  os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v17, "ownedBeaconGroup(serialNumber: %{mask.hash}@)", 45, 2, v19);
  v24 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v24);
  v25 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v7);
  v26 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v23) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v10, v7, v26);
  v27 = *(void (**)(char *, uint64_t))(v25 + 8);
  v27(v10, v7);
  v28 = ((uint64_t (*)(char *, uint64_t))v27)(v12, v7);
  if ((v23 & 1) != 0)
  {
    v29 = static os_log_type_t.default.getter(v28);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1011B7D38, "ownedBeaconGroup call failed because in device is in beforeFirstUnlock state", 76, 2, _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v43, 1, 1, v5);
  }
  else
  {
    v31 = sub_10081CEB8();
    a1 = v31[2];
    if (a1)
    {
      v32 = (uint64_t)v31 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
      v49 = *(_QWORD *)(v44 + 72);
      v42 = v31;
      swift_bridgeObjectRetain(v31);
      v34 = v47;
      v33 = v48;
      v35 = (uint64_t)v46;
      v45 = v5;
      while (1)
      {
        sub_10005972C(v32, v35, type metadata accessor for OwnedBeaconGroup);
        v36 = *(_QWORD *)(v35 + *(int *)(v5 + 40));
        v7 = *(_QWORD *)(v36 + 16);
        if (v7)
        {
          v37 = sub_10001A9A8(&qword_1010ED2D8);
          v16 = (uint64_t *)swift_allocObject(v37, 16 * v7 + 32, 7);
          v38 = j__malloc_size(v16);
          v39 = v38 - 32;
          if (v38 < 32)
            v39 = v38 - 17;
          v16[2] = v7;
          v16[3] = 2 * (v39 >> 4);
          v50 = sub_10050B1DC((uint64_t)v51, v16 + 4, v7, v36);
          v12 = (char *)v51[0];
          a2 = v51[2];
          v10 = (char *)v51[3];
          v5 = v51[4];
          swift_bridgeObjectRetain_n(v36, 2);
          sub_10007CC38((uint64_t)v12);
          if (v50 != v7)
          {
            __break(1u);
            goto LABEL_21;
          }
          swift_bridgeObjectRelease();
          v5 = v45;
          v35 = (uint64_t)v46;
          v34 = v47;
          v33 = v48;
        }
        else
        {
          v16 = _swiftEmptyArrayStorage;
        }
        v40 = sub_1001C1F5C(v34, v33, (uint64_t)v16);
        swift_release(v16);
        if ((v40 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v41 = v43;
          sub_1000126EC(v35, v43, type metadata accessor for OwnedBeaconGroup);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v5);
          return swift_bridgeObjectRelease();
        }
        sub_1000126B0(v35, type metadata accessor for OwnedBeaconGroup);
        v32 += v49;
        if (!--a1)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v43, 1, 1, v5);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10081F5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a2;
  v3 = type metadata accessor for OwnedBeaconGroup(0);
  v36 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v35 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v32 - v11;
  v34 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v13 = qword_1011B7D38;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = MACAddress.description.getter(v15);
  v18 = v17;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v13, "ownedBeaconGroup(macAddress: %{mask.hash}@)", 43, 2, v15);
  v19 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v19);
  v20 = v35;
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v9, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  v21 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v16) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v21);
  v22 = *(void (**)(char *, uint64_t))(v20 + 8);
  v22(v9, v6);
  v23 = ((uint64_t (*)(char *, uint64_t))v22)(v12, v6);
  if ((v16 & 1) != 0)
  {
    v24 = static os_log_type_t.default.getter(v23);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D38, "ownedBeaconGroup call failed because in device is in beforeFirstUnlock state", 76, 2, _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v33, 1, 1, v3);
  }
  else
  {
    v26 = sub_10081CEB8();
    v27 = v26[2];
    v28 = v36;
    if (v27)
    {
      v29 = (uint64_t)v26 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      v30 = *(_QWORD *)(v36 + 72);
      while (1)
      {
        sub_10005972C(v29, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
        if ((static MACAddress.== infix(_:_:)(&v5[*(int *)(v3 + 28)], a1) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconGroup);
        v29 += v30;
        if (!--v27)
          goto LABEL_9;
      }
      v31 = v33;
      sub_1000126EC((uint64_t)v5, v33, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v3);
    }
    else
    {
LABEL_9:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v33, 1, 1, v3);
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10081F8E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[2];

  v2 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)v26 - v8;
  v10 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v11 = qword_1011B7D38;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
  v14 = MACAddress.description.getter(v13);
  v16 = v15;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "ownedBeaconGroup(macAddress: %{mask.hash}@)", 43, 2, v13);
  v17 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
  v18 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v14) = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v2, v18);
  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v6, v2);
  v20 = ((uint64_t (*)(char *, uint64_t))v19)(v9, v2);
  if ((v14 & 1) != 0)
  {
    v21 = static os_log_type_t.default.getter(v20);
    v22 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D38, "ownedBeaconGroup call failed because in device is in beforeFirstUnlock state", 76, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v23 = sub_10081CEB8();
    __chkstk_darwin(v23);
    v26[-2] = a1;
    return sub_10008B7E8((uint64_t (*)(char *))sub_10087FD80, &v26[-4], v24);
  }
  return (uint64_t)v22;
}

uint64_t sub_10081FB3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v44 = a2;
  v47 = type metadata accessor for SharedBeaconRecord(0);
  v42 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v42 - v14;
  LODWORD(v46) = static os_log_type_t.default.getter(v13);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v45 = qword_1011B7D38;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v43 = a1;
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v45, "sharedBeaconGroup(for uuid: %{mask.hash}@)", 42, 2, v17);
  v21 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  v22 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v18) = dispatch thunk of static Equatable.== infix(_:_:)(v15, v12, v8, v22);
  v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v12, v8);
  v24 = ((uint64_t (*)(char *, uint64_t))v23)(v15, v8);
  if ((v18 & 1) == 0)
  {
    v26 = sub_1000181C8();
    __chkstk_darwin(v26);
    *(&v42 - 2) = v43;
    v28 = sub_10008B574((uint64_t (*)(char *))sub_10087FD64, (unint64_t *)&v42 - 4, v27);
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      v49 = _swiftEmptyArrayStorage;
      sub_10009A578(0, v29, 0);
      v30 = *(unsigned __int8 *)(v42 + 80);
      v46 = v28;
      v31 = v28 + ((v30 + 32) & ~v30);
      v32 = *(_QWORD *)(v42 + 72);
      v33 = v48;
      do
      {
        sub_10005972C(v31, (uint64_t)v4, type metadata accessor for SharedBeaconRecord);
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v4[*(int *)(v47 + 20)], v33);
        sub_1000126B0((uint64_t)v4, type metadata accessor for SharedBeaconRecord);
        v34 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
        {
          sub_10009A578(0, v34[2] + 1, 1);
          v34 = v49;
        }
        v36 = v34[2];
        v35 = v34[3];
        if (v36 >= v35 >> 1)
        {
          sub_10009A578(v35 > 1, v36 + 1, 1);
          v34 = v49;
        }
        v34[2] = v36 + 1;
        v33 = v48;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v34+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v36, v7, v48);
        v49 = v34;
        v31 += v32;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
      if (v34[2])
        goto LABEL_13;
    }
    else
    {
      swift_bridgeObjectRelease();
      v34 = _swiftEmptyArrayStorage;
      v33 = v48;
      if (_swiftEmptyArrayStorage[2])
      {
LABEL_13:
        v37 = v44;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v44, v43, v33);
        v38 = sub_10001B664((uint64_t)v34);
        swift_bridgeObjectRelease();
        v39 = type metadata accessor for SharedBeaconGroup(0);
        *(_QWORD *)(v37 + *(int *)(v39 + 20)) = v38;
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v37, 0, 1, v39);
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v25 = static os_log_type_t.default.getter(v24);
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D38, "sharedBeaconGroup call failed because in device is in beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
LABEL_16:
  v41 = type metadata accessor for SharedBeaconGroup(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v44, 1, 1, v41);
}

uint64_t sub_10081FFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  uint64_t *v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v29;
  uint64_t v30;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v29 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010ED860);
  v11 = __chkstk_darwin(v10);
  v30 = (uint64_t)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v29 - v16;
  v18 = type metadata accessor for SharedBeaconRecord(0);
  sub_10000F9B8(a1 + *(int *)(v18 + 76), (uint64_t)v17, &qword_1010ED860);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v15, a2, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
  v19 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10000F9B8((uint64_t)v17, (uint64_t)v9, &qword_1010ED860);
  sub_10000F9B8((uint64_t)v15, v19, &qword_1010ED860);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v9, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v15, &qword_1010ED860);
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    v21 = v20(v19, 1, v4);
    if (v21 == 1)
      v22 = &qword_1010ED860;
    else
      v22 = (uint64_t *)&unk_10110EE90;
    if (v21 == 1)
      v23 = -1;
    else
      v23 = 0;
  }
  else
  {
    v24 = v30;
    sub_10000F9B8((uint64_t)v9, v30, &qword_1010ED860);
    if (v20(v19, 1, v4) == 1)
    {
      sub_100004048((uint64_t)v15, &qword_1010ED860);
      sub_100004048((uint64_t)v17, &qword_1010ED860);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v24, v4);
      v23 = 0;
      v22 = (uint64_t *)&unk_10110EE90;
    }
    else
    {
      v25 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v29, v19, v4);
      v26 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v24, v25, v4, v26);
      v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v27(v25, v4);
      v22 = &qword_1010ED860;
      sub_100004048((uint64_t)v15, &qword_1010ED860);
      sub_100004048((uint64_t)v17, &qword_1010ED860);
      v27((char *)v24, v4);
    }
  }
  sub_100004048((uint64_t)v9, v22);
  return v23 & 1;
}

uint64_t sub_1008202EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;

  v5 = sub_10001A9A8(&qword_1010EF160);
  __chkstk_darwin(v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8._object = (void *)0x8000000100ED7210;
  v8._countAndFlagsBits = 0xD000000000000015;
  prohibitAsyncContext(functionName:)(v8);
  v16 = v2;
  v17 = a1;
  OS_dispatch_queue.sync<A>(execute:)(sub_1004D6554, v15, v5);
  v9 = sub_10001A9A8(&qword_1010EF168);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) == 1)
  {
    sub_100004048((uint64_t)v7, &qword_1010EF160);
    v10 = sub_10001A9A8(&qword_101102F80);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 1, 1, v10);
  }
  else
  {
    v12 = v7[*(int *)(v9 + 48)];
    v13 = sub_10001A9A8(&qword_101102F80);
    v14 = *(int *)(v13 + 48);
    sub_1000126EC((uint64_t)v7, a2, type metadata accessor for BeaconStatus);
    *(_BYTE *)(a2 + v14) = v12;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 0, 1, v13);
  }
}

uint64_t sub_10082045C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[24];

  swift_beginAccess(a1 + 296, v16, 0, 0);
  v6 = *(_QWORD *)(a1 + 296);
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain(v6);
    v7 = sub_100003FB0(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = *(_QWORD *)(v6 + 56);
      v11 = sub_10001A9A8(&qword_1010EF168);
      v12 = *(_QWORD *)(v11 - 8);
      sub_10000F9B8(v10 + *(_QWORD *)(v12 + 72) * v9, a3, &qword_1010EF168);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a3, 0, 1, v11);
    }
    else
    {
      v15 = sub_10001A9A8(&qword_1010EF168);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a3, 1, 1, v15);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    v13 = sub_10001A9A8(&qword_1010EF168);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 1, 1, v13);
  }
}

void sub_100820584(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE v10[24];

  swift_beginAccess(a1 + 304, v10, 0, 0);
  v6 = *(_QWORD *)(a1 + 304);
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain(v6);
    v7 = sub_100003FB0(a2);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
      swift_bridgeObjectRetain(v9);
    }
    else
    {
      v9 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
}

uint64_t sub_100820620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[6];

  v3 = v2;
  v26[0] = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[1] = *(_QWORD *)(v3 + 288);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_101096298, v17 + 8, v15 | 7);
  *(_QWORD *)(v18 + 16) = v3;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  v19 = v26[0];
  *(_QWORD *)(v18 + v17) = v26[0];
  aBlock[4] = sub_10087B044;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010962B0;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(v19);
  static DispatchQoS.unspecified.getter(v21);
  v30 = _swiftEmptyArrayStorage;
  v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v24 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v23, v24, v5, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
  return swift_release();
}

uint64_t sub_1008208A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  _BYTE v50[24];

  v6 = type metadata accessor for Date(0);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  v7 = __chkstk_darwin(v6);
  v45 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - v9;
  v11 = type metadata accessor for DeviceEvent(0);
  v12 = __chkstk_darwin(v11);
  v44 = (uint64_t)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - v14;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v46 = v18;
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (_QWORD *)(a1 + 304);
  v21 = swift_beginAccess(a1 + 304, v50, 0, 0);
  v22 = *(_QWORD *)(a1 + 304);
  v23 = *(_QWORD *)(v22 + 16);
  v47 = a1;
  if (v23)
  {
    swift_bridgeObjectRetain(v22);
    v24 = sub_100003FB0(a2);
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v24);
      swift_bridgeObjectRetain(v26);
    }
    else
    {
      v26 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = 0;
  }
  v43 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
  v43(v19, a2, v16, v21);
  swift_beginAccess(v20, v49, 33, 0);
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v20);
  v48 = *v20;
  *v20 = 0x8000000000000000;
  sub_10010DB18(a3, (uint64_t)v19, isUniquelyReferenced_nonNull_native);
  *v20 = v48;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  swift_endAccess(v49);
  if (v26)
  {
    v28 = sub_1007F4054((uint64_t)v15, (uint64_t)v10, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v42);
    sub_1000126B0((uint64_t)v15, type metadata accessor for DeviceEvent);
  }
  else
  {
    v28 = 0;
  }
  v29 = v44;
  v30 = v45;
  v31 = sub_1007F4054(v44, v45, a3);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v30, v42);
  sub_1000126B0(v29, type metadata accessor for DeviceEvent);
  v32 = v46;
  v33 = (void (*)(char *, uint64_t, uint64_t))v43;
  v34 = (v28 ^ v31);
  v35 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v49, v35);
  swift_release();
  if (LOBYTE(v49[0]) == 1 && (v34 & 1) != 0)
    sub_1007EEF64(24);
  type metadata accessor for Transaction(0);
  v33(v19, a2, v16);
  v36 = *(unsigned __int8 *)(v17 + 80);
  v37 = (v36 + 17) & ~v36;
  v38 = swift_allocObject(&unk_1010950C8, v37 + v32, v36 | 7);
  *(_BYTE *)(v38 + 16) = v34 & 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v38 + v37, v19, v16);
  static Transaction.asyncTask(name:block:)("SimpleBeaconStatuUpdate", 23, 2, &unk_10110AA38, v38);
  return swift_release();
}

uint64_t sub_100820C44(char a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a2;
  *(_BYTE *)(v2 + 160) = a1;
  return swift_task_switch(sub_100820C60, 0, 0);
}

uint64_t sub_100820C60()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (*(_BYTE *)(v0 + 160) != 1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBA0 + dword_1010EBBA0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBA4);
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = sub_100820D70;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100820D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100820DCC, 0, 0);
}

uint64_t sub_100820DCC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 136))
  {
    v2 = *(_QWORD *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = sub_10001A9A8(&qword_1011003C0);
    v4 = type metadata accessor for UUID(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(unsigned __int8 *)(v5 + 80);
    v7 = (v6 + 32) & ~v6;
    v8 = swift_allocObject(v3, v7 + *(_QWORD *)(v5 + 72), v6 | 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    v9 = v8 + v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, v2, v4);
    v10 = sub_1003B9FE0(v8);
    *(_QWORD *)(v0 + 144) = v10;
    swift_setDeallocating(v8);
    swift_arrayDestroy(v9, 1, v4);
    swift_deallocClassInstance(v8, 32, 7);
    v11 = (_QWORD *)swift_task_alloc(dword_1011055CC);
    *(_QWORD *)(v0 + 152) = v11;
    *v11 = v0;
    v11[1] = sub_100820EF8;
    return sub_100713078((uint64_t)v10);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100820EF8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100325300, 0, 0);
}

uint64_t sub_100820F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  char v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD aBlock[7];
  _QWORD *v63;

  v61 = a2;
  v54 = a7;
  v55 = a8;
  v53 = a6;
  v48 = a4;
  v49 = a5;
  v47 = a3;
  v52 = a1;
  v57 = type metadata accessor for DispatchWorkItemFlags(0);
  v60 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v56 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  __chkstk_darwin(v9);
  v51 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BeaconStatus(0);
  v46 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v46 + 64);
  __chkstk_darwin(v11);
  v44 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v43 = v13;
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v45 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v42 = v16;
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = *(_QWORD *)(v61 + 288);
  (*(void (**)(char *, uint64_t))(v17 + 16))(v19, v47);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v48, v13);
  sub_10005972C(v49, (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeaconStatus);
  v20 = *(unsigned __int8 *)(v17 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = *(unsigned __int8 *)(v14 + 80);
  v23 = (v18 + v22 + v21) & ~v22;
  v24 = *(unsigned __int8 *)(v46 + 80);
  v25 = (v15 + v24 + v23) & ~v24;
  v26 = v25 + v12;
  v27 = (v26 + 11) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_101094EE8, v27 + 8, v20 | v22 | v24 | 7);
  *(_QWORD *)(v28 + 16) = v61;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28 + v21, v19, v42);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v28 + v23, v45, v43);
  sub_1000126EC(v44, v28 + v25, type metadata accessor for BeaconStatus);
  v29 = (_BYTE *)(v28 + v26);
  *v29 = v53;
  v29[1] = v54;
  v30 = BYTE1(v55);
  v29[2] = v55;
  v29[3] = v30 & 1;
  *(_QWORD *)(v28 + v27) = v52;
  aBlock[4] = sub_100879AFC;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101094F00;
  v31 = _Block_copy(aBlock);
  swift_retain();
  v32 = swift_retain();
  v33 = v51;
  static DispatchQoS.unspecified.getter(v32);
  v63 = _swiftEmptyArrayStorage;
  v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v37 = v56;
  v38 = v35;
  v39 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v63, v38, v36, v57, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v37, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v39);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v59);
  return swift_release();
}

uint64_t sub_100821348(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, _QWORD *a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  __int128 *v61;
  Class isa;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(_BYTE *, uint64_t, uint64_t);
  unsigned int v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  NSObject *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  __int128 *v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  os_log_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  void (*v138)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE *v139;
  int v140;
  unsigned int (*v141)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v142;
  BOOL v143;
  int v144;
  BOOL v145;
  _BYTE *v146;
  int v147;
  int v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  void (*v158)(_BYTE *, uint64_t);
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  _BYTE *v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  os_log_type_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  int v192;
  _BYTE v193[12];
  int v194;
  unsigned int (*v195)(_BYTE *, uint64_t, uint64_t);
  unint64_t *v196;
  _BYTE *v197;
  uint64_t v198;
  _BYTE *v199;
  _BYTE *v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  _BYTE *v205;
  _BYTE *v206;
  uint64_t v207;
  int v208;
  _QWORD *v209;
  _BYTE *v210;
  _BYTE *v211;
  _BYTE *v212;
  uint64_t v213;
  _BYTE *v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  os_log_t v220;
  _BYTE *v221;
  _BYTE *v222;
  int v223;
  _BYTE *v224;
  _BYTE *v225;
  _BYTE *v226;
  _BYTE *v227;
  uint64_t v228;
  _BYTE *v229;
  _QWORD *v230;
  _BYTE *v231;
  NSObject *v232;
  uint64_t v233;
  __int128 *v234;
  uint64_t v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  char v244[8];

  v208 = a7;
  v216 = a6;
  v223 = a5;
  v235 = a4;
  v238 = a3;
  v209 = a8;
  v215 = *a8;
  v10 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v10);
  v204 = &v193[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v203 = type metadata accessor for KeySyncRecord(0);
  v202 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v201 = &v193[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v207 = type metadata accessor for TimeBasedKey(0);
  v198 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207);
  v206 = &v193[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  v15 = __chkstk_darwin(v14);
  v196 = (unint64_t *)&v193[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v197 = &v193[-v17];
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v18);
  v218 = &v193[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v219 = type metadata accessor for SharedBeaconRecord(0);
  v217 = *(_QWORD *)(v219 - 8);
  v20 = __chkstk_darwin(v219);
  v227 = &v193[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v211 = &v193[-v22];
  v23 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v23);
  v226 = &v193[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v239 = type metadata accessor for BeaconStatus(0);
  v25 = *(_QWORD *)(v239 - 8);
  v26 = __chkstk_darwin(v239);
  v214 = &v193[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = __chkstk_darwin(v26);
  v205 = &v193[-v29];
  v30 = __chkstk_darwin(v28);
  v229 = &v193[-v31];
  v213 = v32;
  __chkstk_darwin(v30);
  v236 = &v193[-v33];
  v228 = type metadata accessor for UUID(0);
  v230 = *(_QWORD **)(v228 - 8);
  v34 = __chkstk_darwin(v228);
  v199 = &v193[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = __chkstk_darwin(v34);
  v200 = &v193[-v37];
  v38 = __chkstk_darwin(v36);
  v224 = &v193[-v39];
  __chkstk_darwin(v38);
  v222 = &v193[-v40];
  v41 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v41);
  v43 = &v193[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v44 = type metadata accessor for Date(0);
  v231 = *(_BYTE **)(v44 - 8);
  v45 = __chkstk_darwin(v44);
  v225 = &v193[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v45);
  v48 = &v193[-v47];
  v49 = sub_10001A9A8(&qword_1010EF160);
  v50 = __chkstk_darwin(v49);
  v221 = &v193[-((v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v50);
  v53 = &v193[-v52];
  v54 = sub_10001A9A8(&qword_1010F2CA8);
  v55 = __chkstk_darwin(v54);
  v210 = &v193[-((v56 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v57 = __chkstk_darwin(v55);
  v59 = &v193[-v58];
  __chkstk_darwin(v57);
  v61 = (__int128 *)&v193[-v60];
  v220 = a1 + 37;
  swift_beginAccess(&a1[37], v244, 0, 0);
  isa = a1[37].isa;
  v63 = *((_QWORD *)isa + 2);
  v234 = v61;
  v233 = a2;
  v232 = a1;
  if (v63)
  {
    swift_bridgeObjectRetain(isa);
    v64 = sub_100003FB0(a2);
    if ((v65 & 1) != 0)
    {
      v66 = v64;
      v212 = v43;
      v67 = v25;
      v68 = v48;
      v69 = v44;
      v70 = *((_QWORD *)isa + 7);
      v71 = sub_10001A9A8(&qword_1010EF168);
      v72 = *(_QWORD *)(v71 - 8);
      v73 = v70 + *(_QWORD *)(v72 + 72) * v66;
      v44 = v69;
      v48 = v68;
      v25 = v67;
      v43 = v212;
      sub_10000F9B8(v73, (uint64_t)v53, &qword_1010EF168);
      v74 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v72 + 56);
      v61 = v234;
      v74(v53, 0, 1, v71);
    }
    else
    {
      v76 = sub_10001A9A8(&qword_1010EF168);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v53, 1, 1, v76);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v75 = sub_10001A9A8(&qword_1010EF168);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v53, 1, 1, v75);
  }
  v77 = sub_10001A9A8(&qword_1010EF168);
  v78 = *(_QWORD *)(v77 - 8);
  v79 = 1;
  if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v78 + 48))(v53, 1, v77))
  {
    sub_10005972C((uint64_t)v53, (uint64_t)v61, type metadata accessor for BeaconStatus);
    v79 = 0;
  }
  sub_100004048((uint64_t)v53, &qword_1010EF160);
  v80 = v79;
  v81 = v239;
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v61, v80, 1, v239);
  sub_10000F9B8((uint64_t)v61, (uint64_t)v59, &qword_1010F2CA8);
  v212 = (_BYTE *)v25;
  v82 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48);
  v83 = v82(v59, 1, v81);
  v237 = v44;
  if (v83 == 1)
  {
    sub_100004048((uint64_t)v59, &qword_1010F2CA8);
    v84 = v231;
    v85 = (*((uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))v231 + 7))(v43, 1, 1, v44);
LABEL_12:
    static Date.distantPast.getter(v85);
    sub_100004048((uint64_t)v43, (uint64_t *)&unk_1010EA690);
    goto LABEL_14;
  }
  v84 = v231;
  (*((void (**)(_BYTE *, _BYTE *, uint64_t))v231 + 2))(v43, &v59[*(int *)(v81 + 24)], v44);
  sub_1000126B0((uint64_t)v59, type metadata accessor for BeaconStatus);
  (*((void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))v84 + 7))(v43, 0, 1, v44);
  v85 = (*((uint64_t (**)(_BYTE *, uint64_t, uint64_t))v84 + 6))(v43, 1, v44);
  if ((_DWORD)v85 == 1)
    goto LABEL_12;
  (*((void (**)(_BYTE *, _BYTE *, uint64_t))v84 + 4))(v48, v43, v237);
LABEL_14:
  v86 = v235;
  if ((static Date.> infix(_:_:)(v238, v48) & 1) != 0)
  {
    v195 = v82;
    v231 = v48;
    v87 = (_BYTE *)v230[2];
    v88 = (uint64_t)v222;
    v89 = v233;
    v90 = v228;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v87)(v222, v233, v228);
    v91 = *(int *)(v77 + 48);
    v92 = v221;
    sub_10005972C(v86, (uint64_t)v221, type metadata accessor for BeaconStatus);
    v92[v91] = v223;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v92, 0, 1, v77);
    swift_beginAccess(v220, &v243, 33, 0);
    sub_100100120((uint64_t)v92, v88);
    swift_endAccess(&v243);
    v93 = swift_retain();
    AnyCurrentValuePublisher.value.getter(&v243, v93);
    swift_release();
    v223 = v243;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v94 = type metadata accessor for Logger(0);
    v95 = (_BYTE *)sub_10001A9E8(v94, (uint64_t)qword_1011B77E8);
    v96 = v224;
    v222 = v87;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v87)(v224, v89, v90);
    v97 = v225;
    v98 = v238;
    v99 = v237;
    (*((void (**)(_BYTE *))v84 + 2))(v225);
    sub_10005972C(v86, (uint64_t)v236, type metadata accessor for BeaconStatus);
    v100 = v229;
    v101 = sub_10005972C(v86, (uint64_t)v229, type metadata accessor for BeaconStatus);
    v221 = v95;
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.info.getter(v102);
    if (os_log_type_enabled(v102, (os_log_type_t)v103))
    {
      v194 = v103;
      v220 = v102;
      v104 = swift_slowAlloc(68, -1);
      v105 = swift_slowAlloc(128, -1);
      v243 = v105;
      *(_DWORD *)v104 = 141559555;
      *(_QWORD *)&v241 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v104 + 4, v104 + 12);
      *(_WORD *)(v104 + 12) = 2081;
      v106 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v107 = dispatch thunk of CustomStringConvertible.description.getter(v90, v106);
      *(_QWORD *)&v241 = sub_100016940(v107, v108, &v243);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v104 + 14, v104 + 22);
      swift_bridgeObjectRelease();
      v224 = (_BYTE *)v230[1];
      ((void (*)(_BYTE *, uint64_t))v224)(v96, v90);
      *(_WORD *)(v104 + 22) = 2082;
      v109 = sub_1000AEDC4(v216);
      *(_QWORD *)&v241 = sub_100016940(v109, v110, &v243);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v104 + 24, v104 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v104 + 32) = 2082;
      v111 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v112 = dispatch thunk of CustomStringConvertible.description.getter(v99, v111);
      *(_QWORD *)&v241 = sub_100016940(v112, v113, &v243);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v104 + 34, v104 + 42);
      swift_bridgeObjectRelease();
      v114 = (_QWORD *)*((_QWORD *)v84 + 1);
      ((void (*)(_BYTE *, uint64_t))v114)(v97, v99);
      *(_WORD *)(v104 + 42) = 2082;
      v115 = v236[*(int *)(v239 + 28)];
      if (v115 == 3)
      {
        v116 = 0xE400000000000000;
        v117 = 1701736302;
        v118 = v105;
      }
      else
      {
        v118 = v105;
        if (v236[*(int *)(v239 + 28)])
        {
          if ((_DWORD)v115 == 1)
          {
            v116 = 0xEA00000000007972;
            v117 = 0x61646E6F6365732ELL;
          }
          else
          {
            v116 = 0x8000000100EC6940;
            v117 = 0xD000000000000010;
          }
        }
        else
        {
          v116 = 0xE800000000000000;
          v117 = 0x7972616D6972702ELL;
        }
      }
      *(_QWORD *)&v241 = sub_100016940(v117, v116, &v243);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v104 + 44, v104 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v236, type metadata accessor for BeaconStatus);
      *(_WORD *)(v104 + 52) = 2048;
      v122 = &v229[*(int *)(v239 + 28)];
      v123 = *v122;
      v124 = *((_QWORD *)v122 + 1);
      if (v123 == 3)
        v125 = 0;
      else
        v125 = v124;
      sub_1000126B0((uint64_t)v229, type metadata accessor for BeaconStatus);
      *(_QWORD *)&v241 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v104 + 54, v104 + 62);
      *(_WORD *)(v104 + 62) = 1024;
      LODWORD(v241) = v223;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 4, v104 + 64, v104 + 68);
      v126 = v220;
      _os_log_impl((void *)&_mh_execute_header, v220, (os_log_type_t)v194, "Latest type18 for %{private,mask.hash}s: %{public}s,scanDate: %{public}s,sequence: %{public}s,index: %llu, appActive: %{BOOL}d.", (uint8_t *)v104, 0x44u);
      swift_arrayDestroy(v118, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v118, -1, -1);
      swift_slowDealloc(v104, -1, -1);

      v121 = (uint64_t)v232;
      v98 = v238;
      v230 = v114;
    }
    else
    {
      sub_1000126B0((uint64_t)v100, type metadata accessor for BeaconStatus);
      v224 = (_BYTE *)v230[1];
      ((void (*)(_BYTE *, uint64_t))v224)(v96, v90);
      v230 = (_QWORD *)*((_QWORD *)v84 + 1);
      ((void (*)(_BYTE *, uint64_t))v230)(v97, v99);
      sub_1000126B0((uint64_t)v236, type metadata accessor for BeaconStatus);

      v121 = (uint64_t)v232;
    }
    v127 = v226;
    v128 = v233;
    sub_10081C0CC(v233, (uint64_t)v226);
    v129 = type metadata accessor for WildModeAssociationRecord(0);
    v130 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 48))(v127, 1, v129);
    sub_100004048((uint64_t)v127, &qword_101102FB0);
    v131 = v231;
    v132 = (uint64_t)v227;
    if (v130 != 1)
      sub_1007F4EB8();
    sub_10080B648(v128, (uint64_t)&v241);
    v61 = v234;
    v133 = v239;
    if (!v242)
    {
      ((void (*)(_BYTE *, uint64_t))v230)(v131, v99);
      sub_100004048((uint64_t)v61, &qword_1010F2CA8);
      v119 = (uint64_t *)&unk_1010EE310;
      v120 = &v241;
      return sub_100004048((uint64_t)v120, v119);
    }
    sub_10000F9FC(&v241, (uint64_t)&v243);
    sub_100030784((uint64_t)&v243, (uint64_t)&v241);
    v134 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v135 = (uint64_t)v218;
    v136 = v219;
    v137 = swift_dynamicCast(v218, &v241, v134, v219, 6);
    v138 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v217 + 56);
    if ((v137 & 1) != 0)
    {
      v138(v135, 0, 1, v136);
      v139 = v211;
      sub_1000126EC(v135, (uint64_t)v211, type metadata accessor for SharedBeaconRecord);
      v140 = v139[*(int *)(v136 + 64)];
      sub_1000126EC((uint64_t)v139, v132, type metadata accessor for SharedBeaconRecord);
      if (v140 == 4)
      {
        sub_1000126B0(v132, type metadata accessor for SharedBeaconRecord);
        v61 = v234;
LABEL_47:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v243);
        ((void (*)(_BYTE *, uint64_t))v230)(v131, v99);
        goto LABEL_21;
      }
      v144 = *(unsigned __int8 *)(v132 + *(int *)(v136 + 64));
      sub_1000126B0(v132, type metadata accessor for SharedBeaconRecord);
      v145 = v144 == 1;
      v61 = v234;
      if (v145)
        goto LABEL_47;
    }
    else
    {
      v138(v135, 1, 1, v136);
      sub_100004048(v135, (uint64_t *)&unk_1010EE180);
    }
    v141 = v195;
    if (v195(v61, 1, v133) == 1)
    {
      if ((v223 & 1) == 0)
        goto LABEL_51;
    }
    else
    {
      v142 = v210;
      sub_10000F9B8((uint64_t)v61, (uint64_t)v210, &qword_1010F2CA8);
      if (v141(v142, 1, v133) == 1)
      {
        sub_100004048((uint64_t)v142, &qword_1010F2CA8);
        v143 = 0;
        goto LABEL_52;
      }
      v146 = v205;
      sub_1000126EC((uint64_t)v142, (uint64_t)v205, type metadata accessor for BeaconStatus);
      v147 = v146[*(int *)(v133 + 20)];
      sub_1000126B0((uint64_t)v146, type metadata accessor for BeaconStatus);
      v148 = *(unsigned __int8 *)(v235 + *(int *)(v133 + 20));
      v145 = v147 == v148;
      v143 = v147 != v148;
      if (v145 || !v223)
      {
LABEL_52:
        sub_100030784((uint64_t)&v243, (uint64_t)&v241);
        v149 = v235;
        v150 = v214;
        sub_10005972C(v235, (uint64_t)v214, type metadata accessor for BeaconStatus);
        v151 = v212[80];
        v152 = (v151 + 64) & ~v151;
        v153 = swift_allocObject(&unk_101094F38, v152 + v213, v151 | 7);
        *(_BYTE *)(v153 + 16) = v143;
        sub_10000F9FC(&v241, v153 + 24);
        sub_1000126EC((uint64_t)v150, v153 + v152, type metadata accessor for BeaconStatus);
        static Transaction.asyncTask(name:block:)("SimpleBeaconStatuUpdate", 23, 2, &unk_10110A9C0, v153);
        swift_release();
        v154 = (unsigned __int8 *)(v149 + *(int *)(v133 + 28));
        v155 = *v154;
        if (v155 == 3)
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v243);
          ((void (*)(_BYTE *, uint64_t))v230)(v231, v99);
LABEL_77:
          v119 = &qword_1010F2CA8;
          v120 = v234;
          return sub_100004048((uint64_t)v120, v119);
        }
        v156 = *((_QWORD *)v154 + 1);
        v157 = v231;
        v158 = (void (*)(_BYTE *, uint64_t))v230;
        if (!*v154)
          goto LABEL_64;
        if ((_DWORD)v155 != 1)
        {
LABEL_76:
          Transaction.capture()();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v243);
          v158(v157, v99);
          goto LABEL_77;
        }
        if ((v208 & 0x100) != 0)
        {
          v166 = v200;
          v167 = v228;
          v168 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v222)(v200, v233, v228);
          v169 = Logger.logObject.getter(v168);
          v170 = static os_log_type_t.error.getter(v169);
          if (os_log_type_enabled(v169, v170))
          {
            v171 = swift_slowAlloc(22, -1);
            v172 = swift_slowAlloc(32, -1);
            v239 = v172;
            *(_DWORD *)v171 = 141558275;
            v240 = 1752392040;
            *(_QWORD *)&v241 = v172;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, &v241, v171 + 4, v171 + 12);
            *(_WORD *)(v171 + 12) = 2081;
            v173 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v174 = dispatch thunk of CustomStringConvertible.description.getter(v167, v173);
            v240 = sub_100016940(v174, v175, (uint64_t *)&v241);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, &v241, v171 + 14, v171 + 22);
            swift_bridgeObjectRelease();
            ((void (*)(_BYTE *, uint64_t))v224)(v166, v167);
            _os_log_impl((void *)&_mh_execute_header, v169, v170, "Secondary sequence and index detected without hint. Cannot determine primary key for beacon: %{private,mask.hash}s.", (uint8_t *)v171, 0x16u);
            v176 = v239;
            swift_arrayDestroy(v239, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v176, -1, -1);
            swift_slowDealloc(v171, -1, -1);
          }
          else
          {
            ((void (*)(_BYTE *, uint64_t))v224)(v166, v167);
          }

          v157 = v231;
          v158 = (void (*)(_BYTE *, uint64_t))v230;
          goto LABEL_76;
        }
        if (v156)
        {
          if (!is_mul_ok(v156, 0x60uLL))
            __break(1u);
          v159 = 96 * v156 - 1;
          if (96 * v156 - 96 <= 1)
            v160 = 1;
          else
            v160 = 96 * v156 - 96;
          if (v159 < v160)
          {
            __break(1u);
LABEL_64:
            v161 = (uint64_t)v204;
            goto LABEL_65;
          }
        }
        else
        {
          v160 = 0;
          v159 = 0;
        }
        v177 = sub_1007F516C(&v243, v160, v159, 0, 0);
        if (v177[2])
        {
          v178 = (uint64_t)v177
               + ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80));
          v239 = *(_QWORD *)(v198 + 72);
          v236 = v177;
          swift_bridgeObjectRetain(v177);
          v179 = v206;
          sub_10005972C(v178, (uint64_t)v206, type metadata accessor for TimeBasedKey);
          v180 = &v179[*(int *)(v207 + 24)];
          v181 = *((_QWORD *)v180 + 2);
          v182 = *((_QWORD *)v180 + 3);
          sub_10001BBBC(v181, v182);
          sub_1007E7118(v181, v182);
          v184 = v183;
          sub_1007E3D28(v183, 0);
          v186 = v185;
          CCECCryptorRelease(v184);
          sub_10001BC14(v181, v182);
          __asm { BR              X9 }
        }
        v188 = (uint64_t)v197;
        v189 = v198;
        v190 = v207;
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v198 + 56))(v197, 1, 1, v207);
        swift_bridgeObjectRelease();
        v191 = v196;
        sub_100005CF0(v188, (uint64_t)v196, (uint64_t *)&unk_1010F0EE0);
        v192 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v189 + 48))(v191, 1, v190);
        v157 = v231;
        v161 = (uint64_t)v204;
        if (v192 == 1)
        {
          v162 = (uint64_t *)&unk_1010F0EE0;
          v163 = (uint64_t)v191;
LABEL_67:
          sub_100004048(v163, v162);
          goto LABEL_76;
        }
        v156 = *v191;
        sub_1000126B0((uint64_t)v191, type metadata accessor for TimeBasedKey);
LABEL_65:
        sub_10081AECC(v233, v161);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v202 + 48))(v161, 1, v203) != 1)
        {
          v164 = v161;
          v165 = v201;
          sub_1000126EC(v164, (uint64_t)v201, type metadata accessor for KeySyncRecord);
          sub_100857538((uint64_t)v165, v98, v156, (uint64_t)_swiftEmptyArrayStorage, v121);
          sub_1000126B0((uint64_t)v165, type metadata accessor for KeySyncRecord);
          goto LABEL_76;
        }
        v162 = &qword_1010F7AE0;
        v163 = v161;
        goto LABEL_67;
      }
    }
    sub_1007EEF64(24);
LABEL_51:
    v143 = 1;
    goto LABEL_52;
  }
  (*((void (**)(_BYTE *, uint64_t))v84 + 1))(v48, v237);
LABEL_21:
  v119 = &qword_1010F2CA8;
  v120 = v61;
  return sub_100004048((uint64_t)v120, v119);
}

uint64_t sub_1008230F8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 224) = a2;
  *(_QWORD *)(v3 + 232) = a3;
  *(_BYTE *)(v3 + 296) = a1;
  return swift_task_switch(sub_100823114, 0, 0);
}

uint64_t sub_100823114()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t (__cdecl *v4)();

  if (*(_BYTE *)(v0 + 296) == 1)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 200, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBA0 + dword_1010EBBA0);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBBA4);
      *(_QWORD *)(v0 + 240) = v2;
      v3 = sub_1008232C4;
LABEL_10:
      *v2 = v0;
      v2[1] = v3;
      return v4();
    }
    __break(1u);
  }
  else
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBE8 + dword_1010EBBE8);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBBEC);
      *(_QWORD *)(v0 + 272) = v2;
      v3 = sub_100823680;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1008232C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100823320, 0, 0);
}

uint64_t sub_100823320()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t (__cdecl *v16)();

  v1 = (_QWORD *)(v0 + 96);
  if (*(_QWORD *)(v0 + 248))
  {
    v2 = *(_QWORD **)(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = sub_10001A9A8(&qword_1011003C0);
    v4 = type metadata accessor for UUID(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = (v7 + 32) & ~v7;
    v9 = swift_allocObject(v3, v8 + v6, v7 | 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
    v10 = v2[3];
    v11 = v2[4];
    sub_10001AA44(v2, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v10);
    v12 = sub_1003B9FE0(v9);
    *(_QWORD *)(v0 + 256) = v12;
    swift_setDeallocating(v9);
    swift_arrayDestroy(v9 + v8, 1, v4);
    swift_deallocClassInstance(v9, 32, 7);
    v13 = (_QWORD *)swift_task_alloc(dword_1011055CC);
    *(_QWORD *)(v0 + 264) = v13;
    *v13 = v0;
    v13[1] = sub_100823530;
    return sub_100713078((uint64_t)v12);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v16 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBE8 + dword_1010EBBE8);
      v15 = (_QWORD *)swift_task_alloc(unk_1010EBBEC);
      *(_QWORD *)(v0 + 272) = v15;
      *v15 = v0;
      v15[1] = sub_100823680;
      return v16();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100823530()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10082358C, 0, 0);
}

uint64_t sub_10082358C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  swift_release();
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBE8 + dword_1010EBBE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBEC);
    *(_QWORD *)(v0 + 272) = v2;
    *v2 = v0;
    v2[1] = sub_100823680;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100823680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008236DC, 0, 0);
}

uint64_t sub_1008236DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for BeaconStatus(0) + 20)) >> 6;
  if (v3 == 3)
    v4 = 5;
  else
    v4 = 0x40201u >> (8 * v3);
  v5 = dword_10111870C;
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 288) = v6;
  *v6 = v0;
  v6[1] = sub_1008237A0;
  return sub_100BE6388(*(_QWORD *)(v0 + 224), v4);
}

uint64_t sub_1008237A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 288));
  swift_release();
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_100882E4C;
  }
  else
  {
    v2 = sub_100823814;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100823814()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 280));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100823844(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v1[30] = a1;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v1[31] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[32] = v3;
  v1[33] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v1[34] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[35] = v5;
  v1[36] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v1[37] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[38] = v7;
  v1[39] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconStatus(0);
  v1[40] = v8;
  v1[41] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF3F8);
  v1[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v1[43] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[44] = v11;
  v1[45] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F0F00);
  v1[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ObservedAdvertisement(0);
  v1[47] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[48] = v14;
  v1[49] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BeaconIdentifier(0);
  v1[50] = v15;
  v1[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v1[52] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v1[53] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v1[54] = v18;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[55] = swift_task_alloc(v19);
  v1[56] = swift_task_alloc(v19);
  v1[57] = swift_task_alloc(v19);
  v1[58] = swift_task_alloc(v19);
  v1[59] = swift_task_alloc(v19);
  v1[60] = swift_task_alloc(v19);
  v1[61] = swift_task_alloc(v19);
  v20 = sub_10001A9A8(&qword_1010ED860);
  v1[62] = v20;
  v21 = (*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[63] = swift_task_alloc(v21);
  v1[64] = swift_task_alloc(v21);
  v1[65] = swift_task_alloc(v21);
  v1[66] = swift_task_alloc(v21);
  return swift_task_switch(sub_100823A9C, 0, 0);
}

uint64_t sub_100823A9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t (__cdecl *v9)();

  if (qword_1010EA468 != -1)
    swift_once(&qword_1010EA468, sub_100C6B450);
  v1 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 536) = v1;
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7FF8);
  *(_QWORD *)(v0 + 544) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "readLatestBeaconStatusObservations called.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = qword_1010EA5B0;
  swift_retain();
  if (v6 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 168, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 104, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 128))
  {
    sub_10000F9FC((__int128 *)(v0 + 104), v0 + 64);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
    v9 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v8 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 552) = v8;
    *v8 = v0;
    v8[1] = sub_10001EE24;
    return v9();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100823C5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t (*v12)();

  v1 = *(_QWORD *)(v0[70] + 128);
  if (v1)
  {
    v2 = v0[76];
    v3 = v0[51];
    v4 = v0[46];
    swift_retain();
    sub_100123AC8(v3, v1, v4);
    v0[81] = v2;
    if (!v2)
    {
      swift_release();
      v12 = sub_100823DE0;
      return swift_task_switch(v12, 0, 0);
    }
    v5 = v2;
    v6 = sub_100C69138(v2);
    swift_willThrow(v6);
    swift_release();
  }
  else
  {
    if (qword_1010EA460 != -1)
      swift_once(&qword_1010EA460, sub_100C67E60);
    v7 = sub_10001A9E8(v0[67], (uint64_t)qword_10111B888);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.fault.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No observation store on this platform!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = sub_100417FD0();
    v5 = swift_allocError(&type metadata for ObservationStoreService.ObservationStoreServiceError, v11, 0, 0);
    swift_willThrow(v5);
  }
  v0[82] = v5;
  v12 = sub_1008244C8;
  return swift_task_switch(v12, 0, 0);
}

uint64_t sub_100823DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uid_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 384) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
    v4 = *(_QWORD *)(v0 + 488);
    v5 = *(_QWORD *)(v0 + 472);
    v6 = *(_QWORD *)(v0 + 416);
    sub_100004048(v2, &qword_1010F0F00);
    v7 = v3(v5, v4, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 488);
    v12 = *(_QWORD *)(v0 + 472);
    v14 = *(_QWORD *)(v0 + 416);
    v13 = *(_QWORD *)(v0 + 424);
    v15 = *(_QWORD *)(v0 + 408);
    if (v10)
    {
      v91 = *(_QWORD *)(v0 + 488);
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(32, -1);
      v94 = v17;
      *(_DWORD *)v16 = 141558275;
      *(_QWORD *)(v16 + 4) = 1752392040;
      *(_WORD *)(v16 + 12) = 2081;
      v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v14, v18);
      *(_QWORD *)(v16 + 14) = sub_100016940(v19, v20, &v94);
      swift_bridgeObjectRelease();
      v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v21(v12, v14);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No latest advertisement read from ObservationService beacon: %{private,mask.hash}s.", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      sub_1000126B0(v15, type metadata accessor for BeaconIdentifier);
      v22 = v91;
    }
    else
    {

      v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v21(v12, v14);
      sub_1000126B0(v15, type metadata accessor for BeaconIdentifier);
      v22 = v11;
    }
    v21(v22, v14);
    v28 = *(_QWORD *)(v0 + 616) + 1;
    if (v28 == *(_QWORD *)(v0 + 584))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 624))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 416));
LABEL_14:
      swift_bridgeObjectRelease();
      swift_release();
      v57 = *(_QWORD *)(v0 + 520);
      v58 = *(_QWORD *)(v0 + 504);
      v59 = *(_QWORD *)(v0 + 512);
      v61 = *(_QWORD *)(v0 + 480);
      v60 = *(_QWORD *)(v0 + 488);
      v63 = *(_QWORD *)(v0 + 464);
      v62 = *(_QWORD *)(v0 + 472);
      v65 = *(_QWORD *)(v0 + 448);
      v64 = *(_QWORD *)(v0 + 456);
      v74 = *(_QWORD *)(v0 + 440);
      v76 = *(_QWORD *)(v0 + 408);
      v78 = *(_QWORD *)(v0 + 392);
      v79 = *(_QWORD *)(v0 + 368);
      v82 = *(_QWORD *)(v0 + 360);
      v84 = *(_QWORD *)(v0 + 336);
      v86 = *(_QWORD *)(v0 + 328);
      v88 = *(_QWORD *)(v0 + 312);
      v90 = *(_QWORD *)(v0 + 288);
      v93 = *(_QWORD *)(v0 + 264);
      swift_task_dealloc(*(_QWORD *)(v0 + 528));
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      swift_task_dealloc(v58);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v74);
      swift_task_dealloc(v76);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v82);
      swift_task_dealloc(v84);
      swift_task_dealloc(v86);
      swift_task_dealloc(v88);
      swift_task_dealloc(v90);
      swift_task_dealloc(v93);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v51 = *(_QWORD *)(v0 + 648);
    *(_QWORD *)(v0 + 616) = v28;
    *(_QWORD *)(v0 + 608) = v51;
    v52 = *(_QWORD *)(v0 + 528);
    v53 = *(_QWORD *)(v0 + 416);
    v54 = *(_QWORD *)(v0 + 424);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 600))(v52, *(_QWORD *)(v0 + 576)+ ((*(unsigned __int8 *)(v0 + 704) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 704))+ *(_QWORD *)(v0 + 592) * v28, v53);
    v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56);
    *(_QWORD *)(v0 + 624) = v55;
    v55(v52, 0, 1, v53);
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
    *(_QWORD *)(v0 + 632) = v56;
    if (v56(v52, 1, v53) == 1)
      goto LABEL_14;
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
    v67 = *(_QWORD *)(v0 + 528);
    v68 = *(_QWORD *)(v0 + 488);
    v69 = *(_QWORD *)(v0 + 416);
    v71 = *(_QWORD *)(v0 + 400);
    v70 = *(_QWORD *)(v0 + 408);
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 424) + 32);
    *(_QWORD *)(v0 + 640) = v72;
    v72(v68, v67, v69);
    v73 = getuid();
    sub_100A06500(v73);
    v66(v70 + *(int *)(v71 + 20), v68, v69);
    return swift_task_switch(sub_100823C5C, *(_QWORD *)(v0 + 560), 0);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 392);
    v24 = *(_QWORD *)(v0 + 344);
    v25 = *(_QWORD *)(v0 + 352);
    v26 = *(_QWORD *)(v0 + 336);
    sub_1000126EC(v2, v23, type metadata accessor for ObservedAdvertisement);
    sub_10000F9B8(v23 + *(int *)(v1 + 52), v26, &qword_1010EF3F8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 336), &qword_1010EF3F8);
      v75 = 0;
      v27 = 3;
    }
    else
    {
      v29 = *(_QWORD *)(v0 + 360);
      v30 = *(_QWORD *)(v0 + 344);
      sub_1000126EC(*(_QWORD *)(v0 + 336), v29, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v31 = *(_BYTE *)(v29 + *(int *)(v30 + 20));
      v75 = *(_QWORD *)(v29 + *(int *)(v30 + 24));
      sub_1000126B0(v29, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v27 = v31;
    }
    v77 = v27;
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 640);
    v32 = *(_QWORD *)(v0 + 464);
    v33 = *(_QWORD *)(v0 + 416);
    v34 = *(_QWORD *)(v0 + 392);
    v35 = *(int **)(v0 + 320);
    v36 = *(_QWORD *)(v0 + 328);
    v38 = *(_QWORD *)(v0 + 304);
    v37 = *(_QWORD *)(v0 + 312);
    v80 = *(_QWORD *)(v0 + 376);
    v39 = *(_QWORD *)(v0 + 296);
    v89 = *(_QWORD *)(v0 + 240);
    v92 = *(_QWORD *)(v0 + 648);
    v87 = (*(_QWORD *)(v34 + 24) & 0x2000000000000000) == 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 600))(v32, *(_QWORD *)(v0 + 488), v33);
    v40 = *(_BYTE *)(v34 + 32);
    v83 = v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v37, v34 + *(int *)(v80 + 44), v39);
    v41 = v75;
    if (v77 == 3)
      v41 = 0;
    v81 = v41;
    v85(v36, v32, v33);
    *(_BYTE *)(v36 + v35[5]) = v40;
    v42 = v36 + v35[6];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v42, v37, v39);
    v43 = (uint64_t *)(v36 + v35[7]);
    *v43 = v77;
    v43[1] = v81;
    *(_BYTE *)(v36 + v35[8]) = v87;
    *(_QWORD *)(v36 + v35[9]) = 0;
    v44 = *(_BYTE *)(v34 + 9);
    v45 = *(_BYTE *)(v34 + 34);
    v46 = *(_BYTE *)(v34 + 35);
    type metadata accessor for Transaction(0);
    v47 = swift_task_alloc(64);
    *(_QWORD *)(v47 + 16) = v89;
    *(_QWORD *)(v47 + 24) = v36;
    *(_QWORD *)(v47 + 32) = v42;
    *(_QWORD *)(v47 + 40) = v36;
    *(_BYTE *)(v47 + 48) = v44;
    *(_BYTE *)(v47 + 49) = v83;
    *(_BYTE *)(v47 + 50) = v45;
    *(_BYTE *)(v47 + 51) = v46;
    static Transaction.named<A>(_:with:)("searchpartyd.beaconstore.updateType18Status", 43, 2, sub_10042540C, v47);
    *(_QWORD *)(v0 + 664) = v92;
    swift_task_dealloc(v47);
    sub_1000126B0(v36, type metadata accessor for BeaconStatus);
    sub_1000126B0(v34, type metadata accessor for ObservedAdvertisement);
    v48 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v49 = (_QWORD *)swift_task_alloc(v48);
    *(_QWORD *)(v0 + 672) = v49;
    *v49 = v0;
    v49[1] = sub_100824964;
    return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 520), sub_10087B038, *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 496));
  }
}

uint64_t sub_1008244C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uid_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v1 = *(_QWORD *)(v0 + 656);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 600))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 416));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 656);
    v6 = *(_QWORD *)(v0 + 480);
    v7 = *(_QWORD *)(v0 + 416);
    v8 = *(_QWORD *)(v0 + 424);
    v56 = *(_QWORD *)(v0 + 408);
    v58 = *(_QWORD *)(v0 + 488);
    v9 = swift_slowAlloc(32, -1);
    v10 = swift_slowAlloc(64, -1);
    v60 = v10;
    *(_DWORD *)v9 = 141558531;
    *(_QWORD *)(v9 + 4) = 1752392040;
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    *(_QWORD *)(v9 + 14) = sub_100016940(v12, v13, &v60);
    swift_bridgeObjectRelease();
    v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v14(v6, v7);
    *(_WORD *)(v9 + 22) = 2082;
    swift_getErrorValue(v5, v0 + 224, v0 + 144);
    v15 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v9 + 24) = sub_100016940(v15, v16, &v60);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error reading latest advertisement from ObservationService beacon: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v5);
    sub_1000126B0(v56, type metadata accessor for BeaconIdentifier);
    v14(v58, v7);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 656);
    v19 = *(_QWORD *)(v0 + 480);
    v18 = *(_QWORD *)(v0 + 488);
    v20 = *(_QWORD *)(v0 + 416);
    v21 = *(_QWORD *)(v0 + 424);
    v22 = *(_QWORD *)(v0 + 408);

    swift_errorRelease(v17);
    swift_errorRelease(v17);
    v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v23(v19, v20);
    swift_errorRelease(v17);
    sub_1000126B0(v22, type metadata accessor for BeaconIdentifier);
    v23(v18, v20);
  }
  v24 = *(_QWORD *)(v0 + 616) + 1;
  if (v24 == *(_QWORD *)(v0 + 584))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 624))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 416));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    v30 = *(_QWORD *)(v0 + 520);
    v31 = *(_QWORD *)(v0 + 504);
    v32 = *(_QWORD *)(v0 + 512);
    v34 = *(_QWORD *)(v0 + 480);
    v33 = *(_QWORD *)(v0 + 488);
    v36 = *(_QWORD *)(v0 + 464);
    v35 = *(_QWORD *)(v0 + 472);
    v38 = *(_QWORD *)(v0 + 448);
    v37 = *(_QWORD *)(v0 + 456);
    v48 = *(_QWORD *)(v0 + 440);
    v49 = *(_QWORD *)(v0 + 408);
    v50 = *(_QWORD *)(v0 + 392);
    v51 = *(_QWORD *)(v0 + 368);
    v52 = *(_QWORD *)(v0 + 360);
    v53 = *(_QWORD *)(v0 + 336);
    v54 = *(_QWORD *)(v0 + 328);
    v55 = *(_QWORD *)(v0 + 312);
    v57 = *(_QWORD *)(v0 + 288);
    v59 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 528));
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 616) = v24;
  *(_QWORD *)(v0 + 608) = 0;
  v25 = *(_QWORD *)(v0 + 528);
  v26 = *(_QWORD *)(v0 + 416);
  v27 = *(_QWORD *)(v0 + 424);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 600))(v25, *(_QWORD *)(v0 + 576)+ ((*(unsigned __int8 *)(v0 + 704) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 704))+ *(_QWORD *)(v0 + 592) * v24, v26);
  v28 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56);
  *(_QWORD *)(v0 + 624) = v28;
  v28(v25, 0, 1, v26);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  *(_QWORD *)(v0 + 632) = v29;
  if (v29(v25, 1, v26) == 1)
    goto LABEL_7;
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  v41 = *(_QWORD *)(v0 + 528);
  v42 = *(_QWORD *)(v0 + 488);
  v43 = *(_QWORD *)(v0 + 416);
  v45 = *(_QWORD *)(v0 + 400);
  v44 = *(_QWORD *)(v0 + 408);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 424) + 32);
  *(_QWORD *)(v0 + 640) = v46;
  v46(v42, v41, v43);
  v47 = getuid();
  sub_100A06500(v47);
  v40(v44 + *(int *)(v45 + 20), v42, v43);
  return swift_task_switch(sub_100823C5C, *(_QWORD *)(v0 + 560), 0);
}

uint64_t sub_100824964()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 672));
  swift_release();
  return swift_task_switch(sub_1008249C4, 0, 0);
}

uint64_t sub_1008249C4()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uid_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 632);
  v2 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 416);
  sub_10000F9B8(*(_QWORD *)(v0 + 520), v2, &qword_1010ED860);
  if (v1(v2, 1, v3) != 1)
  {
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 624);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
    v12 = *(_QWORD *)(v0 + 504);
    v13 = *(_QWORD *)(v0 + 456);
    v14 = *(_QWORD *)(v0 + 416);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 640))(v13, *(_QWORD *)(v0 + 512), v14);
    v11(v12, v13, v14);
    v10(v12, 0, 1, v14);
    v15 = (_QWORD *)swift_task_alloc(dword_10111BAEC);
    *(_QWORD *)(v0 + 680) = v15;
    *v15 = v0;
    v15[1] = sub_100824D60;
    return sub_100C65D6C(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 504));
  }
  v4 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 416);
  v7 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 408);
  sub_100004048(*(_QWORD *)(v0 + 520), &qword_1010ED860);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  sub_100004048(v4, &qword_1010ED860);
  v9 = *(_QWORD *)(v0 + 616) + 1;
  if (v9 == *(_QWORD *)(v0 + 584))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 624))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 416));
LABEL_6:
    swift_bridgeObjectRelease();
    swift_release();
    v23 = *(_QWORD *)(v0 + 520);
    v24 = *(_QWORD *)(v0 + 504);
    v25 = *(_QWORD *)(v0 + 512);
    v27 = *(_QWORD *)(v0 + 480);
    v26 = *(_QWORD *)(v0 + 488);
    v29 = *(_QWORD *)(v0 + 464);
    v28 = *(_QWORD *)(v0 + 472);
    v31 = *(_QWORD *)(v0 + 448);
    v30 = *(_QWORD *)(v0 + 456);
    v40 = *(_QWORD *)(v0 + 440);
    v41 = *(_QWORD *)(v0 + 408);
    v42 = *(_QWORD *)(v0 + 392);
    v43 = *(_QWORD *)(v0 + 368);
    v44 = *(_QWORD *)(v0 + 360);
    v45 = *(_QWORD *)(v0 + 336);
    v46 = *(_QWORD *)(v0 + 328);
    v47 = *(_QWORD *)(v0 + 312);
    v48 = *(_QWORD *)(v0 + 288);
    v49 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 528));
    swift_task_dealloc(v23);
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v17 = *(_QWORD *)(v0 + 664);
  *(_QWORD *)(v0 + 616) = v9;
  *(_QWORD *)(v0 + 608) = v17;
  v18 = *(_QWORD *)(v0 + 528);
  v19 = *(_QWORD *)(v0 + 416);
  v20 = *(_QWORD *)(v0 + 424);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 600))(v18, *(_QWORD *)(v0 + 576)+ ((*(unsigned __int8 *)(v0 + 704) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 704))+ *(_QWORD *)(v0 + 592) * v9, v19);
  v21 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56);
  *(_QWORD *)(v0 + 624) = v21;
  v21(v18, 0, 1, v19);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  *(_QWORD *)(v0 + 632) = v22;
  if (v22(v18, 1, v19) == 1)
    goto LABEL_6;
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 488);
  v35 = *(_QWORD *)(v0 + 416);
  v37 = *(_QWORD *)(v0 + 400);
  v36 = *(_QWORD *)(v0 + 408);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 424) + 32);
  *(_QWORD *)(v0 + 640) = v38;
  v38(v34, v33, v35);
  v39 = getuid();
  sub_100A06500(v39);
  v32(v36 + *(int *)(v37 + 20), v34, v35);
  return swift_task_switch(sub_100823C5C, *(_QWORD *)(v0 + 560), 0);
}

uint64_t sub_100824D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = (*v2)[85];
  v3[86] = a1;
  v3[87] = v1;
  swift_task_dealloc(v4);
  sub_100004048(v3[63], &qword_1010ED860);
  if (v1)
    v5 = sub_1008252F0;
  else
    v5 = sub_100824DE0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100824DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uid_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = *(_QWORD *)(v0 + 688);
  if (v1)
  {
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 640);
    v2 = *(unsigned __int8 *)(v0 + 704);
    v67 = *(_QWORD *)(v0 + 520);
    v3 = *(_QWORD *)(v0 + 448);
    v63 = *(_QWORD *)(v0 + 456);
    v59 = *(_QWORD *)(v0 + 488);
    v61 = *(_QWORD *)(v0 + 424);
    v4 = *(_QWORD *)(v0 + 416);
    v65 = *(_QWORD *)(v0 + 408);
    v48 = *(_QWORD *)(v0 + 288);
    v55 = *(_QWORD *)(v0 + 280);
    v57 = *(_QWORD *)(v0 + 272);
    v49 = *(_QWORD *)(v0 + 264);
    v5 = *(_QWORD *)(v0 + 248);
    v51 = v4;
    v53 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 240);
    v7 = (v2 + 24) & ~v2;
    v8 = (v7 + *(_QWORD *)(v0 + 432) + 7) & 0xFFFFFFFFFFFFFFF8;
    v9 = v2 | 7;
    (*(void (**)(uint64_t))(v0 + 600))(v3);
    v10 = swift_allocObject(&unk_101095078, v8 + 8, v9);
    *(_QWORD *)(v10 + 16) = v6;
    v47(v10 + v7, v3, v4);
    *(_QWORD *)(v10 + v8) = v1;
    *(_QWORD *)(v0 + 48) = sub_10087B044;
    *(_QWORD *)(v0 + 56) = v10;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_100016FB8;
    *(_QWORD *)(v0 + 40) = &unk_101095090;
    v11 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    swift_bridgeObjectRetain(v1);
    static DispatchQoS.unspecified.getter(v12);
    *(_QWORD *)(v0 + 232) = _swiftEmptyArrayStorage;
    v13 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v14 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v15 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 232, v14, v15, v5, v13);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v49, v11);
    _Block_release(v11);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v49, v5);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v48, v57);
    swift_release();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    v16(v63, v51);
    sub_100004048(v67, &qword_1010ED860);
    sub_1000126B0(v65, type metadata accessor for BeaconIdentifier);
    v16(v59, v51);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 520);
    v18 = *(_QWORD *)(v0 + 488);
    v19 = *(_QWORD *)(v0 + 416);
    v20 = *(_QWORD *)(v0 + 408);
    v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 424) + 8);
    v21(*(_QWORD *)(v0 + 456), v19);
    sub_100004048(v17, &qword_1010ED860);
    sub_1000126B0(v20, type metadata accessor for BeaconIdentifier);
    v21(v18, v19);
  }
  v22 = *(_QWORD *)(v0 + 616) + 1;
  if (v22 == *(_QWORD *)(v0 + 584))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 624))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 416));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    v29 = *(_QWORD *)(v0 + 520);
    v30 = *(_QWORD *)(v0 + 504);
    v31 = *(_QWORD *)(v0 + 512);
    v33 = *(_QWORD *)(v0 + 480);
    v32 = *(_QWORD *)(v0 + 488);
    v35 = *(_QWORD *)(v0 + 464);
    v34 = *(_QWORD *)(v0 + 472);
    v37 = *(_QWORD *)(v0 + 448);
    v36 = *(_QWORD *)(v0 + 456);
    v50 = *(_QWORD *)(v0 + 440);
    v52 = *(_QWORD *)(v0 + 408);
    v54 = *(_QWORD *)(v0 + 392);
    v56 = *(_QWORD *)(v0 + 368);
    v58 = *(_QWORD *)(v0 + 360);
    v60 = *(_QWORD *)(v0 + 336);
    v62 = *(_QWORD *)(v0 + 328);
    v64 = *(_QWORD *)(v0 + 312);
    v66 = *(_QWORD *)(v0 + 288);
    v68 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 528));
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v23 = *(_QWORD *)(v0 + 696);
  *(_QWORD *)(v0 + 616) = v22;
  *(_QWORD *)(v0 + 608) = v23;
  v24 = *(_QWORD *)(v0 + 528);
  v25 = *(_QWORD *)(v0 + 416);
  v26 = *(_QWORD *)(v0 + 424);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 600))(v24, *(_QWORD *)(v0 + 576)+ ((*(unsigned __int8 *)(v0 + 704) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 704))+ *(_QWORD *)(v0 + 592) * v22, v25);
  v27 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56);
  *(_QWORD *)(v0 + 624) = v27;
  v27(v24, 0, 1, v25);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  *(_QWORD *)(v0 + 632) = v28;
  if (v28(v24, 1, v25) == 1)
    goto LABEL_7;
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  v40 = *(_QWORD *)(v0 + 528);
  v41 = *(_QWORD *)(v0 + 488);
  v42 = *(_QWORD *)(v0 + 416);
  v44 = *(_QWORD *)(v0 + 400);
  v43 = *(_QWORD *)(v0 + 408);
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 424) + 32);
  *(_QWORD *)(v0 + 640) = v45;
  v45(v41, v40, v42);
  v46 = getuid();
  sub_100A06500(v46);
  v39(v43 + *(int *)(v44 + 20), v41, v42);
  return swift_task_switch(sub_100823C5C, *(_QWORD *)(v0 + 560), 0);
}

uint64_t sub_1008252F0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uid_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  v3 = *(_QWORD *)(v0 + 520);
  v4 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 416);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 424) + 8);
  v7(*(_QWORD *)(v0 + 456), v6);
  sub_100004048(v3, &qword_1010ED860);
  v2(v5, v4, v6);
  swift_errorRetain(v1);
  v8 = swift_errorRetain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v53 = *(_QWORD *)(v0 + 696);
    v11 = *(_QWORD *)(v0 + 440);
    v61 = *(_QWORD *)(v0 + 488);
    v63 = *(_QWORD *)(v0 + 416);
    v59 = *(_QWORD *)(v0 + 408);
    v12 = swift_slowAlloc(32, -1);
    v55 = (uint64_t *)swift_slowAlloc(8, -1);
    v57 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 200) = 1752392040;
    v65 = v57;
    *(_DWORD *)v12 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v63, v13);
    *(_QWORD *)(v0 + 208) = sub_100016940(v14, v15, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    v7(v11, v63);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain(v53);
    v16 = _swift_stdlib_bridgeErrorToNSError(v53);
    *(_QWORD *)(v0 + 216) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v12 + 24, v12 + 32);
    *v55 = v16;
    swift_errorRelease(v53);
    swift_errorRelease(v53);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Could not read any attach events from ObservationService for beacon: %{private,mask.hash}s, %{public}@.", (uint8_t *)v12, 0x20u);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v55, 1, v17);
    swift_slowDealloc(v55, -1, -1);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v53);
    sub_1000126B0(v59, type metadata accessor for BeaconIdentifier);
    v18 = v61;
    v19 = v63;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 696);
    v21 = *(_QWORD *)(v0 + 488);
    v22 = *(_QWORD *)(v0 + 440);
    v24 = *(_QWORD *)(v0 + 408);
    v23 = *(_QWORD *)(v0 + 416);

    swift_errorRelease(v20);
    swift_errorRelease(v20);
    v7(v22, v23);
    swift_errorRelease(v20);
    sub_1000126B0(v24, type metadata accessor for BeaconIdentifier);
    v18 = v21;
    v19 = v23;
  }
  v7(v18, v19);
  v25 = *(_QWORD *)(v0 + 616) + 1;
  if (v25 == *(_QWORD *)(v0 + 584))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 624))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 416));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    v31 = *(_QWORD *)(v0 + 520);
    v32 = *(_QWORD *)(v0 + 504);
    v33 = *(_QWORD *)(v0 + 512);
    v35 = *(_QWORD *)(v0 + 480);
    v34 = *(_QWORD *)(v0 + 488);
    v37 = *(_QWORD *)(v0 + 464);
    v36 = *(_QWORD *)(v0 + 472);
    v39 = *(_QWORD *)(v0 + 448);
    v38 = *(_QWORD *)(v0 + 456);
    v49 = *(_QWORD *)(v0 + 440);
    v50 = *(_QWORD *)(v0 + 408);
    v51 = *(_QWORD *)(v0 + 392);
    v52 = *(_QWORD *)(v0 + 368);
    v54 = *(_QWORD *)(v0 + 360);
    v56 = *(_QWORD *)(v0 + 336);
    v58 = *(_QWORD *)(v0 + 328);
    v60 = *(_QWORD *)(v0 + 312);
    v62 = *(_QWORD *)(v0 + 288);
    v64 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 528));
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 616) = v25;
  *(_QWORD *)(v0 + 608) = 0;
  v26 = *(_QWORD *)(v0 + 528);
  v27 = *(_QWORD *)(v0 + 416);
  v28 = *(_QWORD *)(v0 + 424);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 600))(v26, *(_QWORD *)(v0 + 576)+ ((*(unsigned __int8 *)(v0 + 704) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 704))+ *(_QWORD *)(v0 + 592) * v25, v27);
  v29 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56);
  *(_QWORD *)(v0 + 624) = v29;
  v29(v26, 0, 1, v27);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  *(_QWORD *)(v0 + 632) = v30;
  if (v30(v26, 1, v27) == 1)
    goto LABEL_7;
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  v42 = *(_QWORD *)(v0 + 528);
  v43 = *(_QWORD *)(v0 + 488);
  v44 = *(_QWORD *)(v0 + 416);
  v46 = *(_QWORD *)(v0 + 400);
  v45 = *(_QWORD *)(v0 + 408);
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 424) + 32);
  *(_QWORD *)(v0 + 640) = v47;
  v47(v43, v42, v44);
  v48 = getuid();
  sub_100A06500(v48);
  v41(v45 + *(int *)(v46 + 20), v43, v44);
  return swift_task_switch(sub_100823C5C, *(_QWORD *)(v0 + 560), 0);
}

uint64_t sub_100825850@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10080D208();
  v6 = v5[2];
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (v6)
  {
    sub_10005972C((uint64_t)v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
    v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, v9, 1, v7);
  swift_bridgeObjectRelease();
  type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v4, (uint64_t *)&unk_1010F47C0);
    v10 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    v12 = &v4[*(int *)(v7 + 20)];
    v13 = type metadata accessor for UUID(0);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(a1, v12, v13);
    sub_1000126B0((uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
  }
}

uint64_t sub_1008259D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  _UNKNOWN **v21;

  v4 = sub_10001A9A8(&qword_1010FD208);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10081EDA8(a1, (uint64_t)v13);
  v14 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010FF7F0);
    v19 = 0u;
    v20 = 0u;
    v21 = 0;
  }
  else
  {
    *((_QWORD *)&v20 + 1) = v14;
    v21 = &off_101070860;
    v15 = sub_100018F08(&v19);
    sub_1000126EC((uint64_t)v13, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if (*((_QWORD *)&v20 + 1))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return sub_10000F9FC(&v19, a2);
  }
  else
  {
    sub_10081FB3C((uint64_t)v10, (uint64_t)v6);
    v17 = type metadata accessor for SharedBeaconGroup(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v6, 1, v17) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      sub_100004048((uint64_t)v6, &qword_1010FD208);
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_QWORD *)(a2 + 32) = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v17;
      *(_QWORD *)(a2 + 32) = &off_101066440;
      v18 = sub_100018F08((_QWORD *)a2);
      sub_1000126EC((uint64_t)v6, (uint64_t)v18, type metadata accessor for SharedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    return sub_100004048((uint64_t)&v19, (uint64_t *)&unk_101107010);
  }
}

uint64_t sub_100825C2C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v3[8];
  v15 = (_QWORD *)swift_allocObject(&unk_1010961F8, 48, 7);
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = v6;
  aBlock[4] = sub_10087FCB8;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101096210;
  v16 = _Block_copy(aBlock);
  swift_retain();
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_100825E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  NSObject *v17;
  os_signpost_type_t v18;
  os_signpost_id_t v19;
  uint64_t v20;
  os_signpost_type_t v21;
  os_signpost_id_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v27 = a3;
  v28 = a4;
  v24 = a1;
  v25 = a2;
  v4 = type metadata accessor for OSSignpostID(0);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for OSSignposter(0);
  v11 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v14 = sub_10001A9E8(v7, (uint64_t)qword_1011B77E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v14, v7);
  v15 = OSSignposter.init(logger:)(v10);
  static OSSignpostID.exclusive.getter(v15);
  v16 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v16 = 0;
  v17 = OSSignposter.logHandle.getter();
  v18 = static os_signpost_type_t.begin.getter(v17);
  v19 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v19, "duplicateReport", "", v16, 2u);
  v20 = sub_10082605C(v24, v25, v27);
  v21 = static os_signpost_type_t.end.getter(v20);
  v22 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v21, v22, "duplicateReport", "", v16, 2u);

  swift_slowDealloc(v16, -1, -1);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v26);
}

uint64_t sub_10082605C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];
  _QWORD *v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000188D0();
  v12 = sub_1008783C0((uint64_t)v11);
  swift_bridgeObjectRelease();
  v13 = (_QWORD *)swift_allocObject(&unk_101096248, 40, 7);
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = v12;
  aBlock[4] = sub_10087FCD0;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101096260;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v24 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  return swift_release();
}

unint64_t sub_100826274(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v40 = a2;
  v41 = a4;
  v42 = a1;
  v43 = a3;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeyAlignmentRecord(0);
  v39 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v38 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for KeySyncRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v38 - v21;
  sub_10000F9B8(v43, (uint64_t)v11, &qword_1010F7AE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100004048((uint64_t)v11, &qword_1010F7AE0);
    v23 = v40;
    v24 = v40[3];
    v25 = v40[4];
    sub_10001AA44(v40, v24);
    (*(void (**)(uint64_t, uint64_t))(v25 + 184))(v24, v25);
    v26 = 1;
  }
  else
  {
    sub_1000126EC((uint64_t)v11, (uint64_t)v15, type metadata accessor for KeySyncRecord);
    if (*(_QWORD *)&v15[*(int *)(v12 + 20)] <= 1uLL)
      v26 = 1;
    else
      v26 = *(_QWORD *)&v15[*(int *)(v12 + 20)];
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v22, &v15[*(int *)(v12 + 28)], v16);
    sub_1000126B0((uint64_t)v15, type metadata accessor for KeySyncRecord);
    v23 = v40;
  }
  v27 = v39;
  sub_10000F9B8(v41, (uint64_t)v6, (uint64_t *)&unk_1010F47D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v6, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010F47D0);
    v28 = v42;
    if (v26 > 1)
      goto LABEL_24;
    v29 = v23[3];
    v30 = v23[4];
    sub_10001AA44(v23, v29);
    (*(void (**)(uint64_t, uint64_t))(v30 + 184))(v29, v30);
    v31 = 1;
  }
  else
  {
    v32 = (uint64_t)v6;
    v33 = v38;
    sub_1000126EC(v32, v38, type metadata accessor for KeyAlignmentRecord);
    if (*(_QWORD *)(v33 + *(int *)(v7 + 28)) <= 1uLL)
      v31 = 1;
    else
      v31 = *(_QWORD *)(v33 + *(int *)(v7 + 28));
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v33 + *(int *)(v7 + 32), v16);
    sub_1000126B0(v33, type metadata accessor for KeyAlignmentRecord);
    v28 = v42;
  }
  v34 = static Date.> infix(_:_:)(v22, v20);
  v35 = (v34 & 1) == 0;
  if ((v34 & 1) != 0)
    v36 = v20;
  else
    v36 = v22;
  if (v35)
    v22 = v20;
  if (v35)
    v26 = v31;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v36, v16);
LABEL_24:
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28, v22, v16);
  return v26;
}

id *sub_1008265CC()
{
  id *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_transactionManager;
  v2 = type metadata accessor for PressuredExitTransactionManager(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  sub_10001D8A8(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler + 8));
  sub_10001D8A8(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100826868()
{
  uint64_t v0;

  sub_1008265CC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10082688C()
{
  return type metadata accessor for BeaconStore(0);
}

uint64_t type metadata accessor for BeaconStore(uint64_t a1)
{
  return sub_10001B630(a1, qword_101109F50, (uint64_t)&nominal type descriptor for BeaconStore);
}

uint64_t sub_1008268A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[56];

  v4[0] = &unk_100E51518;
  v4[1] = &unk_100E51530;
  v4[2] = &unk_100E51530;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[7] = &unk_100E51530;
  v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[10] = &unk_100E51530;
  v4[11] = &unk_100E51530;
  v4[12] = &unk_100E51530;
  v4[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[17] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[18] = &unk_100E51530;
  v4[19] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[20] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[21] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[22] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[23] = &unk_100E51530;
  v4[24] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[25] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[26] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[27] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[28] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[29] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[30] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[31] = &unk_100E51530;
  v4[32] = &unk_100E51530;
  v4[33] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[34] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[35] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for PressuredExitTransactionManager(319);
  if (v3 <= 0x3F)
  {
    v4[36] = *(_QWORD *)(result - 8) + 64;
    v4[37] = &unk_100E51530;
    v4[38] = &unk_100E51548;
    v4[39] = &unk_100E51548;
    v4[40] = &unk_100E51530;
    v4[41] = &unk_100E51530;
    v4[42] = &unk_100E51530;
    v4[43] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[44] = &unk_100E51530;
    v4[45] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[46] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[47] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[48] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[49] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[50] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[51] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[52] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[53] = &unk_100E51530;
    v4[54] = &unk_100E51530;
    v4[55] = (char *)&value witness table for Builtin.BridgeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 56, v4, a1 + 80);
  }
  return result;
}

_QWORD *sub_1008269C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[8];
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v13 = a3[9];
    v14 = *(_QWORD *)((char *)a2 + v13);
    *(_QWORD *)((char *)a1 + v13) = v14;
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_100826AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 36)));
}

uint64_t sub_100826B14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[9];
  v13 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_100826BC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v11 = a3[9];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100826C88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100826D34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[9];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_100826DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100826DF4);
}

uint64_t sub_100826DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_100826EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100826EB4);
}

uint64_t sub_100826EB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = a2;
  return result;
}

uint64_t type metadata accessor for BeaconStatus(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110A8A0, (uint64_t)&nominal type descriptor for BeaconStatus);
}

uint64_t sub_100826F6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int8 + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_100E51570;
      v5[4] = &unk_100E51588;
      v5[5] = &unk_100E51530;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100827018()
{
  return sub_100006204(&qword_10110A8E8, type metadata accessor for BeaconStatus, (uint64_t)&unk_100E515A0);
}

uint64_t sub_100827044()
{
  return sub_1007FABFC();
}

uint64_t sub_100827064()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  type metadata accessor for Transaction(0);
  swift_retain(v1);
  static Transaction.asyncTask(name:block:)("firstLaunchSinceReboot-removeGhostBeacons", 41, 2, &unk_10110AA70, v1);
  return swift_release(v1);
}

uint64_t sub_1008270B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords) = 0;
  swift_bridgeObjectRelease(v2);
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords) = 0;
  swift_bridgeObjectRelease(v3);
  v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache, v12, 1, 0);
  v5 = *v4;
  *v4 = (uint64_t)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper);
  swift_beginAccess(v6 + 16, v11, 1, 0);
  v7 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v7);
  swift_beginAccess(v6 + 24, v10, 1, 0);
  v8 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 24) = &_swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_100827194()
{
  return swift_task_switch(sub_1008271A8, 0, 0);
}

uint64_t sub_1008271A8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBA0 + dword_1010EBBA0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBA4);
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_100827294;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100827294(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008272F0, 0, 0);
}

uint64_t sub_1008272F0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 128))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100712E90();
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10082733C()
{
  return swift_task_switch(sub_100827350, 0, 0);
}

uint64_t sub_100827350()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBB8 + dword_1010EBBB8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBBC);
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_10082743C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10082743C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100827498, 0, 0);
}

uint64_t sub_100827498()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1008274F0, *(_QWORD *)(v0 + 128), 0);
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008274F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void *, uint64_t);

  v1 = v0[16];
  v2 = swift_allocObject(&unk_1010945B0, 24, 7);
  v0[17] = v2;
  swift_weakInit(v2 + 16, v1);
  v3 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v6 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                               + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[18] = v4;
  *v4 = v0;
  v4[1] = sub_10082759C;
  return v6(&unk_10110A930, v2);
}

uint64_t sub_10082759C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 144));
  swift_release();
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = *(_QWORD *)(v2 + 128);
    v4 = sub_100827620;
  }
  else
  {
    swift_release();
    v4 = sub_10082765C;
    v3 = 0;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100827620()
{
  swift_release();
  return swift_task_switch(sub_10082765C, 0, 0);
}

uint64_t sub_10082765C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10082768C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;
  _QWORD *v29;

  v23 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v13 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v14 = swift_allocObject(&unk_101094BC8, 32, 7);
  v15 = v23;
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = v15;
  aBlock[4] = sub_1008788E8;
  v28 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101094BE0;
  v16 = _Block_copy(aBlock);
  swift_retain();
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v29 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v19, v20, v3, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v25);
  return swift_release(v28);
}

void sub_10082791C()
{
  __CFString *v0;

  v0 = (__CFString *)String._bridgeToObjectiveC()();
  sub_100878748(v0);
  Transaction.capture()();

}

void sub_10082796C(uint64_t a1)
{
  uint64_t v1;

  v1 = static os_log_type_t.default.getter(a1);
  if (qword_1010E9B50 != -1)
    swift_once(&qword_1010E9B50, sub_100308774);
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1011B6D20, "Posting SPPersistentConnectionChanged Darwin notification from BeaconStore", 74, 2, _swiftEmptyArrayStorage);
  sub_100878748(SPPersistentConnectionChangedNotification);
}

uint64_t sub_1008279F0()
{
  return swift_task_switch(sub_100827A04, 0, 0);
}

uint64_t sub_100827A04()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBA0 + dword_1010EBBA0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBA4);
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_100827AF0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100827AF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100827B4C, 0, 0);
}

uint64_t sub_100827B4C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 128))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100712EA4();
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100827B98()
{
  return swift_task_switch(sub_100827BAC, 0, 0);
}

uint64_t sub_100827BAC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBA0 + dword_1010EBBA0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBA4);
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_100827C98;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100827C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100882E50, 0, 0);
}

void sub_100827CF4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B75D0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Posting SPSeparationMonitoringSafeLocationsChanged Darwin notification from BeaconStore", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_100878748(SPSeparationMonitoringSafeLocationsChangedNotification);
}

uint64_t sub_100827DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  id v61;
  uint64_t v62;
  NSURL *v63;
  void *v64;
  void *v65;
  unsigned __int8 v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  id v102;

  v1 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v1);
  v3 = (char *)&v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for BeaconStoreFileRecord(0);
  v83 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v93 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for URL(0);
  *(_QWORD *)&v99 = *(_QWORD *)(v100 - 8);
  v5 = __chkstk_darwin(v100);
  v92 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v97 = (char *)&v81 - v7;
  v96 = type metadata accessor for BeaconEstimatedLocation(0);
  v82 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v86 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v91 = v3;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B450((uint64_t)v102);
  v14 = v13;
  v15 = swift_bridgeObjectRelease();
  Date.init(timeIntervalSinceNow:)(v15, -v14);
  v95 = *(_QWORD *)(v0 + 160);
  v16 = sub_10088AA90();
  v18 = v17;
  v19 = __chkstk_darwin(v16);
  *(&v81 - 2) = (uint64_t)v12;
  swift_bridgeObjectRetain(v19);
  v94 = v16;
  v20 = sub_10008B52C((uint64_t (*)(char *))sub_100878934, (unint64_t *)&v81 - 4, (uint64_t)v16);
  v101 = 0;
  LODWORD(v84) = static os_log_type_t.default.getter(v20);
  v21 = v12;
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v22 = qword_1011B7D38;
  v90 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v90, 192, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100E26E00;
  v24 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v85 = v21;
  v87 = v10;
  v25 = dispatch thunk of CustomStringConvertible.description.getter(v10, v24);
  v27 = v26;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  v28 = sub_10001AA00();
  *(_QWORD *)(v23 + 64) = v28;
  *(_QWORD *)(v23 + 32) = v25;
  *(_QWORD *)(v23 + 40) = v27;
  v29 = UUID.uuidString.getter(v28);
  *(_QWORD *)(v23 + 96) = &type metadata for String;
  *(_QWORD *)(v23 + 104) = v28;
  v88 = v18;
  v89 = v28;
  *(_QWORD *)(v23 + 72) = v29;
  *(_QWORD *)(v23 + 80) = v30;
  v31 = *(_QWORD *)(v20 + 16);
  v32 = *(_QWORD *)(v18 + 16);
  v33 = __OFADD__(v31, v32);
  v34 = v31 + v32;
  if (v33)
  {
    __break(1u);
LABEL_25:
    __break(1u);
  }
  v35 = v20;
  *(_QWORD *)(v23 + 136) = &type metadata for Int;
  *(_QWORD *)(v23 + 144) = &protocol witness table for Int;
  *(_QWORD *)(v23 + 112) = v34;
  v36 = v94[2];
  swift_bridgeObjectRelease();
  if (__OFADD__(v36, v32))
    goto LABEL_25;
  *(_QWORD *)(v23 + 176) = &type metadata for Int;
  *(_QWORD *)(v23 + 184) = &protocol witness table for Int;
  *(_QWORD *)(v23 + 152) = v36 + v32;
  os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v22, "prune BeaconEstimatedLocations predating, %@, identifier, %@, deleted, %i/%i", 76, 2, v23);
  swift_bridgeObjectRelease();
  v37 = *(_QWORD *)(v35 + 16);
  if (v37)
  {
    v38 = (*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
    v84 = v35;
    v39 = v35 + v38;
    v94 = *(_QWORD **)(v82 + 72);
    v40 = v100;
    do
    {
      sub_10005972C(v39, (uint64_t)v9, type metadata accessor for BeaconEstimatedLocation);
      v41 = *(int *)(v96 + 20);
      v42 = objc_autoreleasePoolPush();
      if (qword_1010EA060 != -1)
        swift_once(&qword_1010EA060, sub_100967AE8);
      v43 = &v9[v41];
      v44 = sub_10001A9E8(v40, (uint64_t)qword_1011B7970);
      v45 = UUID.uuidString.getter(v44);
      v46 = (uint64_t)v9;
      v47 = v97;
      URL.appendingPathComponent(_:)(v45, v48);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v42);
      __chkstk_darwin(v49);
      *(&v81 - 4) = v50;
      *(&v81 - 3) = (uint64_t)v43;
      *(&v81 - 2) = (uint64_t)v47;
      v51 = v101;
      OS_dispatch_queue.sync<A>(execute:)(sub_10044AB30, &v81 - 6, &type metadata for Bool);
      v101 = v51;
      v52 = v99;
      v53 = v47;
      v9 = (char *)v46;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v53, v40);
      sub_1000126B0(v46, type metadata accessor for BeaconEstimatedLocation);
      v39 += (uint64_t)v94;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v52 = v99;
  }
  v54 = *(_QWORD *)(v88 + 16);
  v55 = (uint64_t)v91;
  v56 = (uint64_t)v93;
  v57 = v100;
  if (v54)
  {
    v58 = v88 + ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80));
    v59 = *(_QWORD *)(v83 + 72);
    v99 = xmmword_100E22B00;
    v101 = v59;
    do
    {
      sub_10005972C(v58, v56, type metadata accessor for BeaconStoreFileRecord);
      sub_10000F9B8(v56 + *(int *)(v98 + 20), v55, &qword_1010FBA40);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v55, 1, v57) == 1)
      {
        sub_100004048(v55, &qword_1010FBA40);
      }
      else
      {
        v60 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v92, v55, v57);
        v61 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
        v62 = v52;
        URL._bridgeToObjectiveC()(v63);
        v65 = v64;
        v102 = 0;
        v66 = objc_msgSend(v61, "removeItemAtURL:error:", v64, &v102);

        v67 = v102;
        if ((v66 & 1) != 0)
        {
          v68 = v102;
        }
        else
        {
          v69 = v102;
          v70 = (void *)_convertNSErrorToError(_:)(v67);

          v72 = swift_willThrow(v71);
          v73 = static os_log_type_t.default.getter(v72);
          v74 = qword_1011B7D38;
          v75 = swift_allocObject(v90, 72, 7);
          *(_OWORD *)(v75 + 16) = v99;
          v102 = v70;
          swift_errorRetain(v70);
          v76 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
          v77 = String.init<A>(describing:)(&v102, v76);
          v78 = v89;
          *(_QWORD *)(v75 + 56) = &type metadata for String;
          *(_QWORD *)(v75 + 64) = v78;
          *(_QWORD *)(v75 + 32) = v77;
          *(_QWORD *)(v75 + 40) = v79;
          os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Could not delete tombstoned record %@", 37, 2, v75);
          v55 = (uint64_t)v91;
          swift_bridgeObjectRelease();
          swift_errorRelease(v70);
        }
        (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v57);
        v56 = (uint64_t)v93;
        v52 = v62;
        v59 = v101;
      }
      sub_1000126B0(v56, type metadata accessor for BeaconStoreFileRecord);
      v58 += v59;
      --v54;
    }
    while (v54);
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v85, v87);
}

uint64_t sub_1008285AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v40[2];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = type metadata accessor for URL(0);
  v49 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  __chkstk_darwin(v3);
  v46 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for LocationProvider(0);
  v40[0] = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v43 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B7A4(v51);
  v11 = v10;
  v12 = swift_bridgeObjectRelease();
  Date.init(timeIntervalSinceNow:)(v12, -v11);
  v40[1] = v1;
  v47 = *(_QWORD *)(v1 + 160);
  v13 = sub_10088B3D0(a1);
  v14 = __chkstk_darwin(v13);
  v40[-2] = v9;
  swift_bridgeObjectRetain(v14);
  v15 = sub_10008C198((uint64_t (*)(char *))sub_1008788F0, &v40[-4], (uint64_t)v13);
  LODWORD(v41) = static os_log_type_t.default.getter(v15);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v45 = qword_1011B7D38;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 192, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E26E00;
  v18 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v42 = v9;
  v44 = v7;
  v19 = dispatch thunk of CustomStringConvertible.description.getter(v7, v18);
  v21 = v20;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v22 = sub_10001AA00();
  *(_QWORD *)(v17 + 64) = v22;
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  v23 = UUID.uuidString.getter(v22);
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v22;
  *(_QWORD *)(v17 + 72) = v23;
  *(_QWORD *)(v17 + 80) = v24;
  v25 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v17 + 136) = &type metadata for Int;
  *(_QWORD *)(v17 + 144) = &protocol witness table for Int;
  *(_QWORD *)(v17 + 112) = v25;
  v26 = v13[2];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 176) = &type metadata for Int;
  *(_QWORD *)(v17 + 184) = &protocol witness table for Int;
  *(_QWORD *)(v17 + 152) = v26;
  os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v45, "prune LocationProviders predating, %@, identifier, %@, deleted, %i/%i", 69, 2, v17);
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(v15 + 16);
  if (v27)
  {
    v28 = v15 + ((*(unsigned __int8 *)(v40[0] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40[0] + 80));
    v45 = *(_QWORD *)(v40[0] + 72);
    v41 = v15;
    swift_bridgeObjectRetain(v15);
    v29 = v50;
    do
    {
      sub_10005972C(v28, (uint64_t)v6, type metadata accessor for LocationProvider);
      v30 = objc_autoreleasePoolPush();
      if (qword_1010EA600 != -1)
        swift_once(&qword_1010EA600, sub_100D83308);
      v31 = sub_10001A9E8(v29, (uint64_t)qword_1011B84D0);
      v32 = UUID.uuidString.getter(v31);
      v33 = (uint64_t)v6;
      v34 = v46;
      URL.appendingPathComponent(_:)(v32, v35);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v30);
      __chkstk_darwin(v36);
      v40[-4] = v37;
      v40[-3] = v33;
      v40[-2] = v34;
      OS_dispatch_queue.sync<A>(execute:)(sub_10044AB30, &v40[-6], &type metadata for Bool);
      v38 = v34;
      v6 = (char *)v33;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v29);
      sub_1000126B0(v33, type metadata accessor for LocationProvider);
      v28 += v45;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease_n(v41, 2);
    sub_1007EEF64(19);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
}

uint64_t sub_100828A34()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for UUID(0);
  sub_1000234D8(v0, qword_101109E40);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101109E40);
  return UUID.init()(v1);
}

void sub_100828A7C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t EnumCaseMultiPayload;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[3];

  v7 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)&v35[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v9, &qword_101108090);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v11 = (uint64_t *)(a4 + 16);
    v12 = *v9;
    v13 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v14 = qword_1011B7D38;
    v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v16 = swift_allocObject(v15, 112, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
    v17 = type metadata accessor for BeaconNamingRecord(0);
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    v21 = sub_10001AA00();
    *(_QWORD *)(v16 + 64) = v21;
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 40) = v20;
    v35[0] = v12;
    swift_errorRetain(v12);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v23 = String.init<A>(describing:)(v35, v22);
    *(_QWORD *)(v16 + 96) = &type metadata for String;
    *(_QWORD *)(v16 + 104) = v21;
    *(_QWORD *)(v16 + 72) = v23;
    *(_QWORD *)(v16 + 80) = v24;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Failed to save name record for beacon : %@", 42, 2, v16);
    swift_bridgeObjectRelease();
    swift_beginAccess(v11, v35, 1, 0);
    v25 = *v11;
    *v11 = v12;
    swift_errorRelease(v25);
  }
  else
  {
    v26 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v27 = qword_1011B7D38;
    v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
    v30 = type metadata accessor for BeaconNamingRecord(0);
    v31 = UUID.uuidString.getter(v30);
    v33 = v32;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_10001AA00();
    *(_QWORD *)(v29 + 32) = v31;
    *(_QWORD *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Name record created for beacon: %@", 34, 2, v29);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v9, &qword_101108090);
  }
  dispatch_group_leave(a2);
}

void sub_100828D2C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t EnumCaseMultiPayload;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];

  v6 = sub_10001A9A8(&qword_10110AAD0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v8, &qword_10110AAD0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v10 = (uint64_t *)(a3 + 16);
    v11 = *v8;
    v12 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v13 = qword_1011B7DF0;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
    v23[0] = v11;
    swift_errorRetain(v11);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v17 = String.init<A>(describing:)(v23, v16);
    v19 = v18;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_10001AA00();
    *(_QWORD *)(v15 + 32) = v17;
    *(_QWORD *)(v15 + 40) = v19;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Failed to save productInfoRecord: %@", 36, 2, v15);
    swift_bridgeObjectRelease();
    swift_beginAccess(v10, v23, 1, 0);
    v20 = *v10;
    *v10 = v11;
    swift_errorRelease(v20);
  }
  else
  {
    v21 = static os_log_type_t.info.getter(EnumCaseMultiPayload);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7DF0, "Successfully saved productInfoRecord", 36, 2, _swiftEmptyArrayStorage);
    sub_100004048((uint64_t)v8, &qword_10110AAD0);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_100828F4C(void (*a1)(uint64_t *, char *))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10008806C();
  v9 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v8, 0, 0);
  *v10 = 13;
  *v7 = v9;
  swift_storeEnumTagMultiPayload(v7, v5, 1);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 1, 1, v11);
  a1(v7, v4);
  sub_100004048((uint64_t)v4, &qword_1010ED860);
  return sub_100004048((uint64_t)v7, (uint64_t *)&unk_101108050);
}

uint64_t sub_100829084(void (*a1)(_QWORD *, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = a3;
  swift_storeEnumTagMultiPayload(v10, v11, 1);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  swift_errorRetain(a3);
  a1(v10, v7);
  sub_100004048((uint64_t)v7, &qword_1010ED860);
  return sub_100004048((uint64_t)v10, (uint64_t *)&unk_101108050);
}

void sub_1008291A0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t My;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  dispatch_group_t v57;
  _QWORD v58[6];

  v56 = a4;
  v57 = a2;
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v17, (uint64_t *)&unk_101108050);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v19 = (uint64_t *)(a7 + 16);
    v20 = *v17;
    v21 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v22 = qword_1011B7D38;
    v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
    v58[0] = v20;
    swift_errorRetain(v20);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v26 = String.init<A>(describing:)(v58, v25);
    v28 = v27;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_10001AA00();
    *(_QWORD *)(v24 + 32) = v26;
    *(_QWORD *)(v24 + 40) = v28;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Failed to save newRecord: %@", 28, 2, v24);
    swift_bridgeObjectRelease();
    swift_beginAccess(a7 + 16, v58, 1, 0);
    v29 = *v19;
    *v19 = v20;
    swift_errorRelease(v29);
  }
  else
  {
    v54 = a5;
    v55 = a3;
    v52 = a6;
    v30 = sub_1000126EC((uint64_t)v17, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    v31 = static os_log_type_t.default.getter(v30);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v32 = qword_1011B7D38;
    v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v34 = swift_allocObject(v33, 72, 7);
    v53 = xmmword_100E22B00;
    *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    v38 = sub_10001AA00();
    *(_QWORD *)(v34 + 64) = v38;
    *(_QWORD *)(v34 + 32) = v35;
    *(_QWORD *)(v34 + 40) = v37;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "New remote pairing completed: %@", 32, 2, v34);
    v39 = swift_bridgeObjectRelease();
    v40 = static os_log_type_t.default.getter(v39);
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    v41 = qword_1011B7DB8;
    v42 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v42 + 16) = v53;
    v43 = UUID.uuidString.getter(v42);
    *(_QWORD *)(v42 + 56) = &type metadata for String;
    *(_QWORD *)(v42 + 64) = v38;
    *(_QWORD *)(v42 + 32) = v43;
    *(_QWORD *)(v42 + 40) = v44;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "New OwnedBeaconRecord saved to cloudKit: %@", 43, 2, v42);
    swift_bridgeObjectRelease();
    v45 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v45);
    v47 = v55;
    v46 = v56;
    *(&v51 - 4) = v55;
    *(&v51 - 3) = v46;
    *(&v51 - 2) = v54;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-keyAlignmentRecordsSave", 53, 2, sub_10087D078, &v51 - 6);
    My = type metadata accessor for Feature.FindMy(0);
    v58[3] = My;
    v58[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v49 = sub_100018F08(v58);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v49, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)(v58);
    v50 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    if ((My & 1) != 0)
    {
      __chkstk_darwin(v50);
      *(&v51 - 2) = v52;
      *(&v51 - 1) = v47;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-ownedDeviceKeyRecordSave", 54, 2, sub_10087D094, &v51 - 4);
    }
    sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }
  dispatch_group_leave(v57);
}

uint64_t sub_100829648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a4;
  v6 = type metadata accessor for KeyAlignmentRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a3, (uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = v11 + v8;
  v13 = v10 | 7;
  v14 = swift_allocObject(&unk_101095848, v12, v10 | 7);
  *(_QWORD *)(v14 + 16) = a1;
  sub_1000126EC((uint64_t)v9, v14 + v11, type metadata accessor for KeyAlignmentRecord);
  swift_retain();
  sub_100805690(a3, 0, (void (*)(char *))sub_10087D20C, v14, &qword_1011082B0, type metadata accessor for KeyAlignmentRecord, (uint64_t)sub_100088F74, (uint64_t)sub_10087D34C, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_10080A098);
  swift_release(v14);
  sub_10005972C(a3, (uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
  v15 = swift_allocObject(&unk_101095870, v12, v13);
  *(_QWORD *)(v15 + 16) = a1;
  sub_1000126EC((uint64_t)v9, v15 + v11, type metadata accessor for KeyAlignmentRecord);
  swift_retain();
  sub_100CAA668(v18, (uint64_t)sub_10087D2F0, v15);
  return swift_release(v15);
}

uint64_t sub_1008297E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10001A9A8(&qword_1011082B0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v4, &qword_1011082B0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v6 = *v4;
    v7 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v8 = qword_1011B7D38;
    v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
    v25 = v6;
    swift_errorRetain(v6);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v12 = String.init<A>(describing:)(&v25, v11);
    v14 = v13;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = sub_10001AA00();
    *(_QWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 40) = v14;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Failed to save keyAlignmentRecord: %@", 37, 2, v10);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v6);
  }
  else
  {
    v16 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v17 = qword_1011B7D38;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
    v20 = type metadata accessor for KeyAlignmentRecord(0);
    v21 = UUID.uuidString.getter(v20);
    v23 = v22;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10001AA00();
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v23;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Successfully saved keyAlignmentRecord: %@", 41, 2, v19);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v4, &qword_1011082B0);
  }
}

uint64_t sub_100829A3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v4, &qword_1010FD0B0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v6 = *v4;
    v7 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v8 = qword_1011B7D38;
    v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
    v25 = v6;
    swift_errorRetain(v6);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v12 = String.init<A>(describing:)(&v25, v11);
    v14 = v13;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = sub_10001AA00();
    *(_QWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 40) = v14;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Failed to save keySyncRecord: %@", 32, 2, v10);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v6);
  }
  else
  {
    v16 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v17 = qword_1011B7D38;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
    v20 = type metadata accessor for KeyAlignmentRecord(0);
    v21 = UUID.uuidString.getter(v20);
    v23 = v22;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10001AA00();
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v23;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Successfully saved keySyncRecord: %@", 36, 2, v19);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v4, &qword_1010FD0B0);
  }
}

void sub_100829C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[3];
  _OWORD v43[3];
  __int128 v44;
  __int128 v45;
  char v46[8];

  v38[0] = a1;
  v38[1] = a3;
  v41 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v39 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v40 = (char *)v38 - v8;
  v9 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (_OWORD *)((char *)v38 - v14);
  v16 = sub_1007E95C4((uint64_t *)v43);
  if (v3)
  {
    v17 = v41;
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_1011B8520);
    v19 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v39, v17, v4);
    swift_errorRetain(v3);
    v20 = swift_errorRetain(v3);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      v24 = swift_slowAlloc(32, -1);
      v41 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v45 = v41;
      *(_DWORD *)v24 = 141558531;
      *(_QWORD *)&v44 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2081;
      v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v40) = v23;
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v4, v25);
      *(_QWORD *)&v44 = sub_100016940(v26, v27, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v4);
      *(_WORD *)(v24 + 22) = 2080;
      swift_getErrorValue(v3, v46, v42);
      v28 = Error.localizedDescription.getter(v42[1], v42[2]);
      *(_QWORD *)&v44 = sub_100016940(v28, v29, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v24 + 24, v24 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v40, "Failed to create OwnedDeviceKeyRecord for %{private,mask.hash}s error: %s.", (uint8_t *)v24, 0x20u);
      v30 = v41;
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v4);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
  }
  else
  {
    UUID.init()(v16);
    v31 = (char *)v15 + v9[6];
    v39 = 0;
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v32(v31, v41, v4);
    v44 = v43[1];
    v45 = v43[0];
    sub_100059DE8((uint64_t)&v45);
    sub_100059DE8((uint64_t)&v44);
    sub_10087BE2C((uint64_t *)v43);
    *v15 = xmmword_100E22FC0;
    *(_OWORD *)((char *)v15 + v9[7]) = v45;
    *(_OWORD *)((char *)v15 + v9[8]) = v44;
    v32(v40, v41, v4);
    sub_10005972C((uint64_t)v15, (uint64_t)v13, type metadata accessor for OwnedDeviceKeyRecord);
    v33 = *(unsigned __int8 *)(v5 + 80);
    v34 = (v33 + 24) & ~v33;
    v35 = *(unsigned __int8 *)(v10 + 80);
    v36 = (v6 + v35 + v34) & ~v35;
    v37 = swift_allocObject(&unk_101095820, v36 + v11, v33 | v35 | 7);
    *(_QWORD *)(v37 + 16) = v38[0];
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v37 + v34, v40, v4);
    sub_1000126EC((uint64_t)v13, v37 + v36, type metadata accessor for OwnedDeviceKeyRecord);
    swift_retain();
    sub_100805690((uint64_t)v15, 0, (void (*)(char *))sub_10087D19C, v37, &qword_10110AAC0, type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)sub_100088F8C, (uint64_t)sub_10087BF2C, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_1008094E4);
    swift_release(v37);
    sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedDeviceKeyRecord);
  }
}

void sub_10082A178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  _BYTE v59[8];
  uint64_t v60;
  uint64_t v61;

  v56 = a3;
  v57 = a4;
  v55 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v5 = __chkstk_darwin(v55);
  v54 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v52 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v52 - v14;
  v16 = sub_10001A9A8(&qword_10110AAC0);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v18, &qword_10110AAC0);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    v19 = *v18;
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B8520);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v56, v9);
    v21 = v54;
    sub_10005972C(v57, v54, type metadata accessor for OwnedDeviceKeyRecord);
    swift_errorRetain(v19);
    v22 = swift_errorRetain(v19);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = swift_slowAlloc(52, -1);
      v27 = swift_slowAlloc(96, -1);
      v57 = v27;
      *(_DWORD *)v26 = 141559043;
      v60 = 1752392040;
      v61 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v56) = v25;
      v29 = v21;
      v30 = v28;
      v53 = v23;
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v9, v28);
      v60 = sub_100016940(v31, v32, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      *(_WORD *)(v26 + 22) = 2160;
      v60 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 24, v26 + 32);
      *(_WORD *)(v26 + 32) = 2081;
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v9, v30);
      v60 = sub_100016940(v33, v34, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 34, v26 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v29, type metadata accessor for OwnedDeviceKeyRecord);
      *(_WORD *)(v26 + 42) = 2080;
      swift_getErrorValue(v19, v59, v58);
      v35 = Error.localizedDescription.getter(v58[1], v58[2]);
      v60 = sub_100016940(v35, v36, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 44, v26 + 52);
      swift_bridgeObjectRelease();
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      v37 = v53;
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v56, "Failed to save OwnedDeviceKeyRecord for %{private,mask.hash}s uuid: %{private,mask.hash}s error: %s.", (uint8_t *)v26, 0x34u);
      v38 = v57;
      swift_arrayDestroy(v57, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_errorRelease(v19);
    }
    else
    {
      swift_errorRelease(v19);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      sub_1000126B0(v21, type metadata accessor for OwnedDeviceKeyRecord);
      swift_errorRelease(v19);
      swift_errorRelease(v19);

    }
  }
  else
  {
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v39 = type metadata accessor for Logger(0);
    sub_10001A9E8(v39, (uint64_t)qword_1011B8520);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v56, v9);
    v40 = sub_10005972C(v57, (uint64_t)v8, type metadata accessor for OwnedDeviceKeyRecord);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    v43 = v42;
    if (os_log_type_enabled(v41, v42))
    {
      v44 = swift_slowAlloc(42, -1);
      v45 = swift_slowAlloc(64, -1);
      v57 = v45;
      *(_DWORD *)v44 = 141558787;
      v60 = 1752392040;
      v61 = v45;
      v54 = v10;
      LODWORD(v56) = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v44 + 4, v44 + 12);
      *(_WORD *)(v44 + 12) = 2081;
      v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v9, v46);
      v60 = sub_100016940(v47, v48, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v44 + 14, v44 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v15, v9);
      *(_WORD *)(v44 + 22) = 2160;
      v60 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v44 + 24, v44 + 32);
      *(_WORD *)(v44 + 32) = 2081;
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v9, v46);
      v60 = sub_100016940(v49, v50, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v44 + 34, v44 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedDeviceKeyRecord);
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v56, "Successfully saved OwnedDeviceKeyRecord for %{private,mask.hash}s uuid: %{private,mask.hash}s.", (uint8_t *)v44, 0x2Au);
      v51 = v57;
      swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedDeviceKeyRecord);
    }

    sub_100004048((uint64_t)v18, &qword_10110AAC0);
  }
}

uint64_t sub_10082A878(uint64_t a1, void (*a2)(_QWORD *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[24];

  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v12);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(a1 + 16, v21, 0, 0);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    *v14 = v15;
    swift_storeEnumTagMultiPayload(v14, v12, 1);
    v16 = type metadata accessor for UUID(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v11, a4, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v16);
    swift_errorRetain(v15);
    swift_errorRetain(v15);
    a2(v14, v11);
    swift_errorRelease(v15);
  }
  else
  {
    sub_10005972C(a5, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    swift_storeEnumTagMultiPayload(v14, v12, 0);
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v11, 1, 1, v18);
    a2(v14, v11);
  }
  sub_100004048((uint64_t)v11, &qword_1010ED860);
  return sub_100004048((uint64_t)v14, (uint64_t *)&unk_101108050);
}

uint64_t sub_10082AA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[16] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v6);
  v3[18] = swift_task_alloc(v6);
  return swift_task_switch(sub_10082AAB4, 0, 0);
}

uint64_t sub_10082AAB4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uid_t v7;
  _QWORD *v8;

  v1 = v0[13];
  v2 = (_QWORD *)v0[14];
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v4 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10085DEF0, v1, v3, &type metadata for () + 1, v4);
  v0[19] = v0[11];
  v6 = v2[3];
  v5 = v2[4];
  sub_10001AA44(v2, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 32))(v6);
  v7 = getuid();
  sub_100A06500(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1010FCEDC);
  v0[20] = v8;
  *v8 = v0;
  v8[1] = sub_10082ABBC;
  return sub_100478B94((uint64_t)(v0 + 2), v0[18], v0[17]);
}

uint64_t sub_10082ABBC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10082ACA0;
  }
  else
  {
    v5 = v2[18];
    v7 = v2[16];
    v6 = v2[17];
    v8 = v2[15];
    swift_release();
    v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v9(v6, v8);
    v9(v5, v8);
    v4 = sub_10082AC54;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10082AC54()
{
  uint64_t v0;
  uint64_t v1;

  sub_100005CF0(v0 + 16, *(_QWORD *)(v0 + 96), (uint64_t *)&unk_1010F4830);
  v1 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10082ACA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_errorRelease(v1);
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v3, v5);
  v7(v2, v5);
  *(_QWORD *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v8 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10082AD34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v4 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v36 - v15;
  sub_10080B950(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F47C0);
LABEL_6:
    v21 = v36;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B77E8);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 16))(v6, a1, v4);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(32, -1);
      v37 = a2;
      v28 = v27;
      v40 = v27;
      *(_DWORD *)v26 = 141558275;
      v38 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v4, v29);
      v38 = sub_100016940(v30, v31, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Could not compute productUUID from nil productData of beacon %{private,mask.hash}s.", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
    }

    return UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  v37 = a2;
  sub_1000126EC((uint64_t)v9, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  v17 = sub_1009A1DCC();
  v19 = v18;
  sub_10005972C((uint64_t)v16, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  if (v19 >> 60 == 15)
  {
    v17 = sub_1001EE37C(*(_QWORD *)&v14[*(int *)(v10 + 64)], *(_QWORD *)&v14[*(int *)(v10 + 68)]);
    v19 = v20;
    sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    if (v19 >> 60 == 15)
    {
      sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
      a2 = v37;
      goto LABEL_6;
    }
  }
  else
  {
    sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }
  if (qword_1010E9A18 != -1)
    swift_once(&qword_1010E9A18, sub_1001EE150);
  v40 = qword_1010F2B08;
  v41 = qword_1010F2B10;
  sub_10001BBBC(qword_1010F2B08, qword_1010F2B10);
  Data.append(_:)(v17, v19);
  v33 = v40;
  v34 = v41;
  v38 = v40;
  v39 = v41;
  v35 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v35);
  sub_10001BC14(v33, v34);
  sub_10001BC14(v17, v19);
  return sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_10082B1AC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(_QWORD, _QWORD, _QWORD);
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  void (*v116)(_QWORD, _QWORD);
  uint64_t v117;
  int v118;
  char *v119;
  uint64_t v120;
  _BYTE *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  void (*v132)(char *, uint64_t, _QWORD *);
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(_QWORD, _QWORD, _QWORD);
  uint64_t v147;
  uint64_t v148;
  void (*v149)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  void (*v165)(_BYTE *, uint64_t, uint64_t);
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  char *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  os_log_type_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  void (*v183)(char *, _QWORD *);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char v200;
  unint64_t v201;
  char *v202;
  uint64_t v203;
  double v204;
  void (*v205)(uint64_t, void (*)(char *, uint64_t, _QWORD *));
  uint64_t v206;
  char *v207;
  _QWORD *v208;
  char *v209;
  os_log_t v210;
  uint64_t v211;
  NSObject *v212;
  os_log_type_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  void (*v219)(char *, _QWORD *);
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  _QWORD *v223;
  os_log_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  char *v228;
  uint64_t v229;
  NSObject *v230;
  os_log_type_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  os_log_t v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(uint64_t, uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD));
  char *v256;
  uint64_t v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void (*v262)(_BYTE *, uint64_t, uint64_t);
  uint64_t v263;
  _BYTE *v264;
  uint64_t v265;
  NSObject *v266;
  os_log_type_t v267;
  int v268;
  uint64_t v269;
  _BYTE *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  void (*v274)(char *, _QWORD *);
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _BYTE *v278;
  _BYTE *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  os_log_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v292;
  void (*v293)(_QWORD, _QWORD, _QWORD);
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  Swift::String v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  NSObject *v321;
  _QWORD *v322;
  os_log_type_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void (*v334)(os_log_t, void (*)(char *, uint64_t, _QWORD *));
  void (*v335)(uint64_t, uint64_t, uint64_t);
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  _BYTE *v347;
  _BYTE *v348;
  char *v349;
  uint64_t v350;
  _BYTE *v351;
  char *v352;
  uint64_t v353;
  char *v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  _BYTE *v368;
  _BYTE *v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  _QWORD *v377;
  char *v378;
  char *v379;
  void (*v380)(_QWORD, _QWORD);
  uint64_t v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  char *v388;
  void (*v389)(_QWORD, _QWORD, _QWORD);
  void (*v390)(_QWORD, _QWORD, _QWORD);
  uint64_t v391;
  char *v392;
  os_log_t v393;
  char *v394;
  char *v395;
  char *v396;
  uint64_t v397;
  _QWORD *v398;
  _QWORD *v399;
  uint64_t v400;
  char v401[8];
  __int128 v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  uint64_t v406;
  uint64_t v407;

  v5 = v4;
  v360 = a4;
  v386 = a3;
  v383 = a1;
  v367 = sub_10001A9A8(&qword_1010EF160);
  __chkstk_darwin(v367);
  v366 = (char *)&v335 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = __chkstk_darwin(v8);
  v378 = (char *)&v335 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v346 = (char *)&v335 - v11;
  v12 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  v13 = __chkstk_darwin(v12);
  v363 = (uint64_t)&v335 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v388 = (char *)&v335 - v15;
  v381 = sub_10001A9A8(&qword_1010EF168);
  v365 = *(_QWORD *)(v381 - 8);
  v16 = __chkstk_darwin(v381);
  v353 = (uint64_t)&v335 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v357 = (uint64_t)&v335 - v18;
  v362 = type metadata accessor for BeaconStatus(0);
  v19 = __chkstk_darwin(v362);
  v342 = (char *)&v335 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v355 = (uint64_t)&v335 - v22;
  __chkstk_darwin(v21);
  v358 = (uint64_t)&v335 - v23;
  v24 = sub_10001A9A8(&qword_1010EF660);
  v25 = __chkstk_darwin(v24);
  v376 = (uint64_t)&v335 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v380 = (void (*)(_QWORD, _QWORD))((char *)&v335 - v27);
  v399 = (_QWORD *)type metadata accessor for BeaconObservation(0);
  v385 = *(v399 - 1);
  v28 = __chkstk_darwin(v399);
  v30 = (char *)&v335 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v335 - v32;
  v34 = __chkstk_darwin(v31);
  v361 = (uint64_t)&v335 - v35;
  __chkstk_darwin(v34);
  v375 = (char *)&v335 - v36;
  v37 = type metadata accessor for Date(0);
  v391 = *(_QWORD *)(v37 - 8);
  v38 = __chkstk_darwin(v37);
  v370 = (char *)&v335 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v371 = (char *)&v335 - v41;
  v42 = __chkstk_darwin(v40);
  v359 = (char *)&v335 - v43;
  v44 = __chkstk_darwin(v42);
  v387 = (char *)&v335 - v45;
  v46 = __chkstk_darwin(v44);
  v393 = (os_log_t)((char *)&v335 - v47);
  v48 = __chkstk_darwin(v46);
  v394 = (char *)&v335 - v49;
  v50 = __chkstk_darwin(v48);
  v395 = (char *)&v335 - v51;
  __chkstk_darwin(v50);
  v377 = (void (**)(uint64_t, uint64_t, _QWORD))((char *)&v335 - v52);
  v53 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v54 = __chkstk_darwin(v53);
  v373 = (char *)&v335 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  v352 = (char *)&v335 - v56;
  v57 = sub_10001A9A8(&qword_1011003D0);
  __chkstk_darwin(v57);
  v59 = (char *)&v335 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v384 = sub_10001A9A8(&qword_1011003D8);
  v60 = *(_QWORD *)(v384 - 8);
  v61 = __chkstk_darwin(v384);
  v351 = (char *)&v335 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __chkstk_darwin(v61);
  v348 = (char *)&v335 - v64;
  v65 = __chkstk_darwin(v63);
  v347 = (char *)&v335 - v66;
  v67 = __chkstk_darwin(v65);
  v368 = (char *)&v335 - v68;
  __chkstk_darwin(v67);
  v369 = (char *)&v335 - v69;
  v70 = type metadata accessor for UUID(0);
  v71 = __chkstk_darwin(v70);
  v343 = (char *)&v335 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __chkstk_darwin(v71);
  v340 = (char *)&v335 - v74;
  v75 = __chkstk_darwin(v73);
  v341 = (char *)&v335 - v76;
  v77 = __chkstk_darwin(v75);
  v344 = (char *)&v335 - v78;
  v79 = __chkstk_darwin(v77);
  v372 = (char *)&v335 - v80;
  v81 = __chkstk_darwin(v79);
  v379 = (char *)&v335 - v82;
  v83 = __chkstk_darwin(v81);
  v345 = (char *)&v335 - v84;
  v85 = __chkstk_darwin(v83);
  v382 = (char *)&v335 - v86;
  v87 = __chkstk_darwin(v85);
  v356 = (char *)&v335 - v88;
  v89 = __chkstk_darwin(v87);
  v354 = (char *)&v335 - v90;
  v91 = __chkstk_darwin(v89);
  v349 = (char *)&v335 - v92;
  __chkstk_darwin(v91);
  v94 = (char *)&v335 - v93;
  v397 = v95;
  v96 = *(char **)(v95 + 16);
  v350 = a2;
  v398 = v97;
  v392 = v96;
  ((void (*)(char *, uint64_t))v96)((char *)&v335 - v93, a2);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v374 = sub_100C1AE88((uint64_t)v405);
  swift_bridgeObjectRelease();
  v98._object = (void *)0x8000000100EE7340;
  v98._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v98);
  v99 = *(_QWORD *)(v5 + 288);
  __chkstk_darwin(v100);
  v390 = v101;
  *(&v335 - 2) = v101;
  *(&v335 - 1) = (void (*)(uint64_t, uint64_t, _QWORD))v94;
  v396 = v94;
  v102 = sub_10001A9A8(&qword_10110A8F8);
  v364 = v99;
  OS_dispatch_queue.sync<A>(execute:)(sub_10085DF1C, &v335 - 4, v102);
  v103 = v405;
  v389 = (void (*)(_QWORD, _QWORD, _QWORD))v37;
  if (v405)
  {
    v104 = v384;
    v105 = (uint64_t)&v59[*(int *)(v384 + 48)];
    v106 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
    v107 = sub_1007F4054(v105, v105 + *(int *)(v106 + 48), (uint64_t)v103);
    v108 = v399;
    LOBYTE(v105) = v107;
    swift_bridgeObjectRelease();
    v139 = v369;
    v140 = v60;
    v141 = (uint64_t)&v369[*(int *)(v104 + 48)];
    v338 = v141 + *(int *)(v106 + 48);
    *v59 = v105 & 1;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v59, 0, 1, v104);
    v142 = (uint64_t)&v59[*(int *)(v104 + 48)];
    v339 = *v59;
    *v139 = v339;
    v143 = v142 + *(int *)(v106 + 48);
    sub_1000126EC(v142, v141, type metadata accessor for DeviceEvent);
    v144 = v104;
    v145 = v391;
    v146 = v389;
    v335 = *(void (**)(uint64_t, uint64_t, _QWORD))(v391 + 32);
    v335(v338, v143, v389);
    v147 = (uint64_t)&v368[*(int *)(v144 + 48)];
    *v368 = v339;
    v337 = v106;
    v148 = v147 + *(int *)(v106 + 48);
    v336 = v141;
    sub_10005972C(v141, v147, type metadata accessor for DeviceEvent);
    v149 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v145 + 16);
    v149((_BYTE *)v148, v338, (uint64_t)v146);
    v150 = *(_QWORD **)(v145 + 8);
    v151 = v148;
    v152 = (uint64_t)v146;
    ((void (*)(uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))v150)(v151, v146);
    sub_1000126B0(v147, type metadata accessor for DeviceEvent);
    v109 = (uint64_t)v388;
    if (v339 == 1)
    {
      v153 = (uint64_t)&v368[*(int *)(v384 + 48)];
      *v368 = 1;
      v154 = v152;
      v155 = v337;
      v156 = v153 + *(int *)(v337 + 48);
      v157 = v336;
      sub_10005972C(v336, v153, type metadata accessor for DeviceEvent);
      v158 = v338;
      v149((_BYTE *)v156, v338, v154);
      LODWORD(v395) = *(unsigned __int8 *)(v153 + 9);
      sub_1000126B0(v153, type metadata accessor for DeviceEvent);
      v399 = v150;
      ((void (*)(uint64_t, uint64_t))v150)(v156, v154);
      v159 = v384;
      v160 = (uint64_t)&v347[*(int *)(v384 + 48)];
      *v347 = 1;
      v161 = *(int *)(v155 + 48);
      v162 = v154;
      v163 = (_BYTE *)(v160 + v161);
      sub_10005972C(v157, v160, type metadata accessor for DeviceEvent);
      v149(v163, v158, v162);
      v164 = v159;
      v165 = v149;
      if (*(_BYTE *)(v160 + 9) == 5)
      {
        OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
        v166 = sub_100C1AE9C((uint64_t)v405);
        swift_bridgeObjectRelease();
        v167 = (double)v166;
        type metadata accessor for DeviceEvent(0);
        v168 = (uint64_t)v352;
        Date.addingTimeInterval(_:)(v167);
        v169 = 0;
        v170 = v398;
      }
      else
      {
        v169 = 1;
        v170 = v398;
        v168 = (uint64_t)v352;
      }
      v256 = v349;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v391 + 56))(v168, v169, 1, v162);
      sub_1000126B0(v160, type metadata accessor for DeviceEvent);
      ((void (*)(_BYTE *, uint64_t))v399)(v163, v162);
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v257 = type metadata accessor for Logger(0);
      sub_10001A9E8(v257, (uint64_t)qword_1011B77E8);
      ((void (*)(char *, char *, _QWORD *))v392)(v256, v396, v170);
      v258 = v348;
      v259 = (uint64_t)&v348[*(int *)(v159 + 48)];
      *v348 = v339;
      v260 = v259 + *(int *)(v337 + 48);
      sub_10005972C(v336, v259, type metadata accessor for DeviceEvent);
      v261 = v260;
      v262 = v165;
      v165((_BYTE *)v261, v158, v162);
      v263 = (uint64_t)v258;
      v264 = v351;
      v265 = sub_100005CF0(v263, (uint64_t)v351, &qword_1011003D8);
      v266 = Logger.logObject.getter(v265);
      v267 = static os_log_type_t.default.getter(v266);
      v268 = v267;
      if (os_log_type_enabled(v266, v267))
      {
        v269 = swift_slowAlloc(38, -1);
        v398 = (_QWORD *)swift_slowAlloc(64, -1);
        v405 = v398;
        *(_DWORD *)v269 = 141558787;
        *(_QWORD *)&v402 = 1752392040;
        v392 = (char *)&v402 + 8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v269 + 4, v269 + 12);
        *(_WORD *)(v269 + 12) = 2081;
        v270 = v368;
        LODWORD(v394) = v268;
        v271 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v393 = v266;
        v272 = dispatch thunk of CustomStringConvertible.description.getter(v170, v271);
        *(_QWORD *)&v402 = sub_100016940(v272, v273, (uint64_t *)&v405);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v269 + 14, v269 + 22);
        swift_bridgeObjectRelease();
        v274 = *(void (**)(char *, _QWORD *))(v397 + 8);
        v274(v256, v170);
        *(_WORD *)(v269 + 22) = 1026;
        LODWORD(v402) = (_DWORD)v395;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 4, v269 + 24, v269 + 28);
        *(_WORD *)(v269 + 28) = 2082;
        v397 = v269 + 30;
        v275 = *(int *)(v164 + 48);
        v276 = (uint64_t)&v270[v275];
        v277 = *(int *)(v337 + 48);
        v278 = &v270[v275 + v277];
        v279 = v351;
        v280 = (uint64_t)&v351[v275];
        *v270 = *v351;
        v281 = v280 + v277;
        sub_10005972C(v280, v276, type metadata accessor for DeviceEvent);
        v262(v278, v281, v162);
        v282 = (uint64_t)v377;
        v335((uint64_t)v377, (uint64_t)v278, v162);
        sub_1000126B0(v276, type metadata accessor for DeviceEvent);
        v283 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v284 = dispatch thunk of CustomStringConvertible.description.getter(v162, v283);
        v286 = v285;
        ((void (*)(uint64_t, uint64_t))v399)(v282, v162);
        *(_QWORD *)&v402 = sub_100016940(v284, v286, (uint64_t *)&v405);
        v287 = v396;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, v392, v397, v269 + 38);
        swift_bridgeObjectRelease();
        sub_100004048((uint64_t)v279, &qword_1011003D8);
        v288 = v393;
        _os_log_impl((void *)&_mh_execute_header, v393, (os_log_type_t)v394, "Beacon %{private,mask.hash}s is connected (via %{public}u since: %{public}s.", (uint8_t *)v269, 0x26u);
        v289 = v398;
        swift_arrayDestroy(v398, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v289, -1, -1);
        v290 = v269;
        v168 = (uint64_t)v352;
        swift_slowDealloc(v290, -1, -1);

        sub_100004048((uint64_t)v369, &qword_1011003D8);
      }
      else
      {

        sub_100004048((uint64_t)v264, &qword_1011003D8);
        v274 = *(void (**)(char *, _QWORD *))(v397 + 8);
        v274(v256, v170);
        sub_100004048((uint64_t)v369, &qword_1011003D8);
        v287 = v396;
      }
      v274(v287, v170);
      sub_100005CF0(v168, v383, (uint64_t *)&unk_1010EA690);
      return 1;
    }
    v110 = &qword_1011003D8;
    v111 = (uint64_t)v369;
  }
  else
  {
    v152 = v37;
    v109 = (uint64_t)v388;
    v108 = v399;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v59, 1, 1, v384);
    v110 = &qword_1011003D0;
    v111 = (uint64_t)v59;
  }
  sub_100004048(v111, v110);
  v112 = (uint64_t)v396;
  v113 = v386;
  swift_bridgeObjectRetain(v386);
  v115 = sub_10085B9A4(v114, (uint64_t)&off_101047FE8);
  swift_bridgeObjectRelease();
  v116 = v380;
  sub_100A797E8((uint64_t)v115, (uint64_t)v380);
  v117 = (uint64_t)v116;
  swift_bridgeObjectRelease();
  v384 = *(_QWORD *)(v385 + 48);
  v118 = ((uint64_t (*)(void (*)(_QWORD, _QWORD), uint64_t, _QWORD *))v384)(v116, 1, v108);
  v119 = v394;
  if (v118 == 1)
  {
    sub_100004048(v117, &qword_1010EF660);
    goto LABEL_10;
  }
  v120 = v117;
  v121 = v375;
  sub_1000126EC(v120, (uint64_t)v375, type metadata accessor for BeaconObservation);
  if (v121[*((int *)v108 + 6)] == 35)
  {
    sub_1000126B0((uint64_t)v121, type metadata accessor for BeaconObservation);
LABEL_10:
    v122 = _swiftEmptyArrayStorage;
    v405 = _swiftEmptyArrayStorage;
    v123 = *(_QWORD *)(v113 + 16);
    swift_bridgeObjectRetain(v113);
    v369 = 0;
    if (v123)
    {
      v124 = v113;
      v125 = (*(unsigned __int8 *)(v385 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v385 + 80);
      v126 = *(_QWORD *)(v385 + 72);
      v127 = v124 + v125;
      do
      {
        sub_10005972C(v127, (uint64_t)v33, type metadata accessor for BeaconObservation);
        if (v33[*((int *)v108 + 6)] == 36)
        {
          sub_1000126EC((uint64_t)v33, (uint64_t)v30, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(v122) & 1) == 0)
            sub_10009AAC8(0, v122[2] + 1, 1);
          v122 = v405;
          v129 = v405[2];
          v128 = v405[3];
          if (v129 >= v128 >> 1)
          {
            sub_10009AAC8(v128 > 1, v129 + 1, 1);
            v122 = v405;
          }
          v122[2] = v129 + 1;
          sub_1000126EC((uint64_t)v30, (uint64_t)v122 + v125 + v129 * v126, type metadata accessor for BeaconObservation);
          v108 = v399;
        }
        else
        {
          sub_1000126B0((uint64_t)v33, type metadata accessor for BeaconObservation);
        }
        v127 += v126;
        --v123;
      }
      while (v123);
      v122 = v405;
      v112 = (uint64_t)v396;
      v119 = v394;
      v109 = (uint64_t)v388;
    }
    swift_bridgeObjectRelease();
    v130 = v376;
    sub_100A797E8((uint64_t)v122, v376);
    swift_release(v122);
    v131 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD *))v384)(v130, 1, v108);
    v132 = (void (*)(char *, uint64_t, _QWORD *))v389;
    v133 = v391;
    v134 = v382;
    if (v131 == 1)
    {
      sub_100004048(v130, &qword_1010EF660);
      v135 = *(char **)(v133 + 56);
      v136 = (uint64_t)v373;
      v137 = ((uint64_t (*)(char *, uint64_t, uint64_t, void (*)(char *, uint64_t, _QWORD *)))v135)(v373, 1, 1, v132);
    }
    else
    {
      v136 = (uint64_t)v373;
      (*(void (**)(char *, uint64_t, _QWORD))(v391 + 16))(v373, v130 + *((int *)v108 + 5), v389);
      sub_1000126B0(v130, type metadata accessor for BeaconObservation);
      v135 = *(char **)(v133 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, void (*)(char *, uint64_t, _QWORD *)))v135)(v136, 0, 1, v132);
      v137 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v133 + 48))(v136, 1, v132);
      if ((_DWORD)v137 != 1)
      {
        v388 = v135;
        (*(void (**)(char *, uint64_t, _QWORD))(v133 + 32))(v395, v136, v132);
        v138 = v374;
LABEL_33:
        sub_1008202EC(v112, v109);
        v189 = sub_10001A9A8(&qword_101102F80);
        v386 = *(_QWORD *)(v189 - 8);
        v385 = *(_QWORD *)(v386 + 48);
        v190 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v385)(v109, 1, v189);
        v384 = v189;
        if (v190 != 1)
        {
          v192 = *(_BYTE *)(v109 + *(int *)(v189 + 48));
          v193 = v381;
          v194 = v109;
          v195 = *(int *)(v381 + 48);
          v196 = v357;
          sub_1000126EC(v194, v357, type metadata accessor for BeaconStatus);
          *(_BYTE *)(v196 + v195) = v192;
          v197 = *(unsigned __int8 *)(v196 + *(int *)(v193 + 48));
          sub_1000126EC(v196, v358, type metadata accessor for BeaconStatus);
          __asm { BR              X9 }
        }
        v191 = sub_100004048(v109, (uint64_t *)&unk_101102F70);
        static Date.distantPast.getter(v191);
        v198 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v199 = v395;
        v200 = dispatch thunk of static Comparable.>= infix(_:_:)(v119, v395, v132, v198);
        v201 = *(_QWORD *)(v133 + 16);
        if ((v200 & 1) != 0)
          v202 = v119;
        else
          v202 = v199;
        ((void (*)(os_log_t, char *, _QWORD))v201)(v393, v202, v132);
        Date.addingTimeInterval(_:)((double)v138);
        v203 = (uint64_t)v377;
        static Date.trustedNow.getter((uint64_t)v377);
        v204 = Date.timeIntervalSince(_:)(v203);
        v205 = *(void (**)(_QWORD, _QWORD))(v133 + 8);
        v205(v203, v132);
        if (v204 > 0.0)
        {
          if (qword_1010E9F80 == -1)
          {
LABEL_41:
            v206 = type metadata accessor for Logger(0);
            sub_10001A9E8(v206, (uint64_t)qword_1011B77E8);
            v207 = v356;
            v208 = v398;
            ((void (*)(char *, uint64_t, _QWORD *))v392)(v356, v112, v398);
            v209 = v359;
            v210 = v393;
            v211 = ((uint64_t (*)(char *, os_log_t, _QWORD))v201)(v359, v393, v132);
            v212 = Logger.logObject.getter(v211);
            v213 = static os_log_type_t.default.getter(v212);
            if (os_log_type_enabled(v212, v213))
            {
              v214 = swift_slowAlloc(32, -1);
              v399 = (_QWORD *)swift_slowAlloc(64, -1);
              v405 = v399;
              *(_DWORD *)v214 = 141558531;
              *(_QWORD *)&v402 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v214 + 4, v214 + 12);
              *(_WORD *)(v214 + 12) = 2081;
              v215 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v216 = dispatch thunk of CustomStringConvertible.description.getter(v398, v215);
              *(_QWORD *)&v402 = sub_100016940(v216, v217, (uint64_t *)&v405);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v214 + 14, v214 + 22);
              swift_bridgeObjectRelease();
              v218 = v207;
              v219 = *(void (**)(char *, _QWORD *))(v397 + 8);
              v219(v218, v398);
              *(_WORD *)(v214 + 22) = 2082;
              v220 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              v221 = dispatch thunk of CustomStringConvertible.description.getter(v132, v220);
              *(_QWORD *)&v402 = sub_100016940(v221, v222, (uint64_t *)&v405);
              v112 = (uint64_t)v396;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v214 + 24, v214 + 32);
              swift_bridgeObjectRelease();
              v205(v209, v132);
              _os_log_impl((void *)&_mh_execute_header, v212, v213, "Beacon %{private,mask.hash}s is connected since %{public}s.", (uint8_t *)v214, 0x20u);
              v223 = v399;
              swift_arrayDestroy(v399, 2, (char *)&type metadata for Any + 8);
              v208 = v398;
              swift_slowDealloc(v223, -1, -1);
              swift_slowDealloc(v214, -1, -1);

              v224 = v393;
            }
            else
            {

              v205(v209, v132);
              v245 = v207;
              v219 = *(void (**)(char *, _QWORD *))(v397 + 8);
              v219(v245, v208);
              v224 = v210;
            }
            v205(v224, v132);
            v205(v394, v132);
            v205(v395, v132);
            v219((char *)v112, v208);
            v246 = v383;
            (*(void (**)(uint64_t, char *, _QWORD))(v391 + 32))(v383, v387, v132);
            v247 = 1;
            ((void (*)(uint64_t, _QWORD, uint64_t, void (*)(char *, uint64_t, _QWORD *)))v388)(v246, 0, 1, v132);
            return v247;
          }
LABEL_88:
          swift_once(&qword_1010E9F80, sub_1007FA778);
          goto LABEL_41;
        }
        if (qword_1010E9F80 != -1)
          swift_once(&qword_1010E9F80, sub_1007FA778);
        v225 = type metadata accessor for Logger(0);
        v226 = sub_10001A9E8(v225, (uint64_t)qword_1011B77E8);
        v227 = v398;
        ((void (*)(char *, uint64_t, _QWORD *))v392)(v134, v112, v398);
        v228 = v371;
        v229 = ((uint64_t (*)(char *, os_log_t, _QWORD))v201)(v371, v393, v132);
        v368 = (_BYTE *)v226;
        v230 = Logger.logObject.getter(v229);
        v231 = static os_log_type_t.default.getter(v230);
        if (os_log_type_enabled(v230, v231))
        {
          v232 = swift_slowAlloc(32, -1);
          v382 = (char *)swift_slowAlloc(64, -1);
          v405 = v382;
          *(_DWORD *)v232 = 141558531;
          *(_QWORD *)&v402 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v232 + 4, v232 + 12);
          *(_WORD *)(v232 + 12) = 2081;
          v233 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v234 = dispatch thunk of CustomStringConvertible.description.getter(v227, v233);
          *(_QWORD *)&v402 = sub_100016940(v234, v235, (uint64_t *)&v405);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v232 + 14, v232 + 22);
          swift_bridgeObjectRelease();
          v399 = *(_QWORD **)(v397 + 8);
          ((void (*)(char *, _QWORD *))v399)(v134, v227);
          *(_WORD *)(v232 + 22) = 2082;
          v236 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v237 = v371;
          v238 = dispatch thunk of CustomStringConvertible.description.getter(v132, v236);
          *(_QWORD *)&v402 = sub_100016940(v238, v239, (uint64_t *)&v405);
          v112 = (uint64_t)v396;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v232 + 24, v232 + 32);
          swift_bridgeObjectRelease();
          v205(v237, v132);
          _os_log_impl((void *)&_mh_execute_header, v230, v231, "Beacon %{private,mask.hash}s is not connected. Last seen: %{public}s.", (uint8_t *)v232, 0x20u);
          v240 = v382;
          swift_arrayDestroy(v382, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v240, -1, -1);
          v241 = v232;
          v242 = v399;
          v243 = (uint64_t)v369;
          swift_slowDealloc(v241, -1, -1);

          v244 = v227;
        }
        else
        {
          v242 = *(_QWORD **)(v397 + 8);
          ((void (*)(char *, _QWORD *))v242)(v134, v227);
          v205(v228, v132);

          v244 = v227;
          v243 = (uint64_t)v369;
        }
        v248 = v393;
        if ((v360 & 1) != 0)
        {
          sub_10080B648(v350, (uint64_t)&v402);
          if (v403)
          {
            v399 = v242;
            sub_10000F9FC(&v402, (uint64_t)&v405);
            v249 = v406;
            v250 = v407;
            sub_10001AA44(&v405, v406);
            v251 = *(void (**)(uint64_t, uint64_t))(v250 + 192);
            v252 = v250;
            v253 = (uint64_t)v346;
            v251(v249, v252);
            v254 = v397;
            v382 = *(char **)(v397 + 48);
            if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *))v382)(v253, 1, v244) == 1)
            {
              v205(v387, v132);
              v205(v248, v132);
              v205(v394, v132);
              v205(v395, v132);
              sub_100004048(v253, &qword_1010ED860);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v405);
              v255 = (void (*)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))v388;
              ((void (*)(uint64_t, _QWORD *))v399)(v112, v244);
LABEL_61:
              v255(v383, 1, 1, (void (*)(_QWORD, _QWORD, _QWORD))v132);
              return 0;
            }
            v132 = *(void (**)(char *, uint64_t, _QWORD *))(v254 + 32);
            v292 = (uint64_t)v345;
            v132(v345, v253, v244);
            v293 = v390;
            sub_1008259D0(v292, (uint64_t)&v402);
            v294 = v403;
            if (v403)
            {
              v295 = v404;
              sub_10001AA44(&v402, v403);
              v296 = (*(uint64_t (**)(uint64_t, uint64_t))(v295 + 16))(v294, v295);
              __chkstk_darwin(v296);
              *(&v335 - 2) = (void (*)(uint64_t, uint64_t, _QWORD))v112;
              v298 = sub_100854334((uint64_t)sub_1005FACB8, (uint64_t)(&v335 - 4), v297);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v402);
              swift_retain();
              sub_10085BBD4(v298);
              v300 = v299;
              swift_release(v298);
              swift_release(v293);
            }
            else
            {
              sub_100004048((uint64_t)&v402, (uint64_t *)&unk_101107010);
              v300 = _swiftEmptyArrayStorage;
            }
            v373 = (char *)v300[2];
            v380 = v205;
            if (v373)
            {
              v377 = v300 + 4;
              swift_bridgeObjectRetain(v300);
              v201 = 0;
              v376 = 0xD000000000000015;
              v375 = (char *)0x8000000100ED7210;
              v374 = (uint64_t)v300;
              while (v201 < v300[2])
              {
                sub_100030784((uint64_t)&v377[5 * v201], (uint64_t)&v402);
                v302 = v403;
                v301 = v404;
                sub_10001AA44(&v402, v403);
                v303 = v379;
                (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v301 + 8) + 8) + 32))(v302);
                v304._countAndFlagsBits = v376;
                v304._object = v375;
                prohibitAsyncContext(functionName:)(v304);
                __chkstk_darwin(v305);
                *(&v335 - 2) = v390;
                *(&v335 - 1) = (void (*)(uint64_t, uint64_t, _QWORD))v303;
                v306 = (uint64_t)v366;
                OS_dispatch_queue.sync<A>(execute:)(sub_1004CFF10, &v335 - 4, v367);
                v307 = v381;
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v365 + 48))(v306, 1, v381) == 1)
                {
                  sub_100004048(v306, &qword_1010EF160);
                  v308 = 1;
                  v309 = v363;
                  v310 = v384;
                }
                else
                {
                  v311 = *(_BYTE *)(v306 + *(int *)(v307 + 48));
                  v310 = v384;
                  v312 = *(int *)(v384 + 48);
                  v309 = v363;
                  sub_1000126EC(v306, v363, type metadata accessor for BeaconStatus);
                  v308 = 0;
                  *(_BYTE *)(v309 + v312) = v311;
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v386 + 56))(v309, v308, 1, v310);
                ((void (*)(char *, _QWORD *))v399)(v379, v244);
                if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v385)(v309, 1, v310) != 1)
                {
                  v369 = (_BYTE *)v243;
                  v313 = *(_BYTE *)(v309 + *(int *)(v310 + 48));
                  v314 = v381;
                  v315 = *(int *)(v381 + 48);
                  v316 = v309;
                  v317 = v353;
                  sub_1000126EC(v316, v353, type metadata accessor for BeaconStatus);
                  *(_BYTE *)(v317 + v315) = v313;
                  v318 = *(unsigned __int8 *)(v317 + *(int *)(v314 + 48));
                  sub_1000126EC(v317, v355, type metadata accessor for BeaconStatus);
                  __asm { BR              X8 }
                }
                sub_100004048(v309, (uint64_t *)&unk_101102F70);
                v205 = v380;
                ++v201;
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v402);
                v300 = (_QWORD *)v374;
                if ((char *)v201 == v373)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_83;
                }
              }
              __break(1u);
              goto LABEL_88;
            }
LABEL_83:
            v319 = v343;
            ((void (*)(char *, uint64_t, _QWORD *))v392)(v343, v112, v244);
            swift_bridgeObjectRetain(v300);
            v321 = Logger.logObject.getter(v320);
            v322 = v244;
            v323 = static os_log_type_t.default.getter(v321);
            if (os_log_type_enabled(v321, v323))
            {
              v324 = v300;
              v325 = swift_slowAlloc(32, -1);
              v326 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v402 = v326;
              *(_DWORD *)v325 = 141558531;
              v400 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v400, v401, v325 + 4, v325 + 12);
              *(_WORD *)(v325 + 12) = 2081;
              v327 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v328 = dispatch thunk of CustomStringConvertible.description.getter(v322, v327);
              v400 = sub_100016940(v328, v329, (uint64_t *)&v402);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v400, v401, v325 + 14, v325 + 22);
              swift_bridgeObjectRelease();
              v330 = v399;
              ((void (*)(char *, _QWORD *))v399)(v319, v322);
              *(_WORD *)(v325 + 22) = 2048;
              v331 = v324[2];
              swift_bridgeObjectRelease();
              v400 = v331;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v400, v401, v325 + 24, v325 + 32);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v321, v323, "Beacon %{private,mask.hash}s has %ld peers and is not connected.", (uint8_t *)v325, 0x20u);
              swift_arrayDestroy(v326, 1, (char *)&type metadata for Any + 8);
              v332 = v326;
              v112 = (uint64_t)v396;
              swift_slowDealloc(v332, -1, -1);
              v333 = v325;
              v242 = v330;
              swift_slowDealloc(v333, -1, -1);

              ((void (*)(char *, _QWORD *))v330)(v345, v322);
              v132 = (void (*)(char *, uint64_t, _QWORD *))v389;
              v334 = v380;
              v380(v387, v389);
              v334(v393, v132);
              v334(v394, v132);
              v334(v395, v132);
            }
            else
            {

              swift_bridgeObjectRelease_n(v300, 2);
              v242 = v399;
              ((void (*)(char *, _QWORD *))v399)(v319, v322);
              ((void (*)(char *, _QWORD *))v242)(v345, v322);
              v132 = (void (*)(char *, uint64_t, _QWORD *))v389;
              v205(v387, v389);
              v205(v393, v132);
              v205(v394, v132);
              v205(v395, v132);
            }
            v244 = v322;
            v255 = (void (*)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))v388;
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v405);
LABEL_60:
            ((void (*)(uint64_t, _QWORD *))v242)(v112, v244);
            goto LABEL_61;
          }
          v205(v387, v132);
          v205(v248, v132);
          v205(v394, v132);
          v205(v395, v132);
          sub_100004048((uint64_t)&v402, (uint64_t *)&unk_1010EE310);
        }
        else
        {
          v205(v387, v132);
          v205(v248, v132);
          v205(v394, v132);
          v205(v395, v132);
        }
        v255 = (void (*)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))v388;
        goto LABEL_60;
      }
    }
    v138 = v374;
    v388 = v135;
    static Date.distantPast.getter(v137);
    sub_100004048(v136, (uint64_t *)&unk_1010EA690);
    goto LABEL_33;
  }
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v171 = type metadata accessor for Logger(0);
  sub_10001A9E8(v171, (uint64_t)qword_1011B77E8);
  v172 = v354;
  v173 = v398;
  ((void (*)(char *, uint64_t, _QWORD *))v392)(v354, v112, v398);
  v174 = (uint64_t)v375;
  v175 = v361;
  v176 = sub_10005972C((uint64_t)v375, v361, type metadata accessor for BeaconObservation);
  v177 = Logger.logObject.getter(v176);
  v178 = static os_log_type_t.default.getter(v177);
  if (os_log_type_enabled(v177, v178))
  {
    v179 = swift_slowAlloc(32, -1);
    v399 = (_QWORD *)swift_slowAlloc(64, -1);
    v405 = v399;
    *(_DWORD *)v179 = 141558531;
    *(_QWORD *)&v402 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v179 + 4, v179 + 12);
    *(_WORD *)(v179 + 12) = 2081;
    v180 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v181 = dispatch thunk of CustomStringConvertible.description.getter(v398, v180);
    *(_QWORD *)&v402 = sub_100016940(v181, v182, (uint64_t *)&v405);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v179 + 14, v179 + 22);
    swift_bridgeObjectRelease();
    v183 = *(void (**)(char *, _QWORD *))(v397 + 8);
    v183(v172, v398);
    *(_WORD *)(v179 + 22) = 2082;
    v184 = v361;
    v185 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v186 = dispatch thunk of CustomStringConvertible.description.getter(v152, v185);
    *(_QWORD *)&v402 = sub_100016940(v186, v187, (uint64_t *)&v405);
    v112 = (uint64_t)v396;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v402, (char *)&v402 + 8, v179 + 24, v179 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v184, type metadata accessor for BeaconObservation);
    _os_log_impl((void *)&_mh_execute_header, v177, v178, "Beacon %{private,mask.hash}s is connected (via bluetooth) since: %{public}s.", (uint8_t *)v179, 0x20u);
    v188 = v399;
    swift_arrayDestroy(v399, 2, (char *)&type metadata for Any + 8);
    v173 = v398;
    swift_slowDealloc(v188, -1, -1);
    swift_slowDealloc(v179, -1, -1);

  }
  else
  {

    sub_1000126B0(v175, type metadata accessor for BeaconObservation);
    v183 = *(void (**)(char *, _QWORD *))(v397 + 8);
    v183(v172, v173);
  }
  sub_1000126B0(v174, type metadata accessor for BeaconObservation);
  v183((char *)v112, v173);
  v247 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v391 + 56))(v383, 1, 1, v152);
  return v247;
}

uint64_t sub_10082E1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconStatus(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v37 - v14;
  sub_1008202EC(a2 + *(int *)(v4 + 20), (uint64_t)v9);
  v16 = sub_10001A9A8(&qword_101102F80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v9, 1, v16) == 1)
  {
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_101102F70);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B77E8);
    v18 = sub_10005972C(a2, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v38 = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = type metadata accessor for UUID(0);
      v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      v37 = sub_100016940(v25, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No multipart observation for beacon %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    }

    static Date.distantPast.getter(v35);
    return 0;
  }
  else
  {
    sub_1000126EC((uint64_t)v9, (uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_1000126EC((uint64_t)v13, (uint64_t)v15, type metadata accessor for BeaconStatus);
    v27 = sub_1000AF25C(v15[*(int *)(v10 + 20)] & 0xB);
    v28 = (v27 >> 8) & 1;
    v29 = HIWORD(v27) & 1;
    v30 = HIBYTE(v27) & 1;
    v31 = sub_10085DD20(a2);
    v32 = sub_1000AF828(v28, v29, v30, v31);
    v33 = &v15[*(int *)(v10 + 24)];
    v34 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a1, v33, v34);
    sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconStatus);
  }
  return v32;
}

void *sub_10082E568(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  int64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *result;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  _BOOL4 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  void (*v124)(_QWORD, _QWORD);
  uint64_t v125;
  char v126;
  char *v127;
  void (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  _BOOL4 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void (*v138)(uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  __n128 v168;
  int64_t v169;
  uint64_t **v170;
  void (*v171)(_QWORD, _QWORD);
  uint64_t **v172;
  char *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v177;
  int64_t v178;
  uint64_t (*v179)(uint64_t, char *, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(uint64_t, uint64_t);
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  NSObject *v210;
  os_log_type_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  NSObject *v219;
  os_log_type_t v220;
  uint8_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  NSObject *v232;
  os_log_type_t v233;
  uint8_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  char *v242;
  __int128 v243;
  char *v244;
  __n128 v245;
  __n128 v246;
  char *v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  char *v273;
  uint64_t v274;
  int64_t v275;
  char *v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int (*v282)(char *, uint64_t, uint64_t);
  uint64_t v283;
  uint64_t v284;
  void (*v285)(char *, uint64_t, uint64_t, uint64_t);
  void (*v286)(_QWORD, _QWORD);
  uint64_t v287;
  uint64_t v288;
  uint64_t **v289;
  uint64_t (*v290)(uint64_t, uint64_t, uint64_t);
  uint64_t **v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295[8];
  uint64_t v296;
  _QWORD *v297;
  void *v298;
  void *v299;

  v265 = (uint64_t *)a2;
  v264 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v264);
  v271 = (char *)&v241 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010F2CA8);
  __chkstk_darwin(v4);
  v278 = (char *)&v241 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v258);
  v259 = (char *)&v241 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v283 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v257 = (char *)&v241 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v242 = (char *)&v241 - v11;
  v12 = __chkstk_darwin(v10);
  v272 = (char *)&v241 - v13;
  v14 = __chkstk_darwin(v12);
  v260 = (char *)&v241 - v15;
  v16 = __chkstk_darwin(v14);
  v263 = (char *)&v241 - v17;
  v18 = __chkstk_darwin(v16);
  v268 = (char *)&v241 - v19;
  v20 = __chkstk_darwin(v18);
  v287 = (uint64_t)&v241 - v21;
  v22 = __chkstk_darwin(v20);
  v277 = (uint64_t)&v241 - v23;
  v24 = __chkstk_darwin(v22);
  v273 = (char *)&v241 - v25;
  v26 = __chkstk_darwin(v24);
  v256 = (char *)&v241 - v27;
  __chkstk_darwin(v26);
  v288 = (uint64_t)&v241 - v28;
  v29 = sub_10001A9A8(&qword_1010ED860);
  v30 = __chkstk_darwin(v29);
  v250 = (uint64_t)&v241 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v269 = (uint64_t)&v241 - v33;
  v34 = __chkstk_darwin(v32);
  v276 = (char *)&v241 - v35;
  v36 = __chkstk_darwin(v34);
  v247 = (char *)&v241 - v37;
  v38 = __chkstk_darwin(v36);
  v291 = (uint64_t **)((char *)&v241 - v39);
  __chkstk_darwin(v38);
  v292 = (uint64_t)&v241 - v40;
  v284 = type metadata accessor for BeaconStatus(0);
  v280 = *(_QWORD *)(v284 - 8);
  v41 = __chkstk_darwin(v284);
  v261 = (char *)&v241 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v41);
  v262 = (uint64_t)&v241 - v44;
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v241 - v46;
  __chkstk_darwin(v45);
  v49 = (char *)&v241 - v48;
  v299 = &_swiftEmptySetSingleton;
  v50 = a1 + 56;
  v51 = 1 << *(_BYTE *)(a1 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & *(_QWORD *)(a1 + 56);
  v54 = (unint64_t)(v51 + 63) >> 6;
  v281 = a1;
  swift_bridgeObjectRetain(a1);
  v55 = 0;
  while (v53)
  {
    v56 = __clz(__rbit64(v53));
    v53 &= v53 - 1;
    v57 = v56 | (v55 << 6);
LABEL_5:
    v58 = *(_QWORD *)(v280 + 72);
    sub_10005972C(*(_QWORD *)(v281 + 48) + v58 * v57, (uint64_t)v49, type metadata accessor for BeaconStatus);
    sub_1000126EC((uint64_t)v49, (uint64_t)v47, type metadata accessor for BeaconStatus);
    v59 = *(_QWORD *)&v47[*(int *)(v284 + 36)];
    sub_1000126B0((uint64_t)v47, type metadata accessor for BeaconStatus);
    if (v59)
    {
      v255 = v58;
      swift_release(v281);
      if (qword_1010E9F90 != -1)
        goto LABEL_127;
      while (1)
      {
        v63 = type metadata accessor for Logger(0);
        v64 = sub_10001A9E8(v63, (uint64_t)qword_1011B7818);
        v65 = v292;
        v66 = sub_10000F9B8((uint64_t)v265, v292, &qword_1010ED860);
        v267 = v64;
        v67 = Logger.logObject.getter(v66);
        v68 = static os_log_type_t.default.getter(v67);
        if (os_log_type_enabled(v67, v68))
        {
          v69 = swift_slowAlloc(22, -1);
          v70 = swift_slowAlloc(32, -1);
          v297 = (_QWORD *)v70;
          *(_DWORD *)v69 = 141558275;
          v294 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v295, v69 + 4, v69 + 12);
          *(_WORD *)(v69 + 12) = 2081;
          v71 = (void (*)(_QWORD, _QWORD))v291;
          sub_10000F9B8(v65, (uint64_t)v291, &qword_1010ED860);
          v72 = v283;
          v73 = (*(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v283 + 48))(v71, 1, v7);
          if ((_DWORD)v73 == 1)
          {
            sub_100004048((uint64_t)v71, &qword_1010ED860);
            v74 = 0xE400000000000000;
            v75 = 1701736302;
          }
          else
          {
            v75 = UUID.uuidString.getter(v73);
            v74 = v77;
            (*(void (**)(_QWORD, uint64_t))(v72 + 8))(v71, v7);
          }
          v294 = sub_100016940(v75, v74, (uint64_t *)&v297);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v295, v69 + 14, v69 + 22);
          swift_bridgeObjectRelease();
          sub_100004048(v65, &qword_1010ED860);
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Primary beacon: %{private,mask.hash}s", (uint8_t *)v69, 0x16u);
          swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1, -1);
          swift_slowDealloc(v69, -1, -1);
        }
        else
        {
          sub_100004048(v65, &qword_1010ED860);
        }

        swift_bridgeObjectRetain(v281);
        v79 = sub_100508FC0(v78);
        v80 = swift_bridgeObjectRelease();
        __chkstk_darwin(v80);
        *(&v241 - 2) = v265;
        v297 = v79;
        swift_retain();
        sub_1007F7748(sub_10087DDC8, (uint64_t)(&v241 - 4));
        v292 = 0;
        swift_release(v79);
        v81 = (uint64_t)v297;
        v82 = swift_retain_n(v297, 2);
        v83 = Logger.logObject.getter(v82);
        v84 = static os_log_type_t.default.getter(v83);
        if (os_log_type_enabled(v83, v84))
        {
          v85 = (uint8_t *)swift_slowAlloc(12, -1);
          v86 = swift_slowAlloc(32, -1);
          v297 = (_QWORD *)v86;
          *(_DWORD *)v85 = 136315138;
          v291 = (uint64_t **)(v85 + 4);
          v87 = swift_retain();
          v88 = Array.description.getter(v87, v284);
          v90 = v89;
          swift_release(v81);
          v294 = sub_100016940(v88, v90, (uint64_t *)&v297);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, v295, v291, v85 + 12);
          swift_release_n(v81, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v83, v84, "sortedStatuses %s", v85, 0xCu);
          swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v86, -1, -1);
          swift_slowDealloc(v85, -1, -1);

        }
        else
        {

          swift_release_n(v81, 2);
        }
        v91 = (uint64_t)v259;
        v92 = (uint64_t)v261;
        v93 = v262;
        v298 = &_swiftEmptySetSingleton;
        v254 = *(_QWORD *)(v81 + 16);
        if (!v254)
        {
LABEL_122:
          swift_release(v81);
          swift_bridgeObjectRelease();
          return v299;
        }
        v253 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
        v252 = v81 + ((*(unsigned __int8 *)(v280 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v280 + 80));
        v94 = swift_beginAccess(&v298, &v297, 0, 0);
        v95 = 0;
        v241 = &v294;
        v94.n128_u64[0] = 136315650;
        v245 = v94;
        v244 = (char *)&type metadata for Any + 8;
        v94.n128_u64[0] = 136315138;
        v246 = v94;
        v243 = xmmword_100E22B00;
        v96 = v283;
        v97 = v255;
        v251 = v81;
        while (1)
        {
          if (v95 >= *(_QWORD *)(v81 + 16))
          {
LABEL_124:
            __break(1u);
            goto LABEL_125;
          }
          v266 = v95;
          sub_10005972C(v252 + v95 * v97, v93, type metadata accessor for BeaconStatus);
          v99 = v288;
          v290 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 16);
          v100 = v290(v288, v93, v7);
          __chkstk_darwin(v100);
          *(&v241 - 2) = v101;
          *(&v241 - 1) = (uint64_t *)v99;
          v102 = v292;
          QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
          v292 = v102;
          v103 = type metadata accessor for BeaconNamingRecord(0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 48))(v91, 1, v103) == 1)
          {
            sub_100004048(v91, (uint64_t *)&unk_101105880);
            v291 = 0;
            v104 = 0xE000000000000000;
          }
          else
          {
            v105 = v91 + *(int *)(v103 + 32);
            v104 = *(_QWORD *)(v105 + 8);
            v291 = *(uint64_t ***)v105;
            swift_bridgeObjectRetain(v104);
            sub_1000126B0(v91, type metadata accessor for BeaconNamingRecord);
          }
          v106 = v287;
          v107 = v256;
          v290((uint64_t)v256, v288, v7);
          sub_10005972C(v93, v92, type metadata accessor for BeaconStatus);
          swift_bridgeObjectRetain(v104);
          v109 = Logger.logObject.getter(v108);
          v110 = static os_log_type_t.debug.getter(v109);
          v111 = os_log_type_enabled(v109, v110);
          v112 = v283;
          if (v111)
          {
            v113 = swift_slowAlloc(32, -1);
            v286 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(96, -1);
            v294 = (uint64_t)v286;
            *(_DWORD *)v113 = v245.n128_u32[0];
            swift_bridgeObjectRetain(v104);
            *(_QWORD *)(v113 + 4) = sub_100016940((uint64_t)v291, v104, &v294);
            swift_bridgeObjectRelease_n(v104, 3);
            *(_WORD *)(v113 + 12) = 2080;
            v114 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v115 = dispatch thunk of CustomStringConvertible.description.getter(v7, v114);
            *(_QWORD *)(v113 + 14) = sub_100016940(v115, v116, &v294);
            swift_bridgeObjectRelease();
            v289 = *(uint64_t ***)(v112 + 8);
            ((void (*)(char *, uint64_t))v289)(v107, v7);
            *(_WORD *)(v113 + 22) = 2080;
            v117 = (uint64_t)v261;
            v118 = *(_QWORD *)&v261[*(int *)(v284 + 36)];
            v119 = v118 ? *(void **)&v261[*(int *)(v284 + 36)] : &_swiftEmptySetSingleton;
            v120 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            swift_bridgeObjectRetain(v118);
            v121 = Set.description.getter(v119, v7, v120);
            v123 = v122;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v113 + 24) = sub_100016940(v121, v123, &v294);
            swift_bridgeObjectRelease();
            sub_1000126B0(v117, type metadata accessor for BeaconStatus);
            _os_log_impl((void *)&_mh_execute_header, v109, v110, "(%s) %s nearby: %s", (uint8_t *)v113, 0x20u);
            v124 = v286;
            swift_arrayDestroy(v286, 3, v244);
            swift_slowDealloc(v124, -1, -1);
            swift_slowDealloc(v113, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n(v104, 2);
            v289 = *(uint64_t ***)(v112 + 8);
            ((void (*)(char *, uint64_t))v289)(v107, v7);
            sub_1000126B0(v92, type metadata accessor for BeaconStatus);
          }

          v125 = (uint64_t)v298;
          swift_bridgeObjectRetain(v298);
          v126 = sub_100A07660(v288, v125);
          swift_bridgeObjectRelease();
          v127 = v257;
          v128 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
          if ((v126 & 1) == 0)
            break;
          v129 = v290((uint64_t)v257, v288, v7);
          v130 = Logger.logObject.getter(v129);
          v131 = static os_log_type_t.debug.getter(v130);
          v132 = os_log_type_enabled(v130, v131);
          v93 = v262;
          if (!v132)
          {

            v151 = (void (*)(uint64_t, uint64_t))v289;
            ((void (*)(char *, uint64_t))v289)(v127, v7);
            v151(v288, v7);
            sub_1000126B0(v93, type metadata accessor for BeaconStatus);
            v91 = (uint64_t)v259;
            v92 = (uint64_t)v261;
            v97 = v255;
            v81 = v251;
            v98 = v266;
            v96 = v283;
            goto LABEL_39;
          }
          v133 = swift_slowAlloc(12, -1);
          v134 = swift_slowAlloc(32, -1);
          v294 = v134;
          *(_DWORD *)v133 = v246.n128_u32[0];
          v135 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v136 = dispatch thunk of CustomStringConvertible.description.getter(v7, v135);
          *(_QWORD *)(v133 + 4) = sub_100016940(v136, v137, &v294);
          swift_bridgeObjectRelease();
          v138 = (void (*)(uint64_t, uint64_t))v289;
          ((void (*)(char *, uint64_t))v289)(v127, v7);
          _os_log_impl((void *)&_mh_execute_header, v130, v131, "%s has already been inserted", (uint8_t *)v133, 0xCu);
          swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
          v96 = v283;
          swift_slowDealloc(v134, -1, -1);
          swift_slowDealloc(v133, -1, -1);

          v138(v288, v7);
LABEL_53:
          sub_1000126B0(v93, type metadata accessor for BeaconStatus);
          v91 = (uint64_t)v259;
          v92 = (uint64_t)v261;
          v97 = v255;
          v81 = v251;
          v98 = v266;
LABEL_39:
          v95 = v98 + 1;
          if (v95 == v254)
            goto LABEL_122;
        }
        v139 = sub_10001A9A8(&qword_1011003C0);
        v140 = v283;
        v141 = *(unsigned __int8 *)(v283 + 80);
        v142 = (v141 + 32) & ~v141;
        v270 = *(_QWORD *)(v283 + 72);
        v143 = swift_allocObject(v139, v142 + v270, v141 | 7);
        *(_OWORD *)(v143 + 16) = v243;
        v144 = v143 + v142;
        v128(v144, v288, v7);
        v145 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v146 = Set.init(minimumCapacity:)(1);
        v147 = v247;
        v128((uint64_t)v247, v144, v7);
        v285 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56);
        v285(v147, 0, 1, v7);
        v282 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48);
        v148 = v282(v147, 1, v7);
        v248 = v145;
        if (v148 == 1)
        {
          v149 = (uint64_t)v278;
          v96 = v140;
          v150 = v270;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v273, v147, v7);
          v152 = *(_QWORD *)(v146 + 40);
          swift_bridgeObjectRetain(v146);
          v153 = dispatch thunk of Hashable._rawHashValue(seed:)(v152, v7, v145);
          v154 = -1 << *(_BYTE *)(v146 + 32);
          v155 = v153 & ~v154;
          if (((*(_QWORD *)(v146 + 56 + ((v155 >> 3) & 0xFFFFFFFFFFFFF8)) >> v155) & 1) != 0)
          {
            v156 = ~v154;
            v150 = v270;
            while (1)
            {
              v157 = v277;
              v290(v277, *(_QWORD *)(v146 + 48) + v155 * v150, v7);
              v158 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v159 = dispatch thunk of static Equatable.== infix(_:_:)(v157, v273, v7, v158);
              ((void (*)(uint64_t, uint64_t))v289)(v157, v7);
              if ((v159 & 1) != 0)
                break;
              v155 = (v155 + 1) & v156;
              if (((*(_QWORD *)(v146 + 56 + ((v155 >> 3) & 0xFFFFFFFFFFFFF8)) >> v155) & 1) == 0)
                goto LABEL_63;
            }
            swift_bridgeObjectRelease();
            v162 = v273;
          }
          else
          {
            v150 = v270;
LABEL_63:
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v146);
            v161 = v277;
            v162 = v273;
            v290(v277, (uint64_t)v273, v7);
            v294 = v146;
            sub_100A1CCB8(v161, v155, isUniquelyReferenced_nonNull_native);
            v146 = v294;
            swift_bridgeObjectRelease();
          }
          ((void (*)(char *, uint64_t))v289)(v162, v7);
          v285(v247, 1, 1, v7);
          v149 = (uint64_t)v278;
          v96 = v283;
          v106 = v287;
          v128 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
        }
        swift_setDeallocating(v143);
        swift_arrayDestroy(v144, *(_QWORD *)(v143 + 16), v7);
        swift_deallocClassInstance(v143, 32, 7);
        v296 = v146;
        v163 = *(_QWORD *)(v262 + *(int *)(v284 + 36));
        if (!v163)
          break;
        v164 = *(_QWORD *)(v163 + 56);
        v274 = v163 + 56;
        v165 = 1 << *(_BYTE *)(v163 + 32);
        if (v165 < 64)
          v166 = ~(-1 << v165);
        else
          v166 = -1;
        v167 = v166 & v164;
        v275 = (unint64_t)(v165 + 63) >> 6;
        v279 = v163;
        v168 = swift_bridgeObjectRetain(v163);
        v169 = 0;
        v170 = v289;
        v286 = (void (*)(_QWORD, _QWORD))v289;
        while (2)
        {
          v173 = v276;
          v291 = v170;
          if (v167)
          {
            v174 = __clz(__rbit64(v167));
            v167 &= v167 - 1;
            v175 = v174 | (v169 << 6);
            goto LABEL_88;
          }
          if (__OFADD__(v169++, 1))
          {
            __break(1u);
            goto LABEL_124;
          }
          if (v169 >= v275)
          {
LABEL_112:
            ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v285)(v276, 1, 1, v7, v168);
LABEL_113:
            swift_release(v279);
            v217 = v296;
            swift_bridgeObjectRetain(v296);
            sub_100A0FEC4(&v294, v217);
            swift_bridgeObjectRelease();
            swift_beginAccess(&v298, &v294, 33, 0);
            sub_100BBD78C(v217);
            v218 = swift_endAccess(&v294);
            v219 = Logger.logObject.getter(v218);
            v220 = static os_log_type_t.debug.getter(v219);
            if (os_log_type_enabled(v219, v220))
            {
              v221 = (uint8_t *)swift_slowAlloc(12, -1);
              v222 = swift_slowAlloc(32, -1);
              v294 = v222;
              *(_DWORD *)v221 = v246.n128_u32[0];
              swift_bridgeObjectRetain(v298);
              v224 = Set.description.getter(v223, v7, v248);
              v226 = v225;
              swift_bridgeObjectRelease();
              v293 = sub_100016940(v224, v226, &v294);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v241, v221 + 4, v221 + 12);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v219, v220, "Inserted: %s", v221, 0xCu);
              swift_arrayDestroy(v222, 1, (char *)&type metadata for Any + 8);
              v96 = v283;
              swift_slowDealloc(v222, -1, -1);
              swift_slowDealloc(v221, -1, -1);
            }

            ((void (*)(uint64_t, uint64_t))v289)(v288, v7);
            v93 = v262;
            sub_1000126B0(v262, type metadata accessor for BeaconStatus);
            v91 = (uint64_t)v259;
            v92 = (uint64_t)v261;
            v81 = v251;
            v98 = v266;
            v97 = v255;
            goto LABEL_39;
          }
          v177 = *(_QWORD *)(v274 + 8 * v169);
          if (v177)
          {
LABEL_87:
            v167 = (v177 - 1) & v177;
            v175 = __clz(__rbit64(v177)) + (v169 << 6);
LABEL_88:
            ((void (*)(char *, unint64_t, uint64_t, __n128))v128)(v276, *(_QWORD *)(v279 + 48) + v175 * v150, v7, v168);
            v285(v173, 0, 1, v7);
            if (v282(v173, 1, v7) == 1)
              goto LABEL_113;
            v179 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v96 + 32);
            v180 = v179(v106, v173, v7);
            __chkstk_darwin(v180);
            *(&v241 - 2) = (uint64_t *)v106;
            v181 = v292;
            sub_100A7802C((uint64_t (*)(char *))sub_1001ADEF0, v281, v149);
            v292 = v181;
            v182 = v284;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v280 + 48))(v149, 1, v284) == 1)
            {
              sub_100004048(v149, &qword_1010F2CA8);
LABEL_95:
              v190 = (uint64_t)v298;
              swift_bridgeObjectRetain(v298);
              v106 = v287;
              v191 = sub_100A07660(v287, v190);
              swift_bridgeObjectRelease();
              v172 = v289;
              v171 = (void (*)(_QWORD, _QWORD))v289;
              v96 = v283;
              if ((v191 & 1) == 0)
              {
                v192 = v272;
                v128((uint64_t)v272, v106, v7);
                v193 = v277;
                sub_100A09F38(v277, v192);
                v194 = v193;
                v128 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
                v172 = v291;
                ((void (*)(uint64_t, uint64_t))v291)(v194, v7);
                v171 = (void (*)(_QWORD, _QWORD))v172;
              }
LABEL_74:
              v286 = v171;
              v171(v106, v7);
              v170 = v172;
              v149 = (uint64_t)v278;
              continue;
            }
            v183 = *(_QWORD *)(v149 + *(int *)(v182 + 36));
            swift_bridgeObjectRetain(v183);
            sub_1000126B0(v149, type metadata accessor for BeaconStatus);
            v184 = (uint64_t)v271;
            if (!v183)
              goto LABEL_95;
            v185 = v269;
            v128(v269, v288, v7);
            v285((char *)v185, 0, 1, v7);
            v186 = v184 + *(int *)(v264 + 48);
            sub_10000F9B8(v185, v184, &qword_1010ED860);
            sub_10000F9B8((uint64_t)v265, v186, &qword_1010ED860);
            v187 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v282;
            if (v282((char *)v184, 1, v7) == 1)
            {
              sub_100004048(v185, &qword_1010ED860);
              if (v187(v186, 1, v7) == 1)
              {
                sub_100004048(v184, &qword_1010ED860);
                v188 = (uint64_t)v268;
                v128 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
                v290((uint64_t)v268, v288, v7);
                v189 = v263;
                v128((uint64_t)v263, v287, v7);
                goto LABEL_108;
              }
LABEL_99:
              sub_100004048(v184, (uint64_t *)&unk_10110EE90);
              v188 = (uint64_t)v268;
              v128 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
              v290((uint64_t)v268, v288, v7);
              v189 = v263;
              v128((uint64_t)v263, v287, v7);
              goto LABEL_100;
            }
            v195 = v250;
            sub_10000F9B8(v184, v250, &qword_1010ED860);
            if (v187(v186, 1, v7) == 1)
            {
              sub_100004048(v269, &qword_1010ED860);
              v286(v195, v7);
              goto LABEL_99;
            }
            v202 = v277;
            v179(v277, (char *)v186, v7);
            v203 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v249 = dispatch thunk of static Equatable.== infix(_:_:)(v195, v202, v7, v203);
            v204 = v286;
            v286(v202, v7);
            sub_100004048(v269, &qword_1010ED860);
            v204(v195, v7);
            sub_100004048(v184, &qword_1010ED860);
            v188 = (uint64_t)v268;
            v128 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
            v290((uint64_t)v268, v288, v7);
            v189 = v263;
            v128((uint64_t)v263, v287, v7);
            if ((v249 & 1) != 0)
            {
LABEL_108:
              swift_bridgeObjectRelease();
              v171 = v286;
              v286(v189, v7);
              v171(v188, v7);
              v198 = v283;
              goto LABEL_109;
            }
LABEL_100:
            v196 = sub_100A07660(v188, v183);
            swift_bridgeObjectRelease();
            v197 = v260;
            v128((uint64_t)v260, (uint64_t)v189, v7);
            v198 = v283;
            if ((v196 & 1) != 0)
            {
              v199 = (uint64_t)v197;
              v200 = (uint64_t)v298;
              swift_bridgeObjectRetain(v298);
              v201 = sub_100A07660(v199, v200);
              swift_bridgeObjectRelease();
              v171 = v286;
              v286(v199, v7);
              v171(v189, v7);
              v171(v268, v7);
              if ((v201 & 1) == 0)
              {
LABEL_109:
                v205 = v272;
                v106 = v287;
                v128((uint64_t)v272, v287, v7);
                v206 = v277;
                sub_100A09F38(v277, v205);
                v171(v206, v7);
                v172 = v291;
                goto LABEL_73;
              }
            }
            else
            {
              v171 = v286;
              v286(v197, v7);
              v171(v189, v7);
              v171(v188, v7);
            }
            v172 = v291;
            v106 = v287;
LABEL_73:
            v96 = v198;
            v150 = v270;
            goto LABEL_74;
          }
          break;
        }
        v178 = v169 + 1;
        if (v169 + 1 >= v275)
          goto LABEL_112;
        v177 = *(_QWORD *)(v274 + 8 * v178);
        if (v177)
          goto LABEL_86;
        v178 = v169 + 2;
        if (v169 + 2 >= v275)
          goto LABEL_112;
        v177 = *(_QWORD *)(v274 + 8 * v178);
        if (v177)
          goto LABEL_86;
        v178 = v169 + 3;
        if (v169 + 3 >= v275)
          goto LABEL_112;
        v177 = *(_QWORD *)(v274 + 8 * v178);
        if (v177)
        {
LABEL_86:
          v169 = v178;
          goto LABEL_87;
        }
        while (1)
        {
          v169 = v178 + 1;
          if (__OFADD__(v178, 1))
            break;
          if (v169 >= v275)
            goto LABEL_112;
          v177 = *(_QWORD *)(v274 + 8 * v169);
          ++v178;
          if (v177)
            goto LABEL_87;
        }
LABEL_126:
        __break(1u);
LABEL_127:
        swift_once(&qword_1010E9F90, sub_1007FA7C0);
      }
      v207 = v96;
      v208 = v242;
      v128((uint64_t)v242, v288, v7);
      swift_bridgeObjectRetain(v146);
      v210 = Logger.logObject.getter(v209);
      v211 = static os_log_type_t.default.getter(v210);
      if (os_log_type_enabled(v210, v211))
      {
        v212 = swift_slowAlloc(12, -1);
        v213 = swift_slowAlloc(32, -1);
        v294 = v213;
        *(_DWORD *)v212 = v246.n128_u32[0];
        v214 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v215 = dispatch thunk of CustomStringConvertible.description.getter(v7, v214);
        *(_QWORD *)(v212 + 4) = sub_100016940(v215, v216, &v294);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v289)(v208, v7);
        _os_log_impl((void *)&_mh_execute_header, v210, v211, "No nearby peers for %s", (uint8_t *)v212, 0xCu);
        swift_arrayDestroy(v213, 1, (char *)&type metadata for Any + 8);
        v207 = v283;
        swift_slowDealloc(v213, -1, -1);
        swift_slowDealloc(v212, -1, -1);
      }
      else
      {
        ((void (*)(char *, uint64_t))v289)(v208, v7);
      }

      v227 = v248;
      v228 = (uint64_t)v298;
      swift_bridgeObjectRetain(v298);
      v229 = sub_100A07660(v288, v228);
      swift_bridgeObjectRelease();
      v93 = v262;
      if ((v229 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_121:
        ((void (*)(uint64_t, uint64_t))v289)(v288, v7);
        sub_1000126B0(v93, type metadata accessor for BeaconStatus);
        v91 = (uint64_t)v259;
        v92 = (uint64_t)v261;
        v97 = v255;
        v81 = v251;
        v98 = v266;
        v96 = v207;
        goto LABEL_39;
      }
      sub_100A0FEC4(&v294, v146);
      swift_bridgeObjectRelease();
      v230 = v296;
      swift_beginAccess(&v298, &v294, 33, 0);
      sub_100BBD78C(v230);
      v231 = swift_endAccess(&v294);
      v232 = Logger.logObject.getter(v231);
      v233 = static os_log_type_t.debug.getter(v232);
      if (!os_log_type_enabled(v232, v233))
      {

        goto LABEL_121;
      }
      v234 = (uint8_t *)swift_slowAlloc(12, -1);
      v235 = swift_slowAlloc(32, -1);
      v294 = v235;
      *(_DWORD *)v234 = v246.n128_u32[0];
      swift_bridgeObjectRetain(v298);
      v237 = Set.description.getter(v236, v7, v227);
      v239 = v238;
      v93 = v262;
      swift_bridgeObjectRelease();
      v293 = sub_100016940(v237, v239, &v294);
      v240 = v283;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v241, v234 + 4, v234 + 12);
      v96 = v240;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v232, v233, "Inserted: %s", v234, 0xCu);
      swift_arrayDestroy(v235, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v235, -1, -1);
      swift_slowDealloc(v234, -1, -1);

      ((void (*)(uint64_t, uint64_t))v289)(v288, v7);
      goto LABEL_53;
    }
  }
  v60 = v55 + 1;
  if (__OFADD__(v55, 1))
  {
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  if (v60 >= v54)
  {
LABEL_29:
    swift_release(v281);
    return &_swiftEmptySetSingleton;
  }
  v61 = *(_QWORD *)(v50 + 8 * v60);
  ++v55;
  if (v61)
    goto LABEL_24;
  v55 = v60 + 1;
  if (v60 + 1 >= v54)
    goto LABEL_29;
  v61 = *(_QWORD *)(v50 + 8 * v55);
  if (v61)
    goto LABEL_24;
  v55 = v60 + 2;
  if (v60 + 2 >= v54)
    goto LABEL_29;
  v61 = *(_QWORD *)(v50 + 8 * v55);
  if (v61)
    goto LABEL_24;
  v55 = v60 + 3;
  if (v60 + 3 >= v54)
    goto LABEL_29;
  v61 = *(_QWORD *)(v50 + 8 * v55);
  if (v61)
    goto LABEL_24;
  v55 = v60 + 4;
  if (v60 + 4 >= v54)
    goto LABEL_29;
  v61 = *(_QWORD *)(v50 + 8 * v55);
  if (v61)
  {
LABEL_24:
    v53 = (v61 - 1) & v61;
    v57 = __clz(__rbit64(v61)) + (v55 << 6);
    goto LABEL_5;
  }
  v62 = v60 + 5;
  if (v62 >= v54)
    goto LABEL_29;
  v61 = *(_QWORD *)(v50 + 8 * v62);
  if (v61)
  {
    v55 = v62;
    goto LABEL_24;
  }
  while (1)
  {
    v55 = v62 + 1;
    if (__OFADD__(v62, 1))
      break;
    if (v55 >= v54)
      goto LABEL_29;
    v61 = *(_QWORD *)(v50 + 8 * v55);
    ++v62;
    if (v61)
      goto LABEL_24;
  }
  __break(1u);
  result = (void *)swift_release(v297);
  __break(1u);
  return result;
}

uint64_t sub_100830504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v28 = a2;
  v5 = type metadata accessor for BeaconStatus(0);
  v6 = __chkstk_darwin(v5);
  v27 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - v8;
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a3, (uint64_t)v12, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
  {
    v18 = v28;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v19 = static UUID.== infix(_:_:)(a1, v16);
    sub_10005972C(a1, (uint64_t)v9, type metadata accessor for BeaconStatus);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)&v9[*(int *)(v5 + 36)];
      sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconStatus);
      if (v20)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        v17 = 1;
        return v17 & 1;
      }
    }
    else
    {
      sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconStatus);
    }
    v21 = v18;
    v22 = static UUID.== infix(_:_:)(v18, v16);
    v23 = v18;
    v24 = v27;
    sub_10005972C(v23, v27, type metadata accessor for BeaconStatus);
    if ((v22 & 1) != 0)
    {
      v25 = *(_QWORD *)(v24 + *(int *)(v5 + 36));
      sub_1000126B0(v24, type metadata accessor for BeaconStatus);
      if (v25)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        v17 = 0;
        return v17 & 1;
      }
    }
    else
    {
      sub_1000126B0(v24, type metadata accessor for BeaconStatus);
    }
    v17 = static Date.< infix(_:_:)(v21 + *(int *)(v5 + 24), a1 + *(int *)(v5 + 24));
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return v17 & 1;
  }
  sub_100004048((uint64_t)v12, &qword_1010ED860);
  v17 = static Date.< infix(_:_:)(v28 + *(int *)(v5 + 24), a1 + *(int *)(v5 + 24));
  return v17 & 1;
}

BOOL sub_1008307AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1 + *(int *)(v5 + 24), (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if (EnumCaseMultiPayload == 3)
  {
    v18 = sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v10[*(int *)(v18 + 96)];
  }
  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (qword_1010E9F90 != -1)
        swift_once(&qword_1010E9F90, sub_1007FA7C0);
      v20 = type metadata accessor for Logger(0);
      sub_10001A9E8(v20, (uint64_t)qword_1011B7818);
      v21 = sub_10005972C(a1, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc(22, -1);
        v32 = swift_slowAlloc(32, -1);
        v36 = v32;
        *(_DWORD *)v24 = 141558275;
        v34 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v24 + 4, v24 + 12);
        *(_WORD *)(v24 + 12) = 2081;
        v33 = v2;
        sub_100C6ED38();
        v34 = sub_100016940(v25, v26, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v24 + 14, v24 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "nearbyMultipartPeers: Invalid stableIdentifier %{private,mask.hash}s", (uint8_t *)v24, 0x16u);
        v27 = v32;
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v24, -1, -1);
      }
      else
      {
        sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      }

      sub_1000126B0((uint64_t)v10, type metadata accessor for StableIdentifier);
      return 0;
    }
    v13 = sub_10001A9A8(&qword_101106F40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = (unsigned __int8 *)&v10[*(int *)(v13 + 96)];
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRelease();
    if (v16 == 1)
    {
      v17 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v10, v17);
      return 0;
    }
    v19 = v15;
  }
  v28 = sub_100A08510(v19, a2);
  v29 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v10, v29);
  return v28;
}

id sub_100830B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v28;
  id result;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  char *v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  void **aBlock;
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  void *v108;
  uint64_t (*v109)();
  uint64_t v110;
  uint64_t v111[2];
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;

  v98 = a2;
  v99 = a3;
  v97 = a1;
  v104 = (char *)a4;
  v5 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v101 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for DispatchQoS(0);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1007E95C4(v111);
  if (v4)
  {
    swift_errorRelease(v4);
    v103 = 0;
    v19 = swift_allocObject(&unk_101096B08, 32, 7);
    v20 = v99;
    *(_QWORD *)(v19 + 16) = v98;
    *(_QWORD *)(v19 + 24) = v20;
    v109 = sub_100882AEC;
    v110 = v19;
    aBlock = _NSConcreteStackBlock;
    v106 = 1107296256;
    v107 = sub_100016FB8;
    v108 = &unk_101096B20;
    v21 = _Block_copy(&aBlock);
    v22 = swift_retain();
    static DispatchQoS.unspecified.getter(v22);
    v116 = _swiftEmptyArrayStorage;
    v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v116, v24, v25, v8, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v10, v21);
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v12, v102);
    swift_release();
    v26 = type metadata accessor for OwnedBeaconRecord(0);
    v27 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v28 = (unint64_t)v104;
    return (id)v27(v28, 1, 1, v26);
  }
  v95 = v7;
  v96 = v16;
  v93 = v14;
  v94 = v13;
  v17 = static Data.random(bytes:)(32);
  sub_1002F702C(v17, v18);
  v103 = 0;
  v30 = v106;
  v92 = aBlock;
  v32 = v111[0];
  v31 = v111[1];
  v33 = v114;
  v34 = v115;
  v89 = v112;
  v90 = v113;
  sub_10001BBBC(v112, v113);
  v91 = v32;
  v88 = v31;
  sub_10001BBBC(v32, v31);
  v86 = v33;
  v87 = v34;
  sub_10001BBBC(v33, v34);
  v35 = sub_10087BE2C(v111);
  v36 = UUID.init()(v35);
  result = (id)MobileGestalt_get_current_device(v36);
  if (!result)
  {
    __break(1u);
    goto LABEL_23;
  }
  v37 = result;
  v38 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

  if (v38)
  {
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

  }
  else
  {
    v39 = 0;
    v41 = 0xE000000000000000;
  }
  v42 = v104;
  v104 = (char *)v30;
  v43 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) == 0)
    v43 = v39 & 0xFFFFFFFFFFFFLL;
  if (!v43)
  {
    swift_bridgeObjectRelease();
    v52 = swift_allocObject(&unk_101096B58, 32, 7);
    v53 = v99;
    *(_QWORD *)(v52 + 16) = v98;
    *(_QWORD *)(v52 + 24) = v53;
    v109 = sub_100881AC4;
    v110 = v52;
    aBlock = _NSConcreteStackBlock;
    v106 = 1107296256;
    v107 = sub_100016FB8;
    v108 = &unk_101096B70;
    v54 = _Block_copy(&aBlock);
    v55 = swift_retain();
    static DispatchQoS.unspecified.getter(v55);
    v116 = _swiftEmptyArrayStorage;
    v56 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v57 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v58 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v116, v57, v58, v8, v56);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v10, v54);
    _Block_release(v54);
    sub_10001BC14(v89, v90);
    sub_10001BC14(v91, v88);
    sub_10001BC14(v86, v87);
    sub_10001EF3C(0, 0xF000000000000000);
    sub_10001EF3C((uint64_t)v92, (unint64_t)v104);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v12, v102);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v96, v94);
    swift_release();
    v26 = type metadata accessor for OwnedBeaconRecord(0);
    v27 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v28 = (unint64_t)v42;
    return (id)v27(v28, 1, 1, v26);
  }
  v44 = v95;
  *v95 = v39;
  v44[1] = v41;
  v45 = swift_storeEnumTagMultiPayload(v44, v5, 0);
  result = (id)MobileGestalt_get_current_device(v45);
  if (!result)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  v46 = result;
  v47 = (id)MobileGestalt_copy_buildVersion_obj();

  if (v47)
  {
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v51 = v50;

  }
  else
  {
    v49 = 0;
    v51 = 0xE000000000000000;
  }
  result = (id)MobileGestalt_get_current_device(v48);
  if (!result)
    goto LABEL_24;
  v59 = result;
  v60 = (id)MobileGestalt_copy_productType_obj();

  v101 = v51;
  v102 = v49;
  if (v60)
  {
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v99 = v62;
    v100 = v61;

  }
  else
  {
    v99 = 0xE000000000000000;
    v100 = 0;
  }
  v63 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v64 = (uint64_t)&v42[v63[8]];
  v65 = v89;
  v66 = v90;
  sub_10001BBBC(v89, v90);
  v67 = v91;
  v68 = v88;
  sub_10001BBBC(v91, v88);
  v69 = v86;
  v70 = v87;
  sub_10001BBBC(v86, v87);
  sub_10001BBBC((uint64_t)v92, (unint64_t)v104);
  sub_1007EEC58(v64);
  sub_10001BC14(v65, v66);
  sub_10001BC14(v67, v68);
  v71 = v69;
  v72 = v70;
  sub_10001BC14(v69, v70);
  sub_10001EF3C(0, 0xF000000000000000);
  v73 = (uint64_t)v92;
  v74 = (unint64_t)v104;
  sub_10001EF3C((uint64_t)v92, (unint64_t)v104);
  v75 = v93;
  v76 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 32))(&v42[v63[5]], v96, v94);
  sub_1000126EC((uint64_t)v95, (uint64_t)&v42[v63[6]], type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(&v42[v63[7]], 1, 1, v76);
  *(_OWORD *)v42 = xmmword_100E22FC0;
  v77 = (uint64_t *)&v42[v63[9]];
  *v77 = v71;
  v77[1] = v72;
  *(_OWORD *)&v42[v63[10]] = xmmword_100E22B20;
  v78 = (uint64_t *)&v42[v63[11]];
  *v78 = v73;
  v78[1] = v74;
  v79 = &v42[v63[12]];
  v80 = v90;
  *(_QWORD *)v79 = v89;
  *((_QWORD *)v79 + 1) = v80;
  v81 = &v42[v63[13]];
  *(_QWORD *)v81 = v91;
  *((_QWORD *)v81 + 1) = v68;
  v82 = (uint64_t *)&v42[v63[14]];
  v83 = v99;
  *v82 = v100;
  v82[1] = v83;
  v84 = (uint64_t *)&v42[v63[15]];
  v85 = v101;
  *v84 = v102;
  v84[1] = v85;
  *(_QWORD *)&v42[v63[16]] = -1;
  *(_QWORD *)&v42[v63[17]] = -1;
  v42[v63[18]] = 3;
  v42[v63[19]] = 0;
  v42[v63[20]] = 0;
  return (id)(*(uint64_t (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v63 - 1) + 56))(v42, 0, 1, v63);
}

uint64_t sub_1008313D8(void (*a1)(uint64_t *), uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;

  v5 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10008806C();
  v9 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v8, 0, 0);
  *v10 = a3;
  *v7 = v9;
  swift_storeEnumTagMultiPayload(v7, v5, 1);
  a1(v7);
  return sub_100004048((uint64_t)v7, (uint64_t *)&unk_101108050);
}

uint64_t sub_100831498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[6];

  v30 = a3;
  v31 = a4;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a2 + 128);
  sub_10000F9B8(a1, (uint64_t)v15, (uint64_t *)&unk_101108050);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_101096A40, v19 + 16, v16 | 7);
  sub_100005CF0((uint64_t)v15, v20 + v17, (uint64_t *)&unk_101108050);
  *(_QWORD *)(v20 + v18) = a2;
  v21 = (_QWORD *)(v20 + v19);
  v22 = v31;
  *v21 = v30;
  v21[1] = v22;
  aBlock[4] = sub_100881488;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101096A58;
  v23 = _Block_copy(aBlock);
  swift_retain();
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v36 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v6, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  return swift_release();
}

id sub_100831724(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int *v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void (*v73)(_QWORD);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (*v77)(_QWORD);
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v85 = a2;
  v83 = type metadata accessor for BeaconNamingRecord(0);
  __chkstk_darwin(v83);
  v84 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = __chkstk_darwin(v8);
  v86 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v75 - v11;
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  v80 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v81 = v15;
  v82 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v75 - v16;
  v18 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v19 = __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v23 = (uint64_t *)((char *)&v75 - v22);
  sub_10000F9B8(a1, (uint64_t)&v75 - v22, (uint64_t *)&unk_101108050);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v18);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v25 = *v23;
    v26 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v27 = qword_1011B7D38;
    v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
    v87 = v25;
    swift_errorRetain(v25);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v31 = String.init<A>(describing:)(&v87, v30);
    v33 = v32;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_10001AA00();
    *(_QWORD *)(v29 + 32) = v31;
    *(_QWORD *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Failed to save newRecord: %@", 28, 2, v29);
    swift_bridgeObjectRelease();
    *v21 = v25;
    swift_storeEnumTagMultiPayload(v21, v18, 1);
    swift_errorRetain(v25);
    a3(v21);
    swift_errorRelease(v25);
    return (id)sub_100004048((uint64_t)v21, (uint64_t *)&unk_101108050);
  }
  else
  {
    v77 = (void (*)(_QWORD))a3;
    v78 = a4;
    v35 = sub_1000126EC((uint64_t)v23, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    v36 = static os_log_type_t.default.getter(v35);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v37 = qword_1011B7D38;
    v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v39 = swift_allocObject(v38, 72, 7);
    v79 = xmmword_100E22B00;
    *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
    v40 = *(int *)(v13 + 20);
    v76 = v17;
    v41 = &v17[v40];
    v42 = UUID.uuidString.getter(v39);
    v44 = v43;
    *(_QWORD *)(v39 + 56) = &type metadata for String;
    v45 = sub_10001AA00();
    *(_QWORD *)(v39 + 64) = v45;
    *(_QWORD *)(v39 + 32) = v42;
    *(_QWORD *)(v39 + 40) = v44;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "New local pairing requested: %@", 31, 2, v39);
    v46 = swift_bridgeObjectRelease();
    v47 = static os_log_type_t.default.getter(v46);
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    v48 = qword_1011B7DB8;
    v49 = swift_allocObject(v38, 72, 7);
    *(_OWORD *)(v49 + 16) = v79;
    v50 = UUID.uuidString.getter(v49);
    *(_QWORD *)(v49 + 56) = &type metadata for String;
    *(_QWORD *)(v49 + 64) = v45;
    *(_QWORD *)(v49 + 32) = v50;
    *(_QWORD *)(v49 + 40) = v51;
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "New OwnedBeaconRecord saved to cloudKit: %@", 43, 2, v49);
    swift_bridgeObjectRelease();
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v52 = type metadata accessor for UUID(0);
    v53 = *(_QWORD *)(v52 - 8);
    v54 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    v54(v12, v41, v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v12, 0, 1, v52);
    sub_100013B60();
    v55 = v86;
    sub_10000F9B8((uint64_t)v12, v86, &qword_1010ED860);
    sub_100B05560(v55);
    swift_release();
    v56 = sub_100004048((uint64_t)v12, &qword_1010ED860);
    result = (id)MobileGestalt_get_current_device(v56);
    if (result)
    {
      v57 = result;
      v58 = (id)MobileGestalt_copy_userAssignedDeviceName_obj();

      if (v58)
      {
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v62 = v61;

      }
      else
      {
        v60 = 0;
        v62 = 0xE000000000000000;
      }
      v63 = (int *)v83;
      v64 = v84;
      UUID.init()(v59);
      v54(&v64[v63[6]], v41, v52);
      v65 = SPBeaconRoleIdUndefined;
      *(_OWORD *)v64 = xmmword_100E22FC0;
      *(_QWORD *)&v64[v63[7]] = v65;
      v66 = (uint64_t *)&v64[v63[8]];
      *v66 = v60;
      v66[1] = v62;
      v67 = &v64[v63[9]];
      *(_QWORD *)v67 = 0;
      *((_QWORD *)v67 + 1) = 0;
      v68 = (uint64_t)v76;
      v69 = v82;
      sub_10005972C((uint64_t)v76, v82, type metadata accessor for OwnedBeaconRecord);
      v70 = *(unsigned __int8 *)(v80 + 80);
      v71 = (v70 + 40) & ~v70;
      v72 = (_QWORD *)swift_allocObject(&unk_101096A90, v71 + v81, v70 | 7);
      v73 = v77;
      v74 = v78;
      v72[2] = v85;
      v72[3] = v73;
      v72[4] = v74;
      sub_1000126EC(v69, (uint64_t)v72 + v71, type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      swift_retain();
      sub_1008048E0((uint64_t)v64, 0, (uint64_t)sub_100881784, (uint64_t)v72);
      swift_release();
      sub_1000126B0((uint64_t)v64, type metadata accessor for BeaconNamingRecord);
      return (id)sub_1000126B0(v68, type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100831D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[7];

  v29 = a5;
  v30 = a3;
  v31 = a4;
  v33 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
  sub_1007EEF64(3);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
  v16 = (void *)static OS_dispatch_queue.global(qos:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_10005972C(v29, (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconRecord);
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_101096AB8, v18 + v11, v17 | 7);
  v20 = v31;
  *(_QWORD *)(v19 + 16) = v30;
  *(_QWORD *)(v19 + 24) = v20;
  sub_1000126EC((uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for OwnedBeaconRecord);
  aBlock[4] = sub_10087FA58;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101096AD0;
  v21 = _Block_copy(aBlock);
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v37 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v27 = v32;
  v26 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v24, v25, v33, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v27, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v35);
  return swift_release();
}

uint64_t sub_1008320C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v27 = a1;
  v28 = a2;
  v3 = type metadata accessor for OwnedBeaconRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = __chkstk_darwin(v3);
  v7 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - v8;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v26 - v15;
  v17 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D38, "SetupVirtualMeDevice: Creating virtualmedevice record on serial queue.", 70, 2, _swiftEmptyArrayStorage);
  v18 = objc_autoreleasePoolPush();
  sub_100832340(v2, v27, v28, v16);
  objc_autoreleasePoolPop(v18);
  sub_10000F9B8((uint64_t)v16, (uint64_t)v13, (uint64_t *)&unk_1010F47C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1)
  {
    sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010F47C0);
    v16 = v13;
  }
  else
  {
    sub_1000126EC((uint64_t)v13, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
    sub_10005972C((uint64_t)v9, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    v19 = *(unsigned __int8 *)(v4 + 80);
    v20 = (v19 + 24) & ~v19;
    v21 = (v5 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = swift_allocObject(&unk_101096040, v21 + 16, v19 | 7);
    *(_QWORD *)(v22 + 16) = v2;
    sub_1000126EC((uint64_t)v7, v22 + v20, type metadata accessor for OwnedBeaconRecord);
    v23 = (_QWORD *)(v22 + v21);
    v24 = v28;
    *v23 = v27;
    v23[1] = v24;
    swift_retain();
    swift_retain();
    sub_100804FB8((uint64_t)v9, 0, (uint64_t)sub_10087F42C, v22);
    swift_release(v22);
    sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
  }
  return sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010F47C0);
}

id sub_100832340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(_OWORD *, uint64_t, uint64_t, uint64_t);
  _OWORD *v30;
  id result;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  void *v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  char *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  uint64_t *v109;
  char *v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  _OWORD *v133;
  void **aBlock;
  uint64_t v135;
  uint64_t (*v136)(uint64_t);
  void *v137;
  uint64_t (*v138)();
  uint64_t v139;
  uint64_t v140[2];
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;

  v127 = a2;
  v128 = a3;
  v126 = a1;
  v133 = a4;
  v5 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v130 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v131 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v129 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1007E95C4(v140);
  if (v4)
  {
    v125 = (char *)v11;
    swift_errorRelease(v4);
    v132 = 0;
    v19 = swift_allocObject(&unk_101096108, 32, 7);
    v20 = v128;
    *(_QWORD *)(v19 + 16) = v127;
    *(_QWORD *)(v19 + 24) = v20;
    v138 = sub_10087FA5C;
    v139 = v19;
    aBlock = _NSConcreteStackBlock;
    v135 = 1107296256;
    v136 = sub_100016FB8;
    v137 = &unk_101096120;
    v21 = _Block_copy(&aBlock);
    v22 = swift_retain();
    v23 = v129;
    static DispatchQoS.unspecified.getter(v22);
    v145 = _swiftEmptyArrayStorage;
    v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v26 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v27 = v130;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v145, v25, v26, v8, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v23, v27, v21);
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v27, v8);
    (*(void (**)(char *, char *))(v131 + 8))(v23, v125);
    swift_release(v139);
LABEL_4:
    v28 = type metadata accessor for OwnedBeaconRecord(0);
    v29 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
    v30 = v133;
    return (id)v29(v30, 1, 1, v28);
  }
  v124 = v13;
  v122 = v7;
  v125 = v16;
  v123 = v14;
  v17 = static Data.random(bytes:)(32);
  sub_1002F702C(v17, v18);
  v113 = v8;
  v132 = 0;
  v33 = (uint64_t)aBlock;
  v32 = v135;
  v35 = v140[0];
  v34 = v140[1];
  v36 = v143;
  v37 = v144;
  v117 = v141;
  v118 = v142;
  sub_10001BBBC(v141, v142);
  v119 = v35;
  v116 = v34;
  sub_10001BBBC(v35, v34);
  v114 = v36;
  v115 = v37;
  sub_10001BBBC(v36, v37);
  v38 = sub_10087BE2C(v140);
  UUID.init()(v38);
  v39 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v40 = objc_msgSend(v39, "aa_primaryAppleAccount");

  v121 = v32;
  v120 = v33;
  if (!v40)
  {
    v55 = swift_allocObject(&unk_101096158, 32, 7);
    v56 = v11;
    v57 = v128;
    *(_QWORD *)(v55 + 16) = v127;
    *(_QWORD *)(v55 + 24) = v57;
    v138 = sub_100882AEC;
    v139 = v55;
    aBlock = _NSConcreteStackBlock;
    v135 = 1107296256;
    v136 = sub_100016FB8;
    v137 = &unk_101096170;
    v58 = _Block_copy(&aBlock);
    v59 = swift_retain();
    v60 = v129;
    static DispatchQoS.unspecified.getter(v59);
    v145 = _swiftEmptyArrayStorage;
    v61 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v62 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v63 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v64 = v130;
    v65 = v62;
    v66 = v113;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v145, v65, v63, v113, v61);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v60, v64, v58);
    _Block_release(v58);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v64, v66);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v60, v56);
    v67 = swift_release(v139);
    v68 = static os_log_type_t.default.getter(v67);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, qword_1011B7D38, "SetupVirtualMeDevice: Could not obtain aa_primaryAppleAccount", 61, 2, _swiftEmptyArrayStorage);
    sub_10001BC14(v117, v118);
    sub_10001BC14(v119, v116);
    sub_10001BC14(v114, v115);
    sub_10001EF3C(0, 0xF000000000000000);
    sub_10001EF3C(v120, v121);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v125, v124);
    goto LABEL_4;
  }
  result = objc_msgSend(v40, "aa_altDSID");
  if (!result)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  v41 = result;
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v44 = v43;

  v45 = HIBYTE(v44) & 0xF;
  if ((v44 & 0x2000000000000000) == 0)
    v45 = v42 & 0xFFFFFFFFFFFFLL;
  v112 = v40;
  if (!v45)
  {
    swift_bridgeObjectRelease();
    v69 = swift_allocObject(&unk_1010961A8, 32, 7);
    v70 = v11;
    v71 = v128;
    *(_QWORD *)(v69 + 16) = v127;
    *(_QWORD *)(v69 + 24) = v71;
    v138 = sub_100882AEC;
    v139 = v69;
    aBlock = _NSConcreteStackBlock;
    v135 = 1107296256;
    v136 = sub_100016FB8;
    v137 = &unk_1010961C0;
    v72 = _Block_copy(&aBlock);
    v73 = swift_retain();
    v74 = v129;
    static DispatchQoS.unspecified.getter(v73);
    v145 = _swiftEmptyArrayStorage;
    v75 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v76 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v77 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v78 = v130;
    v79 = v76;
    v80 = v113;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v145, v79, v77, v113, v75);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v74, v78, v72);
    _Block_release(v72);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v78, v80);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v74, v70);
    v81 = swift_release(v139);
    v82 = static os_log_type_t.default.getter(v81);
    v83 = v133;
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, qword_1011B7D38, "SetupVirtualMeDevice: Could not obtain altDsid", 46, 2, _swiftEmptyArrayStorage);

    sub_10001BC14(v117, v118);
    sub_10001BC14(v119, v116);
    sub_10001BC14(v114, v115);
    sub_10001EF3C(0, 0xF000000000000000);
    sub_10001EF3C(v120, v121);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v125, v124);
    v28 = type metadata accessor for OwnedBeaconRecord(0);
    v29 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
    v30 = v83;
    return (id)v29(v30, 1, 1, v28);
  }
  v46 = v122;
  *v122 = v42;
  v46[1] = v44;
  v47 = swift_storeEnumTagMultiPayload(v46, v5, 4);
  result = (id)MobileGestalt_get_current_device(v47);
  v48 = (char *)v133;
  if (!result)
    goto LABEL_27;
  v49 = result;
  v50 = (id)MobileGestalt_copy_buildVersion_obj();

  if (v50)
  {
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v54 = v53;

  }
  else
  {
    v52 = 0;
    v54 = 0xE000000000000000;
  }
  result = (id)MobileGestalt_get_current_device(v51);
  if (!result)
    goto LABEL_28;
  v84 = result;
  v85 = (id)MobileGestalt_copy_productType_obj();

  v130 = (char *)v54;
  v131 = v52;
  if (v85)
  {
    v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    v128 = v87;
    v129 = (char *)v86;

  }
  else
  {
    v128 = 0xE000000000000000;
    v129 = 0;
  }
  v88 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v89 = (uint64_t)&v48[v88[8]];
  v90 = v117;
  v91 = v118;
  sub_10001BBBC(v117, v118);
  v92 = v119;
  v93 = v116;
  sub_10001BBBC(v119, v116);
  v94 = v114;
  v95 = v115;
  sub_10001BBBC(v114, v115);
  sub_10001BBBC(v120, v121);
  sub_1007EEC58(v89);

  sub_10001BC14(v90, v91);
  sub_10001BC14(v92, v93);
  v96 = v94;
  v97 = v95;
  sub_10001BC14(v94, v95);
  sub_10001EF3C(0, 0xF000000000000000);
  v98 = v120;
  v99 = v121;
  sub_10001EF3C(v120, v121);
  v100 = v123;
  v101 = v124;
  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(&v48[v88[5]], v125, v124);
  sub_1000126EC((uint64_t)v122, (uint64_t)&v48[v88[6]], type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56))(&v48[v88[7]], 1, 1, v101);
  *(_OWORD *)v48 = xmmword_100E22FC0;
  v102 = (uint64_t *)&v48[v88[9]];
  *v102 = v96;
  v102[1] = v97;
  *(_OWORD *)&v48[v88[10]] = xmmword_100E22B20;
  v103 = (uint64_t *)&v48[v88[11]];
  *v103 = v98;
  v103[1] = v99;
  v104 = &v48[v88[12]];
  v105 = v118;
  *(_QWORD *)v104 = v117;
  *((_QWORD *)v104 + 1) = v105;
  v106 = &v48[v88[13]];
  *(_QWORD *)v106 = v119;
  *((_QWORD *)v106 + 1) = v93;
  v107 = &v48[v88[14]];
  v108 = v128;
  *(_QWORD *)v107 = v129;
  *((_QWORD *)v107 + 1) = v108;
  v109 = (uint64_t *)&v48[v88[15]];
  v110 = v130;
  *v109 = v131;
  v109[1] = (uint64_t)v110;
  *(_QWORD *)&v48[v88[16]] = -1;
  *(_QWORD *)&v48[v88[17]] = -1;
  v48[v88[18]] = 3;
  v48[v88[19]] = 0;
  v48[v88[20]] = 0;
  return (id)(*(uint64_t (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v88 - 1) + 56))(v48, 0, 1, v88);
}

uint64_t sub_100832ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v38 = a4;
  v39 = a5;
  v36 = a1;
  v37 = a3;
  v42 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(a2 + 128);
  sub_10000F9B8(v36, (uint64_t)v17, (uint64_t *)&unk_101108050);
  sub_10005972C(v37, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
  v18 = *(unsigned __int8 *)(v15 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v16 + v20 + v19) & ~v20;
  v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101096068, v23 + 16, v18 | v20 | 7);
  sub_100005CF0((uint64_t)v17, v24 + v19, (uint64_t *)&unk_101108050);
  sub_1000126EC((uint64_t)v13, v24 + v21, type metadata accessor for OwnedBeaconRecord);
  *(_QWORD *)(v24 + v22) = a2;
  v25 = (_QWORD *)(v24 + v23);
  v26 = v39;
  *v25 = v38;
  v25[1] = v26;
  aBlock[4] = sub_10087F9CC;
  v48 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101096080;
  v27 = _Block_copy(aBlock);
  swift_retain();
  v28 = swift_retain();
  static DispatchQoS.unspecified.getter(v28);
  v46 = _swiftEmptyArrayStorage;
  v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v41;
  v32 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v30, v31, v42, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v33, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v44);
  return swift_release(v48);
}

uint64_t sub_1008331E0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(_QWORD *);
  uint64_t v80;
  _QWORD *v81;
  _QWORD aBlock[5];
  uint64_t v83;

  v79 = a4;
  v80 = a5;
  v73 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v78 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v77 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  __chkstk_darwin(v8);
  v74 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v70 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  v69 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v69 + 64);
  v15 = __chkstk_darwin(v13);
  v72 = (uint64_t)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v66 - v16;
  v18 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v19 = __chkstk_darwin(v18);
  v21 = (_QWORD *)((char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v23 = (uint64_t *)((char *)&v66 - v22);
  sub_10000F9B8(a1, (uint64_t)&v66 - v22, (uint64_t *)&unk_101108050);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v18);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v25 = *v23;
    v26 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v27 = qword_1011B7D38;
    v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
    aBlock[0] = v25;
    swift_errorRetain(v25);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v31 = String.init<A>(describing:)(aBlock, v30);
    v33 = v32;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_10001AA00();
    *(_QWORD *)(v29 + 32) = v31;
    *(_QWORD *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "SetupVirtualMeDevice: Failed to save newRecord: %@", 50, 2, v29);
    swift_bridgeObjectRelease();
    *v21 = v25;
    swift_storeEnumTagMultiPayload(v21, v18, 1);
    swift_errorRetain(v25);
    v79(v21);
    swift_errorRelease(v25);
    return sub_100004048((uint64_t)v21, (uint64_t *)&unk_101108050);
  }
  else
  {
    v68 = v6;
    v35 = sub_1000126EC((uint64_t)v23, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    v67 = static os_log_type_t.default.getter(v35);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v36 = qword_1011B7D38;
    v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v38 = swift_allocObject(v37, 72, 7);
    v66 = xmmword_100E22B00;
    *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
    v39 = UUID.uuidString.getter(v38);
    v41 = v40;
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    v42 = sub_10001AA00();
    *(_QWORD *)(v38 + 64) = v42;
    *(_QWORD *)(v38 + 32) = v39;
    *(_QWORD *)(v38 + 40) = v41;
    os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v36, "SetupVirtualMeDevice: New virtualMe device requested: %@", 56, 2, v38);
    v43 = swift_bridgeObjectRelease();
    v44 = static os_log_type_t.default.getter(v43);
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    v45 = qword_1011B7DB8;
    v46 = swift_allocObject(v37, 72, 7);
    *(_OWORD *)(v46 + 16) = v66;
    v47 = UUID.uuidString.getter(v46);
    *(_QWORD *)(v46 + 56) = &type metadata for String;
    *(_QWORD *)(v46 + 64) = v42;
    *(_QWORD *)(v46 + 32) = v47;
    *(_QWORD *)(v46 + 40) = v48;
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "SetupVirtualMeDevice: New OwnedBeaconRecord saved to cloudKit: %@", 65, 2, v46);
    swift_bridgeObjectRelease();
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v50 = v70;
    v49 = v71;
    (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v71);
    v51 = (void *)static OS_dispatch_queue.global(qos:)(v12);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v49);
    v52 = v72;
    sub_10005972C((uint64_t)v17, v72, type metadata accessor for OwnedBeaconRecord);
    v53 = *(unsigned __int8 *)(v69 + 80);
    v54 = (v53 + 32) & ~v53;
    v55 = swift_allocObject(&unk_1010960B8, v54 + v14, v53 | 7);
    v56 = v80;
    *(_QWORD *)(v55 + 16) = v79;
    *(_QWORD *)(v55 + 24) = v56;
    sub_1000126EC(v52, v55 + v54, type metadata accessor for OwnedBeaconRecord);
    aBlock[4] = sub_10087FA58;
    v83 = v55;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010960D0;
    v57 = _Block_copy(aBlock);
    v58 = swift_retain();
    v59 = v74;
    static DispatchQoS.unspecified.getter(v58);
    v81 = _swiftEmptyArrayStorage;
    v60 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v61 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v62 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v63 = v77;
    v64 = v61;
    v65 = v68;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v81, v64, v62, v68, v60);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v59, v63, v57);
    _Block_release(v57);

    (*(void (**)(char *, uint64_t))(v78 + 8))(v63, v65);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v59, v76);
    sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    return swift_release(v83);
  }
}

uint64_t sub_100833874(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a3, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
  swift_storeEnumTagMultiPayload(v7, v5, 0);
  a1(v7);
  return sub_100004048((uint64_t)v7, (uint64_t *)&unk_101108050);
}

uint64_t sub_100833924(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  void (*v19)(char *);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v83 = a2;
  v84 = a3;
  v4 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v4 - 8);
  v76 = v4;
  v5 = v75;
  __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = v7;
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v10;
  v11 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = v13;
  v14 = type metadata accessor for UUID(0);
  v65 = *(_QWORD *)(v14 - 8);
  v15 = v65;
  __chkstk_darwin(v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v17;
  v54 = *a1;
  v53 = a1[1];
  v18 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v81 = (char *)a1 + v18[5];
  v19 = *(void (**)(char *))(v15 + 16);
  v62 = v14;
  v19(v17);
  v80 = (uint64_t)a1 + v18[6];
  sub_10005972C(v80, (uint64_t)v13, type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v10, 1, 1, v14);
  v74 = (char *)a1 + v18[8];
  (*(void (**)(char *))(v5 + 16))(v7);
  v20 = v18[10];
  v71 = (uint64_t *)((char *)a1 + v18[9]);
  v22 = v71[1];
  v51 = *v71;
  v21 = v51;
  v52 = v22;
  v73 = (uint64_t *)((char *)a1 + v20);
  v23 = *(uint64_t *)((char *)a1 + v20 + 8);
  v86 = *(uint64_t *)((char *)a1 + v20);
  v50 = v23;
  v24 = v18[13];
  v70 = (uint64_t *)((char *)a1 + v18[12]);
  v25 = v70[1];
  v85 = *v70;
  v72 = (uint64_t *)((char *)a1 + v24);
  v26 = *(uint64_t *)((char *)a1 + v24 + 8);
  v48 = *(uint64_t *)((char *)a1 + v24);
  v49 = v26;
  v27 = v18[15];
  v56 = (uint64_t *)((char *)a1 + v18[14]);
  v69 = *v56;
  v47 = v56[1];
  v64 = v18[16];
  v28 = v18[17];
  v66 = *(uint64_t *)((char *)a1 + v64);
  v67 = v28;
  v68 = *(uint64_t *)((char *)a1 + v28);
  v29 = (uint64_t *)((char *)a1 + v27);
  v61 = v18[18];
  v58 = v18[19];
  v63 = *((unsigned __int8 *)a1 + v61);
  v30 = *(uint64_t *)((char *)a1 + v27 + 8);
  v55 = *(uint64_t *)((char *)a1 + v27);
  v60 = *((unsigned __int8 *)a1 + v58);
  v57 = v18[20];
  v59 = *((unsigned __int8 *)a1 + v57);
  v31 = v54;
  v32 = v53;
  sub_10001BBBC(v54, v53);
  sub_10001BBBC(v21, v22);
  sub_10001BD08(v86, v23);
  sub_10001BBBC(v85, v25);
  v33 = v48;
  v34 = v49;
  sub_10001BBBC(v48, v49);
  v35 = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v30);
  sub_1000126B0((uint64_t)a1, type metadata accessor for OwnedBeaconRecord);
  *a1 = v31;
  a1[1] = v32;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v81, v82, v62);
  sub_1000126EC((uint64_t)v78, v80, type metadata accessor for StableIdentifier);
  sub_100005CF0((uint64_t)v79, (uint64_t)a1 + v18[7], &qword_1010ED860);
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v74, v77, v76);
  v36 = v71;
  v37 = v52;
  *v71 = v51;
  v36[1] = v37;
  v38 = v73;
  v39 = v50;
  *v73 = v86;
  v38[1] = v39;
  v40 = (uint64_t *)((char *)a1 + v18[11]);
  v41 = v83;
  v42 = v84;
  *v40 = v83;
  v40[1] = v42;
  v43 = v70;
  *v70 = v85;
  v43[1] = v25;
  v44 = v72;
  *v72 = v33;
  v44[1] = v34;
  v45 = v56;
  *v56 = v69;
  v45[1] = v35;
  *v29 = v55;
  v29[1] = v30;
  *(uint64_t *)((char *)a1 + v64) = v66;
  *(uint64_t *)((char *)a1 + v67) = v68;
  *((_BYTE *)a1 + v61) = v63;
  *((_BYTE *)a1 + v58) = v60;
  *((_BYTE *)a1 + v57) = v59;
  return sub_10001BBBC(v41, v42);
}

void sub_100833DA8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[24];
  _QWORD v24[3];
  _BYTE v25[8];

  v6 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v6);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)&v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = swift_projectBox(a2);
  sub_10000F9B8(a1, (uint64_t)v11, (uint64_t *)&unk_101108050);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v14 = *v11;
    v15 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v16 = qword_1011B7D38;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    swift_getErrorValue(v14, v25, v24);
    v19 = Error.localizedDescription.getter(v24[1], v24[2]);
    v21 = v20;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_10001AA00();
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Failed to upgrade record: %@", 28, 2, v18);
    swift_bridgeObjectRelease();
    swift_errorRelease(v14);
  }
  else
  {
    sub_1000126EC((uint64_t)v11, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
    swift_beginAccess(v12, v23, 1, 0);
    sub_10010FA18((uint64_t)v8, v12, type metadata accessor for OwnedBeaconRecord);
  }
  dispatch_group_leave(a3);
}

uint64_t sub_100833FB0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t result;
  _OWORD *v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  ValueMetadata *v55;
  unint64_t v56;
  uint64_t v57[5];
  _OWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v7 = v6;
  v49 = a2;
  v65 = a1;
  v50 = a6;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v51 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = a4;
  v53 = a3;
  if ((_BYTE)a4)
  {
    if (a4 == 1)
    {
      v55 = &type metadata for SecondaryIndex;
      v17 = sub_100336B24();
    }
    else
    {
      v55 = &type metadata for SecureLocationsIndex;
      v17 = sub_1003D155C();
    }
  }
  else
  {
    v55 = &type metadata for PrimaryIndex;
    v17 = sub_100336BAC();
  }
  v56 = v17;
  *(_QWORD *)&v54 = a3;
  v18 = v11;
  sub_10000F9FC(&v54, (uint64_t)v57);
  v19 = v12;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20(v16, v65, v18);
  sub_100030784((uint64_t)v57, (uint64_t)&v16[*(int *)(v14 + 20)]);
  sub_100DD0430((uint64_t)v16, a5 & 1, v58);
  sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconKeyManager.IndexInformation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
  sub_100005CF0((uint64_t)v58, (uint64_t)&v59, &qword_1010FA1E0);
  if (*((_QWORD *)&v60 + 1) >> 60 == 15)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B77E8);
    v22 = v51;
    v20(v51, v65, v18);
    v23 = swift_retain_n(v7, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      LODWORD(v65) = v25;
      v26 = swift_slowAlloc(62, -1);
      v50 = swift_slowAlloc(128, -1);
      v57[0] = v50;
      *(_DWORD *)v26 = 136447491;
      *(_QWORD *)&v54 = *v7;
      v27 = sub_10001A9A8(&qword_1010FA1E8);
      v28 = String.init<A>(describing:)(&v54, v27);
      *(_QWORD *)&v54 = sub_100016940(v28, v29, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 4, v26 + 12);
      v30 = v7;
      v31 = 0xD000000000000010;
      swift_release_n(v30, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      *(_QWORD *)&v54 = sub_100016940(0xD00000000000004BLL, 0x8000000100EE7B20, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 14, v26 + 22);
      *(_WORD *)(v26 + 22) = 2160;
      *(_QWORD *)&v54 = 1752392040;
      v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 24, v26 + 32);
      *(_WORD *)(v26 + 32) = 2081;
      v33 = UUID.uuidString.getter(v32);
      *(_QWORD *)&v54 = sub_100016940(v33, v34, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 34, v26 + 42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
      *(_WORD *)(v26 + 42) = 2082;
      if ((_BYTE)v52)
      {
        v35 = v53;
        if (v52 == 1)
        {
          v43 = 0xEA00000000007972;
          v31 = 0x61646E6F6365732ELL;
        }
        else
        {
          v43 = 0x8000000100EC6940;
        }
      }
      else
      {
        v43 = 0xE800000000000000;
        v31 = 0x7972616D6972702ELL;
        v35 = v53;
      }
      *(_QWORD *)&v54 = sub_100016940(v31, v43, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 44, v26 + 52);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 52) = 2048;
      *(_QWORD *)&v54 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v26 + 54, v26 + 62);
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v65, "%{public}s: %{public}s. Unable to obtain keys for beacon %{private,mask.hash}s, sequence %{public}s, index %llu", (uint8_t *)v26, 0x3Eu);
      v44 = v50;
      swift_arrayDestroy(v50, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_release_n(v7, 2);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v18);
    }

    v45 = sub_10008806C();
    v46 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v45, 0, 0);
    *v47 = 10;
    return swift_willThrow(v46);
  }
  else
  {
    v62 = v59;
    v63 = v60;
    v64 = v61;
    v36 = sub_1004DDCE4(v52);
    v37 = type metadata accessor for TimeBasedKey(0);
    v38 = (_QWORD *)v50;
    v39 = v53;
    result = sub_10064C538(v49, v53, v36, v50 + *(int *)(v37 + 20));
    *v38 = v39;
    v41 = (_OWORD *)((char *)v38 + *(int *)(v37 + 24));
    v42 = v63;
    *v41 = v62;
    v41[1] = v42;
    v41[2] = v64;
  }
  return result;
}

unint64_t sub_100834594(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2[3];
  v15 = a2[4];
  sub_10001AA44(a2, v14);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 8) + 32))(v14);
  sub_10081AECC((uint64_t)v10, (uint64_t)v13);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  v17 = a2[3];
  v18 = a2[4];
  sub_10001AA44(a2, v17);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8) + 32))(v17);
  sub_1008892B4((uint64_t)v6);
  v16(v10, v7);
  v19 = sub_100826274(a1, a2, (uint64_t)v13, (uint64_t)v6);
  sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010F47D0);
  sub_100004048((uint64_t)v13, &qword_1010F7AE0);
  return v19;
}

void sub_100834754(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t (*v53)(_QWORD);
  char *v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v80 = a1;
  v56 = type metadata accessor for UUID(0);
  v55[1] = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v55[0] = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = _s18ConnectionKeyGroupVMa(0);
  v86 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v66 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v61 = (char *)v55 - v8;
  v9 = __chkstk_darwin(v7);
  v64 = (char *)v55 - v10;
  v11 = __chkstk_darwin(v9);
  v59 = (char *)v55 - v12;
  v13 = __chkstk_darwin(v11);
  v14 = __chkstk_darwin(v13);
  v65 = (char *)v55 - v15;
  v16 = __chkstk_darwin(v14);
  v60 = (char *)v55 - v17;
  v18 = __chkstk_darwin(v16);
  v63 = (char *)v55 - v19;
  __chkstk_darwin(v18);
  v58 = (char *)v55 - v20;
  v88 = type metadata accessor for TimeBasedKey(0);
  v87 = *(_QWORD *)(v88 - 8);
  v21 = __chkstk_darwin(v88);
  v76 = (char *)v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v68 = (char *)v55 - v24;
  v25 = __chkstk_darwin(v23);
  v73 = (char *)v55 - v26;
  v27 = __chkstk_darwin(v25);
  v62 = (char *)v55 - v28;
  v29 = __chkstk_darwin(v27);
  v75 = (char *)v55 - v30;
  v31 = __chkstk_darwin(v29);
  v67 = (char *)v55 - v32;
  v33 = __chkstk_darwin(v31);
  v79 = (char *)v55 - v34;
  __chkstk_darwin(v33);
  v71 = (char *)v55 - v35;
  v36 = sub_10001A9A8(&qword_1011118F0);
  v84 = *(_QWORD *)(v36 - 8);
  v85 = v36;
  v37 = __chkstk_darwin(v36);
  v38 = __chkstk_darwin(v37);
  v78 = (char *)v55 - v39;
  v40 = __chkstk_darwin(v38);
  v72 = (char *)v55 - v41;
  v42 = __chkstk_darwin(v40);
  v43 = __chkstk_darwin(v42);
  v77 = (char *)v55 - v44;
  __chkstk_darwin(v43);
  v74 = (char *)v55 - v45;
  v57 = type metadata accessor for Date(0);
  __chkstk_darwin(v57);
  v46 = type metadata accessor for DateInterval(0);
  v81 = *(_QWORD *)(v46 - 8);
  v82 = v46;
  v47 = __chkstk_darwin(v46);
  v70 = (char *)v55 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v69 = (char *)v55 - v49;
  v50 = type metadata accessor for TimeBasedKeysCriteria(0);
  __chkstk_darwin(v50);
  v52 = (char *)v55 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v52, v53);
  v54 = (char *)&loc_100834C50 + *((int *)qword_1008379F8 + swift_getEnumCaseMultiPayload(v52, v50));
  v83 = v4;
  __asm { BR              X10 }
}

uint64_t sub_100834C64()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v3 - 224) + 32))(*(_QWORD *)(v3 - 320), v2, *(_QWORD *)(v3 - 216));
  v4 = *(_QWORD *)(v3 - 304);
  v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v6 = type metadata accessor for BeaconKeyManager(0);
  v7 = *(_QWORD *)(v3 - 168);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v4, v5, &type metadata for () + 1, v6);
  *(_QWORD *)(v3 - 168) = v7;
  v8 = *(uint64_t **)(v3 - 128);
  v9 = *(_QWORD **)(v3 - 232);
  *(_QWORD *)(v3 - 240) = sub_1004DF310(v1, v9, v4);
  v10 = v9[3];
  v11 = v9[4];
  sub_10001AA44(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 112))(v10, v11);
  v12 = v9[3];
  v13 = v9[4];
  v14 = sub_10001AA44(v9, v12);
  v15 = (int *)sub_1004E1BAC((uint64_t)v14, *(_QWORD *)(v3 - 320), *(_QWORD *)(v3 - 240), (unint64_t)v1, 0, v8, v12, v13);
  v17 = v16;
  (*(void (**)(char *, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v3 - 424));
  v18 = v9[3];
  v19 = v9[4];
  v20 = sub_10001AA44(v9, v18);
  sub_1004DF978((unint64_t)v20, v15, v17, 0, 0, 0, v8, v18, v19);
  *(_QWORD *)(v3 - 304) = v21;
  LOBYTE(v18) = v22;
  v23 = swift_release();
  return ((uint64_t (*)(uint64_t))((char *)&loc_100834DB8 + dword_100837A5C[v18]))(v23);
}

_QWORD *sub_100834DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;

  v2 = qword_1010E9F80;
  swift_bridgeObjectRetain(v0);
  if (v2 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B77E8);
  v4 = sub_100030784(*(_QWORD *)(v1 - 232), v1 - 128);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  *(_QWORD *)(v1 - 312) = v0;
  if (v7)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v1 - 144) = v9;
    *(_DWORD *)v8 = 141558275;
    *(_QWORD *)(v1 - 72) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 72, v1 - 64, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    *(_QWORD *)(v1 - 232) = v8 + 14;
    v11 = *(_QWORD *)(v1 - 104);
    v10 = *(_QWORD *)(v1 - 96);
    sub_10001AA44((_QWORD *)(v1 - 128), v11);
    v12 = *(_QWORD *)(v1 - 448);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v11);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = *(_QWORD *)(v1 - 432);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v14, v13);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 440) + 8))(v12, v14);
    *(_QWORD *)(v1 - 72) = sub_100016940(v15, v17, (uint64_t *)(v1 - 144));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 72, v1 - 64, *(_QWORD *)(v1 - 232), v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 - 128));
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    v18 = v8;
    v0 = *(_QWORD *)(v1 - 312);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 - 128));
  }

  v19 = *(_QWORD *)(v1 - 264);
  v20 = *(_QWORD *)(v1 - 336);
  v21 = *(_QWORD *)(v1 - 248);
  v22 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v1 - 208);
  if (v22)
  {
    *(_QWORD *)(v1 - 72) = _swiftEmptyArrayStorage;
    sub_10009AE4C(0, v22, 0);
    v24 = *(_QWORD *)(v1 - 176);
    v25 = v0 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
    *(_QWORD *)(v1 - 256) = *(_QWORD *)(v24 + 72);
    *(_QWORD *)(v1 - 280) = *(_QWORD *)(v1 - 352) + 32;
    v26 = type metadata accessor for TimeBasedKey;
    do
    {
      sub_10005972C(v25, v20, v26);
      *(_QWORD *)(v1 - 232) = v21 + *(int *)(*(_QWORD *)(v1 - 192) + 48);
      sub_10005972C(v20, v21, v26);
      v27 = *(_QWORD *)(v1 - 160);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 176) + 56))(v21, 0, 1, v27);
      sub_10005972C(v20, v19, v26);
      v28 = *(int *)(v27 + 24);
      v29 = v26;
      v30 = (uint64_t *)(v19 + v28);
      v31 = *(_QWORD *)(v19 + v28 + 8);
      if (v31 >> 60 != 15)
      {
        v32 = *v30;
        sub_10001BBBC(*v30, v31);
        v33 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
        v35 = v34;
        sub_10001BBBC(v32, v31);
        v36 = *(_QWORD *)(v1 - 168);
        sub_1007E6A88(v32, v31, v33, v35, 32);
        *(_QWORD *)(v1 - 240) = v38;
        if (!v36)
        {
          v39 = v37;
          sub_10001EF3C(v32, v31);
          v40 = (char *)&loc_100836AF8 + dword_100837A8C[v39 >> 62];
          *(_QWORD *)(v1 - 272) = v39;
          __asm { BR              X9 }
        }
        sub_10001BC14(v33, v35);
        sub_10001EF3C(v32, v31);
        *(_QWORD *)(v1 - 128) = 0;
        *(_QWORD *)(v1 - 120) = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        v46 = *(_QWORD *)(v1 - 120);
        *(_QWORD *)(v1 - 128) = *(_QWORD *)(v1 - 128);
        *(_QWORD *)(v1 - 120) = v46;
        v47._object = (void *)0x8000000100ECF430;
        v47._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v47);
        *(_QWORD *)(v1 - 144) = v36;
        v48 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        _print_unlocked<A, B>(_:_:)(v1 - 144, v1 - 128, v48, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v1 - 128), *(_QWORD *)(v1 - 120), "searchpartyd/KeyRepresentable.swift", 35, 2, 423, 0);
        __break(1u);
        JUMPOUT(0x100837904);
      }
      sub_1000126B0(v19, v29);
      v26 = v29;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 184) + 56))(*(_QWORD *)(v1 - 232), 1, 1, v23);
      sub_1000126B0(v20, v29);
      v41 = *(_QWORD **)(v1 - 72);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009AE4C(0, v41[2] + 1, 1);
        v41 = *(_QWORD **)(v1 - 72);
      }
      v44 = v41[2];
      v43 = v41[3];
      if (v44 >= v43 >> 1)
      {
        sub_10009AE4C(v43 > 1, v44 + 1, 1);
        v41 = *(_QWORD **)(v1 - 72);
      }
      v41[2] = v44 + 1;
      v21 = *(_QWORD *)(v1 - 248);
      sub_100005CF0(v21, (uint64_t)v41+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 200) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 200) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 - 200) + 72) * v44, &qword_1011118F0);
      v25 += *(_QWORD *)(v1 - 256);
      --v22;
    }
    while (v22);
    sub_100217264(*(_QWORD *)(v1 - 312), *(_QWORD *)(v1 - 304), 0);
  }
  else
  {
    sub_100217264(v0, *(_QWORD *)(v1 - 304), 0);
    v41 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 224) + 8))(*(_QWORD *)(v1 - 320), *(_QWORD *)(v1 - 216));
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t sub_100837AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[5];

  v34 = a3;
  v37 = a2;
  v35 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v35);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1011118E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _s18ConnectionKeyGroupVMa(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v36 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TimeBasedKey(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v14, (uint64_t *)&unk_1010F0EE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010F0EE0);
    sub_10000F9B8(v37, (uint64_t)v8, &qword_1011118E0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_100004048((uint64_t)v8, &qword_1011118E0);
      return 0;
    }
    v22 = v36;
    sub_1000126EC((uint64_t)v8, (uint64_t)v36, _s18ConnectionKeyGroupVMa);
    sub_100030784(v34, (uint64_t)v38);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    if (swift_dynamicCast(v5, v38, v23, v35, 6))
    {
      sub_1000126B0((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      v24 = v22[7];
      v25 = v22[8];
      sub_10001AA44(v22 + 4, v24);
      v26 = sub_100ABA6B0(v24, v25);
      if (!v26)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        v31 = v22[7];
        v30 = v22[8];
        sub_10001AA44(v22 + 4, v31);
        dispatch thunk of RawRepresentable.rawValue.getter(v38, v31, *(_QWORD *)(v30 + 56));
        v19 = v38[0];
        v21 = _s18ConnectionKeyGroupVMa;
        v20 = (uint64_t)v22;
        goto LABEL_5;
      }
      if (v26 == 1)
      {
        v27 = 0xE900000000000079;
        v28 = 0x7261646E6F636553;
      }
      else
      {
        v27 = 0xEF736E6F69746163;
        v28 = 0x6F4C657275636553;
      }
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v27, 0x7972616D697250, 0xE700000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
        goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v22, _s18ConnectionKeyGroupVMa);
    return 0;
  }
  sub_1000126EC((uint64_t)v14, (uint64_t)v18, type metadata accessor for TimeBasedKey);
  v19 = *v18;
  v20 = (uint64_t)v18;
  v21 = type metadata accessor for TimeBasedKey;
LABEL_5:
  sub_1000126B0(v20, v21);
  return v19;
}

void sub_100837E20(int **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  _QWORD v29[12];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v29[2] = a4;
  v8 = _s18ConnectionKeyGroupVMa(0);
  v9 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  v32 = v9;
  __chkstk_darwin(v8);
  v36 = type metadata accessor for TimeBasedKey(0);
  v33 = *(_QWORD *)(v36 - 8);
  v10 = __chkstk_darwin(v36);
  v11 = __chkstk_darwin(v10);
  v29[5] = (char *)v29 - v12;
  v13 = __chkstk_darwin(v11);
  v29[8] = (char *)v29 - v14;
  __chkstk_darwin(v13);
  v29[4] = (char *)v29 - v15;
  v16 = sub_10001A9A8(&qword_1011118F0);
  v34 = *(_QWORD *)(v16 - 8);
  v35 = v16;
  v17 = __chkstk_darwin(v16);
  v18 = __chkstk_darwin(v17);
  v29[10] = (char *)v29 - v19;
  __chkstk_darwin(v18);
  v29[9] = (char *)v29 - v20;
  v21 = *a1;
  v22 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v23 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, a2, v22, &type metadata for () + 1, v23);
  v30 = v4;
  v24 = v37;
  v25 = a3[3];
  v26 = a3[4];
  v27 = sub_10001AA44(a3, v25);
  v29[3] = sub_1004DF978((unint64_t)v27, v21, (unint64_t)v21, 0, 0, 0, v24, v25, v26);
  LOBYTE(a3) = v28;
  swift_release();
  __asm { BR              X10 }
}

uint64_t sub_100838068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;

  v3 = *(_QWORD *)(v2 - 280);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    *(_QWORD *)(v2 - 296) = v0;
    *(_QWORD *)(v2 - 72) = _swiftEmptyArrayStorage;
    sub_10009AE4C(0, v4, 0);
    v6 = *(_QWORD *)(v2 - 184);
    v7 = v3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    *(_QWORD *)(v2 - 232) = *(_QWORD *)(v6 + 72);
    v8 = *(_QWORD *)(v2 - 200);
    v9 = *(_QWORD *)(v2 - 264);
    v10 = *(_QWORD *)(v2 - 224);
    *(_QWORD *)(v2 - 248) = v1;
    do
    {
      sub_10005972C(v7, v9, type metadata accessor for TimeBasedKey);
      v11 = v10 + *(int *)(*(_QWORD *)(v2 - 168) + 48);
      sub_10005972C(v9, v10, type metadata accessor for TimeBasedKey);
      v12 = *(_QWORD *)(v2 - 160);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 184) + 56))(v10, 0, 1, v12);
      sub_10005972C(v9, v1, type metadata accessor for TimeBasedKey);
      v13 = *(int *)(v12 + 24);
      v14 = v1;
      v15 = (uint64_t *)(v1 + v13);
      v16 = v15[1];
      if (v16 >> 60 != 15)
      {
        *(_QWORD *)(v2 - 240) = v4;
        v17 = *v15;
        sub_10001BBBC(*v15, v16);
        v18 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
        v20 = v19;
        sub_10001BBBC(v17, v16);
        v21 = *(_QWORD *)(v2 - 208);
        sub_1007E6A88(v17, v16, v18, v20, 32);
        *(_QWORD *)(v2 - 216) = v23;
        if (!v21)
        {
          v24 = v22;
          sub_10001EF3C(v17, v16);
          v25 = (char *)&loc_1008381EC + dword_10083928C[v24 >> 62];
          *(_QWORD *)(v2 - 256) = v24;
          __asm { BR              X9 }
        }
        sub_10001BC14(v18, v20);
        sub_10001EF3C(v17, v16);
        *(_QWORD *)(v2 - 128) = 0;
        *(_QWORD *)(v2 - 120) = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        v32 = *(_QWORD *)(v2 - 120);
        *(_QWORD *)(v2 - 128) = *(_QWORD *)(v2 - 128);
        *(_QWORD *)(v2 - 120) = v32;
        v33._object = (void *)0x8000000100ECF430;
        v33._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v33);
        *(_QWORD *)(v2 - 144) = v21;
        v34 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        _print_unlocked<A, B>(_:_:)(v2 - 144, v2 - 128, v34, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v2 - 128), *(_QWORD *)(v2 - 120), "searchpartyd/KeyRepresentable.swift", 35, 2, 423, 0);
        __break(1u);
        JUMPOUT(0x100839214);
      }
      sub_1000126B0(v14, type metadata accessor for TimeBasedKey);
      v1 = v14;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 56))(v11, 1, 1, v8);
      sub_1000126B0(v9, type metadata accessor for TimeBasedKey);
      v5 = *(_QWORD **)(v2 - 72);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009AE4C(0, v5[2] + 1, 1);
        v5 = *(_QWORD **)(v2 - 72);
      }
      v28 = v5[2];
      v27 = v5[3];
      if (v28 >= v27 >> 1)
      {
        sub_10009AE4C(v27 > 1, v28 + 1, 1);
        v5 = *(_QWORD **)(v2 - 72);
      }
      v5[2] = v28 + 1;
      v10 = *(_QWORD *)(v2 - 224);
      sub_100005CF0(v10, (uint64_t)v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 176) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 176) + 80))+ *(_QWORD *)(*(_QWORD *)(v2 - 176) + 72) * v28, &qword_1011118F0);
      v7 += *(_QWORD *)(v2 - 232);
      --v4;
    }
    while (v4);
    v0 = *(_QWORD *)(v2 - 296);
    v3 = *(_QWORD *)(v2 - 280);
  }
  if (v5[2])
  {
    v29 = *(_QWORD *)(v2 - 176);
    v30 = *(_QWORD *)(v2 - 288);
    sub_10000F9B8((uint64_t)v5 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)), v30, &qword_1011118F0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v29 + 56))(v30, 0, 1, *(_QWORD *)(v2 - 168));
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 176) + 56))(*(_QWORD *)(v2 - 288), 1, 1, *(_QWORD *)(v2 - 168));
  }
  sub_100217264(v3, v0, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1008392AC(uint64_t a1, unsigned __int8 a2, int *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[5];

  v5 = v4;
  v10 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030784(a1, (uint64_t)v66);
  v59 = a4;
  sub_100839878(0, v5, v66, a3, a4, a2);
  v17 = v16;
  v65 = v16;
  if (v15 == 3 && (v13 | v14) == 0)
  {
    swift_bridgeObjectRelease();
    sub_100839878(1, v5, v66, a3, v59, a2);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v42 = v41;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
    sub_100217264(v36, v38, v40);
    v65 = v42;
  }
  else
  {
    v19 = v13;
    v20 = v14;
    v21 = v15;
    v57 = a3;
    swift_bridgeObjectRetain(v16);
    sub_100217264(v19, v20, v21);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B77E8);
    sub_100030784(a1, (uint64_t)v62);
    swift_bridgeObjectRetain(v17);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(32, -1);
      v27 = swift_slowAlloc(32, -1);
      v61 = v27;
      *(_DWORD *)v26 = 134218499;
      v28 = *(_QWORD *)(v17 + 16);
      swift_bridgeObjectRelease();
      v60 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2160;
      v60 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v26 + 14, v26 + 22);
      *(_WORD *)(v26 + 22) = 2081;
      v56 = v26 + 24;
      v29 = v63;
      v30 = v64;
      sub_10001AA44(v62, v63);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v30 + 8) + 8) + 32))(v29);
      v31 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v10, v31);
      v34 = v33;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v12, v10);
      v60 = sub_100016940(v32, v34, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v56, v26 + 32);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Found %ld matching hint advertisements for beacon %{private,mask.hash}s.", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v17, 2);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
    }

    a3 = v57;
  }
  swift_beginAccess(&v65, v62, 0, 0);
  if (!*(_QWORD *)(v65 + 16))
  {
    v43 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v44 = swift_allocObject(v43, 72, 7);
    *(_OWORD *)(v44 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v44 + 56) = &type metadata for UInt8;
    *(_QWORD *)(v44 + 64) = &protocol witness table for UInt8;
    *(_BYTE *)(v44 + 32) = a2;
    v45 = String.init(format:_:)(1479684133, 0xE400000000000000, v44);
    v47 = v46;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v48 = type metadata accessor for Logger(0);
    sub_10001A9E8(v48, (uint64_t)qword_1011B77E8);
    swift_bridgeObjectRetain(v47);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc(35, -1);
      v53 = swift_slowAlloc(32, -1);
      v61 = v53;
      *(_DWORD *)v52 = 16778242;
      LOBYTE(v60) = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 1, v52 + 4, v52 + 5);
      *(_WORD *)(v52 + 5) = 2080;
      swift_bridgeObjectRetain(v47);
      v60 = sub_100016940(v45, v47, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v52 + 7, v52 + 15);
      swift_bridgeObjectRelease_n(v47, 3);
      *(_WORD *)(v52 + 15) = 2048;
      v60 = (uint64_t)a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v52 + 17, v52 + 25);
      *(_WORD *)(v52 + 25) = 2048;
      v60 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v52 + 27, v52 + 35);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "No matches for the provided criteria: sequence: .primary, hint: %hhu - hex %s,\nstartBucket: %llu, endBucket: %llu.", (uint8_t *)v52, 0x23u);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v47, 2);
    }
  }
  return v65;
}

void sub_100839878(int a1, uint64_t a2, _QWORD *a3, int *a4, unint64_t a5, unsigned __int8 a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[18];
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;

  v55 = a4;
  v51 = a6;
  v53 = _s18ConnectionKeyGroupVMa(0);
  v56 = *(_QWORD *)(v53 - 8);
  v10 = __chkstk_darwin(v53);
  v50[10] = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v50[9] = (char *)v50 - v13;
  v14 = __chkstk_darwin(v12);
  v15 = __chkstk_darwin(v14);
  v50[6] = (char *)v50 - v16;
  v17 = __chkstk_darwin(v15);
  v50[4] = (char *)v50 - v18;
  v19 = __chkstk_darwin(v17);
  v50[5] = (char *)v50 - v20;
  __chkstk_darwin(v19);
  v50[3] = (char *)v50 - v21;
  v54 = sub_10001A9A8(&qword_1011118F0);
  v52 = *(_QWORD *)(v54 - 8);
  v22 = __chkstk_darwin(v54);
  v50[13] = (char *)v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v50[12] = (char *)v50 - v25;
  __chkstk_darwin(v24);
  v50[11] = (char *)v50 - v26;
  v27 = type metadata accessor for TimeBasedKey(0);
  v57 = *(_QWORD *)(v27 - 8);
  v58 = v27;
  v28 = __chkstk_darwin(v27);
  v29 = __chkstk_darwin(v28);
  v50[17] = (char *)v50 - v30;
  v31 = __chkstk_darwin(v29);
  v50[8] = (char *)v50 - v32;
  v33 = __chkstk_darwin(v31);
  v50[15] = (char *)v50 - v34;
  v35 = __chkstk_darwin(v33);
  v36 = __chkstk_darwin(v35);
  v50[16] = (char *)v50 - v37;
  v38 = __chkstk_darwin(v36);
  v50[7] = (char *)v50 - v39;
  __chkstk_darwin(v38);
  v50[14] = (char *)v50 - v40;
  v41 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v42 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, a2, v41, &type metadata for () + 1, v42);
  v43 = v59;
  v45 = a3[3];
  v44 = a3[4];
  v46 = sub_10001AA44(a3, v45);
  v55 = (int *)sub_1004DF978((unint64_t)v46, v55, a5, 0, a1, 0, v43, v45, v44);
  v50[2] = v47;
  v49 = v48;
  swift_release();
  v50[1] = v49;
  __asm { BR              X10 }
}

uint64_t sub_100839C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;

  *(_QWORD *)(v3 - 152) = v2;
  v4 = *(_QWORD *)(v3 - 208);
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain(v4);
  *(_QWORD *)(v3 - 256) = v0;
  *(_QWORD *)(v3 - 296) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 - 304) = _swiftEmptyArrayStorage;
    v6 = *(_QWORD *)(v3 - 208);
    if (!*(_QWORD *)(v6 + 16))
    {
      __break(1u);
      JUMPOUT(0x10083B004);
    }
    v7 = *(_QWORD *)(v3 - 192);
    v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v9 = *(_QWORD *)(v7 + 72);
    *(_QWORD *)(v3 - 272) = v8;
    *(_QWORD *)(v3 - 280) = v9;
    v10 = *(_QWORD *)(v3 - 264);
    sub_10005972C(v6 + v8, v10, type metadata accessor for TimeBasedKey);
    v11 = v10 + *(int *)(*(_QWORD *)(v3 - 184) + 24);
    v12 = *(_QWORD *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    sub_10001BBBC(v12, v13);
    sub_1007E7118(v12, v13);
    if (!v1)
    {
      v15 = v14;
      sub_1007E3D28(v14, 0);
      v17 = v16;
      CCECCryptorRelease(v15);
      sub_10001BC14(v12, v13);
      __asm { BR              X9 }
    }
    v40 = static os_log_type_t.error.getter(v14);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v41 = qword_1011B77E0;
    v42 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v43 = swift_allocObject(v42, 72, 7);
    *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v3 - 136) = v1;
    swift_errorRetain(v1);
    v44 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v45 = String.init<A>(describing:)(v3 - 136, v44);
    v47 = v46;
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    *(_QWORD *)(v43 + 64) = sub_10001AA00();
    *(_QWORD *)(v43 + 32) = v45;
    *(_QWORD *)(v43 + 40) = v47;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Error deriving advertisementKey: %@", 35, 2, v43);
    swift_bridgeObjectRelease();
    v48 = sub_1000D95A8();
    v49 = swift_allocError(&type metadata for CryptoTokenError, v48, 0, 0);
    *v50 = 0;
    swift_willThrow(v49);
    swift_errorRelease(v1);
    sub_10001BC14(v12, v13);
    *(_QWORD *)(v3 - 136) = 0;
    *(_QWORD *)(v3 - 128) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v51 = *(_QWORD *)(v3 - 128);
    *(_QWORD *)(v3 - 136) = *(_QWORD *)(v3 - 136);
    *(_QWORD *)(v3 - 128) = v51;
    v52._object = (void *)0x8000000100EC7AC0;
    v52._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v52);
    *(_QWORD *)(v3 - 168) = v49;
    v53 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    _print_unlocked<A, B>(_:_:)(v3 - 168, v3 - 136, v53, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v3 - 136), *(_QWORD *)(v3 - 128), "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v2 + 16);
  if (v18)
  {
    *(_QWORD *)(v3 - 168) = v2;
    sub_10009AE4C(0, v18, 0);
    v19 = *(_QWORD *)(v3 - 192);
    v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    *(_QWORD *)(v3 - 304) = v2;
    v21 = v2 + v20;
    v22 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)(v3 - 296) = *(_QWORD *)(v3 - 336) + 32;
    v23 = *(_QWORD *)(v3 - 288);
    *(_QWORD *)(v3 - 280) = v22;
    while (1)
    {
      v24 = *(_QWORD *)(v3 - 248);
      sub_10005972C(v21, v24, type metadata accessor for TimeBasedKey);
      *(_QWORD *)(v3 - 240) = v23 + *(int *)(*(_QWORD *)(v3 - 216) + 48);
      sub_10005972C(v24, v23, type metadata accessor for TimeBasedKey);
      v25 = *(_QWORD *)(v3 - 184);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 192) + 56))(v23, 0, 1, v25);
      sub_10005972C(v24, v0, type metadata accessor for TimeBasedKey);
      v26 = v0 + *(int *)(v25 + 24);
      v27 = *(_QWORD *)(v26 + 8);
      if (v27 >> 60 != 15)
        break;
      sub_1000126B0(v0, type metadata accessor for TimeBasedKey);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 200) + 56))(*(_QWORD *)(v3 - 240), 1, 1, *(_QWORD *)(v3 - 224));
      sub_1000126B0(*(_QWORD *)(v3 - 248), type metadata accessor for TimeBasedKey);
      v35 = *(_QWORD *)(v3 - 168);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009AE4C(0, *(_QWORD *)(v35 + 16) + 1, 1);
        v35 = *(_QWORD *)(v3 - 168);
      }
      v23 = *(_QWORD *)(v3 - 288);
      v38 = *(_QWORD *)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_10009AE4C(v37 > 1, v38 + 1, 1);
        v23 = *(_QWORD *)(v3 - 288);
        v35 = *(_QWORD *)(v3 - 168);
      }
      *(_QWORD *)(v35 + 16) = v38 + 1;
      sub_100005CF0(v23, v35+ ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 232) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 232) + 80))+ *(_QWORD *)(*(_QWORD *)(v3 - 232) + 72) * v38, &qword_1011118F0);
      v21 += v22;
      if (!--v18)
        goto LABEL_16;
    }
    v28 = *(_QWORD *)v26;
    sub_10001BBBC(*(_QWORD *)v26, *(_QWORD *)(v26 + 8));
    v29 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
    v31 = v30;
    sub_10001BBBC(v28, v27);
    sub_1007E6A88(v28, v27, v29, v31, 32);
    *(_QWORD *)(v3 - 264) = v33;
    if (!v1)
    {
      v34 = v32;
      sub_10001EF3C(v28, v27);
      __asm { BR              X9 }
    }
    sub_10001BC14(v29, v31);
    sub_10001EF3C(v28, v27);
    *(_QWORD *)(v3 - 136) = 0;
    *(_QWORD *)(v3 - 128) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v54 = *(_QWORD *)(v3 - 128);
    *(_QWORD *)(v3 - 136) = *(_QWORD *)(v3 - 136);
    *(_QWORD *)(v3 - 128) = v54;
    v55._object = (void *)0x8000000100ECF430;
    v55._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v55);
    *(_QWORD *)(v3 - 152) = v1;
    v56 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    _print_unlocked<A, B>(_:_:)(v3 - 152, v3 - 136, v56, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v3 - 136), *(_QWORD *)(v3 - 128), "searchpartyd/KeyRepresentable.swift", 35, 2, 423, 0);
LABEL_22:
    __break(1u);
    JUMPOUT(0x10083B9E4);
  }
LABEL_16:
  swift_release();
  return *(_QWORD *)(v3 - 208);
}

uint64_t sub_10083BAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];
  _QWORD *v25;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a2 + 64);
  v14 = (_QWORD *)swift_allocObject(&unk_101096888, 48, 7);
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  aBlock[4] = sub_100880E8C;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010968A0;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v16 = sub_10001D898(a3, a4);
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v8, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v22);
  return swift_release();
}

uint64_t sub_10083BD00(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  Transaction.capture()();
  v5 = static os_log_type_t.default.getter(v4);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7D38, "Started repairing cryptor.", 26, 2, _swiftEmptyArrayStorage);
  sub_1007F3274();
  sub_1007FDEC4();
  sub_100BBE4D4();
  v6 = swift_release();
  v7 = static os_log_type_t.default.getter(v6);
  result = os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7D38, "Completed repairing cryptor.", 28, 2, _swiftEmptyArrayStorage);
  if (a3)
    return a3(result);
  return result;
}

uint64_t sub_10083BE0C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(void);
  void (*v76)(char *, _QWORD *);
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void (*v94)(void);
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(_QWORD, _QWORD);
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(void);
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void (*v126)(_QWORD, _QWORD);
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(char);
  char *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t (**v136)(char);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(_QWORD, _QWORD, _QWORD);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(void);
  char *v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  void (*v207)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v208;
  void (*v209)(void);
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v223;
  _QWORD *v224;
  void (*v225)(void);
  uint64_t v226;
  uint64_t v227;
  void (*v228)(void);
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  void (*v236)(char *, char *, uint64_t);
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  void (**v241)(void *, char);
  void (*v242)(void *, char);
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  const void *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void (*v254)(char *, uint64_t, uint64_t);
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  void (*v259)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t My;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  void (*v293)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  char *v301;
  void (*v302)(uint64_t, char *, uint64_t);
  uint64_t v303;
  uint64_t v304;
  void (*v305)(void);
  uint64_t v306;
  char *v307;
  uint64_t v308;
  char *v309;
  void (*v310)(char *, uint64_t);
  uint64_t v311;
  void (*v312)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  void (*v339)(char *, uint64_t, uint64_t);
  char *v340;
  uint64_t v341;
  void (*v342)(char *, char *, uint64_t);
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  char *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  _DWORD *v385;
  int *v386;
  uint64_t v387;
  void (*v388)(void);
  int v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  _QWORD *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  __int128 v409;
  uint64_t v410;
  void (*v411)(char *, _QWORD *);
  char *v412;
  _QWORD *v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  char *v417;
  void (*v418)(_QWORD, _QWORD);
  char *v419;
  __int128 v420;
  uint64_t v421;
  _QWORD *v422;
  void (*v423)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  void (*v428)(void);
  uint64_t v429;
  _QWORD *v430;
  __int128 aBlock;
  uint64_t (*v432)(uint64_t);
  void *v433;
  uint64_t v434;
  uint64_t v435;

  v358 = a6;
  v389 = a5;
  v398 = (_QWORD *)a4;
  v423 = a2;
  v426 = a1;
  v400 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v375 = *(_QWORD *)(v400 - 8);
  v7 = __chkstk_darwin(v400);
  v396 = (uint64_t)&v353 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v361 = (char *)&v353 - v9;
  v10 = sub_10001A9A8(&qword_1010F7608);
  __chkstk_darwin(v10);
  v376 = (uint64_t)&v353 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v12);
  v370 = (char *)&v353 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v374 = sub_10001A9A8(&qword_1010FD140);
  v372 = *(_QWORD *)(v374 - 8);
  v14 = __chkstk_darwin(v374);
  v368 = (char *)&v353 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v371 = (uint64_t)&v353 - v16;
  v17 = sub_10001A9A8(&qword_1010FD148);
  v18 = __chkstk_darwin(v17);
  v369 = (char *)&v353 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v373 = (uint64_t)&v353 - v20;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v21);
  v360 = (uint64_t)&v353 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v363 = type metadata accessor for OwnedBeaconGroup(0);
  v359 = *(_QWORD *)(v363 - 8);
  v23 = __chkstk_darwin(v363);
  v357 = (uint64_t)&v353 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v356 = (uint64_t)&v353 - v26;
  v355 = v27;
  __chkstk_darwin(v25);
  v393 = (uint64_t)&v353 - v28;
  v29 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v29);
  v365 = (uint64_t)&v353 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v32 = __chkstk_darwin(v31);
  v381 = (char *)&v353 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v380 = (char *)&v353 - v34;
  v391 = type metadata accessor for OwnedBeaconRecord(0);
  v390 = *(_QWORD *)(v391 - 8);
  v35 = __chkstk_darwin(v391);
  v382 = (uint64_t)&v353 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v377 = (uint64_t)&v353 - v37;
  v416 = type metadata accessor for DispatchQoS(0);
  v415 = *(_QWORD *)(v416 - 8);
  __chkstk_darwin(v416);
  v414 = (char *)&v353 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v383 = type metadata accessor for SafeLocation(0);
  v384 = *(_QWORD *)(v383 - 8);
  __chkstk_darwin(v383);
  v417 = (char *)&v353 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v40);
  v405 = (uint64_t)&v353 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v406 = type metadata accessor for KeyAlignmentRecord(0);
  v404 = *(_QWORD *)(v406 - 8);
  v42 = __chkstk_darwin(v406);
  v378 = (uint64_t)&v353 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v379 = (uint64_t)&v353 - v44;
  v394 = type metadata accessor for URL(0);
  v403 = *(_QWORD *)(v394 - 8);
  v45 = __chkstk_darwin(v394);
  v367 = (char *)&v353 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v45);
  v366 = (char *)&v353 - v48;
  __chkstk_darwin(v47);
  v392 = (char *)&v353 - v49;
  v401 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v401);
  v402 = (char *)&v353 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v407 = type metadata accessor for BeaconNamingRecord(0);
  v388 = *(void (**)(void))(v407 - 8);
  v51 = __chkstk_darwin(v407);
  v385 = (int *)((char *)&v353 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v51);
  v386 = (int *)((char *)&v353 - v53);
  v429 = type metadata accessor for UUID(0);
  v425 = *(_QWORD *)(v429 - 8);
  v54 = __chkstk_darwin(v429);
  v397 = (char *)&v353 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __chkstk_darwin(v54);
  v362 = (char *)&v353 - v57;
  v58 = __chkstk_darwin(v56);
  v60 = (char *)&v353 - v59;
  v61 = __chkstk_darwin(v58);
  v408 = (char *)&v353 - v62;
  v399 = v63;
  __chkstk_darwin(v61);
  v427 = (char *)&v353 - v64;
  v422 = (_QWORD *)type metadata accessor for BeaconEstimatedLocation(0);
  v410 = *(v422 - 1);
  v65 = __chkstk_darwin(v422);
  v421 = (uint64_t)&v353 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65);
  v364 = (char *)&v353 - v67;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v69 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v71 = (char *)&v353 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v72 = qword_1011B7160;
  v73 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v73);
  *((_QWORD *)&v353 - 4) = v72;
  v74 = (uint64_t)v423;
  *((_QWORD *)&v353 - 3) = v423;
  *((_QWORD *)&v353 - 2) = sub_1000683B8;
  *((_QWORD *)&v353 - 1) = 0;
  v75 = v428;
  OS_dispatch_queue.sync<A>(flags:execute:)(v71, sub_100151538);
  v387 = (uint64_t)v75;
  v76 = *(void (**)(char *, _QWORD *))(v69 + 8);
  v412 = v71;
  v413 = (_QWORD *)v68;
  v411 = v76;
  v76(v71, (_QWORD *)v68);
  v77 = *(_QWORD *)(a3 + 160);
  if (qword_1010EA060 != -1)
    swift_once(&qword_1010EA060, sub_100967AE8);
  v78 = sub_10001A9E8(v394, (uint64_t)qword_1011B7970);
  v79 = sub_10084B2A8(v78);
  v80 = v79[2];
  v424 = a3;
  v81 = v398;
  v419 = v60;
  v82 = v427;
  v395 = v77;
  if (v80 && (v83 = sub_100003FB0(v74), (v84 & 1) != 0))
  {
    v85 = *(_QWORD *)(v79[7] + 8 * v83);
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v420 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v86 = swift_allocObject(v420, 112, 7);
    *(_OWORD *)(v86 + 16) = xmmword_100E22B10;
    v87 = *(_QWORD *)(v85 + 16);
    *(_QWORD *)(v86 + 56) = &type metadata for Int;
    *(_QWORD *)(v86 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v86 + 32) = v87;
    v88 = UUID.uuidString.getter(v86);
    v90 = v89;
    *(_QWORD *)(v86 + 96) = &type metadata for String;
    v418 = (void (*)(_QWORD, _QWORD))sub_10001AA00();
    *(_QWORD *)(v86 + 104) = v418;
    *(_QWORD *)(v86 + 72) = v88;
    *(_QWORD *)(v86 + 80) = v90;
    v91 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v92 = (void *)static OS_os_log.default.getter(v91);
    v93 = static os_log_type_t.default.getter(v92);
    os_log(_:dso:log:type:_:)("BeaconStore removing %i locations for beacon %@", 47, 2, &_mh_execute_header, v92, v93, v86);
    swift_bridgeObjectRelease();

    v94 = *(void (**)(void))(v85 + 16);
    if (v94)
    {
      v95 = (*(unsigned __int8 *)(v410 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v410 + 80);
      v354 = v85;
      v96 = v85 + v95;
      v410 = *(_QWORD *)(v410 + 72);
      v409 = xmmword_100E22B00;
      v97 = (uint64_t)v364;
      v98 = v427;
      do
      {
        v428 = v94;
        sub_10005972C(v96, v97, type metadata accessor for BeaconEstimatedLocation);
        v99 = v425;
        v100 = v429;
        (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t))(v425 + 16))(v98, v423, v429);
        v101 = *(unsigned __int8 *)(v99 + 80);
        v102 = (v101 + 24) & ~v101;
        v103 = swift_allocObject(&unk_1010947E0, v102 + v399, v101 | 7);
        *(_QWORD *)(v103 + 16) = v426;
        (*(void (**)(uint64_t, char *, uint64_t))(v99 + 32))(v103 + v102, v98, v100);
        v104 = swift_retain();
        v105 = static os_log_type_t.default.getter(v104);
        if (qword_1010EA258 != -1)
          swift_once(&qword_1010EA258, sub_100B5D9CC);
        v106 = qword_1011B7D38;
        v107 = swift_allocObject(v420, 72, 7);
        *(_OWORD *)(v107 + 16) = v409;
        v108 = v421;
        sub_10005972C(v97, v421, type metadata accessor for BeaconEstimatedLocation);
        v109 = String.init<A>(describing:)(v108, v422);
        v110 = v418;
        *(_QWORD *)(v107 + 56) = &type metadata for String;
        *(_QWORD *)(v107 + 64) = v110;
        *(_QWORD *)(v107 + 32) = v109;
        *(_QWORD *)(v107 + 40) = v111;
        os_log(_:dso:log:_:_:)(v105, &_mh_execute_header, v106, "Attempting to remove: %@", 24, 2, v107);
        swift_bridgeObjectRelease();
        swift_retain();
        a3 = v424;
        sub_100875480(v97, v424, (uint64_t)sub_100876B98, v103);
        swift_release_n(v103, 2);
        sub_1000126B0(v97, type metadata accessor for BeaconEstimatedLocation);
        v96 += v410;
        v94 = (void (*)(void))((char *)v428 - 1);
      }
      while (v428 != (void (*)(void))1);
      swift_bridgeObjectRelease();
      v81 = v398;
      v82 = v427;
    }
    else
    {
      swift_bridgeObjectRelease();
      v82 = v427;
      v81 = v398;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v112 = v408;
  v113 = v81[3];
  v114 = v81[4];
  sub_10001AA44(v81, v113);
  v115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v114 + 8) + 8) + 32))(v113);
  __chkstk_darwin(v115);
  *((_QWORD *)&v353 - 2) = a3;
  *((_QWORD *)&v353 - 1) = v112;
  v116 = v426;
  swift_retain_n(v426, 2);
  v117 = (uint64_t)v402;
  v118 = (void (*)(void))v387;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
  v428 = v118;
  v119 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v388 + 6))(v117, 1, v407);
  v120 = v429;
  if (v119 == 1)
  {
    sub_100004048(v117, (uint64_t *)&unk_101105880);
    Transaction.capture()();
    v122 = static os_log_type_t.error.getter(v121);
    v123 = v425;
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v122, &_mh_execute_header, qword_1011B7D38, "Could not remove beaconNamingRecord", 35, 2, _swiftEmptyArrayStorage);
    v124 = v82;
  }
  else
  {
    v125 = v117;
    v126 = (void (*)(_QWORD, _QWORD))v386;
    sub_1000126EC(v125, (uint64_t)v386, type metadata accessor for BeaconNamingRecord);
    v127 = v112;
    v128 = v425;
    v129 = v82;
    (*(void (**)(char *, char *, uint64_t))(v425 + 16))(v82, v127, v120);
    v130 = *(unsigned __int8 *)(v128 + 80);
    v131 = (v130 + 24) & ~v130;
    v132 = (uint64_t (*)(char))v116;
    v133 = v129;
    v134 = (v399 + v131 + 7) & 0xFFFFFFFFFFFFFFF8;
    v135 = swift_allocObject(&unk_1010947B8, v134 + 16, v130 | 7);
    *(_QWORD *)(v135 + 16) = a3;
    (*(void (**)(uint64_t, char *, uint64_t))(v128 + 32))(v135 + v131, v133, v120);
    v136 = (uint64_t (**)(char))(v135 + v134);
    *v136 = sub_100876540;
    v136[1] = v132;
    swift_retain();
    v137 = swift_retain();
    v138 = static os_log_type_t.default.getter(v137);
    v139 = a3;
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v140 = qword_1011B7D38;
    v141 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v142 = swift_allocObject(v141, 72, 7);
    *(_OWORD *)(v142 + 16) = xmmword_100E22B00;
    v143 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v385;
    sub_10005972C((uint64_t)v126, (uint64_t)v385, type metadata accessor for BeaconNamingRecord);
    v144 = String.init<A>(describing:)(v143, v407);
    v146 = v145;
    *(_QWORD *)(v142 + 56) = &type metadata for String;
    *(_QWORD *)(v142 + 64) = sub_10001AA00();
    *(_QWORD *)(v142 + 32) = v144;
    *(_QWORD *)(v142 + 40) = v146;
    os_log(_:dso:log:_:_:)(v138, &_mh_execute_header, v140, "Attempting to remove: %@", 24, 2, v142);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100869614((uint64_t)v126, v139, (void (*)(_QWORD))sub_100876A7C, v135);
    swift_release_n(v135, 2);
    sub_1000126B0((uint64_t)v126, type metadata accessor for BeaconNamingRecord);
    a3 = v139;
    v81 = v398;
    v123 = v425;
    v116 = v426;
    v120 = v429;
    v124 = v427;
  }
  swift_release_n(v116, 2);
  v147 = *(void (**)(char *, uint64_t))(v123 + 8);
  v147(v408, v120);
  v149 = v81[3];
  v148 = v81[4];
  sub_10001AA44(v81, v149);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v148 + 8) + 8) + 32))(v149);
  if (qword_1010EA1B8 != -1)
    swift_once(&qword_1010EA1B8, sub_100AFC4C0);
  v150 = v394;
  v151 = sub_10001A9E8(v394, (uint64_t)qword_1011B7C40);
  v152 = v403;
  v153 = v392;
  v385 = *(_DWORD **)(v403 + 16);
  v154 = ((uint64_t (*)(char *, uint64_t, uint64_t))v385)(v392, v151, v150);
  __chkstk_darwin(v154);
  *((_QWORD *)&v353 - 4) = v155;
  *((_QWORD *)&v353 - 3) = v124;
  *((_QWORD *)&v353 - 2) = v153;
  v156 = v428;
  OS_dispatch_queue.sync<A>(execute:)(sub_100143FA8, &v353 - 12, &type metadata for Bool);
  v428 = v156;
  v157 = v124;
  v158 = aBlock;
  v386 = *(int **)(v152 + 8);
  ((void (*)(char *, uint64_t))v386)(v153, v150);
  v159 = ((uint64_t (*)(char *, uint64_t))v147)(v157, v120);
  v418 = (void (*)(_QWORD, _QWORD))v147;
  if (v158 == 1)
  {
    v160 = static os_log_type_t.info.getter(v159);
    v161 = v398;
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v162 = qword_1011B7D38;
    v163 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v164 = swift_allocObject(v163, 72, 7);
    *(_OWORD *)(v164 + 16) = xmmword_100E22B00;
    v166 = v161[3];
    v165 = v161[4];
    sub_10001AA44(v161, v166);
    v167 = v427;
    v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v165 + 8) + 8) + 32))(v166);
    v169 = UUID.uuidString.getter(v168);
    v171 = v170;
    v418(v167, v429);
    *(_QWORD *)(v164 + 56) = &type metadata for String;
    *(_QWORD *)(v164 + 64) = sub_10001AA00();
    *(_QWORD *)(v164 + 32) = v169;
    *(_QWORD *)(v164 + 40) = v171;
    os_log(_:dso:log:_:_:)(v160, &_mh_execute_header, v162, "KeySyncRecord removed for %@.", 29, 2, v164);
    v172 = v406;
  }
  else
  {
    LODWORD(v422) = static os_log_type_t.error.getter(v159);
    v161 = v398;
    v172 = v406;
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v173 = qword_1011B7D38;
    v174 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v175 = swift_allocObject(v174, 72, 7);
    *(_OWORD *)(v175 + 16) = xmmword_100E22B00;
    v177 = v161[3];
    v176 = v161[4];
    sub_10001AA44(v161, v177);
    v178 = v427;
    v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v176 + 8) + 8) + 32))(v177);
    v180 = UUID.uuidString.getter(v179);
    v182 = v181;
    v418(v178, v429);
    *(_QWORD *)(v175 + 56) = &type metadata for String;
    *(_QWORD *)(v175 + 64) = sub_10001AA00();
    *(_QWORD *)(v175 + 32) = v180;
    *(_QWORD *)(v175 + 40) = v182;
    os_log(_:dso:log:_:_:)(v422, &_mh_execute_header, v173, "Could not remove KeySyncRecord for %@.", 38, 2, v175);
  }
  swift_bridgeObjectRelease();
  v183 = v405;
  sub_1008892B4(v405);
  v184 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v404 + 48))(v183, 1, v172);
  v185 = v393;
  if (v184 == 1)
  {
    sub_100004048(v183, (uint64_t *)&unk_1010F47D0);
  }
  else
  {
    v186 = v379;
    sub_1000126EC(v183, v379, type metadata accessor for KeyAlignmentRecord);
    v187 = v426;
    v188 = swift_retain();
    v189 = static os_log_type_t.default.getter(v188);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v190 = qword_1011B7D38;
    v191 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v192 = swift_allocObject(v191, 72, 7);
    *(_OWORD *)(v192 + 16) = xmmword_100E22B00;
    v193 = v378;
    sub_10005972C(v186, v378, type metadata accessor for KeyAlignmentRecord);
    v194 = String.init<A>(describing:)(v193, v172);
    v195 = v186;
    v196 = v194;
    v198 = v197;
    *(_QWORD *)(v192 + 56) = &type metadata for String;
    *(_QWORD *)(v192 + 64) = sub_10001AA00();
    *(_QWORD *)(v192 + 32) = v196;
    *(_QWORD *)(v192 + 40) = v198;
    os_log(_:dso:log:_:_:)(v189, &_mh_execute_header, v190, "Attempting to remove: %@", 24, 2, v192);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100874558(v195, a3, (uint64_t)sub_1008769C0, v187);
    swift_release_n(v187, 2);
    sub_1000126B0(v195, type metadata accessor for KeyAlignmentRecord);
    v185 = v393;
    v161 = v398;
  }
  v199 = v161[3];
  v200 = v161[4];
  sub_10001AA44(v161, v199);
  v201 = (*(uint64_t (**)(uint64_t, uint64_t))(v200 + 104))(v199, v200);
  v202 = v427;
  if ((v201 & 1) != 0)
  {
    if (qword_1010E9D40 != -1)
      swift_once(&qword_1010E9D40, sub_100601994);
    v203 = v394;
    v204 = sub_10001A9E8(v394, (uint64_t)qword_1011B7200);
    v205 = v392;
    v206 = ((uint64_t (*)(char *, uint64_t, uint64_t))v385)(v392, v204, v203);
    __chkstk_darwin(v206);
    v207 = v423;
    *((_QWORD *)&v353 - 4) = v208;
    *((_QWORD *)&v353 - 3) = v207;
    *((_QWORD *)&v353 - 2) = v205;
    v209 = v428;
    OS_dispatch_queue.sync<A>(execute:)(sub_10044AB30, &v353 - 12, &type metadata for Bool);
    v428 = v209;
    v210 = aBlock;
    v211 = ((uint64_t (*)(char *, uint64_t))v386)(v205, v203);
    v212 = static os_log_type_t.info.getter(v211);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v213 = qword_1011B7DF0;
    v214 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v215 = swift_allocObject(v214, 72, 7);
    *(_OWORD *)(v215 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v215 + 56) = &type metadata for Bool;
    *(_QWORD *)(v215 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v215 + 32) = v210;
    os_log(_:dso:log:_:_:)(v212, &_mh_execute_header, v213, "Remove BeaconProductInfoRecord? [%d]", v353);
    swift_bridgeObjectRelease();
    v216 = v425;
    v202 = v427;
    v185 = v393;
  }
  else
  {
    v216 = v425;
  }
  v217 = sub_10001A9A8(&qword_1011003C0);
  v218 = *(_QWORD *)(v216 + 72);
  v219 = *(unsigned __int8 *)(v216 + 80);
  v387 = ~v219;
  v220 = (v219 + 32) & ~v219;
  v410 = v217;
  v408 = (char *)(v220 + v218);
  v421 = v219 | 7;
  v221 = swift_allocObject(v217, v220 + v218, v219 | 7);
  v420 = xmmword_100E22B00;
  *(_OWORD *)(v221 + 16) = xmmword_100E22B00;
  *(_QWORD *)&v409 = v220;
  v222 = v423;
  v422 = *(_QWORD **)(v216 + 16);
  ((void (*)(uint64_t, void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t))v422)(v221 + v220, v423, v429);
  v223 = v426;
  swift_retain();
  sub_10075B3B4(v221, (uint64_t)sub_100876568, v223);
  swift_bridgeObjectRelease();
  swift_release(v223);
  v224 = sub_10001E350();
  __chkstk_darwin(v224);
  *((_QWORD *)&v353 - 2) = v222;
  v225 = v428;
  v227 = sub_10001CEFC((uint64_t (*)(char *))sub_100876590, (unint64_t *)&v353 - 4, v226);
  v388 = v225;
  v228 = *(void (**)(void))(v227 + 16);
  v379 = v219;
  if (v228)
  {
    v229 = (uint64_t)v417;
    v407 = (uint64_t)&v417[*(int *)(v383 + 20)];
    v230 = (*(unsigned __int8 *)(v384 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v384 + 80);
    v383 = v227;
    v231 = v227 + v230;
    v405 = *(_QWORD *)(a3 + 88);
    v406 = (v219 + 24) & v387;
    v404 = *(_QWORD *)(v384 + 72);
    v403 = (v399 + v406 + 7) & 0xFFFFFFFFFFFFFFF8;
    v402 = (char *)((v403 + 15) & 0xFFFFFFFFFFFFFFF8);
    v401 = (uint64_t)(v402 + 16);
    v232 = v429;
    v233 = v414;
    v234 = v412;
    do
    {
      v428 = v228;
      sub_10005972C(v231, v229, type metadata accessor for SafeLocation);
      v235 = a3;
      v236 = (void (*)(char *, char *, uint64_t))v422;
      ((void (*)(char *, uint64_t, uint64_t))v422)(v202, v407, v232);
      sub_1000126B0(v229, type metadata accessor for SafeLocation);
      v237 = v421;
      v238 = swift_allocObject(v410, v408, v421);
      *(_OWORD *)(v238 + 16) = v420;
      v236((char *)(v238 + v409), (char *)v423, v429);
      v239 = v419;
      v236(v419, v202, v429);
      v240 = swift_allocObject(&unk_1010946F0, v401, v237);
      *(_QWORD *)(v240 + 16) = v238;
      (*(void (**)(uint64_t, char *, uint64_t))(v425 + 32))(v240 + v406, v239, v429);
      *(_QWORD *)(v240 + v403) = v235;
      v241 = (void (**)(void *, char))&v402[v240];
      v242 = (void (*)(void *, char))v426;
      *v241 = sub_1008765AC;
      v241[1] = v242;
      v434 = (uint64_t)sub_100876678;
      v435 = v240;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v432 = sub_100016FB8;
      v433 = &unk_101094708;
      v243 = _Block_copy(&aBlock);
      swift_retain_n(v242, 2);
      swift_retain();
      v244 = swift_bridgeObjectRetain(v238);
      static DispatchQoS.unspecified.getter(v244);
      v430 = _swiftEmptyArrayStorage;
      v245 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v246 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v247 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v248 = v413;
      v249 = v245;
      a3 = v424;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v430, v246, v247, v413, v249);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v233, v234, v243);
      v250 = v243;
      v202 = v427;
      _Block_release(v250);
      v411(v234, v248);
      (*(void (**)(char *, uint64_t))(v415 + 8))(v233, v416);
      v251 = v435;
      v232 = v429;
      swift_bridgeObjectRelease();
      swift_release(v242);
      v252 = v251;
      v229 = (uint64_t)v417;
      swift_release(v252);
      v418(v202, v232);
      v231 += v404;
      v228 = (void (*)(void))((char *)v428 - 1);
    }
    while (v428 != (void (*)(void))1);
    swift_bridgeObjectRelease();
    v216 = v425;
    v253 = v391;
    v185 = v393;
  }
  else
  {
    swift_bridgeObjectRelease();
    v253 = v391;
  }
  v255 = v421;
  v254 = (void (*)(char *, uint64_t, uint64_t))v422;
  if ((v389 & 1) != 0)
  {
    sub_100030784((uint64_t)v398, (uint64_t)&aBlock);
    v256 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v257 = (uint64_t)v380;
    v258 = swift_dynamicCast(v380, &aBlock, v256, v253, 6);
    v259 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v390 + 56);
    if ((v258 & 1) != 0)
    {
      v259(v257, 0, 1, v253);
      v260 = v257;
      v261 = v377;
      sub_1000126EC(v260, v377, type metadata accessor for OwnedBeaconRecord);
      v262 = v365;
      sub_10000F9B8(v261 + *(int *)(v253 + 28), v365, &qword_1010ED860);
      v263 = v429;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48))(v262, 1, v429) == 1)
      {
        sub_1000126B0(v261, type metadata accessor for OwnedBeaconRecord);
        sub_100004048(v262, &qword_1010ED860);
      }
      else
      {
        v264 = (uint64_t)v362;
        v428 = *(void (**)(void))(v216 + 32);
        v428();
        v265 = v360;
        sub_10081EDA8(v264, v360);
        v266 = v359;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v359 + 48))(v265, 1, v363) == 1)
        {
          v418(v264, v263);
          sub_1000126B0(v261, type metadata accessor for OwnedBeaconRecord);
          sub_100004048(v265, (uint64_t *)&unk_1010FF7F0);
        }
        else
        {
          sub_1000126EC(v265, v185, type metadata accessor for OwnedBeaconGroup);
          ((void (*)(char *, uint64_t, uint64_t))v422)(v202, v264, v263);
          v267 = v356;
          sub_10005972C(v185, v356, type metadata accessor for OwnedBeaconGroup);
          v268 = (v379 + 24) & v387;
          v269 = *(unsigned __int8 *)(v266 + 80);
          v270 = (v268 + v399 + v269) & ~v269;
          v271 = v426;
          v272 = v270 + v355;
          v273 = v255 | v269;
          v274 = v263;
          v275 = a3;
          v276 = (v270 + v355) & 0xFFFFFFFFFFFFFFF8;
          v277 = swift_allocObject(&unk_101094790, v276 + 16, v273);
          *(_QWORD *)(v277 + 16) = v271;
          ((void (*)(uint64_t, char *, uint64_t))v428)(v277 + v268, v427, v274);
          sub_1000126EC(v267, v277 + v270, type metadata accessor for OwnedBeaconGroup);
          *(_BYTE *)(v277 + v272) = v358 & 1;
          *(_QWORD *)(v276 + v277 + 8) = v275;
          swift_retain();
          v278 = swift_retain();
          v279 = static os_log_type_t.default.getter(v278);
          if (qword_1010EA258 != -1)
            swift_once(&qword_1010EA258, sub_100B5D9CC);
          v280 = qword_1011B7D38;
          v281 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v282 = swift_allocObject(v281, 72, 7);
          *(_OWORD *)(v282 + 16) = v420;
          v283 = v393;
          v284 = v357;
          sub_10005972C(v393, v357, type metadata accessor for OwnedBeaconGroup);
          v285 = String.init<A>(describing:)(v284, v363);
          v287 = v286;
          *(_QWORD *)(v282 + 56) = &type metadata for String;
          *(_QWORD *)(v282 + 64) = sub_10001AA00();
          *(_QWORD *)(v282 + 32) = v285;
          *(_QWORD *)(v282 + 40) = v287;
          os_log(_:dso:log:_:_:)(v279, &_mh_execute_header, v280, "Attempting to remove: %@", 24, 2, v282);
          swift_bridgeObjectRelease();
          swift_retain();
          sub_100873678(v283, v275, (uint64_t)sub_10087693C, v277);
          swift_release_n(v277, 2);
          sub_1000126B0(v283, type metadata accessor for OwnedBeaconGroup);
          v418(v362, v274);
          sub_1000126B0(v377, type metadata accessor for OwnedBeaconRecord);
          a3 = v275;
        }
        v253 = v391;
      }
      v254 = (void (*)(char *, uint64_t, uint64_t))v422;
    }
    else
    {
      v259(v257, 1, 1, v253);
      sub_100004048(v257, (uint64_t *)&unk_1010F47C0);
    }
  }
  My = type metadata accessor for Feature.FindMy(0);
  v433 = (void *)My;
  v434 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v289 = sub_100018F08(&aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v289, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&aBlock);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
  if ((My & 1) != 0)
  {
    sub_100030784((uint64_t)v398, (uint64_t)&aBlock);
    v290 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v291 = (uint64_t)v381;
    v292 = swift_dynamicCast(v381, &aBlock, v290, v253, 6);
    v293 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v390 + 56);
    if ((v292 & 1) != 0)
    {
      v293(v291, 0, 1, v253);
      v294 = v291;
      v295 = v382;
      sub_1000126EC(v294, v382, type metadata accessor for OwnedBeaconRecord);
      v254(v397, v295 + *(int *)(v253 + 20), v429);
      if (qword_1010EA490 != -1)
        swift_once(&qword_1010EA490, sub_100C8FD48);
      v296 = v394;
      v297 = sub_10001A9E8(v394, (uint64_t)qword_1011B8038);
      v298 = UUID.uuidString.getter(v297);
      v299 = v392;
      URL.appendingPathComponent(_:isDirectory:)(v298, v300, 1);
      swift_bridgeObjectRelease();
      v301 = v366;
      v302 = (void (*)(uint64_t, char *, uint64_t))v385;
      ((void (*)(char *, char *, uint64_t))v385)(v366, v299, v296);
      v303 = v374;
      v304 = (uint64_t)v368;
      v428 = (void (*)(void))&v368[*(int *)(v374 + 40)];
      v305 = v428;
      v306 = type metadata accessor for DirectorySequence(0);
      v423 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v306 - 8) + 56);
      v423(v305, 1, 1, v306);
      v302(v304, v301, v296);
      *(_QWORD *)(v304 + *(int *)(v303 + 36)) = v395;
      v307 = v367;
      v302((uint64_t)v367, v301, v296);
      swift_retain();
      v308 = (uint64_t)v370;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v307, 0, 0);
      v309 = v301;
      v310 = (void (*)(char *, uint64_t))v386;
      ((void (*)(char *, uint64_t))v386)(v309, v296);
      v423(v308, 0, 1, v306);
      sub_100004084(v308, (uint64_t)v428, (uint64_t *)&unk_1010F77A0);
      v311 = v371;
      sub_100005CF0(v304, v371, &qword_1010FD140);
      v312 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v372 + 56);
      v313 = (uint64_t)v369;
      v312(v369, 1, 1, v303);
      sub_100004048(v313, &qword_1010FD150);
      sub_100005CF0(v311, v313, &qword_1010FD140);
      v312((char *)v313, 0, 1, v303);
      v314 = v373;
      sub_100005CF0(v313, v373, &qword_1010FD148);
      v310(v392, v296);
      v315 = sub_10001A9A8(&qword_1010FD158);
      v316 = (char *)swift_allocObject(v315, *(unsigned int *)(v315 + 48), *(unsigned __int16 *)(v315 + 52));
      sub_100005CF0(v314, (uint64_t)&v316[*(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v316 + 16)], &qword_1010FD148);
      v317 = *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v316 + 16);
      v414 = v316;
      v318 = (uint64_t)&v316[v317];
      v319 = sub_10001A9A8(&qword_1010FD170);
      v320 = (_QWORD *)swift_allocObject(v319, *(unsigned int *)(v319 + 48), *(unsigned __int16 *)(v319 + 52));
      sub_10000F9B8(v318, (uint64_t)v320 + *(_QWORD *)(class metadata base offset for _IteratorBox + *v320 + 16), &qword_1010FD148);
      v321 = (char *)v320 + *(_QWORD *)(class metadata base offset for _IteratorBox + *v320 + 16);
      v413 = v320;
      swift_retain();
      v322 = v376;
      v423 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v321;
      sub_10084E81C(v376);
      v323 = v400;
      v428 = *(void (**)(void))(v375 + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v428)(v322, 1, v400) == 1)
      {
        v324 = v429;
      }
      else
      {
        v417 = (char *)((v379 + 24) & v387);
        v416 = (unint64_t)&v417[v399 + v379] & v387;
        v415 = v416 + v399;
        v335 = (uint64_t)v361;
        v336 = v426;
        v324 = v429;
        do
        {
          sub_1000126EC(v322, v335, type metadata accessor for OwnedDeviceKeyRecord);
          v337 = v335 + *(int *)(v323 + 20);
          v338 = v427;
          v339 = (void (*)(char *, uint64_t, uint64_t))v422;
          ((void (*)(char *, char *, uint64_t))v422)(v427, v397, v324);
          v340 = v419;
          v339(v419, v337, v324);
          v341 = swift_allocObject(&unk_101094768, v415, v421);
          *(_QWORD *)(v341 + 16) = v336;
          v342 = *(void (**)(char *, char *, uint64_t))(v425 + 32);
          v342(&v417[v341], v338, v324);
          v342((char *)(v341 + v416), v340, v324);
          v343 = swift_retain();
          v344 = static os_log_type_t.default.getter(v343);
          if (qword_1010EA258 != -1)
            swift_once(&qword_1010EA258, sub_100B5D9CC);
          v345 = qword_1011B7D38;
          v346 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v347 = swift_allocObject(v346, 72, 7);
          *(_OWORD *)(v347 + 16) = v420;
          v348 = v396;
          sub_10005972C(v335, v396, type metadata accessor for OwnedDeviceKeyRecord);
          v349 = String.init<A>(describing:)(v348, v400);
          v351 = v350;
          *(_QWORD *)(v347 + 56) = &type metadata for String;
          *(_QWORD *)(v347 + 64) = sub_10001AA00();
          *(_QWORD *)(v347 + 32) = v349;
          *(_QWORD *)(v347 + 40) = v351;
          v323 = v400;
          os_log(_:dso:log:_:_:)(v344, &_mh_execute_header, v345, "Attempting to remove: %@", 24, 2, v347);
          swift_bridgeObjectRelease();
          swift_retain();
          a3 = v424;
          sub_100861BC8(v335, v424, (void (*)(_QWORD))sub_1008767CC, v341);
          swift_release_n(v341, 2);
          sub_1000126B0(v335, type metadata accessor for OwnedDeviceKeyRecord);
          sub_10084E81C(v322);
          v352 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v428)(v322, 1, v323);
          v336 = v426;
          v324 = v429;
        }
        while (v352 != 1);
      }
      swift_release_n(v413, 2);
      swift_release(v414);
      v418(v397, v324);
      sub_1000126B0(v382, type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      v293(v291, 1, 1, v253);
      sub_100004048(v291, (uint64_t *)&unk_1010F47C0);
    }
  }
  v325 = v398;
  v326 = *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v327 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, a3, v326, (char *)&type metadata for () + 8, v327);
  v328 = aBlock;
  v329 = v325[3];
  v330 = v325[4];
  v331 = sub_10001AA44(v325, v329);
  sub_100DF5D30((uint64_t)v331, 0, 0, v328, v329, v330);
  swift_release(v328);
  sub_100030784((uint64_t)v325, (uint64_t)&aBlock);
  v332 = swift_allocObject(&unk_101094740, 64, 7);
  *(_QWORD *)(v332 + 16) = a3;
  sub_10000F9FC(&aBlock, v332 + 24);
  swift_retain();
  v333 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  unsafeFromAsyncTask<A>(_:)(&aBlock, &unk_10110A940, v332, v333);
  return swift_release(v332);
}

void sub_10083E500(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  Transaction.capture()();
  if ((a1 & 1) == 0)
  {
    v3 = static os_log_type_t.error.getter(v2);
    v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
    v6 = UUID.uuidString.getter(v5);
    v8 = v7;
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = sub_10001AA00();
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = v8;
    v9 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v10 = (id)static OS_os_log.default.getter(v9);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v10, "BeaconStore failed to remove locations for beacon %@", 52, 2, v5);
    swift_bridgeObjectRelease(v5);

  }
}

uint64_t sub_10083E600(char a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;

  Transaction.capture()();
  if ((a1 & 1) != 0)
  {
    v8 = static os_log_type_t.error.getter(v7);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v9 = qword_1011B7D38;
    v10 = v8;
    v11 = a3;
    v12 = 35;
  }
  else
  {
    v13 = static os_log_type_t.default.getter(v7);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v9 = qword_1011B7D38;
    v10 = v13;
    v11 = a4;
    v12 = 27;
  }
  return os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v9, v11, v12, 2, _swiftEmptyArrayStorage);
}

BOOL sub_10083E6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  _QWORD v6[4];

  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SafeLocation(0) + 52));
  v6[2] = a2;
  swift_bridgeObjectRetain(v3);
  v4 = sub_1007EF65C((uint64_t (*)(char *))sub_1008778C4, (_BOOL8)v6, v3);
  swift_bridgeObjectRelease(v3);
  return v4;
}

void sub_10083E768(void *a1, char a2, uint64_t a3, const char *a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  Transaction.capture()();
  if ((a2 & 1) != 0)
  {
    v9 = a1;
    v10 = static os_log_type_t.error.getter(v9);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
    v21 = v9;
    type metadata accessor for SPSeparationMonitoringError(0);
    v14 = v13;
    v15 = v9;
    v16 = String.init<A>(describing:)(&v21, v14);
    v18 = v17;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    *(_QWORD *)(v12 + 64) = sub_10001AA00();
    *(_QWORD *)(v12 + 32) = v16;
    *(_QWORD *)(v12 + 40) = v18;
    v19 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v20 = (void *)static OS_os_log.default.getter(v19);
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v20, a4, a5, 2, v12);
    swift_bridgeObjectRelease(v12);

    sub_100294B28(a1, 1);
  }
}

void sub_10083E894(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[5];

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7DF8);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(28, -1);
    v30 = v14;
    v28 = a1;
    v19 = v18;
    v20 = swift_slowAlloc(32, -1);
    v32 = a4;
    v29 = v20;
    *(_DWORD *)v19 = 141558531;
    v33 = 1752392040;
    v34[0] = v20;
    v31 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v9, v21);
    v24 = v23;
    v33 = sub_100016940(v22, v23, v34);
    LOBYTE(a5) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(_WORD *)(v19 + 22) = 1024;
    LODWORD(v33) = v28 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, (char *)&v33 + 4, v19 + 24, v19 + 28);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Remove OwnedBeaconGroup %{private,mask.hash}s? %{BOOL}d", (uint8_t *)v19, 0x1Cu);
    v25 = v29;
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    a4 = v32;
    swift_slowDealloc(v25, -1, -1);
    v14 = v30;
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  sub_100367170(v14);
  if ((a5 & 1) != 0)
  {
    v34[3] = type metadata accessor for OwnedBeaconGroup(0);
    v34[4] = sub_100006204(&qword_10110A960, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_100E3AC0C);
    v26 = sub_100018F08(v34);
    sub_10005972C(a4, (uint64_t)v26, type metadata accessor for OwnedBeaconGroup);
    PassthroughSubject.send(_:)(v34);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
  }
}

void sub_10083EBA0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(_BYTE *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t, uint64_t);
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(_BYTE *, uint64_t);
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void (*v54)(_BYTE *, uint64_t);
  void (*v55)(_BYTE *, uint64_t);
  _BYTE v56[4];
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v56[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v9);
  v14 = &v56[-v13];
  v15 = __chkstk_darwin(v12);
  v17 = &v56[-v16];
  __chkstk_darwin(v15);
  v19 = &v56[-v18];
  Transaction.capture()();
  if ((a1 & 1) != 0)
  {
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B8520);
    v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
    v21(v19, a3, v7);
    v22 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v21)(v17, a4, v7);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = swift_slowAlloc(42, -1);
      v27 = swift_slowAlloc(64, -1);
      v58 = v27;
      *(_DWORD *)v26 = 141558787;
      v59 = 1752392040;
      v60 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v57 = v25;
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v7, v28);
      v31 = v30;
      v59 = sub_100016940(v29, v30, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease(v31);
      v32 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v32(v19, v7);
      *(_WORD *)(v26 + 22) = 2160;
      v59 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v26 + 24, v26 + 32);
      *(_WORD *)(v26 + 32) = 2081;
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v7, v28);
      v35 = v34;
      v59 = sub_100016940(v33, v34, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v26 + 34, v26 + 42);
      swift_bridgeObjectRelease(v35);
      v32(v17, v7);
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v57, "OwnedDeviceKeyRecord removed deviceIdentifier:%{private,mask.hash}s, uuid:%{private,mask.hash}s.", (uint8_t *)v26, 0x2Au);
      v36 = v58;
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      v54 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v54(v19, v7);
      v54(v17, v7);
    }

  }
  else
  {
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v37 = type metadata accessor for Logger(0);
    sub_10001A9E8(v37, (uint64_t)qword_1011B8520);
    v38 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
    v38(v14, a3, v7);
    v39 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v38)(v11, a4, v7);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    v42 = v41;
    if (os_log_type_enabled(v40, v41))
    {
      v43 = swift_slowAlloc(42, -1);
      v44 = swift_slowAlloc(64, -1);
      v58 = v44;
      *(_DWORD *)v43 = 141558787;
      v59 = 1752392040;
      v60 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v43 + 4, v43 + 12);
      *(_WORD *)(v43 + 12) = 2081;
      v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v57 = v42;
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v7, v45);
      v48 = v47;
      v59 = sub_100016940(v46, v47, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v43 + 14, v43 + 22);
      swift_bridgeObjectRelease(v48);
      v49 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v49(v14, v7);
      *(_WORD *)(v43 + 22) = 2160;
      v59 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v43 + 24, v43 + 32);
      *(_WORD *)(v43 + 32) = 2081;
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v7, v45);
      v52 = v51;
      v59 = sub_100016940(v50, v51, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v43 + 34, v43 + 42);
      swift_bridgeObjectRelease(v52);
      v49(v11, v7);
      _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v57, "Could not remove OwnedDeviceKeyRecord deviceIdentifier:%{private,mask.hash}s, uuid:%{private,mask.hash}s.", (uint8_t *)v43, 0x2Au);
      v53 = v58;
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      v55 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
      v55(v14, v7);
      v55(v11, v7);
    }

  }
}

uint64_t sub_10083F128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v6);
  v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10083F19C, 0, 0);
}

uint64_t sub_10083F19C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uid_t v7;
  _QWORD *v8;

  v1 = v0[4];
  v2 = (_QWORD *)v0[5];
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v4 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v1, v3, &type metadata for () + 1, v4);
  v0[10] = v0[2];
  v6 = v2[3];
  v5 = v2[4];
  sub_10001AA44(v2, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 32))(v6);
  v7 = getuid();
  sub_100A06500(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1010FCEF4);
  v0[11] = v8;
  *v8 = v0;
  v8[1] = sub_10083F29C;
  return sub_100479DCC(v0[9], v0[8]);
}

uint64_t sub_10083F29C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10083F380;
  }
  else
  {
    v5 = v2[9];
    v7 = v2[7];
    v6 = v2[8];
    v8 = v2[6];
    swift_release();
    v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v9(v6, v8);
    v9(v5, v8);
    v4 = sub_10083F334;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10083F334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  **(_BYTE **)(v0 + 24) = *(_QWORD *)(v0 + 96) != 0;
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10083F380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_errorRelease(v1);
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v6(v2, v5);
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  **(_BYTE **)(v0 + 24) = *(_QWORD *)(v0 + 96) != 0;
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10083F414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  NSString v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  Class isa;
  id v28;
  NSString v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t aBlock;
  unint64_t v98;
  uint64_t (*v99)(uint64_t);
  void *v100;
  uint64_t (*v101)();
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;

  v79 = a7;
  v91 = a1;
  v92 = a5;
  v95 = a4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v86 = *(_QWORD *)(v10 - 8);
  v87 = v10;
  __chkstk_darwin(v10);
  v85 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for DispatchQoS(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for CloudKitChangeSet(0);
  v88 = *(_QWORD *)(v81 - 8);
  v13 = *(_QWORD *)(v88 + 64);
  v14 = __chkstk_darwin(v81);
  v80 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v89 = (uint64_t)&v78 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v78 - v17;
  v19 = type metadata accessor for Notification(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  aBlock = 0x7365547265646E75;
  v98 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v103, &aBlock, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  v94 = v103;
  v93 = a6;
  if (v103 == 1)
  {
    v23 = String._bridgeToObjectiveC()();
    v24 = type metadata accessor for UUID(0);
    v100 = (void *)v24;
    v25 = sub_100018F08(&aBlock);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v25, a3, v24);
    Notification.init(name:object:userInfo:)(v23, &aBlock, 0);
    v26 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    isa = Notification._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v26, "postNotification:", isa);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  else
  {
    v28 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    UUID.uuidString.getter(v28);
    v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v30 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "setObject:forKey:", v29, v30);

  }
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v31 = type metadata accessor for Logger(0);
  sub_10001A9E8(v31, (uint64_t)qword_1011B77E8);
  v96 = a3;
  v32 = sub_10005972C(a3, (uint64_t)v18, type metadata accessor for CloudKitChangeSet);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  v35 = os_log_type_enabled(v33, v34);
  v90 = a2;
  if (v35)
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    aBlock = v37;
    *(_DWORD *)v36 = 136446210;
    v38 = sub_100ADBE14();
    v103 = (_QWORD *)sub_100016940(v38, v39, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v18, type metadata accessor for CloudKitChangeSet);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Begin applying %{public}s", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v18, type metadata accessor for CloudKitChangeSet);
  }

  v40 = v95;
  v41 = v94;
  v42 = mach_continuous_time();
  v43 = v96;
  if ((v41 & 1) != 0)
  {
    sub_1006BB4BC((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    v44 = v89;
    sub_10005972C(v43, v89, type metadata accessor for CloudKitChangeSet);
    v45 = *(unsigned __int8 *)(v88 + 80);
    v46 = (v45 + 16) & ~v45;
    v47 = (v13 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
    v48 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
    v49 = swift_allocObject(&unk_101094FD8, v48 + 16, v45 | 7);
    sub_1000126EC(v44, v49 + v46, type metadata accessor for CloudKitChangeSet);
    v50 = (_QWORD *)(v49 + v47);
    v51 = v90;
    *v50 = v91;
    v50[1] = v51;
    v52 = (_QWORD *)(v49 + v48);
    v53 = v93;
    *v52 = v92;
    v52[1] = v53;
    v101 = sub_10087A168;
    v102 = v49;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v98 = 1107296256;
    v99 = sub_100016FB8;
    v100 = &unk_101094FF0;
    v54 = _Block_copy(&aBlock);
    swift_retain();
    v55 = swift_retain();
    v56 = v82;
    static DispatchQoS.unspecified.getter(v55);
    v103 = _swiftEmptyArrayStorage;
    v57 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v58 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v59 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v60 = v85;
    v61 = v58;
    v62 = v87;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v103, v61, v59, v87, v57);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v56, v60, v54);
    _Block_release(v54);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v60, v62);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v56, v84);
  }
  else
  {
    v63 = v42;
    v64 = sub_10083FE48(*(_QWORD *)(v96 + *(int *)(v81 + 24)));
    v95 = sub_1007FDEC4();
    v65 = v89;
    sub_10005972C(v43, v89, type metadata accessor for CloudKitChangeSet);
    v66 = *(unsigned __int8 *)(v88 + 80);
    v67 = (v66 + 32) & ~v66;
    v68 = (v13 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
    v69 = (v68 + 23) & 0xFFFFFFFFFFFFFFF8;
    v70 = (v69 + 15) & 0xFFFFFFFFFFFFFFF8;
    v71 = (v70 + 23) & 0xFFFFFFFFFFFFFFF8;
    v72 = swift_allocObject(&unk_101094FB0, v71 + 8, v66 | 7);
    *(_QWORD *)(v72 + 16) = v40;
    *(_QWORD *)(v72 + 24) = v63;
    sub_1000126EC(v65, v72 + v67, type metadata accessor for CloudKitChangeSet);
    v73 = (_QWORD *)(v72 + v68);
    v74 = v90;
    *v73 = v91;
    v73[1] = v74;
    *(_QWORD *)(v72 + v69) = v64;
    v75 = (_QWORD *)(v72 + v70);
    v76 = v93;
    *v75 = v92;
    v75[1] = v76;
    *(_QWORD *)(v72 + v71) = v79;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100BBE8FC(v96, (uint64_t)sub_100879FF4, v72);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_10083FE48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id *v82;
  id v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v78 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for BeaconStoreFileRecord(0);
  v76 = *(_QWORD *)(v80 - 8);
  v9 = __chkstk_darwin(v80);
  v86 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v87 = (uint64_t)&v69 - v11;
  v12 = sub_10001A9A8(&qword_10110AA18);
  v13 = __chkstk_darwin(v12);
  v15 = (int64_t *)((char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v17 = (id *)((char *)&v69 - v16);
  v18 = *(_QWORD *)(a1 + 64);
  v70 = a1 + 64;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v71 = (unint64_t)(v19 + 63) >> 6;
  v72 = a1;
  v69 = v71 - 1;
  swift_bridgeObjectRetain(a1);
  v22 = 0;
  v23 = _swiftEmptyDictionarySingleton;
  v82 = v17;
  v74 = v7;
  v75 = v5;
  v77 = v3;
  v73 = v15;
  v79 = v2;
  while (1)
  {
    v88 = v23;
    if (v21)
    {
      v24 = v3;
      v25 = v6;
      v84 = (v21 - 1) & v21;
      v85 = v22;
      v26 = __clz(__rbit64(v21)) | (v22 << 6);
LABEL_8:
      v27 = *(_QWORD *)(v72 + 56);
      v28 = *(void **)(*(_QWORD *)(v72 + 48) + 8 * v26);
      *v15 = v28;
      v29 = v27
          + *(_QWORD *)(*(_QWORD *)(type metadata accessor for CloudKitChangeSet.TombstoneInfo(0) - 8) + 72) * v26;
      v30 = sub_10001A9A8(&qword_10110AA20);
      sub_10005972C(v29, (uint64_t)v15 + *(int *)(v30 + 48), type metadata accessor for CloudKitChangeSet.TombstoneInfo);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v15, 0, 1, v30);
      v31 = v28;
      v17 = v82;
      goto LABEL_23;
    }
    v32 = v22 + 1;
    if (__OFADD__(v22, 1))
      goto LABEL_49;
    if (v32 >= v71)
      goto LABEL_21;
    v33 = *(_QWORD *)(v70 + 8 * v32);
    if (v33)
      goto LABEL_12;
    v22 += 2;
    if (v32 + 1 >= v71)
    {
      v24 = v3;
      v25 = v6;
LABEL_17:
      v85 = v32;
      goto LABEL_22;
    }
    v33 = *(_QWORD *)(v70 + 8 * v22);
    if (v33)
      goto LABEL_15;
    if (v32 + 2 >= v71)
    {
LABEL_21:
      v85 = v22;
      v24 = v3;
      v25 = v6;
    }
    else
    {
      v33 = *(_QWORD *)(v70 + 8 * (v32 + 2));
      if (v33)
      {
        v32 += 2;
LABEL_12:
        v24 = v3;
        v25 = v6;
        v84 = (v33 - 1) & v33;
        v85 = v32;
        v26 = __clz(__rbit64(v33)) + (v32 << 6);
        goto LABEL_8;
      }
      v22 = v32 + 3;
      if (v32 + 3 < v71)
      {
        v33 = *(_QWORD *)(v70 + 8 * v22);
        if (!v33)
        {
          while (1)
          {
            v32 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_50;
            if (v32 >= v71)
            {
              v24 = v3;
              v25 = v6;
              v32 = v69;
              goto LABEL_17;
            }
            v33 = *(_QWORD *)(v70 + 8 * v32);
            ++v22;
            if (v33)
              goto LABEL_12;
          }
        }
LABEL_15:
        v32 = v22;
        goto LABEL_12;
      }
      v24 = v3;
      v25 = v6;
      v85 = v32 + 2;
    }
LABEL_22:
    v34 = sub_10001A9A8(&qword_10110AA20);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 1, 1, v34);
    v84 = 0;
LABEL_23:
    sub_100005CF0((uint64_t)v15, (uint64_t)v17, &qword_10110AA18);
    v35 = sub_10001A9A8(&qword_10110AA20);
    if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v17, 1, v35) == 1)
    {
      swift_release();
      return (uint64_t)v88;
    }
    v83 = *v17;
    v36 = (uint64_t)v17 + *(int *)(v35 + 48);
    v37 = v78;
    v38 = *(_QWORD *)(v81 + 160);
    v39 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v37, v36 + *(int *)(v39 + 20), v25);
    v40 = v5;
    v41 = v24;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    v43 = v79;
    v42(v40, v36 + *(int *)(v39 + 24), v79);
    v44 = sub_1000126B0(v36, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    __chkstk_darwin(v44);
    *(&v69 - 4) = v38;
    *(&v69 - 3) = (int64_t)v37;
    *(&v69 - 2) = (int64_t)v40;
    v45 = v43;
    v46 = v87;
    v47 = v89;
    OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v69 - 6, v80);
    if (v47)
    {

      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v45);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v25);
      swift_release();
      v65 = (uint64_t)v88;
      sub_10087A3F0((uint64_t)v88);
      v66 = swift_bridgeObjectRelease();
      swift_willThrow(v66);
      return v65;
    }
    v89 = 0;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v45);
    v48 = v37;
    v49 = v25;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v48, v25);
    sub_10005972C(v46, v86, type metadata accessor for BeaconStoreFileRecord);
    v50 = v83;
    v51 = (uint64_t)v88;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v88);
    v90 = (_QWORD *)v51;
    v54 = sub_100518FA4((uint64_t)v50);
    v55 = *(_QWORD *)(v51 + 16);
    v56 = (v53 & 1) == 0;
    v57 = v55 + v56;
    if (__OFADD__(v55, v56))
      break;
    v58 = v53;
    if (*(_QWORD *)(v51 + 24) >= v57)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v23 = v90;
        if ((v53 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100AA0F0C();
        v23 = v90;
        if ((v58 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100A936E4(v57, isUniquelyReferenced_nonNull_native);
      v59 = sub_100518FA4((uint64_t)v50);
      if ((v58 & 1) != (v60 & 1))
        goto LABEL_51;
      v54 = v59;
      v23 = v90;
      if ((v58 & 1) != 0)
      {
LABEL_4:
        sub_10010FA18(v86, v23[7] + *(_QWORD *)(v76 + 72) * v54, type metadata accessor for BeaconStoreFileRecord);
        v3 = v77;
        goto LABEL_5;
      }
    }
    v23[(v54 >> 6) + 8] |= 1 << v54;
    *(_QWORD *)(v23[6] + 8 * v54) = v50;
    sub_1000126EC(v86, v23[7] + *(_QWORD *)(v76 + 72) * v54, type metadata accessor for BeaconStoreFileRecord);
    v61 = v23[2];
    v62 = __OFADD__(v61, 1);
    v63 = v61 + 1;
    v3 = v77;
    if (v62)
      goto LABEL_48;
    v23[2] = v63;
    v64 = v50;
LABEL_5:

    swift_bridgeObjectRelease();
    sub_1000126B0(v87, type metadata accessor for BeaconStoreFileRecord);
    v7 = v74;
    v5 = v75;
    v6 = v49;
    v15 = v73;
    v17 = v82;
    v21 = v84;
    v22 = v85;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  v68 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v68);
  __break(1u);
  return result;
}

uint64_t sub_10084053C(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSString v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  char *v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[4];

  v30 = a3;
  v5 = type metadata accessor for CloudKitChangeSet(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Notification(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = String._bridgeToObjectiveC()();
  v13 = type metadata accessor for UUID(0);
  v32[3] = v13;
  v14 = sub_100018F08(v32);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v14, a1, v13);
  Notification.init(name:object:userInfo:)(v12, v32, 0);
  v15 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  isa = Notification._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v15, "postNotification:", isa);

  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v17 = type metadata accessor for Logger(0);
  sub_10001A9E8(v17, (uint64_t)qword_1011B77E8);
  v18 = sub_10005972C(a1, (uint64_t)v7, type metadata accessor for CloudKitChangeSet);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v29 = a2;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v32[0] = v23;
    *(_DWORD *)v22 = 136446210;
    v28 = v11;
    v24 = sub_100ADBE14();
    v31 = sub_100016940(v24, v25, v32);
    v11 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v7, type metadata accessor for CloudKitChangeSet);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Calling wakeChangeSetQueue() after completing %{public}s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v26 = v22;
    a2 = v29;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v7, type metadata accessor for CloudKitChangeSet);
  }

  a2();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10084083C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD aBlock[7];

  v48 = a8;
  v53 = a7;
  v49 = a5;
  v47 = a4;
  v55 = a3;
  v51 = a1;
  v52 = a2;
  v56 = a11;
  v57 = a12;
  v54 = a10;
  v50 = a9;
  v61 = type metadata accessor for DispatchWorkItemFlags(0);
  v64 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v60 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v15 - 8);
  v63 = v15;
  __chkstk_darwin(v15);
  v58 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CloudKitChangeSet(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = *(_QWORD *)(a4 + 64);
  sub_10005972C(a6, (uint64_t)v20, type metadata accessor for CloudKitChangeSet);
  v21 = *(unsigned __int8 *)(v18 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + 47) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_101095028, v28 + 8, v21 | 7);
  *(_QWORD *)(v29 + 16) = v49;
  sub_1000126EC((uint64_t)v20, v29 + v22, type metadata accessor for CloudKitChangeSet);
  v30 = (_QWORD *)(v29 + v23);
  v31 = v52;
  v32 = v48;
  *v30 = v53;
  v30[1] = v32;
  v33 = v29 + v24;
  v34 = v51;
  *(_QWORD *)v33 = v51;
  *(_QWORD *)(v33 + 8) = v31;
  LOBYTE(v24) = v55 & 1;
  *(_BYTE *)(v33 + 16) = v55 & 1;
  v35 = v50;
  *(_QWORD *)(v29 + v25) = v50;
  *(_QWORD *)(v29 + v26) = v47;
  v36 = (_QWORD *)(v29 + v27);
  v37 = v56;
  *v36 = v54;
  v36[1] = v37;
  *(_QWORD *)(v29 + v28) = v57;
  aBlock[4] = sub_10087A320;
  aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101095040;
  v38 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v35);
  swift_retain();
  sub_10087A3C4(v34, v31, v24);
  swift_retain();
  v39 = swift_retain();
  v40 = v58;
  static DispatchQoS.unspecified.getter(v39);
  v65 = _swiftEmptyArrayStorage;
  v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v45 = v60;
  v44 = v61;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v42, v43, v61, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v45, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v45, v44);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v63);
  return swift_release();
}

uint64_t sub_100840BB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, uint64_t), uint64_t a11)
{
  double v11;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  Swift::UInt64 v34;
  __objc2_ivar_list **p_ivars;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __objc2_ivar_list **v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v72;
  unint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  id v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  __objc2_ivar_list **v102;
  uint64_t v103;
  uint64_t v104;
  id *v105;
  void (*v106)(id *, _QWORD, uint64_t, uint64_t);
  uint64_t v107;
  id v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  unint64_t v117;
  unint64_t i;
  unint64_t v119;
  int64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  id v129;
  NSString v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t);
  uint64_t v141;
  uint64_t result;
  id v143;
  NSString v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  _QWORD *v158;
  char *v159;
  id *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t);
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __n128 v174;
  uint64_t v175;
  uint64_t v176;
  int64_t v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;

  v172 = a2;
  v173 = a5;
  v166 = type metadata accessor for CloudKitChangeSet(0);
  v18 = __chkstk_darwin(v166);
  v20 = (unint64_t)&v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v159 = (char *)&v154 - v21;
  v22 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v22);
  v24 = (id *)((char *)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v25);
  v27 = (char *)&v154 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for BeaconStoreFileRecord(0);
  v28 = *(_QWORD *)(v163 - 8);
  v29 = __chkstk_darwin(v163);
  v162 = (uint64_t)&v154 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v161 = (uint64_t)&v154 - v31;
  v32 = mach_continuous_time();
  v33 = v32 >= a1;
  v34 = v32 - a1;
  if (!v33)
    goto LABEL_118;
  v165 = v28;
  v169 = a11;
  v168 = a10;
  v11 = (double)convertToNanoseconds(_:)(v34) / 1000000.0;
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  v167 = a4;
  if ((a7 & 1) != 0)
  {
    v181 = (_QWORD *)v173;
    swift_errorRetain(v173);
    v111 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&v181, v111, &protocol self-conformance witness table for Error);
    goto LABEL_103;
  }
  v156 = v27;
  v160 = v24;
  v164 = a8;
  v155 = v20;
  v157 = a3;
  v171 = a9;
  v36 = *(_QWORD *)(a6 + 64);
  v175 = a6 + 64;
  v37 = 1 << *(_BYTE *)(a6 + 32);
  v38 = -1;
  if (v37 < 64)
    v38 = ~(-1 << v37);
  a3 = v38 & v36;
  v177 = (unint64_t)(v37 + 63) >> 6;
  swift_bridgeObjectRetain(v173);
  v39 = swift_bridgeObjectRetain(a6);
  v40 = 0;
  v176 = 0;
  v158 = _swiftEmptyArrayStorage;
  v170 = _swiftEmptyDictionarySingleton;
  v39.n128_u64[0] = 138412546;
  v174 = v39;
  while (a3)
  {
    v41 = __clz(__rbit64(a3));
    a3 &= a3 - 1;
    v42 = v41 | (v40 << 6);
LABEL_22:
    v46 = *(void **)(*(_QWORD *)(a6 + 48) + 8 * v42);
    v47 = *(_QWORD *)(a6 + 56) + 16 * v42;
    if (*(_BYTE *)(v47 + 8) == 1)
    {
      v48 = *(_QWORD *)v47;
      sub_1002437C4(*(_QWORD *)v47, 1);
      v49 = v46;
      sub_1002437C4(v48, 1);
      v50 = v49;
      sub_1002437C4(v48, 1);
      if (p_ivars[496] != (__objc2_ivar_list *)-1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v51 = type metadata accessor for Logger(0);
      sub_10001A9E8(v51, (uint64_t)qword_1011B77E8);
      v20 = (unint64_t)v50;
      v52 = sub_1002437C4(v48, 1);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.error.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v55 = swift_slowAlloc(22, -1);
        a4 = v40;
        v56 = a3;
        v57 = a6;
        v58 = p_ivars;
        v59 = (unint64_t *)swift_slowAlloc(16, -1);
        *(_DWORD *)v55 = v174.n128_u32[0];
        *(_QWORD *)(v55 + 4) = v20;
        *v59 = v20;
        *(_WORD *)(v55 + 12) = 2114;
        v60 = _convertErrorToNSError(_:)(v48);
        *(_QWORD *)(v55 + 14) = v60;
        v59[1] = v60;
        sub_10010F948(v48, 1);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Unexpected error deleting recordID [%@]: %{public}@", (uint8_t *)v55, 0x16u);
        v61 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v59, 2, v61);
        v62 = v59;
        p_ivars = v58;
        a6 = v57;
        a3 = v56;
        v40 = a4;
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v55, -1, -1);

        sub_10010F948(v48, 1);
        sub_10010F948(v48, 1);

      }
      else
      {

        sub_10010F948(v48, 1);
        sub_10010F948(v48, 1);
        sub_10010F948(v48, 1);
        v20 = (unint64_t)v53;
      }

      sub_10010F948(v48, 1);
    }
    else
    {
      v63 = v164;
      v64 = *(_QWORD *)(v164 + 16);
      v65 = v46;
      v20 = (unint64_t)v65;
      if (v64 && (v66 = sub_100518FA4((uint64_t)v65), (v67 & 1) != 0))
      {
        v68 = *(_QWORD *)(v165 + 72);
        v69 = v161;
        sub_10005972C(*(_QWORD *)(v63 + 56) + v68 * v66, v161, type metadata accessor for BeaconStoreFileRecord);
        sub_1000126EC(v69, v162, type metadata accessor for BeaconStoreFileRecord);
        v70 = (uint64_t)v170;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v170);
        v181 = (_QWORD *)v70;
        v73 = sub_100518FA4(v20);
        v74 = *(_QWORD *)(v70 + 16);
        v75 = (v72 & 1) == 0;
        v76 = v74 + v75;
        if (__OFADD__(v74, v75))
          goto LABEL_121;
        v77 = v72;
        if (*(_QWORD *)(v70 + 24) >= v76)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_100AA0F0C();
        }
        else
        {
          sub_100A936E4(v76, isUniquelyReferenced_nonNull_native);
          v78 = sub_100518FA4(v20);
          if ((v77 & 1) != (v79 & 1))
          {
            v153 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v153);
            __break(1u);
            return result;
          }
          v73 = v78;
        }
        v89 = v181;
        v170 = v181;
        if ((v77 & 1) != 0)
        {
          sub_10010FA18(v162, v181[7] + v73 * v68, type metadata accessor for BeaconStoreFileRecord);
        }
        else
        {
          v181[(v73 >> 6) + 8] |= 1 << v73;
          *(_QWORD *)(v89[6] + 8 * v73) = v20;
          sub_1000126EC(v162, v89[7] + v73 * v68, type metadata accessor for BeaconStoreFileRecord);
          v90 = v89[2];
          v43 = __OFADD__(v90, 1);
          v91 = v90 + 1;
          if (v43)
            goto LABEL_122;
          v89[2] = v91;
          v92 = (id)v20;
        }
        p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);

        swift_bridgeObjectRelease();
      }
      else
      {
        v80 = (uint64_t)v170;
        swift_bridgeObjectRetain(v170);
        v81 = sub_100518FA4(v20);
        v83 = v82;
        swift_bridgeObjectRelease();
        v84 = a3;
        if ((v83 & 1) != 0)
        {
          v85 = swift_isUniquelyReferenced_nonNull_native(v80);
          v181 = (_QWORD *)v80;
          if (!v85)
          {
            sub_100AA0F0C();
            v80 = (uint64_t)v181;
          }

          v86 = v165;
          v87 = (uint64_t)v156;
          sub_1000126EC(*(_QWORD *)(v80 + 56) + *(_QWORD *)(v165 + 72) * v81, (uint64_t)v156, type metadata accessor for BeaconStoreFileRecord);
          v170 = (_QWORD *)v80;
          sub_100107E80(v81, v80);
          swift_bridgeObjectRelease();
          v88 = 0;
        }
        else
        {
          v88 = 1;
          v87 = (uint64_t)v156;
          v86 = v165;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v87, v88, 1, v163);

        sub_100004048(v87, &qword_10110A908);
        a3 = v84;
      }
      v93 = *(_QWORD *)(v172 + *(int *)(v166 + 24));
      if (!*(_QWORD *)(v93 + 16))
      {
        v107 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
        v105 = v160;
        (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 56))(v160, 1, 1, v107);
        goto LABEL_56;
      }
      v94 = (id)v20;
      v95 = sub_100518FA4((uint64_t)v94);
      if ((v96 & 1) != 0)
      {
        v97 = v95;
        v98 = *(_QWORD *)(v93 + 56);
        v99 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
        a4 = v40;
        v100 = a3;
        v101 = a6;
        v102 = p_ivars;
        v103 = *(_QWORD *)(v99 - 8);
        v104 = v98 + *(_QWORD *)(v103 + 72) * v97;
        v105 = v160;
        sub_10005972C(v104, (uint64_t)v160, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
        v106 = *(void (**)(id *, _QWORD, uint64_t, uint64_t))(v103 + 56);
        p_ivars = v102;
        a6 = v101;
        a3 = v100;
        v40 = a4;
        v106(v105, 0, 1, v99);
      }
      else
      {
        v99 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
        v105 = v160;
        (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v160, 1, 1, v99);
      }

      type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 48))(v105, 1, v99) == 1)
      {
LABEL_56:

        sub_100004048((uint64_t)v105, &qword_1010EF188);
      }
      else
      {
        v108 = *v105;
        sub_1000126B0((uint64_t)v105, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
        type metadata accessor for BeaconStore(0);
        a4 = v176;
        sub_100841E9C((uint64_t)v108);
        if (a4)
        {
          swift_errorRelease(a4);
          v176 = 0;
          v180 = 0;
          v178 = 0u;
          v179 = 0u;
          goto LABEL_60;
        }
        v176 = 0;
        if (*((_QWORD *)&v179 + 1))
        {
          sub_10000F9FC(&v178, (uint64_t)&v181);
          sub_100030784((uint64_t)&v181, (uint64_t)&v178);
          if ((swift_isUniquelyReferenced_nonNull_native(v158) & 1) == 0)
            v158 = sub_1007C8824(0, v158[2] + 1, 1, v158);
          v20 = v158[2];
          v109 = v158[3];
          if (v20 >= v109 >> 1)
            v158 = sub_1007C8824((_QWORD *)(v109 > 1), v20 + 1, 1, v158);
          v110 = v158;
          v158[2] = v20 + 1;
          sub_10000F9FC(&v178, (uint64_t)&v110[5 * v20 + 4]);

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v181);
        }
        else
        {
LABEL_60:

          sub_100004048((uint64_t)&v178, &qword_1010ECCB0);
        }
      }
    }
  }
  v43 = __OFADD__(v40++, 1);
  if (v43)
  {
    __break(1u);
    goto LABEL_116;
  }
  if (v40 >= v177)
    goto LABEL_67;
  v44 = *(_QWORD *)(v175 + 8 * v40);
  if (v44)
  {
LABEL_21:
    a3 = (v44 - 1) & v44;
    v42 = __clz(__rbit64(v44)) + (v40 << 6);
    goto LABEL_22;
  }
  v45 = v40 + 1;
  if (v40 + 1 >= v177)
    goto LABEL_67;
  v44 = *(_QWORD *)(v175 + 8 * v45);
  if (v44)
    goto LABEL_20;
  v45 = v40 + 2;
  if (v40 + 2 >= v177)
    goto LABEL_67;
  v44 = *(_QWORD *)(v175 + 8 * v45);
  if (v44)
  {
LABEL_20:
    v40 = v45;
    goto LABEL_21;
  }
  v45 = v40 + 3;
  if (v40 + 3 < v177)
  {
    v44 = *(_QWORD *)(v175 + 8 * v45);
    if (!v44)
    {
      while (1)
      {
        v40 = v45 + 1;
        if (__OFADD__(v45, 1))
          break;
        if (v40 >= v177)
          goto LABEL_67;
        v44 = *(_QWORD *)(v175 + 8 * v40);
        ++v45;
        if (v44)
          goto LABEL_21;
      }
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    goto LABEL_20;
  }
LABEL_67:
  swift_release();
  swift_bridgeObjectRetain(v170);
  sub_10087AA2C(v112);
  swift_bridgeObjectRelease();
  v113 = 0;
  a3 = v173 + 64;
  v114 = 1 << *(_BYTE *)(v173 + 32);
  v115 = -1;
  if (v114 < 64)
    v115 = ~(-1 << v114);
  v40 = v115 & *(_QWORD *)(v173 + 64);
  v116 = (unint64_t)(v114 + 63) >> 6;
  if (v40)
    goto LABEL_72;
LABEL_73:
  v43 = __OFADD__(v113++, 1);
  if (v43)
    goto LABEL_117;
  if (v113 >= v116)
    goto LABEL_96;
  v119 = *(_QWORD *)(a3 + 8 * v113);
  if (v119)
  {
LABEL_83:
    v40 = (v119 - 1) & v119;
    for (i = __clz(__rbit64(v119)) + (v113 << 6); ; i = v117 | (v113 << 6))
    {
      v121 = *(_QWORD *)(v173 + 56) + 16 * i;
      v122 = *(_QWORD **)v121;
      if ((*(_BYTE *)(v121 + 8) & 1) != 0)
      {
        v181 = *(_QWORD **)v121;
        swift_errorRetain(v122);
        v125 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        swift_willThrowTypedImpl(&v181, v125, &protocol self-conformance witness table for Error);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v173 = (uint64_t)v122;
        goto LABEL_102;
      }
      type metadata accessor for BeaconStore(0);
      v123 = v122;
      a4 = v176;
      sub_100841E9C((uint64_t)v123);
      v176 = a4;
      if (a4)
      {
        sub_10010F93C(v122, 0);
        sub_10010F93C(v122, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_101;
      }
      if (*((_QWORD *)&v179 + 1))
      {
        sub_10000F9FC(&v178, (uint64_t)&v181);
        v124 = v182;
        v20 = v183;
        sub_10001AA44(&v181, v182);
        a4 = v176;
        sub_100086774(*(_QWORD *)(v171 + 160), v124);
        v176 = a4;
        if (a4)
        {
          sub_10010F93C(v122, 0);
          sub_10010F93C(v122, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v181);
LABEL_101:
          v173 = v176;
LABEL_102:
          a4 = v167;
          a3 = v157;
          v20 = v155;
          a8 = v164;
LABEL_103:
          sub_10087A3F0(a8);
          v129 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
          v130 = String._bridgeToObjectiveC()();
          objc_msgSend(v129, "removeObjectForKey:", v130);

          if (p_ivars[496] == (__objc2_ivar_list *)-1)
          {
LABEL_104:
            v131 = type metadata accessor for Logger(0);
            sub_10001A9E8(v131, (uint64_t)qword_1011B77E8);
            sub_10005972C(v172, v20, type metadata accessor for CloudKitChangeSet);
            variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
            v132 = variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
            v133 = Logger.logObject.getter(v132);
            v134 = static os_log_type_t.default.getter(v133);
            if (os_log_type_enabled(v133, v134))
            {
              v135 = swift_slowAlloc(28, -1);
              v136 = swift_slowAlloc(32, -1);
              v181 = (_QWORD *)v136;
              *(_DWORD *)v135 = 136446722;
              v137 = sub_100ADBE14();
              *(_QWORD *)&v178 = sub_100016940(v137, v138, (uint64_t *)&v181);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, (char *)&v178 + 8, v135 + 4, v135 + 12);
              swift_bridgeObjectRelease();
              sub_1000126B0(v20, type metadata accessor for CloudKitChangeSet);
              *(_WORD *)(v135 + 12) = 1040;
              LODWORD(v178) = 0;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, (char *)&v178 + 4, v135 + 14, v135 + 18);
              *(_WORD *)(v135 + 18) = 2048;
              *(double *)&v178 = v11;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, (char *)&v178 + 8, v135 + 20, v135 + 28);
              _os_log_impl((void *)&_mh_execute_header, v133, v134, "Done applying %{public}s duration: %.*fms [Failure]", (uint8_t *)v135, 0x1Cu);
              swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v136, -1, -1);
              v139 = v135;
              a4 = v167;
              swift_slowDealloc(v139, -1, -1);
            }
            else
            {
              sub_1000126B0(v20, type metadata accessor for CloudKitChangeSet);
            }

            v140 = v168;
            v141 = v173;
            swift_errorRetain(v173);
            v140(v141, 1);
            swift_errorRelease(v141);
            swift_errorRelease(v141);
            return sub_100842628(v172, (uint64_t (*)(void))a3, a4, "Calling wakeChangeSetQueue() after completing %{public}s");
          }
LABEL_119:
          swift_once(&qword_1010E9F80, sub_1007FA778);
          goto LABEL_104;
        }
        sub_10010F93C(v122, 0);
        sub_10010F93C(v122, 0);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v181);
        if (!v40)
          goto LABEL_73;
      }
      else
      {
        sub_10010F93C(v122, 0);
        sub_10010F93C(v122, 0);
        sub_100004048((uint64_t)&v178, &qword_1010ECCB0);
        if (!v40)
          goto LABEL_73;
      }
LABEL_72:
      v117 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
    }
  }
  v120 = v113 + 1;
  if (v113 + 1 >= v116)
    goto LABEL_96;
  v119 = *(_QWORD *)(a3 + 8 * v120);
  if (v119)
    goto LABEL_82;
  v120 = v113 + 2;
  if (v113 + 2 >= v116)
    goto LABEL_96;
  v119 = *(_QWORD *)(a3 + 8 * v120);
  if (v119)
    goto LABEL_82;
  v120 = v113 + 3;
  if (v113 + 3 >= v116)
  {
LABEL_96:
    swift_release();
    v168(0, 0);
    sub_1007EF48C();
    v126 = v158;
    v127 = v158[2];
    v40 = (uint64_t)v159;
    if (v127)
    {
      v128 = v158 + 4;
      swift_bridgeObjectRetain(v158);
      do
      {
        PassthroughSubject.send(_:)(v128);
        v128 += 5;
        --v127;
      }
      while (v127);
      swift_bridgeObjectRelease_n(v126, 2);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v143 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v144 = String._bridgeToObjectiveC()();
    objc_msgSend(v143, "removeObjectForKey:", v144);

    if (p_ivars[496] != (__objc2_ivar_list *)-1)
      goto LABEL_123;
  }
  else
  {
    v119 = *(_QWORD *)(a3 + 8 * v120);
    if (v119)
    {
LABEL_82:
      v113 = v120;
      goto LABEL_83;
    }
    while (1)
    {
      v113 = v120 + 1;
      if (__OFADD__(v120, 1))
        break;
      if (v113 >= v116)
        goto LABEL_96;
      v119 = *(_QWORD *)(a3 + 8 * v113);
      ++v120;
      if (v119)
        goto LABEL_83;
    }
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    swift_once(&qword_1010E9F80, sub_1007FA778);
  }
  v145 = type metadata accessor for Logger(0);
  sub_10001A9E8(v145, (uint64_t)qword_1011B77E8);
  sub_10005972C(v172, v40, type metadata accessor for CloudKitChangeSet);
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  v146 = variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  v147 = Logger.logObject.getter(v146);
  v148 = static os_log_type_t.default.getter(v147);
  if (os_log_type_enabled(v147, v148))
  {
    v149 = swift_slowAlloc(28, -1);
    v150 = swift_slowAlloc(32, -1);
    v181 = (_QWORD *)v150;
    *(_DWORD *)v149 = 136446722;
    v151 = sub_100ADBE14();
    *(_QWORD *)&v178 = sub_100016940(v151, v152, (uint64_t *)&v181);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, (char *)&v178 + 8, v149 + 4, v149 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v40, type metadata accessor for CloudKitChangeSet);
    *(_WORD *)(v149 + 12) = 1040;
    LODWORD(v178) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, (char *)&v178 + 4, v149 + 14, v149 + 18);
    *(_WORD *)(v149 + 18) = 2048;
    *(double *)&v178 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, (char *)&v178 + 8, v149 + 20, v149 + 28);
    _os_log_impl((void *)&_mh_execute_header, v147, v148, "Done applying %{public}s duration: %.*fms [Success]", (uint8_t *)v149, 0x1Cu);
    swift_arrayDestroy(v150, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v150, -1, -1);
    swift_slowDealloc(v149, -1, -1);
  }
  else
  {
    sub_1000126B0(v40, type metadata accessor for CloudKitChangeSet);
  }

  a4 = v167;
  a3 = v157;
  return sub_100842628(v172, (uint64_t (*)(void))a3, a4, "Calling wakeChangeSetQueue() after completing %{public}s");
}

void sub_100841E9C(uint64_t a1)
{
  char v1;
  char v2;

  CKRecord.recordType.getter(a1);
  sub_10069D6D8();
  v2 = v1;
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

void sub_100841EFC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v0[3] = type metadata accessor for OwnedBeaconRecord(0);
  v0[4] = sub_100006204((unint64_t *)&unk_10110EE70, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57ABC);
  v3 = sub_100018F08(v0);
  sub_1009A0A80(v1, v3);
  if (v2)
    sub_1000583A4(v0);
}

void sub_1008424B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B77E8);
  v15 = v13;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    a12 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = CKRecord.recordType.getter(v19);
    a10 = sub_100016940(v20, v21, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, &a11, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unexpected recordType: %{public}s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  *(_QWORD *)(v12 + 32) = 0;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  JUMPOUT(0x100842494);
}

uint64_t sub_100842628(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, const char *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v8 = type metadata accessor for CloudKitChangeSet(0);
  __chkstk_darwin(v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B77E8);
  v12 = sub_10005972C(a1, (uint64_t)v10, type metadata accessor for CloudKitChangeSet);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v22 = v16;
    *(_DWORD *)v15 = 136446210;
    v20[1] = a3;
    v17 = sub_100ADBE14();
    v21 = sub_100016940(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v10, type metadata accessor for CloudKitChangeSet);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, a4, v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v10, type metadata accessor for CloudKitChangeSet);
  }

  return a2();
}

uint64_t sub_100842834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[4];

  v6 = sub_10001A9A8(&qword_10110AC50);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100CA8FB8((uint64_t)&off_10104DCB8);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v11 = swift_retain();
  v12 = AnyCurrentValuePublisher.publisher.getter(v11);
  swift_release();
  v19[3] = v12;
  v13 = swift_allocObject(&unk_101096720, 24, 7);
  *(_QWORD *)(v13 + 16) = v10;
  v14 = sub_10001A9A8(&qword_1011194D0);
  v15 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.first(where:)(sub_100880BAC, v13, v14, v15);
  swift_release();
  swift_release();
  v16 = (_QWORD *)swift_allocObject(&unk_101096748, 40, 7);
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v17 = sub_1000193A4(&qword_10110AC58, &qword_10110AC50, (const char *)&protocol conformance descriptor for Publishers.FirstWhere<A>);
  swift_retain();
  swift_retain();
  Publisher<>.sink(receiveValue:)(sub_100880BC8, v16, v6, v17);
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  AnyCancellable.store(in:)(a1);
  return swift_release();
}

uint64_t sub_100842A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD v8[4];

  v6 = (_QWORD *)swift_allocObject(&unk_1010966F8, 40, 7);
  v6[2] = a2;
  v6[3] = a1;
  v6[4] = a3;
  type metadata accessor for Transaction(0);
  v8[2] = sub_100880B88;
  v8[3] = v6;
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)("isMeDevice", 10, 2, sub_100880B94, v8);
  return swift_release();
}

uint64_t sub_100842AFC(char a1, uint64_t a2, uint64_t a3, uint8_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v58 = a2;
  v59 = a3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v56 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v56 - v17;
  v19 = sub_10001A9A8(&qword_1010ED860);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v20);
  v25 = (char *)&v56 - v24;
  if ((a1 & 1) != 0)
  {
    v56 = v10;
    v57 = a4;
    v26 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v27 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend(v26, "stringForKey:", v27);

    if (v28)
    {
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      v32 = v29;
      v33 = (uint64_t)v25;
      UUID.init(uuidString:)(v32, v31);
      swift_bridgeObjectRelease();
    }
    else
    {
      v33 = (uint64_t)v25;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v25, 1, 1, v6);
    }
    sub_100B11150((uint64_t)v18);
    v34 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v34(v16, v18, v6);
    sub_10000F9B8(v33, (uint64_t)v22, &qword_1010ED860);
    v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v22, 1, v6);
    v36 = (uint64_t)v57;
    if (v35 == 1)
    {
      sub_100004048((uint64_t)v22, &qword_1010ED860);
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_10001A9E8(v37, (uint64_t)qword_1011B77E8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "No lastDuplicateRecoveryBootSessionUUID on record", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_10084306C(v58, (uint64_t)v16, v59, v36);
      v42 = *(void (**)(char *, uint64_t))(v7 + 8);
      v42(v16, v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v22, v6);
      v43 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v13, v18, v6, v43) & 1) != 0)
      {
        v44 = *(void (**)(char *, uint64_t))(v7 + 8);
        v44(v16, v6);
        if (qword_1010E9F80 != -1)
          swift_once(&qword_1010E9F80, sub_1007FA778);
        v45 = type metadata accessor for Logger(0);
        sub_10001A9E8(v45, (uint64_t)qword_1011B77E8);
        v46 = v56;
        v47 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v56, v18, v6);
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.default.getter(v48);
        if (os_log_type_enabled(v48, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc(12, -1);
          v51 = swift_slowAlloc(32, -1);
          v58 = v51;
          v61 = v51;
          v59 = v33;
          *(_DWORD *)v50 = 136315138;
          v57 = v50 + 4;
          v52 = UUID.uuidString.getter(v51);
          v60 = sub_100016940(v52, v53, &v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v57, v50 + 12);
          swift_bridgeObjectRelease();
          v44(v46, v6);
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "removeDuplicateBeaconsCheck already ran for boot session: %s", v50, 0xCu);
          v54 = v58;
          swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1, -1);
          swift_slowDealloc(v50, -1, -1);

          v44(v13, v6);
          v44(v18, v6);
          v55 = v59;
          return sub_100004048(v55, &qword_1010ED860);
        }

        v44(v46, v6);
        v44(v13, v6);
        v44(v18, v6);
LABEL_18:
        v55 = v33;
        return sub_100004048(v55, &qword_1010ED860);
      }
      sub_10084306C(v58, (uint64_t)v16, v59, v36);
      v42 = *(void (**)(char *, uint64_t))(v7 + 8);
      v42(v13, v6);
      v42(v16, v6);
    }
    v42(v18, v6);
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_10084306C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;

  v20 = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_101096770, v15 + 8, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v16 + v12, v10, v7);
  *(_QWORD *)(v16 + v13) = a1;
  *(_QWORD *)(v16 + v14) = a3;
  *(_QWORD *)(v16 + v15) = v20;
  v17 = (_QWORD *)swift_allocObject(&unk_101096798, 40, 7);
  v17[2] = a1;
  v17[3] = sub_100880CA0;
  v17[4] = v16;
  swift_retain_n(a1, 2);
  swift_retain();
  swift_retain();
  sub_100825C2C((uint64_t)sub_100880D18, (uint64_t)v17);
  swift_release();
  return swift_release();
}

void sub_1008431D0(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  NSString v25;
  id v26[2];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
    v14 = *(unsigned __int8 *)(v11 + 80);
    v15 = (v14 + 24) & ~v14;
    v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    v17 = (char *)swift_allocObject(&unk_101096860, v16 + 8, v14 | 7);
    *((_QWORD *)v17 + 2) = a4;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v15], v13, v10);
    *(_QWORD *)&v17[v16] = a5;
    v18 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v18);
    v26[-4] = a3;
    LOBYTE(v26[-3]) = 0;
    v26[-2] = sub_100880DCC;
    v26[-1] = v17;
    swift_retain();
    static Transaction.named<A>(_:with:)("removeDuplicateBeacons", 22, 2, sub_100880E30, &v26[-6]);
    swift_release();
  }
  else
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B77E8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No duplicate beacons detected.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    UUID.uuidString.getter(v24);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v26[0] = String._bridgeToObjectiveC()();
    objc_msgSend(v24, "setObject:forKey:", v25, v26[0]);

  }
}

void sub_100843498(uint64_t a1, char a2)
{
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *oslog;
  uint64_t v14;
  uint64_t v15;

  Transaction.capture()();
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B77E8);
    v7 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138543362;
      v11 = _convertErrorToNSError(_:)(a1);
      v14 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4, v9 + 12);
      *v10 = v11;
      sub_1000FE214(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Error removing duplicates: %{public}@", v9, 0xCu);
      v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v10, 1, v12);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      sub_1000FE214(a1, 1);
      return;
    }
    sub_1000FE214(a1, 1);
    sub_1000FE214(a1, 1);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    UUID.uuidString.getter(v4);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    oslog = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "setObject:forKey:", v5, oslog);

  }
}

uint64_t sub_1008436F8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v53[2];
  uint64_t v54;
  void **v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void **aBlock;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  void *v63;
  uint64_t (*v64)();
  uint64_t v65;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v14 - 8);
  v58 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    aBlock = (void **)a1;
    swift_errorRetain(a1);
    v32 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&aBlock, v32, &protocol self-conformance witness table for Error);
    v56 = *(char **)(a3 + 64);
    v33 = swift_allocObject(&unk_1010967C0, 32, 7);
    *(_QWORD *)(v33 + 16) = a4;
    *(_QWORD *)(v33 + 24) = a5;
    v64 = sub_100880D28;
    v65 = v33;
    aBlock = _NSConcreteStackBlock;
    v61 = 1107296256;
    v62 = sub_100016FB8;
    v63 = &unk_1010967D8;
    v34 = _Block_copy(&aBlock);
    v35 = swift_retain();
    static DispatchQoS.unspecified.getter(v35);
    v59 = _swiftEmptyArrayStorage;
    v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v38 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v37, v38, v10, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v34);
    _Block_release(v34);
    sub_1000FE214(a1, 1);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v58);
    return swift_release();
  }
  v56 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = 0;
  v18 = 0;
  v19 = a1 + 64;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & *(_QWORD *)(a1 + 64);
  v23 = *(void ***)(a1 + 16);
  v24 = (unint64_t)(v20 + 63) >> 6;
  while (v22)
  {
    v25 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    v26 = v25 | (v17 << 6);
LABEL_6:
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v26);
    v28 = __OFADD__(v18, v27);
    v18 = (void **)((char *)v18 + v27);
    if (v28)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      swift_once(&qword_1010E9F80, sub_1007FA778);
      goto LABEL_29;
    }
  }
  v29 = v17 + 1;
  if (__OFADD__(v17, 1))
    goto LABEL_35;
  if (v29 < v24)
  {
    v30 = *(_QWORD *)(v19 + 8 * v29);
    ++v17;
    if (!v30)
    {
      v17 = v29 + 1;
      if (v29 + 1 >= v24)
        goto LABEL_27;
      v30 = *(_QWORD *)(v19 + 8 * v17);
      if (!v30)
      {
        v17 = v29 + 2;
        if (v29 + 2 >= v24)
          goto LABEL_27;
        v30 = *(_QWORD *)(v19 + 8 * v17);
        if (!v30)
        {
          v17 = v29 + 3;
          if (v29 + 3 >= v24)
            goto LABEL_27;
          v30 = *(_QWORD *)(v19 + 8 * v17);
          if (!v30)
          {
            v17 = v29 + 4;
            if (v29 + 4 >= v24)
              goto LABEL_27;
            v30 = *(_QWORD *)(v19 + 8 * v17);
            if (!v30)
            {
              v31 = v29 + 5;
              if (v31 >= v24)
                goto LABEL_27;
              v30 = *(_QWORD *)(v19 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  v17 = v31 + 1;
                  if (__OFADD__(v31, 1))
                    goto LABEL_36;
                  if (v17 >= v24)
                    goto LABEL_27;
                  v30 = *(_QWORD *)(v19 + 8 * v17);
                  ++v31;
                  if (v30)
                    goto LABEL_25;
                }
              }
              v17 = v31;
            }
          }
        }
      }
    }
LABEL_25:
    v22 = (v30 - 1) & v30;
    v26 = __clz(__rbit64(v30)) + (v17 << 6);
    goto LABEL_6;
  }
LABEL_27:
  sub_1000FE298(a1, 0);
  swift_release();
  if (v23 == v18)
    goto LABEL_32;
  v55 = v23;
  if (qword_1010E9F80 != -1)
    goto LABEL_37;
LABEL_29:
  v39 = type metadata accessor for Logger(0);
  v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B77E8);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (_DWORD *)swift_slowAlloc(22, -1);
    v53[1] = a3;
    v54 = v11;
    v44 = v43;
    *v43 = 134218240;
    aBlock = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v61, v43 + 1, v43 + 3);
    *((_WORD *)v44 + 6) = 2048;
    v23 = v55;
    aBlock = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v61, (char *)v44 + 14, (char *)v44 + 22);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "DUPLICATE BEACONS DETECTED -- beaconCount: %ld stableIdentifierCount: %ld", (uint8_t *)v44, 0x16u);
    v11 = v54;
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {

    v23 = v55;
  }
LABEL_32:
  v45 = swift_allocObject(&unk_101096810, 33, 7);
  *(_QWORD *)(v45 + 16) = a4;
  *(_QWORD *)(v45 + 24) = a5;
  *(_BYTE *)(v45 + 32) = v23 != v18;
  v64 = sub_1001D1D50;
  v65 = v45;
  aBlock = _NSConcreteStackBlock;
  v61 = 1107296256;
  v62 = sub_100016FB8;
  v63 = &unk_101096828;
  v46 = _Block_copy(&aBlock);
  v47 = swift_retain();
  v48 = v56;
  static DispatchQoS.unspecified.getter(v47);
  v59 = _swiftEmptyArrayStorage;
  v49 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v50 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v51 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v50, v51, v10, v49);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v13, v46);
  _Block_release(v46);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v48, v58);
  return swift_release();
}

uint64_t sub_100843CD0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];
  _QWORD *v27;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a2 + 64);
  v16 = swift_allocObject(&unk_101095A78, 56, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  *(_BYTE *)(v16 + 32) = a3;
  *(_QWORD *)(v16 + 40) = a4;
  *(_QWORD *)(v16 + 48) = a5;
  aBlock[4] = sub_10087DE44;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101095A90;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  v27 = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v10, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  return swift_release();
}

uint64_t sub_100843EF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  dispatch_group_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  Class isa;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unsigned int (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  void *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  Swift::String v161;
  uint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint64_t v173;
  unint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  Swift::String v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  char v190;
  unint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  NSObject *v195;
  os_log_type_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  int64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int (*v216)(uint64_t, uint64_t, char *);
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  void *v230;
  uint64_t v231;
  Swift::String v232;
  uint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  NSObject *v244;
  os_log_type_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  Swift::String v257;
  uint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  char v261;
  unint64_t v262;
  unint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  NSObject *v266;
  os_log_type_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char v279;
  uint64_t v280;
  void (*v281)(uint64_t, unint64_t, uint64_t);
  void (*v282)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v283)(uint64_t, uint64_t, uint64_t);
  uint64_t v284;
  void (*v285)(unint64_t *, uint64_t, uint64_t);
  uint64_t v286;
  unint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  NSObject *v294;
  os_log_type_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unsigned int v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  NSObject *v320;
  os_log_type_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  void (*v339)(char *, uint64_t);
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  NSObject *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  NSObject *v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  void (**v358)(uint64_t);
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  NSObject *v362;
  os_log_type_t v363;
  _BOOL4 v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t *v372;
  uint64_t v373;
  Swift::String v374;
  uint64_t v375;
  unint64_t v376;
  _QWORD *v377;
  char v378;
  unint64_t v379;
  unint64_t v380;
  _QWORD *v381;
  dispatch_group_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  NSObject *v386;
  uint64_t v387;
  NSObject *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  void (*v406)(char *, uint64_t);
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  _BYTE *v411;
  uint64_t v412;
  _QWORD *v413;
  uint64_t v414;
  uint64_t v415;
  void *v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  uint64_t v424;
  dispatch_group_t v425;
  uint64_t result;
  uint64_t v427;
  int64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  char *v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char *v440;
  unint64_t v441;
  char *v442;
  char *v443;
  unint64_t v444;
  int64_t v445;
  char *v446;
  char *v447;
  uint64_t v448;
  uint64_t v449;
  char *v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  char *v454;
  dispatch_group_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  unint64_t *v463;
  uint64_t v464;
  __int128 v465;
  char *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  _QWORD *v477;
  uint64_t v478;
  unint64_t *v479;
  __int128 v480;
  unint64_t v481;
  char *v482;
  char *v483;
  __int128 v484;
  uint64_t (*v485)(uint64_t, uint64_t, uint64_t);
  unint64_t v486;
  char *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  char *v492;
  uint64_t v493;
  uint64_t v494;
  __int128 v495;
  char *v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  uint64_t aBlock;
  unint64_t v501;
  uint64_t (*v502)(uint64_t);
  void *v503;
  uint64_t (*v504)();
  _QWORD *v505;
  uint64_t v506;
  unint64_t v507;
  _QWORD *v508;
  _QWORD *v509;

  v432 = a5;
  v430 = a4;
  v431 = a1;
  v453 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v452 = *(_QWORD *)(v453 - 8);
  v7 = __chkstk_darwin(v453);
  v451 = (char *)&v427 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v450 = (char *)&v427 - v9;
  v438 = type metadata accessor for DispatchWorkItemFlags(0);
  v437 = *(_QWORD *)(v438 - 8);
  __chkstk_darwin(v438);
  v436 = (char *)&v427 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v435 = type metadata accessor for DispatchQoS(0);
  v434 = *(_QWORD *)(v435 - 8);
  __chkstk_darwin(v435);
  v433 = (char *)&v427 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v469 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v469);
  v468 = (uint64_t)&v427 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v497 = type metadata accessor for UUID(0);
  v488 = *(_QWORD *)(v497 - 8);
  v13 = __chkstk_darwin(v497);
  v442 = (char *)&v427 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v479 = (unint64_t *)((char *)&v427 - v15);
  v458 = type metadata accessor for StableIdentifier(0);
  v470 = *(_QWORD *)(v458 - 8);
  v16 = __chkstk_darwin(v458);
  v447 = (char *)&v427 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v427 - v19;
  v21 = __chkstk_darwin(v18);
  v466 = (char *)&v427 - v22;
  v23 = __chkstk_darwin(v21);
  v457 = (uint64_t)&v427 - v24;
  v25 = __chkstk_darwin(v23);
  v467 = (uint64_t)&v427 - v26;
  __chkstk_darwin(v25);
  *(_QWORD *)&v480 = (char *)&v427 - v27;
  v28 = sub_10001A9A8(&qword_10110AAF8);
  v29 = __chkstk_darwin(v28);
  v464 = (uint64_t)&v427 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v446 = (char *)&v427 - v32;
  v33 = __chkstk_darwin(v31);
  v486 = (unint64_t)&v427 - v34;
  __chkstk_darwin(v33);
  v481 = (unint64_t)&v427 - v35;
  v36 = sub_10001A9A8(&qword_1010ED860);
  v37 = __chkstk_darwin(v36);
  v459 = (uint64_t)&v427 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v478 = (uint64_t)&v427 - v40;
  v41 = __chkstk_darwin(v39);
  v483 = (char *)&v427 - v42;
  v43 = __chkstk_darwin(v41);
  v463 = (unint64_t *)((char *)&v427 - v44);
  __chkstk_darwin(v43);
  v476 = (uint64_t)&v427 - v45;
  v499 = type metadata accessor for OwnedBeaconRecord(0);
  v473 = *(_QWORD *)(v499 - 8);
  v46 = __chkstk_darwin(v499);
  v471 = (uint64_t)&v427 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v46);
  v449 = (uint64_t)&v427 - v49;
  v50 = __chkstk_darwin(v48);
  v448 = (uint64_t)&v427 - v51;
  v52 = __chkstk_darwin(v50);
  v454 = (char *)&v427 - v53;
  v54 = __chkstk_darwin(v52);
  v493 = (uint64_t)&v427 - v55;
  v56 = __chkstk_darwin(v54);
  v461 = (uint64_t)&v427 - v57;
  v58 = __chkstk_darwin(v56);
  v462 = (char *)&v427 - v59;
  v60 = __chkstk_darwin(v58);
  v474 = (uint64_t)&v427 - v61;
  v62 = __chkstk_darwin(v60);
  v482 = (char *)&v427 - v63;
  v64 = __chkstk_darwin(v62);
  v489 = (uint64_t)&v427 - v65;
  v66 = __chkstk_darwin(v64);
  v492 = (char *)&v427 - v67;
  v68 = __chkstk_darwin(v66);
  v487 = (char *)&v427 - v69;
  v70 = __chkstk_darwin(v68);
  v490 = (uint64_t)&v427 - v71;
  v72 = __chkstk_darwin(v70);
  v496 = (char *)&v427 - v73;
  v74 = __chkstk_darwin(v72);
  v76 = (char *)&v427 - v75;
  v77 = __chkstk_darwin(v74);
  v472 = (uint64_t)&v427 - v78;
  v79 = __chkstk_darwin(v77);
  *(_QWORD *)&v484 = (char *)&v427 - v80;
  v81 = __chkstk_darwin(v79);
  v475 = (uint64_t)&v427 - v82;
  v429 = v83;
  __chkstk_darwin(v81);
  *(_QWORD *)&v465 = (char *)&v427 - v84;
  v85 = sub_1000188D0();
  v86 = sub_10081CEB8();
  v87 = sub_1007EE524((uint64_t)v86, type metadata accessor for OwnedBeaconGroup, (void (*)(BOOL, unint64_t, uint64_t))sub_10009ADD8, (uint64_t)&off_101070860, (void (*)(_QWORD *, _QWORD *))sub_10000F9FC);
  swift_bridgeObjectRelease();
  v456 = a2;
  v88 = sub_10001AFC0();
  v89 = sub_1007EE524((uint64_t)v88, type metadata accessor for SharedBeaconGroup, (void (*)(BOOL, unint64_t, uint64_t))sub_10009ADD8, (uint64_t)&off_101066440, (void (*)(_QWORD *, _QWORD *))sub_10000F9FC);
  swift_bridgeObjectRelease();
  aBlock = (uint64_t)v87;
  sub_10001BB84((uint64_t)v89);
  v90 = (dispatch_group_t)aBlock;
  aBlock = (uint64_t)_swiftEmptyArrayStorage;
  v91 = *((_QWORD *)v85 + 2);
  swift_bridgeObjectRetain(v85);
  v477 = v20;
  v494 = v91;
  if (!v91)
  {
    swift_bridgeObjectRelease();
    v114 = _swiftEmptyArrayStorage;
    v113 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  *(_QWORD *)&v495 = v85;
  v455 = v90;
  LODWORD(v460) = a3;
  v92 = 0;
  v93 = _swiftEmptyArrayStorage;
  v94 = v473;
  v95 = v484;
  v96 = v465;
  do
  {
    if (v92 >= *(_QWORD *)(v495 + 16))
    {
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    v100 = *(_QWORD **)(v94 + 72);
    v498 = (_QWORD *)((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
    v491 = v100;
    sub_10005972C((uint64_t)v498 + v495 + (_QWORD)v100 * v92, v96, type metadata accessor for OwnedBeaconRecord);
    v101 = v476;
    sub_10000F9B8(v96 + *(int *)(v499 + 28), v476, &qword_1010ED860);
    v485 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v488 + 48);
    v102 = v96;
    v103 = v485(v101, 1, v497);
    sub_100004048(v101, &qword_1010ED860);
    if (v103 == 1)
    {
      sub_1000126EC(v102, v475, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0)
        sub_10009A680(0, v93[2] + 1, 1);
      v93 = (_QWORD *)aBlock;
      v105 = *(_QWORD *)(aBlock + 16);
      v104 = *(_QWORD *)(aBlock + 24);
      v97 = v498;
      v99 = v491;
      if (v105 >= v104 >> 1)
      {
        sub_10009A680(v104 > 1, v105 + 1, 1);
        v93 = (_QWORD *)aBlock;
      }
      v93[2] = v105 + 1;
      sub_1000126EC(v475, (uint64_t)v97 + (_QWORD)v93 + v105 * (_QWORD)v99, type metadata accessor for OwnedBeaconRecord);
      v95 = v484;
      v98 = _swiftEmptyArrayStorage;
      v96 = v465;
    }
    else
    {
      sub_1000126B0(v102, type metadata accessor for OwnedBeaconRecord);
      v97 = v498;
      v98 = _swiftEmptyArrayStorage;
      v96 = v102;
      v99 = v491;
    }
    ++v92;
    v94 = v473;
  }
  while (v494 != v92);
  v491 = (_QWORD *)aBlock;
  v106 = v495;
  swift_bridgeObjectRelease();
  v107 = 0;
  aBlock = (uint64_t)_swiftEmptyArrayStorage;
  v108 = (uint64_t)v97 + v106;
  v109 = (uint64_t)v463;
  do
  {
    if (v107 >= *(_QWORD *)(v495 + 16))
      goto LABEL_208;
    sub_10005972C(v108, v95, type metadata accessor for OwnedBeaconRecord);
    sub_10000F9B8(v95 + *(int *)(v499 + 28), v109, &qword_1010ED860);
    v110 = v485(v109, 1, v497);
    sub_100004048(v109, &qword_1010ED860);
    if (v110 == 1)
    {
      sub_1000126B0(v95, type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      sub_1000126EC(v95, v472, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v98) & 1) == 0)
      {
        sub_10009A680(0, v98[2] + 1, 1);
        v109 = (uint64_t)v463;
      }
      v98 = (_QWORD *)aBlock;
      v112 = *(_QWORD *)(aBlock + 16);
      v111 = *(_QWORD *)(aBlock + 24);
      if (v112 >= v111 >> 1)
      {
        sub_10009A680(v111 > 1, v112 + 1, 1);
        v109 = (uint64_t)v463;
        v98 = (_QWORD *)aBlock;
      }
      v98[2] = v112 + 1;
      sub_1000126EC(v472, (uint64_t)v498 + (_QWORD)v98 + v112 * (_QWORD)v99, type metadata accessor for OwnedBeaconRecord);
      v95 = v484;
    }
    ++v107;
    v108 += (uint64_t)v99;
  }
  while (v494 != v107);
  v113 = (_QWORD *)aBlock;
  LOBYTE(a3) = v460;
  v90 = v455;
  v114 = v491;
LABEL_24:
  swift_bridgeObjectRelease();
  v476 = sub_1008783C0((uint64_t)v114);
  swift_release();
  v460 = sub_1008783C0((uint64_t)v113);
  swift_release();
  if ((a3 & 1) != 0)
    v115 = _swiftEmptyArrayStorage;
  else
    v115 = 0;
  v116 = swift_allocObject(&unk_101095AC8, 24, 7);
  v472 = v116;
  *(_QWORD *)(v116 + 16) = v115;
  v117 = (_QWORD *)(v116 + 16);
  v509 = _swiftEmptyArrayStorage;
  v455 = dispatch_group_create();
  v506 = (uint64_t)_swiftEmptyDictionarySingleton;
  isa = v90[2].isa;
  v119 = v497;
  v120 = (uint64_t)v487;
  v121 = v480;
  if (isa)
  {
    v122 = (uint64_t)&v90[4];
    swift_bridgeObjectRetain(v90);
    do
    {
      sub_100030784(v122, (uint64_t)&aBlock);
      sub_1008472A0(&v506, &aBlock, (uint64_t *)&v508);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      swift_bridgeObjectRelease();
      v506 = (uint64_t)v508;
      v122 += 40;
      isa = (Class)((char *)isa - 1);
    }
    while (isa);
    v491 = v508;
    v427 = 0;
    swift_bridgeObjectRelease_n(v90, 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    v427 = 0;
    v491 = _swiftEmptyDictionarySingleton;
  }
  v124 = 0;
  v125 = *(_QWORD *)(v476 + 64);
  v439 = v476 + 64;
  v126 = 1 << *(_BYTE *)(v476 + 32);
  v127 = -1;
  if (v126 < 64)
    v127 = ~(-1 << v126);
  v128 = v127 & v125;
  v463 = &v507;
  v445 = (unint64_t)(v126 + 63) >> 6;
  v428 = v445 - 1;
  *(_QWORD *)&v123 = 141558275;
  v465 = v123;
  v440 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v123 = 136446210;
  v484 = v123;
  v441 = 0x8000000100EE7FF0;
  v498 = v117;
  v129 = v486;
  v130 = v481;
  while (2)
  {
    if (v128)
    {
      v494 = (v128 - 1) & v128;
      *(_QWORD *)&v495 = v124;
      v131 = __clz(__rbit64(v128)) | (v124 << 6);
      goto LABEL_39;
    }
    v136 = v124 + 1;
    if (__OFADD__(v124, 1))
      goto LABEL_209;
    if (v136 >= v445)
    {
      *(_QWORD *)&v495 = v124;
      goto LABEL_45;
    }
    v137 = *(_QWORD *)(v439 + 8 * v136);
    if (!v137)
    {
      v207 = v124 + 2;
      if (v124 + 2 >= v445)
      {
LABEL_98:
        *(_QWORD *)&v495 = v136;
        goto LABEL_45;
      }
      v137 = *(_QWORD *)(v439 + 8 * v207);
      if (v137)
      {
LABEL_85:
        v136 = v207;
        goto LABEL_43;
      }
      if (v124 + 3 >= v445)
      {
        *(_QWORD *)&v495 = v124 + 2;
      }
      else
      {
        v137 = *(_QWORD *)(v439 + 8 * (v124 + 3));
        if (v137)
        {
          v136 = v124 + 3;
          goto LABEL_43;
        }
        v207 = v124 + 4;
        if (v124 + 4 < v445)
        {
          v137 = *(_QWORD *)(v439 + 8 * v207);
          if (v137)
            goto LABEL_85;
          while (1)
          {
            v136 = v207 + 1;
            if (__OFADD__(v207, 1))
              goto LABEL_211;
            if (v136 >= v445)
              break;
            v137 = *(_QWORD *)(v439 + 8 * v136);
            ++v207;
            if (v137)
              goto LABEL_43;
          }
          v136 = v428;
          goto LABEL_98;
        }
        *(_QWORD *)&v495 = v124 + 3;
      }
LABEL_45:
      v138 = sub_10001A9A8(&qword_10110AB00);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v129, 1, 1, v138);
      v494 = 0;
      goto LABEL_46;
    }
LABEL_43:
    v494 = (v137 - 1) & v137;
    *(_QWORD *)&v495 = v136;
    v131 = __clz(__rbit64(v137)) + (v136 << 6);
LABEL_39:
    v132 = v476;
    sub_10005972C(*(_QWORD *)(v476 + 48) + *(_QWORD *)(v470 + 72) * v131, v129, type metadata accessor for StableIdentifier);
    v133 = *(_QWORD *)(v132 + 56);
    v134 = sub_10001A9A8(&qword_10110AB00);
    v135 = *(_QWORD *)(v133 + 8 * v131);
    v129 = v486;
    *(_QWORD *)(v486 + *(int *)(v134 + 48)) = v135;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 56))(v129, 0, 1, v134);
    swift_bridgeObjectRetain(v135);
    v130 = v481;
LABEL_46:
    sub_100005CF0(v129, v130, &qword_10110AAF8);
    v139 = sub_10001A9A8(&qword_10110AB00);
    v140 = *(unint64_t **)(v139 - 8);
    v141 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v140[6];
    if (v141(v130, 1, v139) != 1)
    {
      v142 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + *(int *)(v139 + 48));
      sub_1000126EC(v130, v121, type metadata accessor for StableIdentifier);
      if (*((_QWORD *)v142 + 2) < 2uLL)
      {
        sub_1000126B0(v121, type metadata accessor for StableIdentifier);
        swift_bridgeObjectRelease();
      }
      else
      {
        v485 = v142;
        sub_1008478C4();
        v475 = v143;
        v145 = v144;
        if (qword_1010E9F80 != -1)
          swift_once(&qword_1010E9F80, sub_1007FA778);
        v146 = type metadata accessor for Logger(0);
        sub_10001A9E8(v146, (uint64_t)qword_1011B77E8);
        v147 = v467;
        v148 = sub_10005972C(v121, v467, type metadata accessor for StableIdentifier);
        v149 = Logger.logObject.getter(v148);
        v150 = static os_log_type_t.error.getter(v149);
        if (os_log_type_enabled(v149, v150))
        {
          v151 = swift_slowAlloc(22, -1);
          v444 = (unint64_t)v145;
          v152 = v151;
          v153 = swift_slowAlloc(32, -1);
          aBlock = v153;
          *(_DWORD *)v152 = v465;
          v506 = 1752392040;
          v154 = v463;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v463, v152 + 4, v152 + 12);
          *(_WORD *)(v152 + 12) = 2081;
          v443 = (char *)(v152 + 14);
          v155 = v147;
          v156 = v457;
          sub_10005972C(v155, v457, type metadata accessor for StableIdentifier);
          v157 = String.init<A>(describing:)(v156, v458);
          v506 = sub_100016940(v157, v158, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v154, v443, v152 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v467, type metadata accessor for StableIdentifier);
          _os_log_impl((void *)&_mh_execute_header, v149, v150, "Duplicates for %{private,mask.hash}s", (uint8_t *)v152, 0x16u);
          swift_arrayDestroy(v153, 1, v440);
          swift_slowDealloc(v153, -1, -1);
          v159 = v152;
          v145 = (void *)v444;
          swift_slowDealloc(v159, -1, -1);
        }
        else
        {
          sub_1000126B0(v147, type metadata accessor for StableIdentifier);
        }

        v160 = (uint64_t)v466;
        if (*v117)
        {
          aBlock = 0;
          v501 = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          aBlock = 0xD00000000000001CLL;
          v501 = v441;
          v161._countAndFlagsBits = v475;
          v161._object = v145;
          String.append(_:)(v161);
          swift_bridgeObjectRelease();
          v162 = aBlock;
          v163 = v501;
          v164 = (_QWORD *)*v117;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v117);
          *v117 = v164;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v164 = sub_1007C7438(0, v164[2] + 1, 1, v164);
            *v117 = v164;
          }
          v167 = v164[2];
          v166 = v164[3];
          if (v167 >= v166 >> 1)
          {
            v164 = sub_1007C7438((_QWORD *)(v166 > 1), v167 + 1, 1, v164);
            *v117 = v164;
          }
          v164[2] = v167 + 1;
          v168 = &v164[2 * v167];
          v168[4] = v162;
          v168[5] = v163;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v169 = v480;
        if (qword_1010E9F20 != -1)
          swift_once(&qword_1010E9F20, sub_100791C44);
        sub_10001A9E8(v146, (uint64_t)qword_1011B7648);
        v170 = sub_10005972C(v169, v160, type metadata accessor for StableIdentifier);
        v171 = Logger.logObject.getter(v170);
        v172 = static os_log_type_t.default.getter(v171);
        if (os_log_type_enabled(v171, v172))
        {
          v173 = swift_slowAlloc(22, -1);
          v475 = swift_slowAlloc(32, -1);
          aBlock = v475;
          *(_DWORD *)v173 = v465;
          v506 = 1752392040;
          v174 = v463;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v463, v173 + 4, v173 + 12);
          *(_WORD *)(v173 + 12) = 2081;
          v444 = v173 + 14;
          v175 = v457;
          sub_10005972C(v160, v457, type metadata accessor for StableIdentifier);
          v176 = String.init<A>(describing:)(v175, v458);
          v506 = sub_100016940(v176, v177, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v174, v444, v173 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v160, type metadata accessor for StableIdentifier);
          _os_log_impl((void *)&_mh_execute_header, v171, v172, "Duplicates for %{private,mask.hash}s", (uint8_t *)v173, 0x16u);
          v178 = v475;
          swift_arrayDestroy(v475, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v178, -1, -1);
          swift_slowDealloc(v173, -1, -1);
        }
        else
        {
          sub_1000126B0(v160, type metadata accessor for StableIdentifier);
        }

        v119 = v497;
        v120 = (uint64_t)v487;
        v179 = *((_QWORD *)v485 + 2);
        v180 = v473;
        v181 = (*(unsigned __int8 *)(v473 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v473 + 80);
        if (v179)
        {
          v475 = (*(unsigned __int8 *)(v473 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v473 + 80);
          v182 = (uint64_t)v485 + v181;
          swift_bridgeObjectRetain(v485);
          v183 = *(_QWORD *)(v180 + 72);
          v184 = (uint64_t)v496;
          do
          {
            sub_10005972C(v182, (uint64_t)v76, type metadata accessor for OwnedBeaconRecord);
            if (*v117)
            {
              aBlock = 8224;
              v501 = 0xE200000000000000;
              v185 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v186._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v497, v185);
              String.append(_:)(v186);
              swift_bridgeObjectRelease();
              v187 = aBlock;
              v188 = v501;
              v189 = (_QWORD *)*v117;
              v190 = swift_isUniquelyReferenced_nonNull_native(*v117);
              *v117 = v189;
              if ((v190 & 1) == 0)
              {
                v189 = sub_1007C7438(0, v189[2] + 1, 1, v189);
                *v117 = v189;
              }
              v192 = v189[2];
              v191 = v189[3];
              if (v192 >= v191 >> 1)
              {
                v189 = sub_1007C7438((_QWORD *)(v191 > 1), v192 + 1, 1, v189);
                *v498 = v189;
              }
              v189[2] = v192 + 1;
              v193 = &v189[2 * v192];
              v193[4] = v187;
              v193[5] = v188;
              v117 = v498;
              v184 = (uint64_t)v496;
            }
            v194 = sub_10005972C((uint64_t)v76, v184, type metadata accessor for OwnedBeaconRecord);
            v195 = Logger.logObject.getter(v194);
            v196 = static os_log_type_t.error.getter(v195);
            if (os_log_type_enabled(v195, v196))
            {
              v197 = swift_slowAlloc(12, -1);
              v198 = swift_slowAlloc(32, -1);
              aBlock = v198;
              *(_DWORD *)v197 = v484;
              v199 = v184;
              v200 = v490;
              sub_10005972C(v199, v490, type metadata accessor for OwnedBeaconRecord);
              v201 = String.init<A>(describing:)(v200, v499);
              *(_QWORD *)(v197 + 4) = sub_100016940(v201, v202, &aBlock);
              v184 = (uint64_t)v496;
              swift_bridgeObjectRelease();
              sub_1000126B0(v184, type metadata accessor for OwnedBeaconRecord);
              _os_log_impl((void *)&_mh_execute_header, v195, v196, "DUPE: %{public}s", (uint8_t *)v197, 0xCu);
              swift_arrayDestroy(v198, 1, (char *)&type metadata for Any + 8);
              v203 = v198;
              v117 = v498;
              swift_slowDealloc(v203, -1, -1);
              swift_slowDealloc(v197, -1, -1);

            }
            else
            {

              sub_1000126B0(v184, type metadata accessor for OwnedBeaconRecord);
            }
            sub_1000126B0((uint64_t)v76, type metadata accessor for OwnedBeaconRecord);
            v182 += v183;
            --v179;
          }
          while (v179);
          v204 = (uint64_t)v485;
          swift_bridgeObjectRelease();
          v205 = *(_QWORD *)(v204 + 16);
          if (v205 >= 2)
            v206 = v205 - 1;
          else
            v206 = 0;
          v119 = v497;
          v120 = (uint64_t)v487;
          v130 = v481;
          v181 = v475;
        }
        else
        {
          v206 = 0;
          v130 = v481;
          v204 = (uint64_t)v485;
        }
        sub_1003051E0(v204, v204 + v181, 0, (2 * v206) | 1);
        v121 = v480;
        sub_1000126B0(v480, type metadata accessor for StableIdentifier);
        v129 = v486;
      }
      v128 = v494;
      v124 = v495;
      continue;
    }
    break;
  }
  v463 = v140;
  v466 = (char *)v139;
  swift_release();
  v209 = 0;
  v210 = *(_QWORD *)(v460 + 64);
  v441 = v460 + 64;
  v211 = 1 << *(_BYTE *)(v460 + 32);
  v212 = -1;
  if (v211 < 64)
    v212 = ~(-1 << v211);
  v213 = v212 & v210;
  v445 = (unint64_t)(v211 + 63) >> 6;
  v440 = (char *)(v445 - 1);
  v443 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v208 = 141558531;
  v480 = v208;
  v444 = 0x8000000100EE7FC0;
  v214 = (uint64_t)v447;
  v215 = (uint64_t)v446;
  v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v141;
  v485 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v141;
  while (2)
  {
    v217 = v464;
    if (v213)
    {
      v218 = v215;
      v475 = (v213 - 1) & v213;
      v476 = v209;
      v219 = __clz(__rbit64(v213)) | (v209 << 6);
      goto LABEL_106;
    }
    v224 = v209 + 1;
    if (__OFADD__(v209, 1))
      goto LABEL_210;
    if (v224 >= v445)
    {
      v476 = v209;
      goto LABEL_112;
    }
    v225 = *(_QWORD *)(v441 + 8 * v224);
    v222 = v466;
    if (!v225)
    {
      v340 = v209 + 2;
      if (v209 + 2 >= v445)
      {
LABEL_187:
        v476 = v224;
        goto LABEL_113;
      }
      v225 = *(_QWORD *)(v441 + 8 * v340);
      if (v225)
      {
LABEL_173:
        v224 = v340;
        goto LABEL_110;
      }
      if (v209 + 3 >= v445)
      {
        v476 = v209 + 2;
      }
      else
      {
        v225 = *(_QWORD *)(v441 + 8 * (v209 + 3));
        if (v225)
        {
          v224 = v209 + 3;
          goto LABEL_110;
        }
        v340 = v209 + 4;
        if (v209 + 4 < v445)
        {
          v225 = *(_QWORD *)(v441 + 8 * v340);
          if (v225)
            goto LABEL_173;
          v222 = v466;
          while (1)
          {
            v224 = v340 + 1;
            if (__OFADD__(v340, 1))
              goto LABEL_212;
            if (v224 >= v445)
              break;
            v225 = *(_QWORD *)(v441 + 8 * v224);
            ++v340;
            if (v225)
              goto LABEL_110;
          }
          v224 = (uint64_t)v440;
          goto LABEL_187;
        }
        v476 = v209 + 3;
      }
LABEL_112:
      v222 = v466;
LABEL_113:
      ((void (*)(uint64_t, uint64_t, uint64_t, char *))v463[7])(v464, 1, 1, v222);
      v475 = 0;
      goto LABEL_114;
    }
LABEL_110:
    v218 = v215;
    v475 = (v225 - 1) & v225;
    v219 = __clz(__rbit64(v225)) + (v224 << 6);
    v476 = v224;
LABEL_106:
    v220 = v460;
    sub_10005972C(*(_QWORD *)(v460 + 48) + *(_QWORD *)(v470 + 72) * v219, v464, type metadata accessor for StableIdentifier);
    v221 = *(_QWORD *)(v220 + 56);
    v222 = v466;
    v223 = *(_QWORD *)(v221 + 8 * v219);
    *(_QWORD *)(v217 + *((int *)v466 + 12)) = v223;
    ((void (*)(uint64_t, _QWORD, uint64_t, char *))v463[7])(v217, 0, 1, v222);
    swift_bridgeObjectRetain(v223);
    v215 = v218;
LABEL_114:
    sub_100005CF0(v217, v215, &qword_10110AAF8);
    if (v216(v215, 1, v222) != 1)
    {
      v226 = *(_QWORD *)(v215 + *((int *)v222 + 12));
      v227 = (uint64_t)v477;
      sub_1000126EC(v215, (uint64_t)v477, type metadata accessor for StableIdentifier);
      if (*(_QWORD *)(v226 + 16) < 2uLL)
      {
        sub_1000126B0(v227, type metadata accessor for StableIdentifier);
        swift_bridgeObjectRelease();
      }
      else
      {
        v467 = v226;
        sub_1008478C4();
        v230 = v229;
        if (*v117)
        {
          v231 = v228;
          aBlock = 0;
          v501 = 0xE000000000000000;
          _StringGuts.grow(_:)(40);
          swift_bridgeObjectRelease();
          aBlock = 0xD000000000000026;
          v501 = v444;
          v232._countAndFlagsBits = v231;
          v232._object = v230;
          String.append(_:)(v232);
          swift_bridgeObjectRelease();
          v233 = aBlock;
          v234 = v501;
          v235 = (_QWORD *)*v117;
          v236 = swift_isUniquelyReferenced_nonNull_native(*v117);
          *v117 = v235;
          if ((v236 & 1) == 0)
          {
            v235 = sub_1007C7438(0, v235[2] + 1, 1, v235);
            *v117 = v235;
          }
          v238 = v235[2];
          v237 = v235[3];
          if (v238 >= v237 >> 1)
          {
            v235 = sub_1007C7438((_QWORD *)(v237 > 1), v238 + 1, 1, v235);
            *v117 = v235;
          }
          v235[2] = v238 + 1;
          v239 = &v235[2 * v238];
          v239[4] = v233;
          v239[5] = v234;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v240 = (uint64_t)v477;
        if (qword_1010E9F80 != -1)
          swift_once(&qword_1010E9F80, sub_1007FA778);
        v241 = type metadata accessor for Logger(0);
        v242 = sub_10001A9E8(v241, (uint64_t)qword_1011B77E8);
        v243 = sub_10005972C(v240, v214, type metadata accessor for StableIdentifier);
        v494 = v242;
        v244 = Logger.logObject.getter(v243);
        v245 = static os_log_type_t.error.getter(v244);
        if (os_log_type_enabled(v244, v245))
        {
          v246 = swift_slowAlloc(22, -1);
          v247 = swift_slowAlloc(32, -1);
          aBlock = v247;
          *(_DWORD *)v246 = v465;
          *(_QWORD *)(v246 + 4) = 1752392040;
          *(_WORD *)(v246 + 12) = 2081;
          v248 = v457;
          sub_10005972C(v214, v457, type metadata accessor for StableIdentifier);
          v249 = String.init<A>(describing:)(v248, v458);
          *(_QWORD *)(v246 + 14) = sub_100016940(v249, v250, &aBlock);
          swift_bridgeObjectRelease();
          sub_1000126B0(v214, type metadata accessor for StableIdentifier);
          _os_log_impl((void *)&_mh_execute_header, v244, v245, "Duplicates (grouped) for %{private,mask.hash}s", (uint8_t *)v246, 0x16u);
          swift_arrayDestroy(v247, 1, v443);
          swift_slowDealloc(v247, -1, -1);
          swift_slowDealloc(v246, -1, -1);
        }
        else
        {
          sub_1000126B0(v214, type metadata accessor for StableIdentifier);
        }

        v251 = (uint64_t)v492;
        v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v485;
        v252 = *(char **)(v467 + 16);
        v253 = v489;
        if (v252)
        {
          v481 = (*(unsigned __int8 *)(v473 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v473 + 80);
          v254 = v467 + v481;
          v486 = *(_QWORD *)(v473 + 72);
          do
          {
            v496 = v252;
            *(_QWORD *)&v495 = v254;
            sub_10005972C(v254, v120, type metadata accessor for OwnedBeaconRecord);
            if (*v117)
            {
              aBlock = 8224;
              v501 = 0xE200000000000000;
              v256 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v257._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v119, v256);
              String.append(_:)(v257);
              swift_bridgeObjectRelease();
              v258 = aBlock;
              v259 = v501;
              v260 = (_QWORD *)*v117;
              v261 = swift_isUniquelyReferenced_nonNull_native(*v117);
              *v117 = v260;
              if ((v261 & 1) == 0)
              {
                v260 = sub_1007C7438(0, v260[2] + 1, 1, v260);
                *v117 = v260;
              }
              v263 = v260[2];
              v262 = v260[3];
              if (v263 >= v262 >> 1)
              {
                v260 = sub_1007C7438((_QWORD *)(v262 > 1), v263 + 1, 1, v260);
                *v498 = v260;
              }
              v260[2] = v263 + 1;
              v264 = &v260[2 * v263];
              v264[4] = v258;
              v264[5] = v259;
              v117 = v498;
              v251 = (uint64_t)v492;
            }
            v265 = sub_10005972C(v120, v251, type metadata accessor for OwnedBeaconRecord);
            v266 = Logger.logObject.getter(v265);
            v267 = static os_log_type_t.error.getter(v266);
            v268 = v253;
            if (os_log_type_enabled(v266, v267))
            {
              v269 = v251;
              v270 = swift_slowAlloc(12, -1);
              v271 = swift_slowAlloc(32, -1);
              aBlock = v271;
              *(_DWORD *)v270 = v484;
              v272 = v490;
              sub_10005972C(v269, v490, type metadata accessor for OwnedBeaconRecord);
              v273 = String.init<A>(describing:)(v272, v499);
              *(_QWORD *)(v270 + 4) = sub_100016940(v273, v274, &aBlock);
              v117 = v498;
              swift_bridgeObjectRelease();
              v275 = v269;
              v120 = (uint64_t)v487;
              sub_1000126B0(v275, type metadata accessor for OwnedBeaconRecord);
              _os_log_impl((void *)&_mh_execute_header, v266, v267, "DUPE: %{public}s", (uint8_t *)v270, 0xCu);
              swift_arrayDestroy(v271, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v271, -1, -1);
              swift_slowDealloc(v270, -1, -1);
            }
            else
            {
              sub_1000126B0(v251, type metadata accessor for OwnedBeaconRecord);
            }

            v276 = (uint64_t)v482;
            v277 = (uint64_t)v483;
            if (!v491[2] || (v278 = sub_100003FB0(v120 + *(int *)(v499 + 20)), (v279 & 1) == 0))
            {
              v284 = v119;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v488 + 56))(v277, 1, 1, v119);
LABEL_150:
              sub_100004048(v277, &qword_1010ED860);
              v253 = v268;
              sub_10005972C(v120, v268, type metadata accessor for OwnedBeaconRecord);
              v293 = sub_10005972C(v120, v276, type metadata accessor for OwnedBeaconRecord);
              v294 = Logger.logObject.getter(v293);
              v295 = static os_log_type_t.error.getter(v294);
              if (os_log_type_enabled(v294, v295))
              {
                v296 = swift_slowAlloc(32, -1);
                v297 = v276;
                v298 = swift_slowAlloc(64, -1);
                aBlock = v298;
                *(_DWORD *)v296 = v480;
                *(_QWORD *)(v296 + 4) = 1752392040;
                *(_WORD *)(v296 + 12) = 2081;
                v299 = v499;
                v300 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                v301 = dispatch thunk of CustomStringConvertible.description.getter(v497, v300);
                *(_QWORD *)(v296 + 14) = sub_100016940(v301, v302, &aBlock);
                swift_bridgeObjectRelease();
                sub_1000126B0(v489, type metadata accessor for OwnedBeaconRecord);
                *(_WORD *)(v296 + 22) = 2082;
                v303 = v490;
                sub_10005972C(v297, v490, type metadata accessor for OwnedBeaconRecord);
                v304 = v299;
                v117 = v498;
                v305 = String.init<A>(describing:)(v303, v304);
                *(_QWORD *)(v296 + 24) = sub_100016940(v305, v306, &aBlock);
                swift_bridgeObjectRelease();
                v253 = v489;
                sub_1000126B0(v297, type metadata accessor for OwnedBeaconRecord);
                _os_log_impl((void *)&_mh_execute_header, v294, v295, "Beacon %{private,mask.hash}s is not known by group: %{public}s)", (uint8_t *)v296, 0x20u);
                swift_arrayDestroy(v298, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v298, -1, -1);
                v307 = v296;
                v120 = (uint64_t)v487;
                v119 = v497;
                swift_slowDealloc(v307, -1, -1);

              }
              else
              {
                sub_1000126B0(v268, type metadata accessor for OwnedBeaconRecord);
                sub_1000126B0(v276, type metadata accessor for OwnedBeaconRecord);

                v119 = v284;
              }
              sub_10005972C(v120, v493, type metadata accessor for OwnedBeaconRecord);
              v308 = (unint64_t)v509;
              v309 = swift_isUniquelyReferenced_nonNull_native(v509);
              v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v485;
              if ((v309 & 1) == 0)
                v308 = sub_1007C8520(0, *(_QWORD *)(v308 + 16) + 1, 1, v308);
              v311 = *(_QWORD *)(v308 + 16);
              v310 = *(_QWORD *)(v308 + 24);
              if (v311 >= v310 >> 1)
                v308 = sub_1007C8520(v310 > 1, v311 + 1, 1, v308);
              *(_QWORD *)(v308 + 16) = v311 + 1;
              v255 = v486;
              sub_1000126EC(v493, v308 + v481 + v311 * v486, type metadata accessor for OwnedBeaconRecord);
              v509 = (_QWORD *)v308;
              sub_1000126B0(v120, type metadata accessor for OwnedBeaconRecord);
              goto LABEL_133;
            }
            v280 = v488;
            v281 = *(void (**)(uint64_t, unint64_t, uint64_t))(v488 + 16);
            v281(v277, v491[7] + *(_QWORD *)(v488 + 72) * v278, v119);
            v282 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v280 + 56);
            v282(v277, 0, 1, v119);
            v283 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v280 + 48);
            v284 = v119;
            if (v283(v277, 1, v119) == 1)
              goto LABEL_150;
            v285 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v488 + 32);
            v286 = v120;
            v287 = v479;
            v285(v479, v277, v119);
            v288 = v478;
            v281(v478, (unint64_t)v287, v119);
            v282(v288, 0, 1, v119);
            v289 = v286 + *(int *)(v499 + 28);
            v290 = v468;
            v291 = v468 + *(int *)(v469 + 48);
            sub_10000F9B8(v288, v468, &qword_1010ED860);
            sub_10000F9B8(v289, v291, &qword_1010ED860);
            if (v283(v290, 1, v119) == 1)
            {
              sub_100004048(v288, &qword_1010ED860);
              v292 = v283(v291, 1, v119);
              v253 = v489;
              v117 = v498;
              v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v485;
              if (v292 != 1)
                goto LABEL_160;
              sub_100004048(v290, &qword_1010ED860);
              v120 = (uint64_t)v487;
              (*(void (**)(unint64_t *, uint64_t))(v488 + 8))(v479, v119);
            }
            else
            {
              v312 = v459;
              sub_10000F9B8(v290, v459, &qword_1010ED860);
              v313 = v283(v291, 1, v119);
              v117 = v498;
              v216 = (unsigned int (*)(uint64_t, uint64_t, char *))v485;
              if (v313 == 1)
              {
                sub_100004048(v478, &qword_1010ED860);
                (*(void (**)(uint64_t, uint64_t))(v488 + 8))(v312, v119);
LABEL_160:
                sub_100004048(v290, (uint64_t *)&unk_10110EE90);
                v120 = (uint64_t)v487;
LABEL_161:
                sub_10005972C(v120, v474, type metadata accessor for OwnedBeaconRecord);
                v314 = (unint64_t)v509;
                if ((swift_isUniquelyReferenced_nonNull_native(v509) & 1) == 0)
                  v314 = sub_1007C8520(0, *(_QWORD *)(v314 + 16) + 1, 1, v314);
                v315 = (uint64_t)v462;
                v317 = *(_QWORD *)(v314 + 16);
                v316 = *(_QWORD *)(v314 + 24);
                if (v317 >= v316 >> 1)
                  v314 = sub_1007C8520(v316 > 1, v317 + 1, 1, v314);
                *(_QWORD *)(v314 + 16) = v317 + 1;
                sub_1000126EC(v474, v314 + v481 + v317 * v486, type metadata accessor for OwnedBeaconRecord);
                v509 = (_QWORD *)v314;
                sub_10005972C(v120, v315, type metadata accessor for OwnedBeaconRecord);
                v318 = v461;
                v319 = sub_10005972C(v120, v461, type metadata accessor for OwnedBeaconRecord);
                v320 = Logger.logObject.getter(v319);
                v321 = static os_log_type_t.error.getter(v320);
                if (os_log_type_enabled(v320, v321))
                {
                  v322 = swift_slowAlloc(32, -1);
                  v323 = v315;
                  v324 = swift_slowAlloc(64, -1);
                  aBlock = v324;
                  *(_DWORD *)v322 = v480;
                  *(_QWORD *)(v322 + 4) = 1752392040;
                  *(_WORD *)(v322 + 12) = 2081;
                  v325 = v499;
                  v326 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                  v327 = dispatch thunk of CustomStringConvertible.description.getter(v497, v326);
                  *(_QWORD *)(v322 + 14) = sub_100016940(v327, v328, &aBlock);
                  swift_bridgeObjectRelease();
                  sub_1000126B0(v323, type metadata accessor for OwnedBeaconRecord);
                  *(_WORD *)(v322 + 22) = 2082;
                  v329 = v490;
                  sub_10005972C(v318, v490, type metadata accessor for OwnedBeaconRecord);
                  v330 = v325;
                  v117 = v498;
                  v331 = String.init<A>(describing:)(v329, v330);
                  *(_QWORD *)(v322 + 24) = sub_100016940(v331, v332, &aBlock);
                  swift_bridgeObjectRelease();
                  sub_1000126B0(v318, type metadata accessor for OwnedBeaconRecord);
                  _os_log_impl((void *)&_mh_execute_header, v320, v321, "Beacon %{private,mask.hash}s groupId mismatch with group: %{public}s)", (uint8_t *)v322, 0x20u);
                  swift_arrayDestroy(v324, 2, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v324, -1, -1);
                  v333 = v322;
                  v120 = (uint64_t)v487;
                  v119 = v497;
                  swift_slowDealloc(v333, -1, -1);

                }
                else
                {

                  sub_1000126B0(v318, type metadata accessor for OwnedBeaconRecord);
                  sub_1000126B0(v315, type metadata accessor for OwnedBeaconRecord);
                }
                (*(void (**)(unint64_t *, uint64_t))(v488 + 8))(v479, v119);
                sub_1000126B0(v120, type metadata accessor for OwnedBeaconRecord);
                v253 = v489;
                goto LABEL_132;
              }
              v334 = v312;
              v335 = v442;
              v285((unint64_t *)v442, v291, v119);
              v336 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v337 = v290;
              v338 = dispatch thunk of static Equatable.== infix(_:_:)(v334, v335, v119, v336);
              v339 = *(void (**)(char *, uint64_t))(v488 + 8);
              v339(v335, v119);
              sub_100004048(v478, &qword_1010ED860);
              v339((char *)v334, v119);
              sub_100004048(v337, &qword_1010ED860);
              v253 = v489;
              v120 = (uint64_t)v487;
              if ((v338 & 1) == 0)
                goto LABEL_161;
              v339((char *)v479, v119);
            }
            sub_1000126B0(v120, type metadata accessor for OwnedBeaconRecord);
LABEL_132:
            v255 = v486;
LABEL_133:
            v254 = v495 + v255;
            v252 = v496 - 1;
            v251 = (uint64_t)v492;
          }
          while (v496 != (char *)1);
        }
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v477, type metadata accessor for StableIdentifier);
        v214 = (uint64_t)v447;
        v215 = (uint64_t)v446;
      }
      v209 = v476;
      v213 = v475;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_release();
  v341 = v509[2];
  if (v341)
  {
    v342 = *(unsigned __int8 *)(v473 + 80);
    v477 = v509;
    v343 = (uint64_t)v509 + ((v342 + 32) & ~v342);
    v479 = &v507;
    v496 = (char *)(v342 | 7);
    v493 = (v342 + 24) & ~v342;
    v492 = (char *)((v429 + 7 + v493) & 0xFFFFFFFFFFFFFFF8);
    v491 = v492 + 8;
    LODWORD(v489) = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    v487 = (char *)((v342 + 16) & ~v342);
    v486 = (unint64_t)&v487[v429 + 7] & 0xFFFFFFFFFFFFFFF8;
    v344 = (v486 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)&v484 = v344 + 8;
    v483 = (char *)(v344 + 9);
    v485 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v344;
    v482 = (char *)(v344 + 10);
    v481 = *(_QWORD *)(v473 + 72);
    v478 = (uint64_t)&type metadata for Any + 8;
    v495 = xmmword_100E22B00;
    v345 = (uint64_t)v454;
    do
    {
      sub_10005972C(v343, v345, type metadata accessor for OwnedBeaconRecord);
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v359 = type metadata accessor for Logger(0);
      sub_10001A9E8(v359, (uint64_t)qword_1011B77E8);
      v360 = v448;
      v361 = sub_10005972C(v345, v448, type metadata accessor for OwnedBeaconRecord);
      v362 = Logger.logObject.getter(v361);
      v363 = static os_log_type_t.error.getter(v362);
      v364 = os_log_type_enabled(v362, v363);
      v365 = v497;
      v494 = v341;
      if (v364)
      {
        v366 = swift_slowAlloc(22, -1);
        v367 = swift_slowAlloc(32, -1);
        aBlock = v367;
        *(_DWORD *)v366 = v465;
        v506 = 1752392040;
        *(_QWORD *)&v480 = v343;
        v368 = v479;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v479, v366 + 4, v366 + 12);
        *(_WORD *)(v366 + 12) = 2081;
        v369 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v370 = dispatch thunk of CustomStringConvertible.description.getter(v365, v369);
        v506 = sub_100016940(v370, v371, &aBlock);
        v372 = v368;
        v343 = v480;
        v117 = v498;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v506, v372, v366 + 14, v366 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v360, type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v362, v363, "Unpairing %{private,mask.hash}s", (uint8_t *)v366, 0x16u);
        swift_arrayDestroy(v367, 1, v478);
        swift_slowDealloc(v367, -1, -1);
        swift_slowDealloc(v366, -1, -1);
      }
      else
      {
        sub_1000126B0(v360, type metadata accessor for OwnedBeaconRecord);
      }

      swift_beginAccess(v117, &aBlock, 33, 0);
      if (*v117)
      {
        v506 = 0x6E69726961706E55;
        v507 = 0xEA00000000002067;
        v373 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v374._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v497, v373);
        String.append(_:)(v374);
        swift_bridgeObjectRelease();
        v375 = v506;
        v376 = v507;
        v377 = (_QWORD *)*v117;
        v378 = swift_isUniquelyReferenced_nonNull_native(*v117);
        *v117 = v377;
        if ((v378 & 1) == 0)
        {
          v377 = sub_1007C7438(0, v377[2] + 1, 1, v377);
          *v117 = v377;
        }
        v380 = v377[2];
        v379 = v377[3];
        if (v380 >= v379 >> 1)
        {
          v377 = sub_1007C7438((_QWORD *)(v379 > 1), v380 + 1, 1, v377);
          *v117 = v377;
        }
        v377[2] = v380 + 1;
        v381 = &v377[2 * v380];
        v381[4] = v375;
        v381[5] = v376;
      }
      swift_endAccess(&aBlock);
      v382 = v455;
      dispatch_group_enter(v455);
      v383 = v449;
      sub_10005972C(v345, v449, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v383, v471, type metadata accessor for OwnedBeaconRecord);
      v384 = swift_allocObject(&unk_101095AF0, v491, v496);
      *(_QWORD *)(v384 + 16) = v382;
      sub_1000126EC(v383, v384 + v493, type metadata accessor for OwnedBeaconRecord);
      v385 = v472;
      *(_QWORD *)&v492[v384] = v472;
      swift_retain_n(v385, 2);
      v386 = v382;
      v387 = v345;
      v388 = v386;
      v389 = static os_log_type_t.default.getter(v386);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v390 = qword_1011B7D38;
      v391 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v392 = swift_allocObject(v391, 72, 7);
      *(_OWORD *)(v392 + 16) = v495;
      v393 = v387 + *(int *)(v499 + 20);
      v394 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v395 = dispatch thunk of CustomStringConvertible.description.getter(v497, v394);
      v397 = v396;
      *(_QWORD *)(v392 + 56) = &type metadata for String;
      *(_QWORD *)(v392 + 64) = sub_10001AA00();
      *(_QWORD *)(v392 + 32) = v395;
      *(_QWORD *)(v392 + 40) = v397;
      os_log(_:dso:log:_:_:)(v389, &_mh_execute_header, v390, "Unpair owned beacon: %@", 23, 2, v392);
      v398 = swift_bridgeObjectRelease();
      v399 = v450;
      static SystemInfo.lockState.getter(v398);
      v400 = v452;
      v401 = v451;
      v402 = v453;
      (*(void (**)(char *, _QWORD, uint64_t))(v452 + 104))(v451, v489, v453);
      v403 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
      dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v402, v403);
      dispatch thunk of RawRepresentable.rawValue.getter(&v506, v402, v403);
      v404 = aBlock;
      v405 = v506;
      v406 = *(void (**)(char *, uint64_t))(v400 + 8);
      v406(v401, v402);
      v407 = ((uint64_t (*)(char *, uint64_t))v406)(v399, v402);
      if (v404 == v405)
      {
        v408 = static os_log_type_t.default.getter(v407);
        os_log(_:dso:log:_:_:)(v408, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
        v409 = sub_10008806C();
        v410 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v409, 0, 0);
        *v411 = 0;
        sub_100847CD8(v410, v388, v471, v472);
        swift_errorRelease(v410);
      }
      v346 = dispatch_group_create();
      dispatch_group_enter(v346);
      v347 = sub_10001A9A8(&qword_1011003C0);
      v348 = v488;
      v349 = *(unsigned __int8 *)(v488 + 80);
      v350 = (v349 + 32) & ~v349;
      v351 = swift_allocObject(v347, v350 + *(_QWORD *)(v488 + 72), v349 | 7);
      *(_OWORD *)(v351 + 16) = v495;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v348 + 16))(v351 + v350, v393, v497);
      v352 = swift_allocObject(&unk_101095B18, 24, 7);
      *(_QWORD *)(v352 + 16) = v346;
      v353 = v346;
      v354 = v456;
      sub_10075B3B4(v351, (uint64_t)sub_1002981A0, v352);
      swift_bridgeObjectRelease();
      swift_release();
      OS_dispatch_group.wait()();
      v355 = v454;
      v356 = v490;
      sub_10005972C((uint64_t)v454, v490, type metadata accessor for OwnedBeaconRecord);
      v357 = swift_allocObject(&unk_101095B40, v482, v496);
      sub_1000126EC(v356, (uint64_t)&v487[v357], type metadata accessor for OwnedBeaconRecord);
      v358 = (void (**)(uint64_t))(v357 + v486);
      *v358 = sub_10087E12C;
      v358[1] = (void (*)(uint64_t))v384;
      *(_QWORD *)((char *)v485 + v357) = v354;
      *(_BYTE *)(v357 + v484) = 0;
      v483[v357] = 0;
      swift_retain();
      swift_retain();
      sub_1009FB1F0(v355, (void (*)(_QWORD))sub_10028F948, v357);

      v345 = (uint64_t)v355;
      swift_release();
      swift_release();

      sub_1000126B0(v471, type metadata accessor for OwnedBeaconRecord);
      swift_release();
      sub_1000126B0((uint64_t)v355, type metadata accessor for OwnedBeaconRecord);
      v343 += v481;
      v341 = v494 - 1;
      v117 = v498;
    }
    while (v494 != 1);
  }
  swift_bridgeObjectRelease();
  v412 = *(_QWORD *)(v456 + 64);
  v413 = (_QWORD *)swift_allocObject(&unk_101095B68, 48, 7);
  v414 = v472;
  v413[2] = v431;
  v413[3] = v414;
  v415 = v432;
  v413[4] = v430;
  v413[5] = v415;
  v504 = sub_10087E478;
  v505 = v413;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v501 = 1107296256;
  v502 = sub_100016FB8;
  v503 = &unk_101095B80;
  v416 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  v417 = swift_retain();
  v418 = v433;
  static DispatchQoS.unspecified.getter(v417);
  v506 = (uint64_t)_swiftEmptyArrayStorage;
  v419 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v420 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v421 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v422 = v436;
  v423 = v420;
  v424 = v438;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v506, v423, v421, v438, v419);
  v425 = v455;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v418, v422, v412, v416);
  _Block_release(v416);

  (*(void (**)(char *, uint64_t))(v437 + 8))(v422, v424);
  (*(void (**)(char *, uint64_t))(v434 + 8))(v418, v435);
  swift_release();
  return swift_release();
}

uint64_t sub_1008472A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(unint64_t, uint64_t);
  unint64_t v34;
  char *v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  void (*v43)(uint64_t, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, unint64_t, uint64_t);
  unint64_t v50;
  char v51;
  char v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  void (*v64)(unint64_t, char *, uint64_t);
  unint64_t v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  int64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;

  v77 = a3;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD **)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v76 - v9;
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v78 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v83 = (char *)&v76 - v15;
  __chkstk_darwin(v14);
  v84 = a2;
  v85 = (char *)&v76 - v16;
  v17 = *a1;
  v18 = a2[3];
  v19 = a2[4];
  sub_10001AA44(a2, v18);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v19 + 16);
  v21 = swift_bridgeObjectRetain(v17);
  v22 = v18;
  v23 = v6;
  v24 = v19;
  v25 = (uint64_t)v10;
  v26 = v20(v22, v24, v21);
  v27 = 0;
  v28 = *(_QWORD *)(v26 + 56);
  v79 = v26 + 56;
  v86 = v26;
  v87 = v5;
  v29 = 1 << *(_BYTE *)(v26 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v28;
  v80 = (unint64_t)(v29 + 63) >> 6;
  v88 = v25;
  v82 = v6;
  v92 = v17;
  if (v31)
    goto LABEL_7;
LABEL_8:
  v36 = v27 + 1;
  v35 = v85;
  if (__OFADD__(v27, 1))
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v87);
    __break(1u);
    return result;
  }
  if (v36 < v80)
  {
    v37 = *(_QWORD *)(v79 + 8 * v36);
    ++v27;
    if (v37)
      goto LABEL_21;
    v27 = v36 + 1;
    if (v36 + 1 >= v80)
      goto LABEL_41;
    v37 = *(_QWORD *)(v79 + 8 * v27);
    if (v37)
      goto LABEL_21;
    v27 = v36 + 2;
    if (v36 + 2 >= v80)
      goto LABEL_41;
    v37 = *(_QWORD *)(v79 + 8 * v27);
    if (v37)
    {
LABEL_21:
      v91 = (v37 - 1) & v37;
      v34 = __clz(__rbit64(v37)) + (v27 << 6);
      while (1)
      {
        v39 = v23[9];
        v40 = (void (*)(char *, unint64_t, uint64_t))v23[2];
        v40(v35, *(_QWORD *)(v86 + 48) + v39 * v34, v5);
        v41 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v23[7];
        v41(v35, 0, 1, v5);
        v42 = (unsigned int (*)(char *, uint64_t, uint64_t))v23[6];
        if (v42(v35, 1, v5) == 1)
        {
          result = swift_release();
          v17 = v92;
          goto LABEL_42;
        }
        v89 = v39;
        v90 = v27;
        v43 = (void (*)(uint64_t, char *, uint64_t))v23[4];
        v43(v25, v35, v5);
        v44 = v25;
        v45 = v84[3];
        v46 = v84[4];
        sub_10001AA44(v84, v45);
        v47 = v45;
        v48 = (uint64_t)v83;
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v46);
        v41((char *)v48, 0, 1, v5);
        if (v42((char *)v48, 1, v5) == 1)
        {
          v49 = (void (*)(uint64_t, unint64_t, uint64_t))v43;
          sub_100004048(v48, &qword_1010ED860);
          v17 = v92;
          swift_bridgeObjectRetain(v92);
          v50 = sub_100003FB0(v44);
          v52 = v51;
          swift_bridgeObjectRelease();
          if ((v52 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
            v93 = (_QWORD *)v17;
            v23 = v82;
            v32 = (uint64_t)v78;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100A9AA68();
              v17 = (uint64_t)v93;
            }
            v54 = v50 * v89;
            v33 = (void (*)(unint64_t, uint64_t))v23[1];
            v55 = v87;
            v33(*(_QWORD *)(v17 + 48) + v50 * v89, v87);
            v17 = (uint64_t)v93;
            v49(v32, v93[7] + v54, v55);
            v5 = v55;
            sub_10010589C(v50, v17);
            swift_bridgeObjectRelease();
            v41((char *)v32, 0, 1, v55);
          }
          else
          {
            v32 = (uint64_t)v78;
            v5 = v87;
            v41(v78, 1, 1, v87);
            v23 = v82;
            v33 = (void (*)(unint64_t, uint64_t))v82[1];
          }
          v25 = v88;
          v33(v88, v5);
          sub_100004048(v32, &qword_1010ED860);
          v27 = v90;
          v31 = v91;
          v92 = v17;
          if (!v91)
            goto LABEL_8;
        }
        else
        {
          v43((uint64_t)v81, (char *)v48, v5);
          v56 = (_QWORD *)v92;
          v57 = swift_isUniquelyReferenced_nonNull_native(v92);
          v93 = v56;
          v59 = sub_100003FB0(v44);
          v60 = v56[2];
          v61 = (v58 & 1) == 0;
          v62 = v60 + v61;
          if (__OFADD__(v60, v61))
          {
            __break(1u);
            goto LABEL_44;
          }
          v63 = v58;
          v64 = (void (*)(unint64_t, char *, uint64_t))v43;
          if (v56[3] >= v62)
          {
            v67 = v89;
            v27 = v90;
            if ((v57 & 1) == 0)
              sub_100A9AA68();
          }
          else
          {
            sub_100A86BBC(v62, v57);
            v65 = sub_100003FB0(v88);
            v67 = v89;
            v27 = v90;
            if ((v63 & 1) != (v66 & 1))
              goto LABEL_47;
            v59 = v65;
          }
          v23 = v82;
          v68 = v93;
          if ((v63 & 1) != 0)
          {
            v5 = v87;
            ((void (*)(unint64_t, char *, uint64_t))v82[5])(v93[7] + v59 * v67, v81, v87);
            v25 = v88;
          }
          else
          {
            v93[(v59 >> 6) + 8] |= 1 << v59;
            v69 = v59 * v67;
            v70 = v68[6] + v59 * v67;
            v71 = v87;
            v25 = v88;
            v40((char *)v70, v88, v87);
            v64(v68[7] + v69, v81, v71);
            v72 = v68[2];
            v73 = __OFADD__(v72, 1);
            v74 = v72 + 1;
            if (v73)
              goto LABEL_45;
            v68[2] = v74;
            v5 = v87;
          }
          v17 = (uint64_t)v93;
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, uint64_t))v23[1])(v25, v5);
          v31 = v91;
          v92 = v17;
          if (!v91)
            goto LABEL_8;
        }
LABEL_7:
        v91 = (v31 - 1) & v31;
        v34 = __clz(__rbit64(v31)) | (v27 << 6);
        v35 = v85;
      }
    }
    v38 = v36 + 3;
    if (v38 < v80)
    {
      v37 = *(_QWORD *)(v79 + 8 * v38);
      if (v37)
      {
        v27 = v38;
        goto LABEL_21;
      }
      while (1)
      {
        v27 = v38 + 1;
        if (__OFADD__(v38, 1))
          goto LABEL_46;
        if (v27 >= v80)
          break;
        v37 = *(_QWORD *)(v79 + 8 * v27);
        ++v38;
        if (v37)
          goto LABEL_21;
      }
    }
  }
LABEL_41:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v23[7])(v85, 1, 1, v5);
  result = swift_release();
LABEL_42:
  *v77 = v17;
  return result;
}

void sub_1008478C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v0, (uint64_t)v3, v4);
  v5 = (char *)sub_100847954 + 4 * byte_100E51378[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_100847954()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;

  v2 = *v0;
  v3 = (void *)v0[1];
  *(_QWORD *)(v1 - 80) = 0;
  *(_QWORD *)(v1 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 - 80) = 0xD00000000000001CLL;
  *(_QWORD *)(v1 - 72) = 0x8000000100EE8090;
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return *(_QWORD *)(v1 - 80);
}

void sub_100847CD8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  void *v50;
  Swift::String v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  dispatch_group_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76[3];

  v73 = a2;
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v69 - v12;
  v14 = (_QWORD *)(a4 + 16);
  v72 = v11;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B77E8);
    sub_10005972C(a3, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(32, -1);
      v71 = v14;
      v20 = v19;
      v69 = (uint64_t *)swift_slowAlloc(8, -1);
      v70 = swift_slowAlloc(32, -1);
      v76[0] = v70;
      *(_DWORD *)v20 = 141558531;
      v74 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2081;
      v21 = type metadata accessor for UUID(0);
      v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
      v74 = sub_100016940(v23, v24, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v20 + 22) = 2112;
      v25 = _convertErrorToNSError(_:)(a1);
      v74 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v20 + 24, v20 + 32);
      v26 = v69;
      *v69 = v25;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error unpairing %{private,mask.hash}s: %@", (uint8_t *)v20, 0x20u);
      v27 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v26, 1, v27);
      swift_slowDealloc(v26, -1, -1);
      v28 = v70;
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      v29 = v20;
      v14 = v71;
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_beginAccess(v14, v76, 33, 0);
    if (*v14)
    {
      v74 = 0;
      v75 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v74 = 0xD000000000000012;
      v75 = 0x8000000100EE80D0;
      v42 = type metadata accessor for UUID(0);
      v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v42, v43);
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 8250;
      v45._object = (void *)0xE200000000000000;
      String.append(_:)(v45);
      v46 = (void *)_convertErrorToNSError(_:)(a1);
      v47 = objc_msgSend(v46, "description");
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      v50 = v49;

      v51._countAndFlagsBits = v48;
      v51._object = v50;
      String.append(_:)(v51);

      swift_bridgeObjectRelease();
      v52 = v74;
      v53 = v75;
      v54 = (_QWORD *)*v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
      *v14 = v54;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v54 = sub_1007C7438(0, v54[2] + 1, 1, v54);
        *v14 = v54;
      }
      v57 = v54[2];
      v56 = v54[3];
      if (v57 >= v56 >> 1)
      {
        v54 = sub_1007C7438((_QWORD *)(v56 > 1), v57 + 1, 1, v54);
        *v14 = v54;
      }
      v54[2] = v57 + 1;
      v58 = &v54[2 * v57];
      v58[4] = v52;
      v58[5] = v53;
    }
    swift_endAccess(v76);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v30 = type metadata accessor for Logger(0);
    sub_10001A9E8(v30, (uint64_t)qword_1011B77E8);
    v71 = (_QWORD *)a3;
    v31 = sub_10005972C(a3, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(32, -1);
      v76[0] = v35;
      *(_DWORD *)v34 = 141558275;
      v74 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      v36 = v14;
      v37 = type metadata accessor for UUID(0);
      v38 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v39 = v37;
      v14 = v36;
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v39, v38);
      v74 = sub_100016940(v40, v41, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Successfully unpaired %{private,mask.hash}s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    }

    swift_beginAccess(v14, v76, 33, 0);
    if (*v14)
    {
      v74 = 0;
      v75 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v74 = 0xD000000000000016;
      v75 = 0x8000000100EE80B0;
      v59 = type metadata accessor for UUID(0);
      v60 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v59, v60);
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      v62 = v74;
      v63 = v75;
      v64 = (_QWORD *)*v14;
      v65 = swift_isUniquelyReferenced_nonNull_native(*v14);
      *v14 = v64;
      if ((v65 & 1) == 0)
      {
        v64 = sub_1007C7438(0, v64[2] + 1, 1, v64);
        *v14 = v64;
      }
      v67 = v64[2];
      v66 = v64[3];
      if (v67 >= v66 >> 1)
      {
        v64 = sub_1007C7438((_QWORD *)(v66 > 1), v67 + 1, 1, v64);
        *v14 = v64;
      }
      v64[2] = v67 + 1;
      v68 = &v64[2 * v67];
      v68[4] = v62;
      v68[5] = v63;
    }
    swift_endAccess(v76);
  }
  dispatch_group_leave(v73);
}

uint64_t sub_1008484A8(uint64_t a1, uint64_t a2, void (*a3)(void *, _QWORD))
{
  void **v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char v11[24];
  char v12[24];
  char v13[24];

  v5 = (void **)(a2 + 16);
  swift_beginAccess(a2 + 16, v13, 0, 0);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    if (!*(_QWORD *)(v6 + 16))
    {
      swift_beginAccess(v5, v11, 1, 0);
      v7 = *v5;
      if (*v5)
      {
        *v5 = &off_10104DCE0;
        swift_bridgeObjectRelease(v7);
      }
    }
  }
  swift_beginAccess(v5, v12, 0, 0);
  v8 = *v5;
  if (*v5)
    v9 = *v5;
  else
    v9 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v8);
  a3(v9, 0);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_100848570()
{
  uint64_t v0;

  v0 = type metadata accessor for PrefixedDefaults(0);
  sub_1000234D8(v0, qword_101109E58);
  sub_10001A9E8(v0, (uint64_t)qword_101109E58);
  return PrefixedDefaults.init(prefix:)(0x74536E6F63616542, 0xEB0000000065726FLL);
}

uint64_t sub_1008485D4()
{
  double v0;
  double v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1BEC4(v4);
  v1 = v0;
  swift_bridgeObjectRelease();
  result = static Duration.seconds(_:)(v1);
  qword_101109E70 = result;
  *(_QWORD *)algn_101109E78 = v3;
  return result;
}

uint64_t sub_100848680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for PrefixedDefaults(0);
  sub_1000234D8(v0, qword_101109E80);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101109E80);
  if (qword_1010E9FA8 != -1)
    swift_once(&qword_1010E9FA8, sub_100848570);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_101109E58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100848710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for PrefixedDefaults(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_10110ACB8);
  sub_1000234D8(v4, qword_101109E98);
  sub_10001A9E8(v4, (uint64_t)qword_101109E98);
  if (qword_1010E9FB8 != -1)
    swift_once(&qword_1010E9FB8, sub_100848680);
  v5 = sub_10001A9E8(v0, (uint64_t)qword_101109E80);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  v6 = type metadata accessor for Date(0);
  return ManagedDefault.init(prefixedDefaults:key:)(v3, 0xD000000000000012, 0x8000000100EE8E30, v6, &protocol witness table for Date);
}

uint64_t sub_100848828(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v3 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v3);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject(&unk_101095348, 40, 7);
  v8[2] = 0;
  v9 = v8 + 2;
  v8[3] = 0;
  v8[4] = a2;
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  v11 = swift_retain();
  if (v10 == 1)
  {
    sub_100004048((uint64_t)v5, &qword_1010F46C0);
    v12 = 0;
    v13 = 0;
    v14 = 7168;
  }
  else
  {
    v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    v14 = v15 | 0x1C00;
    v16 = *v9;
    if (*v9)
    {
      v17 = v8[3];
      ObjectType = swift_getObjectType(*v9);
      swift_unknownObjectRetain(v16);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v13 = v19;
      swift_unknownObjectRelease(v16);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  v20 = swift_allocObject(&unk_101095370, 32, 7);
  *(_QWORD *)(v20 + 16) = &unk_10110AAB0;
  *(_QWORD *)(v20 + 24) = v8;
  if (v13 | v12)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v12;
    v23[3] = v13;
  }
  else
  {
    v21 = 0;
  }
  swift_task_create(v14, v21, &type metadata for () + 1, &unk_1010EE4A0, v20);
  return swift_release();
}

uint64_t sub_1008489FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[16] = a4;
  v5 = type metadata accessor for OwnedBeaconRecord(0);
  v4[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[18] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v7);
  v4[20] = swift_task_alloc(v7);
  v4[21] = swift_task_alloc(v7);
  return swift_task_switch(sub_100848A78, 0, 0);
}

uint64_t sub_100848A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCA0 + dword_1010EBCA0);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBCA4);
    *(_QWORD *)(v0 + 176) = v3;
    *v3 = v0;
    v3[1] = sub_100848B78;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100848B78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100848BD4, 0, 0);
}

uint64_t sub_100848BD4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 184))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1010ECB6C);
    *(_QWORD *)(v0 + 192) = v2;
    *v2 = v0;
    v2[1] = sub_100848C5C;
    return sub_10007D72C();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100848C5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 192);
  *(_QWORD *)(v3 + 200) = a1;
  *(_QWORD *)(v3 + 208) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1008493D0;
  else
    v5 = sub_100848CC8;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100848CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 216) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 144);
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 272) = v4;
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 232) = 0;
    sub_10005972C(v1 + ((v4 + 32) & ~(unint64_t)v4), *(_QWORD *)(v0 + 168), type metadata accessor for OwnedBeaconRecord);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v5 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 168);
    v7 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 240) = sub_10001A9E8(v7, (uint64_t)qword_1011B77E8);
    v8 = sub_10005972C(v6, v5, type metadata accessor for OwnedBeaconRecord);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 160);
    if (v11)
    {
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(32, -1);
      v31 = v14;
      *(_DWORD *)v13 = 141558275;
      *(_QWORD *)(v13 + 4) = 1752392040;
      *(_WORD *)(v13 + 12) = 2081;
      v15 = type metadata accessor for UUID(0);
      v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
      *(_QWORD *)(v13 + 14) = sub_100016940(v17, v18, &v31);
      swift_bridgeObjectRelease();
      sub_1000126B0(v12, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Removing ghost beacon: %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for OwnedBeaconRecord);
    }

    v27 = *(_QWORD *)(v0 + 168);
    v28 = *(_QWORD *)(v0 + 128);
    v29 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 248) = v29;
    *(_QWORD *)(v29 + 16) = v28;
    *(_QWORD *)(v29 + 24) = v27;
    v30 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 256) = v30;
    *v30 = v0;
    v30[1] = sub_100849064;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v30, 0, 0, 0xD000000000000014, 0x8000000100EE7C90, sub_10087B69C, v29, &type metadata for () + 1);
  }
  else
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B77E8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No ghost beacons.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    swift_bridgeObjectRelease();
    swift_release();
    v24 = *(_QWORD *)(v0 + 160);
    v25 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100849064()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1008495C0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 248));
    v4 = sub_1008490D0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1008490D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 232) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for OwnedBeaconRecord);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v3 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 232) + 1;
    *(_QWORD *)(v0 + 232) = v7;
    sub_10005972C(*(_QWORD *)(v0 + 200)+ ((*(unsigned __int8 *)(v0 + 272) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 272))+ v6 * v7, *(_QWORD *)(v0 + 168), type metadata accessor for OwnedBeaconRecord);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 168);
    v10 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 240) = sub_10001A9E8(v10, (uint64_t)qword_1011B77E8);
    v11 = sub_10005972C(v9, v8, type metadata accessor for OwnedBeaconRecord);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 160);
    if (v14)
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(32, -1);
      v26 = v17;
      *(_DWORD *)v16 = 141558275;
      *(_QWORD *)(v16 + 4) = 1752392040;
      *(_WORD *)(v16 + 12) = 2081;
      v18 = type metadata accessor for UUID(0);
      v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
      *(_QWORD *)(v16 + 14) = sub_100016940(v20, v21, &v26);
      swift_bridgeObjectRelease();
      sub_1000126B0(v15, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Removing ghost beacon: %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for OwnedBeaconRecord);
    }

    v22 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 128);
    v24 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 248) = v24;
    *(_QWORD *)(v24 + 16) = v23;
    *(_QWORD *)(v24 + 24) = v22;
    v25 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 256) = v25;
    *v25 = v0;
    v25[1] = sub_100849064;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v25, 0, 0, 0xD000000000000014, 0x8000000100EE7C90, sub_10087B69C, v24, &type metadata for () + 1);
  }
}

uint64_t sub_1008493D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release();
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v1 = *(_QWORD *)(v0 + 208);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B77E8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 208);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 120) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during removeGhostBeacons: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 208));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008495C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  sub_10005972C(v2, v3, type metadata accessor for OwnedBeaconRecord);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 152);
  if (v7)
  {
    v10 = swift_slowAlloc(32, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    v12 = swift_slowAlloc(32, -1);
    v44 = v12;
    *(_DWORD *)v10 = 141558531;
    *(_QWORD *)(v10 + 4) = 1752392040;
    *(_WORD *)(v10 + 12) = 2081;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    *(_QWORD *)(v10 + 14) = sub_100016940(v15, v16, &v44);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v10 + 22) = 2112;
    swift_errorRetain(v8);
    v17 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v10 + 24) = v17;
    *v11 = v17;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error unpairing %{private,mask.hash}s: %@", (uint8_t *)v10, 0x20u);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v18);
    swift_slowDealloc(v11, -1, -1);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 264));
    sub_1000126B0(v9, type metadata accessor for OwnedBeaconRecord);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v19 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 232) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for OwnedBeaconRecord);
  if (v20 == v19)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v21 = *(_QWORD *)(v0 + 160);
    v22 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 224);
    v25 = *(_QWORD *)(v0 + 232) + 1;
    *(_QWORD *)(v0 + 232) = v25;
    sub_10005972C(*(_QWORD *)(v0 + 200)+ ((*(unsigned __int8 *)(v0 + 272) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 272))+ v24 * v25, *(_QWORD *)(v0 + 168), type metadata accessor for OwnedBeaconRecord);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v26 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 168);
    v28 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 240) = sub_10001A9E8(v28, (uint64_t)qword_1011B77E8);
    v29 = sub_10005972C(v27, v26, type metadata accessor for OwnedBeaconRecord);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 160);
    if (v32)
    {
      v34 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(32, -1);
      v44 = v35;
      *(_DWORD *)v34 = 141558275;
      *(_QWORD *)(v34 + 4) = 1752392040;
      *(_WORD *)(v34 + 12) = 2081;
      v36 = type metadata accessor for UUID(0);
      v37 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
      *(_QWORD *)(v34 + 14) = sub_100016940(v38, v39, &v44);
      swift_bridgeObjectRelease();
      sub_1000126B0(v33, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Removing ghost beacon: %{private,mask.hash}s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for OwnedBeaconRecord);
    }

    v40 = *(_QWORD *)(v0 + 168);
    v41 = *(_QWORD *)(v0 + 128);
    v42 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 248) = v42;
    *(_QWORD *)(v42 + 16) = v41;
    *(_QWORD *)(v42 + 24) = v40;
    v43 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 256) = v43;
    *v43 = v0;
    v43[1] = sub_100849064;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v43, 0, 0, 0xD000000000000014, 0x8000000100EE7C90, sub_10087B69C, v42, &type metadata for () + 1);
  }
}

uint64_t sub_100849ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v22 = a2;
  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_10005972C(a3, (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = (v15 + 40) & ~v15;
  v17 = *(unsigned __int8 *)(v5 + 80);
  v18 = (v10 + v17 + v16) & ~v17;
  v19 = (char *)swift_allocObject(&unk_101095280, v18 + v6, v15 | v17 | 7);
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 3) = 0;
  *((_QWORD *)v19 + 4) = v22;
  sub_1000126EC((uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v19[v16], type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v19[v18], v7, v4);
  swift_retain();
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_10110AAA8, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_100849CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  v7 = sub_10001A9A8(&qword_1010F8318);
  v6[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[7] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[8] = v9;
  v6[9] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v6[10] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v6[11] = v11;
  v6[12] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100849D38, 0, 0);
}

uint64_t sub_100849D38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[9];
  v4 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  v8 = v0[5];
  v7 = v0[6];
  v9 = v0[3];
  sub_10005972C(v0[4], v1, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v8, v7);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = (v2 + v12 + v11) & ~v12;
  v14 = swift_allocObject(&unk_1010952A8, v13 + v6, v10 | v12 | 7);
  v0[13] = v14;
  *(_QWORD *)(v14 + 16) = v9;
  sub_1000126EC(v1, v14 + v11, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v14 + v13, v3, v7);
  v15 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v16 = (_QWORD *)swift_task_alloc(v15);
  v0[14] = v16;
  *v16 = v0;
  v16[1] = sub_100761A4C;
  return unsafeBlocking<A>(_:)(v0[2], sub_10087BD5C, v14, &type metadata for () + 1);
}

uint64_t sub_100849E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t (**v59)(uint64_t);
  uint64_t v60;
  unint64_t v61;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;

  v74 = (char *)a2;
  v72 = a1;
  v68 = type metadata accessor for OwnedBeaconRecord(0);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v67 = v4;
  v69 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v64 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v63 - v9;
  v11 = sub_10001A9A8(&qword_1010F8318);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  v16 = (char *)&v63 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v17((char *)&v63 - v15, a3, v11);
  v73 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v73, (uint64_t)v16, v11);
  v18 = *(unsigned __int8 *)(v12 + 80);
  v19 = (v18 + 16) & ~v18;
  v65 = swift_allocObject(&unk_1010952D0, v19 + v13, v18 | 7);
  v70 = v12;
  v71 = v11;
  v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v65 + v19, v16, v11);
  v21 = static os_log_type_t.default.getter(v20);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v22 = qword_1011B7D38;
  v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v24 = swift_allocObject(v23, 72, 7);
  v63 = xmmword_100E22B00;
  *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
  v25 = (uint64_t)&v74[*(int *)(v68 + 20)];
  v26 = type metadata accessor for UUID(0);
  v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v68 = v25;
  v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
  v30 = v29;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = sub_10001AA00();
  *(_QWORD *)(v24 + 32) = v28;
  *(_QWORD *)(v24 + 40) = v30;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Unpair owned beacon: %@", 23, 2, v24);
  v31 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v31);
  v32 = v64;
  (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v8, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v5);
  v33 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v76, v5, v33);
  dispatch thunk of RawRepresentable.rawValue.getter(&v75, v5, v33);
  v35 = v75;
  v34 = v76;
  v36 = *(void (**)(char *, uint64_t))(v32 + 8);
  v36(v8, v5);
  v37 = ((uint64_t (*)(char *, uint64_t))v36)(v10, v5);
  v38 = v71;
  if (v34 == v35)
  {
    v39 = static os_log_type_t.default.getter(v37);
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
    v40 = sub_10008806C();
    v41 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v40, 0, 0);
    *v42 = 0;
    v76 = v41;
    CheckedContinuation.resume(throwing:)(&v76, v38);
  }
  v43 = dispatch_group_create();
  dispatch_group_enter(v43);
  v44 = sub_10001A9A8(&qword_1011003C0);
  v45 = *(_QWORD *)(v26 - 8);
  v46 = *(unsigned __int8 *)(v45 + 80);
  v47 = (v46 + 32) & ~v46;
  v48 = swift_allocObject(v44, v47 + *(_QWORD *)(v45 + 72), v46 | 7);
  *(_OWORD *)(v48 + 16) = v63;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v48 + v47, v68, v26);
  v49 = swift_allocObject(&unk_1010952F8, 24, 7);
  *(_QWORD *)(v49 + 16) = v43;
  v50 = v43;
  v51 = v72;
  sub_10075B3B4(v48, (uint64_t)sub_10028F938, v49);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  v52 = v74;
  v53 = v69;
  sub_10005972C((uint64_t)v74, v69, type metadata accessor for OwnedBeaconRecord);
  v54 = *(unsigned __int8 *)(v66 + 80);
  v55 = (v54 + 16) & ~v54;
  v56 = (v67 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = (v56 + 23) & 0xFFFFFFFFFFFFFFF8;
  v58 = swift_allocObject(&unk_101095320, v57 + 10, v54 | 7);
  sub_1000126EC(v53, v58 + v55, type metadata accessor for OwnedBeaconRecord);
  v59 = (uint64_t (**)(uint64_t))(v58 + v56);
  v60 = v65;
  *v59 = sub_10087BDD8;
  v59[1] = (uint64_t (*)(uint64_t))v60;
  v61 = v58 + v57;
  *(_QWORD *)v61 = v51;
  *(_WORD *)(v61 + 8) = 257;
  swift_retain();
  swift_retain();
  sub_1009FB1F0(v52, (void (*)(_QWORD))sub_10028F948, v58);
  swift_release();
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v73, v38);
}

void sub_10084A3A0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE v57[12];
  int v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  dispatch_group_t v66;
  uint64_t v67[3];
  uint64_t v68;
  uint64_t v69;

  v64 = a3;
  v66 = a2;
  v6 = sub_10001A9A8(&qword_1010F7608);
  __chkstk_darwin(v6);
  v63 = &v57[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v65 - 8);
  v9 = __chkstk_darwin(v65);
  v11 = &v57[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v57[-v12];
  v14 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v61 = *(_QWORD *)(v14 - 8);
  v62 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = &v57[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v19 = &v57[-v18];
  v20 = sub_10001A9A8(&qword_10110AAC0);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)&v57[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = swift_projectBox(a4);
  sub_10000F9B8(a1, (uint64_t)v22, &qword_10110AAC0);
  if (swift_getEnumCaseMultiPayload(v22, v20) == 1)
  {
    v24 = *v22;
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B8520);
    v26 = v65;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, v64, v65);
    swift_errorRetain(v24);
    v27 = swift_errorRetain(v24);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(32, -1);
      v64 = v8;
      v31 = v30;
      v32 = swift_slowAlloc(64, -1);
      v67[0] = v32;
      *(_DWORD *)v31 = 141558531;
      v68 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2081;
      v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v26, v33);
      v68 = sub_100016940(v34, v35, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v11, v26);
      *(_WORD *)(v31 + 22) = 2080;
      v68 = v24;
      swift_errorRetain(v24);
      v36 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v37 = String.init<A>(describing:)(&v68, v36);
      v68 = sub_100016940(v37, v38, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to save new OwnedDeviceKeyRecord for %{private,mask.hash}s, error %s.", (uint8_t *)v31, 0x20u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      swift_errorRelease(v24);
    }
    else
    {
      swift_errorRelease(v24);
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v26);
      swift_errorRelease(v24);
      swift_errorRelease(v24);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v22, (uint64_t)v19, type metadata accessor for OwnedDeviceKeyRecord);
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v39 = type metadata accessor for Logger(0);
    sub_10001A9E8(v39, (uint64_t)qword_1011B8520);
    v40 = v65;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v13, v64, v65);
    v41 = sub_10005972C((uint64_t)v19, (uint64_t)v17, type metadata accessor for OwnedDeviceKeyRecord);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter(v42);
    v44 = v43;
    if (os_log_type_enabled(v42, v43))
    {
      v45 = swift_slowAlloc(42, -1);
      v60 = v19;
      v46 = v45;
      v59 = swift_slowAlloc(64, -1);
      v67[0] = v59;
      *(_DWORD *)v46 = 141558787;
      v68 = 1752392040;
      v64 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2081;
      v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v58 = v44;
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v40, v47);
      v68 = sub_100016940(v48, v49, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v46 + 14, v46 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v40);
      *(_WORD *)(v46 + 22) = 2160;
      v68 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v46 + 24, v46 + 32);
      *(_WORD *)(v46 + 32) = 2081;
      v50 = v62;
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v40, v47);
      v68 = sub_100016940(v51, v52, v67);
      v23 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v46 + 34, v46 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedDeviceKeyRecord);
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v58, "Successfully saved new OwnedDeviceKeyRecord for: %{private,mask.hash}s uuid: %{private,mask.hash}s.", (uint8_t *)v46, 0x2Au);
      v53 = v59;
      swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      v54 = v46;
      v19 = v60;
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v40);
      sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedDeviceKeyRecord);

      v50 = v62;
    }
    v55 = (uint64_t)v19;
    v56 = v63;
    sub_1000126EC(v55, (uint64_t)v63, type metadata accessor for OwnedDeviceKeyRecord);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v56, 0, 1, v50);
    swift_beginAccess(v23, v67, 1, 0);
    sub_100004084((uint64_t)v56, v23, &qword_1010F7608);
  }
  dispatch_group_leave(v66);
}

_QWORD *sub_10084AAAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t i;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char isUniquelyReferenced_nonNull_native;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  char *v67;
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t);
  char *v79;
  id v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;

  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v83 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for UUID(0);
  v97 = *(_QWORD *)(v85 - 8);
  v4 = __chkstk_darwin(v85);
  v82 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v96 = (char *)&v75 - v6;
  v7 = sub_10001A9A8(&qword_1010FBA40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v75 - v11;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v84 = (char *)&v75 - v18;
  v88 = type metadata accessor for DirectorySequence(0);
  v86 = *(_QWORD *)(v88 - 8);
  v19 = __chkstk_darwin(v88);
  v81 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v75 - v21;
  v95 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v95, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  v94 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v24 = dispatch thunk of CustomStringConvertible.description.getter(v13, v94);
  v26 = v25;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  v93 = sub_10001AA00();
  *(_QWORD *)(v23 + 64) = v93;
  *(_QWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 40) = v26;
  v27 = v13;
  v92 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v28 = (void *)static OS_os_log.default.getter(v92);
  v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)("BeaconStoreFileManager enumerating records at %@", 48, 2, &_mh_execute_header, v28, v29, v23);
  swift_bridgeObjectRelease();

  v80 = (id)objc_opt_self(NSFileManager);
  v30 = objc_msgSend(v80, "defaultManager");
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)(a1, 0);

  v87 = v22;
  DirectorySequence.next()(v31);
  v99 = v14;
  v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v90(v12, 1, v13) == 1)
  {
    v32 = _swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
LABEL_13:
    sub_100004048((uint64_t)v12, &qword_1010FBA40);
  }
  else
  {
    v76 = v17;
    v33 = *(uint64_t (**)(char *, char *, uint64_t))(v99 + 32);
    v91 = _swiftEmptyDictionarySingleton;
    v89 = xmmword_100E22B10;
    v34 = v85;
    v79 = v12;
    v35 = v84;
    v98 = v33;
    for (i = v33(v84, v12, v27); ; i = v98(v35, v12, v38))
    {
      v62 = URL.lastPathComponent.getter(i);
      v63 = (uint64_t)v83;
      UUID.init(uuidString:)(v62, v64);
      swift_bridgeObjectRelease();
      v65 = v97;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v63, 1, v34) == 1)
        break;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v96, v63, v34);
      v100 = _swiftEmptyArrayStorage;
      v101 = _swiftEmptyArrayStorage;
      v66 = objc_msgSend(v80, "defaultManager");
      v67 = v81;
      NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v35, 0, 0);

      DirectorySequence.next()(v68);
      v69 = v90;
      if (v90(v10, 1, v27) == 1)
      {
        v37 = v10;
        v38 = v27;
      }
      else
      {
        v70 = v77;
        v38 = v27;
        v37 = v10;
        v71 = (uint64_t)v76;
        do
        {
          v98((char *)v71, v10, v27);
          v72 = objc_autoreleasePoolPush();
          sub_10084D1A8(v71, v70, (uint64_t *)&v101, (unint64_t *)&v100, &qword_1010F33A8, type metadata accessor for NotifyWhenFoundRecord, &qword_10110AB10, (uint64_t)sub_10087FA78, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8D30);
          objc_autoreleasePoolPop(v72);
          v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v71, v27);
          DirectorySequence.next()(v73);
        }
        while (v69(v10, 1, v27) != 1);
      }
      v78 = *(uint64_t (**)(char *, uint64_t))(v86 + 8);
      v39 = v78(v67, v88);
      v40 = static os_log_type_t.debug.getter(v39);
      v41 = (void *)static OS_os_log.default.getter(v40);
      v42 = swift_allocObject(v95, 112, 7);
      *(_OWORD *)(v42 + 16) = v89;
      v43 = (uint64_t)v101;
      v44 = v101[2];
      *(_QWORD *)(v42 + 56) = &type metadata for Int;
      *(_QWORD *)(v42 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v42 + 32) = v44;
      v35 = v84;
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      v46 = v93;
      *(_QWORD *)(v42 + 96) = &type metadata for String;
      *(_QWORD *)(v42 + 104) = v46;
      *(_QWORD *)(v42 + 72) = v45;
      *(_QWORD *)(v42 + 80) = v47;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Found %i records at %@", 22, 2, v42);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48 = v96;
      v49 = v97;
      v50 = (uint64_t)v82;
      v34 = v85;
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v82, v96, v85);
      swift_bridgeObjectRetain(v43);
      v51 = v91;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v91);
      v101 = v51;
      sub_10010AE74(v43, v50, isUniquelyReferenced_nonNull_native);
      v91 = v101;
      swift_bridgeObjectRelease();
      v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v53(v50, v34);
      v54 = swift_allocObject(v95, 112, 7);
      *(_OWORD *)(v54 + 16) = v89;
      v55 = *(_QWORD *)(v43 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v54 + 56) = &type metadata for Int;
      *(_QWORD *)(v54 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v54 + 32) = v55;
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      v57 = v93;
      *(_QWORD *)(v54 + 96) = &type metadata for String;
      *(_QWORD *)(v54 + 104) = v57;
      *(_QWORD *)(v54 + 72) = v56;
      *(_QWORD *)(v54 + 80) = v58;
      v59 = (void *)static OS_os_log.default.getter(v56);
      v60 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:type:_:)("BeaconStoreFileManager fetched %i records at %@", 47, 2, &_mh_execute_header, v59, v60, v54);
      swift_bridgeObjectRelease();

      v53((uint64_t)v48, v34);
      v61 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v35, v38);
      v12 = v79;
      DirectorySequence.next()(v61);
      v10 = v37;
      v27 = v38;
      if (v90(v12, 1, v38) == 1)
      {
        v32 = v91;
        v78(v87, v88);
        goto LABEL_13;
      }
    }
    (*(void (**)(char *, uint64_t))(v99 + 8))(v35, v27);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    sub_100004048(v63, &qword_1010ED860);
    return v91;
  }
  return v32;
}

_QWORD *sub_10084B2A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t i;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char isUniquelyReferenced_nonNull_native;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char *v68;
  uint64_t v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t (*v79)(char *, uint64_t);
  char *v80;
  id v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  unsigned int (*v91)(char *, uint64_t, uint64_t);
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;

  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v84 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for UUID(0);
  v98 = *(_QWORD *)(v86 - 8);
  v4 = __chkstk_darwin(v86);
  v83 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v97 = (char *)&v76 - v6;
  v7 = sub_10001A9A8(&qword_1010FBA40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v76 - v11;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v85 = (char *)&v76 - v18;
  v89 = type metadata accessor for DirectorySequence(0);
  v87 = *(_QWORD *)(v89 - 8);
  v19 = __chkstk_darwin(v89);
  v82 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v76 - v21;
  v96 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v96, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  v95 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v24 = dispatch thunk of CustomStringConvertible.description.getter(v13, v95);
  v26 = v25;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  v94 = sub_10001AA00();
  *(_QWORD *)(v23 + 64) = v94;
  *(_QWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 40) = v26;
  v27 = v13;
  v93 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v28 = (void *)static OS_os_log.default.getter(v93);
  v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)("BeaconStoreFileManager enumerating records at %@", 48, 2, &_mh_execute_header, v28, v29, v23);
  swift_bridgeObjectRelease(v23);

  v81 = (id)objc_opt_self(NSFileManager);
  v30 = objc_msgSend(v81, "defaultManager");
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)(a1, 0);

  v88 = v22;
  DirectorySequence.next()(v31);
  v100 = v14;
  v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v91(v12, 1, v13) == 1)
  {
    v32 = &_swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v89);
LABEL_13:
    sub_100004048((uint64_t)v12, &qword_1010FBA40);
  }
  else
  {
    v77 = v17;
    v33 = *(uint64_t (**)(char *, char *, uint64_t))(v100 + 32);
    v92 = &_swiftEmptyDictionarySingleton;
    v90 = xmmword_100E22B10;
    v34 = v86;
    v80 = v12;
    v35 = v85;
    v99 = v33;
    for (i = v33(v85, v12, v27); ; i = v99(v35, v12, v38))
    {
      v62 = URL.lastPathComponent.getter(i);
      v64 = v63;
      v65 = (uint64_t)v84;
      UUID.init(uuidString:)(v62, v63);
      swift_bridgeObjectRelease(v64);
      v66 = v98;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v65, 1, v34) == 1)
        break;
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v97, v65, v34);
      v101 = _swiftEmptyArrayStorage;
      v102 = _swiftEmptyArrayStorage;
      v67 = objc_msgSend(v81, "defaultManager");
      v68 = v82;
      NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v35, 0, 0);

      DirectorySequence.next()(v69);
      v70 = v91;
      if (v91(v10, 1, v27) == 1)
      {
        v37 = v10;
        v38 = v27;
      }
      else
      {
        v71 = v78;
        v38 = v27;
        v37 = v10;
        v72 = (uint64_t)v77;
        do
        {
          v99((char *)v72, v10, v27);
          v73 = objc_autoreleasePoolPush();
          sub_10084D1A8(v72, v71, (uint64_t *)&v102, (unint64_t *)&v101, (uint64_t *)&unk_1010F7810, type metadata accessor for BeaconEstimatedLocation, &qword_10110A978, (uint64_t)sub_100877B18, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C95B8);
          objc_autoreleasePoolPop(v73);
          v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v72, v27);
          DirectorySequence.next()(v74);
        }
        while (v70(v10, 1, v27) != 1);
      }
      v79 = *(uint64_t (**)(char *, uint64_t))(v87 + 8);
      v39 = v79(v68, v89);
      v40 = static os_log_type_t.debug.getter(v39);
      v41 = (void *)static OS_os_log.default.getter(v40);
      v42 = swift_allocObject(v96, 112, 7);
      *(_OWORD *)(v42 + 16) = v90;
      v43 = (uint64_t)v102;
      v44 = v102[2];
      *(_QWORD *)(v42 + 56) = &type metadata for Int;
      *(_QWORD *)(v42 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v42 + 32) = v44;
      v35 = v85;
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v38, v95);
      v46 = v94;
      *(_QWORD *)(v42 + 96) = &type metadata for String;
      *(_QWORD *)(v42 + 104) = v46;
      *(_QWORD *)(v42 + 72) = v45;
      *(_QWORD *)(v42 + 80) = v47;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Found %i records at %@", 22, 2, v42);

      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v101);
      v48 = v97;
      v49 = v98;
      v50 = (uint64_t)v83;
      v34 = v86;
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v83, v97, v86);
      swift_bridgeObjectRetain(v43);
      v51 = v92;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v92);
      v102 = v51;
      sub_10010B8A8(v43, v50, isUniquelyReferenced_nonNull_native);
      v92 = v102;
      swift_bridgeObjectRelease(0x8000000000000000);
      v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v53(v50, v34);
      v54 = swift_allocObject(v96, 112, 7);
      *(_OWORD *)(v54 + 16) = v90;
      v55 = *(_QWORD *)(v43 + 16);
      swift_bridgeObjectRelease(v43);
      *(_QWORD *)(v54 + 56) = &type metadata for Int;
      *(_QWORD *)(v54 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v54 + 32) = v55;
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v38, v95);
      v57 = v94;
      *(_QWORD *)(v54 + 96) = &type metadata for String;
      *(_QWORD *)(v54 + 104) = v57;
      *(_QWORD *)(v54 + 72) = v56;
      *(_QWORD *)(v54 + 80) = v58;
      v59 = (void *)static OS_os_log.default.getter(v56);
      v60 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:type:_:)("BeaconStoreFileManager fetched %i records at %@", 47, 2, &_mh_execute_header, v59, v60, v54);
      swift_bridgeObjectRelease(v54);

      v53((uint64_t)v48, v34);
      v61 = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v35, v38);
      v12 = v80;
      DirectorySequence.next()(v61);
      v10 = v37;
      v27 = v38;
      if (v91(v12, 1, v38) == 1)
      {
        v32 = v92;
        v79(v88, v89);
        goto LABEL_13;
      }
    }
    (*(void (**)(char *, uint64_t))(v100 + 8))(v35, v27);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v89);
    sub_100004048(v65, &qword_1010ED860);
    return v92;
  }
  return v32;
}

_QWORD *sub_10084BAA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t i;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char isUniquelyReferenced_nonNull_native;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  char *v67;
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t);
  char *v79;
  id v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;

  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v83 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for UUID(0);
  v97 = *(_QWORD *)(v85 - 8);
  v4 = __chkstk_darwin(v85);
  v82 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v96 = (char *)&v75 - v6;
  v7 = sub_10001A9A8(&qword_1010FBA40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v75 - v11;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v84 = (char *)&v75 - v18;
  v88 = type metadata accessor for DirectorySequence(0);
  v86 = *(_QWORD *)(v88 - 8);
  v19 = __chkstk_darwin(v88);
  v81 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v75 - v21;
  v95 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v95, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  v94 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v24 = dispatch thunk of CustomStringConvertible.description.getter(v13, v94);
  v26 = v25;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  v93 = sub_10001AA00();
  *(_QWORD *)(v23 + 64) = v93;
  *(_QWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 40) = v26;
  v27 = v13;
  v92 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v28 = (void *)static OS_os_log.default.getter(v92);
  v29 = static os_log_type_t.default.getter(v28);
  os_log(_:dso:log:type:_:)("BeaconStoreFileManager enumerating records at %@", 48, 2, &_mh_execute_header, v28, v29, v23);
  swift_bridgeObjectRelease();

  v80 = (id)objc_opt_self(NSFileManager);
  v30 = objc_msgSend(v80, "defaultManager");
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)(a1, 0);

  v87 = v22;
  DirectorySequence.next()(v31);
  v99 = v14;
  v90 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v90(v12, 1, v13) == 1)
  {
    v32 = _swiftEmptyDictionarySingleton;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
LABEL_13:
    sub_100004048((uint64_t)v12, &qword_1010FBA40);
  }
  else
  {
    v76 = v17;
    v33 = *(uint64_t (**)(char *, char *, uint64_t))(v99 + 32);
    v91 = _swiftEmptyDictionarySingleton;
    v89 = xmmword_100E22B10;
    v34 = v85;
    v79 = v12;
    v35 = v84;
    v98 = v33;
    for (i = v33(v84, v12, v27); ; i = v98(v35, v12, v38))
    {
      v62 = URL.lastPathComponent.getter(i);
      v63 = (uint64_t)v83;
      UUID.init(uuidString:)(v62, v64);
      swift_bridgeObjectRelease();
      v65 = v97;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v63, 1, v34) == 1)
        break;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v96, v63, v34);
      v100 = _swiftEmptyArrayStorage;
      v101 = _swiftEmptyArrayStorage;
      v66 = objc_msgSend(v80, "defaultManager");
      v67 = v81;
      NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v35, 0, 0);

      DirectorySequence.next()(v68);
      v69 = v90;
      if (v90(v10, 1, v27) == 1)
      {
        v37 = v10;
        v38 = v27;
      }
      else
      {
        v70 = v77;
        v38 = v27;
        v37 = v10;
        v71 = (uint64_t)v76;
        do
        {
          v98((char *)v71, v10, v27);
          v72 = objc_autoreleasePoolPush();
          sub_10084D1A8(v71, v70, (uint64_t *)&v101, (unint64_t *)&v100, (uint64_t *)&unk_1010F47E0, type metadata accessor for LocationProvider, &qword_10110A990, (uint64_t)sub_100878918, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8CCC);
          objc_autoreleasePoolPop(v72);
          v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v71, v27);
          DirectorySequence.next()(v73);
        }
        while (v69(v10, 1, v27) != 1);
      }
      v78 = *(uint64_t (**)(char *, uint64_t))(v86 + 8);
      v39 = v78(v67, v88);
      v40 = static os_log_type_t.debug.getter(v39);
      v41 = (void *)static OS_os_log.default.getter(v40);
      v42 = swift_allocObject(v95, 112, 7);
      *(_OWORD *)(v42 + 16) = v89;
      v43 = (uint64_t)v101;
      v44 = v101[2];
      *(_QWORD *)(v42 + 56) = &type metadata for Int;
      *(_QWORD *)(v42 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v42 + 32) = v44;
      v35 = v84;
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      v46 = v93;
      *(_QWORD *)(v42 + 96) = &type metadata for String;
      *(_QWORD *)(v42 + 104) = v46;
      *(_QWORD *)(v42 + 72) = v45;
      *(_QWORD *)(v42 + 80) = v47;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Found %i records at %@", 22, 2, v42);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48 = v96;
      v49 = v97;
      v50 = (uint64_t)v82;
      v34 = v85;
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v82, v96, v85);
      swift_bridgeObjectRetain(v43);
      v51 = v91;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v91);
      v101 = v51;
      sub_10010D970(v43, v50, isUniquelyReferenced_nonNull_native);
      v91 = v101;
      swift_bridgeObjectRelease();
      v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v53(v50, v34);
      v54 = swift_allocObject(v95, 112, 7);
      *(_OWORD *)(v54 + 16) = v89;
      v55 = *(_QWORD *)(v43 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v54 + 56) = &type metadata for Int;
      *(_QWORD *)(v54 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v54 + 32) = v55;
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v38, v94);
      v57 = v93;
      *(_QWORD *)(v54 + 96) = &type metadata for String;
      *(_QWORD *)(v54 + 104) = v57;
      *(_QWORD *)(v54 + 72) = v56;
      *(_QWORD *)(v54 + 80) = v58;
      v59 = (void *)static OS_os_log.default.getter(v56);
      v60 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:type:_:)("BeaconStoreFileManager fetched %i records at %@", 47, 2, &_mh_execute_header, v59, v60, v54);
      swift_bridgeObjectRelease();

      v53((uint64_t)v48, v34);
      v61 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v35, v38);
      v12 = v79;
      DirectorySequence.next()(v61);
      v10 = v37;
      v27 = v38;
      if (v90(v12, 1, v38) == 1)
      {
        v32 = v91;
        v78(v87, v88);
        goto LABEL_13;
      }
    }
    (*(void (**)(char *, uint64_t))(v99 + 8))(v35, v27);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    sub_100004048(v63, &qword_1010ED860);
    return v91;
  }
  return v32;
}

void sub_10084C2A0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, (uint64_t *)&unk_1010EE180, type metadata accessor for SharedBeaconRecord, &qword_1010ECA78, (uint64_t)sub_10087FC8C, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8674);
}

void sub_10084C2E8(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, (uint64_t *)&unk_1010FF7F0, type metadata accessor for OwnedBeaconGroup, &qword_10110AB20, (uint64_t)sub_10087FACC, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8888);
}

void sub_10084C330(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_10110AB60, type metadata accessor for PairingErrorRecord, &qword_10110AB68, (uint64_t)sub_10087FC38, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C88C4);
}

void sub_10084C378(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, (uint64_t *)&unk_1010F47F0, type metadata accessor for LostModeRecord, &qword_10110AB50, (uint64_t)sub_10087FBC8, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8CB8);
}

void sub_10084C3C0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, (uint64_t *)&unk_1010F47E0, type metadata accessor for LocationProvider, &qword_10110A990, (uint64_t)sub_100878918, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8CCC);
}

void sub_10084C408(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, (uint64_t *)&unk_1010F47D0, type metadata accessor for KeyAlignmentRecord, &qword_10110AB70, (uint64_t)sub_10087FC54, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8CE0);
}

void sub_10084C450(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_1010FA070, type metadata accessor for ShareRecord, &qword_10110AB18, (uint64_t)sub_10087FAB0, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8CF4);
}

void sub_10084C498(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_101106E40, type metadata accessor for SafeLocation, &qword_10110AB78, (uint64_t)sub_10087FC70, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8D08);
}

void sub_10084C4E0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_101111B80, type metadata accessor for LeashRecord, &qword_10110AB58, (uint64_t)sub_10087FC00, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8D1C);
}

void sub_10084C528(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_1010F33A8, type metadata accessor for NotifyWhenFoundRecord, &qword_10110AB10, (uint64_t)sub_10087FA78, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8D30);
}

void sub_10084C570(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, (uint64_t *)&unk_1010F7810, type metadata accessor for BeaconEstimatedLocation, &qword_10110A978, (uint64_t)sub_100877B18, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C95B8);
}

void sub_10084C5B8(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_101102FB0, type metadata accessor for WildModeAssociationRecord, &qword_10110AB28, (uint64_t)sub_10087FAE8, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C9714);
}

void sub_10084C600(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_101111AE0, type metadata accessor for SecureLocationsCachedPayload, &qword_10110AB30, (uint64_t)sub_10087FB04, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C9DC8);
}

void sub_10084C648(uint64_t a1, uint64_t a2, _QWORD **a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  _QWORD **v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  ValueMetadata *v143;

  v124 = a4;
  v125 = a3;
  v126 = a2;
  v5 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v5);
  v120 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for BeaconStoreFileRecord(0);
  v123 = *(_QWORD *)(v119 - 8);
  v7 = __chkstk_darwin(v119);
  v122 = (uint64_t)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v121 = (char *)&v114 - v9;
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v12 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v130 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v129 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v128 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v118 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v114 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v114 - v22;
  v24 = URL.pathExtension.getter(v21);
  if (v24 == 0x64726F636572 && v25 == 0xE600000000000000)
  {
    v26 = swift_bridgeObjectRelease();
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, 0x64726F636572, 0xE600000000000000, 0);
    v26 = swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      v74 = static os_log_type_t.info.getter(v26);
      v75 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v76 = swift_allocObject(v75, 72, 7);
      *(_OWORD *)(v76 + 16) = xmmword_100E22B00;
      v77 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v15, v77);
      v80 = v79;
      *(_QWORD *)(v76 + 56) = &type metadata for String;
      *(_QWORD *)(v76 + 64) = sub_10001AA00();
      *(_QWORD *)(v76 + 32) = v78;
      *(_QWORD *)(v76 + 40) = v80;
      v81 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v82 = (void *)static OS_os_log.default.getter(v81);
      os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, v82, "Invalid extension. Skipping file %@", 35, 2, v76);
      swift_bridgeObjectRelease();

      return;
    }
  }
  v131 = v4;
  v28 = URL.deletingPathExtension()(v26);
  v29 = URL.lastPathComponent.getter(v28);
  v31 = v30;
  v32 = *(void (**)(char *, uint64_t))(v128 + 8);
  v32(v23, v15);
  UUID.init(uuidString:)(v29, v31);
  swift_bridgeObjectRelease();
  v33 = v130;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v12, 1, v13) == 1)
  {
    v34 = sub_100004048((uint64_t)v12, &qword_1010ED860);
    v35 = static os_log_type_t.error.getter(v34);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v36 = qword_1011B7D38;
    v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v38 = swift_allocObject(v37, 72, 7);
    *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
    v39 = URL.description.getter(v38);
    v41 = v40;
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    *(_QWORD *)(v38 + 64) = sub_10001AA00();
    *(_QWORD *)(v38 + 32) = v39;
    *(_QWORD *)(v38 + 40) = v41;
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Invalid file identifier at URL: %@", 34, 2, v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = *(uint64_t (**)(char *, char *, uint64_t))(v33 + 32);
    v127 = v20;
    v43 = v129;
    v115 = v13;
    v44 = v42(v129, v12, v13);
    v45 = URL.deletingPathExtension()(v44);
    URL.deletingLastPathComponent()(v45);
    v116 = v15;
    v117 = v32;
    v32(v23, v15);
    v46._object = (void *)0x8000000100ED68C0;
    v46._countAndFlagsBits = 0xD000000000000014;
    prohibitAsyncContext(functionName:)(v46);
    v143 = &type metadata for SecureLocationLabel;
    v47 = sub_10001A9A8(&qword_10110AB38);
    v48 = String.init<A>(describing:)(&v143, v47);
    v50 = v49;
    v51 = objc_autoreleasePoolPush();
    __chkstk_darwin(v51);
    *(&v114 - 6) = v52;
    *(&v114 - 5) = (uint64_t)v43;
    v111 = v127;
    v112 = v48;
    v113 = v50;
    v53 = sub_10001A9A8(&qword_101111B00);
    v54 = v131;
    OS_dispatch_queue.sync<A>(execute:)(sub_10087FB20, &v114 - 8, v53);
    objc_autoreleasePoolPop(v51);
    v55 = swift_bridgeObjectRelease();
    v56 = v133;
    v131 = v54;
    if (v133)
    {
      v57 = v132;
      v58 = v134;
      v59 = v135;
      v60 = v136;
      v61 = v137;
      v126 = v138;
      v123 = v140;
      v124 = v139;
      v62 = v142;
      v122 = v141;
      v63 = v125;
      v64 = *v125;
      swift_bridgeObjectRetain(v142);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v61);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v64);
      *v63 = v64;
      v128 = v60;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v64 = sub_1007C9DDC(0, v64[2] + 1, 1, v64);
        *v125 = v64;
      }
      v67 = v64[2];
      v66 = v64[3];
      if (v67 >= v66 >> 1)
      {
        v64 = sub_1007C9DDC((_QWORD *)(v66 > 1), v67 + 1, 1, v64);
        *v125 = v64;
      }
      v64[2] = v67 + 1;
      v68 = &v64[11 * v67];
      v68[4] = v57;
      v68[5] = v56;
      v68[6] = v58;
      v68[7] = v59;
      v69 = v128;
      v68[8] = v128;
      v68[9] = v61;
      v70 = v126;
      v72 = v123;
      v71 = (uint64_t)v124;
      v68[10] = v126;
      v68[11] = v71;
      v73 = v122;
      v68[12] = v72;
      v68[13] = v73;
      v68[14] = v62;
      sub_10087FB40(v57, v56, v58, v59, v69, v61, v70, v71, v72, v73, v62);
      v117(v127, v116);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v115);
    }
    else
    {
      LODWORD(v126) = static os_log_type_t.error.getter(v55);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v83 = qword_1011B7D38;
      v84 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v85 = swift_allocObject(v84, 112, 7);
      *(_OWORD *)(v85 + 16) = xmmword_100E22B10;
      v86 = UUID.uuidString.getter(v85);
      v88 = v87;
      *(_QWORD *)(v85 + 56) = &type metadata for String;
      v89 = sub_10001AA00();
      *(_QWORD *)(v85 + 64) = v89;
      *(_QWORD *)(v85 + 32) = v86;
      *(_QWORD *)(v85 + 40) = v88;
      v90 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v91 = v116;
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v116, v90);
      *(_QWORD *)(v85 + 96) = &type metadata for String;
      *(_QWORD *)(v85 + 104) = v89;
      *(_QWORD *)(v85 + 72) = v92;
      *(_QWORD *)(v85 + 80) = v93;
      os_log(_:dso:log:_:_:)(v126, &_mh_execute_header, v83, "Could not read item %@ for records at %@", 40, 2, v85);
      swift_bridgeObjectRelease();
      v94 = objc_autoreleasePoolPush();
      v95 = UUID.uuidString.getter(v94);
      v96 = v118;
      URL.appendingPathComponent(_:)(v95, v97);
      swift_bridgeObjectRelease();
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v98 = v117;
      v117(v96, v91);
      objc_autoreleasePoolPop(v94);
      v99 = objc_autoreleasePoolPush();
      v100 = UUID.uuidString.getter(v99);
      URL.appendingPathComponent(_:)(v100, v101);
      swift_bridgeObjectRelease();
      v102 = (uint64_t)v120;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v98(v96, v91);
      objc_autoreleasePoolPop(v99);
      v103 = v128;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v128 + 56))(v102, 0, 1, v91);
      v104 = (uint64_t)v121;
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v121, v23, v91);
      sub_100005CF0(v102, v104 + *(int *)(v119 + 20), &qword_1010FBA40);
      v105 = v122;
      sub_10005972C(v104, v122, type metadata accessor for BeaconStoreFileRecord);
      v106 = v124;
      v107 = *v124;
      v108 = swift_isUniquelyReferenced_nonNull_native(*v124);
      *v106 = v107;
      if ((v108 & 1) == 0)
      {
        v107 = sub_1007C8660(0, *(_QWORD *)(v107 + 16) + 1, 1, v107);
        *v106 = v107;
      }
      v110 = *(_QWORD *)(v107 + 16);
      v109 = *(_QWORD *)(v107 + 24);
      if (v110 >= v109 >> 1)
      {
        v107 = sub_1007C8660(v109 > 1, v110 + 1, 1, v107);
        *v106 = v107;
      }
      *(_QWORD *)(v107 + 16) = v110 + 1;
      sub_1000126EC(v105, v107+ ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))+ *(_QWORD *)(v123 + 72) * v110, type metadata accessor for BeaconStoreFileRecord);
      sub_1000126B0(v104, type metadata accessor for BeaconStoreFileRecord);
      v117(v127, v91);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v115);
    }
  }
}

void sub_10084D040(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_101111B40, type metadata accessor for LostModeInfoRecord, &qword_10110AB48, (uint64_t)sub_10087FBAC, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C9F18);
}

void sub_10084D088(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_101111B20, type metadata accessor for SecureLocationsCachedSharedKey, &qword_10110AB40, (uint64_t)sub_10087FB90, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007CA06C);
}

void sub_10084D0D0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, (uint64_t *)&unk_101111620, type metadata accessor for SharingCircleSecret, &qword_101111760, (uint64_t)sub_10087FBE4, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C7C20);
}

void sub_10084D118(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, &qword_1010F7AE0, type metadata accessor for KeySyncRecord, &qword_1010ECA70, (uint64_t)sub_10087FC1C, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007CA440);
}

void sub_10084D160(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  sub_10084D1A8(a1, a2, a3, a4, (uint64_t *)&unk_101105880, type metadata accessor for BeaconNamingRecord, &qword_1010ECA80, (uint64_t)sub_10087FA94, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_1007C8860);
}

void sub_10084D1A8(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, uint64_t (*a6)(_QWORD), uint64_t *a7, uint64_t a8, uint64_t (*a9)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, char *, uint64_t);
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t (*v113)(_QWORD);
  uint64_t *v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  void (*v123)(char *, uint64_t);
  uint64_t *v124;
  char *v125;
  uint64_t *v126;
  uint64_t (*v127)(_QWORD);
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v137 = a8;
  v135 = a7;
  v132 = a4;
  v126 = a3;
  v136 = a2;
  v12 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v12);
  v129 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for BeaconStoreFileRecord(0);
  v131 = *(_QWORD *)(v128 - 8);
  v14 = __chkstk_darwin(v128);
  v16 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v130 = (char *)&v121 - v17;
  v124 = a5;
  v133 = sub_10001A9A8(a5);
  __chkstk_darwin(v133);
  v134 = (char *)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = a6;
  v19 = a6(0);
  v141 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v139 = (uint64_t)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v138 = (uint64_t)&v121 - v22;
  v23 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v23);
  v25 = (char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for UUID(0);
  v144 = *(_QWORD *)(v26 - 8);
  v145 = v26;
  __chkstk_darwin(v26);
  v28 = (char *)&v121 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for URL(0);
  v142 = *(_QWORD *)(v147 - 8);
  v29 = __chkstk_darwin(v147);
  v125 = (char *)&v121 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v143 = (char *)&v121 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v121 - v34;
  v36 = URL.pathExtension.getter(v33);
  v38 = v37;
  if (v36 == 0x64726F636572 && v37 == 0xE600000000000000)
  {
    v39 = swift_bridgeObjectRelease(0xE600000000000000);
  }
  else
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, 0x64726F636572, 0xE600000000000000, 0);
    v39 = swift_bridgeObjectRelease(v38);
    if ((v40 & 1) == 0)
    {
      v103 = static os_log_type_t.info.getter(v39);
      v104 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v105 = swift_allocObject(v104, 72, 7);
      *(_OWORD *)(v105 + 16) = xmmword_100E22B00;
      v106 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v107 = dispatch thunk of CustomStringConvertible.description.getter(v147, v106);
      v109 = v108;
      *(_QWORD *)(v105 + 56) = &type metadata for String;
      *(_QWORD *)(v105 + 64) = sub_10001AA00();
      *(_QWORD *)(v105 + 32) = v107;
      *(_QWORD *)(v105 + 40) = v109;
      v110 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v111 = (void *)static OS_os_log.default.getter(v110);
      os_log(_:dso:log:_:_:)(v103, &_mh_execute_header, v111, "Invalid extension. Skipping file %@", 35, 2, v105);
      swift_bridgeObjectRelease(v105);

      return;
    }
  }
  v146 = v9;
  v140 = v28;
  v41 = URL.deletingPathExtension()(v39);
  v42 = URL.lastPathComponent.getter(v41);
  v44 = v43;
  v45 = *(void (**)(char *, uint64_t))(v142 + 8);
  v46 = v147;
  v45(v35, v147);
  UUID.init(uuidString:)(v42, v44);
  swift_bridgeObjectRelease(v44);
  v48 = v144;
  v47 = v145;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v25, 1, v145) == 1)
  {
    v49 = sub_100004048((uint64_t)v25, &qword_1010ED860);
    v50 = static os_log_type_t.error.getter(v49);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v51 = qword_1011B7D38;
    v52 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v53 = swift_allocObject(v52, 72, 7);
    *(_OWORD *)(v53 + 16) = xmmword_100E22B00;
    v54 = URL.description.getter();
    v56 = v55;
    *(_QWORD *)(v53 + 56) = &type metadata for String;
    *(_QWORD *)(v53 + 64) = sub_10001AA00();
    *(_QWORD *)(v53 + 32) = v54;
    *(_QWORD *)(v53 + 40) = v56;
    os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "Invalid file identifier at URL: %@", 34, 2, v53);
    swift_bridgeObjectRelease(v53);
  }
  else
  {
    v122 = v16;
    v57 = *(uint64_t (**)(char *, char *, uint64_t))(v48 + 32);
    v58 = v45;
    v59 = v140;
    v60 = v57(v140, v25, v47);
    v61 = URL.deletingPathExtension()(v60);
    v62 = v143;
    URL.deletingLastPathComponent()(v61);
    v123 = v58;
    v58(v35, v46);
    v63._object = (void *)0x8000000100ED68C0;
    v63._countAndFlagsBits = 0xD000000000000014;
    prohibitAsyncContext(functionName:)(v63);
    v148 = v19;
    v64 = sub_10001A9A8(v135);
    v65 = String.init<A>(describing:)(&v148, v64);
    v67 = v66;
    v68 = objc_autoreleasePoolPush();
    __chkstk_darwin(v68);
    *(&v121 - 6) = v69;
    *(&v121 - 5) = (uint64_t)v59;
    *(&v121 - 4) = (uint64_t)v62;
    *(&v121 - 3) = v65;
    *(&v121 - 2) = v67;
    v70 = (uint64_t)v134;
    v71 = v146;
    OS_dispatch_queue.sync<A>(execute:)(v137, &v121 - 8, v133);
    v146 = v71;
    objc_autoreleasePoolPop(v68);
    swift_bridgeObjectRelease(v67);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v70, 1, v19) == 1)
    {
      v72 = sub_100004048(v70, v124);
      LODWORD(v141) = static os_log_type_t.error.getter(v72);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v73 = qword_1011B7D38;
      v74 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v75 = swift_allocObject(v74, 112, 7);
      *(_OWORD *)(v75 + 16) = xmmword_100E22B10;
      v76 = v140;
      v77 = UUID.uuidString.getter(v75);
      v79 = v78;
      *(_QWORD *)(v75 + 56) = &type metadata for String;
      v80 = sub_10001AA00();
      *(_QWORD *)(v75 + 64) = v80;
      *(_QWORD *)(v75 + 32) = v77;
      *(_QWORD *)(v75 + 40) = v79;
      v81 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v82 = v147;
      v83 = dispatch thunk of CustomStringConvertible.description.getter(v147, v81);
      *(_QWORD *)(v75 + 96) = &type metadata for String;
      *(_QWORD *)(v75 + 104) = v80;
      *(_QWORD *)(v75 + 72) = v83;
      *(_QWORD *)(v75 + 80) = v84;
      os_log(_:dso:log:_:_:)(v141, &_mh_execute_header, v73, "Could not read item %@ for records at %@", 40, 2, v75);
      swift_bridgeObjectRelease(v75);
      v85 = objc_autoreleasePoolPush();
      v86 = UUID.uuidString.getter(v85);
      v88 = v87;
      v89 = v125;
      URL.appendingPathComponent(_:)(v86, v87);
      swift_bridgeObjectRelease(v88);
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v90 = v123;
      v123(v89, v82);
      objc_autoreleasePoolPop(v85);
      v91 = objc_autoreleasePoolPush();
      v92 = UUID.uuidString.getter(v91);
      v94 = v93;
      URL.appendingPathComponent(_:)(v92, v93);
      swift_bridgeObjectRelease(v94);
      v95 = (uint64_t)v129;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v90(v89, v82);
      objc_autoreleasePoolPop(v91);
      v96 = v142;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v142 + 56))(v95, 0, 1, v82);
      v97 = (uint64_t)v130;
      (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v130, v35, v82);
      sub_100005CF0(v95, v97 + *(int *)(v128 + 20), &qword_1010FBA40);
      sub_10005972C(v97, (uint64_t)v122, type metadata accessor for BeaconStoreFileRecord);
      v98 = v132;
      v99 = *v132;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v132);
      *v98 = v99;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v99 = sub_1007C8660(0, *(_QWORD *)(v99 + 16) + 1, 1, v99);
        *v98 = v99;
      }
      v102 = *(_QWORD *)(v99 + 16);
      v101 = *(_QWORD *)(v99 + 24);
      if (v102 >= v101 >> 1)
      {
        v99 = sub_1007C8660(v101 > 1, v102 + 1, 1, v99);
        *v98 = v99;
      }
      *(_QWORD *)(v99 + 16) = v102 + 1;
      sub_1000126EC((uint64_t)v122, v99+ ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80))+ *(_QWORD *)(v131 + 72) * v102, type metadata accessor for BeaconStoreFileRecord);
      sub_1000126B0(v97, type metadata accessor for BeaconStoreFileRecord);
      v123(v143, v82);
      (*(void (**)(char *, uint64_t))(v144 + 8))(v76, v145);
    }
    else
    {
      v112 = v138;
      v113 = v127;
      sub_1000126EC(v70, v138, v127);
      sub_10005972C(v112, v139, v113);
      v114 = v126;
      v115 = *v126;
      v116 = swift_isUniquelyReferenced_nonNull_native(*v126);
      *v114 = v115;
      if ((v116 & 1) == 0)
      {
        v115 = a9(0, *(_QWORD *)(v115 + 16) + 1, 1, v115);
        *v114 = v115;
      }
      v117 = v147;
      v118 = v140;
      v120 = *(_QWORD *)(v115 + 16);
      v119 = *(_QWORD *)(v115 + 24);
      if (v120 >= v119 >> 1)
      {
        v115 = a9(v119 > 1, v120 + 1, 1, v115);
        *v114 = v115;
      }
      *(_QWORD *)(v115 + 16) = v120 + 1;
      sub_1000126EC(v139, v115+ ((*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80))+ *(_QWORD *)(v141 + 72) * v120, v113);
      sub_1000126B0(v138, v113);
      v123(v143, v117);
      (*(void (**)(char *, uint64_t))(v144 + 8))(v118, v145);
    }
  }
}

uint64_t sub_10084DBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10084DC3C(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  id v14;
  uint64_t ObjectType;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  __int128 v40;
  __int128 v41;
  void *v42;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for BeaconNamingRecord(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v12, v13);
  v14 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + v10[6], v6);
  v16 = &v12[v10[6]];
  v17 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v16, v6, v17);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v18 & 1) == 0)
  {
    v20 = UUID.uuidString.getter(v19);
    *((_QWORD *)&v41 + 1) = &type metadata for String;
    v42 = &protocol witness table for String;
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v21;
    CKRecordKeyValueSetting.subscript.setter(&v40, 0xD000000000000010, 0x8000000100EC3950, ObjectType);
  }
  v22 = v10[7];
  v23 = *(_QWORD *)(v3 + v22);
  v24 = *(_QWORD *)&v12[v22];
  if (v23 != v24)
  {
    *((_QWORD *)&v41 + 1) = &type metadata for Int;
    v42 = &protocol witness table for Int;
    *(_QWORD *)&v40 = v24;
    CKRecordKeyValueSetting.subscript.setter(&v40, 0x6449656C6F72, 0xE600000000000000, ObjectType);
  }
  v25 = v10[8];
  v26 = *(_QWORD *)(v3 + v25);
  v27 = *(_QWORD *)(v3 + v25 + 8);
  v28 = &v12[v25];
  v30 = *(_QWORD *)v28;
  v29 = *((_QWORD *)v28 + 1);
  v31 = v26 == *(_QWORD *)v28 && v27 == v29;
  if (!v31
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, *(_QWORD *)v28, *((_QWORD *)v28 + 1), 0) & 1) == 0)
  {
    *((_QWORD *)&v41 + 1) = &type metadata for String;
    v42 = &protocol witness table for String;
    *(_QWORD *)&v40 = v30;
    *((_QWORD *)&v40 + 1) = v29;
    swift_bridgeObjectRetain(v29);
    CKRecordKeyValueSetting.subscript.setter(&v40, 1701667182, 0xE400000000000000, ObjectType);
  }
  v32 = v10[9];
  v33 = (_QWORD *)(v3 + v32);
  v34 = *(_QWORD *)(v3 + v32 + 8);
  v35 = &v12[v32];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  if (v34)
  {
    if (!v36)
    {
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      goto LABEL_22;
    }
    v38 = *v33 == v37 && v34 == v36;
    if (v38
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*v33, v34, *(_QWORD *)v35, *((_QWORD *)v35 + 1), 0) & 1) != 0)
    {
      goto LABEL_18;
    }
  }
  else if (!v36)
  {
LABEL_18:
    sub_1000126B0((uint64_t)v12, type metadata accessor for BeaconNamingRecord);
    return swift_unknownObjectRelease(v14);
  }
  *((_QWORD *)&v41 + 1) = &type metadata for String;
  v42 = &protocol witness table for String;
  *(_QWORD *)&v40 = v37;
  *((_QWORD *)&v40 + 1) = v36;
LABEL_22:
  swift_bridgeObjectRetain(v36);
  CKRecordKeyValueSetting.subscript.setter(&v40, 0x696A6F6D65, 0xE500000000000000, ObjectType);
  swift_unknownObjectRelease(v14);
  return sub_1000126B0((uint64_t)v12, type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_10084DF68(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  id v14;
  uint64_t ObjectType;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  __int128 v44;
  __int128 v45;
  void *v46;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for LostModeRecord(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v12, v13);
  v14 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + v10[6], v6);
  v16 = &v12[v10[6]];
  v17 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v16, v6, v17);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v18 & 1) == 0)
  {
    v20 = UUID.uuidString.getter(v19);
    *((_QWORD *)&v45 + 1) = &type metadata for String;
    v46 = &protocol witness table for String;
    *(_QWORD *)&v44 = v20;
    *((_QWORD *)&v44 + 1) = v21;
    CKRecordKeyValueSetting.subscript.setter(&v44, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
  }
  v22 = v10[7];
  v23 = (_QWORD *)(v3 + v22);
  v24 = *(_QWORD *)(v3 + v22 + 8);
  v25 = &v12[v22];
  v27 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  if (!v24)
  {
    if (!v26)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (!v26)
  {
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    goto LABEL_14;
  }
  v28 = *v23 == v27 && v24 == v26;
  if (!v28
    && (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, *(_QWORD *)v25, *((_QWORD *)v25 + 1), 0) & 1) == 0)
  {
LABEL_12:
    *((_QWORD *)&v45 + 1) = &type metadata for String;
    v46 = &protocol witness table for String;
    *(_QWORD *)&v44 = v27;
    *((_QWORD *)&v44 + 1) = v26;
LABEL_14:
    swift_bridgeObjectRetain(v26);
    CKRecordKeyValueSetting.subscript.setter(&v44, 0x6C69616D65, 0xE500000000000000, ObjectType);
  }
LABEL_15:
  v29 = v10[8];
  v30 = (_QWORD *)(v3 + v29);
  v31 = *(_QWORD *)(v3 + v29 + 8);
  v32 = &v12[v29];
  v34 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  if (!v31)
  {
    if (!v33)
      goto LABEL_27;
    goto LABEL_24;
  }
  if (!v33)
  {
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    goto LABEL_26;
  }
  v35 = *v30 == v34 && v31 == v33;
  if (!v35
    && (_stringCompareWithSmolCheck(_:_:expecting:)(*v30, v31, *(_QWORD *)v32, *((_QWORD *)v32 + 1), 0) & 1) == 0)
  {
LABEL_24:
    *((_QWORD *)&v45 + 1) = &type metadata for String;
    v46 = &protocol witness table for String;
    *(_QWORD *)&v44 = v34;
    *((_QWORD *)&v44 + 1) = v33;
LABEL_26:
    swift_bridgeObjectRetain(v33);
    CKRecordKeyValueSetting.subscript.setter(&v44, 0x6D754E656E6F6870, 0xEB00000000726562, ObjectType);
  }
LABEL_27:
  v36 = v10[9];
  v37 = (_QWORD *)(v3 + v36);
  v38 = *(_QWORD *)(v3 + v36 + 8);
  v39 = &v12[v36];
  v41 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  if (v38)
  {
    if (!v40)
    {
      v46 = 0;
      v44 = 0u;
      v45 = 0u;
      goto LABEL_38;
    }
    v42 = *v37 == v41 && v38 == v40;
    if (v42
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*v37, v38, *(_QWORD *)v39, *((_QWORD *)v39 + 1), 0) & 1) != 0)
    {
      goto LABEL_34;
    }
  }
  else if (!v40)
  {
LABEL_34:
    sub_1000126B0((uint64_t)v12, type metadata accessor for LostModeRecord);
    return swift_unknownObjectRelease(v14);
  }
  *((_QWORD *)&v45 + 1) = &type metadata for String;
  v46 = &protocol witness table for String;
  *(_QWORD *)&v44 = v41;
  *((_QWORD *)&v44 + 1) = v40;
LABEL_38:
  swift_bridgeObjectRetain(v40);
  CKRecordKeyValueSetting.subscript.setter(&v44, 0x6567617373656DLL, 0xE700000000000000, ObjectType);
  swift_unknownObjectRelease(v14);
  return sub_1000126B0((uint64_t)v12, type metadata accessor for LostModeRecord);
}

uint64_t sub_10084E318(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  id v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  Class isa;
  NSString v57;
  uint64_t v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  void *v64;
  void *v65;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  v62 = v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for SafeLocation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v12, v13);
  v14 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v14);
  v16 = v10[7];
  v17 = *(_QWORD *)(v3 + v16);
  v18 = *(_QWORD *)(v3 + v16 + 8);
  v19 = &v12[v16];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  v22 = v17 == *(_QWORD *)v19 && v18 == v20;
  if (!v22
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, *(_QWORD *)v19, *((_QWORD *)v19 + 1), 0) & 1) == 0)
  {
    v64 = &type metadata for String;
    v65 = &protocol witness table for String;
    v63[0] = v21;
    v63[1] = v20;
    swift_bridgeObjectRetain(v20);
    CKRecordKeyValueSetting.subscript.setter(v63, 1701667182, 0xE400000000000000, ObjectType);
  }
  v23 = v10[8];
  v24 = *(double *)&v12[v23];
  if (*(double *)(v3 + v23) != v24)
  {
    v64 = &type metadata for Double;
    v65 = &protocol witness table for Double;
    *(double *)v63 = v24;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x656475746974616CLL, 0xE800000000000000, ObjectType);
  }
  v25 = v10[9];
  v26 = *(double *)&v12[v25];
  if (*(double *)(v3 + v25) != v26)
  {
    v64 = &type metadata for Double;
    v65 = &protocol witness table for Double;
    *(double *)v63 = v26;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x64757469676E6F6CLL, 0xE900000000000065, ObjectType);
  }
  v27 = v10[10];
  v28 = *(double *)&v12[v27];
  if (*(double *)(v3 + v27) != v28)
  {
    v64 = &type metadata for Double;
    v65 = &protocol witness table for Double;
    *(double *)v63 = v28;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x737569646172, 0xE600000000000000, ObjectType);
  }
  v29 = v10[11];
  v30 = *(unsigned __int8 *)(v3 + v29);
  v31 = v12[v29];
  if (v30 != (_DWORD)v31)
  {
    v64 = &type metadata for Int;
    v65 = &protocol witness table for Int;
    v63[0] = v31;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x636E657265666572, 0xEE00656D61724665, ObjectType);
  }
  v32 = v10[6];
  v33 = *(unsigned __int8 *)(v3 + v32);
  v34 = v12[v32];
  if (v33 != (_DWORD)v34)
  {
    v64 = &type metadata for Int;
    v65 = &protocol witness table for Int;
    v63[0] = v34;
    CKRecordKeyValueSetting.subscript.setter(v63, 1701869940, 0xE400000000000000, ObjectType);
  }
  v35 = v10[12];
  v36 = *(unsigned __int8 *)(v3 + v35);
  v37 = v12[v35];
  if (v36 != (_DWORD)v37)
  {
    v64 = &type metadata for Int;
    v65 = &protocol witness table for Int;
    v63[0] = v37;
    CKRecordKeyValueSetting.subscript.setter(v63, 0x6C61766F72707061, 0xED00006574617453, ObjectType);
  }
  v38 = v10[13];
  v39 = *(_QWORD *)(v3 + v38);
  v40 = *(_QWORD *)&v12[v38];
  swift_bridgeObjectRetain(v40);
  LOBYTE(v39) = sub_10024A41C(v39, v40);
  swift_bridgeObjectRelease(v40);
  if ((v39 & 1) != 0)
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for SafeLocation);
    return swift_unknownObjectRelease(v14);
  }
  else
  {
    v42 = *(_QWORD *)(v40 + 16);
    v43 = _swiftEmptyArrayStorage;
    if (v42)
    {
      v59 = v14;
      v60 = v12;
      v63[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v40);
      sub_10009A2F4(0, v42, 0);
      v44 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      v58 = v40;
      v45 = v40 + v44;
      v46 = *(_QWORD *)(v62 + 72);
      v47 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v62 + 16);
      do
      {
        v48 = v61;
        v49 = v47(v9, v45, v61);
        v50 = UUID.uuidString.getter(v49);
        v52 = v51;
        (*(void (**)(char *, uint64_t))(v62 + 8))(v9, v48);
        v43 = (_QWORD *)v63[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v63[0]) & 1) == 0)
        {
          sub_10009A2F4(0, v43[2] + 1, 1);
          v43 = (_QWORD *)v63[0];
        }
        v54 = v43[2];
        v53 = v43[3];
        if (v54 >= v53 >> 1)
        {
          sub_10009A2F4(v53 > 1, v54 + 1, 1);
          v43 = (_QWORD *)v63[0];
        }
        v43[2] = v54 + 1;
        v55 = &v43[2 * v54];
        v55[4] = v50;
        v55[5] = v52;
        v45 += v46;
        --v42;
      }
      while (v42);
      swift_bridgeObjectRelease(v58);
      v14 = v59;
      v12 = v60;
    }
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v43);
    v57 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "setObject:forKeyedSubscript:", isa, v57);
    swift_unknownObjectRelease(v14);

    return sub_1000126B0((uint64_t)v12, type metadata accessor for SafeLocation);
  }
}

uint64_t sub_10084E81C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;

  v2 = v1;
  v66 = a1;
  v3 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v3);
  v71 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v68 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v7);
  v79 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DirectorySequence(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_10110A970);
  v14 = __chkstk_darwin(v13);
  v67 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v78 = (uint64_t)&v61 - v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1011114C0);
  v77 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v75 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v74 = (uint64_t)&v61 - v20;
  v21 = sub_10001A9A8(&qword_1010FD150);
  __chkstk_darwin(v21);
  v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010FD140);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v2;
  v28 = v2;
  v30 = v29;
  sub_10000F9B8(v28, (uint64_t)v23, &qword_1010FD150);
  v63 = v25;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v30) == 1)
  {
    sub_100004048((uint64_t)v23, &qword_1010FD150);
  }
  else
  {
    sub_100005CF0((uint64_t)v23, (uint64_t)v27, &qword_1010FD140);
    v62 = v30;
    v80 = &v27[*(int *)(v30 + 40)];
    v31 = v79;
    sub_10000F9B8((uint64_t)v80, v79, (uint64_t *)&unk_1010F77A0);
    v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    v32 = v73(v31, 1, v9);
    v33 = (uint64_t)v71;
    v34 = (uint64_t)v27;
    if (v32 == 1)
    {
LABEL_11:
      sub_100004048(v31, (uint64_t *)&unk_1010F77A0);
      v42 = v78;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v78, 1, 1, v17);
    }
    else
    {
      v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 32);
      v69 = v12;
      v70 = v5;
      v65 = v17;
      while (1)
      {
        v35 = v12;
        v36 = v72(v12, v31, v9);
        DirectorySequence.next()(v36);
        v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        v38 = v5;
        v39 = v76;
        if (v37(v33, 1, v76) == 1)
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          sub_100004048(v33, &qword_1010FBA40);
          v40 = (uint64_t)v80;
          sub_100004048((uint64_t)v80, (uint64_t *)&unk_1010F77A0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v40, 1, 1, v9);
          v41 = v77;
          v42 = v78;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v78, 1, 1, v17);
        }
        else
        {
          v43 = v9;
          v44 = v68;
          (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v68, v33, v39);
          v45 = v34;
          v46 = objc_autoreleasePoolPush();
          v47 = v67;
          sub_100A7F1BC((void (*)(_QWORD))v44, v45, v67);
          v48 = v46;
          v34 = v45;
          v33 = (uint64_t)v71;
          objc_autoreleasePoolPop(v48);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v43);
          v49 = v44;
          v9 = v43;
          (*(void (**)(char *, uint64_t))(v38 + 8))(v49, v39);
          v50 = v47;
          v17 = v65;
          v42 = v78;
          sub_100005CF0(v50, v78, &qword_10110A970);
          v41 = v77;
        }
        v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v42, 1, v17);
        v31 = v79;
        if (v51 == 1)
          break;
        v52 = v74;
        sub_100005CF0(v42, v74, (uint64_t *)&unk_1011114C0);
        v53 = v52;
        v54 = v75;
        sub_100005CF0(v53, v75, (uint64_t *)&unk_1011114C0);
        if (swift_getEnumCaseMultiPayload(v54, v17) != 1)
        {
          sub_100004048(v34, &qword_1010FD140);
          v59 = v66;
          sub_1000126EC(v54, v66, type metadata accessor for OwnedDeviceKeyRecord);
          v60 = type metadata accessor for OwnedDeviceKeyRecord(0);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 0, 1, v60);
        }
        sub_100004048(v54, (uint64_t *)&unk_1011114C0);
        sub_10000F9B8((uint64_t)v80, v31, (uint64_t *)&unk_1010F77A0);
        v55 = v73(v31, 1, v9);
        v12 = v69;
        v5 = v70;
        if (v55 == 1)
          goto LABEL_11;
      }
    }
    sub_100004048(v34, &qword_1010FD140);
    sub_100004048(v42, &qword_10110A970);
    v56 = v64;
    sub_100004048(v64, &qword_1010FD150);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v56, 1, 1, v62);
  }
  v57 = type metadata accessor for OwnedDeviceKeyRecord(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v66, 1, 1, v57);
}

void sub_10084EE10(uint64_t a1)
{
  sub_10084EE24(a1);
}

void sub_10084EE24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_10084F08C(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  Class isa;
  NSString v30;
  uint64_t v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v5 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LeashRecord(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v10, v11);
  v12 = objc_msgSend(*a1, "encryptedValues");
  v13 = *(int *)(v8 + 24);
  v14 = *(_QWORD *)(v2 + v13);
  v15 = *(_QWORD *)&v10[v13];
  swift_bridgeObjectRetain(v15);
  LOBYTE(v14) = sub_10024A41C(v14, v15);
  swift_bridgeObjectRelease(v15);
  if ((v14 & 1) != 0)
  {
    sub_1000126B0((uint64_t)v10, type metadata accessor for LeashRecord);
    return swift_unknownObjectRelease(v12);
  }
  else
  {
    v17 = *(_QWORD *)(v15 + 16);
    v18 = _swiftEmptyArrayStorage;
    if (v17)
    {
      v32 = v12;
      v33 = v10;
      v36 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v15);
      sub_10009A2F4(0, v17, 0);
      v19 = *(unsigned __int8 *)(v35 + 80);
      v31 = v15;
      v20 = v15 + ((v19 + 32) & ~v19);
      v34 = *(_QWORD *)(v35 + 72);
      v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 16);
      do
      {
        v22 = v21(v7, v20, v5);
        v23 = UUID.uuidString.getter(v22);
        v25 = v24;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
        v18 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
        {
          sub_10009A2F4(0, v18[2] + 1, 1);
          v18 = v36;
        }
        v27 = v18[2];
        v26 = v18[3];
        if (v27 >= v26 >> 1)
        {
          sub_10009A2F4(v26 > 1, v27 + 1, 1);
          v18 = v36;
        }
        v18[2] = v27 + 1;
        v28 = &v18[2 * v27];
        v28[4] = v23;
        v28[5] = v25;
        v20 += v34;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease(v31);
      v12 = v32;
      v10 = v33;
    }
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    v30 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setObject:forKeyedSubscript:", isa, v30);
    swift_unknownObjectRelease(v12);

    return sub_1000126B0((uint64_t)v10, type metadata accessor for LeashRecord);
  }
}

id sub_10084F34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  NSString v13;
  NSString v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  id v19;

  v8 = v7;
  if (a2)
  {
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    if (a4)
      goto LABEL_3;
LABEL_6:
    v14 = 0;
    if (a6)
      goto LABEL_4;
    goto LABEL_7;
  }
  v13 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
LABEL_4:
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    goto LABEL_8;
  }
LABEL_7:
  v15 = 0;
LABEL_8:
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a7, 1, v16) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a7, v16);
  }
  v19 = objc_msgSend(v8, "initWithMessage:email:phoneNumber:timestamp:", v13, v14, v15, isa);

  return v19;
}

uint64_t sub_10084F47C(uint64_t a1, uint64_t a2)
{
  return sub_10084F4A4(a1, a2, (void (*)(_QWORD))type metadata accessor for AccessoryMetadata);
}

uint64_t sub_10084F488(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_10084F498(uint64_t a1, uint64_t a2)
{
  return sub_10084F4A4(a1, a2, (void (*)(_QWORD))type metadata accessor for RawSearchResult);
}

uint64_t sub_10084F4A4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 2 * a2;
  a3(0);
  return a1;
}

uint64_t sub_10084F4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1;
}

Swift::Int sub_10084F55C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  Swift::Int result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  char *v37;
  unint64_t v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t v41;
  Swift::Int v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  void (*v56)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  _BYTE *v71;
  void (*v72)(_BYTE *, uint64_t, uint64_t);
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  Swift::Int v82;
  Swift::Int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  uint64_t v91;
  Swift::Int v92;
  Swift::Int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  void (*v109)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  Swift::Int v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  BOOL v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  char v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  unint64_t v175;
  _QWORD *v176;
  Swift::Int v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE *v180;
  _BYTE *v181;
  uint64_t v182;
  Swift::Int v183;
  char *v184;
  uint64_t v185;
  Swift::Int v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE *v189;
  _BYTE *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void (*v195)(_BYTE *, uint64_t, uint64_t);
  uint64_t v196;
  Swift::Int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  Swift::Int v201;
  Swift::Int v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  _BYTE *v206;
  uint64_t *v207;

  v2 = v1;
  v196 = sub_10001A9A8(&qword_10110AC20);
  v4 = __chkstk_darwin(v196);
  v206 = (char *)&v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v205 = (char *)&v176 - v7;
  v8 = __chkstk_darwin(v6);
  v190 = (char *)&v176 - v9;
  v10 = __chkstk_darwin(v8);
  v189 = (char *)&v176 - v11;
  v12 = __chkstk_darwin(v10);
  v181 = (char *)&v176 - v13;
  __chkstk_darwin(v12);
  v180 = (char *)&v176 - v14;
  v198 = type metadata accessor for BeaconEstimatedLocation(0);
  v192 = *(_QWORD *)(v198 - 8);
  v15 = __chkstk_darwin(v198);
  v185 = (uint64_t)&v176 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v199 = (uint64_t)&v176 - v18;
  v19 = __chkstk_darwin(v17);
  v204 = (uint64_t)&v176 - v20;
  v21 = __chkstk_darwin(v19);
  v203 = (uint64_t)&v176 - v22;
  v23 = __chkstk_darwin(v21);
  v188 = (uint64_t)&v176 - v24;
  v25 = __chkstk_darwin(v23);
  v187 = (uint64_t)&v176 - v26;
  v27 = __chkstk_darwin(v25);
  v179 = (uint64_t)&v176 - v28;
  __chkstk_darwin(v27);
  v178 = (uint64_t)&v176 - v29;
  v207 = a1;
  v30 = a1[1];
  result = _minimumMergeRunLength(_:)(v30);
  if (result >= v30)
  {
    if (v30 < 0)
      goto LABEL_147;
    if (v30)
      return sub_100850F60(0, v30, 1, v207);
    return result;
  }
  if (v30 >= 0)
    v32 = v30;
  else
    v32 = v30 + 1;
  if (v30 < -1)
    goto LABEL_155;
  v177 = result;
  if (v30 < 2)
  {
    v191 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80));
    v176 = _swiftEmptyArrayStorage;
    if (v30 != 1)
    {
      v38 = _swiftEmptyArrayStorage[2];
      v37 = (char *)_swiftEmptyArrayStorage;
LABEL_113:
      if (v38 >= 2)
      {
        v169 = *v207;
        do
        {
          v170 = v38 - 2;
          if (v38 < 2)
            goto LABEL_142;
          if (!v169)
            goto LABEL_154;
          v171 = v37;
          v172 = *(_QWORD *)&v37[16 * v170 + 32];
          v173 = *(_QWORD *)&v37[16 * v38 + 24];
          sub_10085153C(v169 + *(_QWORD *)(v192 + 72) * v172, v169 + *(_QWORD *)(v192 + 72) * *(_QWORD *)&v37[16 * v38 + 16], v169 + *(_QWORD *)(v192 + 72) * v173, v191);
          if (v2)
            break;
          if (v173 < v172)
            goto LABEL_143;
          if ((swift_isUniquelyReferenced_nonNull_native(v171) & 1) == 0)
            v171 = sub_10088F088((uint64_t)v171);
          if (v170 >= *((_QWORD *)v171 + 2))
            goto LABEL_144;
          v174 = &v171[16 * v170 + 32];
          *(_QWORD *)v174 = v172;
          *((_QWORD *)v174 + 1) = v173;
          v175 = *((_QWORD *)v171 + 2);
          if (v38 > v175)
            goto LABEL_145;
          memmove(&v171[16 * v38 + 16], &v171[16 * v38 + 32], 16 * (v175 - v38));
          v37 = v171;
          *((_QWORD *)v171 + 2) = v175 - 1;
          v38 = v175 - 1;
        }
        while (v175 > 2);
      }
LABEL_124:
      swift_bridgeObjectRelease();
      v176[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v33 = v32 >> 1;
    v34 = static Array._allocateBufferUninitialized(minimumCapacity:)(v32 >> 1, v198);
    *(_QWORD *)(v34 + 16) = v33;
    v35 = *(unsigned __int8 *)(v192 + 80);
    v176 = (_QWORD *)v34;
    v191 = v34 + ((v35 + 32) & ~v35);
  }
  v36 = 0;
  v37 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v39 = v36;
    v40 = v36 + 1;
    v184 = v37;
    v186 = v36;
    if (v36 + 1 >= v30)
    {
      v60 = v36 + 1;
    }
    else
    {
      v201 = v30;
      v41 = *v207;
      v42 = *(_QWORD *)(v192 + 72);
      v43 = v36;
      v44 = v178;
      sub_10005972C(*v207 + v42 * v40, v178, type metadata accessor for BeaconEstimatedLocation);
      v182 = v41;
      v202 = v42;
      v45 = v41 + v42 * v43;
      v46 = v179;
      sub_10005972C(v45, v179, type metadata accessor for BeaconEstimatedLocation);
      v48 = *(int *)(v198 + 40);
      v47 = *(int *)(v198 + 44);
      v49 = *(unsigned __int8 *)(v44 + v47);
      v50 = v44 + v48;
      v51 = *(unsigned __int8 *)(v46 + v47);
      v200 = v46 + v48;
      v52 = v180;
      *v180 = v49;
      v53 = v196;
      v54 = &v52[*(int *)(v196 + 48)];
      v55 = type metadata accessor for Date(0);
      v56 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
      v197 = (Swift::Int)v54;
      v56(v54, v50, v55);
      v57 = v181;
      *v181 = v51;
      v58 = &v57[*(int *)(v53 + 48)];
      v195 = v56;
      v56(v58, v200, v55);
      if (v49 == v51)
      {
        v59 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        LODWORD(v200) = dispatch thunk of static Comparable.> infix(_:_:)(v197, v58, v55, v59);
      }
      else
      {
        LODWORD(v200) = v51 < v49;
      }
      v30 = v201;
      sub_100004048((uint64_t)v181, &qword_10110AC20);
      sub_100004048((uint64_t)v180, &qword_10110AC20);
      sub_1000126B0(v179, type metadata accessor for BeaconEstimatedLocation);
      sub_1000126B0(v178, type metadata accessor for BeaconEstimatedLocation);
      v39 = v186;
      v60 = v186 + 2;
      if (v186 + 2 < v30)
      {
        v193 = v202 * v40;
        v194 = v55;
        v61 = v182;
        v183 = v202 * v60;
        while (1)
        {
          v197 = v60;
          v62 = v2;
          v63 = v187;
          sub_10005972C(v61 + v183, v187, type metadata accessor for BeaconEstimatedLocation);
          v64 = v188;
          sub_10005972C(v61 + v193, v188, type metadata accessor for BeaconEstimatedLocation);
          v66 = *(int *)(v198 + 40);
          v65 = *(int *)(v198 + 44);
          v67 = *(unsigned __int8 *)(v63 + v65);
          v68 = v63 + v66;
          v69 = *(unsigned __int8 *)(v64 + v65);
          v70 = v64 + v66;
          v71 = v189;
          *v189 = v67;
          v72 = v195;
          v73 = v196;
          v74 = &v71[*(int *)(v196 + 48)];
          v75 = v194;
          v195(v74, v68, v194);
          v76 = v190;
          *v190 = v69;
          v77 = &v76[*(int *)(v73 + 48)];
          v72(v77, v70, v75);
          if (v67 == v69)
          {
            v78 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v79 = dispatch thunk of static Comparable.> infix(_:_:)(v74, v77, v75, v78);
          }
          else
          {
            v79 = v69 < v67;
          }
          sub_100004048((uint64_t)v190, &qword_10110AC20);
          sub_100004048((uint64_t)v189, &qword_10110AC20);
          sub_1000126B0(v188, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v187, type metadata accessor for BeaconEstimatedLocation);
          v2 = v62;
          v60 = v197;
          v30 = v201;
          if (((v200 ^ v79) & 1) != 0)
            break;
          v60 = v197 + 1;
          v61 += v202;
          if (v201 == v197 + 1)
          {
            v60 = v201;
            break;
          }
        }
        v39 = v186;
      }
      v37 = v184;
      if ((v200 & 1) != 0)
      {
        if (v60 < v39)
          goto LABEL_148;
        if (v39 < v60)
        {
          v80 = 0;
          v81 = v202 * (v60 - 1);
          v82 = v60 * v202;
          v83 = v39;
          v84 = v39 * v202;
          do
          {
            if (v83 != v60 + v80 - 1)
            {
              v87 = v182;
              if (!v182)
                goto LABEL_153;
              v88 = v182 + v84;
              v200 = v182 + v81;
              sub_1000126EC(v182 + v84, v185, type metadata accessor for BeaconEstimatedLocation);
              if (v84 < v81 || v88 >= v87 + v82)
              {
                v85 = v87 + v84;
                v86 = v200;
                swift_arrayInitWithTakeFrontToBack(v85, v200, 1, v198);
              }
              else
              {
                v86 = v200;
                if (v84 != v81)
                  swift_arrayInitWithTakeBackToFront(v88, v200);
              }
              sub_1000126EC(v185, v86, type metadata accessor for BeaconEstimatedLocation);
              v37 = v184;
              v39 = v186;
              v30 = v201;
            }
            ++v83;
            --v80;
            v81 -= v202;
            v82 -= v202;
            v84 += v202;
          }
          while (v83 < v60 + v80);
        }
      }
    }
    if (v60 < v30)
    {
      if (__OFSUB__(v60, v39))
        goto LABEL_146;
      if (v60 - v39 < v177)
        break;
    }
LABEL_63:
    if (v60 < v39)
      goto LABEL_141;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
    v197 = v60;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v37 = v184;
    else
      v37 = sub_10088E710(0, *((_QWORD *)v184 + 2) + 1, 1, v184);
    v119 = *((_QWORD *)v37 + 2);
    v118 = *((_QWORD *)v37 + 3);
    v38 = v119 + 1;
    if (v119 >= v118 >> 1)
      v37 = sub_10088E710((char *)(v118 > 1), v119 + 1, 1, v37);
    *((_QWORD *)v37 + 2) = v38;
    v120 = v37 + 32;
    v121 = &v37[16 * v119 + 32];
    v122 = v197;
    *(_QWORD *)v121 = v39;
    *((_QWORD *)v121 + 1) = v122;
    if (v119)
    {
      while (1)
      {
        v123 = v38 - 1;
        if (v38 >= 4)
        {
          v128 = &v120[16 * v38];
          v129 = *((_QWORD *)v128 - 8);
          v130 = *((_QWORD *)v128 - 7);
          v134 = __OFSUB__(v130, v129);
          v131 = v130 - v129;
          if (v134)
            goto LABEL_130;
          v133 = *((_QWORD *)v128 - 6);
          v132 = *((_QWORD *)v128 - 5);
          v134 = __OFSUB__(v132, v133);
          v126 = v132 - v133;
          v127 = v134;
          if (v134)
            goto LABEL_131;
          v135 = v38 - 2;
          v136 = &v120[16 * v38 - 32];
          v138 = *(_QWORD *)v136;
          v137 = *((_QWORD *)v136 + 1);
          v134 = __OFSUB__(v137, v138);
          v139 = v137 - v138;
          if (v134)
            goto LABEL_133;
          v134 = __OFADD__(v126, v139);
          v140 = v126 + v139;
          if (v134)
            goto LABEL_136;
          if (v140 >= v131)
          {
            v158 = &v120[16 * v123];
            v160 = *(_QWORD *)v158;
            v159 = *((_QWORD *)v158 + 1);
            v134 = __OFSUB__(v159, v160);
            v161 = v159 - v160;
            if (v134)
              goto LABEL_140;
            v151 = v126 < v161;
            goto LABEL_100;
          }
        }
        else
        {
          if (v38 != 3)
          {
            v152 = *((_QWORD *)v37 + 4);
            v153 = *((_QWORD *)v37 + 5);
            v134 = __OFSUB__(v153, v152);
            v145 = v153 - v152;
            v146 = v134;
            goto LABEL_94;
          }
          v125 = *((_QWORD *)v37 + 4);
          v124 = *((_QWORD *)v37 + 5);
          v134 = __OFSUB__(v124, v125);
          v126 = v124 - v125;
          v127 = v134;
        }
        if ((v127 & 1) != 0)
          goto LABEL_132;
        v135 = v38 - 2;
        v141 = &v120[16 * v38 - 32];
        v143 = *(_QWORD *)v141;
        v142 = *((_QWORD *)v141 + 1);
        v144 = __OFSUB__(v142, v143);
        v145 = v142 - v143;
        v146 = v144;
        if (v144)
          goto LABEL_135;
        v147 = &v120[16 * v123];
        v149 = *(_QWORD *)v147;
        v148 = *((_QWORD *)v147 + 1);
        v134 = __OFSUB__(v148, v149);
        v150 = v148 - v149;
        if (v134)
          goto LABEL_138;
        if (__OFADD__(v145, v150))
          goto LABEL_139;
        if (v145 + v150 >= v126)
        {
          v151 = v126 < v150;
LABEL_100:
          if (v151)
            v123 = v135;
          goto LABEL_102;
        }
LABEL_94:
        if ((v146 & 1) != 0)
          goto LABEL_134;
        v154 = &v120[16 * v123];
        v156 = *(_QWORD *)v154;
        v155 = *((_QWORD *)v154 + 1);
        v134 = __OFSUB__(v155, v156);
        v157 = v155 - v156;
        if (v134)
          goto LABEL_137;
        if (v157 < v145)
          goto LABEL_14;
LABEL_102:
        v162 = v123 - 1;
        if (v123 - 1 >= v38)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
        if (!*v207)
          goto LABEL_152;
        v163 = v37;
        v164 = &v120[16 * v162];
        v165 = *(_QWORD *)v164;
        v166 = &v120[16 * v123];
        v167 = *((_QWORD *)v166 + 1);
        sub_10085153C(*v207 + *(_QWORD *)(v192 + 72) * *(_QWORD *)v164, *v207 + *(_QWORD *)(v192 + 72) * *(_QWORD *)v166, *v207 + *(_QWORD *)(v192 + 72) * v167, v191);
        if (v2)
          goto LABEL_124;
        if (v167 < v165)
          goto LABEL_127;
        if (v123 > *((_QWORD *)v163 + 2))
          goto LABEL_128;
        *(_QWORD *)v164 = v165;
        *(_QWORD *)&v120[16 * v162 + 8] = v167;
        v168 = *((_QWORD *)v163 + 2);
        if (v123 >= v168)
          goto LABEL_129;
        v38 = v168 - 1;
        memmove(&v120[16 * v123], v166 + 16, 16 * (v168 - 1 - v123));
        v37 = v163;
        *((_QWORD *)v163 + 2) = v168 - 1;
        if (v168 <= 2)
          goto LABEL_14;
      }
    }
    v38 = 1;
LABEL_14:
    v30 = v207[1];
    v36 = v197;
    if (v197 >= v30)
      goto LABEL_113;
  }
  if (__OFADD__(v39, v177))
    goto LABEL_149;
  if (v39 + v177 >= v30)
    v89 = v30;
  else
    v89 = v39 + v177;
  if (v89 >= v39)
  {
    if (v60 != v89)
    {
      v182 = v2;
      v90 = *(_QWORD *)(v192 + 72);
      v91 = v90 * (v60 - 1);
      v193 = v90;
      v92 = v60 * v90;
      v183 = v89;
      do
      {
        v94 = 0;
        v197 = v60;
        v194 = v92;
        v195 = (void (*)(_BYTE *, uint64_t, uint64_t))v91;
        while (1)
        {
          v95 = *v207;
          v201 = v92 + v94;
          v202 = v39;
          v96 = v203;
          sub_10005972C(v92 + v94 + v95, v203, type metadata accessor for BeaconEstimatedLocation);
          v200 = v91 + v94;
          v97 = v91 + v94 + v95;
          v98 = v204;
          sub_10005972C(v97, v204, type metadata accessor for BeaconEstimatedLocation);
          v100 = *(int *)(v198 + 40);
          v99 = *(int *)(v198 + 44);
          v101 = *(unsigned __int8 *)(v96 + v99);
          v102 = v96 + v100;
          v103 = *(unsigned __int8 *)(v98 + v99);
          v104 = v98 + v100;
          v105 = v205;
          *v205 = v101;
          v106 = v196;
          v107 = &v105[*(int *)(v196 + 48)];
          v108 = type metadata accessor for Date(0);
          v109 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 16);
          v109(v107, v102, v108);
          v110 = v206;
          *v206 = v103;
          v111 = &v110[*(int *)(v106 + 48)];
          v109(v111, v104, v108);
          if (v101 == v103)
          {
            v112 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v113 = dispatch thunk of static Comparable.> infix(_:_:)(v107, v111, v108, v112);
          }
          else
          {
            v113 = v103 < v101;
          }
          sub_100004048((uint64_t)v206, &qword_10110AC20);
          sub_100004048((uint64_t)v205, &qword_10110AC20);
          sub_1000126B0(v204, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v203, type metadata accessor for BeaconEstimatedLocation);
          v92 = v194;
          if ((v113 & 1) == 0)
            break;
          v114 = *v207;
          v91 = (uint64_t)v195;
          if (!*v207)
            goto LABEL_151;
          v115 = v114 + v194 + v94;
          v116 = (uint64_t)v195 + v114 + v94;
          sub_1000126EC(v115, v199, type metadata accessor for BeaconEstimatedLocation);
          swift_arrayInitWithTakeFrontToBack(v115, v116, 1, v198);
          sub_1000126EC(v199, v116, type metadata accessor for BeaconEstimatedLocation);
          v94 -= v193;
          v39 = v202 + 1;
          v93 = v197;
          if (v197 == v202 + 1)
            goto LABEL_53;
        }
        v93 = v197;
        v91 = (uint64_t)v195;
LABEL_53:
        v60 = v93 + 1;
        v91 += v193;
        v92 += v193;
        v39 = v186;
      }
      while (v60 != v183);
      v60 = v183;
      v2 = v182;
      v37 = v184;
    }
    goto LABEL_63;
  }
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_10085037C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  Swift::Int v25;
  Swift::Int result;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  Swift::Int v30;
  char *v31;
  Swift::Int v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  Swift::Int v42;
  Swift::Int v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  Swift::Int v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  unint64_t v56;
  Swift::Int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  Swift::Int v113;
  uint64_t v114;
  Swift::Int v115;
  uint64_t v116;
  uint64_t v117;
  Swift::Int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  Swift::Int v139;
  char *v140;
  char *v141;
  _QWORD *v142;
  Swift::Int v143;
  Swift::Int v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  Swift::Int v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t (*v161)(uint64_t, uint64_t);

  v161 = a1;
  v150 = type metadata accessor for BeaconStatus(0);
  v158 = *(_QWORD *)(v150 - 8);
  v4 = __chkstk_darwin(v150);
  v151 = (uint64_t)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v155 = (uint64_t)&v138 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v138 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v138 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v138 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v138 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v138 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v138 - v23;
  v160 = v2;
  v25 = v2[1];
  result = _minimumMergeRunLength(_:)(v25);
  v143 = result;
  if (result >= v25)
  {
    if (v25 < 0)
      goto LABEL_151;
    if (v25)
      return sub_1008512CC(0, v25, 1, v161);
    return result;
  }
  if (v25 >= 0)
    v27 = v25;
  else
    v27 = v25 + 1;
  if (v25 <= -2)
    goto LABEL_160;
  v153 = v10;
  if (v25 < 2)
  {
    v29 = _swiftEmptyArrayStorage;
    v156 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
    if (v25 != 1)
    {
      v60 = _swiftEmptyArrayStorage[2];
      v31 = (char *)_swiftEmptyArrayStorage;
LABEL_114:
      v142 = v29;
      if (v60 >= 2)
      {
        v128 = *v160;
        do
        {
          v129 = v60 - 2;
          if (v60 < 2)
            goto LABEL_146;
          if (!v128)
            goto LABEL_159;
          v130 = v31;
          v131 = v31 + 32;
          v132 = *(_QWORD *)&v31[16 * v129 + 32];
          v133 = *(_QWORD *)&v31[16 * v60 + 24];
          v134 = v159;
          sub_100851CB4(v128 + *(_QWORD *)(v158 + 72) * v132, v128 + *(_QWORD *)(v158 + 72) * *(_QWORD *)&v131[16 * v60 - 16], v128 + *(_QWORD *)(v158 + 72) * v133, v156, (uint64_t (*)(char *, char *))v161, a2);
          v159 = v134;
          if (v134)
            goto LABEL_128;
          if (v133 < v132)
            goto LABEL_147;
          if ((swift_isUniquelyReferenced_nonNull_native(v130) & 1) == 0)
            v130 = sub_10088F088((uint64_t)v130);
          if (v129 >= *((_QWORD *)v130 + 2))
            goto LABEL_148;
          v135 = &v130[16 * v129 + 32];
          *(_QWORD *)v135 = v132;
          *((_QWORD *)v135 + 1) = v133;
          v136 = *((_QWORD *)v130 + 2);
          if (v60 > v136)
            goto LABEL_149;
          v31 = v130;
          memmove(&v130[16 * v60 + 16], &v130[16 * v60 + 32], 16 * (v136 - v60));
          *((_QWORD *)v130 + 2) = v136 - 1;
          v60 = v136 - 1;
        }
        while (v136 > 2);
      }
      swift_bridgeObjectRelease();
      v142[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v140 = v24;
    v141 = v22;
    v146 = v19;
    v147 = v16;
    v149 = v13;
  }
  else
  {
    v140 = v24;
    v141 = v22;
    v146 = v19;
    v147 = v16;
    v149 = v13;
    v28 = v27 >> 1;
    v29 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v27 >> 1, v150);
    v29[2] = v28;
    v156 = (unint64_t)v29
         + ((*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
  }
  v142 = v29;
  v30 = 0;
  v31 = (char *)_swiftEmptyArrayStorage;
  v157 = a2;
  while (1)
  {
    v32 = v30;
    v33 = v30 + 1;
    if (v30 + 1 >= v25)
    {
LABEL_50:
      if (v33 < v32)
        goto LABEL_150;
      goto LABEL_51;
    }
    v152 = v25;
    v34 = *v160;
    v35 = *(_QWORD *)(v158 + 72);
    v36 = (uint64_t)v140;
    sub_10005972C(*v160 + v35 * v33, (uint64_t)v140, type metadata accessor for BeaconStatus);
    v144 = v34;
    v154 = v35;
    v37 = v34 + v35 * v32;
    v38 = v32;
    v39 = (uint64_t)v141;
    sub_10005972C(v37, (uint64_t)v141, type metadata accessor for BeaconStatus);
    v40 = v159;
    LODWORD(v148) = v161(v36, v39);
    if (v40)
    {
      sub_1000126B0(v39, type metadata accessor for BeaconStatus);
      sub_1000126B0(v36, type metadata accessor for BeaconStatus);
      swift_bridgeObjectRelease();
      v137 = v142;
LABEL_129:
      v137[2] = 0;
      return swift_bridgeObjectRelease();
    }
    sub_1000126B0(v39, type metadata accessor for BeaconStatus);
    sub_1000126B0(v36, type metadata accessor for BeaconStatus);
    v41 = v38 + 2;
    v42 = v152;
    v32 = v38;
    if (v38 + 2 >= v152)
    {
      v44 = v38 + 2;
    }
    else
    {
      v139 = v38;
      v159 = v154 * v33;
      v43 = v144;
      v44 = v38 + 2;
      v145 = (char *)(v154 * v41);
      while (1)
      {
        v45 = (uint64_t)v146;
        sub_10005972C((uint64_t)&v145[v43], (uint64_t)v146, type metadata accessor for BeaconStatus);
        v46 = (uint64_t)v147;
        sub_10005972C(v43 + v159, (uint64_t)v147, type metadata accessor for BeaconStatus);
        v47 = v161(v45, v46);
        sub_1000126B0(v46, type metadata accessor for BeaconStatus);
        sub_1000126B0(v45, type metadata accessor for BeaconStatus);
        if (((v148 ^ v47) & 1) != 0)
          break;
        v43 += v154;
        ++v44;
        v42 = v152;
        a2 = v157;
        if (v152 == v44)
        {
          v44 = v152;
          v32 = v139;
          goto LABEL_24;
        }
      }
      a2 = v157;
      v32 = v139;
      v42 = v152;
    }
LABEL_24:
    v159 = 0;
    v48 = v143;
    if ((v148 & 1) != 0)
    {
      if (v44 < v32)
        goto LABEL_155;
      v49 = v44;
      v50 = (uint64_t)v153;
      if (v32 >= v44)
      {
        v33 = v44;
      }
      else
      {
        v145 = v31;
        v51 = 0;
        v52 = v154 * (v44 - 1);
        v53 = v44 * v154;
        v139 = v32;
        v54 = v32 * v154;
        do
        {
          if (v32 != v49 + v51 - 1)
          {
            v55 = v144;
            if (!v144)
              goto LABEL_158;
            v56 = v144 + v54;
            sub_1000126EC(v144 + v54, v151, type metadata accessor for BeaconStatus);
            if (v54 < v52 || v56 >= v55 + v53)
            {
              swift_arrayInitWithTakeFrontToBack(v55 + v54, v55 + v52, 1, v150);
            }
            else if (v54 != v52)
            {
              swift_arrayInitWithTakeBackToFront(v55 + v54, v55 + v52);
            }
            sub_1000126EC(v151, v55 + v52, type metadata accessor for BeaconStatus);
            a2 = v157;
            v50 = (uint64_t)v153;
          }
          ++v32;
          --v51;
          v49 = v44;
          v52 -= v154;
          v53 -= v154;
          v54 += v154;
        }
        while (v32 < v44 + v51);
        v31 = v145;
        v48 = v143;
        v33 = v44;
        v32 = v139;
      }
      v42 = v152;
      if (v33 >= v152)
        goto LABEL_50;
    }
    else
    {
      v50 = (uint64_t)v153;
      v33 = v44;
      if (v44 >= v42)
        goto LABEL_50;
    }
    if (__OFSUB__(v33, v32))
      goto LABEL_152;
    if (v33 - v32 >= v48)
      goto LABEL_50;
    if (__OFADD__(v32, v48))
      goto LABEL_153;
    v57 = v32 + v48 >= v42 ? v42 : v32 + v48;
    if (v57 < v32)
      break;
    if (v33 == v57)
      goto LABEL_50;
    v145 = v31;
    v112 = *(_QWORD *)(v158 + 72);
    v154 = v112 * (v33 - 1);
    v148 = v112;
    v113 = v33 * v112;
    v139 = v32;
    v144 = v57;
    do
    {
      v152 = v33;
      v114 = 0;
      v115 = v32;
      v116 = v50;
      while (1)
      {
        v117 = *v160;
        v118 = v113;
        v119 = v113 + v114 + *v160;
        v120 = (uint64_t)v149;
        sub_10005972C(v119, (uint64_t)v149, type metadata accessor for BeaconStatus);
        sub_10005972C(v154 + v114 + v117, v116, type metadata accessor for BeaconStatus);
        v121 = v159;
        v122 = v161(v120, v116);
        v123 = v116;
        v159 = v121;
        if (v121)
        {
          sub_1000126B0(v116, type metadata accessor for BeaconStatus);
          sub_1000126B0(v120, type metadata accessor for BeaconStatus);
LABEL_128:
          swift_bridgeObjectRelease();
          v137 = v142;
          goto LABEL_129;
        }
        v124 = v122;
        sub_1000126B0(v123, type metadata accessor for BeaconStatus);
        sub_1000126B0(v120, type metadata accessor for BeaconStatus);
        if ((v124 & 1) == 0)
          break;
        v125 = *v160;
        if (!*v160)
          goto LABEL_157;
        v113 = v118;
        v126 = v125 + v118 + v114;
        v127 = v125 + v154 + v114;
        sub_1000126EC(v126, v155, type metadata accessor for BeaconStatus);
        swift_arrayInitWithTakeFrontToBack(v126, v127, 1, v150);
        sub_1000126EC(v155, v127, type metadata accessor for BeaconStatus);
        v114 -= v148;
        ++v115;
        v116 = (uint64_t)v153;
        if (v152 == v115)
          goto LABEL_109;
      }
      v113 = v118;
      v116 = v123;
LABEL_109:
      v50 = v116;
      v33 = v152 + 1;
      v154 += v148;
      v113 += v148;
      v32 = v139;
    }
    while (v152 + 1 != v144);
    v33 = v144;
    a2 = v157;
    v31 = v145;
    if (v144 < v139)
      goto LABEL_150;
LABEL_51:
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
      v31 = sub_10088E710(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
    v59 = *((_QWORD *)v31 + 2);
    v58 = *((_QWORD *)v31 + 3);
    v60 = v59 + 1;
    if (v59 >= v58 >> 1)
      v31 = sub_10088E710((char *)(v58 > 1), v59 + 1, 1, v31);
    *((_QWORD *)v31 + 2) = v60;
    v154 = (uint64_t)(v31 + 32);
    v61 = &v31[16 * v59 + 32];
    *(_QWORD *)v61 = v32;
    *((_QWORD *)v61 + 1) = v33;
    v152 = v33;
    if (v59)
    {
      v62 = v154;
      v63 = v159;
      while (1)
      {
        v64 = v60 - 1;
        if (v60 >= 4)
        {
          v69 = v62 + 16 * v60;
          v70 = *(_QWORD *)(v69 - 64);
          v71 = *(_QWORD *)(v69 - 56);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_135;
          v74 = *(_QWORD *)(v69 - 48);
          v73 = *(_QWORD *)(v69 - 40);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_136;
          v76 = v60 - 2;
          v77 = (uint64_t *)(v62 + 16 * (v60 - 2));
          v79 = *v77;
          v78 = v77[1];
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_138;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_141;
          if (v81 >= v72)
          {
            v99 = (uint64_t *)(v62 + 16 * v64);
            v101 = *v99;
            v100 = v99[1];
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_145;
            v92 = v67 < v102;
            goto LABEL_88;
          }
        }
        else
        {
          if (v60 != 3)
          {
            v93 = *((_QWORD *)v31 + 4);
            v94 = *((_QWORD *)v31 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_82;
          }
          v66 = *((_QWORD *)v31 + 4);
          v65 = *((_QWORD *)v31 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_137;
        v76 = v60 - 2;
        v82 = (uint64_t *)(v62 + 16 * (v60 - 2));
        v84 = *v82;
        v83 = v82[1];
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_140;
        v88 = (uint64_t *)(v62 + 16 * v64);
        v90 = *v88;
        v89 = v88[1];
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_143;
        if (__OFADD__(v86, v91))
          goto LABEL_144;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_88:
          if (v92)
            v64 = v76;
          goto LABEL_90;
        }
LABEL_82:
        if ((v87 & 1) != 0)
          goto LABEL_139;
        v95 = (uint64_t *)(v62 + 16 * v64);
        v97 = *v95;
        v96 = v95[1];
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_142;
        if (v98 < v86)
          goto LABEL_99;
LABEL_90:
        v103 = v64 - 1;
        if (v64 - 1 >= v60)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!*v160)
          goto LABEL_156;
        v104 = a2;
        v105 = v31;
        v106 = v62;
        v107 = (uint64_t *)(v62 + 16 * v103);
        v108 = *v107;
        v109 = (_QWORD *)(v106 + 16 * v64);
        v110 = v109[1];
        sub_100851CB4(*v160 + *(_QWORD *)(v158 + 72) * *v107, *v160 + *(_QWORD *)(v158 + 72) * *v109, *v160 + *(_QWORD *)(v158 + 72) * v110, v156, (uint64_t (*)(char *, char *))v161, v104);
        if (v63)
          goto LABEL_128;
        if (v110 < v108)
          goto LABEL_132;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_133;
        *v107 = v108;
        v62 = v154;
        *(_QWORD *)(v154 + 16 * v103 + 8) = v110;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_134;
        v31 = v105;
        v60 = v111 - 1;
        memmove(v109, v109 + 2, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        a2 = v104;
        if (v111 <= 2)
          goto LABEL_99;
      }
    }
    v60 = 1;
    v63 = v159;
LABEL_99:
    v159 = v63;
    v25 = v160[1];
    v30 = v152;
    v29 = v142;
    if (v152 >= v25)
      goto LABEL_114;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100850F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, char *, uint64_t);
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _BYTE *v58;

  v56 = a4;
  v43 = a1;
  v47 = sub_10001A9A8(&qword_10110AC20);
  v6 = __chkstk_darwin(v47);
  v58 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - v8;
  v52 = type metadata accessor for BeaconEstimatedLocation(0);
  v10 = __chkstk_darwin(v52);
  v53 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v41 - v13;
  result = __chkstk_darwin(v12);
  v18 = (char *)&v41 - v17;
  v51 = a3;
  v42 = a2;
  if (a3 != a2)
  {
    v19 = *(_QWORD *)(v16 + 72);
    v20 = v19 * (v51 - 1);
    v48 = v19;
    v21 = v19 * v51;
    v45 = v14;
    v46 = v9;
    v44 = (char *)&v41 - v17;
LABEL_5:
    v22 = 0;
    v57 = v43;
    v49 = v21;
    v50 = v20;
    while (1)
    {
      v23 = *v56;
      v55 = v21 + v22;
      sub_10005972C(v21 + v22 + v23, (uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
      v54 = v20 + v22;
      sub_10005972C(v20 + v22 + v23, (uint64_t)v14, type metadata accessor for BeaconEstimatedLocation);
      v25 = *(int *)(v52 + 40);
      v24 = *(int *)(v52 + 44);
      v26 = v18[v24];
      v27 = &v18[v25];
      v28 = v14[v24];
      v29 = &v14[v25];
      *v9 = v26;
      v30 = v47;
      v31 = &v9[*(int *)(v47 + 48)];
      v32 = type metadata accessor for Date(0);
      v33 = *(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
      v33(v31, v27, v32);
      v34 = v58;
      *v58 = v28;
      v35 = &v34[*(int *)(v30 + 48)];
      v33(v35, v29, v32);
      if (v26 == v28)
      {
        v36 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v37 = dispatch thunk of static Comparable.> infix(_:_:)(v31, v35, v32, v36);
      }
      else
      {
        v37 = v28 < v26;
      }
      sub_100004048((uint64_t)v58, &qword_10110AC20);
      v9 = v46;
      sub_100004048((uint64_t)v46, &qword_10110AC20);
      v14 = v45;
      sub_1000126B0((uint64_t)v45, type metadata accessor for BeaconEstimatedLocation);
      v18 = v44;
      result = sub_1000126B0((uint64_t)v44, type metadata accessor for BeaconEstimatedLocation);
      v21 = v49;
      v20 = v50;
      if ((v37 & 1) == 0)
      {
LABEL_4:
        v20 += v48;
        v21 += v48;
        if (++v51 == v42)
          return result;
        goto LABEL_5;
      }
      v38 = *v56;
      if (!*v56)
        break;
      v39 = v38 + v49 + v22;
      v40 = v38 + v50 + v22;
      sub_1000126EC(v39, v53, type metadata accessor for BeaconEstimatedLocation);
      swift_arrayInitWithTakeFrontToBack(v39, v40, 1, v52);
      result = sub_1000126EC(v53, v40, type metadata accessor for BeaconEstimatedLocation);
      v22 -= v48;
      if (v51 == ++v57)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1008512CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = v4;
  v37 = a4;
  v31 = type metadata accessor for BeaconStatus(0);
  v10 = __chkstk_darwin(v31);
  v39 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v36 = (uint64_t)&v29 - v13;
  result = __chkstk_darwin(v12);
  v35 = (uint64_t)&v29 - v16;
  v30 = a2;
  if (a3 != a2)
  {
    v17 = *(_QWORD *)(v15 + 72);
    v41 = v17 * (a3 - 1);
    v32 = v4;
    v33 = v17;
    v40 = v17 * a3;
    v29 = a1;
LABEL_4:
    v18 = 0;
    v34 = a3;
    while (1)
    {
      v38 = a1;
      v20 = *v6;
      v21 = v40 + v18 + *v6;
      v22 = v35;
      sub_10005972C(v21, v35, type metadata accessor for BeaconStatus);
      v23 = v36;
      sub_10005972C(v41 + v18 + v20, v36, type metadata accessor for BeaconStatus);
      v24 = v37(v22, v23);
      sub_1000126B0(v23, type metadata accessor for BeaconStatus);
      result = sub_1000126B0(v22, type metadata accessor for BeaconStatus);
      if (v5)
        break;
      if ((v24 & 1) == 0)
      {
        v19 = v34;
        v6 = v32;
LABEL_11:
        a3 = v19 + 1;
        v41 += v33;
        v40 += v33;
        a1 = v29;
        if (a3 != v30)
          goto LABEL_4;
        return result;
      }
      v25 = v32;
      v26 = *v32;
      if (!*v32)
      {
        __break(1u);
        return result;
      }
      v27 = v26 + v40 + v18;
      v28 = v26 + v41 + v18;
      sub_1000126EC(v27, v39, type metadata accessor for BeaconStatus);
      swift_arrayInitWithTakeFrontToBack(v27, v28, 1, v31);
      result = sub_1000126EC(v39, v28, type metadata accessor for BeaconStatus);
      v19 = v34;
      v18 -= v33;
      a1 = v38 + 1;
      v6 = v25;
      if (v34 == v38 + 1)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_10085153C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  void (*v46)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  void (*v71)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t result;
  uint64_t v84;
  _BYTE *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  _BYTE *v102;

  v96 = sub_10001A9A8(&qword_10110AC20);
  v8 = __chkstk_darwin(v96);
  v95 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v84 - v11;
  v13 = __chkstk_darwin(v10);
  v94 = (char *)&v84 - v14;
  __chkstk_darwin(v13);
  v93 = (char *)&v84 - v15;
  v16 = type metadata accessor for BeaconEstimatedLocation(0);
  v17 = __chkstk_darwin(v16);
  v92 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v91 = (uint64_t)&v84 - v20;
  v21 = __chkstk_darwin(v19);
  v90 = (uint64_t)&v84 - v22;
  __chkstk_darwin(v21);
  v89 = (uint64_t)&v84 - v23;
  v97 = *(_QWORD *)(v24 + 72);
  if (!v97)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (a2 - a1 == 0x8000000000000000 && v97 == -1)
    goto LABEL_67;
  v25 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v97 == -1)
    goto LABEL_68;
  v26 = (uint64_t)(a2 - a1) / v97;
  v102 = (_BYTE *)a1;
  v101 = (_BYTE *)a4;
  v27 = v25 / v97;
  if (v26 >= v25 / v97)
  {
    if ((v27 & 0x8000000000000000) == 0)
    {
      v29 = v27 * v97;
      if (a4 < a2 || a2 + v29 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v27, v16);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v56 = a4 + v29;
      v100 = a4 + v29;
      v102 = (_BYTE *)a2;
      if (v29 >= 1 && a1 < a2)
      {
        v97 = -v97;
        v87 = a4;
        v88 = v16;
        v85 = v12;
        v86 = a1;
        do
        {
          v98 = a3;
          v58 = v97;
          v59 = v91;
          sub_10005972C(v56 + v97, v91, type metadata accessor for BeaconEstimatedLocation);
          v99 = a2;
          v60 = a2 + v58;
          v61 = v92;
          sub_10005972C(a2 + v58, v92, type metadata accessor for BeaconEstimatedLocation);
          v63 = *(int *)(v16 + 40);
          v62 = *(int *)(v16 + 44);
          v64 = *(unsigned __int8 *)(v59 + v62);
          v65 = v59 + v63;
          v66 = *(unsigned __int8 *)(v61 + v62);
          v67 = v61 + v63;
          *v12 = v64;
          v68 = v96;
          v69 = &v12[*(int *)(v96 + 48)];
          v70 = type metadata accessor for Date(0);
          v71 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
          v71(v69, v65, v70);
          v72 = v95;
          *v95 = v66;
          v73 = &v72[*(int *)(v68 + 48)];
          v71(v73, v67, v70);
          if (v64 == v66)
          {
            v74 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v75 = dispatch thunk of static Comparable.> infix(_:_:)(v69, v73, v70, v74);
          }
          else
          {
            v75 = v66 < v64;
          }
          v77 = v97;
          v76 = v98;
          v78 = v98 + v97;
          sub_100004048((uint64_t)v95, &qword_10110AC20);
          v12 = v85;
          sub_100004048((uint64_t)v85, &qword_10110AC20);
          sub_1000126B0(v92, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v91, type metadata accessor for BeaconEstimatedLocation);
          v16 = v88;
          if ((v75 & 1) != 0)
          {
            if (v76 < v99 || v78 >= v99)
            {
              swift_arrayInitWithTakeFrontToBack(v76 + v77, v60, 1, v88);
              v80 = v86;
              v79 = v87;
            }
            else
            {
              v80 = v86;
              v79 = v87;
              if (v76 != v99)
                swift_arrayInitWithTakeBackToFront(v76 + v77, v60);
            }
            v102 += v77;
          }
          else
          {
            v81 = v100;
            v82 = v100 + v77;
            v100 += v77;
            if (v76 < v81 || v78 >= v81)
            {
              swift_arrayInitWithTakeFrontToBack(v76 + v77, v82, 1, v88);
              v60 = v99;
              v80 = v86;
              v79 = v87;
            }
            else
            {
              v60 = v99;
              v80 = v86;
              v79 = v87;
              if (v76 != v81)
                swift_arrayInitWithTakeBackToFront(v76 + v77, v82);
            }
          }
          v56 = v100;
          if (v100 <= v79)
            break;
          a2 = v60;
          a3 = v76 + v77;
        }
        while (v60 > v80);
      }
      goto LABEL_65;
    }
  }
  else if ((v26 & 0x8000000000000000) == 0)
  {
    v28 = v26 * v97;
    if (a4 < a1 || a1 + v28 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v26, v16);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v95 = (_BYTE *)(a4 + v28);
    v100 = a4 + v28;
    if (v28 >= 1 && a2 < a3)
    {
      v31 = type metadata accessor for BeaconEstimatedLocation;
      v88 = v16;
      v98 = a3;
      do
      {
        v99 = a2;
        v32 = v89;
        sub_10005972C(a2, v89, v31);
        v33 = a4;
        v34 = v90;
        v35 = v31;
        sub_10005972C(v33, v90, v31);
        v37 = *(int *)(v16 + 40);
        v36 = *(int *)(v16 + 44);
        v38 = *(unsigned __int8 *)(v32 + v36);
        v39 = v32 + v37;
        v40 = *(unsigned __int8 *)(v34 + v36);
        v41 = v34 + v37;
        v42 = v93;
        *v93 = v38;
        v43 = v96;
        v44 = &v42[*(int *)(v96 + 48)];
        v45 = type metadata accessor for Date(0);
        v46 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
        v46(v44, v39, v45);
        v47 = v94;
        *v94 = v40;
        v48 = &v47[*(int *)(v43 + 48)];
        v46(v48, v41, v45);
        if (v38 == v40)
        {
          v49 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v50 = dispatch thunk of static Comparable.> infix(_:_:)(v44, v48, v45, v49);
        }
        else
        {
          v50 = v40 < v38;
        }
        sub_100004048((uint64_t)v94, &qword_10110AC20);
        sub_100004048((uint64_t)v93, &qword_10110AC20);
        v31 = v35;
        sub_1000126B0(v90, v35);
        sub_1000126B0(v89, v35);
        v51 = (unint64_t)v102;
        v52 = v99;
        v16 = v88;
        if ((v50 & 1) != 0)
        {
          v53 = v98;
          v54 = v99 + v97;
          if ((unint64_t)v102 < v99 || (unint64_t)v102 >= v54)
          {
            swift_arrayInitWithTakeFrontToBack(v102, v99, 1, v88);
          }
          else if (v102 == (_BYTE *)v99)
          {
            v51 = v99;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v102, v99);
          }
        }
        else
        {
          v55 = (unint64_t)&v101[v97];
          if (v102 < v101 || (unint64_t)v102 >= v55)
          {
            swift_arrayInitWithTakeFrontToBack(v102, v101, 1, v88);
          }
          else if (v102 != v101)
          {
            swift_arrayInitWithTakeBackToFront(v102, v101);
          }
          v101 = (_BYTE *)v55;
          v54 = v52;
          v53 = v98;
        }
        v102 = (_BYTE *)(v51 + v97);
        a4 = (unint64_t)v101;
        if (v101 >= v95)
          break;
        a2 = v54;
      }
      while (v54 < v53);
    }
LABEL_65:
    sub_10088E8D4((unint64_t *)&v102, (unint64_t *)&v101, (uint64_t *)&v100);
    return 1;
  }
LABEL_69:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100851CB4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t result;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, char *);
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v7 = v6;
  v56 = a5;
  v57 = a3;
  v55 = type metadata accessor for BeaconStatus(0);
  v12 = __chkstk_darwin(v55);
  v13 = __chkstk_darwin(v12);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v50 - v15;
  __chkstk_darwin(v14);
  v20 = (char *)&v50 - v19;
  v22 = *(_QWORD *)(v21 + 72);
  if (!v22)
  {
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v23 = a1;
  if (a2 - a1 == 0x8000000000000000 && v22 == -1)
    goto LABEL_64;
  v24 = v57 - a2;
  if (v57 - a2 == 0x8000000000000000 && v22 == -1)
    goto LABEL_65;
  v25 = (uint64_t)(a2 - a1) / v22;
  v60 = a1;
  v59 = a4;
  v26 = v24 / v22;
  if (v25 >= v24 / v22)
  {
    if ((v26 & 0x8000000000000000) == 0)
    {
      v52 = (char *)v18;
      v53 = a1;
      v28 = v26 * v22;
      v29 = v17;
      if (a4 < a2 || a2 + v28 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v26, v55);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v36 = a4 + v28;
      v58 = a4 + v28;
      v60 = a2;
      if (v28 < 1 || v53 >= a2)
        goto LABEL_62;
      v38 = -v22;
      v50 = a6;
      v51 = a4;
      while (1)
      {
        sub_10005972C(v36 + v38, v29, type metadata accessor for BeaconStatus);
        v39 = a2 + v38;
        v40 = a2 + v38;
        v41 = v38;
        v20 = (char *)v29;
        v16 = v52;
        sub_10005972C(v40, (uint64_t)v52, type metadata accessor for BeaconStatus);
        v42 = v56(v20, v16);
        if (v7)
          goto LABEL_61;
        v43 = v42;
        v54 = a2;
        v44 = v57;
        v45 = v57 + v41;
        sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconStatus);
        sub_1000126B0((uint64_t)v20, type metadata accessor for BeaconStatus);
        v29 = (uint64_t)v20;
        if ((v43 & 1) != 0)
        {
          v38 = v41;
          v46 = v44 + v41;
          if (v44 < v54 || v45 >= v54)
          {
            swift_arrayInitWithTakeFrontToBack(v45, v39, 1, v55);
            v7 = 0;
          }
          else
          {
            v7 = 0;
            if (v44 != v54)
              swift_arrayInitWithTakeBackToFront(v45, v39);
          }
          v60 += v38;
        }
        else
        {
          v47 = v58;
          v48 = v58 + v41;
          v58 += v41;
          v38 = v41;
          v46 = v44 + v41;
          if (v44 < v47 || v45 >= v47)
          {
            swift_arrayInitWithTakeFrontToBack(v45, v48, 1, v55);
            v39 = v54;
            v7 = 0;
          }
          else
          {
            v7 = 0;
            v39 = v54;
            if (v44 != v47)
              swift_arrayInitWithTakeBackToFront(v45, v48);
          }
        }
        v36 = v58;
        if (v58 > v51)
        {
          a2 = v39;
          v57 = v46;
          if (v39 > v53)
            continue;
        }
        goto LABEL_62;
      }
    }
  }
  else if ((v25 & 0x8000000000000000) == 0)
  {
    v27 = v25 * v22;
    if (a4 < v23 || v23 + v27 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, v23, v25, v55);
    }
    else if (a4 != v23)
    {
      swift_arrayInitWithTakeBackToFront(a4, v23);
    }
    v54 = a4 + v27;
    v58 = a4 + v27;
    if (v27 < 1 || a2 >= v57)
      goto LABEL_62;
    while (1)
    {
      sub_10005972C(a2, (uint64_t)v20, type metadata accessor for BeaconStatus);
      sub_10005972C(a4, (uint64_t)v16, type metadata accessor for BeaconStatus);
      v31 = v56(v20, v16);
      if (v6)
        break;
      v32 = v31;
      sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconStatus);
      sub_1000126B0((uint64_t)v20, type metadata accessor for BeaconStatus);
      v33 = v60;
      if ((v32 & 1) != 0)
      {
        v34 = a2 + v22;
        if (v60 < a2 || v60 >= v34)
        {
          swift_arrayInitWithTakeFrontToBack(v60, a2, 1, v55);
        }
        else if (v60 == a2)
        {
          v33 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v60, a2);
        }
      }
      else
      {
        v35 = v59 + v22;
        if (v60 < v59 || v60 >= v35)
        {
          swift_arrayInitWithTakeFrontToBack(v60, v59, 1, v55);
        }
        else if (v60 != v59)
        {
          swift_arrayInitWithTakeBackToFront(v60, v59);
        }
        v59 = v35;
        v34 = a2;
      }
      v60 = v33 + v22;
      a4 = v59;
      if (v59 < v54)
      {
        a2 = v34;
        if (v34 < v57)
          continue;
      }
      goto LABEL_62;
    }
LABEL_61:
    sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconStatus);
    sub_1000126B0((uint64_t)v20, type metadata accessor for BeaconStatus);
LABEL_62:
    sub_10088E9F0(&v60, &v59, (uint64_t *)&v58);
    return 1;
  }
LABEL_66:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100852214(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100853318(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010FA238, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

char *sub_100852238(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100853624(a1, a2, a3, a4, type metadata accessor for SharedBeaconRecord, &qword_101110090, (void (*)(_QWORD *))sub_100D3B724);
}

Swift::Int sub_100852254(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v33[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10001A9A8(&qword_10110AA48);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v31 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v31)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v31)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v31)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = *(_QWORD *)(v4 + 48) + 24 * v13;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(unsigned __int8 *)(v17 + 16);
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v33, v18, v19);
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << v8[32];
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = *((_QWORD *)v8 + 6) + 24 * v24;
    *(_QWORD *)v29 = v18;
    *(_QWORD *)(v29 + 8) = v19;
    *(_BYTE *)(v29 + 16) = v20;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v31)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v31)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100852504(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10001A9A8((uint64_t *)&unk_1011100D0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32);
    sub_10001BBBC(v18, v19);
    Data.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << v8[32];
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (uint64_t *)(*((_QWORD *)v8 + 6) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void *sub_10085279C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
    goto LABEL_23;
  }
  if (*(_QWORD *)(a4 + 16) != a3)
  {
    sub_10001A9A8(&qword_1010FA428);
    v8 = (void *)static _SetStorage.allocate(capacity:)(a3);
    if (a2 < 1)
      v9 = 0;
    else
      v9 = *a1;
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      goto LABEL_22;
    }
    if (a2 > 1)
    {
      v11 = a1[1];
      v12 = 1;
      if (v11)
        goto LABEL_21;
      v12 = 2;
      if (a2 > 2)
      {
        v11 = a1[2];
        if (v11)
          goto LABEL_21;
        v12 = 3;
        if (a2 > 3)
        {
          v11 = a1[3];
          if (!v11)
          {
            v13 = 4;
            if (a2 > 4)
            {
              v11 = a1[4];
              if (v11)
              {
                v12 = 4;
                goto LABEL_21;
              }
              while (1)
              {
                v12 = v13 + 1;
                if (__OFADD__(v13, 1))
                {
                  __break(1u);
                  JUMPOUT(0x100852C84);
                }
                if (v12 >= a2)
                  break;
                v11 = a1[v12];
                ++v13;
                if (v11)
                  goto LABEL_21;
              }
            }
            goto LABEL_23;
          }
LABEL_21:
          v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_22:
          v14 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v10);
          Hasher.init(_seed:)(v16);
          __asm { BR              X8 }
        }
      }
    }
LABEL_23:
    swift_release(v4);
    return v8;
  }
  return (void *)v4;
}

char *sub_100852CD8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  char *result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  char *v28;
  unint64_t v29;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];

  v32 = a1;
  v7 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v34 = *((_QWORD *)v7 - 1);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a3)
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return (char *)a4;
  sub_10001A9A8(&qword_10110AAC8);
  result = (char *)static _SetStorage.allocate(capacity:)(a3);
  v10 = result;
  v31 = a2;
  if (a2 < 1)
    v12 = 0;
  else
    v12 = *v32;
  v13 = 0;
  v33 = result + 56;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v35 = v13;
      v15 = v14 | (v13 << 6);
    }
    else
    {
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_30;
      if (v16 >= v31)
      {
LABEL_27:
        swift_release();
        return v10;
      }
      v17 = v32[v16];
      v18 = v13 + 1;
      if (!v17)
      {
        v18 = v13 + 2;
        if (v13 + 2 >= v31)
          goto LABEL_27;
        v17 = v32[v18];
        if (!v17)
        {
          v18 = v13 + 3;
          if (v13 + 3 >= v31)
            goto LABEL_27;
          v17 = v32[v18];
          if (!v17)
          {
            v19 = v13 + 4;
            if (v13 + 4 >= v31)
              goto LABEL_27;
            v17 = v32[v19];
            if (!v17)
            {
              while (1)
              {
                v18 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_31;
                if (v18 >= v31)
                  goto LABEL_27;
                v17 = v32[v18];
                ++v19;
                if (v17)
                  goto LABEL_24;
              }
            }
            v18 = v13 + 4;
          }
        }
      }
LABEL_24:
      v12 = (v17 - 1) & v17;
      v35 = v18;
      v15 = __clz(__rbit64(v17)) + (v18 << 6);
    }
    v20 = a4;
    v21 = *(_QWORD *)(v34 + 72);
    sub_10005972C(*(_QWORD *)(a4 + 48) + v21 * v15, (uint64_t)v9, type metadata accessor for OwnerSharingCircle);
    Hasher.init(_seed:)(v36);
    v22 = *v9;
    v23 = v9[1];
    sub_10001BBBC(*v9, v23);
    Data.hash(into:)(v36, v22, v23);
    sub_10001BC14(v22, v23);
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v36, v24, v25);
    dispatch thunk of Hashable.hash(into:)(v36, v24, v25);
    Hasher._combine(_:)(*((unsigned __int8 *)v9 + v7[7]));
    v26 = *(uint64_t *)((char *)v9 + v7[8]);
    swift_bridgeObjectRetain(v26);
    sub_100A2FEA8((uint64_t)v36, v26);
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*((unsigned __int8 *)v9 + v7[9]));
    v27 = Hasher._finalize()();
    v28 = v33;
    v29 = _HashTable.nextHole(atOrAfter:)(v27 & ~(-1 << v10[32]), v33, ~(-1 << v10[32]));
    *(_QWORD *)&v28[(v29 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v29;
    result = (char *)sub_1000126EC((uint64_t)v9, *((_QWORD *)v10 + 6) + v29 * v21, type metadata accessor for OwnerSharingCircle);
    ++*((_QWORD *)v10 + 2);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v20;
    v13 = v35;
    if (!a3)
      goto LABEL_27;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

Swift::Int sub_10085302C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10085389C(a1, a2, a3, a4, (uint64_t *)&unk_10111C360);
}

Swift::Int sub_100853038(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD v33[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10001A9A8(&qword_10110AAD8);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v31 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v31)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v31)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v31)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (unsigned __int8 *)(*(_QWORD *)(v4 + 48) + 24 * v13);
    v18 = *v17;
    v19 = *((_QWORD *)v17 + 1);
    v20 = *((_QWORD *)v17 + 2);
    Hasher.init(_seed:)(v33);
    Hasher._combine(_:)(v18);
    swift_bridgeObjectRetain_n(v20, 2);
    String.hash(into:)(v33, v19, v20);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v21 = -1 << v8[32];
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = *((_QWORD *)v8 + 6) + 24 * v24;
    *(_BYTE *)v29 = v18;
    *(_QWORD *)(v29 + 8) = v19;
    *(_QWORD *)(v29 + 16) = v20;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v31)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v31)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1008532F4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100853318(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier, &qword_1011100B0, (unint64_t *)&unk_10111C370, (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
}

uint64_t sub_100853318(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a7;
  v44 = a8;
  v42 = a5;
  v13 = a5(0);
  v45 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - v14;
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_10001A9A8(a6);
  result = static _SetStorage.allocate(capacity:)(a3);
  v16 = result;
  v40 = a1;
  v41 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v19 << 6);
    }
    else
    {
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_40;
      if (v23 >= v41)
      {
LABEL_37:
        swift_release(a4);
        return v16;
      }
      v24 = v40[v23];
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v41)
          goto LABEL_37;
        v24 = v40[v19];
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v41)
            goto LABEL_37;
          v24 = v40[v19];
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v41)
              goto LABEL_37;
            v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v19 >= v41)
                  goto LABEL_37;
                v24 = v40[v19];
                ++v25;
                if (v24)
                  goto LABEL_24;
              }
            }
            v19 = v25;
          }
        }
      }
LABEL_24:
      v18 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }
    v26 = a4;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v15, v27 + v28 * v22, v13);
    v29 = *(_QWORD *)(v16 + 40);
    v30 = sub_100006204(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v13, v30);
    v31 = -1 << *(_BYTE *)(v16 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6))) != 0)
    {
      v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v37 = v33 == v36;
        if (v33 == v36)
          v33 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v33);
      }
      while (v38 == -1);
      v34 = __clz(__rbit64(~v38)) + (v33 << 6);
    }
    *(_QWORD *)(v20 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v16 + 48) + v34 * v28, v15, v13);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v26;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

char *sub_100853608(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100853624(a1, a2, a3, a4, type metadata accessor for RawSearchResult, (uint64_t *)&unk_10110FFF0, (void (*)(_QWORD *))sub_10096370C);
}

char *sub_100853624(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t *a6, void (*a7)(_QWORD *))
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *result;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  unint64_t v30;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *);
  _QWORD v37[9];

  v36 = a7;
  v13 = a5(0);
  v35 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - v14;
  if (!a3)
  {
    swift_release(a4);
    return (char *)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return (char *)a4;
  sub_10001A9A8(a6);
  result = (char *)static _SetStorage.allocate(capacity:)(a3);
  v16 = result;
  v33 = a1;
  v34 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v19 << 6);
    }
    else
    {
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_30;
      if (v23 >= v34)
      {
LABEL_27:
        swift_release(a4);
        return v16;
      }
      v24 = v33[v23];
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v34)
          goto LABEL_27;
        v24 = v33[v19];
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v34)
            goto LABEL_27;
          v24 = v33[v19];
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v34)
              goto LABEL_27;
            v24 = v33[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_31;
                if (v19 >= v34)
                  goto LABEL_27;
                v24 = v33[v19];
                ++v25;
                if (v24)
                  goto LABEL_24;
              }
            }
            v19 = v25;
          }
        }
      }
LABEL_24:
      v18 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }
    v26 = a4;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = *(_QWORD *)(v35 + 72);
    sub_10005972C(v27 + v28 * v22, (uint64_t)v15, a5);
    Hasher.init(_seed:)(v37);
    v36(v37);
    v29 = Hasher._finalize()();
    v30 = _HashTable.nextHole(atOrAfter:)(v29 & ~(-1 << v16[32]), v16 + 56, ~(-1 << v16[32]));
    *(_QWORD *)&v20[(v30 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v30;
    result = (char *)sub_1000126EC((uint64_t)v15, *((_QWORD *)v16 + 6) + v30 * v28, a5);
    ++*((_QWORD *)v16 + 2);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v26;
    if (!a3)
      goto LABEL_27;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

Swift::Int sub_100853890(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10085389C(a1, a2, a3, a4, (uint64_t *)&unk_1011100E0);
}

Swift::Int sub_10085389C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;

  v5 = a4;
  if (!a3)
  {
    v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (Swift::Int)v10;
  }
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v5;
  sub_10001A9A8(a5);
  result = static _SetStorage.allocate(capacity:)(v6);
  v10 = (_QWORD *)result;
  v30 = a1;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = v30[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = v30[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = v10[5];
    v20 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *((_BYTE *)v10 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_QWORD *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = v30[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = v30[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100853AF4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  Swift::Int result;
  unint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[9];

  v8 = type metadata accessor for BeaconIdentifier(0);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_10001A9A8(&qword_10110A900);
  result = static _SetStorage.allocate(capacity:)(a3);
  v11 = result;
  v36 = a1;
  v37 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *a1;
  v14 = 0;
  v15 = result + 56;
  v38 = a4;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v41 = v14;
      v17 = v16 | (v14 << 6);
    }
    else
    {
      v18 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v18 >= v37)
      {
LABEL_37:
        swift_release();
        return v11;
      }
      v19 = v36[v18];
      v20 = v14 + 1;
      if (!v19)
      {
        v20 = v14 + 2;
        if (v14 + 2 >= v37)
          goto LABEL_37;
        v19 = v36[v20];
        if (!v19)
        {
          v20 = v14 + 3;
          if (v14 + 3 >= v37)
            goto LABEL_37;
          v19 = v36[v20];
          if (!v19)
          {
            v21 = v14 + 4;
            if (v14 + 4 >= v37)
              goto LABEL_37;
            v19 = v36[v21];
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v20 >= v37)
                  goto LABEL_37;
                v19 = v36[v20];
                ++v21;
                if (v19)
                  goto LABEL_24;
              }
            }
            v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      v13 = (v19 - 1) & v19;
      v41 = v20;
      v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    v22 = *(_QWORD *)(a4 + 48);
    v23 = *(_QWORD *)(v39 + 72);
    sub_10005972C(v22 + v23 * v17, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
    Hasher.init(_seed:)(v42);
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v42, v24, v25);
    dispatch thunk of Hashable.hash(into:)(v42, v24, v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v11 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v15 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    result = sub_1000126EC((uint64_t)v10, *(_QWORD *)(v11 + 48) + v29 * v23, type metadata accessor for BeaconIdentifier);
    ++*(_QWORD *)(v11 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v38;
    v14 = v41;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100853E3C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100853E54(a1, a2, a3, a4, &qword_1010FA240);
}

Swift::Int sub_100853E48(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100853E54(a1, a2, a3, a4, &qword_101110080);
}

Swift::Int sub_100853E54(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;
  uint64_t v30[9];

  v5 = a4;
  if (!a3)
  {
    v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (Swift::Int)v10;
  }
  v6 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v5;
  sub_10001A9A8(a5);
  result = static _SetStorage.allocate(capacity:)(v6);
  v10 = (_BYTE *)result;
  v29 = a1;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = v29[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = v29[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = v29[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v15);
    Hasher.init(_seed:)(v30);
    Hasher._combine(_:)(v19);
    result = Hasher._finalize()();
    v20 = -1 << v10[32];
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_BYTE *)(*((_QWORD *)v10 + 6) + v23) = v19;
    ++*((_QWORD *)v10 + 2);
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = v29[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = v29[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1008540B8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  __int128 v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29[9];

  v4 = a4;
  if (!a3)
  {
    v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v10;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10001A9A8(&qword_10110AAB8);
  result = static _SetStorage.allocate(capacity:)(v5);
  v10 = (_BYTE *)result;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = *a1;
  v12 = 0;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_39;
    if (v16 >= a2)
      goto LABEL_36;
    v17 = a1[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= a2)
        goto LABEL_36;
      v17 = a1[v12];
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= a2)
          goto LABEL_36;
        v17 = a1[v12];
        if (!v17)
          break;
      }
    }
LABEL_23:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    *(_QWORD *)&v9 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15);
    v28 = v9;
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(v28);
    Hasher._combine(_:)(DWORD1(v28));
    result = Hasher._finalize()();
    v19 = -1 << v10[32];
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v13 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v13 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v13 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v13 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *((_QWORD *)&v9 + 1) = *((_QWORD *)&v28 + 1);
    *(_QWORD *)(*((_QWORD *)v10 + 6) + 8 * v22) = v28;
    ++*((_QWORD *)v10 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v18 = v16 + 3;
  if (v18 >= a2)
    goto LABEL_36;
  v17 = a1[v18];
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= a2)
      goto LABEL_36;
    v17 = a1[v12];
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100854334(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(char *);
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  v6 = *(_BYTE *)(a3 + 32);
  v7 = v6 & 0x3F;
  v8 = (1 << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    v11 = sub_1008544B0((unint64_t *)((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a3, v5);
    v12 = swift_release(a3);
    if (v3)
      swift_willThrow(v12);
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v10, -1);
    bzero(v13, v10);
    v11 = sub_1008544B0((unint64_t *)v13, v9, a3, v5);
    swift_release(a3);
    swift_slowDealloc(v13, -1, -1);
  }
  return v11;
}

uint64_t sub_1008544B0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t (*v31)(char *);
  uint64_t v32;

  v31 = a4;
  v26 = a2;
  v27 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v32 = a3;
  v12 = *(_QWORD *)(a3 + 56);
  v28 = 0;
  v29 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v30 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v11 << 6);
LABEL_17:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v7 + 72) * v17, v6);
    v21 = v31(v10);
    if (v4)
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v22 = v21;
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v22 & 1) != 0)
    {
      *(unint64_t *)((char *)v27 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = __OFADD__(v28++, 1);
      if (v18)
        goto LABEL_30;
    }
  }
  v18 = __OFADD__(v11++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v30)
    goto LABEL_27;
  v19 = *(_QWORD *)(v29 + 8 * v11);
  if (v19)
  {
LABEL_16:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_17;
  }
  v20 = v11 + 1;
  if (v11 + 1 >= v30)
    goto LABEL_27;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 2;
  if (v11 + 2 >= v30)
    goto LABEL_27;
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 3;
  if (v11 + 3 >= v30)
  {
LABEL_27:
    v23 = v26;
    v24 = v28;
    v25 = v32;
    swift_retain();
    return sub_100853318(v27, v23, v24, v25, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010FA238, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v11 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v30)
      goto LABEL_27;
    v19 = *(_QWORD *)(v29 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100854738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  BOOL v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for StableIdentifier(0);
  v38 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v37 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v36 = (uint64_t)&v32 - v7;
  sub_10001A9A8(&qword_10110AB08);
  v8 = static _DictionaryStorage.copy(original:)(a1);
  v9 = (_QWORD *)v8;
  v10 = 0;
  v39 = a1;
  v13 = *(_QWORD *)(a1 + 64);
  v12 = a1 + 64;
  v11 = v13;
  v14 = 1 << *(_BYTE *)(v12 - 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v33 = v12;
  v34 = (unint64_t)(v14 + 63) >> 6;
  v35 = v8 + 64;
  if ((v15 & v11) == 0)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v17 | (v10 << 6); ; i = __clz(__rbit64(v20)) + (v10 << 6))
  {
    v22 = v39;
    v23 = *(_QWORD *)(v38 + 72) * i;
    v24 = v36;
    sub_10005972C(*(_QWORD *)(v39 + 48) + v23, v36, type metadata accessor for StableIdentifier);
    v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * i);
    v26 = v24;
    v27 = v37;
    sub_1000126EC(v26, v37, type metadata accessor for StableIdentifier);
    v40 = v25;
    swift_bridgeObjectRetain_n(v25, 2);
    sub_1007F76C8(&v40);
    if (v2)
      break;
    v2 = 0;
    swift_bridgeObjectRelease();
    v28 = v40;
    *(_QWORD *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    sub_1000126EC(v27, v9[6] + v23, type metadata accessor for StableIdentifier);
    *(_QWORD *)(v9[7] + 8 * i) = v28;
    v29 = v9[2];
    v19 = __OFADD__(v29, 1);
    v30 = v29 + 1;
    if (v19)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      break;
    }
    v9[2] = v30;
    if (v16)
      goto LABEL_4;
LABEL_5:
    v19 = __OFADD__(v10++, 1);
    if (v19)
      goto LABEL_26;
    if (v10 >= v34)
      return (uint64_t)v9;
    v20 = *(_QWORD *)(v33 + 8 * v10);
    if (!v20)
    {
      v21 = v10 + 1;
      if (v10 + 1 >= v34)
        return (uint64_t)v9;
      v20 = *(_QWORD *)(v33 + 8 * v21);
      if (!v20)
      {
        v21 = v10 + 2;
        if (v10 + 2 >= v34)
          return (uint64_t)v9;
        v20 = *(_QWORD *)(v33 + 8 * v21);
        if (!v20)
        {
          v21 = v10 + 3;
          if (v10 + 3 >= v34)
            return (uint64_t)v9;
          v20 = *(_QWORD *)(v33 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              v10 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_27;
              if (v10 >= v34)
                return (uint64_t)v9;
              v20 = *(_QWORD *)(v33 + 8 * v10);
              ++v21;
              if (v20)
                goto LABEL_15;
            }
          }
        }
      }
      v10 = v21;
    }
LABEL_15:
    v16 = (v20 - 1) & v20;
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1008549F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v2 = type metadata accessor for StableIdentifier(0);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_10110AB80);
  result = static _DictionaryStorage.copy(original:)(a1);
  v5 = (_QWORD *)result;
  v6 = 0;
  v31 = a1;
  v9 = *(_QWORD *)(a1 + 64);
  v8 = a1 + 64;
  v7 = v9;
  v10 = 1 << *(_BYTE *)(v8 - 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v7;
  v26 = v8;
  v27 = (unint64_t)(v10 + 63) >> 6;
  v28 = result + 64;
  v13 = (uint64_t)v29;
  if ((v11 & v7) == 0)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v6 << 6); ; i = __clz(__rbit64(v17)) + (v6 << 6))
  {
    v19 = v31;
    v20 = *(_QWORD *)(v30 + 72) * i;
    sub_10005972C(*(_QWORD *)(v31 + 48) + v20, v13, type metadata accessor for StableIdentifier);
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * i) + 16);
    *(_QWORD *)(v28 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = sub_1000126EC(v13, v5[6] + v20, type metadata accessor for StableIdentifier);
    *(_QWORD *)(v5[7] + 8 * i) = v21;
    v22 = v5[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v5[2] = v24;
    if (v12)
      goto LABEL_4;
LABEL_5:
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_24;
    if (v16 >= v27)
      return (uint64_t)v5;
    v17 = *(_QWORD *)(v26 + 8 * v16);
    ++v6;
    if (!v17)
    {
      v6 = v16 + 1;
      if (v16 + 1 >= v27)
        return (uint64_t)v5;
      v17 = *(_QWORD *)(v26 + 8 * v6);
      if (!v17)
      {
        v6 = v16 + 2;
        if (v16 + 2 >= v27)
          return (uint64_t)v5;
        v17 = *(_QWORD *)(v26 + 8 * v6);
        if (!v17)
          break;
      }
    }
LABEL_18:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v27)
    return (uint64_t)v5;
  v17 = *(_QWORD *)(v26 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v6 >= v27)
      return (uint64_t)v5;
    v17 = *(_QWORD *)(v26 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100854C50(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, int a7)
{
  return sub_10080F340(*a1, a2, a3, a4, a5, a6, a7, type metadata accessor for OwnedBeaconGroup, &qword_10110A960, (uint64_t)&unk_100E3AC0C);
}

uint64_t *sub_100854C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int128 v85;
  unint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  Class isa;
  NSString v94;
  Class v95;
  NSString v96;
  Class v97;
  char *v98;
  Class v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  _QWORD *v110;
  id v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  _QWORD *v132;
  Class v133;
  id v134;
  double v135;
  double v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  void *v160;
  void *v161;
  id v162;
  Class v163;
  id v164;
  uint64_t v165;
  void *v166;
  Class v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  char *v173;
  Class v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  Class v180;
  char *v181;
  uint64_t v182;
  id v183;
  char *v184;
  Class v185;
  uint64_t v186;
  uint64_t v187;
  Class v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  id v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  void (*v208)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  NSString v238;
  void *v239;
  void *v240;
  id v241;
  uint64_t v242;
  id v243;
  NSString v244;
  NSString v245;
  id v246;
  NSString v247;
  uint64_t v248;
  uint64_t v249;
  NSString v250;
  uint64_t v251;
  void *v252;
  void *v253;
  uint64_t v254;
  id v255;
  id v256;
  NSString v257;
  NSString v258;
  id v259;
  uint64_t v260;
  int *v261;
  uint64_t v262;
  int v263;
  void (*v264)(uint64_t, uint64_t, uint64_t, int *);
  NSString v265;
  uint64_t v266;
  Class v267;
  uint64_t v268;
  uint64_t v269;
  int *v270;
  char v271;
  void (*v272)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v273;
  int *v274;
  NSString v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  char v279;
  void *v280;
  NSString v281;
  Class v282;
  uint64_t v283;
  uint64_t v284;
  NSString v285;
  void (*v286)(char *, uint64_t);
  NSString v287;
  void (*v288)(char *, uint64_t);
  uint64_t (*v289)(uint64_t);
  uint64_t v290;
  uint64_t v291;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  _BYTE *v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  char *v335;
  char *v336;
  char *v337;
  uint64_t (*v338)(uint64_t, uint64_t);
  uint64_t v339;
  uint64_t (*v340)(uint64_t, uint64_t);
  uint64_t v341;
  uint64_t v342;
  void (*v343)(uint64_t, uint64_t);
  char *v344;
  _QWORD *v345;
  id v346;
  void (*v347)(char *, uint64_t);
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  _QWORD *i;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  _QWORD v368[5];

  v342 = a2;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  __chkstk_darwin(v7);
  v296 = (uint64_t)&v293 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v9);
  v304 = (char *)&v293 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v305 = type metadata accessor for SharedBeaconRecord(0);
  v302 = *(_QWORD *)(v305 - 8);
  __chkstk_darwin(v305);
  v306 = (uint64_t)&v293 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010ED860);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v293 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v303 = (uint64_t)&v293 - v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v17);
  v324 = (char *)&v293 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v325 = type metadata accessor for OwnedBeaconRecord(0);
  v323 = *(_QWORD *)(v325 - 8);
  __chkstk_darwin(v325);
  v326 = (char *)&v293 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v320 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v320);
  v321 = (char *)&v293 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v322 = type metadata accessor for BeaconNamingRecord(0);
  v319 = *(_QWORD *)(v322 - 8);
  __chkstk_darwin(v322);
  v332 = (uint64_t)&v293 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v22);
  v318 = (char *)&v293 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_10110EEB0);
  v25 = __chkstk_darwin(v24);
  v301 = (uint64_t)&v293 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v309 = (uint64_t)&v293 - v27;
  v28 = type metadata accessor for BeaconProductInfoRecord(0);
  v311 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v295 = (uint64_t)&v293 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v298 = (uint64_t)&v293 - v31;
  v32 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v32);
  v317 = (uint64_t)&v293 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = type metadata accessor for KeyAlignmentRecord(0);
  v316 = *(_QWORD *)(v310 - 8);
  __chkstk_darwin(v310);
  v300 = (uint64_t)&v293 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v35);
  v314 = (uint64_t)&v293 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = type metadata accessor for KeySyncRecord(0);
  v313 = *(_QWORD *)(v315 - 8);
  __chkstk_darwin(v315);
  v299 = (uint64_t)&v293 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v356 = type metadata accessor for LocationProvider(0);
  v355 = *(_QWORD *)(v356 - 8);
  v38 = __chkstk_darwin(v356);
  v349 = (uint64_t)&v293 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v41 = (char *)&v293 - v40;
  v42 = sub_10001A9A8((uint64_t *)&unk_1010F47E0);
  v43 = __chkstk_darwin(v42);
  v350 = (uint64_t)&v293 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v352 = (uint64_t)&v293 - v45;
  v331 = sub_10001A9A8((uint64_t *)&unk_1011002E0);
  v46 = __chkstk_darwin(v331);
  v330 = (char *)&v293 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v336 = (char *)&v293 - v48;
  v49 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v49);
  v307 = (char *)&v293 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v51);
  v328 = (uint64_t)&v293 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v351 = type metadata accessor for Date(0);
  i = *(_QWORD **)(v351 - 8);
  v53 = __chkstk_darwin(v351);
  v353 = (char *)&v293 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __chkstk_darwin(v53);
  v337 = (char *)&v293 - v56;
  __chkstk_darwin(v55);
  v335 = (char *)&v293 - v57;
  v348 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v348 - 8);
  v59 = __chkstk_darwin(v348);
  v329 = (char *)&v293 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __chkstk_darwin(v59);
  v327 = (uint64_t)&v293 - v62;
  v63 = __chkstk_darwin(v61);
  v344 = (char *)&v293 - v64;
  __chkstk_darwin(v63);
  v66 = (char *)&v293 - v65;
  v368[3] = a3;
  v368[4] = a4;
  v67 = sub_100018F08(v368);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v67, a1, a3);
  v346 = objc_msgSend(objc_allocWithZone((Class)SPBeacon), "init");
  v338 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
  v68 = v338(a3, a4);
  v69 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 56);
  v345 = v67;
  v341 = a3;
  v339 = a4;
  v340 = v69;
  v70 = v69(a3, a4);
  v71 = sub_1001EE37C(v68, v70);
  v333 = v66;
  v297 = v15;
  v312 = v28;
  if (v72 >> 60 == 15)
  {
    v73 = v58;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v74 = type metadata accessor for Logger(0);
    sub_10001A9E8(v74, (uint64_t)qword_1011B77E8);
    sub_100030784((uint64_t)v368, (uint64_t)&v358);
    v75 = sub_100030784((uint64_t)v368, (uint64_t)&v366);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v78 = swift_slowAlloc(22, -1);
      *(_DWORD *)v78 = 134218240;
      sub_10001AA44(&v358, v360);
      v79 = v341;
      v80 = v339;
      v81 = v338(v341, v339);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v358);
      v357 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, &v358, v78 + 4, v78 + 12);
      *(_WORD *)(v78 + 12) = 2048;
      sub_10001AA44(&v366, v367);
      v82 = v340(v79, v80);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v366);
      *(_QWORD *)&v358 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v358, (char *)&v358 + 8, v78 + 14, v78 + 22);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unable to create AccessoryProductData from %ld/%ld", (uint8_t *)v78, 0x16u);
      swift_slowDealloc(v78, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v366);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v358);
    }

    v87 = v346;
    UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
    v88 = v73;
  }
  else
  {
    v83 = v71;
    v84 = v72;
    if (qword_1010E9A18 != -1)
      swift_once(&qword_1010E9A18, sub_1001EE150);
    v358 = xmmword_1010F2B08;
    sub_10001BBBC(xmmword_1010F2B08, *((unint64_t *)&xmmword_1010F2B08 + 1));
    Data.append(_:)(v83, v84);
    v85 = v358;
    v366 = v358;
    v86 = sub_100035530();
    DataProtocol.stableUUID.getter(&type metadata for Data, v86);
    sub_10001BC14(v85, *((unint64_t *)&v85 + 1));
    sub_10001EF3C(v83, v84);
    v87 = v346;
    v88 = v58;
  }
  v89 = v339;
  v90 = *(_QWORD *)(*(_QWORD *)(v339 + 8) + 8);
  v343 = *(void (**)(uint64_t, uint64_t))(v90 + 32);
  v91 = v344;
  v92 = v341;
  v343(v341, v90);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v308 = v88;
  v347 = *(void (**)(char *, uint64_t))(v88 + 8);
  v347(v91, v348);
  objc_msgSend(v87, "setIdentifier:", isa);

  (*(void (**)(uint64_t, uint64_t))(v89 + 16))(v92, v89);
  v94 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v87, "setModel:", v94);

  sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
  sub_10001AC90((unint64_t *)&unk_1010EE150, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr, (const char *)&protocol conformance descriptor for NSObject);
  v95 = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v87, "setShares:", v95);

  (*(void (**)(uint64_t, uint64_t))(v89 + 24))(v92, v89);
  v96 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v87, "setSystemVersion:", v96);

  v97 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v87, "setProductUUID:", v97);

  objc_msgSend(v87, "setVendorId:", v338(v92, v89));
  objc_msgSend(v87, "setProductId:", v340(v92, v89));
  v98 = v335;
  (*(void (**)(uint64_t, uint64_t))(v89 + 184))(v92, v89);
  v99 = Date._bridgeToObjectiveC()().super.isa;
  v100 = v351;
  v338 = (uint64_t (*)(uint64_t, uint64_t))i[1];
  v338((uint64_t)v98, v351);
  objc_msgSend(v87, "setPairingDate:", v99);

  v101 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v89 + 176))(v92, v89);
  objc_msgSend(v87, "setType:", v101);

  v102 = v327;
  v340 = (uint64_t (*)(uint64_t, uint64_t))v90;
  v343(v92, v90);
  v334 = *(_QWORD *)(v342 + 160);
  v103 = sub_100889F60(v102);
  v104 = v103[2];
  v105 = (int *)type metadata accessor for LostModeRecord(0);
  v106 = *((_QWORD *)v105 - 1);
  if (v104)
  {
    v107 = v328;
    sub_10005972C((uint64_t)v103 + ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80)), v328, type metadata accessor for LostModeRecord);
    v108 = 0;
  }
  else
  {
    v108 = 1;
    v107 = v328;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v106 + 56))(v107, v108, 1, v105);
  swift_bridgeObjectRelease();
  v347((char *)v102, v348);
  v109 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v106 + 48))(v107, 1, v105);
  v110 = i;
  if (v109 == 1)
  {
    sub_100004048(v107, (uint64_t *)&unk_1010F47F0);
    v111 = 0;
  }
  else
  {
    v112 = (uint64_t *)(v107 + v105[9]);
    v113 = v112[1];
    v328 = *v112;
    v114 = v105[8];
    v115 = (uint64_t *)(v107 + v105[7]);
    v116 = v115[1];
    v294 = *v115;
    v117 = *(_QWORD *)(v107 + v114 + 8);
    v327 = *(_QWORD *)(v107 + v114);
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v116);
    v118 = objc_autoreleasePoolPush();
    v119 = (uint64_t)v307;
    sub_10084EE24(v107);
    objc_autoreleasePoolPop(v118);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v110[7])(v119, 0, 1, v100);
    v120 = objc_allocWithZone((Class)SPLostModeInfo);
    v121 = v116;
    v92 = v341;
    v111 = sub_10084F34C(v328, v113, v294, v121, v327, v117, v119);
    sub_1000126B0(v107, type metadata accessor for LostModeRecord);
  }
  v122 = (uint64_t)v329;
  objc_msgSend(v346, "setLostModeInfo:", v111);

  v343(v92, (uint64_t)v340);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v123 = qword_1011B7160;
  v124 = objc_autoreleasePoolPush();
  sub_10058DC14(v123, v122, 0, 0, &v358);
  v125 = v331;
  v126 = v336;
  v127 = (uint64_t)&v336[*(int *)(v331 + 48)];
  objc_autoreleasePoolPop(v124);
  LOBYTE(v124) = sub_10082B1AC(v127, v122, v358, 1);
  swift_bridgeObjectRelease();
  v347((char *)v122, v348);
  v128 = v124 & 1;
  *v126 = v124 & 1;
  objc_msgSend(v346, "setConnected:", v124 & 1);
  v129 = *(int *)(v125 + 48);
  v130 = v330;
  v131 = &v330[v129];
  *v330 = v128;
  sub_10000F9B8(v127, (uint64_t)&v130[v129], (uint64_t *)&unk_1010EA690);
  v132 = i;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))i[6])(v131, 1, v100) == 1)
  {
    v133 = 0;
  }
  else
  {
    v133 = Date._bridgeToObjectiveC()().super.isa;
    v338((uint64_t)v131, v100);
  }
  v134 = v346;
  objc_msgSend(v346, "setConnectedStateExpiryDate:", v133);

  objc_msgSend(v134, "setIsAppleAudioAccessory:", (*(uint64_t (**)(uint64_t))(v339 + 120))(v92) & 1);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v331 = 0;
  sub_100C1B7A4(v358);
  v136 = v135;
  v137 = swift_bridgeObjectRelease();
  v138 = v337;
  Date.init(timeIntervalSinceNow:)(v137, -v136);
  v139 = (uint64_t)v344;
  v343(v92, (uint64_t)v340);
  v140 = sub_10088B3D0(v139);
  v347((char *)v139, v348);
  ((void (*)(char *, char *, uint64_t))v132[2])(v353, v138, v100);
  v141 = sub_10000F4A0(0, &qword_1010F4810, SPLocationProvider_ptr);
  v142 = sub_10001AC90(&qword_1010F4818, &qword_1010F4810, SPLocationProvider_ptr, (const char *)&protocol conformance descriptor for NSObject);
  swift_bridgeObjectRetain(v140);
  v330 = (_BYTE *)v141;
  v329 = (char *)v142;
  v143 = 0;
  *(_QWORD *)&v358 = Set.init(minimumCapacity:)(0);
  v144 = v140;
  v145 = v140[2];
  v146 = &qword_1010F4820;
  for (i = v140; ; v144 = i)
  {
    v147 = v356;
    v148 = v350;
    if (v143 != v145)
    {
      while (v143 < v144[2])
      {
        v149 = v143 + 1;
        sub_10005972C((uint64_t)v144+ ((*(unsigned __int8 *)(v355 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v355 + 80))+ *(_QWORD *)(v355 + 72) * v143, (uint64_t)v41, type metadata accessor for LocationProvider);
        v150 = &v41[*(int *)(v147 + 28)];
        v151 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        if ((dispatch thunk of static Comparable.< infix(_:_:)(v150, v353, v100, v151) & 1) == 0)
        {
          sub_1000126EC((uint64_t)v41, v352, type metadata accessor for LocationProvider);
          v152 = 0;
          ++v143;
          v147 = v356;
          goto LABEL_31;
        }
        sub_1000126B0((uint64_t)v41, type metadata accessor for LocationProvider);
        ++v143;
        v144 = i;
        v147 = v356;
        if (v145 == v149)
          goto LABEL_29;
      }
      __break(1u);
      goto LABEL_87;
    }
LABEL_29:
    v152 = 1;
    v143 = v145;
LABEL_31:
    v153 = v355;
    v154 = v352;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v355 + 56))(v352, v152, 1, v147);
    sub_100005CF0(v154, v148, (uint64_t *)&unk_1010F47E0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v148, 1, v147) == 1)
      break;
    v155 = v148;
    v156 = v41;
    v157 = v349;
    sub_1000126EC(v155, v349, type metadata accessor for LocationProvider);
    v158 = sub_1008A4DC4(*(unsigned __int8 *)(v157 + *(int *)(v147 + 24)), *(_QWORD *)(v157 + *(int *)(v147 + 24) + 8), *(void **)(v157 + *(int *)(v147 + 24) + 16));
    v161 = (void *)sub_100ACD7B4(v158, v159, v160);
    swift_bridgeObjectRelease();
    v162 = objc_allocWithZone((Class)SPLocationProvider);
    v163 = Date._bridgeToObjectiveC()().super.isa;
    v164 = objc_msgSend(v162, "initWithTimestamp:provider:", v163, v161);

    v165 = v157;
    v41 = v156;
    sub_1000126B0(v165, type metadata accessor for LocationProvider);
    v166 = v164;
    v100 = v351;
    sub_100A0C424((Swift::Int *)&v366, v166);

  }
  swift_bridgeObjectRelease();
  v167 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v168 = v346;
  objc_msgSend(v346, "setLocationProviders:", v167);

  v169 = (uint64_t)v344;
  v343(v341, (uint64_t)v340);
  v170 = v314;
  sub_10081AECC(v169, v314);
  v347((char *)v169, v348);
  v171 = v315;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v313 + 48))(v170, 1, v315) == 1)
  {
    sub_100004048(v170, &qword_1010F7AE0);
    v172 = objc_msgSend(v168, "setKeySyncLastObservedIndex:", 0);
    v173 = v335;
    static Date.distantPast.getter(v172);
    v174 = Date._bridgeToObjectiveC()().super.isa;
    v100 = v351;
    v338((uint64_t)v173, v351);
    objc_msgSend(v168, "setKeySyncLastIndexObservationDate:", v174);

    objc_msgSend(v168, "setKeySyncWildIndexFallback:", 0);
    v175 = v312;
    v176 = v311;
    v177 = v310;
  }
  else
  {
    v178 = v170;
    v179 = v299;
    sub_1000126EC(v178, v299, type metadata accessor for KeySyncRecord);
    objc_msgSend(v168, "setKeySyncLastObservedIndex:", *(_QWORD *)(v179 + *(int *)(v171 + 20)));
    v180 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v168, "setKeySyncLastIndexObservationDate:", v180);

    objc_msgSend(v168, "setKeySyncWildIndexFallback:", *(_QWORD *)(v179 + *(int *)(v171 + 40)));
    sub_1000126B0(v179, type metadata accessor for KeySyncRecord);
    v175 = v312;
    v176 = v311;
    v177 = v310;
    v100 = v351;
  }
  v181 = v344;
  v343(v341, (uint64_t)v340);
  v182 = v317;
  sub_1008892B4(v317);
  v347(v181, v348);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v316 + 48))(v182, 1, v177) == 1)
  {
    sub_100004048(v182, (uint64_t *)&unk_1010F47D0);
    v183 = objc_msgSend(v168, "setKeyAlignmentLastObservedIndex:", 0);
    v184 = v335;
    static Date.distantPast.getter(v183);
    v185 = Date._bridgeToObjectiveC()().super.isa;
    v338((uint64_t)v184, v100);
    objc_msgSend(v168, "setKeyAlignmentLastIndexObservationDate:", v185);

  }
  else
  {
    v186 = v182;
    v187 = v300;
    sub_1000126EC(v186, v300, type metadata accessor for KeyAlignmentRecord);
    objc_msgSend(v168, "setKeyAlignmentLastObservedIndex:", *(_QWORD *)(v187 + *(int *)(v177 + 28)));
    v188 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v168, "setKeyAlignmentLastIndexObservationDate:", v188);

    sub_1000126B0(v187, type metadata accessor for KeyAlignmentRecord);
  }
  v189 = objc_msgSend(v168, "type");
  v190 = SPBeaconTypeAccessory;
  v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
  v193 = v192;
  v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
  if (v191 == v195 && v193 == v194)
  {
LABEL_41:

    swift_bridgeObjectRelease_n(v193, 2);
    goto LABEL_43;
  }
  v196 = _stringCompareWithSmolCheck(_:_:expecting:)(v191, v193, v195, v194, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v196 & 1) != 0)
    goto LABEL_43;
  v189 = objc_msgSend(v346, "type");
  v212 = SPBeaconTypeHele;
  v213 = static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
  v193 = v214;
  v216 = static String._unconditionallyBridgeFromObjectiveC(_:)(v212);
  if (v213 == v216 && v193 == v215)
    goto LABEL_41;
  v217 = _stringCompareWithSmolCheck(_:_:expecting:)(v213, v193, v216, v215, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v217 & 1) != 0)
  {
LABEL_43:
    v197 = v346;
    v198 = objc_msgSend(v346, "identifier");
    v199 = (uint64_t)v344;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v198);

    v200 = v309;
    sub_10081BB64(v199, v309);
    v347((char *)v199, v348);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v200, 1, v175) == 1)
    {
      sub_100004048(v200, &qword_10110EEB0);
    }
    else
    {
      v201 = v200;
      v202 = v298;
      sub_1000126EC(v201, v298, type metadata accessor for BeaconProductInfoRecord);
      v203 = sub_100603CFC();
      objc_msgSend(v197, "setAccessoryProductInfo:", v203);

      sub_1000126B0(v202, type metadata accessor for BeaconProductInfoRecord);
    }
  }
  sub_100030784((uint64_t)v368, (uint64_t)&v358);
  v204 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v205 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v206 = (uint64_t)v318;
  v356 = v204;
  v207 = swift_dynamicCast(v318, &v358, v204, v205, 6);
  v208 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v205 - 8) + 56);
  if (v207)
  {
    v208(v206, 0, 1, v205);
    sub_100004048(v206, (uint64_t *)&unk_1010EDC50);
    v146 = (uint64_t *)v346;
    v209 = objc_msgSend(v346, "identifier");
    v210 = (uint64_t)v344;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v209);

    v211 = v301;
    sub_10081BB64(v210, v301);
    v347((char *)v210, v348);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v211, 1, v175) == 1)
    {
      sub_100004048(v211, &qword_10110EEB0);
    }
    else
    {
      v218 = v211;
      v219 = v295;
      sub_1000126EC(v218, v295, type metadata accessor for BeaconProductInfoRecord);
      v220 = sub_100603CFC();
      objc_msgSend(v146, "setAccessoryProductInfo:", v220);

      sub_1000126B0(v219, type metadata accessor for BeaconProductInfoRecord);
    }
  }
  else
  {
    v208(v206, 1, 1, v205);
    sub_100004048(v206, (uint64_t *)&unk_1010EDC50);
    v146 = (uint64_t *)v346;
  }
  v221 = v344;
  v222 = v341;
  v223 = ((uint64_t (*)(uint64_t, _QWORD))v343)(v341, v340);
  v224 = v342;
  __chkstk_darwin(v223);
  v225 = v321;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029183C);
  v226 = (uint64_t)v225;
  v148 = v348;
  v347(v221, v348);
  v227 = v322;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v319 + 48))(v226, 1, v322) == 1)
  {
    sub_100004048(v226, (uint64_t *)&unk_101105880);
    sub_100030784((uint64_t)v368, (uint64_t)&v366);
    v228 = swift_allocObject(&unk_1010944E8, 64, 7);
    *(_QWORD *)(v228 + 16) = v224;
    sub_10000F9FC(&v366, v228 + 24);
    swift_retain();
    v229 = sub_10001A9A8((uint64_t *)&unk_1010F4830);
    unsafeFromAsyncTask<A>(_:)(&v358, &unk_1010F4828, v228, v229);
    swift_release();
    v230 = *((_QWORD *)&v358 + 1);
    v231 = v356;
    if (*((_QWORD *)&v358 + 1))
    {
      v232 = v359;
      v355 = v360;
      v233 = v146;
      v234 = v361;
      v352 = v362;
      v236 = v363;
      v235 = v364;
      v237 = v365;
      v350 = v358;
      v238 = String._bridgeToObjectiveC()();
      objc_msgSend(v233, "setName:", v238);

      v239 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v339 + 200))(v232, v341);
      v240 = v239;
      v145 = (unint64_t)v333;
      if (v232 == SPBeaconRoleIdOther && v234 && v239)
      {
        v241 = objc_msgSend(v239, "role", swift_bridgeObjectRetain(v234).n128_f64[0]);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v241);
        v242 = v235;
        v349 = v236;

        v243 = objc_allocWithZone((Class)SPBeaconRole);
        v244 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v245 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v246 = objc_msgSend(v243, "initWithRoleId:role:roleEmoji:", v232, v244, v245);

        v235 = v242;
        v236 = v349;
        v145 = (unint64_t)v333;
        objc_msgSend(v346, "setRole:", v246);

        if (v237)
          goto LABEL_61;
LABEL_70:
        sub_10007CB98(v350, v230, v232, v355, v234, v352, v236, v235, 0);
        v247 = 0;
      }
      else
      {
        objc_msgSend(v346, "setRole:", v239);
        if (!v237)
          goto LABEL_70;
LABEL_61:
        swift_bridgeObjectRetain(v237);
        v247 = String._bridgeToObjectiveC()();
        sub_10007CB98(v350, v230, v232, v355, v234, v352, v236, v235, v237);
        swift_bridgeObjectRelease();
      }
      v148 = v348;
      v143 = (unint64_t)v336;
      v146 = (uint64_t *)v346;
      objc_msgSend(v346, "setSerialNumber:", v247);

      v100 = v351;
      v260 = (uint64_t)v326;
      v261 = (int *)v325;
    }
    else
    {
      v260 = (uint64_t)v326;
      v261 = (int *)v325;
      v143 = (unint64_t)v336;
      v145 = (unint64_t)v333;
    }
  }
  else
  {
    v248 = v332;
    sub_1000126EC(v226, v332, type metadata accessor for BeaconNamingRecord);
    v249 = v227;
    swift_bridgeObjectRetain(*(_QWORD *)(v248 + *(int *)(v227 + 32) + 8));
    v250 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v146, "setName:", v250);

    v251 = *(_QWORD *)(v248 + *(int *)(v249 + 28));
    v252 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v339 + 200))(v251, v222);
    v253 = v252;
    v143 = (unint64_t)v336;
    if (v251 == SPBeaconRoleIdOther && (v254 = v332 + *(int *)(v249 + 36), *(_QWORD *)(v254 + 8)) && v252)
    {
      v255 = objc_msgSend(v252, "role", swift_bridgeObjectRetain(*(_QWORD *)(v254 + 8)).n128_f64[0]);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v255);

      v256 = objc_allocWithZone((Class)SPBeaconRole);
      v257 = String._bridgeToObjectiveC()();
      v100 = v351;
      swift_bridgeObjectRelease();
      v258 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v259 = objc_msgSend(v256, "initWithRoleId:role:roleEmoji:", v251, v257, v258);

      v148 = v348;
      v145 = (unint64_t)v333;

      v146 = (uint64_t *)v346;
      objc_msgSend(v346, "setRole:", v259);

      v253 = v259;
      v260 = (uint64_t)v326;
      v261 = (int *)v325;
    }
    else
    {
      objc_msgSend(v146, "setRole:", v252);
      v260 = (uint64_t)v326;
      v261 = (int *)v325;
      v145 = (unint64_t)v333;
    }
    v231 = v356;

    sub_1000126B0(v332, type metadata accessor for BeaconNamingRecord);
  }
  sub_100030784((uint64_t)v368, (uint64_t)&v358);
  v262 = (uint64_t)v324;
  v263 = swift_dynamicCast(v324, &v358, v231, v261, 6);
  v264 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v323 + 56);
  if (!v263)
  {
    v264(v262, 1, 1, v261);
    sub_100004048(v262, (uint64_t *)&unk_1010F47C0);
    sub_100030784((uint64_t)v368, (uint64_t)&v358);
    v268 = (uint64_t)v304;
    v269 = v231;
    v270 = (int *)v305;
    v271 = swift_dynamicCast(v304, &v358, v269, v305, 6);
    v272 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v302 + 56);
    if ((v271 & 1) == 0)
    {
      v272(v268, 1, 1, v270);
      swift_bridgeObjectRelease();
      v286 = (void (*)(char *, uint64_t))v338;
      v338((uint64_t)v353, v100);
      v286(v337, v100);
      sub_100004048(v143, (uint64_t *)&unk_1011002E0);
      v347((char *)v145, v148);
      sub_100004048(v268, (uint64_t *)&unk_1010EE180);
      goto LABEL_92;
    }
    v272(v268, 0, 1, v270);
    v273 = v306;
    sub_1000126EC(v268, v306, type metadata accessor for SharedBeaconRecord);
    v274 = v270;
    v275 = String._bridgeToObjectiveC()();
    objc_msgSend(v146, "setStableIdentifier:", v275);

    v276 = v273 + v274[7];
    v277 = *(_QWORD *)(v276 + 8);
    v278 = *(void **)(v276 + 16);
    v279 = *(_BYTE *)v276;
    swift_bridgeObjectRetain(v278);
    v280 = (void *)sub_100ACD7B4(v279, v277, v278);
    swift_bridgeObjectRelease();
    objc_msgSend(v146, "setOwner:", v280);

    objc_msgSend(v146, "setAccepted:", *(unsigned __int8 *)(v273 + v274[13]));
    swift_bridgeObjectRetain(*(_QWORD *)(v273 + v274[8] + 8));
    v281 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v146, "setCorrelationIdentifier:", v281);

    objc_msgSend(v146, "setInternalShareType:", *(unsigned __int8 *)(v273 + v274[16]));
    v147 = v296;
    sub_10000F9B8(v273 + v274[20], v296, (uint64_t *)&unk_1010F47B0);
    v41 = (char *)type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(*((_QWORD *)v41 - 1) + 48))(v147, 1, v41) == 1)
    {
      sub_100004048(v147, (uint64_t *)&unk_1010F47B0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v308 + 56))(v297, 1, 1, v148);
      v282 = 0;
LABEL_90:
      objc_msgSend(v146, "setOwnerBeaconIdentifier:", v282);
      swift_bridgeObjectRelease();

      v288 = (void (*)(char *, uint64_t))v338;
      v338((uint64_t)v353, v100);
      v289 = type metadata accessor for SharedBeaconRecord;
      v290 = v306;
      goto LABEL_91;
    }
LABEL_87:
    v291 = (uint64_t)v297;
    sub_10000F9B8(v147 + *((int *)v41 + 5), (uint64_t)v297, &qword_1010ED860);
    sub_1000126B0(v147, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v308 + 48))(v291, 1, v148) == 1)
    {
      v282 = 0;
    }
    else
    {
      v282 = UUID._bridgeToObjectiveC()().super.isa;
      v347((char *)v291, v148);
    }
    goto LABEL_90;
  }
  v264(v262, 0, 1, v261);
  sub_1000126EC(v262, v260, type metadata accessor for OwnedBeaconRecord);
  sub_100C6ED38();
  v265 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v146, "setStableIdentifier:", v265);

  v266 = v303;
  sub_10000F9B8(v260 + v261[7], v303, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v308 + 48))(v266, 1, v148) == 1)
  {
    v267 = 0;
  }
  else
  {
    v283 = v266;
    v267 = UUID._bridgeToObjectiveC()().super.isa;
    v347((char *)v283, v148);
  }
  objc_msgSend(v146, "setGroupIdentifier:", v267);

  sub_10085DA88(v260);
  if (v284)
  {
    v285 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v285 = 0;
  }
  objc_msgSend(v146, "setSerialNumber:", v285);

  objc_msgSend(v146, "setPartIdentifier:", sub_10085DD20(v260));
  objc_msgSend(v146, "setBatteryLevel:", *(unsigned __int8 *)(v260 + v261[19]));
  objc_msgSend(v146, "setIsZeus:", *(unsigned __int8 *)(v260 + v261[20]));
  if (qword_1010EA0E0 != -1)
    swift_once(&qword_1010EA0E0, sub_1009A316C);
  objc_msgSend(v146, "setOwner:", qword_1011B7AC0);
  objc_msgSend(v146, "setAccepted:", 1);
  v287 = String._bridgeToObjectiveC()();
  objc_msgSend(v146, "setCorrelationIdentifier:", v287);

  objc_msgSend(v146, "setInternalShareType:", -1);
  objc_msgSend(v146, "setOwnerBeaconIdentifier:", 0);
  swift_bridgeObjectRelease();
  v288 = (void (*)(char *, uint64_t))v338;
  v338((uint64_t)v353, v100);
  v289 = type metadata accessor for OwnedBeaconRecord;
  v290 = v260;
LABEL_91:
  sub_1000126B0(v290, v289);
  v288(v337, v100);
  sub_100004048(v143, (uint64_t *)&unk_1011002E0);
  v347((char *)v145, v148);
LABEL_92:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v368);
  return v146;
}

uint64_t sub_100857530(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  return sub_1007A411C(*a1, a2, a3, a4, a5);
}

uint64_t sub_100857538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t, uint64_t);
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t (*v95)(uint64_t);
  _BYTE *v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  Swift::String v108;
  Swift::String v109;
  _BYTE v110[4];
  int v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133[10];
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  _QWORD v144[5];

  v130 = a5;
  v120 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v120);
  v10 = &v110[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10001A9A8(&qword_10110A9C8);
  __chkstk_darwin(v11);
  v125 = &v110[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v128 = type metadata accessor for KeySyncRecordUpdate(0);
  v124 = *(_QWORD *)(v128 - 8);
  v13 = __chkstk_darwin(v128);
  v15 = &v110[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v123 = &v110[-v16];
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = &v110[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v117 = type metadata accessor for KeySyncRecord(0);
  v21 = __chkstk_darwin(v117);
  v115 = &v110[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v21);
  v116 = &v110[-v24];
  v25 = __chkstk_darwin(v23);
  v119 = &v110[-v26];
  v27 = __chkstk_darwin(v25);
  v131 = &v110[-v28];
  v29 = __chkstk_darwin(v27);
  v122 = &v110[-v30];
  __chkstk_darwin(v29);
  v32 = &v110[-v31];
  v144[3] = &type metadata for PrimaryIndex;
  v144[4] = sub_100336BAC();
  v144[0] = a3;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v33 = type metadata accessor for Logger(0);
  v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B77E8);
  v129 = a1;
  sub_10005972C(a1, (uint64_t)v32, type metadata accessor for KeySyncRecord);
  v35 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16);
  v127 = a2;
  v35(v20, a2, v17);
  v36 = sub_100030784((uint64_t)v144, (uint64_t)&v137);
  v121 = v34;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.info.getter(v37);
  v39 = v38;
  v40 = os_log_type_enabled(v37, v38);
  v118 = v17;
  v126 = v18;
  if (v40)
  {
    v41 = swift_slowAlloc(42, -1);
    v113 = v10;
    v42 = v41;
    v112 = swift_slowAlloc(64, -1);
    v132 = v112;
    *(_DWORD *)v42 = 141558787;
    v134 = 1752392040;
    v114 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v42 + 4, v42 + 12);
    *(_WORD *)(v42 + 12) = 2081;
    v43 = type metadata accessor for UUID(0);
    v44 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v111 = v39;
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    v134 = sub_100016940(v45, v46, &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v32, type metadata accessor for KeySyncRecord);
    *(_WORD *)(v42 + 22) = 2080;
    v47 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v17, v47);
    v134 = sub_100016940(v48, v49, &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v42 + 24, v42 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v126 + 8))(v20, v17);
    *(_WORD *)(v42 + 32) = 2048;
    v50 = *sub_10001AA44(&v137, v138);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
    v134 = v50;
    a4 = v114;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v42 + 34, v42 + 42);
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v111, "Attempted to updateKeySyncRecord on %{private,mask.hash}s.\nDate: %s,\nindex: %llu.", (uint8_t *)v42, 0x2Au);
    v51 = v112;
    swift_arrayDestroy(v112, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    v52 = v42;
    v10 = v113;
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
    sub_1000126B0((uint64_t)v32, type metadata accessor for KeySyncRecord);
    (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v20, v17);
  }

  sub_100030784((uint64_t)v144, (uint64_t)&v132);
  v53 = sub_10001A9A8(&qword_1010F1CB8);
  v54 = swift_dynamicCast(&v134, &v132, v53, &type metadata for PrimaryIndex, 0);
  v55 = (uint64_t)v131;
  v56 = v129;
  v57 = v128;
  if (v54)
  {
    *(_QWORD *)&v137 = v134;
    v143 = 0;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
    goto LABEL_12;
  }
  if ((swift_dynamicCast(&v137, &v132, v53, &type metadata for PrimaryWildIndex, 0) & 1) != 0
    || swift_dynamicCast(&v137, &v132, v53, &type metadata for SecondaryIndex, 0))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
    sub_10080B648(v56, (uint64_t)&v137);
    if (v138)
    {
      sub_10000F9FC(&v137, (uint64_t)&v132);
      v58 = sub_10064F7BC(&v132, v56, v127, 0);
      v60 = v59;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
      sub_100030784((uint64_t)v144, (uint64_t)&v137);
      v139 = v58;
      v140 = v60;
      v141 = 0;
      v142 = a4;
      v143 = 1;
      swift_bridgeObjectRetain(a4);
LABEL_12:
      v61 = v125;
      sub_100C54EE4(v56, v127, (uint64_t)&v137, (uint64_t)v125);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v124 + 48))(v61, 1, v57) == 1)
      {
        sub_100004048((uint64_t)v61, &qword_10110A9C8);
        v62 = v119;
        sub_10005972C(v56, (uint64_t)v119, type metadata accessor for KeySyncRecord);
        sub_100030784((uint64_t)v144, (uint64_t)&v132);
        swift_bridgeObjectRetain_n(a4, 2);
        v64 = Logger.logObject.getter(v63);
        v65 = static os_log_type_t.info.getter(v64);
        if (os_log_type_enabled(v64, v65))
        {
          v66 = a4;
          v67 = swift_slowAlloc(42, -1);
          v68 = swift_slowAlloc(64, -1);
          v134 = v68;
          *(_DWORD *)v67 = 141558787;
          v136 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v67 + 4, v67 + 12);
          *(_WORD *)(v67 + 12) = 2081;
          v69 = type metadata accessor for UUID(0);
          v70 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v71 = dispatch thunk of CustomStringConvertible.description.getter(v69, v70);
          v136 = sub_100016940(v71, v72, &v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v67 + 14, v67 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v62, type metadata accessor for KeySyncRecord);
          *(_WORD *)(v67 + 22) = 2048;
          v73 = *sub_10001AA44(&v132, v133[2]);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
          v136 = v73;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v67 + 24, v67 + 32);
          *(_WORD *)(v67 + 32) = 2082;
          swift_bridgeObjectRetain(v66);
          v75 = Array.description.getter(v74, &type metadata for PrimaryIndex);
          v77 = v76;
          swift_bridgeObjectRelease();
          v136 = sub_100016940(v75, v77, &v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v67 + 34, v67 + 42);
          swift_bridgeObjectRelease_n(v66, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "Ignore updateKeySyncRecord for %{private,mask.hash}s.\nindexObserved %llu,\nhintBasedIndexes = %{public}s.", (uint8_t *)v67, 0x2Au);
          swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v67, -1, -1);

LABEL_21:
          sub_100879CF8((uint64_t)&v137);
          return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
        swift_bridgeObjectRelease_n(a4, 2);

        v95 = type metadata accessor for KeySyncRecord;
        v94 = v62;
      }
      else
      {
        v78 = (uint64_t)v61;
        v79 = v123;
        sub_1000126EC(v78, (uint64_t)v123, type metadata accessor for KeySyncRecordUpdate);
        sub_10005972C((uint64_t)v79, (uint64_t)v15, type metadata accessor for KeySyncRecordUpdate);
        sub_10005972C(v56, (uint64_t)v122, type metadata accessor for KeySyncRecord);
        sub_100879D2C((uint64_t)&v137, (uint64_t)&v132);
        sub_10005972C(v56, v55, type metadata accessor for KeySyncRecord);
        v80 = v117;
        *(_QWORD *)(v55 + *(int *)(v117 + 20)) = *(_QWORD *)&v15[*(int *)(v57 + 20)];
        v81 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v126 + 24))(v55 + *(int *)(v80 + 28), v15, v118);
        __chkstk_darwin(v81);
        *(_QWORD *)&v110[-16] = v82;
        *(_QWORD *)&v110[-8] = v55;
        OS_dispatch_queue.sync<A>(execute:)(sub_1004D2994, &v110[-32], &type metadata for () + 1);
        sub_1007EEF64(8);
        sub_10005972C(v55, (uint64_t)v10, type metadata accessor for KeySyncRecord);
        swift_storeEnumTagMultiPayload(v10, v120, 0);
        v93 = v122;
        sub_100819A3C((uint64_t)v10, (uint64_t)v122, (uint64_t)&v132);
        sub_100004048((uint64_t)v10, &qword_1010FD0B0);
        sub_1000126B0(v55, type metadata accessor for KeySyncRecord);
        sub_1000126B0((uint64_t)v93, type metadata accessor for KeySyncRecord);
        sub_100879CF8((uint64_t)&v132);
        sub_1000126B0((uint64_t)v15, type metadata accessor for KeySyncRecordUpdate);
        v94 = v123;
        v95 = type metadata accessor for KeySyncRecordUpdate;
      }
      sub_1000126B0((uint64_t)v94, v95);
      goto LABEL_21;
    }
    sub_100004048((uint64_t)&v137, (uint64_t *)&unk_1010EE310);
    v83 = v116;
    v84 = sub_10005972C(v56, (uint64_t)v116, type metadata accessor for KeySyncRecord);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter(v85);
    if (os_log_type_enabled(v85, v86))
    {
      v87 = swift_slowAlloc(22, -1);
      v88 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v137 = v88;
      *(_DWORD *)v87 = 141558275;
      v132 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v87 + 4, v87 + 12);
      *(_WORD *)(v87 + 12) = 2081;
      v89 = type metadata accessor for UUID(0);
      v90 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v91 = dispatch thunk of CustomStringConvertible.description.getter(v89, v90);
      v132 = sub_100016940(v91, v92, (uint64_t *)&v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v87 + 14, v87 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v83, type metadata accessor for KeySyncRecord);
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "No BeaconRecord for identifier %{private,mask.hash}s.", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v83, type metadata accessor for KeySyncRecord);
    }

  }
  else
  {
    v97 = v115;
    sub_10005972C(v56, (uint64_t)v115, type metadata accessor for KeySyncRecord);
    v98 = sub_100030784((uint64_t)v144, (uint64_t)&v137);
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.error.getter(v99);
    if (os_log_type_enabled(v99, v100))
    {
      v101 = swift_slowAlloc(32, -1);
      v102 = swift_slowAlloc(64, -1);
      v136 = v102;
      *(_DWORD *)v101 = 141558531;
      v134 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v101 + 4, v101 + 12);
      *(_WORD *)(v101 + 12) = 2081;
      v103 = type metadata accessor for UUID(0);
      v104 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v105 = dispatch thunk of CustomStringConvertible.description.getter(v103, v104);
      v134 = sub_100016940(v105, v106, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v101 + 14, v101 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v97, type metadata accessor for KeySyncRecord);
      *(_WORD *)(v101 + 22) = 2082;
      v107 = *sub_10001AA44(&v137, v138);
      v134 = 0x7972616D6972702ELL;
      v135 = 0xEA0000000000282FLL;
      v133[9] = v107;
      v108._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v108);
      swift_bridgeObjectRelease();
      v109._countAndFlagsBits = 41;
      v109._object = (void *)0xE100000000000000;
      String.append(_:)(v109);
      v134 = sub_100016940(v134, v135, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v101 + 24, v101 + 32);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "Unsupported index type for beacon %{private,mask.hash}s,\nindex: %{public}s.", (uint8_t *)v101, 0x20u);
      swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v101, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v97, type metadata accessor for KeySyncRecord);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
}

uint64_t sub_100858570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  void (*v36)(_QWORD *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t);
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  os_log_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142[6];
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  _QWORD v152[5];

  v138 = a5;
  v140 = a2;
  v130 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v130);
  v133 = (uint64_t)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_10110A9C8);
  __chkstk_darwin(v13);
  v139 = (uint64_t)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for KeySyncRecordUpdate(0);
  v134 = *(_QWORD *)(v135 - 8);
  v15 = __chkstk_darwin(v135);
  v129 = (uint64_t)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v128 = (uint64_t)&v116 - v17;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for KeySyncRecord(0);
  v22 = __chkstk_darwin(v124);
  v122 = (uint64_t)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v123 = (uint64_t)&v116 - v25;
  v26 = __chkstk_darwin(v24);
  v132 = (uint64_t)&v116 - v27;
  v28 = __chkstk_darwin(v26);
  v127 = (uint64_t)&v116 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v116 - v31;
  __chkstk_darwin(v30);
  v34 = (char *)&v116 - v33;
  v152[3] = a6;
  v152[4] = a7;
  v137 = a7;
  v35 = sub_100018F08(v152);
  v36 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16);
  v136 = a6;
  v36(v35, a3, a6);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_10001A9E8(v37, (uint64_t)qword_1011B77E8);
  sub_10005972C(a1, (uint64_t)v34, type metadata accessor for KeySyncRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v140, v18);
  v39 = sub_100030784((uint64_t)v152, (uint64_t)&v145);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.info.getter(v40);
  v131 = v41;
  v42 = os_log_type_enabled(v40, v41);
  v126 = v18;
  v125 = v19;
  if (v42)
  {
    v43 = swift_slowAlloc(42, -1);
    v121 = a4;
    v44 = v43;
    v118 = swift_slowAlloc(64, -1);
    v141 = v118;
    *(_DWORD *)v44 = 141558787;
    v144 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v44 + 4, v44 + 12);
    *(_WORD *)(v44 + 12) = 2081;
    v120 = a1;
    v45 = type metadata accessor for UUID(0);
    v119 = v38;
    v46 = v19;
    v47 = v32;
    v48 = v45;
    v49 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v117 = v40;
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
    v144 = sub_100016940(v50, v51, &v141);
    v52 = v137;
    a1 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v34, type metadata accessor for KeySyncRecord);
    *(_WORD *)(v44 + 22) = 2080;
    v53 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v54 = dispatch thunk of CustomStringConvertible.description.getter(v18, v53);
    v144 = sub_100016940(v54, v55, &v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v44 + 24, v44 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v21, v18);
    *(_WORD *)(v44 + 32) = 2048;
    sub_10001AA44(&v145, v146);
    v56 = *(_QWORD *)(v52 + 56);
    v32 = v47;
    dispatch thunk of RawRepresentable.rawValue.getter(&v144, v136, v56);
    v57 = v144;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v145);
    v144 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v44 + 34, v44 + 42);
    v40 = v117;
    _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v131, "Attempted to updateKeySyncRecord on %{private,mask.hash}s.\nDate: %s,\nindex: %llu.", (uint8_t *)v44, 0x2Au);
    v58 = v118;
    swift_arrayDestroy(v118, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    v59 = v44;
    a4 = v121;
    swift_slowDealloc(v59, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v145);
    sub_1000126B0((uint64_t)v34, type metadata accessor for KeySyncRecord);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }

  sub_100030784((uint64_t)v152, (uint64_t)&v141);
  v60 = sub_10001A9A8(&qword_1010F1CB8);
  if (swift_dynamicCast(&v144, &v141, v60, &type metadata for PrimaryIndex, 0))
  {
    *(_QWORD *)&v145 = v144;
    v151 = 0;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
    goto LABEL_12;
  }
  if ((swift_dynamicCast(&v145, &v141, v60, &type metadata for PrimaryWildIndex, 0) & 1) != 0
    || swift_dynamicCast(&v145, &v141, v60, &type metadata for SecondaryIndex, 0))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
    sub_10080B648(a1, (uint64_t)&v145);
    if (v146)
    {
      sub_10000F9FC(&v145, (uint64_t)&v141);
      v61 = sub_10064F7BC(&v141, a1, v140, 0);
      v63 = v62;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
      sub_100030784((uint64_t)v152, (uint64_t)&v145);
      v147 = v61;
      v148 = v63;
      v149 = 0;
      v150 = a4;
      v151 = 1;
      swift_bridgeObjectRetain(a4);
LABEL_12:
      v64 = v139;
      sub_100C54EE4(a1, v140, (uint64_t)&v145, v139);
      v65 = v64;
      v66 = v135;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v65, 1, v135) == 1)
      {
        sub_100004048(v139, &qword_10110A9C8);
        sub_10005972C(a1, v132, type metadata accessor for KeySyncRecord);
        sub_100030784((uint64_t)v152, (uint64_t)&v141);
        swift_bridgeObjectRetain_n(a4, 2);
        v68 = Logger.logObject.getter(v67);
        v69 = static os_log_type_t.info.getter(v68);
        if (os_log_type_enabled(v68, v69))
        {
          v70 = a4;
          v71 = swift_slowAlloc(42, -1);
          v72 = swift_slowAlloc(64, -1);
          *(_DWORD *)v71 = 141558787;
          v143 = 1752392040;
          v144 = v72;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v71 + 4, v71 + 12);
          *(_WORD *)(v71 + 12) = 2081;
          v73 = v132;
          v74 = type metadata accessor for UUID(0);
          v75 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v76 = dispatch thunk of CustomStringConvertible.description.getter(v74, v75);
          v143 = sub_100016940(v76, v77, &v144);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v71 + 14, v71 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v73, type metadata accessor for KeySyncRecord);
          *(_WORD *)(v71 + 22) = 2048;
          sub_10001AA44(&v141, v142[2]);
          dispatch thunk of RawRepresentable.rawValue.getter(&v143, v136, *(_QWORD *)(v137 + 56));
          v78 = v143;
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
          v143 = v78;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v71 + 24, v71 + 32);
          *(_WORD *)(v71 + 32) = 2082;
          swift_bridgeObjectRetain(v70);
          v80 = Array.description.getter(v79, &type metadata for PrimaryIndex);
          v82 = v81;
          swift_bridgeObjectRelease();
          v143 = sub_100016940(v80, v82, &v144);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v71 + 34, v71 + 42);
          swift_bridgeObjectRelease_n(v70, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "Ignore updateKeySyncRecord for %{private,mask.hash}s.\nindexObserved %llu,\nhintBasedIndexes = %{public}s.", (uint8_t *)v71, 0x2Au);
          swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v72, -1, -1);
          swift_slowDealloc(v71, -1, -1);

LABEL_21:
          sub_100879CF8((uint64_t)&v145);
          return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v152);
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
        swift_bridgeObjectRelease_n(a4, 2);

        v102 = type metadata accessor for KeySyncRecord;
        v101 = v132;
      }
      else
      {
        v83 = v128;
        sub_1000126EC(v139, v128, type metadata accessor for KeySyncRecordUpdate);
        v84 = v129;
        sub_10005972C(v83, v129, type metadata accessor for KeySyncRecordUpdate);
        sub_10005972C(a1, (uint64_t)v32, type metadata accessor for KeySyncRecord);
        sub_100879D2C((uint64_t)&v145, (uint64_t)&v141);
        v85 = a1;
        v86 = v127;
        sub_10005972C(v85, v127, type metadata accessor for KeySyncRecord);
        v87 = v124;
        *(_QWORD *)(v86 + *(int *)(v124 + 20)) = *(_QWORD *)(v84 + *(int *)(v66 + 20));
        v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 24))(v86 + *(int *)(v87 + 28), v84, v126);
        __chkstk_darwin(v88);
        *(&v116 - 2) = v89;
        *(&v116 - 1) = v86;
        OS_dispatch_queue.sync<A>(execute:)(sub_1004D65A8, &v116 - 4, (char *)&type metadata for () + 8);
        sub_1007EEF64(8);
        sub_10005972C(v86, v133, type metadata accessor for KeySyncRecord);
        v100 = v133;
        swift_storeEnumTagMultiPayload(v133, v130, 0);
        sub_100819A3C(v100, (uint64_t)v32, (uint64_t)&v141);
        sub_100004048(v100, &qword_1010FD0B0);
        sub_1000126B0(v86, type metadata accessor for KeySyncRecord);
        sub_1000126B0((uint64_t)v32, type metadata accessor for KeySyncRecord);
        sub_100879CF8((uint64_t)&v141);
        sub_1000126B0(v84, type metadata accessor for KeySyncRecordUpdate);
        v101 = v83;
        v102 = type metadata accessor for KeySyncRecordUpdate;
      }
      sub_1000126B0(v101, v102);
      goto LABEL_21;
    }
    sub_100004048((uint64_t)&v145, (uint64_t *)&unk_1010EE310);
    v90 = v123;
    v91 = sub_10005972C(a1, v123, type metadata accessor for KeySyncRecord);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.error.getter(v92);
    if (os_log_type_enabled(v92, v93))
    {
      v94 = swift_slowAlloc(22, -1);
      v95 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v145 = v95;
      *(_DWORD *)v94 = 141558275;
      v141 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v94 + 4, v94 + 12);
      *(_WORD *)(v94 + 12) = 2081;
      v96 = type metadata accessor for UUID(0);
      v97 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v98 = dispatch thunk of CustomStringConvertible.description.getter(v96, v97);
      v141 = sub_100016940(v98, v99, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v94 + 14, v94 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v90, type metadata accessor for KeySyncRecord);
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "No BeaconRecord for identifier %{private,mask.hash}s.", (uint8_t *)v94, 0x16u);
      swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v94, -1, -1);
    }
    else
    {
      sub_1000126B0(v90, type metadata accessor for KeySyncRecord);
    }

  }
  else
  {
    v104 = v122;
    sub_10005972C(a1, v122, type metadata accessor for KeySyncRecord);
    v105 = sub_100030784((uint64_t)v152, (uint64_t)&v145);
    v106 = Logger.logObject.getter(v105);
    v107 = static os_log_type_t.error.getter(v106);
    if (os_log_type_enabled(v106, v107))
    {
      v108 = swift_slowAlloc(32, -1);
      v109 = swift_slowAlloc(64, -1);
      *(_DWORD *)v108 = 141558531;
      v143 = 1752392040;
      v144 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v108 + 4, v108 + 12);
      *(_WORD *)(v108 + 12) = 2081;
      v110 = type metadata accessor for UUID(0);
      v111 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v112 = dispatch thunk of CustomStringConvertible.description.getter(v110, v111);
      v143 = sub_100016940(v112, v113, &v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v108 + 14, v108 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v104, type metadata accessor for KeySyncRecord);
      *(_WORD *)(v108 + 22) = 2082;
      sub_10001AA44(&v145, v146);
      v114 = dispatch thunk of CustomStringConvertible.description.getter(v136, *(_QWORD *)(v137 + 16));
      v143 = sub_100016940(v114, v115, &v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v108 + 24, v108 + 32);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v145);
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "Unsupported index type for beacon %{private,mask.hash}s,\nindex: %{public}s.", (uint8_t *)v108, 0x20u);
      swift_arrayDestroy(v109, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v108, -1, -1);
    }
    else
    {
      sub_1000126B0(v104, type metadata accessor for KeySyncRecord);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v145);
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v152);
}

_QWORD *sub_1008595F4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t *v26;

  v15 = *(_QWORD *)(a7 - 8);
  __chkstk_darwin(a1);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v17);
  v18 = *(_QWORD *)(a6 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v19 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, a6, v18, (char *)&type metadata for () + 8, v19);
  v20 = v26;
  v21 = (int *)sub_1004DF760((uint64_t)v17, a2, a3, a4, a6, v26, a7, a8);
  v23 = sub_1004DF978((unint64_t)v17, v21, v22, a3, a5, 0, v20, a7, a8);
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a7);
  return v23;
}

uint64_t sub_10085975C(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  return sub_1007A43FC(*a1, a2, a3, a4);
}

BOOL sub_100859764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  _BOOL8 v18;
  uint64_t v20;

  v4 = type metadata accessor for BeaconStatus(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v20 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v20 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  v16 = static UUID.== infix(_:_:)(a1, a2);
  sub_10005972C(a1, (uint64_t)v15, type metadata accessor for BeaconStatus);
  sub_10005972C(a2, (uint64_t)v13, type metadata accessor for BeaconStatus);
  if ((v16 & 1) == 0)
  {
    sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconStatus);
    sub_10005972C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
    sub_10005972C(a2, (uint64_t)v7, type metadata accessor for BeaconStatus);
    goto LABEL_5;
  }
  v17 = static Date.== infix(_:_:)(&v15[*(int *)(v4 + 24)], &v13[*(int *)(v4 + 24)]);
  sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconStatus);
  sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconStatus);
  sub_10005972C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
  sub_10005972C(a2, (uint64_t)v7, type metadata accessor for BeaconStatus);
  if ((v17 & 1) == 0)
  {
LABEL_5:
    v18 = 0;
    goto LABEL_6;
  }
  v18 = v10[*(int *)(v4 + 20)] == v7[*(int *)(v4 + 20)];
LABEL_6:
  sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconStatus);
  sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconStatus);
  return v18;
}

void sub_100859948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD);
  void *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unsigned int (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(_QWORD);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(char *, uint64_t, uint64_t);
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;

  v3 = v2;
  v80 = a2;
  v5 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v5);
  v101 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v93 = *(_QWORD *)(v7 - 8);
  v94 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v10);
  v102 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for DirectorySequence(0);
  v88 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v86 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_10110AC10);
  v14 = __chkstk_darwin(v13);
  v91 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v87 = (uint64_t)&v73 - v16;
  v17 = sub_10001A9A8(&qword_10110AC18);
  v18 = *(_QWORD *)(v17 - 8);
  v97 = v17;
  v98 = v18;
  v19 = __chkstk_darwin(v17);
  v92 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v90 = (uint64_t)&v73 - v21;
  v22 = sub_10001A9A8(&qword_10110AC08);
  __chkstk_darwin(v22);
  v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8(&qword_101111C70);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v89 = (uint64_t)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v28);
  v30 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for OwnedBeaconRecord(0);
  v82 = *(_QWORD *)(v81 - 8);
  v31 = __chkstk_darwin(v81);
  v78 = (uint64_t)&v73 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v79 = (uint64_t)&v73 - v33;
  v34 = sub_10001A9A8(&qword_10110ABF8);
  __chkstk_darwin(v34);
  v36 = (char *)&v73 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = _swiftEmptyArrayStorage;
  sub_100005CF0(a1, (uint64_t)v36, &qword_10110ABF8);
  v84 = v36;
  sub_10000F9B8((uint64_t)v36, (uint64_t)v24, &qword_10110AC08);
  v74 = v26;
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v83 = v25;
  v77 = v37;
  if (v37(v24, 1, v25) == 1)
  {
LABEL_2:
    sub_100004048((uint64_t)v24, &qword_10110AC08);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v30, 1, 1, v81);
LABEL_3:
    sub_100004048((uint64_t)v84, &qword_10110ABF8);
    sub_100004048((uint64_t)v30, (uint64_t *)&unk_1010F47C0);
    return;
  }
  v38 = v98;
  v39 = v83;
  v85 = (void (*)(_QWORD))v9;
  v76 = v24;
  v75 = v30;
  while (1)
  {
    v99 = v3;
    v40 = v89;
    sub_100005CF0((uint64_t)v24, v89, &qword_101111C70);
    v100 = v40 + *(int *)(v39 + 40);
    v41 = v102;
    sub_10000F9B8(v100, v102, (uint64_t *)&unk_1010F77A0);
    v42 = v88;
    v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
    if (v96(v41, 1, v103) != 1)
      break;
    v43 = v87;
    v44 = v97;
LABEL_17:
    sub_100004048(v102, (uint64_t *)&unk_1010F77A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v43, 1, 1, v44);
LABEL_18:
    v62 = v43;
    v3 = v99;
    v24 = v76;
    sub_100004048(v89, &qword_101111C70);
    sub_100004048(v62, &qword_10110AC10);
    v63 = (uint64_t)v84;
    sub_100004048((uint64_t)v84, &qword_10110AC08);
    v64 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v63, 1, 1, v83);
    v30 = v75;
LABEL_19:
    v65 = v82;
    v66 = v64;
    v67 = v81;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v30, v66, 1, v81);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v30, 1, v67) == 1)
      goto LABEL_3;
    v68 = v79;
    sub_1000126EC((uint64_t)v30, v79, type metadata accessor for OwnedBeaconRecord);
    v69 = sub_10080D650(v68, v80);
    if (v3)
    {
      sub_1000126B0(v68, type metadata accessor for OwnedBeaconRecord);
      sub_100004048((uint64_t)v84, &qword_10110ABF8);
      swift_release(v104);
      return;
    }
    if ((v69 & 1) != 0)
    {
      sub_1000126EC(v68, v78, type metadata accessor for OwnedBeaconRecord);
      v70 = v104;
      if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
      {
        sub_10009A680(0, v70[2] + 1, 1);
        v70 = v104;
      }
      v72 = v70[2];
      v71 = v70[3];
      if (v72 >= v71 >> 1)
      {
        sub_10009A680(v71 > 1, v72 + 1, 1);
        v70 = v104;
      }
      v70[2] = v72 + 1;
      sub_1000126EC(v78, (uint64_t)v70+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(_QWORD *)(v82 + 72) * v72, type metadata accessor for OwnedBeaconRecord);
      v38 = v98;
    }
    else
    {
      sub_1000126B0(v68, type metadata accessor for OwnedBeaconRecord);
    }
    sub_10000F9B8((uint64_t)v84, (uint64_t)v24, &qword_10110AC08);
    v39 = v83;
    if (v77(v24, 1, v83) == 1)
      goto LABEL_2;
  }
  v95 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 32);
  v45 = v86;
  v43 = v87;
  while (1)
  {
    v46 = (uint64_t)v91;
    v47 = v95(v45, v102, v103);
    DirectorySequence.next()(v47);
    v48 = (uint64_t)v101;
    v50 = v93;
    v49 = v94;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v101, 1, v94) == 1)
    {
      v51 = v103;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v103);
      sub_100004048(v48, &qword_1010FBA40);
      v52 = v100;
      sub_100004048(v100, (uint64_t *)&unk_1010F77A0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v52, 1, 1, v51);
      v44 = v97;
      v38 = v98;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v43, 1, 1, v97);
      goto LABEL_14;
    }
    v53 = v103;
    v54 = v85;
    (*(void (**)(void (*)(_QWORD), uint64_t, uint64_t))(v50 + 32))(v85, v48, v49);
    v55 = objc_autoreleasePoolPush();
    v56 = v99;
    sub_100A7F0F0(v54, v89, v46);
    v99 = v56;
    if (v56)
      break;
    objc_autoreleasePoolPop(v55);
    v57 = v88;
    v45 = v86;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v53);
    (*(void (**)(void (*)(_QWORD), uint64_t))(v50 + 8))(v54, v49);
    v43 = v87;
    sub_100005CF0(v46, v87, &qword_10110AC10);
    v42 = v57;
    v44 = v97;
    v38 = v98;
LABEL_14:
    v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v43, 1, v44);
    v59 = (uint64_t)v92;
    if (v58 == 1)
      goto LABEL_18;
    v60 = v90;
    sub_100005CF0(v43, v90, &qword_10110AC18);
    sub_100005CF0(v60, v59, &qword_10110AC18);
    if (swift_getEnumCaseMultiPayload(v59, v44) != 1)
    {
      sub_100004048(v89, &qword_101111C70);
      v30 = v75;
      sub_1000126EC(v59, (uint64_t)v75, type metadata accessor for OwnedBeaconRecord);
      v64 = 0;
      v3 = v99;
      v24 = v76;
      goto LABEL_19;
    }
    sub_100004048(v59, &qword_10110AC18);
    v61 = v102;
    sub_10000F9B8(v100, v102, (uint64_t *)&unk_1010F77A0);
    if (v96(v61, 1, v103) == 1)
      goto LABEL_17;
  }
  objc_autoreleasePoolPop(v55);
  __break(1u);
}

uint64_t sub_10085A268()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7660);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Posting SPManagedCBPeripheralChanged from BeaconStore.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = (void *)SPManagedCBPeripheralChangedNotification;
  v6 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = DarwinNotificationHelper.init(notificationName:rateLimit:)(v5, 0.0);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  return swift_release(v7);
}

_QWORD *sub_10085A38C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MemberSharingCircle(0);
  v9 = __chkstk_darwin(v8);
  v29 = (uint64_t)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v25 - v12;
  result = _swiftEmptyArrayStorage;
  v30 = _swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v25[1] = v2;
    v16 = *(_QWORD *)(v11 + 72);
    v26 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v17 = a1 + v26;
    v28 = _swiftEmptyArrayStorage;
    v27 = a2;
    while (1)
    {
      sub_10005972C(v17, (uint64_t)v13, type metadata accessor for MemberSharingCircle);
      sub_10080CD54((uint64_t)&v13[*(int *)(v8 + 24)], (uint64_t)v7);
      v18 = type metadata accessor for SharedBeaconRecord(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v7, 1, v18) == 1)
      {
        sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010EE180);
      }
      else
      {
        v19 = v7[*(int *)(v18 + 64)];
        sub_1000126B0((uint64_t)v7, type metadata accessor for SharedBeaconRecord);
        if (v19 == 2 && v13[*(int *)(v8 + 40)] == 1)
        {
          sub_1000126EC((uint64_t)v13, v29, type metadata accessor for MemberSharingCircle);
          v20 = v28;
          if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
            sub_10009A4D0(0, v20[2] + 1, 1);
          v21 = v30;
          v23 = v30[2];
          v22 = v30[3];
          v24 = (_QWORD *)(v23 + 1);
          if (v23 >= v22 >> 1)
          {
            v28 = (_QWORD *)(v23 + 1);
            sub_10009A4D0(v22 > 1, v23 + 1, 1);
            v24 = v28;
            v21 = v30;
          }
          v21[2] = v24;
          v28 = v21;
          sub_1000126EC(v29, (uint64_t)v21 + v26 + v23 * v16, type metadata accessor for MemberSharingCircle);
          goto LABEL_5;
        }
      }
      sub_1000126B0((uint64_t)v13, type metadata accessor for MemberSharingCircle);
LABEL_5:
      v17 += v16;
      if (!--v15)
        return v30;
    }
  }
  return result;
}

uint64_t sub_10085A600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSString v7;
  id v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t result;
  unsigned __int8 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[24];
  uint64_t v23;

  v1 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v2 = qword_1011B7D38;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100E22B00;
  v5 = (void *)objc_opt_self(NSUserDefaults);
  v6 = objc_msgSend(v5, "standardUserDefaults");
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "objectForKey:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(&v20, v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  sub_100005CF0((uint64_t)&v20, (uint64_t)v22, (uint64_t *)&unk_1010F6390);
  if (v23)
  {
    v9 = swift_dynamicCast(&v19, v22, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    v10 = v19;
    if (!v9)
      v10 = 2;
  }
  else
  {
    sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F6390);
    v10 = 2;
  }
  v22[0] = v10;
  v11 = sub_10001A9A8(&qword_1010FBAA0);
  v12 = String.init<A>(describing:)(v22, v11);
  v14 = v13;
  *(_QWORD *)(v4 + 56) = &type metadata for String;
  *(_QWORD *)(v4 + 64) = sub_10001AA00();
  *(_QWORD *)(v4 + 32) = v12;
  *(_QWORD *)(v4 + 40) = v14;
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v2, "beaconFindMyAccessoryAssociated get, %@", 39, 2, v4);
  swift_bridgeObjectRelease(v4);
  v15 = objc_msgSend(v5, "standardUserDefaults");
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "objectForKey:", v16);

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(&v20, v17);
    swift_unknownObjectRelease(v17);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  sub_100005CF0((uint64_t)&v20, (uint64_t)v22, (uint64_t *)&unk_1010F6390);
  if (v23)
  {
    result = swift_dynamicCast(&v19, v22, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    if ((_DWORD)result)
      return v19;
  }
  else
  {
    sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F6390);
    return 0;
  }
  return result;
}

void sub_10085A8D4(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  NSString v11;

  v1 = a1;
  v2 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v3 = qword_1011B7D38;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  v6 = v5;
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  v7 = v1 & 1;
  if ((_DWORD)v7)
    v8 = 1702195828;
  else
    v8 = 0x65736C6166;
  if ((_DWORD)v7)
    v9 = 0xE400000000000000;
  else
    v9 = 0xE500000000000000;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "beaconFindMyAccessoryAssociated set, %@", 39, 2, v6);
  swift_bridgeObjectRelease(v6);
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setBool:forKey:", v7, v11);

}

uint64_t sub_10085AA40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  id v38;
  unsigned int v39;
  char *v40;
  NSString v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  int *v51;
  char *v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  id v69;
  Swift::String v70;
  Class isa;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(_QWORD, _QWORD, _QWORD);
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (**v110)(uint64_t);
  uint64_t v111;
  void (*v112)(uint64_t);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (**v116)(uint64_t);
  uint64_t v117;
  uint64_t result;
  uint64_t v119;
  char *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  __int128 v125;
  char *v126;
  char *v127;
  void (*v128)(_QWORD, _QWORD, _QWORD);
  char *v129;
  char *v130;
  char *v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  unsigned int v143;
  _BYTE v144[36];

  v140 = a2;
  v123 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v123);
  v127 = (char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v134 = v8;
  v135 = v9;
  v10 = __chkstk_darwin(v8);
  v126 = (char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v130 = (char *)&v119 - v12;
  v138 = type metadata accessor for UUID(0);
  v141 = *(int **)(v138 - 8);
  v13 = __chkstk_darwin(v138);
  v124 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v120 = (char *)&v119 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v119 - v17;
  v137 = type metadata accessor for BeaconStoreFileRecord(0);
  v122 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v131 = (char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v20);
  v121 = (uint64_t *)((char *)&v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for OwnedBeaconGroup(0);
  v23 = *(char **)(v22 - 8);
  v24 = (char *)*((_QWORD *)v23 + 8);
  v25 = __chkstk_darwin(v22);
  v129 = (char *)&v119 - ((unint64_t)(v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v119 - v26;
  v28 = swift_allocObject(&unk_101095EB0, 32, 7);
  *(_QWORD *)(v28 + 16) = a3;
  *(_QWORD *)(v28 + 24) = a4;
  v136 = v28;
  v133 = a3;
  swift_retain();
  v132 = a4;
  v29 = static os_log_type_t.default.getter(v132);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v30 = qword_1011B7D38;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v32 = swift_allocObject(v31, 72, 7);
  v125 = xmmword_100E22B00;
  *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
  v142 = a1;
  sub_10005972C(a1, (uint64_t)v27, type metadata accessor for OwnedBeaconGroup);
  v128 = (void (*)(_QWORD, _QWORD, _QWORD))v27;
  v139 = (int *)v22;
  v33 = String.init<A>(describing:)(v27, v22);
  v35 = v34;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  v36 = sub_10001AA00();
  *(_QWORD *)(v32 + 64) = v36;
  *(_QWORD *)(v32 + 32) = v33;
  *(_QWORD *)(v32 + 40) = v35;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Attempting to remove: %@", 24, 2, v32);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  v40 = v18;
  if (v39)
  {
    v41 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v37, "BOOLForKey:", v41);

  }
  v42 = v142;
  v43 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v43)
  {
    v44 = v43;
    v45 = objc_msgSend(v43, "aa_primaryAppleAccount");

    if (v45 && (v45, (v39 & 1) == 0))
    {
      v132 = v36;
      v133 = v31;
      v130 = v23;
      v131 = v24;
      v63 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v64 = v42 + v139[6];
      v65 = UUID.uuidString.getter(v63);
      v67 = v66;
      v68 = v140;
      v69 = *(id *)(v140 + 152);
      v70._countAndFlagsBits = v65;
      v70._object = v67;
      isa = CKRecordID.init(recordName:zoneID:)(v70, (CKRecordZoneID)v69).super.isa;
      v72 = sub_1007FDEC4();
      v139 = (int *)isa;
      v129 = (char *)sub_100BC79BC(isa);
      swift_release(v72);
      v73 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v121;
      sub_10080B950(v64, (uint64_t)v121);
      v74 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v120) = (*(uint64_t (**)(void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 48))(v73, 1, v74);
      sub_100004048((uint64_t)v73, (uint64_t *)&unk_1010F47C0);
      v123 = swift_allocBox(v123);
      v75 = *(_QWORD **)(v122 + 56);
      v122 = v76;
      v77 = v137;
      v121 = v75;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v75)(v76, 1, 1, v137);
      v78 = *(_QWORD *)(v68 + 160);
      v79 = v124;
      v80 = v138;
      (*((void (**)(char *, uint64_t, uint64_t))v141 + 2))(v124, v64, v138);
      if (qword_1010E9B90 != -1)
        swift_once(&qword_1010E9B90, sub_10036E07C);
      v81 = v134;
      v82 = sub_10001A9E8(v134, (uint64_t)qword_1011B6DE0);
      v83 = v135;
      v84 = v126;
      v85 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 16))(v126, v82, v81);
      __chkstk_darwin(v85);
      *(&v119 - 4) = v78;
      *(&v119 - 3) = (uint64_t)v79;
      *(&v119 - 2) = (uint64_t)v84;
      v86 = (uint64_t)v127;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v119 - 6, v77);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v81);
      (*((void (**)(char *, uint64_t))v141 + 1))(v79, v80);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v121)(v86, 0, 1, v77);
      v90 = sub_100004084(v86, v122, &qword_10110A908);
      v92 = v132;
      v91 = v133;
      v93 = v142;
      v94 = v139;
      LODWORD(v139) = (_DWORD)v120 != 1;
      v95 = static os_log_type_t.default.getter(v90);
      v96 = qword_1011B7D38;
      v97 = swift_allocObject(v91, 72, 7);
      *(_OWORD *)(v97 + 16) = v125;
      v98 = v94;
      v141 = v98;
      v99 = objc_msgSend(v98, "description");
      v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
      v102 = v101;

      *(_QWORD *)(v97 + 56) = &type metadata for String;
      *(_QWORD *)(v97 + 64) = v92;
      *(_QWORD *)(v97 + 32) = v100;
      *(_QWORD *)(v97 + 40) = v102;
      os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "cloudBacked item deleted from disk: %@", 38, 2, v97);
      swift_bridgeObjectRelease();
      v103 = v128;
      sub_10005972C(v93, (uint64_t)v128, type metadata accessor for OwnedBeaconGroup);
      v104 = v130[80];
      v105 = (v104 + 32) & ~v104;
      v106 = (unint64_t)&v131[v105 + 7] & 0xFFFFFFFFFFFFFFF8;
      v137 = v106 + 16;
      v138 = v104 | 7;
      v107 = swift_allocObject(&unk_101095ED8, v106 + 17, v104 | 7);
      v108 = v123;
      v109 = v140;
      *(_QWORD *)(v107 + 16) = v123;
      *(_QWORD *)(v107 + 24) = v109;
      sub_1000126EC((uint64_t)v103, v107 + v105, type metadata accessor for OwnedBeaconGroup);
      v110 = (void (**)(uint64_t))(v107 + v106);
      v111 = v93;
      v112 = (void (*)(uint64_t))v136;
      *v110 = sub_100215CF8;
      v110[1] = v112;
      *(_BYTE *)(v107 + v106 + 16) = (_BYTE)v139;
      swift_retain();
      swift_retain();
      swift_retain();
      v113 = v129;
      v114 = Future.addSuccess(block:)(sub_100877430, v107);
      swift_release(v114);
      swift_release(v107);
      sub_10005972C(v111, (uint64_t)v103, type metadata accessor for OwnedBeaconGroup);
      v115 = swift_allocObject(&unk_101095F00, v137, v138);
      *(_QWORD *)(v115 + 16) = v108;
      *(_QWORD *)(v115 + 24) = v109;
      sub_1000126EC((uint64_t)v103, v115 + v105, type metadata accessor for OwnedBeaconGroup);
      v116 = (void (**)(uint64_t))(v115 + v106);
      *v116 = sub_100215CF8;
      v116[1] = v112;
      swift_retain();
      swift_retain();
      swift_retain();
      v117 = Future.addFailure(block:)(sub_100877450, v115);
      swift_release(v112);
      swift_release(v108);
      swift_release(v115);

      swift_release(v113);
      v89 = v117;
    }
    else
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v46 = type metadata accessor for Logger(0);
      v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B77E8);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.info.getter(v48);
      v50 = os_log_type_enabled(v48, v49);
      v51 = v139;
      v52 = v130;
      if (v50)
      {
        v53 = v45 != 0;
        v54 = swift_slowAlloc(14, -1);
        *(_DWORD *)v54 = 67109376;
        v143 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v54 + 4, v54 + 8);
        *(_WORD *)(v54 + 8) = 1024;
        v143 = v53;
        v42 = v142;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v54 + 10, v54 + 14);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v54, 0xEu);
        swift_slowDealloc(v54, -1, -1);
      }

      v55 = *(_QWORD *)(v140 + 160);
      v56 = v42 + v51[6];
      v57 = v138;
      v128 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v141 + 2);
      v128(v40, v56, v138);
      if (qword_1010E9B90 != -1)
        swift_once(&qword_1010E9B90, sub_10036E07C);
      v58 = v134;
      v59 = sub_10001A9E8(v134, (uint64_t)qword_1011B6DE0);
      v60 = v135;
      v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 16))(v52, v59, v58);
      __chkstk_darwin(v61);
      *(&v119 - 4) = v55;
      *(&v119 - 3) = (uint64_t)v40;
      *(&v119 - 2) = (uint64_t)v52;
      v62 = (uint64_t)v131;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v119 - 6, v137);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v52, v58);
      (*((void (**)(char *, uint64_t))v141 + 1))(v40, v57);
      sub_100893644(v62);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v87 = v133;
      swift_beginAccess(v133 + 16, &v143, 1, 0);
      v88 = *(_QWORD *)(v87 + 16);
      *(_QWORD *)(v87 + 16) = 0;
      swift_errorRelease(v88);
      dispatch_group_leave(v132);
      sub_1000126B0(v62, type metadata accessor for BeaconStoreFileRecord);
      v89 = v136;
    }
    return swift_release(v89);
  }
  else
  {

    result = swift_release(v133);
    __break(1u);
  }
  return result;
}

_QWORD *sub_10085B9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v29 = type metadata accessor for BeaconObservation(0);
  v5 = __chkstk_darwin(v29);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)v25 - v9;
  result = _swiftEmptyArrayStorage;
  v30 = _swiftEmptyArrayStorage;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return result;
  v25[1] = v2;
  v13 = 0;
  v14 = *(_QWORD *)(v8 + 72);
  v28 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v15 = a1 + v28;
  v16 = _swiftEmptyArrayStorage;
  v26 = v15;
  v27 = v12;
  while (1)
  {
    result = (_QWORD *)sub_10005972C(v15 + v14 * v13, (uint64_t)v10, type metadata accessor for BeaconObservation);
    v17 = *(_QWORD *)(a2 + 16);
    if (v17)
    {
      v18 = qword_100E51820[v10[*(int *)(v29 + 24)]];
      if (qword_100E51820[*(char *)(a2 + 32)] == v18)
      {
LABEL_7:
        v19 = (uint64_t)v7;
        sub_1000126EC((uint64_t)v10, (uint64_t)v7, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          sub_10009AAC8(0, v16[2] + 1, 1);
        v16 = v30;
        v21 = v30[2];
        v20 = v30[3];
        if (v21 >= v20 >> 1)
        {
          sub_10009AAC8(v20 > 1, v21 + 1, 1);
          v16 = v30;
        }
        v16[2] = v21 + 1;
        v22 = (uint64_t)v16 + v28 + v21 * v14;
        v7 = (char *)v19;
        sub_1000126EC(v19, v22, type metadata accessor for BeaconObservation);
        v15 = v26;
        v12 = v27;
        goto LABEL_4;
      }
      if (v17 != 1)
        break;
    }
LABEL_3:
    sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconObservation);
LABEL_4:
    if (++v13 == v12)
      return v30;
  }
  v23 = 33;
  while (1)
  {
    v24 = v23 - 31;
    if (__OFADD__(v23 - 32, 1))
      break;
    if (qword_100E51820[*(char *)(a2 + v23)] == v18)
      goto LABEL_7;
    ++v23;
    if (v24 == v17)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_10085BBD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  int64_t v13;
  _QWORD *v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t i;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29[2];
  uint64_t v30;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 56);
  v24 = a1 + 56;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v25 = (unint64_t)(v9 + 63) >> 6;
  v30 = a1;
  v12 = swift_bridgeObjectRetain(a1);
  v13 = 0;
  v14 = _swiftEmptyArrayStorage;
  if (v11)
    goto LABEL_29;
LABEL_6:
  v15 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
  }
  else
  {
    if (v15 >= v25)
      goto LABEL_30;
    v16 = *(_QWORD *)(v24 + 8 * v15);
    ++v13;
    if (v16)
      goto LABEL_21;
    v13 = v15 + 1;
    if (v15 + 1 >= v25)
      goto LABEL_30;
    v16 = *(_QWORD *)(v24 + 8 * v13);
    if (v16)
      goto LABEL_21;
    v13 = v15 + 2;
    if (v15 + 2 >= v25)
      goto LABEL_30;
    v16 = *(_QWORD *)(v24 + 8 * v13);
    if (v16)
      goto LABEL_21;
    v13 = v15 + 3;
    if (v15 + 3 >= v25)
      goto LABEL_30;
    v16 = *(_QWORD *)(v24 + 8 * v13);
    if (v16)
      goto LABEL_21;
    v17 = v15 + 4;
    if (v17 >= v25)
    {
LABEL_30:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56))(v7, 1, 1, v2, v12);
LABEL_31:
      swift_release(v30);
      return;
    }
    v16 = *(_QWORD *)(v24 + 8 * v17);
    if (v16)
    {
      v13 = v17;
LABEL_21:
      v11 = (v16 - 1) & v16;
      for (i = __clz(__rbit64(v16)) + (v13 << 6); ; i = v22 | (v13 << 6))
      {
        (*(void (**)(char *, unint64_t, uint64_t, __n128))(v3 + 16))(v7, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v3 + 72) * i, v2, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v7, 0, 1, v2);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
          break;
        v19 = (uint64_t)v26;
        (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v26, v7, v2);
        sub_10080B648(v19, (uint64_t)&v27);
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v19, v2);
        if (v28)
        {
          sub_10000F9FC(&v27, (uint64_t)v29);
          sub_10000F9FC(v29, (uint64_t)&v27);
          if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
            v14 = sub_10001BC00(0, v14[2] + 1, 1, v14);
          v21 = v14[2];
          v20 = v14[3];
          if (v21 >= v20 >> 1)
            v14 = sub_10001BC00((_QWORD *)(v20 > 1), v21 + 1, 1, v14);
          v14[2] = v21 + 1;
          sub_10000F9FC(&v27, (uint64_t)&v14[5 * v21 + 4]);
          if (!v11)
            goto LABEL_6;
        }
        else
        {
          sub_100004048((uint64_t)&v27, (uint64_t *)&unk_1010EE310);
          if (!v11)
            goto LABEL_6;
        }
LABEL_29:
        v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
      }
      goto LABEL_31;
    }
    while (1)
    {
      v13 = v17 + 1;
      if (__OFADD__(v17, 1))
        break;
      if (v13 >= v25)
        goto LABEL_30;
      v16 = *(_QWORD *)(v24 + 8 * v13);
      ++v17;
      if (v16)
        goto LABEL_21;
    }
  }
  __break(1u);
}

void *sub_10085BF3C(uint64_t a1, char a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v25;
  unsigned __int8 v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE v47[12];
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[5];
  _QWORD v52[5];

  v48 = a3;
  LODWORD(v49) = a4;
  v6 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v6);
  v8 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v9);
  v11 = &v47[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v47[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v47[-v18];
  v52[3] = v17;
  v52[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v20 = sub_100018F08(v52);
  sub_10005972C(a1, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
  sub_100030784((uint64_t)v52, (uint64_t)v51);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v22 = swift_dynamicCast(v11, v51, v21, v12, 6);
  v23 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (!v22)
  {
    v23(v11, 1, 1, v12);
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F47C0);
    goto LABEL_16;
  }
  v23(v11, 0, 1, v12);
  sub_1000126EC((uint64_t)v11, (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
  sub_10005972C((uint64_t)&v19[*(int *)(v12 + 24)], (uint64_t)v8, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if (EnumCaseMultiPayload == 2)
  {
    v30 = sub_10001A9A8(&qword_101106F40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = &v8[*(int *)(v30 + 96)];
    v32 = *v31;
    v33 = v31[1];
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
    {
      v27 = a2 & 1;
      v28 = v48 & 1;
      v29 = v49 & 1;
      v26 = v32;
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    v34 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v8, v34);
LABEL_16:
    v44 = &_swiftEmptySetSingleton;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 3)
  {
    if (qword_1010E9F90 != -1)
      swift_once(&qword_1010E9F90, sub_1007FA7C0);
    v35 = type metadata accessor for Logger(0);
    sub_10001A9E8(v35, (uint64_t)qword_1011B7818);
    v36 = sub_10005972C((uint64_t)v19, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(32, -1);
      v49 = v40;
      *(_DWORD *)v39 = 141558275;
      v50 = 1752392040;
      v51[0] = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2081;
      sub_100C6ED38();
      v50 = sub_100016940(v41, v42, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "nearbyParts: Invalid stableIdentifier %{private,mask.hash}s", (uint8_t *)v39, 0x16u);
      v43 = v49;
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
    }

    sub_1000126B0((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    sub_1000126B0((uint64_t)v8, type metadata accessor for StableIdentifier);
    goto LABEL_16;
  }
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F46F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = v8[*(int *)(v25 + 96)];
  v27 = a2 & 1;
  v28 = v48 & 1;
  v29 = v49 & 1;
LABEL_13:
  v44 = sub_1000AF518(v26, v27, v28, v29);
  sub_1000126B0((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
  v45 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v8, v45);
LABEL_17:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
  return v44;
}

uint64_t sub_10085C454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = type metadata accessor for OwnedBeaconRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v22 = (uint64_t)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v7);
  v11 = (char *)&v19 - v10;
  v12 = _swiftEmptyArrayStorage;
  v23 = _swiftEmptyArrayStorage;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v13 = 0;
    v19 = a2;
    v20 = a1;
    while (v13 < *(_QWORD *)(a1 + 16))
    {
      v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v15 = *(_QWORD *)(v6 + 72);
      sub_10005972C(a1 + v14 + v15 * v13, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      v16 = sub_1008307AC((uint64_t)v11, a2);
      if (v2)
      {
        sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
        swift_release(v12);
        swift_bridgeObjectRelease();
        return (uint64_t)v12;
      }
      if (v16)
      {
        sub_1000126EC((uint64_t)v11, v22, type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
          sub_10009A680(0, v12[2] + 1, 1);
        v12 = v23;
        v18 = v23[2];
        v17 = v23[3];
        if (v18 >= v17 >> 1)
        {
          sub_10009A680(v17 > 1, v18 + 1, 1);
          v12 = v23;
        }
        v12[2] = v18 + 1;
        result = sub_1000126EC(v22, (uint64_t)v12 + v14 + v18 * v15, type metadata accessor for OwnedBeaconRecord);
        a2 = v19;
        a1 = v20;
      }
      else
      {
        result = sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      }
      if (v21 == ++v13)
      {
        v12 = v23;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

_QWORD *sub_10085C654(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _BYTE v62[40];
  _QWORD v63[6];

  v60 = (char *)a7;
  v61 = a1;
  v57 = a5;
  v54 = a3;
  v55 = a4;
  v53 = a2;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v8);
  v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnedBeaconGroup(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v17 - 8);
  v59 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v20);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for OwnedBeaconRecord(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63[3] = a6;
  v63[4] = v60;
  v27 = sub_100018F08(v63);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16))(v27, v61, a6);
  sub_100030784((uint64_t)v63, (uint64_t)v62);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v29 = swift_dynamicCast(v22, v62, v28, v23, 6);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  if (v29)
  {
    v31 = v11;
    v60 = v13;
    v61 = v10;
    v33 = (uint64_t)v56;
    v32 = v57;
    v30(v22, 0, 1, v23);
    sub_1000126EC((uint64_t)v22, (uint64_t)v26, type metadata accessor for OwnedBeaconRecord);
    sub_10000F9B8((uint64_t)&v26[*(int *)(v23 + 28)], (uint64_t)v16, &qword_1010ED860);
    v35 = v58;
    v34 = v59;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v16, 1, v59) == 1)
    {
      sub_100004048((uint64_t)v16, &qword_1010ED860);
      v36 = (uint64_t)v26;
    }
    else
    {
      v52 = v26;
      v37 = v19;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v19, v16, v34);
      v38 = v32;
      sub_10081EDA8((uint64_t)v19, v33);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v33, 1, v61) != 1)
      {
        v41 = (uint64_t)v60;
        sub_1000126EC(v33, (uint64_t)v60, type metadata accessor for OwnedBeaconGroup);
        v42 = (uint64_t)v52;
        v43 = sub_10085BF3C((uint64_t)v52, v53 & 1, v54 & 1, v55 & 1);
        sub_10036AC6C();
        v45 = v44;
        swift_retain();
        v46 = v32;
        v47 = v35;
        sub_10085D4FC(v45, v46, (uint64_t *)&unk_1010F47C0, type metadata accessor for OwnedBeaconRecord, (void (*)(char *))sub_10080B950, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1007C8520);
        v49 = v48;
        swift_bridgeObjectRelease();
        swift_release(v38);
        v50 = sub_10085C454(v49, (uint64_t)v43);
        swift_bridgeObjectRelease();
        v39 = sub_1000178D0(v50);
        swift_bridgeObjectRelease();
        sub_1000126B0(v41, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v34);
        sub_1000126B0(v42, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_9;
      }
      sub_100004048(v33, (uint64_t *)&unk_1010FF7F0);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v34);
      v36 = (uint64_t)v52;
    }
    sub_1000126B0(v36, type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
    v30(v22, 1, 1, v23);
    sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F47C0);
  }
  v39 = _swiftEmptyArrayStorage;
LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
  return v39;
}

double sub_10085CA9C(uint64_t a1, double a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v12;
  double v13;

  v2 = a2;
  if (a2 < 4.0)
  {
    v3 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v4 = qword_1011B7D38;
    v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v6 = swift_allocObject(v5, 112, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v6 + 56) = &type metadata for Double;
    *(_QWORD *)(v6 + 64) = &protocol witness table for Double;
    *(double *)(v6 + 32) = v2;
    *(_QWORD *)(v6 + 96) = &type metadata for Double;
    *(_QWORD *)(v6 + 104) = &protocol witness table for Double;
    *(_QWORD *)(v6 + 72) = 0x4010000000000000;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "txPower too low %f  -- clamping to %f", v12, v13);
    v2 = 4.0;
LABEL_9:
    swift_bridgeObjectRelease();
    return v2;
  }
  if (a2 > 20.0)
  {
    v7 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v8 = qword_1011B7D38;
    v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v10 = swift_allocObject(v9, 112, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v10 + 56) = &type metadata for Double;
    *(_QWORD *)(v10 + 64) = &protocol witness table for Double;
    *(double *)(v10 + 32) = v2;
    *(_QWORD *)(v10 + 96) = &type metadata for Double;
    *(_QWORD *)(v10 + 104) = &protocol witness table for Double;
    *(_QWORD *)(v10 + 72) = 0x4034000000000000;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "txPower too high %f  -- clamping to %f", v12, v13);
    v2 = 20.0;
    goto LABEL_9;
  }
  return v2;
}

_QWORD *sub_10085CC50(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v3 = v2;
  v63 = type metadata accessor for URL(0);
  v70 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v62 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10001A9A8(&qword_1010EC868);
  __chkstk_darwin(v61);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MemberPeerTrust(0);
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  __chkstk_darwin(v9);
  v52 = (uint64_t)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_101109310);
  v50 = *(_QWORD *)(v11 - 8);
  v51 = v11;
  v12 = __chkstk_darwin(v11);
  v57 = (uint64_t)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v49 = (uint64_t)v47 - v15;
  __chkstk_darwin(v14);
  v48 = (uint64_t)v47 - v16;
  v58 = *(_QWORD *)(a1 + 16);
  if (!v58)
    return _swiftEmptyArrayStorage;
  v56 = type metadata accessor for MemberSharingCircle(0);
  v17 = *(_QWORD *)(v56 - 8);
  v18 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v19 = qword_1010EA170;
  v47[1] = a1;
  swift_bridgeObjectRetain(a1);
  if (v19 != -1)
LABEL_17:
    swift_once(&qword_1010EA170, sub_100AB843C);
  v20 = 0;
  v21 = *((_QWORD *)a2 + 20);
  v54 = *(_QWORD *)(v17 + 72);
  v55 = v21;
  v22 = _swiftEmptyArrayStorage;
  v53 = (void *)0x8000000100ED68C0;
  do
  {
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    v64 = v20 + 1;
    v65 = v20;
    v26 = *(int *)(v56 + 32);
    v69 = v3;
    v67 = v22;
    v68 = v18 + v26;
    v66 = v18;
    v27 = v63;
    v28 = sub_10001A9E8(v63, (uint64_t)qword_1011B7BC0);
    v29 = v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v62, v28, v27);
    v30._countAndFlagsBits = 0xD000000000000014;
    v30._object = v53;
    prohibitAsyncContext(functionName:)(v30);
    v31 = v60;
    v71 = v60;
    v32 = sub_10001A9A8(&qword_1010ECA68);
    v33 = v8;
    v34 = String.init<A>(describing:)(&v71, v32);
    v36 = v35;
    v17 = (unint64_t)objc_autoreleasePoolPush();
    a2 = *(char **)(v55 + 16);
    __chkstk_darwin(v17);
    v37 = v68;
    v38 = v69;
    v47[-6] = v39;
    v47[-5] = v37;
    v47[-4] = v29;
    v47[-3] = v34;
    v8 = v33;
    v47[-2] = v36;
    OS_dispatch_queue.sync<A>(execute:)(sub_1008801AC, &v47[-8], v61);
    v3 = v38;
    objc_autoreleasePoolPop((void *)v17);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v29, v27);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v8, 1, v31) == 1)
    {
      sub_100004048((uint64_t)v8, &qword_1010EC868);
      v24 = v65;
      v23 = v66;
      v22 = v67;
      v25 = v64;
    }
    else
    {
      v40 = v52;
      sub_1000126EC((uint64_t)v8, v52, type metadata accessor for MemberPeerTrust);
      v41 = v49;
      v42 = v49 + *(int *)(v51 + 48);
      sub_1000126EC(v40, v49, type metadata accessor for MemberPeerTrust);
      v43 = v66;
      sub_10005972C(v66, v42, type metadata accessor for MemberSharingCircle);
      v44 = v48;
      sub_100005CF0(v41, v48, (uint64_t *)&unk_101109310);
      sub_100005CF0(v44, v57, (uint64_t *)&unk_101109310);
      v22 = v67;
      v23 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
        v22 = (_QWORD *)sub_1007CA42C(0, v22[2] + 1, 1, (unint64_t)v22);
      v25 = v64;
      v24 = v65;
      v17 = v22[2];
      v45 = v22[3];
      a2 = (char *)(v17 + 1);
      if (v17 >= v45 >> 1)
        v22 = (_QWORD *)sub_1007CA42C(v45 > 1, v17 + 1, 1, (unint64_t)v22);
      v22[2] = a2;
      sub_100005CF0(v57, (uint64_t)v22+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v17, (uint64_t *)&unk_101109310);
    }
    v20 = v24 + 1;
    v18 = v23 + v54;
  }
  while (v25 != v58);
  swift_bridgeObjectRelease();
  return v22;
}

_QWORD *sub_10085D120(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;

  v55 = a2;
  v56 = a3;
  v5 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for OwnedBeaconRecord(0);
  v8 = __chkstk_darwin(v59);
  v54 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v48 - v11;
  result = _swiftEmptyArrayStorage;
  v62 = _swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v58 = v7 + 8;
    v15 = *(unsigned __int8 *)(v10 + 80);
    v16 = *(_QWORD *)(v10 + 72);
    v48 = v3;
    v49 = (v15 + 32) & ~v15;
    v17 = a1 + v49;
    v53 = v5;
    v57 = v16;
    while (1)
    {
      sub_10005972C(v17, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C((uint64_t)&v12[*(int *)(v59 + 24)], (uint64_t)v7, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v5);
      if (EnumCaseMultiPayload == 3)
      {
        v23 = sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v24 = &v7[*(int *)(v23 + 80)];
        v26 = *(_QWORD *)v24;
        v25 = *((_QWORD *)v24 + 1);
        v60 = v26;
        v61 = v25;
      }
      else
      {
        if (EnumCaseMultiPayload != 2)
        {
          sub_1000126B0((uint64_t)v7, type metadata accessor for StableIdentifier);
          goto LABEL_18;
        }
        v19 = sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 = &v7[*(int *)(v19 + 80)];
        v21 = *(_QWORD *)v20;
        v22 = *((_QWORD *)v20 + 1);
        v16 = v57;
        swift_bridgeObjectRelease();
        v60 = v21;
        v61 = v22;
      }
      v27 = sub_1000330C8();
      v29 = Data.init<A>(hexString:)(&v60, &type metadata for String, v27, v28);
      if (v30 >> 60 == 15)
        goto LABEL_10;
      v31 = v29;
      v32 = v30;
      v60 = v29;
      v61 = v30;
      v33 = sub_100035530();
      if ((DataProtocol.isNull.getter(&type metadata for Data, v33) & 1) != 0)
        break;
      v35 = Data.trimmed.getter(v31, v32);
      v50 = v36;
      v51 = v35;
      v37 = v55;
      v38 = v56;
      sub_10001BBBC(v55, v56);
      v39 = v35;
      v40 = v50;
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v39, v50);
      v52 = v41;
      v42 = v38;
      v16 = v57;
      sub_10001BC14(v37, v42);
      sub_10001EF3C(v31, v32);
      v43 = v40;
      v5 = v53;
      sub_10001BC14(v51, v43);
      v44 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v7, v44);
      if ((v52 & 1) != 0)
      {
        sub_1000126EC((uint64_t)v12, v54, type metadata accessor for OwnedBeaconRecord);
        v45 = v62;
        if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0)
        {
          sub_10009A680(0, v45[2] + 1, 1);
          v45 = v62;
        }
        v47 = v45[2];
        v46 = v45[3];
        if (v47 >= v46 >> 1)
        {
          sub_10009A680(v46 > 1, v47 + 1, 1);
          v45 = v62;
        }
        v45[2] = v47 + 1;
        sub_1000126EC(v54, (uint64_t)v45 + v49 + v47 * v16, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_19;
      }
LABEL_18:
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
LABEL_19:
      v17 += v16;
      if (!--v14)
        return v62;
    }
    sub_10001EF3C(v31, v32);
LABEL_10:
    v34 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v7, v34);
    goto LABEL_18;
  }
  return result;
}

void sub_10085D4FC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD), void (*a5)(char *), uint64_t (*a6)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t (*v36)(_QWORD);
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(_QWORD, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD);
  _QWORD *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *);
  uint64_t v52;

  v41 = a6;
  v50 = a2;
  v51 = a5;
  v48 = a3;
  v8 = sub_10001A9A8(a3);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a4;
  v49 = a4(0);
  v52 = *(_QWORD *)(v49 - 8);
  v11 = __chkstk_darwin(v49);
  v43 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v42 = (uint64_t)&v39 - v13;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v18);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 56);
  v46 = a1 + 56;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v47 = (unint64_t)(v22 + 63) >> 6;
  v25 = swift_bridgeObjectRetain(a1);
  v26 = 0;
  v45 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v24)
    {
      v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v28 = v27 | (v26 << 6);
      goto LABEL_22;
    }
    v29 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v29 >= v47)
      goto LABEL_30;
    v30 = *(_QWORD *)(v46 + 8 * v29);
    ++v26;
    if (!v30)
    {
      v26 = v29 + 1;
      if (v29 + 1 >= v47)
        goto LABEL_30;
      v30 = *(_QWORD *)(v46 + 8 * v26);
      if (!v30)
      {
        v26 = v29 + 2;
        if (v29 + 2 >= v47)
          goto LABEL_30;
        v30 = *(_QWORD *)(v46 + 8 * v26);
        if (!v30)
        {
          v26 = v29 + 3;
          if (v29 + 3 >= v47)
            goto LABEL_30;
          v30 = *(_QWORD *)(v46 + 8 * v26);
          if (!v30)
            break;
        }
      }
    }
LABEL_21:
    v24 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v26 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v15 + 16))(v20, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v15 + 72) * v28, v14, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
      goto LABEL_31;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
    v51(v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v10, 1, v49) == 1)
    {
      sub_100004048((uint64_t)v10, v48);
    }
    else
    {
      v32 = v42;
      sub_1000126EC((uint64_t)v10, v42, v44);
      sub_1000126EC(v32, v43, v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
        v45 = (_QWORD *)v41(0, v45[2] + 1, 1);
      v34 = v45[2];
      v33 = v45[3];
      v35 = v34 + 1;
      if (v34 >= v33 >> 1)
      {
        v40 = v34 + 1;
        v38 = ((uint64_t (*)(BOOL, unint64_t, uint64_t, _QWORD *))v41)(v33 > 1, v34 + 1, 1, v45);
        v35 = v40;
        v45 = (_QWORD *)v38;
      }
      v36 = v44;
      v37 = v45;
      v45[2] = v35;
      sub_1000126EC(v43, (uint64_t)v37+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v34, v36);
    }
  }
  v31 = v29 + 4;
  if (v31 >= v47)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v20, 1, 1, v14, v25);
LABEL_31:
    swift_release(a1);
    return;
  }
  v30 = *(_QWORD *)(v46 + 8 * v31);
  if (v30)
  {
    v26 = v31;
    goto LABEL_21;
  }
  while (1)
  {
    v26 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v26 >= v47)
      goto LABEL_30;
    v30 = *(_QWORD *)(v46 + 8 * v26);
    ++v31;
    if (v30)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

_QWORD *sub_10085D940(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, __n128))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v17)(_QWORD, _QWORD, __n128);

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v5 = sub_10001A9A8(&qword_1011118F0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v8 = *(_QWORD *)(v6 + 72);
  v9 = swift_bridgeObjectRetain(a1);
  v10 = _swiftEmptyArrayStorage;
  v17 = a2;
  do
  {
    v11 = a2(v7, v7 + *(int *)(v5 + 48), v9);
    if ((v12 & 1) == 0)
    {
      v13 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        v10 = sub_1007C9608(0, v10[2] + 1, 1, v10);
      v15 = v10[2];
      v14 = v10[3];
      if (v15 >= v14 >> 1)
        v10 = sub_1007C9608((_QWORD *)(v14 > 1), v15 + 1, 1, v10);
      v10[2] = v15 + 1;
      v10[v15 + 4] = v13;
      a2 = v17;
    }
    v7 += v8;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10085DA88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;

  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10005972C(a1 + *(int *)(v8 + 24), (uint64_t)v7, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v5);
  if (EnumCaseMultiPayload == 3)
  {
    v11 = sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = &v7[*(int *)(v11 + 80)];
    v10 = *(_QWORD *)v12;
    v13 = *((_QWORD *)v12 + 1);
  }
  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v10 = *((_QWORD *)v7 + 4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1000126B0((uint64_t)v7, type metadata accessor for StableIdentifier);
        return 0;
      }
      return v10;
    }
    v14 = sub_10001A9A8(&qword_101106F40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = &v7[*(int *)(v14 + 80)];
    v10 = *(_QWORD *)v15;
    v13 = *((_QWORD *)v15 + 1);
    swift_bridgeObjectRelease();
  }
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v7, v16);
  v31 = v10;
  v32 = v13;
  v17 = sub_1000330C8();
  v18 = swift_bridgeObjectRetain(v13);
  v19 = Data.init<A>(hexString:)(&v31, &type metadata for String, v17, v18);
  if (v20 >> 60 != 15)
  {
    v21 = v19;
    v22 = v20;
    v31 = v19;
    v32 = v20;
    v23 = sub_100035530();
    if ((DataProtocol.isNull.getter(&type metadata for Data, v23) & 1) == 0)
    {
      v24 = Data.trimmed.getter(v21, v22);
      v26 = v25;
      v27 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v27);
      v28 = String.init(data:encoding:)(v24, v26, v4);
      if (!v29)
        v28 = Data.hexString.getter(v24, v26);
      v10 = v28;
      sub_10001BC14(v24, v26);
    }
    sub_10001EF3C(v21, v22);
  }
  return v10;
}

uint64_t sub_10085DD20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10005972C(a1 + *(int *)(v5 + 24), (uint64_t)v4, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  switch(EnumCaseMultiPayload)
  {
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return -1;
    case 3:
      v12 = sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v4[*(int *)(v12 + 96)];
      break;
    case 2:
      v7 = sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = &v4[*(int *)(v7 + 96)];
      v9 = *v8;
      v10 = v8[1];
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
      {
        v11 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v4, v11);
        return -1;
      }
      break;
    default:
      sub_1000126B0((uint64_t)v4, type metadata accessor for StableIdentifier);
      return -1;
  }
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v4, v13);
  return v9;
}

uint64_t sub_10085DEF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1007FE45C();
  *a1 = result;
  return result;
}

void sub_10085DF1C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100820584(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

_QWORD *sub_10085DF34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v60;
  uint64_t v62;
  char *v63;
  __n128 v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v67;
  void *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v77 = a2;
  v76 = type metadata accessor for URL(0);
  v85 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v75 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_10001A9A8(&qword_1010EC868);
  __chkstk_darwin(v74);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for MemberPeerTrust(0);
  v80 = *(_QWORD *)(v84 - 8);
  v7 = __chkstk_darwin(v84);
  v73 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v65 = (uint64_t)&v62 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v87 = (char *)&v62 - v15;
  v16 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v16);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 16);
  v62 = a1;
  if (v19)
  {
    v86 = v2;
    v20 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v69 = *(_QWORD *)(v11 + 72);
    v79 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v21 = swift_bridgeObjectRetain(a1);
    v81 = _swiftEmptyArrayStorage;
    v68 = (void *)0x8000000100ED68C0;
    v21.n128_u64[0] = 141558275;
    v64 = v21;
    v63 = (char *)&type metadata for Any + 8;
    v22 = v87;
    v78 = v6;
    v71 = v11;
    v72 = v10;
    v70 = v18;
    v67 = v14;
    while (1)
    {
      v83 = v20;
      v79(v18, v20, v10);
      v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v66)(v18, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 1, v10) == 1)
        break;
      v82 = v19;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v22, v18, v10);
      v25 = *(_QWORD *)(v77 + 160);
      if (qword_1010EA170 != -1)
        swift_once(&qword_1010EA170, sub_100AB843C);
      v26 = v76;
      v27 = sub_10001A9E8(v76, (uint64_t)qword_1011B7BC0);
      v28 = v75;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v75, v27, v26);
      v29._countAndFlagsBits = 0xD000000000000014;
      v29._object = v68;
      prohibitAsyncContext(functionName:)(v29);
      v30 = v84;
      v88 = v84;
      v31 = sub_10001A9A8(&qword_1010ECA68);
      v32 = String.init<A>(describing:)(&v88, v31);
      v34 = v33;
      v35 = objc_autoreleasePoolPush();
      __chkstk_darwin(v35);
      v37 = v86;
      v36 = v87;
      *(&v62 - 6) = v25;
      *(&v62 - 5) = (uint64_t)v36;
      *(&v62 - 4) = (uint64_t)v28;
      *(&v62 - 3) = v32;
      *(&v62 - 2) = v34;
      v38 = (uint64_t)v78;
      OS_dispatch_queue.sync<A>(execute:)(sub_1008801AC, &v62 - 8, v74);
      v86 = v37;
      objc_autoreleasePoolPop(v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v85 + 8))(v28, v26);
      v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
      if (v39(v38, 1, v30) == 1)
      {
        v11 = v71;
        v10 = v72;
        v40 = v67;
        if (qword_1010E9938 != -1)
          swift_once(&qword_1010E9938, sub_1000AFBB0);
        v41 = type metadata accessor for Logger(0);
        sub_10001A9E8(v41, (uint64_t)qword_1011B6748);
        v22 = v87;
        v42 = ((uint64_t (*)(char *, char *, uint64_t))v79)(v40, v87, v10);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.error.getter(v43);
        if (os_log_type_enabled(v43, v44))
        {
          v45 = swift_slowAlloc(22, -1);
          v46 = swift_slowAlloc(32, -1);
          v88 = v46;
          *(_DWORD *)v45 = v64.n128_u32[0];
          *(_QWORD *)(v45 + 4) = 1752392040;
          *(_WORD *)(v45 + 12) = 2081;
          v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v48 = dispatch thunk of CustomStringConvertible.description.getter(v10, v47);
          *(_QWORD *)(v45 + 14) = sub_100016940(v48, v49, &v88);
          swift_bridgeObjectRelease();
          v50 = *(void (**)(char *, uint64_t))(v11 + 8);
          v50(v67, v10);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "No peerTrust record to delete for peerTrustIdentifier: %{private,mask.hash}s.", (uint8_t *)v45, 0x16u);
          swift_arrayDestroy(v46, 1, v63);
          swift_slowDealloc(v46, -1, -1);
          v51 = v45;
          v38 = (uint64_t)v78;
          swift_slowDealloc(v51, -1, -1);
        }
        else
        {
          v50 = *(void (**)(char *, uint64_t))(v11 + 8);
          v50(v40, v10);
        }

        v50(v22, v10);
      }
      else
      {
        v11 = v71;
        v10 = v72;
        v22 = v87;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v87, v72);
      }
      v52 = v39(v38, 1, v84) == 1;
      v18 = v70;
      if (v52)
      {
        sub_100004048(v38, &qword_1010EC868);
        v24 = v82;
      }
      else
      {
        v53 = v65;
        sub_1000126EC(v38, v65, type metadata accessor for MemberPeerTrust);
        sub_1000126EC(v53, v73, type metadata accessor for MemberPeerTrust);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v81);
        v24 = v82;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v81 = (_QWORD *)sub_1007C8874(0, v81[2] + 1, 1, (unint64_t)v81);
        v56 = v81[2];
        v55 = v81[3];
        v22 = v87;
        if (v56 >= v55 >> 1)
          v81 = (_QWORD *)sub_1007C8874(v55 > 1, v56 + 1, 1, (unint64_t)v81);
        v57 = v80;
        v58 = v81;
        v81[2] = v56 + 1;
        sub_1000126EC(v73, (uint64_t)v58+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(_QWORD *)(v57 + 72) * v56, type metadata accessor for MemberPeerTrust);
      }
      v20 = v83 + v69;
      v19 = v24 - 1;
      if (!v19)
      {
        v66(v18, 1, 1, v10, v23);
        break;
      }
    }
  }
  else
  {
    v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
    v60 = swift_bridgeObjectRetain(a1);
    v81 = _swiftEmptyArrayStorage;
    v59(v18, 1, 1, v10, v60);
  }
  swift_bridgeObjectRelease();
  return v81;
}

_QWORD *sub_10085E638(uint64_t a1, void (*a2)(_QWORD, _QWORD, __n128))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD, __n128);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  __chkstk_darwin(v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerPeerTrust(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v28 = (uint64_t)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v26 = (uint64_t)v23 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v23[1] = v2;
  v27 = sub_10001A9A8((uint64_t *)&unk_1011090F0);
  v14 = *(_QWORD *)(v27 - 8);
  v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v23[0] = a1;
  v17 = swift_bridgeObjectRetain(a1);
  v18 = _swiftEmptyArrayStorage;
  v24 = v8;
  v25 = a2;
  do
  {
    a2(v15, *(unsigned __int8 *)(v15 + *(int *)(v27 + 48)), v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010EE160);
    }
    else
    {
      v19 = v26;
      sub_1000126EC((uint64_t)v7, v26, type metadata accessor for OwnerPeerTrust);
      sub_1000126EC(v19, v28, type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
        v18 = (_QWORD *)sub_1007C8838(0, v18[2] + 1, 1, (unint64_t)v18);
      v21 = v18[2];
      v20 = v18[3];
      if (v21 >= v20 >> 1)
        v18 = (_QWORD *)sub_1007C8838(v20 > 1, v21 + 1, 1, (unint64_t)v18);
      v18[2] = v21 + 1;
      sub_1000126EC(v28, (uint64_t)v18+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v21, type metadata accessor for OwnerPeerTrust);
      v8 = v24;
      a2 = v25;
    }
    v15 += v16;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v18;
}

void sub_10085E898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t i;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v3 = v2;
  v61 = a2;
  v60 = type metadata accessor for URL(0);
  v69 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v59 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  __chkstk_darwin(v58);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for OwnerPeerTrust(0);
  v63 = *(_QWORD *)(v68 - 8);
  v8 = __chkstk_darwin(v68);
  v49 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v48 = (uint64_t)&v47 - v10;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 56);
  v51 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v52 = (unint64_t)(v19 + 63) >> 6;
  v64 = a1;
  v22 = swift_bridgeObjectRetain(a1);
  v23 = 0;
  v50 = _swiftEmptyArrayStorage;
  v56 = (void *)0x8000000100ED68C0;
  v57 = v7;
  v62 = v17;
  v54 = v12;
  v55 = v11;
  v53 = v14;
  if (!v21)
    goto LABEL_5;
LABEL_4:
  v24 = __clz(__rbit64(v21));
  v25 = (v21 - 1) & v21;
  for (i = v24 | (v23 << 6); ; i = __clz(__rbit64(v28)) + (v23 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 16))(v17, *(_QWORD *)(v64 + 48) + *(_QWORD *)(v12 + 72) * i, v11, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
      goto LABEL_35;
    v66 = v25;
    v67 = v23;
    v65 = v3;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    v30 = *(_QWORD *)(v61 + 160);
    if (qword_1010E9A10 != -1)
      swift_once(&qword_1010E9A10, sub_1001EB610);
    v31 = v60;
    v32 = sub_10001A9E8(v60, (uint64_t)qword_1011B6A90);
    v33 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v59, v32, v31);
    v34._countAndFlagsBits = 0xD000000000000014;
    v34._object = v56;
    prohibitAsyncContext(functionName:)(v34);
    v70 = v68;
    v35 = sub_10001A9A8(&qword_1010ECA60);
    v36 = String.init<A>(describing:)(&v70, v35);
    v38 = v37;
    v39 = objc_autoreleasePoolPush();
    __chkstk_darwin(v39);
    v14 = v53;
    *(&v47 - 6) = v30;
    *(&v47 - 5) = (uint64_t)v14;
    *(&v47 - 4) = (uint64_t)v33;
    *(&v47 - 3) = v36;
    *(&v47 - 2) = v38;
    v40 = (uint64_t)v57;
    v41 = v65;
    OS_dispatch_queue.sync<A>(execute:)(sub_1008802A0, &v47 - 8, v58);
    v3 = v41;
    objc_autoreleasePoolPop(v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v33, v31);
    v12 = v54;
    v11 = v55;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v55);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v40, 1, v68) == 1)
    {
      sub_100004048(v40, (uint64_t *)&unk_1010EE160);
      v17 = v62;
    }
    else
    {
      v42 = v48;
      sub_1000126EC(v40, v48, type metadata accessor for OwnerPeerTrust);
      sub_1000126EC(v42, v49, type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
        v50 = (_QWORD *)sub_1007C8838(0, v50[2] + 1, 1, (unint64_t)v50);
      v17 = v62;
      v44 = v50[2];
      v43 = v50[3];
      if (v44 >= v43 >> 1)
        v50 = (_QWORD *)sub_1007C8838(v43 > 1, v44 + 1, 1, (unint64_t)v50);
      v45 = v49;
      v46 = v50;
      v50[2] = v44 + 1;
      sub_1000126EC(v45, (uint64_t)v46+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(_QWORD *)(v63 + 72) * v44, type metadata accessor for OwnerPeerTrust);
    }
    v21 = v66;
    v23 = v67;
    if (v66)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v23++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v23 >= v52)
      goto LABEL_34;
    v28 = *(_QWORD *)(v51 + 8 * v23);
    if (!v28)
      break;
LABEL_17:
    v25 = (v28 - 1) & v28;
  }
  v29 = v23 + 1;
  if (v23 + 1 >= v52)
    goto LABEL_34;
  v28 = *(_QWORD *)(v51 + 8 * v29);
  if (v28)
    goto LABEL_16;
  v29 = v23 + 2;
  if (v23 + 2 >= v52)
    goto LABEL_34;
  v28 = *(_QWORD *)(v51 + 8 * v29);
  if (v28)
    goto LABEL_16;
  v29 = v23 + 3;
  if (v23 + 3 >= v52)
    goto LABEL_34;
  v28 = *(_QWORD *)(v51 + 8 * v29);
  if (v28)
    goto LABEL_16;
  v29 = v23 + 4;
  if (v23 + 4 >= v52)
  {
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v12 + 56))(v17, 1, 1, v11, v22);
LABEL_35:
    swift_release();
    return;
  }
  v28 = *(_QWORD *)(v51 + 8 * v29);
  if (v28)
  {
LABEL_16:
    v23 = v29;
    goto LABEL_17;
  }
  while (1)
  {
    v23 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v23 >= v52)
      goto LABEL_34;
    v28 = *(_QWORD *)(v51 + 8 * v23);
    ++v29;
    if (v28)
      goto LABEL_17;
  }
LABEL_37:
  __break(1u);
}

void sub_10085EE68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v42 = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v5);
  v39 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v49 - 8);
  v8 = __chkstk_darwin(v49);
  v40 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v43 = (char *)&v36 - v10;
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 56);
  v37 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v38 = (unint64_t)(v15 + 63) >> 6;
  v41 = a1;
  v18 = swift_bridgeObjectRetain(a1);
  v19 = 0;
  v20 = (uint64_t)v39;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v22 = v21 | (v19 << 6);
      v23 = (uint64_t)v40;
      v24 = v49;
      goto LABEL_19;
    }
    v25 = __OFADD__(v19++, 1);
    v23 = (uint64_t)v40;
    if (v25)
    {
      __break(1u);
      goto LABEL_35;
    }
    v24 = v49;
    if (v19 >= v38)
      goto LABEL_33;
    v26 = *(_QWORD *)(v37 + 8 * v19);
    if (!v26)
      break;
LABEL_18:
    v17 = (v26 - 1) & v26;
    v22 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v13, *(_QWORD *)(v41 + 48) + *(_QWORD *)(v7 + 72) * v22, v24, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v24) == 1)
      goto LABEL_32;
    v28 = (uint64_t)v43;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v43, v13, v24);
    sub_10080B648(v28, (uint64_t)&v44);
    if (!v45)
    {
      sub_100004048((uint64_t)&v44, (uint64_t *)&unk_1010EE310);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v43, v24);
LABEL_32:
      swift_release(v41);
      return;
    }
    v29 = v13;
    sub_10000F9FC(&v44, (uint64_t)v46);
    v31 = v47;
    v30 = v48;
    sub_10001AA44(v46, v47);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v30 + 8) + 8) + 32))(v31);
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v32 = qword_1011B7160;
    a1 = (uint64_t)objc_autoreleasePoolPush();
    sub_10058DC14(v32, v23, 0, 0, &v44);
    if (v3)
      goto LABEL_36;
    v3 = 0;
    objc_autoreleasePoolPop((void *)a1);
    a1 = sub_10082B1AC(v20, v23, v44, 1);
    swift_bridgeObjectRelease();
    v33 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v34 = v23;
    v35 = v49;
    v33(v34, v49);
    sub_100004048(v20, (uint64_t *)&unk_1010EA690);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v46);
    v33((uint64_t)v43, v35);
    v13 = v29;
    if ((a1 & 1) == 0)
      goto LABEL_32;
  }
  v27 = v19 + 1;
  if (v19 + 1 >= v38)
    goto LABEL_33;
  v26 = *(_QWORD *)(v37 + 8 * v27);
  if (v26)
    goto LABEL_17;
  v27 = v19 + 2;
  if (v19 + 2 >= v38)
    goto LABEL_33;
  v26 = *(_QWORD *)(v37 + 8 * v27);
  if (v26)
    goto LABEL_17;
  v27 = v19 + 3;
  if (v19 + 3 >= v38)
    goto LABEL_33;
  v26 = *(_QWORD *)(v37 + 8 * v27);
  if (v26)
    goto LABEL_17;
  v27 = v19 + 4;
  if (v19 + 4 >= v38)
  {
LABEL_33:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56))(v13, 1, 1, v49, v18);
    swift_release(v41);
    return;
  }
  v26 = *(_QWORD *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    v19 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    v19 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v19 >= v38)
      goto LABEL_33;
    v26 = *(_QWORD *)(v37 + 8 * v19);
    ++v27;
    if (v26)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  objc_autoreleasePoolPop((void *)a1);
  __break(1u);
}

_QWORD *sub_10085F2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v5 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for OwnerSharingCircle(0);
  v8 = __chkstk_darwin(v32);
  v36 = (uint64_t)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v39 = (uint64_t)v31 - v11;
  result = _swiftEmptyArrayStorage;
  v42 = _swiftEmptyArrayStorage;
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v31[1] = v2;
    v13 = 0;
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v37 = *(_QWORD *)(v10 + 72);
    v33 = v14;
    v34 = a1 + v14;
    v41 = a2 + 56;
    v15 = a2;
    do
    {
      v38 = v13;
      sub_10005972C(v34 + v37 * v13, v39, type metadata accessor for OwnerSharingCircle);
      if (*(_QWORD *)(a2 + 16)
        && (v16 = v39 + *(int *)(v32 + 20),
            v17 = *(_QWORD *)(v15 + 40),
            v18 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v5, v18), v20 = -1 << *(_BYTE *)(v15 + 32), v21 = v19 & ~v20, ((*(_QWORD *)(v41 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0))
      {
        v22 = v15;
        v23 = ~v20;
        v24 = *(_QWORD *)(v40 + 72);
        v25 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
        while (1)
        {
          v25(v7, *(_QWORD *)(v22 + 48) + v24 * v21, v5);
          v26 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v27 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v16, v5, v26);
          (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v5);
          if ((v27 & 1) != 0)
            break;
          v21 = (v21 + 1) & v23;
          v22 = v15;
          if (((*(_QWORD *)(v41 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
            goto LABEL_10;
        }
        sub_1000126B0(v39, type metadata accessor for OwnerSharingCircle);
      }
      else
      {
LABEL_10:
        sub_1000126EC(v39, v36, type metadata accessor for OwnerSharingCircle);
        v28 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_10009A520(0, v28[2] + 1, 1);
          v28 = v42;
        }
        v30 = v28[2];
        v29 = v28[3];
        if (v30 >= v29 >> 1)
        {
          sub_10009A520(v29 > 1, v30 + 1, 1);
          v28 = v42;
        }
        v28[2] = v30 + 1;
        sub_1000126EC(v36, (uint64_t)v28 + v33 + v30 * v37, type metadata accessor for OwnerSharingCircle);
      }
      v13 = v38 + 1;
      a2 = v15;
    }
    while (v38 + 1 != v35);
    return v42;
  }
  return result;
}

_QWORD *sub_10085F610(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t (*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];
  _QWORD *v54;

  v52 = a2;
  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v45 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate(0);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  __chkstk_darwin(v6);
  v46 = (uint64_t *)((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = type metadata accessor for SharedBeaconRecord(0);
  v8 = __chkstk_darwin(v51);
  v50 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v40 - v11;
  result = _swiftEmptyArrayStorage;
  v54 = _swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v44 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueue;
    v40 = v2;
    v41 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper;
    v15 = *(_QWORD *)(v10 + 72);
    v42 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v16 = a1 + v42;
    v43 = enum case for DispatchPredicate.onQueue(_:);
    v17 = type metadata accessor for SharedBeaconRecord;
    v49 = (char *)&v40 - v11;
    while (1)
    {
      v18 = v17;
      sub_10005972C(v16, (uint64_t)v12, v17);
      v19 = *(void **)(v52 + v44);
      v21 = v46;
      v20 = v47;
      *v46 = v19;
      v22 = v48;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v21, v43, v48);
      v23 = v19;
      LOBYTE(v19) = _dispatchPreconditionTest(_:)(v21);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(v20 + 8))(v21, v22);
      if ((v19 & 1) == 0)
        break;
      v17 = v18;
      if (v12[*(int *)(v51 + 64)] != 1)
        goto LABEL_14;
      v24 = *(_QWORD *)(v52 + v41);
      v25 = *(int *)(v51 + 20);
      swift_beginAccess(v24 + 24, v53, 32, 0);
      v26 = *(_QWORD *)(v24 + 24);
      if (*(_QWORD *)(v26 + 16))
      {
        v27 = sub_100003FB0((uint64_t)&v12[v25]);
        if ((v28 & 1) != 0)
        {
          v29 = v27;
          v30 = *(_QWORD *)(v26 + 56);
          v31 = type metadata accessor for UUID(0);
          v32 = v45;
          v33 = *(_QWORD *)(v31 - 8);
          (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))(v45, v30 + *(_QWORD *)(v33 + 72) * v29, v31);
          v34 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56);
          v17 = v18;
          v34(v32, 0, 1, v31);
        }
        else
        {
          v31 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v45, 1, 1, v31);
        }
        v12 = v49;
      }
      else
      {
        v31 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v45, 1, 1, v31);
      }
      swift_endAccess(v53);
      type metadata accessor for UUID(0);
      v35 = (uint64_t)v45;
      v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v45, 1, v31);
      sub_100004048(v35, &qword_1010ED860);
      if (v36 != 1)
      {
        sub_1000126B0((uint64_t)v12, v17);
      }
      else
      {
LABEL_14:
        sub_1000126EC((uint64_t)v12, v50, v17);
        v37 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_10009A654(0, v37[2] + 1, 1);
          v37 = v54;
        }
        v39 = v37[2];
        v38 = v37[3];
        if (v39 >= v38 >> 1)
        {
          sub_10009A654(v38 > 1, v39 + 1, 1);
          v37 = v54;
        }
        v37[2] = v39 + 1;
        sub_1000126EC(v50, (uint64_t)v37 + v42 + v39 * v15, v17);
        v12 = v49;
      }
      v16 += v15;
      if (!--v14)
        return v54;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10085F9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;

  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v5);
  v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  __chkstk_darwin(v8);
  v41 = (uint64_t)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v53 - 8);
  v11 = __chkstk_darwin(v53);
  v52 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v48 = (char *)v40 - v13;
  v14 = sub_10001A9A8(&qword_1010ED3C8);
  v46 = *(_QWORD *)(v14 - 8);
  v47 = v14;
  __chkstk_darwin(v14);
  v54 = (_QWORD *)((char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  v17 = _swiftEmptyArrayStorage;
  if (!v16)
    return (uint64_t)v17;
  v43 = v7;
  v40[1] = v2;
  v55 = _swiftEmptyArrayStorage;
  sub_10009AE04(0, v16, 0);
  result = sub_1003B2D14(a1);
  v19 = result;
  v21 = v20;
  v23 = v22 & 1;
  v44 = a2;
  v45 = a1 + 56;
  v42 = a1;
  while ((v19 & 0x8000000000000000) == 0 && v19 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(v45 + (((unint64_t)v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      goto LABEL_18;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v21)
      goto LABEL_19;
    v51 = v23;
    v24 = v48;
    v25 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v48, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v10 + 72) * v19, v53);
    v26 = v10;
    v27 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v28 = (uint64_t)v52;
    v27(v52, v24, v25);
    v29 = (uint64_t)v54 + *(int *)(v47 + 48);
    v30 = (uint64_t)v43;
    sub_10080B950(v28, (uint64_t)v43);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v30, 1, v50) == 1)
    {
      v31 = sub_100004048(v30, (uint64_t *)&unk_1010F47C0);
      static Date.distantPast.getter(v31);
      v32 = 0;
    }
    else
    {
      v33 = v30;
      v34 = v41;
      sub_1000126EC(v33, v41, type metadata accessor for OwnedBeaconRecord);
      v32 = sub_10082E1C0(v29, v34);
      sub_1000126B0(v34, type metadata accessor for OwnedBeaconRecord);
    }
    v35 = v53;
    *v54 = v32;
    v10 = v26;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v52, v35);
    v17 = v55;
    if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
    {
      sub_10009AE04(0, v17[2] + 1, 1);
      v17 = v55;
    }
    v37 = v17[2];
    v36 = v17[3];
    if (v37 >= v36 >> 1)
    {
      sub_10009AE04(v36 > 1, v37 + 1, 1);
      v17 = v55;
    }
    v17[2] = v37 + 1;
    sub_100005CF0((uint64_t)v54, (uint64_t)v17+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v37, &qword_1010ED3C8);
    a1 = v42;
    result = sub_1003B2DB8(v19, v21, v51 & 1, v42);
    v19 = result;
    v21 = v38;
    v23 = v39 & 1;
    if (!--v16)
    {
      sub_1000FE2A4(result, v38, v23);
      return (uint64_t)v17;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

_QWORD *sub_10085FDB4(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  void (*v28)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[4];
  int v50;
  int v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[40];
  _QWORD v59[5];

  v54 = a5;
  v51 = a3;
  v52 = a4;
  v50 = a2;
  v57 = a1;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v5);
  v53 = &v49[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for OwnedBeaconGroup(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v49[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v14 - 8);
  v56 = v14;
  __chkstk_darwin(v14);
  v16 = &v49[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v17);
  v19 = &v49[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for OwnedBeaconRecord(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = &v49[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59[3] = v22;
  v59[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v25 = sub_100018F08(v59);
  sub_10005972C(v57, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  sub_100030784((uint64_t)v59, (uint64_t)v58);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v27 = swift_dynamicCast(v19, v58, v26, v20, 6);
  v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  if (v27)
  {
    v57 = v7;
    v29 = v53;
    v30 = v54;
    v28(v19, 0, 1, v20);
    sub_1000126EC((uint64_t)v19, (uint64_t)v24, type metadata accessor for OwnedBeaconRecord);
    sub_10000F9B8((uint64_t)&v24[*(int *)(v20 + 28)], (uint64_t)v13, &qword_1010ED860);
    v32 = v55;
    v31 = v56;
    v33 = (uint64_t)v24;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48))(v13, 1, v56) == 1)
    {
      sub_100004048((uint64_t)v13, &qword_1010ED860);
    }
    else
    {
      v34 = (uint64_t)v16;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32))(v16, v13, v31);
      v35 = (uint64_t)v29;
      v36 = (uint64_t)v29;
      v37 = v30;
      sub_10081EDA8(v34, v36);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v35, 1, v57) != 1)
      {
        v40 = (uint64_t)v10;
        sub_1000126EC(v35, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
        v41 = v32;
        v42 = sub_10085BF3C(v33, v50 & 1, v51 & 1, v52 & 1);
        sub_10036AC6C();
        v44 = v43;
        swift_retain();
        sub_10085D4FC(v44, v37, (uint64_t *)&unk_1010F47C0, type metadata accessor for OwnedBeaconRecord, (void (*)(char *))sub_10080B950, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1007C8520);
        v45 = v33;
        v47 = v46;
        swift_bridgeObjectRelease();
        swift_release(v37);
        v48 = sub_10085C454(v47, (uint64_t)v42);
        swift_bridgeObjectRelease();
        v38 = sub_1000178D0(v48);
        swift_bridgeObjectRelease();
        sub_1000126B0(v40, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v34, v31);
        sub_1000126B0(v45, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_9;
      }
      sub_100004048(v35, (uint64_t *)&unk_1010FF7F0);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v31);
    }
    sub_1000126B0(v33, type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
    v28(v19, 1, 1, v20);
    sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010F47C0);
  }
  v38 = _swiftEmptyArrayStorage;
LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
  return v38;
}

uint64_t sub_100860204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[24];
  uint64_t v66[4];
  _QWORD v67[2];

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v60 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v52 - v11;
  v67[0] = &_swiftEmptySetSingleton;
  v13 = *(_QWORD *)(a1 + 56);
  v55 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  if (v14 < 64)
    v15 = ~(-1 << v14);
  else
    v15 = -1;
  v16 = v15 & v13;
  v56 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v17 = 0;
  v18 = 0;
  v53 = v6;
  v54 = a2;
  v62 = v12;
  v63 = v7;
  v52 = a1;
  if (v16)
    goto LABEL_7;
LABEL_8:
  if (!__OFADD__(v17++, 1))
  {
    if (v17 < v56)
    {
      v21 = *(_QWORD *)(v55 + 8 * v17);
      if (v21)
      {
LABEL_18:
        v59 = (v21 - 1) & v21;
        for (i = __clz(__rbit64(v21)) + (v17 << 6); ; i = __clz(__rbit64(v16)) | (v17 << 6))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
          sub_10000F9B8(a2, (uint64_t)v6, &qword_1010ED860);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v6, v7);
          v24 = *(_QWORD *)(v23 + 16);
          v57 = v17;
          v58 = v18;
          if (!v24)
          {
            v28 = swift_bridgeObjectRetain(v23);
LABEL_28:
            v12 = v62;
            v7 = v63;
            (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v62, v63, v28);
            a1 = v52;
            v6 = v53;
            a2 = v54;
            v17 = v57;
            v18 = v58;
LABEL_29:
            sub_1007EC3DC(v23, (uint64_t)v67);
            swift_bridgeObjectRelease();
            v16 = v59;
            if (!v59)
              goto LABEL_8;
            goto LABEL_7;
          }
          v25 = *(_QWORD *)(v23 + 40);
          v26 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          swift_bridgeObjectRetain(v23);
          v27 = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v7, v26);
          v29 = -1 << *(_BYTE *)(v23 + 32);
          v30 = v27 & ~v29;
          if (((*(_QWORD *)(v23 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
            goto LABEL_28;
          v61 = ~v29;
          v31 = *(_QWORD *)(v8 + 72);
          v32 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
          while (1)
          {
            v33 = v60;
            v34 = v63;
            v32(v60, *(_QWORD *)(v23 + 48) + v31 * v30, v63);
            v35 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v36 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v62, v34, v35);
            v37 = v8;
            v38 = *(void (**)(char *, uint64_t))(v8 + 8);
            v38(v33, v34);
            if ((v36 & 1) != 0)
              break;
            v30 = (v30 + 1) & v61;
            v8 = v37;
            if (((*(_QWORD *)(v23 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
              goto LABEL_28;
          }
          sub_100A0FEC4(v66, v23);
          swift_bridgeObjectRelease();
          v12 = v62;
          v7 = v63;
          v38(v62, v63);
          a1 = v52;
          v6 = v53;
          a2 = v54;
          v8 = v37;
          v17 = v57;
          v18 = v58;
          v16 = v59;
          if (!v59)
            goto LABEL_8;
LABEL_7:
          v59 = (v16 - 1) & v16;
        }
        swift_bridgeObjectRetain(v23);
        sub_100004048((uint64_t)v6, &qword_1010ED860);
        goto LABEL_29;
      }
      v22 = v17 + 1;
      if (v17 + 1 < v56)
      {
        v21 = *(_QWORD *)(v55 + 8 * v22);
        if (v21)
          goto LABEL_17;
        v22 = v17 + 2;
        if (v17 + 2 >= v56)
          goto LABEL_35;
        v21 = *(_QWORD *)(v55 + 8 * v22);
        if (v21)
        {
LABEL_17:
          v17 = v22;
          goto LABEL_18;
        }
        v22 = v17 + 3;
        if (v17 + 3 < v56)
        {
          v21 = *(_QWORD *)(v55 + 8 * v22);
          if (v21)
            goto LABEL_17;
          while (1)
          {
            v17 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_40;
            if (v17 >= v56)
              break;
            v21 = *(_QWORD *)(v55 + 8 * v17);
            ++v22;
            if (v21)
              goto LABEL_18;
          }
        }
      }
    }
LABEL_35:
    swift_release(a1);
    if (qword_1010E9F90 == -1)
      goto LABEL_36;
    goto LABEL_41;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  swift_once(&qword_1010E9F90, sub_1007FA7C0);
LABEL_36:
  v39 = type metadata accessor for Logger(0);
  v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B7818);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v66[0] = v44;
    *(_DWORD *)v43 = 136446210;
    swift_beginAccess(v67, v65, 0, 0);
    v45 = v67[0];
    swift_bridgeObjectRetain(v67[0]);
    v46 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
    v47 = sub_1000193A4(&qword_10110AAE0, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
    v48 = Set.description.getter(v45, v46, v47);
    v50 = v49;
    swift_bridgeObjectRelease();
    v64 = sub_100016940(v48, v50, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Multipart Status after separating non-primary parts: %{public}s", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }

  swift_beginAccess(v67, v66, 0, 0);
  return v67[0];
}

id sub_1008607EC()
{
  id v0;
  Class isa;
  NSString v2;
  Class v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)SPBeaconGroup), "init");
  objc_msgSend(v0, "setVersion:", -1);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, "setIdentifier:", isa);

  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setName:", v2);

  objc_msgSend(v0, "setClassification:", 0);
  objc_msgSend(v0, "setIsPairingComplete:", 1);
  objc_msgSend(v0, "setIsFindMyNetworkEnabled:", 0);
  objc_msgSend(v0, "setStatus:", 0);
  type metadata accessor for SharedBeaconGroup(0);
  type metadata accessor for UUID(0);
  sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v3 = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, "setBeaconIdentifiers:", v3);

  objc_msgSend(v0, "setIsConnected:", 0);
  return v0;
}

uint64_t sub_100860950(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[5];
  _QWORD *v47;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  __chkstk_darwin(v6);
  v41 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  __chkstk_darwin(v8);
  v38 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_1010954D8, 32, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  swift_retain();
  v37 = a3;
  v11 = swift_retain();
  v12 = sub_1007FDEC4(v11);
  v13 = (_QWORD *)swift_allocObject(&unk_101095500, 40, 7);
  v13[2] = sub_10087C2E8;
  v13[3] = v10;
  v13[4] = a1;
  swift_retain_n(v10, 2);
  v44 = a1;
  swift_retain_n(a1, 2);
  v14 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v15 = LOBYTE(aBlock[0]);
  v16 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v17 = qword_1011B7D48;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v19 + 56) = &type metadata for Bool;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v19 + 32) = v15;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "localAvailable: %d", v37);
  v20 = swift_bridgeObjectRelease(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = qword_1011B7D48;
  if (v15)
  {
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    sub_1000875F4(a2, v37);
    swift_release(v12);
    swift_release(v44);
    swift_release_n(v10, 2);
    v23 = v13;
  }
  else
  {
    v24 = os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v25 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v22, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v37 = *(_QWORD *)(v12 + 64);
    v26 = (_QWORD *)swift_allocObject(&unk_101095528, 40, 7);
    v26[2] = v12;
    v26[3] = sub_1000170EC;
    v26[4] = v13;
    aBlock[4] = sub_100882D68;
    v47 = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101095540;
    v27 = _Block_copy(aBlock);
    swift_retain();
    v28 = swift_retain();
    v29 = v38;
    static DispatchQoS.unspecified.getter(v28);
    v45 = _swiftEmptyArrayStorage;
    v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v33 = v41;
    v34 = v43;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v43, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v27);
    _Block_release(v27);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v33, v34);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v40);
    v35 = v47;
    swift_release(v12);
    swift_release(v44);
    swift_release_n(v10, 2);
    swift_release(v13);
    v23 = v35;
  }
  return swift_release(v23);
}

void sub_100860D90(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  void *v22;
  id v23;
  unsigned int v24;
  NSString v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _BYTE v49[12];

  v46 = a3;
  v47 = a1;
  v8 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_101095F50, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = qword_1010E9F80;
  v45 = a4;
  swift_retain();
  if (v15 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v44 = v8;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v21 = 67109120;
    v48 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v22 = (void *)qword_1011B7C08;
  v23 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v24 = objc_msgSend(v23, "isInternalBuild");

  if (v24)
  {
    v25 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "BOOLForKey:", v25);

  }
  v26 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v24) & 1) == 0))
    {
      sub_100808FE0(v47, (uint64_t)sub_10087F140, v14);
    }
    else
    {
      v43 = a5;
      v29 = sub_10005972C(v47, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      __chkstk_darwin(v29);
      *(&v41 - 2) = v30;
      *(&v41 - 1) = (uint64_t)v13;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE1A8, &v41 - 4, (char *)&type metadata for () + 8);
      v42 = v14;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      sub_10005972C(v47, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
      swift_storeEnumTagMultiPayload(v10, v44, 0);
      sub_1008E8788((uint64_t)v10, v45, v43);
      v35 = sub_100004048((uint64_t)v10, &qword_1010EEC50);
      v14 = v42;
      if (((v28 != 0) & ~v24) != 0)
      {
        v39 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v39);
        *(&v41 - 4) = v46;
        *(&v41 - 3) = v40;
        *(&v41 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882DD4, &v41 - 6);
      }
      else
      {
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc(14, -1);
          *(_DWORD *)v38 = 67109376;
          v48 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 4, v38 + 8);
          *(_WORD *)(v38 + 8) = 1024;
          v48 = v28 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 10, v38 + 14);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v38, 0xEu);
          swift_slowDealloc(v38, -1, -1);
        }

      }
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    }
    swift_release(v14);
  }
  else
  {
    swift_release(a5);

    __break(1u);
  }
}

void sub_1008614AC(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  void *v22;
  id v23;
  unsigned int v24;
  NSString v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _BYTE v49[12];

  v46 = a3;
  v47 = a1;
  v8 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_101095F28, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = qword_1010E9F80;
  v45 = a4;
  swift_retain();
  if (v15 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v44 = v8;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v21 = 67109120;
    v48 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v22 = (void *)qword_1011B7C08;
  v23 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v24 = objc_msgSend(v23, "isInternalBuild");

  if (v24)
  {
    v25 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "BOOLForKey:", v25);

  }
  v26 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v24) & 1) == 0))
    {
      sub_100808FE0(v47, (uint64_t)sub_10087F134, v14);
    }
    else
    {
      v43 = a5;
      v29 = sub_10005972C(v47, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      __chkstk_darwin(v29);
      *(&v41 - 2) = v30;
      *(&v41 - 1) = (uint64_t)v13;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE1A8, &v41 - 4, (char *)&type metadata for () + 8);
      v42 = v14;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      sub_10005972C(v47, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
      swift_storeEnumTagMultiPayload(v10, v44, 0);
      sub_1008EB1C0((uint64_t)v10, v45, v43);
      v35 = sub_100004048((uint64_t)v10, &qword_1010EEC50);
      v14 = v42;
      if (((v28 != 0) & ~v24) != 0)
      {
        v39 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v39);
        *(&v41 - 4) = v46;
        *(&v41 - 3) = v40;
        *(&v41 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882DD4, &v41 - 6);
      }
      else
      {
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc(14, -1);
          *(_DWORD *)v38 = 67109376;
          v48 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 4, v38 + 8);
          *(_WORD *)(v38 + 8) = 1024;
          v48 = v28 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 10, v38 + 14);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v38, 0xEu);
          swift_slowDealloc(v38, -1, -1);
        }

      }
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    }
    swift_release(v14);
  }
  else
  {
    swift_release(a5);

    __break(1u);
  }
}

uint64_t sub_100861BC8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  unsigned int v40;
  NSString v41;
  unsigned int v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  id v66;
  Swift::String v67;
  Class isa;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t (**v106)(uint64_t);
  uint64_t (*v107)(uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (**v111)(uint64_t);
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  __int128 v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  void (*v129)(_QWORD);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (**v136)(_QWORD, _QWORD, _QWORD);
  uint64_t v137;
  unsigned int v138;
  _BYTE v139[20];

  v134 = a2;
  v117 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v117);
  v122 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v130 = *(_QWORD *)(v8 - 8);
  v131 = v8;
  v9 = __chkstk_darwin(v8);
  v119 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v114 - v11;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (***)(_QWORD, _QWORD, _QWORD))(v13 - 8);
  v135 = v13;
  v136 = v14;
  v15 = __chkstk_darwin(v13);
  v118 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v115 = (char *)&v114 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v114 - v19;
  v133 = type metadata accessor for BeaconStoreFileRecord(0);
  v116 = *(_QWORD **)(v133 - 8);
  __chkstk_darwin(v133);
  v128 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v22);
  v24 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v123 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v126 = (char *)&v114 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v114 - v28;
  v30 = swift_allocObject(&unk_1010949E8, 32, 7);
  v129 = a3;
  *(_QWORD *)(v30 + 16) = a3;
  *(_QWORD *)(v30 + 24) = a4;
  v132 = v30;
  v31 = swift_retain();
  v32 = static os_log_type_t.default.getter(v31);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v33 = qword_1011B7D38;
  v127 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v34 = swift_allocObject(v127, 72, 7);
  v120 = xmmword_100E22B00;
  *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
  v137 = a1;
  sub_10005972C(a1, (uint64_t)v29, type metadata accessor for OwnedDeviceKeyRecord);
  v125 = v29;
  v35 = String.init<A>(describing:)(v29, v25);
  v37 = v36;
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  v121 = sub_10001AA00();
  *(_QWORD *)(v34 + 64) = v121;
  *(_QWORD *)(v34 + 32) = v35;
  *(_QWORD *)(v34 + 40) = v37;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Attempting to remove: %@", 24, 2, v34);
  swift_bridgeObjectRelease(v34);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v38 = (void *)qword_1011B7C08;
  v39 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v40 = objc_msgSend(v39, "isInternalBuild");

  if (v40)
  {
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v38, "BOOLForKey:", v41);

  }
  else
  {
    v42 = 0;
  }
  v43 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v43)
  {
    v44 = v43;
    v45 = objc_msgSend(v43, "aa_primaryAppleAccount");

    if (v45 && (v45, (v42 & 1) == 0))
    {
      v60 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v61 = v137 + *(int *)(v25 + 20);
      v62 = UUID.uuidString.getter(v60);
      v64 = v63;
      v65 = v134;
      v66 = *(id *)(v134 + 152);
      v67._countAndFlagsBits = v62;
      v67._object = v64;
      isa = CKRecordID.init(recordName:zoneID:)(v67, (CKRecordZoneID)v66).super.isa;
      v69 = sub_1007FDEC4(isa);
      v129 = (void (*)(_QWORD))isa;
      v128 = (char *)sub_100BC79BC(isa);
      swift_release(v69);
      sub_10080B950(v61, (uint64_t)v24);
      v70 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v115) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v24, 1, v70);
      sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010F47C0);
      v126 = (char *)swift_allocBox(v117);
      v71 = (_QWORD *)v116[7];
      v117 = v72;
      v73 = v133;
      v116 = v71;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v71)(v72, 1, 1, v133);
      v74 = *(_QWORD *)(v65 + 160);
      v75 = v118;
      v76 = v61;
      v77 = v135;
      ((void (**)(char *, uint64_t, uint64_t))v136)[2](v118, v76, v135);
      if (qword_1010EA490 != -1)
        swift_once(&qword_1010EA490, sub_100C8FD48);
      v78 = v131;
      v79 = sub_10001A9E8(v131, (uint64_t)qword_1011B8038);
      v80 = UUID.uuidString.getter(v79);
      v82 = v81;
      v83 = v119;
      URL.appendingPathComponent(_:isDirectory:)(v80, v81, 1);
      v84 = swift_bridgeObjectRelease(v82);
      __chkstk_darwin(v84);
      *(&v114 - 4) = v74;
      *(&v114 - 3) = (uint64_t)v75;
      *(&v114 - 2) = (uint64_t)v83;
      v85 = (uint64_t)v122;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v114 - 6, v73);
      v86 = v127;
      (*(void (**)(char *, uint64_t))(v130 + 8))(v83, v78);
      ((void (*)(char *, uint64_t))v136[1])(v75, v77);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v116)(v85, 0, 1, v73);
      v88 = sub_100004084(v85, v117, &qword_10110A908);
      v89 = v121;
      v90 = v129;
      LODWORD(v135) = (_DWORD)v115 != 1;
      v91 = static os_log_type_t.default.getter(v88);
      v92 = qword_1011B7D38;
      v93 = swift_allocObject(v86, 72, 7);
      *(_OWORD *)(v93 + 16) = v120;
      v94 = v90;
      v136 = (void (**)(_QWORD, _QWORD, _QWORD))v94;
      v95 = objc_msgSend(v94, "description");
      v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
      v98 = v97;

      *(_QWORD *)(v93 + 56) = &type metadata for String;
      *(_QWORD *)(v93 + 64) = v89;
      *(_QWORD *)(v93 + 32) = v96;
      *(_QWORD *)(v93 + 40) = v98;
      os_log(_:dso:log:_:_:)(v91, &_mh_execute_header, v92, "cloudBacked item deleted from disk: %@", 38, 2, v93);
      swift_bridgeObjectRelease(v93);
      v99 = (uint64_t)v125;
      sub_10005972C(v137, (uint64_t)v125, type metadata accessor for OwnedDeviceKeyRecord);
      v100 = *(unsigned __int8 *)(v123 + 80);
      v101 = (v100 + 32) & ~v100;
      v133 = v100 | 7;
      v102 = (v124 + v101 + 7) & 0xFFFFFFFFFFFFFFF8;
      v103 = swift_allocObject(&unk_101094A10, v102 + 17, v100 | 7);
      v104 = v126;
      v105 = v134;
      *(_QWORD *)(v103 + 16) = v126;
      *(_QWORD *)(v103 + 24) = v105;
      sub_1000126EC(v99, v103 + v101, type metadata accessor for OwnedDeviceKeyRecord);
      v106 = (uint64_t (**)(uint64_t))(v103 + v102);
      v107 = (uint64_t (*)(uint64_t))v132;
      *v106 = sub_100882AD0;
      v106[1] = v107;
      *(_BYTE *)(v103 + v102 + 16) = v135;
      swift_retain();
      swift_retain();
      swift_retain();
      v108 = v128;
      v109 = Future.addSuccess(block:)(sub_1008775A4, v103);
      swift_release(v109);
      swift_release(v103);
      sub_10005972C(v137, v99, type metadata accessor for OwnedDeviceKeyRecord);
      v110 = swift_allocObject(&unk_101094A38, v102 + 16, v133);
      *(_QWORD *)(v110 + 16) = v104;
      *(_QWORD *)(v110 + 24) = v105;
      sub_1000126EC(v99, v110 + v101, type metadata accessor for OwnedDeviceKeyRecord);
      v111 = (uint64_t (**)(uint64_t))(v110 + v102);
      *v111 = sub_100882AD0;
      v111[1] = v107;
      swift_retain();
      swift_retain();
      swift_retain();
      v112 = Future.addFailure(block:)(sub_1008776B8, v110);
      swift_release(v107);
      swift_release(v104);
      swift_release(v110);

      swift_release(v108);
      v87 = v112;
    }
    else
    {
      v127 = a4;
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v46 = type metadata accessor for Logger(0);
      v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B77E8);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.info.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = v45 != 0;
        v51 = swift_slowAlloc(14, -1);
        *(_DWORD *)v51 = 67109376;
        v138 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v51 + 4, v51 + 8);
        *(_WORD *)(v51 + 8) = 1024;
        v138 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v51 + 10, v51 + 14);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v51, 0xEu);
        swift_slowDealloc(v51, -1, -1);
      }

      v52 = *(_QWORD *)(v134 + 160);
      ((void (**)(char *, uint64_t, uint64_t))v136)[2](v20, v137 + *(int *)(v25 + 20), v135);
      if (qword_1010EA490 != -1)
        swift_once(&qword_1010EA490, sub_100C8FD48);
      v53 = v131;
      v54 = sub_10001A9E8(v131, (uint64_t)qword_1011B8038);
      v55 = UUID.uuidString.getter(v54);
      v57 = v56;
      URL.appendingPathComponent(_:isDirectory:)(v55, v56, 1);
      v58 = swift_bridgeObjectRelease(v57);
      __chkstk_darwin(v58);
      *(&v114 - 4) = v52;
      *(&v114 - 3) = (uint64_t)v20;
      *(&v114 - 2) = (uint64_t)v12;
      v59 = (uint64_t)v128;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v114 - 6, v133);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v12, v53);
      ((void (*)(char *, uint64_t))v136[1])(v20, v135);
      sub_100893644(v59);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v129(1);
      sub_1000126B0(v59, type metadata accessor for BeaconStoreFileRecord);
      v87 = v132;
    }
    return swift_release(v87);
  }
  else
  {
    result = swift_release(a4);
    __break(1u);
  }
  return result;
}

void sub_100862AC8(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t found;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  void *v22;
  id v23;
  unsigned int v24;
  NSString v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE v48[12];

  v45 = a3;
  v46 = a1;
  v8 = sub_10001A9A8(&qword_1010F3448);
  __chkstk_darwin(v8);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  __chkstk_darwin(found);
  v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_101096F68, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = qword_1010E9F80;
  v44 = a4;
  swift_retain();
  if (v15 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v43 = v8;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v21 = 67109120;
    v47 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v22 = (void *)qword_1011B7C08;
  v23 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v24 = objc_msgSend(v23, "isInternalBuild");

  if (v24)
  {
    v25 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "BOOLForKey:", v25);

  }
  v26 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v24) & 1) == 0))
    {
      sub_100809690(v46, (uint64_t)sub_100882558, v14);
    }
    else
    {
      v42 = a5;
      v29 = sub_10005972C(v46, (uint64_t)v13, type metadata accessor for NotifyWhenFoundRecord);
      __chkstk_darwin(v29);
      v41[-2] = v30;
      v41[-1] = v13;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100088F14, &v41[-4], &type metadata for () + 1);
      v41[1] = v14;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      sub_10005972C(v46, (uint64_t)v10, type metadata accessor for NotifyWhenFoundRecord);
      swift_storeEnumTagMultiPayload(v10, v43, 0);
      sub_100202A4C((uint64_t)v10, v44, v42);
      v35 = sub_100004048((uint64_t)v10, &qword_1010F3448);
      if (((v28 != 0) & ~v24) != 0)
      {
        v39 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v39);
        v41[-4] = v45;
        v41[-3] = v40;
        v41[-2] = v13;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882560, &v41[-6]);
      }
      else
      {
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc(14, -1);
          *(_DWORD *)v38 = 67109376;
          v47 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v38 + 4, v38 + 8);
          *(_WORD *)(v38 + 8) = 1024;
          v47 = v28 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v38 + 10, v38 + 14);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v38, 0xEu);
          swift_slowDealloc(v38, -1, -1);
        }

      }
      sub_1000126B0((uint64_t)v13, type metadata accessor for NotifyWhenFoundRecord);
    }
    swift_release();
  }
  else
  {
    swift_release();

    __break(1u);
  }
}

uint64_t sub_1008631E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t found;
  uint64_t v24;
  void (*v25)(uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  char *v40;
  NSString v41;
  unsigned int v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  id v66;
  Swift::String v67;
  Class isa;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t (**v103)(uint64_t);
  uint64_t (*v104)(uint64_t);
  uint64_t v105;
  uint64_t (**v106)(uint64_t);
  uint64_t result;
  uint64_t v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  void (*v119)(uint64_t);
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (**v132)(_QWORD, _QWORD, _QWORD);
  unsigned int v133;
  _BYTE v134[20];

  v129 = a2;
  v111 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v111);
  v117 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v123 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  v9 = __chkstk_darwin(v8);
  v113 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v122 = (char *)&v108 - v11;
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v12 - 8);
  v131 = v12;
  v132 = v13;
  v14 = __chkstk_darwin(v12);
  v112 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v109 = (char *)&v108 - v17;
  __chkstk_darwin(v16);
  v128 = (char *)&v108 - v18;
  v126 = type metadata accessor for BeaconStoreFileRecord(0);
  v110 = *(_QWORD **)(v126 - 8);
  __chkstk_darwin(v126);
  v121 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v20);
  v22 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v118 = *(char **)(found - 8);
  v24 = __chkstk_darwin(found);
  v26 = (char *)&v108 - (((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v108 - v27;
  v29 = swift_allocObject(&unk_101095190, 32, 7);
  *(_QWORD *)(v29 + 16) = a3;
  *(_QWORD *)(v29 + 24) = a4;
  v125 = v29;
  v30 = swift_retain();
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v32 = qword_1011B7D38;
  v115 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v33 = swift_allocObject(v115, 72, 7);
  v114 = xmmword_100E22B00;
  *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
  v130 = a1;
  sub_10005972C(a1, (uint64_t)v28, type metadata accessor for NotifyWhenFoundRecord);
  v120 = v28;
  v127 = found;
  v34 = String.init<A>(describing:)(v28, found);
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v116 = sub_10001AA00();
  *(_QWORD *)(v33 + 64) = v116;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Attempting to remove: %@", 24, 2, v33);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  v40 = v128;
  if (v39)
  {
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v37, "BOOLForKey:", v41);

  }
  else
  {
    v42 = 0;
  }
  v43 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v43)
  {
    v44 = v43;
    v45 = objc_msgSend(v43, "aa_primaryAppleAccount");

    if (v45 && (v45, (v42 & 1) == 0))
    {
      v60 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v61 = v130 + *(int *)(v127 + 20);
      v62 = UUID.uuidString.getter(v60);
      v64 = v63;
      v65 = v129;
      v66 = *(id *)(v129 + 152);
      v67._countAndFlagsBits = v62;
      v67._object = v64;
      isa = CKRecordID.init(recordName:zoneID:)(v67, (CKRecordZoneID)v66).super.isa;
      sub_1007FDEC4();
      v128 = (char *)isa;
      v122 = (char *)sub_100BC79BC(isa);
      swift_release();
      sub_10080B950(v61, (uint64_t)v22);
      v69 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v109) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v22, 1, v69);
      sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F47C0);
      v121 = (char *)swift_allocBox(v111);
      v70 = (_QWORD *)v110[7];
      v111 = v71;
      v72 = v126;
      v110 = v70;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v70)(v71, 1, 1, v126);
      v73 = *(_QWORD *)(v65 + 160);
      v74 = v112;
      v75 = v61;
      v76 = v131;
      ((void (**)(char *, uint64_t, uint64_t))v132)[2](v112, v75, v131);
      if (qword_1010E9B78 != -1)
        swift_once(&qword_1010E9B78, sub_10033DA58);
      v77 = v124;
      v78 = sub_10001A9E8(v124, (uint64_t)qword_1011B6DB0);
      v79 = UUID.uuidString.getter(v78);
      v80 = v113;
      URL.appendingPathComponent(_:isDirectory:)(v79, v81, 1);
      v82 = swift_bridgeObjectRelease();
      __chkstk_darwin(v82);
      *(&v108 - 4) = v73;
      *(&v108 - 3) = (uint64_t)v74;
      *(&v108 - 2) = (uint64_t)v80;
      v83 = (uint64_t)v117;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v108 - 6, v72);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v80, v77);
      ((void (*)(char *, uint64_t))v132[1])(v74, v76);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v110)(v83, 0, 1, v72);
      v84 = sub_100004084(v83, v111, &qword_10110A908);
      v85 = v115;
      v86 = v116;
      v87 = v128;
      LODWORD(v131) = (_DWORD)v109 != 1;
      v88 = static os_log_type_t.default.getter(v84);
      v89 = qword_1011B7D38;
      v90 = swift_allocObject(v85, 72, 7);
      *(_OWORD *)(v90 + 16) = v114;
      v91 = v87;
      v132 = (void (**)(_QWORD, _QWORD, _QWORD))v91;
      v92 = objc_msgSend(v91, "description");
      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v95 = v94;

      *(_QWORD *)(v90 + 56) = &type metadata for String;
      *(_QWORD *)(v90 + 64) = v86;
      *(_QWORD *)(v90 + 32) = v93;
      *(_QWORD *)(v90 + 40) = v95;
      os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "cloudBacked item deleted from disk: %@", 38, 2, v90);
      swift_bridgeObjectRelease();
      v96 = (uint64_t)v120;
      sub_10005972C(v130, (uint64_t)v120, type metadata accessor for NotifyWhenFoundRecord);
      v97 = v118[80];
      v98 = (v97 + 32) & ~v97;
      v128 = (char *)(v97 | 7);
      v99 = ((unint64_t)v119 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
      v100 = swift_allocObject(&unk_1010951B8, v99 + 17, v97 | 7);
      v101 = v121;
      v102 = v129;
      *(_QWORD *)(v100 + 16) = v121;
      *(_QWORD *)(v100 + 24) = v102;
      sub_1000126EC(v96, v100 + v98, type metadata accessor for NotifyWhenFoundRecord);
      v103 = (uint64_t (**)(uint64_t))(v100 + v99);
      v104 = (uint64_t (*)(uint64_t))v125;
      *v103 = sub_100882AD0;
      v103[1] = v104;
      *(_BYTE *)(v100 + v99 + 16) = v131;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_10087B444, v100);
      swift_release();
      swift_release();
      sub_10005972C(v130, v96, type metadata accessor for NotifyWhenFoundRecord);
      v105 = swift_allocObject(&unk_1010951E0, v99 + 16, v128);
      *(_QWORD *)(v105 + 16) = v101;
      *(_QWORD *)(v105 + 24) = v102;
      sub_1000126EC(v96, v105 + v98, type metadata accessor for NotifyWhenFoundRecord);
      v106 = (uint64_t (**)(uint64_t))(v105 + v99);
      *v106 = sub_100882AD0;
      v106[1] = v104;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_10087B538, v105);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      v119 = a3;
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v118 = v26;
      v120 = (char *)a4;
      v46 = type metadata accessor for Logger(0);
      v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B77E8);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.info.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = v45 != 0;
        v51 = swift_slowAlloc(14, -1);
        *(_DWORD *)v51 = 67109376;
        v133 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 4, v51 + 8);
        *(_WORD *)(v51 + 8) = 1024;
        v133 = v50;
        v40 = v128;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 10, v51 + 14);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v51, 0xEu);
        swift_slowDealloc(v51, -1, -1);
      }

      v52 = *(_QWORD *)(v129 + 160);
      ((void (**)(char *, uint64_t, uint64_t))v132)[2](v40, v130 + *(int *)(v127 + 20), v131);
      if (qword_1010E9B78 != -1)
        swift_once(&qword_1010E9B78, sub_10033DA58);
      v53 = v124;
      v54 = sub_10001A9E8(v124, (uint64_t)qword_1011B6DB0);
      v55 = UUID.uuidString.getter(v54);
      v56 = v122;
      URL.appendingPathComponent(_:isDirectory:)(v55, v57, 1);
      v58 = swift_bridgeObjectRelease();
      __chkstk_darwin(v58);
      *(&v108 - 4) = v52;
      *(&v108 - 3) = (uint64_t)v40;
      *(&v108 - 2) = (uint64_t)v56;
      v59 = (uint64_t)v121;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v108 - 6, v126);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v56, v53);
      ((void (*)(char *, uint64_t))v132[1])(v40, v131);
      sub_100893644(v59);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v119(1);
      sub_1000126B0(v59, type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100864100(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  void *v23;
  id v24;
  unsigned int v25;
  NSString v26;
  unsigned int v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  _BYTE v56[12];

  v53 = a1;
  v49 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v49);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v13);
  v54 = (_QWORD **)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (_QWORD *)swift_allocObject(&unk_101096A18, 40, 7);
  v15[2] = a4;
  v15[3] = a5;
  v50 = a5;
  v15[4] = a6;
  v16 = qword_1010E9F80;
  swift_retain();
  swift_retain();
  if (v16 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B77E8);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v51 = a4;
  v52 = a6;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v22 = 67109120;
    v55 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v22 + 4, v22 + 8);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Saving record. Disk First? %{BOOL}d", v22, 8u);
    swift_slowDealloc(v22, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v23 = (void *)qword_1011B7C08;
  v24 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v25 = objc_msgSend(v24, "isInternalBuild");

  if (v25)
  {
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v23, "BOOLForKey:", v26);

  }
  else
  {
    v27 = 0;
  }
  v28 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v28)
  {
    v29 = v28;
    v30 = objc_msgSend(v28, "aa_primaryAppleAccount");

    if (v30 && (v30, ((a2 | v27) & 1) == 0))
    {
      sub_10080918C(v53, (uint64_t)sub_100881190, (uint64_t)v15);
    }
    else
    {
      v48 = v15;
      v31 = (uint64_t)v54;
      sub_10005972C(v53, (uint64_t)v54, type metadata accessor for OwnedBeaconRecord);
      v32 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      __chkstk_darwin(v32);
      *(&v48 - 2) = v33;
      *(&v48 - 1) = (_QWORD *)v31;
      v34 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE11C, &v48 - 4, &type metadata for () + 1);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved LocalStorageBacked record. Calling completion.", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = v53;
      sub_10005972C(v53, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      swift_storeEnumTagMultiPayload(v12, v49, 0);
      sub_100831498((uint64_t)v12, v51, v50, v52);
      v39 = sub_100004048((uint64_t)v12, (uint64_t *)&unk_101108050);
      if (((v30 != 0) & ~v27) != 0)
      {
        v45 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v45);
        *(&v48 - 4) = a3;
        *(&v48 - 3) = (_QWORD *)v38;
        v46 = (uint64_t)v54;
        *(&v48 - 2) = v54;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882DFC, &v48 - 6);
        v44 = v46;
      }
      else
      {
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.info.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          v42 = v30 != 0;
          v43 = swift_slowAlloc(14, -1);
          *(_DWORD *)v43 = 67109376;
          v55 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 4, v43 + 8);
          *(_WORD *)(v43 + 8) = 1024;
          v55 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 10, v43 + 14);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v43, 0xEu);
          swift_slowDealloc(v43, -1, -1);
        }

        v44 = (uint64_t)v54;
      }
      sub_1000126B0(v44, type metadata accessor for OwnedBeaconRecord);
    }
    return swift_release();
  }
  else
  {
    swift_release();
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100864864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD aBlock[7];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  __chkstk_darwin(v8);
  v43 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  __chkstk_darwin(v10);
  v40 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)swift_allocObject(&unk_101096978, 40, 7);
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  swift_retain();
  v38 = a3;
  swift_retain();
  v39 = a4;
  swift_retain();
  v13 = sub_1007FDEC4();
  v14 = (_QWORD *)swift_allocObject(&unk_1010969A0, 40, 7);
  v14[2] = sub_100881158;
  v14[3] = v12;
  v14[4] = a1;
  swift_retain_n(v12, 2);
  v46 = a1;
  swift_retain_n(a1, 2);
  v15 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v16 = LOBYTE(aBlock[0]);
  v17 = static os_log_type_t.default.getter(v15);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v18 = qword_1011B7D48;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v20 + 56) = &type metadata for Bool;
  *(_QWORD *)(v20 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v20 + 32) = v16;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "localAvailable: %d", v37);
  v21 = swift_bridgeObjectRelease();
  v22 = static os_log_type_t.default.getter(v21);
  v23 = qword_1011B7D48;
  if (v16)
  {
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    sub_10028D338(a2, v38, v39);
    swift_release();
    swift_release();
    swift_release_n(v12, 2);
  }
  else
  {
    v24 = os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v25 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v23, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v26 = (_QWORD *)swift_allocObject(&unk_1010969C8, 40, 7);
    v26[2] = v13;
    v26[3] = sub_1000170EC;
    v26[4] = v14;
    aBlock[4] = sub_100882D68;
    aBlock[5] = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010969E0;
    v27 = _Block_copy(aBlock);
    swift_retain();
    v28 = swift_retain();
    v29 = v40;
    static DispatchQoS.unspecified.getter(v28);
    v47 = _swiftEmptyArrayStorage;
    v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v33 = v43;
    v34 = v31;
    v35 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v34, v32, v45, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v27);
    _Block_release(v27);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v35);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v42);
    swift_release();
    swift_release();
    swift_release_n(v12, 2);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100864CB4()
{
  static Keychain.deleteData(account:service:)(0x74536E6F63616542, 0xEE0079654B65726FLL, 0x74536E6F63616542, 0xEB0000000065726FLL);
  return 1;
}

void sub_100864F38(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (**v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  id v46;
  __int128 v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58[2];

  v55 = a1;
  v56 = a5;
  v53 = a3;
  v54 = a4;
  v50 = sub_10001A9A8(&qword_1011036B8);
  __chkstk_darwin(v50);
  v51 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LostModeRecord(0);
  v48 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v48 + 64);
  v11 = __chkstk_darwin(v9);
  v12 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v52 = (char *)&v47 - v13;
  v57 = swift_allocObject(&unk_101096C48, 24, 7);
  *(_QWORD *)(v57 + 16) = a6;
  v49 = a6;
  v14 = static os_log_type_t.default.getter(v49);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v15 = qword_1011B7D38;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  v18 = v17;
  v47 = xmmword_100E22B00;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  if ((a2 & 1) != 0)
    v19 = 1702195828;
  else
    v19 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v20 = 0xE400000000000000;
  else
    v20 = 0xE500000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = v20;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Modify record. Disk First? (%@)", 31, 2, v18, v47);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    v21 = objc_autoreleasePoolPush();
    v22 = v55;
    sub_100CA5B38(v55);
    v24 = v23;
    objc_autoreleasePoolPop(v21);
    v58[0] = v24;
    v25 = (uint64_t)v52;
    sub_10005972C(v22, (uint64_t)v52, type metadata accessor for LostModeRecord);
    v53(v25);
    v26 = sub_10084DF68(v58, v25);
    v27 = v56;
    __chkstk_darwin(v26);
    *((_QWORD *)&v47 - 2) = v28;
    *((_QWORD *)&v47 - 1) = v25;
    OS_dispatch_queue.sync<A>(execute:)(sub_100088F5C, &v47 - 2, &type metadata for () + 1);
    sub_1007EEF64(8);
    v44 = v51;
    sub_10005972C(v25, v51, type metadata accessor for LostModeRecord);
    swift_storeEnumTagMultiPayload(v44, v50, 0);
    sub_100689064(v44, v49);
    sub_100004048(v44, &qword_1011036B8);
    v45 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v45);
    *((_QWORD *)&v47 - 4) = v27;
    *((_QWORD *)&v47 - 3) = v58;
    *((_QWORD *)&v47 - 2) = v22;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_100881E1C, &v47 - 3);
    sub_1000126B0(v25, type metadata accessor for LostModeRecord);
    v46 = v58[0];
    swift_release();

  }
  else
  {
    v29 = objc_autoreleasePoolPush();
    v30 = v55;
    sub_100CA5B38(v55);
    v52 = v31;
    objc_autoreleasePoolPop(v29);
    v32 = v56;
    sub_1007FDEC4();
    sub_10005972C(v30, (uint64_t)v12, type metadata accessor for LostModeRecord);
    v33 = *(unsigned __int8 *)(v48 + 80);
    v34 = (v33 + 32) & ~v33;
    v51 = v33 | 7;
    v35 = swift_allocObject(&unk_101096C70, v34 + v10, v33 | 7);
    v36 = v54;
    *(_QWORD *)(v35 + 16) = v53;
    *(_QWORD *)(v35 + 24) = v36;
    sub_1000126EC((uint64_t)v12, v35 + v34, type metadata accessor for LostModeRecord);
    swift_retain();
    sub_100BC910C(v52, (void (*)(id *))sub_100881C94, v35);
    swift_release();
    swift_release();
    v37 = swift_allocObject(&unk_101096C98, 32, 7);
    v38 = v57;
    *(_QWORD *)(v37 + 16) = sub_100881BAC;
    *(_QWORD *)(v37 + 24) = v38;
    swift_retain();
    Future.addFailure(block:)(sub_100881CF8, v37);
    swift_release();
    swift_release();
    sub_10005972C(v30, (uint64_t)v12, type metadata accessor for LostModeRecord);
    v39 = (v33 + 16) & ~v33;
    v40 = (v10 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    v42 = swift_allocObject(&unk_101096CC0, v41 + 16, v51);
    sub_1000126EC((uint64_t)v12, v42 + v39, type metadata accessor for LostModeRecord);
    *(_QWORD *)(v42 + v40) = v32;
    v43 = (void (**)(uint64_t))(v42 + v41);
    *v43 = sub_100881BAC;
    v43[1] = (void (*)(uint64_t))v38;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_100881E08, v42);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_100865564(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  void *v22;
  id v23;
  unsigned int v24;
  NSString v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 v49;
  _BYTE v50[4];
  int v51;
  int v52;

  v47 = a3;
  v48 = a1;
  v45 = sub_10001A9A8(&qword_1011036B8);
  __chkstk_darwin(v45);
  v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LostModeRecord(0);
  __chkstk_darwin(v10);
  v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_101096D88, 32, 7);
  *(_QWORD *)(v13 + 16) = a4;
  *(_QWORD *)(v13 + 24) = a5;
  v14 = qword_1010E9F80;
  swift_retain();
  v15 = a5;
  if (v14 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v46 = v15;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v21 = 67109120;
    v51 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v22 = (void *)qword_1011B7C08;
  v23 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v24 = objc_msgSend(v23, "isInternalBuild");

  if (v24)
  {
    v25 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "BOOLForKey:", v25);

  }
  v26 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v24) & 1) == 0))
    {
      sub_10080983C(v48, (uint64_t)sub_10088205C, v13);
    }
    else
    {
      v44 = a4;
      v29 = sub_10005972C(v48, (uint64_t)v12, type metadata accessor for LostModeRecord);
      __chkstk_darwin(v29);
      v43[-2] = v30;
      v43[-1] = v12;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE1BC, &v43[-4], &type metadata for () + 1);
      v43[1] = v13;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = v48;
      sub_10005972C(v48, (uint64_t)v9, type metadata accessor for LostModeRecord);
      swift_storeEnumTagMultiPayload(v9, v45, 0);
      v36 = swift_projectBox(v44);
      swift_beginAccess(v36, &v51, 1, 0);
      sub_1006908BC((uint64_t)v9, v36);
      dispatch_group_leave(v46);
      v37 = sub_100004048((uint64_t)v9, &qword_1011036B8);
      if (((v28 != 0) & ~v24) != 0)
      {
        v41 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v41);
        v43[-4] = v47;
        v43[-3] = v35;
        v43[-2] = v12;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882064, &v43[-6]);
      }
      else
      {
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.info.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          v40 = swift_slowAlloc(14, -1);
          *(_DWORD *)v40 = 67109376;
          v49 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v40 + 4, v40 + 8);
          *(_WORD *)(v40 + 8) = 1024;
          v49 = v28 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v40 + 10, v40 + 14);
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v40, 0xEu);
          swift_slowDealloc(v40, -1, -1);
        }

      }
      sub_1000126B0((uint64_t)v12, type metadata accessor for LostModeRecord);
    }
    return swift_release();
  }
  else
  {

    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100865CC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  id v36;
  unsigned int v37;
  NSString v38;
  unsigned int v39;
  id v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  id v63;
  Swift::String v64;
  Class isa;
  uint64_t v66;
  void (*v67)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (**v104)(uint64_t);
  uint64_t (*v105)(uint64_t);
  uint64_t v106;
  uint64_t (**v107)(uint64_t);
  uint64_t result;
  id v109;
  void (*v110)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (**v135)(_QWORD, _QWORD, _QWORD);
  _BOOL4 v136;
  _BYTE v137[20];

  v132 = a2;
  v113 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v113);
  v118 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v125 - 8);
  v7 = __chkstk_darwin(v125);
  v117 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v123 = (char *)&v110 - v9;
  v133 = type metadata accessor for UUID(0);
  v135 = *(void (***)(_QWORD, _QWORD, _QWORD))(v133 - 8);
  v10 = __chkstk_darwin(v133);
  v116 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v111 = (char *)&v110 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v110 - v14;
  v128 = type metadata accessor for BeaconStoreFileRecord(0);
  v112 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v124 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v17);
  v19 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LostModeRecord(0);
  v119 = *(_QWORD *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v122 = (char *)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v110 - v23;
  v25 = swift_allocObject(&unk_101096CE8, 24, 7);
  *(_QWORD *)(v25 + 16) = a3;
  v26 = swift_allocObject(&unk_101096D10, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_100881E38;
  *(_QWORD *)(v26 + 24) = v25;
  v127 = v26;
  v129 = a3;
  v130 = v25;
  v27 = swift_retain();
  v28 = static os_log_type_t.default.getter(v27);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v29 = qword_1011B7D38;
  v115 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v30 = swift_allocObject(v115, 72, 7);
  v114 = xmmword_100E22B00;
  *(_OWORD *)(v30 + 16) = xmmword_100E22B00;
  v134 = a1;
  sub_10005972C(a1, (uint64_t)v24, type metadata accessor for LostModeRecord);
  v121 = v24;
  v131 = v20;
  v31 = String.init<A>(describing:)(v24, v20);
  v33 = v32;
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  v34 = sub_10001AA00();
  *(_QWORD *)(v30 + 64) = v34;
  *(_QWORD *)(v30 + 32) = v31;
  *(_QWORD *)(v30 + 40) = v33;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Attempting to remove: %@", 24, 2, v30);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v35 = (void *)qword_1011B7C08;
  v36 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v37 = objc_msgSend(v36, "isInternalBuild");

  v126 = v6;
  if (v37)
  {
    v38 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v35, "BOOLForKey:", v38);

  }
  else
  {
    v39 = 0;
  }
  v40 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  v41 = v134;
  if (v40)
  {
    v42 = v40;
    v43 = objc_msgSend(v40, "aa_primaryAppleAccount");

    if (v43 && (v43, (v39 & 1) == 0))
    {
      v123 = (char *)v34;
      v57 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v58 = v41 + *(int *)(v131 + 20);
      v59 = UUID.uuidString.getter(v57);
      v61 = v60;
      v62 = v132;
      v63 = *(id *)(v132 + 152);
      v64._countAndFlagsBits = v59;
      v64._object = v61;
      isa = CKRecordID.init(recordName:zoneID:)(v64, (CKRecordZoneID)v63).super.isa;
      sub_1007FDEC4();
      v124 = (char *)isa;
      v122 = (char *)sub_100BC79BC(isa);
      swift_release();
      sub_10080B950(v58, (uint64_t)v19);
      v66 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v111) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v19, 1, v66);
      sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010F47C0);
      v113 = swift_allocBox(v113);
      v67 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v112 + 56);
      v112 = v68;
      v69 = v128;
      v110 = v67;
      v67(v68, 1, 1, v128);
      v70 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 160);
      v71 = v116;
      v72 = v58;
      v73 = v133;
      ((void (**)(char *, uint64_t, uint64_t))v135)[2](v116, v72, v133);
      if (qword_1010EA158 != -1)
        swift_once(&qword_1010EA158, sub_100AA9AFC);
      v74 = v125;
      v75 = sub_10001A9E8(v125, (uint64_t)qword_1011B7B78);
      v76 = UUID.uuidString.getter(v75);
      v77 = v117;
      URL.appendingPathComponent(_:isDirectory:)(v76, v78, 1);
      v79 = swift_bridgeObjectRelease();
      __chkstk_darwin(v79);
      *(&v110 - 4) = v70;
      *(&v110 - 3) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v71;
      *(&v110 - 2) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v77;
      v80 = (uint64_t)v118;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v110 - 6, v69);
      (*(void (**)(char *, uint64_t))(v126 + 8))(v77, v74);
      ((void (*)(char *, uint64_t))v135[1])(v71, v73);
      v110(v80, 0, 1, v69);
      v83 = sub_100004084(v80, v112, &qword_10110A908);
      v84 = (uint64_t)v121;
      v86 = v123;
      v85 = v124;
      v87 = v115;
      LODWORD(v133) = (_DWORD)v111 != 1;
      v88 = static os_log_type_t.default.getter(v83);
      v89 = qword_1011B7D38;
      v90 = swift_allocObject(v87, 72, 7);
      *(_OWORD *)(v90 + 16) = v114;
      v91 = v85;
      v135 = (void (**)(_QWORD, _QWORD, _QWORD))v91;
      v92 = objc_msgSend(v91, "description");
      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v95 = v94;

      *(_QWORD *)(v90 + 56) = &type metadata for String;
      *(_QWORD *)(v90 + 64) = v86;
      *(_QWORD *)(v90 + 32) = v93;
      *(_QWORD *)(v90 + 40) = v95;
      os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "cloudBacked item deleted from disk: %@", 38, 2, v90);
      swift_bridgeObjectRelease();
      sub_10005972C(v134, v84, type metadata accessor for LostModeRecord);
      v96 = *(unsigned __int8 *)(v119 + 80);
      v97 = v84;
      v98 = (v96 + 32) & ~v96;
      v99 = v96 | 7;
      v100 = (v120 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
      v101 = swift_allocObject(&unk_101096D38, v100 + 17, v96 | 7);
      v102 = v113;
      v103 = v132;
      *(_QWORD *)(v101 + 16) = v113;
      *(_QWORD *)(v101 + 24) = v103;
      sub_1000126EC(v97, v101 + v98, type metadata accessor for LostModeRecord);
      v104 = (uint64_t (**)(uint64_t))(v101 + v100);
      v105 = (uint64_t (*)(uint64_t))v127;
      *v104 = sub_100882AD0;
      v104[1] = v105;
      *(_BYTE *)(v101 + v100 + 16) = v133;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100881AE4, v101);
      swift_release();
      swift_release();
      sub_10005972C(v134, v97, type metadata accessor for LostModeRecord);
      v106 = swift_allocObject(&unk_101096D60, v100 + 16, v99);
      *(_QWORD *)(v106 + 16) = v102;
      *(_QWORD *)(v106 + 24) = v103;
      sub_1000126EC(v97, v106 + v98, type metadata accessor for LostModeRecord);
      v107 = (uint64_t (**)(uint64_t))(v106 + v100);
      *v107 = sub_100882AD0;
      v107[1] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_100881B04, v106);

      swift_release();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v44 = type metadata accessor for Logger(0);
      v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B77E8);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.info.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc(14, -1);
        *(_DWORD *)v48 = 67109376;
        v136 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v48 + 4, v48 + 8);
        *(_WORD *)(v48 + 8) = 1024;
        v136 = v43 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v48 + 10, v48 + 14);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v48, 0xEu);
        v41 = v134;
        swift_slowDealloc(v48, -1, -1);
      }

      v49 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v132 + 160);
      ((void (**)(char *, uint64_t, uint64_t))v135)[2](v15, v41 + *(int *)(v131 + 20), v133);
      if (qword_1010EA158 != -1)
        swift_once(&qword_1010EA158, sub_100AA9AFC);
      v50 = v125;
      v51 = sub_10001A9E8(v125, (uint64_t)qword_1011B7B78);
      v52 = UUID.uuidString.getter(v51);
      v53 = v123;
      URL.appendingPathComponent(_:isDirectory:)(v52, v54, 1);
      v55 = swift_bridgeObjectRelease();
      __chkstk_darwin(v55);
      *(&v110 - 4) = v49;
      *(&v110 - 3) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v15;
      *(&v110 - 2) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v53;
      v56 = (uint64_t)v124;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v110 - 6, v128);
      (*(void (**)(char *, uint64_t))(v126 + 8))(v53, v50);
      ((void (*)(char *, uint64_t))v135[1])(v15, v133);
      sub_100893644(v56);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v81 = v129;
      v82 = static os_log_type_t.default.getter(v81);
      if (qword_1010EA2E8 != -1)
        swift_once(&qword_1010EA2E8, sub_100B5E0D8);
      os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, qword_1011B7DC8, "Successfully reverted CK changes.", 33, 2, _swiftEmptyArrayStorage);
      dispatch_group_leave(v81);

      sub_1000126B0(v56, type metadata accessor for BeaconStoreFileRecord);
      swift_release();
    }
    return swift_release();
  }
  else
  {
    v109 = v129;

    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100866D28(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  char *v40;
  NSString v41;
  unsigned int v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  id v66;
  Swift::String v67;
  Class isa;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t (**v103)(uint64_t);
  uint64_t (*v104)(uint64_t);
  uint64_t v105;
  uint64_t (**v106)(uint64_t);
  uint64_t result;
  uint64_t v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  void (*v119)(uint64_t);
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (**v132)(_QWORD, _QWORD, _QWORD);
  unsigned int v133;
  _BYTE v134[20];

  v129 = a2;
  v111 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v111);
  v117 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v123 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  v9 = __chkstk_darwin(v8);
  v113 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v122 = (char *)&v108 - v11;
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v12 - 8);
  v131 = v12;
  v132 = v13;
  v14 = __chkstk_darwin(v12);
  v112 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v109 = (char *)&v108 - v17;
  __chkstk_darwin(v16);
  v128 = (char *)&v108 - v18;
  v126 = type metadata accessor for BeaconStoreFileRecord(0);
  v110 = *(_QWORD **)(v126 - 8);
  __chkstk_darwin(v126);
  v121 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v20);
  v22 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LostModeRecord(0);
  v118 = *(char **)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v108 - (((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v108 - v27;
  v29 = swift_allocObject(&unk_101096BA8, 32, 7);
  *(_QWORD *)(v29 + 16) = a3;
  *(_QWORD *)(v29 + 24) = a4;
  v125 = v29;
  v30 = swift_retain();
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v32 = qword_1011B7D38;
  v115 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v33 = swift_allocObject(v115, 72, 7);
  v114 = xmmword_100E22B00;
  *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
  v130 = a1;
  sub_10005972C(a1, (uint64_t)v28, type metadata accessor for LostModeRecord);
  v120 = v28;
  v127 = v23;
  v34 = String.init<A>(describing:)(v28, v23);
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v116 = sub_10001AA00();
  *(_QWORD *)(v33 + 64) = v116;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Attempting to remove: %@", 24, 2, v33);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  v40 = v128;
  if (v39)
  {
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v37, "BOOLForKey:", v41);

  }
  else
  {
    v42 = 0;
  }
  v43 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v43)
  {
    v44 = v43;
    v45 = objc_msgSend(v43, "aa_primaryAppleAccount");

    if (v45 && (v45, (v42 & 1) == 0))
    {
      v60 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v61 = v130 + *(int *)(v127 + 20);
      v62 = UUID.uuidString.getter(v60);
      v64 = v63;
      v65 = v129;
      v66 = *(id *)(v129 + 152);
      v67._countAndFlagsBits = v62;
      v67._object = v64;
      isa = CKRecordID.init(recordName:zoneID:)(v67, (CKRecordZoneID)v66).super.isa;
      sub_1007FDEC4();
      v128 = (char *)isa;
      v122 = (char *)sub_100BC79BC(isa);
      swift_release();
      sub_10080B950(v61, (uint64_t)v22);
      v69 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v109) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v22, 1, v69);
      sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F47C0);
      v121 = (char *)swift_allocBox(v111);
      v70 = (_QWORD *)v110[7];
      v111 = v71;
      v72 = v126;
      v110 = v70;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v70)(v71, 1, 1, v126);
      v73 = *(_QWORD *)(v65 + 160);
      v74 = v112;
      v75 = v61;
      v76 = v131;
      ((void (**)(char *, uint64_t, uint64_t))v132)[2](v112, v75, v131);
      if (qword_1010EA158 != -1)
        swift_once(&qword_1010EA158, sub_100AA9AFC);
      v77 = v124;
      v78 = sub_10001A9E8(v124, (uint64_t)qword_1011B7B78);
      v79 = UUID.uuidString.getter(v78);
      v80 = v113;
      URL.appendingPathComponent(_:isDirectory:)(v79, v81, 1);
      v82 = swift_bridgeObjectRelease();
      __chkstk_darwin(v82);
      *(&v108 - 4) = v73;
      *(&v108 - 3) = (uint64_t)v74;
      *(&v108 - 2) = (uint64_t)v80;
      v83 = (uint64_t)v117;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v108 - 6, v72);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v80, v77);
      ((void (*)(char *, uint64_t))v132[1])(v74, v76);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v110)(v83, 0, 1, v72);
      v84 = sub_100004084(v83, v111, &qword_10110A908);
      v85 = v115;
      v86 = v116;
      v87 = v128;
      LODWORD(v131) = (_DWORD)v109 != 1;
      v88 = static os_log_type_t.default.getter(v84);
      v89 = qword_1011B7D38;
      v90 = swift_allocObject(v85, 72, 7);
      *(_OWORD *)(v90 + 16) = v114;
      v91 = v87;
      v132 = (void (**)(_QWORD, _QWORD, _QWORD))v91;
      v92 = objc_msgSend(v91, "description");
      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v95 = v94;

      *(_QWORD *)(v90 + 56) = &type metadata for String;
      *(_QWORD *)(v90 + 64) = v86;
      *(_QWORD *)(v90 + 32) = v93;
      *(_QWORD *)(v90 + 40) = v95;
      os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "cloudBacked item deleted from disk: %@", 38, 2, v90);
      swift_bridgeObjectRelease();
      v96 = (uint64_t)v120;
      sub_10005972C(v130, (uint64_t)v120, type metadata accessor for LostModeRecord);
      v97 = v118[80];
      v98 = (v97 + 32) & ~v97;
      v128 = (char *)(v97 | 7);
      v99 = ((unint64_t)v119 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
      v100 = swift_allocObject(&unk_101096BD0, v99 + 17, v97 | 7);
      v101 = v121;
      v102 = v129;
      *(_QWORD *)(v100 + 16) = v121;
      *(_QWORD *)(v100 + 24) = v102;
      sub_1000126EC(v96, v100 + v98, type metadata accessor for LostModeRecord);
      v103 = (uint64_t (**)(uint64_t))(v100 + v99);
      v104 = (uint64_t (*)(uint64_t))v125;
      *v103 = sub_100882AD0;
      v103[1] = v104;
      *(_BYTE *)(v100 + v99 + 16) = v131;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100881AE4, v100);
      swift_release();
      swift_release();
      sub_10005972C(v130, v96, type metadata accessor for LostModeRecord);
      v105 = swift_allocObject(&unk_101096BF8, v99 + 16, v128);
      *(_QWORD *)(v105 + 16) = v101;
      *(_QWORD *)(v105 + 24) = v102;
      sub_1000126EC(v96, v105 + v98, type metadata accessor for LostModeRecord);
      v106 = (uint64_t (**)(uint64_t))(v105 + v99);
      *v106 = sub_100882AD0;
      v106[1] = v104;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_100881B04, v105);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      v119 = a3;
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v118 = v26;
      v120 = (char *)a4;
      v46 = type metadata accessor for Logger(0);
      v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B77E8);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.info.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = v45 != 0;
        v51 = swift_slowAlloc(14, -1);
        *(_DWORD *)v51 = 67109376;
        v133 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 4, v51 + 8);
        *(_WORD *)(v51 + 8) = 1024;
        v133 = v50;
        v40 = v128;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 10, v51 + 14);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v51, 0xEu);
        swift_slowDealloc(v51, -1, -1);
      }

      v52 = *(_QWORD *)(v129 + 160);
      ((void (**)(char *, uint64_t, uint64_t))v132)[2](v40, v130 + *(int *)(v127 + 20), v131);
      if (qword_1010EA158 != -1)
        swift_once(&qword_1010EA158, sub_100AA9AFC);
      v53 = v124;
      v54 = sub_10001A9E8(v124, (uint64_t)qword_1011B7B78);
      v55 = UUID.uuidString.getter(v54);
      v56 = v122;
      URL.appendingPathComponent(_:isDirectory:)(v55, v57, 1);
      v58 = swift_bridgeObjectRelease();
      __chkstk_darwin(v58);
      *(&v108 - 4) = v52;
      *(&v108 - 3) = (uint64_t)v40;
      *(&v108 - 2) = (uint64_t)v56;
      v59 = (uint64_t)v121;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v108 - 6, v126);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v56, v53);
      ((void (*)(char *, uint64_t))v132[1])(v40, v131);
      sub_100893644(v59);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v119(1);
      sub_1000126B0(v59, type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100867C44()
{
  id v0;
  NSString v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setInteger:forKey:", 27, v1);

  v3 = static os_log_type_t.default.getter(v2);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v4 = qword_1011B7D38;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v6 + 56) = &type metadata for Int;
  *(_QWORD *)(v6 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v6 + 32) = 27;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "BeaconStore persistence set to %lu.", v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100867D70(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  char *v40;
  NSString v41;
  unsigned int v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  id v66;
  Swift::String v67;
  Class isa;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t (**v103)(uint64_t);
  uint64_t (*v104)(uint64_t);
  uint64_t v105;
  uint64_t (**v106)(uint64_t);
  uint64_t result;
  uint64_t v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  void (*v119)(uint64_t);
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (**v132)(_QWORD, _QWORD, _QWORD);
  unsigned int v133;
  _BYTE v134[20];

  v129 = a2;
  v111 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v111);
  v117 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v123 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  v9 = __chkstk_darwin(v8);
  v113 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v122 = (char *)&v108 - v11;
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v12 - 8);
  v131 = v12;
  v132 = v13;
  v14 = __chkstk_darwin(v12);
  v112 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v109 = (char *)&v108 - v17;
  __chkstk_darwin(v16);
  v128 = (char *)&v108 - v18;
  v126 = type metadata accessor for BeaconStoreFileRecord(0);
  v110 = *(_QWORD **)(v126 - 8);
  __chkstk_darwin(v126);
  v121 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v20);
  v22 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ShareRecord(0);
  v118 = *(char **)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v108 - (((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v108 - v27;
  v29 = swift_allocObject(&unk_101094510, 32, 7);
  *(_QWORD *)(v29 + 16) = a3;
  *(_QWORD *)(v29 + 24) = a4;
  v125 = v29;
  v30 = swift_retain();
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v32 = qword_1011B7D38;
  v115 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v33 = swift_allocObject(v115, 72, 7);
  v114 = xmmword_100E22B00;
  *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
  v130 = a1;
  sub_10005972C(a1, (uint64_t)v28, type metadata accessor for ShareRecord);
  v120 = v28;
  v127 = v23;
  v34 = String.init<A>(describing:)(v28, v23);
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v116 = sub_10001AA00();
  *(_QWORD *)(v33 + 64) = v116;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Attempting to remove: %@", 24, 2, v33);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  v40 = v128;
  if (v39)
  {
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v37, "BOOLForKey:", v41);

  }
  else
  {
    v42 = 0;
  }
  v43 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v43)
  {
    v44 = v43;
    v45 = objc_msgSend(v43, "aa_primaryAppleAccount");

    if (v45 && (v45, (v42 & 1) == 0))
    {
      v60 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v61 = v130 + *(int *)(v127 + 20);
      v62 = UUID.uuidString.getter(v60);
      v64 = v63;
      v65 = v129;
      v66 = *(id *)(v129 + 152);
      v67._countAndFlagsBits = v62;
      v67._object = v64;
      isa = CKRecordID.init(recordName:zoneID:)(v67, (CKRecordZoneID)v66).super.isa;
      sub_1007FDEC4();
      v128 = (char *)isa;
      v122 = (char *)sub_100BC79BC(isa);
      swift_release();
      sub_10080B950(v61, (uint64_t)v22);
      v69 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v109) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v22, 1, v69);
      sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F47C0);
      v121 = (char *)swift_allocBox(v111);
      v70 = (_QWORD *)v110[7];
      v111 = v71;
      v72 = v126;
      v110 = v70;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v70)(v71, 1, 1, v126);
      v73 = *(_QWORD *)(v65 + 160);
      v74 = v112;
      v75 = v61;
      v76 = v131;
      ((void (**)(char *, uint64_t, uint64_t))v132)[2](v112, v75, v131);
      if (qword_1010E9928 != -1)
        swift_once(&qword_1010E9928, sub_1000A5B90);
      v77 = v124;
      v78 = sub_10001A9E8(v124, (uint64_t)qword_1011B6718);
      v79 = UUID.uuidString.getter(v78);
      v80 = v113;
      URL.appendingPathComponent(_:isDirectory:)(v79, v81, 1);
      v82 = swift_bridgeObjectRelease();
      __chkstk_darwin(v82);
      *(&v108 - 4) = v73;
      *(&v108 - 3) = (uint64_t)v74;
      *(&v108 - 2) = (uint64_t)v80;
      v83 = (uint64_t)v117;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v108 - 6, v72);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v80, v77);
      ((void (*)(char *, uint64_t))v132[1])(v74, v76);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v110)(v83, 0, 1, v72);
      v84 = sub_100004084(v83, v111, &qword_10110A908);
      v85 = v115;
      v86 = v116;
      v87 = v128;
      LODWORD(v131) = (_DWORD)v109 != 1;
      v88 = static os_log_type_t.default.getter(v84);
      v89 = qword_1011B7D38;
      v90 = swift_allocObject(v85, 72, 7);
      *(_OWORD *)(v90 + 16) = v114;
      v91 = v87;
      v132 = (void (**)(_QWORD, _QWORD, _QWORD))v91;
      v92 = objc_msgSend(v91, "description");
      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v95 = v94;

      *(_QWORD *)(v90 + 56) = &type metadata for String;
      *(_QWORD *)(v90 + 64) = v86;
      *(_QWORD *)(v90 + 32) = v93;
      *(_QWORD *)(v90 + 40) = v95;
      os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "cloudBacked item deleted from disk: %@", 38, 2, v90);
      swift_bridgeObjectRelease();
      v96 = (uint64_t)v120;
      sub_10005972C(v130, (uint64_t)v120, type metadata accessor for ShareRecord);
      v97 = v118[80];
      v98 = (v97 + 32) & ~v97;
      v128 = (char *)(v97 | 7);
      v99 = ((unint64_t)v119 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
      v100 = swift_allocObject(&unk_101094538, v99 + 17, v97 | 7);
      v101 = v121;
      v102 = v129;
      *(_QWORD *)(v100 + 16) = v121;
      *(_QWORD *)(v100 + 24) = v102;
      sub_1000126EC(v96, v100 + v98, type metadata accessor for ShareRecord);
      v103 = (uint64_t (**)(uint64_t))(v100 + v99);
      v104 = (uint64_t (*)(uint64_t))v125;
      *v103 = sub_100868C8C;
      v103[1] = v104;
      *(_BYTE *)(v100 + v99 + 16) = v131;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100868E1C, v100);
      swift_release();
      swift_release();
      sub_10005972C(v130, v96, type metadata accessor for ShareRecord);
      v105 = swift_allocObject(&unk_101094560, v99 + 16, v128);
      *(_QWORD *)(v105 + 16) = v101;
      *(_QWORD *)(v105 + 24) = v102;
      sub_1000126EC(v96, v105 + v98, type metadata accessor for ShareRecord);
      v106 = (uint64_t (**)(uint64_t))(v105 + v99);
      *v106 = sub_100868C8C;
      v106[1] = v104;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_100868F84, v105);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      v119 = a3;
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v118 = v26;
      v120 = (char *)a4;
      v46 = type metadata accessor for Logger(0);
      v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B77E8);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.info.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = v45 != 0;
        v51 = swift_slowAlloc(14, -1);
        *(_DWORD *)v51 = 67109376;
        v133 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 4, v51 + 8);
        *(_WORD *)(v51 + 8) = 1024;
        v133 = v50;
        v40 = v128;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 10, v51 + 14);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v51, 0xEu);
        swift_slowDealloc(v51, -1, -1);
      }

      v52 = *(_QWORD *)(v129 + 160);
      ((void (**)(char *, uint64_t, uint64_t))v132)[2](v40, v130 + *(int *)(v127 + 20), v131);
      if (qword_1010E9928 != -1)
        swift_once(&qword_1010E9928, sub_1000A5B90);
      v53 = v124;
      v54 = sub_10001A9E8(v124, (uint64_t)qword_1011B6718);
      v55 = UUID.uuidString.getter(v54);
      v56 = v122;
      URL.appendingPathComponent(_:isDirectory:)(v55, v57, 1);
      v58 = swift_bridgeObjectRelease();
      __chkstk_darwin(v58);
      *(&v108 - 4) = v52;
      *(&v108 - 3) = (uint64_t)v40;
      *(&v108 - 2) = (uint64_t)v56;
      v59 = (uint64_t)v121;
      OS_dispatch_queue.sync<A>(execute:)(sub_100868CB4, &v108 - 6, v126);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v56, v53);
      ((void (*)(char *, uint64_t))v132[1])(v40, v131);
      sub_100893644(v59);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v119(1);
      sub_1000126B0(v59, type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_100868C8C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(BOOL))(v1 + 16))(a1 == 0);
}

uint64_t sub_100868CB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100886710(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100868CD0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17, v3 | 7);
}

uint64_t sub_100868E1C(void **a1)
{
  return sub_100876D2C(a1, type metadata accessor for ShareRecord, &qword_10110A910, (uint64_t)&unk_100E25BF4);
}

uint64_t sub_100868E38()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_100868F84(uint64_t a1)
{
  return sub_100876EFC(a1, type metadata accessor for ShareRecord);
}

void sub_100868F90(uint64_t a1, char a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5, void *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  void (*v38)(uint64_t);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (**v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  id v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(uint64_t);
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59[2];

  v57 = a1;
  v58 = a5;
  v54 = a3;
  v55 = a4;
  v51 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v51);
  v52 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconNamingRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v53 = (char *)&v47 - v14;
  v56 = swift_allocObject(&unk_101095D48, 24, 7);
  *(_QWORD *)(v56 + 16) = a6;
  v50 = a6;
  v15 = static os_log_type_t.default.getter(v50);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v16 = qword_1011B7D38;
  v49 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v49, 72, 7);
  v18 = (_QWORD *)v17;
  v47 = xmmword_100E22B00;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  if ((a2 & 1) != 0)
    v19 = 1702195828;
  else
    v19 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v20 = 0xE400000000000000;
  else
    v20 = 0xE500000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v48 = sub_10001AA00();
  v18[8] = v48;
  v18[4] = v19;
  v18[5] = v20;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31, 2, v18, v47, v48);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    v21 = objc_autoreleasePoolPush();
    v22 = v57;
    sub_100CA6264(v57);
    v24 = v23;
    objc_autoreleasePoolPop(v21);
    v59[0] = v24;
    v25 = v53;
    sub_10005972C(v22, (uint64_t)v53, type metadata accessor for BeaconNamingRecord);
    *(_QWORD *)&v25[*(int *)(v9 + 28)] = objc_msgSend(v50, "roleId");
    sub_10084DC3C(v59, (uint64_t)v25);
    v26 = v58;
    v27 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    __chkstk_darwin(v27);
    *((_QWORD *)&v47 - 2) = v28;
    *((_QWORD *)&v47 - 1) = v25;
    OS_dispatch_queue.sync<A>(execute:)(sub_1007BE130, &v47 - 2, &type metadata for () + 1);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    sub_1007EEF64(8);
    v44 = v52;
    sub_10005972C((uint64_t)v25, v52, type metadata accessor for BeaconNamingRecord);
    swift_storeEnumTagMultiPayload(v44, v51, 0);
    v54(v44);
    sub_100004048(v44, &qword_101108090);
    v45 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v45);
    *((_QWORD *)&v47 - 4) = v26;
    *((_QWORD *)&v47 - 3) = v59;
    *((_QWORD *)&v47 - 2) = v22;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_100882DAC, &v47 - 3);
    sub_1000126B0((uint64_t)v25, type metadata accessor for BeaconNamingRecord);
    v46 = v59[0];
    swift_release();

  }
  else
  {
    v29 = objc_autoreleasePoolPush();
    v30 = v57;
    sub_100CA6264(v57);
    v53 = v31;
    objc_autoreleasePoolPop(v29);
    sub_1007FDEC4();
    sub_10005972C(v30, (uint64_t)v13, type metadata accessor for BeaconNamingRecord);
    v32 = *(unsigned __int8 *)(v10 + 80);
    v33 = (v32 + 32) & ~v32;
    v52 = v32 | 7;
    v34 = swift_allocObject(&unk_101095D70, v33 + v11, v32 | 7);
    v35 = v56;
    *(_QWORD *)(v34 + 16) = sub_10087EA98;
    *(_QWORD *)(v34 + 24) = v35;
    sub_1000126EC((uint64_t)v13, v34 + v33, type metadata accessor for BeaconNamingRecord);
    swift_retain();
    sub_100BC910C(v53, (void (*)(id *))sub_1008764F0, v34);
    swift_release();
    swift_release();
    v36 = swift_allocObject(&unk_101095D98, 32, 7);
    v38 = v54;
    v37 = v55;
    *(_QWORD *)(v36 + 16) = v54;
    *(_QWORD *)(v36 + 24) = v37;
    swift_retain();
    Future.addFailure(block:)(sub_100882E54, v36);
    swift_release();
    swift_release();
    sub_10005972C(v57, (uint64_t)v13, type metadata accessor for BeaconNamingRecord);
    v39 = (v32 + 16) & ~v32;
    v40 = (v11 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    v42 = swift_allocObject(&unk_101095DC0, v41 + 16, v52);
    sub_1000126EC((uint64_t)v13, v42 + v39, type metadata accessor for BeaconNamingRecord);
    *(_QWORD *)(v42 + v40) = v58;
    v43 = (void (**)(uint64_t))(v42 + v41);
    *v43 = v38;
    v43[1] = v37;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_100876510, v42);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_100869614(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  unsigned int v38;
  NSString v39;
  unsigned int v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  id v60;
  Swift::String v61;
  Class isa;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t (**v96)(uint64_t);
  uint64_t (*v97)(uint64_t);
  void (*v98)(_QWORD);
  uint64_t v99;
  uint64_t v100;
  uint64_t (**v101)(uint64_t);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  void (*v118)(_QWORD);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _BOOL4 v127;
  _BYTE v128[20];

  v124 = a2;
  v106 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v106);
  v111 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v120 = *(_QWORD *)(v8 - 8);
  v121 = v8;
  v9 = __chkstk_darwin(v8);
  v108 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v103 - v11;
  v125 = (_QWORD *)type metadata accessor for UUID(0);
  v123 = *(v125 - 1);
  v13 = __chkstk_darwin(v125);
  v107 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v104 = (char *)&v103 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v103 - v17;
  v119 = type metadata accessor for BeaconStoreFileRecord(0);
  v105 = *(_QWORD **)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v20);
  v22 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BeaconNamingRecord(0);
  v112 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v115 = (char *)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v103 - v26;
  v28 = swift_allocObject(&unk_101094880, 32, 7);
  v118 = a3;
  *(_QWORD *)(v28 + 16) = a3;
  *(_QWORD *)(v28 + 24) = a4;
  v122 = v28;
  v29 = swift_retain();
  v30 = static os_log_type_t.default.getter(v29);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v31 = qword_1011B7D38;
  v116 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v32 = swift_allocObject(v116, 72, 7);
  v109 = xmmword_100E22B00;
  *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
  v126 = a1;
  sub_10005972C(a1, (uint64_t)v27, type metadata accessor for BeaconNamingRecord);
  v114 = v27;
  v33 = String.init<A>(describing:)(v27, v23);
  v35 = v34;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  v110 = sub_10001AA00();
  *(_QWORD *)(v32 + 64) = v110;
  *(_QWORD *)(v32 + 32) = v33;
  *(_QWORD *)(v32 + 40) = v35;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Attempting to remove: %@", 24, 2, v32);
  swift_bridgeObjectRelease(v32);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v36 = (void *)qword_1011B7C08;
  v37 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v38 = objc_msgSend(v37, "isInternalBuild");

  if (v38)
  {
    v39 = String._bridgeToObjectiveC()();
    v40 = objc_msgSend(v36, "BOOLForKey:", v39);

  }
  else
  {
    v40 = 0;
  }
  v41 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v41)
  {
    v42 = v41;
    v43 = objc_msgSend(v41, "aa_primaryAppleAccount");

    if (v43 && (v43, (v40 & 1) == 0))
    {
      v54 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v55 = v126 + *(int *)(v23 + 20);
      v56 = UUID.uuidString.getter(v54);
      v58 = v57;
      v59 = v124;
      v60 = *(id *)(v124 + 152);
      v61._countAndFlagsBits = v56;
      v61._object = v58;
      isa = CKRecordID.init(recordName:zoneID:)(v61, (CKRecordZoneID)v60).super.isa;
      v63 = sub_1007FDEC4(isa);
      v115 = (char *)isa;
      v118 = (void (*)(_QWORD))sub_100BC79BC(isa);
      swift_release(v63);
      sub_10080B950(v55, (uint64_t)v22);
      v64 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v104) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 48))(v22, 1, v64);
      sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F47C0);
      v117 = (char *)swift_allocBox(v106);
      v65 = (_QWORD *)v105[7];
      v106 = v66;
      v67 = v119;
      v105 = v65;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v65)(v66, 1, 1, v119);
      v68 = *(_QWORD *)(v59 + 160);
      v69 = v107;
      v70 = v55;
      v71 = v125;
      (*(void (**)(char *, uint64_t, _QWORD *))(v123 + 16))(v107, v70, v125);
      v72 = objc_autoreleasePoolPush();
      v73 = v108;
      sub_100A00C6C();
      objc_autoreleasePoolPop(v72);
      __chkstk_darwin(v74);
      *(&v103 - 4) = v68;
      *(&v103 - 3) = (uint64_t)v69;
      *(&v103 - 2) = (uint64_t)v73;
      v75 = (uint64_t)v111;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v103 - 6, v67);
      v76 = v116;
      (*(void (**)(char *, uint64_t))(v120 + 8))(v73, v121);
      (*(void (**)(char *, _QWORD *))(v123 + 8))(v69, v71);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v105)(v75, 0, 1, v67);
      v78 = sub_100004084(v75, v106, &qword_10110A908);
      v79 = v110;
      v80 = v115;
      LODWORD(v123) = (_DWORD)v104 != 1;
      v81 = static os_log_type_t.default.getter(v78);
      v82 = qword_1011B7D38;
      v83 = swift_allocObject(v76, 72, 7);
      *(_OWORD *)(v83 + 16) = v109;
      v84 = v80;
      v125 = v84;
      v85 = objc_msgSend(v84, "description");
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      v88 = v87;

      *(_QWORD *)(v83 + 56) = &type metadata for String;
      *(_QWORD *)(v83 + 64) = v79;
      *(_QWORD *)(v83 + 32) = v86;
      *(_QWORD *)(v83 + 40) = v88;
      os_log(_:dso:log:_:_:)(v81, &_mh_execute_header, v82, "cloudBacked item deleted from disk: %@", 38, 2, v83);
      swift_bridgeObjectRelease(v83);
      v89 = (uint64_t)v114;
      sub_10005972C(v126, (uint64_t)v114, type metadata accessor for BeaconNamingRecord);
      v90 = *(unsigned __int8 *)(v112 + 80);
      v91 = (v90 + 32) & ~v90;
      v121 = v90 | 7;
      v92 = (v113 + v91 + 7) & 0xFFFFFFFFFFFFFFF8;
      v93 = swift_allocObject(&unk_1010948A8, v92 + 17, v90 | 7);
      v94 = v117;
      v95 = v124;
      *(_QWORD *)(v93 + 16) = v117;
      *(_QWORD *)(v93 + 24) = v95;
      sub_1000126EC(v89, v93 + v91, type metadata accessor for BeaconNamingRecord);
      v96 = (uint64_t (**)(uint64_t))(v93 + v92);
      v97 = (uint64_t (*)(uint64_t))v122;
      *v96 = sub_100882AD0;
      v96[1] = v97;
      *(_BYTE *)(v93 + v92 + 16) = v123;
      swift_retain();
      swift_retain();
      swift_retain();
      v98 = v118;
      v99 = Future.addSuccess(block:)(sub_100877060, v93);
      swift_release(v99);
      swift_release(v93);
      sub_10005972C(v126, v89, type metadata accessor for BeaconNamingRecord);
      v100 = swift_allocObject(&unk_1010948D0, v92 + 16, v121);
      *(_QWORD *)(v100 + 16) = v94;
      *(_QWORD *)(v100 + 24) = v95;
      sub_1000126EC(v89, v100 + v91, type metadata accessor for BeaconNamingRecord);
      v101 = (uint64_t (**)(uint64_t))(v100 + v92);
      *v101 = sub_100882AD0;
      v101[1] = v97;
      swift_retain();
      swift_retain();
      swift_retain();
      v102 = Future.addFailure(block:)(sub_1008771E8, v100);
      swift_release(v97);
      swift_release(v94);
      swift_release(v100);

      swift_release(v98);
      v77 = v102;
    }
    else
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v116 = a4;
      v44 = type metadata accessor for Logger(0);
      v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B77E8);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.info.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc(14, -1);
        *(_DWORD *)v48 = 67109376;
        v127 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v48 + 4, v48 + 8);
        *(_WORD *)(v48 + 8) = 1024;
        v127 = v43 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v48 + 10, v48 + 14);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v48, 0xEu);
        swift_slowDealloc(v48, -1, -1);
      }

      v49 = v123;
      v50 = *(_QWORD *)(v124 + 160);
      (*(void (**)(char *, uint64_t, _QWORD *))(v123 + 16))(v18, v126 + *(int *)(v23 + 20), v125);
      v51 = objc_autoreleasePoolPush();
      sub_100A00C6C();
      objc_autoreleasePoolPop(v51);
      __chkstk_darwin(v52);
      *(&v103 - 4) = v50;
      *(&v103 - 3) = (uint64_t)v18;
      *(&v103 - 2) = (uint64_t)v12;
      v53 = (uint64_t)v117;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v103 - 6, v119);
      (*(void (**)(char *, uint64_t))(v120 + 8))(v12, v121);
      (*(void (**)(char *, _QWORD *))(v49 + 8))(v18, v125);
      sub_100893644(v53);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v118(1);
      sub_1000126B0(v53, type metadata accessor for BeaconStoreFileRecord);
      v77 = v122;
    }
    swift_release(v77);
  }
  else
  {
    swift_release(a4);
    __break(1u);
    swift_release(v116);
    objc_autoreleasePoolPop(v36);
    __break(1u);
  }
}

void sub_10086A4B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint8_t *v20;
  void *v21;
  id v22;
  unsigned int v23;
  NSString v24;
  unsigned int v25;
  id v26;
  void *v27;
  id v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  BOOL v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE v46[12];
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  int v55;
  _BYTE v56[12];

  v53 = a1;
  v49 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v49);
  v10 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for BeaconNamingRecord(0);
  __chkstk_darwin(v11);
  v54 = &v46[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = swift_allocObject(&unk_101095CF8, 24, 7);
  *(_QWORD *)(v13 + 16) = a5;
  v14 = (_QWORD *)swift_allocObject(&unk_101095D20, 40, 7);
  v14[2] = sub_1001D1C04;
  v14[3] = v13;
  v14[4] = a4;
  _Block_copy(a5);
  _Block_copy(a5);
  v15 = qword_1010E9F80;
  v52 = v13;
  swift_retain();
  swift_retain();
  if (v15 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v51 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v17 = Logger.logObject.getter(v51);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v50 = a4;
  if (v19)
  {
    v20 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v20 = 67109120;
    v55 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v20 + 4, v20 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc(v20, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v21 = (void *)qword_1011B7C08;
  v22 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v23 = objc_msgSend(v22, "isInternalBuild");

  if (v23)
  {
    v24 = String._bridgeToObjectiveC()();
    v25 = objc_msgSend(v21, "BOOLForKey:", v24);

  }
  else
  {
    v25 = 0;
  }
  v26 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v25) & 1) == 0))
    {
      sub_100809338(v53, (uint64_t)sub_10087EA8C, (uint64_t)v14);
    }
    else
    {
      v47 = v25;
      v48 = v14;
      v29 = v54;
      sub_10005972C(v53, (uint64_t)v54, type metadata accessor for BeaconNamingRecord);
      v30 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      __chkstk_darwin(v30);
      *(_QWORD *)&v46[-16] = v31;
      *(_QWORD *)&v46[-8] = v29;
      v32 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE130, &v46[-32], &type metadata for () + 1);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter(v33);
      v35 = os_log_type_enabled(v33, v34);
      v36 = v50;
      if (v35)
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Saved LocalStorageBacked record. Calling completion.", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = v53;
      sub_10005972C(v53, (uint64_t)v10, type metadata accessor for BeaconNamingRecord);
      swift_storeEnumTagMultiPayload(v10, v49, 0);
      _Block_copy(a5);
      sub_1004C8F2C((uint64_t)v10, v36, (uint64_t)a5);
      _Block_release(a5);
      v39 = sub_100004048((uint64_t)v10, &qword_101108090);
      v40 = v47;
      if (((v28 != 0) & ~v47) != 0)
      {
        v44 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v44);
        *(_QWORD *)&v46[-32] = a3;
        *(_QWORD *)&v46[-24] = v38;
        v45 = v54;
        *(_QWORD *)&v46[-16] = v54;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882D98, &v46[-48]);
        sub_1000126B0((uint64_t)v45, type metadata accessor for BeaconNamingRecord);
      }
      else
      {
        v41 = Logger.logObject.getter(v39);
        v42 = static os_log_type_t.info.getter(v41);
        if (os_log_type_enabled(v41, v42))
        {
          v43 = swift_slowAlloc(14, -1);
          *(_DWORD *)v43 = 67109376;
          v55 = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 4, v43 + 8);
          *(_WORD *)(v43 + 8) = 1024;
          v55 = v28 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 10, v43 + 14);
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v43, 0xEu);
          swift_slowDealloc(v43, -1, -1);
        }

        sub_1000126B0((uint64_t)v54, type metadata accessor for BeaconNamingRecord);
      }
    }
    swift_release();
    swift_release();
    _Block_release(a5);
  }
  else
  {
    swift_release();
    _Block_release(a5);
    _Block_release(a5);
    swift_release();
    __break(1u);
  }
}

void sub_10086AC90(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  void *v22;
  id v23;
  unsigned int v24;
  NSString v25;
  unsigned int v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE v47[12];
  unsigned int v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  _BYTE v55[12];

  v52 = a1;
  v9 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v9);
  v11 = &v47[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for BeaconNamingRecord(0);
  __chkstk_darwin(v12);
  v53 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = swift_allocObject(&unk_101095C30, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v51 = v14;
  v15 = qword_1010E9F80;
  v50 = a4;
  swift_retain();
  if (v15 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v49 = v9;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v21 = 67109120;
    v54 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v22 = (void *)qword_1011B7C08;
  v23 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v24 = objc_msgSend(v23, "isInternalBuild");

  if (v24)
  {
    v25 = String._bridgeToObjectiveC()();
    v26 = objc_msgSend(v22, "BOOLForKey:", v25);

  }
  else
  {
    v26 = 0;
  }
  v27 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v27)
  {
    v28 = v27;
    v29 = objc_msgSend(v27, "aa_primaryAppleAccount");

    if (v29 && (v29, ((a2 | v26) & 1) == 0))
    {
      sub_100809338(v52, (uint64_t)sub_10087E778, v51);
    }
    else
    {
      v48 = v26;
      v30 = a5;
      v31 = v53;
      sub_10005972C(v52, (uint64_t)v53, type metadata accessor for BeaconNamingRecord);
      v32 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      __chkstk_darwin(v32);
      *(_QWORD *)&v47[-16] = v33;
      *(_QWORD *)&v47[-8] = v31;
      v34 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE130, &v47[-32], &type metadata for () + 1);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved LocalStorageBacked record. Calling completion.", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = v52;
      sub_10005972C(v52, (uint64_t)v11, type metadata accessor for BeaconNamingRecord);
      swift_storeEnumTagMultiPayload(v11, v49, 0);
      sub_1004A29DC((uint64_t)v11, v50, v30);
      v39 = sub_100004048((uint64_t)v11, &qword_101108090);
      v40 = v48;
      if (((v29 != 0) & ~v48) != 0)
      {
        v45 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v45);
        *(_QWORD *)&v47[-32] = a3;
        *(_QWORD *)&v47[-24] = v38;
        v46 = v53;
        *(_QWORD *)&v47[-16] = v53;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882D98, &v47[-48]);
        v44 = v46;
      }
      else
      {
        v41 = Logger.logObject.getter(v39);
        v42 = static os_log_type_t.info.getter(v41);
        if (os_log_type_enabled(v41, v42))
        {
          v43 = swift_slowAlloc(14, -1);
          *(_DWORD *)v43 = 67109376;
          v54 = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v43 + 4, v43 + 8);
          *(_WORD *)(v43 + 8) = 1024;
          v54 = v29 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v43 + 10, v43 + 14);
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v43, 0xEu);
          swift_slowDealloc(v43, -1, -1);
        }

        v44 = v53;
      }
      sub_1000126B0((uint64_t)v44, type metadata accessor for BeaconNamingRecord);
    }
    swift_release();
  }
  else
  {
    swift_release();

    __break(1u);
  }
}

uint64_t sub_10086B3DC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v35)(uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[7];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v39 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  __chkstk_darwin(v8);
  v36 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_101096E28, 32, 7);
  v35 = a2;
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  swift_retain();
  v11 = sub_1007FDEC4();
  v12 = (_QWORD *)swift_allocObject(&unk_101096E50, 40, 7);
  v12[2] = sub_10015A05C;
  v12[3] = v10;
  v12[4] = a1;
  swift_retain_n(v10, 2);
  v42 = a1;
  swift_retain_n(a1, 2);
  v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v14 = LOBYTE(aBlock[0]);
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v16 = qword_1011B7D48;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v18 + 56) = &type metadata for Bool;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = v14;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "localAvailable: %d", (_DWORD)v35);
  v19 = swift_bridgeObjectRelease();
  v20 = static os_log_type_t.default.getter(v19);
  v21 = qword_1011B7D48;
  if (v14)
  {
    v22 = os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v35(v22);
    swift_release();
    swift_release();
    swift_release_n(v10, 2);
  }
  else
  {
    v23 = os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v24 = static os_log_type_t.default.getter(v23);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v21, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v35 = *(void (**)(uint64_t))(v11 + 64);
    v25 = (_QWORD *)swift_allocObject(&unk_101096E78, 40, 7);
    v25[2] = v11;
    v25[3] = sub_1000170EC;
    v25[4] = v12;
    aBlock[4] = sub_100882D68;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101096E90;
    v26 = _Block_copy(aBlock);
    swift_retain();
    v27 = swift_retain();
    v28 = v36;
    static DispatchQoS.unspecified.getter(v27);
    v43 = _swiftEmptyArrayStorage;
    v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v32 = v39;
    v33 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v30, v31, v41, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v32, v26);
    _Block_release(v26);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v38);
    swift_release();
    swift_release();
    swift_release_n(v10, 2);
    swift_release();
  }
  return swift_release();
}

void *sub_10086B814(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v27;
  unsigned __int8 v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[5];
  _QWORD v55[5];

  v51 = a3;
  LODWORD(v52) = a4;
  v50 = a2;
  v9 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v49 - v20;
  v55[3] = a5;
  v55[4] = a6;
  v22 = sub_100018F08(v55);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v22, a1, a5);
  sub_100030784((uint64_t)v55, (uint64_t)v54);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v24 = swift_dynamicCast(v14, v54, v23, v15, 6);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (!v24)
  {
    v25(v14, 1, 1, v15);
    sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010F47C0);
    goto LABEL_16;
  }
  v25(v14, 0, 1, v15);
  sub_1000126EC((uint64_t)v14, (uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
  sub_10005972C((uint64_t)&v21[*(int *)(v15 + 24)], (uint64_t)v11, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if (EnumCaseMultiPayload == 2)
  {
    v32 = sub_10001A9A8(&qword_101106F40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = (unsigned __int8 *)&v11[*(int *)(v32 + 96)];
    v34 = *v33;
    v35 = v33[1];
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {
      v29 = v50 & 1;
      v30 = v51 & 1;
      v31 = v52 & 1;
      v28 = v34;
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    v36 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v11, v36);
LABEL_16:
    v46 = &_swiftEmptySetSingleton;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 3)
  {
    if (qword_1010E9F90 != -1)
      swift_once(&qword_1010E9F90, sub_1007FA7C0);
    v37 = type metadata accessor for Logger(0);
    sub_10001A9E8(v37, (uint64_t)qword_1011B7818);
    v38 = sub_10005972C((uint64_t)v21, (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(32, -1);
      v52 = v42;
      *(_DWORD *)v41 = 141558275;
      v53 = 1752392040;
      v54[0] = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v41 + 4, v41 + 12);
      *(_WORD *)(v41 + 12) = 2081;
      sub_100C6ED38();
      v53 = sub_100016940(v43, v44, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "nearbyParts: Invalid stableIdentifier %{private,mask.hash}s", (uint8_t *)v41, 0x16u);
      v45 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    }

    sub_1000126B0((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    sub_1000126B0((uint64_t)v11, type metadata accessor for StableIdentifier);
    goto LABEL_16;
  }
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F46F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = v11[*(int *)(v27 + 96)];
  v29 = v50 & 1;
  v30 = v51 & 1;
  v31 = v52 & 1;
LABEL_13:
  v46 = sub_1000AF518(v28, v29, v30, v31);
  sub_1000126B0((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
  v47 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v11, v47);
LABEL_17:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  return v46;
}

unint64_t sub_10086BD1C(unint64_t result)
{
  if (result >= 0x19)
    return 25;
  return result;
}

uint64_t sub_10086BD2C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  void *v25;
  id v26;
  unsigned int v27;
  NSString v28;
  unsigned int v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  _BYTE v63[4];
  int v64;
  int v65;

  v60 = a1;
  v61 = a3;
  v8 = sub_10001A9A8(&qword_101106E48);
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_101106E30);
  v56 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SafeLocation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(&unk_101095E10, 32, 7);
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  v18 = qword_1010E9F80;
  v59 = a4;
  swift_retain();
  v58 = a5;
  if (v18 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B77E8);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v57 = v11;
  if (v23)
  {
    v24 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v24 = 67109120;
    v64 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v24 + 4, v24 + 8);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Saving record. Disk First? %{BOOL}d", v24, 8u);
    swift_slowDealloc(v24, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v25 = (void *)qword_1011B7C08;
  v26 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v27 = objc_msgSend(v26, "isInternalBuild");

  if (v27)
  {
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v25, "BOOLForKey:", v28);

  }
  else
  {
    v29 = 0;
  }
  v30 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v30)
  {
    v31 = v30;
    v32 = objc_msgSend(v30, "aa_primaryAppleAccount");

    if (v32 && (v32, ((a2 | v29) & 1) == 0))
    {
      sub_100809D40(v60, (uint64_t)sub_10087EC98, v17);
    }
    else
    {
      v55 = v17;
      v33 = v60;
      v34 = sub_10005972C(v60, (uint64_t)v16, type metadata accessor for SafeLocation);
      __chkstk_darwin(v34);
      *(&v53 - 2) = v35;
      *(&v53 - 1) = (uint64_t)v16;
      v36 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE144, &v53 - 4, &type metadata for () + 1);
      v54 = v16;
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Saved LocalStorageBacked record. Calling completion.", v39, 2u);
        swift_slowDealloc(v39, -1, -1);
      }

      sub_10005972C(v33, (uint64_t)v13, type metadata accessor for SafeLocation);
      v40 = v57;
      swift_storeEnumTagMultiPayload(v13, v57, 0);
      v41 = swift_projectBox(v59);
      sub_10000F9B8((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_101106E30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v10, 0, 1, v40);
      swift_beginAccess(v41, &v64, 1, 0);
      sub_100004084((uint64_t)v10, v41, &qword_101106E48);
      dispatch_group_leave(v58);
      v42 = sub_100004048((uint64_t)v13, (uint64_t *)&unk_101106E30);
      if (((v32 != 0) & ~v29) != 0)
      {
        v49 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v49);
        v50 = v60;
        *(&v53 - 4) = v61;
        *(&v53 - 3) = v50;
        v51 = (uint64_t)v54;
        *(&v53 - 2) = (uint64_t)v54;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_10087ECA0, &v53 - 6);
        v48 = v51;
      }
      else
      {
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.info.getter(v43);
        v45 = os_log_type_enabled(v43, v44);
        v46 = (uint64_t)v54;
        if (v45)
        {
          v47 = swift_slowAlloc(14, -1);
          *(_DWORD *)v47 = 67109376;
          v62 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v47 + 4, v47 + 8);
          *(_WORD *)(v47 + 8) = 1024;
          v62 = v32 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v47 + 10, v47 + 14);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v47, 0xEu);
          swift_slowDealloc(v47, -1, -1);
        }

        v48 = v46;
      }
      sub_1000126B0(v48, type metadata accessor for SafeLocation);
    }
    return swift_release();
  }
  else
  {

    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_10086C578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  NSString v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  int *v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  Class isa;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t (**v103)(uint64_t);
  uint64_t v104;
  uint64_t (*v105)(uint64_t);
  uint64_t v106;
  uint64_t (**v107)(uint64_t);
  uint64_t result;
  _QWORD v109[2];
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  unsigned int v133;
  _BYTE v134[20];

  v130 = a2;
  v111 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v111);
  v116 = (char *)v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  v125 = v9;
  v10 = __chkstk_darwin(v8);
  v113 = (char *)v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v121 = (char *)v109 - v12;
  v128 = type metadata accessor for UUID(0);
  v131 = *(int **)(v128 - 8);
  v13 = __chkstk_darwin(v128);
  v112 = (char *)v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v109[1] = (char *)v109 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)v109 - v17;
  v127 = type metadata accessor for BeaconStoreFileRecord(0);
  v110 = *(_QWORD **)(v127 - 8);
  __chkstk_darwin(v127);
  v120 = (char *)v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v20);
  v22 = (char *)v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SafeLocation(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  v26 = __chkstk_darwin(v23);
  v118 = (char *)v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)v109 - v27;
  v29 = swift_allocObject(&unk_101094C18, 32, 7);
  v122 = a3;
  v123 = a4;
  *(_QWORD *)(v29 + 16) = a3;
  *(_QWORD *)(v29 + 24) = a4;
  v126 = v29;
  v30 = swift_retain();
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v32 = qword_1011B7D38;
  v119 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v33 = swift_allocObject(v119, 72, 7);
  v114 = xmmword_100E22B00;
  *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
  v132 = a1;
  sub_10005972C(a1, (uint64_t)v28, type metadata accessor for SafeLocation);
  v117 = v28;
  v129 = (int *)v23;
  v34 = String.init<A>(describing:)(v28, v23);
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v115 = sub_10001AA00();
  *(_QWORD *)(v33 + 64) = v115;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Attempting to remove: %@", 24, 2, v33);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  if (v39)
  {
    v40 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v37, "BOOLForKey:", v40);

  }
  v41 = v132;
  v42 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v42)
  {
    v43 = v42;
    v44 = objc_msgSend(v42, "aa_primaryAppleAccount");

    if (v44 && (v44, (v39 & 1) == 0))
    {
      v122 = v24;
      v123 = v25;
      v61 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v62 = v41 + v129[5];
      v63 = UUID.uuidString.getter(v61);
      v65 = v64;
      v66 = v130;
      v67 = *(id *)(v130 + 152);
      v68._countAndFlagsBits = v63;
      v68._object = v65;
      isa = CKRecordID.init(recordName:zoneID:)(v68, (CKRecordZoneID)v67).super.isa;
      sub_1007FDEC4();
      v129 = (int *)isa;
      v121 = (char *)sub_100BC79BC(isa);
      swift_release();
      sub_10080B950(v62, (uint64_t)v22);
      v70 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v118) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v22, 1, v70);
      sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F47C0);
      v120 = (char *)swift_allocBox(v111);
      v71 = (_QWORD *)v110[7];
      v111 = v72;
      v73 = v127;
      v110 = v71;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v71)(v72, 1, 1, v127);
      v74 = *(_QWORD *)(v66 + 160);
      v75 = v112;
      v76 = v128;
      (*((void (**)(char *, uint64_t, uint64_t))v131 + 2))(v112, v62, v128);
      if (qword_1010EA1C0 != -1)
        swift_once(&qword_1010EA1C0, sub_100B00710);
      v77 = v124;
      v78 = sub_10001A9E8(v124, (uint64_t)qword_1011B7C58);
      v79 = v125;
      v80 = v113;
      v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v125 + 16))(v113, v78, v77);
      __chkstk_darwin(v81);
      v109[-4] = v74;
      v109[-3] = v75;
      v109[-2] = v80;
      v82 = (uint64_t)v116;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v109[-6], v73);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v77);
      (*((void (**)(char *, uint64_t))v131 + 1))(v75, v76);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v110)(v82, 0, 1, v73);
      v83 = sub_100004084(v82, v111, &qword_10110A908);
      v84 = v115;
      v85 = v119;
      v86 = v132;
      v87 = v129;
      LODWORD(v129) = (_DWORD)v118 != 1;
      v88 = static os_log_type_t.default.getter(v83);
      v89 = qword_1011B7D38;
      v90 = swift_allocObject(v85, 72, 7);
      *(_OWORD *)(v90 + 16) = v114;
      v91 = v87;
      v131 = v91;
      v92 = objc_msgSend(v91, "description");
      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v95 = v94;

      *(_QWORD *)(v90 + 56) = &type metadata for String;
      *(_QWORD *)(v90 + 64) = v84;
      *(_QWORD *)(v90 + 32) = v93;
      *(_QWORD *)(v90 + 40) = v95;
      os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "cloudBacked item deleted from disk: %@", 38, 2, v90);
      swift_bridgeObjectRelease();
      v96 = (uint64_t)v117;
      sub_10005972C(v86, (uint64_t)v117, type metadata accessor for SafeLocation);
      v97 = *(unsigned __int8 *)(v122 + 80);
      v98 = (v97 + 32) & ~v97;
      v99 = (v123 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
      v127 = v99 + 16;
      v128 = v97 | 7;
      v100 = swift_allocObject(&unk_101094C40, v99 + 17, v97 | 7);
      v101 = v120;
      v102 = v130;
      *(_QWORD *)(v100 + 16) = v120;
      *(_QWORD *)(v100 + 24) = v102;
      sub_1000126EC(v96, v100 + v98, type metadata accessor for SafeLocation);
      v103 = (uint64_t (**)(uint64_t))(v100 + v99);
      v104 = v86;
      v105 = (uint64_t (*)(uint64_t))v126;
      *v103 = sub_100882AD0;
      v103[1] = v105;
      *(_BYTE *)(v100 + v99 + 16) = (_BYTE)v129;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100878A58, v100);
      swift_release();
      swift_release();
      sub_10005972C(v104, v96, type metadata accessor for SafeLocation);
      v106 = swift_allocObject(&unk_101094C68, v127, v128);
      *(_QWORD *)(v106 + 16) = v101;
      *(_QWORD *)(v106 + 24) = v102;
      sub_1000126EC(v96, v106 + v98, type metadata accessor for SafeLocation);
      v107 = (uint64_t (**)(uint64_t))(v106 + v99);
      *v107 = sub_100882AD0;
      v107[1] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_100878B4C, v106);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v45 = type metadata accessor for Logger(0);
      v119 = sub_10001A9E8(v45, (uint64_t)qword_1011B77E8);
      v46 = Logger.logObject.getter(v119);
      v47 = static os_log_type_t.info.getter(v46);
      v48 = os_log_type_enabled(v46, v47);
      v49 = v129;
      if (v48)
      {
        v50 = v44 != 0;
        v51 = swift_slowAlloc(14, -1);
        *(_DWORD *)v51 = 67109376;
        v133 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 4, v51 + 8);
        *(_WORD *)(v51 + 8) = 1024;
        v133 = v50;
        v41 = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 10, v51 + 14);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v51, 0xEu);
        swift_slowDealloc(v51, -1, -1);
      }

      v52 = *(_QWORD *)(v130 + 160);
      v53 = v128;
      (*((void (**)(char *, uint64_t, uint64_t))v131 + 2))(v18, v41 + v49[5], v128);
      v54 = v18;
      if (qword_1010EA1C0 != -1)
        swift_once(&qword_1010EA1C0, sub_100B00710);
      v55 = v124;
      v56 = sub_10001A9E8(v124, (uint64_t)qword_1011B7C58);
      v57 = v125;
      v58 = v121;
      v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v125 + 16))(v121, v56, v55);
      __chkstk_darwin(v59);
      v109[-4] = v52;
      v109[-3] = v18;
      v109[-2] = v58;
      v60 = (uint64_t)v120;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v109[-6], v127);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v55);
      (*((void (**)(char *, uint64_t))v131 + 1))(v54, v53);
      sub_100893644(v60);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      ((void (*)(uint64_t))v122)(1);
      sub_1000126B0(v60, type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_10086D458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  NSString v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  int *v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  Class isa;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t (**v103)(uint64_t);
  uint64_t v104;
  uint64_t (*v105)(uint64_t);
  uint64_t v106;
  uint64_t (**v107)(uint64_t);
  uint64_t result;
  _QWORD v109[2];
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  unsigned int v133;
  _BYTE v134[20];

  v130 = a2;
  v111 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v111);
  v116 = (char *)v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  v125 = v9;
  v10 = __chkstk_darwin(v8);
  v113 = (char *)v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v121 = (char *)v109 - v12;
  v128 = type metadata accessor for UUID(0);
  v131 = *(int **)(v128 - 8);
  v13 = __chkstk_darwin(v128);
  v112 = (char *)v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v109[1] = (char *)v109 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)v109 - v17;
  v127 = type metadata accessor for BeaconStoreFileRecord(0);
  v110 = *(_QWORD **)(v127 - 8);
  __chkstk_darwin(v127);
  v120 = (char *)v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v20);
  v22 = (char *)v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LeashRecord(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  v26 = __chkstk_darwin(v23);
  v118 = (char *)v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)v109 - v27;
  v29 = swift_allocObject(&unk_101094D30, 32, 7);
  v122 = a3;
  v123 = a4;
  *(_QWORD *)(v29 + 16) = a3;
  *(_QWORD *)(v29 + 24) = a4;
  v126 = v29;
  v30 = swift_retain();
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v32 = qword_1011B7D38;
  v119 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v33 = swift_allocObject(v119, 72, 7);
  v114 = xmmword_100E22B00;
  *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
  v132 = a1;
  sub_10005972C(a1, (uint64_t)v28, type metadata accessor for LeashRecord);
  v117 = v28;
  v129 = (int *)v23;
  v34 = String.init<A>(describing:)(v28, v23);
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v115 = sub_10001AA00();
  *(_QWORD *)(v33 + 64) = v115;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Attempting to remove: %@", 24, 2, v33);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  if (v39)
  {
    v40 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v37, "BOOLForKey:", v40);

  }
  v41 = v132;
  v42 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v42)
  {
    v43 = v42;
    v44 = objc_msgSend(v42, "aa_primaryAppleAccount");

    if (v44 && (v44, (v39 & 1) == 0))
    {
      v122 = v24;
      v123 = v25;
      v61 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v62 = v41 + v129[5];
      v63 = UUID.uuidString.getter(v61);
      v65 = v64;
      v66 = v130;
      v67 = *(id *)(v130 + 152);
      v68._countAndFlagsBits = v63;
      v68._object = v65;
      isa = CKRecordID.init(recordName:zoneID:)(v68, (CKRecordZoneID)v67).super.isa;
      sub_1007FDEC4();
      v129 = (int *)isa;
      v121 = (char *)sub_100BC79BC(isa);
      swift_release();
      sub_10080B950(v62, (uint64_t)v22);
      v70 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v118) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v22, 1, v70);
      sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F47C0);
      v120 = (char *)swift_allocBox(v111);
      v71 = (_QWORD *)v110[7];
      v111 = v72;
      v73 = v127;
      v110 = v71;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v71)(v72, 1, 1, v127);
      v74 = *(_QWORD *)(v66 + 160);
      v75 = v112;
      v76 = v128;
      (*((void (**)(char *, uint64_t, uint64_t))v131 + 2))(v112, v62, v128);
      if (qword_1010EA5E8 != -1)
        swift_once(&qword_1010EA5E8, sub_100D784F0);
      v77 = v124;
      v78 = sub_10001A9E8(v124, (uint64_t)qword_1011B8498);
      v79 = v125;
      v80 = v113;
      v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v125 + 16))(v113, v78, v77);
      __chkstk_darwin(v81);
      v109[-4] = v74;
      v109[-3] = v75;
      v109[-2] = v80;
      v82 = (uint64_t)v116;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v109[-6], v73);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v77);
      (*((void (**)(char *, uint64_t))v131 + 1))(v75, v76);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v110)(v82, 0, 1, v73);
      v83 = sub_100004084(v82, v111, &qword_10110A908);
      v84 = v115;
      v85 = v119;
      v86 = v132;
      v87 = v129;
      LODWORD(v129) = (_DWORD)v118 != 1;
      v88 = static os_log_type_t.default.getter(v83);
      v89 = qword_1011B7D38;
      v90 = swift_allocObject(v85, 72, 7);
      *(_OWORD *)(v90 + 16) = v114;
      v91 = v87;
      v131 = v91;
      v92 = objc_msgSend(v91, "description");
      v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
      v95 = v94;

      *(_QWORD *)(v90 + 56) = &type metadata for String;
      *(_QWORD *)(v90 + 64) = v84;
      *(_QWORD *)(v90 + 32) = v93;
      *(_QWORD *)(v90 + 40) = v95;
      os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "cloudBacked item deleted from disk: %@", 38, 2, v90);
      swift_bridgeObjectRelease();
      v96 = (uint64_t)v117;
      sub_10005972C(v86, (uint64_t)v117, type metadata accessor for LeashRecord);
      v97 = *(unsigned __int8 *)(v122 + 80);
      v98 = (v97 + 32) & ~v97;
      v99 = (v123 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
      v127 = v99 + 16;
      v128 = v97 | 7;
      v100 = swift_allocObject(&unk_101094D58, v99 + 17, v97 | 7);
      v101 = v120;
      v102 = v130;
      *(_QWORD *)(v100 + 16) = v120;
      *(_QWORD *)(v100 + 24) = v102;
      sub_1000126EC(v96, v100 + v98, type metadata accessor for LeashRecord);
      v103 = (uint64_t (**)(uint64_t))(v100 + v99);
      v104 = v86;
      v105 = (uint64_t (*)(uint64_t))v126;
      *v103 = sub_100882AD0;
      v103[1] = v105;
      *(_BYTE *)(v100 + v99 + 16) = (_BYTE)v129;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100878E94, v100);
      swift_release();
      swift_release();
      sub_10005972C(v104, v96, type metadata accessor for LeashRecord);
      v106 = swift_allocObject(&unk_101094D80, v127, v128);
      *(_QWORD *)(v106 + 16) = v101;
      *(_QWORD *)(v106 + 24) = v102;
      sub_1000126EC(v96, v106 + v98, type metadata accessor for LeashRecord);
      v107 = (uint64_t (**)(uint64_t))(v106 + v99);
      *v107 = sub_100882AD0;
      v107[1] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_100878F78, v106);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v45 = type metadata accessor for Logger(0);
      v119 = sub_10001A9E8(v45, (uint64_t)qword_1011B77E8);
      v46 = Logger.logObject.getter(v119);
      v47 = static os_log_type_t.info.getter(v46);
      v48 = os_log_type_enabled(v46, v47);
      v49 = v129;
      if (v48)
      {
        v50 = v44 != 0;
        v51 = swift_slowAlloc(14, -1);
        *(_DWORD *)v51 = 67109376;
        v133 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 4, v51 + 8);
        *(_WORD *)(v51 + 8) = 1024;
        v133 = v50;
        v41 = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v51 + 10, v51 + 14);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v51, 0xEu);
        swift_slowDealloc(v51, -1, -1);
      }

      v52 = *(_QWORD *)(v130 + 160);
      v53 = v128;
      (*((void (**)(char *, uint64_t, uint64_t))v131 + 2))(v18, v41 + v49[5], v128);
      v54 = v18;
      if (qword_1010EA5E8 != -1)
        swift_once(&qword_1010EA5E8, sub_100D784F0);
      v55 = v124;
      v56 = sub_10001A9E8(v124, (uint64_t)qword_1011B8498);
      v57 = v125;
      v58 = v121;
      v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v125 + 16))(v121, v56, v55);
      __chkstk_darwin(v59);
      v109[-4] = v52;
      v109[-3] = v18;
      v109[-2] = v58;
      v60 = (uint64_t)v120;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v109[-6], v127);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v55);
      (*((void (**)(char *, uint64_t))v131 + 1))(v54, v53);
      sub_100893644(v60);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      ((void (*)(uint64_t))v122)(1);
      sub_1000126B0(v60, type metadata accessor for BeaconStoreFileRecord);
    }
    return swift_release();
  }
  else
  {
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_10086E338(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  void *v20;
  id v21;
  unsigned int v22;
  NSString v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE v51[12];

  v47 = a3;
  v48 = a1;
  v45 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  __chkstk_darwin(v45);
  v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LeashRecord(0);
  __chkstk_darwin(v10);
  v49 = (uint64_t)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_101094C90, 32, 7);
  *(_QWORD *)(v12 + 16) = a4;
  *(_QWORD *)(v12 + 24) = a5;
  v13 = qword_1010E9F80;
  swift_bridgeObjectRetain(a4);
  swift_retain();
  if (v13 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B77E8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v46 = a4;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v19 = 67109120;
    v50 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v19 + 4, v19 + 8);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Saving record. Disk First? %{BOOL}d", v19, 8u);
    swift_slowDealloc(v19, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v20 = (void *)qword_1011B7C08;
  v21 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v22 = objc_msgSend(v21, "isInternalBuild");

  if (v22)
  {
    v23 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "BOOLForKey:", v23);

  }
  v24 = v48;
  v25 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v25)
  {
    v26 = v25;
    v27 = objc_msgSend(v25, "aa_primaryAppleAccount");

    if (v27 && (v27, ((a2 | v22) & 1) == 0))
    {
      sub_100809EEC(v24, (uint64_t)sub_100878B68, v12);
    }
    else
    {
      v44[1] = v12;
      v28 = v49;
      v29 = sub_10005972C(v24, v49, type metadata accessor for LeashRecord);
      __chkstk_darwin(v29);
      v44[-2] = v30;
      v44[-1] = v28;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE158, &v44[-4], &type metadata for () + 1);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = v48;
      sub_10005972C(v48, (uint64_t)v9, type metadata accessor for LeashRecord);
      swift_storeEnumTagMultiPayload(v9, v45, 0);
      sub_100770FA8((uint64_t)v9, v46, a5);
      v36 = sub_100004048((uint64_t)v9, (uint64_t *)&unk_101106E50);
      if (((v27 != 0) & ~v22) != 0)
      {
        v41 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v41);
        v44[-4] = v47;
        v44[-3] = v35;
        v42 = v49;
        v44[-2] = v49;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100878B70, &v44[-6]);
        v40 = v42;
      }
      else
      {
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          v39 = swift_slowAlloc(14, -1);
          *(_DWORD *)v39 = 67109376;
          v50 = v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v39 + 4, v39 + 8);
          *(_WORD *)(v39 + 8) = 1024;
          v50 = v27 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v39 + 10, v39 + 14);
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v39, 0xEu);
          swift_slowDealloc(v39, -1, -1);
        }

        v40 = v49;
      }
      sub_1000126B0(v40, type metadata accessor for LeashRecord);
    }
    return swift_release();
  }
  else
  {
    swift_release();
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_10086EA5C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  void *v22;
  id v23;
  unsigned int v24;
  NSString v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _BYTE v49[12];

  v46 = a3;
  v47 = a1;
  v8 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  __chkstk_darwin(v8);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LeashRecord(0);
  __chkstk_darwin(v11);
  v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_101095DE8, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = qword_1010E9F80;
  swift_retain();
  v45 = a5;
  if (v15 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v44 = v8;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v21 = 67109120;
    v48 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v22 = (void *)qword_1011B7C08;
  v23 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v24 = objc_msgSend(v23, "isInternalBuild");

  if (v24)
  {
    v25 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "BOOLForKey:", v25);

  }
  v26 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v24) & 1) == 0))
    {
      sub_100809EEC(v47, (uint64_t)sub_10087EC8C, v14);
    }
    else
    {
      v43 = a4;
      v29 = sub_10005972C(v47, (uint64_t)v13, type metadata accessor for LeashRecord);
      __chkstk_darwin(v29);
      v42[-2] = v30;
      v42[-1] = v13;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE158, &v42[-4], &type metadata for () + 1);
      v42[1] = v14;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      sub_10005972C(v47, (uint64_t)v10, type metadata accessor for LeashRecord);
      swift_storeEnumTagMultiPayload(v10, v44, 0);
      sub_100772D98((uint64_t)v10, v43, v45);
      v35 = sub_100004048((uint64_t)v10, (uint64_t *)&unk_101106E50);
      if (((v28 != 0) & ~v24) != 0)
      {
        v39 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v39);
        v42[-4] = v46;
        v42[-3] = v40;
        v42[-2] = v13;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882D70, &v42[-6]);
      }
      else
      {
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc(14, -1);
          *(_DWORD *)v38 = 67109376;
          v48 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 4, v38 + 8);
          *(_WORD *)(v38 + 8) = 1024;
          v48 = v28 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 10, v38 + 14);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v38, 0xEu);
          swift_slowDealloc(v38, -1, -1);
        }

      }
      sub_1000126B0((uint64_t)v13, type metadata accessor for LeashRecord);
    }
    return swift_release();
  }
  else
  {

    result = swift_release();
    __break(1u);
  }
  return result;
}

void sub_10086F178(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void (**v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  dispatch_group_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];
  id v77[3];

  v72 = a4;
  v73 = a5;
  v71 = a3;
  v75 = a1;
  v10 = sub_10001A9A8((uint64_t *)&unk_101106E60);
  __chkstk_darwin(v10);
  v68 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  v64 = *(_QWORD *)(v12 - 8);
  v65 = v12;
  __chkstk_darwin(v12);
  v69 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LeashRecord(0);
  v63 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v63 + 64);
  v16 = __chkstk_darwin(v14);
  v17 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v70 = (char *)&v62 - v18;
  v19 = swift_allocObject(&unk_101094B00, 32, 7);
  *(_QWORD *)(v19 + 16) = a6;
  *(_QWORD *)(v19 + 24) = a7;
  v74 = v19;
  v67 = a6;
  swift_retain();
  v66 = a7;
  v20 = static os_log_type_t.default.getter(v66);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v21 = qword_1011B7D38;
  v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v22, 72, 7);
  v24 = v23;
  v62 = xmmword_100E22B00;
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  if ((a2 & 1) != 0)
    v25 = 1702195828;
  else
    v25 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v26 = 0xE400000000000000;
  else
    v26 = 0xE500000000000000;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_10001AA00();
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 40) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Modify record. Disk First? (%@)", 31, 2, v24, v62);
  swift_bridgeObjectRelease(v24);
  if ((a2 & 1) != 0)
  {
    v27 = objc_autoreleasePoolPush();
    v28 = v75;
    sub_100CA5774(v75);
    v30 = v29;
    objc_autoreleasePoolPop(v27);
    v77[0] = v30;
    v31 = (uint64_t)v70;
    sub_10005972C(v28, (uint64_t)v70, type metadata accessor for LeashRecord);
    v71(v31);
    v32 = sub_10084F08C(v77, v31);
    v33 = v73;
    __chkstk_darwin(v32);
    *((_QWORD *)&v62 - 2) = v34;
    *((_QWORD *)&v62 - 1) = v31;
    OS_dispatch_queue.sync<A>(execute:)(sub_100088F2C, &v62 - 2, (char *)&type metadata for () + 8);
    sub_1007EEF64(8);
    v56 = v69;
    sub_10005972C(v31, v69, type metadata accessor for LeashRecord);
    v57 = v65;
    swift_storeEnumTagMultiPayload(v56, v65, 0);
    v58 = swift_projectBox(v67);
    v59 = v68;
    sub_10000F9B8(v56, v68, (uint64_t *)&unk_101106E50);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v59, 0, 1, v57);
    swift_beginAccess(v58, v76, 1, 0);
    sub_100004084(v59, v58, (uint64_t *)&unk_101106E60);
    dispatch_group_leave(v66);
    sub_100004048(v56, (uint64_t *)&unk_101106E50);
    v60 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v60);
    *((_QWORD *)&v62 - 4) = v33;
    *((_QWORD *)&v62 - 3) = v77;
    *((_QWORD *)&v62 - 2) = v28;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_100877AFC, &v62 - 3, (char *)&type metadata for () + 8);
    sub_1000126B0(v31, type metadata accessor for LeashRecord);
    v61 = v77[0];
    swift_release(v74);

  }
  else
  {
    v35 = objc_autoreleasePoolPush();
    v36 = v75;
    sub_100CA5774(v75);
    v70 = v37;
    objc_autoreleasePoolPop(v35);
    v38 = v73;
    v40 = sub_1007FDEC4(v39);
    sub_10005972C(v36, (uint64_t)v17, type metadata accessor for LeashRecord);
    v41 = *(unsigned __int8 *)(v63 + 80);
    v42 = (v41 + 32) & ~v41;
    v43 = v41 | 7;
    v44 = swift_allocObject(&unk_101094B28, v42 + v15, v41 | 7);
    v45 = v72;
    *(_QWORD *)(v44 + 16) = v71;
    *(_QWORD *)(v44 + 24) = v45;
    sub_1000126EC((uint64_t)v17, v44 + v42, type metadata accessor for LeashRecord);
    swift_retain();
    v46 = sub_100BC910C(v70, (void (*)(id *))sub_100877A04, v44);
    swift_release(v44);
    swift_release(v40);
    v47 = swift_allocObject(&unk_101094B50, 32, 7);
    v48 = (void (*)(uint64_t))v74;
    *(_QWORD *)(v47 + 16) = sub_10087793C;
    *(_QWORD *)(v47 + 24) = v48;
    swift_retain();
    v49 = Future.addFailure(block:)(sub_100877A18, v47);
    swift_release(v49);
    swift_release(v47);
    sub_10005972C(v75, (uint64_t)v17, type metadata accessor for LeashRecord);
    v50 = (v41 + 16) & ~v41;
    v51 = (v15 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
    v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
    v53 = swift_allocObject(&unk_101094B78, v52 + 16, v43);
    sub_1000126EC((uint64_t)v17, v53 + v50, type metadata accessor for LeashRecord);
    *(_QWORD *)(v53 + v51) = v38;
    v54 = (void (**)(uint64_t))(v53 + v52);
    *v54 = sub_10087793C;
    v54[1] = v48;
    swift_retain();
    swift_retain();
    v55 = Future.addSuccess(block:)(sub_100877AE8, v53);
    swift_release(v48);

    swift_release(v46);
    swift_release(v55);
    swift_release(v53);
  }
}

void sub_10086F8C8(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void (**v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  dispatch_group_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];
  id v77[3];

  v72 = a4;
  v73 = a5;
  v71 = a3;
  v75 = a1;
  v10 = sub_10001A9A8(&qword_101106E48);
  __chkstk_darwin(v10);
  v68 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101106E30);
  v64 = *(_QWORD *)(v12 - 8);
  v65 = v12;
  __chkstk_darwin(v12);
  v69 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SafeLocation(0);
  v63 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v63 + 64);
  v16 = __chkstk_darwin(v14);
  v17 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v70 = (char *)&v62 - v18;
  v19 = swift_allocObject(&unk_101094A60, 32, 7);
  *(_QWORD *)(v19 + 16) = a6;
  *(_QWORD *)(v19 + 24) = a7;
  v74 = v19;
  v67 = a6;
  swift_retain();
  v66 = a7;
  v20 = static os_log_type_t.default.getter(v66);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v21 = qword_1011B7D38;
  v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v22, 72, 7);
  v24 = v23;
  v62 = xmmword_100E22B00;
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  if ((a2 & 1) != 0)
    v25 = 1702195828;
  else
    v25 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v26 = 0xE400000000000000;
  else
    v26 = 0xE500000000000000;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_10001AA00();
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 40) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Modify record. Disk First? (%@)", 31, 2, v24, v62);
  swift_bridgeObjectRelease(v24);
  if ((a2 & 1) != 0)
  {
    v27 = objc_autoreleasePoolPush();
    v28 = v75;
    sub_100CA5AF8(v75);
    v30 = v29;
    objc_autoreleasePoolPop(v27);
    v77[0] = v30;
    v31 = (uint64_t)v70;
    sub_10005972C(v28, (uint64_t)v70, type metadata accessor for SafeLocation);
    v71(v31);
    v32 = sub_10084E318(v77, v31);
    v33 = v73;
    __chkstk_darwin(v32);
    *((_QWORD *)&v62 - 2) = v34;
    *((_QWORD *)&v62 - 1) = v31;
    OS_dispatch_queue.sync<A>(execute:)(sub_100088F44, &v62 - 2, (char *)&type metadata for () + 8);
    sub_1007EEF64(8);
    v56 = v69;
    sub_10005972C(v31, v69, type metadata accessor for SafeLocation);
    v57 = v65;
    swift_storeEnumTagMultiPayload(v56, v65, 0);
    v58 = swift_projectBox(v67);
    v59 = v68;
    sub_10000F9B8(v56, v68, (uint64_t *)&unk_101106E30);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v59, 0, 1, v57);
    swift_beginAccess(v58, v76, 1, 0);
    sub_100004084(v59, v58, &qword_101106E48);
    dispatch_group_leave(v66);
    sub_100004048(v56, (uint64_t *)&unk_101106E30);
    v60 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v60);
    *((_QWORD *)&v62 - 4) = v33;
    *((_QWORD *)&v62 - 3) = v77;
    *((_QWORD *)&v62 - 2) = v28;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_1008778A8, &v62 - 3, (char *)&type metadata for () + 8);
    sub_1000126B0(v31, type metadata accessor for SafeLocation);
    v61 = v77[0];
    swift_release(v74);

  }
  else
  {
    v35 = objc_autoreleasePoolPush();
    v36 = v75;
    sub_100CA5AF8(v75);
    v70 = v37;
    objc_autoreleasePoolPop(v35);
    v38 = v73;
    v40 = sub_1007FDEC4(v39);
    sub_10005972C(v36, (uint64_t)v17, type metadata accessor for SafeLocation);
    v41 = *(unsigned __int8 *)(v63 + 80);
    v42 = (v41 + 32) & ~v41;
    v43 = v41 | 7;
    v44 = swift_allocObject(&unk_101094A88, v42 + v15, v41 | 7);
    v45 = v72;
    *(_QWORD *)(v44 + 16) = v71;
    *(_QWORD *)(v44 + 24) = v45;
    sub_1000126EC((uint64_t)v17, v44 + v42, type metadata accessor for SafeLocation);
    swift_retain();
    v46 = sub_100BC910C(v70, (void (*)(id *))sub_1008777A0, v44);
    swift_release(v44);
    swift_release(v40);
    v47 = swift_allocObject(&unk_101094AB0, 32, 7);
    v48 = (void (*)(uint64_t))v74;
    *(_QWORD *)(v47 + 16) = sub_1008776C8;
    *(_QWORD *)(v47 + 24) = v48;
    swift_retain();
    v49 = Future.addFailure(block:)(sub_1008777B4, v47);
    swift_release(v49);
    swift_release(v47);
    sub_10005972C(v75, (uint64_t)v17, type metadata accessor for SafeLocation);
    v50 = (v41 + 16) & ~v41;
    v51 = (v15 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
    v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
    v53 = swift_allocObject(&unk_101094AD8, v52 + 16, v43);
    sub_1000126EC((uint64_t)v17, v53 + v50, type metadata accessor for SafeLocation);
    *(_QWORD *)(v53 + v51) = v38;
    v54 = (void (**)(uint64_t))(v53 + v52);
    *v54 = sub_1008776C8;
    v54[1] = v48;
    swift_retain();
    swift_retain();
    v55 = Future.addSuccess(block:)(sub_100877894, v53);
    swift_release(v48);

    swift_release(v46);
    swift_release(v55);
    swift_release(v53);
  }
}

uint64_t sub_100870018(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v37)(uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[7];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  __chkstk_darwin(v6);
  v41 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  __chkstk_darwin(v8);
  v38 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_101096590, 32, 7);
  v37 = a2;
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  swift_retain();
  v11 = sub_1007FDEC4();
  v12 = (_QWORD *)swift_allocObject(&unk_1010965B8, 40, 7);
  v12[2] = sub_100880A08;
  v12[3] = v10;
  v12[4] = a1;
  swift_retain_n(v10, 2);
  v44 = a1;
  swift_retain_n(a1, 2);
  v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v14 = LOBYTE(aBlock[0]);
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v16 = qword_1011B7D48;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v18 + 56) = &type metadata for Bool;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = v14;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "localAvailable: %d", (_DWORD)v37);
  v19 = swift_bridgeObjectRelease();
  v20 = static os_log_type_t.default.getter(v19);
  v21 = qword_1011B7D48;
  if (v14)
  {
    v22 = os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v23 = static os_log_type_t.default.getter(v22);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v24 = os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_1011B73B8, "beaconStore became available", 28, 2, _swiftEmptyArrayStorage);
    v37(v24);
    swift_release();
    swift_release();
    swift_release_n(v10, 2);
  }
  else
  {
    v25 = os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v26 = static os_log_type_t.default.getter(v25);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v21, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v37 = *(void (**)(uint64_t))(v11 + 64);
    v27 = (_QWORD *)swift_allocObject(&unk_1010965E0, 40, 7);
    v27[2] = v11;
    v27[3] = sub_1000170EC;
    v27[4] = v12;
    aBlock[4] = sub_100882D68;
    aBlock[5] = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010965F8;
    v28 = _Block_copy(aBlock);
    swift_retain();
    v29 = swift_retain();
    v30 = v38;
    static DispatchQoS.unspecified.getter(v29);
    v45 = _swiftEmptyArrayStorage;
    v31 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v32 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v33 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v34 = v41;
    v35 = v43;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v32, v33, v43, v31);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v30, v34, v28);
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v40);
    swift_release();
    swift_release();
    swift_release_n(v10, 2);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1008704B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;

  v2 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4);
  v9 = &v29[-v8];
  static SystemInfo.lockState.getter(v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
  v10 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v31, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v30, v2, v10);
  v12 = v30;
  v11 = v31;
  v13 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v14 = ((uint64_t (*)(_BYTE *, uint64_t))v13)(v9, v2);
  if (v11 == v12)
  {
    v15 = static os_log_type_t.default.getter(v14);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v16 = qword_1011B7D38;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    v19 = sub_10085A600(v18);
    *(_QWORD *)(v18 + 56) = &type metadata for Bool;
    *(_QWORD *)(v18 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v18 + 32) = v19 & 1;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Init beaconFindMyAccessoryAssociated whenAvailable beforeFirstUnlock", 68, 2, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = sub_10080FABC() > 0;
    sub_10085A8D4(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v23 = qword_1011B7D38;
    v24 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v25 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
    v26 = sub_10085A600(v25);
    *(_QWORD *)(v25 + 56) = &type metadata for Bool;
    *(_QWORD *)(v25 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v25 + 32) = v26 & 1;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Init beaconFindMyAccessoryAssociated whenAvailable %{public}d - SEND", 68, 2, v25);
    v27 = swift_bridgeObjectRelease();
    LOBYTE(v31) = sub_10085A600(v27) & 1;
    CurrentValueSubject.send(_:)(&v31);
  }
  type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("removeDuplicateBeaconsCheck", 27, 2, sub_100880A98, a1);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
  sub_1007EEF64(5);
  sub_1007F9F70();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconStore.KeyService", 22, 2, &unk_10110AC48, a1);
  return swift_release();
}

uint64_t sub_100870810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[7];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v37 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v34 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v8 = sub_1007FDEC4();
  v9 = (_QWORD *)swift_allocObject(&unk_101096630, 40, 7);
  v9[2] = sub_100880A74;
  v9[3] = a2;
  v9[4] = a1;
  swift_retain_n(a2, 2);
  swift_retain_n(a1, 2);
  v10 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v11 = LOBYTE(aBlock[0]);
  v12 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v13 = qword_1011B7D48;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v15 + 56) = &type metadata for Bool;
  *(_QWORD *)(v15 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v15 + 32) = v11;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "localAvailable: %d", v32);
  v16 = swift_bridgeObjectRelease();
  v17 = static os_log_type_t.default.getter(v16);
  v18 = qword_1011B7D48;
  if (v11)
  {
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    sub_1008704B0(a2);
    swift_release();
    swift_release();
    swift_release_n(a2, 2);
  }
  else
  {
    v19 = os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v20 = static os_log_type_t.default.getter(v19);
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v18, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v33 = *(_QWORD *)(v8 + 64);
    v21 = (_QWORD *)swift_allocObject(&unk_101096658, 40, 7);
    v21[2] = v8;
    v21[3] = sub_1000170EC;
    v21[4] = v9;
    aBlock[4] = sub_100882D68;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101096670;
    v22 = _Block_copy(aBlock);
    swift_retain();
    v23 = swift_retain();
    v24 = v34;
    static DispatchQoS.unspecified.getter(v23);
    v40 = _swiftEmptyArrayStorage;
    v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v28 = v37;
    v29 = v26;
    v30 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v29, v27, v39, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v28, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v30);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v36);
    swift_release();
    swift_release();
    swift_release_n(a2, 2);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100870C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[7];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  __chkstk_darwin(v4);
  v35 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  __chkstk_darwin(v6);
  v32 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v8 = sub_1007FDEC4();
  v9 = (_QWORD *)swift_allocObject(&unk_1010945D8, 40, 7);
  v9[2] = sub_100876490;
  v9[3] = a2;
  v9[4] = a1;
  swift_retain_n(a2, 2);
  v38 = a1;
  swift_retain_n(a1, 2);
  v10 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v11 = LOBYTE(aBlock[0]);
  v12 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v13 = qword_1011B7D48;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v15 + 56) = &type metadata for Bool;
  *(_QWORD *)(v15 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v15 + 32) = v11;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "localAvailable: %d", v31);
  v16 = swift_bridgeObjectRelease();
  v17 = static os_log_type_t.default.getter(v16);
  v18 = qword_1011B7D48;
  if (v11)
  {
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.cloudCoordinatorAvailableTransaction", 66, 2, sub_1007BA3B0, a2, &type metadata for () + 1);
    swift_release();
    swift_release();
    swift_release_n(a2, 2);
  }
  else
  {
    v19 = os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v20 = static os_log_type_t.default.getter(v19);
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v18, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v31 = *(_QWORD *)(v8 + 64);
    v21 = (_QWORD *)swift_allocObject(&unk_101094600, 40, 7);
    v21[2] = v8;
    v21[3] = sub_1000170EC;
    v21[4] = v9;
    aBlock[4] = sub_1008764B4;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101094618;
    v22 = _Block_copy(aBlock);
    swift_retain();
    v23 = swift_retain();
    v24 = v32;
    static DispatchQoS.unspecified.getter(v23);
    v39 = _swiftEmptyArrayStorage;
    v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v28 = v35;
    v29 = v37;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v26, v27, v37, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v28, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v34);
    swift_release();
    swift_release();
    swift_release_n(a2, 2);
    swift_release();
  }
  return swift_release();
}

void sub_10087105C(uint64_t a1, char a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  void (*v44)(uint64_t);
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void (**v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  id v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  void (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  id v66[2];

  v65 = a5;
  v62 = a3;
  v63 = a4;
  v59 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v59);
  v60 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BeaconNamingRecord(0);
  v56 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v56 + 64);
  v14 = __chkstk_darwin(v12);
  v15 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v61 = (uint64_t)&v53 - v16;
  v17 = swift_allocObject(&unk_101094650, 32, 7);
  v57 = a6;
  v58 = a7;
  *(_QWORD *)(v17 + 16) = a6;
  *(_QWORD *)(v17 + 24) = a7;
  v64 = v17;
  swift_bridgeObjectRetain(a7);
  v19 = static os_log_type_t.default.getter(v18);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v20 = qword_1011B7D38;
  v55 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v21 = swift_allocObject(v55, 72, 7);
  v22 = (_QWORD *)v21;
  v53 = xmmword_100E22B00;
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  if ((a2 & 1) != 0)
    v23 = 1702195828;
  else
    v23 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v24 = 0xE400000000000000;
  else
    v24 = 0xE500000000000000;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  v54 = sub_10001AA00();
  v22[8] = v54;
  v22[4] = v23;
  v22[5] = v24;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Modify record. Disk First? (%@)", 31, 2, v22, v53);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    v25 = objc_autoreleasePoolPush();
    sub_100CA6264(a1);
    v26 = v65;
    v28 = v27;
    objc_autoreleasePoolPop(v25);
    v66[0] = v28;
    v29 = v61;
    sub_10005972C(a1, v61, type metadata accessor for BeaconNamingRecord);
    v30 = (_QWORD *)(v29 + *(int *)(v12 + 32));
    v31 = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease();
    *v30 = v57;
    v30[1] = v31;
    sub_10084DC3C(v66, v29);
    v32 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    __chkstk_darwin(v32);
    *((_QWORD *)&v53 - 2) = v33;
    *((_QWORD *)&v53 - 1) = v29;
    OS_dispatch_queue.sync<A>(execute:)(sub_100088EFC, &v53 - 2, &type metadata for () + 1);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    sub_1007EEF64(8);
    v50 = (uint64_t)v60;
    sub_10005972C(v29, (uint64_t)v60, type metadata accessor for BeaconNamingRecord);
    swift_storeEnumTagMultiPayload(v50, v59, 0);
    v62(v50);
    sub_100004048(v50, &qword_101108090);
    v51 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v51);
    *((_QWORD *)&v53 - 4) = v26;
    *((_QWORD *)&v53 - 3) = v66;
    *((_QWORD *)&v53 - 2) = a1;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_100876524, &v53 - 3);
    sub_1000126B0(v29, type metadata accessor for BeaconNamingRecord);
    v52 = v66[0];
    swift_release();

  }
  else
  {
    v34 = objc_autoreleasePoolPush();
    sub_100CA6264(a1);
    v36 = v35;
    objc_autoreleasePoolPop(v34);
    sub_1007FDEC4();
    sub_10005972C(a1, (uint64_t)v15, type metadata accessor for BeaconNamingRecord);
    v37 = a1;
    v38 = *(unsigned __int8 *)(v56 + 80);
    v39 = (v38 + 32) & ~v38;
    v61 = v38 | 7;
    v40 = swift_allocObject(&unk_101094678, v39 + v13, v38 | 7);
    v41 = v64;
    *(_QWORD *)(v40 + 16) = sub_1008764E4;
    *(_QWORD *)(v40 + 24) = v41;
    sub_1000126EC((uint64_t)v15, v40 + v39, type metadata accessor for BeaconNamingRecord);
    swift_retain();
    sub_100BC910C(v36, (void (*)(id *))sub_1008764F0, v40);
    swift_release();
    swift_release();
    v42 = swift_allocObject(&unk_1010946A0, 32, 7);
    v43 = v62;
    v60 = v36;
    v44 = v63;
    *(_QWORD *)(v42 + 16) = v62;
    *(_QWORD *)(v42 + 24) = v44;
    swift_retain();
    Future.addFailure(block:)(sub_100876504, v42);
    swift_release();
    swift_release();
    sub_10005972C(v37, (uint64_t)v15, type metadata accessor for BeaconNamingRecord);
    v45 = (v38 + 16) & ~v38;
    v46 = (v13 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    v48 = swift_allocObject(&unk_1010946C8, v47 + 16, v61);
    sub_1000126EC((uint64_t)v15, v48 + v45, type metadata accessor for BeaconNamingRecord);
    *(_QWORD *)(v48 + v46) = v65;
    v49 = (void (**)(uint64_t))(v48 + v47);
    *v49 = v43;
    v49[1] = v44;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_100876510, v48);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t sub_100871710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  void (*v22)(_BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, uint64_t);
  double v30;
  _BYTE v31[24];

  v0 = sub_10001A9A8(&qword_10110ACB8);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v31[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v9);
  v13 = &v31[-v12 - 8];
  if (qword_1010E9FC0 != -1)
    swift_once(&qword_1010E9FC0, sub_100848710);
  v14 = sub_10001A9E8(v0, (uint64_t)qword_101109E98);
  v15 = swift_beginAccess(v14, v31, 0, 0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v1 + 16))(v3, v14, v0, v15);
  ManagedDefault.wrappedValue.getter(v0);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010EA690);
    return 1;
  }
  v16 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v13, v6, v7);
  Date.init()(v16);
  if (qword_1010E9FB0 != -1)
    swift_once(&qword_1010E9FB0, sub_1008485D4);
  v17 = Duration.milliseconds.getter(qword_101109E70);
  v18 = (double)(v17 / 1000);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v17);
  v21 = v19 - Date.timeIntervalSinceReferenceDate.getter(v20);
  if (v21 > v18)
  {
    v22 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
    v22(v11, v7);
    v22(v13, v7);
    return 1;
  }
  if (qword_1010E9F88 != -1)
    swift_once(&qword_1010E9F88, sub_1007FA7A0);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B7800);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    *(_DWORD *)v28 = 134218240;
    v30 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v28 + 4, v28 + 12);
    *(_WORD *)(v28 + 12) = 2048;
    v30 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v28 + 14, v28 + 22);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Not publishing metrics: duration %f < threshold %f", (uint8_t *)v28, 0x16u);
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v29(v11, v7);
  v29(v13, v7);
  return 0;
}

uint64_t sub_100871A98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  dispatch_semaphore_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t updated;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  unsigned int v35;
  uint64_t (*v36)(char *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;

  v41 = a4;
  v42 = a3;
  v39 = a2;
  v40 = a1;
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v13 = *(_QWORD *)(v12 - 8);
  v37 = v12;
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a5 + 24) = 0;
  v38 = a5 + 16;
  swift_unknownObjectWeakInit(a5 + 16, 0);
  v34 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v35 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v36 = *(uint64_t (**)(char *))(v13 + 104);
  v16 = v36(v15);
  static DispatchQoS.unspecified.getter(v16);
  v43 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v18, v19, v6, v17);
  *(_QWORD *)(a5 + 32) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003DLL, 0x8000000100EE8D50, v11, v8, v15, 0);
  *(_QWORD *)(a5 + 56) = dispatch_semaphore_create(0);
  v20 = ((uint64_t (*)(char *, _QWORD, uint64_t))v36)(v15, v35, v37);
  static DispatchQoS.unspecified.getter(v20);
  v43 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v18, v19, v6, v17);
  *(_QWORD *)(a5 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000044, 0x8000000100EE8D90, v11, v8, v15, 0);
  *(_BYTE *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(_BYTE *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  *(_BYTE *)(a5 + 96) = 0;
  *(_QWORD *)(a5 + 136) = 0;
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(a5 + 128) = 0;
  v21 = sub_10001A9A8(&qword_1010F6870);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(a5 + 152) = PassthroughSubject.init()();
  *(_QWORD *)(a5 + 160) = 0;
  v22 = sub_10001A9A8(&qword_1010FAB00);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(a5 + 168) = PassthroughSubject.init()();
  *(_QWORD *)(a5 + 176) = _swiftEmptyArrayStorage;
  *(_WORD *)(a5 + 184) = 0;
  *(_QWORD *)(a5 + 192) = 0;
  *(_QWORD *)(a5 + 200) = 0;
  *(_QWORD *)(a5 + 208) = 0x2D65746176697270;
  *(_QWORD *)(a5 + 216) = 0xEF7365676E616863;
  *(_QWORD *)(a5 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
  *(_QWORD *)(a5 + 232) = v23;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  v24 = dispatch_semaphore_create(1);
  *(_QWORD *)(a5 + 280) = v24;
  v25 = static os_log_type_t.default.getter(v24);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D40, "CloudKitCoordinator init", 24, 2, _swiftEmptyArrayStorage);
  v26 = v39;
  *(_QWORD *)(a5 + 272) = v40;
  *(_QWORD *)(a5 + 24) = &off_101053430;
  swift_unknownObjectWeakAssign(v38, v26);
  v27 = v41;
  *(_QWORD *)(a5 + 48) = v41;
  updated = type metadata accessor for CloudKitUpdateEligibility();
  swift_allocObject(updated, 65, 7);
  swift_retain();
  v29 = v27;
  v30 = swift_retain();
  *(_QWORD *)(a5 + 120) = sub_1002EF3F4(v30);
  v31 = *(void **)(a5 + 32);
  v32 = type metadata accessor for QueueSynchronizer(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  *(_QWORD *)(a5 + 40) = QueueSynchronizer.init(queue:)(v31);
  sub_100BBF334();
  return a5;
}

void sub_100871ED8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  _BYTE v16[40];

  sub_100005CF0(a1, (uint64_t)v15, &qword_101106350);
  v5 = v15[0];
  v4 = v15[1];
  v7 = v15[2];
  v6 = v15[3];
  v8 = v15[4];
  sub_100005CF0(a1, (uint64_t)v16, &qword_101106350);
  if (v16[0] == 2)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B77E8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(32, -1);
      *(_DWORD *)v13 = 134218496;
      v14 = 43200;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2048;
      v14 = 43200;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v13 + 14, v13 + 22);
      *(_WORD *)(v13 + 22) = 2048;
      v14 = 86400;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v13 + 24, v13 + 32);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "BeaconStore XPC criteria: delay %lld, gracePeriod %lld, interval %lld", (uint8_t *)v13, 0x20u);
      swift_slowDealloc(v13, -1, -1);
    }

    v8 = 64;
    v6 = 86400;
    v4 = 43200;
    v5 = 257;
    v7 = 43200;
  }
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v7;
  a2[3] = v6;
  a2[4] = v8;
}

uint64_t sub_100872094(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  void *v23;
  id v24;
  unsigned int v25;
  NSString v26;
  unsigned int v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(char *);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  _BYTE v56[12];

  v53 = a1;
  v49 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v49);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v13);
  v54 = (_QWORD **)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (_QWORD *)swift_allocObject(&unk_101094E48, 40, 7);
  v15[2] = a4;
  v15[3] = a5;
  v50 = a5;
  v15[4] = a6;
  v16 = qword_1010E9F80;
  swift_retain();
  swift_retain();
  if (v16 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B77E8);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v51 = a4;
  v52 = a6;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v22 = 67109120;
    v55 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v22 + 4, v22 + 8);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Saving record. Disk First? %{BOOL}d", v22, 8u);
    swift_slowDealloc(v22, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v23 = (void *)qword_1011B7C08;
  v24 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v25 = objc_msgSend(v24, "isInternalBuild");

  if (v25)
  {
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v23, "BOOLForKey:", v26);

  }
  else
  {
    v27 = 0;
  }
  v28 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v28)
  {
    v29 = v28;
    v30 = objc_msgSend(v28, "aa_primaryAppleAccount");

    if (v30 && (v30, ((a2 | v27) & 1) == 0))
    {
      sub_100809B94(v53, (uint64_t)sub_100879608, (uint64_t)v15);
    }
    else
    {
      v48 = v15;
      v31 = (uint64_t)v54;
      sub_10005972C(v53, (uint64_t)v54, type metadata accessor for SharedBeaconRecord);
      v32 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      __chkstk_darwin(v32);
      *(&v48 - 2) = v33;
      *(&v48 - 1) = (_QWORD *)v31;
      v34 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE16C, &v48 - 4, &type metadata for () + 1);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved LocalStorageBacked record. Calling completion.", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = v53;
      sub_10005972C(v53, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      swift_storeEnumTagMultiPayload(v12, v49, 0);
      sub_100CAE20C((uint64_t)v12, v51, v50, v52);
      v39 = sub_100004048((uint64_t)v12, &qword_1010F21B0);
      if (((v30 != 0) & ~v27) != 0)
      {
        v45 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v45);
        *(&v48 - 4) = a3;
        *(&v48 - 3) = (_QWORD *)v38;
        v46 = (uint64_t)v54;
        *(&v48 - 2) = v54;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882D84, &v48 - 6);
        v44 = v46;
      }
      else
      {
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.info.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          v42 = v30 != 0;
          v43 = swift_slowAlloc(14, -1);
          *(_DWORD *)v43 = 67109376;
          v55 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 4, v43 + 8);
          *(_WORD *)(v43 + 8) = 1024;
          v55 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 10, v43 + 14);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v43, 0xEu);
          swift_slowDealloc(v43, -1, -1);
        }

        v44 = (uint64_t)v54;
      }
      sub_1000126B0(v44, type metadata accessor for SharedBeaconRecord);
    }
    return swift_release();
  }
  else
  {
    swift_release();
    result = swift_release();
    __break(1u);
  }
  return result;
}

uint64_t sub_1008727F8(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  void *v23;
  id v24;
  unsigned int v25;
  NSString v26;
  unsigned int v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(char *);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  _BYTE v56[12];

  v53 = a1;
  v49 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v49);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v13);
  v54 = (_QWORD **)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (_QWORD *)swift_allocObject(&unk_101094E70, 40, 7);
  v15[2] = a4;
  v15[3] = a5;
  v50 = a5;
  v15[4] = a6;
  v16 = qword_1010E9F80;
  swift_retain();
  swift_retain();
  if (v16 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B77E8);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v51 = a4;
  v52 = a6;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v22 = 67109120;
    v55 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v22 + 4, v22 + 8);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Saving record. Disk First? %{BOOL}d", v22, 8u);
    swift_slowDealloc(v22, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v23 = (void *)qword_1011B7C08;
  v24 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v25 = objc_msgSend(v24, "isInternalBuild");

  if (v25)
  {
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v23, "BOOLForKey:", v26);

  }
  else
  {
    v27 = 0;
  }
  v28 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v28)
  {
    v29 = v28;
    v30 = objc_msgSend(v28, "aa_primaryAppleAccount");

    if (v30 && (v30, ((a2 | v27) & 1) == 0))
    {
      sub_100809B94(v53, (uint64_t)sub_100879624, (uint64_t)v15);
    }
    else
    {
      v48 = v15;
      v31 = (uint64_t)v54;
      sub_10005972C(v53, (uint64_t)v54, type metadata accessor for SharedBeaconRecord);
      v32 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      __chkstk_darwin(v32);
      *(&v48 - 2) = v33;
      *(&v48 - 1) = (_QWORD *)v31;
      v34 = OS_dispatch_queue.sync<A>(execute:)(sub_1007BE16C, &v48 - 4, &type metadata for () + 1);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved LocalStorageBacked record. Calling completion.", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = v53;
      sub_10005972C(v53, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      swift_storeEnumTagMultiPayload(v12, v49, 0);
      sub_100CB0028((uint64_t)v12, v51, v50, v52);
      v39 = sub_100004048((uint64_t)v12, &qword_1010F21B0);
      if (((v30 != 0) & ~v27) != 0)
      {
        v45 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v45);
        *(&v48 - 4) = a3;
        *(&v48 - 3) = (_QWORD *)v38;
        v46 = (uint64_t)v54;
        *(&v48 - 2) = v54;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882D84, &v48 - 6);
        v44 = v46;
      }
      else
      {
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.info.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          v42 = v30 != 0;
          v43 = swift_slowAlloc(14, -1);
          *(_DWORD *)v43 = 67109376;
          v55 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 4, v43 + 8);
          *(_WORD *)(v43 + 8) = 1024;
          v55 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 10, v43 + 14);
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v43, 0xEu);
          swift_slowDealloc(v43, -1, -1);
        }

        v44 = (uint64_t)v54;
      }
      sub_1000126B0(v44, type metadata accessor for SharedBeaconRecord);
    }
    return swift_release();
  }
  else
  {
    swift_release();
    result = swift_release();
    __break(1u);
  }
  return result;
}

void sub_100872F5C(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  void *v22;
  id v23;
  unsigned int v24;
  NSString v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _BYTE v49[12];

  v46 = a3;
  v47 = a1;
  v8 = sub_10001A9A8(&qword_1011082B0);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for KeyAlignmentRecord(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_101096018, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = qword_1010E9F80;
  v45 = a4;
  swift_retain();
  if (v15 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v44 = v8;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v21 = 67109120;
    v48 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v22 = (void *)qword_1011B7C08;
  v23 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v24 = objc_msgSend(v23, "isInternalBuild");

  if (v24)
  {
    v25 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "BOOLForKey:", v25);

  }
  v26 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v24) & 1) == 0))
    {
      sub_10080A098(v47, (uint64_t)sub_10087F168, v14);
    }
    else
    {
      v43 = a5;
      v29 = sub_10005972C(v47, (uint64_t)v13, type metadata accessor for KeyAlignmentRecord);
      __chkstk_darwin(v29);
      *(&v41 - 2) = v30;
      *(&v41 - 1) = (uint64_t)v13;
      v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100882D40, &v41 - 4, (char *)&type metadata for () + 8);
      v42 = v14;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved LocalStorageBacked record. Calling completion.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      sub_10005972C(v47, (uint64_t)v10, type metadata accessor for KeyAlignmentRecord);
      swift_storeEnumTagMultiPayload(v10, v44, 0);
      sub_1008AFCB4((uint64_t)v10, v45, v43);
      v35 = sub_100004048((uint64_t)v10, &qword_1011082B0);
      v14 = v42;
      if (((v28 != 0) & ~v24) != 0)
      {
        v39 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v39);
        *(&v41 - 4) = v46;
        *(&v41 - 3) = v40;
        *(&v41 - 2) = (uint64_t)v13;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-saveToCloud", 40, 2, sub_100882DE8, &v41 - 6);
      }
      else
      {
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc(14, -1);
          *(_DWORD *)v38 = 67109376;
          v48 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 4, v38 + 8);
          *(_WORD *)(v38 + 8) = 1024;
          v48 = v28 != 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 10, v38 + 14);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v38, 0xEu);
          swift_slowDealloc(v38, -1, -1);
        }

      }
      sub_1000126B0((uint64_t)v13, type metadata accessor for KeyAlignmentRecord);
    }
    swift_release(v14);
  }
  else
  {
    swift_release(a5);

    __break(1u);
  }
}

uint64_t sub_100873678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  NSString v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  int *v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  Class isa;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t (**v105)(uint64_t);
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (**v111)(uint64_t);
  uint64_t v112;
  uint64_t result;
  _QWORD v114[2];
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  unsigned int v138;
  _BYTE v139[20];

  v135 = a2;
  v116 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v116);
  v121 = (char *)v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v129 = v8;
  v130 = v9;
  v10 = __chkstk_darwin(v8);
  v118 = (char *)v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v126 = (char *)v114 - v12;
  v133 = type metadata accessor for UUID(0);
  v136 = *(int **)(v133 - 8);
  v13 = __chkstk_darwin(v133);
  v117 = (char *)v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v114[1] = (char *)v114 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)v114 - v17;
  v132 = type metadata accessor for BeaconStoreFileRecord(0);
  v115 = *(_QWORD **)(v132 - 8);
  __chkstk_darwin(v132);
  v125 = (char *)v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v20);
  v22 = (char *)v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for OwnedBeaconGroup(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  v26 = __chkstk_darwin(v23);
  v123 = (char *)v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v28 = (char *)v114 - v27;
  v29 = swift_allocObject(&unk_101094970, 32, 7);
  v127 = a3;
  v128 = a4;
  *(_QWORD *)(v29 + 16) = a3;
  *(_QWORD *)(v29 + 24) = a4;
  v131 = v29;
  v30 = swift_retain();
  v31 = static os_log_type_t.default.getter(v30);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v32 = qword_1011B7D38;
  v124 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v33 = swift_allocObject(v124, 72, 7);
  v119 = xmmword_100E22B00;
  *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
  v137 = a1;
  sub_10005972C(a1, (uint64_t)v28, type metadata accessor for OwnedBeaconGroup);
  v122 = v28;
  v134 = (int *)v23;
  v34 = String.init<A>(describing:)(v28, v23);
  v36 = v35;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v120 = sub_10001AA00();
  *(_QWORD *)(v33 + 64) = v120;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v36;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Attempting to remove: %@", 24, 2, v33);
  swift_bridgeObjectRelease(v33);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  if (v39)
  {
    v40 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v37, "BOOLForKey:", v40);

  }
  v41 = v137;
  v42 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v42)
  {
    v43 = v42;
    v44 = objc_msgSend(v42, "aa_primaryAppleAccount");

    if (v44 && (v44, (v39 & 1) == 0))
    {
      v127 = v24;
      v128 = v25;
      v61 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v62 = v41 + v134[6];
      v63 = UUID.uuidString.getter(v61);
      v65 = v64;
      v66 = v135;
      v67 = *(id *)(v135 + 152);
      v68._countAndFlagsBits = v63;
      v68._object = v65;
      isa = CKRecordID.init(recordName:zoneID:)(v68, (CKRecordZoneID)v67).super.isa;
      v70 = sub_1007FDEC4(isa);
      v134 = (int *)isa;
      v126 = (char *)sub_100BC79BC(isa);
      swift_release(v70);
      sub_10080B950(v62, (uint64_t)v22);
      v71 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v123) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v22, 1, v71);
      sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F47C0);
      v125 = (char *)swift_allocBox(v116);
      v72 = (_QWORD *)v115[7];
      v116 = v73;
      v74 = v132;
      v115 = v72;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v72)(v73, 1, 1, v132);
      v75 = *(_QWORD *)(v66 + 160);
      v76 = v117;
      v77 = v133;
      (*((void (**)(char *, uint64_t, uint64_t))v136 + 2))(v117, v62, v133);
      if (qword_1010E9B90 != -1)
        swift_once(&qword_1010E9B90, sub_10036E07C);
      v78 = v129;
      v79 = sub_10001A9E8(v129, (uint64_t)qword_1011B6DE0);
      v80 = v130;
      v81 = v118;
      v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v130 + 16))(v118, v79, v78);
      __chkstk_darwin(v82);
      v114[-4] = v75;
      v114[-3] = v76;
      v114[-2] = v81;
      v83 = (uint64_t)v121;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v114[-6], v74);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v78);
      (*((void (**)(char *, uint64_t))v136 + 1))(v76, v77);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v115)(v83, 0, 1, v74);
      v85 = sub_100004084(v83, v116, &qword_10110A908);
      v86 = v120;
      v87 = v124;
      v88 = v137;
      v89 = v134;
      LODWORD(v134) = (_DWORD)v123 != 1;
      v90 = static os_log_type_t.default.getter(v85);
      v91 = qword_1011B7D38;
      v92 = swift_allocObject(v87, 72, 7);
      *(_OWORD *)(v92 + 16) = v119;
      v93 = v89;
      v136 = v93;
      v94 = objc_msgSend(v93, "description");
      v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
      v97 = v96;

      *(_QWORD *)(v92 + 56) = &type metadata for String;
      *(_QWORD *)(v92 + 64) = v86;
      *(_QWORD *)(v92 + 32) = v95;
      *(_QWORD *)(v92 + 40) = v97;
      os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "cloudBacked item deleted from disk: %@", 38, 2, v92);
      swift_bridgeObjectRelease(v92);
      v98 = (uint64_t)v122;
      sub_10005972C(v88, (uint64_t)v122, type metadata accessor for OwnedBeaconGroup);
      v99 = *(unsigned __int8 *)(v127 + 80);
      v100 = (v99 + 32) & ~v99;
      v101 = (v128 + v100 + 7) & 0xFFFFFFFFFFFFFFF8;
      v132 = v101 + 16;
      v133 = v99 | 7;
      v102 = swift_allocObject(&unk_101094998, v101 + 17, v99 | 7);
      v103 = v125;
      v104 = v135;
      *(_QWORD *)(v102 + 16) = v125;
      *(_QWORD *)(v102 + 24) = v104;
      sub_1000126EC(v98, v102 + v100, type metadata accessor for OwnedBeaconGroup);
      v105 = (uint64_t (**)(uint64_t))(v102 + v101);
      v106 = v88;
      v107 = (uint64_t (*)(uint64_t))v131;
      *v105 = sub_100882AD0;
      v105[1] = v107;
      *(_BYTE *)(v102 + v101 + 16) = (_BYTE)v134;
      swift_retain();
      swift_retain();
      swift_retain();
      v108 = v126;
      v109 = Future.addSuccess(block:)(sub_100877430, v102);
      swift_release(v109);
      swift_release(v102);
      sub_10005972C(v106, v98, type metadata accessor for OwnedBeaconGroup);
      v110 = swift_allocObject(&unk_1010949C0, v132, v133);
      *(_QWORD *)(v110 + 16) = v103;
      *(_QWORD *)(v110 + 24) = v104;
      sub_1000126EC(v98, v110 + v100, type metadata accessor for OwnedBeaconGroup);
      v111 = (uint64_t (**)(uint64_t))(v110 + v101);
      *v111 = sub_100882AD0;
      v111[1] = v107;
      swift_retain();
      swift_retain();
      swift_retain();
      v112 = Future.addFailure(block:)(sub_100877450, v110);
      swift_release(v107);
      swift_release(v103);
      swift_release(v110);

      swift_release(v108);
      v84 = v112;
    }
    else
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v45 = type metadata accessor for Logger(0);
      v124 = sub_10001A9E8(v45, (uint64_t)qword_1011B77E8);
      v46 = Logger.logObject.getter(v124);
      v47 = static os_log_type_t.info.getter(v46);
      v48 = os_log_type_enabled(v46, v47);
      v49 = v134;
      if (v48)
      {
        v50 = v44 != 0;
        v51 = swift_slowAlloc(14, -1);
        *(_DWORD *)v51 = 67109376;
        v138 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v51 + 4, v51 + 8);
        *(_WORD *)(v51 + 8) = 1024;
        v138 = v50;
        v41 = v137;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v51 + 10, v51 + 14);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v51, 0xEu);
        swift_slowDealloc(v51, -1, -1);
      }

      v52 = *(_QWORD *)(v135 + 160);
      v53 = v133;
      (*((void (**)(char *, uint64_t, uint64_t))v136 + 2))(v18, v41 + v49[6], v133);
      v54 = v18;
      if (qword_1010E9B90 != -1)
        swift_once(&qword_1010E9B90, sub_10036E07C);
      v55 = v129;
      v56 = sub_10001A9E8(v129, (uint64_t)qword_1011B6DE0);
      v57 = v130;
      v58 = v126;
      v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v130 + 16))(v126, v56, v55);
      __chkstk_darwin(v59);
      v114[-4] = v52;
      v114[-3] = v18;
      v114[-2] = v58;
      v60 = (uint64_t)v125;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v114[-6], v132);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v55);
      (*((void (**)(char *, uint64_t))v136 + 1))(v54, v53);
      sub_100893644(v60);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      ((void (*)(uint64_t))v127)(1);
      sub_1000126B0(v60, type metadata accessor for BeaconStoreFileRecord);
      v84 = v131;
    }
    return swift_release(v84);
  }
  else
  {
    result = swift_release(v128);
    __break(1u);
  }
  return result;
}

uint64_t sub_100874558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  unsigned int v37;
  NSString v38;
  unsigned int v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  Class isa;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t (**v107)(uint64_t);
  uint64_t (*v108)(uint64_t);
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (**v112)(uint64_t);
  uint64_t v113;
  uint64_t result;
  _QWORD v115[2];
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int v139;
  _BYTE v140[20];

  v136 = a2;
  v117 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v117);
  v123 = (char *)v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v133 - 8);
  v9 = __chkstk_darwin(v133);
  v119 = (char *)v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v130 = (char *)v115 - v11;
  v137 = (_QWORD *)type metadata accessor for UUID(0);
  v12 = *(v137 - 1);
  v13 = __chkstk_darwin(v137);
  v118 = (char *)v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v115[1] = (char *)v115 - v16;
  __chkstk_darwin(v15);
  v128 = (char *)v115 - v17;
  v135 = type metadata accessor for BeaconStoreFileRecord(0);
  v116 = *(_QWORD **)(v135 - 8);
  __chkstk_darwin(v135);
  v129 = (char *)v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v19);
  v21 = (char *)v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for KeyAlignmentRecord(0);
  v124 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v127 = (char *)v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = v24;
  __chkstk_darwin(v23);
  v26 = (char *)v115 - v25;
  v27 = swift_allocObject(&unk_1010948F8, 32, 7);
  v131 = a3;
  *(_QWORD *)(v27 + 16) = a3;
  *(_QWORD *)(v27 + 24) = a4;
  v134 = v27;
  v28 = swift_retain();
  v29 = static os_log_type_t.default.getter(v28);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v30 = qword_1011B7D38;
  v121 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v31 = swift_allocObject(v121, 72, 7);
  v120 = xmmword_100E22B00;
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  v138 = a1;
  sub_10005972C(a1, (uint64_t)v26, type metadata accessor for KeyAlignmentRecord);
  v126 = v26;
  v32 = String.init<A>(describing:)(v26, v22);
  v34 = v33;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  v122 = sub_10001AA00();
  *(_QWORD *)(v31 + 64) = v122;
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v34;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Attempting to remove: %@", 24, 2, v31);
  swift_bridgeObjectRelease(v31);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v35 = (void *)qword_1011B7C08;
  v36 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v37 = objc_msgSend(v36, "isInternalBuild");

  if (v37)
  {
    v38 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v35, "BOOLForKey:", v38);

  }
  else
  {
    v39 = 0;
  }
  v40 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v40)
  {
    v41 = v40;
    v42 = objc_msgSend(v40, "aa_primaryAppleAccount");

    v132 = v8;
    if (v42 && (v42, (v39 & 1) == 0))
    {
      v60 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v61 = v138 + *(int *)(v22 + 20);
      v62 = UUID.uuidString.getter(v60);
      v64 = v63;
      v65 = v12;
      v66 = v136;
      v67 = *(id *)(v136 + 152);
      v68._countAndFlagsBits = v62;
      v68._object = v64;
      isa = CKRecordID.init(recordName:zoneID:)(v68, (CKRecordZoneID)v67).super.isa;
      v70 = sub_1007FDEC4(isa);
      v130 = (char *)isa;
      v129 = (char *)sub_100BC79BC(isa);
      swift_release(v70);
      sub_10080B950(v61, (uint64_t)v21);
      v71 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v127) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v21, 1, v71);
      sub_100004048((uint64_t)v21, (uint64_t *)&unk_1010F47C0);
      v128 = (char *)swift_allocBox(v117);
      v72 = (_QWORD *)v116[7];
      v117 = v73;
      v74 = v135;
      v116 = v72;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v72)(v73, 1, 1, v135);
      v75 = *(_QWORD *)(v66 + 160);
      v131 = v65;
      v76 = v118;
      (*(void (**)(char *, uint64_t, _QWORD *))(v65 + 16))(v118, v61, v137);
      v77 = objc_autoreleasePoolPush();
      if (qword_1010E9920 != -1)
        swift_once(&qword_1010E9920, sub_1000A21BC);
      v78 = v133;
      v79 = sub_10001A9E8(v133, (uint64_t)qword_1011B6700);
      v80 = UUID.uuidString.getter(v79);
      v82 = v81;
      v83 = v119;
      URL.appendingPathComponent(_:)(v80, v81);
      swift_bridgeObjectRelease(v82);
      objc_autoreleasePoolPop(v77);
      __chkstk_darwin(v84);
      v115[-4] = v75;
      v115[-3] = v76;
      v115[-2] = v83;
      v85 = (uint64_t)v123;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v115[-6], v74);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v83, v78);
      (*(void (**)(char *, _QWORD *))(v131 + 8))(v76, v137);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v116)(v85, 0, 1, v74);
      v87 = sub_100004084(v85, v117, &qword_10110A908);
      v88 = v121;
      v89 = v122;
      v90 = v130;
      v91 = (_DWORD)v127 != 1;
      v92 = static os_log_type_t.default.getter(v87);
      v93 = qword_1011B7D38;
      v94 = swift_allocObject(v88, 72, 7);
      *(_OWORD *)(v94 + 16) = v120;
      v95 = v90;
      v137 = v95;
      v96 = objc_msgSend(v95, "description");
      v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      v99 = v98;

      *(_QWORD *)(v94 + 56) = &type metadata for String;
      *(_QWORD *)(v94 + 64) = v89;
      *(_QWORD *)(v94 + 32) = v97;
      *(_QWORD *)(v94 + 40) = v99;
      os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "cloudBacked item deleted from disk: %@", 38, 2, v94);
      swift_bridgeObjectRelease(v94);
      v100 = (uint64_t)v126;
      sub_10005972C(v138, (uint64_t)v126, type metadata accessor for KeyAlignmentRecord);
      v101 = *(unsigned __int8 *)(v124 + 80);
      v102 = (v101 + 32) & ~v101;
      v135 = v101 | 7;
      v103 = (v125 + v102 + 7) & 0xFFFFFFFFFFFFFFF8;
      v104 = swift_allocObject(&unk_101094920, v103 + 17, v101 | 7);
      v105 = v128;
      v106 = v136;
      *(_QWORD *)(v104 + 16) = v128;
      *(_QWORD *)(v104 + 24) = v106;
      sub_1000126EC(v100, v104 + v102, type metadata accessor for KeyAlignmentRecord);
      v107 = (uint64_t (**)(uint64_t))(v104 + v103);
      v108 = (uint64_t (*)(uint64_t))v134;
      *v107 = sub_100882AD0;
      v107[1] = v108;
      *(_BYTE *)(v104 + v103 + 16) = v91;
      swift_retain();
      swift_retain();
      swift_retain();
      v109 = v129;
      v110 = Future.addSuccess(block:)(sub_100877308, v104);
      swift_release(v110);
      swift_release(v104);
      sub_10005972C(v138, v100, type metadata accessor for KeyAlignmentRecord);
      v111 = swift_allocObject(&unk_101094948, v103 + 16, v135);
      *(_QWORD *)(v111 + 16) = v105;
      *(_QWORD *)(v111 + 24) = v106;
      sub_1000126EC(v100, v111 + v102, type metadata accessor for KeyAlignmentRecord);
      v112 = (uint64_t (**)(uint64_t))(v111 + v103);
      *v112 = sub_100882AD0;
      v112[1] = v108;
      swift_retain();
      swift_retain();
      swift_retain();
      v113 = Future.addFailure(block:)(sub_100877420, v111);
      swift_release(v108);
      swift_release(v105);
      swift_release(v111);

      swift_release(v109);
      v86 = v113;
    }
    else
    {
      v126 = (char *)a4;
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v43 = type metadata accessor for Logger(0);
      v125 = sub_10001A9E8(v43, (uint64_t)qword_1011B77E8);
      v44 = Logger.logObject.getter(v125);
      v45 = static os_log_type_t.info.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = v42 != 0;
        v47 = swift_slowAlloc(14, -1);
        *(_DWORD *)v47 = 67109376;
        v139 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140, v47 + 4, v47 + 8);
        *(_WORD *)(v47 + 8) = 1024;
        v139 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140, v47 + 10, v47 + 14);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v47, 0xEu);
        swift_slowDealloc(v47, -1, -1);
      }

      v48 = *(_QWORD *)(v136 + 160);
      v49 = v12;
      v50 = v128;
      (*(void (**)(char *, uint64_t, _QWORD *))(v12 + 16))(v128, v138 + *(int *)(v22 + 20), v137);
      v124 = v22;
      v51 = objc_autoreleasePoolPush();
      if (qword_1010E9920 != -1)
        swift_once(&qword_1010E9920, sub_1000A21BC);
      v52 = v133;
      v53 = sub_10001A9E8(v133, (uint64_t)qword_1011B6700);
      v54 = UUID.uuidString.getter(v53);
      v56 = v55;
      v57 = v130;
      URL.appendingPathComponent(_:)(v54, v55);
      swift_bridgeObjectRelease(v56);
      objc_autoreleasePoolPop(v51);
      __chkstk_darwin(v58);
      v115[-4] = v48;
      v115[-3] = v50;
      v115[-2] = v57;
      v59 = (uint64_t)v129;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v115[-6], v135);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v57, v52);
      (*(void (**)(char *, _QWORD *))(v49 + 8))(v50, v137);
      sub_100893644(v59);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      ((void (*)(uint64_t))v131)(1);
      sub_1000126B0(v59, type metadata accessor for BeaconStoreFileRecord);
      v86 = v134;
    }
    return swift_release(v86);
  }
  else
  {
    result = swift_release(a4);
    __break(1u);
  }
  return result;
}

uint64_t sub_100875480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  unsigned int v37;
  NSString v38;
  unsigned int v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  Swift::String v68;
  Class isa;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t (**v107)(uint64_t);
  uint64_t (*v108)(uint64_t);
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (**v112)(uint64_t);
  uint64_t v113;
  uint64_t result;
  _QWORD v115[2];
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int v139;
  _BYTE v140[20];

  v136 = a2;
  v117 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v117);
  v123 = (char *)v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v133 - 8);
  v9 = __chkstk_darwin(v133);
  v119 = (char *)v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v130 = (char *)v115 - v11;
  v137 = (_QWORD *)type metadata accessor for UUID(0);
  v12 = *(v137 - 1);
  v13 = __chkstk_darwin(v137);
  v118 = (char *)v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v115[1] = (char *)v115 - v16;
  __chkstk_darwin(v15);
  v128 = (char *)v115 - v17;
  v135 = type metadata accessor for BeaconStoreFileRecord(0);
  v116 = *(_QWORD **)(v135 - 8);
  __chkstk_darwin(v135);
  v129 = (char *)v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v19);
  v21 = (char *)v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for BeaconEstimatedLocation(0);
  v124 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v127 = (char *)v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = v24;
  __chkstk_darwin(v23);
  v26 = (char *)v115 - v25;
  v27 = swift_allocObject(&unk_101094808, 32, 7);
  v131 = a3;
  *(_QWORD *)(v27 + 16) = a3;
  *(_QWORD *)(v27 + 24) = a4;
  v134 = v27;
  v28 = swift_retain();
  v29 = static os_log_type_t.default.getter(v28);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v30 = qword_1011B7D38;
  v121 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v31 = swift_allocObject(v121, 72, 7);
  v120 = xmmword_100E22B00;
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  v138 = a1;
  sub_10005972C(a1, (uint64_t)v26, type metadata accessor for BeaconEstimatedLocation);
  v126 = v26;
  v32 = String.init<A>(describing:)(v26, v22);
  v34 = v33;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  v122 = sub_10001AA00();
  *(_QWORD *)(v31 + 64) = v122;
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v34;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Attempting to remove: %@", 24, 2, v31);
  swift_bridgeObjectRelease(v31);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v35 = (void *)qword_1011B7C08;
  v36 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v37 = objc_msgSend(v36, "isInternalBuild");

  if (v37)
  {
    v38 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v35, "BOOLForKey:", v38);

  }
  else
  {
    v39 = 0;
  }
  v40 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v40)
  {
    v41 = v40;
    v42 = objc_msgSend(v40, "aa_primaryAppleAccount");

    v132 = v8;
    if (v42 && (v42, (v39 & 1) == 0))
    {
      v60 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      v61 = v138 + *(int *)(v22 + 20);
      v62 = UUID.uuidString.getter(v60);
      v64 = v63;
      v65 = v12;
      v66 = v136;
      v67 = *(id *)(v136 + 152);
      v68._countAndFlagsBits = v62;
      v68._object = v64;
      isa = CKRecordID.init(recordName:zoneID:)(v68, (CKRecordZoneID)v67).super.isa;
      v70 = sub_1007FDEC4(isa);
      v130 = (char *)isa;
      v129 = (char *)sub_100BC79BC(isa);
      swift_release(v70);
      sub_10080B950(v61, (uint64_t)v21);
      v71 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v127) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v21, 1, v71);
      sub_100004048((uint64_t)v21, (uint64_t *)&unk_1010F47C0);
      v128 = (char *)swift_allocBox(v117);
      v72 = (_QWORD *)v116[7];
      v117 = v73;
      v74 = v135;
      v116 = v72;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v72)(v73, 1, 1, v135);
      v75 = *(_QWORD *)(v66 + 160);
      v131 = v65;
      v76 = v118;
      (*(void (**)(char *, uint64_t, _QWORD *))(v65 + 16))(v118, v61, v137);
      v77 = objc_autoreleasePoolPush();
      if (qword_1010EA060 != -1)
        swift_once(&qword_1010EA060, sub_100967AE8);
      v78 = v133;
      v79 = sub_10001A9E8(v133, (uint64_t)qword_1011B7970);
      v80 = UUID.uuidString.getter(v79);
      v82 = v81;
      v83 = v119;
      URL.appendingPathComponent(_:)(v80, v81);
      swift_bridgeObjectRelease(v82);
      objc_autoreleasePoolPop(v77);
      __chkstk_darwin(v84);
      v115[-4] = v75;
      v115[-3] = v76;
      v115[-2] = v83;
      v85 = (uint64_t)v123;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v115[-6], v74);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v83, v78);
      (*(void (**)(char *, _QWORD *))(v131 + 8))(v76, v137);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v116)(v85, 0, 1, v74);
      v87 = sub_100004084(v85, v117, &qword_10110A908);
      v88 = v121;
      v89 = v122;
      v90 = v130;
      v91 = (_DWORD)v127 != 1;
      v92 = static os_log_type_t.default.getter(v87);
      v93 = qword_1011B7D38;
      v94 = swift_allocObject(v88, 72, 7);
      *(_OWORD *)(v94 + 16) = v120;
      v95 = v90;
      v137 = v95;
      v96 = objc_msgSend(v95, "description");
      v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      v99 = v98;

      *(_QWORD *)(v94 + 56) = &type metadata for String;
      *(_QWORD *)(v94 + 64) = v89;
      *(_QWORD *)(v94 + 32) = v97;
      *(_QWORD *)(v94 + 40) = v99;
      os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "cloudBacked item deleted from disk: %@", 38, 2, v94);
      swift_bridgeObjectRelease(v94);
      v100 = (uint64_t)v126;
      sub_10005972C(v138, (uint64_t)v126, type metadata accessor for BeaconEstimatedLocation);
      v101 = *(unsigned __int8 *)(v124 + 80);
      v102 = (v101 + 32) & ~v101;
      v135 = v101 | 7;
      v103 = (v125 + v102 + 7) & 0xFFFFFFFFFFFFFFF8;
      v104 = swift_allocObject(&unk_101094830, v103 + 17, v101 | 7);
      v105 = v128;
      v106 = v136;
      *(_QWORD *)(v104 + 16) = v128;
      *(_QWORD *)(v104 + 24) = v106;
      sub_1000126EC(v100, v104 + v102, type metadata accessor for BeaconEstimatedLocation);
      v107 = (uint64_t (**)(uint64_t))(v104 + v103);
      v108 = (uint64_t (*)(uint64_t))v134;
      *v107 = sub_100882AD0;
      v107[1] = v108;
      *(_BYTE *)(v104 + v103 + 16) = v91;
      swift_retain();
      swift_retain();
      swift_retain();
      v109 = v129;
      v110 = Future.addSuccess(block:)(sub_100876D10, v104);
      swift_release(v110);
      swift_release(v104);
      sub_10005972C(v138, v100, type metadata accessor for BeaconEstimatedLocation);
      v111 = swift_allocObject(&unk_101094858, v103 + 16, v135);
      *(_QWORD *)(v111 + 16) = v105;
      *(_QWORD *)(v111 + 24) = v106;
      sub_1000126EC(v100, v111 + v102, type metadata accessor for BeaconEstimatedLocation);
      v112 = (uint64_t (**)(uint64_t))(v111 + v103);
      *v112 = sub_100882AD0;
      v112[1] = v108;
      swift_retain();
      swift_retain();
      swift_retain();
      v113 = Future.addFailure(block:)(sub_100876EF0, v111);
      swift_release(v108);
      swift_release(v105);
      swift_release(v111);

      swift_release(v109);
      v86 = v113;
    }
    else
    {
      v126 = (char *)a4;
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v43 = type metadata accessor for Logger(0);
      v125 = sub_10001A9E8(v43, (uint64_t)qword_1011B77E8);
      v44 = Logger.logObject.getter(v125);
      v45 = static os_log_type_t.info.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = v42 != 0;
        v47 = swift_slowAlloc(14, -1);
        *(_DWORD *)v47 = 67109376;
        v139 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140, v47 + 4, v47 + 8);
        *(_WORD *)(v47 + 8) = 1024;
        v139 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140, v47 + 10, v47 + 14);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v47, 0xEu);
        swift_slowDealloc(v47, -1, -1);
      }

      v48 = *(_QWORD *)(v136 + 160);
      v49 = v12;
      v50 = v128;
      (*(void (**)(char *, uint64_t, _QWORD *))(v12 + 16))(v128, v138 + *(int *)(v22 + 20), v137);
      v124 = v22;
      v51 = objc_autoreleasePoolPush();
      if (qword_1010EA060 != -1)
        swift_once(&qword_1010EA060, sub_100967AE8);
      v52 = v133;
      v53 = sub_10001A9E8(v133, (uint64_t)qword_1011B7970);
      v54 = UUID.uuidString.getter(v53);
      v56 = v55;
      v57 = v130;
      URL.appendingPathComponent(_:)(v54, v55);
      swift_bridgeObjectRelease(v56);
      objc_autoreleasePoolPop(v51);
      __chkstk_darwin(v58);
      v115[-4] = v48;
      v115[-3] = v50;
      v115[-2] = v57;
      v59 = (uint64_t)v129;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v115[-6], v135);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v57, v52);
      (*(void (**)(char *, _QWORD *))(v49 + 8))(v50, v137);
      sub_100893644(v59);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      ((void (*)(uint64_t))v131)(1);
      sub_1000126B0(v59, type metadata accessor for BeaconStoreFileRecord);
      v86 = v134;
    }
    return swift_release(v86);
  }
  else
  {
    result = swift_release(a4);
    __break(1u);
  }
  return result;
}

uint64_t sub_1008763A8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008763CC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110A91C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return swift_task_switch(sub_100827350, 0, 0);
}

uint64_t sub_100876424()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100876448()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110B844);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_10089F27C(v0);
}

uint64_t sub_100876490(uint64_t a1)
{
  uint64_t v1;

  return sub_100796CEC(a1, v1);
}

uint64_t sub_100876498()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1008764A4()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1008764B4()
{
  uint64_t *v0;

  return sub_100BC485C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1008764C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008764E4(uint64_t a1)
{
  uint64_t v1;

  return sub_10079A18C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1008764F0(uint64_t a1)
{
  return sub_100881CA8(a1, type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))sub_1007A37B4);
}

uint64_t sub_100876504(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A3B4C(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100876510(_QWORD *a1)
{
  return sub_1007BA7CC(a1, type metadata accessor for BeaconNamingRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_1007A43FC);
}

uint64_t sub_100876524(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2EE8(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100876540(char a1)
{
  uint64_t v1;

  return sub_10083E600(a1, v1, "Could not remove beaconNamingRecord", "BeaconNamingRecord removed.");
}

void sub_100876568(void *a1, char a2)
{
  uint64_t v2;

  sub_10083E768(a1, a2 & 1, v2, "Could not remove leash %@", 25);
}

BOOL sub_100876590(uint64_t a1)
{
  uint64_t v1;

  return sub_10083E6E8(a1, *(_QWORD *)(v1 + 16));
}

void sub_1008765AC(void *a1, char a2)
{
  uint64_t v2;

  sub_10083E768(a1, a2 & 1, v2, "Could not remove safe location %@", 33);
}

uint64_t sub_1008765D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100876678()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10076E36C(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(_QWORD, _QWORD))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1008766D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110A93C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return sub_10083F128(a1, v4, v1 + 24);
}

uint64_t sub_100876738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;
  swift_release(*(_QWORD *)(v0 + 16));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

void sub_1008767CC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  sub_10083EBA0(a1, *(_QWORD *)(v1 + 16), v1 + ((v4 + 24) & ~v4), v1 + ((*(_QWORD *)(v3 + 64) + v4 + ((v4 + 24) & ~v4)) & ~v4));
}

uint64_t sub_100876820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((v9 + *(_QWORD *)(v7 + 64)) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  v13 = v0 + v9 + *(int *)(v6 + 28);
  v14 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v11, v10);
}

void sub_10087693C(int a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_10083E894(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + v7, *(unsigned __int8 *)(v1 + v7 + *(_QWORD *)(v6 + 64)));
}

uint64_t sub_1008769C0(char a1)
{
  uint64_t v1;

  return sub_10083E600(a1, v1, "Could not remove keyAlignmentRecord", "KeyAlignmentRecord removed.");
}

uint64_t sub_1008769E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100876A7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = *(uint64_t (**)(uint64_t))(v1
                                         + ((*(_QWORD *)(v3 + 64)
                                           + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                                           + 7) & 0xFFFFFFFFFFFFFFF8));
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1008771F4);
  return v4(a1);
}

uint64_t sub_100876B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100876B98(char a1)
{
  type metadata accessor for UUID(0);
  sub_10083E500(a1);
}

uint64_t sub_100876BD8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[10];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17, v3 | 7);
}

uint64_t sub_100876D10(void **a1)
{
  return sub_100876D2C(a1, type metadata accessor for BeaconEstimatedLocation, &qword_10110A948, (uint64_t)&unk_100E55E8C);
}

uint64_t sub_100876D2C(void **a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(a2(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10080F340(*a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v4 + v10, *(void (**)(_QWORD))v11, *(_QWORD *)(v11 + 8), *(unsigned __int8 *)(v11 + 16), a2, a3, a4);
}

uint64_t sub_100876DB8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[10];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_100876EF0(uint64_t a1)
{
  return sub_100876EFC(a1, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100876EFC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10080F864(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(uint64_t (**)(uint64_t))v7, *(_QWORD *)(v7 + 8), a2);
}

uint64_t sub_100876F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100877060(void **a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BeaconNamingRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10080F05C(*a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(void (**)(_QWORD))v5, *(_QWORD *)(v5 + 8), *(unsigned __int8 *)(v5 + 16), (uint64_t)sub_100087A38, type metadata accessor for BeaconNamingRecord, &qword_10110A950, (uint64_t)&unk_100E58684);
}

uint64_t sub_1008770F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1008771E8(uint64_t a1)
{
  return sub_100876EFC(a1, type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_1008771F4()
{
  uint64_t v0;

  return sub_10081BA4C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10087720C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v11 = v7 + v1[8];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100877308(void **a1)
{
  return sub_100876D2C(a1, type metadata accessor for KeyAlignmentRecord, &qword_10110A958, (uint64_t)&unk_100E25328);
}

uint64_t sub_100877324()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v11 = v7 + v1[8];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100877420(uint64_t a1)
{
  return sub_100876EFC(a1, type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_100877430(void **a1)
{
  return sub_100876D2C(a1, type metadata accessor for OwnedBeaconGroup, &qword_10110A960, (uint64_t)&unk_100E3AC0C);
}

uint64_t sub_100877454(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10080F5FC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(uint64_t (**)(uint64_t))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1008774AC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  sub_10001BC14(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  sub_10001BC14(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1008775A4(void **a1)
{
  return sub_100876D2C(a1, type metadata accessor for OwnedDeviceKeyRecord, &qword_10110A968, (uint64_t)&unk_100E6C828);
}

uint64_t sub_1008775C0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  sub_10001BC14(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  sub_10001BC14(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1008776B8(uint64_t a1)
{
  return sub_100876EFC(a1, type metadata accessor for OwnedDeviceKeyRecord);
}

void sub_1008776C8(uint64_t a1)
{
  uint64_t v1;

  sub_1007F9E8C(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_101106E48, (uint64_t *)&unk_101106E30);
}

uint64_t sub_1008776F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008777A0(uint64_t a1)
{
  return sub_100881CA8(a1, type metadata accessor for SafeLocation, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))sub_1007A3994);
}

uint64_t sub_1008777B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A3B70(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1008777BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100877894(_QWORD *a1)
{
  return sub_1007BA7CC(a1, type metadata accessor for SafeLocation, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_1007A470C);
}

uint64_t sub_1008778A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2F6C(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1008778C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1;
}

void sub_10087793C(uint64_t a1)
{
  uint64_t v1;

  sub_1007F9E8C(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), (uint64_t *)&unk_101106E60, (uint64_t *)&unk_101106E50);
}

uint64_t sub_100877964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LeashRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100877A04(uint64_t a1)
{
  return sub_100881CA8(a1, type metadata accessor for LeashRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))sub_1007A3978);
}

uint64_t sub_100877A18(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A3B64(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100877A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for LeashRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100877AE8(_QWORD *a1)
{
  return sub_1007BA7CC(a1, type metadata accessor for LeashRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_1007A46CC);
}

uint64_t sub_100877AFC(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2F40(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100877B18()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7B314);
}

void sub_100877B34()
{
  sub_100827CF4();
}

uint64_t sub_100877B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD aBlock[5];
  _QWORD *v50;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  __chkstk_darwin(v8);
  v44 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  __chkstk_darwin(v10);
  v41 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)swift_allocObject(&unk_101095438, 40, 7);
  v12[2] = a2;
  v12[3] = a3;
  v39 = a3;
  v12[4] = a4;
  swift_retain();
  v40 = a4;
  swift_retain();
  v13 = sub_1007FDEC4();
  v14 = (_QWORD *)swift_allocObject(&unk_101095460, 40, 7);
  v14[2] = sub_10087C2B0;
  v14[3] = v12;
  v14[4] = a1;
  swift_retain_n(v12, 2);
  v47 = a1;
  swift_retain_n(a1, 2);
  v15 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v16 = LOBYTE(aBlock[0]);
  v17 = static os_log_type_t.default.getter(v15);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v18 = qword_1011B7D48;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v20 + 56) = &type metadata for Bool;
  *(_QWORD *)(v20 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v20 + 32) = v16;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "localAvailable: %d", v38);
  v21 = swift_bridgeObjectRelease();
  v22 = static os_log_type_t.default.getter(v21);
  v23 = qword_1011B7D48;
  if (v16)
  {
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    sub_1008BF9F8(a2, v39, v40);
    swift_release(v13);
    swift_release(v47);
    swift_release_n(v12, 2);
    v24 = v14;
  }
  else
  {
    v25 = os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v26 = static os_log_type_t.default.getter(v25);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v23, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v40 = *(_QWORD *)(v13 + 64);
    v27 = (_QWORD *)swift_allocObject(&unk_101095488, 40, 7);
    v27[2] = v13;
    v27[3] = sub_1000170EC;
    v27[4] = v14;
    aBlock[4] = sub_100882D68;
    v50 = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010954A0;
    v28 = _Block_copy(aBlock);
    swift_retain();
    v29 = swift_retain();
    v30 = v41;
    static DispatchQoS.unspecified.getter(v29);
    v48 = _swiftEmptyArrayStorage;
    v31 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v32 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v33 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v34 = v44;
    v35 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v32, v33, v46, v31);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v30, v34, v28);
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v43);
    v36 = v50;
    swift_release(v13);
    swift_release(v47);
    swift_release_n(v12, 2);
    swift_release(v14);
    v24 = v36;
  }
  return swift_release(v24);
}

uint64_t sub_100877F88(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v35)(uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[7];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v39 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  __chkstk_darwin(v8);
  v36 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_101095F78, 32, 7);
  v35 = a2;
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  swift_retain();
  v11 = sub_1007FDEC4();
  v12 = (_QWORD *)swift_allocObject(&unk_101095FA0, 40, 7);
  v12[2] = sub_10015A05C;
  v12[3] = v10;
  v12[4] = a1;
  swift_retain_n(v10, 2);
  v42 = a1;
  swift_retain_n(a1, 2);
  v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v14 = LOBYTE(aBlock[0]);
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v16 = qword_1011B7D48;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v18 + 56) = &type metadata for Bool;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = v14;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "localAvailable: %d", (_DWORD)v35);
  v19 = swift_bridgeObjectRelease();
  v20 = static os_log_type_t.default.getter(v19);
  v21 = qword_1011B7D48;
  if (v14)
  {
    v22 = os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v35(v22);
    swift_release();
    swift_release();
    swift_release_n(v10, 2);
  }
  else
  {
    v23 = os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v24 = static os_log_type_t.default.getter(v23);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v21, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v35 = *(void (**)(uint64_t))(v11 + 64);
    v25 = (_QWORD *)swift_allocObject(&unk_101095FC8, 40, 7);
    v25[2] = v11;
    v25[3] = sub_1000170EC;
    v25[4] = v12;
    aBlock[4] = sub_100882D68;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101095FE0;
    v26 = _Block_copy(aBlock);
    swift_retain();
    v27 = swift_retain();
    v28 = v36;
    static DispatchQoS.unspecified.getter(v27);
    v43 = _swiftEmptyArrayStorage;
    v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v32 = v39;
    v33 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v30, v31, v41, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v32, v26);
    _Block_release(v26);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v38);
    swift_release();
    swift_release();
    swift_release_n(v10, 2);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1008783C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v2 = type metadata accessor for StableIdentifier(0);
  v39 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for OwnedBeaconRecord(0);
  v5 = __chkstk_darwin(v43);
  v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)v38 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v38[0] = v2;
    v38[1] = a1;
    v41 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v12 = a1 + v41;
    v40 = *(_QWORD *)(v8 + 72);
    swift_bridgeObjectRetain(a1);
    v13 = _swiftEmptyDictionarySingleton;
    v42 = v10;
    while (1)
    {
      sub_10005972C(v12, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C((uint64_t)&v10[*(int *)(v43 + 24)], (uint64_t)v4, type metadata accessor for StableIdentifier);
      sub_10005972C((uint64_t)v10, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRetain(v13);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      v45 = v13;
      v17 = sub_100519BD4((uint64_t)v4);
      v18 = v13[2];
      v19 = (v16 & 1) == 0;
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
        break;
      v21 = v16;
      if (v13[3] >= v20)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v22 = v13;
        }
        else
        {
          sub_100AA0EF8();
          v22 = v45;
        }
      }
      else
      {
        sub_100A93368(v20, isUniquelyReferenced_nonNull_native);
        v22 = v45;
        v23 = sub_100519BD4((uint64_t)v4);
        if ((v21 & 1) != (v24 & 1))
          goto LABEL_23;
        v17 = v23;
      }
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
        v22[(v17 >> 6) + 8] |= 1 << v17;
        sub_10005972C((uint64_t)v4, v22[6] + *(_QWORD *)(v39 + 72) * v17, type metadata accessor for StableIdentifier);
        *(_QWORD *)(v22[7] + 8 * v17) = _swiftEmptyArrayStorage;
        v25 = v22[2];
        v26 = __OFADD__(v25, 1);
        v27 = v25 + 1;
        if (v26)
          goto LABEL_22;
        v22[2] = v27;
      }
      v44 = v11;
      v28 = (uint64_t)v7;
      v29 = (uint64_t)v4;
      v30 = v22[7];
      v31 = *(_QWORD *)(v30 + 8 * v17);
      v32 = swift_isUniquelyReferenced_nonNull_native(v31);
      *(_QWORD *)(v30 + 8 * v17) = v31;
      if ((v32 & 1) == 0)
      {
        v31 = sub_1007C8520(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
        *(_QWORD *)(v30 + 8 * v17) = v31;
      }
      v34 = *(_QWORD *)(v31 + 16);
      v33 = *(_QWORD *)(v31 + 24);
      if (v34 >= v33 >> 1)
      {
        v31 = sub_1007C8520(v33 > 1, v34 + 1, 1, v31);
        *(_QWORD *)(v30 + 8 * v17) = v31;
      }
      *(_QWORD *)(v31 + 16) = v34 + 1;
      v35 = v40;
      v7 = (char *)v28;
      sub_1000126EC(v28, v31 + v41 + v34 * v40, type metadata accessor for OwnedBeaconRecord);
      v4 = (char *)v29;
      sub_1000126B0(v29, type metadata accessor for StableIdentifier);
      v10 = v42;
      sub_1000126B0((uint64_t)v42, type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease();
      v12 += v35;
      v13 = v22;
      v11 = v44 - 1;
      if (v44 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v38[0]);
    __break(1u);
  }
  else
  {
    v22 = _swiftEmptyDictionarySingleton;
LABEL_20:
    v36 = sub_100854738((uint64_t)v22);
    swift_bridgeObjectRelease();
    return v36;
  }
  return result;
}

void sub_100878748(const __CFString *a1)
{
  __CFNotificationCenter *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFNotificationCenter *center;

  v2 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v2)
  {
    center = v2;
    v3 = static os_log_type_t.default.getter(v2);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v4 = qword_1011B7D38;
    v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v6 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v9 = v8;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    *(_QWORD *)(v6 + 64) = sub_10001AA00();
    *(_QWORD *)(v6 + 32) = v7;
    *(_QWORD *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Posting %{public}@ Darwin notification", 38, 2, v6);
    swift_bridgeObjectRelease(v6);
    CFNotificationCenterPostNotification(center, a1, 0, 0, 1u);

  }
  else
  {
    v10 = static os_log_type_t.error.getter(0);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7D38, "CFNotificationCenterGetDarwinNotifyCenter return nil!", 53, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_1008788D8()
{
  return sub_100880B4C((void (*)(_QWORD))&_swift_release, 32);
}

void sub_1008788E8()
{
  sub_10082791C();
}

uint64_t sub_1008788F0(uint64_t a1)
{
  return sub_10087FDD0(a1, type metadata accessor for LocationProvider, (uint64_t (*)(uint64_t, uint64_t))&static Date.< infix(_:_:)) & 1;
}

uint64_t sub_100878918()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7AF94);
}

uint64_t sub_100878934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for BeaconEstimatedLocation(0);
  return static Date.< infix(_:_:)(a1 + *(int *)(v4 + 40), v3) & 1;
}

uint64_t sub_100878980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100878A58(void **a1)
{
  return sub_100876D2C(a1, type metadata accessor for SafeLocation, &qword_10110A998, (uint64_t)&unk_100E5E398);
}

uint64_t sub_100878A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100878B4C(uint64_t a1)
{
  return sub_100876EFC(a1, type metadata accessor for SafeLocation);
}

uint64_t sub_100878B58()
{
  return sub_100880B4C((void (*)(_QWORD))&_swift_bridgeObjectRelease, 32);
}

void sub_100878B68(uint64_t a1)
{
  uint64_t v1;

  sub_100770FA8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100878B70(uint64_t a1)
{
  uint64_t *v1;

  return sub_10080741C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100878B8C(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)&unk_101106E50);
}

uint64_t sub_100878BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LeashRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100878C6C(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for LeashRecord, (uint64_t *)&unk_101106E50, (void (*)(id))sub_100D77E64, (uint64_t)sub_100878C90);
}

uint64_t sub_100878C90()
{
  return sub_1008826AC((uint64_t)sub_1007BE158);
}

uint64_t sub_100878CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = type metadata accessor for LeashRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v8 = v7 + v5;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v9 = v0 + v4 + *(int *)(v1 + 20);
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  v11(v0 + v7 + *(int *)(v1 + 20), v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v8, v6);
}

void sub_100878DA8(uint64_t a1)
{
  sub_10087C200(a1, type metadata accessor for LeashRecord, (uint64_t *)&unk_101106E50, (uint64_t)sub_1007BE158, (uint64_t)sub_1007BE158);
}

uint64_t sub_100878DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LeashRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100878E94(void **a1)
{
  return sub_100876D2C(a1, type metadata accessor for LeashRecord, &qword_10110A9A0, (uint64_t)&unk_100E70138);
}

uint64_t sub_100878EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LeashRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100878F78(uint64_t a1)
{
  return sub_100876EFC(a1, type metadata accessor for LeashRecord);
}

void sub_100878F84()
{
  uint64_t v0;

  sub_10082796C(v0);
}

uint64_t sub_100878F8C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100806FAC(a1, v1[2], v1[3], v1[4], type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_101094E20, (uint64_t)sub_100879550, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_100805D80);
}

uint64_t sub_100878FC8(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1010F21B0);
}

uint64_t sub_100878FE8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1008791A0(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for SharedBeaconRecord, &qword_1010F21B0, (void (*)(id))sub_100D39160, (uint64_t)sub_100879258);
}

uint64_t sub_1008791C4(void **a1, uint64_t (*a2)(_QWORD), uint64_t *a3, void (*a4)(id), uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v11 = *(_QWORD *)(a2(0) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = v5 + ((*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10080A3D4(*a1, *(_QWORD *)(v5 + 16), v5 + v12, *(void (**)(char *))v13, *(_QWORD *)(v13 + 8), a3, a2, a4, a5);
}

uint64_t sub_100879258()
{
  uint64_t *v0;

  return sub_10080A728(v0[2], v0[3], v0[4], (uint64_t)sub_100087A38, (uint64_t)sub_1007BE16C);
}

uint64_t sub_100879284()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v24 = *(_QWORD *)(v2 + 64);
  v5 = v3 + ((v24 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v10(v6 + v1[6], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v6 + v1[18];
  v12 = type metadata accessor for Date(0);
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v23(v11, v12);
  v13 = v6 + v1[19];
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v14(v13, 1, v8))
    v10(v13, v8);
  v25 = v5 & ~v3;
  v15 = v6 + v1[20];
  v16 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48);
  if (!v17(v15, 1, v16))
  {
    v18 = v15 + *(int *)(v16 + 20);
    if (!v14(v18, 1, v8))
      v10(v18, v8);
  }
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v25), *(_QWORD *)(v0 + v25 + 8));
  v10(v0 + v25 + v1[5], v8);
  v10(v0 + v25 + v1[6], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23(v0 + v25 + v1[18], v12);
  v19 = v0 + v25 + v1[19];
  if (!v14(v19, 1, v8))
    v10(v19, v8);
  v20 = v0 + v25 + v1[20];
  if (!v17(v20, 1, v16))
  {
    v21 = v20 + *(int *)(v16 + 20);
    if (!v14(v21, 1, v8))
      v10(v21, v8);
  }
  return swift_deallocObject(v0, v25 + v24, v3 | 7);
}

void sub_100879550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1008078A4(a1, *(_QWORD *)(v1 + 16), v1 + v5, *(_QWORD *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4), type metadata accessor for SharedBeaconRecord, &qword_1010F21B0, (uint64_t)sub_100087A38, (uint64_t)sub_1007BE16C, (uint64_t)sub_100087A38, (uint64_t)sub_1007BE16C);
}

uint64_t sub_1008795F8()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100879608(uint64_t a1)
{
  uint64_t v1;

  return sub_100CAE20C(a1, *(_QWORD *)(v1 + 16), *(void (**)(char *))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100879614()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100879624(uint64_t a1)
{
  uint64_t v1;

  return sub_100CB0028(a1, *(_QWORD *)(v1 + 16), *(void (**)(char *))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100879630()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1008797C8(uint64_t a1)
{
  return sub_100881CA8(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))sub_1007A35D4);
}

uint64_t sub_1008797DC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_10087999C(uint64_t a1)
{
  return sub_1007BDCF0(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_1007B6950);
}

uint64_t sub_1008799B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2D40(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1008799CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v18 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v18 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v3 + v4 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for BeaconStatus(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v8 + v9 + v12) & ~v12;
  v19 = ((*(_QWORD *)(v11 + 64) + v13 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
  v20 = v2 | v7 | v12 | 7;
  swift_release();
  v14 = v0 + v3;
  v15 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v15(v14, v18);
  v16 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v16(v0 + v8, v5);
  v15(v0 + v13, v18);
  v16(v0 + v13 + *(int *)(v10 + 24), v5);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v19, v20);
}

uint64_t sub_100879AFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for BeaconStatus(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  return sub_100821348(*(NSObject **)(v0 + 16), v0 + v2, v0 + v5, v0 + v8, *(unsigned __int8 *)(v0 + v9), *(unsigned __int8 *)(v0 + v9 + 1), *(unsigned __int8 *)(v0 + v9 + 2) | (*(unsigned __int8 *)(v0 + v9 + 3) << 8), *(_QWORD **)(v0 + ((v9 + 11) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100879BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for BeaconStatus(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + *(int *)(v1 + 24);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100879C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeaconStatus(0) - 8) + 80);
  v3 = *(_BYTE *)(v0 + 16);
  v4 = v0 + 24;
  v5 = v0 + ((v2 + 64) & ~v2);
  v6 = swift_task_alloc(dword_10110A9BC);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_100004A74;
  *(_QWORD *)(v6 + 224) = v4;
  *(_QWORD *)(v6 + 232) = v5;
  *(_BYTE *)(v6 + 296) = v3;
  return swift_task_switch(sub_100823114, 0, 0);
}

uint64_t sub_100879CF8(uint64_t a1)
{
  destroy for RecordUpdateContext(a1);
  return a1;
}

uint64_t sub_100879D2C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for RecordUpdateContext(a2, a1);
  return a2;
}

uint64_t sub_100879D68()
{
  return sub_1000076EC(&qword_1010F8318);
}

uint64_t sub_100879D74(uint64_t a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  sub_10001A9A8(&qword_1010F8318);
  return sub_1008045A4(a1, v3);
}

uint64_t sub_100879DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = ((((((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100879E90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10083F414(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100879F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  v5 = ((((((((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_release();
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100879FF4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6 = a3 & 1;
  v7 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_10084083C(a1, a2, v6, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), v3 + v8, *(_QWORD *)(v3 + v9), *(_QWORD *)(v3 + v9 + 8), *(_QWORD *)(v3 + v10), *(_QWORD *)(v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v3 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10087A0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = (((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_10087A168()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v2;
  v6 = v0 + v3;
  v7 = *(void (**)(void))v6;
  v8 = *(_QWORD *)(v6 + 8);
  (*(void (**)(_QWORD, _QWORD))(v0 + v4))(0, 0);
  return sub_10084053C(v5, v7, v8);
}

uint64_t sub_10087A1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10087A2F4(*(_QWORD *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((((((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8, v4);
}

uint64_t sub_10087A2F4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  swift_bridgeObjectRelease(a1);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10087A320()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 47) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100840BB0(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v5), *(void (**)(uint64_t, uint64_t))(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10087A3C4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRetain(a1);
  swift_bridgeObjectRetain(a1);
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10087A3F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  id v40;
  NSURL *v41;
  void *v42;
  void *v43;
  NSURL *v44;
  void *v45;
  void *v46;
  unsigned __int8 v47;
  id v48;
  id v49;
  char *v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int64_t v80;
  id v81;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v70 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconStoreFileRecord(0);
  v73 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v78 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110A9D0);
  v11 = __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (void **)((char *)&v64 - v14);
  v16 = *(_QWORD *)(a1 + 64);
  v66 = a1 + 64;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v69 = (unint64_t)(v17 + 63) >> 6;
  v65 = v69 - 1;
  v74 = a1;
  swift_bridgeObjectRetain(a1);
  v20 = 0;
  v67 = 0;
  v21 = (uint64_t *)&unk_10110A9D8;
  v68 = xmmword_100E22B00;
  v76 = v6;
  v77 = v5;
  v71 = v8;
  v72 = v4;
  v75 = v13;
  while (1)
  {
    if (v19)
    {
      v22 = __clz(__rbit64(v19));
      v23 = (v19 - 1) & v19;
      v80 = v20;
      v24 = v22 | (v20 << 6);
LABEL_8:
      v79 = v23;
      v25 = *(_QWORD *)(v74 + 56);
      v26 = *(void **)(*(_QWORD *)(v74 + 48) + 8 * v24);
      *v13 = v26;
      v27 = v25 + *(_QWORD *)(v73 + 72) * v24;
      v28 = sub_10001A9A8(v21);
      sub_10005972C(v27, (uint64_t)v13 + *(int *)(v28 + 48), type metadata accessor for BeaconStoreFileRecord);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v13, 0, 1, v28);
      v29 = v26;
      v6 = v76;
      v5 = v77;
      goto LABEL_21;
    }
    v30 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
    }
    if (v30 >= v69)
      goto LABEL_19;
    v31 = *(_QWORD *)(v66 + 8 * v30);
    if (v31)
      goto LABEL_12;
    v20 += 2;
    if (v30 + 1 >= v69)
      goto LABEL_37;
    v31 = *(_QWORD *)(v66 + 8 * v20);
    if (v31)
      goto LABEL_15;
    if (v30 + 2 >= v69)
    {
LABEL_19:
      v80 = v20;
    }
    else
    {
      v31 = *(_QWORD *)(v66 + 8 * (v30 + 2));
      if (v31)
      {
        v30 += 2;
        goto LABEL_12;
      }
      v20 = v30 + 3;
      if (v30 + 3 < v69)
      {
        v31 = *(_QWORD *)(v66 + 8 * v20);
        if (v31)
        {
LABEL_15:
          v30 = v20;
LABEL_12:
          v23 = (v31 - 1) & v31;
          v24 = __clz(__rbit64(v31)) + (v30 << 6);
          v80 = v30;
          goto LABEL_8;
        }
        while (1)
        {
          v30 = v20 + 1;
          if (__OFADD__(v20, 1))
            goto LABEL_40;
          if (v30 >= v69)
            break;
          v31 = *(_QWORD *)(v66 + 8 * v30);
          ++v20;
          if (v31)
            goto LABEL_12;
        }
        v30 = v65;
LABEL_37:
        v80 = v30;
        goto LABEL_20;
      }
      v80 = v30 + 2;
    }
LABEL_20:
    v32 = sub_10001A9A8(v21);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v13, 1, 1, v32);
    v79 = 0;
LABEL_21:
    sub_100005CF0((uint64_t)v13, (uint64_t)v15, &qword_10110A9D0);
    v33 = v21;
    v34 = sub_10001A9A8(v21);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v15, 1, v34) == 1)
      return swift_release();
    v35 = *v15;
    v36 = (uint64_t)v15 + *(int *)(v34 + 48);
    v37 = v78;
    sub_1000126EC(v36, v78, type metadata accessor for BeaconStoreFileRecord);
    sub_10000F9B8(v37 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1010FBA40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_100004048((uint64_t)v4, &qword_1010FBA40);
    }
    else
    {
      v38 = v70;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v70, v4, v5);
      v39 = v6;
      v40 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      URL._bridgeToObjectiveC()(v41);
      v43 = v42;
      URL._bridgeToObjectiveC()(v44);
      v46 = v45;
      v81 = 0;
      v47 = objc_msgSend(v40, "moveItemAtURL:toURL:error:", v43, v45, &v81);

      v48 = v81;
      if ((v47 & 1) != 0)
      {
        v49 = v81;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v5);
        v4 = v72;
        v6 = v39;
      }
      else
      {
        v50 = v38;
        v51 = v81;
        v52 = (void *)_convertNSErrorToError(_:)(v48);

        v54 = swift_willThrow(v53);
        v55 = static os_log_type_t.default.getter(v54);
        if (qword_1010EA258 != -1)
          swift_once(&qword_1010EA258, sub_100B5D9CC);
        v56 = qword_1011B7D38;
        v57 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v58 = swift_allocObject(v57, 72, 7);
        *(_OWORD *)(v58 + 16) = v68;
        v81 = v52;
        swift_errorRetain(v52);
        v59 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v60 = String.init<A>(describing:)(&v81, v59);
        v62 = v61;
        *(_QWORD *)(v58 + 56) = &type metadata for String;
        *(_QWORD *)(v58 + 64) = sub_10001AA00();
        *(_QWORD *)(v58 + 32) = v60;
        *(_QWORD *)(v58 + 40) = v62;
        os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "Could not restore record %@", 27, 2, v58);
        swift_bridgeObjectRelease();
        swift_errorRelease(v52);
        v6 = v76;
        v5 = v77;
        (*(void (**)(char *, uint64_t))(v76 + 8))(v50, v77);
        v67 = 0;
        v4 = v72;
      }
      v8 = v71;
      v37 = v78;
    }

    sub_1000126B0(v37, type metadata accessor for BeaconStoreFileRecord);
    v13 = v75;
    v21 = v33;
    v19 = v79;
    v20 = v80;
  }
}

uint64_t sub_10087AA2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  NSURL *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unsigned __int8 v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  uint64_t v72;
  id v73;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v66 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconStoreFileRecord(0);
  v67 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v72 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110A9D0);
  v11 = __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (id *)((char *)&v58 - v14);
  v16 = *(_QWORD *)(a1 + 64);
  v60 = a1 + 64;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v64 = (unint64_t)(v17 + 63) >> 6;
  v59 = v64 - 1;
  v68 = a1;
  swift_bridgeObjectRetain(a1);
  v20 = 0;
  v61 = 0;
  v21 = (uint64_t *)&unk_10110A9D8;
  v62 = xmmword_100E22B00;
  v69 = v5;
  v70 = v4;
  v63 = v6;
  v65 = v8;
  while (1)
  {
    if (v19)
    {
      v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v71 = v20;
      v23 = v22 | (v20 << 6);
LABEL_8:
      v24 = *(_QWORD *)(v68 + 56);
      v25 = *(void **)(*(_QWORD *)(v68 + 48) + 8 * v23);
      *v13 = v25;
      v26 = v24 + *(_QWORD *)(v67 + 72) * v23;
      v27 = sub_10001A9A8(v21);
      sub_10005972C(v26, (uint64_t)v13 + *(int *)(v27 + 48), type metadata accessor for BeaconStoreFileRecord);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v13, 0, 1, v27);
      v28 = v25;
      v5 = v69;
      v4 = v70;
      goto LABEL_21;
    }
    v29 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
    }
    if (v29 >= v64)
      goto LABEL_19;
    v30 = *(_QWORD *)(v60 + 8 * v29);
    if (v30)
      goto LABEL_12;
    v20 += 2;
    if (v29 + 1 >= v64)
      goto LABEL_37;
    v30 = *(_QWORD *)(v60 + 8 * v20);
    if (v30)
      goto LABEL_15;
    if (v29 + 2 >= v64)
    {
LABEL_19:
      v71 = v20;
    }
    else
    {
      v30 = *(_QWORD *)(v60 + 8 * (v29 + 2));
      if (v30)
      {
        v29 += 2;
        goto LABEL_12;
      }
      v20 = v29 + 3;
      if (v29 + 3 < v64)
      {
        v30 = *(_QWORD *)(v60 + 8 * v20);
        if (v30)
        {
LABEL_15:
          v29 = v20;
LABEL_12:
          v19 = (v30 - 1) & v30;
          v23 = __clz(__rbit64(v30)) + (v29 << 6);
          v71 = v29;
          goto LABEL_8;
        }
        while (1)
        {
          v29 = v20 + 1;
          if (__OFADD__(v20, 1))
            goto LABEL_40;
          if (v29 >= v64)
            break;
          v30 = *(_QWORD *)(v60 + 8 * v29);
          ++v20;
          if (v30)
            goto LABEL_12;
        }
        v29 = v59;
LABEL_37:
        v71 = v29;
        goto LABEL_20;
      }
      v71 = v29 + 2;
    }
LABEL_20:
    v31 = sub_10001A9A8(v21);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v13, 1, 1, v31);
    v19 = 0;
LABEL_21:
    sub_100005CF0((uint64_t)v13, (uint64_t)v15, &qword_10110A9D0);
    v32 = v21;
    v33 = sub_10001A9A8(v21);
    if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v15, 1, v33) == 1)
      return swift_release();

    v34 = (uint64_t)v15 + *(int *)(v33 + 48);
    v35 = v72;
    sub_1000126EC(v34, v72, type metadata accessor for BeaconStoreFileRecord);
    sub_10000F9B8(v35 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1010FBA40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_100004048((uint64_t)v4, &qword_1010FBA40);
    }
    else
    {
      v36 = v66;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v66, v4, v5);
      v37 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      URL._bridgeToObjectiveC()(v38);
      v39 = v5;
      v41 = v40;
      v73 = 0;
      v42 = objc_msgSend(v37, "removeItemAtURL:error:", v40, &v73);

      v43 = v73;
      if ((v42 & 1) != 0)
      {
        v44 = v73;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v36, v39);
        v4 = v70;
        v5 = v39;
      }
      else
      {
        v45 = v73;
        v46 = (void *)_convertNSErrorToError(_:)(v43);

        v48 = swift_willThrow(v47);
        v49 = static os_log_type_t.default.getter(v48);
        if (qword_1010EA258 != -1)
          swift_once(&qword_1010EA258, sub_100B5D9CC);
        v50 = qword_1011B7D38;
        v51 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v52 = swift_allocObject(v51, 72, 7);
        *(_OWORD *)(v52 + 16) = v62;
        v73 = v46;
        swift_errorRetain(v46);
        v53 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v54 = String.init<A>(describing:)(&v73, v53);
        v56 = v55;
        *(_QWORD *)(v52 + 56) = &type metadata for String;
        *(_QWORD *)(v52 + 64) = sub_10001AA00();
        *(_QWORD *)(v52 + 32) = v54;
        *(_QWORD *)(v52 + 40) = v56;
        os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "Could not delete tombstoned record %@", 37, 2, v52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v46);
        v6 = v63;
        v5 = v69;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v66, v69);
        v61 = 0;
        v4 = v70;
      }
      v8 = v65;
    }
    sub_1000126B0(v72, type metadata accessor for BeaconStoreFileRecord);
    v21 = v32;
    v20 = v71;
  }
}

uint64_t sub_10087B038@<X0>(uint64_t a1@<X8>)
{
  return sub_100825850(a1);
}

uint64_t sub_10087B048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 17) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10087B0A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_BYTE *)(v0 + 16);
  v4 = v0 + ((v2 + 17) & ~v2);
  v5 = swift_task_alloc(dword_10110AA34);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_100004A74;
  *(_QWORD *)(v5 + 120) = v4;
  *(_BYTE *)(v5 + 160) = v3;
  return swift_task_switch(sub_100820C60, 0, 0);
}

uint64_t sub_10087B128()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10087B14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101108DF0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10087B1CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101108DF0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10110AA54);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_1008191B0(a1, v5, v6, v7, v8);
}

uint64_t sub_10087B264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101108DF0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10087B2DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101108DF0) - 8) + 80);
  return sub_1008192FC(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10087B320()
{
  return sub_1000076EC(&qword_101108DF0);
}

uint64_t sub_10087B32C()
{
  uint64_t v0;

  v0 = sub_10001A9A8(&qword_101108DF0);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_10087B36C()
{
  uint64_t v0;
  uint64_t found;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v2 = *(_QWORD *)(found - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(found + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(found + 24), v9);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10087B444(void **a1)
{
  return sub_100876D2C(a1, type metadata accessor for NotifyWhenFoundRecord, &qword_10110AA10, (uint64_t)&unk_100E372D0);
}

uint64_t sub_10087B460()
{
  uint64_t v0;
  uint64_t found;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v2 = *(_QWORD *)(found - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(found + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(found + 24), v9);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10087B538(uint64_t a1)
{
  return sub_100876EFC(a1, type metadata accessor for NotifyWhenFoundRecord);
}

uint64_t sub_10087B544()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7ADD4);
}

uint64_t sub_10087B560()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110AA6C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_1007FD354(v0);
}

uint64_t sub_10087B5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10110AA84);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_1007FD7E0(a1, a2, v2);
}

uint64_t sub_10087B608(uint64_t a1)
{
  uint64_t v1;

  return sub_100848828(a1, v1);
}

uint64_t sub_10087B610()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_10087B620()
{
  return sub_100882384((void (*)(_QWORD))&_swift_unknownObjectRelease, 40);
}

uint64_t sub_10087B630(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110AA94);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1008489FC(a1, v4, v5, v6);
}

uint64_t sub_10087B69C(uint64_t a1)
{
  uint64_t v1;

  return sub_100849ADC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10087B6A4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v26 = *(_QWORD *)(v2 + 64);
  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v27 = v5;
  v25 = *(_QWORD *)(v5 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  v7 = v0 + ((v3 + 40) & ~v3);
  sub_10001BC14(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
  v8 = v7 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  v12 = v7 + v1[6];
  v13 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      v24 = v4;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      v24 = v4;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v4 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v14 = v7 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
    v11(v14, v9);
  v15 = v7 + v1[8];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v17 = (uint64_t *)(v7 + v1[10]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (uint64_t *)(v7 + v1[11]);
  v20 = v19[1];
  if (v20 >> 60 != 15)
    sub_10001BC14(*v19, v20);
  v21 = v3 | v6 | 7;
  v22 = (((v3 + 40) & ~v3) + v26 + v6) & ~v6;
  sub_10001BC14(*(_QWORD *)(v7 + v1[12]), *(_QWORD *)(v7 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v7 + v1[13]), *(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v22, v4);
  return swift_deallocObject(v0, v22 + v25, v21);
}

uint64_t sub_10087B9A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8) + 80);
  v8 = (v6 + v7) & ~v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + v8;
  v14 = (_QWORD *)swift_task_alloc(dword_10110AAA4);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  return sub_100849CA4(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_10087BA64()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v26 = *(_QWORD *)(v2 + 64);
  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v27 = v5;
  v25 = *(_QWORD *)(v5 + 64);
  swift_release();
  v7 = v0 + ((v3 + 24) & ~v3);
  sub_10001BC14(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
  v8 = v7 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  v12 = v7 + v1[6];
  v13 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      v24 = v4;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      v24 = v4;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v4 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v14 = v7 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
    v11(v14, v9);
  v15 = v7 + v1[8];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v17 = (uint64_t *)(v7 + v1[10]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (uint64_t *)(v7 + v1[11]);
  v20 = v19[1];
  if (v20 >> 60 != 15)
    sub_10001BC14(*v19, v20);
  v21 = v3 | v6 | 7;
  v22 = (((v3 + 24) & ~v3) + v26 + v6) & ~v6;
  sub_10001BC14(*(_QWORD *)(v7 + v1[12]), *(_QWORD *)(v7 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v7 + v1[13]), *(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v22, v4);
  return swift_deallocObject(v0, v22 + v25, v21);
}

uint64_t sub_10087BD5C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8) + 80);
  return sub_100849E6C(*(_QWORD *)(v0 + 16), v0 + v2, v0 + ((v3 + v4) & ~v4));
}

uint64_t sub_10087BDCC()
{
  return sub_1000076EC(&qword_1010F8318);
}

uint64_t sub_10087BDD8(uint64_t a1)
{
  sub_10001A9A8(&qword_1010F8318);
  return sub_1005594A0(a1);
}

uint64_t sub_10087BE1C()
{
  return sub_100882384((void (*)(_QWORD))&_swift_unknownObjectRelease, 40);
}

uint64_t *sub_10087BE2C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  return a1;
}

uint64_t sub_10087BE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10087BF18(uint64_t a1)
{
  return sub_10087C430(a1, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))sub_10084A3A0);
}

uint64_t sub_10087BF2C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10080669C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10087BF48(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_10110AAC0);
}

uint64_t sub_10087BF68()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  sub_10001BC14(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  sub_10001BC14(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10087C058(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for OwnedDeviceKeyRecord, &qword_10110AAC0, (void (*)(id))sub_100C8F414, (uint64_t)sub_10087C07C);
}

uint64_t sub_10087C07C()
{
  return sub_1008826AC((uint64_t)sub_100882D2C);
}

uint64_t sub_10087C098()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v8 = v7 + v5;
  swift_release();
  v9 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v10 = v0 + v4 + v1[5];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v9 + v1[6], v11);
  sub_10001BC14(*(_QWORD *)(v9 + v1[7]), *(_QWORD *)(v9 + v1[7] + 8));
  sub_10001BC14(*(_QWORD *)(v9 + v1[8]), *(_QWORD *)(v9 + v1[8] + 8));
  swift_release();
  v13 = v0 + v7;
  sub_10001BC14(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  v12(v0 + v7 + v1[5], v11);
  v12(v0 + v7 + v1[6], v11);
  sub_10001BC14(*(_QWORD *)(v13 + v1[7]), *(_QWORD *)(v13 + v1[7] + 8));
  sub_10001BC14(*(_QWORD *)(v13 + v1[8]), *(_QWORD *)(v13 + v1[8] + 8));
  return swift_deallocObject(v0, v8, v6);
}

void sub_10087C1DC(uint64_t a1)
{
  sub_10087C200(a1, type metadata accessor for OwnedDeviceKeyRecord, &qword_10110AAC0, (uint64_t)sub_100882D2C, (uint64_t)sub_100882D2C);
}

void sub_10087C200(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v11 = *(_QWORD *)(a2(0) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = (*(_QWORD *)(v11 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100808090(a1, *(_QWORD *)(v5 + 16), v5 + v13, *(_QWORD *)(v5 + v14), v5 + ((v12 + v14 + 8) & ~v12), a2, a3, a4, a5);
}

uint64_t sub_10087C2A0()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_10087C2B0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1008ADBB0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10087C2BC()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10087C2C8()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_10087C2D8()
{
  return sub_100880B4C((void (*)(_QWORD))&_swift_release, 32);
}

void sub_10087C2E8(uint64_t a1)
{
  uint64_t v1;

  sub_100082AA4(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10087C2F0()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10087C2FC()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_10087C30C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10087C330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10087C41C(uint64_t a1)
{
  return sub_10087C430(a1, type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))sub_100828A7C);
}

uint64_t sub_10087C430(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, _QWORD, unint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return a3(a1, *(_QWORD *)(v3 + 16), v3 + v6, *(_QWORD *)(v3 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10087C494()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v22 = type metadata accessor for KeySyncRecord(0);
  v6 = *(_QWORD *)(v22 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v5 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v8 + v9 + v12) & ~v12;
  v21 = v3 | v7 | v12 | 7;
  v14 = (*(_QWORD *)(v11 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  v15 = v0 + v4;
  sub_10001BC14(*(_QWORD *)v15, *(_QWORD *)(v15 + 8));
  v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v16(v15 + v1[5], v10);
  v16(v15 + v1[6], v10);
  v17 = v15 + v1[8];
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v16(v0 + v8, v10);
  v19(v0 + v8 + *(int *)(v22 + 28), v18);
  v16(v0 + v13, v10);
  swift_release();
  return swift_deallocObject(v0, v14 + 8, v21);
}

void sub_10087C608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(type metadata accessor for KeyAlignmentRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for KeySyncRecord(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  sub_1008291A0(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, v1 + v7, v1 + v10, *(_QWORD *)(v1 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10087C6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v23 = *(_QWORD *)(v7 + 64);
  swift_release();
  swift_release();
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  v11 = v0 + v9;
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v10(v0 + v9 + v6[5], v1);
  v12 = v0 + v9 + v6[6];
  v13 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v12, v1);
      v22 = v9;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v12, v1);
      v22 = v9;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v9 = v22;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v14 = v11 + v6[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v14, 1, v1))
    v10(v14, v1);
  v15 = v11 + v6[8];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  sub_10001BC14(*(_QWORD *)(v11 + v6[9]), *(_QWORD *)(v11 + v6[9] + 8));
  v17 = (uint64_t *)(v11 + v6[10]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (uint64_t *)(v11 + v6[11]);
  v20 = v19[1];
  if (v20 >> 60 != 15)
    sub_10001BC14(*v19, v20);
  sub_10001BC14(*(_QWORD *)(v11 + v6[12]), *(_QWORD *)(v11 + v6[12] + 8));
  sub_10001BC14(*(_QWORD *)(v11 + v6[13]), *(_QWORD *)(v11 + v6[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v9 + v23, v3 | v8 | 7);
}

uint64_t sub_10087C984()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_10082A878(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *, char *))(v0 + 24), *(_QWORD *)(v0 + 32), v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

void sub_10087C9F0(uint64_t a1)
{
  uint64_t v1;

  sub_100828D2C(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10087C9F8()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10087CA04()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10087CA10()
{
  uint64_t v0;

  return sub_100829084(*(void (**)(_QWORD *, char *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10087CA2C()
{
  uint64_t v0;

  return sub_100828F4C(*(void (**)(uint64_t *, char *))(v0 + 16));
}

uint64_t sub_10087CA44(uint64_t a1)
{
  uint64_t *v1;

  return sub_100806FAC(a1, v1[2], v1[3], v1[4], type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_1010957F8, (uint64_t)sub_10087CFD0, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_100804FB8);
}

uint64_t sub_10087CA80(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)&unk_101108050);
}

uint64_t sub_10087CAA4(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for OwnedBeaconRecord, (uint64_t *)&unk_101108050, (void (*)(id))sub_1009A0A80, (uint64_t)sub_10087CAC8);
}

uint64_t sub_10087CAC8()
{
  uint64_t *v0;

  return sub_10080A728(v0[2], v0[3], v0[4], (uint64_t)sub_100087A38, (uint64_t)sub_1007BE11C);
}

uint64_t sub_10087CAF4()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v36;
  unsigned int (*v37)(unint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;

  v1 = v0;
  v2 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v38 = *(_QWORD *)(v3 + 64);
  v39 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v38 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v2[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v6 + v2[6];
  v36 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v36))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v12 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v12 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v12;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v39 + v5;
  v14 = v6 + v2[7];
  v37 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v37(v14, 1, v8))
    v10(v14, v8);
  v15 = v10;
  v16 = v13 + 8;
  v17 = v6 + v2[8];
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  sub_10001BC14(*(_QWORD *)(v6 + v2[9]), *(_QWORD *)(v6 + v2[9] + 8));
  v20 = (uint64_t *)(v6 + v2[10]);
  v21 = v20[1];
  if (v21 >> 60 != 15)
    sub_10001BC14(*v20, v21);
  v22 = v16 & ~v39;
  v23 = (uint64_t *)(v6 + v2[11]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_10001BC14(*v23, v24);
  sub_10001BC14(*(_QWORD *)(v6 + v2[12]), *(_QWORD *)(v6 + v2[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v2[13]), *(_QWORD *)(v6 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v1;
  swift_release();
  v26 = v16 & ~v39;
  v27 = v25 + v22;
  sub_10001BC14(*(_QWORD *)(v25 + v22), *(_QWORD *)(v25 + v22 + 8));
  v28 = v15;
  v15(v25 + v22 + v2[5], v8);
  v29 = v25 + v22 + v2[6];
  switch(swift_getEnumCaseMultiPayload(v29, v36))
  {
    case 0u:
    case 4u:
      goto LABEL_17;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 2u:
      v15(v29, v8);
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 3u:
      v15(v29, v8);
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_17:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v30 = v27 + v2[7];
  if (!v37(v30, 1, v8))
    v28(v30, v8);
  v19(v27 + v2[8], v18);
  sub_10001BC14(*(_QWORD *)(v27 + v2[9]), *(_QWORD *)(v27 + v2[9] + 8));
  v31 = (uint64_t *)(v27 + v2[10]);
  v32 = v31[1];
  if (v32 >> 60 != 15)
    sub_10001BC14(*v31, v32);
  v33 = (uint64_t *)(v27 + v2[11]);
  v34 = v33[1];
  if (v34 >> 60 != 15)
    sub_10001BC14(*v33, v34);
  sub_10001BC14(*(_QWORD *)(v27 + v2[12]), *(_QWORD *)(v27 + v2[12] + 8));
  sub_10001BC14(*(_QWORD *)(v27 + v2[13]), *(_QWORD *)(v27 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v25, v26 + v38, v39 | 7);
}

void sub_10087CFD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1008078A4(a1, *(_QWORD *)(v1 + 16), v1 + v5, *(_QWORD *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4), type metadata accessor for OwnedBeaconRecord, (uint64_t *)&unk_101108050, (uint64_t)sub_100087A38, (uint64_t)sub_1007BE11C, (uint64_t)sub_100087A38, (uint64_t)sub_1007BE11C);
}

uint64_t sub_10087D078(uint64_t a1)
{
  uint64_t *v1;

  return sub_100829648(a1, v1[2], v1[3], v1[4]);
}

void sub_10087D094(uint64_t a1)
{
  uint64_t v1;

  sub_100829C98(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10087D0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release();
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  v13 = v0 + v9;
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v12(v0 + v9 + v6[5], v1);
  v12(v0 + v9 + v6[6], v1);
  sub_10001BC14(*(_QWORD *)(v13 + v6[7]), *(_QWORD *)(v13 + v6[7] + 8));
  sub_10001BC14(*(_QWORD *)(v13 + v6[8]), *(_QWORD *)(v13 + v6[8] + 8));
  return swift_deallocObject(v0, v10, v11);
}

void sub_10087D19C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedDeviceKeyRecord(0) - 8) + 80);
  sub_10082A178(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6));
}

uint64_t sub_10087D20C(uint64_t a1)
{
  return sub_10087D2FC(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1008297E0);
}

uint64_t sub_10087D21C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v11 = v7 + v1[8];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10087D2F0(uint64_t a1)
{
  return sub_10087D2FC(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_100829A3C);
}

uint64_t sub_10087D2FC(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for KeyAlignmentRecord(0) - 8) + 80);
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + ((v4 + 24) & ~v4));
}

uint64_t sub_10087D34C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100807660(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10087D368(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1011082B0);
}

uint64_t sub_10087D388()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v11 = v7 + v1[8];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10087D47C(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for KeyAlignmentRecord, &qword_1011082B0, (void (*)(id))sub_1000A1988, (uint64_t)sub_10087D4A0);
}

uint64_t sub_10087D4A0()
{
  return sub_1008826AC((uint64_t)sub_100882D40);
}

uint64_t sub_10087D4BC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;

  v1 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v16 = v3 | 7;
  v6 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v7 = v6 + v5;
  swift_release();
  v8 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v9 = v0 + v4 + v1[5];
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v8 + v1[6], v10);
  v12 = v8 + v1[8];
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8));
  v11(v0 + v6 + v1[5], v10);
  v11(v0 + v6 + v1[6], v10);
  v14(v0 + v6 + v1[8], v13);
  return swift_deallocObject(v0, v7, v16);
}

void sub_10087D604(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for KeyAlignmentRecord(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10080883C(a1, *(_QWORD *)(v1 + 16), v1 + v5, *(_QWORD *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4));
}

uint64_t sub_10087D668(uint64_t a1)
{
  uint64_t *v1;

  return sub_100806FAC(a1, v1[2], v1[3], v1[4], type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_101095960, (uint64_t)sub_10087D948, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_1008048E0);
}

uint64_t sub_10087D6A4(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_101108090);
}

uint64_t sub_10087D6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10087D7B4(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for BeaconNamingRecord, &qword_101108090, (void (*)(id))sub_100A00590, (uint64_t)sub_10087D7D8);
}

uint64_t sub_10087D7D8()
{
  uint64_t *v0;

  return sub_10080A728(v0[2], v0[3], v0[4], (uint64_t)sub_100087A38, (uint64_t)sub_1007BE130);
}

uint64_t sub_10087D804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v8 = v7 + v5;
  swift_release();
  v9 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v10 = v0 + v4 + *(int *)(v1 + 20);
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v9 + *(int *)(v1 + 24), v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  v12(v0 + v7 + *(int *)(v1 + 20), v11);
  v12(v0 + v7 + *(int *)(v1 + 24), v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v8, v6);
}

void sub_10087D948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for BeaconNamingRecord(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1008078A4(a1, *(_QWORD *)(v1 + 16), v1 + v5, *(_QWORD *)(v1 + v6), v1 + ((v4 + v6 + 8) & ~v4), type metadata accessor for BeaconNamingRecord, &qword_101108090, (uint64_t)sub_100087A38, (uint64_t)sub_1007BE130, (uint64_t)sub_100087A38, (uint64_t)sub_1007BE130);
}

uint64_t sub_10087D9F0(uint64_t a1)
{
  uint64_t *v1;

  return sub_100806D68(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10087DA0C(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)&unk_101108180);
}

uint64_t sub_10087DA2C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_10087DB70(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for ShareRecord, (uint64_t *)&unk_101108180, (void (*)(id))sub_1000A4F18, (uint64_t)sub_10087DB94);
}

uint64_t sub_10087DB94()
{
  return sub_1008826AC((uint64_t)sub_1007BE180);
}

uint64_t sub_10087DBB0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v18 = *(_QWORD *)(v2 + 64);
  v17 = (v3 + ((v18 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  swift_release();
  v5 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v5 + v1[6], v7);
  v9 = v5 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v5 + v1[8];
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v14(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v17), *(_QWORD *)(v0 + v17 + 8));
  v8(v0 + v17 + v1[5], v7);
  v8(v0 + v17 + v1[6], v7);
  v12(v0 + v17 + v1[7], v10);
  v15 = v0 + v17 + v1[8];
  if (!v14(v15, 1, v10))
    v12(v15, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v17 + v18, v3 | 7);
}

void sub_10087DDA4(uint64_t a1)
{
  sub_10087C200(a1, type metadata accessor for ShareRecord, (uint64_t *)&unk_101108180, (uint64_t)sub_1007BE180, (uint64_t)sub_1007BE180);
}

uint64_t sub_10087DDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100830504(a1, a2, *(_QWORD *)(v2 + 16)) & 1;
}

uint64_t sub_10087DDE4()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

void sub_10087DDF4()
{
  uint64_t v0;

  sub_10088C6D8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10087DE00()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10087DE10()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10087DE44()
{
  uint64_t v0;

  return sub_100843EF0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10087DE54()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10087DE78()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_10087E12C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_100847CD8(a1, *(NSObject **)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10087E184()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v3 | 7);
}

uint64_t sub_10087E444()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10087E478()
{
  uint64_t v0;

  return sub_1008484A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void *, _QWORD))(v0 + 32));
}

uint64_t sub_10087E484(uint64_t a1)
{
  uint64_t *v1;

  return sub_100806458(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10087E4A0(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1010EEC50);
}

uint64_t sub_10087E4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10087E5B4(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for OwnedBeaconGroup, &qword_1010EEC50, (void (*)(id))sub_100369964, (uint64_t)sub_10087E5D8);
}

uint64_t sub_10087E5D8()
{
  return sub_1008826AC((uint64_t)sub_1007BE1A8);
}

uint64_t sub_10087E5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v15 = v6 + v5;
  v16 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = v7 + *(int *)(v1 + 28);
  v12 = type metadata accessor for MACAddress(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8));
  v10(v0 + v6 + *(int *)(v1 + 24), v9);
  v13(v0 + v6 + *(int *)(v1 + 28), v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v15, v16);
}

void sub_10087E750(uint64_t a1)
{
  sub_10087C200(a1, type metadata accessor for OwnedBeaconGroup, &qword_1010EEC50, (uint64_t)sub_1007BE1A8, (uint64_t)sub_1007BE1A8);
}

void sub_10087E778(uint64_t a1)
{
  uint64_t v1;

  sub_1004A29DC(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10087E780()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10087E790(uint64_t a1)
{
  uint64_t v1;

  return sub_10049A6D8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10087E798()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10087E8C4(uint64_t a1)
{
  return sub_100881CA8(a1, type metadata accessor for ShareRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))sub_1007A37D0);
}

uint64_t sub_10087E8D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A3B58(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10087E8E0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_10087EA2C(uint64_t a1)
{
  return sub_1007BDCF0(a1, type metadata accessor for ShareRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_1007B6B7C);
}

uint64_t sub_10087EA40(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2F14(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10087EA5C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10087EA80()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10087EA8C(uint64_t a1)
{
  uint64_t v1;

  return sub_1004999B4(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10087EA98(uint64_t a1)
{
  uint64_t v1;

  return sub_100497234(a1, *(id *)(v1 + 16));
}

uint64_t sub_10087EAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10087EB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_10087EC70(int **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100837E20(a1, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), a2);
}

void sub_10087EC8C(uint64_t a1)
{
  uint64_t v1;

  sub_100772D98(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

void sub_10087EC98(uint64_t a1)
{
  uint64_t v1;

  sub_10076964C(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_10087ECA0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1008071D8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10087ECBC(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)&unk_101106E30);
}

uint64_t sub_10087ECDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10087EDAC(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for SafeLocation, (uint64_t *)&unk_101106E30, (void (*)(id))sub_100AFF19C, (uint64_t)sub_10087EDD0);
}

uint64_t sub_10087EDD0()
{
  return sub_1008826AC((uint64_t)sub_1007BE144);
}

uint64_t sub_10087EDEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v8 = v7 + v5;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v9 = v0 + v4 + *(int *)(v1 + 20);
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  v11(v0 + v7 + *(int *)(v1 + 20), v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v8, v6);
}

void sub_10087EF08(uint64_t a1)
{
  sub_10087C200(a1, type metadata accessor for SafeLocation, (uint64_t *)&unk_101106E30, (uint64_t)sub_1007BE144, (uint64_t)sub_1007BE144);
}

uint64_t sub_10087EF34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10087F034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_10087F134(uint64_t a1)
{
  uint64_t v1;

  sub_1008EB1C0(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_10087F140(uint64_t a1)
{
  uint64_t v1;

  sub_1008E8788(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10087F148()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10087F154()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

void sub_10087F168(uint64_t a1)
{
  uint64_t v1;

  sub_1008AFCB4(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10087F174()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_10087F42C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100832ED8(a1, *(_QWORD *)(v1 + 16), v1 + v4, *v5, v5[1]);
}

uint64_t sub_10087F484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v1 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v40 = *(_QWORD *)(v7 + 64);
  v10 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v10, v1) == 1)
  {
    swift_errorRelease(*v10);
  }
  else
  {
    v39 = v9;
    sub_10001BC14(*v10, v10[1]);
    v11 = (char *)v10 + v6[5];
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(char *, uint64_t))(v13 + 8);
    v14(v11, v12);
    v15 = (char *)v10 + v6[6];
    v16 = type metadata accessor for StableIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v15, v16))
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v14(v15, v12);
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v14(v15, v12);
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    v17 = (char *)v10 + v6[7];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
      v14(v17, v12);
    v18 = (char *)v10 + v6[8];
    v19 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    sub_10001BC14(*(uint64_t *)((char *)v10 + v6[9]), *(uint64_t *)((char *)v10 + v6[9] + 8));
    v20 = (uint64_t *)((char *)v10 + v6[10]);
    v21 = v20[1];
    if (v21 >> 60 != 15)
      sub_10001BC14(*v20, v21);
    v22 = (uint64_t *)((char *)v10 + v6[11]);
    v23 = v22[1];
    v9 = v39;
    if (v23 >> 60 != 15)
      sub_10001BC14(*v22, v23);
    sub_10001BC14(*(uint64_t *)((char *)v10 + v6[12]), *(uint64_t *)((char *)v10 + v6[12] + 8));
    sub_10001BC14(*(uint64_t *)((char *)v10 + v6[13]), *(uint64_t *)((char *)v10 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v24 = v0 + v9;
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v25 = v0 + v9 + v6[5];
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v28(v25, v26);
  v29 = v0 + v9 + v6[6];
  v30 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v29, v30))
  {
    case 0u:
    case 4u:
      goto LABEL_19;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 2u:
      v28(v29, v26);
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 3u:
      v28(v29, v26);
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v31 = v24 + v6[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v31, 1, v26))
    v28(v31, v26);
  v32 = v24 + v6[8];
  v33 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v32, v33);
  sub_10001BC14(*(_QWORD *)(v24 + v6[9]), *(_QWORD *)(v24 + v6[9] + 8));
  v34 = (uint64_t *)(v24 + v6[10]);
  v35 = v34[1];
  if (v35 >> 60 != 15)
    sub_10001BC14(*v34, v35);
  v36 = (uint64_t *)(v24 + v6[11]);
  v37 = v36[1];
  if (v37 >> 60 != 15)
    sub_10001BC14(*v36, v37);
  sub_10001BC14(*(_QWORD *)(v24 + v6[12]), *(_QWORD *)(v24 + v6[12] + 8));
  sub_10001BC14(*(_QWORD *)(v24 + v6[13]), *(_QWORD *)(v24 + v6[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v40 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v8 | 7);
}

uint64_t sub_10087F9CC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101108050) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1008331E0(v0 + v2, v0 + v5, *(_QWORD *)(v0 + v6), *(void (**)(_QWORD *))(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10087FA5C()
{
  uint64_t v0;

  return sub_1008313D8(*(void (**)(uint64_t *))(v0 + 16), *(_QWORD *)(v0 + 24), 14);
}

uint64_t sub_10087FA78()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7B234);
}

uint64_t sub_10087FA94()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7DD68);
}

uint64_t sub_10087FAB0()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7B0E4);
}

uint64_t sub_10087FACC()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7AE44);
}

uint64_t sub_10087FAE8()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7B2A4);
}

uint64_t sub_10087FB04()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7C204);
}

uint64_t sub_10087FB20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100A7C274(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_10087FB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a11);
  }
  return result;
}

uint64_t sub_10087FB90()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7C194);
}

uint64_t sub_10087FBAC()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7CEE8);
}

uint64_t sub_10087FBC8()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7AF24);
}

uint64_t sub_10087FBE4()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7DD28);
}

uint64_t sub_10087FC00()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7B1C4);
}

uint64_t sub_10087FC1C()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7B004);
}

uint64_t sub_10087FC38()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7AEB4);
}

uint64_t sub_10087FC54()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7B074);
}

uint64_t sub_10087FC70()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7B154);
}

uint64_t sub_10087FC8C()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7AC84);
}

uint64_t sub_10087FCA8()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10087FCB8()
{
  uint64_t *v0;

  return sub_100825E2C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10087FCC4()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10087FCD0()
{
  uint64_t v0;
  void (*v1)(void);

  v1 = *(void (**)(void))(v0 + 16);
  sub_1008549F4(*(_QWORD *)(v0 + 32));
  v1();
  return swift_release();
}

uint64_t sub_10087FD20()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1008208A4(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10087FD64(uint64_t a1)
{
  uint64_t v1;

  return sub_10081FFD8(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10087FD80(uint64_t a1)
{
  return sub_10087FDD0(a1, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t, uint64_t))&static MACAddress.== infix(_:_:)) & 1;
}

uint64_t sub_10087FDA8(uint64_t a1)
{
  return sub_10087FDD0(a1, type metadata accessor for WildModeAssociationRecord, (uint64_t (*)(uint64_t, uint64_t))&static MACAddress.== infix(_:_:)) & 1;
}

uint64_t sub_10087FDD0(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = a2(0);
  return a3(a1 + *(int *)(v7 + 28), v6) & 1;
}

uint64_t sub_10087FE20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  swift_retain();
  sub_100CAA668(v3, (uint64_t)sub_10087FE74, a1);
  return swift_release(a1);
}

uint64_t sub_10087FE74(uint64_t a1)
{
  return sub_10081B49C(a1);
}

uint64_t sub_10087FE7C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10081A57C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10087FE98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for KeySyncRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + *(int *)(v1 + 28);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10087FF38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for KeySyncRecord(0) - 8) + 80);
  return sub_10081A7E0(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10087FF74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v22;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = type metadata accessor for KeySyncRecord(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v9 + v10 + v13) & ~v13;
  v22 = v14 + *(_QWORD *)(v12 + 64);
  v15 = v3 | v8 | v13 | 7;
  swift_release();
  v16 = v0 + v4;
  v17 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v17(v16, v1);
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v17(v0 + v9 + v6[5], v1);
  v17(v0 + v9 + v6[6], v1);
  v18 = v0 + v9 + v6[8];
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  v17(v0 + v14, v1);
  v20(v0 + v14 + *(int *)(v11 + 28), v19);
  return swift_deallocObject(v0, v22, v15);
}

void sub_1008800C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for KeyAlignmentRecord(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for KeySyncRecord(0) - 8) + 80);
  sub_10081A858(a1, *(_QWORD *)(v1 + 16), v1 + v4, (v1 + v7), v1 + ((v7 + v8 + v9) & ~v9));
}

uint64_t sub_100880160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100837AAC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100880168()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100880174()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100880184(uint64_t a1)
{
  return sub_1008803FC(a1, type metadata accessor for MemberSharingCircle, (uint64_t (*)(uint64_t, uint64_t))&static UUID.== infix(_:_:)) & 1;
}

uint64_t sub_1008801AC()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7DCE8);
}

uint64_t sub_1008801CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110AB8C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return sub_10081695C(a1, v4, v1 + 24);
}

uint64_t sub_100880238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110AB9C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return sub_100816BF4(a1, v4, v1 + 24);
}

uint64_t sub_1008802A0()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7DCA8);
}

uint64_t sub_1008802BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100814890(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1008802C4(uint64_t a1)
{
  uint64_t v1;

  return sub_100814F18(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1008802E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10080D84C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1008802F8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10088032C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_10110ABEC);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_10080E4D8, 0, 0);
}

uint64_t sub_10088038C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10080E694(v1, a1);
}

uint64_t sub_100880394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1008803D4(uint64_t a1)
{
  return sub_1008803FC(a1, type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t))sub_100C72B64) & 1;
}

uint64_t sub_1008803FC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = a2(0);
  return a3(a1 + *(int *)(v7 + 24), v6) & 1;
}

uint64_t sub_10088044C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100880470()
{
  uint64_t v0;

  return sub_1002EF830(v0);
}

uint64_t sub_100880488()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[10];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1008805C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100801F10((uint64_t *)(v0 + v2), *(_QWORD *)(v0 + v3), *(void (**)(uint64_t *))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t *))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100880610()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t);
  void (*v10)(unint64_t, uint64_t);
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v15 = *(_QWORD *)(v2 + 64);
  v16 = *(unsigned __int8 *)(v2 + 80);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v14 = *(_QWORD *)(v5 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8));
  v7 = v0 + v3 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v0 + v3 + v1[6], v8);
  v10 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v10(v0 + v3 + v1[10], v4);
  v11 = v0 + v3 + v1[12];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4))
    v10(v11, v4);
  v12 = (v3 + v15 + v6) & ~v6;
  swift_bridgeObjectRelease();
  v10(v0 + v12, v4);
  swift_release();
  return swift_deallocObject(v0, ((v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v16 | v6 | 7);
}

uint64_t sub_10088077C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100803B60(*(_QWORD *)(v0 + 16), v0 + v2, v0 + v5, *(void (**)(uint64_t))v6, *(_QWORD *)(v6 + 8));
}

void sub_1008807F8()
{
  uint64_t v0;

  sub_1007B2C98(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_100880810()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[10];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  v14 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v14));
  return swift_deallocObject(v0, v14 + 40, v3 | 7);
}

uint64_t sub_10088093C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100804404(*(_QWORD *)(v0 + 16), v0 + v2, v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_100880980()
{
  return sub_100882384((void (*)(_QWORD))&_swift_unknownObjectRelease, 40);
}

uint64_t sub_100880990()
{
  uint64_t v0;

  return sub_1007FFCB0(v0);
}

uint64_t sub_100880998(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC074C(a1, v1);
}

uint64_t sub_1008809B0()
{
  uint64_t v0;

  return sub_100DCACB0(v0);
}

uint64_t sub_1008809B8(uint64_t a1)
{
  uint64_t v1;

  return sub_100800238(a1, v1);
}

uint64_t sub_1008809C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110AA2C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100823844(v0);
}

uint64_t sub_100880A08(uint64_t a1)
{
  uint64_t v1;

  return sub_100DCAED4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100880A10()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100880A1C()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100880A2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110AA2C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004C28;
  return sub_100823844(v0);
}

uint64_t sub_100880A74()
{
  uint64_t v0;

  return sub_1008704B0(v0);
}

uint64_t sub_100880A7C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100880A88()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100880A98(uint64_t a1)
{
  uint64_t v1;

  return sub_1007FFD6C(a1, v1);
}

uint64_t sub_100880AB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110AC44);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[15] = v0;
  return swift_task_switch(sub_1008000A8, 0, 0);
}

uint64_t sub_100880B0C()
{
  return sub_100880B4C((void (*)(_QWORD))&_swift_release, 32);
}

uint64_t sub_100880B1C()
{
  uint64_t v0;

  return sub_1007FFF74(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_100880B24(uint64_t a1)
{
  uint64_t v1;

  return sub_100842A34(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100880B3C()
{
  return sub_100880B4C((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100880B4C(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  swift_release(*(_QWORD *)(v2 + 24));
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_100880B88(char a1)
{
  uint64_t v1;

  return sub_100842AFC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint8_t **)(v1 + 32));
}

uint64_t sub_100880B94(uint64_t a1)
{
  uint64_t v1;

  return sub_100842834(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100880BAC(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_100A0658C(*a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100880BB8()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100880BC8(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t (*v2)(BOOL);
  int v3;

  v2 = *(uint64_t (**)(BOOL))(v1 + 24);
  v3 = *a1;
  Transaction.capture()();
  return v2(v3 == 1);
}

uint64_t sub_100880C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_100880CA0(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1008431D0(a1, v1 + v4, *(void **)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100880D08()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100880D18(uint64_t a1, char a2)
{
  uint64_t *v2;

  return sub_1008436F8(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_100880D28()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t sub_100880D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_100880DCC(uint64_t a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  type metadata accessor for UUID(0);
  sub_100843498(a1, v3);
}

uint64_t sub_100880E30(uint64_t a1)
{
  uint64_t v1;

  return sub_100843CD0(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100880E50()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100880E8C()
{
  uint64_t v0;

  return sub_10083BD00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

_QWORD *sub_100880E98@<X0>(_QWORD *a1@<X8>)
{
  return sub_1007FE2DC(a1);
}

uint64_t sub_100880EA0()
{
  uint64_t v0;

  return sub_1007F5AD0(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

unint64_t sub_100880EA8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10110AC70;
  if (!qword_10110AC70)
  {
    v1 = sub_10001F784(&qword_1010FB180);
    v2[0] = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_100880F2C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_10110AC70);
  }
  return result;
}

unint64_t sub_100880F2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_10110AC78;
  if (!qword_10110AC78)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F7950);
    v2 = sub_100006204(&qword_10110D990, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_100E55E20);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, &qword_10110AC78);
  }
  return result;
}

void sub_100880FA8(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1007FDF58(v1, a1);
}

uint64_t sub_100880FC0()
{
  return sub_100882384((void (*)(_QWORD))&_swift_unknownObjectRelease, 48);
}

uint64_t sub_100880FD0(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  _QWORD *v8;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10110AC84);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_1007FAD48(v7, a1, v4, v5, v6);
}

uint64_t sub_10088104C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10088105C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  _QWORD *v7;

  v6 = *(double *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_10110AC94);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100004A74;
  return sub_1007FB160(a1, a2, v6);
}

uint64_t sub_1008810C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10110ACA4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_1007FB4D4(a1, a2, v2);
}

uint64_t sub_100881124()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100881158(uint64_t a1)
{
  uint64_t *v1;

  return sub_10026DCA8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100881164()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100881170()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100881180()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100881190(uint64_t a1)
{
  uint64_t *v1;

  return sub_100831498(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10088119C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v22;

  v1 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_errorRelease(*v6);
  }
  else
  {
    sub_10001BC14(*v6, v6[1]);
    v7 = (int *)type metadata accessor for OwnedBeaconRecord(0);
    v8 = (char *)v6 + v7[5];
    v9 = type metadata accessor for UUID(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(void (**)(char *, uint64_t))(v10 + 8);
    v11(v8, v9);
    v12 = (char *)v6 + v7[6];
    v13 = type metadata accessor for StableIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v12, v13))
    {
      case 0u:
      case 4u:
        goto LABEL_8;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 2u:
        v11(v12, v9);
        v22 = v5;
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v11(v12, v9);
        v22 = v5;
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        v5 = v22;
LABEL_8:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    v14 = (char *)v6 + v7[7];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
      v11(v14, v9);
    v15 = (char *)v6 + v7[8];
    v16 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    sub_10001BC14(*(uint64_t *)((char *)v6 + v7[9]), *(uint64_t *)((char *)v6 + v7[9] + 8));
    v17 = (uint64_t *)((char *)v6 + v7[10]);
    v18 = v17[1];
    if (v18 >> 60 != 15)
      sub_10001BC14(*v17, v18);
    v19 = (uint64_t *)((char *)v6 + v7[11]);
    v20 = v19[1];
    if (v20 >> 60 != 15)
      sub_10001BC14(*v19, v20);
    sub_10001BC14(*(uint64_t *)((char *)v6 + v7[12]), *(uint64_t *)((char *)v6 + v7[12] + 8));
    sub_10001BC14(*(uint64_t *)((char *)v6 + v7[13]), *(uint64_t *)((char *)v6 + v7[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

id sub_100881488()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101108050) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100831724(v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(_QWORD *))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1008814DC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100881784(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_100831D94(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_1008817CC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100881A6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_100833874(*(void (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_100881AA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100881AC4()
{
  uint64_t v0;

  return sub_1008313D8(*(void (**)(uint64_t *))(v0 + 16), *(_QWORD *)(v0 + 24), 7);
}

uint64_t sub_100881AE4(void **a1)
{
  return sub_100876D2C(a1, type metadata accessor for LostModeRecord, &qword_10110AA08, (uint64_t)&unk_100E5A958);
}

uint64_t sub_100881B04(uint64_t a1)
{
  return sub_100876EFC(a1, type metadata accessor for LostModeRecord);
}

unint64_t sub_100881B10()
{
  unint64_t result;

  result = qword_10110ACC0;
  if (!qword_10110ACC0)
  {
    result = swift_getWitnessTable(byte_100E56720, &type metadata for OwnSubmitPayload);
    atomic_store(result, (unint64_t *)&qword_10110ACC0);
  }
  return result;
}

uint64_t sub_100881B54()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100881B88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100881BAC(uint64_t a1)
{
  uint64_t v1;

  sub_100689064(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_100881BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100881C94(uint64_t a1)
{
  return sub_100881CA8(a1, type metadata accessor for LostModeRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))sub_1007A3798);
}

uint64_t sub_100881CA8(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, _QWORD, _QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), v3 + ((v5 + 32) & ~v5));
}

uint64_t sub_100881CF8(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A3B40(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100881D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100881E08(_QWORD *a1)
{
  return sub_1007BA7CC(a1, type metadata accessor for LostModeRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_1007A411C);
}

uint64_t sub_100881E1C(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2EBC(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_100881E38(uint64_t a1)
{
  uint64_t v1;

  sub_100688DA8(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_100881E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100881F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10088205C(uint64_t a1)
{
  uint64_t v1;

  return sub_100687214(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100882064(uint64_t a1)
{
  uint64_t *v1;

  return sub_100806B24(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100882080(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1011036B8);
}

uint64_t sub_1008820A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1008821A0(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for LostModeRecord, &qword_1011036B8, (void (*)(id))sub_100AA925C, (uint64_t)sub_1008821C4);
}

uint64_t sub_1008821C4()
{
  return sub_1008826AC((uint64_t)sub_1007BE1BC);
}

uint64_t sub_1008821E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v8 = v7 + v5;
  swift_release();
  v9 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v10 = v0 + v4 + *(int *)(v1 + 20);
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v9 + *(int *)(v1 + 24), v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  v12(v0 + v7 + *(int *)(v1 + 20), v11);
  v12(v0 + v7 + *(int *)(v1 + 24), v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v8, v6);
}

void sub_100882344(uint64_t a1)
{
  sub_10087C200(a1, type metadata accessor for LostModeRecord, &qword_1011036B8, (uint64_t)sub_1007BE1BC, (uint64_t)sub_1007BE1BC);
}

uint64_t sub_100882368()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100882374()
{
  return sub_100882384((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100882384(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  swift_release(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, a2, 7);
}

unint64_t sub_1008823C0()
{
  unint64_t result;

  result = qword_10110ACC8;
  if (!qword_10110ACC8)
  {
    result = swift_getWitnessTable(byte_100E49AFC, &type metadata for BeaconStateCapture);
    atomic_store(result, (unint64_t *)&qword_10110ACC8);
  }
  return result;
}

unint64_t sub_100882404()
{
  unint64_t result;

  result = qword_10110ACD0;
  if (!qword_10110ACD0)
  {
    result = swift_getWitnessTable(byte_100E3FDE4, &type metadata for LegacyBeaconStateCapture);
    atomic_store(result, (unint64_t *)&qword_10110ACD0);
  }
  return result;
}

uint64_t sub_100882448(uint64_t a1)
{
  uint64_t v1;

  return sub_1007FF62C(a1, v1);
}

uint64_t sub_100882450()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100882460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[5];

  sub_100871ED8(a1, v4);
  return sub_100005CF0((uint64_t)v4, a2, &qword_101106350);
}

void sub_1008824A0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_1007FF680(a1, a2, a3, v3);
}

uint64_t sub_1008824A8(uint64_t a1)
{
  swift_retain();
  sub_100825C2C((uint64_t)sub_1008824E8, a1);
  return swift_release();
}

void sub_1008824E8(uint64_t a1, char a2)
{
  sub_1008002C0(a1, a2 & 1);
}

uint64_t sub_1008824F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

unint64_t sub_100882504()
{
  return sub_100800884();
}

unint64_t sub_100882510()
{
  unint64_t result;

  result = qword_10110AD08;
  if (!qword_10110AD08)
  {
    result = swift_getWitnessTable(byte_100E5D518, &type metadata for FinderStatePermissions);
    atomic_store(result, (unint64_t *)&qword_10110AD08);
  }
  return result;
}

void sub_100882558(uint64_t a1)
{
  uint64_t v1;

  sub_100202A4C(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100882560(uint64_t a1)
{
  uint64_t *v1;

  return sub_1008068E0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10088257C(uint64_t a1)
{
  uint64_t v1;

  return sub_10080A244(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1010F3448);
}

uint64_t sub_10088259C()
{
  uint64_t v0;
  uint64_t found;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v2 = *(_QWORD *)(found - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(found + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(found + 24), v9);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10088266C(void **a1)
{
  return sub_1008791C4(a1, type metadata accessor for NotifyWhenFoundRecord, &qword_1010F3448, (void (*)(id))sub_10033D420, (uint64_t)sub_100882690);
}

uint64_t sub_100882690()
{
  return sub_1008826AC((uint64_t)sub_100882D54);
}

uint64_t sub_1008826AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v2 = *(_QWORD *)(v1 + 32);
  v4[2] = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 160);
  v4[3] = v2;
  return OS_dispatch_queue.sync<A>(execute:)(a1, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_1008826F0()
{
  uint64_t v0;
  uint64_t found;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v2 = *(_QWORD *)(found - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v8 = v7 + v5;
  swift_release();
  v9 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v10 = v0 + v4 + *(int *)(found + 20);
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v9 + *(int *)(found + 24), v11);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  v12(v0 + v7 + *(int *)(found + 20), v11);
  v12(v0 + v7 + *(int *)(found + 24), v11);
  return swift_deallocObject(v0, v8, v6);
}

void sub_1008827F4(uint64_t a1)
{
  sub_10087C200(a1, type metadata accessor for NotifyWhenFoundRecord, &qword_1010F3448, (uint64_t)sub_100882D54, (uint64_t)sub_100882D54);
}

uint64_t storeEnumTagSinglePayload for BeaconStore.BeaconStoreError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_100882864 + 4 * byte_100E513C3[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_100882898 + 4 * byte_100E513BE[v4]))();
}

uint64_t sub_100882898(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008828A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008828A8);
  return result;
}

uint64_t sub_1008828B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008828BCLL);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_1008828C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008828C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconStore.BeaconStoreError()
{
  return &type metadata for BeaconStore.BeaconStoreError;
}

uint64_t getEnumTagSinglePayload for BeaconStore.BeaconsChangedNotificationReason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE8)
    goto LABEL_17;
  if (a2 + 24 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 24) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 24;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 24;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 24;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x19;
  v8 = v6 - 25;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BeaconStore.BeaconsChangedNotificationReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_1008829C0 + 4 * byte_100E513CD[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_1008829F4 + 4 * byte_100E513C8[v4]))();
}

uint64_t sub_1008829F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008829FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100882A04);
  return result;
}

uint64_t sub_100882A10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100882A18);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_100882A1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100882A24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconStore.BeaconsChangedNotificationReason()
{
  return &type metadata for BeaconStore.BeaconsChangedNotificationReason;
}

unint64_t sub_100882A44()
{
  unint64_t result;

  result = qword_10110AD28;
  if (!qword_10110AD28)
  {
    result = swift_getWitnessTable(byte_100E51774, &type metadata for BeaconStore.BeaconStoreError);
    atomic_store(result, (unint64_t *)&qword_10110AD28);
  }
  return result;
}

unint64_t sub_100882A8C()
{
  unint64_t result;

  result = qword_10110AD30;
  if (!qword_10110AD30)
  {
    result = swift_getWitnessTable(byte_100E5170C, &type metadata for BeaconStore.BeaconsChangedNotificationReason);
    atomic_store(result, (unint64_t *)&qword_10110AD30);
  }
  return result;
}

uint64_t sub_100882AD4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10085DEF0(a1);
}

void sub_100882D2C()
{
  sub_100088F8C();
}

void sub_100882D40()
{
  sub_100088F74();
}

void sub_100882D54()
{
  sub_100088F14();
}

uint64_t sub_100882D70(uint64_t a1)
{
  return sub_100878B70(a1);
}

uint64_t sub_100882D84(uint64_t a1)
{
  return sub_100878F8C(a1);
}

uint64_t sub_100882D98(uint64_t a1)
{
  return sub_10087D668(a1);
}

uint64_t sub_100882DAC(uint64_t a1)
{
  return sub_100876524(a1);
}

uint64_t sub_100882DC0()
{
  return sub_10087ECA0();
}

uint64_t sub_100882DD4(uint64_t a1)
{
  return sub_10087E484(a1);
}

uint64_t sub_100882DE8(uint64_t a1)
{
  return sub_10087D34C(a1);
}

uint64_t sub_100882DFC(uint64_t a1)
{
  return sub_10087CA44(a1);
}

uint64_t sub_100882E10()
{
  return sub_100882064();
}

uint64_t sub_100882E24()
{
  return sub_100882560();
}

uint64_t sub_100882E38@<X0>(uint64_t a1@<X8>)
{
  return sub_100868CB4(a1);
}

uint64_t sub_100882E5C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100882E98 + 4 * byte_100E51980[a1]))(0xD000000000000044, 0x8000000100EC6190);
}

uint64_t sub_100882E98()
{
  uint64_t v0;

  return v0 + 17;
}

unint64_t sub_100882F00()
{
  return 0xD000000000000036;
}

uint64_t sub_100882F28(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  void (*v27)(char *, uint64_t);
  _DWORD v29[4];
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v29 - v11;
  v13 = (0x2Bu >> a3) & 1;
  ObjectType = swift_getObjectType(a1);
  v15 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a2 + 56))((0x66u >> a3) & 1, v13, ObjectType, a2);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 80);
  v33 = v15;
  v17 = v16(v15, ObjectType, a2);
  v18 = (uint64_t)v12;
  v19 = Date.timeIntervalSinceNow.getter(v17);
  if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v19 < 9.22337204e18)
  {
    v18 = (uint64_t)v19;
    if (qword_1010E98D0 == -1)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  swift_once(&qword_1010E98D0, sub_100027E30);
LABEL_5:
  v20 = v18 & ~(v18 >> 63);
  v21 = type metadata accessor for Logger(0);
  sub_10001A9E8(v21, (uint64_t)qword_1011B6650);
  v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    v31 = v24;
    v32 = v20;
    v25 = a3;
    v26 = (_DWORD *)swift_slowAlloc(54, -1);
    v30 = swift_slowAlloc(96, -1);
    v34 = v30;
    *v26 = 136447490;
    v29[3] = v13;
    __asm { BR              X9 }
  }

  v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  v27(v10, v6);
  v27(v12, v6);
  return v20;
}

unint64_t sub_1008834C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EE0F0;
  if (!qword_1010EE0F0)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Date, v1);
    atomic_store(result, &qword_1010EE0F0);
  }
  return result;
}

uint64_t sub_10088350C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v0 = sub_100C1ADD4(v12);
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain(v0);
    v2 = (_QWORD *)(v0 + 40);
    v3 = _swiftEmptyArrayStorage;
    do
    {
      v4 = *(v2 - 1);
      v5 = (void *)*v2;
      swift_bridgeObjectRetain(*v2);
      v6._countAndFlagsBits = v4;
      v6._object = v5;
      v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101047DF8, v6);
      swift_bridgeObjectRelease();
      if (v7 <= 8)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_1007C77B4(0, v3[2] + 1, 1, v3);
        v9 = v3[2];
        v8 = v3[3];
        if (v9 >= v8 >> 1)
          v3 = sub_1007C77B4((_QWORD *)(v8 > 1), v9 + 1, 1, v3);
        v3[2] = v9 + 1;
        *((_BYTE *)v3 + v9 + 32) = v7;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v10 = sub_100CA7D5C((uint64_t)v3);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t storeEnumTagSinglePayload for TokenSequenceError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1008836EC + 4 * byte_100E51990[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10088370C + 4 * byte_100E51995[v4]))();
}

_BYTE *sub_1008836EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10088370C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100883714(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10088371C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100883724(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10088372C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TokenSequenceError()
{
  return &type metadata for TokenSequenceError;
}

unint64_t sub_10088374C()
{
  unint64_t result;

  result = qword_10110AD38;
  if (!qword_10110AD38)
  {
    result = swift_getWitnessTable(byte_100E519F4, &type metadata for TokenSequenceError);
    atomic_store(result, (unint64_t *)&qword_10110AD38);
  }
  return result;
}

uint64_t sub_100883790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(_BYTE *, _QWORD);
  Swift::String v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v34 = a1;
  v1 = sub_10001A9A8(&qword_1010F2C10);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for URLComponents(0);
  v4 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v17 = &qword_1010FBA40;
    v18 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0);
    v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1, v33) != 1)
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v28 = v32;
      v27(v32, v3, v19);
      v29 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 0x7263736275736E75;
      v30._object = (void *)0xEB00000000656269;
      String.append(_:)(v30);
      v29(v35, 0);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v17 = &qword_1010F2C10;
    v18 = (uint64_t)v3;
  }
  sub_100004048(v18, v17);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

uint64_t sub_100883B48(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v24 = a5;
  v25 = a4;
  v9 = sub_10001A9A8(&qword_10110AE00);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_1008847BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsUnsubscribeData.CodingKeys, &type metadata for SecureLocationsUnsubscribeData.CodingKeys, v15, v14, v13);
  LOBYTE(v27) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v27, v9);
  if (!v5)
  {
    v16 = v24;
    v27 = v25;
    v26 = 1;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v18 = sub_100884800((unint64_t *)&qword_1010F19E0, (uint64_t *)&unk_1010FF7C0, (uint64_t (*)(void))sub_100036A58);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v9, v17, v18);
    v27 = v16;
    v26 = 2;
    type metadata accessor for SPSecureLocationSubscriptionMode(0);
    v20 = v19;
    v21 = sub_100365D30();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v9, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100883CF0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 7562345;
  if (*v0 != 1)
    v1 = 1701080941;
  if (*v0)
    return v1;
  else
    return 1682533734;
}

uint64_t sub_100883D34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100884BAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100883D58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008847BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100883D80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008847BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100883DA8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100883B48(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100883DC4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  _OWORD v19[7];
  uint64_t v20;
  char v21;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110ADD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100884734();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsUnsubscribeBody.CodingKeys, &type metadata for SecureLocationsUnsubscribeBody.CodingKeys, v11, v9, v10);
  *(_QWORD *)&v19[0] = *(_QWORD *)v3;
  v21 = 0;
  v12 = sub_10001A9A8(&qword_10110ADE8);
  v13 = sub_100884800(&qword_10110ADF0, &qword_10110ADE8, (uint64_t (*)(void))sub_100884778);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v21, v5, v12, v13);
  if (!v2)
  {
    v14 = *(_OWORD *)(v3 + 88);
    v19[4] = *(_OWORD *)(v3 + 72);
    v19[5] = v14;
    v19[6] = *(_OWORD *)(v3 + 104);
    v20 = *(_QWORD *)(v3 + 120);
    v15 = *(_OWORD *)(v3 + 24);
    v19[0] = *(_OWORD *)(v3 + 8);
    v19[1] = v15;
    v16 = *(_OWORD *)(v3 + 56);
    v19[2] = *(_OWORD *)(v3 + 40);
    v19[3] = v16;
    v21 = 1;
    v17 = sub_100365518();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v21, v5, &type metadata for SecureLocationsClientContext, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100883F58()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F43746E65696C63;
  else
    return 0x7263736275736E75;
}

uint64_t sub_100883FA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100884CD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100883FCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100884734();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100883FF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100884734();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10088401C(_QWORD *a1)
{
  return sub_100883DC4(a1);
}

id sub_100884064(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id result;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _OWORD v40[8];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;

  v3 = a1;
  if (!*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    sub_100364BC0(a2);
    return 0;
  }
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v39 = *(_OWORD *)(a2 + 5);
  v9 = a2[7];
  v37 = a2[9];
  v38 = a2[8];
  v35 = a2[11];
  v36 = a2[10];
  v34 = a2[12];
  v33 = *((_BYTE *)a2 + 104);
  v32 = a2[14];
  v10 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  v49 = v10;
  result = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (result)
  {
    v12 = result;
    v13 = objc_msgSend(result, "serverFriendlyDescription");

    if (v13)
    {
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v31 = v3;
      v15 = v8;
      v16 = v7;
      v17 = v6;
      v18 = v5;
      v19 = v4;
      v20 = v9;
      v22 = v21;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      *(_QWORD *)&v41 = v10;
      v49 = 0x8000000000000000;
      v24 = v22;
      v9 = v20;
      v4 = v19;
      v5 = v18;
      v6 = v17;
      v7 = v16;
      v8 = v15;
      v3 = v31;
      sub_100109D28(v14, v24, 0xD000000000000011, 0x8000000100ECA2C0, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100102BE0(0xD000000000000011, 0x8000000100ECA2C0);
      swift_bridgeObjectRelease();
      v10 = v49;
    }
    v25 = swift_isUniquelyReferenced_nonNull_native(v10);
    sub_100109D28(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v25);
    swift_bridgeObjectRelease();
    v26 = swift_isUniquelyReferenced_nonNull_native(v10);
    *(_QWORD *)&v40[0] = v10;
    sub_100109D28(0xD000000000000010, 0x8000000100ECC390, 0x2D746E65746E6F43, 0xEC00000065707954, v26);
    v30 = v10;
    v49 = v10;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v41 = v3;
    *((_QWORD *)&v41 + 1) = v4;
    *(_QWORD *)&v42 = v5;
    *((_QWORD *)&v42 + 1) = v6;
    *(_QWORD *)&v43 = v7;
    *((_QWORD *)&v43 + 1) = v8;
    v44 = v39;
    *(_QWORD *)&v45 = v9;
    *((_QWORD *)&v45 + 1) = v38;
    *(_QWORD *)&v46 = v37;
    *((_QWORD *)&v46 + 1) = v36;
    *(_QWORD *)&v47 = v35;
    *((_QWORD *)&v47 + 1) = v34;
    LOBYTE(v48) = v33;
    *((_QWORD *)&v48 + 1) = v32;
    v27 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    JSONEncoder.init()(v28);
    v40[4] = v45;
    v40[5] = v46;
    v40[6] = v47;
    v40[7] = v48;
    v40[0] = v41;
    v40[1] = v42;
    v40[2] = v43;
    v40[3] = v39;
    v29 = sub_100884488();
    dispatch thunk of JSONEncoder.encode<A>(_:)(v40, &type metadata for SecureLocationsUnsubscribeBody, v29);
    swift_release();
    sub_100364B3C((uint64_t *)&v41);
    return (id)v30;
  }
  __break(1u);
  return result;
}

unint64_t sub_100884488()
{
  unint64_t result;

  result = qword_10110AD40;
  if (!qword_10110AD40)
  {
    result = swift_getWitnessTable(byte_100E51B6C, &type metadata for SecureLocationsUnsubscribeBody);
    atomic_store(result, (unint64_t *)&qword_10110AD40);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeBody()
{
  return &type metadata for SecureLocationsUnsubscribeBody;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeRequest()
{
  return &type metadata for SecureLocationsUnsubscribeRequest;
}

_QWORD *initializeWithCopy for SecureLocationsUnsubscribeData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for SecureLocationsUnsubscribeData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  return a1;
}

_QWORD *assignWithTake for SecureLocationsUnsubscribeData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  a1[3] = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeData()
{
  return &type metadata for SecureLocationsUnsubscribeData;
}

uint64_t sub_1008845F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008845FC);
}

uint64_t sub_1008845FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for URLComponents(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100884670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10088467C);
}

uint64_t sub_10088467C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for URLComponents(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecureLocationsUnsubscribeEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_10110ADA0;
  if (!qword_10110ADA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsUnsubscribeEndpoint);
  return result;
}

unint64_t sub_100884734()
{
  unint64_t result;

  result = qword_10110ADE0;
  if (!qword_10110ADE0)
  {
    result = swift_getWitnessTable(byte_100E51DB8, &type metadata for SecureLocationsUnsubscribeBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110ADE0);
  }
  return result;
}

unint64_t sub_100884778()
{
  unint64_t result;

  result = qword_10110ADF8;
  if (!qword_10110ADF8)
  {
    result = swift_getWitnessTable("mZ$", &type metadata for SecureLocationsUnsubscribeData);
    atomic_store(result, (unint64_t *)&qword_10110ADF8);
  }
  return result;
}

unint64_t sub_1008847BC()
{
  unint64_t result;

  result = qword_10110AE08;
  if (!qword_10110AE08)
  {
    result = swift_getWitnessTable(byte_100E51D68, &type metadata for SecureLocationsUnsubscribeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110AE08);
  }
  return result;
}

uint64_t sub_100884800(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001F784(a2);
    v7 = a3();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsUnsubscribeData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1008848B0 + 4 * byte_100E51A65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1008848E4 + 4 * byte_100E51A60[v4]))();
}

uint64_t sub_1008848E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008848EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008848F4);
  return result;
}

uint64_t sub_100884900(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100884908);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10088490C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100884914(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeData.CodingKeys()
{
  return &type metadata for SecureLocationsUnsubscribeData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsUnsubscribeBody.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10088497C + 4 * byte_100E51A6F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1008849B0 + 4 * byte_100E51A6A[v4]))();
}

uint64_t sub_1008849B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008849B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008849C0);
  return result;
}

uint64_t sub_1008849CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008849D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1008849D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008849E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeBody.CodingKeys()
{
  return &type metadata for SecureLocationsUnsubscribeBody.CodingKeys;
}

unint64_t sub_100884A00()
{
  unint64_t result;

  result = qword_10110AE10;
  if (!qword_10110AE10)
  {
    result = swift_getWitnessTable(byte_100E51C88, &type metadata for SecureLocationsUnsubscribeBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110AE10);
  }
  return result;
}

unint64_t sub_100884A48()
{
  unint64_t result;

  result = qword_10110AE18;
  if (!qword_10110AE18)
  {
    result = swift_getWitnessTable(byte_100E51D40, &type metadata for SecureLocationsUnsubscribeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110AE18);
  }
  return result;
}

unint64_t sub_100884A90()
{
  unint64_t result;

  result = qword_10110AE20;
  if (!qword_10110AE20)
  {
    result = swift_getWitnessTable("9Y$", &type metadata for SecureLocationsUnsubscribeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110AE20);
  }
  return result;
}

unint64_t sub_100884AD8()
{
  unint64_t result;

  result = qword_10110AE28;
  if (!qword_10110AE28)
  {
    result = swift_getWitnessTable("!Y$", &type metadata for SecureLocationsUnsubscribeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110AE28);
  }
  return result;
}

unint64_t sub_100884B20()
{
  unint64_t result;

  result = qword_10110AE30;
  if (!qword_10110AE30)
  {
    result = swift_getWitnessTable(byte_100E51BF8, &type metadata for SecureLocationsUnsubscribeBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110AE30);
  }
  return result;
}

unint64_t sub_100884B68()
{
  unint64_t result;

  result = qword_10110AE38;
  if (!qword_10110AE38)
  {
    result = swift_getWitnessTable(byte_100E51C20, &type metadata for SecureLocationsUnsubscribeBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110AE38);
  }
  return result;
}

uint64_t sub_100884BAC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1682533734 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1682533734, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    v7 = 0xE300000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7562345, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701080941, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100884CD0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7263736275736E75 && a2 == 0xEB00000000656269)
  {
    v5 = 0xEB00000000656269;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7263736275736E75, 0xEB00000000656269, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    swift_bridgeObjectRelease(0xED0000747865746ELL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double sub_100884DFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, _QWORD *a8@<X8>)
{
  uint64_t v14;
  _UNKNOWN **v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  double result;

  if ((a7 & 1) != 0)
  {
    if ((a6 & 1) != 0)
    {
      v14 = type metadata accessor for ItemShareInviteReceivedAirTagWithBlockedMembersUserNotification(0);
      v15 = &off_101097738;
    }
    else
    {
      v14 = type metadata accessor for ItemShareInviteReceivedWithBlockedMembersUserNotification(0);
      v15 = &off_1010977A0;
    }
  }
  else if ((a6 & 1) != 0)
  {
    v14 = type metadata accessor for ItemShareInviteReceivedAirTagUserNotification(0);
    v15 = &off_101097808;
  }
  else
  {
    v14 = type metadata accessor for ItemShareInviteReceivedUserNotification(0);
    v15 = &off_101097870;
  }
  a8[3] = v14;
  a8[4] = v15;
  v16 = sub_100018F08(a8);
  sub_100200AB4(a1, (uint64_t)v16);
  v17 = (_QWORD *)((char *)v16 + *(int *)(v14 + 20));
  *v17 = a2;
  v17[1] = a3;
  v18 = (_QWORD *)((char *)v16 + *(int *)(v14 + 24));
  *v18 = a4;
  v18[1] = a5;
  swift_bridgeObjectRetain(a3);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a5).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for ItemShareInviteReceivedUserNotification(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110B060, (uint64_t)&nominal type descriptor for ItemShareInviteReceivedUserNotification);
}

uint64_t type metadata accessor for ItemShareInviteReceivedAirTagUserNotification(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110AFC8, (uint64_t)&nominal type descriptor for ItemShareInviteReceivedAirTagUserNotification);
}

uint64_t type metadata accessor for ItemShareInviteReceivedWithBlockedMembersUserNotification(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110AF30, (uint64_t)&nominal type descriptor for ItemShareInviteReceivedWithBlockedMembersUserNotification);
}

uint64_t type metadata accessor for ItemShareInviteReceivedAirTagWithBlockedMembersUserNotification(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110AE98, (uint64_t)&nominal type descriptor for ItemShareInviteReceivedAirTagWithBlockedMembersUserNotification);
}

uint64_t sub_100884F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100884F54);
}

uint64_t sub_100884F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100884F64);
}

uint64_t sub_100884F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100884F78);
}

uint64_t sub_100884F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100884F88);
}

uint64_t sub_100884F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100884F98);
}

uint64_t sub_100884F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100884FA8);
}

uint64_t *sub_100884FAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = (int *)type metadata accessor for MemberSharingCircle(0);
    v10 = v9[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UUID(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v14((char *)a1 + v9[6], (char *)a2 + v9[6], v13);
    v14((char *)a1 + v9[7], (char *)a2 + v9[7], v13);
    v14((char *)a1 + v9[8], (char *)a2 + v9[8], v13);
    v15 = v9[9];
    v16 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = v16;
    *((_BYTE *)a1 + v9[10]) = *((_BYTE *)a2 + v9[10]);
    v17 = *(int *)(a3 + 20);
    v18 = *(int *)(a3 + 24);
    v19 = (uint64_t *)((char *)a1 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (uint64_t *)((char *)a1 + v18);
    v23 = (uint64_t *)((char *)a2 + v18);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
  }
  return a1;
}

uint64_t sub_1008850F4(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v2 = (int *)type metadata accessor for MemberSharingCircle(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(a1 + v2[6], v4);
  v5(a1 + v2[7], v4);
  v5(a1 + v2[8], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1008851BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = (int *)type metadata accessor for MemberSharingCircle(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v13((char *)a1 + v8[6], (char *)a2 + v8[6], v12);
  v13((char *)a1 + v8[7], (char *)a2 + v8[7], v12);
  v13((char *)a1 + v8[8], (char *)a2 + v8[8], v12);
  v14 = v8[9];
  v15 = *(uint64_t *)((char *)a2 + v14);
  *(uint64_t *)((char *)a1 + v14) = v15;
  *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
  v16 = *(int *)(a3 + 20);
  v17 = *(int *)(a3 + 24);
  v18 = (uint64_t *)((char *)a1 + v16);
  v19 = (uint64_t *)((char *)a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (uint64_t *)((char *)a1 + v17);
  v22 = (uint64_t *)((char *)a2 + v17);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t *sub_1008852D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = (int *)type metadata accessor for MemberSharingCircle(0);
  v11 = v10[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v15((char *)a1 + v10[6], (char *)a2 + v10[6], v14);
  v15((char *)a1 + v10[7], (char *)a2 + v10[7], v14);
  v15((char *)a1 + v10[8], (char *)a2 + v10[8], v14);
  v16 = v10[9];
  v17 = *(uint64_t *)((char *)a2 + v16);
  *(uint64_t *)((char *)a1 + v16) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v10[10]) = *((_BYTE *)a2 + v10[10]);
  v18 = *(int *)(a3 + 20);
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  v22 = *(int *)(a3 + 24);
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10088542C(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = (int *)type metadata accessor for MemberSharingCircle(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(&a1[v6[6]], &a2[v6[6]], v10);
  v11(&a1[v6[7]], &a2[v6[7]], v10);
  v11(&a1[v6[8]], &a2[v6[8]], v10);
  *(_QWORD *)&a1[v6[9]] = *(_QWORD *)&a2[v6[9]];
  a1[v6[10]] = a2[v6[10]];
  v12 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  return a1;
}

uint64_t *sub_100885518(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = (int *)type metadata accessor for MemberSharingCircle(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  v13((char *)a1 + v8[6], &a2[v8[6]], v12);
  v13((char *)a1 + v8[7], &a2[v8[7]], v12);
  v13((char *)a1 + v8[8], &a2[v8[8]], v12);
  *(uint64_t *)((char *)a1 + v8[9]) = *(_QWORD *)&a2[v8[9]];
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v8[10]) = a2[v8[10]];
  v14 = *(int *)(a3 + 20);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)&a2[v14];
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  v19 = *(int *)(a3 + 24);
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)&a2[v19];
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10088563C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100885648);
}

uint64_t sub_10088564C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MemberSharingCircle(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1008856CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008856D8);
}

uint64_t sub_1008856DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MemberSharingCircle(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100885758(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for MemberSharingCircle(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E51E80;
    v4[2] = &unk_100E51E80;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1008857CC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t inited;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[48];

  v3 = type metadata accessor for LocalizationUtility.Table(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A9A8(&qword_101106C20);
  inited = swift_initStackObject(v7, v17);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v9 = (_QWORD *)(v1 + *(int *)(a1(0) + 20));
  v10 = v9[1];
  *(_QWORD *)(inited + 32) = *v9;
  *(_QWORD *)(inited + 40) = v10;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizationUtility.Table.itemSharing(_:), v3);
  swift_bridgeObjectRetain(v10);
  v11 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000026, 0x8000000100EE9200, v6);
  v13 = v12;
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  v14 = sub_1007EDC10(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  v15 = String.init(format:arguments:)(v11, v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_100885938(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v25[48];

  v7 = type metadata accessor for LocalizationUtility.Table(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10001A9A8(&qword_101106C20);
  inited = swift_initStackObject(v11, v25);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v13 = (uint64_t *)(v3 + *(int *)(a1(0) + 24));
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  v16 = sub_100C73E1C(v14, v15);
  v18 = v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 32) = v16;
  *(_QWORD *)(inited + 40) = v18;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for LocalizationUtility.Table.itemSharing(_:), v7);
  v19 = static LocalizationUtility.localizedString(key:table:)(a2, a3, v10);
  v21 = v20;
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  v22 = sub_1007EDC10(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  v23 = String.init(format:arguments:)(v19, v21, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_100885AC0()
{
  return 97;
}

uint64_t sub_100885AC8()
{
  return sub_1008857CC(type metadata accessor for ItemShareInviteReceivedUserNotification);
}

uint64_t sub_100885AE4()
{
  return sub_100885938(type metadata accessor for ItemShareInviteReceivedUserNotification, 0xD00000000000002ELL, 0x8000000100EE91D0);
}

uint64_t sub_100885B1C()
{
  return sub_1008857CC(type metadata accessor for ItemShareInviteReceivedWithBlockedMembersUserNotification);
}

uint64_t sub_100885B38()
{
  return sub_100885938(type metadata accessor for ItemShareInviteReceivedWithBlockedMembersUserNotification, 0xD000000000000043, 0x8000000100EE9270);
}

uint64_t sub_100885B6C()
{
  return sub_1008857CC(type metadata accessor for ItemShareInviteReceivedAirTagUserNotification);
}

uint64_t sub_100885B88()
{
  return sub_100885938(type metadata accessor for ItemShareInviteReceivedAirTagUserNotification, 0xD000000000000030, 0x8000000100EE9230);
}

uint64_t sub_100885BBC()
{
  return sub_1008857CC(type metadata accessor for ItemShareInviteReceivedAirTagWithBlockedMembersUserNotification);
}

uint64_t sub_100885BD8()
{
  return sub_100885938(type metadata accessor for ItemShareInviteReceivedAirTagWithBlockedMembersUserNotification, 0xD000000000000045, 0x8000000100EE92C0);
}

unint64_t sub_100885C0C()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v0, &v6);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = 0x6564496572616873;
  *(_QWORD *)(inited + 40) = 0xEF7265696669746ELL;
  v2 = type metadata accessor for MemberSharingCircle(0);
  v3 = UUID.uuidString.getter(v2);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v4;
  return sub_1006B8B10(inited);
}

ValueMetadata *type metadata accessor for AccessorySetMaxConnectionsPayload()
{
  return &type metadata for AccessorySetMaxConnectionsPayload;
}

unint64_t sub_100885CB0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100885CDC();
  result = sub_1001E9BA0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100885CDC()
{
  unint64_t result;

  result = qword_10110B0A0;
  if (!qword_10110B0A0)
  {
    result = swift_getWitnessTable("]Y$", &type metadata for AccessorySetMaxConnectionsPayload);
    atomic_store(result, (unint64_t *)&qword_10110B0A0);
  }
  return result;
}

uint64_t sub_100885D20()
{
  _QWORD *v0;
  unint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t result;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v2;
  if (!v1)
  {
    v8 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_26;
    v9 = (unint64_t)(v0[2] + 64) >> 6;
    if (v8 < v9)
    {
      v10 = v0[1];
      v11 = *(_QWORD *)(v10 + 8 * v8);
      if (v11)
      {
LABEL_8:
        v4 = (v11 - 1) & v11;
        v5 = __clz(__rbit64(v11)) + (v8 << 6);
        v3 = v8;
        goto LABEL_3;
      }
      v12 = v2 + 2;
      v3 = v2 + 1;
      if (v2 + 2 < v9)
      {
        v11 = *(_QWORD *)(v10 + 8 * v12);
        if (v11)
        {
LABEL_11:
          v8 = v12;
          goto LABEL_8;
        }
        v3 = v2 + 2;
        if (v2 + 3 < v9)
        {
          v11 = *(_QWORD *)(v10 + 8 * (v2 + 3));
          if (v11)
          {
            v8 = v2 + 3;
            goto LABEL_8;
          }
          v12 = v2 + 4;
          v3 = v2 + 3;
          if (v2 + 4 < v9)
          {
            v11 = *(_QWORD *)(v10 + 8 * v12);
            if (v11)
              goto LABEL_11;
            v8 = v2 + 5;
            v3 = v2 + 4;
            if (v2 + 5 < v9)
            {
              v11 = *(_QWORD *)(v10 + 8 * v8);
              if (v11)
                goto LABEL_8;
              v3 = v9 - 1;
              v13 = v2 + 6;
              while (v9 != v13)
              {
                v11 = *(_QWORD *)(v10 + 8 * v13++);
                if (v11)
                {
                  v8 = v13 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    v7 = 0;
    v0[3] = v3;
    v0[4] = 0;
    return v7;
  }
  v4 = (v1 - 1) & v1;
  v5 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
  v6 = *(_QWORD *)(*(_QWORD *)(*v0 + 48) + 16 * v5 + 8);
  v0[3] = v3;
  v0[4] = v4;
  v7 = v0[5];
  if (!__OFADD__(v7, 1))
  {
    v0[5] = v7 + 1;
    swift_bridgeObjectRetain(v6);
    return v7;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_100885EA0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_10088F2E0(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_10088DDA4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100885F08()
{
  Swift::Int v0;
  uint64_t result;

  v0 = sub_1003B8C0C((uint64_t)&off_101048040);
  result = swift_arrayDestroy(&unk_101048060, 1, &type metadata for String);
  qword_10110B0A8 = v0;
  return result;
}

_QWORD *sub_100885F50(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[6];

  v2 = v1;
  v38 = a1;
  v39 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v5, v16);
  v2[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000034, 0x8000000100EE9740, v10, v7, v14, 0);
  v2[4] = 0;
  v19 = type metadata accessor for PropertyListDecoder(0);
  v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v2[5] = PropertyListDecoder.init()(v20);
  v21 = sub_10001A9A8(&qword_10110B4B8);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = PassthroughSubject.init()();
  v2[6] = v22;
  v2[8] = 0;
  v2[9] = _swiftEmptyDictionarySingleton;
  v23 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_1011B7D38, "BeaconStoreFileManager init.", 28, 2, _swiftEmptyArrayStorage);
  v2[3] = v38;
  v24 = v2[6];
  v25 = sub_10001A9A8(&qword_10110B4C0);
  v26 = swift_allocObject(v25, 24, 7);
  *(_QWORD *)(v26 + 16) = v24;
  v2[7] = v26;
  aBlock[4] = sub_1008946E4;
  aBlock[5] = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101097A08;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v28 = swift_retain();
  static DispatchQoS.unspecified.getter(v28);
  v40 = _swiftEmptyArrayStorage;
  v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v32 = v30;
  v33 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v32, v31, v39, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v4, v27);
  _Block_release(v27);
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v33);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  swift_release();
  return v2;
}

void sub_100886380()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 16);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, _QWORD *))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v1 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    if (qword_1010EA0D8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA0D8, sub_1009A3098);
LABEL_3:
  v7 = type metadata accessor for URL(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B7AA8);
  v9 = NSFileManager.entryCount(directory:)(v8);
  if (qword_1010EA5B8 != -1)
    swift_once(&qword_1010EA5B8, sub_100D3AD18);
  v10 = sub_10001A9E8(v7, (uint64_t)qword_1011B8448);
  v11 = NSFileManager.entryCount(directory:)(v10);
  if (qword_1010EA110 != -1)
    swift_once(&qword_1010EA110, sub_100A00E00);
  v12 = sub_10001A9E8(v7, (uint64_t)qword_1011B7AF8);
  v13 = NSFileManager.entryCount(directory:)(v12);
  if (qword_1010EA1B8 != -1)
    swift_once(&qword_1010EA1B8, sub_100AFC4C0);
  v14 = sub_10001A9E8(v7, (uint64_t)qword_1011B7C40);
  v15 = NSFileManager.entryCount(directory:)(v14);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B77E8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(42, -1);
    *(_DWORD *)v20 = 134218752;
    v21 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2048;
    v21 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2048;
    v21 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v20 + 24, v20 + 32);
    *(_WORD *)(v20 + 32) = 2048;
    v21 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v20 + 34, v20 + 42);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RecordCount: OwnedBeaconRecord: %ld OwnedBeaconRecord: %ld BeaconNamingRecord: %ld KeySyncRecord: %ld", (uint8_t *)v20, 0x2Au);
    swift_slowDealloc(v20, -1, -1);
  }

}

uint64_t sub_100886710@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  NSURL *v26;
  void *v27;
  void *v28;
  NSURL *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSURL *v38;
  void *v39;
  void *v40;
  NSURL *v41;
  void *v42;
  void *v43;
  unsigned __int8 v44;
  id v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t);
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;

  v74 = a1;
  v70 = a2;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v69 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v68 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v68 - v12;
  v14 = objc_autoreleasePoolPush();
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  URL.appendingPathComponent(_:)(v15, v16);
  swift_bridgeObjectRelease(v17);
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v73 = v3;
  v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v11, v2);
  objc_autoreleasePoolPop(v14);
  v19 = objc_autoreleasePoolPush();
  v20 = UUID.uuidString.getter(v19);
  v22 = v21;
  URL.appendingPathComponent(_:)(v20, v21);
  swift_bridgeObjectRelease(v22);
  URL.appendingPathExtension(_:)(0xD000000000000010, 0x8000000100ECC9E0);
  v74 = v2;
  v71 = v18;
  v18(v11, v2);
  v23 = v8;
  objc_autoreleasePoolPop(v19);
  v24 = (void *)objc_opt_self(NSFileManager);
  v25 = objc_msgSend(v24, "defaultManager");
  URL._bridgeToObjectiveC()(v26);
  v28 = v27;
  URL._bridgeToObjectiveC()(v29);
  v31 = v30;
  v76 = 0;
  LODWORD(v8) = objc_msgSend(v25, "moveItemAtURL:toURL:error:", v28, v30, &v76);

  v32 = v76;
  if ((_DWORD)v8)
  {
    v33 = v76;
  }
  else
  {
    v34 = v76;
    v35 = _convertNSErrorToError(_:)(v32);

    swift_willThrow(v36);
    v37 = objc_msgSend(v24, "defaultManager");
    URL._bridgeToObjectiveC()(v38);
    v40 = v39;
    URL._bridgeToObjectiveC()(v41);
    v43 = v42;
    v76 = 0;
    v44 = objc_msgSend(v37, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", v40, v42, 0, 1, 0, &v76);

    v45 = v76;
    if ((v44 & 1) == 0)
    {
      v64 = v76;
      _convertNSErrorToError(_:)(v45);

      swift_willThrow(v65);
      swift_errorRelease(v35);
      v66 = v74;
      v67 = (uint64_t (*)(char *, uint64_t))v71;
      v71(v23, v74);
      return v67(v13, v66);
    }
    v46 = v76;
    swift_errorRelease(v35);
    v72 = 0;
  }
  v47 = v74;
  v48 = v69;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v49 = type metadata accessor for Logger(0);
  sub_10001A9E8(v49, (uint64_t)qword_1011B77E8);
  v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 16))(v48, v13, v47);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = (void *)swift_slowAlloc(32, -1);
    v76 = v54;
    v68 = v23;
    *(_DWORD *)v53 = 136315138;
    v55 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v74, v55);
    v58 = v57;
    v75 = sub_100016940(v56, v57, (uint64_t *)&v76);
    v47 = v74;
    v23 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v53 + 4, v53 + 12);
    swift_bridgeObjectRelease(v58);
    v71(v48, v47);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Tombstoned record %s", v53, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    v71(v48, v47);
  }

  v59 = v73;
  v60 = *(void (**)(uint64_t, char *, uint64_t))(v73 + 32);
  v61 = v70;
  v60(v70, v13, v47);
  v62 = v61 + *(int *)(type metadata accessor for BeaconStoreFileRecord(0) + 20);
  v60(v62, v23, v47);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v62, 0, 1, v47);
}

uint64_t sub_100886C5C@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  id v13;
  NSURL *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  char *v41;
  id v42;

  v41 = a1;
  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v40 - v6;
  v8 = objc_autoreleasePoolPush();
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  URL.appendingPathComponent(_:)(v9, v10);
  swift_bridgeObjectRelease(v11);
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v5, v1);
  objc_autoreleasePoolPop(v8);
  v13 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v14);
  v16 = v15;
  v42 = 0;
  LODWORD(v5) = objc_msgSend(v13, "removeItemAtURL:error:", v15, &v42);

  v17 = v42;
  if ((_DWORD)v5)
  {
    v18 = static os_log_type_t.default.getter(v42);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v19 = qword_1011B7D38;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
    v22 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v1, v22);
    v25 = v24;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10001AA00();
    *(_QWORD *)(v21 + 32) = v23;
    *(_QWORD *)(v21 + 40) = v25;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Deleted record %@", 17, 2, v21);
    swift_bridgeObjectRelease(v21);
    v26 = 1;
  }
  else
  {
    v27 = v42;
    v28 = (void *)_convertNSErrorToError(_:)(v17);

    v30 = swift_willThrow(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v32 = qword_1011B7D38;
    v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
    v42 = v28;
    swift_errorRetain(v28);
    v35 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v36 = String.init<A>(describing:)(&v42, v35);
    v38 = v37;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_10001AA00();
    *(_QWORD *)(v34 + 32) = v36;
    *(_QWORD *)(v34 + 40) = v38;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Could not delete record %@", 26, 2, v34);
    swift_bridgeObjectRelease(v34);
    swift_errorRelease(v28);
    v26 = 0;
  }
  result = ((uint64_t (*)(char *, uint64_t))v12)(v7, v1);
  *v41 = v26;
  return result;
}

uint64_t sub_100886FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  unsigned int v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  id v48;
  NSURL *v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  id v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t (*v92)(char *, char *, uint64_t);
  _QWORD *v93;
  id v94;

  v85 = a2;
  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for UUID(0);
  v87 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v86 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD **)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v90 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v74 - v13;
  v15 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v15);
  v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DirectorySequence(0);
  v80 = *(_QWORD *)(v18 - 8);
  v81 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = (id)objc_opt_self(NSFileManager);
  v21 = objc_msgSend(v78, "defaultManager");
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(a1, 0, 0);

  DirectorySequence.next()(v22);
  v23 = (unsigned int (*)(char *, uint64_t, uint64_t))v10[6];
  if (v23(v17, 1, v9) == 1)
  {
    LOBYTE(v24) = 0;
    goto LABEL_25;
  }
  v24 = 0;
  v92 = (uint64_t (*)(char *, char *, uint64_t))v10[4];
  v84 = xmmword_100E22B00;
  v93 = v10;
  v77 = a3;
  v83 = v7;
  v88 = v23;
  v89 = v20;
  do
  {
    v79 = v24;
    v25 = v87;
    while (1)
    {
      v29 = v92(v14, v17, v9);
      v30 = URL.hasDirectoryPath.getter(v29);
      if ((v30 & 1) == 0)
        break;
      v26 = (uint64_t (*)(char *, uint64_t))v10[1];
LABEL_6:
      v27 = v26(v14, v9);
      DirectorySequence.next()(v27);
      v28 = v23(v17, 1, v9);
      v10 = v93;
      if (v28 == 1)
      {
        a3 = v77;
        LOBYTE(v24) = v79;
        goto LABEL_25;
      }
    }
    v31 = v90;
    v32 = URL.deletingPathExtension()(v30);
    v33 = URL.lastPathComponent.getter(v32);
    v35 = v34;
    v26 = (uint64_t (*)(char *, uint64_t))v10[1];
    v26(v31, v9);
    UUID.init(uuidString:)(v33, v35);
    swift_bridgeObjectRelease(v35);
    v36 = v91;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v7, 1, v91) == 1)
    {
      v37 = sub_100004048((uint64_t)v7, &qword_1010ED860);
      v38 = static os_log_type_t.error.getter(v37);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v39 = qword_1011B7D38;
      v40 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v41 = swift_allocObject(v40, 72, 7);
      *(_OWORD *)(v41 + 16) = v84;
      v42 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v9, v42);
      v45 = v44;
      *(_QWORD *)(v41 + 56) = &type metadata for String;
      *(_QWORD *)(v41 + 64) = sub_10001AA00();
      *(_QWORD *)(v41 + 32) = v43;
      *(_QWORD *)(v41 + 40) = v45;
      os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Skipping file with unexpected name: %@", 38, 2, v41);
      swift_bridgeObjectRelease(v41);
      v7 = v83;
      v25 = v87;
      v20 = v89;
      goto LABEL_14;
    }
    v46 = v86;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v86, v7, v36);
    v47 = static UUID.== infix(_:_:)(v46, v85);
    v20 = v89;
    if ((v47 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v46, v36);
LABEL_14:
      v23 = v88;
      goto LABEL_6;
    }
    v48 = objc_msgSend(v78, "defaultManager");
    URL._bridgeToObjectiveC()(v49);
    v51 = v50;
    v94 = 0;
    LODWORD(v76) = objc_msgSend(v48, "removeItemAtURL:error:", v50, &v94);

    v52 = v94;
    if ((_DWORD)v76)
    {
      v79 = static os_log_type_t.default.getter(v94);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v76 = qword_1011B7D38;
      v53 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v54 = swift_allocObject(v53, 72, 7);
      *(_OWORD *)(v54 + 16) = v84;
      v55 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v9, v55);
      v75 = v57;
      *(_QWORD *)(v54 + 56) = &type metadata for String;
      *(_QWORD *)(v54 + 64) = sub_10001AA00();
      v58 = v75;
      *(_QWORD *)(v54 + 32) = v56;
      *(_QWORD *)(v54 + 40) = v58;
      os_log(_:dso:log:_:_:)(v79, &_mh_execute_header, v76, "Deleted record %@", 17, 2, v54);
      swift_bridgeObjectRelease(v54);
      v79 = 1;
      v59 = v91;
    }
    else
    {
      v60 = v94;
      v61 = (void *)_convertNSErrorToError(_:)(v52);

      v63 = swift_willThrow(v62);
      LODWORD(v82) = static os_log_type_t.default.getter(v63);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v64 = qword_1011B7D38;
      v65 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v66 = swift_allocObject(v65, 72, 7);
      *(_OWORD *)(v66 + 16) = v84;
      v94 = v61;
      swift_errorRetain(v61);
      v67 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v68 = String.init<A>(describing:)(&v94, v67);
      v70 = v69;
      *(_QWORD *)(v66 + 56) = &type metadata for String;
      *(_QWORD *)(v66 + 64) = sub_10001AA00();
      *(_QWORD *)(v66 + 32) = v68;
      *(_QWORD *)(v66 + 40) = v70;
      os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v64, "Could not delete record %@", 26, 2, v66);
      swift_bridgeObjectRelease(v66);
      swift_errorRelease(v61);
      v82 = 0;
      v7 = v83;
      v59 = v91;
      v25 = v87;
      v20 = v89;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v86, v59);
    v71 = v26(v14, v9);
    DirectorySequence.next()(v71);
    v23 = v88;
    v72 = v88(v17, 1, v9);
    a3 = v77;
    v10 = v93;
    v24 = v79;
  }
  while (v72 != 1);
LABEL_25:
  result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v20, v81);
  *a3 = v24 & 1;
  return result;
}

void sub_100887720(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  void *v16;
  uint64_t v17;
  _QWORD v18[2];
  _BYTE v19[16];
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v18[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v18 - v9;
  v11 = objc_autoreleasePoolPush();
  v12 = objc_autoreleasePoolPush();
  v13 = UUID.uuidString.getter(v12);
  URL.appendingPathComponent(_:)(v13, v14);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  objc_autoreleasePoolPop(v12);
  v16 = objc_autoreleasePoolPush();
  v20 = v10;
  v21 = v2;
  v22 = a1;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
  OS_dispatch_queue.sync<A>(execute:)(sub_1007BD1E0, v19, v17);
  objc_autoreleasePoolPop(v16);
  v15(v10, v4);
  objc_autoreleasePoolPop(v11);
}

uint64_t sub_10088787C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  void *v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v81 = a3;
  v88 = a2;
  v89 = a4;
  v85 = type metadata accessor for CryptoError(0);
  v87 = *(_QWORD *)(v85 - 8);
  v6 = __chkstk_darwin(v85);
  v82 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v84 = (char *)&v68 - v9;
  __chkstk_darwin(v8);
  v83 = (char *)&v68 - v10;
  v76 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v76);
  v78 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v77);
  v79 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v80 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v86 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v68 - v21;
  static SystemInfo.lockState.getter(v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v15);
  v23 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v91, v15, v23);
  dispatch thunk of RawRepresentable.rawValue.getter(&v90, v15, v23);
  v24 = v91;
  v25 = v90;
  v26 = *(void (**)(char *, uint64_t))(v16 + 8);
  v26(v19, v15);
  v27 = ((uint64_t (*)(char *, uint64_t))v26)(v22, v15);
  if (v24 != v25)
  {
    v31 = Data.init(contentsOf:options:)(a1, 0);
    if (v4)
    {
      result = swift_errorRelease(v4);
LABEL_17:
      v60 = (_OWORD *)v89;
      *(_QWORD *)(v89 + 32) = 0;
      *v60 = 0u;
      v60[1] = 0u;
      return result;
    }
    v33 = v32;
    v75 = v31;
    v34 = static os_log_type_t.info.getter(v31);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v35 = qword_1011B7D38;
    v71 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v36 = swift_allocObject(v71, 72, 7);
    v72 = xmmword_100E22B00;
    *(_OWORD *)(v36 + 16) = xmmword_100E22B00;
    v37 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v13, v37);
    v40 = v39;
    *(_QWORD *)(v36 + 56) = &type metadata for String;
    v73 = sub_10001AA00();
    *(_QWORD *)(v36 + 64) = v73;
    *(_QWORD *)(v36 + 32) = v38;
    *(_QWORD *)(v36 + 40) = v40;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Reading from record file: %@", 28, 2, v36);
    swift_bridgeObjectRelease();
    v41 = v75;
    v74 = v33;
    v42 = sub_100C5471C(v75, v33);
    v43 = v86;
    v68 = v37;
    v69 = v42;
    v70 = v44;
    v45 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v86, v81, v13);
    if (qword_1010EA0D8 != -1)
      swift_once(&qword_1010EA0D8, sub_1009A3098);
    v46 = sub_10001A9E8(v13, (uint64_t)qword_1011B7AA8);
    v47 = sub_100006204(&qword_1010FE238, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v46, v43, v13, v47) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v13);
      v48 = objc_autoreleasePoolPush();
      v49 = (uint64_t)v79;
      v50 = v69;
      v51 = v70;
      sub_100A7EF08(v88, v69, v70);
      objc_autoreleasePoolPop(v48);
      v52 = (_QWORD *)v89;
      *(_QWORD *)(v89 + 24) = v77;
      v53 = &qword_1010ECCB8;
      v54 = type metadata accessor for OwnedBeaconRecord;
      v55 = &unk_100E57B60;
    }
    else
    {
      if (qword_1010EA5B8 != -1)
        swift_once(&qword_1010EA5B8, sub_100D3AD18);
      v56 = sub_10001A9E8(v13, (uint64_t)qword_1011B8448);
      v57 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v43, v13, v47);
      v58 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v43, v13);
      if ((v57 & 1) == 0)
      {
        v61 = static os_log_type_t.error.getter(v58);
        v62 = qword_1011B7D38;
        v63 = swift_allocObject(v71, 72, 7);
        *(_OWORD *)(v63 + 16) = v72;
        v64 = dispatch thunk of CustomStringConvertible.description.getter(v13, v68);
        v65 = v73;
        *(_QWORD *)(v63 + 56) = &type metadata for String;
        *(_QWORD *)(v63 + 64) = v65;
        *(_QWORD *)(v63 + 32) = v64;
        *(_QWORD *)(v63 + 40) = v66;
        os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Unsupported baseURL: %@", 23, 2, v63);
        sub_10001BC14(v69, v70);
        sub_10001BC14(v41, v74);
        result = swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      v59 = objc_autoreleasePoolPush();
      v49 = (uint64_t)v78;
      v50 = v69;
      v51 = v70;
      sub_100A7EED4(v88, v69, v70);
      objc_autoreleasePoolPop(v59);
      v52 = (_QWORD *)v89;
      *(_QWORD *)(v89 + 24) = v76;
      v53 = &qword_1010F4A70;
      v54 = type metadata accessor for SharedBeaconRecord;
      v55 = &unk_100E6F5CC;
    }
    v52[4] = sub_100006204(v53, v54, (uint64_t)v55);
    v67 = sub_100018F08(v52);
    sub_1000126EC(v49, (uint64_t)v67, v54);
    sub_10001BC14(v50, v51);
    return sub_10001BC14(v41, v74);
  }
  v28 = static os_log_type_t.default.getter(v27);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  result = os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_1011B7D38, "record call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
  v30 = (_OWORD *)v89;
  *(_QWORD *)(v89 + 32) = 0;
  *v30 = 0u;
  v30[1] = 0u;
  return result;
}

uint64_t sub_100888238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::String v9;
  uint64_t MetatypeMetadata;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9._object = (void *)0x8000000100ED68C0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v17[0] = a3;
  MetatypeMetadata = swift_getMetatypeMetadata(a3);
  v11 = String.init<A>(describing:)(v17, MetatypeMetadata);
  v13 = v12;
  v14 = objc_autoreleasePoolPush();
  v17[2] = a3;
  v17[3] = a4;
  v18 = v4;
  v19 = a1;
  v20 = a2;
  v21 = v11;
  v22 = v13;
  v15 = type metadata accessor for Optional(0, a3);
  OS_dispatch_queue.sync<A>(execute:)(sub_1008946C0, v17, v15);
  objc_autoreleasePoolPop(v14);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100888320@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t WitnessTable;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  void (*v91)(char *, uint64_t);
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[4];
  uint64_t v111;
  uint64_t v112;

  v106 = a7;
  v96 = a6;
  v105 = a5;
  v99 = a4;
  v100 = a1;
  v101 = a3;
  v103 = a2;
  v98 = type metadata accessor for CryptoError(0);
  v95 = *(_QWORD *)(v98 - 8);
  v7 = __chkstk_darwin(v98);
  v97 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v93 = (char *)&v88 - v10;
  __chkstk_darwin(v9);
  v94 = (char *)&v88 - v11;
  v104 = type metadata accessor for URL(0);
  v102 = *(_QWORD *)(v104 - 8);
  v12 = __chkstk_darwin(v104);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v88 - v15;
  v17 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v88 - v23;
  static SystemInfo.lockState.getter(v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v17);
  v25 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v110, v17, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(&v111, v17, v25);
  v26 = v110[0];
  v27 = v111;
  v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v21, v17);
  v29 = ((uint64_t (*)(char *, uint64_t))v28)(v24, v17);
  if (v26 == v27)
  {
    v30 = static os_log_type_t.default.getter(v29);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7D38, "record(for uuid:) call failed because in device is in beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v106, 1, 1);
  }
  v32 = objc_autoreleasePoolPush();
  v33 = UUID.uuidString.getter(v32);
  URL.appendingPathComponent(_:)(v33, v34);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v35 = *(void (**)(char *, uint64_t))(v102 + 8);
  v36 = v104;
  v35(v14, v104);
  objc_autoreleasePoolPop(v32);
  v37 = v107;
  v38 = Data.init(contentsOf:options:)(v16, 0);
  if (v37)
  {
    swift_errorRelease(v37);
    v35(v16, v36);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v106, 1, 1);
  }
  v102 = v38;
  v103 = v39;
  v91 = v35;
  v40 = static os_log_type_t.debug.getter(v38);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v41 = qword_1011B7D38;
  v89 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v42 = swift_allocObject(v89, 72, 7);
  v88 = xmmword_100E22B00;
  *(_OWORD *)(v42 + 16) = xmmword_100E22B00;
  v43 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v92 = v16;
  v44 = dispatch thunk of CustomStringConvertible.description.getter(v36, v43);
  v46 = v45;
  *(_QWORD *)(v42 + 56) = &type metadata for String;
  v90 = sub_10001AA00();
  *(_QWORD *)(v42 + 64) = v90;
  *(_QWORD *)(v42 + 32) = v44;
  *(_QWORD *)(v42 + 40) = v46;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Reading from LocalStorageBacked file: %@", 40, 2, v42);
  swift_bridgeObjectRelease();
  v47 = v100;
  v48 = (uint64_t *)(v100 + 72);
  swift_beginAccess(v100 + 72, v110, 33, 0);
  v49 = v99;
  swift_bridgeObjectRetain(v99);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v47 + 72));
  v111 = *(_QWORD *)(v47 + 72);
  v51 = v111;
  *(_QWORD *)(v47 + 72) = 0x8000000000000000;
  v53 = sub_100518DA0(v101, v49);
  v54 = *(_QWORD *)(v51 + 16);
  v55 = (v52 & 1) == 0;
  v56 = v54 + v55;
  if (__OFADD__(v54, v55))
  {
    __break(1u);
    goto LABEL_32;
  }
  LOBYTE(v14) = v52;
  if (*(_QWORD *)(v51 + 24) >= v56)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_34;
    while (1)
    {
LABEL_14:
      *v48 = v51;
      swift_bridgeObjectRelease();
      v48 = (uint64_t *)*v48;
      v59 = v48;
      if ((v14 & 1) == 0)
      {
        swift_bridgeObjectRetain(v48);
        sub_100020DBC(&v111);
        sub_100A98190(v53, v101, v49, v111, v48);
        v59 = (uint64_t *)v49;
      }
      swift_bridgeObjectRetain(v59);
      v60 = v48[7];
      v61 = *(_QWORD *)(v60 + 8 * v53);
      v62 = __OFADD__(v61, 1);
      v63 = v61 + 1;
      if (v62)
      {
LABEL_32:
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v60 + 8 * v53) = v63;
        swift_endAccess(v110);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v64 = *(_QWORD *)(v47 + 64);
        v62 = __OFADD__(v64, 1);
        v65 = v64 + 1;
        if (!v62)
        {
          *(_QWORD *)(v47 + 64) = v65;
          if (__ROR8__(0x1CAC083126E978D5 * v65 + 0x10624DD2F1A9FB8, 3) < 0x4189374BC6A7EFuLL)
          {
            v66 = sub_100888F00(v47);
            v68 = v67;
            swift_bridgeObjectRetain(*(_QWORD *)(v47 + 72));
            v70 = sub_100A795F0(v69);
            v72 = v71;
            swift_bridgeObjectRelease();
            if ((v72 & 1) != 0 || v70 < 10001)
            {
              if (qword_1010E9F80 != -1)
                swift_once(&qword_1010E9F80, sub_1007FA778);
              v77 = type metadata accessor for Logger(0);
              sub_10001A9E8(v77, (uint64_t)qword_1011B77E8);
              swift_bridgeObjectRetain(v68);
              v75 = Logger.logObject.getter(v78);
              v76 = static os_log_type_t.info.getter(v75);
            }
            else
            {
              if (qword_1010E9F80 != -1)
                swift_once(&qword_1010E9F80, sub_1007FA778);
              v73 = type metadata accessor for Logger(0);
              sub_10001A9E8(v73, (uint64_t)qword_1011B77E8);
              swift_bridgeObjectRetain(v68);
              v75 = Logger.logObject.getter(v74);
              v76 = static os_log_type_t.error.getter(v75);
            }
            v79 = v76;
            if (os_log_type_enabled(v75, v76))
            {
              v80 = (uint8_t *)swift_slowAlloc(12, -1);
              v81 = swift_slowAlloc(32, -1);
              v110[0] = v81;
              *(_DWORD *)v80 = 136446210;
              swift_bridgeObjectRetain(v68);
              v111 = sub_100016940(v66, v68, v110);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v80 + 4, v80 + 12);
              swift_bridgeObjectRelease_n(v68, 3);
              _os_log_impl((void *)&_mh_execute_header, v75, v79, "readStatistics:\n%{public}s", v80, 0xCu);
              swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v81, -1, -1);
              swift_slowDealloc(v80, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v68, 2);
            }
          }
          v82 = sub_100C5471C(v102, v103);
          v84 = v83;
          v85 = type metadata accessor for Optional(0, v105);
          v86 = v96;
          v109 = *(_QWORD *)(v96 + 8);
          WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v85, &v109);
          v108 = *(_QWORD *)(v86 + 16);
          swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v85, &v108);
          sub_10088C1C4(v82, v84, v85, WitnessTable);
          v91(v92, v104);
          sub_10001BC14(v82, v84);
          return sub_10001BC14(v102, v103);
        }
      }
      __break(1u);
LABEL_34:
      sub_100A9A654();
      v51 = v111;
    }
  }
  sub_100A865D4(v56, isUniquelyReferenced_nonNull_native);
  v51 = v111;
  v57 = sub_100518DA0(v101, v49);
  if ((v14 & 1) == (v58 & 1))
  {
    v53 = v57;
    goto LABEL_14;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100888F00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  char v23[24];

  swift_beginAccess(a1 + 72, v23, 0, 0);
  v2 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRetain_n(v2, 2);
  v3 = sub_100893480(v2);
  swift_bridgeObjectRelease(v2);
  v21 = (_QWORD *)v3;
  sub_100885EA0(&v21);
  swift_bridgeObjectRelease(v2);
  v4 = v21;
  v5 = v21[2];
  if (v5)
  {
    v6 = v21 + 7;
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v8 = *(v6 - 1);
      v21 = (_QWORD *)*(v6 - 2);
      v22 = v8;
      swift_bridgeObjectRetain_n(v8, 2);
      v9._countAndFlagsBits = 8250;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v10._object;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(object);
      v12 = v21;
      v13 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        v7 = sub_1007C7438(0, v7[2] + 1, 1, v7);
      v15 = v7[2];
      v14 = v7[3];
      if (v15 >= v14 >> 1)
        v7 = sub_1007C7438((_QWORD *)(v14 > 1), v15 + 1, 1, v7);
      v6 += 4;
      v7[2] = v15 + 1;
      v16 = &v7[2 * v15];
      v16[4] = v12;
      v16[5] = v13;
      --v5;
    }
    while (v5);
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
  }
  swift_release(v4);
  v21 = v7;
  v17 = sub_10001A9A8(&qword_1011063B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F1AD8, &qword_1011063B0, (const char *)&protocol conformance descriptor for [A]);
  v19 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v17, v18);
  swift_bridgeObjectRelease(v7);
  return v19;
}

uint64_t sub_100889110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v17[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1C0 != -1)
    swift_once(&qword_1010EA1C0, sub_100B00710);
  v8 = sub_10001A9E8(v4, (uint64_t)qword_1011B7C58);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000100ED68C0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v18 = type metadata accessor for SafeLocation(0);
  v10 = sub_10001A9A8(&qword_10110AB78);
  v11 = String.init<A>(describing:)(&v18, v10);
  v13 = v12;
  v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  v15 = sub_10001A9A8(&qword_101106E40);
  OS_dispatch_queue.sync<A>(execute:)(sub_10087FC70, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8))(v7, v4);
}

uint64_t sub_1008892B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DirectorySequence(0);
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v47 - v13;
  v15 = objc_autoreleasePoolPush();
  if (qword_1010E9920 != -1)
    swift_once(&qword_1010E9920, sub_1000A21BC);
  v50 = a1;
  v16 = sub_10001A9E8(v8, (uint64_t)qword_1011B6700);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  URL.appendingPathComponent(_:)(v17, v18);
  swift_bridgeObjectRelease(v19);
  objc_autoreleasePoolPop(v15);
  v52 = _swiftEmptyArrayStorage;
  v53 = _swiftEmptyArrayStorage;
  v20 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v51 = v14;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v14, 0, 0);

  DirectorySequence.next()(v21);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v23 = v22(v4, 1, v8);
  v24 = v49;
  if (v23 != 1)
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    do
    {
      v25(v12, v4, v8);
      v26 = objc_autoreleasePoolPush();
      sub_10084C408((uint64_t)v12, v24, (uint64_t *)&v53, (unint64_t *)&v52);
      objc_autoreleasePoolPop(v26);
      v27 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      DirectorySequence.next()(v27);
    }
    while (v22(v4, 1, v8) != 1);
  }
  v28 = v9;
  v29 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v7, v48);
  v30 = static os_log_type_t.debug.getter(v29);
  v31 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v32 = (void *)static OS_os_log.default.getter(v31);
  v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v34 = swift_allocObject(v33, 112, 7);
  *(_OWORD *)(v34 + 16) = xmmword_100E22B10;
  v35 = v53;
  v36 = v53[2];
  *(_QWORD *)(v34 + 56) = &type metadata for Int;
  *(_QWORD *)(v34 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v34 + 32) = v36;
  v37 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v38 = dispatch thunk of CustomStringConvertible.description.getter(v8, v37);
  v40 = v39;
  *(_QWORD *)(v34 + 96) = &type metadata for String;
  *(_QWORD *)(v34 + 104) = sub_10001AA00();
  *(_QWORD *)(v34 + 72) = v38;
  *(_QWORD *)(v34 + 80) = v40;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v32, "Found %i records at %@", 22, 2, v34);

  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v52);
  v41 = v35[2];
  v42 = type metadata accessor for KeyAlignmentRecord(0);
  v43 = *(_QWORD *)(v42 - 8);
  if (v41)
  {
    v44 = v50;
    sub_10005972C((uint64_t)v35 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80)), v50, type metadata accessor for KeyAlignmentRecord);
    v45 = 0;
  }
  else
  {
    v45 = 1;
    v44 = v50;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, v45, 1, v42);
  swift_bridgeObjectRelease(v35);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v51, v8);
}

uint64_t sub_10088969C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v17[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1B8 != -1)
    swift_once(&qword_1010EA1B8, sub_100AFC4C0);
  v8 = sub_10001A9E8(v4, (uint64_t)qword_1011B7C40);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000100ED68C0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v18 = type metadata accessor for KeySyncRecord(0);
  v10 = sub_10001A9A8(&qword_1010ECA70);
  v11 = String.init<A>(describing:)(&v18, v10);
  v13 = v12;
  v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  v15 = sub_10001A9A8(&qword_1010F7AE0);
  OS_dispatch_queue.sync<A>(execute:)(sub_10087FC1C, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8))(v7, v4);
}

_QWORD *sub_100889840()
{
  return sub_100019424(&qword_1010EA0C8, (uint64_t)qword_1011B7A80, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C330, (uint64_t)sub_1009997C8);
}

_QWORD *sub_100889864()
{
  return sub_100019424(&qword_1010EA1B8, (uint64_t)qword_1011B7C40, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084D118, (uint64_t)sub_100AFC4C0);
}

_QWORD *sub_100889888()
{
  return sub_100019424(&qword_1010EA5E8, (uint64_t)qword_1011B8498, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C4E0, (uint64_t)sub_100D784F0);
}

uint64_t sub_1008898AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v17[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9A10 != -1)
    swift_once(&qword_1010E9A10, sub_1001EB610);
  v8 = sub_10001A9E8(v4, (uint64_t)qword_1011B6A90);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000100ED68C0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v18 = type metadata accessor for OwnerPeerTrust(0);
  v10 = sub_10001A9A8(&qword_1010ECA60);
  v11 = String.init<A>(describing:)(&v18, v10);
  v13 = v12;
  v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  OS_dispatch_queue.sync<A>(execute:)(sub_1008802A0, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8))(v7, v4);
}

uint64_t sub_100889A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v17[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA170 != -1)
    swift_once(&qword_1010EA170, sub_100AB843C);
  v8 = sub_10001A9E8(v4, (uint64_t)qword_1011B7BC0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000100ED68C0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v18 = type metadata accessor for MemberPeerTrust(0);
  v10 = sub_10001A9A8(&qword_1010ECA68);
  v11 = String.init<A>(describing:)(&v18, v10);
  v13 = v12;
  v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  v15 = sub_10001A9A8(&qword_1010EC868);
  OS_dispatch_queue.sync<A>(execute:)(sub_1008801AC, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8))(v7, v4);
}

uint64_t sub_100889BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v17[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA118 != -1)
    swift_once(&qword_1010EA118, sub_100A2ECA4);
  v8 = sub_10001A9E8(v4, (uint64_t)qword_1011B7B10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000100ED68C0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v18 = type metadata accessor for OwnerSharingCircle(0);
  v10 = sub_10001A9A8(&qword_1011115D0);
  v11 = String.init<A>(describing:)(&v18, v10);
  v13 = v12;
  v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  v15 = sub_10001A9A8(&qword_1010EE0E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_1008946A4, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8))(v7, v4);
}

uint64_t sub_100889D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v17[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9A98 != -1)
    swift_once(&qword_1010E9A98, sub_1001FFA50);
  v8 = sub_10001A9E8(v4, (uint64_t)qword_1011B6C00);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000100ED68C0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v18 = type metadata accessor for MemberSharingCircle(0);
  v10 = sub_10001A9A8(&qword_10110B4A0);
  v11 = String.init<A>(describing:)(&v18, v10);
  v13 = v12;
  v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  v15 = sub_10001A9A8((uint64_t *)&unk_101111440);
  OS_dispatch_queue.sync<A>(execute:)(sub_100894688, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8))(v7, v4);
}

_QWORD *sub_100889F3C()
{
  return sub_100019424(&qword_1010EA0F0, (uint64_t)qword_1011B7AC8, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084D0D0, (uint64_t)sub_1009AC81C);
}

_QWORD *sub_100889F60(uint64_t a1)
{
  return sub_100889FA8(a1, &qword_1010EA158, (uint64_t)qword_1011B7B78, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C378, (uint64_t)sub_100AA9AFC);
}

_QWORD *sub_100889F84(uint64_t a1)
{
  return sub_100889FA8(a1, &qword_1010E98E0, (uint64_t)qword_1011B6680, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084D040, (uint64_t)sub_100035574);
}

_QWORD *sub_100889FA8(uint64_t a1, _QWORD *a2, uint64_t a3, void (*a4)(char *, uint64_t, _QWORD **, _QWORD **), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  void (*v29)(char *, uint64_t, _QWORD **, _QWORD **);
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, _QWORD **, _QWORD **);
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;

  v54 = a5;
  v52 = a4;
  v7 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DirectorySequence(0);
  v49 = *(_QWORD *)(v10 - 8);
  v50 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v48 - v18;
  v20 = objc_autoreleasePoolPush();
  if (*a2 != -1)
    swift_once(a2, v54);
  v21 = sub_10001A9E8(v13, a3);
  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  URL.appendingPathComponent(_:isDirectory:)(v22, v23, 1);
  swift_bridgeObjectRelease(v24);
  objc_autoreleasePoolPop(v20);
  v55 = _swiftEmptyArrayStorage;
  v56 = _swiftEmptyArrayStorage;
  v25 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v53 = v19;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v19, 0, 0);

  DirectorySequence.next()(v26);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v28 = v27(v9, 1, v13);
  v54 = v14;
  v30 = v51;
  v29 = v52;
  if (v28 != 1)
  {
    v31 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    do
    {
      v31(v17, v9, v13);
      v32 = objc_autoreleasePoolPush();
      v29(v17, v30, &v56, &v55);
      objc_autoreleasePoolPop(v32);
      v33 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v17, v13);
      DirectorySequence.next()(v33);
    }
    while (v27(v9, 1, v13) != 1);
  }
  v34 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v12, v50);
  v35 = static os_log_type_t.debug.getter(v34);
  v36 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v37 = (void *)static OS_os_log.default.getter(v36);
  v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v39 = swift_allocObject(v38, 112, 7);
  *(_OWORD *)(v39 + 16) = xmmword_100E22B10;
  v40 = v56;
  v41 = v56[2];
  *(_QWORD *)(v39 + 56) = &type metadata for Int;
  *(_QWORD *)(v39 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v39 + 32) = v41;
  v42 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v43 = v53;
  v44 = dispatch thunk of CustomStringConvertible.description.getter(v13, v42);
  v46 = v45;
  *(_QWORD *)(v39 + 96) = &type metadata for String;
  *(_QWORD *)(v39 + 104) = sub_10001AA00();
  *(_QWORD *)(v39 + 72) = v44;
  *(_QWORD *)(v39 + 80) = v46;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v37, "Found %i records at %@", 22, 2, v39);

  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v55);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v13);
  return v40;
}

uint64_t sub_10088A338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v17[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9C00 != -1)
    swift_once(&qword_1010E9C00, sub_10043C1BC);
  v8 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F00);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000100ED68C0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v18 = type metadata accessor for SecureLocationsCachedPayload(0);
  v10 = sub_10001A9A8(&qword_10110AB30);
  v11 = String.init<A>(describing:)(&v18, v10);
  v13 = v12;
  v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  v15 = sub_10001A9A8(&qword_101111AE0);
  OS_dispatch_queue.sync<A>(execute:)(sub_10087FB04, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8))(v7, v4);
}

uint64_t sub_10088A4DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v17[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9FD8 != -1)
    swift_once(&qword_1010E9FD8, sub_1008AB7A8);
  v8 = sub_10001A9E8(v4, (uint64_t)qword_1011B7878);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x8000000100ED68C0;
  v9._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v9);
  v18 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  v10 = sub_10001A9A8(&qword_10110AB40);
  v11 = String.init<A>(describing:)(&v18, v10);
  v13 = v12;
  v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  v15 = sub_10001A9A8(&qword_101111B20);
  OS_dispatch_queue.sync<A>(execute:)(sub_10087FB90, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8))(v7, v4);
}

_QWORD *sub_10088A680()
{
  return sub_100019424(&qword_1010E9FD8, (uint64_t)qword_1011B7878, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084D088, (uint64_t)sub_1008AB7A8);
}

_QWORD *sub_10088A6A4()
{
  return sub_100019424(&qword_1010EA3B8, (uint64_t)qword_1011B7EB0, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C648, (uint64_t)sub_100BE94A8);
}

_QWORD *sub_10088A6C8()
{
  return sub_100019424(&qword_1010E9C00, (uint64_t)qword_1011B6F00, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C600, (uint64_t)sub_10043C1BC);
}

_QWORD *sub_10088A6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DirectorySequence(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  v40 = objc_autoreleasePoolPush();
  if (qword_1010E9928 != -1)
    swift_once(&qword_1010E9928, sub_1000A5B90);
  v15 = sub_10001A9E8(v8, (uint64_t)qword_1011B6718);
  v16 = UUID.uuidString.getter(v15);
  URL.appendingPathComponent(_:isDirectory:)(v16, v17, 1);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v40);
  v41 = _swiftEmptyArrayStorage;
  v42 = _swiftEmptyArrayStorage;
  v18 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v40 = v14;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v14, 0, 0);

  DirectorySequence.next()(v19);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v20(v4, 1, v8) != 1)
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    do
    {
      v21(v12, v4, v8);
      v22 = objc_autoreleasePoolPush();
      sub_10084C450((uint64_t)v12, v1, (uint64_t *)&v42, (unint64_t *)&v41);
      objc_autoreleasePoolPop(v22);
      v23 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      DirectorySequence.next()(v23);
    }
    while (v20(v4, 1, v8) != 1);
  }
  v24 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v39);
  v25 = static os_log_type_t.debug.getter(v24);
  v26 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v27 = (void *)static OS_os_log.default.getter(v26);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v29 = swift_allocObject(v28, 112, 7);
  *(_OWORD *)(v29 + 16) = xmmword_100E22B10;
  v30 = v42;
  v31 = v42[2];
  *(_QWORD *)(v29 + 56) = &type metadata for Int;
  *(_QWORD *)(v29 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v29 + 32) = v31;
  v32 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v33 = v40;
  v34 = dispatch thunk of CustomStringConvertible.description.getter(v8, v32);
  v36 = v35;
  *(_QWORD *)(v29 + 96) = &type metadata for String;
  *(_QWORD *)(v29 + 104) = sub_10001AA00();
  *(_QWORD *)(v29 + 72) = v34;
  *(_QWORD *)(v29 + 80) = v36;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v27, "Found %i records at %@", 22, 2, v29);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v33, v8);
  return v30;
}

_QWORD *sub_10088AA6C(uint64_t a1)
{
  return sub_10088B3F4(a1, &qword_1010EA060, (uint64_t)qword_1011B7970, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C570, (uint64_t)sub_100967AE8);
}

_QWORD *sub_10088AA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DirectorySequence(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  v40 = objc_autoreleasePoolPush();
  if (qword_1010EA060 != -1)
    swift_once(&qword_1010EA060, sub_100967AE8);
  v15 = sub_10001A9E8(v8, (uint64_t)qword_1011B7970);
  v16 = UUID.uuidString.getter(v15);
  URL.appendingPathComponent(_:)(v16, v17);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v40);
  v41 = _swiftEmptyArrayStorage;
  v42 = _swiftEmptyArrayStorage;
  v18 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v40 = v14;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v14, 0, 0);

  DirectorySequence.next()(v19);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v20(v4, 1, v8) != 1)
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    do
    {
      v21(v12, v4, v8);
      v22 = objc_autoreleasePoolPush();
      sub_10084C570((uint64_t)v12, v1, (uint64_t *)&v42, (unint64_t *)&v41);
      objc_autoreleasePoolPop(v22);
      v23 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      DirectorySequence.next()(v23);
    }
    while (v20(v4, 1, v8) != 1);
  }
  v24 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v39);
  v25 = static os_log_type_t.debug.getter(v24);
  v26 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v27 = (void *)static OS_os_log.default.getter(v26);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v29 = swift_allocObject(v28, 112, 7);
  *(_OWORD *)(v29 + 16) = xmmword_100E22B10;
  v30 = v42;
  v31 = v42[2];
  *(_QWORD *)(v29 + 56) = &type metadata for Int;
  *(_QWORD *)(v29 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v29 + 32) = v31;
  v32 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v33 = v40;
  v34 = dispatch thunk of CustomStringConvertible.description.getter(v8, v32);
  v36 = v35;
  *(_QWORD *)(v29 + 96) = &type metadata for String;
  *(_QWORD *)(v29 + 104) = sub_10001AA00();
  *(_QWORD *)(v29 + 72) = v34;
  *(_QWORD *)(v29 + 80) = v36;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v27, "Found %i records at %@", 22, 2, v29);

  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v33, v8);
  return v30;
}

_QWORD *sub_10088AE0C(uint64_t a1)
{
  return sub_100889FA8(a1, &qword_1010EA110, (uint64_t)qword_1011B7AF8, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084D160, (uint64_t)sub_100A00E00);
}

_QWORD *sub_10088AE30()
{
  return sub_100019424(&qword_1010EA110, (uint64_t)qword_1011B7AF8, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084D160, (uint64_t)sub_100A00E00);
}

_QWORD *sub_10088AE54(uint64_t a1)
{
  return sub_100889FA8(a1, &qword_1010E9B78, (uint64_t)qword_1011B6DB0, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C528, (uint64_t)sub_10033DA58);
}

_QWORD *sub_10088AE78()
{
  return sub_100019424(&qword_1010E9B78, (uint64_t)qword_1011B6DB0, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C528, (uint64_t)sub_10033DA58);
}

_QWORD *sub_10088AE9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t found;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int64_t v49;
  _QWORD *v50;
  char *v51;
  int64_t v52;
  uint64_t v53;
  char *v54;

  v47 = a2;
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v4 = *(_QWORD *)(found - 8);
  __chkstk_darwin(found);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110B490);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v54 = (char *)&v45 - v14;
  if (qword_1010E9B78 == -1)
    goto LABEL_2;
LABEL_39:
  swift_once(&qword_1010E9B78, sub_10033DA58);
LABEL_2:
  v15 = type metadata accessor for URL(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B6DB0);
  result = sub_10084AAAC(v16);
  v52 = 0;
  v18 = result[8];
  v48 = result + 8;
  v19 = 1 << *((_BYTE *)result + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v49 = (unint64_t)(v19 + 63) >> 6;
  v50 = result;
  v46 = v49 - 1;
  v53 = v4;
  v51 = v9;
  v9 = v54;
  if ((v20 & v18) != 0)
  {
LABEL_5:
    v22 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    v23 = v22 | (v52 << 6);
LABEL_6:
    v24 = v50;
    v25 = v50[6];
    v26 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v13, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v23, v26);
    v27 = v24[7];
    v28 = sub_10001A9A8(&qword_10110B498);
    v29 = *(_QWORD *)(v27 + 8 * v23);
    *(_QWORD *)&v13[*(int *)(v28 + 48)] = v29;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v13, 0, 1, v28);
    swift_bridgeObjectRetain(v29);
    v4 = v53;
    v9 = v54;
    goto LABEL_25;
  }
  while (1)
  {
    v30 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v30 < v49)
    {
      v31 = v48[v30];
      if (v31)
        goto LABEL_10;
      v32 = v52 + 2;
      ++v52;
      if (v30 + 1 < v49)
      {
        v31 = v48[v32];
        if (v31)
          goto LABEL_13;
        v52 = v30 + 1;
        if (v30 + 2 < v49)
        {
          v31 = v48[v30 + 2];
          if (v31)
          {
            v30 += 2;
            goto LABEL_10;
          }
          v32 = v30 + 3;
          v52 = v30 + 2;
          if (v30 + 3 < v49)
            break;
        }
      }
    }
LABEL_24:
    v33 = sub_10001A9A8(&qword_10110B498);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v13, 1, 1, v33);
    v21 = 0;
LABEL_25:
    sub_100005CF0((uint64_t)v13, (uint64_t)v9, &qword_10110B490);
    v34 = sub_10001A9A8(&qword_10110B498);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v9, 1, v34) == 1)
    {
      swift_release();
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v47, 1, 1, found);
    }
    v35 = v13;
    v36 = *(_QWORD *)&v9[*(int *)(v34 + 48)];
    v37 = *(_QWORD *)(v36 + 16);
    if (v37)
    {
      v38 = v36 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      swift_bridgeObjectRetain(v36);
      v39 = *(_QWORD *)(v4 + 72);
      while (1)
      {
        sub_10005972C(v38, (uint64_t)v6, type metadata accessor for NotifyWhenFoundRecord);
        if ((static UUID.== infix(_:_:)(&v6[*(int *)(found + 20)], a1) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v6, type metadata accessor for NotifyWhenFoundRecord);
        v38 += v39;
        if (!--v37)
        {
          swift_bridgeObjectRelease();
          v4 = v53;
          goto LABEL_31;
        }
      }
      swift_bridgeObjectRelease();
      v41 = (uint64_t)v51;
      sub_1000126EC((uint64_t)v6, (uint64_t)v51, type metadata accessor for NotifyWhenFoundRecord);
      v4 = v53;
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
      v40(v41, 0, 1, found);
    }
    else
    {
LABEL_31:
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v41 = (uint64_t)v51;
      v40((uint64_t)v51, 1, 1, found);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v41, 1, found) != 1)
    {
      swift_release();
      v43 = v47;
      sub_1000126EC(v41, v47, type metadata accessor for NotifyWhenFoundRecord);
      v40(v43, 0, 1, found);
      v44 = type metadata accessor for UUID(0);
      return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v54, v44);
    }
    sub_100004048(v41, &qword_1010F33A8);
    v42 = type metadata accessor for UUID(0);
    v9 = v54;
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v54, v42);
    v13 = v35;
    if (v21)
      goto LABEL_5;
  }
  v31 = v48[v32];
  if (v31)
  {
LABEL_13:
    v30 = v32;
LABEL_10:
    v21 = (v31 - 1) & v31;
    v23 = __clz(__rbit64(v31)) + (v30 << 6);
    v52 = v30;
    goto LABEL_6;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v49)
    {
      v52 = v46;
      goto LABEL_24;
    }
    v31 = v48[v30];
    ++v32;
    if (v31)
      goto LABEL_10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10088B3D0(uint64_t a1)
{
  return sub_10088B3F4(a1, &qword_1010EA600, (uint64_t)qword_1011B84D0, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C3C0, (uint64_t)sub_100D83308);
}

_QWORD *sub_10088B3F4(uint64_t a1, _QWORD *a2, uint64_t a3, void (*a4)(char *, uint64_t, _QWORD **, _QWORD **), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  void (*v28)(char *, uint64_t, _QWORD **, _QWORD **);
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, _QWORD **, _QWORD **);
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;

  v53 = a5;
  v51 = a4;
  v7 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DirectorySequence(0);
  v48 = *(_QWORD *)(v10 - 8);
  v49 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v47 - v18;
  v20 = objc_autoreleasePoolPush();
  if (*a2 != -1)
    swift_once(a2, v53);
  v21 = sub_10001A9E8(v13, a3);
  v22 = UUID.uuidString.getter(v21);
  URL.appendingPathComponent(_:)(v22, v23);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v20);
  v54 = _swiftEmptyArrayStorage;
  v55 = _swiftEmptyArrayStorage;
  v24 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v52 = v19;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v19, 0, 0);

  DirectorySequence.next()(v25);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v27 = v26(v9, 1, v13);
  v53 = v14;
  v29 = v50;
  v28 = v51;
  if (v27 != 1)
  {
    v30 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
    do
    {
      v30(v17, v9, v13);
      v31 = objc_autoreleasePoolPush();
      v28(v17, v29, &v55, &v54);
      objc_autoreleasePoolPop(v31);
      v32 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v17, v13);
      DirectorySequence.next()(v32);
    }
    while (v26(v9, 1, v13) != 1);
  }
  v33 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v12, v49);
  v34 = static os_log_type_t.debug.getter(v33);
  v35 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v36 = (void *)static OS_os_log.default.getter(v35);
  v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v38 = swift_allocObject(v37, 112, 7);
  *(_OWORD *)(v38 + 16) = xmmword_100E22B10;
  v39 = v55;
  v40 = v55[2];
  *(_QWORD *)(v38 + 56) = &type metadata for Int;
  *(_QWORD *)(v38 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v38 + 32) = v40;
  v41 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v42 = v52;
  v43 = dispatch thunk of CustomStringConvertible.description.getter(v13, v41);
  v45 = v44;
  *(_QWORD *)(v38 + 96) = &type metadata for String;
  *(_QWORD *)(v38 + 104) = sub_10001AA00();
  *(_QWORD *)(v38 + 72) = v43;
  *(_QWORD *)(v38 + 80) = v45;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v36, "Found %i records at %@", 22, 2, v38);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v13);
  return v39;
}

uint64_t sub_10088B780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[5] = a1;
  v4[2] = a2;
  v4[3] = a3;
  return OS_dispatch_queue.sync<A>(execute:)(sub_1008945E4, v4, (char *)&type metadata for () + 8);
}

void sub_10088B7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  id v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void **v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  NSURL *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t inited;
  NSString *v69;
  NSString *v70;
  unint64_t v71;
  id v72;
  Class v73;
  uint64_t v74;
  NSString v75;
  id v76;
  id v77;
  char *v78;
  uint64_t v79;
  char *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, _QWORD *);
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  Class isa;
  void *v112;
  id v113[5];
  char v114[40];

  v109 = a1;
  v98 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v97 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URLResourceValues(0);
  v106 = *(_QWORD *)(v8 - 8);
  v107 = v8;
  __chkstk_darwin(v8);
  v108 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v104 = type metadata accessor for UUID(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for URL(0);
  v99 = *(_QWORD **)(v110 - 8);
  v11 = __chkstk_darwin(v110);
  v101 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v105 = (char *)&v92 - v14;
  __chkstk_darwin(v13);
  v100 = (char *)&v92 - v15;
  v16 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v92 - v22;
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v20, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v16);
  v24 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v113, v16, v24);
  dispatch thunk of RawRepresentable.rawValue.getter(&v112, v16, v24);
  v26 = v112;
  v25 = v113[0];
  v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v20, v16);
  v28 = ((uint64_t (*)(char *, uint64_t))v27)(v23, v16);
  if (v25 == v26)
  {
    v29 = static os_log_type_t.default.getter(v28);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v30 = sub_10008806C();
    v31 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v30, 0, 0);
    *v32 = 0;
    swift_willThrow(v31);
  }
  else
  {
    v33 = isa;
    sub_100894600(a2, a3, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16));
    if (!v33)
    {
      v36 = v34;
      v37 = v35;
      v38 = sub_100C54388(v34, v35, 0);
      v40 = v39;
      v95 = v36;
      v96 = v37;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v38, v40);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      v41 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
      v42 = v100;
      v41(a3, a4);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v42, 0);
      v43 = (void (*)(char *, uint64_t))v99[1];
      v43(v42, v110);
      v44 = v102;
      (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
      v94 = a2;
      v99 = (_QWORD *)a3;
      v93 = (void *)a4;
      v41(a3, a4);
      v45 = objc_autoreleasePoolPush();
      v46 = UUID.uuidString.getter(v45);
      v47 = v101;
      URL.appendingPathComponent(_:)(v46, v48);
      swift_bridgeObjectRelease();
      v49 = v105;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v50 = v47;
      v51 = v110;
      v43(v50, v110);
      objc_autoreleasePoolPop(v45);
      v101 = (char *)v43;
      v43(v42, v51);
      v52 = (*(uint64_t (**)(char *, _QWORD))(v103 + 8))(v44, v104);
      URLResourceValues.init()(v52);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v53 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v54);
      v56 = v55;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v55, 1);

      objc_autoreleasePoolPop(v53);
      v58 = static os_log_type_t.default.getter(v57);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v59 = qword_1011B7D38;
      v60 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v61 = swift_allocObject(v60, 72, 7);
      v104 = xmmword_100E22B00;
      *(_OWORD *)(v61 + 16) = xmmword_100E22B00;
      v62 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v51, v62);
      v65 = v64;
      *(_QWORD *)(v61 + 56) = &type metadata for String;
      v66 = sub_10001AA00();
      *(_QWORD *)(v61 + 64) = v66;
      *(_QWORD *)(v61 + 32) = v63;
      *(_QWORD *)(v61 + 40) = v65;
      os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v59, "Writing to file: %@", 19, 2, v61);
      swift_bridgeObjectRelease();
      v67 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v67, v114);
      *(_OWORD *)(inited + 16) = v104;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v69 = NSFileProtectionKey;
      v70 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v71 = sub_1006B9234(inited);
      v72 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v71);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v73 = Dictionary._bridgeToObjectiveC()().super.isa;
      v74 = swift_bridgeObjectRelease();
      URL.path.getter(v74);
      v75 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v113[0] = 0;
      LODWORD(v65) = objc_msgSend(v72, "setAttributes:ofItemAtPath:error:", v73, v75, v113);

      v76 = v113[0];
      if ((_DWORD)v65)
      {
        v77 = v113[0];
        v78 = v108;
        v80 = v49;
        v79 = URL.setResourceValues(_:)(v108);
        LODWORD(v102) = static os_log_type_t.default.getter(v79);
        v103 = qword_1011B7D38;
        v83 = swift_allocObject(v60, 72, 7);
        *(_OWORD *)(v83 + 16) = v104;
        v84 = *(void (**)(char *, uint64_t, _QWORD *))(v98 + 16);
        v85 = v97;
        v86 = v94;
        v87 = v99;
        v84(v97, v94, v99);
        v88 = String.init<A>(describing:)(v85, v87);
        *(_QWORD *)(v83 + 56) = &type metadata for String;
        *(_QWORD *)(v83 + 64) = v66;
        *(_QWORD *)(v83 + 32) = v88;
        *(_QWORD *)(v83 + 40) = v89;
        os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v103, "Publishing record changed: %@", 29, 2, v83);
        swift_bridgeObjectRelease();
        v113[3] = v87;
        v113[4] = v93;
        v90 = (char *)sub_100018F08(v113);
        v84(v90, v86, v87);
        PassthroughSubject.send(_:)(v113);

        sub_10001BC14(v95, v96);
        (*(void (**)(char *, uint64_t))(v106 + 8))(v78, v107);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
        v91 = v80;
      }
      else
      {
        v81 = v113[0];
        _convertNSErrorToError(_:)(v76);

        swift_willThrow(v82);
        sub_10001BC14(v95, v96);
        (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v107);
        v91 = v49;
      }
      ((void (*)(char *, uint64_t))v101)(v91, v110);
    }
  }
}

uint64_t sub_10088C128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v9 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = PropertyListEncoder.init()();
  v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, a2, a3);
  v13 = v12;
  result = swift_release(v10);
  if (!v4)
  {
    *a4 = v11;
    a4[1] = v13;
  }
  return result;
}

void sub_10088C1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v9;

  v9 = objc_autoreleasePoolPush();
  sub_10088C254(v4, a1, a2, a3, a4);
  objc_autoreleasePoolPop(v9);
}

uint64_t sub_10088C254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a4, a2, a3, a4, a5);
  if (v5)
  {
    v8 = static os_log_type_t.error.getter(result);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v9 = qword_1011B7D38;
    v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v11 = swift_allocObject(v10, 112, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
    v21 = a4;
    MetatypeMetadata = swift_getMetatypeMetadata(a4);
    v13 = String.init<A>(describing:)(&v21, MetatypeMetadata);
    v15 = v14;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    v16 = sub_10001AA00();
    *(_QWORD *)(v11 + 64) = v16;
    *(_QWORD *)(v11 + 32) = v13;
    *(_QWORD *)(v11 + 40) = v15;
    v21 = v5;
    swift_errorRetain(v5);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v18 = String.init<A>(describing:)(&v21, v17);
    *(_QWORD *)(v11 + 96) = &type metadata for String;
    *(_QWORD *)(v11 + 104) = v16;
    *(_QWORD *)(v11 + 72) = v18;
    *(_QWORD *)(v11 + 80) = v19;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Error decoding %@: %@", 21, 2, v11);
    v20 = swift_bridgeObjectRelease();
    return swift_willThrow(v20);
  }
  return result;
}

uint64_t sub_10088C3AC(uint64_t a1)
{
  uint64_t v1;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 16));
  sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
  static NSFileManager.removeDirectory(url:)(a1);
  return 0;
}

void sub_10088C538(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B77E8);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    v7 = _convertErrorToNSError(_:)(a1);
    v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error purging storage %@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);

  }
}

void sub_10088C6D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];

  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B77E8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Purging all cache storage", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(a1 + 24);
  type metadata accessor for Transaction(0);
  v8 = swift_allocObject(&unk_1010979F0, 24, 7);
  v9 = swift_weakInit(v8 + 16, v7);
  __chkstk_darwin(v9);
  v10[2] = v7;
  v10[3] = v8;
  static Transaction.named<A>(_:with:)("Cryptor.destroyKey", 18, 2, sub_1008945CC, v10, &type metadata for () + 1);
  swift_release();
  sub_10088C87C();
}

void sub_10088C87C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v48 - v7;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v1 + 16);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    if (qword_1010E9F80 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9F80, sub_1007FA778);
LABEL_3:
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B77E8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Purging local cache storage", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  if (qword_1010EA600 != -1)
    swift_once(&qword_1010EA600, sub_100D83308);
  v20 = sub_10001A9E8(v2, (uint64_t)qword_1011B84D0);
  v21 = sub_10088C3AC(v20);
  if (qword_1010EA1B8 != -1)
    swift_once(&qword_1010EA1B8, sub_100AFC4C0);
  v22 = sub_10001A9E8(v2, (uint64_t)qword_1011B7C40);
  v23 = sub_10088C3AC(v22);
  swift_errorRelease(v21);
  if (qword_1010E99F8 != -1)
    swift_once(&qword_1010E99F8, sub_1001D7F04);
  v24 = sub_10001A9E8(v2, (uint64_t)qword_1011B6A48);
  v25 = sub_10088C3AC(v24);
  swift_errorRelease(v23);
  if (qword_1010E9D40 != -1)
    swift_once(&qword_1010E9D40, sub_100601994);
  v26 = sub_10001A9E8(v2, (uint64_t)qword_1011B7200);
  v27 = sub_10088C3AC(v26);
  swift_errorRelease(v25);
  if (qword_1010E9CF8 != -1)
    swift_once(&qword_1010E9CF8, sub_10058CBB4);
  v28 = sub_10001A9E8(v2, (uint64_t)qword_1011B7168);
  v29 = sub_10088C3AC(v28);
  swift_errorRelease(v27);
  sub_100B5D484((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012, 0x8000000100EC9A60, 1);
  v30 = *(void (**)(char *, uint64_t))(v3 + 8);
  v30(v6, v2);
  v31 = sub_10088C3AC((uint64_t)v8);
  swift_errorRelease(v29);
  v30(v8, v2);
  if (qword_1010EA3B8 != -1)
    swift_once(&qword_1010EA3B8, sub_100BE94A8);
  v32 = sub_10001A9E8(v2, (uint64_t)qword_1011B7EB0);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v33(v8, v32, v2);
  v34 = sub_10088C3AC((uint64_t)v8);
  swift_errorRelease(v31);
  v30(v8, v2);
  if (qword_1010E9FD8 != -1)
    swift_once(&qword_1010E9FD8, sub_1008AB7A8);
  v35 = sub_10001A9E8(v2, (uint64_t)qword_1011B7878);
  v36 = sub_10088C3AC(v35);
  swift_errorRelease(v34);
  if (qword_1010E9C00 != -1)
    swift_once(&qword_1010E9C00, sub_10043C1BC);
  v37 = sub_10001A9E8(v2, (uint64_t)qword_1011B6F00);
  v38 = sub_10088C3AC(v37);
  swift_errorRelease(v36);
  if (qword_1010E9C40 != -1)
    swift_once(&qword_1010E9C40, sub_1004EF95C);
  v39 = sub_10001A9E8(v2, (uint64_t)qword_1011B6F90);
  v33(v8, v39, v2);
  v40 = sub_10088C3AC((uint64_t)v8);
  swift_errorRelease(v38);
  v30(v8, v2);
  v41 = swift_errorRetain(v40);
  if (qword_1010E9D08 != -1)
    v41 = swift_once(&qword_1010E9D08, sub_10059A6E0);
  v42 = static os_log_type_t.default.getter(v41);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_1011B7DB0, "ConfigurationCoordinator resetting by overriding saved config on disk.", 70, 2, _swiftEmptyArrayStorage);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1007B7DEC);
  v43 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v44 = objc_msgSend(v43, "dictionaryRepresentation");
  v45 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v44, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v46 = v43;
  sub_100893908(v45, v46);
  swift_bridgeObjectRelease();

  if (v40)
  {
    swift_willThrow(v47);
    swift_errorRelease(v40);
  }
}

uint64_t sub_10088CEFC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v4 = type metadata accessor for DispatchTime(0);
  v22 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = *(NSObject **)(a1 + 16);
  v11 = swift_allocObject(&unk_101097978, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a1;
  v12 = swift_allocObject(&unk_1010979A0, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100894590;
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = sub_10001D850;
  v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_1010979B8;
  v13 = _Block_copy(aBlock);
  v14 = v24;
  a2;
  swift_retain(a1);
  swift_retain(v12);
  swift_release(v14);
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v12, "", 113, 738, 35, 1);
  v15 = swift_release(v12);
  if ((a1 & 1) != 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1010EA260, sub_100B5DA30);
    goto LABEL_7;
  }
  static DispatchTime.now()(v15);
  + infix(_:_:)(v7, 5.0);
  v16 = *(void (**)(char *, uint64_t))(v22 + 8);
  v16(v7, v4);
  v17 = OS_dispatch_group.wait(timeout:)(v9);
  v18 = ((uint64_t (*)(char *, uint64_t))v16)(v9, v4);
  if ((v17 & 1) != 0)
  {
    v19 = static os_log_type_t.error.getter(v18);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v18 = os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1011B7D38, "Timed out purging CloudKitData", 30, 2, _swiftEmptyArrayStorage);
  }
  v7 = (char *)static os_log_type_t.default.getter(v18);
  if (qword_1010EA260 != -1)
    goto LABEL_9;
LABEL_7:
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7D40, "Done purging local CloudKit state", 33, 2, _swiftEmptyArrayStorage);
  return swift_release(v11);
}

uint64_t sub_10088D1A4(NSObject *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  uint64_t v101;
  dispatch_group_t v102;
  uint64_t (*v103)(char *, uint64_t);
  uint64_t v104;

  v102 = a1;
  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v101 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v101 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v101 - v13;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7D38, "Purging cloud backed storage", 28, 2, _swiftEmptyArrayStorage);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v11);
  URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xE800000000000000, 1);
  v103 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  v16 = v103(v11, v1);
  v17 = static os_log_type_t.default.getter(v16);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D40, "Purging local CloudKit state", 28, 2, _swiftEmptyArrayStorage);
  v18 = sub_10088C3AC((uint64_t)v14);
  if (qword_1010EA0D8 != -1)
    swift_once(&qword_1010EA0D8, sub_1009A3098);
  v19 = sub_10001A9E8(v1, (uint64_t)qword_1011B7AA8);
  v20 = sub_10088C3AC(v19);
  if (v20)
  {
    v21 = v20;
    swift_errorRelease(v18);
    v18 = v21;
  }
  if (qword_1010EA5B8 != -1)
    swift_once(&qword_1010EA5B8, sub_100D3AD18);
  v22 = sub_10001A9E8(v1, (uint64_t)qword_1011B8448);
  v23 = sub_10088C3AC(v22);
  if (v23)
  {
    v24 = v23;
    swift_errorRelease(v18);
    v18 = v24;
  }
  if (qword_1010EA110 != -1)
    swift_once(&qword_1010EA110, sub_100A00E00);
  v25 = sub_10001A9E8(v1, (uint64_t)qword_1011B7AF8);
  v26 = sub_10088C3AC(v25);
  if (v26)
  {
    v27 = v26;
    swift_errorRelease(v18);
    v18 = v27;
  }
  if (qword_1010E9928 != -1)
    swift_once(&qword_1010E9928, sub_1000A5B90);
  v28 = sub_10001A9E8(v1, (uint64_t)qword_1011B6718);
  v29 = sub_10088C3AC(v28);
  if (v29)
  {
    v30 = v29;
    swift_errorRelease(v18);
    v18 = v30;
  }
  if (qword_1010EA060 != -1)
    swift_once(&qword_1010EA060, sub_100967AE8);
  v31 = sub_10001A9E8(v1, (uint64_t)qword_1011B7970);
  v32 = sub_10088C3AC(v31);
  if (v32)
  {
    v33 = v32;
    swift_errorRelease(v18);
    v18 = v33;
  }
  if (qword_1010E9CF8 != -1)
    swift_once(&qword_1010E9CF8, sub_10058CBB4);
  v34 = sub_10001A9E8(v1, (uint64_t)qword_1011B7168);
  v35 = sub_10088C3AC(v34);
  if (v35)
  {
    v36 = v35;
    swift_errorRelease(v18);
    v18 = v36;
  }
  if (qword_1010E9B78 != -1)
    swift_once(&qword_1010E9B78, sub_10033DA58);
  v37 = sub_10001A9E8(v1, (uint64_t)qword_1011B6DB0);
  v38 = sub_10088C3AC(v37);
  if (v38)
  {
    v39 = v38;
    swift_errorRelease(v18);
    v18 = v39;
  }
  if (qword_1010E9B90 != -1)
    swift_once(&qword_1010E9B90, sub_10036E07C);
  v40 = sub_10001A9E8(v1, (uint64_t)qword_1011B6DE0);
  v41 = sub_10088C3AC(v40);
  if (v41)
  {
    v42 = v41;
    swift_errorRelease(v18);
    v18 = v42;
  }
  sub_1007EC9B8((uint64_t)v11);
  URL.appendingPathComponent(_:isDirectory:)(0x654272657473614DLL, 0xED0000736E6F6361, 1);
  v103(v11, v1);
  v43 = sub_10088C3AC((uint64_t)v8);
  if (v43)
  {
    v44 = v43;
    swift_errorRelease(v18);
    v18 = v44;
  }
  v45 = v14;
  sub_1007EC9B8((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)(0x654B646572616853, 0xEA00000000007379, 1);
  v46 = (void (*)(char *, uint64_t))v103;
  v103(v5, v1);
  v47 = sub_10088C3AC((uint64_t)v11);
  v46(v11, v1);
  v48 = v8;
  if (v47)
  {
    swift_errorRelease(v18);
    v18 = v47;
  }
  sub_1007EC9B8((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000018, 0x8000000100EE9460, 1);
  v49 = (void (*)(char *, uint64_t))v103;
  v103(v5, v1);
  v50 = sub_10088C3AC((uint64_t)v11);
  v49(v11, v1);
  if (v50)
  {
    swift_errorRelease(v18);
    v18 = v50;
  }
  sub_1007EC9B8((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100EE9480, 1);
  v51 = (void (*)(char *, uint64_t))v103;
  v103(v5, v1);
  v52 = sub_10088C3AC((uint64_t)v11);
  v51(v11, v1);
  v53 = v48;
  if (v52)
  {
    swift_errorRelease(v18);
    v18 = v52;
  }
  v54 = v45;
  sub_1007EC9B8((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)(0x7369747265766441, 0xED0000746E656D65, 1);
  v55 = (void (*)(char *, uint64_t))v103;
  v103(v5, v1);
  v56 = sub_10088C3AC((uint64_t)v11);
  v55(v11, v1);
  if (v56)
  {
    swift_errorRelease(v18);
    v18 = v56;
  }
  if (qword_1010EA5E8 != -1)
    swift_once(&qword_1010EA5E8, sub_100D784F0);
  v57 = sub_10001A9E8(v1, (uint64_t)qword_1011B8498);
  v58 = sub_10088C3AC(v57);
  if (v58)
  {
    v59 = v58;
    swift_errorRelease(v18);
    v18 = v59;
  }
  if (qword_1010EA1C0 != -1)
    swift_once(&qword_1010EA1C0, sub_100B00710);
  v60 = sub_10001A9E8(v1, (uint64_t)qword_1011B7C58);
  v61 = sub_10088C3AC(v60);
  if (v61)
  {
    v62 = v61;
    swift_errorRelease(v18);
    v18 = v62;
  }
  if (qword_1010E9920 != -1)
    swift_once(&qword_1010E9920, sub_1000A21BC);
  v63 = sub_10001A9E8(v1, (uint64_t)qword_1011B6700);
  v64 = sub_10088C3AC(v63);
  if (v64)
  {
    v65 = v64;
    swift_errorRelease(v18);
    v18 = v65;
  }
  if (qword_1010E98E0 != -1)
    swift_once(&qword_1010E98E0, sub_100035574);
  v66 = sub_10001A9E8(v1, (uint64_t)qword_1011B6680);
  v67 = sub_10088C3AC(v66);
  if (v67)
  {
    v68 = v67;
    swift_errorRelease(v18);
    v18 = v68;
  }
  if (qword_1010EA158 != -1)
    swift_once(&qword_1010EA158, sub_100AA9AFC);
  v69 = sub_10001A9E8(v1, (uint64_t)qword_1011B7B78);
  v70 = sub_10088C3AC(v69);
  if (v70)
  {
    v71 = v70;
    swift_errorRelease(v18);
    v18 = v71;
  }
  if (qword_1010EA490 != -1)
    swift_once(&qword_1010EA490, sub_100C8FD48);
  v72 = sub_10001A9E8(v1, (uint64_t)qword_1011B8038);
  v73 = sub_10088C3AC(v72);
  if (v73)
  {
    v74 = v73;
    swift_errorRelease(v18);
    v18 = v74;
  }
  if (qword_1010E9A10 != -1)
    swift_once(&qword_1010E9A10, sub_1001EB610);
  v75 = sub_10001A9E8(v1, (uint64_t)qword_1011B6A90);
  v76 = sub_10088C3AC(v75);
  if (v76)
  {
    v77 = v76;
    swift_errorRelease(v18);
    v18 = v77;
  }
  if (qword_1010EA170 != -1)
    swift_once(&qword_1010EA170, sub_100AB843C);
  v78 = sub_10001A9E8(v1, (uint64_t)qword_1011B7BC0);
  v79 = sub_10088C3AC(v78);
  if (v79)
  {
    v80 = v79;
    swift_errorRelease(v18);
    v18 = v80;
  }
  if (qword_1010EA118 != -1)
    swift_once(&qword_1010EA118, sub_100A2ECA4);
  v81 = sub_10001A9E8(v1, (uint64_t)qword_1011B7B10);
  v82 = sub_10088C3AC(v81);
  if (v82)
  {
    v83 = v82;
    swift_errorRelease(v18);
    v18 = v83;
  }
  if (qword_1010E9A98 != -1)
    swift_once(&qword_1010E9A98, sub_1001FFA50);
  v84 = sub_10001A9E8(v1, (uint64_t)qword_1011B6C00);
  v85 = sub_10088C3AC(v84);
  if (v85)
  {
    v86 = v85;
    swift_errorRelease(v18);
    v18 = v86;
  }
  if (qword_1010EA0F0 != -1)
    swift_once(&qword_1010EA0F0, sub_1009AC81C);
  v87 = sub_10001A9E8(v1, (uint64_t)qword_1011B7AC8);
  v88 = sub_10088C3AC(v87);
  if (v88)
  {
    v89 = v88;
    swift_errorRelease(v18);
    v18 = v89;
LABEL_93:
    v90 = swift_errorRetain(v89);
    v91 = static os_log_type_t.default.getter(v90);
    v92 = qword_1011B7D40;
    v93 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v94 = swift_allocObject(v93, 72, 7);
    *(_OWORD *)(v94 + 16) = xmmword_100E22B00;
    v104 = v18;
    swift_errorRetain(v18);
    v95 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v96 = String.init<A>(describing:)(&v104, v95);
    v98 = v97;
    *(_QWORD *)(v94 + 56) = &type metadata for String;
    *(_QWORD *)(v94 + 64) = sub_10001AA00();
    *(_QWORD *)(v94 + 32) = v96;
    *(_QWORD *)(v94 + 40) = v98;
    os_log(_:dso:log:_:_:)(v91, &_mh_execute_header, v92, "Error deleting local state: %{public}@", 38, 2, v94);
    swift_bridgeObjectRelease(v94);
    swift_errorRelease(v18);
    goto LABEL_94;
  }
  if (v18)
  {
    swift_errorRetain(v18);
    v89 = 0;
    goto LABEL_93;
  }
LABEL_94:
  v99 = (void (*)(char *, uint64_t))v103;
  v103(v53, v1);
  v99(v54, v1);
  dispatch_group_leave(v102);
  return swift_errorRelease(v18);
}

uint64_t sub_10088DD18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t sub_10088DD64()
{
  uint64_t v0;

  sub_10088DD18();
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for BeaconStoreFileManager()
{
  return objc_opt_self(_TtC12searchpartyd22BeaconStoreFileManager);
}

Swift::Int sub_10088DDA4(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  Swift::Int v32;
  __int128 *v33;
  uint64_t v34;
  Swift::Int v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  Swift::Int v112;
  Swift::Int v113;
  uint64_t v114;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v93 = 0;
      v94 = *a1;
      v95 = 1;
      while (1)
      {
        v96 = *(_QWORD *)(v94 + 32 * v95 + 24);
        v97 = v93;
        do
        {
          v98 = v94 + v97;
          if (*(_QWORD *)(v94 + v97 + 24) >= v96)
            break;
          if (!v94)
            goto LABEL_142;
          v99 = v94 + v97;
          v100 = *(_QWORD *)(v94 + v97 + 48);
          v101 = *(_OWORD *)(v98 + 32);
          v102 = *(_OWORD *)(v98 + 16);
          *(_OWORD *)(v98 + 32) = *(_OWORD *)v98;
          *(_OWORD *)(v98 + 48) = v102;
          *(_OWORD *)v99 = v101;
          *(_QWORD *)(v99 + 16) = v100;
          *(_QWORD *)(v98 + 24) = v96;
          v97 -= 32;
        }
        while (v97 != -32);
        ++v95;
        v93 += 32;
        if (v95 == v3)
          return result;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v109 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v111 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_10001A9A8(&qword_1010ED198);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v111 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v110 = *a1 + 88;
  v13 = (char *)_swiftEmptyArrayStorage;
  v112 = v6;
  v113 = v3;
  v114 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(_QWORD *)(v12 + 32 * v11 + 24);
      v17 = *(_QWORD *)(v12 + 32 * v15 + 24);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (uint64_t *)(v110 + 32 * v15);
        v19 = v16;
        while (1)
        {
          v21 = *v18;
          v18 += 4;
          v20 = v21;
          if (v17 < v16 == v19 >= v21)
            break;
          ++v11;
          v19 = v20;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v17 < v16)
      {
        if (v11 < v15)
          goto LABEL_139;
        if (v15 < v11)
        {
          v22 = 32 * v11;
          v23 = 32 * v15;
          v24 = v11;
          v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12)
                goto LABEL_145;
              v26 = (_OWORD *)(v12 + v23);
              v27 = v12 + v22;
              v28 = *(_QWORD *)(v12 + v23 + 16);
              v29 = *(_QWORD *)(v12 + v23 + 24);
              v30 = *(_OWORD *)(v12 + v23);
              v31 = *(_OWORD *)(v12 + v22 - 16);
              *v26 = *(_OWORD *)(v12 + v22 - 32);
              v26[1] = v31;
              *(_OWORD *)(v27 - 32) = v30;
              *(_QWORD *)(v27 - 16) = v28;
              *(_QWORD *)(v27 - 8) = v29;
            }
            ++v25;
            v22 -= 32;
            v23 += 32;
          }
          while (v25 < v24);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_137;
      if (v11 - v15 < v6)
      {
        v32 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_140;
        if (v32 >= v3)
          v32 = v3;
        if (v32 < v15)
          goto LABEL_141;
        if (v11 != v32)
        {
          v33 = (__int128 *)(v12 + 32 * v11);
          do
          {
            v34 = *(_QWORD *)(v12 + 32 * v11 + 24);
            v35 = v15;
            v36 = v33;
            do
            {
              if (*((_QWORD *)v36 - 1) >= v34)
                break;
              if (!v12)
                goto LABEL_143;
              v37 = *((_QWORD *)v36 + 2);
              v38 = *v36;
              v39 = *(v36 - 1);
              *v36 = *(v36 - 2);
              v36[1] = v39;
              *((_QWORD *)v36 - 2) = v37;
              *((_QWORD *)v36 - 1) = v34;
              *(v36 - 2) = v38;
              v36 -= 2;
              ++v35;
            }
            while (v11 != v35);
            ++v11;
            v33 += 2;
          }
          while (v11 != v32);
          v11 = v32;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_10088E710(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v41 = *((_QWORD *)v13 + 2);
    v40 = *((_QWORD *)v13 + 3);
    v14 = v41 + 1;
    v12 = v114;
    if (v41 >= v40 >> 1)
    {
      v90 = sub_10088E710((char *)(v40 > 1), v41 + 1, 1, v13);
      v12 = v114;
      v13 = v90;
    }
    *((_QWORD *)v13 + 2) = v14;
    v42 = v13 + 32;
    v43 = &v13[16 * v41 + 32];
    *(_QWORD *)v43 = v15;
    *((_QWORD *)v43 + 1) = v11;
    if (v41)
      break;
    v14 = 1;
LABEL_15:
    v6 = v112;
    v3 = v113;
    if (v11 >= v113)
    {
      v10 = v111;
LABEL_104:
      v92 = v13;
      v111 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v103 = *v109;
      while (1)
      {
        v104 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v103)
          goto LABEL_146;
        v91 = v92;
        v105 = *(_QWORD *)&v92[16 * v104 + 32];
        v106 = *(_QWORD *)&v92[16 * v14 + 24];
        sub_10088E488((char *)(v103 + 32 * v105), (char *)(v103 + 32 * *(_QWORD *)&v92[16 * v14 + 16]), v103 + 32 * v106, __dst);
        if (v1)
          goto LABEL_94;
        if (v106 < v105)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v91) & 1) == 0)
          v91 = sub_10088F088((uint64_t)v91);
        if (v104 >= *((_QWORD *)v91 + 2))
          goto LABEL_135;
        v107 = &v91[16 * v104 + 32];
        *(_QWORD *)v107 = v105;
        *((_QWORD *)v107 + 1) = v106;
        v108 = *((_QWORD *)v91 + 2);
        if (v14 > v108)
          goto LABEL_136;
        memmove(&v91[16 * v14 + 16], &v91[16 * v14 + 32], 16 * (v108 - v14));
        v92 = v91;
        *((_QWORD *)v91 + 2) = v108 - 1;
        v14 = v108 - 1;
        if (v108 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v44 = v14 - 1;
    if (v14 >= 4)
    {
      v49 = &v42[16 * v14];
      v50 = *((_QWORD *)v49 - 8);
      v51 = *((_QWORD *)v49 - 7);
      v55 = __OFSUB__(v51, v50);
      v52 = v51 - v50;
      if (v55)
        goto LABEL_121;
      v54 = *((_QWORD *)v49 - 6);
      v53 = *((_QWORD *)v49 - 5);
      v55 = __OFSUB__(v53, v54);
      v47 = v53 - v54;
      v48 = v55;
      if (v55)
        goto LABEL_122;
      v56 = v14 - 2;
      v57 = &v42[16 * v14 - 32];
      v59 = *(_QWORD *)v57;
      v58 = *((_QWORD *)v57 + 1);
      v55 = __OFSUB__(v58, v59);
      v60 = v58 - v59;
      if (v55)
        goto LABEL_124;
      v55 = __OFADD__(v47, v60);
      v61 = v47 + v60;
      if (v55)
        goto LABEL_127;
      if (v61 >= v52)
      {
        v79 = &v42[16 * v44];
        v81 = *(_QWORD *)v79;
        v80 = *((_QWORD *)v79 + 1);
        v55 = __OFSUB__(v80, v81);
        v82 = v80 - v81;
        if (v55)
          goto LABEL_131;
        v72 = v47 < v82;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v73 = *((_QWORD *)v13 + 4);
        v74 = *((_QWORD *)v13 + 5);
        v55 = __OFSUB__(v74, v73);
        v66 = v74 - v73;
        v67 = v55;
        goto LABEL_77;
      }
      v46 = *((_QWORD *)v13 + 4);
      v45 = *((_QWORD *)v13 + 5);
      v55 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      v48 = v55;
    }
    if ((v48 & 1) != 0)
      goto LABEL_123;
    v56 = v14 - 2;
    v62 = &v42[16 * v14 - 32];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v65 = __OFSUB__(v63, v64);
    v66 = v63 - v64;
    v67 = v65;
    if (v65)
      goto LABEL_126;
    v68 = &v42[16 * v44];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v55 = __OFSUB__(v69, v70);
    v71 = v69 - v70;
    if (v55)
      goto LABEL_129;
    if (__OFADD__(v66, v71))
      goto LABEL_130;
    if (v66 + v71 >= v47)
    {
      v72 = v47 < v71;
LABEL_83:
      if (v72)
        v44 = v56;
      goto LABEL_85;
    }
LABEL_77:
    if ((v67 & 1) != 0)
      goto LABEL_125;
    v75 = &v42[16 * v44];
    v77 = *(_QWORD *)v75;
    v76 = *((_QWORD *)v75 + 1);
    v55 = __OFSUB__(v76, v77);
    v78 = v76 - v77;
    if (v55)
      goto LABEL_128;
    if (v78 < v66)
      goto LABEL_15;
LABEL_85:
    v83 = v44 - 1;
    if (v44 - 1 >= v14)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v12)
      goto LABEL_144;
    v84 = v13;
    v85 = &v42[16 * v83];
    v86 = *(_QWORD *)v85;
    v87 = &v42[16 * v44];
    v88 = *((_QWORD *)v87 + 1);
    sub_10088E488((char *)(v12 + 32 * *(_QWORD *)v85), (char *)(v12 + 32 * *(_QWORD *)v87), v12 + 32 * v88, __dst);
    if (v1)
      break;
    if (v88 < v86)
      goto LABEL_118;
    if (v44 > *((_QWORD *)v84 + 2))
      goto LABEL_119;
    *(_QWORD *)v85 = v86;
    *(_QWORD *)&v42[16 * v83 + 8] = v88;
    v89 = *((_QWORD *)v84 + 2);
    if (v44 >= v89)
      goto LABEL_120;
    v13 = v84;
    v14 = v89 - 1;
    memmove(&v42[16 * v44], v87 + 16, 16 * (v89 - 1 - v44));
    *((_QWORD *)v84 + 2) = v89 - 1;
    v12 = v114;
    if (v89 <= 2)
      goto LABEL_15;
  }
  v91 = v84;
LABEL_94:
  v92 = v91;
LABEL_95:
  swift_bridgeObjectRelease(v92);
  v111[2] = 0;
  return swift_bridgeObjectRelease(v111);
}

uint64_t sub_10088E488(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  char *v26;
  const void *v27;
  char *v28;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 31;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 31;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 5;
  v28 = __src;
  v27 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[32 * v13] <= __dst)
        memmove(__dst, a2, 32 * v13);
      v19 = &v4[32 * v13];
      v26 = v19;
      v28 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        v20 = (char *)(a3 - 32);
        do
        {
          v21 = v20 + 32;
          if (*((_QWORD *)v6 - 1) >= *((_QWORD *)v19 - 1))
          {
            v26 = v19 - 32;
            if (v21 < v19 || v20 >= v19 || v21 != v19)
            {
              v24 = *((_OWORD *)v19 - 1);
              *(_OWORD *)v20 = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 1) = v24;
            }
            v22 = v6;
            v19 -= 32;
            if (v6 <= v7)
              break;
          }
          else
          {
            v22 = v6 - 32;
            if (v21 != v6 || v20 >= v6)
            {
              v23 = *((_OWORD *)v6 - 1);
              *(_OWORD *)v20 = *(_OWORD *)v22;
              *((_OWORD *)v20 + 1) = v23;
            }
            v28 = v6 - 32;
            if (v22 <= v7)
              break;
          }
          v20 -= 32;
          v6 = v22;
        }
        while (v19 > v4);
      }
LABEL_44:
      sub_10088ECF0((void **)&v28, &v27, &v26);
      return 1;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[32 * v10] <= __dst)
      memmove(__dst, __src, 32 * v10);
    v14 = &v4[32 * v10];
    v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      v15 = v4;
      while (1)
      {
        if (*((_QWORD *)v15 + 3) >= *((_QWORD *)v6 + 3))
        {
          v4 = v15 + 32;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 32;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 32;
          }
        }
        else
        {
          v16 = v6 + 32;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        v18 = *((_OWORD *)v17 + 1);
        *(_OWORD *)v7 = *(_OWORD *)v17;
        *((_OWORD *)v7 + 1) = v18;
LABEL_22:
        v7 += 32;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v27 = v4;
        v28 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10088E710(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_10110B458);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10088E808(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

char *sub_10088E818(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

uint64_t sub_10088E8D4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_10088E8E0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for BeaconObservation);
}

uint64_t sub_10088E8EC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_10088E8F8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_10088E904(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for UpdateDeviceState);
}

uint64_t sub_10088E910(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_10088E920(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_10088E92C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_10088E938(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for StandaloneBeacon);
}

char *sub_10088E944(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

uint64_t sub_10088E9F0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for BeaconStatus);
}

uint64_t sub_10088E9FC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for WildModeTrackingLocation);
}

uint64_t sub_10088EA08(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for ShareRecord);
}

uint64_t sub_10088EA14(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for FetchRequestBeacon);
}

char *sub_10088EA20(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

uint64_t sub_10088EAD8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for RawSearchResult);
}

char *sub_10088EAE4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -32)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_10088EB88(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -88)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 88;
    if (result != v3 || result >= &v3[88 * v6])
      return (char *)memmove(result, v3, 88 * v6);
  }
  return result;
}

uint64_t sub_10088EC48(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

char *sub_10088EC54(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  int64_t v4;
  char *result;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 < 0)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
      return (char *)memmove(result, v3, v4);
  }
  return result;
}

uint64_t sub_10088ECE4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EE4C(a1, a2, a3, &qword_101106F70);
}

char *sub_10088ECF0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 31;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -32)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
      return (char *)memmove(result, v3, 32 * v7);
  }
  return result;
}

char *sub_10088ED98(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_10088EE40(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EE4C(a1, a2, a3, &qword_101109050);
}

uint64_t sub_10088EE4C(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = sub_10001A9A8(a4);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  v11 = v9 / v8;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v11 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4, v5, v11, result);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4, v5);
  return result;
}

uint64_t sub_10088EF58(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
}

uint64_t sub_10088EF64(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
}

uint64_t sub_10088EF70(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_10088EF7C(a1, a2, a3, type metadata accessor for BeaconKeyManager.KeyMapInfo);
}

uint64_t sub_10088EF7C(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  v11 = v9 / v8;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v11 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4, v5, v11, result);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4, v5);
  return result;
}

char *sub_10088F088(uint64_t a1)
{
  return sub_10088E710(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10088F09C(_QWORD *a1)
{
  return sub_10009BAD8(0, a1[2], 0, a1);
}

uint64_t sub_10088F0B0(_QWORD *a1)
{
  return sub_10009BF44(0, a1[2], 0, a1);
}

uint64_t sub_10088F0C4(_QWORD *a1)
{
  return sub_10009BF58(0, a1[2], 0, a1);
}

uint64_t sub_10088F0D8(_QWORD *a1)
{
  return sub_10009C114(0, a1[2], 0, a1);
}

uint64_t sub_10088F0EC(_QWORD *a1)
{
  return sub_10009C444(0, a1[2], 0, a1);
}

uint64_t sub_10088F100(_QWORD *a1)
{
  return sub_10009C5D8(0, a1[2], 0, a1);
}

uint64_t sub_10088F114(_QWORD *a1)
{
  return sub_10009CD34(0, a1[2], 0, a1);
}

uint64_t sub_10088F128(_QWORD *a1)
{
  return sub_10009CD48(0, a1[2], 0, a1);
}

uint64_t sub_10088F13C(_QWORD *a1)
{
  return sub_10009D048(0, a1[2], 0, a1);
}

uint64_t sub_10088F150(uint64_t a1)
{
  return sub_10009D05C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10088F164(_QWORD *a1)
{
  return sub_10009C13C(0, a1[2], 0, a1);
}

uint64_t sub_10088F178(_QWORD *a1)
{
  return sub_10009D6A4(0, a1[2], 0, a1);
}

uint64_t sub_10088F18C(_QWORD *a1)
{
  return sub_10009D6B8(0, a1[2], 0, a1);
}

uint64_t sub_10088F1A0(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_10088F1B4(_QWORD *a1)
{
  return sub_10009C128(0, a1[2], 0, a1);
}

uint64_t sub_10088F1C8(_QWORD *a1)
{
  return sub_10009D848(0, a1[2], 0, a1);
}

uint64_t sub_10088F1DC(_QWORD *a1)
{
  return sub_10009D9E0(0, a1[2], 0, a1);
}

uint64_t sub_10088F1F0(_QWORD *a1)
{
  return sub_10009DCD4(0, a1[2], 0, a1);
}

uint64_t sub_10088F204(_QWORD *a1)
{
  return sub_10009DE8C(0, a1[2], 0, a1);
}

uint64_t sub_10088F218(_QWORD *a1)
{
  return sub_10009E030(0, a1[2], 0, a1);
}

uint64_t sub_10088F22C(_QWORD *a1)
{
  return sub_10009D834(0, a1[2], 0, a1);
}

uint64_t sub_10088F240(_QWORD *a1)
{
  return sub_10009E1CC(0, a1[2], 0, a1);
}

uint64_t sub_10088F254(uint64_t a1)
{
  return sub_10009E1E0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10088F268(uint64_t a1)
{
  return sub_10009B97C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10088F27C(uint64_t a1)
{
  return sub_10009E35C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10088F290(_QWORD *a1)
{
  return sub_10009E68C(0, a1[2], 0, a1);
}

uint64_t sub_10088F2A4(uint64_t a1)
{
  return sub_10009E6A0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10088F2B8(uint64_t a1)
{
  return sub_10009E7FC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10088F2CC(_QWORD *a1)
{
  return sub_10009EAAC(0, a1[2], 0, a1);
}

uint64_t sub_10088F2E0(_QWORD *a1)
{
  return sub_10009EAC0(0, a1[2], 0, a1);
}

uint64_t sub_10088F2F4(uint64_t a1)
{
  return sub_10009B68C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10088F308(_QWORD *a1)
{
  return sub_10009F3A0(0, a1[2], 0, a1);
}

uint64_t sub_10088F31C(_QWORD *a1)
{
  return sub_10009F594(0, a1[2], 0, a1);
}

uint64_t sub_10088F330(_QWORD *a1)
{
  return sub_10009F5A8(0, a1[2], 0, a1);
}

uint64_t sub_10088F344(_QWORD *a1)
{
  return sub_10009F5BC(0, a1[2], 0, a1);
}

uint64_t sub_10088F358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v117 = a1;
  v1 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v1);
  v105 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v103 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v5);
  v118 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DirectorySequence(0);
  v116 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110B4A8);
  v11 = __chkstk_darwin(v10);
  v102 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (char *)&v89 - v13;
  v106 = sub_10001A9A8(&qword_10110B4B0);
  v14 = *(_QWORD *)(v106 - 8);
  v15 = __chkstk_darwin(v106);
  v113 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v109 = (uint64_t)&v89 - v17;
  v18 = sub_10001A9A8(&qword_10110ABE0);
  __chkstk_darwin(v18);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_101111C60);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v108 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v24);
  v93 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for SharedBeaconRecord(0);
  v26 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v97 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_10110ABD0);
  __chkstk_darwin(v28);
  v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v26;
  v31 = *(unsigned __int8 *)(v26 + 80);
  sub_10000F9B8(v117, (uint64_t)v30, &qword_10110ABD0);
  v96 = v30;
  sub_10000F9B8((uint64_t)v30, (uint64_t)v20, &qword_10110ABE0);
  v91 = v22;
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v32 = _swiftEmptyArrayStorage;
  if (v92(v20, 1, v21) != 1)
  {
    v98 = 0;
    v110 = 0;
    v90 = (v31 + 32) & ~v31;
    v99 = (char *)_swiftEmptyArrayStorage + v90;
    v89 = v31 | 7;
    v33 = _swiftEmptyArrayStorage;
    v34 = (uint64_t)v104;
    v35 = (uint64_t)v105;
    v36 = v107;
    v111 = v20;
    v112 = v3;
    v95 = v21;
    while (1)
    {
      v100 = v33;
      v37 = v108;
      sub_100005CF0((uint64_t)v20, v108, (uint64_t *)&unk_101111C60);
      v117 = v37 + *(int *)(v21 + 40);
      v38 = v118;
      sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
      v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
      if (v115(v38, 1, v7) == 1)
      {
        v39 = v106;
LABEL_13:
        sub_100004048(v118, (uint64_t *)&unk_1010F77A0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1, 1, v39);
LABEL_15:
        sub_100004048(v108, (uint64_t *)&unk_101111C60);
        sub_100004048(v34, &qword_10110B4A8);
        v56 = (uint64_t)v96;
        sub_100004048((uint64_t)v96, &qword_10110ABE0);
        v57 = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v56, 1, 1, v95);
        v58 = v93;
      }
      else
      {
        v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32);
        v39 = v106;
        while (1)
        {
          v40 = v14;
          v41 = v114(v9, v118, v7);
          DirectorySequence.next()(v41);
          v42 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v35, 1, v36) == 1)
          {
            v43 = v116;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            sub_100004048(v35, &qword_1010FBA40);
            v44 = v117;
            sub_100004048(v117, (uint64_t *)&unk_1010F77A0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v7);
            v14 = v40;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, 1, 1, v39);
          }
          else
          {
            v45 = v103;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v103, v35, v36);
            v46 = objc_autoreleasePoolPush();
            v47 = v102;
            v48 = v110;
            sub_100A7F134((void (*)(_QWORD))v45, v108, v102);
            v110 = v48;
            v36 = v107;
            v49 = v46;
            v35 = (uint64_t)v105;
            objc_autoreleasePoolPop(v49);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            v34 = (uint64_t)v104;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v36);
            v50 = v47;
            v39 = v106;
            sub_100005CF0(v50, v34, &qword_10110B4A8);
            v14 = v40;
          }
          v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v34, 1, v39);
          v52 = (uint64_t)v113;
          if (v51 == 1)
          {
            v20 = v111;
            goto LABEL_15;
          }
          v53 = v109;
          sub_100005CF0(v34, v109, &qword_10110B4B0);
          sub_100005CF0(v53, v52, &qword_10110B4B0);
          if (swift_getEnumCaseMultiPayload(v52, v39) != 1)
            break;
          sub_100004048(v52, &qword_10110B4B0);
          v54 = v118;
          sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
          v55 = v115(v54, 1, v7);
          v20 = v111;
          if (v55 == 1)
            goto LABEL_13;
        }
        sub_100004048(v108, (uint64_t *)&unk_101111C60);
        v78 = v52;
        v58 = v93;
        sub_1000126EC(v78, v93, type metadata accessor for SharedBeaconRecord);
        v57 = 0;
        v20 = v111;
      }
      v59 = v101;
      v60 = v57;
      v61 = v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v58, v60, 1, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1, v61) == 1)
      {
        v85 = v98;
        v84 = v100;
        goto LABEL_42;
      }
      result = sub_1000126EC(v58, v97, type metadata accessor for SharedBeaconRecord);
      v63 = v98;
      if (v98)
      {
        v32 = v100;
        goto LABEL_38;
      }
      v64 = v100[3];
      if ((uint64_t)((v64 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_47;
      v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
      if (v65 <= 1)
        v66 = 1;
      else
        v66 = v65;
      v67 = sub_10001A9A8((uint64_t *)&unk_101109100);
      v68 = *(_QWORD *)(v101 + 72);
      v69 = v90;
      v32 = (_QWORD *)swift_allocObject(v67, v90 + v68 * v66, v89);
      result = j__malloc_size(v32);
      if (!v68)
        goto LABEL_48;
      v70 = result - v69;
      if (result - v69 == 0x8000000000000000 && v68 == -1)
        goto LABEL_49;
      v72 = v70 / v68;
      v32[2] = v66;
      v32[3] = 2 * (v70 / v68);
      v73 = (char *)v32 + v69;
      v74 = v100;
      v75 = v100[3] >> 1;
      v76 = v75 * v68;
      if (v100[2])
        break;
LABEL_37:
      v99 = &v73[v76];
      v63 = (v72 & 0x7FFFFFFFFFFFFFFFLL) - v75;
      result = swift_release(v74);
      v34 = (uint64_t)v104;
      v35 = (uint64_t)v105;
LABEL_38:
      v36 = v107;
      v79 = __OFSUB__(v63, 1);
      v80 = v63 - 1;
      if (v79)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      v98 = v80;
      v81 = (uint64_t)v99;
      sub_1000126EC(v97, (uint64_t)v99, type metadata accessor for SharedBeaconRecord);
      v99 = (char *)(v81 + *(_QWORD *)(v101 + 72));
      sub_10000F9B8((uint64_t)v96, (uint64_t)v20, &qword_10110ABE0);
      v21 = v95;
      v82 = v92(v20, 1, v95);
      v33 = v32;
      if (v82 == 1)
        goto LABEL_40;
    }
    v77 = (char *)v100 + v69;
    if (v32 < v100 || v73 >= &v77[v76])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v32 + v69, v77, v75, v94);
    }
    else
    {
      if (v32 == v100)
      {
LABEL_36:
        v74[2] = 0;
        goto LABEL_37;
      }
      swift_arrayInitWithTakeBackToFront((char *)v32 + v69, v77);
    }
    v74 = v100;
    goto LABEL_36;
  }
  v98 = 0;
LABEL_40:
  sub_100004048((uint64_t)v20, &qword_10110ABE0);
  v83 = v93;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v93, 1, 1, v94);
  v84 = v32;
  v58 = v83;
  v85 = v98;
LABEL_42:
  sub_100004048((uint64_t)v96, &qword_10110ABD0);
  sub_100004048(v58, (uint64_t *)&unk_1010EE180);
  v86 = v84[3];
  result = (uint64_t)v84;
  if (v86 >= 2)
  {
    v87 = v86 >> 1;
    v79 = __OFSUB__(v87, v85);
    v88 = v87 - v85;
    if (v79)
      goto LABEL_50;
    v84[2] = v88;
  }
  return result;
}

void sub_10088FD00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  int64_t v30;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;

  v2 = sub_10001A9A8(&qword_1010EF660);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v51 = (uint64_t)&v47 - v6;
  v7 = type metadata accessor for BeaconObservation(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v52 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v55 = _swiftEmptyArrayStorage;
  v53 = (uint64_t)_swiftEmptyArrayStorage + v11;
  v48 = v10 | 7;
  v12 = swift_bridgeObjectRetain(a1);
  v56 = 0;
  v54 = 0;
  v13 = 0;
  v50 = v11;
LABEL_4:
  v16 = *(_QWORD *)(a1 + 16);
  if (v13 == v16)
  {
LABEL_36:
    v20 = v51;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56))(v51, 1, 1, v7, v12);
LABEL_37:
    swift_bridgeObjectRelease();
    v43 = v54;
    v42 = v55;
    swift_bridgeObjectRelease();
    sub_100004048(v20, &qword_1010EF660);
    v44 = v42[3];
    if (v44 < 2)
      return;
    v45 = v44 >> 1;
    v39 = __OFSUB__(v45, v43);
    v46 = v45 - v43;
    if (!v39)
    {
      v42[2] = v46;
      return;
    }
  }
  else
  {
    if (v13 < v16)
    {
      while (1)
      {
        v17 = *(_QWORD *)(a1 + 32 + 8 * v13);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRelease();
        if (v17)
          break;
LABEL_9:
        ++v13;
        v18 = *(_QWORD *)(a1 + 16);
        if (v13 == v18)
          goto LABEL_36;
        if (v13 >= v18)
          goto LABEL_41;
      }
      v14 = *(_QWORD *)(v17 + 16);
      if (!v14)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1, 1, v7);
        sub_100004048((uint64_t)v5, &qword_1010EF660);
        goto LABEL_9;
      }
      v15 = 0;
      ++v13;
      while (1)
      {
        if (v15 >= v14)
          goto LABEL_42;
        v19 = *(_QWORD *)(v8 + 72);
        v56 = v15;
        v49 = v19;
        sub_10005972C(v17 + v11 + v19 * v15, (uint64_t)v5, type metadata accessor for BeaconObservation);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
        v20 = v51;
        sub_100005CF0((uint64_t)v5, v51, &qword_1010EF660);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7) == 1)
          goto LABEL_37;
        sub_1000126EC(v20, v52, type metadata accessor for BeaconObservation);
        v22 = v54;
        v21 = v55;
        if (!v54)
          break;
LABEL_34:
        v39 = __OFSUB__(v22, 1);
        v40 = v22 - 1;
        if (v39)
          goto LABEL_43;
        v54 = v40;
        ++v56;
        v41 = v53;
        sub_1000126EC(v52, v53, type metadata accessor for BeaconObservation);
        v11 = v50;
        v53 = v41 + v49;
        v55 = v21;
        v14 = *(_QWORD *)(v17 + 16);
        v15 = v56;
        if (v56 == v14)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1, 1, v7);
          sub_100004048((uint64_t)v5, &qword_1010EF660);
          goto LABEL_4;
        }
      }
      v23 = v55[3];
      if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_45;
      v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      if (v24 <= 1)
        v25 = 1;
      else
        v25 = v24;
      v26 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
      v28 = v49;
      v27 = v50;
      v54 = v25;
      v21 = (_QWORD *)swift_allocObject(v26, v50 + v25 * v49, v48);
      v29 = j__malloc_size(v21);
      if (!v28)
        goto LABEL_46;
      v30 = v29 - v27;
      if (v29 - v27 == 0x8000000000000000 && v28 == -1)
        goto LABEL_47;
      v32 = v30 / v28;
      v21[2] = v54;
      v21[3] = 2 * (v30 / v28);
      v33 = (char *)v21 + v27;
      v34 = v55;
      v35 = v55[3] >> 1;
      v36 = v35 * v28;
      if (!v55[2])
      {
LABEL_33:
        v53 = (uint64_t)&v33[v36];
        v22 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v35;
        swift_release(v34);
        goto LABEL_34;
      }
      v37 = (char *)v55 + v50;
      if (v21 < v55 || v33 >= &v37[v36])
      {
        v53 = v30 / v28;
        v54 = (uint64_t)v33;
        v38 = v35;
        v47 = v36;
        swift_arrayInitWithTakeFrontToBack(v33, v37, v35, v7);
      }
      else
      {
        if (v21 == v55)
        {
LABEL_32:
          v34[2] = 0;
          goto LABEL_33;
        }
        v53 = v30 / v28;
        v54 = (uint64_t)v33;
        v38 = v35;
        v47 = v36;
        swift_arrayInitWithTakeBackToFront(v33, v37);
      }
      v36 = v47;
      v35 = v38;
      v32 = v53;
      v33 = (char *)v54;
      goto LABEL_32;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
}

size_t sub_10089013C(uint64_t a1)
{
  return sub_100890B1C(a1, &qword_10110B4C8, type metadata accessor for KeyGenerationBeaconInfo, &qword_1010ED1B8);
}

size_t sub_100890158(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t result;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v117 = a1;
  v1 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v1);
  v105 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v103 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v5);
  v118 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DirectorySequence(0);
  v116 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110A970);
  v11 = __chkstk_darwin(v10);
  v102 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (char *)&v89 - v13;
  v106 = sub_10001A9A8((uint64_t *)&unk_1011114C0);
  v14 = *(_QWORD *)(v106 - 8);
  v15 = __chkstk_darwin(v106);
  v113 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v109 = (uint64_t)&v89 - v17;
  v18 = sub_10001A9A8(&qword_1010FD150);
  __chkstk_darwin(v18);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1010FD140);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v108 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010F7608);
  __chkstk_darwin(v24);
  v93 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v26 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v97 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_1010FD148);
  __chkstk_darwin(v28);
  v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v26;
  v31 = *(unsigned __int8 *)(v26 + 80);
  sub_10000F9B8(v117, (uint64_t)v30, &qword_1010FD148);
  v96 = v30;
  sub_10000F9B8((uint64_t)v30, (uint64_t)v20, &qword_1010FD150);
  v91 = v22;
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v32 = _swiftEmptyArrayStorage;
  if (v92(v20, 1, v21) != 1)
  {
    v98 = 0;
    v110 = 0;
    v90 = (v31 + 32) & ~v31;
    v99 = (char *)_swiftEmptyArrayStorage + v90;
    v89 = v31 | 7;
    v33 = _swiftEmptyArrayStorage;
    v34 = (uint64_t)v104;
    v35 = (uint64_t)v105;
    v36 = v107;
    v111 = v20;
    v112 = v3;
    v95 = v21;
    while (1)
    {
      v100 = v33;
      v37 = v108;
      sub_100005CF0((uint64_t)v20, v108, &qword_1010FD140);
      v117 = v37 + *(int *)(v21 + 40);
      v38 = v118;
      sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
      v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
      if (v115(v38, 1, v7) == 1)
      {
        v39 = v106;
LABEL_13:
        sub_100004048(v118, (uint64_t *)&unk_1010F77A0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1, 1, v39);
LABEL_15:
        sub_100004048(v108, &qword_1010FD140);
        sub_100004048(v34, &qword_10110A970);
        v56 = (uint64_t)v96;
        sub_100004048((uint64_t)v96, &qword_1010FD150);
        v57 = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v56, 1, 1, v95);
        v58 = v93;
      }
      else
      {
        v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32);
        v39 = v106;
        while (1)
        {
          v40 = v14;
          v41 = v114(v9, v118, v7);
          DirectorySequence.next()(v41);
          v42 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v35, 1, v36) == 1)
          {
            v43 = v116;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            sub_100004048(v35, &qword_1010FBA40);
            v44 = v117;
            sub_100004048(v117, (uint64_t *)&unk_1010F77A0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v7);
            v14 = v40;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, 1, 1, v39);
          }
          else
          {
            v45 = v103;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v103, v35, v36);
            v46 = objc_autoreleasePoolPush();
            v47 = v102;
            v48 = v110;
            sub_100A7F1BC((void (*)(_QWORD))v45, v108, v102);
            v110 = v48;
            v36 = v107;
            v49 = v46;
            v35 = (uint64_t)v105;
            objc_autoreleasePoolPop(v49);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            v34 = (uint64_t)v104;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v36);
            v50 = v47;
            v39 = v106;
            sub_100005CF0(v50, v34, &qword_10110A970);
            v14 = v40;
          }
          v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v34, 1, v39);
          v52 = (uint64_t)v113;
          if (v51 == 1)
          {
            v20 = v111;
            goto LABEL_15;
          }
          v53 = v109;
          sub_100005CF0(v34, v109, (uint64_t *)&unk_1011114C0);
          sub_100005CF0(v53, v52, (uint64_t *)&unk_1011114C0);
          if (swift_getEnumCaseMultiPayload(v52, v39) != 1)
            break;
          sub_100004048(v52, (uint64_t *)&unk_1011114C0);
          v54 = v118;
          sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
          v55 = v115(v54, 1, v7);
          v20 = v111;
          if (v55 == 1)
            goto LABEL_13;
        }
        sub_100004048(v108, &qword_1010FD140);
        v78 = v52;
        v58 = v93;
        sub_1000126EC(v78, v93, type metadata accessor for OwnedDeviceKeyRecord);
        v57 = 0;
        v20 = v111;
      }
      v59 = v101;
      v60 = v57;
      v61 = v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v58, v60, 1, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1, v61) == 1)
      {
        v85 = v98;
        v84 = v100;
        goto LABEL_42;
      }
      result = sub_1000126EC(v58, v97, type metadata accessor for OwnedDeviceKeyRecord);
      v63 = v98;
      if (v98)
      {
        v32 = v100;
        goto LABEL_38;
      }
      v64 = v100[3];
      if ((uint64_t)((v64 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_47;
      v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
      if (v65 <= 1)
        v66 = 1;
      else
        v66 = v65;
      v67 = sub_10001A9A8(&qword_1010ED348);
      v68 = *(_QWORD *)(v101 + 72);
      v69 = v90;
      v32 = (_QWORD *)swift_allocObject(v67, v90 + v68 * v66, v89);
      result = j__malloc_size(v32);
      if (!v68)
        goto LABEL_48;
      v70 = result - v69;
      if (result - v69 == 0x8000000000000000 && v68 == -1)
        goto LABEL_49;
      v72 = v70 / v68;
      v32[2] = v66;
      v32[3] = 2 * (v70 / v68);
      v73 = (char *)v32 + v69;
      v74 = v100;
      v75 = v100[3] >> 1;
      v76 = v75 * v68;
      if (v100[2])
        break;
LABEL_37:
      v99 = &v73[v76];
      v63 = (v72 & 0x7FFFFFFFFFFFFFFFLL) - v75;
      result = swift_release();
      v34 = (uint64_t)v104;
      v35 = (uint64_t)v105;
LABEL_38:
      v36 = v107;
      v79 = __OFSUB__(v63, 1);
      v80 = v63 - 1;
      if (v79)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      v98 = v80;
      v81 = (uint64_t)v99;
      sub_1000126EC(v97, (uint64_t)v99, type metadata accessor for OwnedDeviceKeyRecord);
      v99 = (char *)(v81 + *(_QWORD *)(v101 + 72));
      sub_10000F9B8((uint64_t)v96, (uint64_t)v20, &qword_1010FD150);
      v21 = v95;
      v82 = v92(v20, 1, v95);
      v33 = v32;
      if (v82 == 1)
        goto LABEL_40;
    }
    v77 = (char *)v100 + v69;
    if (v32 < v100 || v73 >= &v77[v76])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v32 + v69, v77, v75, v94);
    }
    else
    {
      if (v32 == v100)
      {
LABEL_36:
        v74[2] = 0;
        goto LABEL_37;
      }
      swift_arrayInitWithTakeBackToFront((char *)v32 + v69, v77);
    }
    v74 = v100;
    goto LABEL_36;
  }
  v98 = 0;
LABEL_40:
  sub_100004048((uint64_t)v20, &qword_1010FD150);
  v83 = v93;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v93, 1, 1, v94);
  v84 = v32;
  v58 = v83;
  v85 = v98;
LABEL_42:
  sub_100004048((uint64_t)v96, &qword_1010FD148);
  sub_100004048(v58, &qword_1010F7608);
  v86 = v84[3];
  result = (size_t)v84;
  if (v86 >= 2)
  {
    v87 = v86 >> 1;
    v79 = __OFSUB__(v87, v85);
    v88 = v87 - v85;
    if (v79)
      goto LABEL_50;
    v84[2] = v88;
  }
  return result;
}

size_t sub_100890B00(uint64_t a1)
{
  return sub_100890B1C(a1, (uint64_t *)&unk_1010EDC50, type metadata accessor for LocalFindableAccessoryRecord, &qword_1010ED2B0);
}

size_t sub_100890B1C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  size_t result;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);

  v46 = a4;
  v44 = a2;
  v6 = sub_10001A9A8(a2);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a3(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - v11;
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = swift_retain();
  v48 = a1;
  dispatch thunk of _AnyIteratorBoxBase.next()(v14);
  v47 = v10;
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v15 = _swiftEmptyArrayStorage;
  if (v50(v8, 1, v9) != 1)
  {
    v16 = 0;
    v49 = (v13 + 32) & ~v13;
    v22 = (char *)_swiftEmptyArrayStorage + v49;
    v45 = v13 | 7;
    v23 = _swiftEmptyArrayStorage;
    v24 = v47;
    while (1)
    {
      result = sub_1000126EC((uint64_t)v8, (uint64_t)v12, a3);
      if (v16)
      {
        v15 = v23;
        v20 = __OFSUB__(v16--, 1);
        if (v20)
          goto LABEL_32;
      }
      else
      {
        v26 = v23[3];
        if ((uint64_t)((v26 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_33;
        v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
        if (v27 <= 1)
          v28 = 1;
        else
          v28 = v27;
        v29 = sub_10001A9A8(v46);
        v30 = *(_QWORD *)(v24 + 72);
        v31 = v49;
        v15 = (_QWORD *)swift_allocObject(v29, v49 + v30 * v28, v45);
        result = j__malloc_size(v15);
        if (!v30)
          goto LABEL_34;
        v32 = result - v31;
        if (result - v31 == 0x8000000000000000 && v30 == -1)
          goto LABEL_35;
        v34 = a3;
        v35 = v9;
        v36 = v32 / v30;
        v15[2] = v28;
        v15[3] = 2 * (v32 / v30);
        v37 = (char *)v15 + v31;
        v38 = v23[3] >> 1;
        v39 = v38 * v30;
        if (v23[2])
        {
          v40 = (char *)v23 + v49;
          if (v15 < v23 || v37 >= (char *)v23 + v49 + v39)
          {
            swift_arrayInitWithTakeFrontToBack(v37, v40, v38, v35);
          }
          else if (v15 != v23)
          {
            swift_arrayInitWithTakeBackToFront(v37, v40);
          }
          v23[2] = 0;
        }
        v22 = &v37[v39];
        v42 = (v36 & 0x7FFFFFFFFFFFFFFFLL) - v38;
        result = swift_release();
        v9 = v35;
        a3 = v34;
        v24 = v47;
        v20 = __OFSUB__(v42, 1);
        v16 = v42 - 1;
        if (v20)
        {
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
      }
      v25 = sub_1000126EC((uint64_t)v12, (uint64_t)v22, a3);
      v22 += *(_QWORD *)(v24 + 72);
      dispatch thunk of _AnyIteratorBoxBase.next()(v25);
      v23 = v15;
      if (v50(v8, 1, v9) == 1)
        goto LABEL_3;
    }
  }
  v16 = 0;
LABEL_3:
  swift_release();
  result = sub_100004048((uint64_t)v8, v44);
  v18 = v15[3];
  if (v18 >= 2)
  {
    v19 = v18 >> 1;
    v20 = __OFSUB__(v19, v16);
    v21 = v19 - v16;
    if (v20)
      goto LABEL_36;
    v15[2] = v21;
  }
  return (size_t)v15;
}

size_t sub_100890DE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t result;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v117 = a1;
  v1 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v1);
  v105 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v103 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v5);
  v118 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DirectorySequence(0);
  v116 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110B480);
  v11 = __chkstk_darwin(v10);
  v102 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (char *)&v89 - v13;
  v106 = sub_10001A9A8((uint64_t *)&unk_1011117A0);
  v14 = *(_QWORD *)(v106 - 8);
  v15 = __chkstk_darwin(v106);
  v113 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v109 = (uint64_t)&v89 - v17;
  v18 = sub_10001A9A8((uint64_t *)&unk_101111790);
  __chkstk_darwin(v18);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_101111780);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v108 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  __chkstk_darwin(v24);
  v93 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for OwnerPeerTrust(0);
  v26 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v97 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_10110ABB8);
  __chkstk_darwin(v28);
  v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v26;
  v31 = *(unsigned __int8 *)(v26 + 80);
  sub_10000F9B8(v117, (uint64_t)v30, &qword_10110ABB8);
  v96 = v30;
  sub_10000F9B8((uint64_t)v30, (uint64_t)v20, (uint64_t *)&unk_101111790);
  v91 = v22;
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v32 = _swiftEmptyArrayStorage;
  if (v92(v20, 1, v21) != 1)
  {
    v98 = 0;
    v110 = 0;
    v90 = (v31 + 32) & ~v31;
    v99 = (char *)_swiftEmptyArrayStorage + v90;
    v89 = v31 | 7;
    v33 = _swiftEmptyArrayStorage;
    v34 = (uint64_t)v104;
    v35 = (uint64_t)v105;
    v36 = v107;
    v111 = v20;
    v112 = v3;
    v95 = v21;
    while (1)
    {
      v100 = v33;
      v37 = v108;
      sub_100005CF0((uint64_t)v20, v108, (uint64_t *)&unk_101111780);
      v117 = v37 + *(int *)(v21 + 40);
      v38 = v118;
      sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
      v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
      if (v115(v38, 1, v7) == 1)
      {
        v39 = v106;
LABEL_13:
        sub_100004048(v118, (uint64_t *)&unk_1010F77A0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1, 1, v39);
LABEL_15:
        sub_100004048(v108, (uint64_t *)&unk_101111780);
        sub_100004048(v34, &qword_10110B480);
        v56 = (uint64_t)v96;
        sub_100004048((uint64_t)v96, (uint64_t *)&unk_101111790);
        v57 = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v56, 1, 1, v95);
        v58 = v93;
      }
      else
      {
        v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32);
        v39 = v106;
        while (1)
        {
          v40 = v14;
          v41 = v114(v9, v118, v7);
          DirectorySequence.next()(v41);
          v42 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v35, 1, v36) == 1)
          {
            v43 = v116;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            sub_100004048(v35, &qword_1010FBA40);
            v44 = v117;
            sub_100004048(v117, (uint64_t *)&unk_1010F77A0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v7);
            v14 = v40;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, 1, 1, v39);
          }
          else
          {
            v45 = v103;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v103, v35, v36);
            v46 = objc_autoreleasePoolPush();
            v47 = v102;
            v48 = v110;
            sub_100A7F244((void (*)(_QWORD))v45, v108, v102);
            v110 = v48;
            v36 = v107;
            v49 = v46;
            v35 = (uint64_t)v105;
            objc_autoreleasePoolPop(v49);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            v34 = (uint64_t)v104;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v36);
            v50 = v47;
            v39 = v106;
            sub_100005CF0(v50, v34, &qword_10110B480);
            v14 = v40;
          }
          v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v34, 1, v39);
          v52 = (uint64_t)v113;
          if (v51 == 1)
          {
            v20 = v111;
            goto LABEL_15;
          }
          v53 = v109;
          sub_100005CF0(v34, v109, (uint64_t *)&unk_1011117A0);
          sub_100005CF0(v53, v52, (uint64_t *)&unk_1011117A0);
          if (swift_getEnumCaseMultiPayload(v52, v39) != 1)
            break;
          sub_100004048(v52, (uint64_t *)&unk_1011117A0);
          v54 = v118;
          sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
          v55 = v115(v54, 1, v7);
          v20 = v111;
          if (v55 == 1)
            goto LABEL_13;
        }
        sub_100004048(v108, (uint64_t *)&unk_101111780);
        v78 = v52;
        v58 = v93;
        sub_1000126EC(v78, v93, type metadata accessor for OwnerPeerTrust);
        v57 = 0;
        v20 = v111;
      }
      v59 = v101;
      v60 = v57;
      v61 = v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v58, v60, 1, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1, v61) == 1)
      {
        v85 = v98;
        v84 = v100;
        goto LABEL_42;
      }
      result = sub_1000126EC(v58, v97, type metadata accessor for OwnerPeerTrust);
      v63 = v98;
      if (v98)
      {
        v32 = v100;
        goto LABEL_38;
      }
      v64 = v100[3];
      if ((uint64_t)((v64 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_47;
      v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
      if (v65 <= 1)
        v66 = 1;
      else
        v66 = v65;
      v67 = sub_10001A9A8(&qword_1010ED308);
      v68 = *(_QWORD *)(v101 + 72);
      v69 = v90;
      v32 = (_QWORD *)swift_allocObject(v67, v90 + v68 * v66, v89);
      result = j__malloc_size(v32);
      if (!v68)
        goto LABEL_48;
      v70 = result - v69;
      if (result - v69 == 0x8000000000000000 && v68 == -1)
        goto LABEL_49;
      v72 = v70 / v68;
      v32[2] = v66;
      v32[3] = 2 * (v70 / v68);
      v73 = (char *)v32 + v69;
      v74 = v100;
      v75 = v100[3] >> 1;
      v76 = v75 * v68;
      if (v100[2])
        break;
LABEL_37:
      v99 = &v73[v76];
      v63 = (v72 & 0x7FFFFFFFFFFFFFFFLL) - v75;
      result = swift_release();
      v34 = (uint64_t)v104;
      v35 = (uint64_t)v105;
LABEL_38:
      v36 = v107;
      v79 = __OFSUB__(v63, 1);
      v80 = v63 - 1;
      if (v79)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      v98 = v80;
      v81 = (uint64_t)v99;
      sub_1000126EC(v97, (uint64_t)v99, type metadata accessor for OwnerPeerTrust);
      v99 = (char *)(v81 + *(_QWORD *)(v101 + 72));
      sub_10000F9B8((uint64_t)v96, (uint64_t)v20, (uint64_t *)&unk_101111790);
      v21 = v95;
      v82 = v92(v20, 1, v95);
      v33 = v32;
      if (v82 == 1)
        goto LABEL_40;
    }
    v77 = (char *)v100 + v69;
    if (v32 < v100 || v73 >= &v77[v76])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v32 + v69, v77, v75, v94);
    }
    else
    {
      if (v32 == v100)
      {
LABEL_36:
        v74[2] = 0;
        goto LABEL_37;
      }
      swift_arrayInitWithTakeBackToFront((char *)v32 + v69, v77);
    }
    v74 = v100;
    goto LABEL_36;
  }
  v98 = 0;
LABEL_40:
  sub_100004048((uint64_t)v20, (uint64_t *)&unk_101111790);
  v83 = v93;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v93, 1, 1, v94);
  v84 = v32;
  v58 = v83;
  v85 = v98;
LABEL_42:
  sub_100004048((uint64_t)v96, &qword_10110ABB8);
  sub_100004048(v58, (uint64_t *)&unk_1010EE160);
  v86 = v84[3];
  result = (size_t)v84;
  if (v86 >= 2)
  {
    v87 = v86 >> 1;
    v79 = __OFSUB__(v87, v85);
    v88 = v87 - v85;
    if (v79)
      goto LABEL_50;
    v84[2] = v88;
  }
  return result;
}

size_t sub_100891788(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t result;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v117 = a1;
  v1 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v1);
  v105 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v103 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v5);
  v118 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DirectorySequence(0);
  v116 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110B488);
  v11 = __chkstk_darwin(v10);
  v102 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (char *)&v89 - v13;
  v106 = sub_10001A9A8((uint64_t *)&unk_101111990);
  v14 = *(_QWORD *)(v106 - 8);
  v15 = __chkstk_darwin(v106);
  v113 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v109 = (uint64_t)&v89 - v17;
  v18 = sub_10001A9A8((uint64_t *)&unk_101111980);
  __chkstk_darwin(v18);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_101111970);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v108 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010EC868);
  __chkstk_darwin(v24);
  v93 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for MemberPeerTrust(0);
  v26 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v97 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_10110ABC0);
  __chkstk_darwin(v28);
  v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v26;
  v31 = *(unsigned __int8 *)(v26 + 80);
  sub_10000F9B8(v117, (uint64_t)v30, &qword_10110ABC0);
  v96 = v30;
  sub_10000F9B8((uint64_t)v30, (uint64_t)v20, (uint64_t *)&unk_101111980);
  v91 = v22;
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v32 = _swiftEmptyArrayStorage;
  if (v92(v20, 1, v21) != 1)
  {
    v98 = 0;
    v110 = 0;
    v90 = (v31 + 32) & ~v31;
    v99 = (char *)_swiftEmptyArrayStorage + v90;
    v89 = v31 | 7;
    v33 = _swiftEmptyArrayStorage;
    v34 = (uint64_t)v104;
    v35 = (uint64_t)v105;
    v36 = v107;
    v111 = v20;
    v112 = v3;
    v95 = v21;
    while (1)
    {
      v100 = v33;
      v37 = v108;
      sub_100005CF0((uint64_t)v20, v108, (uint64_t *)&unk_101111970);
      v117 = v37 + *(int *)(v21 + 40);
      v38 = v118;
      sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
      v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
      if (v115(v38, 1, v7) == 1)
      {
        v39 = v106;
LABEL_13:
        sub_100004048(v118, (uint64_t *)&unk_1010F77A0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1, 1, v39);
LABEL_15:
        sub_100004048(v108, (uint64_t *)&unk_101111970);
        sub_100004048(v34, &qword_10110B488);
        v56 = (uint64_t)v96;
        sub_100004048((uint64_t)v96, (uint64_t *)&unk_101111980);
        v57 = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v56, 1, 1, v95);
        v58 = v93;
      }
      else
      {
        v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32);
        v39 = v106;
        while (1)
        {
          v40 = v14;
          v41 = v114(v9, v118, v7);
          DirectorySequence.next()(v41);
          v42 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v35, 1, v36) == 1)
          {
            v43 = v116;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            sub_100004048(v35, &qword_1010FBA40);
            v44 = v117;
            sub_100004048(v117, (uint64_t *)&unk_1010F77A0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v7);
            v14 = v40;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, 1, 1, v39);
          }
          else
          {
            v45 = v103;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v103, v35, v36);
            v46 = objc_autoreleasePoolPush();
            v47 = v102;
            v48 = v110;
            sub_100A7F288((void (*)(_QWORD))v45, v108, v102);
            v110 = v48;
            v36 = v107;
            v49 = v46;
            v35 = (uint64_t)v105;
            objc_autoreleasePoolPop(v49);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            v34 = (uint64_t)v104;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v36);
            v50 = v47;
            v39 = v106;
            sub_100005CF0(v50, v34, &qword_10110B488);
            v14 = v40;
          }
          v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v34, 1, v39);
          v52 = (uint64_t)v113;
          if (v51 == 1)
          {
            v20 = v111;
            goto LABEL_15;
          }
          v53 = v109;
          sub_100005CF0(v34, v109, (uint64_t *)&unk_101111990);
          sub_100005CF0(v53, v52, (uint64_t *)&unk_101111990);
          if (swift_getEnumCaseMultiPayload(v52, v39) != 1)
            break;
          sub_100004048(v52, (uint64_t *)&unk_101111990);
          v54 = v118;
          sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
          v55 = v115(v54, 1, v7);
          v20 = v111;
          if (v55 == 1)
            goto LABEL_13;
        }
        sub_100004048(v108, (uint64_t *)&unk_101111970);
        v78 = v52;
        v58 = v93;
        sub_1000126EC(v78, v93, type metadata accessor for MemberPeerTrust);
        v57 = 0;
        v20 = v111;
      }
      v59 = v101;
      v60 = v57;
      v61 = v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v58, v60, 1, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1, v61) == 1)
      {
        v85 = v98;
        v84 = v100;
        goto LABEL_42;
      }
      result = sub_1000126EC(v58, v97, type metadata accessor for MemberPeerTrust);
      v63 = v98;
      if (v98)
      {
        v32 = v100;
        goto LABEL_38;
      }
      v64 = v100[3];
      if ((uint64_t)((v64 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_47;
      v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
      if (v65 <= 1)
        v66 = 1;
      else
        v66 = v65;
      v67 = sub_10001A9A8(&qword_101109110);
      v68 = *(_QWORD *)(v101 + 72);
      v69 = v90;
      v32 = (_QWORD *)swift_allocObject(v67, v90 + v68 * v66, v89);
      result = j__malloc_size(v32);
      if (!v68)
        goto LABEL_48;
      v70 = result - v69;
      if (result - v69 == 0x8000000000000000 && v68 == -1)
        goto LABEL_49;
      v72 = v70 / v68;
      v32[2] = v66;
      v32[3] = 2 * (v70 / v68);
      v73 = (char *)v32 + v69;
      v74 = v100;
      v75 = v100[3] >> 1;
      v76 = v75 * v68;
      if (v100[2])
        break;
LABEL_37:
      v99 = &v73[v76];
      v63 = (v72 & 0x7FFFFFFFFFFFFFFFLL) - v75;
      result = swift_release();
      v34 = (uint64_t)v104;
      v35 = (uint64_t)v105;
LABEL_38:
      v36 = v107;
      v79 = __OFSUB__(v63, 1);
      v80 = v63 - 1;
      if (v79)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      v98 = v80;
      v81 = (uint64_t)v99;
      sub_1000126EC(v97, (uint64_t)v99, type metadata accessor for MemberPeerTrust);
      v99 = (char *)(v81 + *(_QWORD *)(v101 + 72));
      sub_10000F9B8((uint64_t)v96, (uint64_t)v20, (uint64_t *)&unk_101111980);
      v21 = v95;
      v82 = v92(v20, 1, v95);
      v33 = v32;
      if (v82 == 1)
        goto LABEL_40;
    }
    v77 = (char *)v100 + v69;
    if (v32 < v100 || v73 >= &v77[v76])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v32 + v69, v77, v75, v94);
    }
    else
    {
      if (v32 == v100)
      {
LABEL_36:
        v74[2] = 0;
        goto LABEL_37;
      }
      swift_arrayInitWithTakeBackToFront((char *)v32 + v69, v77);
    }
    v74 = v100;
    goto LABEL_36;
  }
  v98 = 0;
LABEL_40:
  sub_100004048((uint64_t)v20, (uint64_t *)&unk_101111980);
  v83 = v93;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v93, 1, 1, v94);
  v84 = v32;
  v58 = v83;
  v85 = v98;
LABEL_42:
  sub_100004048((uint64_t)v96, &qword_10110ABC0);
  sub_100004048(v58, &qword_1010EC868);
  v86 = v84[3];
  result = (size_t)v84;
  if (v86 >= 2)
  {
    v87 = v86 >> 1;
    v79 = __OFSUB__(v87, v85);
    v88 = v87 - v85;
    if (v79)
      goto LABEL_50;
    v84[2] = v88;
  }
  return result;
}

size_t sub_100892130(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t result;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v117 = a1;
  v1 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v1);
  v105 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v103 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v5);
  v118 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DirectorySequence(0);
  v116 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110B468);
  v11 = __chkstk_darwin(v10);
  v102 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (char *)&v89 - v13;
  v106 = sub_10001A9A8((uint64_t *)&unk_1011115C0);
  v14 = *(_QWORD *)(v106 - 8);
  v15 = __chkstk_darwin(v106);
  v113 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v109 = (uint64_t)&v89 - v17;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F77C0);
  __chkstk_darwin(v18);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v108 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010EE0E0);
  __chkstk_darwin(v24);
  v93 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for OwnerSharingCircle(0);
  v26 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v97 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  __chkstk_darwin(v28);
  v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v26;
  v31 = *(unsigned __int8 *)(v26 + 80);
  sub_10000F9B8(v117, (uint64_t)v30, (uint64_t *)&unk_1010F77B0);
  v96 = v30;
  sub_10000F9B8((uint64_t)v30, (uint64_t)v20, (uint64_t *)&unk_1010F77C0);
  v91 = v22;
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v32 = _swiftEmptyArrayStorage;
  if (v92(v20, 1, v21) != 1)
  {
    v98 = 0;
    v110 = 0;
    v90 = (v31 + 32) & ~v31;
    v99 = (char *)_swiftEmptyArrayStorage + v90;
    v89 = v31 | 7;
    v33 = _swiftEmptyArrayStorage;
    v34 = (uint64_t)v104;
    v35 = (uint64_t)v105;
    v36 = v107;
    v111 = v20;
    v112 = v3;
    v95 = v21;
    while (1)
    {
      v100 = v33;
      v37 = v108;
      sub_100005CF0((uint64_t)v20, v108, (uint64_t *)&unk_1011115B0);
      v117 = v37 + *(int *)(v21 + 40);
      v38 = v118;
      sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
      v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
      if (v115(v38, 1, v7) == 1)
      {
        v39 = v106;
LABEL_13:
        sub_100004048(v118, (uint64_t *)&unk_1010F77A0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1, 1, v39);
LABEL_15:
        sub_100004048(v108, (uint64_t *)&unk_1011115B0);
        sub_100004048(v34, &qword_10110B468);
        v56 = (uint64_t)v96;
        sub_100004048((uint64_t)v96, (uint64_t *)&unk_1010F77C0);
        v57 = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v56, 1, 1, v95);
        v58 = v93;
      }
      else
      {
        v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32);
        v39 = v106;
        while (1)
        {
          v40 = v14;
          v41 = v114(v9, v118, v7);
          DirectorySequence.next()(v41);
          v42 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v35, 1, v36) == 1)
          {
            v43 = v116;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            sub_100004048(v35, &qword_1010FBA40);
            v44 = v117;
            sub_100004048(v117, (uint64_t *)&unk_1010F77A0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v7);
            v14 = v40;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, 1, 1, v39);
          }
          else
          {
            v45 = v103;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v103, v35, v36);
            v46 = objc_autoreleasePoolPush();
            v47 = v102;
            v48 = v110;
            sub_100A7F200((void (*)(_QWORD))v45, v108, v102);
            v110 = v48;
            v36 = v107;
            v49 = v46;
            v35 = (uint64_t)v105;
            objc_autoreleasePoolPop(v49);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            v34 = (uint64_t)v104;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v36);
            v50 = v47;
            v39 = v106;
            sub_100005CF0(v50, v34, &qword_10110B468);
            v14 = v40;
          }
          v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v34, 1, v39);
          v52 = (uint64_t)v113;
          if (v51 == 1)
          {
            v20 = v111;
            goto LABEL_15;
          }
          v53 = v109;
          sub_100005CF0(v34, v109, (uint64_t *)&unk_1011115C0);
          sub_100005CF0(v53, v52, (uint64_t *)&unk_1011115C0);
          if (swift_getEnumCaseMultiPayload(v52, v39) != 1)
            break;
          sub_100004048(v52, (uint64_t *)&unk_1011115C0);
          v54 = v118;
          sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
          v55 = v115(v54, 1, v7);
          v20 = v111;
          if (v55 == 1)
            goto LABEL_13;
        }
        sub_100004048(v108, (uint64_t *)&unk_1011115B0);
        v78 = v52;
        v58 = v93;
        sub_1000126EC(v78, v93, type metadata accessor for OwnerSharingCircle);
        v57 = 0;
        v20 = v111;
      }
      v59 = v101;
      v60 = v57;
      v61 = v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v58, v60, 1, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1, v61) == 1)
      {
        v85 = v98;
        v84 = v100;
        goto LABEL_42;
      }
      result = sub_1000126EC(v58, v97, type metadata accessor for OwnerSharingCircle);
      v63 = v98;
      if (v98)
      {
        v32 = v100;
        goto LABEL_38;
      }
      v64 = v100[3];
      if ((uint64_t)((v64 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_47;
      v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
      if (v65 <= 1)
        v66 = 1;
      else
        v66 = v65;
      v67 = sub_10001A9A8(&qword_1010EE360);
      v68 = *(_QWORD *)(v101 + 72);
      v69 = v90;
      v32 = (_QWORD *)swift_allocObject(v67, v90 + v68 * v66, v89);
      result = j__malloc_size(v32);
      if (!v68)
        goto LABEL_48;
      v70 = result - v69;
      if (result - v69 == 0x8000000000000000 && v68 == -1)
        goto LABEL_49;
      v72 = v70 / v68;
      v32[2] = v66;
      v32[3] = 2 * (v70 / v68);
      v73 = (char *)v32 + v69;
      v74 = v100;
      v75 = v100[3] >> 1;
      v76 = v75 * v68;
      if (v100[2])
        break;
LABEL_37:
      v99 = &v73[v76];
      v63 = (v72 & 0x7FFFFFFFFFFFFFFFLL) - v75;
      result = swift_release();
      v34 = (uint64_t)v104;
      v35 = (uint64_t)v105;
LABEL_38:
      v36 = v107;
      v79 = __OFSUB__(v63, 1);
      v80 = v63 - 1;
      if (v79)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      v98 = v80;
      v81 = (uint64_t)v99;
      sub_1000126EC(v97, (uint64_t)v99, type metadata accessor for OwnerSharingCircle);
      v99 = (char *)(v81 + *(_QWORD *)(v101 + 72));
      sub_10000F9B8((uint64_t)v96, (uint64_t)v20, (uint64_t *)&unk_1010F77C0);
      v21 = v95;
      v82 = v92(v20, 1, v95);
      v33 = v32;
      if (v82 == 1)
        goto LABEL_40;
    }
    v77 = (char *)v100 + v69;
    if (v32 < v100 || v73 >= &v77[v76])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v32 + v69, v77, v75, v94);
    }
    else
    {
      if (v32 == v100)
      {
LABEL_36:
        v74[2] = 0;
        goto LABEL_37;
      }
      swift_arrayInitWithTakeBackToFront((char *)v32 + v69, v77);
    }
    v74 = v100;
    goto LABEL_36;
  }
  v98 = 0;
LABEL_40:
  sub_100004048((uint64_t)v20, (uint64_t *)&unk_1010F77C0);
  v83 = v93;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v93, 1, 1, v94);
  v84 = v32;
  v58 = v83;
  v85 = v98;
LABEL_42:
  sub_100004048((uint64_t)v96, (uint64_t *)&unk_1010F77B0);
  sub_100004048(v58, &qword_1010EE0E0);
  v86 = v84[3];
  result = (size_t)v84;
  if (v86 >= 2)
  {
    v87 = v86 >> 1;
    v79 = __OFSUB__(v87, v85);
    v88 = v87 - v85;
    if (v79)
      goto LABEL_50;
    v84[2] = v88;
  }
  return result;
}

size_t sub_100892AD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t result;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v117 = a1;
  v1 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v1);
  v105 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v103 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v5);
  v118 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DirectorySequence(0);
  v116 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110B470);
  v11 = __chkstk_darwin(v10);
  v102 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (char *)&v89 - v13;
  v106 = sub_10001A9A8(&qword_10110B478);
  v14 = *(_QWORD *)(v106 - 8);
  v15 = __chkstk_darwin(v106);
  v113 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v109 = (uint64_t)&v89 - v17;
  v18 = sub_10001A9A8(&qword_10110ABB0);
  __chkstk_darwin(v18);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_10110ABA8);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v108 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8((uint64_t *)&unk_101111620);
  __chkstk_darwin(v24);
  v93 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for SharingCircleSecret(0);
  v26 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v97 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8((uint64_t *)&unk_101111600);
  __chkstk_darwin(v28);
  v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v26;
  v31 = *(unsigned __int8 *)(v26 + 80);
  sub_10000F9B8(v117, (uint64_t)v30, (uint64_t *)&unk_101111600);
  v96 = v30;
  sub_10000F9B8((uint64_t)v30, (uint64_t)v20, &qword_10110ABB0);
  v91 = v22;
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v32 = _swiftEmptyArrayStorage;
  if (v92(v20, 1, v21) != 1)
  {
    v98 = 0;
    v110 = 0;
    v90 = (v31 + 32) & ~v31;
    v99 = (char *)_swiftEmptyArrayStorage + v90;
    v89 = v31 | 7;
    v33 = _swiftEmptyArrayStorage;
    v34 = (uint64_t)v104;
    v35 = (uint64_t)v105;
    v36 = v107;
    v111 = v20;
    v112 = v3;
    v95 = v21;
    while (1)
    {
      v100 = v33;
      v37 = v108;
      sub_100005CF0((uint64_t)v20, v108, &qword_10110ABA8);
      v117 = v37 + *(int *)(v21 + 40);
      v38 = v118;
      sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
      v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
      if (v115(v38, 1, v7) == 1)
      {
        v39 = v106;
LABEL_13:
        sub_100004048(v118, (uint64_t *)&unk_1010F77A0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1, 1, v39);
LABEL_15:
        sub_100004048(v108, &qword_10110ABA8);
        sub_100004048(v34, &qword_10110B470);
        v56 = (uint64_t)v96;
        sub_100004048((uint64_t)v96, &qword_10110ABB0);
        v57 = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v56, 1, 1, v95);
        v58 = v93;
      }
      else
      {
        v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32);
        v39 = v106;
        while (1)
        {
          v40 = v14;
          v41 = v114(v9, v118, v7);
          DirectorySequence.next()(v41);
          v42 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v35, 1, v36) == 1)
          {
            v43 = v116;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            sub_100004048(v35, &qword_1010FBA40);
            v44 = v117;
            sub_100004048(v117, (uint64_t *)&unk_1010F77A0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v7);
            v14 = v40;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, 1, 1, v39);
          }
          else
          {
            v45 = v103;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v103, v35, v36);
            v46 = objc_autoreleasePoolPush();
            v47 = v102;
            v48 = v110;
            sub_100A7F2CC((void (*)(_QWORD))v45, v108, v102);
            v110 = v48;
            v36 = v107;
            v49 = v46;
            v35 = (uint64_t)v105;
            objc_autoreleasePoolPop(v49);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            v34 = (uint64_t)v104;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v36);
            v50 = v47;
            v39 = v106;
            sub_100005CF0(v50, v34, &qword_10110B470);
            v14 = v40;
          }
          v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v34, 1, v39);
          v52 = (uint64_t)v113;
          if (v51 == 1)
          {
            v20 = v111;
            goto LABEL_15;
          }
          v53 = v109;
          sub_100005CF0(v34, v109, &qword_10110B478);
          sub_100005CF0(v53, v52, &qword_10110B478);
          if (swift_getEnumCaseMultiPayload(v52, v39) != 1)
            break;
          sub_100004048(v52, &qword_10110B478);
          v54 = v118;
          sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
          v55 = v115(v54, 1, v7);
          v20 = v111;
          if (v55 == 1)
            goto LABEL_13;
        }
        sub_100004048(v108, &qword_10110ABA8);
        v78 = v52;
        v58 = v93;
        sub_1000126EC(v78, v93, type metadata accessor for SharingCircleSecret);
        v57 = 0;
        v20 = v111;
      }
      v59 = v101;
      v60 = v57;
      v61 = v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v58, v60, 1, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1, v61) == 1)
      {
        v85 = v98;
        v84 = v100;
        goto LABEL_42;
      }
      result = sub_1000126EC(v58, v97, type metadata accessor for SharingCircleSecret);
      v63 = v98;
      if (v98)
      {
        v32 = v100;
        goto LABEL_38;
      }
      v64 = v100[3];
      if ((uint64_t)((v64 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_47;
      v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
      if (v65 <= 1)
        v66 = 1;
      else
        v66 = v65;
      v67 = sub_10001A9A8(&qword_1010ED350);
      v68 = *(_QWORD *)(v101 + 72);
      v69 = v90;
      v32 = (_QWORD *)swift_allocObject(v67, v90 + v68 * v66, v89);
      result = j__malloc_size(v32);
      if (!v68)
        goto LABEL_48;
      v70 = result - v69;
      if (result - v69 == 0x8000000000000000 && v68 == -1)
        goto LABEL_49;
      v72 = v70 / v68;
      v32[2] = v66;
      v32[3] = 2 * (v70 / v68);
      v73 = (char *)v32 + v69;
      v74 = v100;
      v75 = v100[3] >> 1;
      v76 = v75 * v68;
      if (v100[2])
        break;
LABEL_37:
      v99 = &v73[v76];
      v63 = (v72 & 0x7FFFFFFFFFFFFFFFLL) - v75;
      result = swift_release();
      v34 = (uint64_t)v104;
      v35 = (uint64_t)v105;
LABEL_38:
      v36 = v107;
      v79 = __OFSUB__(v63, 1);
      v80 = v63 - 1;
      if (v79)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      v98 = v80;
      v81 = (uint64_t)v99;
      sub_1000126EC(v97, (uint64_t)v99, type metadata accessor for SharingCircleSecret);
      v99 = (char *)(v81 + *(_QWORD *)(v101 + 72));
      sub_10000F9B8((uint64_t)v96, (uint64_t)v20, &qword_10110ABB0);
      v21 = v95;
      v82 = v92(v20, 1, v95);
      v33 = v32;
      if (v82 == 1)
        goto LABEL_40;
    }
    v77 = (char *)v100 + v69;
    if (v32 < v100 || v73 >= &v77[v76])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v32 + v69, v77, v75, v94);
    }
    else
    {
      if (v32 == v100)
      {
LABEL_36:
        v74[2] = 0;
        goto LABEL_37;
      }
      swift_arrayInitWithTakeBackToFront((char *)v32 + v69, v77);
    }
    v74 = v100;
    goto LABEL_36;
  }
  v98 = 0;
LABEL_40:
  sub_100004048((uint64_t)v20, &qword_10110ABB0);
  v83 = v93;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v93, 1, 1, v94);
  v84 = v32;
  v58 = v83;
  v85 = v98;
LABEL_42:
  sub_100004048((uint64_t)v96, (uint64_t *)&unk_101111600);
  sub_100004048(v58, (uint64_t *)&unk_101111620);
  v86 = v84[3];
  result = (size_t)v84;
  if (v86 >= 2)
  {
    v87 = v86 >> 1;
    v79 = __OFSUB__(v87, v85);
    v88 = v87 - v85;
    if (v79)
      goto LABEL_50;
    v84[2] = v88;
  }
  return result;
}

uint64_t sub_100893480(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  swift_bridgeObjectRetain(a1);
  result = sub_100885D20();
  v5 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v6 = result;
    v7 = v2;
    v8 = v3;
    v9 = v4;
    v10 = 0;
    v11 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      if (!v10)
      {
        v12 = v5[3];
        if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
        if (v13 <= 1)
          v14 = 1;
        else
          v14 = v13;
        v15 = sub_10001A9A8(&qword_1010ED190);
        v16 = (_QWORD *)swift_allocObject(v15, 32 * v14 + 32, 7);
        v17 = j__malloc_size(v16);
        v18 = v17 - 32;
        if (v17 < 32)
          v18 = v17 - 1;
        v19 = v18 >> 5;
        v16[2] = v14;
        v16[3] = 2 * (v18 >> 5);
        v20 = (unint64_t)(v16 + 4);
        v21 = v5[3] >> 1;
        if (v5[2])
        {
          if (v16 != v5 || v20 >= (unint64_t)&v5[4 * v21 + 4])
            memmove(v16 + 4, v5 + 4, 32 * v21);
          v5[2] = 0;
        }
        v11 = (uint64_t *)(v20 + 32 * v21);
        v10 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
        result = swift_release(v5);
        v5 = v16;
      }
      v23 = __OFSUB__(v10--, 1);
      if (v23)
        break;
      *v11 = v6;
      v11[1] = v7;
      v11[2] = v8;
      v11[3] = v9;
      v11 += 4;
      result = sub_100885D20();
      v6 = result;
      v7 = v24;
      v8 = v25;
      v9 = v26;
      if (!v25)
        goto LABEL_23;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v10 = 0;
LABEL_23:
  result = sub_10007CC38(a1);
  v27 = v5[3];
  if (v27 < 2)
    return (uint64_t)v5;
  v28 = v27 >> 1;
  v23 = __OFSUB__(v28, v10);
  v29 = v28 - v10;
  if (!v23)
  {
    v5[2] = v29;
    return (uint64_t)v5;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100893644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  id v11;
  NSURL *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  id v16;
  uint64_t (*v17)(_BYTE *, uint64_t);
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  id v32;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for BeaconStoreFileRecord(0);
  sub_10000F9B8(a1 + *(int *)(v9 + 20), (uint64_t)v4, &qword_1010FBA40);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return sub_100004048((uint64_t)v4, &qword_1010FBA40);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v4, v5);
  v11 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  v32 = 0;
  v15 = objc_msgSend(v11, "removeItemAtURL:error:", v13, &v32);

  v16 = v32;
  if (v15)
  {
    v17 = *(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8);
    v18 = v32;
    return v17(v8, v5);
  }
  else
  {
    v19 = v32;
    v20 = (void *)_convertNSErrorToError(_:)(v16);

    v22 = swift_willThrow(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v24 = qword_1011B7D38;
    v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v26 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
    v32 = v20;
    swift_errorRetain(v20);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v28 = String.init<A>(describing:)(&v32, v27);
    v30 = v29;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = sub_10001AA00();
    *(_QWORD *)(v26 + 32) = v28;
    *(_QWORD *)(v26 + 40) = v30;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Could not delete tombstoned record %@", 37, 2, v26);
    swift_bridgeObjectRelease(v26);
    swift_errorRelease(v20);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void sub_100893908(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  __objc2_ivar_list **p_ivars;
  _QWORD *v10;
  uint64_t v11;
  NSString v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  __objc2_ivar_list *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;

  v3 = a1;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v33 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  v10 = &unk_10110B000;
  v31 = v4;
  v32 = v11;
  if (v7)
    goto LABEL_6;
LABEL_7:
  v15 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v15 < v33)
    {
      v16 = *(_QWORD *)(v4 + 8 * v15);
      ++v8;
      if (v16)
        goto LABEL_22;
      v8 = v15 + 1;
      if (v15 + 1 >= v33)
        goto LABEL_33;
      v16 = *(_QWORD *)(v4 + 8 * v8);
      if (v16)
        goto LABEL_22;
      v8 = v15 + 2;
      if (v15 + 2 >= v33)
        goto LABEL_33;
      v16 = *(_QWORD *)(v4 + 8 * v8);
      if (v16)
        goto LABEL_22;
      v8 = v15 + 3;
      if (v15 + 3 >= v33)
        goto LABEL_33;
      v16 = *(_QWORD *)(v4 + 8 * v8);
      if (v16)
      {
LABEL_22:
        v7 = (v16 - 1) & v16;
        for (i = __clz(__rbit64(v16)) + (v8 << 6); ; i = v13 | (v8 << 6))
        {
          v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
          v19 = *v18;
          v20 = v18[1];
          v21 = p_ivars[505];
          swift_bridgeObjectRetain(v20);
          if (v21 != (__objc2_ivar_list *)-1)
            swift_once(&qword_1010E9FC8, sub_100885F08);
          if ((sub_100A06590(v19, v20, v10[21]) & 1) != 0)
          {
            if (qword_1010E9F80 != -1)
              swift_once(&qword_1010E9F80, sub_1007FA778);
            v22 = type metadata accessor for Logger(0);
            sub_10001A9E8(v22, (uint64_t)qword_1011B77E8);
            swift_bridgeObjectRetain_n(v20, 2);
            v24 = Logger.logObject.getter(v23);
            v25 = static os_log_type_t.debug.getter(v24);
            if (os_log_type_enabled(v24, v25))
            {
              v26 = swift_slowAlloc(12, -1);
              v27 = a2;
              v28 = swift_slowAlloc(32, -1);
              v34 = v28;
              *(_DWORD *)v26 = 136315138;
              swift_bridgeObjectRetain(v20);
              *(_QWORD *)(v26 + 4) = sub_100016940(v19, v20, &v34);
              swift_bridgeObjectRelease_n(v20, 3);
              _os_log_impl((void *)&_mh_execute_header, v24, v25, "Ignore persisted user defaults: %s", (uint8_t *)v26, 0xCu);
              swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
              v29 = v28;
              a2 = v27;
              v3 = v32;
              swift_slowDealloc(v29, -1, -1);
              v30 = v26;
              v4 = v31;
              swift_slowDealloc(v30, -1, -1);
              swift_bridgeObjectRelease();

            }
            else
            {

              swift_bridgeObjectRelease_n(v20, 3);
            }
            p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
            v10 = (_QWORD *)&unk_10110B000;
            if (!v7)
              goto LABEL_7;
          }
          else
          {
            v12 = String._bridgeToObjectiveC()();
            objc_msgSend(a2, "removeObjectForKey:", v12);
            swift_bridgeObjectRelease();

            if (!v7)
              goto LABEL_7;
          }
LABEL_6:
          v13 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v17 = v15 + 4;
      if (v17 < v33)
      {
        v16 = *(_QWORD *)(v4 + 8 * v17);
        if (v16)
        {
          v8 = v17;
          goto LABEL_22;
        }
        while (1)
        {
          v8 = v17 + 1;
          if (__OFADD__(v17, 1))
            goto LABEL_35;
          if (v8 >= v33)
            break;
          v16 = *(_QWORD *)(v4 + 8 * v8);
          ++v17;
          if (v16)
            goto LABEL_22;
        }
      }
    }
LABEL_33:
    swift_release();
    return;
  }
  __break(1u);
LABEL_35:
  __break(1u);
}

_QWORD *sub_100893C7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  int v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  id v64;
  _OWORD v65[2];
  __int128 v66;
  __int128 v67;

  v52 = type metadata accessor for BeaconStoreFileRecord(0);
  v51 = *(_QWORD *)(v52 - 8);
  v2 = __chkstk_darwin(v52);
  v56 = (uint64_t)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v55 = (uint64_t)&v49 - v4;
  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  __chkstk_darwin(v8);
  v54 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v57 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v49 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v49 - v20;
  v22 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v53 = a1;
  v23 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, 0, 0, 0, 0);

  v64 = v23;
  if (v23)
  {
    v58 = _swiftEmptyArrayStorage;
    v62 = (unint64_t)"shold: %{public}@";
    v63 = (char *)&type metadata for Any + 8;
    v59 = 0x8000000100ECC9E0;
    while (1)
    {
      v24 = objc_msgSend(v64, "nextObject");
      if (v24)
      {
        v25 = v24;
        _bridgeAnyObjectToAny(_:)(v65, v24);
        swift_unknownObjectRelease(v25);
      }
      else
      {
        memset(v65, 0, sizeof(v65));
      }
      sub_100005CF0((uint64_t)v65, (uint64_t)&v66, (uint64_t *)&unk_1010F6390);
      if (!*((_QWORD *)&v67 + 1))
      {
        v47 = v58;
        goto LABEL_22;
      }
      v26 = swift_dynamicCast(v12, &v66, v63, v13, 6);
      v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
      v27(v12, v26 ^ 1u, 1, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
      {
        v47 = v58;
        goto LABEL_24;
      }
      v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v21, v12, v13);
      v29 = URL.pathExtension.getter(v28);
      if (v29 == 0xD000000000000010 && v30 == v59)
      {
        v31 = swift_bridgeObjectRelease();
LABEL_13:
        v33 = URL.deletingPathExtension()(v31);
        v34 = URL.lastPathComponent.getter(v33);
        v36 = v35;
        v37 = *(void (**)(char *, uint64_t))(v14 + 8);
        v37(v19, v13);
        UUID.init(uuidString:)(v34, v36);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v7, 1, v61) == 1)
        {
          v37(v21, v13);
          sub_100004048((uint64_t)v7, &qword_1010ED860);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v54, v7, v61);
          v50 = objc_autoreleasePoolPush();
          v38 = UUID.uuidString.getter(v50);
          URL.appendingPathComponent(_:)(v38, v39);
          swift_bridgeObjectRelease();
          URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
          v37(v19, v13);
          objc_autoreleasePoolPop(v50);
          v40 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 16);
          v41 = v55;
          v40(v55, v57, v13);
          v42 = v40;
          v43 = v41 + *(int *)(v52 + 20);
          v42(v43, v21, v13);
          v27((char *)v43, 0, 1, v13);
          sub_10005972C(v41, v56, type metadata accessor for BeaconStoreFileRecord);
          if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
            v58 = (_QWORD *)sub_1007C8660(0, v58[2] + 1, 1, (unint64_t)v58);
          v45 = v58[2];
          v44 = v58[3];
          if (v45 >= v44 >> 1)
            v58 = (_QWORD *)sub_1007C8660(v44 > 1, v45 + 1, 1, (unint64_t)v58);
          v46 = v58;
          v58[2] = v45 + 1;
          sub_1000126EC(v56, (uint64_t)v46+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v45, type metadata accessor for BeaconStoreFileRecord);
          sub_1000126B0(v55, type metadata accessor for BeaconStoreFileRecord);
          v37(v57, v13);
          (*(void (**)(char *, uint64_t))(v60 + 8))(v54, v61);
          v37(v21, v13);
        }
      }
      else
      {
        v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, 0xD000000000000010, v62 | 0x8000000000000000, 0);
        v31 = swift_bridgeObjectRelease();
        if ((v32 & 1) != 0)
          goto LABEL_13;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
      }
    }
  }
  v66 = 0u;
  v67 = 0u;
  v47 = _swiftEmptyArrayStorage;
LABEL_22:
  sub_100004048((uint64_t)&v66, (uint64_t *)&unk_1010F6390);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
LABEL_24:

  sub_100004048((uint64_t)v12, &qword_1010FBA40);
  return v47;
}

uint64_t sub_100894288(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  id v11;
  NSURL *v12;
  void *v13;
  void *v14;
  NSURL *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  id v19;
  uint64_t (*v20)(_BYTE *, uint64_t);
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  id v35;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = &v34[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for BeaconStoreFileRecord(0);
  sub_10000F9B8(a1 + *(int *)(v9 + 20), (uint64_t)v4, &qword_1010FBA40);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return sub_100004048((uint64_t)v4, &qword_1010FBA40);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v4, v5);
  v11 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  URL._bridgeToObjectiveC()(v15);
  v17 = v16;
  v35 = 0;
  v18 = objc_msgSend(v11, "moveItemAtURL:toURL:error:", v14, v16, &v35);

  v19 = v35;
  if (v18)
  {
    v20 = *(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8);
    v21 = v35;
    return v20(v8, v5);
  }
  else
  {
    v22 = v35;
    v23 = (void *)_convertNSErrorToError(_:)(v19);

    v25 = swift_willThrow(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v27 = qword_1011B7D38;
    v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
    v35 = v23;
    swift_errorRetain(v23);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v31 = String.init<A>(describing:)(&v35, v30);
    v33 = v32;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_10001AA00();
    *(_QWORD *)(v29 + 32) = v31;
    *(_QWORD *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Could not restore record %@", 27, 2, v29);
    swift_bridgeObjectRelease(v29);
    swift_errorRelease(v23);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_100894564()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100894590()
{
  uint64_t v0;

  return sub_10088D1A4(*(NSObject **)(v0 + 16));
}

uint64_t sub_100894598()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008945A8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008945CC(uint64_t a1)
{
  uint64_t v1;

  return sub_100C53B40(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1008945E4()
{
  uint64_t *v0;

  sub_10088B7CC(v0[4], v0[5], v0[2], v0[3]);
}

void sub_100894600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;

  v7 = objc_autoreleasePoolPush();
  sub_10088C128(a1, a2, a4, &v8);
  objc_autoreleasePoolPop(v7);
}

uint64_t sub_100894688()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7ACF4);
}

uint64_t sub_1008946A4()
{
  return sub_10088044C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100A7AD64);
}

uint64_t sub_1008946C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100888320(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_1008946F0(int a1, void (*a2)(char *, char *, uint64_t), void (*a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  int v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(os_log_t, uint64_t);
  _BYTE v27[8];
  void (*v28)(os_log_t, uint64_t);
  uint64_t v29;
  void (*v30)(_QWORD, _QWORD, _QWORD);
  _QWORD v31[5];
  _QWORD v32[7];

  v4 = v3;
  v8 = sub_1000188D0();
  swift_retain();
  v9 = sub_100896AD0((uint64_t)v8, v4);
  swift_bridgeObjectRelease();
  swift_release();
  CurrentValueSubject.value.getter(v32);
  if (LOBYTE(v32[0]) == 7)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B75D0);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "SeparationStateSyncService: Responding to remote sync request", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    sub_1008969B0(v4 + 40, (uint64_t)v32);
    if (v32[3])
    {
      sub_100030784((uint64_t)v32, (uint64_t)v31);
      sub_100004048((uint64_t)v32, &qword_10110B618);
      v15 = *sub_10001AA44(v31, v31[3]);
      swift_bridgeObjectRetain(v9);
      sub_10038A68C(15, 1, (uint64_t)v9, (uint64_t)v27);
      v21 = v29;
      v26 = v28;
      v22 = v30;
      v23 = v27[0];
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(a3);
      v24 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
      v25 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
      sub_1003BFD0C(v23, v26, v21, v22, v24, a1, (uint64_t)a2, (uint64_t)a3, 0, 0, 1, 1, (void (*)(char *, char *, uint64_t))&_swiftEmptySetSingleton, v25, 0, v15, (uint64_t)v9, a1, a2,
        a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v21, (unint64_t)v22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v32, &qword_10110B618);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B75D0);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "SeparationStateSyncService: This is not the monitoring device, won't accept remote sync request.", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

  }
}

uint64_t sub_100894BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v7 = type metadata accessor for BeaconObservation(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  v8 = __chkstk_darwin(v7);
  v37 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
  swift_retain_n(a2, 2);
  v33 = objc_autoreleasePoolPush();
  v14 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v12, v14);
  v32 = v3;
  v15 = v38;
  if (!v38[2] || (v16 = sub_100003FB0(a1 + v13), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v23 = _swiftEmptyArrayStorage;
LABEL_18:
    objc_autoreleasePoolPop(v33);
    swift_release_n(a2, 2);
    sub_100A797E8((uint64_t)v23, a3);
    return swift_bridgeObjectRelease();
  }
  v18 = *(_QWORD *)(v15[7] + 8 * v16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  v19 = sub_100508D98(v18);
  swift_bridgeObjectRelease();
  sub_10088FD00((uint64_t)v19);
  v21 = v20;
  result = swift_release();
  v23 = _swiftEmptyArrayStorage;
  v38 = _swiftEmptyArrayStorage;
  v34 = *(_QWORD *)(v21 + 16);
  if (!v34)
  {
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  v30 = a2;
  v31 = a3;
  v24 = 0;
  while (v24 < *(_QWORD *)(v21 + 16))
  {
    v25 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    v26 = *(_QWORD *)(v35 + 72);
    sub_10012D874(v21 + v25 + v26 * v24, (uint64_t)v11);
    v27 = qword_100E52160[v11[*(int *)(v36 + 24)]];
    if (v27 == 700 || v27 == 701)
    {
      sub_10012D934((uint64_t)v11, v37);
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
        sub_10009AAC8(0, v23[2] + 1, 1);
      v23 = v38;
      v29 = v38[2];
      v28 = v38[3];
      if (v29 >= v28 >> 1)
      {
        sub_10009AAC8(v28 > 1, v29 + 1, 1);
        v23 = v38;
      }
      v23[2] = v29 + 1;
      result = sub_10012D934(v37, (uint64_t)v23 + v25 + v29 * v26);
    }
    else
    {
      result = sub_10012D8F8((uint64_t)v11);
    }
    if (v34 == ++v24)
    {
      v23 = v38;
      a2 = v30;
      a3 = v31;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

void sub_100894E80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  char *v98;
  _QWORD *v99;
  __int128 v100;
  char *v101;
  __n128 v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126[2];
  uint64_t v127;

  v3 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v3);
  v5 = (char *)v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BeaconObservation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v108 = (char *)v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v109 = (uint64_t)v97 - v11;
  v12 = __chkstk_darwin(v10);
  v107 = (char *)v97 - v13;
  v14 = __chkstk_darwin(v12);
  v98 = (char *)v97 - v15;
  v16 = __chkstk_darwin(v14);
  v125 = (uint64_t)v97 - v17;
  v18 = __chkstk_darwin(v16);
  v123 = (char *)v97 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)v97 - v21;
  v23 = __chkstk_darwin(v20);
  v116 = (char *)v97 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)v97 - v26;
  __chkstk_darwin(v25);
  v121 = (uint64_t)v97 - v28;
  v122 = v1;
  CurrentValueSubject.value.getter(v126);
  if (LOBYTE(v126[0]) == 7)
  {
    if (qword_1010E9F10 != -1)
      goto LABEL_60;
    goto LABEL_3;
  }
  v112 = *(_QWORD *)(a1 + 16);
  if (v112)
  {
    v104 = v27;
    v117 = *(_QWORD *)(v122 + 24);
    v34 = *(unsigned __int8 *)(v7 + 80);
    v35 = (v34 + 32) & ~v34;
    v111 = a1 + v35;
    v110 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue;
    v36 = *(_QWORD *)(v7 + 72);
    v106 = (v34 + 24) & ~v34;
    v105 = v106 + v8;
    v113 = v34 | 7;
    v124 = v35;
    v103 = v36 + v35;
    v97[1] = a1;
    v37 = swift_bridgeObjectRetain(a1);
    v38 = 0;
    v39 = 0;
    v37.n128_u64[0] = 136315138;
    v102 = v37;
    v101 = (char *)&type metadata for Any + 8;
    v100 = xmmword_100E22B00;
    v99 = &type metadata for () + 1;
    v114 = v7;
    v115 = v5;
    v40 = v121;
    while (1)
    {
      v119 = v38;
      sub_10012D874(v111 + v36 * v38, v40);
      swift_retain();
      v120 = objc_autoreleasePoolPush();
      v43 = v117;
      v44 = sub_10001A9A8(&qword_1010F7770);
      OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v43, v44);
      v118 = v39;
      v45 = v126[0];
      if (*(_QWORD *)(v126[0] + 16))
      {
        v46 = sub_100003FB0(v40);
        v47 = (uint64_t)v116;
        if ((v48 & 1) != 0)
        {
          v49 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46);
          swift_bridgeObjectRetain(v49);
          swift_bridgeObjectRelease();
          v50 = sub_100508D98(v49);
          swift_bridgeObjectRelease();
          sub_10088FD00((uint64_t)v50);
          v52 = v51;
          swift_release();
          v53 = _swiftEmptyArrayStorage;
          v126[0] = (uint64_t)_swiftEmptyArrayStorage;
          v54 = *(_QWORD *)(v52 + 16);
          if (v54)
          {
            v55 = 0;
            v56 = (uint64_t)v123;
            v57 = v52 + v124;
            while (v55 < *(_QWORD *)(v52 + 16))
            {
              sub_10012D874(v57, v56);
              v58 = qword_100E52160[*(char *)(v56 + *(int *)(v6 + 24))];
              if (v58 == 700 || v58 == 701)
              {
                v59 = v6;
                sub_10012D934(v56, v125);
                if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
                  sub_10009AAC8(0, v53[2] + 1, 1);
                v53 = (_QWORD *)v126[0];
                v61 = *(_QWORD *)(v126[0] + 16);
                v60 = *(_QWORD *)(v126[0] + 24);
                if (v61 >= v60 >> 1)
                {
                  sub_10009AAC8(v60 > 1, v61 + 1, 1);
                  v53 = (_QWORD *)v126[0];
                }
                v53[2] = v61 + 1;
                sub_10012D934(v125, (uint64_t)v53 + v124 + v61 * v36);
                v6 = v59;
                v56 = (uint64_t)v123;
              }
              else
              {
                sub_10012D8F8(v56);
              }
              ++v55;
              v57 += v36;
              if (v54 == v55)
              {
                v53 = (_QWORD *)v126[0];
                v7 = v114;
                v5 = v115;
                v47 = (uint64_t)v116;
                goto LABEL_28;
              }
            }
            __break(1u);
LABEL_60:
            swift_once(&qword_1010E9F10, sub_10075AEB4);
LABEL_3:
            v29 = type metadata accessor for Logger(0);
            v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B75D0);
            v31 = Logger.logObject.getter(v30);
            v32 = static os_log_type_t.default.getter(v31);
            if (os_log_type_enabled(v31, v32))
            {
              v33 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v33 = 0;
              _os_log_impl((void *)&_mh_execute_header, v31, v32, "SeparationStateSyncService: This is the monitoring device, won't accept forwarded state.", v33, 2u);
              swift_slowDealloc(v33, -1, -1);
            }

            return;
          }
LABEL_28:
          swift_release();
          v40 = v121;
        }
        else
        {
          swift_bridgeObjectRelease();
          v53 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v53 = _swiftEmptyArrayStorage;
        v47 = (uint64_t)v116;
      }
      objc_autoreleasePoolPop(v120);
      swift_release();
      v62 = v53[2];
      if (v62)
      {
        sub_10012D874((uint64_t)v53 + v124, v47);
        swift_bridgeObjectRetain(v53);
        v63 = v62 - 1;
        if (v63)
        {
          v76 = (uint64_t)v53 + v103;
          do
          {
            sub_10012D874(v76, (uint64_t)v22);
            if ((static Date.< infix(_:_:)(v47 + *(int *)(v6 + 20), &v22[*(int *)(v6 + 20)]) & 1) != 0)
            {
              sub_10012D8F8(v47);
              sub_10012D934((uint64_t)v22, v47);
            }
            else
            {
              sub_10012D8F8((uint64_t)v22);
            }
            v76 += v36;
            --v63;
          }
          while (v63);
        }
        swift_bridgeObjectRelease();
        sub_10012D934(v47, (uint64_t)v5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
        swift_bridgeObjectRelease();
        v40 = v121;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
        swift_bridgeObjectRelease();
      }
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        sub_100004048((uint64_t)v5, &qword_1010EF660);
      }
      else
      {
        v64 = (uint64_t)v104;
        sub_10012D934((uint64_t)v5, (uint64_t)v104);
        if ((static Date.> infix(_:_:)(v64 + *(int *)(v6 + 20), v40 + *(int *)(v6 + 20)) & 1) != 0)
        {
          v65 = (uint64_t)v98;
          if (qword_1010E9F10 != -1)
            swift_once(&qword_1010E9F10, sub_10075AEB4);
          v66 = type metadata accessor for Logger(0);
          sub_10001A9E8(v66, (uint64_t)qword_1011B75D0);
          v67 = sub_10012D874(v40, v65);
          v68 = Logger.logObject.getter(v67);
          v69 = static os_log_type_t.default.getter(v68);
          if (os_log_type_enabled(v68, v69))
          {
            v70 = swift_slowAlloc(12, -1);
            v120 = (void *)swift_slowAlloc(32, -1);
            v126[0] = (uint64_t)v120;
            *(_DWORD *)v70 = v102.n128_u32[0];
            v71 = type metadata accessor for UUID(0);
            v72 = sub_1001D4C18();
            v73 = dispatch thunk of CustomStringConvertible.description.getter(v71, v72);
            *(_QWORD *)(v70 + 4) = sub_100016940(v73, v74, v126);
            swift_bridgeObjectRelease();
            sub_10012D8F8(v65);
            _os_log_impl((void *)&_mh_execute_header, v68, v69, "SeparationStateSyncService: We already have a newer observation for %s, ignoring.", (uint8_t *)v70, 0xCu);
            v75 = v120;
            swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v75, -1, -1);
            swift_slowDealloc(v70, -1, -1);

          }
          else
          {

            sub_10012D8F8(v65);
          }
          sub_10012D8F8((uint64_t)v104);
          sub_10012D8F8(v40);
          v7 = v114;
          v39 = v118;
          v42 = v119;
          goto LABEL_10;
        }
        sub_10012D8F8(v64);
      }
      v77 = (uint64_t)v107;
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v78 = type metadata accessor for Logger(0);
      sub_10001A9E8(v78, (uint64_t)qword_1011B75D0);
      v79 = sub_10012D874(v40, v77);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.default.getter(v80);
      if (os_log_type_enabled(v80, v81))
      {
        v82 = v77;
        v83 = swift_slowAlloc(12, -1);
        v84 = swift_slowAlloc(32, -1);
        v126[0] = v84;
        *(_DWORD *)v83 = v102.n128_u32[0];
        v85 = type metadata accessor for UUID(0);
        v86 = sub_1001D4C18();
        v87 = dispatch thunk of CustomStringConvertible.description.getter(v85, v86);
        *(_QWORD *)(v83 + 4) = sub_100016940(v87, v88, v126);
        swift_bridgeObjectRelease();
        sub_10012D8F8(v82);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "SeparationStateSyncService: Received remote observation for %s", (uint8_t *)v83, 0xCu);
        swift_arrayDestroy(v84, 1, v101);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v83, -1, -1);
      }
      else
      {
        sub_10012D8F8(v77);
      }

      v89 = (uint64_t)v108;
      v90 = v122;
      v91 = v109;
      sub_10012D874(v121, v109);
      sub_10012D874(v91, v89);
      v92 = swift_allocObject(&unk_101097A50, v105, v113);
      *(_QWORD *)(v92 + 16) = v90;
      sub_10012D934(v91, v92 + v106);
      swift_retain_n(v90, 2);
      v93 = sub_1007FDEC4();
      if (qword_1010EA1D0 != -1)
        swift_once(&qword_1010EA1D0, sub_100B11444);
      v126[0] = 0x7365547265646E75;
      v126[1] = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)(&v127, v126, sub_10001F628, 0, &type metadata for Bool);
      swift_bridgeObjectRelease();
      if (v127 == 1)
      {
        v94 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
        v95 = swift_allocObject(v94, v103, v113);
        *(_OWORD *)(v95 + 16) = v100;
        sub_10012D874(v89, v95 + v124);
        v96 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v96);
        v39 = v118;
        v97[-4] = v117;
        v97[-3] = v95;
        v97[-2] = 0;
        v97[-1] = 0;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v97[-6], v99);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v41 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v41);
        v97[-4] = v93;
        v97[-3] = sub_100896AA0;
        v97[-2] = v92;
        v39 = v118;
        static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_10077CB50, &v97[-6], &type metadata for () + 1);
        swift_release();
        swift_release();
        swift_release();
      }
      v42 = v119;
      sub_10012D8F8(v89);
      v40 = v121;
      sub_10012D8F8(v121);
      v7 = v114;
LABEL_10:
      v38 = v42 + 1;
      v5 = v115;
      if (v38 == v112)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
}

uint64_t sub_100895AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[8];

  v3 = *(_QWORD *)(a1 + 24);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v5 = *(_QWORD *)(type metadata accessor for BeaconObservation(0) - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v4, v8 + v6, v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  sub_10012D874(a2, v9 + v8);
  type metadata accessor for Transaction(0);
  v11[2] = v3;
  v11[3] = v9;
  v11[4] = 0;
  v11[5] = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, v11, &type metadata for () + 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100895B80()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  sub_100004048(v0 + 40, &qword_10110B618);
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd26SeparationStateSyncManager_observationStoreSubscription, &qword_1010F46A0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100895BE0()
{
  return type metadata accessor for SeparationStateSyncManager(0);
}

uint64_t type metadata accessor for SeparationStateSyncManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10110B500;
  if (!qword_10110B500)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeparationStateSyncManager);
  return result;
}

void sub_100895C24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = "(";
  sub_100264B20(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_100895CAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for BeaconObservation(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(int *)(v3 + 24);
  if (qword_100E52160[*(char *)(a1 + v6)] == 501)
  {
    sub_10012D874(a1, (uint64_t)v5);
    sub_10012D8F8((uint64_t)v5);
  }
  else
  {
    sub_10012D874(a1, (uint64_t)v5);
    v7 = sub_1001C1560(v5[*(int *)(v2 + 24)], (uint64_t)&off_10104ADE8);
    sub_10012D8F8((uint64_t)v5);
    if (!v7)
      return;
  }
  CurrentValueSubject.value.getter(&v15);
  if (v15 == 7)
  {
    v8 = *(unsigned __int8 *)(a1 + v6);
    if (sub_1001C1560(v8, (uint64_t)&off_10104AE60))
    {
      sub_100895EEC(a1);
    }
    else if (sub_1001C1560(v8, (uint64_t)&off_10104AE88))
    {
      sub_10089625C(a1);
    }
  }
  else
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B75D0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "SeparationStateSyncService: Not a monitoring device, won't update separation state.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

  }
}

uint64_t sub_100895EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];

  v3 = type metadata accessor for BeaconObservation(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v35 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v35 - v12;
  v14 = sub_1001C1560(*(unsigned __int8 *)(a1 + *(int *)(v11 + 24)), (uint64_t)&off_10104AE38);
  sub_10012D874(a1, (uint64_t)v13);
  if (v14)
  {
    v15 = *(_QWORD *)(v1 + 24);
    v16 = sub_100896630((uint64_t)v13);
    result = sub_10012D8F8((uint64_t)v13);
    if ((v16 & 1) == 0)
      return result;
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v10, a1, v18);
    Date.addingTimeInterval(_:)(COERCE_DOUBLE(1));
    v10[*(int *)(v3 + 24)] = 42;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B75D0);
    v20 = sub_10012D874(a1, (uint64_t)v7);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v37 = v15;
      v25 = v24;
      v39[0] = v24;
      *(_DWORD *)v23 = 136315138;
      v36 = v23 + 4;
      v26 = sub_1001D4C18();
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v18, v26);
      v38 = sub_100016940(v27, v28, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v36, v23 + 12);
      swift_bridgeObjectRelease();
      sub_10012D8F8((uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "SeparationStateSyncService: Detected reunite event for %s.", v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v29 = v25;
      v15 = v37;
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_10012D8F8((uint64_t)v7);
    }

    v30 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v31 = *(unsigned __int8 *)(v4 + 80);
    v32 = (v31 + 32) & ~v31;
    v33 = swift_allocObject(v30, v32 + *(_QWORD *)(v4 + 72), v31 | 7);
    *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
    sub_10012D874((uint64_t)v10, v33 + v32);
    v34 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v34);
    *(&v35 - 4) = v15;
    *(&v35 - 3) = v33;
    *(&v35 - 2) = 0;
    *(&v35 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v35 - 6, &type metadata for () + 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v13;
  }
  return sub_10012D8F8((uint64_t)v10);
}

uint64_t sub_10089625C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[4];
  uint64_t v23[5];

  v2 = v1;
  v4 = type metadata accessor for BeaconObservation(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B75D0);
  v8 = sub_10012D874(a1, (uint64_t)v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v23[0] = v20;
    *(_DWORD *)v11 = 136315138;
    v19 = v11 + 4;
    v12 = type metadata accessor for UUID(0);
    v13 = sub_1001D4C18();
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
    v21 = sub_100016940(v14, v15, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v19, v11 + 12);
    swift_bridgeObjectRelease();
    sub_10012D8F8((uint64_t)v6);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SeparationStateSyncService: Forwarding Separation State Update for %s.", v11, 0xCu);
    v16 = v20;
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_10012D8F8((uint64_t)v6);
  }

  sub_1008969B0(v2 + 40, (uint64_t)v23);
  if (!v23[3])
    return sub_100004048((uint64_t)v23, &qword_10110B618);
  sub_100030784((uint64_t)v23, (uint64_t)&v21);
  sub_100004048((uint64_t)v23, &qword_10110B618);
  sub_10001AA44(&v21, v22[2]);
  sub_10039C43C(a1);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v21);
}

uint64_t sub_100896630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v3 = type metadata accessor for BeaconObservation(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v39 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - v7;
  v9 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_autoreleasePoolPush();
  v13 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v1, v13);
  v14 = v40;
  if (!v40[2] || (v15 = sub_100003FB0(a1), (v16 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v22 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  v17 = *(_QWORD *)(v14[7] + 8 * v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  v18 = sub_100508D98(v17);
  swift_bridgeObjectRelease();
  sub_10088FD00((uint64_t)v18);
  v20 = v19;
  result = swift_release();
  v22 = _swiftEmptyArrayStorage;
  v40 = _swiftEmptyArrayStorage;
  v23 = *(_QWORD *)(v20 + 16);
  if (!v23)
  {
LABEL_20:
    swift_release();
LABEL_21:
    objc_autoreleasePoolPop(v12);
    sub_100A797E8((uint64_t)v22, (uint64_t)v11);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3) == 1)
    {
      sub_100004048((uint64_t)v11, &qword_1010EF660);
      return 0;
    }
    else
    {
      v33 = v11[*(int *)(v3 + 24)];
      sub_10012D8F8((uint64_t)v11);
      return v33 == 41;
    }
  }
  v35 = v12;
  v36 = v11;
  v24 = 0;
  v37 = v23;
  v38 = v4;
  while (v24 < *(_QWORD *)(v20 + 16))
  {
    v25 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v26 = *(_QWORD *)(v4 + 72);
    result = sub_10012D874(v20 + v25 + v26 * v24, (uint64_t)v8);
    v27 = qword_100E52160[v8[*(int *)(v3 + 24)]];
    if (v27 != 700)
    {
      v31 = &stru_100000020.cmd + 1;
      while (1)
      {
        v32 = v31 - 31;
        if (__OFADD__(v31 - 32, 1))
          break;
        if (qword_100E52160[*((char *)&off_10104AE10 + v31)] == v27)
          goto LABEL_8;
        ++v31;
        if (v32 == 2)
        {
          result = sub_10012D8F8((uint64_t)v8);
          goto LABEL_5;
        }
      }
      __break(1u);
      break;
    }
LABEL_8:
    v28 = v3;
    sub_10012D934((uint64_t)v8, v39);
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
      sub_10009AAC8(0, v22[2] + 1, 1);
    v22 = v40;
    v30 = v40[2];
    v29 = v40[3];
    if (v30 >= v29 >> 1)
    {
      sub_10009AAC8(v29 > 1, v30 + 1, 1);
      v22 = v40;
    }
    v22[2] = v30 + 1;
    result = sub_10012D934(v39, (uint64_t)v22 + v25 + v30 * v26);
    v3 = v28;
    v23 = v37;
    v4 = v38;
LABEL_5:
    if (++v24 == v23)
    {
      v22 = v40;
      v12 = v35;
      v11 = v36;
      goto LABEL_20;
    }
  }
  __break(1u);
  return result;
}

void sub_100896990(uint64_t a1)
{
  sub_100895CAC(a1);
}

uint64_t sub_1008969B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_10110B618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008969F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for BeaconObservation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + *(int *)(v1 + 20);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100896AA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeaconObservation(0) - 8) + 80);
  return sub_100895AA4(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

_QWORD *sub_100896AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for BeaconObservation(0);
  v8 = *(_QWORD *)(v25 - 8);
  v9 = __chkstk_darwin(v25);
  v24 = (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v23 = (uint64_t)&v21 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return _swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v21 = a1;
  swift_bridgeObjectRetain(a1);
  v16 = _swiftEmptyArrayStorage;
  v22 = a2;
  do
  {
    sub_100894BA8(v14, a2, (uint64_t)v7);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v25) == 1)
    {
      sub_100004048((uint64_t)v7, &qword_1010EF660);
    }
    else
    {
      v17 = v23;
      sub_10012D934((uint64_t)v7, v23);
      sub_10012D934(v17, v24);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (_QWORD *)sub_1007C9764(0, v16[2] + 1, 1, (unint64_t)v16);
      v19 = v16[2];
      v18 = v16[3];
      if (v19 >= v18 >> 1)
        v16 = (_QWORD *)sub_1007C9764(v18 > 1, v19 + 1, 1, (unint64_t)v16);
      v16[2] = v19 + 1;
      sub_10012D934(v24, (uint64_t)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v19);
      a2 = v22;
    }
    v14 += v15;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v16;
}

void sub_100896D1C(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  int64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t, __n128);
  char *v30;
  void (*v31)(void);
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;

  v38 = a3;
  v42 = a2;
  v4 = sub_10001A9A8(&qword_1010EE170);
  v49 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v41 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v45 - 8);
  v6 = __chkstk_darwin(v45);
  v46 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v44 = (char *)&v38 - v8;
  v9 = sub_10001A9A8(&qword_1010EE178);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 64);
  v39 = a1 + 64;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v50 = a1;
  v16 = swift_bridgeObjectRetain(a1);
  v17 = 0;
  v48 = v4;
  v43 = v11;
  v18 = v45;
  v19 = v46;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  v51 = v17;
  for (i = v20 | (v17 << 6); ; i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    v26 = v50;
    v27 = v47;
    v28 = *(_QWORD *)(v47 + 72) * i;
    v29 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v47 + 16);
    v29(v44, *(_QWORD *)(v50 + 48) + v28, v18, v16);
    ((void (*)(char *, unint64_t, uint64_t))v29)(v19, *(_QWORD *)(v26 + 56) + v28, v18);
    v4 = v48;
    v30 = &v43[*(int *)(v48 + 48)];
    v31 = *(void (**)(void))(v27 + 32);
    v11 = v43;
    v31();
    ((void (*)(char *, char *, uint64_t))v31)(v30, v19, v18);
    v32 = v49;
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v49 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v33)(v11, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v11, 1, v4) == 1)
      goto LABEL_27;
    v34 = v41;
    sub_100005CF0((uint64_t)v11, v41, &qword_1010EE170);
    if ((v42(v34, v34 + *(int *)(v4 + 48)) & 1) != 0)
    {
      swift_release();
      v35 = v38;
      sub_100005CF0(v34, v38, &qword_1010EE170);
      v36 = v35;
      v37 = 0;
      goto LABEL_28;
    }
    sub_100004048(v34, &qword_1010EE170);
    v17 = v51;
    if (v15)
      goto LABEL_4;
LABEL_5:
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v22 >= v40)
      goto LABEL_26;
    v23 = *(_QWORD *)(v39 + 8 * v22);
    v24 = v17 + 1;
    if (v23)
      goto LABEL_20;
    v24 = v17 + 2;
    if (v17 + 2 >= v40)
      goto LABEL_26;
    v23 = *(_QWORD *)(v39 + 8 * v24);
    if (v23)
      goto LABEL_20;
    v24 = v17 + 3;
    if (v17 + 3 >= v40)
      goto LABEL_26;
    v23 = *(_QWORD *)(v39 + 8 * v24);
    if (v23)
      goto LABEL_20;
    v24 = v17 + 4;
    if (v17 + 4 >= v40)
      goto LABEL_26;
    v23 = *(_QWORD *)(v39 + 8 * v24);
    if (v23)
      goto LABEL_20;
    v25 = v17 + 5;
    if (v17 + 5 >= v40)
    {
LABEL_26:
      v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v49 + 56);
      v33(v11, 1, 1, v4, v16);
LABEL_27:
      swift_release();
      v36 = v38;
      v37 = 1;
LABEL_28:
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v33)(v36, v37, 1, v4);
      return;
    }
    v23 = *(_QWORD *)(v39 + 8 * v25);
    if (!v23)
    {
      while (1)
      {
        v24 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_30;
        if (v24 >= v40)
          goto LABEL_26;
        v23 = *(_QWORD *)(v39 + 8 * v24);
        ++v25;
        if (v23)
          goto LABEL_20;
      }
    }
    v24 = v17 + 5;
LABEL_20:
    v15 = (v23 - 1) & v23;
    v51 = v24;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_1008970FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v23 = a2;
  v3 = sub_10001A9A8(&qword_1010F2B78);
  v22 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - v7;
  v9 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v25 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = *(_QWORD *)(a1 + 48);
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v8, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * i, v20);
    v8[*(int *)(v3 + 48)] = *(_BYTE *)(*(_QWORD *)(a1 + 56) + i);
    sub_100005CF0((uint64_t)v8, (uint64_t)v6, &qword_1010F2B78);
    if (v6[*(int *)(v3 + 48)] == 2)
    {
      swift_release();
      v21 = v23;
      sub_100005CF0((uint64_t)v6, v23, &qword_1010F2B78);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v21, 0, 1, v3);
      return;
    }
    sub_100004048((uint64_t)v6, &qword_1010F2B78);
    if (v12)
      goto LABEL_4;
LABEL_5:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v25)
      goto LABEL_25;
    v17 = *(_QWORD *)(v24 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v25)
        goto LABEL_25;
      v17 = *(_QWORD *)(v24 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v25)
          goto LABEL_25;
        v17 = *(_QWORD *)(v24 + 8 * v13);
        if (!v17)
        {
          v13 = v16 + 3;
          if (v16 + 3 >= v25)
            goto LABEL_25;
          v17 = *(_QWORD *)(v24 + 8 * v13);
          if (!v17)
            break;
        }
      }
    }
LABEL_20:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 4;
  if (v18 >= v25)
  {
LABEL_25:
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v23, 1, 1, v3);
    return;
  }
  v17 = *(_QWORD *)(v24 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v25)
      goto LABEL_25;
    v17 = *(_QWORD *)(v24 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1008973A4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7860);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7860);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD00000000000001ALL, 0x8000000100EE9930);
}

uint64_t sub_100897424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 200) = a1;
  *(_QWORD *)(v2 + 208) = v1;
  return swift_task_switch(sub_10089743C, v1, 0);
}

uint64_t sub_10089743C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t (*v6)(void);

  sub_10000F9B8(*(_QWORD *)(v0 + 208) + 144, v0 + 56, &qword_10110B900);
  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 200);
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10000F9FC((__int128 *)(v0 + 16), v1);
    v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  sub_100004048(v0 + 56, &qword_10110B900);
  v3 = qword_1010EA5B0;
  swift_retain();
  if (v3 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v6 = (uint64_t (*)(void))((char *)&dword_1010EBB10 + dword_1010EBB10);
    v5 = (_QWORD *)swift_task_alloc(unk_1010EBB14);
    *(_QWORD *)(v0 + 216) = v5;
    *v5 = v0;
    v5[1] = sub_1008975A8;
    v2 = v6;
    return v2();
  }
  __break(1u);
  return result;
}

uint64_t sub_1008975A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100897604, v3, 0);
}

uint64_t sub_100897604()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0 + 12;
  v2 = v0[28];
  if (v2)
  {
    v3 = (_QWORD *)v0[25];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3[3] = type metadata accessor for FamilyCircleService();
    v3[4] = &off_10109F1D0;
    *v3 = v2;
    v4 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B7860);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No FamilyCircleService available!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = sub_100033220();
    v11 = swift_allocError(&type metadata for DaemonError, v10, 0, 0);
    *v12 = 0xD000000000000013;
    v12[1] = 0x8000000100ECA680;
    swift_willThrow(v11);
    v4 = (uint64_t (*)(void))v0[1];
  }
  return v4();
}

uint64_t sub_100897760()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return swift_task_switch(sub_100897778, v0, 0);
}

uint64_t sub_100897778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t (__cdecl *v9)();

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v0 + 128) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 192);
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    v4 = swift_unknownObjectRetain(v2);
    return v8(v4, v3);
  }
  else
  {
    v6 = qword_1010EA5B0;
    swift_retain();
    if (v6 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v9 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB58 + dword_1010EBB58);
      v7 = (_QWORD *)swift_task_alloc(unk_1010EBB5C);
      *(_QWORD *)(v0 + 136) = v7;
      *v7 = v0;
      v7[1] = sub_1008978B8;
      return v9();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1008978B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100897918, v3, 0);
}

uint64_t sub_100897918()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t, _UNKNOWN **);

  v1 = v0[18];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  if (v1)
  {
    v2 = v0[18];
    v12 = (uint64_t (*)(uint64_t, _UNKNOWN **))v0[1];
    swift_unknownObjectRetain(v0[16]);
    return v12(v2, &off_1010A85F0);
  }
  else
  {
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7860);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No PeerTrustService available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    *v11 = 0xD000000000000010;
    v11[1] = 0x8000000100ECC5B0;
    swift_willThrow(v10);
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_100897A84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[16];
  _BYTE *v18;
  _BYTE v19[24];

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010ECD00);
  v7 = __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v7);
  v12 = &v17[-v11];
  v13 = &v17[*(int *)(v10 + 48) - v11];
  sub_10000F9B8(a1, (uint64_t)&v17[-v11], (uint64_t *)&unk_101111440);
  sub_10005972C(a2, (uint64_t)v13, type metadata accessor for MemberSharingCircle);
  v14 = (uint64_t)&v9[*(int *)(v6 + 48)];
  sub_10000F9B8((uint64_t)v12, (uint64_t)v9, (uint64_t *)&unk_101111440);
  sub_10005972C((uint64_t)v13, v14, type metadata accessor for MemberSharingCircle);
  v18 = v9;
  swift_beginAccess(v3 + 208, v19, 33, 0);
  result = sub_1008A4550((uint64_t (*)(unint64_t, __n128))sub_1008A4BBC, (uint64_t)v17, &qword_1010ECD00, (uint64_t (*)(uint64_t))sub_1008C5ED8);
  v16 = *(_QWORD *)(*(_QWORD *)(v3 + 208) + 16);
  if (v16 < result)
  {
    __break(1u);
  }
  else
  {
    sub_10077DEDC(result, v16);
    swift_endAccess(v19);
    sub_100004048((uint64_t)v12, &qword_1010ECD00);
    return sub_100004048((uint64_t)v9, &qword_1010ECD00);
  }
  return result;
}

BOOL sub_100897C08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a3;
  v31 = a4;
  v29 = a2;
  v5 = type metadata accessor for MemberSharingCircle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v28 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10001A9A8(&qword_10110B860);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_10110B8F8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v28 - v18;
  sub_10000F9B8(a1, (uint64_t)&v28 - v18, (uint64_t *)&unk_101111440);
  v20 = v29;
  v29 = (uint64_t *)&v19[*(int *)(v14 + 48)];
  sub_10005972C((uint64_t)v20, (uint64_t)v29, type metadata accessor for MemberSharingCircle);
  sub_10000F9B8(v30, (uint64_t)v17, (uint64_t *)&unk_101111440);
  v21 = (uint64_t)&v17[*(int *)(v14 + 48)];
  sub_10005972C(v31, v21, type metadata accessor for MemberSharingCircle);
  v22 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000F9B8((uint64_t)v19, (uint64_t)v13, (uint64_t *)&unk_101111440);
  sub_10000F9B8((uint64_t)v17, v22, (uint64_t *)&unk_101111440);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v13, 1, v5) != 1)
  {
    sub_10000F9B8((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_101111440);
    if (v23(v22, 1, v5) != 1)
    {
      v24 = v28;
      sub_1000126EC(v22, v28, type metadata accessor for MemberSharingCircle);
      v25 = sub_100200BBC(v10, v24);
      sub_1000126B0(v24, type metadata accessor for MemberSharingCircle);
      sub_1000126B0((uint64_t)v10, type metadata accessor for MemberSharingCircle);
      sub_100004048((uint64_t)v13, (uint64_t *)&unk_101111440);
      if (v25)
        goto LABEL_8;
LABEL_9:
      v26 = 0;
      goto LABEL_10;
    }
    sub_1000126B0((uint64_t)v10, type metadata accessor for MemberSharingCircle);
LABEL_6:
    sub_100004048((uint64_t)v13, &qword_10110B860);
    goto LABEL_9;
  }
  if (v23(v22, 1, v5) != 1)
    goto LABEL_6;
  sub_100004048((uint64_t)v13, (uint64_t *)&unk_101111440);
LABEL_8:
  v26 = sub_100200BBC(v29, v21);
LABEL_10:
  sub_100004048((uint64_t)v17, &qword_10110B8F8);
  sub_100004048((uint64_t)v19, &qword_10110B8F8);
  return v26;
}

BOOL sub_100897F0C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a3;
  v31 = a4;
  v29 = a2;
  v5 = type metadata accessor for SharedBeaconRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v28 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10001A9A8(&qword_10110B8E8);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_10110B8F0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v28 - v18;
  sub_10000F9B8(a1, (uint64_t)&v28 - v18, (uint64_t *)&unk_1010EE180);
  v20 = v29;
  v29 = (uint64_t *)&v19[*(int *)(v14 + 48)];
  sub_10005972C((uint64_t)v20, (uint64_t)v29, type metadata accessor for SharedBeaconRecord);
  sub_10000F9B8(v30, (uint64_t)v17, (uint64_t *)&unk_1010EE180);
  v21 = (uint64_t)&v17[*(int *)(v14 + 48)];
  sub_10005972C(v31, v21, type metadata accessor for SharedBeaconRecord);
  v22 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000F9B8((uint64_t)v19, (uint64_t)v13, (uint64_t *)&unk_1010EE180);
  sub_10000F9B8((uint64_t)v17, v22, (uint64_t *)&unk_1010EE180);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v13, 1, v5) != 1)
  {
    sub_10000F9B8((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_1010EE180);
    if (v23(v22, 1, v5) != 1)
    {
      v24 = v28;
      sub_1000126EC(v22, v28, type metadata accessor for SharedBeaconRecord);
      v25 = sub_100D3E924(v10, v24);
      sub_1000126B0(v24, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
      sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010EE180);
      if (v25)
        goto LABEL_8;
LABEL_9:
      v26 = 0;
      goto LABEL_10;
    }
    sub_1000126B0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
LABEL_6:
    sub_100004048((uint64_t)v13, &qword_10110B8E8);
    goto LABEL_9;
  }
  if (v23(v22, 1, v5) != 1)
    goto LABEL_6;
  sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010EE180);
LABEL_8:
  v26 = sub_100D3E924(v29, v21);
LABEL_10:
  sub_100004048((uint64_t)v17, &qword_10110B8F0);
  sub_100004048((uint64_t)v19, &qword_10110B8F0);
  return v26;
}

BOOL sub_100898210(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a3;
  v31 = a4;
  v29 = a2;
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v28 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EE0E0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10001A9A8(&qword_10110B8D8);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_10110B8E0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v28 - v18;
  sub_10000F9B8(a1, (uint64_t)&v28 - v18, &qword_1010EE0E0);
  v20 = v29;
  v29 = (uint64_t *)&v19[*(int *)(v14 + 48)];
  sub_10005972C((uint64_t)v20, (uint64_t)v29, type metadata accessor for OwnerSharingCircle);
  sub_10000F9B8(v30, (uint64_t)v17, &qword_1010EE0E0);
  v21 = (uint64_t)&v17[*(int *)(v14 + 48)];
  sub_10005972C(v31, v21, type metadata accessor for OwnerSharingCircle);
  v22 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10000F9B8((uint64_t)v19, (uint64_t)v13, &qword_1010EE0E0);
  sub_10000F9B8((uint64_t)v17, v22, &qword_1010EE0E0);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v13, 1, v5) != 1)
  {
    sub_10000F9B8((uint64_t)v13, (uint64_t)v10, &qword_1010EE0E0);
    if (v23(v22, 1, v5) != 1)
    {
      v24 = v28;
      sub_1000126EC(v22, v28, type metadata accessor for OwnerSharingCircle);
      v25 = sub_100A3022C(v10, v24);
      sub_1000126B0(v24, type metadata accessor for OwnerSharingCircle);
      sub_1000126B0((uint64_t)v10, type metadata accessor for OwnerSharingCircle);
      sub_100004048((uint64_t)v13, &qword_1010EE0E0);
      if (v25)
        goto LABEL_8;
LABEL_9:
      v26 = 0;
      goto LABEL_10;
    }
    sub_1000126B0((uint64_t)v10, type metadata accessor for OwnerSharingCircle);
LABEL_6:
    sub_100004048((uint64_t)v13, &qword_10110B8D8);
    goto LABEL_9;
  }
  if (v23(v22, 1, v5) != 1)
    goto LABEL_6;
  sub_100004048((uint64_t)v13, &qword_1010EE0E0);
LABEL_8:
  v26 = sub_100A3022C(v29, v21);
LABEL_10:
  sub_100004048((uint64_t)v17, &qword_10110B8E0);
  sub_100004048((uint64_t)v19, &qword_10110B8E0);
  return v26;
}

uint64_t sub_100898514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[16];
  _BYTE *v18;
  _BYTE v19[24];

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010ECCF0);
  v7 = __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v7);
  v12 = &v17[-v11];
  v13 = &v17[*(int *)(v10 + 48) - v11];
  sub_10000F9B8(a1, (uint64_t)&v17[-v11], (uint64_t *)&unk_1010EE180);
  sub_10005972C(a2, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
  v14 = (uint64_t)&v9[*(int *)(v6 + 48)];
  sub_10000F9B8((uint64_t)v12, (uint64_t)v9, (uint64_t *)&unk_1010EE180);
  sub_10005972C((uint64_t)v13, v14, type metadata accessor for SharedBeaconRecord);
  v18 = v9;
  swift_beginAccess(v3 + 216, v19, 33, 0);
  result = sub_1008A4550((uint64_t (*)(unint64_t, __n128))sub_1008A4B80, (uint64_t)v17, &qword_1010ECCF0, (uint64_t (*)(uint64_t))sub_1008C5EEC);
  v16 = *(_QWORD *)(*(_QWORD *)(v3 + 216) + 16);
  if (v16 < result)
  {
    __break(1u);
  }
  else
  {
    sub_10077DEF0(result, v16);
    swift_endAccess(v19);
    sub_100004048((uint64_t)v12, &qword_1010ECCF0);
    return sub_100004048((uint64_t)v9, &qword_1010ECCF0);
  }
  return result;
}

uint64_t sub_100898698(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *, char *, char *, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, char *, uint64_t);

  v25 = a6;
  v10 = sub_10001A9A8(a3);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v24 - v15;
  v17 = *(int *)(v14 + 48);
  v18 = (char *)&v24 + v17 - v15;
  v19 = a1 + v17;
  sub_10000F9B8(a1, (uint64_t)&v24 - v15, a4);
  sub_10005972C(v19, (uint64_t)v18, a5);
  v20 = *(int *)(v10 + 48);
  v21 = (uint64_t)&v13[v20];
  v22 = a2 + v20;
  sub_10000F9B8(a2, (uint64_t)v13, a4);
  sub_10005972C(v22, v21, a5);
  LOBYTE(a2) = v25(v16, v18, v13, v21);
  sub_1000126B0(v21, a5);
  sub_100004048((uint64_t)v13, a4);
  sub_1000126B0((uint64_t)v18, a5);
  sub_100004048((uint64_t)v16, a4);
  return a2 & 1;
}

uint64_t sub_1008987F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[16];
  _BYTE *v18;
  _BYTE v19[24];

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010ECCF8);
  v7 = __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v7);
  v12 = &v17[-v11];
  v13 = &v17[*(int *)(v10 + 48) - v11];
  sub_10000F9B8(a1, (uint64_t)&v17[-v11], &qword_1010EE0E0);
  sub_10005972C(a2, (uint64_t)v13, type metadata accessor for OwnerSharingCircle);
  v14 = (uint64_t)&v9[*(int *)(v6 + 48)];
  sub_10000F9B8((uint64_t)v12, (uint64_t)v9, &qword_1010EE0E0);
  sub_10005972C((uint64_t)v13, v14, type metadata accessor for OwnerSharingCircle);
  v18 = v9;
  swift_beginAccess(v3 + 224, v19, 33, 0);
  result = sub_1008A4550((uint64_t (*)(unint64_t, __n128))sub_1008A4B44, (uint64_t)v17, &qword_1010ECCF8, (uint64_t (*)(uint64_t))sub_1008C5F00);
  v16 = *(_QWORD *)(*(_QWORD *)(v3 + 224) + 16);
  if (v16 < result)
  {
    __break(1u);
  }
  else
  {
    sub_10077DF04(result, v16);
    swift_endAccess(v19);
    sub_100004048((uint64_t)v12, &qword_1010ECCF8);
    return sub_100004048((uint64_t)v9, &qword_1010ECCF8);
  }
  return result;
}

uint64_t sub_100898974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  v4 = type metadata accessor for SharedBeaconRecord(0);
  *(_QWORD *)(v2 + 136) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 144) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 152) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 160) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 168) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 176) = swift_task_alloc(v6);
  v7 = type metadata accessor for MemberPeerTrust(0);
  *(_QWORD *)(v2 + 184) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 192) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 208) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 216) = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EC868);
  *(_QWORD *)(v2 + 224) = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 232) = swift_task_alloc(v11);
  *(_QWORD *)(v2 + 240) = swift_task_alloc(v11);
  *(_QWORD *)(v2 + 248) = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v2 + 256) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v2 + 264) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v2 + 272) = v14;
  *(_QWORD *)(v2 + 280) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  *(_QWORD *)(v2 + 288) = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 296) = swift_task_alloc(v16);
  *(_QWORD *)(v2 + 304) = swift_task_alloc(v16);
  *(_QWORD *)(v2 + 312) = swift_task_alloc(v16);
  v17 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v2 + 320) = v17;
  v18 = *(int *)(v17 + 24);
  *(_DWORD *)(v2 + 436) = v18;
  v19 = a1 + v18;
  v20 = (_QWORD *)swift_task_alloc(dword_10110B694);
  *(_QWORD *)(v2 + 328) = v20;
  *v20 = v2;
  v20[1] = sub_100898B2C;
  return sub_1008A3C24(v19);
}

uint64_t sub_100898B2C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v3[7] = v2;
  v3[8] = a1;
  v3[9] = a2;
  v4 = v3[41];
  v5 = v3[16];
  v3[42] = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100898B8C, v5, 0);
}

uint64_t sub_100898B8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 136);
  *(_QWORD *)(v0 + 344) = v1;
  return swift_task_switch(sub_100898BA8, v1, 0);
}

uint64_t sub_100898BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 120) + *(int *)(v0 + 436);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 352) = v7;
  v7(v2, v6, v4);
  LODWORD(v8) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 440) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101097CA8, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 360) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 368) = v11;
  v11(v10 + v9, v2, v4);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 376) = v13;
  *v13 = v0;
  v13[1] = sub_100898C9C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 312), sub_100067DF8, v10, *(_QWORD *)(v0 + 288));
}

uint64_t sub_100898C9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 344);
  v3 = *(_QWORD *)(*v0 + 320);
  swift_task_dealloc(*(_QWORD *)(*v0 + 376));
  swift_release();
  *(_DWORD *)(v1 + 444) = *(_DWORD *)(v3 + 32);
  return swift_task_switch(sub_100898D10, v2, 0);
}

uint64_t sub_100898D10()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  v2 = *(unsigned __int8 *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 256);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 272);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 352))(v4, *(_QWORD *)(v0 + 120) + *(int *)(v0 + 444), v5);
  v9 = swift_allocObject(&unk_101097CD0, v7, v8);
  *(_QWORD *)(v0 + 384) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 392) = v11;
  *v11 = v0;
  v11[1] = sub_100898E00;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 248), sub_100067E08, v9, *(_QWORD *)(v0 + 224));
}

uint64_t sub_100898E00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 392));
  swift_release();
  return swift_task_switch(sub_100898E60, v1, 0);
}

uint64_t sub_100898E60()
{
  _QWORD *v0;
  __n128 v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_bridgeObjectRetain(*(_QWORD *)(v0[15] + *(int *)(v0[40] + 36)));
  v2 = sub_100508A54(v1);
  swift_bridgeObjectRelease();
  v0[14] = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  v0[50] = v3;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  v5 = sub_1000193E4((unint64_t *)&qword_1010F1DF8, (uint64_t *)&unk_1010F7730);
  *v3 = v0;
  v3[1] = sub_100898F20;
  return Sequence.asyncCompactMap<A>(_:)(&unk_10110B8D0, v0[16], v4, v0[23], v5);
}

uint64_t sub_100898F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100898F88, v3, 0);
}

void sub_100898F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  NSString v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  NSString v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  NSString v63;
  void *v64;
  uint64_t v65;
  int IsItemBlocked;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v2 = *(_QWORD *)(v0 + 336);
  v114 = v0 + 428;
  if (!v2)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v1 = v2;
    if (qword_1010E9FD0 != -1)
LABEL_58:
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v15 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 312);
    v17 = *(_QWORD *)(v0 + 296);
    v18 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 232);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B7860);
    sub_10000F9B8(v18, v19, &qword_1010EC868);
    sub_10000F9B8(v16, v17, (uint64_t *)&unk_1010EE180);
    swift_bridgeObjectRetain(v15);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    v24 = os_log_type_enabled(v22, v23);
    v25 = *(_QWORD *)(v0 + 296);
    v26 = *(_QWORD *)(v0 + 232);
    if (v24)
    {
      v27 = *(_QWORD *)(v0 + 192);
      v117 = *(_QWORD *)(v0 + 184);
      v120 = *(_QWORD *)(v0 + 144);
      v126 = *(_QWORD *)(v0 + 136);
      v28 = swift_slowAlloc(20, -1);
      *(_DWORD *)v28 = 67109632;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 424) = v1 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v114, v28 + 4, v28 + 8);
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 8) = 1024;
      LODWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v26, 1, v117) != 1;
      sub_100004048(v26, &qword_1010EC868);
      *(_DWORD *)(v0 + 420) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 420, v0 + 424, v28 + 10, v28 + 14);
      *(_WORD *)(v28 + 14) = 1024;
      v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v25, 1, v126) != 1;
      sub_100004048(v25, (uint64_t *)&unk_1010EE180);
      *(_DWORD *)(v0 + 416) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 420, v28 + 16, v28 + 20);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "            Can't post Share Suggestion Notification!\n            beaconName(%{BOOL}d),\n            ownerPeerTrust(%{BOOL}d),\n            sharedBeacon(%{BOOL}d)", (uint8_t *)v28, 0x14u);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_100004048(*(_QWORD *)(v0 + 296), (uint64_t *)&unk_1010EE180);
      sub_100004048(v26, &qword_1010EC868);
      swift_bridgeObjectRelease_n(v15, 2);
    }

    v31 = *(_QWORD *)(v0 + 304);
    v30 = *(_QWORD *)(v0 + 312);
    v32 = *(_QWORD *)(v0 + 296);
    v33 = *(_QWORD *)(v0 + 280);
    v34 = *(_QWORD *)(v0 + 240);
    v35 = *(_QWORD *)(v0 + 248);
    v36 = *(_QWORD *)(v0 + 232);
    v112 = *(_QWORD *)(v0 + 216);
    v115 = *(_QWORD *)(v0 + 208);
    v118 = *(_QWORD *)(v0 + 200);
    v121 = *(_QWORD *)(v0 + 176);
    v123 = *(_QWORD *)(v0 + 168);
    v127 = *(_QWORD *)(v0 + 160);
    v130 = *(_QWORD *)(v0 + 152);
    v37 = sub_1008A450C();
    v38 = swift_allocError(&type metadata for ItemSharingNotificationError, v37, 0, 0);
    swift_willThrow(v38);
    sub_100004048(v35, &qword_1010EC868);
    sub_100004048(v30, (uint64_t *)&unk_1010EE180);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v112);
    swift_task_dealloc(v115);
    swift_task_dealloc(v118);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v127);
    swift_task_dealloc(v130);
    v39 = *(void (**)(void))(v0 + 8);
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  sub_10000F9B8(*(_QWORD *)(v0 + 248), v3, &qword_1010EC868);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    v6 = *(_QWORD *)(v0 + 240);
    swift_bridgeObjectRelease();
    v7 = &qword_1010EC868;
LABEL_7:
    sub_100004048(v6, v7);
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 144);
  sub_1000126EC(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 216), type metadata accessor for MemberPeerTrust);
  sub_10000F9B8(v9, v8, (uint64_t *)&unk_1010EE180);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  v13 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 304);
  if (v12 == 1)
  {
    v14 = *(_QWORD *)(v0 + 216);
    swift_bridgeObjectRetain(v2);
    sub_1000126B0(v14, type metadata accessor for MemberPeerTrust);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = (uint64_t *)&unk_1010EE180;
    goto LABEL_7;
  }
  v111 = v2;
  sub_1000126EC(v6, *(_QWORD *)(v0 + 176), type metadata accessor for SharedBeaconRecord);
  v131 = *(_QWORD *)(v13 + 16);
  if (!v131)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    v70 = _swiftEmptyArrayStorage[2];
    swift_release();
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v71 = *(_QWORD *)(v0 + 168);
    v72 = *(_QWORD *)(v0 + 176);
    v73 = type metadata accessor for Logger(0);
    sub_10001A9E8(v73, (uint64_t)qword_1011B7860);
    v74 = sub_10005972C(v72, v71, type metadata accessor for SharedBeaconRecord);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter(v75);
    v77 = os_log_type_enabled(v75, v76);
    v78 = *(_QWORD *)(v0 + 168);
    if (!v77)
    {
      sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for SharedBeaconRecord);
LABEL_51:
      v86 = *(_QWORD *)(v0 + 216);
      v87 = *(_QWORD *)(v0 + 176);
      v88 = *(_QWORD *)(v0 + 184);
      v89 = *(_QWORD *)(v0 + 152);
      v90 = *(_QWORD *)(v0 + 136);

      v91 = (uint64_t *)(v86 + *(int *)(v88 + 32));
      v93 = *v91;
      v92 = v91[1];
      v94 = *(_QWORD *)(v87 + *(int *)(v90 + 44));
      sub_10005972C(v87, v89, type metadata accessor for SharedBeaconRecord);
      if (v94 == 76)
      {
        v95 = qword_1010EA5C0;
        swift_bridgeObjectRetain(v92);
        if (v95 != -1)
          swift_once(&qword_1010EA5C0, sub_100D3ADF0);
        v96 = sub_100A07598(*(_QWORD *)(*(_QWORD *)(v0 + 152) + *(int *)(*(_QWORD *)(v0 + 136) + 48)), qword_1011B8460);
      }
      else
      {
        swift_bridgeObjectRetain(v92);
        v96 = 0;
      }
      v97 = *(_QWORD *)(v0 + 64);
      v98 = v70 != 0;
      v99 = *(_QWORD *)(v0 + 312);
      v108 = *(_QWORD *)(v0 + 304);
      v109 = *(_QWORD *)(v0 + 296);
      v110 = *(_QWORD *)(v0 + 280);
      v113 = *(_QWORD *)(v0 + 240);
      v116 = *(_QWORD *)(v0 + 232);
      v106 = *(_QWORD *)(v0 + 216);
      v107 = *(_QWORD *)(v0 + 248);
      v119 = *(_QWORD *)(v0 + 208);
      v122 = *(_QWORD *)(v0 + 200);
      v105 = *(_QWORD *)(v0 + 176);
      v125 = *(_QWORD *)(v0 + 168);
      v132 = *(_QWORD *)(v0 + 160);
      v129 = *(_QWORD *)(v0 + 152);
      v100 = *(_QWORD *)(v0 + 120);
      v101 = *(_QWORD *)(v0 + 128);
      sub_1000126B0(v129, type metadata accessor for SharedBeaconRecord);
      sub_100884DFC(v100, v97, v111, v93, v92, v96, v98, (_QWORD *)(v0 + 16));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unownedRetainStrong(*(_QWORD *)(v101 + 128));
      v102 = *(_QWORD *)(v0 + 40);
      v103 = *(_QWORD *)(v0 + 48);
      v104 = sub_10001AA44((_QWORD *)(v0 + 16), v102);
      sub_100A3B794((uint64_t)v104, 0, 0, v102, v103);
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
      sub_1000126B0(v105, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0(v106, type metadata accessor for MemberPeerTrust);
      sub_100004048(v107, &qword_1010EC868);
      sub_100004048(v99, (uint64_t *)&unk_1010EE180);
      swift_task_dealloc(v99);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v110);
      swift_task_dealloc(v107);
      swift_task_dealloc(v113);
      swift_task_dealloc(v116);
      swift_task_dealloc(v106);
      swift_task_dealloc(v119);
      swift_task_dealloc(v122);
      swift_task_dealloc(v105);
      swift_task_dealloc(v125);
      swift_task_dealloc(v132);
      swift_task_dealloc(v129);
      v39 = *(void (**)(void))(v0 + 8);
LABEL_13:
      v39();
      return;
    }
    v79 = *(_QWORD *)(v0 + 160);
    v80 = *(_QWORD *)(v0 + 136);
    v81 = swift_slowAlloc(14, -1);
    *(_DWORD *)v81 = 67109376;
    v82 = *(_QWORD *)(v78 + *(int *)(v80 + 44));
    sub_10005972C(v78, v79, type metadata accessor for SharedBeaconRecord);
    if (v82 == 76)
    {
      if (qword_1010EA5C0 != -1)
        swift_once(&qword_1010EA5C0, sub_100D3ADF0);
      v83 = *(_QWORD *)(v0 + 160);
      v84 = sub_100A07598(*(_QWORD *)(v83 + *(int *)(*(_QWORD *)(v0 + 136) + 48)), qword_1011B8460);
      sub_1000126B0(v83, type metadata accessor for SharedBeaconRecord);
      if (v84)
      {
        v85 = 1;
LABEL_50:
        sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for SharedBeaconRecord);
        *(_DWORD *)(v0 + 428) = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v114, v0 + 432, v81 + 4, v81 + 8);
        *(_WORD *)(v81 + 8) = 1024;
        *(_DWORD *)(v0 + 432) = v70 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 436, v81 + 10, v81 + 14);
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "post Share Suggestion Notification,\nisAirTag:%{BOOL}d,\nisContainBlockedMembers:%{BOOL}d", (uint8_t *)v81, 0xEu);
        swift_slowDealloc(v81, -1, -1);
        goto LABEL_51;
      }
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for SharedBeaconRecord);
    }
    v85 = 0;
    goto LABEL_50;
  }
  v40 = 0;
  v124 = *(_QWORD *)(v0 + 184);
  v128 = *(_QWORD *)(v0 + 192);
  while (1)
  {
    if (v40 >= *(_QWORD *)(v13 + 16))
    {
      __break(1u);
      goto LABEL_58;
    }
    v41 = v13;
    v42 = *(_QWORD *)(v0 + 208);
    v43 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
    v1 = *(_QWORD *)(v128 + 72);
    sub_10005972C(*(_QWORD *)(v0 + 408) + v43 + v1 * v40, v42, type metadata accessor for MemberPeerTrust);
    v44 = (uint64_t *)(v42 + *(int *)(v124 + 32));
    v45 = *v44;
    v46 = v44[1];
    v47 = HIBYTE(v46) & 0xF;
    if ((v46 & 0x2000000000000000) == 0)
      v47 = v45 & 0xFFFFFFFFFFFFLL;
    if (!v47)
      goto LABEL_16;
    *(_QWORD *)(v0 + 80) = v45;
    *(_QWORD *)(v0 + 88) = v46;
    *(_QWORD *)(v0 + 96) = 64;
    *(_QWORD *)(v0 + 104) = 0xE100000000000000;
    v48 = sub_1000330C8();
    swift_bridgeObjectRetain(v46);
    v49 = StringProtocol.contains<A>(_:)(v0 + 96, &type metadata for String, &type metadata for String, v48, v48);
    v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if ((v49 & 1) == 0)
    {
      v58 = (void *)IDSCopyIDForPhoneNumber(v50);

      if (!v58)
        goto LABEL_61;
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      v61 = v60;

      v62 = (void *)sub_100ACD7B4(1, v59, v61);
      v63 = objc_msgSend(v62, "destination");

      if (!v63)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v63 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      v64 = (void *)CFPhoneNumberCreate(kCFAllocatorDefault, v63, 0);

      v65 = CMFItemCreateWithPhoneNumber(v64);
      if (!v65)
        goto LABEL_62;
      v57 = v65;

      goto LABEL_33;
    }
    v51 = (void *)IDSCopyIDForEmailAddress(v50);

    if (!v51)
      break;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    v55 = (void *)sub_100ACD7B4(0, v52, v54);
    v56 = objc_msgSend(v55, "destination");

    if (!v56)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    v57 = CMFItemCreateWithEmailAddress(v56);

    if (!v57)
      goto LABEL_60;
LABEL_33:
    IsItemBlocked = CMFBlockListIsItemBlocked(v57);
    swift_unknownObjectRelease(v57);
    swift_bridgeObjectRelease();
    if (IsItemBlocked)
    {
      sub_1000126EC(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 200), type metadata accessor for MemberPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A7D0(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v13 = v41;
      v68 = _swiftEmptyArrayStorage[2];
      v67 = _swiftEmptyArrayStorage[3];
      if (v68 >= v67 >> 1)
        sub_10009A7D0(v67 > 1, v68 + 1, 1);
      v69 = *(_QWORD *)(v0 + 200);
      _swiftEmptyArrayStorage[2] = v68 + 1;
      sub_1000126EC(v69, (uint64_t)_swiftEmptyArrayStorage + v43 + v68 * v1, type metadata accessor for MemberPeerTrust);
      goto LABEL_17;
    }
LABEL_16:
    sub_1000126B0(*(_QWORD *)(v0 + 208), type metadata accessor for MemberPeerTrust);
    v13 = v41;
LABEL_17:
    if (v131 == ++v40)
      goto LABEL_39;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
}

uint64_t sub_100899B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100899BE4, 0, 0);
}

uint64_t sub_100899BE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 136);
  *(_QWORD *)(v0 + 72) = v1;
  return swift_task_switch(sub_100899C00, v1, 0);
}

uint64_t sub_100899C00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0[8];
  v2 = v0[9];
  v4 = v0[6];
  v3 = v0[7];
  v5 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101097CF8, v7 + v3, v6 | 7);
  v0[10] = v8;
  *(_QWORD *)(v8 + 16) = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[11] = v10;
  v11 = sub_10001A9A8(&qword_1010EC868);
  *v10 = v0;
  v10[1] = sub_100899CE8;
  return unsafeBlocking<A>(_:)(v0[2], sub_100067E08, v8, v11);
}

uint64_t sub_100899CE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 80);
  v2 = *(_QWORD *)(*v0 + 64);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100899D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;

  v5[53] = a4;
  v5[54] = v4;
  v5[51] = a2;
  v5[52] = a3;
  v5[50] = a1;
  v6 = type metadata accessor for ItemShareRequestReceivedUserNotification(0);
  v5[55] = v6;
  v5[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EE178);
  v5[57] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F7820);
  v5[58] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[59] = swift_task_alloc(v9);
  v5[60] = swift_task_alloc(v9);
  v5[61] = swift_task_alloc(v9);
  v5[62] = swift_task_alloc(v9);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v5[63] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[64] = swift_task_alloc(v11);
  v5[65] = swift_task_alloc(v11);
  v12 = type metadata accessor for OwnerPeerTrust(0);
  v5[66] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[67] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[68] = swift_task_alloc(v14);
  v5[69] = swift_task_alloc(v14);
  v5[70] = swift_task_alloc(v14);
  v15 = type metadata accessor for UUID(0);
  v5[71] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[72] = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v5[73] = v17;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[74] = swift_task_alloc(v18);
  v5[75] = swift_task_alloc(v18);
  v5[76] = swift_task_alloc(v18);
  v5[77] = swift_task_alloc(v18);
  v19 = (_QWORD *)swift_task_alloc(dword_10110B654);
  v5[78] = v19;
  *v19 = v5;
  v19[1] = sub_100899F38;
  v19[15] = v4;
  return swift_task_switch(sub_100897778, v4, 0);
}

uint64_t sub_100899F38(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(*v2 + 624);
  v4 = *v2;
  *(_QWORD *)(v4 + 632) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v5 = *(_QWORD *)(v4 + 608);
    v6 = *(_QWORD *)(v4 + 600);
    v7 = *(_QWORD *)(v4 + 592);
    v8 = *(_QWORD *)(v4 + 560);
    v9 = *(_QWORD *)(v4 + 552);
    v10 = *(_QWORD *)(v4 + 544);
    v11 = *(_QWORD *)(v4 + 520);
    v16 = *(_QWORD *)(v4 + 512);
    v17 = *(_QWORD *)(v4 + 496);
    v18 = *(_QWORD *)(v4 + 488);
    v19 = *(_QWORD *)(v4 + 480);
    v20 = *(_QWORD *)(v4 + 472);
    v21 = *(_QWORD *)(v4 + 464);
    v12 = *(_QWORD *)(v4 + 448);
    v22 = *(_QWORD *)(v4 + 456);
    swift_task_dealloc(*(_QWORD *)(v4 + 616));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v14 = (_QWORD *)swift_task_alloc(dword_10110B64C);
    *(_QWORD *)(v4 + 640) = v14;
    *v14 = v4;
    v14[1] = sub_10089A0D0;
    v15 = *(_QWORD *)(v4 + 432);
    v14[25] = v4 + 224;
    v14[26] = v15;
    return swift_task_switch(sub_10089743C, v15, 0);
  }
}

uint64_t sub_10089A0D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(*v1 + 640);
  v3 = *v1;
  *(_QWORD *)(v3 + 648) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10089E038, *(_QWORD *)(v3 + 432), 0);
  v5 = *(_QWORD *)(v3 + 400);
  v6 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v3 + 656) = v6;
  v7 = *(int *)(v6 + 24);
  *(_DWORD *)(v3 + 884) = v7;
  v8 = v5 + v7;
  v9 = (_QWORD *)swift_task_alloc(dword_10110B694);
  *(_QWORD *)(v3 + 664) = v9;
  *v9 = v3;
  v9[1] = sub_10089A188;
  return sub_1008A3C24(v8);
}

uint64_t sub_10089A188(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 664);
  v5 = *(_QWORD *)(*v2 + 432);
  *(_QWORD *)(v3 + 672) = a1;
  *(_QWORD *)(v3 + 680) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10089A1EC, v5, 0);
}

uint64_t sub_10089A1EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 432) + 136);
  *(_QWORD *)(v0 + 688) = v1;
  return swift_task_switch(sub_10089A208, v1, 0);
}

uint64_t sub_10089A208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 584);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 400) + *(int *)(v0 + 884);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 696) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 888) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101097C08, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 704) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 712) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 720) = v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
  *v13 = v0;
  v13[1] = sub_10089A31C;
  return unsafeBlocking<A>(_:)(v0 + 64, sub_1000D9638, v10, v14);
}

uint64_t sub_10089A31C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 432);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 720));
  swift_release();
  return swift_task_switch(sub_10089A380, v1, 0);
}

uint64_t sub_10089A380()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 424);
  if (v1)
  {
    v2 = *(_BYTE *)(v0 + 408);
    v3 = (_QWORD *)swift_task_alloc(dword_101112094);
    *(_QWORD *)(v0 + 728) = v3;
    *v3 = v0;
    v3[1] = sub_10089A718;
    return sub_100AAF5B4(v2, *(_QWORD *)(v0 + 416), v1);
  }
  v5 = *(_QWORD *)(v0 + 576);
  v6 = *(_QWORD *)(v0 + 464);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 400) + *(int *)(*(_QWORD *)(v0 + 656) + 32)));
  sub_1008970FC(v7, v6);
  swift_bridgeObjectRelease();
  v8 = sub_10001A9A8(&qword_1010F2B78);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    v9 = *(_QWORD *)(v0 + 568);
    v10 = *(_QWORD *)(v0 + 496);
    sub_100004048(*(_QWORD *)(v0 + 464), (uint64_t *)&unk_1010F7820);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v9);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 576);
    v12 = *(_QWORD *)(v0 + 568);
    v13 = *(_QWORD *)(v0 + 496);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 712))(v13, *(_QWORD *)(v0 + 464), v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v12);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v12) != 1)
    {
      v31 = *(_QWORD *)(v0 + 688);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 712))(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 568));
      return swift_task_switch(sub_10089C148, v31, 0);
    }
  }
  v14 = *(_QWORD *)(v0 + 496);
  swift_bridgeObjectRelease();
  sub_100004048(v14, &qword_1010ED860);
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7860);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v20 = *(_QWORD *)(v0 + 632);
  if (v19)
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Can't post Request Received Notification! invalid member destination.", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  swift_unknownObjectRelease(v20);
  sub_100004048(v0 + 64, (uint64_t *)&unk_1010EE310);
  v22 = *(_QWORD *)(v0 + 616);
  v23 = *(_QWORD *)(v0 + 608);
  v24 = *(_QWORD *)(v0 + 600);
  v25 = *(_QWORD *)(v0 + 592);
  v26 = *(_QWORD *)(v0 + 560);
  v27 = *(_QWORD *)(v0 + 552);
  v28 = *(_QWORD *)(v0 + 544);
  v29 = *(_QWORD *)(v0 + 520);
  v30 = *(_QWORD *)(v0 + 512);
  v32 = *(_QWORD *)(v0 + 496);
  v33 = *(_QWORD *)(v0 + 488);
  v34 = *(_QWORD *)(v0 + 480);
  v35 = *(_QWORD *)(v0 + 472);
  v36 = *(_QWORD *)(v0 + 464);
  v37 = *(_QWORD *)(v0 + 456);
  v38 = *(_QWORD *)(v0 + 448);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089A718(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 728);
  v3[92] = a1;
  v3[93] = v1;
  swift_task_dealloc(v4);
  v5 = v3[54];
  if (v1)
  {
    swift_errorRelease(v1);
    v6 = sub_10089AC50;
  }
  else
  {
    v6 = sub_10089A794;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10089A794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 736);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 536) + 80);
    sub_10005972C(v1 + ((v2 + 32) & ~v2), *(_QWORD *)(v0 + 520), type metadata accessor for OwnerPeerTrust);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 528);
  v6 = *(_QWORD *)(v0 + 520);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v3, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 520), (uint64_t *)&unk_1010EE160);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 656);
    v8 = *(_QWORD *)(v0 + 400);
    sub_1000126EC(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 552), type metadata accessor for OwnerPeerTrust);
    v9 = *(_QWORD *)(v8 + *(int *)(v7 + 32));
    if (*(_QWORD *)(v9 + 16))
    {
      v10 = sub_100003FB0(*(_QWORD *)(v0 + 552) + *(int *)(*(_QWORD *)(v0 + 528) + 20));
      if ((v11 & 1) != 0 && *(_BYTE *)(*(_QWORD *)(v9 + 56) + v10) == 2)
      {
        v12 = *(_QWORD *)(v0 + 424);
        v13 = *(_BYTE *)(v0 + 408);
        sub_10005972C(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 560), type metadata accessor for OwnerPeerTrust);
        sub_10001AA44((_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 248));
        v14 = (_QWORD *)swift_task_alloc(dword_10110DF74);
        *(_QWORD *)(v0 + 752) = v14;
        *v14 = v0;
        v14[1] = sub_10089AFB8;
        return sub_100987F48(v13, *(_QWORD *)(v0 + 416), v12);
      }
    }
    sub_1000126B0(*(_QWORD *)(v0 + 552), type metadata accessor for OwnerPeerTrust);
  }
  v16 = *(_QWORD *)(v0 + 576);
  v17 = *(_QWORD *)(v0 + 464);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 400) + *(int *)(*(_QWORD *)(v0 + 656) + 32)));
  sub_1008970FC(v18, v17);
  swift_bridgeObjectRelease();
  v19 = sub_10001A9A8(&qword_1010F2B78);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v17, 1, v19) == 1)
  {
    v20 = *(_QWORD *)(v0 + 568);
    v21 = *(_QWORD *)(v0 + 496);
    sub_100004048(*(_QWORD *)(v0 + 464), (uint64_t *)&unk_1010F7820);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v21, 1, 1, v20);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 576);
    v23 = *(_QWORD *)(v0 + 568);
    v24 = *(_QWORD *)(v0 + 496);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 712))(v24, *(_QWORD *)(v0 + 464), v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v23);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v24, 1, v23) != 1)
    {
      v42 = *(_QWORD *)(v0 + 688);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 712))(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 568));
      return swift_task_switch(sub_10089C148, v42, 0);
    }
  }
  v25 = *(_QWORD *)(v0 + 496);
  swift_bridgeObjectRelease();
  sub_100004048(v25, &qword_1010ED860);
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B7860);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter(v28);
  v30 = os_log_type_enabled(v28, v29);
  v31 = *(_QWORD *)(v0 + 632);
  if (v30)
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Can't post Request Received Notification! invalid member destination.", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  swift_unknownObjectRelease(v31);
  sub_100004048(v0 + 64, (uint64_t *)&unk_1010EE310);
  v33 = *(_QWORD *)(v0 + 616);
  v34 = *(_QWORD *)(v0 + 608);
  v35 = *(_QWORD *)(v0 + 600);
  v36 = *(_QWORD *)(v0 + 592);
  v37 = *(_QWORD *)(v0 + 560);
  v38 = *(_QWORD *)(v0 + 552);
  v39 = *(_QWORD *)(v0 + 544);
  v40 = *(_QWORD *)(v0 + 520);
  v41 = *(_QWORD *)(v0 + 512);
  v43 = *(_QWORD *)(v0 + 496);
  v44 = *(_QWORD *)(v0 + 488);
  v45 = *(_QWORD *)(v0 + 480);
  v46 = *(_QWORD *)(v0 + 472);
  v47 = *(_QWORD *)(v0 + 464);
  v48 = *(_QWORD *)(v0 + 456);
  v49 = *(_QWORD *)(v0 + 448);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089AC50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 536) + 56))(*(_QWORD *)(v0 + 520), 1, 1, *(_QWORD *)(v0 + 528));
  sub_100004048(*(_QWORD *)(v0 + 520), (uint64_t *)&unk_1010EE160);
  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 464);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 400) + *(int *)(*(_QWORD *)(v0 + 656) + 32)));
  sub_1008970FC(v3, v2);
  swift_bridgeObjectRelease();
  v4 = sub_10001A9A8(&qword_1010F2B78);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4) == 1)
  {
    v5 = *(_QWORD *)(v0 + 568);
    v6 = *(_QWORD *)(v0 + 496);
    sub_100004048(*(_QWORD *)(v0 + 464), (uint64_t *)&unk_1010F7820);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1, 1, v5);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 576);
    v8 = *(_QWORD *)(v0 + 568);
    v9 = *(_QWORD *)(v0 + 496);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 712))(v9, *(_QWORD *)(v0 + 464), v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v9, 0, 1, v8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8) != 1)
    {
      v28 = *(_QWORD *)(v0 + 688);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 712))(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 568));
      return swift_task_switch(sub_10089C148, v28, 0);
    }
  }
  v10 = *(_QWORD *)(v0 + 496);
  swift_bridgeObjectRelease();
  sub_100004048(v10, &qword_1010ED860);
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7860);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter(v13);
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 632);
  if (v15)
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Can't post Request Received Notification! invalid member destination.", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  swift_unknownObjectRelease(v16);
  sub_100004048(v0 + 64, (uint64_t *)&unk_1010EE310);
  v18 = *(_QWORD *)(v0 + 616);
  v19 = *(_QWORD *)(v0 + 608);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 592);
  v22 = *(_QWORD *)(v0 + 560);
  v23 = *(_QWORD *)(v0 + 552);
  v24 = *(_QWORD *)(v0 + 544);
  v25 = *(_QWORD *)(v0 + 520);
  v26 = *(_QWORD *)(v0 + 512);
  v29 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 488);
  v31 = *(_QWORD *)(v0 + 480);
  v32 = *(_QWORD *)(v0 + 472);
  v33 = *(_QWORD *)(v0 + 464);
  v34 = *(_QWORD *)(v0 + 456);
  v35 = *(_QWORD *)(v0 + 448);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089AFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 752);
  *(_QWORD *)(*(_QWORD *)v3 + 760) = v2;
  swift_task_dealloc(v7);
  v8 = v6[54];
  if (v2)
  {
    swift_errorRelease(v2);
    v9 = sub_10089BBA8;
  }
  else
  {
    v6[96] = a2;
    v6[97] = a1;
    v9 = sub_10089B048;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_10089B048()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  _BOOL4 v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  int *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  char *v64;
  _QWORD *v65;
  id v66;
  NSString v67;
  id v68;
  id v69;
  id v70;
  NSString v71;
  id v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v1 = (_QWORD *)(v0 + 224);
  v109 = *(_QWORD *)(v0 + 768);
  v99 = *(_QWORD *)(v0 + 776);
  sub_1000126B0(*(_QWORD *)(v0 + 552), type metadata accessor for OwnerPeerTrust);
  v2 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 456);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = swift_bridgeObjectRetain(*(_QWORD *)(v4 + *(int *)(*(_QWORD *)(v0 + 656) + 32)));
  v6 = sub_100508A54(v5);
  swift_bridgeObjectRelease();
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v4;
  v8 = sub_100307244((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_1008A4958, v7, v6);
  swift_release();
  swift_task_dealloc(v7);
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v9 + 16) = v2;
  sub_100896D1C(v8, sub_1008A4970, v3);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v9);
  v10 = sub_10001A9A8(&qword_1010EE170);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v3, 1, v10) == 1)
  {
    v11 = *(_QWORD *)(v0 + 576);
    v12 = *(_QWORD *)(v0 + 568);
    v13 = *(_QWORD *)(v0 + 488);
    sub_100004048(*(_QWORD *)(v0 + 456), &qword_1010EE178);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v13, 1, 1, v12);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 576);
    v15 = *(_QWORD *)(v0 + 568);
    v16 = *(_QWORD *)(v0 + 488);
    v17 = *(_QWORD *)(v0 + 456) + *(int *)(v10 + 48);
    (*(void (**)(uint64_t))(v0 + 712))(v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v15);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v15);
  }
  v18 = *(_QWORD *)(v0 + 680);
  v102 = v0 + 880;
  v106 = v0 + 64;
  if (!v18)
    goto LABEL_11;
  sub_10000F9B8(v0 + 64, v0 + 264, (uint64_t *)&unk_1010EE310);
  if (!*(_QWORD *)(v0 + 288))
  {
    sub_100004048(v0 + 264, (uint64_t *)&unk_1010EE310);
    goto LABEL_11;
  }
  sub_10000F9FC((__int128 *)(v0 + 264), v0 + 144);
  if (!v109)
  {
LABEL_9:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
LABEL_11:
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v22 = *(_QWORD *)(v0 + 680);
    v23 = *(_QWORD *)(v0 + 488);
    v24 = *(_QWORD *)(v0 + 472);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7860);
    sub_10000F9B8(v0 + 64, v0 + 184, (uint64_t *)&unk_1010EE310);
    sub_10000F9B8(v23, v24, &qword_1010ED860);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v22);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = v18 != 0;
      v94 = *(_QWORD *)(v0 + 568);
      v86 = *(_QWORD *)(v0 + 576);
      v88 = *(_QWORD *)(v0 + 472);
      v30 = swift_slowAlloc(26, -1);
      *(_DWORD *)v30 = 67109888;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 876) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 876, v102, v30 + 4, v30 + 8);
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 8) = 1024;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 872) = v109 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 876, v30 + 10, v30 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 14) = 1024;
      v31 = *(_QWORD *)(v0 + 208) != 0;
      sub_100004048(v0 + 184, (uint64_t *)&unk_1010EE310);
      *(_DWORD *)(v0 + 868) = v31;
      v1 = (_QWORD *)(v0 + 224);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 868, v0 + 872, v30 + 16, v30 + 20);
      *(_WORD *)(v30 + 20) = 1024;
      v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v88, 1, v94) != 1;
      sub_100004048(v88, &qword_1010ED860);
      *(_DWORD *)(v0 + 864) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 864, v0 + 868, v30 + 22, v30 + 26);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Can't post Request Received Notification!\nbeaconName(%{BOOL}d), memberName(%{BOOL}d),\nbeaconRecord(%{BOOL}d), clientShareIdentifier(%{BOOL}d)", (uint8_t *)v30, 0x1Au);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      sub_100004048(*(_QWORD *)(v0 + 472), &qword_1010ED860);
      sub_100004048(v0 + 184, (uint64_t *)&unk_1010EE310);
      swift_bridgeObjectRelease_n(v109, 2);
      swift_bridgeObjectRelease_n(v22, 2);
    }

    v33 = *(_QWORD *)(v0 + 632);
    v34 = *(_QWORD *)(v0 + 560);
    v35 = *(_QWORD *)(v0 + 488);
    v36 = sub_1008A450C();
    v110 = swift_allocError(&type metadata for ItemSharingNotificationError, v36, 0, 0);
    swift_willThrow(v110);
    swift_unknownObjectRelease(v33);
    sub_100004048(v35, &qword_1010ED860);
    sub_100004048(v106, (uint64_t *)&unk_1010EE310);
    sub_1000126B0(v34, type metadata accessor for OwnerPeerTrust);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v37 = *(_QWORD *)(v0 + 608);
    v38 = *(_QWORD *)(v0 + 600);
    v39 = *(_QWORD *)(v0 + 592);
    v40 = *(_QWORD *)(v0 + 560);
    v41 = *(_QWORD *)(v0 + 552);
    v42 = *(_QWORD *)(v0 + 544);
    v43 = *(_QWORD *)(v0 + 520);
    v44 = *(_QWORD *)(v0 + 512);
    v45 = *(_QWORD *)(v0 + 496);
    v91 = *(_QWORD *)(v0 + 488);
    v95 = *(_QWORD *)(v0 + 480);
    v98 = *(_QWORD *)(v0 + 472);
    v100 = *(_QWORD *)(v0 + 464);
    v103 = *(_QWORD *)(v0 + 456);
    v107 = *(_QWORD *)(v0 + 448);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v91);
    swift_task_dealloc(v95);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v103);
    swift_task_dealloc(v107);
    v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }
  v19 = *(_QWORD *)(v0 + 576);
  v20 = *(_QWORD *)(v0 + 568);
  v21 = *(_QWORD *)(v0 + 480);
  sub_10000F9B8(*(_QWORD *)(v0 + 488), v21, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v21, 1, v20) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 480), &qword_1010ED860);
    goto LABEL_9;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 712))(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 568));
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v48 = type metadata accessor for Logger(0);
  sub_10001A9E8(v48, (uint64_t)qword_1011B7860);
  v96 = (_QWORD *)(v0 + 144);
  v49 = sub_100030784(v0 + 144, v0 + 344);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.default.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v52 = 67109120;
    v53 = *(_QWORD *)(v0 + 368);
    v54 = *(_QWORD *)(v0 + 376);
    sub_10001AA44((_QWORD *)(v0 + 344), v53);
    LODWORD(v53) = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 96))(v53, v54) & 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 344));
    *(_DWORD *)(v0 + 880) = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v102, v0 + 884, v52 + 4, v52 + 8);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "post Request Received Notification, isAirTag:%{BOOL}d", v52, 8u);
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 344));
  }

  v55 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 696);
  v56 = *(_QWORD *)(v0 + 592);
  v87 = *(_QWORD *)(v0 + 632);
  v57 = *(_QWORD *)(v0 + 568);
  v104 = *(_QWORD *)(v0 + 560);
  v89 = *(_QWORD *)(v0 + 576);
  v92 = *(_QWORD *)(v0 + 488);
  v58 = *(int **)(v0 + 440);
  v59 = *(char **)(v0 + 448);
  v84 = *(_QWORD *)(v0 + 432);
  v85 = *(_QWORD *)(v0 + 672);
  v60 = *(_QWORD *)(v0 + 168);
  v61 = *(_QWORD *)(v0 + 176);
  sub_10001AA44(v96, v60);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 96))(v60, v61);
  *(_WORD *)v59 = 25089;
  v55(&v59[v58[6]], v56, v57);
  v63 = &v59[v58[7]];
  *(_QWORD *)v63 = v99;
  *((_QWORD *)v63 + 1) = v109;
  v64 = &v59[v58[8]];
  *(_QWORD *)v64 = v85;
  *((_QWORD *)v64 + 1) = v18;
  v59[v58[9]] = v62 & 1;
  swift_unownedRetainStrong(*(_QWORD *)(v84 + 128));
  *(_QWORD *)(v0 + 328) = v58;
  *(_QWORD *)(v0 + 336) = &off_101064E30;
  v65 = sub_100018F08((_QWORD *)(v0 + 304));
  sub_10005972C((uint64_t)v59, (uint64_t)v65, type metadata accessor for ItemShareRequestReceivedUserNotification);
  v66 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v68 = objc_msgSend(v66, "initWithBundleIdentifier:", v67);

  v69 = sub_100C0BB7C((uint64_t)v65);
  UUID.uuidString.getter(v69);
  v70 = v69;
  v71 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v72 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:destinations:", v71, v70, 0, 7);

  sub_100030784(v0 + 304, v0 + 104);
  v73 = swift_allocObject(&unk_101097C58, 72, 7);
  sub_10000F9FC((__int128 *)(v0 + 104), v73 + 16);
  *(_QWORD *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_QWORD *)(v0 + 48) = sub_100216F78;
  *(_QWORD *)(v0 + 56) = v73;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_100555E2C;
  *(_QWORD *)(v0 + 40) = &unk_101097C70;
  v74 = _Block_copy((const void *)(v0 + 16));
  swift_release();
  objc_msgSend(v68, "addNotificationRequest:withCompletionHandler:", v72, v74);

  _Block_release(v74);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 304));
  swift_release();
  swift_unknownObjectRelease(v87);
  sub_1000126B0((uint64_t)v59, type metadata accessor for ItemShareRequestReceivedUserNotification);
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v56, v57);
  sub_100004048(v92, &qword_1010ED860);
  sub_100004048(v106, (uint64_t *)&unk_1010EE310);
  sub_1000126B0(v104, type metadata accessor for OwnerPeerTrust);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v96);
  v75 = *(_QWORD *)(v0 + 616);
  v76 = *(_QWORD *)(v0 + 608);
  v77 = *(_QWORD *)(v0 + 600);
  v78 = *(_QWORD *)(v0 + 592);
  v79 = *(_QWORD *)(v0 + 560);
  v80 = *(_QWORD *)(v0 + 552);
  v81 = *(_QWORD *)(v0 + 544);
  v82 = *(_QWORD *)(v0 + 520);
  v83 = *(_QWORD *)(v0 + 512);
  v90 = *(_QWORD *)(v0 + 496);
  v93 = *(_QWORD *)(v0 + 488);
  v97 = *(_QWORD *)(v0 + 480);
  v101 = *(_QWORD *)(v0 + 472);
  v105 = *(_QWORD *)(v0 + 464);
  v108 = *(_QWORD *)(v0 + 456);
  v111 = *(_QWORD *)(v0 + 448);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v90);
  swift_task_dealloc(v93);
  swift_task_dealloc(v97);
  swift_task_dealloc(v101);
  swift_task_dealloc(v105);
  swift_task_dealloc(v108);
  swift_task_dealloc(v111);
  v46 = *(uint64_t (**)(void))(v0 + 8);
  return v46();
}

uint64_t sub_10089BBA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v52 = v0 + 64;
  sub_1000126B0(*(_QWORD *)(v0 + 552), type metadata accessor for OwnerPeerTrust);
  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 400);
  v4 = swift_bridgeObjectRetain(*(_QWORD *)(v3 + *(int *)(*(_QWORD *)(v0 + 656) + 32)));
  v5 = sub_100508A54(v4);
  swift_bridgeObjectRelease();
  v6 = swift_task_alloc(32);
  *(_QWORD *)(v6 + 16) = v3;
  v7 = sub_100307244((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_1008A4958, v6, v5);
  swift_release();
  swift_task_dealloc(v6);
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = v1;
  sub_100896D1C(v7, sub_1008A4970, v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v8);
  v9 = sub_10001A9A8(&qword_1010EE170);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v2, 1, v9) == 1)
  {
    v10 = *(_QWORD *)(v0 + 576);
    v11 = *(_QWORD *)(v0 + 568);
    v12 = *(_QWORD *)(v0 + 488);
    sub_100004048(*(_QWORD *)(v0 + 456), &qword_1010EE178);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v11);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 576);
    v14 = *(_QWORD *)(v0 + 568);
    v15 = *(_QWORD *)(v0 + 488);
    v16 = *(_QWORD *)(v0 + 456) + *(int *)(v9 + 48);
    (*(void (**)(uint64_t))(v0 + 712))(v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v14);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v14);
  }
  v17 = *(_QWORD *)(v0 + 680);
  if (v17)
  {
    sub_10000F9B8(v52, v0 + 264, (uint64_t *)&unk_1010EE310);
    if (*(_QWORD *)(v0 + 288))
    {
      sub_10000F9FC((__int128 *)(v0 + 264), v0 + 144);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
    }
    else
    {
      sub_100004048(v0 + 264, (uint64_t *)&unk_1010EE310);
    }
  }
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v18 = *(_QWORD *)(v0 + 680);
  v19 = *(_QWORD *)(v0 + 488);
  v20 = *(_QWORD *)(v0 + 472);
  v21 = type metadata accessor for Logger(0);
  sub_10001A9E8(v21, (uint64_t)qword_1011B7860);
  sub_10000F9B8(v52, v0 + 184, (uint64_t *)&unk_1010EE310);
  sub_10000F9B8(v19, v20, &qword_1010ED860);
  swift_bridgeObjectRetain(v18);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = v17 != 0;
    v46 = *(_QWORD *)(v0 + 576);
    v49 = *(_QWORD *)(v0 + 568);
    v26 = *(_QWORD *)(v0 + 472);
    v27 = swift_slowAlloc(26, -1);
    *(_DWORD *)v27 = 67109888;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 876) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 876, v0 + 880, v27 + 4, v27 + 8);
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 8) = 1024;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 872) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 876, v27 + 10, v27 + 14);
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 14) = 1024;
    v28 = *(_QWORD *)(v0 + 208) != 0;
    sub_100004048(v0 + 184, (uint64_t *)&unk_1010EE310);
    *(_DWORD *)(v0 + 868) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 868, v0 + 872, v27 + 16, v27 + 20);
    *(_WORD *)(v27 + 20) = 1024;
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v26, 1, v49) != 1;
    sub_100004048(v26, &qword_1010ED860);
    *(_DWORD *)(v0 + 864) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 864, v0 + 868, v27 + 22, v27 + 26);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Can't post Request Received Notification!\nbeaconName(%{BOOL}d), memberName(%{BOOL}d),\nbeaconRecord(%{BOOL}d), clientShareIdentifier(%{BOOL}d)", (uint8_t *)v27, 0x1Au);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    sub_100004048(*(_QWORD *)(v0 + 472), &qword_1010ED860);
    sub_100004048(v0 + 184, (uint64_t *)&unk_1010EE310);
    swift_bridgeObjectRelease_n(0, 2);
    swift_bridgeObjectRelease_n(v18, 2);
  }

  v30 = *(_QWORD *)(v0 + 632);
  v31 = *(_QWORD *)(v0 + 560);
  v32 = *(_QWORD *)(v0 + 488);
  v33 = sub_1008A450C();
  v51 = swift_allocError(&type metadata for ItemSharingNotificationError, v33, 0, 0);
  swift_willThrow(v51);
  swift_unknownObjectRelease(v30);
  sub_100004048(v32, &qword_1010ED860);
  sub_100004048(v52, (uint64_t *)&unk_1010EE310);
  sub_1000126B0(v31, type metadata accessor for OwnerPeerTrust);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  v34 = *(_QWORD *)(v0 + 608);
  v35 = *(_QWORD *)(v0 + 600);
  v36 = *(_QWORD *)(v0 + 592);
  v37 = *(_QWORD *)(v0 + 560);
  v38 = *(_QWORD *)(v0 + 552);
  v39 = *(_QWORD *)(v0 + 544);
  v40 = *(_QWORD *)(v0 + 520);
  v41 = *(_QWORD *)(v0 + 512);
  v42 = *(_QWORD *)(v0 + 496);
  v44 = *(_QWORD *)(v0 + 488);
  v45 = *(_QWORD *)(v0 + 480);
  v47 = *(_QWORD *)(v0 + 472);
  v48 = *(_QWORD *)(v0 + 464);
  v50 = *(_QWORD *)(v0 + 456);
  v53 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 616));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089C148()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 712);
  v2 = *(unsigned __int8 *)(v0 + 888);
  v3 = *(_QWORD *)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 616);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 584) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 696))(v4, *(_QWORD *)(v0 + 608), v5);
  v9 = swift_allocObject(&unk_101097C30, v7, v8);
  *(_QWORD *)(v0 + 784) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 792) = v11;
  *v11 = v0;
  v11[1] = sub_10089C234;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 512), sub_10007CC14, v9, *(_QWORD *)(v0 + 504));
}

uint64_t sub_10089C234()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 432);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 792));
  swift_release();
  return swift_task_switch(sub_10089C298, v1, 0);
}

uint64_t sub_10089C298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 512);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 536) + 48))(v2, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100004048(v2, (uint64_t *)&unk_1010EE160);
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
    v4 = *(_QWORD *)(v0 + 608);
    v5 = *(_QWORD *)(v0 + 600);
    v6 = *(_QWORD *)(v0 + 568);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7860);
    v8 = v3(v5, v4, v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 600);
    v13 = *(_QWORD *)(v0 + 576);
    v14 = *(_QWORD *)(v0 + 568);
    if (v11)
    {
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(32, -1);
      v46 = v16;
      *(_DWORD *)v15 = 141558275;
      *(_QWORD *)(v0 + 392) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2081;
      v17 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
      *(_QWORD *)(v0 + 384) = sub_100016940(v18, v19, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease();
      v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v20(v12, v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Can't post Request Received Notification!\nNo peer trust for %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v20(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 568));
    }

    v25 = *(_QWORD *)(v0 + 632);
    v26 = *(_QWORD *)(v0 + 608);
    v27 = *(_QWORD *)(v0 + 568);
    v28 = sub_1008A450C();
    v45 = swift_allocError(&type metadata for ItemSharingNotificationError, v28, 0, 0);
    swift_willThrow(v45);
    swift_unknownObjectRelease(v25);
    v20(v26, v27);
    sub_100004048(v0 + 64, (uint64_t *)&unk_1010EE310);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    v29 = *(_QWORD *)(v0 + 608);
    v30 = *(_QWORD *)(v0 + 600);
    v31 = *(_QWORD *)(v0 + 592);
    v32 = *(_QWORD *)(v0 + 560);
    v33 = *(_QWORD *)(v0 + 552);
    v34 = *(_QWORD *)(v0 + 544);
    v35 = *(_QWORD *)(v0 + 520);
    v36 = *(_QWORD *)(v0 + 512);
    v37 = *(_QWORD *)(v0 + 496);
    v38 = *(_QWORD *)(v0 + 488);
    v39 = *(_QWORD *)(v0 + 480);
    v40 = *(_QWORD *)(v0 + 472);
    v41 = *(_QWORD *)(v0 + 464);
    v42 = *(_QWORD *)(v0 + 456);
    v43 = *(_QWORD *)(v0 + 448);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 544);
    sub_1000126EC(v2, v21, type metadata accessor for OwnerPeerTrust);
    v22 = v21 + *(int *)(v1 + 28);
    v44 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
    v23 = (_QWORD *)swift_task_alloc(unk_10111223C);
    *(_QWORD *)(v0 + 800) = v23;
    *v23 = v0;
    v23[1] = sub_10089C698;
    return v44(v22);
  }
}

uint64_t sub_10089C698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 800);
  v5[101] = a1;
  v5[102] = a2;
  v5[103] = a3;
  swift_task_dealloc(v6);
  if (v3)
  {
    v7 = v5[54];
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    v8 = sub_10089CBA8;
    v9 = v7;
  }
  else
  {
    v9 = v5[54];
    v8 = sub_10089C724;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_10089C724()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 824);
  if (v1)
  {
    v2 = *(_BYTE *)(v0 + 808);
    sub_10005972C(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 560), type metadata accessor for OwnerPeerTrust);
    sub_10001AA44((_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 248));
    v3 = (_QWORD *)swift_task_alloc(dword_10110DF74);
    *(_QWORD *)(v0 + 832) = v3;
    *v3 = v0;
    v3[1] = sub_10089CB04;
    return sub_100987F48(v2, *(_QWORD *)(v0 + 816), v1);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1000126B0(*(_QWORD *)(v0 + 544), type metadata accessor for OwnerPeerTrust);
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
    v6 = *(_QWORD *)(v0 + 608);
    v7 = *(_QWORD *)(v0 + 600);
    v8 = *(_QWORD *)(v0 + 568);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B7860);
    v10 = v5(v7, v6, v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 600);
    v15 = *(_QWORD *)(v0 + 576);
    v16 = *(_QWORD *)(v0 + 568);
    if (v13)
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(32, -1);
      v43 = v18;
      *(_DWORD *)v17 = 141558275;
      *(_QWORD *)(v0 + 392) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2081;
      v19 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
      *(_QWORD *)(v0 + 384) = sub_100016940(v20, v21, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v22(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Can't post Request Received Notification!\nNo peer trust for %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v22(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 568));
    }

    v23 = *(_QWORD *)(v0 + 632);
    v24 = *(_QWORD *)(v0 + 608);
    v25 = *(_QWORD *)(v0 + 568);
    v26 = sub_1008A450C();
    v42 = swift_allocError(&type metadata for ItemSharingNotificationError, v26, 0, 0);
    swift_willThrow(v42);
    swift_unknownObjectRelease(v23);
    v22(v24, v25);
    sub_100004048(v0 + 64, (uint64_t *)&unk_1010EE310);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    v27 = *(_QWORD *)(v0 + 608);
    v28 = *(_QWORD *)(v0 + 600);
    v29 = *(_QWORD *)(v0 + 592);
    v30 = *(_QWORD *)(v0 + 560);
    v31 = *(_QWORD *)(v0 + 552);
    v32 = *(_QWORD *)(v0 + 544);
    v33 = *(_QWORD *)(v0 + 520);
    v34 = *(_QWORD *)(v0 + 512);
    v35 = *(_QWORD *)(v0 + 496);
    v36 = *(_QWORD *)(v0 + 488);
    v37 = *(_QWORD *)(v0 + 480);
    v38 = *(_QWORD *)(v0 + 472);
    v39 = *(_QWORD *)(v0 + 464);
    v40 = *(_QWORD *)(v0 + 456);
    v41 = *(_QWORD *)(v0 + 448);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10089CB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 832);
  *(_QWORD *)(*(_QWORD *)v3 + 840) = v2;
  swift_task_dealloc(v7);
  v8 = v6[54];
  if (v2)
  {
    swift_errorRelease(v2);
    swift_bridgeObjectRelease();
    v9 = sub_10089DA7C;
  }
  else
  {
    swift_bridgeObjectRelease();
    v6[106] = a2;
    v6[107] = a1;
    v9 = sub_10089CF00;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_10089CBA8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_1000126B0(*(_QWORD *)(v0 + 544), type metadata accessor for OwnerPeerTrust);
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 568);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7860);
  v6 = v1(v3, v2, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 600);
  v11 = *(_QWORD *)(v0 + 576);
  v12 = *(_QWORD *)(v0 + 568);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v40 = v14;
    *(_DWORD *)v13 = 141558275;
    *(_QWORD *)(v0 + 392) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 384) = sub_100016940(v16, v17, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Can't post Request Received Notification!\nNo peer trust for %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 568));
  }

  v19 = *(_QWORD *)(v0 + 632);
  v20 = *(_QWORD *)(v0 + 608);
  v21 = *(_QWORD *)(v0 + 568);
  v22 = sub_1008A450C();
  v39 = swift_allocError(&type metadata for ItemSharingNotificationError, v22, 0, 0);
  swift_willThrow(v39);
  swift_unknownObjectRelease(v19);
  v18(v20, v21);
  sub_100004048(v0 + 64, (uint64_t *)&unk_1010EE310);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  v23 = *(_QWORD *)(v0 + 608);
  v24 = *(_QWORD *)(v0 + 600);
  v25 = *(_QWORD *)(v0 + 592);
  v26 = *(_QWORD *)(v0 + 560);
  v27 = *(_QWORD *)(v0 + 552);
  v28 = *(_QWORD *)(v0 + 544);
  v29 = *(_QWORD *)(v0 + 520);
  v30 = *(_QWORD *)(v0 + 512);
  v31 = *(_QWORD *)(v0 + 496);
  v33 = *(_QWORD *)(v0 + 488);
  v34 = *(_QWORD *)(v0 + 480);
  v35 = *(_QWORD *)(v0 + 472);
  v36 = *(_QWORD *)(v0 + 464);
  v37 = *(_QWORD *)(v0 + 456);
  v38 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 616));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089CF00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  int *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  id v69;
  NSString v70;
  id v71;
  id v72;
  id v73;
  NSString v74;
  id v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v1 = (_QWORD *)(v0 + 224);
  v112 = *(_QWORD *)(v0 + 848);
  v102 = *(_QWORD *)(v0 + 856);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 576);
  v4 = *(_QWORD *)(v0 + 568);
  sub_1000126B0(*(_QWORD *)(v0 + 544), type metadata accessor for OwnerPeerTrust);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 456);
  v7 = *(_QWORD *)(v0 + 400);
  v8 = swift_bridgeObjectRetain(*(_QWORD *)(v7 + *(int *)(*(_QWORD *)(v0 + 656) + 32)));
  v9 = sub_100508A54(v8);
  swift_bridgeObjectRelease();
  v10 = swift_task_alloc(32);
  *(_QWORD *)(v10 + 16) = v7;
  v11 = sub_100307244((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_1008A4958, v10, v9);
  swift_release();
  swift_task_dealloc(v10);
  v12 = swift_task_alloc(32);
  *(_QWORD *)(v12 + 16) = v5;
  sub_100896D1C(v11, sub_1008A4970, v6);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v12);
  v13 = sub_10001A9A8(&qword_1010EE170);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v6, 1, v13) == 1)
  {
    v14 = *(_QWORD *)(v0 + 576);
    v15 = *(_QWORD *)(v0 + 568);
    v16 = *(_QWORD *)(v0 + 488);
    sub_100004048(*(_QWORD *)(v0 + 456), &qword_1010EE178);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v16, 1, 1, v15);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 576);
    v18 = *(_QWORD *)(v0 + 568);
    v19 = *(_QWORD *)(v0 + 488);
    v20 = *(_QWORD *)(v0 + 456) + *(int *)(v13 + 48);
    (*(void (**)(uint64_t))(v0 + 712))(v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v18);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v18);
  }
  v21 = *(_QWORD *)(v0 + 680);
  v105 = v0 + 880;
  v109 = v0 + 64;
  if (!v21)
    goto LABEL_11;
  sub_10000F9B8(v0 + 64, v0 + 264, (uint64_t *)&unk_1010EE310);
  if (!*(_QWORD *)(v0 + 288))
  {
    sub_100004048(v0 + 264, (uint64_t *)&unk_1010EE310);
    goto LABEL_11;
  }
  sub_10000F9FC((__int128 *)(v0 + 264), v0 + 144);
  if (!v112)
  {
LABEL_9:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
LABEL_11:
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v25 = *(_QWORD *)(v0 + 680);
    v26 = *(_QWORD *)(v0 + 488);
    v27 = *(_QWORD *)(v0 + 472);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B7860);
    sub_10000F9B8(v0 + 64, v0 + 184, (uint64_t *)&unk_1010EE310);
    sub_10000F9B8(v26, v27, &qword_1010ED860);
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v25);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = v21 != 0;
      v97 = *(_QWORD *)(v0 + 568);
      v89 = *(_QWORD *)(v0 + 576);
      v91 = *(_QWORD *)(v0 + 472);
      v33 = swift_slowAlloc(26, -1);
      *(_DWORD *)v33 = 67109888;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 876) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 876, v105, v33 + 4, v33 + 8);
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 8) = 1024;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 872) = v112 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 876, v33 + 10, v33 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 14) = 1024;
      v34 = *(_QWORD *)(v0 + 208) != 0;
      sub_100004048(v0 + 184, (uint64_t *)&unk_1010EE310);
      *(_DWORD *)(v0 + 868) = v34;
      v1 = (_QWORD *)(v0 + 224);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 868, v0 + 872, v33 + 16, v33 + 20);
      *(_WORD *)(v33 + 20) = 1024;
      v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v91, 1, v97) != 1;
      sub_100004048(v91, &qword_1010ED860);
      *(_DWORD *)(v0 + 864) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 864, v0 + 868, v33 + 22, v33 + 26);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Can't post Request Received Notification!\nbeaconName(%{BOOL}d), memberName(%{BOOL}d),\nbeaconRecord(%{BOOL}d), clientShareIdentifier(%{BOOL}d)", (uint8_t *)v33, 0x1Au);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      sub_100004048(*(_QWORD *)(v0 + 472), &qword_1010ED860);
      sub_100004048(v0 + 184, (uint64_t *)&unk_1010EE310);
      swift_bridgeObjectRelease_n(v112, 2);
      swift_bridgeObjectRelease_n(v25, 2);
    }

    v36 = *(_QWORD *)(v0 + 632);
    v37 = *(_QWORD *)(v0 + 560);
    v38 = *(_QWORD *)(v0 + 488);
    v39 = sub_1008A450C();
    v113 = swift_allocError(&type metadata for ItemSharingNotificationError, v39, 0, 0);
    swift_willThrow(v113);
    swift_unknownObjectRelease(v36);
    sub_100004048(v38, &qword_1010ED860);
    sub_100004048(v109, (uint64_t *)&unk_1010EE310);
    sub_1000126B0(v37, type metadata accessor for OwnerPeerTrust);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v40 = *(_QWORD *)(v0 + 608);
    v41 = *(_QWORD *)(v0 + 600);
    v42 = *(_QWORD *)(v0 + 592);
    v43 = *(_QWORD *)(v0 + 560);
    v44 = *(_QWORD *)(v0 + 552);
    v45 = *(_QWORD *)(v0 + 544);
    v46 = *(_QWORD *)(v0 + 520);
    v47 = *(_QWORD *)(v0 + 512);
    v48 = *(_QWORD *)(v0 + 496);
    v94 = *(_QWORD *)(v0 + 488);
    v98 = *(_QWORD *)(v0 + 480);
    v101 = *(_QWORD *)(v0 + 472);
    v103 = *(_QWORD *)(v0 + 464);
    v106 = *(_QWORD *)(v0 + 456);
    v110 = *(_QWORD *)(v0 + 448);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v94);
    swift_task_dealloc(v98);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v106);
    swift_task_dealloc(v110);
    v49 = *(uint64_t (**)(void))(v0 + 8);
    return v49();
  }
  v22 = *(_QWORD *)(v0 + 576);
  v23 = *(_QWORD *)(v0 + 568);
  v24 = *(_QWORD *)(v0 + 480);
  sub_10000F9B8(*(_QWORD *)(v0 + 488), v24, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v24, 1, v23) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 480), &qword_1010ED860);
    goto LABEL_9;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 712))(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 568));
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v51 = type metadata accessor for Logger(0);
  sub_10001A9E8(v51, (uint64_t)qword_1011B7860);
  v99 = (_QWORD *)(v0 + 144);
  v52 = sub_100030784(v0 + 144, v0 + 344);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v55 = 67109120;
    v56 = *(_QWORD *)(v0 + 368);
    v57 = *(_QWORD *)(v0 + 376);
    sub_10001AA44((_QWORD *)(v0 + 344), v56);
    LODWORD(v56) = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 96))(v56, v57) & 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 344));
    *(_DWORD *)(v0 + 880) = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v105, v0 + 884, v55 + 4, v55 + 8);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "post Request Received Notification, isAirTag:%{BOOL}d", v55, 8u);
    swift_slowDealloc(v55, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 344));
  }

  v58 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 696);
  v59 = *(_QWORD *)(v0 + 592);
  v90 = *(_QWORD *)(v0 + 632);
  v60 = *(_QWORD *)(v0 + 568);
  v107 = *(_QWORD *)(v0 + 560);
  v92 = *(_QWORD *)(v0 + 576);
  v95 = *(_QWORD *)(v0 + 488);
  v61 = *(int **)(v0 + 440);
  v62 = *(char **)(v0 + 448);
  v87 = *(_QWORD *)(v0 + 432);
  v88 = *(_QWORD *)(v0 + 672);
  v63 = *(_QWORD *)(v0 + 168);
  v64 = *(_QWORD *)(v0 + 176);
  sub_10001AA44(v99, v63);
  v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 96))(v63, v64);
  *(_WORD *)v62 = 25089;
  v58(&v62[v61[6]], v59, v60);
  v66 = &v62[v61[7]];
  *(_QWORD *)v66 = v102;
  *((_QWORD *)v66 + 1) = v112;
  v67 = &v62[v61[8]];
  *(_QWORD *)v67 = v88;
  *((_QWORD *)v67 + 1) = v21;
  v62[v61[9]] = v65 & 1;
  swift_unownedRetainStrong(*(_QWORD *)(v87 + 128));
  *(_QWORD *)(v0 + 328) = v61;
  *(_QWORD *)(v0 + 336) = &off_101064E30;
  v68 = sub_100018F08((_QWORD *)(v0 + 304));
  sub_10005972C((uint64_t)v62, (uint64_t)v68, type metadata accessor for ItemShareRequestReceivedUserNotification);
  v69 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v70 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v71 = objc_msgSend(v69, "initWithBundleIdentifier:", v70);

  v72 = sub_100C0BB7C((uint64_t)v68);
  UUID.uuidString.getter(v72);
  v73 = v72;
  v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v75 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:destinations:", v74, v73, 0, 7);

  sub_100030784(v0 + 304, v0 + 104);
  v76 = swift_allocObject(&unk_101097C58, 72, 7);
  sub_10000F9FC((__int128 *)(v0 + 104), v76 + 16);
  *(_QWORD *)(v76 + 56) = 0;
  *(_QWORD *)(v76 + 64) = 0;
  *(_QWORD *)(v0 + 48) = sub_100216F78;
  *(_QWORD *)(v0 + 56) = v76;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_100555E2C;
  *(_QWORD *)(v0 + 40) = &unk_101097C70;
  v77 = _Block_copy((const void *)(v0 + 16));
  swift_release();
  objc_msgSend(v71, "addNotificationRequest:withCompletionHandler:", v75, v77);

  _Block_release(v77);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 304));
  swift_release();
  swift_unknownObjectRelease(v90);
  sub_1000126B0((uint64_t)v62, type metadata accessor for ItemShareRequestReceivedUserNotification);
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v59, v60);
  sub_100004048(v95, &qword_1010ED860);
  sub_100004048(v109, (uint64_t *)&unk_1010EE310);
  sub_1000126B0(v107, type metadata accessor for OwnerPeerTrust);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v99);
  v78 = *(_QWORD *)(v0 + 616);
  v79 = *(_QWORD *)(v0 + 608);
  v80 = *(_QWORD *)(v0 + 600);
  v81 = *(_QWORD *)(v0 + 592);
  v82 = *(_QWORD *)(v0 + 560);
  v83 = *(_QWORD *)(v0 + 552);
  v84 = *(_QWORD *)(v0 + 544);
  v85 = *(_QWORD *)(v0 + 520);
  v86 = *(_QWORD *)(v0 + 512);
  v93 = *(_QWORD *)(v0 + 496);
  v96 = *(_QWORD *)(v0 + 488);
  v100 = *(_QWORD *)(v0 + 480);
  v104 = *(_QWORD *)(v0 + 472);
  v108 = *(_QWORD *)(v0 + 464);
  v111 = *(_QWORD *)(v0 + 456);
  v114 = *(_QWORD *)(v0 + 448);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v93);
  swift_task_dealloc(v96);
  swift_task_dealloc(v100);
  swift_task_dealloc(v104);
  swift_task_dealloc(v108);
  swift_task_dealloc(v111);
  swift_task_dealloc(v114);
  v49 = *(uint64_t (**)(void))(v0 + 8);
  return v49();
}

uint64_t sub_10089DA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = v0 + 64;
  v1 = *(_QWORD *)(v0 + 608);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 568);
  sub_1000126B0(*(_QWORD *)(v0 + 544), type metadata accessor for OwnerPeerTrust);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 560);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 400);
  v7 = swift_bridgeObjectRetain(*(_QWORD *)(v6 + *(int *)(*(_QWORD *)(v0 + 656) + 32)));
  v8 = sub_100508A54(v7);
  swift_bridgeObjectRelease();
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v9 + 16) = v6;
  v10 = sub_100307244((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_1008A4958, v9, v8);
  swift_release();
  swift_task_dealloc(v9);
  v11 = swift_task_alloc(32);
  *(_QWORD *)(v11 + 16) = v4;
  sub_100896D1C(v10, sub_1008A4970, v5);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v11);
  v12 = sub_10001A9A8(&qword_1010EE170);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v5, 1, v12) == 1)
  {
    v13 = *(_QWORD *)(v0 + 576);
    v14 = *(_QWORD *)(v0 + 568);
    v15 = *(_QWORD *)(v0 + 488);
    sub_100004048(*(_QWORD *)(v0 + 456), &qword_1010EE178);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, 1, 1, v14);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 576);
    v17 = *(_QWORD *)(v0 + 568);
    v18 = *(_QWORD *)(v0 + 488);
    v19 = *(_QWORD *)(v0 + 456) + *(int *)(v12 + 48);
    (*(void (**)(uint64_t))(v0 + 712))(v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v17);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v17);
  }
  v20 = *(_QWORD *)(v0 + 680);
  if (v20)
  {
    sub_10000F9B8(v55, v0 + 264, (uint64_t *)&unk_1010EE310);
    if (*(_QWORD *)(v0 + 288))
    {
      sub_10000F9FC((__int128 *)(v0 + 264), v0 + 144);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
    }
    else
    {
      sub_100004048(v0 + 264, (uint64_t *)&unk_1010EE310);
    }
  }
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v21 = *(_QWORD *)(v0 + 680);
  v22 = *(_QWORD *)(v0 + 488);
  v23 = *(_QWORD *)(v0 + 472);
  v24 = type metadata accessor for Logger(0);
  sub_10001A9E8(v24, (uint64_t)qword_1011B7860);
  sub_10000F9B8(v55, v0 + 184, (uint64_t *)&unk_1010EE310);
  sub_10000F9B8(v22, v23, &qword_1010ED860);
  swift_bridgeObjectRetain(v21);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = v20 != 0;
    v49 = *(_QWORD *)(v0 + 576);
    v52 = *(_QWORD *)(v0 + 568);
    v29 = *(_QWORD *)(v0 + 472);
    v30 = swift_slowAlloc(26, -1);
    *(_DWORD *)v30 = 67109888;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 876) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 876, v0 + 880, v30 + 4, v30 + 8);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 8) = 1024;
    swift_bridgeObjectRelease();
    *(_DWORD *)(v0 + 872) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 876, v30 + 10, v30 + 14);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 14) = 1024;
    v31 = *(_QWORD *)(v0 + 208) != 0;
    sub_100004048(v0 + 184, (uint64_t *)&unk_1010EE310);
    *(_DWORD *)(v0 + 868) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 868, v0 + 872, v30 + 16, v30 + 20);
    *(_WORD *)(v30 + 20) = 1024;
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v29, 1, v52) != 1;
    sub_100004048(v29, &qword_1010ED860);
    *(_DWORD *)(v0 + 864) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 864, v0 + 868, v30 + 22, v30 + 26);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Can't post Request Received Notification!\nbeaconName(%{BOOL}d), memberName(%{BOOL}d),\nbeaconRecord(%{BOOL}d), clientShareIdentifier(%{BOOL}d)", (uint8_t *)v30, 0x1Au);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    sub_100004048(*(_QWORD *)(v0 + 472), &qword_1010ED860);
    sub_100004048(v0 + 184, (uint64_t *)&unk_1010EE310);
    swift_bridgeObjectRelease_n(0, 2);
    swift_bridgeObjectRelease_n(v21, 2);
  }

  v33 = *(_QWORD *)(v0 + 632);
  v34 = *(_QWORD *)(v0 + 560);
  v35 = *(_QWORD *)(v0 + 488);
  v36 = sub_1008A450C();
  v54 = swift_allocError(&type metadata for ItemSharingNotificationError, v36, 0, 0);
  swift_willThrow(v54);
  swift_unknownObjectRelease(v33);
  sub_100004048(v35, &qword_1010ED860);
  sub_100004048(v55, (uint64_t *)&unk_1010EE310);
  sub_1000126B0(v34, type metadata accessor for OwnerPeerTrust);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  v37 = *(_QWORD *)(v0 + 608);
  v38 = *(_QWORD *)(v0 + 600);
  v39 = *(_QWORD *)(v0 + 592);
  v40 = *(_QWORD *)(v0 + 560);
  v41 = *(_QWORD *)(v0 + 552);
  v42 = *(_QWORD *)(v0 + 544);
  v43 = *(_QWORD *)(v0 + 520);
  v44 = *(_QWORD *)(v0 + 512);
  v45 = *(_QWORD *)(v0 + 496);
  v47 = *(_QWORD *)(v0 + 488);
  v48 = *(_QWORD *)(v0 + 480);
  v50 = *(_QWORD *)(v0 + 472);
  v51 = *(_QWORD *)(v0 + 464);
  v53 = *(_QWORD *)(v0 + 456);
  v56 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 616));
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089E038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 632));
  v1 = *(_QWORD *)(v0 + 608);
  v2 = *(_QWORD *)(v0 + 600);
  v3 = *(_QWORD *)(v0 + 592);
  v4 = *(_QWORD *)(v0 + 560);
  v5 = *(_QWORD *)(v0 + 552);
  v6 = *(_QWORD *)(v0 + 544);
  v7 = *(_QWORD *)(v0 + 520);
  v8 = *(_QWORD *)(v0 + 512);
  v9 = *(_QWORD *)(v0 + 496);
  v11 = *(_QWORD *)(v0 + 488);
  v12 = *(_QWORD *)(v0 + 480);
  v13 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 464);
  v15 = *(_QWORD *)(v0 + 456);
  v16 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 616));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089E158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  *(_QWORD *)(v6 + 72) = a5;
  *(_QWORD *)(v6 + 80) = v5;
  *(_QWORD *)(v6 + 56) = a3;
  *(_QWORD *)(v6 + 64) = a4;
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  v8 = type metadata accessor for MemberPeerTrust(0);
  *(_QWORD *)(v6 + 88) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 96) = v9;
  *(_QWORD *)(v6 + 104) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SharedBeaconRecord(0);
  *(_QWORD *)(v6 + 112) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 120) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 128) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 136) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 144) = swift_task_alloc(v12);
  *(_QWORD *)(v6 + 152) = swift_task_alloc(v12);
  v13 = sub_10001A9A8(&qword_1010EC868);
  *(_QWORD *)(v6 + 160) = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 168) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 176) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 184) = swift_task_alloc(v14);
  v15 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 192) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v6 + 200) = v16;
  v17 = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v6 + 208) = v17;
  *(_QWORD *)(v6 + 216) = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  *(_QWORD *)(v6 + 224) = v18;
  v19 = (*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 232) = swift_task_alloc(v19);
  *(_QWORD *)(v6 + 240) = swift_task_alloc(v19);
  *(_QWORD *)(v6 + 248) = swift_task_alloc(v19);
  v20 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v6 + 256) = v20;
  v21 = *(int *)(v20 + 24);
  *(_DWORD *)(v6 + 356) = v21;
  v22 = a2 + v21;
  v23 = (_QWORD *)swift_task_alloc(dword_10110B694);
  *(_QWORD *)(v6 + 264) = v23;
  *v23 = v6;
  v23[1] = sub_10089E2FC;
  return sub_1008A3C24(v22);
}

uint64_t sub_10089E2FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v4 = v3[33];
  v5 = v3[10];
  v3[34] = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10089E35C, v5, 0);
}

uint64_t sub_10089E35C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 136);
  *(_QWORD *)(v0 + 280) = v1;
  return swift_task_switch(sub_10089E378, v1, 0);
}

uint64_t sub_10089E378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 48) + *(int *)(v0 + 356);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 288) = v7;
  v7(v2, v6, v4);
  LODWORD(v8) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 360) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101097BB8, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 296) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 304) = v11;
  v11(v10 + v9, v2, v4);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 312) = v13;
  *v13 = v0;
  v13[1] = sub_10089E46C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 248), sub_100067DF8, v10, *(_QWORD *)(v0 + 224));
}

uint64_t sub_10089E46C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 280);
  v3 = *(_QWORD *)(*v0 + 256);
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  swift_release();
  *(_DWORD *)(v1 + 364) = *(_DWORD *)(v3 + 32);
  return swift_task_switch(sub_10089E4E0, v2, 0);
}

uint64_t sub_10089E4E0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
  v2 = *(unsigned __int8 *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 208);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 288))(v4, *(_QWORD *)(v0 + 48) + *(int *)(v0 + 364), v5);
  v9 = swift_allocObject(&unk_101097BE0, v7, v8);
  *(_QWORD *)(v0 + 320) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 328) = v11;
  *v11 = v0;
  v11[1] = sub_10089E5D0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 184), sub_100067E08, v9, *(_QWORD *)(v0 + 160));
}

uint64_t sub_10089E5D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  swift_release();
  return swift_task_switch(sub_10089E630, v1, 0);
}

uint64_t sub_10089E630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void);
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  void *v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;

  v1 = *(_QWORD *)(v0 + 272);
  if (!v1)
    goto LABEL_7;
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  sub_10000F9B8(*(_QWORD *)(v0 + 248), v2, (uint64_t *)&unk_1010EE180);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  v6 = *(_QWORD *)(v0 + 240);
  if (v5 == 1)
  {
    v7 = (uint64_t *)&unk_1010EE180;
LABEL_6:
    sub_100004048(v6, v7);
LABEL_7:
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v14 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 248);
    v16 = *(_QWORD *)(v0 + 232);
    v17 = *(_QWORD *)(v0 + 184);
    v18 = *(_QWORD *)(v0 + 168);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B7860);
    sub_10000F9B8(v15, v16, (uint64_t *)&unk_1010EE180);
    sub_10000F9B8(v17, v18, &qword_1010EC868);
    swift_bridgeObjectRetain(v14);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 232);
    v25 = *(_QWORD *)(v0 + 168);
    if (v23)
    {
      v26 = v1 != 0;
      v81 = *(_QWORD *)(v0 + 120);
      v83 = *(_QWORD *)(v0 + 112);
      v86 = *(_QWORD *)(v0 + 96);
      v91 = *(_QWORD *)(v0 + 88);
      v27 = swift_slowAlloc(20, -1);
      *(_DWORD *)v27 = 67109632;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v0 + 336) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 340, v27 + 4, v27 + 8);
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 8) = 1024;
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v24, 1, v83) != 1;
      sub_100004048(v24, (uint64_t *)&unk_1010EE180);
      *(_DWORD *)(v0 + 340) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 340, v0 + 344, v27 + 10, v27 + 14);
      *(_WORD *)(v27 + 14) = 1024;
      v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v25, 1, v91) != 1;
      sub_100004048(v25, &qword_1010EC868);
      *(_DWORD *)(v0 + 344) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 348, v27 + 16, v27 + 20);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Can't create Transparency Notification!\nbeaconName(%{BOOL}d), beaconRecord(%{BOOL}d),\nownerPeerTrust(%{BOOL}d)", (uint8_t *)v27, 0x14u);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      sub_100004048(*(_QWORD *)(v0 + 168), &qword_1010EC868);
      sub_100004048(v24, (uint64_t *)&unk_1010EE180);
      swift_bridgeObjectRelease_n(v14, 2);
    }

    v30 = *(_QWORD *)(v0 + 240);
    v31 = *(_QWORD *)(v0 + 248);
    v32 = *(_QWORD *)(v0 + 232);
    v33 = *(_QWORD *)(v0 + 216);
    v35 = *(_QWORD *)(v0 + 176);
    v34 = *(_QWORD *)(v0 + 184);
    v36 = *(_QWORD *)(v0 + 168);
    v84 = *(_QWORD *)(v0 + 152);
    v87 = *(_QWORD *)(v0 + 144);
    v89 = *(_QWORD *)(v0 + 136);
    v92 = *(_QWORD *)(v0 + 128);
    v94 = *(_QWORD *)(v0 + 104);
    v37 = sub_1008A450C();
    v38 = swift_allocError(&type metadata for ItemSharingNotificationError, v37, 0, 0);
    swift_willThrow(v38);
    sub_100004048(v34, &qword_1010EC868);
    sub_100004048(v31, (uint64_t *)&unk_1010EE180);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v84);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  sub_1000126EC(v6, *(_QWORD *)(v0 + 152), type metadata accessor for SharedBeaconRecord);
  sub_10000F9B8(v9, v8, &qword_1010EC868);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  v13 = *(_QWORD *)(v0 + 176);
  if (v12 == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 152), type metadata accessor for SharedBeaconRecord);
    v7 = &qword_1010EC868;
    v6 = v13;
    goto LABEL_6;
  }
  v42 = *(_QWORD *)(v0 + 64);
  v41 = *(_QWORD *)(v0 + 72);
  sub_1000126EC(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 104), type metadata accessor for MemberPeerTrust);
  swift_bridgeObjectRetain(v41);
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v42, v41);
  if (v45)
  {
    v46 = sub_1008A4F38(v43, v44, v45);
    swift_bridgeObjectRelease();
    v47 = v46 & 1;
  }
  else
  {
    v47 = 0;
  }
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v48 = *(_QWORD *)(v0 + 144);
  v49 = *(_QWORD *)(v0 + 152);
  v50 = type metadata accessor for Logger(0);
  sub_10001A9E8(v50, (uint64_t)qword_1011B7860);
  v51 = sub_10005972C(v49, v48, type metadata accessor for SharedBeaconRecord);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.default.getter(v52);
  v54 = os_log_type_enabled(v52, v53);
  v55 = *(_QWORD *)(v0 + 144);
  if (v54)
  {
    v56 = *(_QWORD *)(v0 + 136);
    v57 = *(_QWORD *)(v0 + 112);
    v58 = swift_slowAlloc(14, -1);
    *(_DWORD *)v58 = 67109376;
    v59 = *(_QWORD *)(v55 + *(int *)(v57 + 44));
    sub_10005972C(v55, v56, type metadata accessor for SharedBeaconRecord);
    if (v59 == 76)
    {
      if (qword_1010EA5C0 != -1)
        swift_once(&qword_1010EA5C0, sub_100D3ADF0);
      v60 = *(_QWORD *)(v0 + 136);
      v61 = sub_100A07598(*(_QWORD *)(v60 + *(int *)(*(_QWORD *)(v0 + 112) + 48)), qword_1011B8460);
      sub_1000126B0(v60, type metadata accessor for SharedBeaconRecord);
      if (v61)
      {
        v62 = 1;
LABEL_28:
        sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for SharedBeaconRecord);
        *(_DWORD *)(v0 + 348) = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 348, v0 + 352, v58 + 4, v58 + 8);
        *(_WORD *)(v58 + 8) = 1024;
        *(_DWORD *)(v0 + 352) = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 356, v58 + 10, v58 + 14);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "create Transparency Notification,\nisAirTag:%{BOOL}d,\nisContainBlockedMembers:%{BOOL}d", (uint8_t *)v58, 0xEu);
        swift_slowDealloc(v58, -1, -1);
        goto LABEL_29;
      }
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 136), type metadata accessor for SharedBeaconRecord);
    }
    v62 = 0;
    goto LABEL_28;
  }
  sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for SharedBeaconRecord);
LABEL_29:

  v63 = *(_QWORD *)(v0 + 152);
  v64 = *(_QWORD *)(v63 + *(int *)(*(_QWORD *)(v0 + 112) + 44));
  sub_10005972C(v63, *(_QWORD *)(v0 + 128), type metadata accessor for SharedBeaconRecord);
  v95 = v47;
  if (v64 == 76)
  {
    if (qword_1010EA5C0 != -1)
      swift_once(&qword_1010EA5C0, sub_100D3ADF0);
    v74 = sub_100A07598(*(_QWORD *)(*(_QWORD *)(v0 + 128) + *(int *)(*(_QWORD *)(v0 + 112) + 48)), qword_1011B8460);
  }
  else
  {
    v74 = 0;
  }
  v65 = *(_QWORD *)(v0 + 272);
  v66 = *(_QWORD *)(v0 + 24);
  v77 = *(_QWORD *)(v0 + 248);
  v78 = *(_QWORD *)(v0 + 240);
  v79 = *(_QWORD *)(v0 + 232);
  v80 = *(_QWORD *)(v0 + 216);
  v82 = *(_QWORD *)(v0 + 176);
  v85 = *(_QWORD *)(v0 + 168);
  v75 = *(_QWORD *)(v0 + 152);
  v76 = *(_QWORD *)(v0 + 184);
  v90 = *(_QWORD *)(v0 + 144);
  v93 = *(_QWORD *)(v0 + 136);
  v88 = *(_QWORD *)(v0 + 128);
  v67 = *(_QWORD *)(v0 + 104);
  v68 = *(_QWORD *)(v0 + 88);
  v69 = *(_QWORD *)(v0 + 64);
  v70 = *(_QWORD *)(v0 + 72);
  v72 = *(_QWORD *)(v0 + 48);
  v71 = *(_QWORD *)(v0 + 56);
  v73 = *(_QWORD *)(v0 + 40);
  sub_1000126B0(v88, type metadata accessor for SharedBeaconRecord);
  sub_1001D3498(v72, v66, v65, v74, v71, v69, v70, v95, v73, *(_QWORD *)(v67 + *(int *)(v68 + 32)), *(_QWORD *)(v67 + *(int *)(v68 + 32) + 8));
  swift_bridgeObjectRelease();
  sub_1000126B0(v67, type metadata accessor for MemberPeerTrust);
  sub_1000126B0(v75, type metadata accessor for SharedBeaconRecord);
  sub_100004048(v76, &qword_1010EC868);
  sub_100004048(v77, (uint64_t *)&unk_1010EE180);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v76);
  swift_task_dealloc(v82);
  swift_task_dealloc(v85);
  swift_task_dealloc(v75);
  swift_task_dealloc(v90);
  swift_task_dealloc(v93);
  swift_task_dealloc(v88);
  swift_task_dealloc(v67);
  v39 = *(uint64_t (**)(void))(v0 + 8);
  return v39();
}

void sub_10089EE5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29[2];
  uint64_t v30;
  _QWORD v31[4];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = _swiftEmptyArrayStorage;
    v9 = _swiftEmptyArrayStorage[2];
    if (!v9)
      goto LABEL_17;
    goto LABEL_14;
  }
  v4 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v5 = _swiftEmptyArrayStorage;
  v6 = v3;
  do
  {
    sub_10000F9B8(v4, (uint64_t)&v30, (uint64_t *)&unk_1011093E0);
    sub_100005CF0((uint64_t)&v30, (uint64_t)&v27, (uint64_t *)&unk_1011093E0);
    if (v28)
    {
      sub_10000F9FC(&v27, (uint64_t)v29);
      sub_10000F9FC(v29, (uint64_t)&v27);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = sub_1007C7D68(0, v5[2] + 1, 1, v5);
      v8 = v5[2];
      v7 = v5[3];
      if (v8 >= v7 >> 1)
        v5 = sub_1007C7D68((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
      v5[2] = v8 + 1;
      sub_10000F9FC(&v27, (uint64_t)&v5[5 * v8 + 4]);
    }
    else
    {
      sub_100004048((uint64_t)&v27, (uint64_t *)&unk_1011093E0);
    }
    v4 += 40;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  v9 = v5[2];
  if (v9)
  {
LABEL_14:
    v10 = v5 + 4;
    v11 = *(_QWORD *)(v1 + 128);
    swift_bridgeObjectRetain(v5);
    do
    {
      swift_unownedRetainStrong(v11);
      v12 = v10[3];
      v13 = v10[4];
      v14 = sub_10001AA44(v10, v12);
      v31[2] = v12;
      v15 = *(_QWORD *)(v13 + 8);
      v31[3] = v15;
      v16 = sub_100018F08(&v30);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v16, v14, v12);
      sub_100A3B794((uint64_t)v16, 0, 0, v12, v15);
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v30);
      v10 += 5;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v17 = type metadata accessor for Logger(0);
  sub_10001A9E8(v17, (uint64_t)qword_1011B7860);
  swift_bridgeObjectRetain_n(a1, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v21 = 134217984;
    if (v3)
    {
      v22 = a1 + 32;
      swift_bridgeObjectRetain(a1);
      v23 = _swiftEmptyArrayStorage;
      do
      {
        sub_10000F9B8(v22, (uint64_t)&v30, (uint64_t *)&unk_1011093E0);
        sub_100005CF0((uint64_t)&v30, (uint64_t)&v27, (uint64_t *)&unk_1011093E0);
        if (v28)
        {
          sub_10000F9FC(&v27, (uint64_t)v29);
          sub_10000F9FC(v29, (uint64_t)&v27);
          if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
            v23 = sub_1007C7D68(0, v23[2] + 1, 1, v23);
          v25 = v23[2];
          v24 = v23[3];
          if (v25 >= v24 >> 1)
            v23 = sub_1007C7D68((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
          v23[2] = v25 + 1;
          sub_10000F9FC(&v27, (uint64_t)&v23[5 * v25 + 4]);
        }
        else
        {
          sub_100004048((uint64_t)&v27, (uint64_t *)&unk_1011093E0);
        }
        v22 += 40;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = _swiftEmptyArrayStorage;
    }
    v26 = v23[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "postTransparencyNotifications, notifications count = %ld", v21, 0xCu);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
}

uint64_t sub_10089F27C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_10089F294, 0, 0);
}

uint64_t sub_10089F294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (_QWORD *)swift_task_alloc(dword_10110B674);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_10089F334;
  v3[25] = Strong;
  return swift_task_switch(sub_10089F3A0, Strong, 0);
}

uint64_t sub_10089F334()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 48);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10089F388()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 200) = v0;
  return swift_task_switch(sub_10089F3A0, v0, 0);
}

uint64_t sub_10089F3A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v1 = type metadata accessor for Logger(0);
  v0[26] = sub_10001A9E8(v1, (uint64_t)qword_1011B7860);
  v2 = swift_retain();
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[25];
  if (v5)
  {
    v7 = swift_slowAlloc(22, -1);
    *(_DWORD *)v7 = 134218240;
    swift_beginAccess(v6 + 224, v0 + 11, 0, 0);
    v0[22] = *(_QWORD *)(*(_QWORD *)(v6 + 224) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2048;
    swift_beginAccess(v6 + 208, v0 + 5, 0, 0);
    v0[24] = *(_QWORD *)(*(_QWORD *)(v6 + 208) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v7 + 14, v7 + 22);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Evaluate notification posting for saved records.\nOwned pairs count: %ld, Member pairs count: %ld.", (uint8_t *)v7, 0x16u);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_release();
  }

  v8 = v0[25];
  swift_beginAccess(v8 + 224, v0 + 2, 0, 0);
  v9 = *(_QWORD *)(v8 + 224);
  v0[23] = v9;
  v10 = async function pointer to Sequence.asyncForEach(_:)[1];
  swift_bridgeObjectRetain(v9);
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[27] = v11;
  v12 = sub_10001A9A8(&qword_10110B878);
  v13 = sub_1000193E4(&qword_10110B880, &qword_10110B878);
  *v11 = v0;
  v11[1] = sub_10089F5E0;
  return Sequence.asyncForEach(_:)(&unk_10110B870, v0[25], v12, v13);
}

uint64_t sub_10089F5E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10089F63C, v1, 0);
}

uint64_t sub_10089F63C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[25];
  swift_beginAccess(v1 + 208, v0 + 8, 0, 0);
  v2 = *(_QWORD *)(v1 + 208);
  v0[21] = v2;
  v3 = async function pointer to Sequence.asyncForEach(_:)[1];
  swift_bridgeObjectRetain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[28] = v4;
  v5 = sub_10001A9A8(&qword_10110B898);
  v6 = sub_1000193E4(&qword_10110B8A0, &qword_10110B898);
  *v4 = v0;
  v4[1] = sub_10089F6F4;
  return Sequence.asyncForEach(_:)(&unk_10110B890, v0[25], v5, v6);
}

uint64_t sub_10089F6F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10089F750, v1, 0);
}

uint64_t sub_10089F750()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[25];
  swift_beginAccess(v1 + 216, v0 + 14, 0, 0);
  v2 = *(_QWORD *)(v1 + 216);
  v0[17] = v2;
  v3 = async function pointer to Sequence.asyncForEach(_:)[1];
  swift_bridgeObjectRetain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[29] = v4;
  v5 = sub_10001A9A8(&qword_10110B8B8);
  v6 = sub_1000193E4(&qword_10110B8C0, &qword_10110B8B8);
  *v4 = v0;
  v4[1] = sub_10089F808;
  return Sequence.asyncForEach(_:)(&unk_10110B8B0, v0[25], v5, v6);
}

uint64_t sub_10089F808()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10089F864, v1, 0);
}

uint64_t sub_10089F864()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = swift_retain(*(_QWORD *)(v0 + 200));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD **)(v0 + 200);
    v5 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 134218496;
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v4[28] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2048;
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v4[26] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v5 + 14, v5 + 22);
    *(_WORD *)(v5 + 22) = 2048;
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v4[27] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v5 + 24, v5 + 32);
    swift_release(v4);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "After notification posting evaluation:\n    ownerCirclePairs: %ld,\n    memberCirclePairs: %ld,\n    sharedBeaconsPairs: %ld.", (uint8_t *)v5, 0x20u);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 200));
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089F9B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_10001A9A8(&qword_1010ECCF8);
  v2[4] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[5] = swift_task_alloc(v4);
  v2[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_10089FA20, 0, 0);
}

uint64_t sub_10089FA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(int *)(*(_QWORD *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 72) = v3;
  v4 = v1 + v3;
  v5 = v2 + v3;
  sub_10000F9B8(v2, v1, &qword_1010EE0E0);
  sub_10005972C(v5, v4, type metadata accessor for OwnerSharingCircle);
  v6 = (_QWORD *)swift_task_alloc(dword_10110B68C);
  *(_QWORD *)(v0 + 56) = v6;
  *v6 = v0;
  v6[1] = sub_10089FAB8;
  return sub_1008A2F4C(*(_QWORD *)(v0 + 48), v4);
}

uint64_t sub_10089FAB8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10089FC3C;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 48);
    sub_1000126B0(v5 + *(int *)(v2 + 72), type metadata accessor for OwnerSharingCircle);
    sub_100004048(v5, &qword_1010EE0E0);
    v4 = sub_10089FB44;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10089FB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = v2 + *(int *)(v0 + 72);
  v5 = *(int *)(*(_QWORD *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 76) = v5;
  v6 = v1 + v5;
  sub_10000F9B8(v2, v1, &qword_1010EE0E0);
  sub_10005972C(v4, v6, type metadata accessor for OwnerSharingCircle);
  return swift_task_switch(sub_10089FBBC, v3, 0);
}

uint64_t sub_10089FBBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = v1 + *(int *)(v0 + 76);
  sub_1008987F0(v1, v2);
  sub_1000126B0(v2, type metadata accessor for OwnerSharingCircle);
  sub_100004048(v1, &qword_1010EE0E0);
  v3 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089FC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  sub_1000126B0(v2 + *(int *)(v0 + 72), type metadata accessor for OwnerSharingCircle);
  sub_100004048(v2, &qword_1010EE0E0);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089FCAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_10001A9A8(&qword_1010ECD00);
  v2[4] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[5] = swift_task_alloc(v4);
  v2[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_10089FD1C, 0, 0);
}

uint64_t sub_10089FD1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(int *)(*(_QWORD *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 72) = v3;
  v4 = v1 + v3;
  v5 = v2 + v3;
  sub_10000F9B8(v2, v1, (uint64_t *)&unk_101111440);
  sub_10005972C(v5, v4, type metadata accessor for MemberSharingCircle);
  v6 = (_QWORD *)swift_task_alloc(dword_10110B684);
  *(_QWORD *)(v0 + 56) = v6;
  *v6 = v0;
  v6[1] = sub_10089FDB4;
  return sub_1008A1700(*(_QWORD *)(v0 + 48), v4);
}

uint64_t sub_10089FDB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10089FF38;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 48);
    sub_1000126B0(v5 + *(int *)(v2 + 72), type metadata accessor for MemberSharingCircle);
    sub_100004048(v5, (uint64_t *)&unk_101111440);
    v4 = sub_10089FE40;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10089FE40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = v2 + *(int *)(v0 + 72);
  v5 = *(int *)(*(_QWORD *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 76) = v5;
  v6 = v1 + v5;
  sub_10000F9B8(v2, v1, (uint64_t *)&unk_101111440);
  sub_10005972C(v4, v6, type metadata accessor for MemberSharingCircle);
  return swift_task_switch(sub_10089FEB8, v3, 0);
}

uint64_t sub_10089FEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = v1 + *(int *)(v0 + 76);
  sub_100897A84(v1, v2);
  sub_1000126B0(v2, type metadata accessor for MemberSharingCircle);
  sub_100004048(v1, (uint64_t *)&unk_101111440);
  v3 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089FF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  sub_1000126B0(v2 + *(int *)(v0 + 72), type metadata accessor for MemberSharingCircle);
  sub_100004048(v2, (uint64_t *)&unk_101111440);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10089FFA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_10001A9A8(&qword_1010ECCF0);
  v2[4] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[5] = swift_task_alloc(v4);
  v2[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_1008A0018, 0, 0);
}

uint64_t sub_1008A0018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(int *)(*(_QWORD *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 72) = v3;
  v4 = v1 + v3;
  v5 = v2 + v3;
  sub_10000F9B8(v2, v1, (uint64_t *)&unk_1010EE180);
  sub_10005972C(v5, v4, type metadata accessor for SharedBeaconRecord);
  v6 = (_QWORD *)swift_task_alloc(dword_10110B67C);
  *(_QWORD *)(v0 + 56) = v6;
  *v6 = v0;
  v6[1] = sub_1008A00B0;
  return sub_1008A02A4(*(_QWORD *)(v0 + 48), v4);
}

uint64_t sub_1008A00B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1008A0234;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 48);
    sub_1000126B0(v5 + *(int *)(v2 + 72), type metadata accessor for SharedBeaconRecord);
    sub_100004048(v5, (uint64_t *)&unk_1010EE180);
    v4 = sub_1008A013C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1008A013C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = v2 + *(int *)(v0 + 72);
  v5 = *(int *)(*(_QWORD *)(v0 + 32) + 48);
  *(_DWORD *)(v0 + 76) = v5;
  v6 = v1 + v5;
  sub_10000F9B8(v2, v1, (uint64_t *)&unk_1010EE180);
  sub_10005972C(v4, v6, type metadata accessor for SharedBeaconRecord);
  return swift_task_switch(sub_1008A01B4, v3, 0);
}

uint64_t sub_1008A01B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = v1 + *(int *)(v0 + 76);
  sub_100898514(v1, v2);
  sub_1000126B0(v2, type metadata accessor for SharedBeaconRecord);
  sub_100004048(v1, (uint64_t *)&unk_1010EE180);
  v3 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008A0234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  sub_1000126B0(v2 + *(int *)(v0 + 72), type metadata accessor for SharedBeaconRecord);
  sub_100004048(v2, (uint64_t *)&unk_1010EE180);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008A02A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v3 + 40) = v2;
  v6 = sub_10001A9A8(&qword_10110B860);
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101111440) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 64) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 72) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v7);
  v8 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v3 + 88) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 96) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 104) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 112) = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 120) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v3 + 128) = v12;
  v13 = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v3 + 136) = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 144) = swift_task_alloc(v14);
  *(_QWORD *)(v3 + 152) = swift_task_alloc(v14);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  *(_QWORD *)(v3 + 160) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010ECCF0);
  *(_QWORD *)(v3 + 168) = v16;
  v17 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 176) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v17);
  v18 = swift_task_alloc(v17);
  *(_QWORD *)(v3 + 216) = v18;
  v19 = *(int *)(v16 + 48);
  *(_DWORD *)(v3 + 320) = v19;
  v20 = v18 + v19;
  sub_10000F9B8(a1, v18, (uint64_t *)&unk_1010EE180);
  sub_10005972C(a2, v20, type metadata accessor for SharedBeaconRecord);
  return swift_task_switch(sub_1008A0494, v2, 0);
}

uint64_t sub_1008A0494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = v1 + *(int *)(v0 + 320);
  v4 = v2 + *(int *)(*(_QWORD *)(v0 + 168) + 48);
  sub_10000F9B8(v1, v2, (uint64_t *)&unk_1010EE180);
  sub_10005972C(v3, v4, type metadata accessor for SharedBeaconRecord);
  v5 = type metadata accessor for SharedBeaconRecord(0);
  *(_QWORD *)(v0 + 224) = v5;
  v6 = *(unsigned __int8 *)(v4 + *(int *)(v5 + 64));
  sub_1000126B0(v4, type metadata accessor for SharedBeaconRecord);
  sub_100004048(v2, (uint64_t *)&unk_1010EE180);
  if (v6 == 2)
  {
    v7 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 160);
    v10 = v7 + *(int *)(v0 + 320);
    v11 = v8 + *(int *)(*(_QWORD *)(v0 + 168) + 48);
    sub_10000F9B8(v7, v8, (uint64_t *)&unk_1010EE180);
    sub_10005972C(v10, v11, type metadata accessor for SharedBeaconRecord);
    sub_100005CF0(v8, v9, (uint64_t *)&unk_1010EE180);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
    v13 = v12(v9, 1, v5);
    v14 = *(_QWORD *)(v0 + 216);
    v15 = *(_QWORD *)(v0 + 192);
    v16 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 168);
    v18 = v14 + *(int *)(v0 + 320);
    if (v13 == 1)
    {
      sub_1000126B0(v11, type metadata accessor for SharedBeaconRecord);
      sub_100004048(v16, (uint64_t *)&unk_1010EE180);
      v19 = v15 + *(int *)(v17 + 48);
      sub_10000F9B8(v14, v15, (uint64_t *)&unk_1010EE180);
      sub_10005972C(v18, v19, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      v48 = *(unsigned __int8 *)(v16 + *(int *)(v5 + 64));
      sub_1000126B0(v16, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0(v11, type metadata accessor for SharedBeaconRecord);
      v21 = v15 + *(int *)(v17 + 48);
      sub_10000F9B8(v14, v15, (uint64_t *)&unk_1010EE180);
      sub_10005972C(v18, v21, type metadata accessor for SharedBeaconRecord);
      if (v48 == 4)
      {
        v22 = *(_QWORD *)(v0 + 192);
LABEL_8:
        v24 = *(_QWORD *)(v0 + 208);
        v23 = *(_QWORD *)(v0 + 216);
        v25 = *(_QWORD *)(v0 + 168);
        v49 = *(_QWORD *)(v0 + 152);
        v26 = *(_QWORD *)(v0 + 120);
        v27 = *(_QWORD *)(v0 + 128);
        v28 = *(_QWORD *)(v0 + 40);
        v29 = v23 + *(int *)(v0 + 320);
        sub_100004048(v22, &qword_1010ECCF0);
        v30 = *(_QWORD *)(v28 + 136);
        *(_QWORD *)(v0 + 232) = v30;
        v31 = v24 + *(int *)(v25 + 48);
        sub_10000F9B8(v23, v24, (uint64_t *)&unk_1010EE180);
        sub_10005972C(v29, v31, type metadata accessor for SharedBeaconRecord);
        v32 = v31 + *(int *)(v5 + 20);
        v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
        *(_QWORD *)(v0 + 240) = v33;
        v33(v49, v32, v26);
        sub_1000126B0(v31, type metadata accessor for SharedBeaconRecord);
        return swift_task_switch(sub_1008A0858, v30, 0);
      }
    }
    v22 = *(_QWORD *)(v0 + 192);
    if (v12(v22, 1, v5) == 1)
      goto LABEL_8;
    v20 = *(_QWORD *)(v0 + 216);
    sub_100004048(v22, &qword_1010ECCF0);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 216);
  }
  sub_100004048(v20, &qword_1010ECCF0);
  v35 = *(_QWORD *)(v0 + 208);
  v37 = *(_QWORD *)(v0 + 192);
  v36 = *(_QWORD *)(v0 + 200);
  v39 = *(_QWORD *)(v0 + 176);
  v38 = *(_QWORD *)(v0 + 184);
  v41 = *(_QWORD *)(v0 + 152);
  v40 = *(_QWORD *)(v0 + 160);
  v42 = *(_QWORD *)(v0 + 144);
  v43 = *(_QWORD *)(v0 + 112);
  v44 = *(_QWORD *)(v0 + 104);
  v45 = *(_QWORD *)(v0 + 80);
  v46 = *(_QWORD *)(v0 + 72);
  v47 = *(_QWORD *)(v0 + 64);
  v50 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008A0858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 240))(v2, *(_QWORD *)(v0 + 152), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101097B90, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 248) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 256) = v10;
  v11 = sub_10001A9A8(&qword_1010EC840);
  *v10 = v0;
  v10[1] = sub_1008A0948;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_1005AC640, v8, v11);
}

uint64_t sub_1008A0948()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_release();
  return swift_task_switch(sub_1008A09A8, v1, 0);
}

uint64_t sub_1008A09A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = v0[26];
  v2 = v0[19];
  v3 = v0[15];
  v4 = v0[16];
  v5 = v0[5];
  v0[33] = v0[2];
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[34] = v6;
  v6(v2, v3);
  sub_100004048(v1, (uint64_t *)&unk_1010EE180);
  return swift_task_switch(sub_1008A0A10, v5, 0);
}

uint64_t sub_1008A0A10()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  __objc2_ivar_list **p_ivars;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  __objc2_ivar_list **v36;
  uint8_t *v37;
  uint8_t *v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v1 + 16);
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (v2 < 2)
    goto LABEL_7;
  if (qword_1010E9FD0 != -1)
    goto LABEL_21;
  while (1)
  {
    v4 = *(_QWORD *)(v0 + 216);
    v6 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 168);
    v8 = v4 + *(int *)(v0 + 320);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B7860);
    v10 = v5 + *(int *)(v7 + 48);
    sub_10000F9B8(v4, v5, (uint64_t *)&unk_1010EE180);
    sub_10005972C(v8, v10, type metadata accessor for SharedBeaconRecord);
    v11 = sub_100005CF0(v5, v6, &qword_1010ECCF0);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v53 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
      v50 = *(_QWORD *)(v0 + 224);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
      v14 = *(_QWORD *)(v0 + 208);
      v15 = *(_QWORD *)(v0 + 168);
      v59 = *(_QWORD *)(v0 + 176);
      type = v13;
      v16 = *(_QWORD *)(v0 + 152);
      v17 = *(_QWORD *)(v0 + 120);
      v18 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(32, -1);
      v61 = v55;
      *(_DWORD *)v18 = 141558275;
      *(_QWORD *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v18 + 4, v18 + 12);
      *(_WORD *)(v18 + 12) = 2081;
      v19 = *(int *)(v15 + 48);
      v20 = v14 + v19;
      v21 = v59 + v19;
      sub_10000F9B8(v59, v14, (uint64_t *)&unk_1010EE180);
      sub_10005972C(v21, v20, type metadata accessor for SharedBeaconRecord);
      v51(v16, v20 + *(int *)(v50 + 20), v17);
      sub_1000126B0(v20, type metadata accessor for SharedBeaconRecord);
      v22 = v14;
      p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
      sub_100004048(v22, (uint64_t *)&unk_1010EE180);
      v23 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v17, v23);
      v26 = v25;
      v53(v16, v17);
      *(_QWORD *)(v0 + 32) = sub_100016940(v24, v26, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      sub_100004048(v59, &qword_1010ECCF0);
      _os_log_impl((void *)&_mh_execute_header, v12, type, "    Several explicit shares for a beacon %{private,mask.hash}s!", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_100004048(*(_QWORD *)(v0 + 176), &qword_1010ECCF0);
    }

    v2 = *(_QWORD *)(v1 + 16);
LABEL_7:
    *(_QWORD *)(v0 + 280) = v2;
    v27 = *(_QWORD *)(v0 + 264);
    if (!v2)
      break;
    v28 = *(_QWORD *)(v0 + 96);
    *(_DWORD *)(v0 + 324) = *(_DWORD *)(v28 + 80);
    *(_QWORD *)(v0 + 288) = *(_QWORD *)(v28 + 72);
    swift_bridgeObjectRetain(v27);
    v29 = 0;
    while (1)
    {
      *(_QWORD *)(v0 + 296) = v29 + 1;
      if (__OFADD__(v29, 1))
        break;
      v30 = *(_QWORD *)(v0 + 112);
      v31 = *(_QWORD *)(v0 + 88);
      sub_10005972C(*(_QWORD *)(v0 + 264)+ ((*(unsigned __int8 *)(v0 + 324) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 324))+ *(_QWORD *)(v0 + 288) * v29, v30, type metadata accessor for MemberSharingCircle);
      if (!*(_BYTE *)(v30 + *(int *)(v31 + 40)))
      {
        v39 = (_QWORD *)swift_task_alloc(dword_10110B65C);
        *(_QWORD *)(v0 + 304) = v39;
        *v39 = v0;
        v39[1] = sub_1008A0FA8;
        return sub_100898974(*(_QWORD *)(v0 + 112));
      }
      if (p_ivars[506] != (__objc2_ivar_list *)-1)
        swift_once(&qword_1010E9FD0, sub_1008973A4);
      v32 = type metadata accessor for Logger(0);
      v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B7860);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = p_ivars;
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "    Member sharing circle has been accepted already, skip notification posting.", v37, 2u);
        v38 = v37;
        p_ivars = v36;
        swift_slowDealloc(v38, -1, -1);
      }
      v1 = *(_QWORD *)(v0 + 112);

      sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
      v29 = *(_QWORD *)(v0 + 296);
      if (v29 == *(_QWORD *)(v0 + 280))
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 264), 2);
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  }
  swift_bridgeObjectRelease();
LABEL_19:
  sub_100004048(*(_QWORD *)(v0 + 216), &qword_1010ECCF0);
  v41 = *(_QWORD *)(v0 + 208);
  v43 = *(_QWORD *)(v0 + 192);
  v42 = *(_QWORD *)(v0 + 200);
  v45 = *(_QWORD *)(v0 + 176);
  v44 = *(_QWORD *)(v0 + 184);
  v47 = *(_QWORD *)(v0 + 152);
  v46 = *(_QWORD *)(v0 + 160);
  v48 = *(_QWORD *)(v0 + 144);
  v49 = *(_QWORD *)(v0 + 112);
  v52 = *(_QWORD *)(v0 + 104);
  v54 = *(_QWORD *)(v0 + 80);
  v56 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 64);
  v60 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008A0FA8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v5 = sub_1008A1138;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 40);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v2 + 264), 2);
    v5 = sub_1008A1020;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1008A1020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 216);
  sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
  sub_100004048(v1, &qword_1010ECCF0);
  v2 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1008A1138()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 264);
  if (v1 > *(_QWORD *)(v2 + 16))
    goto LABEL_23;
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  sub_10005972C(v2+ ((*(unsigned __int8 *)(v0 + 324) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 324))+ *(_QWORD *)(v0 + 288) * (v1 - 1), v6, type metadata accessor for MemberSharingCircle);
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
  v10(v6, 0, 1, v4);
  sub_10005972C(v3, v7, type metadata accessor for MemberSharingCircle);
  v10(v7, 0, 1, v4);
  v11 = v8 + *(int *)(v9 + 48);
  sub_10000F9B8(v6, v8, (uint64_t *)&unk_101111440);
  sub_10000F9B8(v7, v11, (uint64_t *)&unk_101111440);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v13 = v12(v8, 1, v4);
  v14 = *(_QWORD *)(v0 + 88);
  if (v13 == 1)
  {
    v15 = *(_QWORD *)(v0 + 80);
    sub_100004048(*(_QWORD *)(v0 + 72), (uint64_t *)&unk_101111440);
    sub_100004048(v15, (uint64_t *)&unk_101111440);
    if (v12(v11, 1, v14) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 56), (uint64_t *)&unk_101111440);
LABEL_19:
      v44 = *(_QWORD *)(v0 + 208);
      v45 = *(_QWORD *)(v0 + 216);
      v47 = *(_QWORD *)(v0 + 192);
      v46 = *(_QWORD *)(v0 + 200);
      v49 = *(_QWORD *)(v0 + 176);
      v48 = *(_QWORD *)(v0 + 184);
      v50 = *(_QWORD *)(v0 + 160);
      v54 = *(_QWORD *)(v0 + 152);
      v55 = *(_QWORD *)(v0 + 144);
      v51 = *(_QWORD *)(v0 + 112);
      v57 = *(_QWORD *)(v0 + 104);
      v59 = *(_QWORD *)(v0 + 80);
      v61 = *(_QWORD *)(v0 + 72);
      v63 = *(_QWORD *)(v0 + 64);
      v65 = *(_QWORD *)(v0 + 56);
      v52 = swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 264), 2);
      swift_willThrow(v52);
      sub_1000126B0(v51, type metadata accessor for MemberSharingCircle);
      sub_100004048(v45, &qword_1010ECCF0);
      swift_task_dealloc(v45);
      swift_task_dealloc(v44);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v51);
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      swift_task_dealloc(v61);
      swift_task_dealloc(v63);
      swift_task_dealloc(v65);
      v29 = *(void (**)(void))(v0 + 8);
      goto LABEL_20;
    }
  }
  else
  {
    sub_10000F9B8(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), (uint64_t *)&unk_101111440);
    if (v12(v11, 1, v14) != 1)
    {
      v38 = *(_QWORD *)(v0 + 104);
      v40 = *(_QWORD *)(v0 + 72);
      v39 = *(_QWORD *)(v0 + 80);
      v42 = *(_QWORD *)(v0 + 56);
      v41 = *(uint64_t **)(v0 + 64);
      sub_1000126EC(v11, v38, type metadata accessor for MemberSharingCircle);
      v43 = sub_100200BBC(v41, v38);
      sub_1000126B0(v38, type metadata accessor for MemberSharingCircle);
      sub_100004048(v40, (uint64_t *)&unk_101111440);
      sub_100004048(v39, (uint64_t *)&unk_101111440);
      sub_1000126B0((uint64_t)v41, type metadata accessor for MemberSharingCircle);
      sub_100004048(v42, (uint64_t *)&unk_101111440);
      if (v43)
        goto LABEL_19;
      goto LABEL_8;
    }
    v16 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 64);
    sub_100004048(*(_QWORD *)(v0 + 72), (uint64_t *)&unk_101111440);
    sub_100004048(v16, (uint64_t *)&unk_101111440);
    sub_1000126B0(v17, type metadata accessor for MemberSharingCircle);
  }
  sub_100004048(*(_QWORD *)(v0 + 56), &qword_10110B860);
LABEL_8:
  v18 = *(_QWORD *)(v0 + 312);
  sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
  swift_errorRelease(v18);
  v19 = *(_QWORD *)(v0 + 296);
  if (v19 == *(_QWORD *)(v0 + 280))
  {
LABEL_9:
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 264), 2);
    sub_100004048(*(_QWORD *)(v0 + 216), &qword_1010ECCF0);
    v20 = *(_QWORD *)(v0 + 208);
    v22 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 200);
    v24 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 144);
    v28 = *(_QWORD *)(v0 + 112);
    v56 = *(_QWORD *)(v0 + 104);
    v58 = *(_QWORD *)(v0 + 80);
    v60 = *(_QWORD *)(v0 + 72);
    v62 = *(_QWORD *)(v0 + 64);
    v64 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    v29 = *(void (**)(void))(v0 + 8);
LABEL_20:
    v29();
    return;
  }
  while (1)
  {
    *(_QWORD *)(v0 + 296) = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    v31 = *(_QWORD *)(v0 + 112);
    v32 = *(_QWORD *)(v0 + 88);
    sub_10005972C(*(_QWORD *)(v0 + 264)+ ((*(unsigned __int8 *)(v0 + 324) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 324))+ *(_QWORD *)(v0 + 288) * v19, v31, type metadata accessor for MemberSharingCircle);
    if (!*(_BYTE *)(v31 + *(int *)(v32 + 40)))
    {
      v53 = (_QWORD *)swift_task_alloc(dword_10110B65C);
      *(_QWORD *)(v0 + 304) = v53;
      *v53 = v0;
      v53[1] = sub_1008A0FA8;
      sub_100898974(*(_QWORD *)(v0 + 112));
      return;
    }
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B7860);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "    Member sharing circle has been accepted already, skip notification posting.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }
    v30 = *(_QWORD *)(v0 + 112);

    sub_1000126B0(v30, type metadata accessor for MemberSharingCircle);
    v19 = *(_QWORD *)(v0 + 296);
    if (v19 == *(_QWORD *)(v0 + 280))
      goto LABEL_9;
  }
  __break(1u);
LABEL_23:
  __break(1u);
}

