uint64_t sub_100943584()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2016));
  return swift_task_switch(sub_1009435DC, v1, 0);
}

void sub_1009435DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int64_t v101;
  uint64_t v102;
  unint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  os_log_type_t v177;
  uint64_t v178;
  NSObject *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t (**v201)(uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void (*v227)(uint64_t, uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  NSObject *v249;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(uint64_t, uint64_t);
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;

  v199 = v0 + 952;
  v195 = v0 + 1016;
  v197 = v0 + 984;
  v1 = *(_QWORD *)(v0 + 1072);
  v201 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1088) + 48))(v1, 1, *(_QWORD *)(v0 + 1080)) == 1)
  {
    sub_100004048(v1, &qword_10110D4B0);
    goto LABEL_13;
  }
  v2 = *(_QWORD *)(v0 + 1560);
  v3 = *(_QWORD *)(v0 + 1304);
  v4 = *(_QWORD *)(v0 + 1056);
  sub_1000126EC(v1, *(_QWORD *)(v0 + 1096), type metadata accessor for KeyDropBeaconGroupAttributes);
  sub_100BBE27C(13, *(_QWORD *)(v4 + *(int *)(v2 + 44)), v3);
  v5 = type metadata accessor for BookmarkMetaData(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    v6 = (uint64_t *)(v0 + 1304);
    v7 = (uint64_t *)&unk_1010FD398;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 1464);
    v9 = *(_QWORD *)(v0 + 1456);
    v10 = *(_QWORD *)(v0 + 1328);
    v11 = *(_QWORD *)(v0 + 1304);
    v12 = v11 + *(int *)(v5 + 20);
    v7 = &qword_1011063B8;
    sub_10000F9B8(v12, v10, &qword_1011063B8);
    sub_1000126B0(v11, type metadata accessor for BookmarkMetaData);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9) != 1)
    {
      v36 = *(_QWORD *)(v0 + 1408);
      v37 = *(_QWORD *)(v0 + 1400);
      v38 = *(_QWORD *)(v0 + 1328);
      v39 = *(_QWORD *)(v0 + 1104);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v39, v38 + *(int *)(*(_QWORD *)(v0 + 1456) + 24), v37);
      sub_1000126B0(v38, type metadata accessor for KeyDropInterface.KeyAlignment);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v39, 0, 1, v37);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v39, 1, v37);
      if ((_DWORD)v13 != 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1408) + 32))(*(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1104), *(_QWORD *)(v0 + 1400));
        goto LABEL_9;
      }
LABEL_8:
      v14 = *(_QWORD *)(v0 + 1104);
      static Date.distantPast.getter(v13);
      sub_100004048(v14, (uint64_t *)&unk_1010EA690);
LABEL_9:
      v15 = *(_QWORD *)(v0 + 1448);
      v16 = *(_QWORD *)(v0 + 1416);
      v17 = *(_QWORD *)(v0 + 1408);
      v18 = *(_QWORD *)(v0 + 1400);
      sub_100906AF8();
      v19 = sub_1007EF5EC(v15, v16);
      v20 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v20(v15, v18);
      v21 = *(_QWORD *)(v0 + 1096);
      if (v19)
      {
        v22 = *(_QWORD *)(v0 + 1792);
        v23 = *(_QWORD *)(v0 + 1080);
        v24 = type metadata accessor for PropertyListEncoder(0);
        v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
        PropertyListEncoder.init()(v25);
        v26 = sub_100006204(&qword_10110D4D0, type metadata accessor for KeyDropBeaconGroupAttributes, (uint64_t)&unk_100E227A8);
        v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v21, v23, v26);
        if (v22)
        {
          v29 = v22;
          v30 = *(_QWORD *)(v0 + 1416);
          v31 = *(_QWORD *)(v0 + 1400);
          v32 = *(_QWORD *)(v0 + 1096);
          swift_release();
          v20(v30, v31);
          sub_1000126B0(v32, type metadata accessor for KeyDropBeaconGroupAttributes);
          v244 = *(_BYTE *)(v0 + 2037);
          v183 = *(_QWORD *)(v0 + 1720);
          v114 = *(unsigned __int8 *)(v0 + 2024);
          v115 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
          v116 = *(_QWORD *)(v0 + 1616);
          v117 = *(_QWORD *)(v0 + 1600);
          v118 = *(_QWORD *)(v0 + 1592);
          v119 = *(_QWORD *)(v0 + 1056);
          v120 = (v114 + 16) & ~v114;
          v121 = *(_QWORD *)(v0 + 1576) + v120;
          v122 = v114 | 7;
          v123 = sub_100906BC0();
          v115(v116, v123, v117);
          sub_10005972C(v119, v118, type metadata accessor for SharingCircleKeyManager.Instruction);
          v124 = swift_allocObject(&unk_10109C3B8, v121, v122);
          sub_1000126EC(v118, v124 + v120, type metadata accessor for SharingCircleKeyManager.Instruction);
          v125 = swift_allocObject(&unk_10109C3E0, 32, 7);
          *(_QWORD *)(v125 + 16) = sub_100960968;
          *(_QWORD *)(v125 + 24) = v124;
          v254 = swift_allocObject(&unk_10109C408, 17, 7);
          *(_BYTE *)(v254 + 16) = v244;
          sub_10005972C(v119, v118, type metadata accessor for SharingCircleKeyManager.Instruction);
          v126 = swift_allocObject(&unk_10109C430, v121, v122);
          sub_1000126EC(v118, v126 + v120, type metadata accessor for SharingCircleKeyManager.Instruction);
          v127 = swift_allocObject(&unk_10109C458, 32, 7);
          *(_QWORD *)(v127 + 16) = sub_100960A74;
          *(_QWORD *)(v127 + 24) = v126;
          v128 = v127;
          sub_10005972C(v119, v118, type metadata accessor for SharingCircleKeyManager.Instruction);
          v129 = swift_allocObject(&unk_10109C480, v121, v122);
          sub_1000126EC(v118, v129 + v120, type metadata accessor for SharingCircleKeyManager.Instruction);
          v130 = swift_allocObject(&unk_10109C4A8, 32, 7);
          *(_QWORD *)(v130 + 16) = sub_100960A7C;
          *(_QWORD *)(v130 + 24) = v129;
          v131 = swift_allocObject(&unk_10109C4D0, 24, 7);
          *(_QWORD *)(v131 + 16) = v29;
          v132 = swift_errorRetain(v29);
          v179 = Logger.logObject.getter(v132);
          v177 = static os_log_type_t.error.getter(v179);
          v175 = swift_allocObject(&unk_10109C4F8, 17, 7);
          *(_BYTE *)(v175 + 16) = 34;
          v173 = swift_allocObject(&unk_10109C520, 17, 7);
          *(_BYTE *)(v173 + 16) = 8;
          v133 = swift_allocObject(&unk_10109C548, 32, 7);
          *(_QWORD *)(v133 + 16) = sub_100963204;
          *(_QWORD *)(v133 + 24) = v125;
          v171 = swift_allocObject(&unk_10109C570, 32, 7);
          *(_QWORD *)(v171 + 16) = sub_10005CBA4;
          *(_QWORD *)(v171 + 24) = v133;
          v231 = swift_allocObject(&unk_10109C598, 17, 7);
          *(_BYTE *)(v231 + 16) = 34;
          v223 = swift_allocObject(&unk_10109C5C0, 17, 7);
          *(_BYTE *)(v223 + 16) = 8;
          v134 = swift_allocObject(&unk_10109C5E8, 32, 7);
          *(_QWORD *)(v134 + 16) = sub_100960B78;
          *(_QWORD *)(v134 + 24) = v254;
          v213 = swift_allocObject(&unk_10109C610, 32, 7);
          *(_QWORD *)(v213 + 16) = sub_10005CBA4;
          *(_QWORD *)(v213 + 24) = v134;
          v194 = swift_allocObject(&unk_10109C638, 17, 7);
          *(_BYTE *)(v194 + 16) = 112;
          v188 = swift_allocObject(&unk_10109C660, 17, 7);
          *(_BYTE *)(v188 + 16) = 8;
          v135 = swift_allocObject(&unk_10109C688, 24, 7);
          *(_QWORD *)(v135 + 16) = 1752392040;
          v255 = swift_allocObject(&unk_10109C6B0, 32, 7);
          *(_QWORD *)(v255 + 16) = sub_10005CBC0;
          *(_QWORD *)(v255 + 24) = v135;
          v251 = swift_allocObject(&unk_10109C6D8, 17, 7);
          *(_BYTE *)(v251 + 16) = 33;
          v245 = swift_allocObject(&unk_10109C700, 17, 7);
          *(_BYTE *)(v245 + 16) = 8;
          v136 = swift_allocObject(&unk_10109C728, 32, 7);
          *(_QWORD *)(v136 + 16) = sub_10005CBAC;
          *(_QWORD *)(v136 + 24) = v128;
          v240 = swift_allocObject(&unk_10109C750, 32, 7);
          *(_QWORD *)(v240 + 16) = sub_10005CBA4;
          *(_QWORD *)(v240 + 24) = v136;
          v235 = swift_allocObject(&unk_10109C778, 17, 7);
          *(_BYTE *)(v235 + 16) = 112;
          v226 = swift_allocObject(&unk_10109C7A0, 17, 7);
          *(_BYTE *)(v226 + 16) = 8;
          v137 = swift_allocObject(&unk_10109C7C8, 24, 7);
          *(_QWORD *)(v137 + 16) = 1752392040;
          v219 = swift_allocObject(&unk_10109C7F0, 32, 7);
          *(_QWORD *)(v219 + 16) = sub_10005CBC0;
          *(_QWORD *)(v219 + 24) = v137;
          v216 = swift_allocObject(&unk_10109C818, 17, 7);
          *(_BYTE *)(v216 + 16) = 33;
          v209 = swift_allocObject(&unk_10109C840, 17, 7);
          *(_BYTE *)(v209 + 16) = 8;
          v138 = swift_allocObject(&unk_10109C868, 32, 7);
          *(_QWORD *)(v138 + 16) = sub_10005CBAC;
          *(_QWORD *)(v138 + 24) = v130;
          v192 = swift_allocObject(&unk_10109C890, 32, 7);
          *(_QWORD *)(v192 + 16) = sub_10005CBA4;
          *(_QWORD *)(v192 + 24) = v138;
          v190 = swift_allocObject(&unk_10109C8B8, 17, 7);
          *(_BYTE *)(v190 + 16) = 34;
          v186 = swift_allocObject(&unk_10109C8E0, 17, 7);
          *(_BYTE *)(v186 + 16) = 8;
          v139 = swift_allocObject(&unk_10109C908, 32, 7);
          *(_QWORD *)(v139 + 16) = sub_100960C64;
          *(_QWORD *)(v139 + 24) = v131;
          v140 = swift_allocObject(&unk_10109C930, 32, 7);
          *(_QWORD *)(v140 + 16) = sub_10005CBA4;
          *(_QWORD *)(v140 + 24) = v139;
          v141 = swift_allocObject(v183, 368, 7);
          sub_100882D28(v141, 21);
          *v142 = sub_10005CBC4;
          v142[1] = v175;
          v142[2] = sub_10005CBC4;
          v142[3] = v173;
          v142[4] = sub_10005CBB4;
          v142[5] = v171;
          v142[6] = sub_10005CBC4;
          v142[7] = v231;
          v142[8] = sub_10005CBC4;
          v142[9] = v223;
          v142[10] = sub_10005CBB4;
          v142[11] = v213;
          v142[12] = sub_10005CBC4;
          v142[13] = v194;
          v142[14] = sub_10005CBC4;
          v142[15] = v188;
          v142[16] = sub_10005CBB8;
          v142[17] = v255;
          v142[18] = sub_10005CBC4;
          v142[19] = v251;
          v142[20] = sub_10005CBC4;
          v142[21] = v245;
          v142[22] = sub_10005CBB4;
          v142[23] = v240;
          v142[24] = sub_10005CBC4;
          v142[25] = v235;
          v142[26] = sub_10005CBC4;
          v142[27] = v226;
          v142[28] = sub_10005CBB8;
          v142[29] = v219;
          v142[30] = sub_10005CBC4;
          v142[31] = v216;
          v142[32] = sub_10005CBC4;
          v142[33] = v209;
          v142[34] = sub_10005CBB4;
          v142[35] = v192;
          v142[36] = sub_10005CBC4;
          v142[37] = v190;
          v142[38] = sub_10005CBC4;
          v142[39] = v186;
          v142[40] = sub_10005CBB4;
          v142[41] = v140;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v179, v177))
          {
            v144 = (uint8_t *)sub_1006948A0(72);
            v145 = swift_slowAlloc(160, -1);
            *(_QWORD *)(v0 + 984) = 0;
            v181 = v145;
            *(_QWORD *)(v0 + 952) = v145;
            *(_WORD *)v144 = 1795;
            *(_QWORD *)(v0 + 1016) = v144 + 2;
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v175;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v173;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v171;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v231;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v223;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v213;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v194;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v188;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB8;
            *(_QWORD *)(v0 + 656) = v255;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v251;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v245;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v240;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v235;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v226;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB8;
            *(_QWORD *)(v0 + 656) = v219;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v216;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v209;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v192;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v190;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v186;
            sub_1006948A8(v201, v195, v197, v199);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v140;
            sub_1006948A8(v201, v195, v197, v199);
            v146 = *(_QWORD *)(v0 + 1616);
            v147 = *(_QWORD *)(v0 + 1608);
            v148 = *(_QWORD *)(v0 + 1600);
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v179, v177, "Keys to upload: %{public}s,\nfailed to add type: %{public}s,\nfor share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s\nerror: %{public}s.", v144, 0x48u);
            swift_arrayDestroy(v181, 5, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v181, -1, -1);
            sub_100694894((uint64_t)v144);

            swift_errorRelease(v29);
            v34 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
            v34(v146, v148);
          }
          else
          {
            v149 = *(_QWORD *)(v0 + 1616);
            v150 = *(_QWORD *)(v0 + 1608);
            v151 = *(_QWORD *)(v0 + 1600);
            swift_errorRelease(v29);

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v34 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
            v34(v149, v151);
          }
        }
        else
        {
          v40 = v27;
          v41 = v28;
          v252 = v20;
          v42 = *(_QWORD *)(v0 + 1776);
          v43 = *(_QWORD *)(v0 + 1768);
          v44 = *(_QWORD *)(v0 + 1256);
          swift_release();
          v45 = type metadata accessor for EncryptedData(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
          sub_10001BBBC(v40, v41);
          sub_100D7CD98(1, v40, v41, v44, (_QWORD *)(v0 + 88));
          v46 = sub_10001A9A8(&qword_101109250);
          v47 = swift_allocObject(v46, 104, 7);
          v48 = sub_10084F488(v47, 1);
          *(_OWORD *)v49 = *(_OWORD *)(v0 + 88);
          v51 = *(_OWORD *)(v0 + 120);
          v50 = *(_OWORD *)(v0 + 136);
          v52 = *(_OWORD *)(v0 + 104);
          *(_QWORD *)(v49 + 64) = *(_QWORD *)(v0 + 152);
          *(_OWORD *)(v49 + 32) = v51;
          *(_OWORD *)(v49 + 48) = v50;
          *(_OWORD *)(v49 + 16) = v52;
          v53 = v40;
          v54 = SharingCircleWildAdvertisementKey.init(key:)(v48);
          sub_10001BD08(v43, v42);
          sub_100960D6C((_QWORD *)(v0 + 88), (void (*)(_QWORD, _QWORD))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
          v55 = sub_10095FD50(v54, v43, v42);
          v207 = (_QWORD *)(v0 + 88);
          v211 = v53;
          v214 = v41;
          v56 = *(unsigned __int8 *)(v0 + 2024);
          v57 = *(_QWORD *)(v0 + 1624);
          v217 = *(_QWORD *)(v0 + 1600);
          v227 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
          v232 = *(_QWORD *)(v0 + 1592);
          v58 = *(_QWORD *)(v0 + 1512);
          v59 = *(_QWORD *)(v0 + 1496);
          v60 = *(_QWORD *)(v0 + 1240);
          v61 = *(_BYTE **)(v0 + 1184);
          v248 = *(_QWORD *)(v0 + 1176);
          v236 = *(_QWORD *)(v0 + 1168);
          v241 = *(_QWORD *)(v0 + 1720);
          v62 = *(_QWORD *)(v0 + 1056);
          v63 = (v56 + 16) & ~v56;
          v220 = v56 | 7;
          v224 = *(_QWORD *)(v0 + 1576) + v63;
          sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
          swift_bridgeObjectRelease();
          sub_10005972C(v58, v59, type metadata accessor for KeyDropInterface.KeyAlignment);
          sub_100D79EE0(13, v59, (uint64_t)v55, v61);
          sub_10005972C((uint64_t)v61, v60, type metadata accessor for KeyDropInterface.KeyPackage);
          sub_1009069AC(v60);
          v64 = sub_100906BC0();
          v227(v57, v64, v217);
          sub_10005972C(v62, v232, type metadata accessor for SharingCircleKeyManager.Instruction);
          v65 = swift_allocObject(&unk_10109C958, v224, v220);
          sub_1000126EC(v232, v65 + v63, type metadata accessor for SharingCircleKeyManager.Instruction);
          v66 = swift_allocObject(&unk_10109C980, 32, 7);
          *(_QWORD *)(v66 + 16) = sub_100960968;
          *(_QWORD *)(v66 + 24) = v65;
          sub_10005972C((uint64_t)v61, v60, type metadata accessor for KeyDropInterface.KeyPackage);
          v67 = *(unsigned __int8 *)(v236 + 80);
          v68 = (v67 + 16) & ~v67;
          v69 = swift_allocObject(&unk_10109C9A8, v68 + v248, v67 | 7);
          sub_1000126EC(v60, v69 + v68, type metadata accessor for KeyDropInterface.KeyPackage);
          v70 = swift_allocObject(&unk_10109C9D0, 32, 7);
          *(_QWORD *)(v70 + 16) = sub_100960DF0;
          *(_QWORD *)(v70 + 24) = v69;
          v249 = Logger.logObject.getter(v70);
          v71 = static os_log_type_t.default.getter(v249);
          v72 = swift_allocObject(&unk_10109C9F8, 17, 7);
          *(_BYTE *)(v72 + 16) = 34;
          v73 = swift_allocObject(&unk_10109CA20, 17, 7);
          *(_BYTE *)(v73 + 16) = 8;
          v74 = swift_allocObject(&unk_10109CA48, 32, 7);
          *(_QWORD *)(v74 + 16) = sub_100963204;
          *(_QWORD *)(v74 + 24) = v66;
          v75 = swift_allocObject(&unk_10109CA70, 32, 7);
          *(_QWORD *)(v75 + 16) = sub_10005CBA4;
          *(_QWORD *)(v75 + 24) = v74;
          v76 = swift_allocObject(&unk_10109CA98, 17, 7);
          *(_BYTE *)(v76 + 16) = 34;
          v77 = swift_allocObject(&unk_10109CAC0, 17, 7);
          *(_BYTE *)(v77 + 16) = 8;
          v78 = swift_allocObject(&unk_10109CAE8, 32, 7);
          *(_QWORD *)(v78 + 16) = sub_100960DFC;
          *(_QWORD *)(v78 + 24) = v70;
          v79 = swift_allocObject(&unk_10109CB10, 32, 7);
          *(_QWORD *)(v79 + 16) = sub_10005CBA4;
          *(_QWORD *)(v79 + 24) = v78;
          v80 = swift_allocObject(v241, 128, 7);
          sub_100882D28(v80, 6);
          *v81 = sub_10005CBC4;
          v81[1] = v72;
          v81[2] = sub_10005CBC4;
          v81[3] = v73;
          v81[4] = sub_10005CBB4;
          v81[5] = v75;
          v81[6] = sub_10005CBC4;
          v81[7] = v76;
          v81[8] = sub_10005CBC4;
          v81[9] = v77;
          v81[10] = sub_10005CBB4;
          v81[11] = v79;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v249, v71))
          {
            v228 = v77;
            v82 = (uint8_t *)sub_1006948A0(22);
            v83 = swift_slowAlloc(64, -1);
            *(_QWORD *)(v0 + 888) = 0;
            v221 = v83;
            *(_QWORD *)(v0 + 856) = v83;
            *(_WORD *)v82 = 514;
            *(_QWORD *)(v0 + 920) = v82 + 2;
            *(_QWORD *)(v0 + 712) = sub_10005CBC4;
            *(_QWORD *)(v0 + 720) = v72;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 712), v0 + 920, v0 + 888, v0 + 856);
            swift_release();
            *(_QWORD *)(v0 + 712) = sub_10005CBC4;
            *(_QWORD *)(v0 + 720) = v73;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 712), v0 + 920, v0 + 888, v0 + 856);
            swift_release();
            *(_QWORD *)(v0 + 712) = sub_10005CBB4;
            *(_QWORD *)(v0 + 720) = v75;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 712), v0 + 920, v0 + 888, v0 + 856);
            swift_release();
            *(_QWORD *)(v0 + 712) = sub_10005CBC4;
            *(_QWORD *)(v0 + 720) = v76;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 712), v0 + 920, v0 + 888, v0 + 856);
            swift_release();
            *(_QWORD *)(v0 + 712) = sub_10005CBC4;
            *(_QWORD *)(v0 + 720) = v228;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 712), v0 + 920, v0 + 888, v0 + 856);
            swift_release();
            *(_QWORD *)(v0 + 712) = sub_10005CBB4;
            *(_QWORD *)(v0 + 720) = v79;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 712), v0 + 920, v0 + 888, v0 + 856);
            v84 = *(_QWORD *)(v0 + 1624);
            v85 = *(_QWORD *)(v0 + 1608);
            v86 = *(_QWORD *)(v0 + 1600);
            v87 = *(_QWORD *)(v0 + 1416);
            v88 = *(_QWORD *)(v0 + 1400);
            v89 = *(_QWORD *)(v0 + 1184);
            v237 = *(_QWORD *)(v0 + 1096);
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v249, v71, "Keys to upload: %{public}s,\nadded: %{public}s.", v82, 0x16u);
            swift_arrayDestroy(v221, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v221, -1, -1);
            sub_100694894((uint64_t)v82);

            sub_100960D6C(v207, (void (*)(_QWORD, _QWORD))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
            sub_10001BC14(v211, v214);
            v34 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
            v34(v84, v86);
            sub_1000126B0(v89, type metadata accessor for KeyDropInterface.KeyPackage);
            v252(v87, v88);
            v90 = v237;
          }
          else
          {
            v91 = *(_QWORD *)(v0 + 1624);
            v92 = *(_QWORD *)(v0 + 1608);
            v93 = *(_QWORD *)(v0 + 1600);
            v233 = *(_QWORD *)(v0 + 1400);
            v238 = *(_QWORD *)(v0 + 1416);
            v229 = *(_QWORD *)(v0 + 1184);
            v242 = *(_QWORD *)(v0 + 1096);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();

            sub_100960D6C(v207, (void (*)(_QWORD, _QWORD))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
            sub_10001BC14(v211, v214);
            v34 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
            v34(v91, v93);
            sub_1000126B0(v229, type metadata accessor for KeyDropInterface.KeyPackage);
            v252(v238, v233);
            v90 = v242;
          }
          sub_1000126B0(v90, type metadata accessor for KeyDropBeaconGroupAttributes);
        }
        v35 = 0;
        v33 = v34;
LABEL_20:
        v94 = *(_QWORD *)(v0 + 1824);
        v95 = *(_QWORD *)(v0 + 1816);
        *(_QWORD *)(v0 + 1808) = v33;
        *(_QWORD *)(v0 + 1800) = v34;
        *(_QWORD *)(v0 + 1792) = v35;
        if (v94)
        {
          v96 = __clz(__rbit64(v94));
          v97 = (v94 - 1) & v94;
          v98 = v96 | (v95 << 6);
          v99 = *(_QWORD *)(v0 + 1784);
          goto LABEL_33;
        }
        if (__OFADD__(v95++, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        v101 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
        v99 = *(_QWORD *)(v0 + 1784);
        if (v95 < v101)
        {
          v102 = v99 + 56;
          v103 = *(_QWORD *)(v99 + 56 + 8 * v95);
          if (v103)
          {
LABEL_32:
            v97 = (v103 - 1) & v103;
            v98 = __clz(__rbit64(v103)) + (v95 << 6);
LABEL_33:
            *(_QWORD *)(v0 + 1824) = v97;
            *(_QWORD *)(v0 + 1816) = v95;
            v105 = *(unsigned __int8 *)(*(_QWORD *)(v99 + 48) + v98);
            *(_BYTE *)(v0 + 2037) = v105;
            __asm { BR              X8 }
          }
          v104 = v95 + 1;
          if (v95 + 1 < v101)
          {
            v103 = *(_QWORD *)(v102 + 8 * v104);
            if (v103)
              goto LABEL_31;
            v104 = v95 + 2;
            if (v95 + 2 >= v101)
              goto LABEL_38;
            v103 = *(_QWORD *)(v102 + 8 * v104);
            if (v103)
            {
LABEL_31:
              v95 = v104;
              goto LABEL_32;
            }
            v104 = v95 + 3;
            if (v95 + 3 < v101)
            {
              v103 = *(_QWORD *)(v102 + 8 * v104);
              if (v103)
                goto LABEL_31;
              while (1)
              {
                v95 = v104 + 1;
                if (__OFADD__(v104, 1))
                  break;
                if (v95 >= v101)
                  goto LABEL_38;
                v103 = *(_QWORD *)(v102 + 8 * v95);
                ++v104;
                if (v103)
                  goto LABEL_32;
              }
LABEL_44:
              __break(1u);
              JUMPOUT(0x100946124);
            }
          }
        }
LABEL_38:
        v106 = *(_QWORD *)(v0 + 1704);
        v107 = *(_QWORD *)(v0 + 1696);
        v108 = *(_QWORD *)(v0 + 1688);
        v152 = *(_QWORD *)(v0 + 1680);
        v153 = *(_QWORD *)(v0 + 1672);
        v154 = *(_QWORD *)(v0 + 1664);
        v155 = *(_QWORD *)(v0 + 1656);
        v156 = *(_QWORD *)(v0 + 1648);
        v157 = *(_QWORD *)(v0 + 1640);
        v158 = *(_QWORD *)(v0 + 1632);
        v159 = *(_QWORD *)(v0 + 1624);
        v160 = *(_QWORD *)(v0 + 1616);
        v161 = *(_QWORD *)(v0 + 1592);
        v109 = *(_QWORD *)(v0 + 1584);
        v110 = *(_QWORD *)(v0 + 1552);
        v111 = *(_QWORD *)(v0 + 1544);
        v112 = *(_QWORD *)(v0 + 1512);
        v162 = *(_QWORD *)(v0 + 1520);
        v163 = *(_QWORD *)(v0 + 1504);
        v164 = *(_QWORD *)(v0 + 1496);
        v165 = *(_QWORD *)(v0 + 1488);
        v166 = *(_QWORD *)(v0 + 1480);
        v167 = *(_QWORD *)(v0 + 1472);
        v168 = *(_QWORD *)(v0 + 1448);
        v169 = *(_QWORD *)(v0 + 1440);
        v170 = *(_QWORD *)(v0 + 1432);
        v172 = *(_QWORD *)(v0 + 1424);
        v113 = *(_QWORD *)(v0 + 1392);
        v174 = *(_QWORD *)(v0 + 1416);
        v176 = *(_QWORD *)(v0 + 1384);
        v178 = *(_QWORD *)(v0 + 1376);
        v180 = *(_QWORD *)(v0 + 1368);
        v182 = *(_QWORD *)(v0 + 1360);
        v184 = *(_QWORD *)(v0 + 1352);
        v185 = *(_QWORD *)(v0 + 1344);
        v187 = *(_QWORD *)(v0 + 1336);
        v189 = *(_QWORD *)(v0 + 1328);
        v191 = *(_QWORD *)(v0 + 1320);
        v193 = *(_QWORD *)(v0 + 1312);
        v196 = *(_QWORD *)(v0 + 1304);
        v198 = *(_QWORD *)(v0 + 1296);
        v200 = *(_QWORD *)(v0 + 1288);
        v202 = *(_QWORD *)(v0 + 1264);
        v203 = *(_QWORD *)(v0 + 1256);
        v204 = *(_QWORD *)(v0 + 1248);
        v205 = *(_QWORD *)(v0 + 1240);
        v206 = *(_QWORD *)(v0 + 1232);
        v208 = *(_QWORD *)(v0 + 1224);
        v210 = *(_QWORD *)(v0 + 1216);
        v212 = *(_QWORD *)(v0 + 1208);
        v215 = *(_QWORD *)(v0 + 1200);
        v218 = *(_QWORD *)(v0 + 1192);
        v222 = *(_QWORD *)(v0 + 1184);
        v225 = *(_QWORD *)(v0 + 1152);
        v230 = *(_QWORD *)(v0 + 1144);
        v234 = *(_QWORD *)(v0 + 1136);
        v239 = *(_QWORD *)(v0 + 1128);
        v243 = *(_QWORD *)(v0 + 1120);
        v246 = *(_QWORD *)(v0 + 1112);
        v247 = *(_QWORD *)(v0 + 1104);
        v250 = *(_QWORD *)(v0 + 1096);
        v253 = *(_QWORD *)(v0 + 1072);
        sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
        sub_1000D9530((uint64_t *)(v0 + 448));
        swift_release();
        sub_1000126B0(v109, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_1000126B0(v111, type metadata accessor for OwnedBeaconRecord);
        swift_weakDestroy(v0 + 824);
        sub_100004048(v113, &qword_1011063B8);
        sub_1000126B0(v112, type metadata accessor for KeyDropInterface.KeyAlignment);
        sub_1000126B0(v110, type metadata accessor for OwnedBeaconRecord);
        swift_task_dealloc(v106);
        swift_task_dealloc(v107);
        swift_task_dealloc(v108);
        swift_task_dealloc(v152);
        swift_task_dealloc(v153);
        swift_task_dealloc(v154);
        swift_task_dealloc(v155);
        swift_task_dealloc(v156);
        swift_task_dealloc(v157);
        swift_task_dealloc(v158);
        swift_task_dealloc(v159);
        swift_task_dealloc(v160);
        swift_task_dealloc(v161);
        swift_task_dealloc(v109);
        swift_task_dealloc(v110);
        swift_task_dealloc(v111);
        swift_task_dealloc(v162);
        swift_task_dealloc(v112);
        swift_task_dealloc(v163);
        swift_task_dealloc(v164);
        swift_task_dealloc(v165);
        swift_task_dealloc(v166);
        swift_task_dealloc(v167);
        swift_task_dealloc(v168);
        swift_task_dealloc(v169);
        swift_task_dealloc(v170);
        swift_task_dealloc(v172);
        swift_task_dealloc(v174);
        swift_task_dealloc(v113);
        swift_task_dealloc(v176);
        swift_task_dealloc(v178);
        swift_task_dealloc(v180);
        swift_task_dealloc(v182);
        swift_task_dealloc(v184);
        swift_task_dealloc(v185);
        swift_task_dealloc(v187);
        swift_task_dealloc(v189);
        swift_task_dealloc(v191);
        swift_task_dealloc(v193);
        swift_task_dealloc(v196);
        swift_task_dealloc(v198);
        swift_task_dealloc(v200);
        swift_task_dealloc(v202);
        swift_task_dealloc(v203);
        swift_task_dealloc(v204);
        swift_task_dealloc(v205);
        swift_task_dealloc(v206);
        swift_task_dealloc(v208);
        swift_task_dealloc(v210);
        swift_task_dealloc(v212);
        swift_task_dealloc(v215);
        swift_task_dealloc(v218);
        swift_task_dealloc(v222);
        swift_task_dealloc(v225);
        swift_task_dealloc(v230);
        swift_task_dealloc(v234);
        swift_task_dealloc(v239);
        swift_task_dealloc(v243);
        swift_task_dealloc(v246);
        swift_task_dealloc(v247);
        swift_task_dealloc(v250);
        swift_task_dealloc(v253);
        __asm { BR              X1 }
      }
      v20(*(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1400));
      sub_1000126B0(v21, type metadata accessor for KeyDropBeaconGroupAttributes);
LABEL_13:
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1808);
      v34 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
      v35 = *(_QWORD *)(v0 + 1792);
      goto LABEL_20;
    }
    v6 = (uint64_t *)(v0 + 1328);
  }
  sub_100004048(*v6, v7);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1408) + 56))(*(_QWORD *)(v0 + 1104), 1, 1, *(_QWORD *)(v0 + 1400));
  goto LABEL_8;
}

uint64_t sub_10094615C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  sub_1000126B0(*(_QWORD *)(v0 + 1552), type metadata accessor for OwnedBeaconRecord);
  v1 = *(_QWORD *)(v0 + 1696);
  v2 = *(_QWORD *)(v0 + 1688);
  v3 = *(_QWORD *)(v0 + 1680);
  v4 = *(_QWORD *)(v0 + 1672);
  v5 = *(_QWORD *)(v0 + 1664);
  v6 = *(_QWORD *)(v0 + 1656);
  v7 = *(_QWORD *)(v0 + 1648);
  v8 = *(_QWORD *)(v0 + 1640);
  v9 = *(_QWORD *)(v0 + 1632);
  v11 = *(_QWORD *)(v0 + 1624);
  v12 = *(_QWORD *)(v0 + 1616);
  v13 = *(_QWORD *)(v0 + 1592);
  v14 = *(_QWORD *)(v0 + 1584);
  v15 = *(_QWORD *)(v0 + 1552);
  v16 = *(_QWORD *)(v0 + 1544);
  v17 = *(_QWORD *)(v0 + 1520);
  v18 = *(_QWORD *)(v0 + 1512);
  v19 = *(_QWORD *)(v0 + 1504);
  v20 = *(_QWORD *)(v0 + 1496);
  v21 = *(_QWORD *)(v0 + 1488);
  v22 = *(_QWORD *)(v0 + 1480);
  v23 = *(_QWORD *)(v0 + 1472);
  v24 = *(_QWORD *)(v0 + 1448);
  v25 = *(_QWORD *)(v0 + 1440);
  v26 = *(_QWORD *)(v0 + 1432);
  v27 = *(_QWORD *)(v0 + 1424);
  v28 = *(_QWORD *)(v0 + 1416);
  v29 = *(_QWORD *)(v0 + 1392);
  v30 = *(_QWORD *)(v0 + 1384);
  v31 = *(_QWORD *)(v0 + 1376);
  v32 = *(_QWORD *)(v0 + 1368);
  v33 = *(_QWORD *)(v0 + 1360);
  v34 = *(_QWORD *)(v0 + 1352);
  v35 = *(_QWORD *)(v0 + 1344);
  v36 = *(_QWORD *)(v0 + 1336);
  v37 = *(_QWORD *)(v0 + 1328);
  v38 = *(_QWORD *)(v0 + 1320);
  v39 = *(_QWORD *)(v0 + 1312);
  v40 = *(_QWORD *)(v0 + 1304);
  v41 = *(_QWORD *)(v0 + 1296);
  v42 = *(_QWORD *)(v0 + 1288);
  v43 = *(_QWORD *)(v0 + 1264);
  v44 = *(_QWORD *)(v0 + 1256);
  v45 = *(_QWORD *)(v0 + 1248);
  v46 = *(_QWORD *)(v0 + 1240);
  v47 = *(_QWORD *)(v0 + 1232);
  v48 = *(_QWORD *)(v0 + 1224);
  v49 = *(_QWORD *)(v0 + 1216);
  v50 = *(_QWORD *)(v0 + 1208);
  v51 = *(_QWORD *)(v0 + 1200);
  v52 = *(_QWORD *)(v0 + 1192);
  v53 = *(_QWORD *)(v0 + 1184);
  v54 = *(_QWORD *)(v0 + 1152);
  v55 = *(_QWORD *)(v0 + 1144);
  v56 = *(_QWORD *)(v0 + 1136);
  v57 = *(_QWORD *)(v0 + 1128);
  v58 = *(_QWORD *)(v0 + 1120);
  v59 = *(_QWORD *)(v0 + 1112);
  v60 = *(_QWORD *)(v0 + 1104);
  v61 = *(_QWORD *)(v0 + 1096);
  v62 = *(_QWORD *)(v0 + 1072);
  swift_task_dealloc(*(_QWORD *)(v0 + 1704));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100946514()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (**v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v85 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  v81 = v0 + 984;
  v83 = v0 + 952;
  v79 = v0 + 1016;
  v144 = *(_QWORD *)(v0 + 1904);
  v136 = *(_BYTE *)(v0 + 2037);
  v95 = *(_QWORD *)(v0 + 1720);
  v1 = *(unsigned __int8 *)(v0 + 2024);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
  v3 = *(_QWORD *)(v0 + 1616);
  v4 = *(_QWORD *)(v0 + 1600);
  v5 = *(_QWORD *)(v0 + 1592);
  v6 = *(_QWORD *)(v0 + 1056);
  v7 = (v1 + 16) & ~v1;
  v8 = *(_QWORD *)(v0 + 1576) + v7;
  v9 = v1 | 7;
  v10 = sub_100906BC0();
  v2(v3, v10, v4);
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v11 = swift_allocObject(&unk_10109C3B8, v8, v9);
  sub_1000126EC(v5, v11 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v12 = swift_allocObject(&unk_10109C3E0, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100960968;
  *(_QWORD *)(v12 + 24) = v11;
  v141 = swift_allocObject(&unk_10109C408, 17, 7);
  *(_BYTE *)(v141 + 16) = v136;
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v13 = swift_allocObject(&unk_10109C430, v8, v9);
  sub_1000126EC(v5, v13 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v14 = swift_allocObject(&unk_10109C458, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100960A74;
  *(_QWORD *)(v14 + 24) = v13;
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v15 = swift_allocObject(&unk_10109C480, v8, v9);
  sub_1000126EC(v5, v15 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v16 = swift_allocObject(&unk_10109C4A8, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100960A7C;
  *(_QWORD *)(v16 + 24) = v15;
  v120 = swift_allocObject(&unk_10109C4D0, 24, 7);
  *(_QWORD *)(v120 + 16) = v144;
  v17 = swift_errorRetain(v144);
  v101 = Logger.logObject.getter(v17);
  v99 = static os_log_type_t.error.getter(v101);
  v115 = swift_allocObject(&unk_10109C4F8, 17, 7);
  *(_BYTE *)(v115 + 16) = 34;
  v117 = swift_allocObject(&unk_10109C520, 17, 7);
  *(_BYTE *)(v117 + 16) = 8;
  v18 = swift_allocObject(&unk_10109C548, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100963204;
  *(_QWORD *)(v18 + 24) = v12;
  v19 = swift_allocObject(&unk_10109C570, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005CBA4;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = v19;
  v21 = swift_allocObject(&unk_10109C598, 17, 7);
  *(_BYTE *)(v21 + 16) = 34;
  v22 = v21;
  v111 = swift_allocObject(&unk_10109C5C0, 17, 7);
  *(_BYTE *)(v111 + 16) = 8;
  v23 = swift_allocObject(&unk_10109C5E8, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_100960B78;
  *(_QWORD *)(v23 + 24) = v141;
  v109 = swift_allocObject(&unk_10109C610, 32, 7);
  *(_QWORD *)(v109 + 16) = sub_10005CBA4;
  *(_QWORD *)(v109 + 24) = v23;
  v142 = swift_allocObject(&unk_10109C638, 17, 7);
  *(_BYTE *)(v142 + 16) = 112;
  v139 = swift_allocObject(&unk_10109C660, 17, 7);
  *(_BYTE *)(v139 + 16) = 8;
  v24 = swift_allocObject(&unk_10109C688, 24, 7);
  *(_QWORD *)(v24 + 16) = 1752392040;
  v137 = swift_allocObject(&unk_10109C6B0, 32, 7);
  *(_QWORD *)(v137 + 16) = sub_10005CBC0;
  *(_QWORD *)(v137 + 24) = v24;
  v134 = swift_allocObject(&unk_10109C6D8, 17, 7);
  *(_BYTE *)(v134 + 16) = 33;
  v132 = swift_allocObject(&unk_10109C700, 17, 7);
  *(_BYTE *)(v132 + 16) = 8;
  v25 = swift_allocObject(&unk_10109C728, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005CBAC;
  *(_QWORD *)(v25 + 24) = v14;
  v130 = swift_allocObject(&unk_10109C750, 32, 7);
  *(_QWORD *)(v130 + 16) = sub_10005CBA4;
  *(_QWORD *)(v130 + 24) = v25;
  v128 = swift_allocObject(&unk_10109C778, 17, 7);
  *(_BYTE *)(v128 + 16) = 112;
  v126 = swift_allocObject(&unk_10109C7A0, 17, 7);
  *(_BYTE *)(v126 + 16) = 8;
  v26 = swift_allocObject(&unk_10109C7C8, 24, 7);
  *(_QWORD *)(v26 + 16) = 1752392040;
  v107 = swift_allocObject(&unk_10109C7F0, 32, 7);
  *(_QWORD *)(v107 + 16) = sub_10005CBC0;
  *(_QWORD *)(v107 + 24) = v26;
  v27 = swift_allocObject(&unk_10109C818, 17, 7);
  *(_BYTE *)(v27 + 16) = 33;
  v105 = swift_allocObject(&unk_10109C840, 17, 7);
  *(_BYTE *)(v105 + 16) = 8;
  v28 = swift_allocObject(&unk_10109C868, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10005CBAC;
  *(_QWORD *)(v28 + 24) = v16;
  v103 = swift_allocObject(&unk_10109C890, 32, 7);
  *(_QWORD *)(v103 + 16) = sub_10005CBA4;
  *(_QWORD *)(v103 + 24) = v28;
  v113 = swift_allocObject(&unk_10109C8B8, 17, 7);
  *(_BYTE *)(v113 + 16) = 34;
  v123 = swift_allocObject(&unk_10109C8E0, 17, 7);
  *(_BYTE *)(v123 + 16) = 8;
  v29 = swift_allocObject(&unk_10109C908, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_100960C64;
  *(_QWORD *)(v29 + 24) = v120;
  v121 = swift_allocObject(&unk_10109C930, 32, 7);
  *(_QWORD *)(v121 + 16) = sub_10005CBA4;
  *(_QWORD *)(v121 + 24) = v29;
  v30 = swift_allocObject(v95, 368, 7);
  sub_100882D28(v30, 21);
  *v31 = sub_10005CBC4;
  v31[1] = v115;
  v31[2] = sub_10005CBC4;
  v31[3] = v117;
  v31[4] = sub_10005CBB4;
  v31[5] = v20;
  v31[6] = sub_10005CBC4;
  v31[7] = v22;
  v31[8] = sub_10005CBC4;
  v31[9] = v111;
  v31[10] = sub_10005CBB4;
  v31[11] = v109;
  v31[12] = sub_10005CBC4;
  v31[13] = v142;
  v31[14] = sub_10005CBC4;
  v31[15] = v139;
  v31[16] = sub_10005CBB8;
  v31[17] = v137;
  v31[18] = sub_10005CBC4;
  v31[19] = v134;
  v31[20] = sub_10005CBC4;
  v31[21] = v132;
  v31[22] = sub_10005CBB4;
  v31[23] = v130;
  v31[24] = sub_10005CBC4;
  v31[25] = v128;
  v31[26] = sub_10005CBC4;
  v31[27] = v126;
  v31[28] = sub_10005CBB8;
  v31[29] = v107;
  v31[30] = sub_10005CBC4;
  v31[31] = v27;
  v31[32] = sub_10005CBC4;
  v31[33] = v105;
  v31[34] = sub_10005CBB4;
  v31[35] = v103;
  v31[36] = sub_10005CBC4;
  v31[37] = v113;
  v31[38] = sub_10005CBC4;
  v31[39] = v123;
  v31[40] = sub_10005CBB4;
  v31[41] = v121;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v101, v99))
  {
    v32 = (uint8_t *)sub_1006948A0(72);
    v33 = swift_slowAlloc(160, -1);
    *(_QWORD *)(v0 + 984) = 0;
    v76 = v33;
    *(_QWORD *)(v0 + 952) = v33;
    v96 = v32;
    *(_WORD *)v32 = 1795;
    *(_QWORD *)(v0 + 1016) = v32 + 2;
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v115;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v117;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v20;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v22;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v111;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v109;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v142;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v139;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB8;
    *(_QWORD *)(v0 + 656) = v137;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v134;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v132;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v130;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v128;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v126;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB8;
    *(_QWORD *)(v0 + 656) = v107;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v27;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v105;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v103;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v113;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v123;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v121;
    sub_1006948A8(v85, v79, v81, v83);
    v34 = *(_QWORD *)(v0 + 1616);
    v35 = *(_QWORD *)(v0 + 1608);
    v36 = *(_QWORD *)(v0 + 1600);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v101, v99, "Keys to upload: %{public}s,\nfailed to add type: %{public}s,\nfor share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s\nerror: %{public}s.", v96, 0x48u);
    swift_arrayDestroy(v76, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    sub_100694894((uint64_t)v96);

    swift_errorRelease(v144);
    v37 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v37(v34, v36);
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 1616);
    v39 = *(_QWORD *)(v0 + 1608);
    v40 = *(_QWORD *)(v0 + 1600);
    swift_errorRelease(v144);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v37 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v37(v38, v40);
  }
  v41 = *(_QWORD *)(v0 + 1824);
  v42 = *(_QWORD *)(v0 + 1816);
  *(_QWORD *)(v0 + 1808) = v37;
  *(_QWORD *)(v0 + 1800) = v37;
  *(_QWORD *)(v0 + 1792) = 0;
  if (v41)
  {
    v43 = __clz(__rbit64(v41));
    v44 = (v41 - 1) & v41;
    v45 = v43 | (v42 << 6);
    v46 = *(_QWORD *)(v0 + 1784);
    goto LABEL_17;
  }
  if (__OFADD__(v42++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  v48 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
  v46 = *(_QWORD *)(v0 + 1784);
  if (v42 < v48)
  {
    v49 = v46 + 56;
    v50 = *(_QWORD *)(v46 + 56 + 8 * v42);
    if (v50)
    {
LABEL_16:
      v44 = (v50 - 1) & v50;
      v45 = __clz(__rbit64(v50)) + (v42 << 6);
LABEL_17:
      *(_QWORD *)(v0 + 1824) = v44;
      *(_QWORD *)(v0 + 1816) = v42;
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v46 + 48) + v45);
      *(_BYTE *)(v0 + 2037) = v52;
      __asm { BR              X8 }
    }
    v51 = v42 + 1;
    if (v42 + 1 < v48)
    {
      v50 = *(_QWORD *)(v49 + 8 * v51);
      if (v50)
        goto LABEL_15;
      v51 = v42 + 2;
      if (v42 + 2 >= v48)
        goto LABEL_22;
      v50 = *(_QWORD *)(v49 + 8 * v51);
      if (v50)
      {
LABEL_15:
        v42 = v51;
        goto LABEL_16;
      }
      v51 = v42 + 3;
      if (v42 + 3 < v48)
      {
        v50 = *(_QWORD *)(v49 + 8 * v51);
        if (v50)
          goto LABEL_15;
        while (1)
        {
          v42 = v51 + 1;
          if (__OFADD__(v51, 1))
            break;
          if (v42 >= v48)
            goto LABEL_22;
          v50 = *(_QWORD *)(v49 + 8 * v42);
          ++v51;
          if (v50)
            goto LABEL_16;
        }
LABEL_24:
        __break(1u);
        JUMPOUT(0x100948578);
      }
    }
  }
LABEL_22:
  v53 = *(_QWORD *)(v0 + 1704);
  v54 = *(_QWORD *)(v0 + 1696);
  v55 = *(_QWORD *)(v0 + 1688);
  v61 = *(_QWORD *)(v0 + 1680);
  v62 = *(_QWORD *)(v0 + 1672);
  v63 = *(_QWORD *)(v0 + 1664);
  v64 = *(_QWORD *)(v0 + 1656);
  v65 = *(_QWORD *)(v0 + 1648);
  v66 = *(_QWORD *)(v0 + 1640);
  v67 = *(_QWORD *)(v0 + 1632);
  v68 = *(_QWORD *)(v0 + 1624);
  v69 = *(_QWORD *)(v0 + 1616);
  v70 = *(_QWORD *)(v0 + 1592);
  v56 = *(_QWORD *)(v0 + 1584);
  v57 = *(_QWORD *)(v0 + 1552);
  v58 = *(_QWORD *)(v0 + 1544);
  v59 = *(_QWORD *)(v0 + 1512);
  v71 = *(_QWORD *)(v0 + 1520);
  v72 = *(_QWORD *)(v0 + 1504);
  v73 = *(_QWORD *)(v0 + 1496);
  v74 = *(_QWORD *)(v0 + 1488);
  v75 = *(_QWORD *)(v0 + 1480);
  v77 = *(_QWORD *)(v0 + 1472);
  v78 = *(_QWORD *)(v0 + 1448);
  v80 = *(_QWORD *)(v0 + 1440);
  v82 = *(_QWORD *)(v0 + 1432);
  v84 = *(_QWORD *)(v0 + 1424);
  v86 = *(_QWORD *)(v0 + 1416);
  v60 = *(_QWORD *)(v0 + 1392);
  v87 = *(_QWORD *)(v0 + 1384);
  v88 = *(_QWORD *)(v0 + 1376);
  v89 = *(_QWORD *)(v0 + 1368);
  v90 = *(_QWORD *)(v0 + 1360);
  v91 = *(_QWORD *)(v0 + 1352);
  v92 = *(_QWORD *)(v0 + 1344);
  v93 = *(_QWORD *)(v0 + 1336);
  v94 = *(_QWORD *)(v0 + 1328);
  v97 = *(_QWORD *)(v0 + 1320);
  v98 = *(_QWORD *)(v0 + 1312);
  v100 = *(_QWORD *)(v0 + 1304);
  v102 = *(_QWORD *)(v0 + 1296);
  v104 = *(_QWORD *)(v0 + 1288);
  v106 = *(_QWORD *)(v0 + 1264);
  v108 = *(_QWORD *)(v0 + 1256);
  v110 = *(_QWORD *)(v0 + 1248);
  v112 = *(_QWORD *)(v0 + 1240);
  v114 = *(_QWORD *)(v0 + 1232);
  v116 = *(_QWORD *)(v0 + 1224);
  v118 = *(_QWORD *)(v0 + 1216);
  v119 = *(_QWORD *)(v0 + 1208);
  v122 = *(_QWORD *)(v0 + 1200);
  v124 = *(_QWORD *)(v0 + 1192);
  v125 = *(_QWORD *)(v0 + 1184);
  v127 = *(_QWORD *)(v0 + 1152);
  v129 = *(_QWORD *)(v0 + 1144);
  v131 = *(_QWORD *)(v0 + 1136);
  v133 = *(_QWORD *)(v0 + 1128);
  v135 = *(_QWORD *)(v0 + 1120);
  v138 = *(_QWORD *)(v0 + 1112);
  v140 = *(_QWORD *)(v0 + 1104);
  v143 = *(_QWORD *)(v0 + 1096);
  v145 = *(_QWORD *)(v0 + 1072);
  sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
  sub_1000D9530((uint64_t *)(v0 + 448));
  swift_release();
  sub_1000126B0(v56, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_1000126B0(v58, type metadata accessor for OwnedBeaconRecord);
  swift_weakDestroy(v0 + 824);
  sub_100004048(v60, &qword_1011063B8);
  sub_1000126B0(v59, type metadata accessor for KeyDropInterface.KeyAlignment);
  sub_1000126B0(v57, type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v71);
  swift_task_dealloc(v59);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v86);
  swift_task_dealloc(v60);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v127);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  swift_task_dealloc(v133);
  swift_task_dealloc(v135);
  swift_task_dealloc(v138);
  swift_task_dealloc(v140);
  swift_task_dealloc(v143);
  swift_task_dealloc(v145);
  __asm { BR              X1 }
}

void sub_1009485B0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (**v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v85 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  v81 = v0 + 984;
  v83 = v0 + 952;
  v79 = v0 + 1016;
  sub_1000126B0(*(_QWORD *)(v0 + 1488), type metadata accessor for KeyDropInterface.KeyAlignment);
  v144 = *(_QWORD *)(v0 + 1936);
  v136 = *(_BYTE *)(v0 + 2037);
  v95 = *(_QWORD *)(v0 + 1720);
  v1 = *(unsigned __int8 *)(v0 + 2024);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
  v3 = *(_QWORD *)(v0 + 1616);
  v4 = *(_QWORD *)(v0 + 1600);
  v5 = *(_QWORD *)(v0 + 1592);
  v6 = *(_QWORD *)(v0 + 1056);
  v7 = (v1 + 16) & ~v1;
  v8 = *(_QWORD *)(v0 + 1576) + v7;
  v9 = v1 | 7;
  v10 = sub_100906BC0();
  v2(v3, v10, v4);
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v11 = swift_allocObject(&unk_10109C3B8, v8, v9);
  sub_1000126EC(v5, v11 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v12 = swift_allocObject(&unk_10109C3E0, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100960968;
  *(_QWORD *)(v12 + 24) = v11;
  v141 = swift_allocObject(&unk_10109C408, 17, 7);
  *(_BYTE *)(v141 + 16) = v136;
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v13 = swift_allocObject(&unk_10109C430, v8, v9);
  sub_1000126EC(v5, v13 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v14 = swift_allocObject(&unk_10109C458, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100960A74;
  *(_QWORD *)(v14 + 24) = v13;
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v15 = swift_allocObject(&unk_10109C480, v8, v9);
  sub_1000126EC(v5, v15 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v16 = swift_allocObject(&unk_10109C4A8, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100960A7C;
  *(_QWORD *)(v16 + 24) = v15;
  v120 = swift_allocObject(&unk_10109C4D0, 24, 7);
  *(_QWORD *)(v120 + 16) = v144;
  v17 = swift_errorRetain(v144);
  v101 = Logger.logObject.getter(v17);
  v99 = static os_log_type_t.error.getter(v101);
  v115 = swift_allocObject(&unk_10109C4F8, 17, 7);
  *(_BYTE *)(v115 + 16) = 34;
  v117 = swift_allocObject(&unk_10109C520, 17, 7);
  *(_BYTE *)(v117 + 16) = 8;
  v18 = swift_allocObject(&unk_10109C548, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100963204;
  *(_QWORD *)(v18 + 24) = v12;
  v19 = swift_allocObject(&unk_10109C570, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005CBA4;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = v19;
  v21 = swift_allocObject(&unk_10109C598, 17, 7);
  *(_BYTE *)(v21 + 16) = 34;
  v22 = v21;
  v111 = swift_allocObject(&unk_10109C5C0, 17, 7);
  *(_BYTE *)(v111 + 16) = 8;
  v23 = swift_allocObject(&unk_10109C5E8, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_100960B78;
  *(_QWORD *)(v23 + 24) = v141;
  v109 = swift_allocObject(&unk_10109C610, 32, 7);
  *(_QWORD *)(v109 + 16) = sub_10005CBA4;
  *(_QWORD *)(v109 + 24) = v23;
  v142 = swift_allocObject(&unk_10109C638, 17, 7);
  *(_BYTE *)(v142 + 16) = 112;
  v139 = swift_allocObject(&unk_10109C660, 17, 7);
  *(_BYTE *)(v139 + 16) = 8;
  v24 = swift_allocObject(&unk_10109C688, 24, 7);
  *(_QWORD *)(v24 + 16) = 1752392040;
  v137 = swift_allocObject(&unk_10109C6B0, 32, 7);
  *(_QWORD *)(v137 + 16) = sub_10005CBC0;
  *(_QWORD *)(v137 + 24) = v24;
  v134 = swift_allocObject(&unk_10109C6D8, 17, 7);
  *(_BYTE *)(v134 + 16) = 33;
  v132 = swift_allocObject(&unk_10109C700, 17, 7);
  *(_BYTE *)(v132 + 16) = 8;
  v25 = swift_allocObject(&unk_10109C728, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005CBAC;
  *(_QWORD *)(v25 + 24) = v14;
  v130 = swift_allocObject(&unk_10109C750, 32, 7);
  *(_QWORD *)(v130 + 16) = sub_10005CBA4;
  *(_QWORD *)(v130 + 24) = v25;
  v128 = swift_allocObject(&unk_10109C778, 17, 7);
  *(_BYTE *)(v128 + 16) = 112;
  v126 = swift_allocObject(&unk_10109C7A0, 17, 7);
  *(_BYTE *)(v126 + 16) = 8;
  v26 = swift_allocObject(&unk_10109C7C8, 24, 7);
  *(_QWORD *)(v26 + 16) = 1752392040;
  v107 = swift_allocObject(&unk_10109C7F0, 32, 7);
  *(_QWORD *)(v107 + 16) = sub_10005CBC0;
  *(_QWORD *)(v107 + 24) = v26;
  v27 = swift_allocObject(&unk_10109C818, 17, 7);
  *(_BYTE *)(v27 + 16) = 33;
  v105 = swift_allocObject(&unk_10109C840, 17, 7);
  *(_BYTE *)(v105 + 16) = 8;
  v28 = swift_allocObject(&unk_10109C868, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10005CBAC;
  *(_QWORD *)(v28 + 24) = v16;
  v103 = swift_allocObject(&unk_10109C890, 32, 7);
  *(_QWORD *)(v103 + 16) = sub_10005CBA4;
  *(_QWORD *)(v103 + 24) = v28;
  v113 = swift_allocObject(&unk_10109C8B8, 17, 7);
  *(_BYTE *)(v113 + 16) = 34;
  v123 = swift_allocObject(&unk_10109C8E0, 17, 7);
  *(_BYTE *)(v123 + 16) = 8;
  v29 = swift_allocObject(&unk_10109C908, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_100960C64;
  *(_QWORD *)(v29 + 24) = v120;
  v121 = swift_allocObject(&unk_10109C930, 32, 7);
  *(_QWORD *)(v121 + 16) = sub_10005CBA4;
  *(_QWORD *)(v121 + 24) = v29;
  v30 = swift_allocObject(v95, 368, 7);
  sub_100882D28(v30, 21);
  *v31 = sub_10005CBC4;
  v31[1] = v115;
  v31[2] = sub_10005CBC4;
  v31[3] = v117;
  v31[4] = sub_10005CBB4;
  v31[5] = v20;
  v31[6] = sub_10005CBC4;
  v31[7] = v22;
  v31[8] = sub_10005CBC4;
  v31[9] = v111;
  v31[10] = sub_10005CBB4;
  v31[11] = v109;
  v31[12] = sub_10005CBC4;
  v31[13] = v142;
  v31[14] = sub_10005CBC4;
  v31[15] = v139;
  v31[16] = sub_10005CBB8;
  v31[17] = v137;
  v31[18] = sub_10005CBC4;
  v31[19] = v134;
  v31[20] = sub_10005CBC4;
  v31[21] = v132;
  v31[22] = sub_10005CBB4;
  v31[23] = v130;
  v31[24] = sub_10005CBC4;
  v31[25] = v128;
  v31[26] = sub_10005CBC4;
  v31[27] = v126;
  v31[28] = sub_10005CBB8;
  v31[29] = v107;
  v31[30] = sub_10005CBC4;
  v31[31] = v27;
  v31[32] = sub_10005CBC4;
  v31[33] = v105;
  v31[34] = sub_10005CBB4;
  v31[35] = v103;
  v31[36] = sub_10005CBC4;
  v31[37] = v113;
  v31[38] = sub_10005CBC4;
  v31[39] = v123;
  v31[40] = sub_10005CBB4;
  v31[41] = v121;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v101, v99))
  {
    v32 = (uint8_t *)sub_1006948A0(72);
    v33 = swift_slowAlloc(160, -1);
    *(_QWORD *)(v0 + 984) = 0;
    v76 = v33;
    *(_QWORD *)(v0 + 952) = v33;
    v96 = v32;
    *(_WORD *)v32 = 1795;
    *(_QWORD *)(v0 + 1016) = v32 + 2;
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v115;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v117;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v20;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v22;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v111;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v109;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v142;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v139;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB8;
    *(_QWORD *)(v0 + 656) = v137;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v134;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v132;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v130;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v128;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v126;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB8;
    *(_QWORD *)(v0 + 656) = v107;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v27;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v105;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v103;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v113;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v123;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v121;
    sub_1006948A8(v85, v79, v81, v83);
    v34 = *(_QWORD *)(v0 + 1616);
    v35 = *(_QWORD *)(v0 + 1608);
    v36 = *(_QWORD *)(v0 + 1600);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v101, v99, "Keys to upload: %{public}s,\nfailed to add type: %{public}s,\nfor share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s\nerror: %{public}s.", v96, 0x48u);
    swift_arrayDestroy(v76, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    sub_100694894((uint64_t)v96);

    swift_errorRelease(v144);
    v37 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v37(v34, v36);
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 1616);
    v39 = *(_QWORD *)(v0 + 1608);
    v40 = *(_QWORD *)(v0 + 1600);
    swift_errorRelease(v144);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v37 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v37(v38, v40);
  }
  v41 = *(_QWORD *)(v0 + 1824);
  v42 = *(_QWORD *)(v0 + 1816);
  *(_QWORD *)(v0 + 1808) = v37;
  *(_QWORD *)(v0 + 1800) = v37;
  *(_QWORD *)(v0 + 1792) = 0;
  if (v41)
  {
    v43 = __clz(__rbit64(v41));
    v44 = (v41 - 1) & v41;
    v45 = v43 | (v42 << 6);
    v46 = *(_QWORD *)(v0 + 1784);
    goto LABEL_17;
  }
  if (__OFADD__(v42++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  v48 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
  v46 = *(_QWORD *)(v0 + 1784);
  if (v42 < v48)
  {
    v49 = v46 + 56;
    v50 = *(_QWORD *)(v46 + 56 + 8 * v42);
    if (v50)
    {
LABEL_16:
      v44 = (v50 - 1) & v50;
      v45 = __clz(__rbit64(v50)) + (v42 << 6);
LABEL_17:
      *(_QWORD *)(v0 + 1824) = v44;
      *(_QWORD *)(v0 + 1816) = v42;
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v46 + 48) + v45);
      *(_BYTE *)(v0 + 2037) = v52;
      __asm { BR              X8 }
    }
    v51 = v42 + 1;
    if (v42 + 1 < v48)
    {
      v50 = *(_QWORD *)(v49 + 8 * v51);
      if (v50)
        goto LABEL_15;
      v51 = v42 + 2;
      if (v42 + 2 >= v48)
        goto LABEL_22;
      v50 = *(_QWORD *)(v49 + 8 * v51);
      if (v50)
      {
LABEL_15:
        v42 = v51;
        goto LABEL_16;
      }
      v51 = v42 + 3;
      if (v42 + 3 < v48)
      {
        v50 = *(_QWORD *)(v49 + 8 * v51);
        if (v50)
          goto LABEL_15;
        while (1)
        {
          v42 = v51 + 1;
          if (__OFADD__(v51, 1))
            break;
          if (v42 >= v48)
            goto LABEL_22;
          v50 = *(_QWORD *)(v49 + 8 * v42);
          ++v51;
          if (v50)
            goto LABEL_16;
        }
LABEL_24:
        __break(1u);
        JUMPOUT(0x10094A624);
      }
    }
  }
LABEL_22:
  v53 = *(_QWORD *)(v0 + 1704);
  v54 = *(_QWORD *)(v0 + 1696);
  v55 = *(_QWORD *)(v0 + 1688);
  v61 = *(_QWORD *)(v0 + 1680);
  v62 = *(_QWORD *)(v0 + 1672);
  v63 = *(_QWORD *)(v0 + 1664);
  v64 = *(_QWORD *)(v0 + 1656);
  v65 = *(_QWORD *)(v0 + 1648);
  v66 = *(_QWORD *)(v0 + 1640);
  v67 = *(_QWORD *)(v0 + 1632);
  v68 = *(_QWORD *)(v0 + 1624);
  v69 = *(_QWORD *)(v0 + 1616);
  v70 = *(_QWORD *)(v0 + 1592);
  v56 = *(_QWORD *)(v0 + 1584);
  v57 = *(_QWORD *)(v0 + 1552);
  v58 = *(_QWORD *)(v0 + 1544);
  v59 = *(_QWORD *)(v0 + 1512);
  v71 = *(_QWORD *)(v0 + 1520);
  v72 = *(_QWORD *)(v0 + 1504);
  v73 = *(_QWORD *)(v0 + 1496);
  v74 = *(_QWORD *)(v0 + 1488);
  v75 = *(_QWORD *)(v0 + 1480);
  v77 = *(_QWORD *)(v0 + 1472);
  v78 = *(_QWORD *)(v0 + 1448);
  v80 = *(_QWORD *)(v0 + 1440);
  v82 = *(_QWORD *)(v0 + 1432);
  v84 = *(_QWORD *)(v0 + 1424);
  v86 = *(_QWORD *)(v0 + 1416);
  v60 = *(_QWORD *)(v0 + 1392);
  v87 = *(_QWORD *)(v0 + 1384);
  v88 = *(_QWORD *)(v0 + 1376);
  v89 = *(_QWORD *)(v0 + 1368);
  v90 = *(_QWORD *)(v0 + 1360);
  v91 = *(_QWORD *)(v0 + 1352);
  v92 = *(_QWORD *)(v0 + 1344);
  v93 = *(_QWORD *)(v0 + 1336);
  v94 = *(_QWORD *)(v0 + 1328);
  v97 = *(_QWORD *)(v0 + 1320);
  v98 = *(_QWORD *)(v0 + 1312);
  v100 = *(_QWORD *)(v0 + 1304);
  v102 = *(_QWORD *)(v0 + 1296);
  v104 = *(_QWORD *)(v0 + 1288);
  v106 = *(_QWORD *)(v0 + 1264);
  v108 = *(_QWORD *)(v0 + 1256);
  v110 = *(_QWORD *)(v0 + 1248);
  v112 = *(_QWORD *)(v0 + 1240);
  v114 = *(_QWORD *)(v0 + 1232);
  v116 = *(_QWORD *)(v0 + 1224);
  v118 = *(_QWORD *)(v0 + 1216);
  v119 = *(_QWORD *)(v0 + 1208);
  v122 = *(_QWORD *)(v0 + 1200);
  v124 = *(_QWORD *)(v0 + 1192);
  v125 = *(_QWORD *)(v0 + 1184);
  v127 = *(_QWORD *)(v0 + 1152);
  v129 = *(_QWORD *)(v0 + 1144);
  v131 = *(_QWORD *)(v0 + 1136);
  v133 = *(_QWORD *)(v0 + 1128);
  v135 = *(_QWORD *)(v0 + 1120);
  v138 = *(_QWORD *)(v0 + 1112);
  v140 = *(_QWORD *)(v0 + 1104);
  v143 = *(_QWORD *)(v0 + 1096);
  v145 = *(_QWORD *)(v0 + 1072);
  sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
  sub_1000D9530((uint64_t *)(v0 + 448));
  swift_release();
  sub_1000126B0(v56, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_1000126B0(v58, type metadata accessor for OwnedBeaconRecord);
  swift_weakDestroy(v0 + 824);
  sub_100004048(v60, &qword_1011063B8);
  sub_1000126B0(v59, type metadata accessor for KeyDropInterface.KeyAlignment);
  sub_1000126B0(v57, type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v71);
  swift_task_dealloc(v59);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v86);
  swift_task_dealloc(v60);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v127);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  swift_task_dealloc(v133);
  swift_task_dealloc(v135);
  swift_task_dealloc(v138);
  swift_task_dealloc(v140);
  swift_task_dealloc(v143);
  swift_task_dealloc(v145);
  __asm { BR              X1 }
}

void sub_10094A65C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (**v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v85 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  v81 = v0 + 984;
  v83 = v0 + 952;
  v79 = v0 + 1016;
  sub_1000126B0(*(_QWORD *)(v0 + 1480), type metadata accessor for KeyDropInterface.KeyAlignment);
  v144 = *(_QWORD *)(v0 + 1968);
  v136 = *(_BYTE *)(v0 + 2037);
  v95 = *(_QWORD *)(v0 + 1720);
  v1 = *(unsigned __int8 *)(v0 + 2024);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
  v3 = *(_QWORD *)(v0 + 1616);
  v4 = *(_QWORD *)(v0 + 1600);
  v5 = *(_QWORD *)(v0 + 1592);
  v6 = *(_QWORD *)(v0 + 1056);
  v7 = (v1 + 16) & ~v1;
  v8 = *(_QWORD *)(v0 + 1576) + v7;
  v9 = v1 | 7;
  v10 = sub_100906BC0();
  v2(v3, v10, v4);
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v11 = swift_allocObject(&unk_10109C3B8, v8, v9);
  sub_1000126EC(v5, v11 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v12 = swift_allocObject(&unk_10109C3E0, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100960968;
  *(_QWORD *)(v12 + 24) = v11;
  v141 = swift_allocObject(&unk_10109C408, 17, 7);
  *(_BYTE *)(v141 + 16) = v136;
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v13 = swift_allocObject(&unk_10109C430, v8, v9);
  sub_1000126EC(v5, v13 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v14 = swift_allocObject(&unk_10109C458, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100960A74;
  *(_QWORD *)(v14 + 24) = v13;
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v15 = swift_allocObject(&unk_10109C480, v8, v9);
  sub_1000126EC(v5, v15 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v16 = swift_allocObject(&unk_10109C4A8, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100960A7C;
  *(_QWORD *)(v16 + 24) = v15;
  v120 = swift_allocObject(&unk_10109C4D0, 24, 7);
  *(_QWORD *)(v120 + 16) = v144;
  v17 = swift_errorRetain(v144);
  v101 = Logger.logObject.getter(v17);
  v99 = static os_log_type_t.error.getter(v101);
  v115 = swift_allocObject(&unk_10109C4F8, 17, 7);
  *(_BYTE *)(v115 + 16) = 34;
  v117 = swift_allocObject(&unk_10109C520, 17, 7);
  *(_BYTE *)(v117 + 16) = 8;
  v18 = swift_allocObject(&unk_10109C548, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100963204;
  *(_QWORD *)(v18 + 24) = v12;
  v19 = swift_allocObject(&unk_10109C570, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005CBA4;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = v19;
  v21 = swift_allocObject(&unk_10109C598, 17, 7);
  *(_BYTE *)(v21 + 16) = 34;
  v22 = v21;
  v111 = swift_allocObject(&unk_10109C5C0, 17, 7);
  *(_BYTE *)(v111 + 16) = 8;
  v23 = swift_allocObject(&unk_10109C5E8, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_100960B78;
  *(_QWORD *)(v23 + 24) = v141;
  v109 = swift_allocObject(&unk_10109C610, 32, 7);
  *(_QWORD *)(v109 + 16) = sub_10005CBA4;
  *(_QWORD *)(v109 + 24) = v23;
  v142 = swift_allocObject(&unk_10109C638, 17, 7);
  *(_BYTE *)(v142 + 16) = 112;
  v139 = swift_allocObject(&unk_10109C660, 17, 7);
  *(_BYTE *)(v139 + 16) = 8;
  v24 = swift_allocObject(&unk_10109C688, 24, 7);
  *(_QWORD *)(v24 + 16) = 1752392040;
  v137 = swift_allocObject(&unk_10109C6B0, 32, 7);
  *(_QWORD *)(v137 + 16) = sub_10005CBC0;
  *(_QWORD *)(v137 + 24) = v24;
  v134 = swift_allocObject(&unk_10109C6D8, 17, 7);
  *(_BYTE *)(v134 + 16) = 33;
  v132 = swift_allocObject(&unk_10109C700, 17, 7);
  *(_BYTE *)(v132 + 16) = 8;
  v25 = swift_allocObject(&unk_10109C728, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005CBAC;
  *(_QWORD *)(v25 + 24) = v14;
  v130 = swift_allocObject(&unk_10109C750, 32, 7);
  *(_QWORD *)(v130 + 16) = sub_10005CBA4;
  *(_QWORD *)(v130 + 24) = v25;
  v128 = swift_allocObject(&unk_10109C778, 17, 7);
  *(_BYTE *)(v128 + 16) = 112;
  v126 = swift_allocObject(&unk_10109C7A0, 17, 7);
  *(_BYTE *)(v126 + 16) = 8;
  v26 = swift_allocObject(&unk_10109C7C8, 24, 7);
  *(_QWORD *)(v26 + 16) = 1752392040;
  v107 = swift_allocObject(&unk_10109C7F0, 32, 7);
  *(_QWORD *)(v107 + 16) = sub_10005CBC0;
  *(_QWORD *)(v107 + 24) = v26;
  v27 = swift_allocObject(&unk_10109C818, 17, 7);
  *(_BYTE *)(v27 + 16) = 33;
  v105 = swift_allocObject(&unk_10109C840, 17, 7);
  *(_BYTE *)(v105 + 16) = 8;
  v28 = swift_allocObject(&unk_10109C868, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10005CBAC;
  *(_QWORD *)(v28 + 24) = v16;
  v103 = swift_allocObject(&unk_10109C890, 32, 7);
  *(_QWORD *)(v103 + 16) = sub_10005CBA4;
  *(_QWORD *)(v103 + 24) = v28;
  v113 = swift_allocObject(&unk_10109C8B8, 17, 7);
  *(_BYTE *)(v113 + 16) = 34;
  v123 = swift_allocObject(&unk_10109C8E0, 17, 7);
  *(_BYTE *)(v123 + 16) = 8;
  v29 = swift_allocObject(&unk_10109C908, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_100960C64;
  *(_QWORD *)(v29 + 24) = v120;
  v121 = swift_allocObject(&unk_10109C930, 32, 7);
  *(_QWORD *)(v121 + 16) = sub_10005CBA4;
  *(_QWORD *)(v121 + 24) = v29;
  v30 = swift_allocObject(v95, 368, 7);
  sub_100882D28(v30, 21);
  *v31 = sub_10005CBC4;
  v31[1] = v115;
  v31[2] = sub_10005CBC4;
  v31[3] = v117;
  v31[4] = sub_10005CBB4;
  v31[5] = v20;
  v31[6] = sub_10005CBC4;
  v31[7] = v22;
  v31[8] = sub_10005CBC4;
  v31[9] = v111;
  v31[10] = sub_10005CBB4;
  v31[11] = v109;
  v31[12] = sub_10005CBC4;
  v31[13] = v142;
  v31[14] = sub_10005CBC4;
  v31[15] = v139;
  v31[16] = sub_10005CBB8;
  v31[17] = v137;
  v31[18] = sub_10005CBC4;
  v31[19] = v134;
  v31[20] = sub_10005CBC4;
  v31[21] = v132;
  v31[22] = sub_10005CBB4;
  v31[23] = v130;
  v31[24] = sub_10005CBC4;
  v31[25] = v128;
  v31[26] = sub_10005CBC4;
  v31[27] = v126;
  v31[28] = sub_10005CBB8;
  v31[29] = v107;
  v31[30] = sub_10005CBC4;
  v31[31] = v27;
  v31[32] = sub_10005CBC4;
  v31[33] = v105;
  v31[34] = sub_10005CBB4;
  v31[35] = v103;
  v31[36] = sub_10005CBC4;
  v31[37] = v113;
  v31[38] = sub_10005CBC4;
  v31[39] = v123;
  v31[40] = sub_10005CBB4;
  v31[41] = v121;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v101, v99))
  {
    v32 = (uint8_t *)sub_1006948A0(72);
    v33 = swift_slowAlloc(160, -1);
    *(_QWORD *)(v0 + 984) = 0;
    v76 = v33;
    *(_QWORD *)(v0 + 952) = v33;
    v96 = v32;
    *(_WORD *)v32 = 1795;
    *(_QWORD *)(v0 + 1016) = v32 + 2;
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v115;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v117;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v20;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v22;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v111;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v109;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v142;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v139;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB8;
    *(_QWORD *)(v0 + 656) = v137;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v134;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v132;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v130;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v128;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v126;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB8;
    *(_QWORD *)(v0 + 656) = v107;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v27;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v105;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v103;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v113;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v123;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v121;
    sub_1006948A8(v85, v79, v81, v83);
    v34 = *(_QWORD *)(v0 + 1616);
    v35 = *(_QWORD *)(v0 + 1608);
    v36 = *(_QWORD *)(v0 + 1600);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v101, v99, "Keys to upload: %{public}s,\nfailed to add type: %{public}s,\nfor share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s\nerror: %{public}s.", v96, 0x48u);
    swift_arrayDestroy(v76, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    sub_100694894((uint64_t)v96);

    swift_errorRelease(v144);
    v37 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v37(v34, v36);
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 1616);
    v39 = *(_QWORD *)(v0 + 1608);
    v40 = *(_QWORD *)(v0 + 1600);
    swift_errorRelease(v144);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v37 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v37(v38, v40);
  }
  v41 = *(_QWORD *)(v0 + 1824);
  v42 = *(_QWORD *)(v0 + 1816);
  *(_QWORD *)(v0 + 1808) = v37;
  *(_QWORD *)(v0 + 1800) = v37;
  *(_QWORD *)(v0 + 1792) = 0;
  if (v41)
  {
    v43 = __clz(__rbit64(v41));
    v44 = (v41 - 1) & v41;
    v45 = v43 | (v42 << 6);
    v46 = *(_QWORD *)(v0 + 1784);
    goto LABEL_17;
  }
  if (__OFADD__(v42++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  v48 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
  v46 = *(_QWORD *)(v0 + 1784);
  if (v42 < v48)
  {
    v49 = v46 + 56;
    v50 = *(_QWORD *)(v46 + 56 + 8 * v42);
    if (v50)
    {
LABEL_16:
      v44 = (v50 - 1) & v50;
      v45 = __clz(__rbit64(v50)) + (v42 << 6);
LABEL_17:
      *(_QWORD *)(v0 + 1824) = v44;
      *(_QWORD *)(v0 + 1816) = v42;
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v46 + 48) + v45);
      *(_BYTE *)(v0 + 2037) = v52;
      __asm { BR              X8 }
    }
    v51 = v42 + 1;
    if (v42 + 1 < v48)
    {
      v50 = *(_QWORD *)(v49 + 8 * v51);
      if (v50)
        goto LABEL_15;
      v51 = v42 + 2;
      if (v42 + 2 >= v48)
        goto LABEL_22;
      v50 = *(_QWORD *)(v49 + 8 * v51);
      if (v50)
      {
LABEL_15:
        v42 = v51;
        goto LABEL_16;
      }
      v51 = v42 + 3;
      if (v42 + 3 < v48)
      {
        v50 = *(_QWORD *)(v49 + 8 * v51);
        if (v50)
          goto LABEL_15;
        while (1)
        {
          v42 = v51 + 1;
          if (__OFADD__(v51, 1))
            break;
          if (v42 >= v48)
            goto LABEL_22;
          v50 = *(_QWORD *)(v49 + 8 * v42);
          ++v51;
          if (v50)
            goto LABEL_16;
        }
LABEL_24:
        __break(1u);
        JUMPOUT(0x10094C6D0);
      }
    }
  }
LABEL_22:
  v53 = *(_QWORD *)(v0 + 1704);
  v54 = *(_QWORD *)(v0 + 1696);
  v55 = *(_QWORD *)(v0 + 1688);
  v61 = *(_QWORD *)(v0 + 1680);
  v62 = *(_QWORD *)(v0 + 1672);
  v63 = *(_QWORD *)(v0 + 1664);
  v64 = *(_QWORD *)(v0 + 1656);
  v65 = *(_QWORD *)(v0 + 1648);
  v66 = *(_QWORD *)(v0 + 1640);
  v67 = *(_QWORD *)(v0 + 1632);
  v68 = *(_QWORD *)(v0 + 1624);
  v69 = *(_QWORD *)(v0 + 1616);
  v70 = *(_QWORD *)(v0 + 1592);
  v56 = *(_QWORD *)(v0 + 1584);
  v57 = *(_QWORD *)(v0 + 1552);
  v58 = *(_QWORD *)(v0 + 1544);
  v59 = *(_QWORD *)(v0 + 1512);
  v71 = *(_QWORD *)(v0 + 1520);
  v72 = *(_QWORD *)(v0 + 1504);
  v73 = *(_QWORD *)(v0 + 1496);
  v74 = *(_QWORD *)(v0 + 1488);
  v75 = *(_QWORD *)(v0 + 1480);
  v77 = *(_QWORD *)(v0 + 1472);
  v78 = *(_QWORD *)(v0 + 1448);
  v80 = *(_QWORD *)(v0 + 1440);
  v82 = *(_QWORD *)(v0 + 1432);
  v84 = *(_QWORD *)(v0 + 1424);
  v86 = *(_QWORD *)(v0 + 1416);
  v60 = *(_QWORD *)(v0 + 1392);
  v87 = *(_QWORD *)(v0 + 1384);
  v88 = *(_QWORD *)(v0 + 1376);
  v89 = *(_QWORD *)(v0 + 1368);
  v90 = *(_QWORD *)(v0 + 1360);
  v91 = *(_QWORD *)(v0 + 1352);
  v92 = *(_QWORD *)(v0 + 1344);
  v93 = *(_QWORD *)(v0 + 1336);
  v94 = *(_QWORD *)(v0 + 1328);
  v97 = *(_QWORD *)(v0 + 1320);
  v98 = *(_QWORD *)(v0 + 1312);
  v100 = *(_QWORD *)(v0 + 1304);
  v102 = *(_QWORD *)(v0 + 1296);
  v104 = *(_QWORD *)(v0 + 1288);
  v106 = *(_QWORD *)(v0 + 1264);
  v108 = *(_QWORD *)(v0 + 1256);
  v110 = *(_QWORD *)(v0 + 1248);
  v112 = *(_QWORD *)(v0 + 1240);
  v114 = *(_QWORD *)(v0 + 1232);
  v116 = *(_QWORD *)(v0 + 1224);
  v118 = *(_QWORD *)(v0 + 1216);
  v119 = *(_QWORD *)(v0 + 1208);
  v122 = *(_QWORD *)(v0 + 1200);
  v124 = *(_QWORD *)(v0 + 1192);
  v125 = *(_QWORD *)(v0 + 1184);
  v127 = *(_QWORD *)(v0 + 1152);
  v129 = *(_QWORD *)(v0 + 1144);
  v131 = *(_QWORD *)(v0 + 1136);
  v133 = *(_QWORD *)(v0 + 1128);
  v135 = *(_QWORD *)(v0 + 1120);
  v138 = *(_QWORD *)(v0 + 1112);
  v140 = *(_QWORD *)(v0 + 1104);
  v143 = *(_QWORD *)(v0 + 1096);
  v145 = *(_QWORD *)(v0 + 1072);
  sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
  sub_1000D9530((uint64_t *)(v0 + 448));
  swift_release();
  sub_1000126B0(v56, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_1000126B0(v58, type metadata accessor for OwnedBeaconRecord);
  swift_weakDestroy(v0 + 824);
  sub_100004048(v60, &qword_1011063B8);
  sub_1000126B0(v59, type metadata accessor for KeyDropInterface.KeyAlignment);
  sub_1000126B0(v57, type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v71);
  swift_task_dealloc(v59);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v86);
  swift_task_dealloc(v60);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v127);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  swift_task_dealloc(v133);
  swift_task_dealloc(v135);
  swift_task_dealloc(v138);
  swift_task_dealloc(v140);
  swift_task_dealloc(v143);
  swift_task_dealloc(v145);
  __asm { BR              X1 }
}

void sub_10094C708()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (**v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v85 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  v81 = v0 + 984;
  v83 = v0 + 952;
  v79 = v0 + 1016;
  sub_1000126B0(*(_QWORD *)(v0 + 1472), type metadata accessor for KeyDropInterface.KeyAlignment);
  v144 = *(_QWORD *)(v0 + 2000);
  v136 = *(_BYTE *)(v0 + 2037);
  v95 = *(_QWORD *)(v0 + 1720);
  v1 = *(unsigned __int8 *)(v0 + 2024);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
  v3 = *(_QWORD *)(v0 + 1616);
  v4 = *(_QWORD *)(v0 + 1600);
  v5 = *(_QWORD *)(v0 + 1592);
  v6 = *(_QWORD *)(v0 + 1056);
  v7 = (v1 + 16) & ~v1;
  v8 = *(_QWORD *)(v0 + 1576) + v7;
  v9 = v1 | 7;
  v10 = sub_100906BC0();
  v2(v3, v10, v4);
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v11 = swift_allocObject(&unk_10109C3B8, v8, v9);
  sub_1000126EC(v5, v11 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v12 = swift_allocObject(&unk_10109C3E0, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100960968;
  *(_QWORD *)(v12 + 24) = v11;
  v141 = swift_allocObject(&unk_10109C408, 17, 7);
  *(_BYTE *)(v141 + 16) = v136;
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v13 = swift_allocObject(&unk_10109C430, v8, v9);
  sub_1000126EC(v5, v13 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v14 = swift_allocObject(&unk_10109C458, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100960A74;
  *(_QWORD *)(v14 + 24) = v13;
  sub_10005972C(v6, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  v15 = swift_allocObject(&unk_10109C480, v8, v9);
  sub_1000126EC(v5, v15 + v7, type metadata accessor for SharingCircleKeyManager.Instruction);
  v16 = swift_allocObject(&unk_10109C4A8, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100960A7C;
  *(_QWORD *)(v16 + 24) = v15;
  v120 = swift_allocObject(&unk_10109C4D0, 24, 7);
  *(_QWORD *)(v120 + 16) = v144;
  v17 = swift_errorRetain(v144);
  v101 = Logger.logObject.getter(v17);
  v99 = static os_log_type_t.error.getter(v101);
  v115 = swift_allocObject(&unk_10109C4F8, 17, 7);
  *(_BYTE *)(v115 + 16) = 34;
  v117 = swift_allocObject(&unk_10109C520, 17, 7);
  *(_BYTE *)(v117 + 16) = 8;
  v18 = swift_allocObject(&unk_10109C548, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100963204;
  *(_QWORD *)(v18 + 24) = v12;
  v19 = swift_allocObject(&unk_10109C570, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005CBA4;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = v19;
  v21 = swift_allocObject(&unk_10109C598, 17, 7);
  *(_BYTE *)(v21 + 16) = 34;
  v22 = v21;
  v111 = swift_allocObject(&unk_10109C5C0, 17, 7);
  *(_BYTE *)(v111 + 16) = 8;
  v23 = swift_allocObject(&unk_10109C5E8, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_100960B78;
  *(_QWORD *)(v23 + 24) = v141;
  v109 = swift_allocObject(&unk_10109C610, 32, 7);
  *(_QWORD *)(v109 + 16) = sub_10005CBA4;
  *(_QWORD *)(v109 + 24) = v23;
  v142 = swift_allocObject(&unk_10109C638, 17, 7);
  *(_BYTE *)(v142 + 16) = 112;
  v139 = swift_allocObject(&unk_10109C660, 17, 7);
  *(_BYTE *)(v139 + 16) = 8;
  v24 = swift_allocObject(&unk_10109C688, 24, 7);
  *(_QWORD *)(v24 + 16) = 1752392040;
  v137 = swift_allocObject(&unk_10109C6B0, 32, 7);
  *(_QWORD *)(v137 + 16) = sub_10005CBC0;
  *(_QWORD *)(v137 + 24) = v24;
  v134 = swift_allocObject(&unk_10109C6D8, 17, 7);
  *(_BYTE *)(v134 + 16) = 33;
  v132 = swift_allocObject(&unk_10109C700, 17, 7);
  *(_BYTE *)(v132 + 16) = 8;
  v25 = swift_allocObject(&unk_10109C728, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005CBAC;
  *(_QWORD *)(v25 + 24) = v14;
  v130 = swift_allocObject(&unk_10109C750, 32, 7);
  *(_QWORD *)(v130 + 16) = sub_10005CBA4;
  *(_QWORD *)(v130 + 24) = v25;
  v128 = swift_allocObject(&unk_10109C778, 17, 7);
  *(_BYTE *)(v128 + 16) = 112;
  v126 = swift_allocObject(&unk_10109C7A0, 17, 7);
  *(_BYTE *)(v126 + 16) = 8;
  v26 = swift_allocObject(&unk_10109C7C8, 24, 7);
  *(_QWORD *)(v26 + 16) = 1752392040;
  v107 = swift_allocObject(&unk_10109C7F0, 32, 7);
  *(_QWORD *)(v107 + 16) = sub_10005CBC0;
  *(_QWORD *)(v107 + 24) = v26;
  v27 = swift_allocObject(&unk_10109C818, 17, 7);
  *(_BYTE *)(v27 + 16) = 33;
  v105 = swift_allocObject(&unk_10109C840, 17, 7);
  *(_BYTE *)(v105 + 16) = 8;
  v28 = swift_allocObject(&unk_10109C868, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10005CBAC;
  *(_QWORD *)(v28 + 24) = v16;
  v103 = swift_allocObject(&unk_10109C890, 32, 7);
  *(_QWORD *)(v103 + 16) = sub_10005CBA4;
  *(_QWORD *)(v103 + 24) = v28;
  v113 = swift_allocObject(&unk_10109C8B8, 17, 7);
  *(_BYTE *)(v113 + 16) = 34;
  v123 = swift_allocObject(&unk_10109C8E0, 17, 7);
  *(_BYTE *)(v123 + 16) = 8;
  v29 = swift_allocObject(&unk_10109C908, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_100960C64;
  *(_QWORD *)(v29 + 24) = v120;
  v121 = swift_allocObject(&unk_10109C930, 32, 7);
  *(_QWORD *)(v121 + 16) = sub_10005CBA4;
  *(_QWORD *)(v121 + 24) = v29;
  v30 = swift_allocObject(v95, 368, 7);
  sub_100882D28(v30, 21);
  *v31 = sub_10005CBC4;
  v31[1] = v115;
  v31[2] = sub_10005CBC4;
  v31[3] = v117;
  v31[4] = sub_10005CBB4;
  v31[5] = v20;
  v31[6] = sub_10005CBC4;
  v31[7] = v22;
  v31[8] = sub_10005CBC4;
  v31[9] = v111;
  v31[10] = sub_10005CBB4;
  v31[11] = v109;
  v31[12] = sub_10005CBC4;
  v31[13] = v142;
  v31[14] = sub_10005CBC4;
  v31[15] = v139;
  v31[16] = sub_10005CBB8;
  v31[17] = v137;
  v31[18] = sub_10005CBC4;
  v31[19] = v134;
  v31[20] = sub_10005CBC4;
  v31[21] = v132;
  v31[22] = sub_10005CBB4;
  v31[23] = v130;
  v31[24] = sub_10005CBC4;
  v31[25] = v128;
  v31[26] = sub_10005CBC4;
  v31[27] = v126;
  v31[28] = sub_10005CBB8;
  v31[29] = v107;
  v31[30] = sub_10005CBC4;
  v31[31] = v27;
  v31[32] = sub_10005CBC4;
  v31[33] = v105;
  v31[34] = sub_10005CBB4;
  v31[35] = v103;
  v31[36] = sub_10005CBC4;
  v31[37] = v113;
  v31[38] = sub_10005CBC4;
  v31[39] = v123;
  v31[40] = sub_10005CBB4;
  v31[41] = v121;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v101, v99))
  {
    v32 = (uint8_t *)sub_1006948A0(72);
    v33 = swift_slowAlloc(160, -1);
    *(_QWORD *)(v0 + 984) = 0;
    v76 = v33;
    *(_QWORD *)(v0 + 952) = v33;
    v96 = v32;
    *(_WORD *)v32 = 1795;
    *(_QWORD *)(v0 + 1016) = v32 + 2;
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v115;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v117;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v20;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v22;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v111;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v109;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v142;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v139;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB8;
    *(_QWORD *)(v0 + 656) = v137;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v134;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v132;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v130;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v128;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v126;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB8;
    *(_QWORD *)(v0 + 656) = v107;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v27;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v105;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v103;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v113;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBC4;
    *(_QWORD *)(v0 + 656) = v123;
    sub_1006948A8(v85, v79, v81, v83);
    swift_release();
    *(_QWORD *)(v0 + 648) = sub_10005CBB4;
    *(_QWORD *)(v0 + 656) = v121;
    sub_1006948A8(v85, v79, v81, v83);
    v34 = *(_QWORD *)(v0 + 1616);
    v35 = *(_QWORD *)(v0 + 1608);
    v36 = *(_QWORD *)(v0 + 1600);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v101, v99, "Keys to upload: %{public}s,\nfailed to add type: %{public}s,\nfor share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s\nerror: %{public}s.", v96, 0x48u);
    swift_arrayDestroy(v76, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    sub_100694894((uint64_t)v96);

    swift_errorRelease(v144);
    v37 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v37(v34, v36);
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 1616);
    v39 = *(_QWORD *)(v0 + 1608);
    v40 = *(_QWORD *)(v0 + 1600);
    swift_errorRelease(v144);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v37 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v37(v38, v40);
  }
  v41 = *(_QWORD *)(v0 + 1824);
  v42 = *(_QWORD *)(v0 + 1816);
  *(_QWORD *)(v0 + 1808) = v37;
  *(_QWORD *)(v0 + 1800) = v37;
  *(_QWORD *)(v0 + 1792) = 0;
  if (v41)
  {
    v43 = __clz(__rbit64(v41));
    v44 = (v41 - 1) & v41;
    v45 = v43 | (v42 << 6);
    v46 = *(_QWORD *)(v0 + 1784);
    goto LABEL_17;
  }
  if (__OFADD__(v42++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  v48 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
  v46 = *(_QWORD *)(v0 + 1784);
  if (v42 < v48)
  {
    v49 = v46 + 56;
    v50 = *(_QWORD *)(v46 + 56 + 8 * v42);
    if (v50)
    {
LABEL_16:
      v44 = (v50 - 1) & v50;
      v45 = __clz(__rbit64(v50)) + (v42 << 6);
LABEL_17:
      *(_QWORD *)(v0 + 1824) = v44;
      *(_QWORD *)(v0 + 1816) = v42;
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v46 + 48) + v45);
      *(_BYTE *)(v0 + 2037) = v52;
      __asm { BR              X8 }
    }
    v51 = v42 + 1;
    if (v42 + 1 < v48)
    {
      v50 = *(_QWORD *)(v49 + 8 * v51);
      if (v50)
        goto LABEL_15;
      v51 = v42 + 2;
      if (v42 + 2 >= v48)
        goto LABEL_22;
      v50 = *(_QWORD *)(v49 + 8 * v51);
      if (v50)
      {
LABEL_15:
        v42 = v51;
        goto LABEL_16;
      }
      v51 = v42 + 3;
      if (v42 + 3 < v48)
      {
        v50 = *(_QWORD *)(v49 + 8 * v51);
        if (v50)
          goto LABEL_15;
        while (1)
        {
          v42 = v51 + 1;
          if (__OFADD__(v51, 1))
            break;
          if (v42 >= v48)
            goto LABEL_22;
          v50 = *(_QWORD *)(v49 + 8 * v42);
          ++v51;
          if (v50)
            goto LABEL_16;
        }
LABEL_24:
        __break(1u);
        JUMPOUT(0x10094E77CLL);
      }
    }
  }
LABEL_22:
  v53 = *(_QWORD *)(v0 + 1704);
  v54 = *(_QWORD *)(v0 + 1696);
  v55 = *(_QWORD *)(v0 + 1688);
  v61 = *(_QWORD *)(v0 + 1680);
  v62 = *(_QWORD *)(v0 + 1672);
  v63 = *(_QWORD *)(v0 + 1664);
  v64 = *(_QWORD *)(v0 + 1656);
  v65 = *(_QWORD *)(v0 + 1648);
  v66 = *(_QWORD *)(v0 + 1640);
  v67 = *(_QWORD *)(v0 + 1632);
  v68 = *(_QWORD *)(v0 + 1624);
  v69 = *(_QWORD *)(v0 + 1616);
  v70 = *(_QWORD *)(v0 + 1592);
  v56 = *(_QWORD *)(v0 + 1584);
  v57 = *(_QWORD *)(v0 + 1552);
  v58 = *(_QWORD *)(v0 + 1544);
  v59 = *(_QWORD *)(v0 + 1512);
  v71 = *(_QWORD *)(v0 + 1520);
  v72 = *(_QWORD *)(v0 + 1504);
  v73 = *(_QWORD *)(v0 + 1496);
  v74 = *(_QWORD *)(v0 + 1488);
  v75 = *(_QWORD *)(v0 + 1480);
  v77 = *(_QWORD *)(v0 + 1472);
  v78 = *(_QWORD *)(v0 + 1448);
  v80 = *(_QWORD *)(v0 + 1440);
  v82 = *(_QWORD *)(v0 + 1432);
  v84 = *(_QWORD *)(v0 + 1424);
  v86 = *(_QWORD *)(v0 + 1416);
  v60 = *(_QWORD *)(v0 + 1392);
  v87 = *(_QWORD *)(v0 + 1384);
  v88 = *(_QWORD *)(v0 + 1376);
  v89 = *(_QWORD *)(v0 + 1368);
  v90 = *(_QWORD *)(v0 + 1360);
  v91 = *(_QWORD *)(v0 + 1352);
  v92 = *(_QWORD *)(v0 + 1344);
  v93 = *(_QWORD *)(v0 + 1336);
  v94 = *(_QWORD *)(v0 + 1328);
  v97 = *(_QWORD *)(v0 + 1320);
  v98 = *(_QWORD *)(v0 + 1312);
  v100 = *(_QWORD *)(v0 + 1304);
  v102 = *(_QWORD *)(v0 + 1296);
  v104 = *(_QWORD *)(v0 + 1288);
  v106 = *(_QWORD *)(v0 + 1264);
  v108 = *(_QWORD *)(v0 + 1256);
  v110 = *(_QWORD *)(v0 + 1248);
  v112 = *(_QWORD *)(v0 + 1240);
  v114 = *(_QWORD *)(v0 + 1232);
  v116 = *(_QWORD *)(v0 + 1224);
  v118 = *(_QWORD *)(v0 + 1216);
  v119 = *(_QWORD *)(v0 + 1208);
  v122 = *(_QWORD *)(v0 + 1200);
  v124 = *(_QWORD *)(v0 + 1192);
  v125 = *(_QWORD *)(v0 + 1184);
  v127 = *(_QWORD *)(v0 + 1152);
  v129 = *(_QWORD *)(v0 + 1144);
  v131 = *(_QWORD *)(v0 + 1136);
  v133 = *(_QWORD *)(v0 + 1128);
  v135 = *(_QWORD *)(v0 + 1120);
  v138 = *(_QWORD *)(v0 + 1112);
  v140 = *(_QWORD *)(v0 + 1104);
  v143 = *(_QWORD *)(v0 + 1096);
  v145 = *(_QWORD *)(v0 + 1072);
  sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
  sub_1000D9530((uint64_t *)(v0 + 448));
  swift_release();
  sub_1000126B0(v56, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_1000126B0(v58, type metadata accessor for OwnedBeaconRecord);
  swift_weakDestroy(v0 + 824);
  sub_100004048(v60, &qword_1011063B8);
  sub_1000126B0(v59, type metadata accessor for KeyDropInterface.KeyAlignment);
  sub_1000126B0(v57, type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v71);
  swift_task_dealloc(v59);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  swift_task_dealloc(v86);
  swift_task_dealloc(v60);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v127);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  swift_task_dealloc(v133);
  swift_task_dealloc(v135);
  swift_task_dealloc(v138);
  swift_task_dealloc(v140);
  swift_task_dealloc(v143);
  swift_task_dealloc(v145);
  __asm { BR              X1 }
}

uint64_t sub_10094E7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[16] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[17] = v7;
  v4[18] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F7AE0);
  v4[19] = v8;
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for KeySyncRecord(0);
  v4[21] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[22] = v10;
  v4[23] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1011063B8);
  v4[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v4[25] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[26] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[27] = swift_task_alloc(v14);
  v4[28] = swift_task_alloc(v14);
  v15 = type metadata accessor for StableIdentifier(0);
  v4[29] = v15;
  v4[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10094E8EC, 0, 0);
}

uint64_t sub_10094E8EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 88);
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 248) = Strong;
  if (Strong)
  {
    v3 = Strong;
    v5 = *(_QWORD *)(v0 + 232);
    v4 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = (int *)type metadata accessor for OwnedBeaconRecord(0);
    *(_QWORD *)(v0 + 256) = v7;
    sub_10005972C(v6 + v7[6], v4, type metadata accessor for StableIdentifier);
    LODWORD(v5) = swift_getEnumCaseMultiPayload(v4, v5);
    sub_1000126B0(v4, type metadata accessor for StableIdentifier);
    if ((_DWORD)v5)
    {
      v8 = *(_QWORD *)(v3 + 120);
      *(_QWORD *)(v0 + 264) = v8;
      *(_DWORD *)(v0 + 288) = *(_DWORD *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) + 24);
      swift_retain();
      return swift_task_switch(sub_10094EB10, v8, 0);
    }
    v10 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    static Date.trustedNow.getter(v10);
    v16 = v15 + v7[5];
    v17 = v15 + v7[8];
    v18 = sub_10064F0F8(v16, v17, v10, 0);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v13, v17, v11);
    v19 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    *(_QWORD *)(v13 + *(int *)(v19 + 20)) = v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v13 + *(int *)(v19 + 24), v10, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v13, 0, 1, v19);
    swift_beginAccess(v14, v0 + 64, 1, 0);
    sub_100961380(v13, v14);
  }
  v20 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 224);
  v23 = *(_QWORD *)(v0 + 184);
  v22 = *(_QWORD *)(v0 + 192);
  v24 = *(_QWORD *)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10094EB10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 112) + *(int *)(v0 + 288), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109DF88, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 272) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 280) = v10;
  *v10 = v0;
  v10[1] = sub_10094EBF0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 160), sub_10007CAF0, v8, *(_QWORD *)(v0 + 152));
}

uint64_t sub_10094EBF0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_release();
  swift_release();
  return swift_task_switch(sub_10094EC58, 0, 0);
}

uint64_t sub_10094EC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 160), &qword_1010F7AE0);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 256);
    v5 = *(_QWORD *)(v0 + 216);
    v6 = *(_QWORD *)(v0 + 224);
    v8 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 104);
    sub_1000126EC(*(_QWORD *)(v0 + 160), v10, type metadata accessor for KeySyncRecord);
    v13 = v12 + *(int *)(v4 + 32);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v14(v6, v13, v8);
    v15 = *(_QWORD *)(v10 + *(int *)(v11 + 20));
    v14(v5, v10 + *(int *)(v11 + 28), v8);
    sub_1000126B0(v10, type metadata accessor for KeySyncRecord);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v16(v9, v6, v8);
    v17 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    *(_QWORD *)(v9 + *(int *)(v17 + 20)) = v15;
    v16(v9 + *(int *)(v17 + 24), v5, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
    swift_beginAccess(v25, v0 + 40, 1, 0);
    sub_100961380(v9, v25);
  }
  v18 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 160);
  v23 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10094EE14(uint64_t result, double a2)
{
  BOOL v2;

  if ((~*(_QWORD *)&a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a2 <= -1.0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a2 >= 1.84467441e19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v2 = __CFADD__((unint64_t)a2, result);
  result += (unint64_t)a2;
  if (v2)
LABEL_9:
    __break(1u);
  return result;
}

uint64_t sub_10094EE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5[20] = a4;
  v5[21] = v4;
  v5[18] = a2;
  v5[19] = a3;
  v5[17] = a1;
  v6 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v5[22] = v6;
  v5[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v5[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v5[25] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[26] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[27] = swift_task_alloc(v10);
  v5[28] = swift_task_alloc(v10);
  v11 = *(_QWORD *)(type metadata accessor for BookmarkMetaData(0) - 8);
  v5[29] = v11;
  v5[30] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_10110D4C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[31] = swift_task_alloc(v12);
  v5[32] = swift_task_alloc(v12);
  v5[33] = swift_task_alloc(v12);
  return swift_task_switch(sub_10094EF80, v4, 0);
}

uint64_t sub_10094EF80()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t **v4;

  v1 = v0[33];
  v2 = v0[25];
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[26] + 56);
  v0[34] = (uint64_t)v3;
  v3(v1, 1, 1, v2);
  v4 = (uint64_t **)swift_task_alloc(dword_10110D1EC);
  v0[35] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_10094EFF0;
  return sub_100952C5C(v0[18], 4, v0[19]);
}

uint64_t sub_10094EFF0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 280);
  v5 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(v3 + 288) = a1;
  *(_QWORD *)(v3 + 296) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10094F050, v5, 0);
}

uint64_t sub_10094F050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + *(int *)(*(_QWORD *)(v0 + 176) + 44));
  if (*(_QWORD *)(v1 + 16) && (v2 = sub_100518EE0(4), (v3 & 1) != 0))
  {
    v4 = *(_QWORD *)(v0 + 296);
    v5 = *(_QWORD *)(v0 + 240);
    sub_10005972C(*(_QWORD *)(v1 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 232) + 72) * v2, v5, type metadata accessor for BookmarkMetaData);
    v6 = *(_QWORD *)(v5 + 8);
    sub_1000126B0(v5, type metadata accessor for BookmarkMetaData);
    if (v6 >= v4)
    {
LABEL_4:
      if (qword_1010EA050 != -1)
        swift_once(&qword_1010EA050, sub_100906B40);
      v7 = *(_QWORD *)(v0 + 184);
      v8 = *(_QWORD *)(v0 + 144);
      v9 = type metadata accessor for Logger(0);
      sub_10001A9E8(v9, (uint64_t)qword_1011B7940);
      v10 = sub_10005972C(v8, v7, type metadata accessor for SharingCircleKeyManager.Instruction);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      v13 = os_log_type_enabled(v11, v12);
      v14 = *(_QWORD *)(v0 + 264);
      v15 = *(_QWORD *)(v0 + 184);
      if (v13)
      {
        v53 = *(_QWORD *)(v0 + 264);
        v16 = swift_slowAlloc(22, -1);
        v17 = swift_slowAlloc(32, -1);
        v55 = v17;
        *(_DWORD *)v16 = 141558275;
        *(_QWORD *)(v0 + 120) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v16 + 4, v16 + 12);
        *(_WORD *)(v16 + 12) = 2081;
        v18 = type metadata accessor for UUID(0);
        v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
        *(_QWORD *)(v0 + 128) = sub_100016940(v20, v21, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v16 + 14, v16 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v15, type metadata accessor for SharingCircleKeyManager.Instruction);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Wild bundle reached highWater mark. Not uploading wild bundle for %{private,mask.hash}s.", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);

        v22 = v53;
      }
      else
      {

        sub_1000126B0(v15, type metadata accessor for SharingCircleKeyManager.Instruction);
        v22 = v14;
      }
      sub_100004048(v22, &qword_10110D4C0);
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 272))(*(_QWORD *)(v0 + 136), 1, 1, *(_QWORD *)(v0 + 200));
      v43 = *(_QWORD *)(v0 + 256);
      v45 = *(_QWORD *)(v0 + 240);
      v44 = *(_QWORD *)(v0 + 248);
      v47 = *(_QWORD *)(v0 + 216);
      v46 = *(_QWORD *)(v0 + 224);
      v49 = *(_QWORD *)(v0 + 184);
      v48 = *(_QWORD *)(v0 + 192);
      swift_task_dealloc(*(_QWORD *)(v0 + 264));
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      v42 = *(uint64_t (**)(void))(v0 + 8);
      return v42();
    }
  }
  else if (!*(_QWORD *)(v0 + 296))
  {
    goto LABEL_4;
  }
  result = sub_100005CF0(*(_QWORD *)(v0 + 160) + 16, v0 + 72, &qword_1010ECB38);
  v25 = *(_QWORD *)(v0 + 288);
  v24 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 304) = v25;
  v26 = v24 - v25;
  if (v24 >= v25)
  {
    if ((uint64_t)(v24 - v25) >= 0)
      goto LABEL_13;
LABEL_23:
    __break(1u);
    return result;
  }
  if ((uint64_t)(v25 - v24) < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v26 = v24 - v25;
LABEL_13:
  *(_QWORD *)(v0 + 312) = v26;
  sub_100005CF0(v0 + 72, v0 + 56, &qword_1010ECB38);
  v27 = *(_QWORD *)(v0 + 64);
  if (v27 >> 60 == 15)
  {
    v28 = 8;
LABEL_17:
    v31 = *(_QWORD *)(v0 + 264);
    v32 = sub_1000D94EC();
    v33 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v32, 0, 0);
    *v34 = v28;
    swift_willThrow(v33);
    sub_100004048(v31, &qword_10110D4C0);
    v35 = *(_QWORD *)(v0 + 256);
    v37 = *(_QWORD *)(v0 + 240);
    v36 = *(_QWORD *)(v0 + 248);
    v39 = *(_QWORD *)(v0 + 216);
    v38 = *(_QWORD *)(v0 + 224);
    v41 = *(_QWORD *)(v0 + 184);
    v40 = *(_QWORD *)(v0 + 192);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    v42 = *(uint64_t (**)(void))(v0 + 8);
    return v42();
  }
  v29 = *(_QWORD *)(v0 + 56);
  sub_100005CF0(*(_QWORD *)(v0 + 160), v0 + 104, &qword_1010ECB38);
  sub_100005CF0(v0 + 104, v0 + 88, &qword_1010ECB38);
  v30 = *(_QWORD *)(v0 + 96);
  if (v30 >> 60 == 15)
  {
    v28 = 9;
    goto LABEL_17;
  }
  v50 = *(_QWORD *)(v0 + 152);
  v54 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 40) = type metadata accessor for OwnedBeaconRecord(0);
  *(_QWORD *)(v0 + 48) = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v51 = sub_100018F08((_QWORD *)(v0 + 16));
  sub_10005972C(v50, (uint64_t)v51, type metadata accessor for OwnedBeaconRecord);
  sub_10007D62C((_QWORD *)(v0 + 72));
  sub_10007D62C((_QWORD *)(v0 + 104));
  v52 = (_QWORD *)swift_task_alloc(dword_10110D20C);
  *(_QWORD *)(v0 + 320) = v52;
  *v52 = v0;
  v52[1] = sub_10094F590;
  return sub_1009561F4(*(_QWORD *)(v0 + 224), v0 + 16, v25, v29, v27, v54, v30);
}

uint64_t sub_10094F590()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 168);
    v5 = sub_10094FAA8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_10094F604;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10094F604()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  unint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void (*v52)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;

  v1 = (uint64_t)(v0 + 9);
  v2 = v0 + 13;
  v3 = v0[32];
  v5 = v0[25];
  v4 = v0[26];
  sub_10000F9B8(v0[33], v3, &qword_10110D4C0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5);
  v7 = v0[33];
  v8 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v0[34];
  v9 = v0[32];
  if (v6 == 1)
  {
    v10 = v0[28];
    v11 = v0[25];
    sub_100004048(v0[33], &qword_10110D4C0);
    sub_1002B1E4C((uint64_t)(v0 + 13));
    sub_1002B1E4C((uint64_t)(v0 + 9));
    sub_100004048(v9, &qword_10110D4C0);
    sub_1000126EC(v10, v7, type metadata accessor for KeyDropInterface.KeyPackage);
    result = v8(v7, 0, 1, v11);
    if (v0[39])
      goto LABEL_3;
LABEL_8:
    sub_100005CF0(v0[33], v0[17], &qword_10110D4C0);
    v25 = v0[32];
    v27 = v0[30];
    v26 = v0[31];
    v29 = v0[27];
    v28 = v0[28];
    v31 = v0[23];
    v30 = v0[24];
    swift_task_dealloc(v0[33]);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  v17 = (_BYTE *)v0[31];
  v52 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v0[34];
  v18 = v0[27];
  v19 = v0[28];
  v20 = v0[24];
  v21 = v0[25];
  sub_1000126EC(v9, v18, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_10005972C(v18 + *(int *)(v21 + 20), v20, type metadata accessor for KeyDropInterface.KeyAlignment);
  v22 = *(int *)(v21 + 24);
  v23 = *(_QWORD *)(v18 + v22);
  v54 = *(_QWORD *)(v19 + v22);
  swift_bridgeObjectRetain_n(v54, 2);
  swift_bridgeObjectRetain_n(v23, 2);
  sub_10030248C(v23);
  sub_1002B1E4C((uint64_t)(v0 + 13));
  sub_1002B1E4C((uint64_t)(v0 + 9));
  swift_bridgeObjectRelease();
  v2 = v0 + 13;
  swift_bridgeObjectRelease();
  sub_1000126B0(v18, type metadata accessor for KeyDropInterface.KeyPackage);
  v24 = v19;
  v1 = (uint64_t)(v0 + 9);
  sub_1000126B0(v24, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_100004048(v7, &qword_10110D4C0);
  *v17 = 4;
  sub_1000126EC(v20, (uint64_t)&v17[*(int *)(v21 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
  *(_QWORD *)&v17[*(int *)(v21 + 24)] = v54;
  v52(v17, 0, 1, v21);
  result = sub_100005CF0((uint64_t)v17, v7, &qword_10110D4C0);
  if (!v0[39])
    goto LABEL_8;
LABEL_3:
  v13 = v0[38];
  v14 = v13 + 1;
  if (v13 == -1)
  {
    __break(1u);
    goto LABEL_18;
  }
  v0[38] = v14;
  v15 = v0[37];
  v16 = v15 - v14;
  if (v15 >= v14)
  {
    if ((uint64_t)(v15 - v14) >= 0)
      goto LABEL_10;
LABEL_19:
    __break(1u);
    return result;
  }
  if ((uint64_t)(v14 - v15) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v16 = v15 - v14;
LABEL_10:
  v0[39] = v16;
  sub_100005CF0(v1, (uint64_t)(v0 + 7), &qword_1010ECB38);
  v33 = v0[8];
  if (v33 >> 60 == 15)
  {
    v34 = 8;
LABEL_14:
    v37 = v0[33];
    v38 = sub_1000D94EC();
    v39 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v38, 0, 0);
    *v40 = v34;
    swift_willThrow(v39);
    sub_100004048(v37, &qword_10110D4C0);
    v41 = v0[32];
    v43 = v0[30];
    v42 = v0[31];
    v45 = v0[27];
    v44 = v0[28];
    v47 = v0[23];
    v46 = v0[24];
    swift_task_dealloc(v0[33]);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  v35 = v0[7];
  sub_100005CF0(v0[20], (uint64_t)v2, &qword_1010ECB38);
  sub_100005CF0((uint64_t)v2, (uint64_t)(v0 + 11), &qword_1010ECB38);
  v36 = v0[12];
  if (v36 >> 60 == 15)
  {
    v34 = 9;
    goto LABEL_14;
  }
  v48 = (_QWORD *)v1;
  v49 = v0[19];
  v53 = v0[11];
  v0[5] = type metadata accessor for OwnedBeaconRecord(0);
  v0[6] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v50 = sub_100018F08(v0 + 2);
  sub_10005972C(v49, (uint64_t)v50, type metadata accessor for OwnedBeaconRecord);
  sub_10007D62C(v48);
  sub_10007D62C(v2);
  v51 = (_QWORD *)swift_task_alloc(dword_10110D20C);
  v0[40] = v51;
  *v51 = v0;
  v51[1] = sub_10094F590;
  return sub_1009561F4(v0[28], (uint64_t)(v0 + 2), v14, v35, v33, v53, v36);
}

uint64_t sub_10094FAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 264);
  sub_1002B1E4C(v0 + 104);
  sub_1002B1E4C(v0 + 72);
  sub_100004048(v1, &qword_10110D4C0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10094FB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 288) = a7;
  *(_QWORD *)(v8 + 296) = v7;
  *(_QWORD *)(v8 + 272) = a4;
  *(_QWORD *)(v8 + 280) = a6;
  *(_BYTE *)(v8 + 424) = a5;
  *(_QWORD *)(v8 + 256) = a2;
  *(_QWORD *)(v8 + 264) = a3;
  *(_QWORD *)(v8 + 248) = a1;
  v9 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  *(_QWORD *)(v8 + 304) = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 312) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 320) = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_10110D468);
  *(_QWORD *)(v8 + 328) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TimeBasedKey(0);
  *(_QWORD *)(v8 + 336) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 344) = v13;
  *(_QWORD *)(v8 + 352) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(type metadata accessor for BookmarkMetaData(0) - 8);
  *(_QWORD *)(v8 + 360) = v14;
  *(_QWORD *)(v8 + 368) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10094FC58, v7, 0);
}

uint64_t sub_10094FC58()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!*(_BYTE *)(v0 + 424))
  {
    v1 = 5;
    goto LABEL_5;
  }
  if (*(_BYTE *)(v0 + 424) == 1)
  {
    v1 = 6;
LABEL_5:
    *(_BYTE *)(v0 + 425) = v1;
    v2 = (_QWORD *)swift_task_alloc(dword_10110D1EC);
    *(_QWORD *)(v0 + 376) = v2;
    *v2 = v0;
    v2[1] = sub_10094FD5C;
    return sub_100952C5C(*(_QWORD *)(v0 + 256), v1, *(_QWORD *)(v0 + 264));
  }
  v4 = sub_1000D94EC();
  v5 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v4, 0, 0);
  *v6 = 17;
  swift_willThrow(v5);
  v7 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10094FD5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 376);
  v5 = *(_QWORD *)(*v2 + 296);
  *(_QWORD *)(v3 + 384) = a1;
  *(_QWORD *)(v3 + 392) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10094FDBC, v5, 0);
}

void sub_10094FDBC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 392);
  if (*(_BYTE *)(v0 + 424) || !v1)
    goto LABEL_7;
  if (!is_mul_ok(v1, 0x60uLL))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    return;
  }
  v2 = 96 * v1;
  v1 = 96 * v1 - 1;
  v3 = v2 - 96;
  if (v3 <= 1)
    v3 = 1;
  if (v1 < v3)
    goto LABEL_21;
LABEL_7:
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 256) + *(int *)(*(_QWORD *)(v0 + 304) + 44));
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = sub_100518EE0(*(unsigned __int8 *)(v0 + 425));
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v0 + 368);
      sub_10005972C(*(_QWORD *)(v4 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 360) + 72) * v5, v7, type metadata accessor for BookmarkMetaData);
      v8 = *(_QWORD *)(v7 + 8);
      sub_1000126B0(v7, type metadata accessor for BookmarkMetaData);
      if (v8 >= v1)
        goto LABEL_14;
LABEL_12:
      v9 = *(_QWORD *)(v0 + 264);
      *(_QWORD *)(v0 + 112) = type metadata accessor for OwnedBeaconRecord(0);
      *(_QWORD *)(v0 + 120) = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
      v10 = sub_100018F08((_QWORD *)(v0 + 88));
      sub_10005972C(v9, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      v11 = swift_task_alloc(dword_10110D21C);
      *(_QWORD *)(v0 + 400) = v11;
      *(_QWORD *)v11 = v0;
      *(_QWORD *)(v11 + 8) = sub_100950208;
      v12 = *(_BYTE *)(v0 + 424);
      v13 = *(_OWORD *)(v0 + 384);
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v0 + 296);
      *(_OWORD *)(v11 + 32) = v13;
      *(_BYTE *)(v11 + 96) = v12;
      *(_QWORD *)(v11 + 24) = v0 + 88;
      swift_task_switch(sub_10095AA64, 0, 0);
      return;
    }
  }
  if (v1)
    goto LABEL_12;
  v8 = 0;
LABEL_14:
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v14 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B7940);
  v17 = sub_10005972C(v15, v14, type metadata accessor for SharingCircleKeyManager.Instruction);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v21 = *(_QWORD *)(v0 + 312);
  if (v20)
  {
    v22 = swift_slowAlloc(42, -1);
    v23 = swift_slowAlloc(32, -1);
    v34 = v23;
    *(_DWORD *)v22 = 134218755;
    *(_QWORD *)(v0 + 232) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2048;
    *(_QWORD *)(v0 + 192) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v22 + 14, v22 + 22);
    *(_WORD *)(v22 + 22) = 2160;
    *(_QWORD *)(v0 + 168) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v22 + 24, v22 + 32);
    *(_WORD *)(v22 + 32) = 2081;
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
    *(_QWORD *)(v0 + 160) = sub_100016940(v26, v27, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v22 + 34, v22 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v21, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Address key package reached highWater mark (%llu > %llu). Not uploading address keys for %{private,mask.hash}s.", (uint8_t *)v22, 0x2Au);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 312), type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  v28 = *(_QWORD *)(v0 + 248);
  v29 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v30 = *(_QWORD *)(v0 + 352);
  v32 = *(_QWORD *)(v0 + 320);
  v31 = *(_QWORD *)(v0 + 328);
  v33 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  (*(void (**)(void))(v0 + 8))();
}

uint64_t sub_100950208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 400);
  *(_QWORD *)(*(_QWORD *)v2 + 408) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[37];
    swift_errorRelease(v1);
    v7 = sub_1009509A0;
    v8 = v6;
  }
  else
  {
    v9 = v4[37];
    v4[52] = a1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4 + 11);
    v7 = sub_100950298;
    v8 = v9;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100950298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  _QWORD *v41;
  int v42;
  char v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  Swift::String v54;
  uint64_t v55;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;

  v1 = v0;
  v3 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v4 = *(_BYTE *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = swift_task_alloc(32);
  *(_BYTE *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = sub_10008B4E4((uint64_t (*)(char *))sub_100961314, (unint64_t *)v6, v2);
  swift_task_dealloc(v6);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v1 + 280);
    v31 = *(_QWORD *)(v1 + 288);
    sub_10001BBBC(v30, v31);
    v32 = sub_10095FD50((uint64_t)_swiftEmptyArrayStorage, v30, v31);
    v33 = v3;
    v34 = *(_QWORD *)(v1 + 280);
    v35 = *(_QWORD *)(v1 + 288);
    if (v33)
    {
      sub_10001BC14(*(_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 288));
      swift_bridgeObjectRelease();
LABEL_10:
      v36 = *(_QWORD *)(v1 + 352);
      v37 = *(_QWORD *)(v1 + 320);
      v38 = *(_QWORD *)(v1 + 328);
      v39 = *(_QWORD *)(v1 + 312);
      swift_task_dealloc(*(_QWORD *)(v1 + 368));
      swift_task_dealloc(v36);
      swift_task_dealloc(v38);
      swift_task_dealloc(v37);
      swift_task_dealloc(v39);
      v40 = *(uint64_t (**)(void))(v1 + 8);
      return v40();
    }
    v41 = v32;
    v42 = *(unsigned __int8 *)(v1 + 424);
    swift_bridgeObjectRelease();
    sub_10001BC14(v34, v35);
    if (v42)
    {
      if (v42 != 1)
      {
        swift_bridgeObjectRelease();
        v51 = sub_1000D94EC();
        v52 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v51, 0, 0);
        *v53 = 17;
        swift_willThrow(v52);
        goto LABEL_10;
      }
      v43 = 6;
    }
    else
    {
      v43 = 5;
    }
    v44 = *(_QWORD *)(v1 + 272);
    v45 = *(char **)(v1 + 248);
    v46 = type metadata accessor for KeyDropInterface.KeyPackage(0);
    sub_10005972C(v44, (uint64_t)&v45[*(int *)(v46 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
    *v45 = v43;
    *(_QWORD *)&v45[*(int *)(v46 + 24)] = v41;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
    v47 = *(_QWORD *)(v1 + 352);
    v48 = *(_QWORD *)(v1 + 320);
    v49 = *(_QWORD *)(v1 + 328);
    v50 = *(_QWORD *)(v1 + 312);
    swift_task_dealloc(*(_QWORD *)(v1 + 368));
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    v40 = *(uint64_t (**)(void))(v1 + 8);
    return v40();
  }
  v57 = (_QWORD *)(v1 + 224);
  v9 = *(_QWORD *)(v1 + 344);
  v59 = *(_QWORD *)(v1 + 336);
  sub_10009A3AC(0, v8, 0);
  v58 = (_QWORD *)v1;
  v10 = *(_QWORD *)(v1 + 352);
  sub_10005972C(v7 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v10, type metadata accessor for TimeBasedKey);
  v11 = v10 + *(int *)(v59 + 24);
  v13 = *(_QWORD *)(v11 + 16);
  v12 = *(_QWORD *)(v11 + 24);
  sub_10001BBBC(v13, v12);
  sub_1007E7118(v13, v12);
  v15 = v3;
  if (!v3)
  {
    v16 = v14;
    sub_1007E3D28(v14, 0);
    v18 = v17;
    CCECCryptorRelease(v16);
    sub_10001BC14(v13, v12);
    __asm { BR              X9 }
  }
  v19 = static os_log_type_t.error.getter(v14);
  if (qword_1010E9F78 != -1)
    swift_once(&qword_1010E9F78, sub_1007E28B4);
  v20 = qword_1011B77E0;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
  *v57 = v15;
  swift_errorRetain(v15);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v24 = String.init<A>(describing:)(v57, v23);
  v26 = v25;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  *(_QWORD *)(v22 + 64) = sub_10001AA00();
  *(_QWORD *)(v22 + 32) = v24;
  *(_QWORD *)(v22 + 40) = v26;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Error deriving advertisementKey: %@", 35, 2, v22);
  swift_bridgeObjectRelease();
  v27 = sub_1000D95A8();
  v28 = swift_allocError(&type metadata for CryptoTokenError, v27, 0, 0);
  *v29 = 0;
  swift_willThrow(v28);
  swift_errorRelease(v15);
  sub_10001BC14(v13, v12);
  _StringGuts.grow(_:)(35);
  v58[16] = 0;
  v58[17] = 0xE000000000000000;
  v54._object = (void *)0x8000000100EC7AC0;
  v54._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v54);
  v58[30] = v28;
  v55 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  _print_unlocked<A, B>(_:_:)(v58 + 30, v58 + 16, v55, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v58[16], v58[17], "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
}

uint64_t sub_1009509A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 88));
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7940);
  v4 = sub_10005972C(v2, v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v8 = *(_QWORD *)(v0 + 384);
    v7 = *(_QWORD *)(v0 + 392);
    v22 = *(_QWORD *)(v0 + 320);
    v9 = swift_slowAlloc(32, -1);
    v23 = swift_slowAlloc(64, -1);
    v24 = v23;
    *(_DWORD *)v9 = 136315651;
    *(_QWORD *)(v0 + 176) = v8;
    *(_QWORD *)(v0 + 184) = v7;
    *(_QWORD *)(v0 + 144) = 0;
    *(_QWORD *)(v0 + 152) = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)(v0 + 176, v0 + 144, &type metadata for SecondaryIndex, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v10._countAndFlagsBits = 3026478;
    v10._object = (void *)0xE300000000000000;
    String.append(_:)(v10);
    _print_unlocked<A, B>(_:_:)(v0 + 184, v0 + 144, &type metadata for SecondaryIndex, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    *(_QWORD *)(v0 + 200) = sub_100016940(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2160;
    *(_QWORD *)(v0 + 208) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v9 + 14, v9 + 22);
    *(_WORD *)(v9 + 22) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 216) = sub_100016940(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v22, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No local keys for range %s. Not uploading address keys for %{private,mask.hash}s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  v15 = *(_QWORD *)(v0 + 248);
  v16 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = *(_QWORD *)(v0 + 352);
  v19 = *(_QWORD *)(v0 + 320);
  v18 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100950CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v7[28] = a6;
  v7[29] = v6;
  v7[26] = a4;
  v7[27] = a5;
  v7[24] = a2;
  v7[25] = a3;
  v7[23] = a1;
  v10 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v7[30] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[31] = swift_task_alloc(v11);
  v7[32] = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_10110D468) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[33] = swift_task_alloc(v12);
  v7[34] = swift_task_alloc(v12);
  v7[35] = swift_task_alloc(v12);
  v7[36] = swift_task_alloc(v12);
  v13 = type metadata accessor for TimeBasedKey(0);
  v7[37] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[38] = v14;
  v7[39] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(type metadata accessor for BookmarkMetaData(0) - 8);
  v7[40] = v15;
  v7[41] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_task_alloc(dword_10110D1EC);
  v7[42] = v16;
  *v16 = v7;
  v16[1] = sub_100950E34;
  return sub_100952C5C(a2, 9, a3);
}

uint64_t sub_100950E34(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 336);
  v5 = *(_QWORD *)(*v2 + 232);
  *(_QWORD *)(v3 + 344) = a1;
  *(_QWORD *)(v3 + 352) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100950E94, v5, 0);
}

uint64_t sub_100950E94()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v3 = *(_QWORD *)(v0 + 352);
  if (!v3)
    goto LABEL_7;
  if (!is_mul_ok(v3, 0x60uLL))
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = 96 * v3;
  v1 = v4 - 1;
  v5 = v4 - 96;
  if (v5 <= 1)
    v5 = 1;
  if (v1 < v5)
  {
    __break(1u);
LABEL_7:
    v1 = 0;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v0 + 192) + *(int *)(*(_QWORD *)(v0 + 240) + 44));
  if (!*(_QWORD *)(v6 + 16) || (v7 = sub_100518EE0(9), (v8 & 1) == 0))
  {
    if (!v1)
    {
      v2 = 0;
      goto LABEL_15;
    }
LABEL_13:
    v10 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 40) = type metadata accessor for OwnedBeaconRecord(0);
    *(_QWORD *)(v0 + 48) = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
    v11 = sub_100018F08((_QWORD *)(v0 + 16));
    sub_10005972C(v10, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    v12 = swift_task_alloc(dword_10110D21C);
    *(_QWORD *)(v0 + 360) = v12;
    *(_QWORD *)v12 = v0;
    *(_QWORD *)(v12 + 8) = sub_1009513F8;
    v13 = *(_OWORD *)(v0 + 344);
    *(_QWORD *)(v12 + 48) = *(_QWORD *)(v0 + 232);
    *(_OWORD *)(v12 + 32) = v13;
    *(_BYTE *)(v12 + 96) = 0;
    *(_QWORD *)(v12 + 24) = v0 + 16;
    return swift_task_switch(sub_10095AA64, 0, 0);
  }
  v9 = *(_QWORD *)(v0 + 328);
  sub_10005972C(*(_QWORD *)(v6 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 320) + 72) * v7, v9, type metadata accessor for BookmarkMetaData);
  v2 = *(_QWORD *)(v9 + 8);
  sub_1000126B0(v9, type metadata accessor for BookmarkMetaData);
  if (v2 < v1)
    goto LABEL_13;
LABEL_15:
  if (qword_1010EA050 != -1)
LABEL_21:
    swift_once(&qword_1010EA050, sub_100906B40);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = type metadata accessor for Logger(0);
  sub_10001A9E8(v17, (uint64_t)qword_1011B7940);
  v18 = sub_10005972C(v16, v15, type metadata accessor for SharingCircleKeyManager.Instruction);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(_QWORD *)(v0 + 248);
  if (v21)
  {
    v23 = swift_slowAlloc(42, -1);
    v41 = swift_slowAlloc(96, -1);
    v42 = v41;
    *(_DWORD *)v23 = 136315907;
    v43 = 0x7972616D6972702ELL;
    v44 = 0xEA0000000000282FLL;
    *(_QWORD *)(v0 + 168) = v1;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 41;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    *(_QWORD *)(v0 + 136) = sub_100016940(v43, v44, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    v43 = 0x7972616D6972702ELL;
    v44 = 0xEA0000000000282FLL;
    *(_QWORD *)(v0 + 112) = v2;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 41;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    *(_QWORD *)(v0 + 88) = sub_100016940(v43, v44, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2160;
    *(_QWORD *)(v0 + 96) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v23 + 24, v23 + 32);
    *(_WORD *)(v23 + 32) = 2081;
    v28 = type metadata accessor for UUID(0);
    v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
    *(_QWORD *)(v0 + 104) = sub_100016940(v30, v31, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v23 + 34, v23 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v22, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Connection key package reached highWater mark (%s > %s).\nNot uploading connection keys for %{private,mask.hash}s.", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy(v41, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 248), type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  v32 = *(_QWORD *)(v0 + 184);
  v33 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v34 = *(_QWORD *)(v0 + 312);
  v36 = *(_QWORD *)(v0 + 280);
  v35 = *(_QWORD *)(v0 + 288);
  v38 = *(_QWORD *)(v0 + 264);
  v37 = *(_QWORD *)(v0 + 272);
  v40 = *(_QWORD *)(v0 + 248);
  v39 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009513F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 360);
  *(_QWORD *)(*(_QWORD *)v2 + 368) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[29];
    swift_errorRelease(v1);
    v7 = sub_100951BD4;
    v8 = v6;
  }
  else
  {
    v9 = v4[29];
    v4[47] = a1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4 + 2);
    v7 = sub_100951488;
    v8 = v9;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100951488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = *(_QWORD *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = (unint64_t *)swift_task_alloc(32);
  v4[2] = v3;
  v5 = sub_10008B4E4((uint64_t (*)(char *))sub_100961334, v4, v1);
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 296);
    v7 = *(_QWORD *)(v0 + 304);
    v9 = v5 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v10 = *(_QWORD *)(v7 + 72);
    v44 = v5;
    swift_bridgeObjectRetain(v5);
    while (1)
    {
      v11 = *(_QWORD *)(v0 + 312);
      sub_10005972C(v9, v11, type metadata accessor for TimeBasedKey);
      v12 = (uint64_t *)(v11 + *(int *)(v8 + 24));
      v13 = v12[1];
      if (v13 >> 60 != 15)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 312), type metadata accessor for TimeBasedKey);
      v9 += v10;
      if (!--v6)
      {
        swift_bridgeObjectRelease_n(v44, 2);
        goto LABEL_9;
      }
    }
    v14 = *v12;
    v15 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
    v17 = v16;
    sub_10001BBBC(v14, v13);
    sub_1007E6A88(v14, v13, v15, v17, 32);
    if (!v2)
    {
      v19 = v18;
      sub_10001EF3C(v14, v13);
      __asm { BR              X9 }
    }
    sub_10001BC14(v15, v17);
    sub_10001EF3C(v14, v13);
    _StringGuts.grow(_:)(35);
    *(_QWORD *)(v0 + 56) = 0;
    *(_QWORD *)(v0 + 64) = 0xE000000000000000;
    v42._object = (void *)0x8000000100ECF430;
    v42._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v42);
    *(_QWORD *)(v0 + 176) = v2;
    v43 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    _print_unlocked<A, B>(_:_:)(v0 + 176, v0 + 56, v43, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), "searchpartyd/KeyRepresentable.swift", 35, 2, 423, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_9:
    v20 = *(_QWORD *)(v0 + 216);
    v21 = *(_QWORD *)(v0 + 224);
    sub_10001BBBC(v20, v21);
    v22 = sub_10095FD50((uint64_t)_swiftEmptyArrayStorage, v20, v21);
    if (v2)
    {
      v23 = *(_QWORD *)(v0 + 328);
      v24 = *(_QWORD *)(v0 + 312);
      v26 = *(_QWORD *)(v0 + 280);
      v25 = *(_QWORD *)(v0 + 288);
      v27 = *(_QWORD *)(v0 + 264);
      v28 = *(_QWORD *)(v0 + 272);
      v29 = *(_QWORD *)(v0 + 256);
      v45 = *(_QWORD *)(v0 + 248);
      sub_10001BC14(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
      swift_bridgeObjectRelease();
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v28);
      swift_task_dealloc(v27);
      swift_task_dealloc(v29);
      swift_task_dealloc(v45);
    }
    else
    {
      v30 = v22;
      v31 = *(_QWORD *)(v0 + 208);
      v32 = *(_BYTE **)(v0 + 184);
      sub_10001BC14(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
      swift_bridgeObjectRelease();
      v33 = type metadata accessor for KeyDropInterface.KeyPackage(0);
      sub_10005972C(v31, (uint64_t)&v32[*(int *)(v33 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
      *v32 = 9;
      *(_QWORD *)&v32[*(int *)(v33 + 24)] = v30;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
      v34 = *(_QWORD *)(v0 + 312);
      v36 = *(_QWORD *)(v0 + 280);
      v35 = *(_QWORD *)(v0 + 288);
      v38 = *(_QWORD *)(v0 + 264);
      v37 = *(_QWORD *)(v0 + 272);
      v40 = *(_QWORD *)(v0 + 248);
      v39 = *(_QWORD *)(v0 + 256);
      swift_task_dealloc(*(_QWORD *)(v0 + 328));
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100951BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7940);
  v4 = sub_10005972C(v2, v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v8 = *(_QWORD *)(v0 + 344);
    v7 = *(_QWORD *)(v0 + 352);
    v25 = *(_QWORD *)(v0 + 256);
    v9 = swift_slowAlloc(32, -1);
    v26 = swift_slowAlloc(64, -1);
    v27 = v26;
    *(_DWORD *)v9 = 136315651;
    *(_QWORD *)(v0 + 120) = v8;
    *(_QWORD *)(v0 + 128) = v7;
    *(_QWORD *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)(v0 + 120, v0 + 72, &type metadata for SecondaryIndex, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v10._countAndFlagsBits = 3026478;
    v10._object = (void *)0xE300000000000000;
    String.append(_:)(v10);
    _print_unlocked<A, B>(_:_:)(v0 + 128, v0 + 72, &type metadata for SecondaryIndex, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    *(_QWORD *)(v0 + 144) = sub_100016940(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2160;
    *(_QWORD *)(v0 + 152) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v9 + 14, v9 + 22);
    *(_WORD *)(v9 + 22) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 160) = sub_100016940(v13, v14, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v25, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No local keys for range %s. Not uploading connection keys for %{private,mask.hash}s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 256), type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  v15 = *(_QWORD *)(v0 + 184);
  v16 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 288);
  v21 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 248);
  v22 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100951F48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  result = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v5 = *(_QWORD *)(a1 + *(int *)(result + 24));
  v6 = *(_QWORD *)(v5 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    result = sub_10009A32C(0, v6, 0);
    v7 = _swiftEmptyArrayStorage;
    v8 = (uint64_t *)(v5 + 32);
    v9 = _swiftEmptyArrayStorage[2];
    do
    {
      v11 = *v8;
      v8 += 9;
      v10 = v11;
      v13 = v7;
      v12 = v7[3];
      if (v9 >= v12 >> 1)
      {
        result = sub_10009A32C(v12 > 1, v9 + 1, 1);
        v7 = v13;
      }
      v7[2] = v9 + 1;
      v7[v9++ + 4] = v10;
      --v6;
    }
    while (v6);
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100952024(uint64_t a1)
{
  _QWORD v2[3];
  _BYTE v3[8];

  swift_getErrorValue(a1, v3, v2);
  return Error.localizedDescription.getter(v2[1], v2[2]);
}

uint64_t sub_10095205C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[2] = a1;
  v3[3] = a2;
  v4 = type metadata accessor for StableIdentifier(0);
  v3[4] = v4;
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010ED860);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[8] = v7;
  v3[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100952104, v2, 0);
}

uint64_t sub_100952104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10000F9B8(v4 + *(int *)(v5 + 28), v3, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    v9 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    sub_10005972C(v10 + *(int *)(v5 + 24), v8, type metadata accessor for StableIdentifier);
    v11 = (char *)&loc_1009521F4 + 4 * byte_100E5556B[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }
  v6 = *(_QWORD *)(v0 + 16);
  sub_100004048(*(_QWORD *)(v0 + 48), &qword_1010ED860);
  v7 = type metadata accessor for KeyDropBeaconGroupAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v12 = *(_QWORD *)(v0 + 40);
  v13 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1009522A4()
{
  _QWORD *v0;
  void (*v1)(uint64_t, _QWORD, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  char v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v0[8];
  v3 = v0[5];
  v4 = sub_10001A9A8(&qword_101106F40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (char *)(v3 + *(int *)(v4 + 96));
  v6 = *v5;
  v7 = v5[1];
  swift_bridgeObjectRelease();
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  if ((v7 & 1) != 0)
  {
    v9 = v0[7];
    v10 = v0[5];
    v11 = v0[2];
    v8(v0[9], v9);
    v12 = type metadata accessor for KeyDropBeaconGroupAttributes(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v8(v10, v9);
    JUMPOUT(0x10095226CLL);
  }
  v8(v0[5], v0[7]);
  v13 = v0[2];
  v1(v13, v0[9], v0[7]);
  *(_BYTE *)(v13 + *(int *)(type metadata accessor for KeyDropBeaconGroupAttributes(0) + 20)) = v6;
  JUMPOUT(0x100952264);
}

uint64_t sub_10095240C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[11] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v3[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[15] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v3[16] = v10;
  v3[17] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_101105880);
  v3[18] = v11;
  v3[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BeaconNamingRecord(0);
  v3[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[21] = v13;
  v3[22] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100952500, v2, 0);
}

uint64_t sub_100952500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 120);
  *(_QWORD *)(v0 + 184) = v2;
  *(_DWORD *)(v0 + 240) = *(_DWORD *)(v1 + 20);
  return swift_task_switch(sub_100952524, v2, 0);
}

uint64_t sub_100952524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 56) + *(int *)(v0 + 240), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109BF58, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 192) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 200) = v10;
  *v10 = v0;
  v10[1] = sub_100952604;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 152), sub_10007CBEC, v8, *(_QWORD *)(v0 + 144));
}

uint64_t sub_100952604()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_100952664, v1, 0);
}

uint64_t sub_100952664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 48))(v1, 1, *(_QWORD *)(v0 + 160)) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_101105880);
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 56);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7940);
    v5 = sub_10005972C(v3, v2, type metadata accessor for OwnedBeaconRecord);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v22 = *(_QWORD *)(v0 + 112);
      v8 = *(_QWORD *)(v0 + 96);
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(32, -1);
      v23 = v10;
      *(_DWORD *)v9 = 141558275;
      *(_QWORD *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2081;
      v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v12 = dispatch thunk of CustomStringConvertible.description.getter(v22, v11);
      *(_QWORD *)(v0 + 40) = sub_100016940(v12, v13, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v8, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No name record for beacon %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 96), type metadata accessor for OwnedBeaconRecord);
    }

    v16 = sub_10001A9A8(&qword_10110D4A8);
    v17 = *(_QWORD *)(v0 + 176);
    v18 = *(_QWORD *)(v0 + 152);
    v19 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 104);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(*(_QWORD *)(v0 + 48), 1, 1);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 184);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 176), type metadata accessor for BeaconNamingRecord);
    return swift_task_switch(sub_100952954, v14, 0);
  }
}

uint64_t sub_100952954()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;

  v1 = v0[23];
  v2 = v0[13];
  v4 = v0[10];
  v3 = v0[11];
  sub_10005972C(v0[7], v2, type metadata accessor for OwnedBeaconRecord);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24) & ~v5;
  v7 = swift_allocObject(&unk_10109BF80, v6 + v3, v5 | 7);
  v0[26] = v7;
  *(_QWORD *)(v7 + 16) = v1;
  sub_1000126EC(v2, v7 + v6, type metadata accessor for OwnedBeaconRecord);
  v8 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v9 = (uint64_t **)swift_task_alloc(v8);
  v0[27] = (uint64_t)v9;
  v10 = sub_10001A9A8(&qword_1010F6350);
  *v9 = v0;
  v9[1] = (uint64_t *)sub_100952A40;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_1007279C4, v7, v10);
}

uint64_t sub_100952A40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_release();
  return swift_task_switch(sub_100952AA0, v1, 0);
}

uint64_t sub_100952AA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 16);
  return swift_task_switch(sub_100952ABC, v1, 0);
}

uint64_t sub_100952ABC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(int **)(v0 + 160);
  v3 = (uint64_t *)(v1 + v2[8]);
  v5 = *v3;
  v4 = v3[1];
  v6 = *(_QWORD *)(v1 + v2[7]);
  v7 = (uint64_t *)(v1 + v2[9]);
  v9 = *v7;
  v8 = v7[1];
  v10 = (uint64_t *)(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 72) + 60));
  v11 = v10[1];
  v27 = *v10;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v4);
  v12 = objc_autoreleasePoolPush();
  sub_100774704(v1);
  v25 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 176);
  v24 = v9;
  v14 = v6;
  v15 = *(_QWORD *)(v0 + 48);
  v16 = sub_10001A9A8(&qword_10110D4A8);
  v17 = (_QWORD *)(v15 + *(int *)(v16 + 48));
  objc_autoreleasePoolPop(v12);
  sub_1000126B0(v13, type metadata accessor for BeaconNamingRecord);
  *v17 = v5;
  v17[1] = v4;
  v17[2] = v14;
  v17[3] = v24;
  v17[4] = v8;
  v17[5] = v27;
  v17[6] = v11;
  v17[7] = v25;
  v17[8] = v26;
  v18 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(*(_QWORD *)(v0 + 48), 0, 1, v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100952C5C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v4 + 472) = a3;
  *(_QWORD *)(v4 + 480) = v3;
  *(_BYTE *)(v4 + 844) = a2;
  *(_QWORD *)(v4 + 464) = a1;
  v5 = type metadata accessor for OwnedBeaconRecord(0);
  *(_QWORD *)(v4 + 488) = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 496) = swift_task_alloc(v6);
  *(_QWORD *)(v4 + 504) = swift_task_alloc(v6);
  *(_QWORD *)(v4 + 512) = swift_task_alloc(v6);
  v7 = *(_QWORD *)(type metadata accessor for BookmarkMetaData(0) - 8);
  *(_QWORD *)(v4 + 520) = v7;
  *(_QWORD *)(v4 + 528) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DateInterval(0);
  *(_QWORD *)(v4 + 536) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 544) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 552) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 560) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 568) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 576) = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_1010FD558);
  *(_QWORD *)(v4 + 584) = v11;
  *(_QWORD *)(v4 + 592) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  *(_QWORD *)(v4 + 600) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v4 + 608) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 616) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 624) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 632) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 640) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 648) = swift_task_alloc(v14);
  return swift_task_switch(sub_100952DD4, v3, 0);
}

uint64_t sub_100952DD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[61];
  v2 = v0[59];
  v3 = *(_QWORD *)(v0[60] + 120);
  v0[82] = v3;
  v0[5] = v1;
  v0[6] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v4 = sub_100018F08(v0 + 2);
  sub_10005972C(v2, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
  return swift_task_switch(sub_100952E64, v3, 0);
}

uint64_t sub_100952E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 656);
  sub_100030784(v0 + 16, v0 + 56);
  v2 = swift_allocObject(&unk_10109BEE0, 64, 7);
  *(_QWORD *)(v0 + 664) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  sub_10000F9FC((__int128 *)(v0 + 56), v2 + 24);
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 672) = v4;
  *v4 = v0;
  v4[1] = sub_100952F18;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 592), sub_100960538, v2, *(_QWORD *)(v0 + 584));
}

uint64_t sub_100952F18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 656);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 672));
  swift_release();
  return swift_task_switch(sub_100952F7C, v1, 0);
}

uint64_t sub_100952F7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[81];
  v2 = v0[76];
  v3 = v0[75];
  v4 = (char *)v0[74];
  v5 = v0[73];
  v6 = v0[60];
  v0[85] = *(_QWORD *)v4;
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v1, &v4[*(int *)(v5 + 48)], v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  return swift_task_switch(sub_100952FEC, v6, 0);
}

uint64_t sub_100952FEC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *(_DWORD *)(v0 + 840) = *(_DWORD *)(*(_QWORD *)(v0 + 488) + 24);
  if ((sub_100C6F9A8() & 1) != 0)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_10110D47C);
    *(_QWORD *)(v0 + 688) = v1;
    *v1 = v0;
    v1[1] = sub_100953084;
    v2 = *(_QWORD *)(v0 + 576);
  }
  else
  {
    *(_QWORD *)(v0 + 696) = 0;
    v3 = (_QWORD *)swift_task_alloc(dword_10110D47C);
    *(_QWORD *)(v0 + 704) = v3;
    *v3 = v0;
    v3[1] = sub_1009531B0;
    v2 = *(_QWORD *)(v0 + 560);
  }
  return sub_1009074E0(v2);
}

uint64_t sub_100953084()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 480);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 688));
  return swift_task_switch(sub_1009530DC, v1, 0);
}

uint64_t sub_1009530DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(v1 + 648);
  v3 = *(_QWORD *)(v1 + 640);
  v4 = *(_QWORD *)(v1 + 608);
  v5 = *(_QWORD *)(v1 + 600);
  v6 = *(_QWORD *)(v1 + 576);
  v7 = *(_QWORD *)(v1 + 544);
  v8 = *(_QWORD *)(v1 + 536);
  DateInterval.end.getter(a1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = Date.timeIntervalSince(_:)(v2);
  if (v9 > 0.0)
    v10 = v9 * 0.0002;
  else
    v10 = 0.0;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  *(double *)(v1 + 696) = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_10110D47C);
  *(_QWORD *)(v1 + 704) = v11;
  *v11 = v1;
  v11[1] = sub_1009531B0;
  return sub_1009074E0(*(_QWORD *)(v1 + 560));
}

uint64_t sub_1009531B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 480);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 704));
  return swift_task_switch(sub_100953208, v1, 0);
}

uint64_t sub_100953208(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v2 = v1[70];
  v3 = v1[68];
  v4 = v1[67];
  DateInterval.start.getter(a1);
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v1[89] = v5;
  v5(v2, v4);
  v6 = (_QWORD *)swift_task_alloc(dword_10110D47C);
  v1[90] = v6;
  *v6 = v1;
  v6[1] = sub_100953288;
  return sub_1009074E0(v1[69]);
}

uint64_t sub_100953288()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 480);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 720));
  return swift_task_switch(sub_1009532E0, v1, 0);
}

uint64_t sub_1009532E0(uint64_t a1)
{
  double *v1;
  void (*v2)(uint64_t, uint64_t);
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  double **v12;
  uint64_t (*v14)(uint64_t, uint64_t, char, uint64_t);

  v2 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v1 + 89);
  v3 = v1[87];
  v4 = *((_QWORD *)v1 + 79);
  v5 = *((_QWORD *)v1 + 78);
  v6 = *((_QWORD *)v1 + 77);
  v7 = *((_QWORD *)v1 + 76);
  v8 = *((_QWORD *)v1 + 75);
  v9 = *((_QWORD *)v1 + 69);
  v10 = *((_QWORD *)v1 + 67);
  DateInterval.end.getter(a1);
  v2(v9, v10);
  Date.addingTimeInterval(_:)(v3);
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *((_QWORD *)v1 + 91) = v11;
  v11(v6, v8);
  DateInterval.init(start:end:)(v4, v5);
  v14 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_10110D480 + dword_10110D480);
  v12 = (double **)swift_task_alloc(unk_10110D484);
  *((_QWORD *)v1 + 92) = v12;
  *v12 = v1;
  v12[1] = (double *)sub_1009533E4;
  return v14(*((_QWORD *)v1 + 59), *((_QWORD *)v1 + 71), 1, *((_QWORD *)v1 + 82));
}

uint64_t sub_1009533E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 736);
  v5 = *(_QWORD *)(*v2 + 480);
  *(_QWORD *)(v3 + 744) = a1;
  *(_QWORD *)(v3 + 752) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100953448, v5, 0);
}

uint64_t sub_100953448()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  if ((sub_100C6F9A8() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 680);
    if (v1)
      v2 = v1 / 0x60 + 1;
    else
      v2 = 0;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 744);
  }
  v3 = *(_QWORD *)(v0 + 464);
  result = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v5 = *(_QWORD *)(v3 + *(int *)(result + 44));
  if (*(_QWORD *)(v5 + 16) && (result = sub_100518EE0(*(unsigned __int8 *)(v0 + 844)), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(v0 + 528);
    sub_10005972C(*(_QWORD *)(v5 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 520) + 72) * result, v7, type metadata accessor for BookmarkMetaData);
    v8 = *(_QWORD *)(v7 + 8);
    result = sub_1000126B0(v7, type metadata accessor for BookmarkMetaData);
  }
  else
  {
    v8 = 0;
  }
  if (((1 << *(_BYTE *)(v0 + 844)) & 0x3DDA) == 0)
  {
    if (v8)
      v8 = v8 / 0x60 + 1;
    else
      v8 = 0;
  }
  *(_QWORD *)(v0 + 760) = v8;
  v9 = v8 + 1;
  if (v8 == -1)
  {
    __break(1u);
  }
  else
  {
    if (v9 <= v2)
      v9 = v2;
    *(_QWORD *)(v0 + 768) = v9;
    v10 = (_QWORD *)swift_task_alloc(dword_10110D48C);
    *(_QWORD *)(v0 + 776) = v10;
    *v10 = v0;
    v10[1] = sub_100953584;
    return sub_100907160();
  }
  return result;
}

uint64_t sub_100953584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 776);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 784) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009535E4, v3, 0);
}

void sub_1009535E4()
{
  uint64_t *v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t **v6;

  v1 = v0[98];
  v2 = v1 != 0;
  v3 = v1 - 1;
  if (!v2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  v4 = v0[96];
  v2 = __CFADD__(v4, v3);
  v5 = v4 + v3;
  if (v2)
    goto LABEL_7;
  if (v0[94] < v5)
    v5 = v0[94];
  v0[99] = v5;
  v6 = (uint64_t **)swift_task_alloc(dword_10110D47C);
  v0[100] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_100953664;
  sub_1009074E0(v0[70]);
}

uint64_t sub_100953664()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 480);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 800));
  return swift_task_switch(sub_1009536BC, v1, 0);
}

uint64_t sub_1009536BC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *log;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];

  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v0 + 768);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  v4 = *(_QWORD *)(v0 + 560);
  v5 = *(_QWORD *)(v0 + 536);
  v6 = DateInterval.duration.getter();
  *(double *)(v0 + 808) = v6;
  v3(v4, v5);
  if (v1 >= v2)
    return swift_task_switch(sub_100953D7C, 0, 0);
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v7 = *(_QWORD *)(v0 + 496);
  v8 = *(_QWORD *)(v0 + 472);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7940);
  v10 = sub_10005972C(v8, v7, type metadata accessor for OwnedBeaconRecord);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v47 = *(_QWORD *)(v0 + 760);
    v49 = *(_QWORD *)(v0 + 792);
    v13 = *(_QWORD *)(v0 + 752);
    v48 = *(_QWORD *)(v0 + 768);
    v14 = *(_QWORD *)(v0 + 744);
    v62 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
    v56 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    v15 = *(_QWORD *)(v0 + 696);
    v58 = *(_QWORD *)(v0 + 600);
    v60 = *(_QWORD *)(v0 + 648);
    v53 = *(_QWORD *)(v0 + 536);
    v54 = *(_QWORD *)(v0 + 568);
    v50 = *(_QWORD *)(v0 + 496);
    v16 = *(_BYTE *)(v0 + 844);
    log = v11;
    v17 = swift_slowAlloc(112, -1);
    v52 = swift_slowAlloc(160, -1);
    v64 = v52;
    *(_DWORD *)v17 = 136448771;
    v18 = sub_100D79CA8(v16);
    *(_QWORD *)(v0 + 352) = sub_100016940(v18, v19, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2048;
    *(_QWORD *)(v0 + 360) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2048;
    *(_QWORD *)(v0 + 368) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v17 + 24, v17 + 32);
    *(_WORD *)(v17 + 32) = 2048;
    *(_QWORD *)(v0 + 376) = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v17 + 34, v17 + 42);
    *(_WORD *)(v17 + 42) = 2080;
    strcpy((char *)v65, ".secondary/(");
    BYTE5(v65[1]) = 0;
    HIWORD(v65[1]) = -5120;
    *(_QWORD *)(v0 + 384) = v48;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    *(_QWORD *)(v0 + 392) = sub_100016940(v65[0], v65[1], &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v17 + 44, v17 + 52);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 52) = 2080;
    strcpy((char *)v65, ".secondary/(");
    BYTE5(v65[1]) = 0;
    HIWORD(v65[1]) = -5120;
    *(_QWORD *)(v0 + 400) = v49;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 41;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    *(_QWORD *)(v0 + 408) = sub_100016940(v65[0], v65[1], &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v17 + 54, v17 + 62);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 62) = 2080;
    strcpy((char *)v65, ".secondary/(");
    BYTE5(v65[1]) = 0;
    HIWORD(v65[1]) = -5120;
    *(_QWORD *)(v0 + 416) = v13;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 41;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    *(_QWORD *)(v0 + 424) = sub_100016940(v65[0], v65[1], &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v17 + 64, v17 + 72);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 72) = 2048;
    *(double *)(v0 + 432) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v17 + 74, v17 + 82);
    *(_WORD *)(v17 + 82) = 2048;
    *(_QWORD *)(v0 + 440) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v17 + 84, v17 + 92);
    *(_WORD *)(v17 + 92) = 2160;
    *(_QWORD *)(v0 + 448) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v17 + 94, v17 + 102);
    *(_WORD *)(v17 + 102) = 2081;
    v26 = type metadata accessor for UUID(0);
    v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
    *(_QWORD *)(v0 + 456) = sub_100016940(v28, v29, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v17 + 104, v17 + 112);
    swift_bridgeObjectRelease();
    sub_1000126B0(v50, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, log, v12, "Satisfied high water for secondary Index Range type: %{public}s - start: %llu, end: %llu, bookmarkValue: %llu,\nadjusted start: %s, end: %s, highWaterIndex: %s,\nduration: %f, maxDrift: %f,\nbeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v17, 0x70u);
    swift_arrayDestroy(v52, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v56(v54, v53);
    v62(v60, v58);
  }
  else
  {
    v31 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
    v33 = *(_QWORD *)(v0 + 648);
    v34 = *(_QWORD *)(v0 + 600);
    v35 = *(_QWORD *)(v0 + 568);
    v36 = *(_QWORD *)(v0 + 536);
    v37 = *(_QWORD *)(v0 + 496);

    sub_1000126B0(v37, type metadata accessor for OwnedBeaconRecord);
    v32(v35, v36);
    v31(v33, v34);
  }
  v38 = *(_QWORD *)(v0 + 752);
  v39 = *(_QWORD *)(v0 + 640);
  v40 = *(_QWORD *)(v0 + 632);
  v41 = *(_QWORD *)(v0 + 624);
  v42 = *(_QWORD *)(v0 + 616);
  v43 = *(_QWORD *)(v0 + 592);
  v44 = *(_QWORD *)(v0 + 576);
  v45 = *(_QWORD *)(v0 + 568);
  v46 = *(_QWORD *)(v0 + 560);
  v55 = *(_QWORD *)(v0 + 552);
  v57 = *(_QWORD *)(v0 + 528);
  v59 = *(_QWORD *)(v0 + 512);
  v61 = *(_QWORD *)(v0 + 504);
  v63 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 648));
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v38, v38);
}

uint64_t sub_100953D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 816) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 824) = v3;
  *v3 = v0;
  v3[1] = sub_100953E2C;
  return unsafeBlocking<A>(_:)(v0 + 96, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100953E2C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 824));
  swift_release();
  return swift_task_switch(sub_100953E8C, 0, 0);
}

uint64_t sub_100953E8C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = v0[60];
  v0[104] = sub_100C1BAB4(v0[12]);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100953EDC, v1, 0);
}

uint64_t sub_100953EDC()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *type;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111[2];

  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v4 = sub_100C1AE40(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease();
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = *(_QWORD *)(v0 + 760);
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v1 = v0 + 240;
      v6 = *(_QWORD *)(v0 + 752);
      v2 = (double)*(unint64_t *)(v0 + 832) * 86400.0 / ((double)(unint64_t)v4 * 60.0);
      v3 = (double)v6 - (double)v5;
      v8 = v2 < v3 && v5 < v6;
      if (!v5 || v8)
      {
        if (qword_1010EA050 != -1)
          swift_once(&qword_1010EA050, sub_100906B40);
        v33 = *(_QWORD *)(v0 + 512);
        v34 = *(_QWORD *)(v0 + 472);
        v35 = type metadata accessor for Logger(0);
        sub_10001A9E8(v35, (uint64_t)qword_1011B7940);
        v36 = sub_10005972C(v34, v33, type metadata accessor for OwnedBeaconRecord);
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.default.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          v39 = *(_QWORD *)(v0 + 808);
          v86 = *(_QWORD *)(v0 + 792);
          v85 = *(_QWORD *)(v0 + 768);
          v82 = *(_QWORD *)(v0 + 752);
          v83 = *(_QWORD *)(v0 + 760);
          type = v37;
          v40 = *(_QWORD *)(v0 + 744);
          v41 = *(_QWORD *)(v0 + 696);
          v105 = *(_QWORD *)(v0 + 648);
          v108 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
          v99 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
          v102 = *(_QWORD *)(v0 + 600);
          v93 = *(_QWORD *)(v0 + 536);
          v96 = *(_QWORD *)(v0 + 568);
          v89 = *(_QWORD *)(v0 + 512);
          v42 = *(_BYTE *)(v0 + 844);
          v43 = swift_slowAlloc(112, -1);
          v90 = swift_slowAlloc(160, -1);
          v110 = v90;
          *(_DWORD *)v43 = 136448771;
          v44 = sub_100D79CA8(v42);
          *(_QWORD *)(v0 + 240) = sub_100016940(v44, v45, &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v43 + 4, v43 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 12) = 2048;
          *(_QWORD *)(v0 + 248) = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v43 + 14, v43 + 22);
          *(_WORD *)(v43 + 22) = 2048;
          *(_QWORD *)(v0 + 256) = v82;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v43 + 24, v43 + 32);
          *(_WORD *)(v43 + 32) = 2048;
          *(_QWORD *)(v0 + 264) = v83;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v43 + 34, v43 + 42);
          *(_WORD *)(v43 + 42) = 2080;
          strcpy((char *)v111, ".secondary/(");
          BYTE5(v111[1]) = 0;
          HIWORD(v111[1]) = -5120;
          *(_QWORD *)(v0 + 272) = v85;
          v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          String.append(_:)(v46);
          swift_bridgeObjectRelease();
          v47._countAndFlagsBits = 41;
          v47._object = (void *)0xE100000000000000;
          String.append(_:)(v47);
          *(_QWORD *)(v0 + 280) = sub_100016940(v111[0], v111[1], &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v43 + 44, v43 + 52);
          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 52) = 2080;
          strcpy((char *)v111, ".secondary/(");
          BYTE5(v111[1]) = 0;
          HIWORD(v111[1]) = -5120;
          *(_QWORD *)(v0 + 288) = v86;
          v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          String.append(_:)(v48);
          swift_bridgeObjectRelease();
          v49._countAndFlagsBits = 41;
          v49._object = (void *)0xE100000000000000;
          String.append(_:)(v49);
          *(_QWORD *)(v0 + 296) = sub_100016940(v111[0], v111[1], &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v43 + 54, v43 + 62);
          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 62) = 2080;
          strcpy((char *)v111, ".secondary/(");
          BYTE5(v111[1]) = 0;
          HIWORD(v111[1]) = -5120;
          *(_QWORD *)(v0 + 304) = v82;
          v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          String.append(_:)(v50);
          swift_bridgeObjectRelease();
          v51._countAndFlagsBits = 41;
          v51._object = (void *)0xE100000000000000;
          String.append(_:)(v51);
          *(_QWORD *)(v0 + 312) = sub_100016940(v111[0], v111[1], &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v43 + 64, v43 + 72);
          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 72) = 2048;
          *(_QWORD *)(v0 + 320) = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v43 + 74, v43 + 82);
          *(_WORD *)(v43 + 82) = 2048;
          *(_QWORD *)(v0 + 328) = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v43 + 84, v43 + 92);
          *(_WORD *)(v43 + 92) = 2160;
          *(_QWORD *)(v0 + 336) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v43 + 94, v43 + 102);
          *(_WORD *)(v43 + 102) = 2081;
          v52 = type metadata accessor for UUID(0);
          v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v54 = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
          *(_QWORD *)(v0 + 344) = sub_100016940(v54, v55, &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v43 + 104, v43 + 112);
          swift_bridgeObjectRelease();
          sub_1000126B0(v89, type metadata accessor for OwnedBeaconRecord);
          _os_log_impl((void *)&_mh_execute_header, type, v38, "Secondary Index Range type: %{public}s - start: %llu, end: %llu, bookmarkValue: %llu,\nadjusted start: %s, end: %s, highWaterIndex: %s,\nduration: %f, maxDrift: %f,\nbeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v43, 0x70u);
          swift_arrayDestroy(v90, 5, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v90, -1, -1);
          swift_slowDealloc(v43, -1, -1);

          v99(v96, v93);
          v108(v105, v102);
        }
        else
        {
          v63 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
          v64 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
          v65 = *(_QWORD *)(v0 + 648);
          v66 = *(_QWORD *)(v0 + 600);
          v67 = *(_QWORD *)(v0 + 568);
          v68 = *(_QWORD *)(v0 + 536);
          v69 = *(_QWORD *)(v0 + 512);

          sub_1000126B0(v69, type metadata accessor for OwnedBeaconRecord);
          v64(v67, v68);
          v63(v65, v66);
        }
        v106 = *(_QWORD *)(v0 + 792);
        v109 = *(_QWORD *)(v0 + 768);
        goto LABEL_22;
      }
      if (qword_1010EA050 == -1)
      {
LABEL_12:
        v9 = *(_QWORD *)(v0 + 504);
        v10 = *(_QWORD *)(v0 + 472);
        v11 = type metadata accessor for Logger(0);
        sub_10001A9E8(v11, (uint64_t)qword_1011B7940);
        v12 = sub_10005972C(v10, v9, type metadata accessor for OwnedBeaconRecord);
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.default.getter(v13);
        if (os_log_type_enabled(v13, v14))
        {
          v15 = *(_QWORD *)(v0 + 808);
          v84 = *(_QWORD *)(v0 + 792);
          v80 = *(_QWORD *)(v0 + 760);
          v16 = *(_QWORD *)(v0 + 752);
          v81 = *(_QWORD *)(v0 + 768);
          v17 = *(_QWORD *)(v0 + 744);
          v107 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
          v98 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
          v18 = *(_QWORD *)(v0 + 696);
          v101 = *(_QWORD *)(v0 + 600);
          v104 = *(_QWORD *)(v0 + 648);
          v92 = *(_QWORD *)(v0 + 536);
          v95 = *(_QWORD *)(v0 + 568);
          v87 = *(_QWORD *)(v0 + 504);
          v19 = *(_BYTE *)(v0 + 844);
          v20 = swift_slowAlloc(132, -1);
          v88 = swift_slowAlloc(160, -1);
          v110 = v88;
          *(_DWORD *)v20 = 136449283;
          v21 = sub_100D79CA8(v19);
          *(_QWORD *)(v0 + 112) = sub_100016940(v21, v22, &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v20 + 4, v20 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2048;
          *(_QWORD *)(v0 + 120) = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v20 + 14, v20 + 22);
          *(_WORD *)(v20 + 22) = 2048;
          *(_QWORD *)(v0 + 128) = v16;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v20 + 24, v20 + 32);
          *(_WORD *)(v20 + 32) = 2048;
          *(_QWORD *)(v0 + 136) = v80;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v20 + 34, v20 + 42);
          *(_WORD *)(v20 + 42) = 2080;
          strcpy((char *)v111, ".secondary/(");
          BYTE5(v111[1]) = 0;
          HIWORD(v111[1]) = -5120;
          *(_QWORD *)(v0 + 144) = v81;
          v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          v24._countAndFlagsBits = 41;
          v24._object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          *(_QWORD *)(v0 + 152) = sub_100016940(v111[0], v111[1], &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v20 + 44, v20 + 52);
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 52) = 2080;
          strcpy((char *)v111, ".secondary/(");
          BYTE5(v111[1]) = 0;
          HIWORD(v111[1]) = -5120;
          *(_QWORD *)(v0 + 160) = v84;
          v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          String.append(_:)(v25);
          swift_bridgeObjectRelease();
          v26._countAndFlagsBits = 41;
          v26._object = (void *)0xE100000000000000;
          String.append(_:)(v26);
          *(_QWORD *)(v0 + 168) = sub_100016940(v111[0], v111[1], &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v20 + 54, v20 + 62);
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 62) = 2080;
          strcpy((char *)v111, ".secondary/(");
          BYTE5(v111[1]) = 0;
          HIWORD(v111[1]) = -5120;
          *(_QWORD *)(v0 + 176) = v16;
          v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          String.append(_:)(v27);
          swift_bridgeObjectRelease();
          v28._countAndFlagsBits = 41;
          v28._object = (void *)0xE100000000000000;
          String.append(_:)(v28);
          *(_QWORD *)(v0 + 184) = sub_100016940(v111[0], v111[1], &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v20 + 64, v20 + 72);
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 72) = 2048;
          *(_QWORD *)(v0 + 192) = v15;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v20 + 74, v20 + 82);
          *(_WORD *)(v20 + 82) = 2048;
          *(_QWORD *)(v0 + 200) = v18;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v20 + 84, v20 + 92);
          *(_WORD *)(v20 + 92) = 2048;
          *(double *)(v0 + 208) = v3;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v20 + 94, v20 + 102);
          *(_WORD *)(v20 + 102) = 2048;
          *(double *)(v0 + 216) = v2;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v20 + 104, v20 + 112);
          *(_WORD *)(v20 + 112) = 2160;
          *(_QWORD *)(v0 + 224) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v20 + 114, v20 + 122);
          *(_WORD *)(v20 + 122) = 2081;
          v29 = type metadata accessor for UUID(0);
          v30 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
          *(_QWORD *)(v0 + 232) = sub_100016940(v31, v32, &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v1, v20 + 124, v20 + 132);
          swift_bridgeObjectRelease();
          sub_1000126B0(v87, type metadata accessor for OwnedBeaconRecord);
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Satisfied low water for secondary Index Range type: %{public}s - start: %llu, end: %llu, bookmarkValue: %llu,\nadjusted start: %s, end: %s, highWaterIndex: %s,\nduration: %f, maxDrift: %f, remainingKeysToReachHighWater: %f < %f,\nbeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v20, 0x84u);
          swift_arrayDestroy(v88, 5, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v88, -1, -1);
          swift_slowDealloc(v20, -1, -1);

          v98(v95, v92);
          v107(v104, v101);
        }
        else
        {
          v56 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
          v57 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
          v58 = *(_QWORD *)(v0 + 648);
          v59 = *(_QWORD *)(v0 + 600);
          v60 = *(_QWORD *)(v0 + 568);
          v61 = *(_QWORD *)(v0 + 536);
          v62 = *(_QWORD *)(v0 + 504);

          sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
          v57(v60, v61);
          v56(v58, v59);
        }
        v106 = *(_QWORD *)(v0 + 760);
        v109 = v106;
LABEL_22:
        v70 = *(_QWORD *)(v0 + 640);
        v71 = *(_QWORD *)(v0 + 632);
        v72 = *(_QWORD *)(v0 + 624);
        v73 = *(_QWORD *)(v0 + 616);
        v74 = *(_QWORD *)(v0 + 592);
        v75 = *(_QWORD *)(v0 + 576);
        v76 = *(_QWORD *)(v0 + 568);
        v77 = *(_QWORD *)(v0 + 560);
        v78 = *(_QWORD *)(v0 + 552);
        v94 = *(_QWORD *)(v0 + 528);
        v97 = *(_QWORD *)(v0 + 512);
        v100 = *(_QWORD *)(v0 + 504);
        v103 = *(_QWORD *)(v0 + 496);
        swift_task_dealloc(*(_QWORD *)(v0 + 648));
        swift_task_dealloc(v70);
        swift_task_dealloc(v71);
        swift_task_dealloc(v72);
        swift_task_dealloc(v73);
        swift_task_dealloc(v74);
        swift_task_dealloc(v75);
        swift_task_dealloc(v76);
        swift_task_dealloc(v77);
        swift_task_dealloc(v78);
        swift_task_dealloc(v94);
        swift_task_dealloc(v97);
        swift_task_dealloc(v100);
        swift_task_dealloc(v103);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v109, v106);
      }
    }
    swift_once(&qword_1010EA050, sub_100906B40);
    goto LABEL_12;
  }
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
}

uint64_t sub_100954C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  v3[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v3[23] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[24] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[25] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[26] = swift_task_alloc(v8);
  v3[27] = swift_task_alloc(v8);
  v3[28] = swift_task_alloc(v8);
  v9 = sub_10001A9A8(&qword_1010F7AE0);
  v3[29] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v10);
  v3[31] = swift_task_alloc(v10);
  return swift_task_switch(sub_100954D04, v2, 0);
}

uint64_t sub_100954D04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 168) + 120);
  *(_QWORD *)(v0 + 256) = v1;
  return swift_task_switch(sub_100954D20, v1, 0);
}

uint64_t sub_100954D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 264) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 344) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10109BE90, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 272) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 280) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 288) = v13;
  *v13 = v0;
  v13[1] = sub_100954E10;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 248), sub_10007CAF0, v10, *(_QWORD *)(v0 + 232));
}

uint64_t sub_100954E10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 288));
  swift_release();
  return swift_task_switch(sub_100954E74, v1, 0);
}

uint64_t sub_100954E74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = v0[30];
  sub_10000F9B8(v0[31], v1, &qword_1010F7AE0);
  v2 = type metadata accessor for KeySyncRecord(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = v0[30];
  if (v3 == 1)
  {
    sub_100004048(v4, &qword_1010F7AE0);
    v5 = 1;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + *(int *)(v2 + 20));
    sub_1000126B0(v4, type metadata accessor for KeySyncRecord);
    if (!v5)
    {
      v6 = 0;
      goto LABEL_6;
    }
  }
  v6 = v5 / 0x60 + 1;
LABEL_6:
  v0[37] = v6;
  return swift_task_switch(sub_100954F3C, v0[32], 0);
}

uint64_t sub_100954F3C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
  v2 = *(unsigned __int8 *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 200);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 264))(v4, *(_QWORD *)(v0 + 160), v5);
  v9 = swift_allocObject(&unk_10109BEB8, v7, v8);
  *(_QWORD *)(v0 + 304) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 312) = v11;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
  *v11 = v0;
  v11[1] = sub_100955038;
  return unsafeBlocking<A>(_:)(v0 + 56, sub_100960524, v9, v12);
}

uint64_t sub_100955038()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  swift_release();
  return swift_task_switch(sub_100955098, v1, 0);
}

uint64_t sub_100955098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    v1 = swift_task_alloc(dword_10110D21C);
    *(_QWORD *)(v0 + 320) = v1;
    *(_QWORD *)v1 = v0;
    *(_QWORD *)(v1 + 8) = sub_1009551D4;
    v2 = *(_QWORD *)(v0 + 296);
    v3 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v1 + 40) = v2;
    *(_QWORD *)(v1 + 48) = v3;
    *(_BYTE *)(v1 + 96) = 1;
    *(_QWORD *)(v1 + 24) = v0 + 16;
    *(_QWORD *)(v1 + 32) = v2;
    return swift_task_switch(sub_10095AA64, 0, 0);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 152);
    sub_100004048(*(_QWORD *)(v0 + 248), &qword_1010F7AE0);
    sub_100004048(v0 + 56, (uint64_t *)&unk_1010EE310);
    v6 = type metadata accessor for TimeBasedKey(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    v7 = *(_QWORD *)(v0 + 240);
    v9 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009551D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 320);
  v3[41] = a1;
  v3[42] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100955610;
  else
    v5 = sub_100955240;
  return swift_task_switch(v5, v3[21], 0);
}

uint64_t sub_100955240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for TimeBasedKey(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    sub_10005972C(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 176), type metadata accessor for TimeBasedKey);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v4 + 56))(*(_QWORD *)(v0 + 176), v5, 1, v3);
  swift_bridgeObjectRelease();
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 264);
  v7 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 160);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B7940);
  v11 = v6(v7, v9, v8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 296);
    v36 = *(_QWORD *)(v0 + 248);
    v34 = *(_QWORD *)(v0 + 216);
    v35 = *(_QWORD *)(v0 + 192);
    v33 = *(_QWORD *)(v0 + 184);
    v15 = swift_slowAlloc(32, -1);
    v16 = swift_slowAlloc(64, -1);
    *(_DWORD *)v15 = 136315651;
    v37 = v16;
    strcpy((char *)v38, ".secondary/(");
    BYTE5(v38[1]) = 0;
    HIWORD(v38[1]) = -5120;
    *(_QWORD *)(v0 + 120) = v14;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    *(_QWORD *)(v0 + 128) = sub_100016940(v38[0], v38[1], &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2160;
    *(_QWORD *)(v0 + 136) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v33, v19);
    *(_QWORD *)(v0 + 144) = sub_100016940(v20, v21, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v33);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Found SML Off - secondary key %s for %{private,mask.hash}s.", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    v22 = v36;
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 248);
    v24 = *(_QWORD *)(v0 + 216);
    v25 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    v22 = v23;
  }
  sub_100004048(v22, &qword_1010F7AE0);
  sub_100005CF0(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152), (uint64_t *)&unk_1010F0EE0);
  v27 = *(_QWORD *)(v0 + 240);
  v29 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 224);
  v30 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100955610()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 264);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7940);
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 192);
  if (v10)
  {
    type = v9;
    v16 = swift_slowAlloc(32, -1);
    v30 = (uint64_t *)swift_slowAlloc(8, -1);
    v32 = swift_slowAlloc(32, -1);
    v33 = v32;
    *(_DWORD *)v16 = 141558531;
    *(_QWORD *)(v0 + 96) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    *(_QWORD *)(v0 + 104) = sub_100016940(v18, v19, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    *(_WORD *)(v16 + 22) = 2114;
    swift_errorRetain(v11);
    v20 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 112) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v16 + 24, v16 + 32);
    *v30 = v20;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Could not find SML Off - secondary key for %{private,mask.hash}s,error: %{public}@.", (uint8_t *)v16, 0x20u);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v30, 1, v21);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(v11);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  }
  else
  {

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    swift_errorRelease(v11);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  }
  sub_100004048(v12, &qword_1010F7AE0);
  v22 = *(_QWORD *)(v0 + 152);
  v23 = type metadata accessor for TimeBasedKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = *(_QWORD *)(v0 + 240);
  v26 = *(_QWORD *)(v0 + 216);
  v25 = *(_QWORD *)(v0 + 224);
  v27 = *(_QWORD *)(v0 + 208);
  v28 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100955998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 104) = v1;
  v4 = (_QWORD *)swift_task_alloc(dword_10110D164);
  *(_QWORD *)(v2 + 112) = v4;
  *v4 = v2;
  v4[1] = sub_1009559FC;
  return sub_10090C6D8(v2 + 16, a1);
}

uint64_t sub_1009559FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 112);
  v3 = *v1;
  *(_QWORD *)(v3 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_100955A68, *(_QWORD *)(v3 + 104), 0);
}

uint64_t sub_100955A68()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1 >> 60 == 15)
  {
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 12;
    swift_willThrow(v3);
    sub_1000D9530((uint64_t *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 120);
    sub_10001BBBC(v6, *(_QWORD *)(v0 + 64));
    PrivateKey.publicKey.getter(v6, v1);
    v9 = v8;
    v11 = v10;
    sub_10001BBBC(v8, v10);
    v12 = sub_1007E6F8C(v9, v11);
    if (v7)
    {
      sub_10001BC14(v9, v11);
      _StringGuts.grow(_:)(35);
      *(_QWORD *)(v0 + 80) = 0;
      *(_QWORD *)(v0 + 88) = 0xE000000000000000;
      v16._object = (void *)0x8000000100EC7AC0;
      v16._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v16);
      *(_QWORD *)(v0 + 96) = v7;
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      _print_unlocked<A, B>(_:_:)(v0 + 96, v0 + 80, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
    }
    else
    {
      v14 = v12;
      v15 = v13;
      sub_10001BC14(v9, v11);
      sub_1002F7394(v14, v15);
      sub_10001BC14(v9, v11);
      sub_10001EF3C(v6, v1);
      sub_1000D9530((uint64_t *)(v0 + 16));
      return (*(uint64_t (**)())(v0 + 8))();
    }
  }
}

uint64_t sub_100955C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[25] = a4;
  v5[26] = v4;
  v5[23] = a2;
  v5[24] = a3;
  v5[22] = a1;
  v6 = type metadata accessor for SymmetricKey(0);
  v5[27] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[28] = v7;
  v5[29] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v5[30] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[31] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v5[32] = v10;
  v5[33] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100955D20, v4, 0);
}

uint64_t sub_100955D20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 208) + 120);
  *(_QWORD *)(v0 + 272) = v1;
  return swift_task_switch(sub_100955D3C, v1, 0);
}

uint64_t sub_100955D3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[33];
  v1 = v0[34];
  v4 = v0[31];
  v3 = v0[32];
  v5 = v0[30];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[23], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109BE68, v7 + v3, v6 | 7);
  v0[35] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[36] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
  *v10 = v0;
  v10[1] = sub_100955E30;
  return unsafeBlocking<A>(_:)(v0 + 15, sub_100960524, v8, v11);
}

uint64_t sub_100955E30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 288));
  swift_release();
  return swift_task_switch(sub_100955E90, v1, 0);
}

uint64_t sub_100955E90()
{
  uint64_t v0;
  __int128 *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;

  v1 = (__int128 *)(v0 + 120);
  if (*(_QWORD *)(v0 + 144))
  {
    sub_10000F9FC(v1, v0 + 80);
    v2 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 296) = v2;
    *v2 = v0;
    v2[1] = sub_100955F68;
    return sub_10090C6D8(v0 + 16, *(_QWORD *)(v0 + 192));
  }
  else
  {
    sub_100004048((uint64_t)v1, (uint64_t *)&unk_1010EE310);
    v4 = sub_1000D94EC();
    v5 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v4, 0, 0);
    *v6 = 0;
    swift_willThrow(v5);
    v7 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100955F68()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 296);
  *(_QWORD *)(*v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009561AC;
  else
    v4 = sub_100955FCC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 208), 0);
}

uint64_t sub_100955FCC()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0[5];
  if (v1 >> 60 == 15)
  {
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 8;
    swift_willThrow(v3);
    sub_1000D9530(v0 + 2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 10);
    v5 = v0[29];
    swift_task_dealloc(v0[33]);
    swift_task_dealloc(v5);
    v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  v7 = v0[4];
  v8 = v0[25];
  if (v8)
    v9 = v8 / 0x60 + 1;
  else
    v9 = 0;
  sub_10001BBBC(v0[4], v0[5]);
  result = sub_10095B274(v7, v1, v9);
  if (!v9)
  {
    v18 = 0;
    v19 = 0;
    goto LABEL_13;
  }
  if (is_mul_ok(v9, 0x60uLL))
  {
    v11 = 96 * v9 - 96;
    if (v11 <= 1)
      v11 = 1;
    if (96 * v9 - 1 >= v11)
    {
      v18 = v11;
      v19 = 96 * v9 - 1;
LABEL_13:
      v20 = v0[33];
      v12 = v0[28];
      v13 = v0[29];
      v14 = v0[27];
      v15 = (unint64_t *)v0[22];
      SymmetricKey.withUnsafeBytes<A>(_:)(v0 + 20, sub_100906C08, 0, &type metadata for Data);
      sub_10001EF3C(v7, v1);
      sub_1000D9530(v0 + 2);
      v16 = v0[20];
      v17 = v0[21];
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 10);
      swift_task_dealloc(v20);
      swift_task_dealloc(v13);
      *v15 = v9;
      v15[1] = v18;
      v15[2] = v19;
      v15[3] = v16;
      v15[4] = v17;
      v6 = (uint64_t (*)(void))v0[1];
      return v6();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1009561AC()
{
  uint64_t v0;
  uint64_t v1;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009561F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v8[34] = a7;
  v8[35] = v7;
  v8[32] = a5;
  v8[33] = a6;
  v8[30] = a3;
  v8[31] = a4;
  v8[28] = a1;
  v8[29] = a2;
  v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v8[36] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[37] = swift_task_alloc(v10);
  v8[38] = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_10110D468);
  v8[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for EncryptedData(0);
  v8[40] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[41] = v13;
  v8[42] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SymmetricKey(0);
  v8[43] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[44] = v15;
  v8[45] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010F7AE0);
  v8[46] = v16;
  v8[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v8[48] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v8[49] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[50] = swift_task_alloc(v19);
  v8[51] = swift_task_alloc(v19);
  v20 = type metadata accessor for KeySyncRecord(0);
  v8[52] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v8[53] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[54] = swift_task_alloc(v22);
  v8[55] = swift_task_alloc(v22);
  v23 = type metadata accessor for UUID(0);
  v8[56] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v8[57] = v24;
  v25 = *(_QWORD *)(v24 + 64);
  v8[58] = v25;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[59] = swift_task_alloc(v26);
  v8[60] = swift_task_alloc(v26);
  return swift_task_switch(sub_1009563B4, v7, 0);
}

uint64_t sub_1009563B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = v0[29];
  v2 = type metadata accessor for Logger(0);
  v0[61] = sub_10001A9E8(v2, (uint64_t)qword_1011B7940);
  v3 = sub_100030784(v1, (uint64_t)(v0 + 11));
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[60];
    v43 = v0[56];
    v46 = v0[57];
    v7 = v0[30];
    v8 = swift_slowAlloc(32, -1);
    v48 = swift_slowAlloc(32, -1);
    v50 = v48;
    *(_DWORD *)v8 = 134349571;
    v0[25] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2160;
    v0[26] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2081;
    v10 = v0[14];
    v9 = v0[15];
    sub_10001AA44(v0 + 11, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + 32))(v10);
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v43, v11);
    v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v6, v43);
    v0[27] = sub_100016940(v12, v14, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Wild bundle secondaryIndex: %{public}llu,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 11);
  }

  v15 = (_QWORD *)v0[29];
  v16 = v15[3];
  v17 = v15[4];
  sub_10001AA44(v15, v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v16, v17);
  v19 = v0[60];
  if ((v18 & 1) != 0)
  {
    v20 = v0[55];
    v44 = v0[57];
    v47 = v0[56];
    v21 = (int *)v0[52];
    v49 = v0[51];
    v22 = v0[50];
    v41 = v0[49];
    v42 = v0[48];
    v23 = (_QWORD *)v0[29];
    static Date.trustedNow.getter(v49);
    v25 = v15[3];
    v24 = v15[4];
    sub_10001AA44(v23, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v24 + 8) + 8) + 32))(v25);
    v27 = v15[3];
    v26 = v15[4];
    sub_10001AA44(v23, v27);
    (*(void (**)(uint64_t, uint64_t))(v26 + 184))(v27, v26);
    v28 = sub_10064F0F8(v19, v22, v49, 0);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v22, v42);
    v45 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v45(v19, v47);
    v30 = v15[3];
    v29 = v15[4];
    sub_10001AA44(v23, v30);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 8) + 32))(v30);
    v31 = v20 + v21[6];
    v32 = v20 + v21[8];
    v33 = v20 + v21[9];
    v34 = v20 + v21[11];
    *(_QWORD *)(v20 + v21[5]) = v28;
    *(_QWORD *)v31 = 0;
    *(_BYTE *)(v31 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v20 + v21[7], v49, v42);
    *(_QWORD *)v32 = 0;
    *(_BYTE *)(v32 + 8) = 1;
    *(_QWORD *)v33 = 0;
    *(_BYTE *)(v33 + 8) = 1;
    *(_QWORD *)(v20 + v21[10]) = 1;
    *(_QWORD *)v34 = 0;
    *(_BYTE *)(v34 + 8) = 1;
    v0[66] = v45;
    v35 = (_QWORD *)swift_task_alloc(dword_10110D214);
    v0[67] = v35;
    *v35 = v0;
    v35[1] = sub_100956B70;
    return sub_10095726C(v0[29], v0[55], v0[30], v0[33], v0[34]);
  }
  else
  {
    v37 = (_QWORD *)v0[29];
    v38 = *(_QWORD *)(v0[35] + 120);
    v0[62] = v38;
    v40 = v15[3];
    v39 = v15[4];
    sub_10001AA44(v37, v40);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 8) + 32))(v40);
    return swift_task_switch(sub_100956858, v38, 0);
  }
}

uint64_t sub_100956858()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[62];
  v2 = v0[59];
  v4 = v0[57];
  v3 = v0[58];
  v5 = v0[56];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[60], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109BE40, v7 + v3, v6 | 7);
  v0[63] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[64] = v10;
  *v10 = v0;
  v10[1] = sub_100956930;
  return unsafeBlocking<A>(_:)(v0[47], sub_10007CAF0, v8, v0[46]);
}

uint64_t sub_100956930()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 480);
  v3 = *(_QWORD *)(*v0 + 448);
  v4 = *(_QWORD *)(*v0 + 456);
  v5 = *(_QWORD *)(*v0 + 280);
  swift_task_dealloc(*(_QWORD *)(*v0 + 512));
  swift_release();
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v1 + 520) = v6;
  v6(v2, v3);
  return swift_task_switch(sub_1009569B8, v5, 0);
}

uint64_t sub_1009569B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 376);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 424) + 48))(v1, 1, *(_QWORD *)(v0 + 416)) == 1)
  {
    sub_100004048(v1, &qword_1010F7AE0);
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 5;
    swift_willThrow(v3);
    v5 = *(_QWORD *)(v0 + 472);
    v7 = *(_QWORD *)(v0 + 432);
    v6 = *(_QWORD *)(v0 + 440);
    v9 = *(_QWORD *)(v0 + 400);
    v8 = *(_QWORD *)(v0 + 408);
    v10 = *(_QWORD *)(v0 + 376);
    v11 = *(_QWORD *)(v0 + 360);
    v12 = *(_QWORD *)(v0 + 336);
    v17 = *(_QWORD *)(v0 + 312);
    v18 = *(_QWORD *)(v0 + 304);
    v19 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 432);
    v14 = *(_QWORD *)(v0 + 440);
    sub_1000126EC(v1, v15, type metadata accessor for KeySyncRecord);
    sub_1000126EC(v15, v14, type metadata accessor for KeySyncRecord);
    *(_QWORD *)(v0 + 528) = *(_QWORD *)(v0 + 520);
    v16 = (_QWORD *)swift_task_alloc(dword_10110D214);
    *(_QWORD *)(v0 + 536) = v16;
    *v16 = v0;
    v16[1] = sub_100956B70;
    return sub_10095726C(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  }
}

uint64_t sub_100956B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 536);
  v3[68] = a1;
  v3[69] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100957188;
  else
    v5 = sub_100956BE0;
  return swift_task_switch(v5, v3[35], 0);
}

uint64_t sub_100956BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v1 = *(_QWORD *)(v0 + 232);
  sub_10095B274(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
  v2 = sub_100030784(v1, v0 + 128);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v63 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
    v5 = *(_QWORD *)(v0 + 480);
    v58 = *(_QWORD *)(v0 + 448);
    v6 = *(_QWORD *)(v0 + 240);
    v7 = swift_slowAlloc(42, -1);
    v66 = swift_slowAlloc(32, -1);
    v69 = v66;
    *(_QWORD *)(v0 + 168) = v6;
    v60 = v4;
    *(_DWORD *)v7 = 134218755;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2050;
    *(_QWORD *)(v0 + 176) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v7 + 14, v7 + 22);
    *(_WORD *)(v7 + 22) = 2160;
    *(_QWORD *)(v0 + 184) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v7 + 24, v7 + 32);
    *(_WORD *)(v7 + 32) = 2081;
    v9 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 160);
    sub_10001AA44((_QWORD *)(v0 + 128), v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 32))(v9);
    v10 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v58, v10);
    v13 = v12;
    v63(v5, v58);
    *(_QWORD *)(v0 + 192) = sub_100016940(v11, v13, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v7 + 34, v7 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 128));
    _os_log_impl((void *)&_mh_execute_header, v3, v60, "Wild bundle index: %llu,\nsecondaryIndex: %{public}llu,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v7, 0x2Au);
    swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 128));
  }

  v14 = *(_QWORD *)(v0 + 552);
  sub_10091E590(*(_QWORD *)(v0 + 544));
  if (v14)
  {
    v15 = *(_QWORD *)(v0 + 440);
    v17 = *(_QWORD *)(v0 + 352);
    v16 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD *)(v0 + 344);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    sub_1000126B0(v15, type metadata accessor for KeySyncRecord);
    v19 = *(_QWORD *)(v0 + 472);
    v21 = *(_QWORD *)(v0 + 432);
    v20 = *(_QWORD *)(v0 + 440);
    v23 = *(_QWORD *)(v0 + 400);
    v22 = *(_QWORD *)(v0 + 408);
    v24 = *(_QWORD *)(v0 + 376);
    v25 = *(_QWORD *)(v0 + 360);
    v26 = *(_QWORD *)(v0 + 336);
    v61 = *(_QWORD *)(v0 + 312);
    v64 = *(_QWORD *)(v0 + 304);
    v67 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v61);
    swift_task_dealloc(v64);
    swift_task_dealloc(v67);
  }
  else
  {
    v56 = *(_QWORD *)(v0 + 480);
    v57 = *(_QWORD *)(v0 + 472);
    v59 = *(_QWORD *)(v0 + 432);
    v45 = *(_QWORD *)(v0 + 416);
    v46 = *(_QWORD *)(v0 + 440);
    v62 = *(_QWORD *)(v0 + 408);
    v65 = *(_QWORD *)(v0 + 400);
    v47 = *(_QWORD *)(v0 + 392);
    v49 = *(_QWORD *)(v0 + 384);
    v68 = *(_QWORD *)(v0 + 376);
    v27 = *(_QWORD *)(v0 + 336);
    v53 = *(_QWORD *)(v0 + 344);
    v54 = *(_QWORD *)(v0 + 360);
    v50 = v27;
    v51 = *(_QWORD *)(v0 + 352);
    v29 = *(_QWORD *)(v0 + 320);
    v28 = *(_QWORD *)(v0 + 328);
    v30 = *(_QWORD *)(v0 + 304);
    v31 = *(_QWORD *)(v0 + 312);
    v55 = v31;
    v32 = *(_QWORD *)(v0 + 288);
    v48 = *(_QWORD *)(v0 + 296);
    v33 = *(_QWORD **)(v0 + 232);
    v34 = *(_QWORD *)(v0 + 240);
    v52 = *(_BYTE **)(v0 + 224);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v31, v27, v29);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v29);
    sub_100D7CD98(v34, 0, 0xC000000000000000, v31, (_QWORD *)(v0 + 16));
    v35 = v33[3];
    v36 = v33[4];
    sub_10001AA44(v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v36 + 184))(v35, v36);
    v37 = *(_QWORD *)(v46 + *(int *)(v45 + 20));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v30 + *(int *)(v32 + 24), v46 + *(int *)(v45 + 28), v49);
    *(_QWORD *)(v30 + *(int *)(v32 + 20)) = v37;
    sub_10005972C(v30, v48, type metadata accessor for KeyDropInterface.KeyAlignment);
    v38 = sub_10001A9A8(&qword_101109250);
    v39 = swift_allocObject(v38, 104, 7);
    v40 = *(_OWORD *)(v0 + 48);
    v41 = *(_OWORD *)(v0 + 64);
    v42 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v39 + 48) = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v39 + 64) = v40;
    *(_OWORD *)(v39 + 80) = v41;
    *(_QWORD *)(v39 + 96) = *(_QWORD *)(v0 + 80);
    *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
    *(_OWORD *)(v39 + 32) = v42;
    sub_1000126B0(v30, type metadata accessor for KeyDropInterface.KeyAlignment);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v50, v29);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v54, v53);
    sub_1000126B0(v46, type metadata accessor for KeySyncRecord);
    *v52 = 4;
    v43 = type metadata accessor for KeyDropInterface.KeyPackage(0);
    sub_1000126EC(v48, (uint64_t)&v52[*(int *)(v43 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
    *(_QWORD *)&v52[*(int *)(v43 + 24)] = v39;
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v46);
    swift_task_dealloc(v59);
    swift_task_dealloc(v62);
    swift_task_dealloc(v65);
    swift_task_dealloc(v68);
    swift_task_dealloc(v54);
    swift_task_dealloc(v50);
    swift_task_dealloc(v55);
    swift_task_dealloc(v30);
    swift_task_dealloc(v48);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100957188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_1000126B0(*(_QWORD *)(v0 + 440), type metadata accessor for KeySyncRecord);
  v1 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10095726C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6[40] = a5;
  v6[41] = v5;
  v6[38] = a3;
  v6[39] = a4;
  v6[36] = a1;
  v6[37] = a2;
  v7 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v6[42] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[43] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[44] = swift_task_alloc(v9);
  v6[45] = swift_task_alloc(v9);
  v6[46] = swift_task_alloc(v9);
  v6[47] = swift_task_alloc(v9);
  v6[48] = swift_task_alloc(v9);
  v6[49] = swift_task_alloc(v9);
  v10 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v6[50] = v10;
  v6[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_10110D468) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[52] = swift_task_alloc(v11);
  v6[53] = swift_task_alloc(v11);
  v6[54] = swift_task_alloc(v11);
  v6[55] = swift_task_alloc(v11);
  v6[56] = swift_task_alloc(v11);
  v6[57] = swift_task_alloc(v11);
  v6[58] = swift_task_alloc(v11);
  v6[59] = swift_task_alloc(v11);
  v6[60] = swift_task_alloc(v11);
  v12 = type metadata accessor for HashAlgorithm(0);
  v6[61] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[62] = v13;
  v6[63] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TimeBasedKey(0);
  v6[64] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[65] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[66] = swift_task_alloc(v16);
  v6[67] = swift_task_alloc(v16);
  v6[68] = swift_task_alloc(v16);
  v6[69] = swift_task_alloc(v16);
  v17 = type metadata accessor for UUID(0);
  v6[70] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v6[71] = v18;
  v6[72] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100957460, v5, 0);
}

uint64_t sub_100957460()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = v0[36];
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7940);
  v3 = sub_100030784(v1, (uint64_t)(v0 + 20));
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[72];
    v18 = v0[71];
    v7 = v0[70];
    v8 = v0[38];
    v9 = swift_slowAlloc(32, -1);
    v19 = swift_slowAlloc(32, -1);
    v20 = v19;
    *(_DWORD *)v9 = 134349571;
    v0[33] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 33, v0 + 34, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2160;
    v0[34] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v9 + 14, v9 + 22);
    *(_WORD *)(v9 + 22) = 2081;
    v11 = v0[23];
    v10 = v0[24];
    sub_10001AA44(v0 + 20, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v11);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v6, v7);
    v0[35] = sub_100016940(v13, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 35, v0 + 36, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 20);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Key bundle for secondaryIndex: %{public}llu,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 20);
  }

  v16 = (_QWORD *)swift_task_alloc(dword_10110D224);
  v0[73] = v16;
  *v16 = v0;
  v16[1] = sub_100957720;
  return sub_10095AC4C(v0[36], 0, v0[38], 0);
}

uint64_t sub_100957720(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD *)(*v2 + 584);
  v4 = *v2;
  *(_QWORD *)(v4 + 592) = a1;
  *(_QWORD *)(v4 + 600) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1009578E0, *(_QWORD *)(v4 + 328), 0);
  v5 = *(_QWORD *)(v4 + 552);
  v6 = *(_QWORD *)(v4 + 544);
  v7 = *(_QWORD *)(v4 + 536);
  v8 = *(_QWORD *)(v4 + 528);
  v9 = *(_QWORD *)(v4 + 504);
  v10 = *(_QWORD *)(v4 + 472);
  v11 = *(_QWORD *)(v4 + 480);
  v14 = *(_QWORD *)(v4 + 464);
  v15 = *(_QWORD *)(v4 + 456);
  v16 = *(_QWORD *)(v4 + 448);
  v17 = *(_QWORD *)(v4 + 440);
  v18 = *(_QWORD *)(v4 + 432);
  v19 = *(_QWORD *)(v4 + 424);
  v20 = *(_QWORD *)(v4 + 416);
  v21 = *(_QWORD *)(v4 + 408);
  v22 = *(_QWORD *)(v4 + 392);
  v23 = *(_QWORD *)(v4 + 384);
  v24 = *(_QWORD *)(v4 + 376);
  v25 = *(_QWORD *)(v4 + 368);
  v12 = *(_QWORD *)(v4 + 352);
  v26 = *(_QWORD *)(v4 + 360);
  swift_task_dealloc(*(_QWORD *)(v4 + 576));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1009578E0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;

  v1 = v0;
  v2 = (_QWORD *)v0[36];
  v4 = v2[3];
  v3 = v2[4];
  sub_10001AA44(v2, v4);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 112))(v4, v3) & 1) != 0)
  {
    v5 = (_QWORD *)swift_task_alloc(dword_10110D224);
    v1[76] = v5;
    *v5 = v1;
    v5[1] = sub_1009590F0;
    return sub_10095AC4C(v1[36], 1, v1[38], 0);
  }
  else
  {
    v7 = v1[75];
    v8 = v1[74];
    v9 = *(_QWORD *)(v8 + 16);
    v143 = v1;
    if (v9)
    {
      v114 = v1 + 29;
      v117 = v1 + 27;
      v112 = v1 + 31;
      v10 = v1[65];
      v130 = v1[64];
      sub_10009A3AC(0, v9, 0);
      v11 = v1[69];
      sub_10005972C(v8 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v11, type metadata accessor for TimeBasedKey);
      v12 = v11 + *(int *)(v130 + 24);
      v13 = *(_QWORD *)(v12 + 16);
      v14 = *(_QWORD *)(v12 + 24);
      sub_10001BBBC(v13, v14);
      sub_1007E7118(v13, v14);
      v16 = v7;
      if (!v7)
      {
        v17 = v15;
        sub_1007E3D28(v15, 0);
        v19 = v18;
        CCECCryptorRelease(v17);
        sub_10001BC14(v13, v14);
        __asm { BR              X9 }
      }
      v47 = static os_log_type_t.error.getter(v15);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      v48 = qword_1011B77E0;
      v49 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v50 = swift_allocObject(v49, 72, 7);
      *(_OWORD *)(v50 + 16) = xmmword_100E22B00;
      *v112 = v16;
      swift_errorRetain(v16);
      v51 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v52 = String.init<A>(describing:)(v112, v51);
      v54 = v53;
      *(_QWORD *)(v50 + 56) = &type metadata for String;
      *(_QWORD *)(v50 + 64) = sub_10001AA00();
      *(_QWORD *)(v50 + 32) = v52;
      *(_QWORD *)(v50 + 40) = v54;
      os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Error deriving advertisementKey: %@", 35, 2, v50);
      swift_bridgeObjectRelease();
      v55 = sub_1000D95A8();
      v56 = swift_allocError(&type metadata for CryptoTokenError, v55, 0, 0);
      *v57 = 0;
      swift_willThrow(v56);
      swift_errorRelease(v16);
      sub_10001BC14(v13, v14);
      _StringGuts.grow(_:)(35);
      v1[28] = 0xE000000000000000;
      v60 = v1 + 28;
      *(v60 - 1) = 0;
      v61._object = (void *)0x8000000100EC7AC0;
      v61._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v61);
      v60[1] = v56;
      v62 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      _print_unlocked<A, B>(_:_:)(v114, v117, v62, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *v117, *v60, "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      v21 = v1[39];
      v20 = v1[40];
      sub_10001BBBC(v21, v20);
      v22 = sub_10095FD50((uint64_t)_swiftEmptyArrayStorage, v21, v20);
      v24 = v1[39];
      v23 = v1[40];
      if (v7)
      {
        swift_bridgeObjectRelease();
        sub_10001BC14(v24, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v25 = v1[72];
        v26 = v1[69];
        v27 = v1[68];
        v28 = v1[67];
        v29 = v1[66];
        v30 = v1[63];
        v31 = v1;
        v32 = v1[60];
        v34 = v31[58];
        v33 = v31[59];
        v35 = v31[57];
        v115 = v31[56];
        v118 = v31[55];
        v120 = v31[54];
        v122 = v31[53];
        v124 = v31[52];
        v126 = v31[51];
        v128 = v31[49];
        v131 = v31[48];
        v134 = v31[47];
        v137 = v31[46];
        v140 = v31[45];
        v144 = v31[44];
        swift_task_dealloc(v25);
        swift_task_dealloc(v26);
        swift_task_dealloc(v27);
        swift_task_dealloc(v28);
        swift_task_dealloc(v29);
        swift_task_dealloc(v30);
        swift_task_dealloc(v32);
        swift_task_dealloc(v33);
        swift_task_dealloc(v34);
        swift_task_dealloc(v35);
        swift_task_dealloc(v115);
        swift_task_dealloc(v118);
        swift_task_dealloc(v120);
        swift_task_dealloc(v122);
        swift_task_dealloc(v124);
        swift_task_dealloc(v126);
        swift_task_dealloc(v128);
        swift_task_dealloc(v131);
        swift_task_dealloc(v134);
        swift_task_dealloc(v137);
        swift_task_dealloc(v140);
        swift_task_dealloc(v144);
        return ((uint64_t (*)(void))v31[1])();
      }
      else
      {
        v36 = v22;
        swift_bridgeObjectRelease();
        sub_10001BC14(v24, v23);
        v37 = _swiftEmptyArrayStorage[2];
        if (v37)
        {
          v38 = v1[65];
          v132 = v1[64];
          swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
          sub_10009A3AC(0, v37, 0);
          v39 = v1[67];
          sub_10005972C((uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80)), v39, type metadata accessor for TimeBasedKey);
          v40 = v39 + *(int *)(v132 + 24);
          v42 = *(_QWORD *)(v40 + 16);
          v41 = *(_QWORD *)(v40 + 24);
          sub_10001BBBC(v42, v41);
          sub_1007E7118(v42, v41);
          v44 = v43;
          sub_1007E3D28(v43, 0);
          v46 = v45;
          CCECCryptorRelease(v44);
          sub_10001BC14(v42, v41);
          __asm { BR              X9 }
        }
        swift_bridgeObjectRelease();
        v59 = v1[39];
        v58 = v1[40];
        sub_10001BBBC(v59, v58);
        v141 = sub_10095FD50((uint64_t)_swiftEmptyArrayStorage, v59, v58);
        v63 = v1[51];
        v65 = (_BYTE *)v1[48];
        v64 = (_BYTE *)v1[49];
        v135 = v1[50];
        v138 = (_BYTE *)v1[47];
        v66 = v1[42];
        v68 = v1[39];
        v67 = v1[40];
        v110 = v36;
        v69 = (_QWORD *)v1[36];
        v70 = v1[37];
        swift_bridgeObjectRelease();
        sub_10001BC14(v68, v67);
        v71 = v69[3];
        v72 = v69[4];
        sub_10001AA44(v69, v71);
        (*(void (**)(uint64_t, uint64_t))(v72 + 184))(v71, v72);
        v73 = type metadata accessor for KeySyncRecord(0);
        v74 = *(_QWORD *)(v70 + *(int *)(v73 + 20));
        v75 = v70 + *(int *)(v73 + 28);
        v76 = v63 + *(int *)(v135 + 24);
        v77 = type metadata accessor for Date(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v76, v75, v77);
        *(_QWORD *)(v63 + *(int *)(v135 + 20)) = v74;
        sub_10005972C(v63, (uint64_t)&v64[*(int *)(v66 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
        *v64 = 2;
        *(_QWORD *)&v64[*(int *)(v66 + 24)] = v110;
        sub_10005972C(v63, (uint64_t)&v65[*(int *)(v66 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
        *v65 = 3;
        *(_QWORD *)&v65[*(int *)(v66 + 24)] = v141;
        sub_10005972C(v63, (uint64_t)&v138[*(int *)(v66 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
        *v138 = 0;
        *(_QWORD *)&v138[*(int *)(v66 + 24)] = _swiftEmptyArrayStorage;
        v78 = sub_1007C80E4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
        v80 = *(_QWORD *)(v78 + 16);
        v79 = *(_QWORD *)(v78 + 24);
        if (v80 >= v79 >> 1)
          v78 = sub_1007C80E4(v79 > 1, v80 + 1, 1, v78);
        v81 = v1[51];
        v83 = (_BYTE *)v1[46];
        v82 = v1[47];
        v84 = v1[43];
        *(_QWORD *)(v78 + 16) = v80 + 1;
        v85 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
        v86 = *(_QWORD *)(v84 + 72);
        sub_1000126EC(v82, v78 + v85 + v86 * v80, type metadata accessor for KeyDropInterface.KeyPackage);
        sub_10005972C(v81, (uint64_t)&v83[*(int *)(v66 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
        *v83 = 1;
        *(_QWORD *)&v83[*(int *)(v66 + 24)] = _swiftEmptyArrayStorage;
        v88 = *(_QWORD *)(v78 + 16);
        v87 = *(_QWORD *)(v78 + 24);
        if (v88 >= v87 >> 1)
          v78 = sub_1007C80E4(v87 > 1, v88 + 1, 1, v78);
        v89 = v1[49];
        v91 = v1[45];
        v90 = v1[46];
        *(_QWORD *)(v78 + 16) = v88 + 1;
        sub_1000126EC(v90, v78 + v85 + v88 * v86, type metadata accessor for KeyDropInterface.KeyPackage);
        sub_10005972C(v89, v91, type metadata accessor for KeyDropInterface.KeyPackage);
        v93 = *(_QWORD *)(v78 + 16);
        v92 = *(_QWORD *)(v78 + 24);
        if (v93 >= v92 >> 1)
          v78 = sub_1007C80E4(v92 > 1, v93 + 1, 1, v78);
        v94 = v1[48];
        v96 = v1[44];
        v95 = v1[45];
        *(_QWORD *)(v78 + 16) = v93 + 1;
        sub_1000126EC(v95, v78 + v85 + v93 * v86, type metadata accessor for KeyDropInterface.KeyPackage);
        sub_10005972C(v94, v96, type metadata accessor for KeyDropInterface.KeyPackage);
        v98 = *(_QWORD *)(v78 + 16);
        v97 = *(_QWORD *)(v78 + 24);
        v99 = v85;
        if (v98 >= v97 >> 1)
          v78 = sub_1007C80E4(v97 > 1, v98 + 1, 1, v78);
        v100 = v1[72];
        v106 = v1[69];
        v107 = v1[68];
        v108 = v1[67];
        v109 = v1[66];
        v111 = v1[63];
        v113 = v1[60];
        v116 = v1[59];
        v119 = v1[58];
        v121 = v1[57];
        v123 = v1[56];
        v125 = v1[55];
        v127 = v1[54];
        v129 = v1[53];
        v133 = v1[52];
        v101 = v1[51];
        v102 = v143[48];
        v103 = v143[49];
        v136 = v143[47];
        v142 = v143[46];
        v104 = v78 + v99;
        v139 = v143[45];
        v105 = v143[44];
        *(_QWORD *)(v78 + 16) = v98 + 1;
        sub_1000126EC(v105, v104 + v98 * v86, type metadata accessor for KeyDropInterface.KeyPackage);
        sub_1000126B0(v102, type metadata accessor for KeyDropInterface.KeyPackage);
        sub_1000126B0(v103, type metadata accessor for KeyDropInterface.KeyPackage);
        sub_1000126B0(v101, type metadata accessor for KeyDropInterface.KeyAlignment);
        swift_task_dealloc(v100);
        swift_task_dealloc(v106);
        swift_task_dealloc(v107);
        swift_task_dealloc(v108);
        swift_task_dealloc(v109);
        swift_task_dealloc(v111);
        swift_task_dealloc(v113);
        swift_task_dealloc(v116);
        swift_task_dealloc(v119);
        swift_task_dealloc(v121);
        swift_task_dealloc(v123);
        swift_task_dealloc(v125);
        swift_task_dealloc(v127);
        swift_task_dealloc(v129);
        swift_task_dealloc(v133);
        swift_task_dealloc(v101);
        swift_task_dealloc(v103);
        swift_task_dealloc(v102);
        swift_task_dealloc(v136);
        swift_task_dealloc(v142);
        swift_task_dealloc(v139);
        swift_task_dealloc(v105);
        return ((uint64_t (*)(unint64_t))v143[1])(v78);
      }
    }
  }
}

uint64_t sub_1009590F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(*v2 + 608);
  v5 = *v2;
  *(_QWORD *)(v5 + 616) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v5 + 552);
    v7 = *(_QWORD *)(v5 + 544);
    v8 = *(_QWORD *)(v5 + 536);
    v9 = *(_QWORD *)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 504);
    v11 = *(_QWORD *)(v5 + 472);
    v12 = *(_QWORD *)(v5 + 480);
    v16 = *(_QWORD *)(v5 + 464);
    v17 = *(_QWORD *)(v5 + 456);
    v18 = *(_QWORD *)(v5 + 448);
    v19 = *(_QWORD *)(v5 + 440);
    v20 = *(_QWORD *)(v5 + 432);
    v21 = *(_QWORD *)(v5 + 424);
    v22 = *(_QWORD *)(v5 + 416);
    v23 = *(_QWORD *)(v5 + 408);
    v24 = *(_QWORD *)(v5 + 392);
    v25 = *(_QWORD *)(v5 + 384);
    v26 = *(_QWORD *)(v5 + 376);
    v27 = *(_QWORD *)(v5 + 368);
    v13 = *(_QWORD *)(v5 + 352);
    v28 = *(_QWORD *)(v5 + 360);
    swift_task_dealloc(*(_QWORD *)(v5 + 576));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v5 + 328);
    *(_QWORD *)(v5 + 624) = a1;
    return swift_task_switch(sub_1009592B4, v15, 0);
  }
}

uint64_t sub_1009592B4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _QWORD *v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _BYTE *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v1 = v0;
  v2 = v0[78];
  v3 = v0[77];
  v4 = v0[74];
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v114 = v0 + 27;
    v109 = v0 + 31;
    v111 = v0 + 29;
    v6 = v0[65];
    v129 = v1[64];
    sub_10009A3AC(0, v5, 0);
    v7 = v1[69];
    sub_10005972C(v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v7, type metadata accessor for TimeBasedKey);
    v8 = v7 + *(int *)(v129 + 24);
    v10 = *(_QWORD *)(v8 + 16);
    v9 = *(_QWORD *)(v8 + 24);
    sub_10001BBBC(v10, v9);
    sub_1007E7118(v10, v9);
    v12 = v3;
    if (!v3)
    {
      v13 = v11;
      sub_1007E3D28(v11, 0);
      v15 = v14;
      CCECCryptorRelease(v13);
      sub_10001BC14(v10, v9);
      __asm { BR              X9 }
    }
    v44 = static os_log_type_t.error.getter(v11);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v45 = qword_1011B77E0;
    v46 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v47 = swift_allocObject(v46, 72, 7);
    *(_OWORD *)(v47 + 16) = xmmword_100E22B00;
    *v109 = v12;
    swift_errorRetain(v12);
    v48 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v49 = String.init<A>(describing:)(v109, v48);
    v51 = v50;
    *(_QWORD *)(v47 + 56) = &type metadata for String;
    *(_QWORD *)(v47 + 64) = sub_10001AA00();
    *(_QWORD *)(v47 + 32) = v49;
    *(_QWORD *)(v47 + 40) = v51;
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "Error deriving advertisementKey: %@", 35, 2, v47);
    swift_bridgeObjectRelease();
    v52 = sub_1000D95A8();
    v53 = swift_allocError(&type metadata for CryptoTokenError, v52, 0, 0);
    *v54 = 0;
    swift_willThrow(v53);
    swift_errorRelease(v12);
    sub_10001BC14(v10, v9);
    _StringGuts.grow(_:)(35);
    v1[28] = 0xE000000000000000;
    v55 = v1 + 28;
    *(v55 - 1) = 0;
    v56._object = (void *)0x8000000100EC7AC0;
    v56._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v56);
    v55[1] = v53;
    v57 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    _print_unlocked<A, B>(_:_:)(v111, v114, v57, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *v114, *v55, "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = v0[39];
    v16 = v1[40];
    sub_10001BBBC(v1[39], v16);
    v18 = sub_10095FD50((uint64_t)_swiftEmptyArrayStorage, v17, v16);
    v20 = v1[39];
    v19 = v1[40];
    if (v3)
    {
      swift_bridgeObjectRelease();
      sub_10001BC14(v20, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v1[72];
      v22 = v1[69];
      v23 = v1[68];
      v24 = v1[67];
      v25 = v1[66];
      v26 = v1[63];
      v27 = v1[59];
      v28 = v1[60];
      v29 = v1;
      v32 = v1 + 57;
      v31 = v1[57];
      v30 = v32[1];
      v115 = v29[56];
      v117 = v29[55];
      v119 = v29[54];
      v121 = v29[53];
      v123 = v29[52];
      v125 = v29[51];
      v127 = v29[49];
      v130 = v29[48];
      v134 = v29[47];
      v137 = v29[46];
      v140 = v29[45];
      v144 = v29[44];
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v28);
      swift_task_dealloc(v27);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(v119);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v125);
      swift_task_dealloc(v127);
      swift_task_dealloc(v130);
      swift_task_dealloc(v134);
      swift_task_dealloc(v137);
      swift_task_dealloc(v140);
      swift_task_dealloc(v144);
      return ((uint64_t (*)(void))v29[1])();
    }
    else
    {
      v107 = v18;
      swift_bridgeObjectRelease();
      sub_10001BC14(v20, v19);
      v34 = *(_QWORD *)(v2 + 16);
      if (v34)
      {
        v35 = v1[65];
        v131 = v1[64];
        swift_bridgeObjectRetain(v2);
        sub_10009A3AC(0, v34, 0);
        v36 = v1[67];
        sub_10005972C(v2 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80)), v36, type metadata accessor for TimeBasedKey);
        v37 = v36 + *(int *)(v131 + 24);
        v38 = *(_QWORD *)(v37 + 16);
        v39 = *(_QWORD *)(v37 + 24);
        sub_10001BBBC(v38, v39);
        sub_1007E7118(v38, v39);
        v41 = v40;
        sub_1007E3D28(v40, 0);
        v43 = v42;
        CCECCryptorRelease(v41);
        sub_10001BC14(v38, v39);
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v59 = v1[39];
      v58 = v1[40];
      sub_10001BBBC(v59, v58);
      v60 = sub_10095FD50((uint64_t)_swiftEmptyArrayStorage, v59, v58);
      v61 = v1[50];
      v62 = v1[51];
      v63 = v1;
      v64 = (_BYTE *)v1[49];
      v132 = v61;
      v135 = (_BYTE *)v63[48];
      v141 = (_BYTE *)v63[47];
      v65 = v63[42];
      v67 = v63[39];
      v66 = v63[40];
      v69 = (_QWORD *)v63[36];
      v68 = v63[37];
      v138 = v60;
      swift_bridgeObjectRelease();
      sub_10001BC14(v67, v66);
      v70 = v69[3];
      v71 = v69[4];
      sub_10001AA44(v69, v70);
      (*(void (**)(uint64_t, uint64_t))(v71 + 184))(v70, v71);
      v72 = type metadata accessor for KeySyncRecord(0);
      v73 = *(_QWORD *)(v68 + *(int *)(v72 + 20));
      v74 = v68 + *(int *)(v72 + 28);
      v75 = v62 + *(int *)(v132 + 24);
      v76 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v75, v74, v76);
      *(_QWORD *)(v62 + *(int *)(v132 + 20)) = v73;
      sub_10005972C(v62, (uint64_t)&v64[*(int *)(v65 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
      *v64 = 2;
      *(_QWORD *)&v64[*(int *)(v65 + 24)] = v107;
      sub_10005972C(v62, (uint64_t)&v135[*(int *)(v65 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
      *v135 = 3;
      *(_QWORD *)&v135[*(int *)(v65 + 24)] = v138;
      sub_10005972C(v62, (uint64_t)&v141[*(int *)(v65 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
      *v141 = 0;
      *(_QWORD *)&v141[*(int *)(v65 + 24)] = _swiftEmptyArrayStorage;
      v77 = sub_1007C80E4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      v79 = *(_QWORD *)(v77 + 16);
      v78 = *(_QWORD *)(v77 + 24);
      if (v79 >= v78 >> 1)
        v77 = sub_1007C80E4(v78 > 1, v79 + 1, 1, v77);
      v80 = *(_QWORD *)(v143 + 408);
      v82 = *(_BYTE **)(v143 + 368);
      v81 = *(_QWORD *)(v143 + 376);
      v83 = *(_QWORD *)(v143 + 344);
      *(_QWORD *)(v77 + 16) = v79 + 1;
      v84 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      v85 = *(_QWORD *)(v83 + 72);
      sub_1000126EC(v81, v77 + v84 + v85 * v79, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_10005972C(v80, (uint64_t)&v82[*(int *)(v65 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
      *v82 = 1;
      *(_QWORD *)&v82[*(int *)(v65 + 24)] = _swiftEmptyArrayStorage;
      v87 = *(_QWORD *)(v77 + 16);
      v86 = *(_QWORD *)(v77 + 24);
      if (v87 >= v86 >> 1)
        v77 = sub_1007C80E4(v86 > 1, v87 + 1, 1, v77);
      v88 = *(_QWORD *)(v143 + 392);
      v90 = *(_QWORD *)(v143 + 360);
      v89 = *(_QWORD *)(v143 + 368);
      *(_QWORD *)(v77 + 16) = v87 + 1;
      sub_1000126EC(v89, v77 + v84 + v87 * v85, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_10005972C(v88, v90, type metadata accessor for KeyDropInterface.KeyPackage);
      v92 = *(_QWORD *)(v77 + 16);
      v91 = *(_QWORD *)(v77 + 24);
      if (v92 >= v91 >> 1)
        v77 = sub_1007C80E4(v91 > 1, v92 + 1, 1, v77);
      v93 = *(_QWORD *)(v143 + 384);
      v95 = *(_QWORD *)(v143 + 352);
      v94 = *(_QWORD *)(v143 + 360);
      *(_QWORD *)(v77 + 16) = v92 + 1;
      sub_1000126EC(v94, v77 + v84 + v92 * v85, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_10005972C(v93, v95, type metadata accessor for KeyDropInterface.KeyPackage);
      v97 = *(_QWORD *)(v77 + 16);
      v96 = *(_QWORD *)(v77 + 24);
      v98 = v84;
      if (v97 >= v96 >> 1)
        v77 = sub_1007C80E4(v96 > 1, v97 + 1, 1, v77);
      v99 = *(_QWORD *)(v143 + 576);
      v105 = *(_QWORD *)(v143 + 552);
      v106 = *(_QWORD *)(v143 + 544);
      v108 = *(_QWORD *)(v143 + 536);
      v110 = *(_QWORD *)(v143 + 528);
      v112 = *(_QWORD *)(v143 + 504);
      v113 = *(_QWORD *)(v143 + 480);
      v116 = *(_QWORD *)(v143 + 472);
      v118 = *(_QWORD *)(v143 + 464);
      v120 = *(_QWORD *)(v143 + 456);
      v122 = *(_QWORD *)(v143 + 448);
      v124 = *(_QWORD *)(v143 + 440);
      v126 = *(_QWORD *)(v143 + 432);
      v100 = *(_QWORD *)(v143 + 408);
      v128 = *(_QWORD *)(v143 + 424);
      v133 = *(_QWORD *)(v143 + 416);
      v101 = *(_QWORD *)(v143 + 384);
      v102 = *(_QWORD *)(v143 + 392);
      v136 = *(_QWORD *)(v143 + 376);
      v142 = *(_QWORD *)(v143 + 368);
      v103 = v77 + v98;
      v139 = *(_QWORD *)(v143 + 360);
      v104 = *(_QWORD *)(v143 + 352);
      *(_QWORD *)(v77 + 16) = v97 + 1;
      sub_1000126EC(v104, v103 + v97 * v85, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_1000126B0(v101, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_1000126B0(v102, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_1000126B0(v100, type metadata accessor for KeyDropInterface.KeyAlignment);
      swift_task_dealloc(v99);
      swift_task_dealloc(v105);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      swift_task_dealloc(v110);
      swift_task_dealloc(v112);
      swift_task_dealloc(v113);
      swift_task_dealloc(v116);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      swift_task_dealloc(v122);
      swift_task_dealloc(v124);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v133);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v101);
      swift_task_dealloc(v136);
      swift_task_dealloc(v142);
      swift_task_dealloc(v139);
      swift_task_dealloc(v104);
      return (*(uint64_t (**)(unint64_t))(v143 + 8))(v77);
    }
  }
}

uint64_t sub_10095AA44(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = v4;
  *(_BYTE *)(v5 + 96) = a2;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a3;
  return swift_task_switch(sub_10095AA64, 0, 0);
}

void sub_10095AA64()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v0 + 16) = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 56) = v2;
  if (v2 <= v1)
  {
    v3 = v1 - v2;
    if ((uint64_t)(v1 - v2) >= 0)
      goto LABEL_5;
  }
  else
  {
    if ((uint64_t)(v2 - v1) >= 0)
    {
      v3 = v1 - v2;
LABEL_5:
      *(_QWORD *)(v0 + 64) = v3;
      v4 = (_QWORD *)swift_task_alloc(dword_10110D224);
      *(_QWORD *)(v0 + 72) = v4;
      *v4 = v0;
      v4[1] = sub_10095AAFC;
      sub_10095AC4C(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 96), v2, 0);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10095AAFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 72);
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v6 = sub_10095AC40;
  }
  else
  {
    *(_QWORD *)(v4 + 88) = a1;
    v6 = sub_10095AB78;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10095AB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 64);
  result = sub_100302478(*(_QWORD *)(v0 + 88));
  if (!v1)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
  v3 = *(_QWORD *)(v0 + 56);
  v4 = v3 + 1;
  if (v3 == -1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_QWORD *)(v0 + 56) = v4;
  v5 = *(_QWORD *)(v0 + 40);
  if (v4 > v5)
  {
    if ((uint64_t)(v4 - v5) >= 0)
    {
      v6 = v5 - v4;
LABEL_8:
      *(_QWORD *)(v0 + 64) = v6;
      v7 = (_QWORD *)swift_task_alloc(dword_10110D224);
      *(_QWORD *)(v0 + 72) = v7;
      *v7 = v0;
      v7[1] = sub_10095AAFC;
      return sub_10095AC4C(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 96), v4, 0);
    }
    goto LABEL_10;
  }
  v6 = v5 - v4;
  if ((uint64_t)(v5 - v4) >= 0)
    goto LABEL_8;
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10095AC40()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10095AC4C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 144) = a3;
  *(_QWORD *)(v5 + 152) = v4;
  *(_BYTE *)(v5 + 114) = a4;
  *(_BYTE *)(v5 + 113) = a2;
  *(_QWORD *)(v5 + 136) = a1;
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 160) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 168) = v7;
  *(_QWORD *)(v5 + 176) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10095ACB8, 0, 0);
}

uint64_t sub_10095ACB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 152) + 120);
  *(_QWORD *)(v0 + 184) = v1;
  return swift_task_switch(sub_10095ACD4, v1, 0);
}

uint64_t sub_10095ACD4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_BYTE *)(v0 + 114);
  v3 = *(_BYTE *)(v0 + 113);
  v4 = *(_QWORD *)(v0 + 144);
  sub_100030784(*(_QWORD *)(v0 + 136), v0 + 16);
  v5 = swift_allocObject(&unk_10109BE18, 74, 7);
  *(_QWORD *)(v0 + 192) = v5;
  *(_QWORD *)(v5 + 16) = v1;
  sub_10000F9FC((__int128 *)(v0 + 16), v5 + 24);
  *(_QWORD *)(v5 + 64) = v4;
  *(_BYTE *)(v5 + 72) = v3;
  *(_BYTE *)(v5 + 73) = v2;
  v6 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc(v6);
  *(_QWORD *)(v0 + 200) = v7;
  *v7 = v0;
  v7[1] = sub_10095ADB4;
  return unsafeBlocking<A>(_:)(v0 + 96, sub_1009604F4, v5, &_s9KeyResultON);
}

uint64_t sub_10095ADB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 184);
    v5 = sub_10095B1D8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 184);
    swift_release();
    v5 = sub_10095AE24;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10095AE24()
{
  uint64_t v0;

  *(_OWORD *)(v0 + 216) = *(_OWORD *)(v0 + 96);
  *(_BYTE *)(v0 + 115) = *(_BYTE *)(v0 + 112);
  return swift_task_switch(sub_10095AE48, 0, 0);
}

void sub_10095AE48()
{
  __asm { BR              X10 }
}

uint64_t sub_10095AE94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, os_log_type_t type, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_100217264(*(_QWORD *)(v29 + 216), *(_QWORD *)(v29 + 224), 0);
  if ((*(_BYTE *)(v29 + 114) & 1) != 0)
  {
    v31 = sub_1000D94EC();
    v32 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v31, 0, 0);
    *v33 = 4;
    swift_willThrow(v32);
    swift_task_dealloc(*(_QWORD *)(v29 + 176));
    return (*(uint64_t (**)(void))(v29 + 8))();
  }
  else
  {
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v35 = *(_QWORD *)(v29 + 136);
    v36 = type metadata accessor for Logger(0);
    sub_10001A9E8(v36, (uint64_t)qword_1011B7940);
    v37 = sub_100030784(v35, (uint64_t)v27);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = *(_QWORD *)(v29 + 176);
      v51 = *(_QWORD *)(v29 + 168);
      v41 = *(_QWORD *)(v29 + 160);
      v42 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(32, -1);
      v53 = v52;
      *(_DWORD *)v42 = 141558275;
      *(_QWORD *)(v29 + 120) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v30, v28, v42 + 4, v42 + 12);
      *(_WORD *)(v42 + 12) = 2081;
      v50 = v39;
      v44 = *(_QWORD *)(v29 + 80);
      v43 = *(_QWORD *)(v29 + 88);
      sub_10001AA44(v27, v44);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v43 + 8) + 8) + 32))(v44);
      v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v41, v45);
      v48 = v47;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v40, v41);
      *(_QWORD *)(v29 + 128) = sub_100016940(v46, v48, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v28, v29 + 136, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
      _os_log_impl((void *)&_mh_execute_header, v38, v50, "Retrying key fetch with forceGenerate: %{private,mask.hash}s.", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    }

    v49 = (_QWORD *)swift_task_alloc(dword_10110D224);
    *(_QWORD *)(v29 + 232) = v49;
    *v49 = v29;
    v49[1] = sub_10095B214;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))sub_10095AC4C)(*(_QWORD *)(v29 + 136), *(unsigned __int8 *)(v29 + 113), *(_QWORD *)(v29 + 144), 1);
  }
}

uint64_t sub_10095B1D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10095B214(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 232);
  v5 = *v2;
  swift_task_dealloc(v4);
  v6 = swift_task_dealloc(*(_QWORD *)(v5 + 176));
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10095B274(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  unint64_t v25;

  v6 = type metadata accessor for SymmetricKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B7940);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    v24 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 4, v14 + 12);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Derive sharing root key: %llu.", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);
  }

  v24 = a1;
  v25 = a2;
  sub_10001BBBC(a1, a2);
  SymmetricKey.init<A>(data:)(&v24, &type metadata for Data, &protocol witness table for Data);
  v24 = a3;
  v15 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v17 = String.utf8Data.getter(v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  v24 = v17;
  v25 = v19;
  v20 = type metadata accessor for SHA256(0);
  v21 = sub_100006204(&qword_10110D460, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  v22 = sub_100035530();
  static HKDF.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)(v9, &v24, 32, v20, &type metadata for Data, v21, v22);
  sub_10001BC14(v17, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t type metadata accessor for SharingCircleKeyManager()
{
  return objc_opt_self(_TtC12searchpartyd23SharingCircleKeyManager);
}

BOOL sub_10095B4C8(unint64_t *a1, char a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  if (!a2)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    v8 = *a1;
    v9 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for KeyDropInterface.KeyAlignment(0) + 20));
    return v8 >= v9;
  }
  if (a2 == 1)
    v5 = 0x7261646E6F636553;
  else
    v5 = 0x6F4C657275636553;
  if (a2 == 1)
    v6 = 0xE900000000000079;
  else
    v6 = 0xEF736E6F69746163;
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, 0x7972616D697250, 0xE700000000000000, 0);
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    goto LABEL_12;
  v8 = *a1;
  v9 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for KeyDropInterface.KeyAlignment(0) + 20));
  if (v9)
    v9 = v9 / 0x60 + 1;
  return v8 >= v9;
}

uint64_t sub_10095B5D0()
{
  unsigned __int8 *v0;

  return sub_10090ECE0(*v0);
}

Swift::Int sub_10095B5D8(uint64_t *a1, uint64_t *a2, void (*a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  Swift::Int v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  Swift::Int v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  Swift::Int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  _QWORD *v108;
  Swift::Int v109;
  Swift::Int v110;
  uint64_t v111;
  char *v112;

  v6 = a1[1];
  result = _minimumMergeRunLength(_:)(v6);
  if (result >= v6)
  {
    if (v6 < 0)
      goto LABEL_136;
    if ((unint64_t)v6 >= 2)
    {
      v89 = 0;
      v90 = *a1;
      for (i = 1; i != v6; ++i)
      {
        v92 = *(_QWORD *)(v90 + 24 * i);
        v93 = v89;
        do
        {
          v94 = v90 + v93;
          if (v92 >= *(_QWORD *)(v90 + v93))
            break;
          if (!v90)
            goto LABEL_140;
          v95 = v90 + v93;
          v96 = *(_OWORD *)(v90 + v93 + 32);
          *(_OWORD *)(v90 + v93 + 24) = *(_OWORD *)v94;
          *(_QWORD *)(v90 + v93 + 40) = *(_QWORD *)(v94 + 16);
          *(_QWORD *)v95 = v92;
          *(_OWORD *)(v95 + 8) = v96;
          v93 -= 24;
        }
        while (v93 != -24);
        v89 += 24;
      }
    }
    return result;
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
    goto LABEL_145;
  v109 = result;
  v106 = a1;
  if (v6 < 2)
  {
    v12 = _swiftEmptyArrayStorage;
    v112 = (char *)&_swiftEmptyArrayStorage[4];
    if (v6 != 1)
    {
      v16 = _swiftEmptyArrayStorage[2];
      v15 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      v108 = v12;
      if (v16 >= 2)
      {
        v97 = *v106;
        do
        {
          v98 = v16 - 2;
          if (v16 < 2)
            goto LABEL_131;
          if (!v97)
            goto LABEL_144;
          v99 = v15;
          v100 = v15 + 32;
          v101 = *(_QWORD *)&v15[16 * v98 + 32];
          v102 = *(_QWORD *)&v100[16 * v16 - 8];
          sub_10095BCF0((char *)(v97 + 24 * v101), (char *)(v97 + 24 * *(_QWORD *)&v100[16 * v16 - 16]), v97 + 24 * v102, v112, a3);
          if (v3)
            break;
          if (v102 < v101)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0)
            v99 = sub_10088F088((uint64_t)v99);
          if (v98 >= *((_QWORD *)v99 + 2))
            goto LABEL_133;
          v103 = &v99[16 * v98 + 32];
          *(_QWORD *)v103 = v101;
          *((_QWORD *)v103 + 1) = v102;
          v104 = *((_QWORD *)v99 + 2);
          if (v16 > v104)
            goto LABEL_134;
          memmove(&v99[16 * v16 + 16], &v99[16 * v16 + 32], 16 * (v104 - v16));
          v15 = v99;
          *((_QWORD *)v99 + 2) = v104 - 1;
          v16 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      v108[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v108 = _swiftEmptyArrayStorage;
  }
  else
  {
    v9 = v8 >> 1;
    v10 = sub_10001A9A8(a2);
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(v9, v10);
    *(_QWORD *)(v11 + 16) = v9;
    v108 = (_QWORD *)v11;
    v112 = (char *)(v11 + 32);
  }
  v13 = 0;
  v14 = *a1;
  v107 = *a1 + 48;
  v105 = *a1 - 24;
  v15 = (char *)_swiftEmptyArrayStorage;
  v110 = v6;
  v111 = *a1;
  while (1)
  {
    v17 = v13++;
    if (v13 < v6)
    {
      v18 = *(_QWORD *)(v14 + 24 * v13);
      v19 = *(_QWORD *)(v14 + 24 * v17);
      v13 = v17 + 2;
      if (v17 + 2 < v6)
      {
        v20 = (unint64_t *)(v107 + 24 * v17);
        v21 = v18;
        while (1)
        {
          v23 = *v20;
          v20 += 3;
          v22 = v23;
          if (v18 < v19 == v23 >= v21)
            break;
          ++v13;
          v21 = v22;
          if (v6 == v13)
          {
            v13 = v6;
            break;
          }
        }
      }
      if (v18 < v19)
      {
        if (v13 < v17)
          goto LABEL_137;
        if (v17 < v13)
        {
          v24 = 24 * v13;
          v25 = 24 * v17;
          v26 = v13;
          v27 = v17;
          do
          {
            if (v27 != --v26)
            {
              if (!v14)
                goto LABEL_143;
              v28 = v14 + v25;
              v29 = v14 + v24;
              v30 = *(_QWORD *)(v14 + v25 + 16);
              v31 = *(_OWORD *)(v14 + v25);
              v32 = *(_QWORD *)(v14 + v24 - 8);
              *(_OWORD *)v28 = *(_OWORD *)(v14 + v24 - 24);
              *(_QWORD *)(v28 + 16) = v32;
              *(_OWORD *)(v29 - 24) = v31;
              *(_QWORD *)(v29 - 8) = v30;
            }
            ++v27;
            v24 -= 24;
            v25 += 24;
          }
          while (v27 < v26);
        }
      }
    }
    if (v13 >= v6)
      goto LABEL_46;
    if (__OFSUB__(v13, v17))
      goto LABEL_135;
    if (v13 - v17 >= v109)
      goto LABEL_46;
    v33 = v17 + v109;
    if (__OFADD__(v17, v109))
      goto LABEL_138;
    if (v33 >= v6)
      v33 = v6;
    if (v33 < v17)
      break;
    if (v13 != v33)
    {
      v34 = v105 + 24 * v13;
      do
      {
        v35 = *(_QWORD *)(v14 + 24 * v13);
        v36 = v17;
        v37 = v34;
        do
        {
          if (v35 >= *(_QWORD *)v37)
            break;
          if (!v14)
            goto LABEL_141;
          v38 = *(_OWORD *)(v37 + 32);
          *(_OWORD *)(v37 + 24) = *(_OWORD *)v37;
          *(_QWORD *)(v37 + 40) = *(_QWORD *)(v37 + 16);
          *(_QWORD *)v37 = v35;
          *(_OWORD *)(v37 + 8) = v38;
          v37 -= 24;
          ++v36;
        }
        while (v13 != v36);
        ++v13;
        v34 += 24;
      }
      while (v13 != v33);
      v13 = v33;
    }
LABEL_46:
    if (v13 < v17)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      v15 = sub_10088E710(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
    v40 = *((_QWORD *)v15 + 2);
    v39 = *((_QWORD *)v15 + 3);
    v16 = v40 + 1;
    v14 = v111;
    if (v40 >= v39 >> 1)
    {
      v88 = sub_10088E710((char *)(v39 > 1), v40 + 1, 1, v15);
      v14 = v111;
      v15 = v88;
    }
    *((_QWORD *)v15 + 2) = v16;
    v41 = v15 + 32;
    v42 = &v15[16 * v40 + 32];
    *(_QWORD *)v42 = v17;
    *((_QWORD *)v42 + 1) = v13;
    if (v40)
    {
      while (1)
      {
        v43 = v16 - 1;
        if (v16 >= 4)
        {
          v48 = &v41[16 * v16];
          v49 = *((_QWORD *)v48 - 8);
          v50 = *((_QWORD *)v48 - 7);
          v54 = __OFSUB__(v50, v49);
          v51 = v50 - v49;
          if (v54)
            goto LABEL_119;
          v53 = *((_QWORD *)v48 - 6);
          v52 = *((_QWORD *)v48 - 5);
          v54 = __OFSUB__(v52, v53);
          v46 = v52 - v53;
          v47 = v54;
          if (v54)
            goto LABEL_120;
          v55 = v16 - 2;
          v56 = &v41[16 * v16 - 32];
          v58 = *(_QWORD *)v56;
          v57 = *((_QWORD *)v56 + 1);
          v54 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          if (v54)
            goto LABEL_122;
          v54 = __OFADD__(v46, v59);
          v60 = v46 + v59;
          if (v54)
            goto LABEL_125;
          if (v60 >= v51)
          {
            v78 = &v41[16 * v43];
            v80 = *(_QWORD *)v78;
            v79 = *((_QWORD *)v78 + 1);
            v54 = __OFSUB__(v79, v80);
            v81 = v79 - v80;
            if (v54)
              goto LABEL_129;
            v71 = v46 < v81;
            goto LABEL_83;
          }
        }
        else
        {
          if (v16 != 3)
          {
            v72 = *((_QWORD *)v15 + 4);
            v73 = *((_QWORD *)v15 + 5);
            v54 = __OFSUB__(v73, v72);
            v65 = v73 - v72;
            v66 = v54;
            goto LABEL_77;
          }
          v45 = *((_QWORD *)v15 + 4);
          v44 = *((_QWORD *)v15 + 5);
          v54 = __OFSUB__(v44, v45);
          v46 = v44 - v45;
          v47 = v54;
        }
        if ((v47 & 1) != 0)
          goto LABEL_121;
        v55 = v16 - 2;
        v61 = &v41[16 * v16 - 32];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v64 = __OFSUB__(v62, v63);
        v65 = v62 - v63;
        v66 = v64;
        if (v64)
          goto LABEL_124;
        v67 = &v41[16 * v43];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v54 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v54)
          goto LABEL_127;
        if (__OFADD__(v65, v70))
          goto LABEL_128;
        if (v65 + v70 >= v46)
        {
          v71 = v46 < v70;
LABEL_83:
          if (v71)
            v43 = v55;
          goto LABEL_85;
        }
LABEL_77:
        if ((v66 & 1) != 0)
          goto LABEL_123;
        v74 = &v41[16 * v43];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v54 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v54)
          goto LABEL_126;
        if (v77 < v65)
          goto LABEL_15;
LABEL_85:
        v82 = v43 - 1;
        if (v43 - 1 >= v16)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v14)
          goto LABEL_142;
        v83 = &v41[16 * v82];
        v84 = *(_QWORD *)v83;
        v85 = &v41[16 * v43];
        v86 = *((_QWORD *)v85 + 1);
        sub_10095BCF0((char *)(v14 + 24 * *(_QWORD *)v83), (char *)(v14 + 24 * *(_QWORD *)v85), v14 + 24 * v86, v112, a3);
        if (v3)
          goto LABEL_113;
        if (v86 < v84)
          goto LABEL_116;
        if (v43 > *((_QWORD *)v15 + 2))
          goto LABEL_117;
        *(_QWORD *)v83 = v84;
        *(_QWORD *)&v41[16 * v82 + 8] = v86;
        v87 = *((_QWORD *)v15 + 2);
        if (v43 >= v87)
          goto LABEL_118;
        v16 = v87 - 1;
        memmove(&v41[16 * v43], v85 + 16, 16 * (v87 - 1 - v43));
        *((_QWORD *)v15 + 2) = v87 - 1;
        v14 = v111;
        if (v87 <= 2)
          goto LABEL_15;
      }
    }
    v16 = 1;
LABEL_15:
    v6 = v110;
    if (v13 >= v110)
    {
      v12 = v108;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10095BCF0(char *__src, char *a2, unint64_t a3, char *__dst, void (*a5)(_QWORD, _QWORD, _QWORD))
{
  char *v5;
  char *v7;
  char *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD);
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  char *v27;
  char *v28;
  char *v29;

  v5 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = a2 - __src;
  v10 = (a2 - __src) / 24;
  v11 = a3 - (_QWORD)a2;
  v12 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v29 = __src;
  v28 = __dst;
  if (v10 >= v12)
  {
    if (v11 >= -23)
    {
      if (__dst != a2 || &a2[24 * v12] <= __dst)
      {
        v18 = a5;
        memmove(__dst, a2, 24 * v12);
        a5 = v18;
      }
      v19 = &v5[24 * v12];
      v27 = v19;
      v29 = v7;
      if (v8 < v7 && v11 >= 24)
      {
        v20 = a3 - 24;
        v21 = v7;
        while (1)
        {
          v22 = (char *)(v20 + 24);
          v23 = *((_QWORD *)v21 - 3);
          v21 -= 24;
          if (*((_QWORD *)v19 - 3) >= v23)
          {
            v27 = v19 - 24;
            if (v22 < v19 || v20 >= (unint64_t)v19 || v22 != v19)
            {
              v25 = *(_OWORD *)(v19 - 24);
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 - 1);
              *(_OWORD *)v20 = v25;
            }
            v21 = v7;
            v19 -= 24;
            if (v7 <= v8)
              goto LABEL_38;
          }
          else
          {
            if (v22 != v7 || v20 >= (unint64_t)v7)
            {
              v24 = *(_OWORD *)v21;
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
              *(_OWORD *)v20 = v24;
            }
            v29 = v21;
            if (v21 <= v8)
              goto LABEL_38;
          }
          v20 -= 24;
          v7 = v21;
          if (v19 <= v5)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v9 >= -23)
  {
    if (__dst != __src || &__src[24 * v10] <= __dst)
    {
      v13 = a5;
      memmove(__dst, __src, 24 * v10);
      a5 = v13;
    }
    v14 = &v5[24 * v10];
    v27 = v14;
    if ((unint64_t)v7 < a3 && v9 >= 24)
    {
      do
      {
        if (*(_QWORD *)v7 >= *(_QWORD *)v5)
        {
          if (v8 != v5)
          {
            v17 = *(_OWORD *)v5;
            *((_QWORD *)v8 + 2) = *((_QWORD *)v5 + 2);
            *(_OWORD *)v8 = v17;
          }
          v5 += 24;
          v28 = v5;
          v15 = v7;
        }
        else
        {
          v15 = v7 + 24;
          if (v8 < v7 || v8 >= v15 || v8 != v7)
          {
            v16 = *(_OWORD *)v7;
            *((_QWORD *)v8 + 2) = *((_QWORD *)v7 + 2);
            *(_OWORD *)v8 = v16;
          }
        }
        v8 += 24;
        if (v5 >= v14)
          break;
        v7 = v15;
      }
      while ((unint64_t)v15 < a3);
      v29 = v8;
    }
LABEL_38:
    a5(&v29, &v28, &v27);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10095BFB8@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = a1;
  v4 = (uint64_t)&a1[*(int *)(sub_10001A9A8(&qword_10110D508) + 48)];
  v5 = sub_10001A9A8(&qword_101104210);
  LOBYTE(v2) = *v2;
  result = sub_10005972C(v4, (uint64_t)&a2[*(int *)(v5 + 48)], type metadata accessor for BookmarkMetaData);
  *a2 = (_BYTE)v2;
  return result;
}

uint64_t sub_10095C020(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v10 = type metadata accessor for BookmarkMetaData(0);
  v49 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v41 = (uint64_t)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)v40 - v13;
  v15 = sub_10001A9A8(&qword_10110D500);
  __chkstk_darwin(v15);
  v17 = (unsigned __int8 *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = -1 << *(_BYTE *)(a1 + 32);
  v19 = ~v18;
  v20 = *(_QWORD *)(a1 + 64);
  v21 = -v18;
  v42 = a1;
  v43 = a1 + 64;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v44 = v19;
  v45 = 0;
  v46 = v22 & v20;
  v47 = a2;
  v48 = a3;
  v40[2] = a1;
  swift_bridgeObjectRetain(a1);
  v40[1] = a3;
  swift_retain();
  sub_100B27DB4((uint64_t)v17);
  v23 = sub_10001A9A8(&qword_101104210);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v17, 1, v23) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10007CC38(v42);
    return swift_release();
  }
  while (1)
  {
    v26 = *v17;
    sub_1000126EC((uint64_t)&v17[*(int *)(v23 + 48)], (uint64_t)v14, type metadata accessor for BookmarkMetaData);
    v27 = *a5;
    v29 = sub_100518EE0(v26);
    v30 = *(_QWORD *)(v27 + 16);
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      break;
    v33 = v28;
    if (*(_QWORD *)(v27 + 24) >= v32)
    {
      if ((a4 & 1) != 0)
      {
        if ((v28 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_100A9A1A4();
        if ((v33 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_100A859AC(v32, a4 & 1);
      v34 = sub_100518EE0(v26);
      if ((v33 & 1) != (v35 & 1))
        goto LABEL_22;
      v29 = v34;
      if ((v33 & 1) != 0)
      {
LABEL_7:
        v25 = v41;
        sub_10005972C((uint64_t)v14, v41, type metadata accessor for BookmarkMetaData);
        sub_1000126B0((uint64_t)v14, type metadata accessor for BookmarkMetaData);
        sub_1004DB738(v25, *(_QWORD *)(*a5 + 56) + *(_QWORD *)(v49 + 72) * v29);
        goto LABEL_8;
      }
    }
    v36 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
    *(_BYTE *)(v36[6] + v29) = v26;
    sub_1000126EC((uint64_t)v14, v36[7] + *(_QWORD *)(v49 + 72) * v29, type metadata accessor for BookmarkMetaData);
    v37 = v36[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_21;
    v36[2] = v39;
LABEL_8:
    sub_100B27DB4((uint64_t)v17);
    v23 = sub_10001A9A8(&qword_101104210);
    a4 = 1;
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v17, 1, v23) == 1)goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for KeyDropInterface.KeyType);
  __break(1u);
  return result;
}

uint64_t sub_10095C354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[13] = a2;
  v4[14] = a4;
  v4[12] = a1;
  v7 = type metadata accessor for Date(0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v4[17] = v9;
  v4[18] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(type metadata accessor for KeySyncRecord(0) - 8);
  v4[19] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[20] = v11;
  v4[21] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[5] = &type metadata for PrimaryIndex;
  v4[6] = sub_100336BAC();
  v4[2] = a3;
  return swift_task_switch(sub_10095C404, a4, 0);
}

uint64_t sub_10095C404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 104);
  sub_10005972C(*(_QWORD *)(v0 + 96), v1, type metadata accessor for KeySyncRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v7, v6);
  sub_100030784(v0 + 16, v0 + 56);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (v2 + v10 + v9) & ~v10;
  v12 = (v17 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_10109E1E0, v12 + 40, v8 | v10 | 7);
  *(_QWORD *)(v0 + 176) = v13;
  *(_QWORD *)(v13 + 16) = v18;
  sub_1000126EC(v1, v13 + v9, type metadata accessor for KeySyncRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v3, v6);
  sub_10000F9FC((__int128 *)(v0 + 56), v13 + v12);
  v14 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc(v14);
  *(_QWORD *)(v0 + 184) = v15;
  *v15 = v0;
  v15[1] = sub_10095C56C;
  return unsafeBlocking<A>(_:)(v15, sub_100961B00, v13, (char *)&type metadata for () + 8);
}

uint64_t sub_10095C56C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_task_switch(sub_10095C5CC, v1, 0);
}

uint64_t sub_10095C5CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10095C614(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  *(_BYTE *)(v4 + 288) = a3;
  *(_QWORD *)(v4 + 152) = a2;
  *(_QWORD *)(v4 + 160) = a4;
  v7 = type metadata accessor for DateInterval(0);
  *(_QWORD *)(v4 + 168) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 176) = v8;
  v9 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v4 + 184) = v9;
  *(_QWORD *)(v4 + 192) = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FD558);
  *(_QWORD *)(v4 + 200) = v10;
  *(_QWORD *)(v4 + 208) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  *(_QWORD *)(v4 + 216) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v4 + 224) = v12;
  v13 = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v4 + 232) = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 240) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 248) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 40) = type metadata accessor for OwnedBeaconRecord(0);
  *(_QWORD *)(v4 + 48) = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v15 = sub_100018F08((_QWORD *)(v4 + 16));
  sub_10005972C(a1, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  return swift_task_switch(sub_10095C73C, a4, 0);
}

uint64_t sub_10095C73C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 160);
  sub_100030784(v0 + 16, v0 + 56);
  v2 = swift_allocObject(&unk_10109BF08, 64, 7);
  *(_QWORD *)(v0 + 256) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  sub_10000F9FC((__int128 *)(v0 + 56), v2 + 24);
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 264) = v4;
  *v4 = v0;
  v4[1] = sub_10095C7EC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 208), sub_100963214, v2, *(_QWORD *)(v0 + 200));
}

uint64_t sub_10095C7EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  swift_release();
  return swift_task_switch(sub_10095C84C, v1, 0);
}

uint64_t sub_10095C84C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  char v28;

  v1 = *(char **)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  v24 = *(_QWORD *)(v0 + 232);
  v4 = *(uint64_t **)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 192);
  v23 = v6;
  v7 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 184);
  v28 = *(_BYTE *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 152);
  v27 = *v4;
  v25 = *(_QWORD *)(v0 + 160);
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 32);
  v26(v2, (char *)v4 + *(int *)(*(_QWORD *)(v0 + 200) + 48), v5);
  sub_100030784(v0 + 16, v0 + 96);
  v10 = v6;
  v11 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v9, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v1, v2, v5);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v12 + 64) & ~v12;
  v14 = (v22 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned __int8 *)(v3 + 80);
  v16 = (v15 + v14 + 8) & ~v15;
  v17 = swift_allocObject(&unk_10109BF30, v16 + v24 + 1, v12 | v15 | 7);
  *(_QWORD *)(v0 + 272) = v17;
  *(_QWORD *)(v17 + 16) = v25;
  sub_10000F9FC((__int128 *)(v0 + 96), v17 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v17 + v13, v23, v11);
  *(_QWORD *)(v17 + v14) = v27;
  v26(v17 + v16, v1, v5);
  *(_BYTE *)(v17 + v16 + v24) = v28;
  v18 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v19 = (_QWORD *)swift_task_alloc(v18);
  *(_QWORD *)(v0 + 280) = v19;
  v20 = sub_10001A9A8(&qword_10110D498);
  *v19 = v0;
  v19[1] = sub_10095CA20;
  return unsafeBlocking<A>(_:)(v0 + 136, sub_100960634, v17, v20);
}

uint64_t sub_10095CA20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_release();
  return swift_task_switch(sub_10095CA80, v1, 0);
}

uint64_t sub_10095CA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 192);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(v1, *(_QWORD *)(v0 + 216));
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v6);
}

size_t sub_10095CB14(size_t result, unint64_t a2)
{
  const void *v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (!result)
    return (size_t)_swiftEmptyArrayStorage;
  v3 = (const void *)result;
  v4 = a2 - result;
  if (a2 == result)
    return (size_t)_swiftEmptyArrayStorage;
  if (v4 < 1)
  {
    v5 = _swiftEmptyArrayStorage;
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    v6 = sub_10001A9A8(&qword_1010ED318);
    v5 = (_QWORD *)swift_allocObject(v6, v4 + 32, 7);
    result = j__malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2)
      goto LABEL_13;
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10095CBC4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64x2_t *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;

  v47 = a1;
  v44 = type metadata accessor for BookmarkMetaData(0);
  v42 = *(_QWORD *)(v44 - 8);
  v5 = __chkstk_darwin(v44);
  v46 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v43 = (int64x2_t *)((char *)&v39 - v7);
  v8 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v13 = 0;
  v40 = v12;
  v41 = a2 + 64;
  if (!v11)
    goto LABEL_7;
LABEL_4:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    v16 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + i);
    v17 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * i);
    v19 = *v17;
    v18 = v17[1];
    sub_10001BBBC(*v17, v18);
    if ((sub_100A070EC(v16, a3) & 1) != 0)
    {
      v24 = v43;
      v23 = v44;
      v45 = &v43->i8[*(int *)(v44 + 20)];
      v25 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v45, 1, 1, v25);
      *v24 = vdupq_n_s64(1uLL);
      v24->i8[*(int *)(v23 + 24)] = v16;
      sub_1000126EC((uint64_t)v24, v46, type metadata accessor for BookmarkMetaData);
      v26 = v47;
      LODWORD(v45) = swift_isUniquelyReferenced_nonNull_native(v47);
      v48 = v26;
      v28 = sub_100518EE0(v16);
      v29 = v26[2];
      v30 = (v27 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
        goto LABEL_38;
      if (v26[3] >= v31)
      {
        if ((v45 & 1) == 0)
        {
          LODWORD(v47) = v27;
          sub_100A9A1A4();
          LOBYTE(v27) = (_BYTE)v47;
        }
      }
      else
      {
        LODWORD(v47) = v27;
        sub_100A859AC(v31, v45);
        v32 = sub_100518EE0(v16);
        v33 = v27 & 1;
        LOBYTE(v27) = (_BYTE)v47;
        if ((v47 & 1) != v33)
          goto LABEL_40;
        v28 = v32;
      }
      v34 = v48;
      v47 = v48;
      if ((v27 & 1) != 0)
      {
        sub_1004DB738(v46, v48[7] + *(_QWORD *)(v42 + 72) * v28);
      }
      else
      {
        v48[(v28 >> 6) + 8] |= 1 << v28;
        *(_BYTE *)(v34[6] + v28) = v16;
        sub_1000126EC(v46, v34[7] + *(_QWORD *)(v42 + 72) * v28, type metadata accessor for BookmarkMetaData);
        v35 = v34[2];
        v36 = __OFADD__(v35, 1);
        v37 = v35 + 1;
        if (v36)
          goto LABEL_39;
        v34[2] = v37;
      }
      swift_bridgeObjectRelease();
      sub_10001BC14(v19, v18);
      v12 = v40;
      v8 = v41;
      if (v11)
        goto LABEL_4;
    }
    else
    {
      sub_10001BC14(v19, v18);
      if (v11)
        goto LABEL_4;
    }
LABEL_7:
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v12)
      goto LABEL_35;
    v21 = *(_QWORD *)(v8 + 8 * v20);
    ++v13;
    if (!v21)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v12)
        goto LABEL_35;
      v21 = *(_QWORD *)(v8 + 8 * v13);
      if (!v21)
      {
        v13 = v20 + 2;
        if (v20 + 2 >= v12)
          goto LABEL_35;
        v21 = *(_QWORD *)(v8 + 8 * v13);
        if (!v21)
        {
          v13 = v20 + 3;
          if (v20 + 3 >= v12)
            goto LABEL_35;
          v21 = *(_QWORD *)(v8 + 8 * v13);
          if (!v21)
            break;
        }
      }
    }
LABEL_22:
    v11 = (v21 - 1) & v21;
  }
  v22 = v20 + 4;
  if (v22 >= v12)
  {
LABEL_35:
    swift_release();
    return (uint64_t)v47;
  }
  v21 = *(_QWORD *)(v8 + 8 * v22);
  if (v21)
  {
    v13 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v12)
      goto LABEL_35;
    v21 = *(_QWORD *)(v8 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for KeyDropInterface.KeyType);
  __break(1u);
  return result;
}

uint64_t sub_10095CF6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  _QWORD v24[17];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];

  v5 = type metadata accessor for KeyDropJoinToken(0);
  v24[3] = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v24[9] = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v24[8] = (char *)v24 - v8;
  v9 = type metadata accessor for SharingCircleSecretValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v26 = (uint64_t)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7940);
  swift_bridgeObjectRetain(a1);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v25 = v9;
  if (v16)
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v17 = 134217984;
    v27 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Initializing SharingCircleKeychain with %ld secretValues.", v17, 0xCu);
    v18 = v17;
    v9 = v25;
    swift_slowDealloc(v18, -1, -1);

    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
  }
  else
  {

    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 16))
    {
LABEL_5:
      v24[1] = a2;
      v24[2] = a1;
      v24[15] = 0;
      v24[16] = v2;
      v24[11] = 0;
      v24[13] = 0;
      v19 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v20 = *(_QWORD *)(v10 + 72);
      v28[3] = _swiftEmptyArrayStorage;
      v24[10] = 0xF000000000000000;
      v24[12] = 0xF000000000000000;
      v24[14] = 0xF000000000000000;
      v21 = v26;
      v24[7] = v20;
      sub_10005972C(v19, v26, type metadata accessor for SharingCircleSecretValue);
      v22 = (char *)&loc_10095D1B4 + dword_10095D674[swift_getEnumCaseMultiPayload(v21, v9)];
      __asm { BR              X9 }
    }
  }
  result = swift_bridgeObjectRelease();
  *a2 = 0;
  a2[1] = 0xF000000000000000;
  a2[2] = 0;
  a2[3] = 0xF000000000000000;
  a2[4] = _swiftEmptyArrayStorage;
  a2[5] = 0;
  a2[6] = 0xF000000000000000;
  a2[7] = &_swiftEmptyDictionarySingleton;
  return result;
}

_QWORD *sub_10095D688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;

  v69 = a2;
  v70 = a3;
  v4 = sub_10001A9A8(&qword_10110D468);
  v5 = __chkstk_darwin(v4);
  v65 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v64 = (uint64_t)&v62 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v62 - v10;
  __chkstk_darwin(v9);
  v86 = (uint64_t)&v62 - v12;
  v13 = type metadata accessor for EncryptedData(0);
  v68 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = _swiftEmptyArrayStorage;
  if (v16)
  {
    v63 = v11;
    v89 = _swiftEmptyArrayStorage;
    sub_10009A3AC(0, v16, 0);
    v17 = v89;
    v67 = type metadata accessor for PropertyListDecoder(0);
    v18 = (unint64_t *)(a1 + 48);
    v62 = v15;
    v66 = v13;
    while (1)
    {
      v85 = v17;
      v19 = *(v18 - 1);
      v77 = *(v18 - 2);
      v78 = v16;
      v21 = *v18;
      v20 = v18[1];
      v22 = v18[2];
      v23 = v18[3];
      v24 = v18[5];
      v87 = v18[4];
      v76 = v18;
      v25 = v18[6];
      swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
      sub_10001BBBC(v19, v21);
      v80 = v22;
      v81 = v20;
      sub_10001BD08(v20, v22);
      v82 = v23;
      sub_10001BD08(v23, v87);
      v83 = v25;
      v84 = v24;
      v26 = v25;
      v27 = v66;
      sub_10001BD08(v24, v26);
      v28 = sub_10001BBBC(v19, v21);
      v29 = PropertyListDecoder.init()(v28);
      v30 = sub_100006204(&qword_1010F1950, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedData, (uint64_t)&protocol conformance descriptor for EncryptedData);
      v79 = v21;
      v17 = (_QWORD *)v29;
      v31 = v88;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v27, v19, v21, v27, v30);
      v88 = v31;
      if (v31)
        break;
      v32 = EncryptedData.decrypt(key:)(v69, v70);
      v33 = v15;
      v88 = 0;
      v35 = v34;
      v36 = v68;
      v37 = *(void (**)(char *, uint64_t))(v68 + 8);
      v37(v33, v27);
      swift_release();
      v38 = v86;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v86, 1, 1, v27);
      v39 = v38;
      v40 = (uint64_t)v63;
      sub_10000F9B8(v39, (uint64_t)v63, &qword_10110D468);
      v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      LODWORD(v36) = v41(v40, 1, v27);
      v42 = sub_10001BBBC(v32, v35);
      if ((_DWORD)v36 == 1)
      {
        sub_100004048(v40, &qword_10110D468);
        v74 = 0xF000000000000000;
        v75 = 0;
      }
      else
      {
        v43 = EncryptedData.cipherText.getter(v42);
        v74 = v44;
        v75 = v43;
        v37((char *)v40, v27);
      }
      v45 = v64;
      v46 = v86;
      sub_10000F9B8(v86, v64, &qword_10110D468);
      if (v41(v45, 1, v27) == 1)
      {
        sub_100004048(v45, &qword_10110D468);
        v72 = 0xF000000000000000;
        v73 = 0;
      }
      else
      {
        v47 = EncryptedData.initializationVector.getter();
        v72 = v48;
        v73 = v47;
        v37((char *)v45, v27);
      }
      v49 = v65;
      sub_10000F9B8(v46, v65, &qword_10110D468);
      if (v41(v49, 1, v27) == 1)
      {
        sub_10001BC14(v32, v35);
        sub_100004048(v46, &qword_10110D468);
        sub_100004048(v49, &qword_10110D468);
        v71 = 0;
        v50 = 0xF000000000000000;
      }
      else
      {
        v71 = EncryptedData.tag.getter();
        v50 = v51;
        sub_10001BC14(v32, v35);
        sub_100004048(v46, &qword_10110D468);
        v37((char *)v49, v27);
      }
      v17 = v85;
      v52 = v79;
      sub_10001BC14(v19, v79);
      sub_10001BC14(v19, v52);
      sub_10001EF3C(v81, v80);
      sub_10001EF3C(v82, v87);
      sub_10001EF3C(v84, v83);
      v89 = v17;
      v54 = v17[2];
      v53 = v17[3];
      if (v54 >= v53 >> 1)
      {
        sub_10009A3AC(v53 > 1, v54 + 1, 1);
        v17 = v89;
      }
      v55 = v77;
      v18 = v76 + 9;
      v17[2] = v54 + 1;
      v56 = &v17[9 * v54];
      v56[4] = v55;
      v56[5] = v32;
      v57 = v75;
      v56[6] = v35;
      v56[7] = v57;
      v58 = v73;
      v56[8] = v74;
      v56[9] = v58;
      v59 = v71;
      v56[10] = v72;
      v56[11] = v59;
      v56[12] = v50;
      v16 = v78 - 1;
      v15 = v62;
      if (v78 == 1)
        return v17;
    }
    swift_release();
    v60 = v79;
    sub_10001BC14(v19, v79);
    sub_10001BC14(v19, v60);
    sub_10001EF3C(v81, v80);
    sub_10001EF3C(v82, v87);
    sub_10001EF3C(v84, v83);
    swift_release();
  }
  return v17;
}

unint64_t sub_10095DBE4(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for KeyDropInterface.KeyPackage(0) + 24));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    sub_10009A3F4(0, v2, 0);
    __asm { BR              X8 }
  }
  v3 = sub_10095E220((uint64_t)_swiftEmptyArrayStorage, (uint64_t (*)(uint64_t))sub_10088F0B0, &qword_1010ED430, (void (*)(_QWORD, _QWORD, _QWORD))sub_10088E814, (uint64_t)&type metadata for NearOwnerAdvertisement, (uint64_t (*)(BOOL, unint64_t, uint64_t))sub_10009A3C8);
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  return sub_100DF656C(v3, v5, v7);
}

uint64_t sub_10095DF44(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  _QWORD *v20;

  v17 = a3 >> 1;
  v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v5 = _swiftEmptyArrayStorage;
  if (!v4)
    return (uint64_t)v5;
  v7 = result;
  v20 = _swiftEmptyArrayStorage;
  result = sub_10009A32C(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = 0;
    v5 = v20;
    for (i = (uint64_t *)(v7 + 24 * a2 + 8); ; i += 3)
    {
      v10 = v8 + 1;
      if (__OFADD__(v8, 1))
        break;
      if (a2 + v8 >= v17 || v8 >= v4)
        goto LABEL_13;
      v11 = *i;
      v12 = i[1];
      v18[0] = *(i - 1);
      v18[1] = v11;
      v18[2] = v12;
      sub_10001BBBC(v11, v12);
      swift_getAtKeyPath(&v19, v18, a4);
      result = sub_10001BC14(v11, v12);
      v13 = v19;
      v20 = v5;
      v15 = v5[2];
      v14 = v5[3];
      if (v15 >= v14 >> 1)
      {
        result = sub_10009A32C(v14 > 1, v15 + 1, 1);
        v5 = v20;
      }
      v5[2] = v15 + 1;
      v5[v15 + 4] = v13;
      ++v8;
      if (v10 == v4)
        return (uint64_t)v5;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10095E0AC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(BOOL, unint64_t, uint64_t))
{
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t (*v21)(BOOL, unint64_t, uint64_t);
  _QWORD v23[3];
  __int128 v24;
  _QWORD *v25;

  v6 = a3 >> 1;
  v7 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = _swiftEmptyArrayStorage;
  if (!v7)
    return (uint64_t)v8;
  v11 = result;
  v25 = _swiftEmptyArrayStorage;
  result = a6(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v21 = a6;
    v12 = 0;
    v8 = v25;
    for (i = (uint64_t *)(v11 + 24 * a2 + 8); ; i += 3)
    {
      v14 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      if (a2 + v12 >= v6 || v12 >= v7)
        goto LABEL_13;
      v15 = *i;
      v16 = i[1];
      v23[0] = *(i - 1);
      v23[1] = v15;
      v23[2] = v16;
      sub_10001BBBC(v15, v16);
      swift_getAtKeyPath(&v24, v23, a4);
      result = sub_10001BC14(v15, v16);
      v17 = v24;
      v25 = v8;
      v19 = v8[2];
      v18 = v8[3];
      if (v19 >= v18 >> 1)
      {
        v20 = v24;
        result = v21(v18 > 1, v19 + 1, 1);
        v17 = v20;
        v8 = v25;
      }
      v8[2] = v19 + 1;
      *(_OWORD *)&v8[2 * v19 + 4] = v17;
      ++v12;
      if (v14 == v7)
        return (uint64_t)v8;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10095E220(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, void (*a4)(_QWORD, _QWORD, _QWORD), uint64_t a5, uint64_t (*a6)(BOOL, unint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  Swift::String v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(BOOL, unint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE v54[8];

  v49 = a1;
  swift_bridgeObjectRetain(a1);
  sub_100906A74(&v49, a2, a3, a4);
  v11 = v49;
  v12 = *(_QWORD *)(v49 + 16);
  if (!v12
    || (v13 = v49 + 32 + 24 * v12,
        v14 = *(_QWORD *)(v13 - 24),
        v15 = *(_QWORD *)(v13 - 16),
        v16 = *(_QWORD *)(v13 - 8),
        v17 = sub_10001BBBC(v15, v16),
        v16 >> 60 == 15))
  {
    swift_release();
    return 0;
  }
  v18 = v14 + 1;
  if (v14 == -1)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_once(&qword_1010EA050, sub_100906B40);
    goto LABEL_16;
  }
  v46 = a6;
  v19 = 24 * v12 + 8;
  v20 = v12;
  do
  {
    v21 = *(_QWORD *)(v11 + v19);
    if (v21 == -1)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 + 1 != v18)
      break;
    v19 -= 24;
    v18 = v21;
    --v20;
  }
  while (v20);
  v22 = *(_QWORD *)(a1 + 16);
  if (v22 <= v20)
    goto LABEL_27;
  if (v12 < v20)
    goto LABEL_28;
  if (v12 < (unint64_t)v22)
    goto LABEL_29;
  v47 = v15;
  v48 = v16;
  v45 = *(_QWORD *)(a1 + 16);
  v23 = (2 * v22) | 1;
  __chkstk_darwin(v17);
  KeyPath = swift_getKeyPath(&unk_100E55658);
  swift_retain();
  v25 = sub_10095DF44(v11 + 32, v20, v23, KeyPath);
  swift_release_n(KeyPath, 2);
  v16 = sub_1001E5F20(v25);
  v27 = v26;
  v28 = swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
    goto LABEL_20;
  __chkstk_darwin(v28);
  v29 = swift_getKeyPath(&unk_100E55658);
  swift_retain();
  v30 = sub_10095DF44(v11 + 32, v20, v23, v29);
  swift_release_n(v29, 2);
  v15 = sub_100A790A4(v30);
  LOBYTE(v29) = v31;
  v32 = swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
LABEL_20:
    swift_release();
    sub_10001BC14(v47, v48);
    return 0;
  }
  if (v15 < v16)
    goto LABEL_30;
  __chkstk_darwin(v32);
  v33 = swift_getKeyPath(&unk_100E55678);
  swift_retain();
  sub_10095E0AC(v11 + 32, v20, v23, v33, (uint64_t)v54, v46);
  swift_release_n(v33, 2);
  if (qword_1010EA050 != -1)
    goto LABEL_31;
LABEL_16:
  v34 = type metadata accessor for Logger(0);
  sub_10001A9E8(v34, (uint64_t)qword_1011B7940);
  swift_bridgeObjectRetain_n(a1, 4);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter(v36);
  if (!os_log_type_enabled(v36, v37))
  {

    swift_release();
    swift_bridgeObjectRelease_n(a1, 4);
    goto LABEL_24;
  }
  v38 = swift_slowAlloc(42, -1);
  v44 = swift_slowAlloc(32, -1);
  v52 = v16;
  v53 = v44;
  *(_DWORD *)v38 = 136315906;
  v49 = 0;
  v50 = 0xE000000000000000;
  v51 = v15;
  _print_unlocked<A, B>(_:_:)(&v52, &v49, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v39._countAndFlagsBits = 3026478;
  v39._object = (void *)0xE300000000000000;
  String.append(_:)(v39);
  _print_unlocked<A, B>(_:_:)(&v51, &v49, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v49 = sub_100016940(v49, v50, &v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v38 + 4, v38 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v38 + 12) = 2048;
  swift_bridgeObjectRelease();
  v49 = v45;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v38 + 14, v38 + 22);
  swift_bridgeObjectRelease();
  *(_WORD *)(v38 + 22) = 2048;
  v40 = v15 - v16;
  if ((uint64_t)(v15 - v16) < 0)
  {
    __break(1u);
  }
  else
  {
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (!v41)
    {
      v49 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v38 + 24, v38 + 32);
      *(_WORD *)(v38 + 32) = 2048;
      swift_bridgeObjectRelease();
      v49 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v38 + 34, v38 + 42);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Retaining range: %s out of possible %ld. %ld / %ld.", (uint8_t *)v38, 0x2Au);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      swift_release();
LABEL_24:
      sub_10001BC14(v47, v48);
      return v16;
    }
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_10095E7A0(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for KeyDropInterface.KeyPackage(0) + 24));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    sub_10009A44C(0, v2, 0);
    __asm { BR              X8 }
  }
  v3 = sub_10095E220((uint64_t)_swiftEmptyArrayStorage, (uint64_t (*)(uint64_t))sub_10088F0C4, &qword_1010ED448, (void (*)(_QWORD, _QWORD, _QWORD))sub_10088E814, (uint64_t)&type metadata for ConnectionKey, (uint64_t (*)(BOOL, unint64_t, uint64_t))sub_10009A420);
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  return sub_100DF656C(v3, v5, v7);
}

_QWORD *sub_10095EB00(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for KeyDropInterface.KeyPackage(0) + 24));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    sub_10009A478(0, v2, 0);
    __asm { BR              X8 }
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10095EE0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t (*v52)(uint64_t);
  uint64_t *v53;
  unint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  os_log_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  __n128 v130;
  char *v131;
  uint64_t *v132;
  char *v133;
  __n128 v134;
  os_log_t v135;
  uint64_t *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157[2];
  uint64_t v158;
  uint64_t v159;

  v129 = a3;
  v124 = type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member(0);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v125 = (uint64_t)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for EncryptedData(0);
  v127 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v9 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for KeyDropDownloadResponse.Member(0);
  v156 = *(_QWORD *)(v154 - 8);
  v10 = __chkstk_darwin(v154);
  v12 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v145 = (uint64_t)&v122 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v122 - v16;
  v18 = __chkstk_darwin(v15);
  v139 = (uint64_t)&v122 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v122 - v20;
  v140 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v22 = __chkstk_darwin(v140);
  v153 = (uint64_t)&v122 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v155 = (uint64_t)&v122 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v122 - v26;
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B7940);
  v150 = a4;
  sub_10005972C(a4, (uint64_t)v27, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_bridgeObjectRetain_n(a1, 4);
  v149 = v29;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  v33 = os_log_type_enabled(v31, v32);
  v128 = a2;
  v146 = v9;
  v144 = v12;
  v138 = v17;
  v143 = v21;
  if (v33)
  {
    v34 = swift_slowAlloc(42, -1);
    v35 = swift_slowAlloc(64, -1);
    v157[0] = v35;
    *(_DWORD *)v34 = 141558787;
    v158 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v34 + 4, v34 + 12);
    *(_WORD *)(v34 + 12) = 2081;
    v36 = a1;
    v37 = type metadata accessor for UUID(0);
    v38 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v37, v38);
    v158 = sub_100016940(v39, v40, v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v34 + 14, v34 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v27, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v34 + 22) = 2080;
    swift_bridgeObjectRetain(a1);
    v42 = Array.description.getter(v41, v154);
    v44 = v43;
    swift_bridgeObjectRelease();
    v158 = sub_100016940(v42, v44, v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v34 + 24, v34 + 32);
    a1 = v36;
    v21 = v143;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(a1, 2);
    *(_WORD *)(v34 + 32) = 2048;
    v45 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRelease();
    v158 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v34 + 34, v34 + 42);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Processing shareId: %{private,mask.hash}s,\nmembers: %s, count: %ld.", (uint8_t *)v34, 0x2Au);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v27, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_bridgeObjectRelease_n(a1, 3);
  }

  v46 = v155;
  v47 = *(_QWORD *)(a1 + 16);
  v48 = v153;
  if (!v47)
    return _swiftEmptyArrayStorage;
  v49 = a1;
  v50 = a1 + ((*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80));
  v132 = &v159;
  v131 = (char *)&v158 + 4;
  v152 = *(_QWORD *)(v156 + 72);
  v122 = v49;
  v51 = swift_bridgeObjectRetain(v49);
  v151 = 0;
  v126 = _swiftEmptyArrayStorage;
  v52 = type metadata accessor for KeyDropDownloadResponse.Member;
  v51.n128_u64[0] = 141558787;
  v134 = v51;
  v133 = (char *)&type metadata for Any + 8;
  v51.n128_u64[0] = 141559555;
  v130 = v51;
  do
  {
    sub_10005972C(v50, (uint64_t)v21, v52);
    v53 = (uint64_t *)&v21[*(int *)(v154 + 24)];
    v54 = v53[1];
    if (v54 >> 60 == 15)
    {
      v148 = v50;
      v156 = v47;
      sub_10005972C(v150, v46, type metadata accessor for SharingCircleKeyManager.Instruction);
      v55 = v52;
      v56 = v139;
      v57 = sub_10005972C((uint64_t)v21, v139, v55);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = swift_slowAlloc(42, -1);
        v61 = swift_slowAlloc(64, -1);
        v157[0] = v61;
        *(_DWORD *)v60 = v134.n128_u32[0];
        *(_QWORD *)(v60 + 4) = 1752392040;
        *(_WORD *)(v60 + 12) = 2081;
        v62 = v56;
        v63 = type metadata accessor for UUID(0);
        v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v65 = dispatch thunk of CustomStringConvertible.description.getter(v63, v64);
        *(_QWORD *)(v60 + 14) = sub_100016940(v65, v66, v157);
        swift_bridgeObjectRelease();
        sub_1000126B0(v155, type metadata accessor for SharingCircleKeyManager.Instruction);
        *(_WORD *)(v60 + 22) = 2160;
        *(_QWORD *)(v60 + 24) = 1752392040;
        *(_WORD *)(v60 + 32) = 2081;
        v67 = dispatch thunk of CustomStringConvertible.description.getter(v63, v64);
        *(_QWORD *)(v60 + 34) = sub_100016940(v67, v68, v157);
        swift_bridgeObjectRelease();
        v69 = (uint64_t)v143;
        sub_1000126B0(v62, v55);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s not yet accepted.", (uint8_t *)v60, 0x2Au);
        swift_arrayDestroy(v61, 2, v133);
        swift_slowDealloc(v61, -1, -1);
        v70 = v60;
        v46 = v155;
        swift_slowDealloc(v70, -1, -1);

        v21 = (char *)v69;
        sub_1000126B0(v69, v55);
      }
      else
      {

        sub_1000126B0(v56, v55);
        sub_1000126B0(v46, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_1000126B0((uint64_t)v21, v55);
      }
      v48 = v153;
      v52 = v55;
      v47 = v156;
      v50 = v148;
    }
    else
    {
      v71 = *v53;
      v72 = type metadata accessor for PropertyListDecoder(0);
      swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
      v73 = sub_10001BBBC(v71, v54);
      PropertyListDecoder.init()(v73);
      v74 = sub_100006204(&qword_1010F1950, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedData, (uint64_t)&protocol conformance descriptor for EncryptedData);
      v147 = v71;
      v148 = v54;
      v75 = v71;
      v76 = v151;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v142, v75, v54, v142, v74);
      if (v76)
      {
        swift_release();
        v151 = 0;
        v77 = (uint64_t)v144;
        sub_10005972C(v150, v48, type metadata accessor for SharingCircleKeyManager.Instruction);
        v84 = (uint64_t)v138;
        sub_10005972C((uint64_t)v21, (uint64_t)v138, v52);
        v85 = v145;
        sub_10005972C((uint64_t)v21, v145, v52);
        sub_10005972C((uint64_t)v21, v77, v52);
        swift_errorRetain(v76);
        v86 = swift_errorRetain(v76);
        v87 = v77;
        v88 = Logger.logObject.getter(v86);
        v89 = static os_log_type_t.error.getter(v88);
        v141 = v89;
        if (os_log_type_enabled(v88, v89))
        {
          v90 = swift_slowAlloc(68, -1);
          v136 = (uint64_t *)swift_slowAlloc(8, -1);
          v137 = swift_slowAlloc(96, -1);
          v157[0] = v137;
          *(_DWORD *)v90 = v130.n128_u32[0];
          v158 = 1752392040;
          v156 = v47;
          v91 = v132;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v132, v90 + 4, v90 + 12);
          *(_WORD *)(v90 + 12) = 2081;
          v135 = v88;
          v92 = type metadata accessor for UUID(0);
          v93 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v94 = dispatch thunk of CustomStringConvertible.description.getter(v92, v93);
          v158 = sub_100016940(v94, v95, v157);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v91, v90 + 14, v90 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v153, type metadata accessor for SharingCircleKeyManager.Instruction);
          *(_WORD *)(v90 + 22) = 2160;
          v158 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v91, v90 + 24, v90 + 32);
          *(_WORD *)(v90 + 32) = 2081;
          v96 = dispatch thunk of CustomStringConvertible.description.getter(v92, v93);
          v158 = sub_100016940(v96, v97, v157);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v91, v90 + 34, v90 + 42);
          swift_bridgeObjectRelease();
          sub_1000126B0(v84, type metadata accessor for KeyDropDownloadResponse.Member);
          *(_WORD *)(v90 + 42) = 2080;
          v98 = v145;
          v99 = v93;
          v100 = (uint64_t)v144;
          v101 = dispatch thunk of CustomStringConvertible.description.getter(v92, v99);
          v158 = sub_100016940(v101, v102, v157);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v91, v90 + 44, v90 + 52);
          swift_bridgeObjectRelease();
          sub_1000126B0(v98, type metadata accessor for KeyDropDownloadResponse.Member);
          *(_WORD *)(v90 + 52) = 1024;
          LODWORD(v92) = *(unsigned __int8 *)(v100 + *(int *)(v154 + 20));
          sub_1000126B0(v100, type metadata accessor for KeyDropDownloadResponse.Member);
          LODWORD(v158) = v92;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v131, v90 + 54, v90 + 58);
          *(_WORD *)(v90 + 58) = 2112;
          swift_errorRetain(v76);
          v103 = _swift_stdlib_bridgeErrorToNSError(v76);
          v158 = v103;
          v104 = v91;
          v52 = type metadata accessor for KeyDropDownloadResponse.Member;
          v47 = v156;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v104, v90 + 60, v90 + 68);
          v105 = v136;
          *v136 = v103;
          v48 = v153;
          swift_errorRelease(v76);
          swift_errorRelease(v76);
          v106 = v135;
          _os_log_impl((void *)&_mh_execute_header, v135, (os_log_type_t)v141, "Failed to process members in share-id: %{private,mask.hash}s,\nmember trust memberId: %{private,mask.hash}s,\nmember: %s, owner: %{BOOL}d. %@.", (uint8_t *)v90, 0x44u);
          v107 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v105, 1, v107);
          swift_slowDealloc(v105, -1, -1);
          v108 = v137;
          swift_arrayDestroy(v137, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v108, -1, -1);
          swift_slowDealloc(v90, -1, -1);
          sub_10001EF3C(v147, v148);

          swift_errorRelease(v76);
          v21 = v143;
          sub_1000126B0((uint64_t)v143, type metadata accessor for KeyDropDownloadResponse.Member);
        }
        else
        {
          sub_1000126B0(v87, v52);
          sub_10001EF3C(v147, v148);

          swift_errorRelease(v76);
          swift_errorRelease(v76);
          sub_1000126B0(v85, v52);
          sub_1000126B0(v84, v52);
          sub_1000126B0(v48, type metadata accessor for SharingCircleKeyManager.Instruction);
          swift_errorRelease(v76);
          sub_1000126B0((uint64_t)v21, v52);
        }
        v46 = v155;
      }
      else
      {
        v78 = v128;
        v79 = v129;
        sub_10001BBBC(v128, v129);
        v80 = EncryptedData.decrypt(key:)(v78, v79);
        v82 = v81;
        sub_10001BC14(v78, v79);
        v83 = sub_100961B94();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&type metadata for SharingCircleKeyManager.KeyDropMemberInfo, v80, v82, &type metadata for SharingCircleKeyManager.KeyDropMemberInfo, v83);
        v151 = 0;
        (*(void (**)(char *, uint64_t))(v127 + 8))(v146, v142);
        sub_10001BC14(v80, v82);
        swift_release();
        v109 = v157[0];
        v110 = v157[1];
        v111 = type metadata accessor for UUID(0);
        v112 = v125;
        v113 = (uint64_t)v143;
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v125, v143, v111);
        v21 = (char *)v113;
        v114 = v124;
        *(_BYTE *)(v112 + *(int *)(v124 + 20)) = *(_BYTE *)(v113 + *(int *)(v154 + 20));
        v115 = (uint64_t *)(v112 + *(int *)(v114 + 24));
        *v115 = v109;
        v115[1] = v110;
        if ((swift_isUniquelyReferenced_nonNull_native(v126) & 1) != 0)
        {
          v46 = v155;
          v116 = (unint64_t)v126;
        }
        else
        {
          v116 = sub_1007C7C34(0, v126[2] + 1, 1, (unint64_t)v126);
          v46 = v155;
        }
        v117 = v148;
        v119 = *(_QWORD *)(v116 + 16);
        v118 = *(_QWORD *)(v116 + 24);
        if (v119 >= v118 >> 1)
          v116 = sub_1007C7C34(v118 > 1, v119 + 1, 1, v116);
        *(_QWORD *)(v116 + 16) = v119 + 1;
        v120 = (*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
        v126 = (_QWORD *)v116;
        sub_1000126EC(v125, v116 + v120 + *(_QWORD *)(v123 + 72) * v119, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        sub_10001EF3C(v147, v117);
        sub_1000126B0((uint64_t)v21, v52);
        v48 = v153;
      }
    }
    v50 += v152;
    --v47;
  }
  while (v47);
  swift_bridgeObjectRelease();
  return v126;
}

_QWORD *sub_10095FD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  _QWORD *result;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;

  v70 = a3;
  v69 = a2;
  v4 = sub_10001A9A8(&qword_10110D468);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v67 = (uint64_t)&v64 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v64 - v11;
  __chkstk_darwin(v10);
  v87 = (uint64_t)&v64 - v13;
  v68 = type metadata accessor for EncryptedData(0);
  __chkstk_darwin(v68);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v17)
  {
    v88 = v16;
    v89 = v14;
    v65 = v12;
    v66 = v7;
    v91 = _swiftEmptyArrayStorage;
    sub_10009A3AC(0, v17, 0);
    result = v91;
    v19 = (unint64_t *)(a1 + 48);
    while (1)
    {
      v20 = *(v19 - 1);
      v80 = *(v19 - 2);
      v81 = result;
      v22 = *v19;
      v21 = v19[1];
      v23 = v19[2];
      v24 = v19[3];
      v26 = v19[4];
      v25 = v19[5];
      v79 = v19;
      v27 = v19[6];
      sub_10001BBBC(v20, v22);
      v84 = v23;
      v85 = v21;
      sub_10001BD08(v21, v23);
      v86 = v26;
      sub_10001BD08(v24, v26);
      sub_10001BD08(v25, v27);
      v28 = v88;
      v82 = v22;
      v83 = v20;
      v29 = v90;
      Data.spEncrypt(key:ivLength:)(v69, v70, 12, v20, v22);
      v90 = v29;
      if (v29)
        break;
      v77 = v24;
      v78 = v27;
      v76 = v17;
      v30 = type metadata accessor for PropertyListEncoder(0);
      v31 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
      PropertyListEncoder.init()(v31);
      v32 = sub_100006204(&qword_10110D470, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedData, (uint64_t)&protocol conformance descriptor for EncryptedData);
      v33 = v68;
      v34 = v90;
      v35 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v28, v68, v32);
      v90 = v34;
      if (v34)
      {
        (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v33);
        swift_release();
        v24 = v77;
        v27 = v78;
        break;
      }
      v37 = v35;
      v38 = v36;
      v75 = v25;
      v39 = v89;
      v40 = v87;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v87, 1, 1, v33);
      v41 = v40;
      v42 = (uint64_t)v65;
      sub_10000F9B8(v41, (uint64_t)v65, &qword_10110D468);
      v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      v44 = v43(v42, 1, v33);
      v45 = sub_10001BBBC(v37, v38);
      if (v44 == 1)
      {
        sub_100004048(v42, &qword_10110D468);
        v73 = 0xF000000000000000;
        v74 = 0;
      }
      else
      {
        v46 = EncryptedData.cipherText.getter(v45);
        v73 = v47;
        v74 = v46;
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v33);
      }
      v48 = v67;
      v49 = v87;
      sub_10000F9B8(v87, v67, &qword_10110D468);
      if (v43(v48, 1, v33) == 1)
      {
        sub_100004048(v48, &qword_10110D468);
        v71 = 0xF000000000000000;
        v72 = 0;
      }
      else
      {
        v50 = EncryptedData.initializationVector.getter();
        v71 = v51;
        v72 = v50;
        (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v48, v33);
      }
      v52 = (uint64_t)v66;
      sub_10000F9B8(v49, (uint64_t)v66, &qword_10110D468);
      if (v43(v52, 1, v33) == 1)
      {
        sub_10001BC14(v37, v38);
        sub_100004048(v49, &qword_10110D468);
        sub_100004048(v52, &qword_10110D468);
        swift_release();
        v53 = 0;
        v54 = 0xF000000000000000;
        (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v33);
      }
      else
      {
        v55 = v52;
        v64 = EncryptedData.tag.getter();
        v54 = v56;
        sub_10001BC14(v37, v38);
        sub_100004048(v49, &qword_10110D468);
        v57 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
        v57(v55, v33);
        v53 = v64;
        swift_release();
        v57((uint64_t)v88, v33);
      }
      sub_10001BC14(v83, v82);
      sub_10001EF3C(v85, v84);
      sub_10001EF3C(v77, v86);
      sub_10001EF3C(v75, v78);
      result = v81;
      v91 = v81;
      v59 = v81[2];
      v58 = v81[3];
      if (v59 >= v58 >> 1)
      {
        sub_10009A3AC(v58 > 1, v59 + 1, 1);
        result = v91;
      }
      v60 = v80;
      v19 = v79 + 9;
      result[2] = v59 + 1;
      v61 = &result[9 * v59];
      v61[4] = v60;
      v61[5] = v37;
      v62 = v74;
      v61[6] = v38;
      v61[7] = v62;
      v63 = v72;
      v61[8] = v73;
      v61[9] = v63;
      v61[10] = v71;
      v61[11] = v53;
      v61[12] = v54;
      v17 = v76 - 1;
      if (v76 == 1)
        return result;
    }
    sub_10001BC14(v83, v82);
    sub_10001EF3C(v85, v84);
    sub_10001EF3C(v24, v86);
    sub_10001EF3C(v25, v27);
    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t sub_100960294(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  uint64_t v28;

  v8 = type metadata accessor for EncryptedData(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3[1];
  if (v12 >> 60 == 15)
  {
    v13 = sub_1000D94EC();
    v14 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v13, 0, 0);
    *v15 = 9;
    swift_willThrow(v14);
  }
  else
  {
    v4 = *a3;
    v16 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v17 = sub_10001BBBC(v4, v12);
    PropertyListEncoder.init()(v17);
    v27[0] = a1;
    v27[1] = a2;
    v18 = sub_1009613D8();
    v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v27, &type metadata for SharingCircleKeyManager.KeyDropMemberInfo, v18);
    if (v3)
    {
      swift_release();
      sub_10001EF3C(v4, v12);
    }
    else
    {
      v21 = v19;
      v22 = v20;
      sub_10001BBBC(v4, v12);
      Data.spEncrypt(key:ivLength:)(v4, v12, 12, v21, v22);
      v26 = v22;
      v28 = v4;
      sub_10001EF3C(v4, v12);
      v24 = sub_100006204(&qword_10110D470, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedData, (uint64_t)&protocol conformance descriptor for EncryptedData);
      v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v11, v8, v24);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      sub_10001BC14(v21, v26);
      swift_release();
      sub_10001EF3C(v28, v12);
    }
  }
  return v4;
}

uint64_t sub_1009604EC()
{
  return sub_100007AFC(74);
}

uint64_t sub_1009604F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100A8337C(*(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(_BYTE *)(v1 + 73), a1);
}

uint64_t sub_100960530()
{
  return sub_100007AFC(64);
}

unint64_t sub_100960538@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100A8332C((_QWORD *)(v1 + 24), a1);
}

uint64_t type metadata accessor for SharingCircleKeyManager.Instruction(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110D698, (uint64_t)&nominal type descriptor for SharingCircleKeyManager.Instruction);
}

uint64_t sub_100960558()
{
  return sub_100007AFC(64);
}

uint64_t sub_100960560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for DateInterval(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = *(_QWORD *)(v7 + 64) + v9 + 1;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100960634@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for DateInterval(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_100A83454(*(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v5), v1 + v7, *(unsigned __int8 *)(v1 + v7 + *(_QWORD *)(v6 + 64)), a1);
}

uint64_t sub_1009606C4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100960968@<X0>(uint64_t a1@<X8>)
{
  return sub_100961264(type metadata accessor for SharingCircleKeyManager.Instruction, a1);
}

uint64_t sub_100960974()
{
  uint64_t v0;

  return sub_1000D761C(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100960980()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  v9(v7 + v1[6], v8);
  v9(v7 + v1[7], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v7 + v1[12];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100960A80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960A90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960AA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100960AC4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960AD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960AE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100960AF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960B04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960B14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960B24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960B34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100960B44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960B54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960B68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960B78()
{
  uint64_t v0;

  return sub_100D79CA8(*(_BYTE *)(v0 + 16));
}

uint64_t sub_100960B84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v5 = v1 + *(int *)(v3 + 20) + ((v4 + 16) & ~v4);
  v6 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_100960BE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v5 = v1 + *(int *)(v3 + 24) + ((v4 + 16) & ~v4);
  v6 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_100960C40()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100960C64()
{
  uint64_t v0;

  return sub_100952024(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100960C6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960C7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960C8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960C9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960CAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960CBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960CCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100960CDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960CEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960CFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960D0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960D1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100960D2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960D3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960D4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960D5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_QWORD *sub_100960D6C(_QWORD *a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  a2(a1[1], a1[2]);
  a3(v5, v6);
  a3(v7, v8);
  a3(v9, v10);
  return a1;
}

uint64_t sub_100960DF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100961264(type metadata accessor for KeyDropInterface.KeyPackage, a1);
}

uint64_t sub_100960DFC()
{
  uint64_t v0;

  return sub_1000D7630(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100960E04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960E14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960E24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960E34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100960E44()
{
  unint64_t result;

  result = qword_10110D4D8;
  if (!qword_10110D4D8)
  {
    result = swift_getWitnessTable(byte_100E28C40, &type metadata for KeyDropBeaconAttributes);
    atomic_store(result, &qword_10110D4D8);
  }
  return result;
}

uint64_t sub_100960E90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960EA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960EB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960EC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960ED8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960EE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960EF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960F08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960F28()
{
  uint64_t v0;

  return sub_1000D7644(*(void (**)(uint64_t *__return_ptr))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100960F30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960F40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960F50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960F60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960F70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960F80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960F9C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for KeyDropInterface.KeyPackage(0) - 8) + 80);
  return sub_100951F48(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_100960FDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960FEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100960FFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10096100C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10096101C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10096102C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961048()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961058()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961068()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961078()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961088()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961098()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1009610B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1009610C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1009610D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1009610E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1009610F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961104()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961118()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961128()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  v1 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v9(v7 + *(int *)(v10 + 24), v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1009611F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961204()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961214()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961224()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961234()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100961244()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100961254()
{
  uint64_t v0;

  return sub_10094EE14(*(_QWORD *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_100961264@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return sub_10005972C(v2 + ((v5 + 16) & ~v5), a2, a1);
}

uint64_t sub_1009612B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1009612C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1009612D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1009612E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1009612F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100961304()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

BOOL sub_100961314(unint64_t *a1)
{
  uint64_t v1;

  return sub_10095B4C8(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

BOOL sub_100961334(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *a1;
  return v3 >= *(_QWORD *)(v2 + *(int *)(type metadata accessor for KeyDropInterface.KeyAlignment(0) + 20));
}

uint64_t sub_100961380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1011063B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1009613D8()
{
  unint64_t result;

  result = qword_10110D510;
  if (!qword_10110D510)
  {
    result = swift_getWitnessTable(byte_100E558B8, &type metadata for SharingCircleKeyManager.KeyDropMemberInfo);
    atomic_store(result, (unint64_t *)&qword_10110D510);
  }
  return result;
}

unint64_t sub_10096141C()
{
  unint64_t result;

  result = qword_10110D518;
  if (!qword_10110D518)
  {
    result = swift_getWitnessTable(aA_41, &type metadata for KeyDropInterface.KeyBundle);
    atomic_store(result, (unint64_t *)&qword_10110D518);
  }
  return result;
}

unint64_t sub_100961464()
{
  unint64_t result;

  result = qword_10110D528;
  if (!qword_10110D528)
  {
    result = swift_getWitnessTable(byte_100E28C18, &type metadata for KeyDropBeaconAttributes);
    atomic_store(result, &qword_10110D528);
  }
  return result;
}

_QWORD *sub_1009614A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[8];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1009614FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100961528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) - 8) + 80);
  v6 = (v4 + v5 + 24) & ~v5;
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v3;
  v9 = v0 + v4;
  v10 = *(_QWORD *)(v0 + v4);
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = v0 + v6;
  v14 = (_QWORD *)swift_task_alloc(dword_10110D534);
  *(_QWORD *)(v1 + 16) = v14;
  *v14 = v1;
  v14[1] = sub_100004A74;
  return sub_10091B5C0(v7, v8, v10, v11, v12, v13);
}

uint64_t sub_1009615F8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v25 = *(unsigned __int8 *)(v2 + 80);
  v23 = *(_QWORD *)(v2 + 64);
  v3 = (int *)type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v22 = *(_QWORD *)(v4 + 64);
  swift_release();
  v24 = (v25 + 24) & ~v25;
  sub_10001BC14(*(_QWORD *)(v0 + v24), *(_QWORD *)(v0 + v24 + 8));
  v6 = v0 + v24 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v24 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v24 + v1[18];
  v11 = type metadata accessor for Date(0);
  v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v21(v10, v11);
  v12 = v0 + v24 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v24 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  v17 = (((v23 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + v5 + 24) & ~v5;
  v18 = v17 + v22;
  swift_bridgeObjectRelease();
  v19 = v0 + v17;
  v9(v19, v7);
  v9(v19 + v3[5], v7);
  v9(v19 + v3[6], v7);
  v9(v19 + v3[7], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21(v19 + v3[12], v11);
  return swift_deallocObject(v0, v18, v25 | v5 | 7);
}

uint64_t sub_100961870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) - 8) + 80);
  v6 = (v4 + v5 + 24) & ~v5;
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v3;
  v9 = v0 + v4;
  v10 = *(_QWORD *)(v0 + v4);
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = v0 + v6;
  v14 = (_QWORD *)swift_task_alloc(dword_10110D544);
  *(_QWORD *)(v1 + 16) = v14;
  *v14 = v1;
  v14[1] = sub_100004C28;
  return sub_10091B10C(v7, v8, v10, v11, v12, v13);
}

uint64_t sub_100961944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) - 8) + 80);
  v6 = (v4 + v5 + 24) & ~v5;
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v3;
  v9 = v0 + v4;
  v10 = *(_QWORD *)(v0 + v4);
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = v0 + v6;
  v14 = (_QWORD *)swift_task_alloc(dword_10110D55C);
  *(_QWORD *)(v1 + 16) = v14;
  *v14 = v1;
  v14[1] = sub_100004A74;
  return sub_10091AC58(v7, v8, v10, v11, v12, v13);
}

uint64_t sub_100961A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  v1 = type metadata accessor for KeySyncRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v12 = v0 + v4;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = v12 + *(int *)(v1 + 28);
  v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v15(v14, v6);
  v15(v0 + v9, v6);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v11));
  return swift_deallocObject(v0, v11 + 40, v10);
}

uint64_t sub_100961B00()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for KeySyncRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_100A82D48(*(_QWORD *)(v0 + 16), v0 + v2, v0 + v5, (_QWORD *)(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110D600, (uint64_t)&nominal type descriptor for SharingCircleKeyManager.SharingCircleContent.Member);
}

unint64_t sub_100961B94()
{
  unint64_t result;

  result = qword_10110D568;
  if (!qword_10110D568)
  {
    result = swift_getWitnessTable(byte_100E55890, &type metadata for SharingCircleKeyManager.KeyDropMemberInfo);
    atomic_store(result, (unint64_t *)&qword_10110D568);
  }
  return result;
}

void sub_100961BD8(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  sub_10090E6F0(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_100961BF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for OwnerPeerTrust(0);
  return static UUID.== infix(_:_:)(a1, v3 + *(int *)(v4 + 20)) & 1;
}

unint64_t sub_100961C44()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_10110D570;
  if (!qword_10110D570)
  {
    v1 = sub_10001F784(&qword_1010F1DC8);
    v2 = sub_100006204(&qword_10110D578, type metadata accessor for KeyDropInterface.KeyPackage, (uint64_t)&unk_100E707A8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_10110D570);
  }
  return result;
}

uint64_t sub_100961CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10110D584);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004C28;
  return sub_100909898(a1, a2, v2);
}

uint64_t sub_100961D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100909A04(a1, *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

_QWORD *sub_100961D44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_100961DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_100961E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_100961E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_100961F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100961F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100961FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100962004);
}

uint64_t sub_100962004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100962084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100962090);
}

uint64_t sub_100962090(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10096210C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E556A0;
    v4[2] = &unk_100E556B8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.SharingCircleContent()
{
  return &type metadata for SharingCircleKeyManager.SharingCircleContent;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.KeyDropMemberInfo()
{
  return &type metadata for SharingCircleKeyManager.KeyDropMemberInfo;
}

uint64_t storeEnumTagSinglePayload for SharingCircleKeyManager.TaskPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1009621F4 + 4 * byte_100E5557E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100962228 + 4 * byte_100E55579[v4]))();
}

uint64_t sub_100962228(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100962230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100962238);
  return result;
}

uint64_t sub_100962244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10096224CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100962250(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100962258(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.TaskPriority()
{
  return &type metadata for SharingCircleKeyManager.TaskPriority;
}

_QWORD *sub_100962274(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v8((_QWORD *)((char *)a1 + a3[6]), (_QWORD *)((char *)a2 + a3[6]), v7);
    v8((_QWORD *)((char *)a1 + a3[7]), (_QWORD *)((char *)a2 + a3[7]), v7);
    v9 = a3[8];
    v10 = a3[9];
    v11 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v11;
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    v12 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v13 = *(_QWORD *)((char *)a2 + v12);
    *(_QWORD *)((char *)a1 + v12) = v13;
    v14 = a3[12];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    v18(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_1009623A8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  v5(a1 + a2[7], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  v6 = a1 + a2[12];
  v7 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_100962458(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v8 = a3[8];
  v9 = a3[9];
  v10 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v11 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v13 = a3[12];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  v17(v14, v15, v16);
  return a1;
}

uint64_t sub_100962560(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v8 = a3[8];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v11 = a3[11];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[12];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_100962674(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v8 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[12];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t sub_100962760(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v8 = a3[8];
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[11];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[12];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_100962860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10096286C);
}

uint64_t sub_10096286C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 48);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100962914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100962920);
}

uint64_t sub_100962920(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 48);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1009629C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = v5[0];
    v5[2] = v5[0];
    v5[3] = v5[0];
    v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[5] = &unk_100E55720;
    v5[6] = &unk_100E556A0;
    v5[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[8] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 9, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SharingCircleKeyManager.SharingCircleKeyManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_100962ABC + 4 * byte_100E55588[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_100962AF0 + 4 * byte_100E55583[v4]))();
}

uint64_t sub_100962AF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100962AF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100962B00);
  return result;
}

uint64_t sub_100962B0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100962B14);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_100962B18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100962B20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.SharingCircleKeyManagerError()
{
  return &type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError;
}

uint64_t *sub_100962B3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_100962BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_100962C2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_100962CA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t *sub_100962D24(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100962D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100962DA0);
}

uint64_t sub_100962DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100962E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100962E34);
}

char *sub_100962E34(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110D748, (uint64_t)&nominal type descriptor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
}

uint64_t sub_100962EC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E55780;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100962F3C()
{
  unint64_t result;

  result = qword_10110D780;
  if (!qword_10110D780)
  {
    result = swift_getWitnessTable(a9_15, &type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError);
    atomic_store(result, (unint64_t *)&qword_10110D780);
  }
  return result;
}

unint64_t sub_100962F84()
{
  unint64_t result;

  result = qword_10110D788;
  if (!qword_10110D788)
  {
    result = swift_getWitnessTable(byte_100E55868, &type metadata for SharingCircleKeyManager.TaskPriority);
    atomic_store(result, (unint64_t *)&qword_10110D788);
  }
  return result;
}

unint64_t sub_100962FC8()
{
  unint64_t result;

  result = qword_10110D798;
  if (!qword_10110D798)
  {
    result = swift_getWitnessTable(byte_100E559E4, &type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D798);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10096304C + 4 * byte_100E5558D[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10096306C + 4 * byte_100E55592[v4]))();
}

_BYTE *sub_10096304C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10096306C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100963074(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10096307C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100963084(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10096308C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys()
{
  return &type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys;
}

unint64_t sub_1009630AC()
{
  unint64_t result;

  result = qword_10110D7A8;
  if (!qword_10110D7A8)
  {
    result = swift_getWitnessTable(aU_27, &type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D7A8);
  }
  return result;
}

unint64_t sub_1009630F4()
{
  unint64_t result;

  result = qword_10110D7B0;
  if (!qword_10110D7B0)
  {
    result = swift_getWitnessTable(byte_100E5592C, &type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D7B0);
  }
  return result;
}

unint64_t sub_10096313C()
{
  unint64_t result;

  result = qword_10110D7B8;
  if (!qword_10110D7B8)
  {
    result = swift_getWitnessTable("͋$", &type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D7B8);
  }
  return result;
}

uint64_t sub_100963180(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000100ECB8D0)
  {
    swift_bridgeObjectRelease(0x8000000100ECB8D0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECB8D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_10096339C@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _BYTE *a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void (*v29)(_BYTE *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t result;
  _BYTE *v40;
  char v41;
  _BYTE v42[4];
  int v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v51 = a6;
  v44 = a5;
  v43 = a3;
  v47 = a1;
  v48 = a3;
  v16 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v16 - 8);
  v50 = v16;
  __chkstk_darwin(v16);
  v18 = &v42[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v19);
  v21 = &v42[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v22);
  v24 = &v42[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = type metadata accessor for Date(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = &v42[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 16);
  v46 = a2;
  v29(v28, a2, v25);
  v30 = a4;
  v31 = a4;
  v32 = v44;
  sub_10000F9B8(v31, (uint64_t)v24, (uint64_t *)&unk_1010EA690);
  v45 = v21;
  v33 = sub_10000F9B8(v32, (uint64_t)v21, &qword_1011091A0);
  if ((v43 & 0xFE) == 0xC)
  {
    v34 = v18;
    if (qword_1010EA058 != -1)
      swift_once(&qword_1010EA058, sub_1009636C4);
    v35 = v50;
    v36 = sub_10001A9E8(v50, (uint64_t)qword_1011B7958);
    v37 = v49;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v49 + 16))(v34, v36, v35);
  }
  else
  {
    UUID.init()(v33);
    v34 = v18;
    v37 = v49;
    v35 = v50;
  }
  sub_100004048(v32, &qword_1011091A0);
  sub_100004048(v30, (uint64_t *)&unk_1010EA690);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v46, v25);
  *a7 = v47;
  v38 = (int *)type metadata accessor for RawSearchResult(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(&a7[v38[5]], v28, v25);
  *(double *)&a7[v38[6]] = a8;
  *(double *)&a7[v38[7]] = a9;
  *(double *)&a7[v38[8]] = a10;
  a7[v38[9]] = v48;
  sub_100005CF0((uint64_t)v24, (uint64_t)&a7[v38[10]], (uint64_t *)&unk_1010EA690);
  sub_100005CF0((uint64_t)v45, (uint64_t)&a7[v38[11]], &qword_1011091A0);
  result = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 32))(&a7[v38[12]], v34, v35);
  v40 = &a7[v38[13]];
  v41 = BYTE1(v51);
  *v40 = v51;
  v40[1] = v41 & 1;
  return result;
}

double sub_1009636A0(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 24));
}

double sub_1009636AC(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 28));
}

double sub_1009636B8(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 32));
}

uint64_t sub_1009636C4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for UUID(0);
  sub_1000234D8(v0, qword_1011B7958);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7958);
  return UUID.init()(v1);
}

void sub_10096370C(uint64_t a1)
{
  Swift::UInt8 *v1;
  Swift::UInt8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  Swift::UInt64 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt8 *v36;
  Swift::UInt8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt64 v41;

  v2 = v1;
  v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4);
  v38 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v1);
  v16 = (int *)type metadata accessor for RawSearchResult(0);
  v17 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v9, v17);
  if ((*(_QWORD *)&v1[v16[6]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v18 = *(_QWORD *)&v1[v16[6]];
  else
    v18 = 0;
  Hasher._combine(_:)(v18);
  if ((*(_QWORD *)&v1[v16[7]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v19 = *(_QWORD *)&v1[v16[7]];
  else
    v19 = 0;
  Hasher._combine(_:)(v19);
  if ((*(_QWORD *)&v1[v16[8]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v20 = *(_QWORD *)&v1[v16[8]];
  else
    v20 = 0;
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v1[v16[9]]);
  sub_10000F9B8((uint64_t)&v1[v16[10]], (uint64_t)v15, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v9, v17);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  sub_10000F9B8((uint64_t)&v1[v16[11]], (uint64_t)v8, &qword_1011091A0);
  v21 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v8, 1, v40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v22 = (uint64_t)v8;
    v23 = v38;
    sub_1009649F8(v22, v38);
    Hasher._combine(_:)(1u);
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v24, v25);
    v26 = (_QWORD *)(v23 + *(int *)(v21 + 20));
    v28 = v26[3];
    v27 = v26[4];
    sub_10001AA44(v26, v28);
    dispatch thunk of RawRepresentable.rawValue.getter(&v41, v28, *(_QWORD *)(v27 + 56));
    Hasher._combine(_:)(v41);
    v29 = v26[3];
    v30 = v26[4];
    sub_10001AA44(v26, v29);
    v31 = sub_100ABA6B0(v29, v30);
    if (v31)
    {
      if (v31 == 1)
      {
        v32 = 0xE900000000000079;
        v33 = 0x7261646E6F636553;
      }
      else
      {
        v32 = 0xEF736E6F69746163;
        v33 = 0x6F4C657275636553;
      }
    }
    else
    {
      v32 = 0xE700000000000000;
      v33 = 0x7972616D697250;
    }
    String.hash(into:)(a1, v33, v32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v23, type metadata accessor for BeaconKeyManager.IndexInformation);
  }
  v34 = type metadata accessor for UUID(0);
  v35 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v34, v35);
  v36 = &v2[v16[13]];
  if ((v36[1] & 1) != 0)
  {
    v37 = 0;
  }
  else
  {
    v37 = *v36;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v37);
}

uint64_t sub_100963B50(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100963B80 + 4 * byte_100E55A38[a1]))(0x737574617473, 0xE600000000000000);
}

uint64_t sub_100963B80()
{
  return 0x6D617473656D6974;
}

uint64_t sub_100963BA0()
{
  return 0x656475746974616CLL;
}

uint64_t sub_100963BB8()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_100963BD4()
{
  return 0xD000000000000012;
}

uint64_t sub_100963BF4()
{
  return 0x656372756F73;
}

uint64_t sub_100963C04()
{
  return 0x657461446E616373;
}

unint64_t sub_100963C1C()
{
  return 0xD000000000000010;
}

uint64_t sub_100963C38()
{
  return 0x696669746E656469;
}

uint64_t sub_100963C54()
{
  return 1953393000;
}

uint64_t sub_100963C64(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  unsigned __int8 v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110D898);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100965E58();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RawSearchResult.CodingKeys, &type metadata for RawSearchResult.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v42 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v42, v5);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for RawSearchResult(0);
    v14 = &v3[v13[5]];
    v41 = 1;
    v15 = type metadata accessor for Date(0);
    v16 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v41, v5, v15, v16);
    v17 = *(double *)&v3[v13[6]];
    v40 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v40, v5, v17);
    v18 = *(double *)&v3[v13[7]];
    v39 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v39, v5, v18);
    v19 = *(double *)&v3[v13[8]];
    v38 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v38, v5, v19);
    v37 = v3[v13[9]];
    v36 = 5;
    v20 = sub_1002ED2E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v5, &type metadata for LocationSource, v20);
    v21 = &v3[v13[10]];
    v35 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v35, v5, v15, v16);
    v22 = &v3[v13[11]];
    v34 = 7;
    v23 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    v24 = sub_100006204(&qword_10110D8A0, type metadata accessor for BeaconKeyManager.IndexInformation, (uint64_t)&unk_100E723F8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v34, v5, v23, v24);
    v25 = &v3[v13[12]];
    v33 = 8;
    v26 = type metadata accessor for UUID(0);
    v27 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v33, v5, v26, v27);
    v28 = &v3[v13[13]];
    v29 = *v28;
    LODWORD(v28) = v28[1];
    v32 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29 | ((_DWORD)v28 << 8), &v32, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100963FBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;

  v45 = a2;
  v3 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v12 - 8);
  v51 = v12;
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = sub_10001A9A8(&qword_10110D880);
  v15 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for RawSearchResult(0);
  __chkstk_darwin(v54);
  v55 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v19 = a1[4];
  v52 = a1;
  sub_10001AA44(a1, v20);
  v21 = sub_100965E58();
  v48 = v17;
  v22 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RawSearchResult.CodingKeys, &type metadata for RawSearchResult.CodingKeys, v21, v20, v19);
  if (v22)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
  v43 = v8;
  v44 = v11;
  v53 = v15;
  v42 = v5;
  BYTE5(v61) = 0;
  v23 = v49;
  v24 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v61 + 5, v49);
  v25 = v55;
  *v55 = v24;
  BYTE4(v61) = 1;
  v26 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v27 = v51;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v14, v51, (char *)&v61 + 4, v23, v51, v26);
  v28 = (int *)v54;
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v50 + 32))(&v25[*(int *)(v54 + 20)], v14, v27);
  BYTE3(v61) = 2;
  *(double *)&v25[v28[6]] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v61 + 3, v23);
  BYTE2(v61) = 3;
  *(double *)&v25[v28[7]] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v61 + 2, v23);
  BYTE1(v61) = 4;
  *(double *)&v25[v28[8]] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v61 + 1, v23);
  v60 = 5;
  v29 = sub_1002ED1DC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for LocationSource, &v60, v23, &type metadata for LocationSource, v29);
  v25[v28[9]] = v61;
  v59 = 6;
  v30 = (uint64_t)v44;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v59, v23, v27, v26);
  sub_100005CF0(v30, (uint64_t)&v25[v28[10]], (uint64_t *)&unk_1010EA690);
  v31 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v58 = 7;
  v32 = sub_100006204(&qword_10110D890, type metadata accessor for BeaconKeyManager.IndexInformation, (uint64_t)&unk_100E72420);
  v33 = (uint64_t)v43;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, &v58, v23, v31, v32);
  sub_100005CF0(v33, (uint64_t)&v25[v28[11]], &qword_1011091A0);
  v57 = 8;
  v34 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v35 = v42;
  v36 = v47;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v42, v47, &v57, v23, v47, v34);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v46 + 32))(&v25[v28[12]], v35, v36);
  v56 = 9;
  v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v56, v23);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v49);
  v38 = (uint64_t)v55;
  v39 = &v55[*(int *)(v54 + 52)];
  *v39 = v37;
  v39[1] = HIBYTE(v37) & 1;
  sub_100964E6C(v38, v45);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
  return sub_1000126B0(v38, type metadata accessor for RawSearchResult);
}

uint64_t sub_100964620()
{
  unsigned __int8 *v0;

  return sub_100963B50(*v0);
}

uint64_t sub_100964628@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1009660D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10096464C(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_100964658(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100965E58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100964680(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100965E58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009646A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100963FBC(a1, a2);
}

uint64_t sub_1009646BC(_QWORD *a1)
{
  return sub_100963C64(a1);
}

Swift::Int sub_1009646D0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_10096370C((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100964710()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_10096370C((uint64_t)v1);
  return Hasher._finalize()();
}

void sub_10096474C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v31;
  uint64_t v32;

  v3 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100E22B00;
  v5 = (int *)type metadata accessor for RawSearchResult(0);
  v6 = *(_QWORD *)(a1 + v5[6]);
  *(_QWORD *)(v4 + 56) = &type metadata for Double;
  *(_QWORD *)(v4 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v4 + 32) = v6;
  v7 = String.init(format:_:)(0x6636302E25, 0xE500000000000000, v4);
  v9 = v8;
  v10 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
  v11 = *(_QWORD *)(a1 + v5[7]);
  *(_QWORD *)(v10 + 56) = &type metadata for Double;
  *(_QWORD *)(v10 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v10 + 32) = v11;
  v12 = String.init(format:_:)(0x6636302E25, 0xE500000000000000, v10);
  v14 = v13;
  v15 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = *(_QWORD *)(a1 + v5[8]);
  *(_QWORD *)(v15 + 56) = &type metadata for Double;
  *(_QWORD *)(v15 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v15 + 32) = v16;
  v17 = String.init(format:_:)(1714433573, 0xE400000000000000, v15);
  v19 = v18;
  v20 = type metadata accessor for Date(0);
  v21 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v31 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
  v32 = v22;
  v23._countAndFlagsBits = 8250;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = v7;
  v24._object = v9;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 47;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = v12;
  v26._object = v14;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 10272;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = v17;
  v28._object = v19;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 41;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  *a2 = v31;
  a2[1] = v32;
}

uint64_t sub_100964970()
{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  v1 = objc_autoreleasePoolPush();
  sub_10096474C(v0, &v3);
  objc_autoreleasePoolPop(v1);
  return v3;
}

uint64_t type metadata accessor for RawSearchResult(uint64_t a1)
{
  uint64_t result;

  result = qword_10110D818;
  if (!qword_10110D818)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RawSearchResult);
  return result;
}

uint64_t sub_1009649F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100964A3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  char v31;
  int *v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  double v40;
  double v41;
  int *v42;
  double v43;
  double v44;
  char v45;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  int *v52;

  v52 = (int *)type metadata accessor for RawSearchResult(0);
  v4 = __chkstk_darwin(v52);
  v51 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v50 = (char *)&v47 - v7;
  v8 = __chkstk_darwin(v6);
  v49 = (char *)&v47 - v9;
  v10 = __chkstk_darwin(v8);
  v48 = (char *)&v47 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v47 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v47 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v47 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v47 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v47 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v47 - v27;
  v29 = *a1;
  v30 = *a2;
  sub_100964E6C((uint64_t)a1, (uint64_t)&v47 - v27);
  sub_100964E6C((uint64_t)a2, (uint64_t)v26);
  if (v29 != v30)
  {
    sub_1000126B0((uint64_t)v26, type metadata accessor for RawSearchResult);
    sub_1000126B0((uint64_t)v28, type metadata accessor for RawSearchResult);
    sub_100964E6C((uint64_t)a1, (uint64_t)v23);
    sub_100964E6C((uint64_t)a2, (uint64_t)v20);
    goto LABEL_8;
  }
  v31 = static Date.== infix(_:_:)(&v28[v52[5]], &v26[v52[5]]);
  sub_1000126B0((uint64_t)v26, type metadata accessor for RawSearchResult);
  sub_1000126B0((uint64_t)v28, type metadata accessor for RawSearchResult);
  sub_100964E6C((uint64_t)a1, (uint64_t)v23);
  sub_100964E6C((uint64_t)a2, (uint64_t)v20);
  if ((v31 & 1) == 0)
  {
LABEL_8:
    sub_1000126B0((uint64_t)v20, type metadata accessor for RawSearchResult);
    sub_1000126B0((uint64_t)v23, type metadata accessor for RawSearchResult);
    sub_100964E6C((uint64_t)a1, (uint64_t)v17);
    sub_100964E6C((uint64_t)a2, (uint64_t)v14);
    v36 = (uint64_t)v50;
    v35 = (uint64_t)v51;
    v38 = (uint64_t)v48;
    v37 = (uint64_t)v49;
    goto LABEL_9;
  }
  v32 = v52;
  v33 = *(double *)&v23[v52[6]];
  sub_1000126B0((uint64_t)v23, type metadata accessor for RawSearchResult);
  v34 = *(double *)&v20[v32[6]];
  sub_1000126B0((uint64_t)v20, type metadata accessor for RawSearchResult);
  sub_100964E6C((uint64_t)a1, (uint64_t)v17);
  sub_100964E6C((uint64_t)a2, (uint64_t)v14);
  v36 = (uint64_t)v50;
  v35 = (uint64_t)v51;
  v38 = (uint64_t)v48;
  v37 = (uint64_t)v49;
  if (v33 != v34)
  {
LABEL_9:
    sub_1000126B0((uint64_t)v14, type metadata accessor for RawSearchResult);
    sub_1000126B0((uint64_t)v17, type metadata accessor for RawSearchResult);
    sub_100964E6C((uint64_t)a1, v38);
    sub_100964E6C((uint64_t)a2, v37);
    goto LABEL_10;
  }
  v39 = v52;
  v40 = *(double *)&v17[v52[7]];
  sub_1000126B0((uint64_t)v17, type metadata accessor for RawSearchResult);
  v41 = *(double *)&v14[v39[7]];
  sub_1000126B0((uint64_t)v14, type metadata accessor for RawSearchResult);
  sub_100964E6C((uint64_t)a1, v38);
  sub_100964E6C((uint64_t)a2, v37);
  if (v40 != v41)
  {
LABEL_10:
    sub_1000126B0(v37, type metadata accessor for RawSearchResult);
    sub_1000126B0(v38, type metadata accessor for RawSearchResult);
    sub_100964E6C((uint64_t)a1, v36);
    sub_100964E6C((uint64_t)a2, v35);
    goto LABEL_11;
  }
  v42 = v52;
  v43 = *(double *)(v38 + v52[8]);
  sub_1000126B0(v38, type metadata accessor for RawSearchResult);
  v44 = *(double *)(v37 + v42[8]);
  sub_1000126B0(v37, type metadata accessor for RawSearchResult);
  sub_100964E6C((uint64_t)a1, v36);
  sub_100964E6C((uint64_t)a2, v35);
  if (v43 != v44)
  {
LABEL_11:
    v45 = 0;
    goto LABEL_12;
  }
  v45 = static UUID.== infix(_:_:)(v36 + v52[12], v35 + v52[12]);
LABEL_12:
  sub_1000126B0(v35, type metadata accessor for RawSearchResult);
  sub_1000126B0(v36, type metadata accessor for RawSearchResult);
  return v45 & 1;
}

uint64_t sub_100964E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RawSearchResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100964EB0(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    v13 = a3[7];
    *(_QWORD *)((char *)v4 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *(_QWORD *)((char *)v4 + v13) = *(_QWORD *)((char *)a2 + v13);
    v14 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[10];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))((char *)a2 + v15, 1, v10))
    {
      v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v16, v17, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    v20 = a3[11];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_10001A9A8(&qword_1011091A0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v21, v22, v26);
      v27 = *(int *)(v23 + 20);
      v28 = *(_OWORD *)&v22[v27 + 24];
      *(_OWORD *)&v21[v27 + 24] = v28;
      (**(void (***)(void))(v28 - 8))();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v29 = a3[12];
    v30 = (char *)v4 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    *(_WORD *)((char *)v4 + a3[13]) = *(_WORD *)((char *)a2 + a3[13]);
  }
  return v4;
}

uint64_t sub_1009650D8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = a1 + a2[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);
  v9 = a1 + a2[11];
  v10 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v9 + *(int *)(v10 + 20)));
  }
  v12 = a1 + a2[12];
  v13 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
}

_BYTE *sub_1009651D4(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  v12 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[v13] = a2[v13];
  v14 = a3[10];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(&a2[v14], 1, v9))
  {
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v15, v16, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  v18 = a3[11];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_10001A9A8(&qword_1011091A0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v19, v20, v24);
    v25 = *(int *)(v21 + 20);
    v26 = *(_OWORD *)&v20[v25 + 24];
    *(_OWORD *)&v19[v25 + 24] = v26;
    (**(void (***)(void))(v26 - 8))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v27 = a3[12];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

_BYTE *sub_1009653D0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v37;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  v12 = a3[10];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v16 = v15(&a1[v12], 1, v9);
  v17 = v15(v14, 1, v9);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v14, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
LABEL_6:
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v11(v13, v14, v9);
LABEL_7:
  v19 = a3[11];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      v37 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v20, v21, v37);
      sub_1001BA974(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)]);
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v20, type metadata accessor for BeaconKeyManager.IndexInformation);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v31 = sub_10001A9A8(&qword_1011091A0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  v27 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v20, v21, v27);
  v28 = *(int *)(v22 + 20);
  v29 = &v20[v28];
  v30 = *(_QWORD *)&v21[v28 + 24];
  *((_QWORD *)v29 + 3) = v30;
  *((_QWORD *)v29 + 4) = *(_QWORD *)&v21[v28 + 32];
  (**(void (***)(void))(v30 - 8))();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  v32 = a3[12];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

_BYTE *sub_100965684(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[v13] = a2[v13];
  v14 = a3[10];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(&a2[v14], 1, v9))
  {
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v15, v16, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  v18 = a3[11];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_10001A9A8(&qword_1011091A0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v19, v20, v24);
    v25 = *(int *)(v21 + 20);
    v26 = &v19[v25];
    v27 = &v20[v25];
    v28 = *((_OWORD *)v27 + 1);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *((_OWORD *)v26 + 1) = v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v29 = a3[12];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

_BYTE *sub_100965878(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t (*v17)(_BYTE *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[v13] = a2[v13];
  v14 = a3[10];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v18 = v17(&a1[v14], 1, v9);
  v19 = v17(v16, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v15, v16, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
LABEL_6:
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v11(v15, v16, v9);
LABEL_7:
  v21 = a3[11];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      v40 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v22, v23, v40);
      v41 = *(int *)(v24 + 20);
      v42 = &v22[v41];
      v43 = &v23[v41];
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
      v44 = *((_OWORD *)v43 + 1);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v44;
      *((_QWORD *)v42 + 4) = *((_QWORD *)v43 + 4);
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v22, type metadata accessor for BeaconKeyManager.IndexInformation);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v34 = sub_10001A9A8(&qword_1011091A0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v29 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v22, v23, v29);
  v30 = *(int *)(v24 + 20);
  v31 = &v22[v30];
  v32 = &v23[v30];
  v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_13:
  v35 = a3[12];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

uint64_t sub_100965B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100965B38);
}

uint64_t sub_100965B38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 237)
  {
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[10];
    }
    else
    {
      v13 = sub_10001A9A8(&qword_1011091A0);
      v7 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
      {
        v8 = v13;
        v9 = a3[11];
      }
      else
      {
        v8 = type metadata accessor for UUID(0);
        v7 = *(_QWORD *)(v8 - 8);
        v9 = a3[12];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v10 >= 0x13)
    return v10 - 18;
  else
    return 0;
}

uint64_t sub_100965C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100965C30);
}

uint64_t sub_100965C30(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 237)
    {
      *(_BYTE *)(a1 + a4[9]) = a2 + 18;
      return result;
    }
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[10];
    }
    else
    {
      v13 = sub_10001A9A8(&qword_1011091A0);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[11];
      }
      else
      {
        v10 = type metadata accessor for UUID(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[12];
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_100965D1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[10];

  v10[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v10[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[5] = &unk_100E55A90;
    sub_100149C5C(319, (unint64_t *)&qword_10110D930, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v10[6] = *(_QWORD *)(v4 - 8) + 64;
      sub_100149C5C(319, (unint64_t *)&unk_10110D828, type metadata accessor for BeaconKeyManager.IndexInformation);
      if (v7 <= 0x3F)
      {
        v10[7] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for UUID(319);
        if (v9 <= 0x3F)
        {
          v10[8] = *(_QWORD *)(v8 - 8) + 64;
          v10[9] = &unk_100E55AA8;
          swift_initStructMetadata(a1, 256, 10, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100965E2C()
{
  return sub_100006204(&qword_10110D878, type metadata accessor for RawSearchResult, (uint64_t)&unk_100E55AC0);
}

unint64_t sub_100965E58()
{
  unint64_t result;

  result = qword_10110D888;
  if (!qword_10110D888)
  {
    result = swift_getWitnessTable(asc_100E55C84, &type metadata for RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D888);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RawSearchResult.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RawSearchResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100965F78 + 4 * byte_100E55A47[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100965FAC + 4 * byte_100E55A42[v4]))();
}

uint64_t sub_100965FAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100965FB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100965FBCLL);
  return result;
}

uint64_t sub_100965FC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100965FD0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100965FD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100965FDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RawSearchResult.CodingKeys()
{
  return &type metadata for RawSearchResult.CodingKeys;
}

unint64_t sub_100965FFC()
{
  unint64_t result;

  result = qword_10110D8A8;
  if (!qword_10110D8A8)
  {
    result = swift_getWitnessTable(byte_100E55C5C, &type metadata for RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D8A8);
  }
  return result;
}

unint64_t sub_100966044()
{
  unint64_t result;

  result = qword_10110D8B0;
  if (!qword_10110D8B0)
  {
    result = swift_getWitnessTable(aM_35, &type metadata for RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D8B0);
  }
  return result;
}

unint64_t sub_10096608C()
{
  unint64_t result;

  result = qword_10110D8B8;
  if (!qword_10110D8B8)
  {
    result = swift_getWitnessTable("݊$", &type metadata for RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D8B8);
  }
  return result;
}

uint64_t sub_1009660D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v7 = 0xE900000000000070;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    v9 = 0xE900000000000065;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000012)
  {
    v10 = 0x8000000100EC3570;
    if (a2 == 0x8000000100EC3570)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC3570, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x657461446E616373 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657461446E616373, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000010)
  {
    v13 = 0x8000000100EEAFB0;
    if (a2 == 0x8000000100EEAFB0)
      goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EEAFB0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v14 = 0xEA00000000007265;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 1953393000 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(1953393000, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t *sub_1009664C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Date(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v20(v16, v17, v18);
    v21 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))((char *)a2 + v21, 1, v18))
    {
      v24 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v20(v22, v23, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
    }
    v26 = a3[13];
    v27 = *(uint64_t *)((char *)a2 + v26);
    *(uint64_t *)((char *)a1 + v26) = v27;
    swift_bridgeObjectRetain(v27);
  }
  return a1;
}

uint64_t sub_10096665C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  v7 = a1 + a2[10];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = a1 + a2[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
    v10(v11, v8);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_10096672C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  v14 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v19(v15, v16, v17);
  v20 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))((char *)a2 + v20, 1, v17))
  {
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v19(v21, v22, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
  }
  v24 = a3[13];
  v25 = *(uint64_t *)((char *)a2 + v24);
  *(uint64_t *)((char *)a1 + v24) = v25;
  swift_bridgeObjectRetain(v25);
  return a1;
}

uint64_t *sub_100966898(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v15 = a3[10];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(char *, char *, uint64_t))(v19 + 24);
  v20(v16, v17, v18);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  v21 = a3[12];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v14) = v24((char *)a1 + v21, 1, v18);
  v25 = v24(v23, 1, v18);
  if (!(_DWORD)v14)
  {
    if (!v25)
    {
      v20(v22, v23, v18);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v26 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
LABEL_7:
  v27 = a3[13];
  v28 = *(uint64_t *)((char *)a2 + v27);
  *(uint64_t *)((char *)a1 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100966A70(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v12 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v17(v13, v14, v15);
  v18 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  v19 = &a1[v18];
  v20 = &a2[v18];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&a2[v18], 1, v15))
  {
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v17(v19, v20, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
  }
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  return a1;
}

uint64_t *sub_100966BCC(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(_QWORD *)&a2[a3[7]];
  *(uint64_t *)((char *)a1 + v13) = *(_QWORD *)&a2[v13];
  v14 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(_QWORD *)&a2[a3[9]];
  v15 = (char *)a1 + v14;
  v16 = &a2[v14];
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 40);
  v19(v15, v16, v17);
  v20 = a3[12];
  *((_BYTE *)a1 + a3[11]) = a2[a3[11]];
  v21 = (char *)a1 + v20;
  v22 = &a2[v20];
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v12) = v23((char *)a1 + v20, 1, v17);
  v24 = v23(v22, 1, v17);
  if (!(_DWORD)v12)
  {
    if (!v24)
    {
      v19(v21, v22, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v22, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
LABEL_7:
  *(uint64_t *)((char *)a1 + a3[13]) = *(_QWORD *)&a2[a3[13]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100966D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100966D94);
}

uint64_t sub_100966D94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  int v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(_QWORD *)(a1 + a3[13]);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t sub_100966E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100966E78);
}

uint64_t sub_100966E78(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[13]) = a2;
  return result;
}

void sub_100966F40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;

  v8 = &unk_100E55D28;
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v9 = *(_QWORD *)(v2 - 8) + 64;
    v10 = v9;
    v11 = (char *)&value witness table for Builtin.Int64 + 64;
    v12 = (char *)&value witness table for Builtin.Int64 + 64;
    v13 = (char *)&value witness table for Builtin.Int64 + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v14 = *(_QWORD *)(v4 - 8) + 64;
      v15 = &unk_100E55D40;
      sub_1000A813C(319);
      if (v7 <= 0x3F)
      {
        v16 = *(_QWORD *)(v6 - 8) + 64;
        v17 = &unk_100E55D58;
        swift_initStructMetadata(a1, 256, 10, &v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100967010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

double sub_100967050(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_10096705C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  id v35;
  NSString v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  id v43;
  uint64_t v44;
  NSString v45;
  id v46;
  uint64_t v47;
  NSString v48;
  id v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  NSString v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t result;
  void *v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  int *v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSString v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  char *v102;
  int *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[2];
  uint64_t v113;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5 = __chkstk_darwin(v4);
  v102 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v99 - v7;
  v9 = type metadata accessor for Date(0);
  v106 = *(_QWORD *)(v9 - 8);
  v107 = v9;
  __chkstk_darwin(v9);
  v105 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v99 - v15;
  v111 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v111 - 8);
  v18 = __chkstk_darwin(v111);
  v104 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v109 = (char *)&v99 - v20;
  v21 = type metadata accessor for BeaconEstimatedLocation(0);
  v103 = (int *)v21;
  v110 = *(int *)(v21 + 52);
  *(uint64_t *)((char *)a2 + v110) = 0;
  v22 = CKRecord.recordType.getter(v21);
  if (v22 == 0xD000000000000017 && v23 == 0x8000000100E55CF0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0xD000000000000017, 0x8000000100E55CF0, 0);
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      v65 = sub_1009697BC();
      v66 = swift_allocError(&type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError, v65, 0, 0);
      *v67 = 0;
      swift_willThrow(v66);

      return swift_bridgeObjectRelease();
    }
  }
  v108 = a2;
  v25 = objc_msgSend(a1, "recordID");
  v26 = objc_msgSend(v25, "recordName");

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  UUID.init(uuidString:)(v27, v29);
  swift_bridgeObjectRelease();
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v31 = v111;
  if (v30(v16, 1, v111) == 1)
  {
    sub_100004048((uint64_t)v16, &qword_1010ED860);
    v32 = sub_1009697BC();
    v33 = swift_allocError(&type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError, v32, 0, 0);
    *v34 = 1;
    swift_willThrow(v33);

    return swift_bridgeObjectRelease();
  }
  v101 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v101(v109, v16, v31);
  v35 = objc_msgSend(a1, "encryptedValues");
  v36 = String._bridgeToObjectiveC()();
  v37 = v35;
  v38 = objc_msgSend(v35, "objectForKeyedSubscript:", v36);

  if (!v38)
    goto LABEL_23;
  v112[0] = v38;
  v40 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0);
  v39 = swift_dynamicCast(&v113, v112, v40, &type metadata for Double, 6);
  if ((v39 & 1) == 0)
    goto LABEL_23;
  v100 = v40;
  v41 = v113;
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v37, "objectForKeyedSubscript:", v42);

  if (!v43)
    goto LABEL_23;
  v112[0] = v43;
  v39 = swift_dynamicCast(&v113, v112, v100, &type metadata for Double, 6);
  if ((v39 & 1) == 0)
    goto LABEL_23;
  v44 = v113;
  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v37, "objectForKeyedSubscript:", v45);

  if (!v46)
    goto LABEL_23;
  v112[0] = v46;
  v39 = swift_dynamicCast(&v113, v112, v100, &type metadata for Double, 6);
  if ((v39 & 1) == 0)
    goto LABEL_23;
  v47 = v113;
  v48 = String._bridgeToObjectiveC()();
  v49 = objc_msgSend(v37, "objectForKeyedSubscript:", v48);

  if (!v49)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v8, 1, 1, v107);
    goto LABEL_22;
  }
  v112[0] = v49;
  v50 = v107;
  v51 = swift_dynamicCast(v8, v112, v100, v107, 6);
  v52 = v106;
  v99 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
  v99(v8, v51 ^ 1u, 1, v50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v8, 1, v50) == 1)
  {
LABEL_22:
    v39 = sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
LABEL_23:
    v68 = static os_log_type_t.error.getter(v39);
    v69 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v70 = swift_allocObject(v69, 72, 7);
    *(_OWORD *)(v70 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v70 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v70 + 64) = sub_100088600();
    *(_QWORD *)(v70 + 32) = a1;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v71 = a1;
    v72 = (void *)static OS_os_log.default.getter(v71);
    os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v72, "Invalid BeaconEstimatedLocation - %@", 36, 2, v70);
    swift_bridgeObjectRelease();

    v73 = sub_1009697BC();
    v74 = swift_allocError(&type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError, v73, 0, 0);
    *v75 = 2;
    swift_willThrow(v74);
    swift_unknownObjectRelease(v37);

    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v105, v8, v50);
  v53 = String._bridgeToObjectiveC()();
  v54 = objc_msgSend(v37, "objectForKeyedSubscript:", v53);

  if (!v54)
    goto LABEL_19;
  v113 = (uint64_t)v54;
  v55 = swift_dynamicCast(v112, &v113, v100, &type metadata for String, 6);
  if ((v55 & 1) == 0)
    goto LABEL_19;
  UUID.init(uuidString:)(v112[0], v112[1]);
  swift_bridgeObjectRelease();
  v56 = v111;
  if (v30(v14, 1, v111) == 1)
  {
    v55 = sub_100004048((uint64_t)v14, &qword_1010ED860);
LABEL_19:
    v57 = static os_log_type_t.error.getter(v55);
    v58 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v59 = swift_allocObject(v58, 72, 7);
    *(_OWORD *)(v59 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v59 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v59 + 64) = sub_100088600();
    *(_QWORD *)(v59 + 32) = a1;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v60 = a1;
    v61 = (void *)static OS_os_log.default.getter(v60);
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v61, "Invalid associatedBeacon - %@", 29, 2, v59);
    swift_bridgeObjectRelease();

    v62 = sub_1009697BC();
    v63 = swift_allocError(&type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError, v62, 0, 0);
    *v64 = 2;
    swift_willThrow(v63);
    swift_unknownObjectRelease(v37);

    (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
LABEL_24:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v109, v111);
    return swift_bridgeObjectRelease();
  }
  v101(v104, v14, v56);
  v77 = objc_autoreleasePoolPush();
  v78 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v78);
  objc_msgSend(v78, "finishEncoding");
  v79 = objc_msgSend(v78, "encodedData");
  v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v79);
  v82 = v81;

  objc_autoreleasePoolPop(v77);
  v84 = v108;
  v83 = v109;
  *v108 = v80;
  v84[1] = v82;
  v85 = v103;
  v86 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v87 = v111;
  v86((char *)v84 + v103[5], v83, v111);
  v86((char *)v84 + v85[6], v104, v87);
  *(uint64_t *)((char *)v84 + v85[7]) = v41;
  *(uint64_t *)((char *)v84 + v85[8]) = v44;
  *(uint64_t *)((char *)v84 + v85[9]) = v47;
  v88 = v106;
  v89 = v107;
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))((char *)v84 + v85[10], v105, v107);
  *((_BYTE *)v84 + v85[11]) = 7;
  v90 = String._bridgeToObjectiveC()();
  v91 = objc_msgSend(v37, "objectForKeyedSubscript:", v90);

  if (v91)
  {
    v112[0] = v91;
    v92 = (uint64_t)v102;
    v93 = swift_dynamicCast(v102, v112, v100, v89, 6) ^ 1;
    v94 = (char *)v92;
  }
  else
  {
    v92 = (uint64_t)v102;
    v94 = v102;
    v93 = 1;
  }
  v99(v94, v93, 1, v89);
  v95 = v108;
  sub_1000A7378(v92, (uint64_t)v108 + v103[12]);
  swift_unknownObjectRelease(v37);

  v96 = *(void (**)(char *, uint64_t))(v17 + 8);
  v97 = v111;
  v96(v104, v111);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v105, v89);
  v96(v109, v97);
  v98 = v110;
  result = swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v95 + v98) = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

void sub_100967AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7970);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7970);
  v5 = objc_autoreleasePoolPush();
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100E55CF0, 1);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  objc_autoreleasePoolPop(v5);
}

void sub_100967BC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v1;
  v12 = v2[1];
  sub_10001BBBC(v11, v12);
  Data.hash(into:)(a1, v11, v12);
  sub_10001BC14(v11, v12);
  v13 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v14 = type metadata accessor for UUID(0);
  v15 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v14, v15);
  dispatch thunk of Hashable.hash(into:)(a1, v14, v15);
  if ((*(uint64_t *)((char *)v2 + v13[7]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v16 = *(uint64_t *)((char *)v2 + v13[7]);
  else
    v16 = 0;
  Hasher._combine(_:)(v16);
  if ((*(uint64_t *)((char *)v2 + v13[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v17 = *(uint64_t *)((char *)v2 + v13[8]);
  else
    v17 = 0;
  Hasher._combine(_:)(v17);
  if ((*(uint64_t *)((char *)v2 + v13[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v18 = *(uint64_t *)((char *)v2 + v13[9]);
  else
    v18 = 0;
  Hasher._combine(_:)(v18);
  v19 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v19);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v13[11]));
  sub_10000F9B8((uint64_t)v2 + v13[12], (uint64_t)v10, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v20 = *(uint64_t *)((char *)v2 + v13[13]);
  if (v20)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v20);
    sub_100969D88(a1, v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_100967E68(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100967EA0 + 4 * byte_100E55CE0[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_100967EA0()
{
  return 0x696669746E656469;
}

uint64_t sub_100967F14()
{
  return 0x6D617473656D6974;
}

uint64_t sub_100967F34()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100967F58()
{
  return 0x657461446E616373;
}

uint64_t sub_100967F70(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100967FA8 + 4 * byte_100E55CE9[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_100967FA8()
{
  return 0x696669746E656469;
}

uint64_t sub_10096801C()
{
  return 0x6D617473656D6974;
}

uint64_t sub_10096803C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100968060()
{
  return 0x657461446E616373;
}

Swift::Int sub_100968078()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100967BC8((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1009680B8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100967BC8((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1009680F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 40), a2 + *(int *)(a3 + 40));
}

BOOL sub_100968100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 40), a1 + *(int *)(a3 + 40)) & 1) == 0;
}

BOOL sub_10096812C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 40), a2 + *(int *)(a3 + 40)) & 1) == 0;
}

uint64_t sub_100968154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 40), a1 + *(int *)(a3 + 40));
}

uint64_t sub_10096816C()
{
  return sub_100006204((unint64_t *)&unk_10110D980, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_100E55D70);
}

void sub_100968198(char *a1)
{
  sub_100512DD4(*a1);
}

Swift::Int sub_1009681A4()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1005158A4((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1009681E8(uint64_t a1)
{
  char *v1;

  sub_1005158A4(a1, *v1);
}

Swift::Int sub_1009681F0()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1005158A4((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t sub_100968230@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10096A94C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10096825C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100967E68(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100968284()
{
  unsigned __int8 *v0;

  return sub_100967F70(*v0);
}

unint64_t sub_10096828C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10096A94C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1009682B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100969800();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009682D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100969800();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100968300(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  id v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(_QWORD);
  _BYTE *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  int v44;
  _BYTE *v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  void (*v53)(_BYTE *, uint64_t);
  _BYTE *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_BYTE *, uint64_t);
  _BYTE *v65;
  _BYTE *v66;
  _QWORD *v67;
  _BYTE v69[12];
  int v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  void (*v75)(_QWORD *, uint64_t, uint64_t);
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;
  _QWORD *v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  void *v87;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v83 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v73 = &v69[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v82 = sub_10001A9A8(&qword_1010ED570);
  v6 = __chkstk_darwin(v82);
  v77 = &v69[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v81 = &v69[-v8];
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v10 = __chkstk_darwin(v9);
  v76 = &v69[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v10);
  v72 = &v69[-v13];
  v14 = __chkstk_darwin(v12);
  v80 = &v69[-v15];
  v16 = __chkstk_darwin(v14);
  v78 = &v69[-v17];
  v18 = __chkstk_darwin(v16);
  v71 = &v69[-v19];
  v20 = __chkstk_darwin(v18);
  v22 = &v69[-v21];
  __chkstk_darwin(v20);
  v79 = &v69[-v23];
  v24 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v24);
  CKRecordKeyValueSetting.subscript.getter(&v85, 0xD000000000000010, 0x8000000100EC3950, ObjectType, &type metadata for String);
  v27 = *((_QWORD *)&v85 + 1);
  v26 = v85;
  v28 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v84 = v2;
  v29 = UUID.uuidString.getter(v28);
  if (!v27)
  {
    v31 = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  if (v26 != v29 || v27 != v30)
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v29, v30, 0);
    swift_bridgeObjectRelease();
    v31 = swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
      goto LABEL_8;
LABEL_7:
    v33 = UUID.uuidString.getter(v31);
    *((_QWORD *)&v86 + 1) = &type metadata for String;
    v87 = &protocol witness table for String;
    *(_QWORD *)&v85 = v33;
    *((_QWORD *)&v85 + 1) = v34;
    CKRecordKeyValueSetting.subscript.setter(&v85, 0xD000000000000010, 0x8000000100EC3950, ObjectType);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter(&v85, 0x656475746974616CLL, 0xE800000000000000, ObjectType, &type metadata for Double);
  v35 = *(double *)(v84 + v28[7]);
  if ((BYTE8(v85) & 1) != 0 || *(double *)&v85 != v35)
  {
    *((_QWORD *)&v86 + 1) = &type metadata for Double;
    v87 = &protocol witness table for Double;
    *(double *)&v85 = v35;
    CKRecordKeyValueSetting.subscript.setter(&v85, 0x656475746974616CLL, 0xE800000000000000, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v85, 0x64757469676E6F6CLL, 0xE900000000000065, ObjectType, &type metadata for Double);
  v36 = *(double *)(v84 + v28[8]);
  if ((BYTE8(v85) & 1) != 0 || *(double *)&v85 != v36)
  {
    *((_QWORD *)&v86 + 1) = &type metadata for Double;
    v87 = &protocol witness table for Double;
    *(double *)&v85 = v36;
    CKRecordKeyValueSetting.subscript.setter(&v85, 0x64757469676E6F6CLL, 0xE900000000000065, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v85, 0xD000000000000012, 0x8000000100EC3570, ObjectType, &type metadata for Double);
  v37 = *(double *)(v84 + v28[9]);
  if ((BYTE8(v85) & 1) != 0 || *(double *)&v85 != v37)
  {
    *((_QWORD *)&v86 + 1) = &type metadata for Double;
    v87 = &protocol witness table for Double;
    *(double *)&v85 = v37;
    CKRecordKeyValueSetting.subscript.setter(&v85, 0xD000000000000012, 0x8000000100EC3570, ObjectType);
  }
  v38 = v79;
  CKRecordKeyValueSetting.subscript.getter(v79, 0x6D617473656D6974, 0xE900000000000070, ObjectType, v4);
  v39 = v83;
  v40 = *(void (**)(_QWORD))(v83 + 16);
  v74 = v84 + v28[10];
  v75 = (void (*)(_QWORD *, uint64_t, uint64_t))v40;
  v40(v22);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v22, 0, 1, v4);
  v41 = v81;
  v42 = (uint64_t)&v81[*(int *)(v82 + 48)];
  sub_10000F9B8((uint64_t)v38, (uint64_t)v81, (uint64_t *)&unk_1010EA690);
  sub_10000F9B8((uint64_t)v22, v42, (uint64_t *)&unk_1010EA690);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  if (v43((uint64_t)v41, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v38, (uint64_t *)&unk_1010EA690);
    v44 = v43(v42, 1, v4);
    v45 = v80;
    v46 = v78;
    if (v44 == 1)
    {
      sub_100004048((uint64_t)v81, (uint64_t *)&unk_1010EA690);
      v47 = (uint64_t)v77;
      goto LABEL_25;
    }
  }
  else
  {
    v48 = v71;
    sub_10000F9B8((uint64_t)v41, (uint64_t)v71, (uint64_t *)&unk_1010EA690);
    v49 = v43(v42, 1, v4);
    v46 = v78;
    if (v49 != 1)
    {
      v50 = v83;
      v51 = v73;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v83 + 32))(v73, v42, v4);
      v52 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v70 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v51, v4, v52);
      v53 = *(void (**)(_BYTE *, uint64_t))(v50 + 8);
      v54 = v51;
      v46 = v78;
      v53(v54, v4);
      sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010EA690);
      sub_100004048((uint64_t)v79, (uint64_t *)&unk_1010EA690);
      v53(v48, v4);
      sub_100004048((uint64_t)v81, (uint64_t *)&unk_1010EA690);
      v47 = (uint64_t)v77;
      v45 = v80;
      if ((v70 & 1) != 0)
        goto LABEL_25;
      goto LABEL_24;
    }
    sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v79, (uint64_t *)&unk_1010EA690);
    (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v48, v4);
    v45 = v80;
  }
  sub_100004048((uint64_t)v81, &qword_1010ED570);
  v47 = (uint64_t)v77;
LABEL_24:
  *((_QWORD *)&v86 + 1) = v4;
  v87 = &protocol witness table for Date;
  v55 = sub_100018F08(&v85);
  v75(v55, v74, v4);
  CKRecordKeyValueSetting.subscript.setter(&v85, 0x6D617473656D6974, 0xE900000000000070, ObjectType);
LABEL_25:
  CKRecordKeyValueSetting.subscript.getter(v46, 0x657461446E616373, 0xE800000000000000, ObjectType, v4);
  v56 = v84 + v28[12];
  sub_10000F9B8(v56, (uint64_t)v45, (uint64_t *)&unk_1010EA690);
  v57 = v47 + *(int *)(v82 + 48);
  sub_10000F9B8((uint64_t)v46, v47, (uint64_t *)&unk_1010EA690);
  sub_10000F9B8((uint64_t)v45, v57, (uint64_t *)&unk_1010EA690);
  if (v43(v47, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v45, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v46, (uint64_t *)&unk_1010EA690);
    if (v43(v57, 1, v4) == 1)
    {
      sub_100004048(v47, (uint64_t *)&unk_1010EA690);
      return swift_unknownObjectRelease(v24);
    }
  }
  else
  {
    v58 = v72;
    sub_10000F9B8(v47, (uint64_t)v72, (uint64_t *)&unk_1010EA690);
    if (v43(v57, 1, v4) != 1)
    {
      v84 = v56;
      v59 = v58;
      v60 = v83;
      v61 = v73;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v83 + 32))(v73, v57, v4);
      v62 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      LODWORD(v82) = dispatch thunk of static Equatable.== infix(_:_:)(v59, v61, v4, v62);
      v63 = (uint64_t)v46;
      v64 = *(void (**)(_BYTE *, uint64_t))(v60 + 8);
      v64(v61, v4);
      sub_100004048((uint64_t)v80, (uint64_t *)&unk_1010EA690);
      sub_100004048(v63, (uint64_t *)&unk_1010EA690);
      v65 = v59;
      v56 = v84;
      v64(v65, v4);
      sub_100004048(v47, (uint64_t *)&unk_1010EA690);
      if ((v82 & 1) != 0)
        return swift_unknownObjectRelease(v24);
      goto LABEL_32;
    }
    sub_100004048((uint64_t)v80, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v46, (uint64_t *)&unk_1010EA690);
    (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v58, v4);
  }
  sub_100004048(v47, &qword_1010ED570);
LABEL_32:
  v66 = v76;
  sub_10000F9B8(v56, (uint64_t)v76, (uint64_t *)&unk_1010EA690);
  if (v43((uint64_t)v66, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v66, (uint64_t *)&unk_1010EA690);
    v85 = 0u;
    v86 = 0u;
    v87 = 0;
  }
  else
  {
    *((_QWORD *)&v86 + 1) = v4;
    v87 = &protocol witness table for Date;
    v67 = sub_100018F08(&v85);
    (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v83 + 32))(v67, v66, v4);
  }
  CKRecordKeyValueSetting.subscript.setter(&v85, 0x657461446E616373, 0xE800000000000000, ObjectType);
  return swift_unknownObjectRelease(v24);
}

uint64_t sub_100968CD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  int *v34;
  double v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v44)(char *, _QWORD *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  int *v57;
  __int128 v58;
  char v59;

  v46 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v47 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  v49 = v6;
  __chkstk_darwin(v5);
  v8 = (void (**)(char *, _QWORD *, uint64_t))((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v55 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v55 - 8);
  v9 = __chkstk_darwin(v55);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v44 - v12;
  v50 = sub_10001A9A8(&qword_10110D9A8);
  v14 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BeaconEstimatedLocation(0);
  v57 = (int *)__chkstk_darwin(v17);
  v53 = v57[13];
  v54 = a1;
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v19[v53] = 0;
  v21 = a1[3];
  v20 = a1[4];
  sub_10001AA44(a1, v21);
  v22 = sub_100969800();
  v51 = v16;
  v23 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeaconEstimatedLocation.CodingKeys, &type metadata for BeaconEstimatedLocation.CodingKeys, v22, v21, v20);
  if (v23)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v24 = v13;
    v25 = v11;
    v56 = v8;
    v59 = 0;
    v26 = sub_100036994();
    v27 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for Data, &v59, v50, &type metadata for Data, v26);
    *(_OWORD *)v19 = v58;
    LOBYTE(v58) = 1;
    v28 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = v24;
    v30 = v24;
    v31 = v55;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v55, &v58, v27, v55, v28);
    v45 = v14;
    v32 = &v19[v57[5]];
    v44 = *(void (**)(char *, _QWORD *, uint64_t))(v52 + 32);
    v44(v32, v29, v31);
    LOBYTE(v58) = 2;
    v33 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v25, v31, &v58, v27, v31, v28);
    v34 = v57;
    v44(&v19[v57[6]], v33, v31);
    LOBYTE(v58) = 3;
    v35 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v27);
    v36 = v54;
    *(double *)&v19[v34[7]] = v35;
    LOBYTE(v58) = 4;
    *(double *)&v19[v34[8]] = KeyedDecodingContainer.decode(_:forKey:)(&v58, v50);
    LOBYTE(v58) = 5;
    *(double *)&v19[v34[9]] = KeyedDecodingContainer.decode(_:forKey:)(&v58, v50);
    LOBYTE(v58) = 6;
    v37 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v38 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v56, v48, &v58, v50, v48, v37);
    v45 = v37;
    (*(void (**)(char *, _QWORD *, uint64_t))(v49 + 32))(&v19[v34[10]], v56, v38);
    v59 = 7;
    v39 = sub_1002ED1DC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for LocationSource, &v59, v50, &type metadata for LocationSource, v39);
    v40 = v38;
    v19[v34[11]] = v58;
    LOBYTE(v58) = 8;
    v41 = (uint64_t)v47;
    v42 = v51;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v40, &v58, v50, v40, v45);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v42, v50);
    sub_1000A7378(v41, (uint64_t)&v19[v34[12]]);
    sub_10005972C((uint64_t)v19, v46, type metadata accessor for BeaconEstimatedLocation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
    return sub_1000126B0((uint64_t)v19, type metadata accessor for BeaconEstimatedLocation);
  }
}

uint64_t sub_10096933C(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double v19;
  double v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v29;
  char v30;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110D9C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100969800();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeaconEstimatedLocation.CodingKeys, &type metadata for BeaconEstimatedLocation.CodingKeys, v11, v9, v10);
  v29 = *v3;
  v30 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v29) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v29, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v29) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v29, v5, v15, v16);
    v18 = *(double *)((char *)v3 + v13[7]);
    LOBYTE(v29) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v18);
    v19 = *(double *)((char *)v3 + v13[8]);
    LOBYTE(v29) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v19);
    v20 = *(double *)((char *)v3 + v13[9]);
    LOBYTE(v29) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v20);
    v21 = (char *)v3 + v13[10];
    LOBYTE(v29) = 6;
    v22 = type metadata accessor for Date(0);
    v23 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v29, v5, v22, v23);
    LOBYTE(v29) = *((_BYTE *)v3 + v13[11]);
    v30 = 7;
    v24 = sub_1002ED2E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v30, v5, &type metadata for LocationSource, v24);
    v25 = (char *)v3 + v13[12];
    LOBYTE(v29) = 8;
    v26 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    v27 = sub_100969844();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v29, v5, v26, v27);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100969660()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_autoreleasePoolPush();
  if (qword_1010EA060 != -1)
    swift_once(&qword_1010EA060, sub_100967AE8);
  v1 = type metadata accessor for URL(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7970);
  v3 = UUID.uuidString.getter(v2);
  URL.appendingPathComponent(_:)(v3, v4);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1009696FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100968CD4(a1, a2);
}

uint64_t sub_100969710(_QWORD *a1)
{
  return sub_10096933C(a1);
}

uint64_t sub_100969724(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_101111500, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_100E55E48);
  result = sub_100006204(&qword_10110D990, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_100E55E20);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100969780(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_101108310, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_100E55E70);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1009697BC()
{
  unint64_t result;

  result = qword_10110D998;
  if (!qword_10110D998)
  {
    result = swift_getWitnessTable(asc_100E56090, &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError);
    atomic_store(result, (unint64_t *)&qword_10110D998);
  }
  return result;
}

unint64_t sub_100969800()
{
  unint64_t result;

  result = qword_10110D9B0;
  if (!qword_10110D9B0)
  {
    result = swift_getWitnessTable(aA_42, &type metadata for BeaconEstimatedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D9B0);
  }
  return result;
}

unint64_t sub_100969844()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_10110D9D0;
  if (!qword_10110D9D0)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010EA690);
    v2 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_10110D9D0);
  }
  return result;
}

void sub_1009698C0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::UInt8 *v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt8 *)(a2 + 56);
    do
    {
      v6 = *((_QWORD *)v5 - 2);
      v7 = *((_QWORD *)v5 - 1);
      v8 = *(v5 - 24);
      v9 = *v5;
      v5 += 32;
      Hasher._combine(_:)(v8);
      sub_10001BBBC(v6, v7);
      Data.hash(into:)(a1, v6, v7);
      Hasher._combine(_:)(v9);
      sub_10001BC14(v6, v7);
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_10096994C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v19 = a1;
  Hasher._combine(_:)(v11);
  if (v11)
  {
    v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v14(v10, v12, v4);
      v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0, 1, v4);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
      if ((_DWORD)result == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      v17 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v19, v4, v17);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v12 += v13;
      if (!--v11)
        return v15(v10, 1, 1, v4);
    }
  }
  else
  {
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v15(v10, 1, 1, v4);
  }
  return result;
}

void sub_100969AF0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  uint64_t *v5;
  Swift::UInt8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (uint64_t *)(a2 + 48);
    do
    {
      v8 = *(v5 - 1);
      v7 = *v5;
      v10 = v5[1];
      v9 = v5[2];
      v12 = v5[3];
      v11 = v5[4];
      v13 = *((unsigned __int8 *)v5 + 40);
      Hasher._combine(_:)(*((_BYTE *)v5 - 16));
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain_n(v7, 2);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(a1, v8, v7);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(a1, v10, v9);
      swift_bridgeObjectRelease(v9);
      if (v11)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(a1, v12, v11);
        swift_bridgeObjectRelease(v11);
        if (v13 != 2)
          goto LABEL_9;
      }
      else
      {
        Hasher._combine(_:)(0);
        if (v13 != 2)
        {
LABEL_9:
          v6 = v13 & 1;
          Hasher._combine(_:)(1u);
          goto LABEL_4;
        }
      }
      v6 = 0;
LABEL_4:
      v5 += 8;
      Hasher._combine(_:)(v6);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      --v4;
    }
    while (v4);
  }
}

void sub_100969C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 *v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for WildModeTrackingLocation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (Swift::UInt64 *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v10 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_10005972C(v9, (uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
      if ((*v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v11 = *v7;
      else
        v11 = 0;
      Hasher._combine(_:)(v11);
      if ((v7[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v12 = v7[1];
      else
        v12 = 0;
      Hasher._combine(_:)(v12);
      if ((v7[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v13 = v7[2];
      else
        v13 = 0;
      Hasher._combine(_:)(v13);
      v14 = type metadata accessor for Date(0);
      v15 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(a1, v14, v15);
      sub_1000126B0((uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
      v9 += v10;
      --v8;
    }
    while (v8);
  }
}

void sub_100969D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt8 *v17;
  Swift::UInt v18;
  uint64_t v19;
  Swift::UInt8 v20;
  uint64_t v21;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::UInt8 *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  Swift::UInt64 v54;

  v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4);
  v51 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v47 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for RawSearchResult(0);
  v15 = *((_QWORD *)v14 - 1);
  __chkstk_darwin(v14);
  v17 = (Swift::UInt8 *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v18);
  if (v18)
  {
    v19 = a2 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v48 = *(_QWORD *)(v15 + 72);
    v52 = v13;
    v45 = v9;
    v46 = v8;
    do
    {
      sub_10005972C(v19, (uint64_t)v17, type metadata accessor for RawSearchResult);
      Hasher._combine(_:)(*v17);
      v21 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(a1, v9, v21);
      if ((*(_QWORD *)&v17[v14[6]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v22 = *(_QWORD *)&v17[v14[6]];
      else
        v22 = 0;
      Hasher._combine(_:)(v22);
      if ((*(_QWORD *)&v17[v14[7]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v23 = *(_QWORD *)&v17[v14[7]];
      else
        v23 = 0;
      Hasher._combine(_:)(v23);
      if ((*(_QWORD *)&v17[v14[8]] & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v24 = *(_QWORD *)&v17[v14[8]];
      else
        v24 = 0;
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v17[v14[9]]);
      sub_10000F9B8((uint64_t)&v17[v14[10]], (uint64_t)v13, (uint64_t *)&unk_1010EA690);
      v25 = v53;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v13, 1, v9) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v26 = v47;
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v47, v52, v9);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)(a1, v9, v21);
        v27 = v26;
        v13 = v52;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v9);
      }
      v29 = v49;
      v28 = v50;
      sub_10000F9B8((uint64_t)&v17[v14[11]], (uint64_t)v8, &qword_1011091A0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v8, 1, v28) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v30 = (uint64_t)v8;
        v31 = v51;
        sub_1009649F8(v30, v51);
        Hasher._combine(_:)(1u);
        v32 = type metadata accessor for UUID(0);
        v33 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(a1, v32, v33);
        v34 = (_QWORD *)(v31 + *(int *)(v28 + 20));
        v36 = v34[3];
        v35 = v34[4];
        sub_10001AA44(v34, v36);
        dispatch thunk of RawRepresentable.rawValue.getter(&v54, v36, *(_QWORD *)(v35 + 56));
        Hasher._combine(_:)(v54);
        v37 = v34[3];
        v38 = v34[4];
        sub_10001AA44(v34, v37);
        v39 = sub_100ABA6B0(v37, v38);
        if (v39)
        {
          if (v39 == 1)
          {
            v40 = 0xE900000000000079;
            v41 = 0x7261646E6F636553;
          }
          else
          {
            v40 = 0xEF736E6F69746163;
            v41 = 0x6F4C657275636553;
          }
        }
        else
        {
          v40 = 0xE700000000000000;
          v41 = 0x7972616D697250;
        }
        v9 = v45;
        v8 = v46;
        v13 = v52;
        String.hash(into:)(a1, v41, v40);
        swift_bridgeObjectRelease();
        sub_1000126B0(v51, type metadata accessor for BeaconKeyManager.IndexInformation);
      }
      v42 = type metadata accessor for UUID(0);
      v43 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(a1, v42, v43);
      v44 = &v17[v14[13]];
      if ((v44[1] & 1) != 0)
      {
        v20 = 0;
      }
      else
      {
        v20 = *v44;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v20);
      sub_1000126B0((uint64_t)v17, type metadata accessor for RawSearchResult);
      v19 += v48;
      --v18;
    }
    while (v18);
  }
}

uint64_t sub_10096A28C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  int *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED570);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v34 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v34 - v18;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v20 & 1) == 0)
    return 0;
  v37 = v4;
  v21 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  if ((static UUID.== infix(_:_:)((char *)a1 + v21[5], a2 + v21[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v21[6], a2 + v21[6]) & 1) == 0
    || *(double *)((char *)a1 + v21[7]) != *(double *)(a2 + v21[7])
    || *(double *)((char *)a1 + v21[8]) != *(double *)(a2 + v21[8])
    || *(double *)((char *)a1 + v21[9]) != *(double *)(a2 + v21[9])
    || (static Date.== infix(_:_:)((char *)a1 + v21[10], a2 + v21[10]) & 1) == 0
    || *((unsigned __int8 *)a1 + v21[11]) != *(unsigned __int8 *)(a2 + v21[11]))
  {
    return 0;
  }
  sub_10000F9B8((uint64_t)a1 + v21[12], (uint64_t)v19, (uint64_t *)&unk_1010EA690);
  v35 = v21;
  sub_10000F9B8(a2 + v21[12], (uint64_t)v17, (uint64_t *)&unk_1010EA690);
  v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10000F9B8((uint64_t)v19, (uint64_t)v10, (uint64_t *)&unk_1010EA690);
  v36 = v22;
  sub_10000F9B8((uint64_t)v17, v22, (uint64_t *)&unk_1010EA690);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v24 = v37;
  if (v23((uint64_t)v10, 1, v37) != 1)
  {
    sub_10000F9B8((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_1010EA690);
    if (v23(v36, 1, v24) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v36, v24);
      v26 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v24, v26);
      v28 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28(v7, v24);
      sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
      sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
      v28(v14, v24);
      sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010EA690);
      if ((v27 & 1) == 0)
        return 0;
      goto LABEL_18;
    }
    sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v24);
LABEL_14:
    sub_100004048((uint64_t)v10, &qword_1010ED570);
    return 0;
  }
  sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
  sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
  if (v23(v36, 1, v24) != 1)
    goto LABEL_14;
  sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010EA690);
LABEL_18:
  v29 = v35[13];
  v30 = *(uint64_t *)((char *)a1 + v29);
  v31 = *(_QWORD *)(a2 + v29);
  if (v30)
  {
    if (v31)
    {
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v30);
      v33 = sub_100248A44(v32, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0)
        return 1;
    }
  }
  else if (!v31)
  {
    return 1;
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for BeaconEstimatedLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10096A6E0 + 4 * byte_100E55CF7[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10096A714 + 4 * byte_100E55CF2[v4]))();
}

uint64_t sub_10096A714(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10096A71C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10096A724);
  return result;
}

uint64_t sub_10096A730(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10096A738);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10096A73C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10096A744(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconEstimatedLocation.CodingKeys()
{
  return &type metadata for BeaconEstimatedLocation.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10096A7AC + 4 * byte_100E55D01[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10096A7E0 + 4 * byte_100E55CFC[v4]))();
}

uint64_t sub_10096A7E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10096A7E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10096A7F0);
  return result;
}

uint64_t sub_10096A7FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10096A804);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10096A808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10096A810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError()
{
  return &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError;
}

unint64_t sub_10096A830()
{
  unint64_t result;

  result = qword_10110D9E0;
  if (!qword_10110D9E0)
  {
    result = swift_getWitnessTable(byte_100E55F28, &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError);
    atomic_store(result, (unint64_t *)&qword_10110D9E0);
  }
  return result;
}

unint64_t sub_10096A878()
{
  unint64_t result;

  result = qword_10110D9E8;
  if (!qword_10110D9E8)
  {
    result = swift_getWitnessTable(byte_100E56018, &type metadata for BeaconEstimatedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D9E8);
  }
  return result;
}

unint64_t sub_10096A8C0()
{
  unint64_t result;

  result = qword_10110D9F0;
  if (!qword_10110D9F0)
  {
    result = swift_getWitnessTable(byte_100E55F50, &type metadata for BeaconEstimatedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D9F0);
  }
  return result;
}

unint64_t sub_10096A908()
{
  unint64_t result;

  result = qword_10110D9F8;
  if (!qword_10110D9F8)
  {
    result = swift_getWitnessTable("ى$", &type metadata for BeaconEstimatedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110D9F8);
  }
  return result;
}

unint64_t sub_10096A94C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D038, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t sub_10096A994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7988);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7988);
  if (qword_1010EA070 != -1)
    swift_once(&qword_1010EA070, sub_10096E110);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B79A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_10096AA24()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  v1[14] = 0xD00000000000002BLL;
  v1[15] = 0x8000000100E56100;
  v1[17] = _swiftEmptyDictionarySingleton;
  v1[18] = _swiftEmptyDictionarySingleton;
  sub_10001F6FC();
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v20 = _swiftEmptyArrayStorage;
  v13 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v2, v13);
  v1[19] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x75657551646E6573, 0xE900000000000065, v7, v4, v11, 0);
  v16 = sub_10001A9A8(&qword_10110DC30);
  swift_allocObject(v16, 248, 7);
  sub_10096EFCC(0xD000000000000037, (void *)0x8000000100EC7B10, 6, (uint64_t (*)(_QWORD *))sub_1006BA740, &qword_10110DC38, &qword_10110DC30, (uint64_t)sub_10096F964, 60.0, 30.0);
  v1[16] = v17;
  return v1;
}

uint64_t sub_10096AC88()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10096ACA0, v0, 0);
}

uint64_t sub_10096ACA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD **)(v1 + 128);
  v3 = v2[15];
  v4 = v2[16];
  v2[15] = sub_10096E3C4;
  v2[16] = v1;
  swift_retain();
  sub_10001D8A8(v3, v4);
  v5 = v2[17];
  v6 = v2[18];
  v2[17] = sub_10096E3D4;
  v2[18] = v1;
  swift_retain();
  sub_10001D8A8(v5, v6);
  v7 = swift_allocObject(&unk_10109EAE8, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10096E3DC;
  *(_QWORD *)(v7 + 24) = v1;
  v8 = v2[19];
  v9 = v2[20];
  v2[19] = sub_1003CFC7C;
  v2[20] = v7;
  swift_retain();
  sub_10001D8A8(v8, v9);
  v10 = v2[21];
  v11 = v2[22];
  v2[21] = sub_10096E408;
  v2[22] = v1;
  swift_retain();
  sub_10001D8A8(v10, v11);
  v12 = v2[23];
  v13 = v2[24];
  v2[23] = sub_10096E430;
  v2[24] = v1;
  swift_retain();
  sub_10001D8A8(v12, v13);
  v14 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc(v14);
  *(_QWORD *)(v0 + 24) = v15;
  *v15 = v0;
  v15[1] = sub_1002A7BC0;
  return unsafeBlocking<A>(_:)(v15, sub_10096E458, *(_QWORD *)(v0 + 16), &type metadata for () + 1);
}

uint64_t sub_10096ADF0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a5;
  v23 = a4;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Transaction(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (char *)swift_allocObject(&unk_10109EC78, v18 + 24, v16 | 7);
  *((_QWORD *)v19 + 2) = a7;
  *((_QWORD *)v19 + 3) = a1;
  *((_QWORD *)v19 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v19[v17], v15, v12);
  v20 = &v19[v18];
  *v20 = v23;
  *((_QWORD *)v20 + 1) = v25;
  *((_QWORD *)v20 + 2) = a6;
  swift_retain(a7);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a6);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11, 2, &unk_10110DC00, v19);
  return swift_release(v19);
}

uint64_t sub_10096AF48(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[4];
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a7;
  v28 = a8;
  v26 = a6;
  v25 = a4;
  v24 = a3;
  v15 = type metadata accessor for MessagingMessageContext(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v29 = type metadata accessor for Transaction(0);
  sub_1003EA8D8(a11, (uint64_t)&v23[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = (v18 + 104) & ~v18;
  v20 = swift_allocObject(&unk_10109EC00, v19 + v17, v18 | 7);
  *(_QWORD *)(v20 + 16) = a12;
  *(_QWORD *)(v20 + 24) = a1;
  *(_QWORD *)(v20 + 32) = a2;
  *(_BYTE *)(v20 + 40) = v24;
  *(_QWORD *)(v20 + 48) = v25;
  *(_QWORD *)(v20 + 56) = a5;
  *(_BYTE *)(v20 + 64) = v26;
  v21 = v28;
  *(_QWORD *)(v20 + 72) = v27;
  *(_QWORD *)(v20 + 80) = v21;
  *(_QWORD *)(v20 + 88) = a9;
  *(_QWORD *)(v20 + 96) = a10;
  sub_1002EAACC((uint64_t)&v23[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)], v20 + v19);
  swift_retain();
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a5);
  sub_10001BBBC(v21, a9);
  swift_bridgeObjectRetain(a10);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11, 2, &unk_10110DBC8, v20);
  return swift_release();
}

uint64_t sub_10096B0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[14] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[15] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v6);
  v3[17] = swift_task_alloc(v6);
  return swift_task_switch(sub_10096B120, v2, 0);
}

uint64_t sub_10096B120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(v1 + 88);
  v3 = *(_QWORD *)(v1 + 136);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 104);
  UUID.init()(a1);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v3, v2, v4);
  sub_100030784(v6, v1 + 16);
  swift_beginAccess(v7 + 136, v1 + 56, 33, 0);
  sub_100100560(v1 + 16, v3);
  swift_endAccess(v1 + 56);
  if (qword_1010EA068 != -1)
    swift_once(&qword_1010EA068, sub_10096A994);
  v9 = *(_QWORD *)(v1 + 128);
  v10 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 88);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7988);
  v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, v11, v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v1 + 128);
  v18 = *(_QWORD *)(v1 + 112);
  if (v16)
  {
    v26 = *(_QWORD *)(v1 + 120);
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v27 = v20;
    *(_DWORD *)v19 = 136446210;
    v21 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
    *(_QWORD *)(v1 + 80) = sub_100016940(v22, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Added client: %{public}s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 120) + 8))(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 112));
  }

  v24 = *(_QWORD *)(v1 + 128);
  swift_task_dealloc(*(_QWORD *)(v1 + 136));
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10096B39C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = v6;
  *(_QWORD *)(v7 + 32) = a4;
  *(_QWORD *)(v7 + 40) = a5;
  *(_BYTE *)(v7 + 136) = a2;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v7 + 64) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 72) = v9;
  *(_QWORD *)(v7 + 80) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v7 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10096B42C, v6, 0);
}

uint64_t sub_10096B42C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 40);
  v13 = *(_OWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(v1, 1, 1, *(_QWORD *)(v0 + 64));
  v6 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 96) = v6;
  v7 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 104) = v7;
  UUID.init()(v7);
  v9 = sub_100006C64(&qword_10110DB40, v8, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount, (uint64_t)&unk_100E561AC);
  v10 = swift_task_alloc(128);
  *(_QWORD *)(v0 + 112) = v10;
  *(_QWORD *)(v10 + 16) = v3;
  *(_QWORD *)(v10 + 24) = v2;
  *(_BYTE *)(v10 + 32) = v5;
  *(_OWORD *)(v10 + 40) = v13;
  *(_QWORD *)(v10 + 56) = v4;
  *(_QWORD *)(v10 + 64) = v14;
  *(_QWORD *)(v10 + 72) = v1;
  *(_QWORD *)(v10 + 80) = 0;
  *(_WORD *)(v10 + 88) = 1;
  *(_QWORD *)(v10 + 96) = v6;
  *(_QWORD *)(v10 + 104) = v7;
  *(_QWORD *)(v10 + 112) = 0;
  *(_QWORD *)(v10 + 120) = 0;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 120) = v11;
  *v11 = v0;
  v11[1] = sub_10096B58C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), v3, v9, 0xD000000000000083, 0x8000000100EEB060, sub_10096E370, v10, *(_QWORD *)(v0 + 64));
}

uint64_t sub_10096B58C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 112);
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_10096B67C;
  else
    v5 = sub_10096B600;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_10096B600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v2, *(_QWORD *)(v0 + 64));
  sub_100004048(v1, &qword_1010ED860);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10096B67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(v2, *(_QWORD *)(v0 + 64));
  sub_100004048(v1, &qword_1010ED860);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10096B6F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD aBlock[6];

  v86 = a8;
  v99 = a6;
  v100 = a7;
  v82 = a5;
  v81 = a4;
  v70 = a3;
  v101 = a2;
  v89 = a15;
  v90 = a16;
  v88 = a14;
  v87 = a13;
  v85 = a12;
  v84 = a11;
  v83 = a10;
  v79 = a9;
  v93 = type metadata accessor for DispatchWorkItemFlags(0);
  v96 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v92 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v94 = *(_QWORD *)(v19 - 8);
  v95 = v19;
  __chkstk_darwin(v19);
  v91 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1010EF178);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = v21;
  v78 = *(_QWORD *)(v22 + 64);
  v24 = v22;
  __chkstk_darwin(v21);
  v98 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010ED860);
  v76 = *(_QWORD *)(v26 - 8);
  v77 = *(_QWORD *)(v76 + 64);
  __chkstk_darwin(v26);
  v97 = (uint64_t)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_1010EF180);
  __chkstk_darwin(v28);
  v30 = (char *)&v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64);
  v74 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v33 = (char *)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v73 = v31;
  v35(v33, a3, v31);
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v36 = v23;
  v72(v30, a1, v23);
  v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
  v71 = v24;
  v75 = v23;
  v37(v30, 0, 1, v23);
  v38 = v101;
  swift_beginAccess(v101 + 144, aBlock, 33, 0);
  sub_100100668((uint64_t)v30, (uint64_t)v33);
  swift_endAccess(aBlock);
  v80 = *(_QWORD *)(v38 + 152);
  v35(v33, v70, v31);
  sub_10000F9B8(v79, v97, &qword_1010ED860);
  v72(v98, a1, v36);
  v39 = v74;
  v40 = *(unsigned __int8 *)(v74 + 80);
  v41 = (v40 + 56) & ~v40;
  v42 = (v32 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = *(unsigned __int8 *)(v76 + 80);
  v44 = (v43 + v42 + 8) & ~v43;
  v45 = (v77 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  v79 = (v45 + 17) & 0xFFFFFFFFFFFFFFF8;
  v46 = (v79 + 15) & 0xFFFFFFFFFFFFFFF8;
  v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
  v48 = *(unsigned __int8 *)(v24 + 80);
  v49 = (v48 + v47 + 16) & ~v48;
  v50 = swift_allocObject(&unk_10109EA70, v49 + v78, v40 | v43 | v48 | 7);
  *(_QWORD *)(v50 + 16) = v101;
  *(_BYTE *)(v50 + 24) = v81;
  v51 = v99;
  *(_QWORD *)(v50 + 32) = v82;
  *(_QWORD *)(v50 + 40) = v51;
  *(_QWORD *)(v50 + 48) = v100;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v50 + v41, v33, v73);
  v52 = v86;
  *(_QWORD *)(v50 + v42) = v86;
  sub_1001C0884(v97, v50 + v44);
  v53 = v50 + v45;
  *(_QWORD *)v53 = v83;
  *(_BYTE *)(v53 + 8) = v84 & 1;
  *(_BYTE *)(v53 + 9) = v85;
  v54 = v87;
  *(_QWORD *)(v50 + v79) = v87;
  v56 = v88;
  v55 = v89;
  *(_QWORD *)(v50 + v46) = v88;
  v57 = (_QWORD *)(v50 + v47);
  v58 = v90;
  *v57 = v55;
  v57[1] = v58;
  (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v50 + v49, v98, v75);
  aBlock[4] = sub_10096C374;
  aBlock[5] = v50;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10109EA88;
  v59 = _Block_copy(aBlock);
  swift_retain();
  sub_10001BBBC(v99, v100);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v56);
  v60 = v91;
  static DispatchQoS.unspecified.getter(v61);
  v102 = _swiftEmptyArrayStorage;
  v62 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v63 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v64 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v65 = v92;
  v66 = v63;
  v67 = v93;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v102, v66, v64, v93, v62);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v60, v65, v59);
  _Block_release(v59);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v65, v67);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v60, v95);
  return swift_release();
}

uint64_t sub_10096BCF4(uint64_t a1, int a2, void (*a3)(os_log_t, uint64_t), uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD, _QWORD, _QWORD), uint64_t a9, char a10, unsigned __int8 a11, __int128 a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  __int128 v25;
  _QWORD v26[3];
  uint64_t v27;
  __int128 v28;
  int v29;
  int v30;
  void (*v31)(os_log_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD, _QWORD, _QWORD);
  uint64_t v37;
  char *v38;

  v35 = a7;
  v36 = a8;
  v31 = a3;
  v32 = a4;
  v33 = a9;
  v34 = a5;
  v29 = a11;
  v30 = a2;
  v28 = a12;
  v27 = a13;
  v16 = sub_10001A9A8(&qword_1010EF178);
  v26[0] = *(_QWORD *)(v16 - 8);
  v26[1] = v16;
  __chkstk_darwin(v16);
  v17 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v17);
  v38 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v37 - 8);
  v20 = __chkstk_darwin(v37);
  __chkstk_darwin(v20);
  v22 = (char *)v26 - v21;
  v26[2] = a1;
  *((_QWORD *)&v25 + 1) = a14;
  *(_QWORD *)&v25 = v27;
  v23 = sub_10037DBB8(v30, v31, v32, v34, a6, v35, v36, v33, (uint64_t)v26 - v21, a10 & 1, v29, v28, *((uint64_t *)&v28 + 1), v25);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v19 + 8))(v22, v37, v23);
}

uint64_t sub_10096BFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v9 = sub_10001A9A8(&qword_1010EF180);
  v7[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10096C008, a4, 0);
}

uint64_t sub_10096C008()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[10];
  v2 = v0[7];
  swift_beginAccess(v0[6] + 144, v0 + 2, 33, 0);
  sub_100103698(v2, v1);
  swift_endAccess(v0 + 2);
  sub_100004048(v1, &qword_1010EF180);
  return swift_task_switch(sub_10096C090, 0, 0);
}

uint64_t sub_10096C090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 40) = v1;
  swift_errorRetain(v1);
  v3 = sub_10001A9A8(&qword_1010EF178);
  CheckedContinuation.resume(throwing:)(v0 + 40, v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10096C0F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for IDSTransportService_ItemSharingCrossAccount()
{
  return objc_opt_self(_TtC12searchpartyd43IDSTransportService_ItemSharingCrossAccount);
}

uint64_t sub_10096C158()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110DA2C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[2] = v0;
  return swift_task_switch(sub_10096ACA0, v0, 0);
}

uint64_t sub_10096C1B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_10110DB40, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount, (uint64_t)&unk_100E561AC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10096C1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7 + 8) & ~v7;
  v17 = *(_QWORD *)(v6 + 64);
  v18 = sub_10001A9A8(&qword_1010EF178);
  v9 = *(_QWORD *)(v18 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v16 = *(_QWORD *)(v9 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  v11 = v0 + v4;
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v11, v1);
  swift_bridgeObjectRelease();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v8, 1, v1))
    v12(v0 + v8, v1);
  v13 = v3 | v7 | v10 | 7;
  v14 = (v10
       + ((((((((v17 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16) & ~v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v0 + v14, v18);
  return swift_deallocObject(v0, v14 + v16, v13);
}

uint64_t sub_10096C374()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 17) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10001A9A8(&qword_1010EF178);
  *((_QWORD *)&v10 + 1) = *(_QWORD *)(v0 + v8);
  *(_QWORD *)&v10 = *(_QWORD *)(v0 + v7);
  return sub_10096BCF4(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void (**)(os_log_t, uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), v0 + v2, *(_QWORD *)(v0 + v3), (uint64_t (*)(_QWORD, _QWORD, _QWORD))(v0 + v5), *(_QWORD *)(v0 + v6), *(_BYTE *)(v0 + v6 + 8), *(_BYTE *)(v0 + v6 + 9), v10, *(_QWORD *)(v0 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10096C498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_10001A9A8(&qword_1010EF178);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_errorRelease(*(_QWORD *)(v0 + v11));
  return swift_deallocObject(v0, v11 + 8, v10);
}

uint64_t sub_10096C574(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF178) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + v8;
  v14 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_10110DB4C);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_100004A74;
  return sub_10096BFA4(a1, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_10096C654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a7;
  *(_BYTE *)(v7 + 80) = a5;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch(sub_10096C678, 0, 0);
}

uint64_t sub_10096C678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_BYTE *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v6 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 64) = v6;
  v7 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = v7;
  *(_BYTE *)(v6 + 48) = v3;
  *(_QWORD *)(v6 + 56) = v2;
  *(_QWORD *)(v6 + 64) = v1;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 72) = v8;
  *v8 = v0;
  v8[1] = sub_1002A8338;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v8, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_10110DC10, v6, &type metadata for () + 1);
}

uint64_t sub_10096C72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  *(_QWORD *)(v8 + 216) = a8;
  *(_QWORD *)(v8 + 224) = v15;
  *(_BYTE *)(v8 + 288) = a7;
  *(_QWORD *)(v8 + 200) = a5;
  *(_QWORD *)(v8 + 208) = a6;
  *(_QWORD *)(v8 + 184) = a3;
  *(_QWORD *)(v8 + 192) = a4;
  *(_QWORD *)(v8 + 176) = a2;
  v10 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 232) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 240) = v11;
  v12 = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 248) = v12;
  *(_QWORD *)(v8 + 256) = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 264) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 272) = swift_task_alloc(v13);
  return swift_task_switch(sub_10096C7E0, a3, 0);
}

uint64_t sub_10096C7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 136, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v0 + 280) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_10096C838, 0, 0);
}

void sub_10096C838()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = 0;
  v48 = (__int128 *)(v0 + 56);
  v49 = (__int128 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v2 + 64);
  v43 = v2 + 64;
  v47 = v2;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v47 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & v3;
  v44 = (unint64_t)(63 - v5) >> 6;
  v45 = *(_QWORD *)(v0 + 248) + 7;
  v46 = *(_QWORD *)(v0 + 240);
  while (1)
  {
    if (v6)
    {
      v59 = (v6 - 1) & v6;
      v50 = v1;
      v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }
    v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v9 >= v44)
      goto LABEL_31;
    v10 = *(_QWORD *)(v43 + 8 * v9);
    v11 = v1 + 1;
    if (!v10)
    {
      v11 = v1 + 2;
      if (v1 + 2 >= v44)
        goto LABEL_31;
      v10 = *(_QWORD *)(v43 + 8 * v11);
      if (!v10)
      {
        v11 = v1 + 3;
        if (v1 + 3 >= v44)
          goto LABEL_31;
        v10 = *(_QWORD *)(v43 + 8 * v11);
        if (!v10)
        {
          v11 = v1 + 4;
          if (v1 + 4 >= v44)
            goto LABEL_31;
          v10 = *(_QWORD *)(v43 + 8 * v11);
          if (!v10)
            break;
        }
      }
    }
LABEL_22:
    v59 = (v10 - 1) & v10;
    v50 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    v13 = *(_QWORD *)(v0 + 272);
    v53 = v13;
    v58 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 256);
    v15 = *(_QWORD *)(v0 + 232);
    v51 = v15;
    v52 = v14;
    v55 = *(_BYTE *)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 208);
    v56 = *(_QWORD *)(v0 + 216);
    v57 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 200);
    v54 = *(_QWORD *)(v0 + 192);
    sub_100030784(*(_QWORD *)(v47 + 56) + 40 * v8, (uint64_t)v49);
    v18 = type metadata accessor for TaskPriority(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v13, 1, 1, v18);
    sub_10000F9FC(v49, (uint64_t)v48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v14, v16, v15);
    v20 = *(unsigned __int8 *)(v46 + 80);
    v21 = (v20 + 88) & ~v20;
    v22 = (v45 + v21) & 0xFFFFFFFFFFFFFFF8;
    v23 = (_QWORD *)swift_allocObject(&unk_10109ECA0, v22 + 24, v20 | 7);
    v23[2] = 0;
    v24 = v23 + 2;
    v23[3] = 0;
    sub_10000F9FC(v48, (uint64_t)(v23 + 4));
    v23[9] = v54;
    v23[10] = v17;
    v25 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))((char *)v23 + v21, v52, v51);
    v26 = (char *)v23 + v22;
    *v26 = v55;
    *((_QWORD *)v26 + 1) = v56;
    *((_QWORD *)v26 + 2) = v57;
    sub_10000F9B8(v53, v58, &qword_1010F46C0);
    LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v58, 1, v18);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v57);
    v28 = *(_QWORD *)(v0 + 264);
    if ((_DWORD)v19 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 264), &qword_1010F46C0);
      v29 = 0;
    }
    else
    {
      v30 = TaskPriority.rawValue.getter(v27);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v18);
      v29 = v30;
    }
    v1 = v50;
    v31 = *v24;
    if (*v24)
    {
      v32 = v23[3];
      ObjectType = swift_getObjectType(*v24);
      swift_unknownObjectRetain(v31);
      v34 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v32);
      v36 = v35;
      swift_unknownObjectRelease(v31);
    }
    else
    {
      v34 = 0;
      v36 = 0;
    }
    v37 = **(_QWORD **)(v0 + 176);
    v38 = swift_allocObject(&unk_10109ECC8, 32, 7);
    *(_QWORD *)(v38 + 16) = &unk_10110DC20;
    *(_QWORD *)(v38 + 24) = v23;
    v39 = v36 | v34;
    if (v36 | v34)
    {
      v39 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v34;
      *(_QWORD *)(v0 + 120) = v36;
    }
    v7 = *(_QWORD *)(v0 + 272);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v39;
    *(_QWORD *)(v0 + 168) = v37;
    swift_task_create(v29 | 0x3100, v0 + 152, &type metadata for () + 1, &unk_10110DC28, v38);
    swift_release();
    sub_100004048(v7, &qword_1010F46C0);
    v6 = v59;
  }
  v12 = v1 + 5;
  if (v1 + 5 >= v44)
  {
LABEL_31:
    v40 = *(_QWORD *)(v0 + 272);
    v42 = *(_QWORD *)(v0 + 256);
    v41 = *(_QWORD *)(v0 + 264);
    swift_release();
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v10 = *(_QWORD *)(v43 + 8 * v12);
  if (v10)
  {
    v11 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v44)
      goto LABEL_31;
    v10 = *(_QWORD *)(v43 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_10096CC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 56) = v11;
  *(_BYTE *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  return swift_task_switch(sub_10096CCC0, 0, 0);
}

uint64_t sub_10096CCC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  v4 = *(int **)(v3 + 24);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_1002A89A4;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v7)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v2, v3);
}

uint64_t sub_10096CD4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 80) = v11;
  *(_QWORD *)(v8 + 88) = v12;
  *(_OWORD *)(v8 + 64) = v10;
  *(_BYTE *)(v8 + 113) = a7;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 56) = a8;
  *(_BYTE *)(v8 + 112) = a4;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  return swift_task_switch(sub_10096CD88, 0, 0);
}

uint64_t sub_10096CD88()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  __int128 v11;
  __int128 v12;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_BYTE *)(v0 + 113);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_BYTE *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 32);
  v11 = *(_OWORD *)(v0 + 16);
  v12 = *(_OWORD *)(v0 + 56);
  v7 = swift_task_alloc(112);
  *(_QWORD *)(v0 + 96) = v7;
  v8 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 32) = v6;
  *(_BYTE *)(v7 + 40) = v5;
  *(_QWORD *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 56) = v3;
  *(_BYTE *)(v7 + 64) = v2;
  *(_OWORD *)(v7 + 72) = v12;
  *(_QWORD *)(v7 + 88) = v1;
  *(_OWORD *)(v7 + 96) = v8;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 104) = v9;
  *v9 = v0;
  v9[1] = sub_1002A8B10;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v9, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_10110DBD8, v7, &type metadata for () + 1);
}

uint64_t sub_10096CE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *(_QWORD *)(v8 + 256) = v17;
  *(_OWORD *)(v8 + 224) = v15;
  *(_OWORD *)(v8 + 240) = v16;
  *(_BYTE *)(v8 + 313) = v14;
  *(_QWORD *)(v8 + 208) = a7;
  *(_QWORD *)(v8 + 216) = a8;
  *(_BYTE *)(v8 + 312) = a6;
  *(_QWORD *)(v8 + 192) = a4;
  *(_QWORD *)(v8 + 200) = a5;
  *(_QWORD *)(v8 + 176) = a2;
  *(_QWORD *)(v8 + 184) = a3;
  v10 = *(_QWORD *)(type metadata accessor for MessagingMessageContext(0) - 8);
  *(_QWORD *)(v8 + 264) = v10;
  v11 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 272) = v11;
  *(_QWORD *)(v8 + 280) = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 288) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 296) = swift_task_alloc(v12);
  return swift_task_switch(sub_10096CF34, a3, 0);
}

uint64_t sub_10096CF34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 136, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v0 + 304) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_10096CF8C, 0, 0);
}

void sub_10096CF8C()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  __int128 *v44;
  _QWORD *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = 0;
  v43 = (__int128 *)(v0 + 56);
  v44 = (__int128 *)(v0 + 16);
  v41 = *(_QWORD *)(v0 + 264);
  v42 = *(_QWORD *)(v0 + 304);
  v39 = v42 + 64;
  v2 = -1;
  v3 = -1 << *(_BYTE *)(v42 + 32);
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  v4 = v2 & *(_QWORD *)(v42 + 64);
  v40 = (unint64_t)(63 - v3) >> 6;
  while (1)
  {
    if (v4)
    {
      v46 = (v4 - 1) & v4;
      v47 = v1;
      v6 = __clz(__rbit64(v4)) | (v1 << 6);
      goto LABEL_23;
    }
    v7 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v7 >= v40)
      goto LABEL_31;
    v8 = *(_QWORD *)(v39 + 8 * v7);
    v9 = v1 + 1;
    if (!v8)
    {
      v9 = v1 + 2;
      if (v1 + 2 >= v40)
        goto LABEL_31;
      v8 = *(_QWORD *)(v39 + 8 * v9);
      if (!v8)
      {
        v9 = v1 + 3;
        if (v1 + 3 >= v40)
          goto LABEL_31;
        v8 = *(_QWORD *)(v39 + 8 * v9);
        if (!v8)
        {
          v9 = v1 + 4;
          if (v1 + 4 >= v40)
            goto LABEL_31;
          v8 = *(_QWORD *)(v39 + 8 * v9);
          if (!v8)
            break;
        }
      }
    }
LABEL_22:
    v46 = (v8 - 1) & v8;
    v47 = v9;
    v6 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_23:
    v11 = *(_QWORD *)(v0 + 296);
    v56 = *(_QWORD *)(v0 + 288);
    v12 = *(_QWORD *)(v0 + 272);
    v13 = *(_QWORD *)(v0 + 280);
    v14 = *(_QWORD *)(v0 + 256);
    v54 = *(_QWORD *)(v0 + 240);
    v55 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 216);
    v52 = *(_QWORD *)(v0 + 224);
    v53 = *(_QWORD *)(v0 + 232);
    v51 = *(_BYTE *)(v0 + 313);
    v16 = *(_QWORD *)(v0 + 200);
    v50 = *(_QWORD *)(v0 + 208);
    v49 = *(_BYTE *)(v0 + 312);
    v48 = *(_QWORD *)(v0 + 192);
    sub_100030784(*(_QWORD *)(v42 + 56) + 40 * v6, (uint64_t)v44);
    v17 = type metadata accessor for TaskPriority(0);
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v11, 1, 1, v17);
    sub_10000F9FC(v44, (uint64_t)v43);
    sub_1003EA8D8(v14, v13);
    v19 = *(unsigned __int8 *)(v41 + 80);
    v20 = (v19 + 152) & ~v19;
    v21 = swift_allocObject(&unk_10109EC28, v20 + v12, v19 | 7);
    *(_QWORD *)(v21 + 16) = 0;
    v45 = (_QWORD *)(v21 + 16);
    *(_QWORD *)(v21 + 24) = 0;
    sub_10000F9FC(v43, v21 + 32);
    *(_QWORD *)(v21 + 72) = v48;
    *(_QWORD *)(v21 + 80) = v16;
    *(_BYTE *)(v21 + 88) = v49;
    *(_QWORD *)(v21 + 96) = v50;
    *(_QWORD *)(v21 + 104) = v15;
    *(_BYTE *)(v21 + 112) = v51;
    *(_QWORD *)(v21 + 120) = v52;
    *(_QWORD *)(v21 + 128) = v53;
    *(_QWORD *)(v21 + 136) = v54;
    *(_QWORD *)(v21 + 144) = v55;
    sub_1002EAACC(v13, v21 + v20);
    sub_10000F9B8(v11, v56, &qword_1010F46C0);
    v22 = v18;
    LODWORD(v18) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v56, 1, v17);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v15);
    sub_10001BBBC(v53, v54);
    swift_bridgeObjectRetain(v55);
    v24 = *(_QWORD *)(v0 + 288);
    if ((_DWORD)v18 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 288), &qword_1010F46C0);
      v25 = 0;
    }
    else
    {
      v26 = TaskPriority.rawValue.getter(v23);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v17);
      v25 = v26;
    }
    v4 = v46;
    v1 = v47;
    v27 = *v45;
    if (*v45)
    {
      v28 = *(_QWORD *)(v21 + 24);
      ObjectType = swift_getObjectType(*v45);
      swift_unknownObjectRetain(v27);
      v30 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v28);
      v32 = v31;
      swift_unknownObjectRelease(v27);
    }
    else
    {
      v30 = 0;
      v32 = 0;
    }
    v33 = **(_QWORD **)(v0 + 176);
    v34 = swift_allocObject(&unk_10109EC50, 32, 7);
    *(_QWORD *)(v34 + 16) = &unk_10110DBE8;
    *(_QWORD *)(v34 + 24) = v21;
    v35 = v32 | v30;
    if (v32 | v30)
    {
      v35 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v30;
      *(_QWORD *)(v0 + 120) = v32;
    }
    v5 = *(_QWORD *)(v0 + 296);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v35;
    *(_QWORD *)(v0 + 168) = v33;
    swift_task_create(v25 | 0x3100, v0 + 152, &type metadata for () + 1, &unk_10110DBF0, v34);
    swift_release();
    sub_100004048(v5, &qword_1010F46C0);
  }
  v10 = v1 + 5;
  if (v1 + 5 >= v40)
  {
LABEL_31:
    v36 = *(_QWORD *)(v0 + 296);
    v38 = *(_QWORD *)(v0 + 280);
    v37 = *(_QWORD *)(v0 + 288);
    swift_release();
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v8 = *(_QWORD *)(v39 + 8 * v10);
  if (v8)
  {
    v9 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v9 >= v40)
      goto LABEL_31;
    v8 = *(_QWORD *)(v39 + 8 * v9);
    ++v10;
    if (v8)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_10096D418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 112) = v15;
  *(_QWORD *)(v8 + 120) = v16;
  *(_QWORD *)(v8 + 96) = v13;
  *(_QWORD *)(v8 + 104) = v14;
  *(_BYTE *)(v8 + 137) = v11;
  *(_QWORD *)(v8 + 80) = v10;
  *(_QWORD *)(v8 + 88) = v12;
  *(_BYTE *)(v8 + 136) = a7;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 48) = a4;
  *(_QWORD *)(v8 + 56) = a5;
  return swift_task_switch(sub_10096D460, 0, 0);
}

void sub_10096D460()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 104);
  v7 = *(_OWORD *)(v0 + 88);
  v2 = *(_BYTE *)(v0 + 137);
  v3 = *(_QWORD **)(v0 + 48);
  v4 = v3[4];
  sub_10001AA44(v3, v3[3]);
  *(_BYTE *)(v0 + 16) = v2;
  *(_OWORD *)(v0 + 24) = v7;
  *(_QWORD *)(v0 + 40) = v1;
  v5 = *(int **)(v4 + 32);
  *(_QWORD *)&v7 = (char *)v5 + *v5;
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v0 + 128) = v6;
  *v6 = v0;
  v6[1] = sub_10096D524;
  __asm { BR              X8 }
}

uint64_t sub_10096D524()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10096D56C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10096D584, 0, 0);
}

uint64_t sub_10096D584()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_1002A92D4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_10110DBA0, v1, &type metadata for () + 1);
}

uint64_t sub_10096D610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[23] = a3;
  v4[24] = a4;
  v4[22] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[25] = swift_task_alloc(v6);
  v4[26] = swift_task_alloc(v6);
  return swift_task_switch(sub_10096D684, a3, 0);
}

uint64_t sub_10096D684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 136, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v0 + 216) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_10096D6DC, 0, 0);
}

void sub_10096D6DC()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;

  v1 = 0;
  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v2 + 64);
  v37 = v2 + 64;
  v39 = v2;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v39 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & v3;
  v38 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v42 = (v6 - 1) & v6;
      v9 = v1;
      v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v11);
    v13 = v1 + 1;
    if (!v12)
    {
      v13 = v1 + 2;
      if (v1 + 2 >= v38)
        goto LABEL_31;
      v12 = *(_QWORD *)(v37 + 8 * v13);
      if (!v12)
      {
        v13 = v1 + 3;
        if (v1 + 3 >= v38)
          goto LABEL_31;
        v12 = *(_QWORD *)(v37 + 8 * v13);
        if (!v12)
        {
          v13 = v1 + 4;
          if (v1 + 4 >= v38)
            goto LABEL_31;
          v12 = *(_QWORD *)(v37 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v42 = (v12 - 1) & v12;
    v9 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    v15 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 192);
    sub_100030784(*(_QWORD *)(v39 + 56) + 40 * v10, (uint64_t)v41);
    v18 = type metadata accessor for TaskPriority(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1, 1, v18);
    sub_10000F9FC(v41, (uint64_t)v40);
    v20 = (_QWORD *)swift_allocObject(&unk_10109EBB0, 80, 7);
    v20[2] = 0;
    v21 = v20 + 2;
    v20[3] = 0;
    sub_10000F9FC(v40, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_10000F9B8(v16, v15, &qword_1010F46C0);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
    swift_bridgeObjectRetain(v17);
    v23 = *(_QWORD *)(v0 + 200);
    if ((_DWORD)v15 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 200), &qword_1010F46C0);
      v24 = 0;
    }
    else
    {
      v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
      v24 = v25;
    }
    v1 = v9;
    v6 = v42;
    v26 = *v21;
    if (*v21)
    {
      v27 = v20[3];
      ObjectType = swift_getObjectType(*v21);
      swift_unknownObjectRetain(v26);
      v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      v31 = v30;
      swift_unknownObjectRelease(v26);
    }
    else
    {
      v29 = 0;
      v31 = 0;
    }
    v32 = **(_QWORD **)(v0 + 176);
    v33 = swift_allocObject(&unk_10109EBD8, 32, 7);
    *(_QWORD *)(v33 + 16) = &unk_10110DBB0;
    *(_QWORD *)(v33 + 24) = v20;
    v34 = v31 | v29;
    if (v31 | v29)
    {
      v34 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v29;
      *(_QWORD *)(v0 + 120) = v31;
    }
    v7 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v34;
    *(_QWORD *)(v0 + 168) = v32;
    swift_task_create(v24 | 0x3100, v0 + 152, &type metadata for () + 1, &unk_10110DBB8, v33);
    swift_release();
    sub_100004048(v7, &qword_1010F46C0);
  }
  v14 = v1 + 5;
  if (v1 + 5 >= v38)
  {
LABEL_31:
    v35 = *(_QWORD *)(v0 + 208);
    v36 = *(_QWORD *)(v0 + 200);
    swift_release();
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = *(_QWORD *)(v37 + 8 * v14);
  if (v12)
  {
    v13 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_10096DA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10096DAAC, 0, 0);
}

uint64_t sub_10096DAAC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  v4 = *(int **)(v3 + 40);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[4] = v5;
  *v5 = v0;
  v5[1] = sub_1002A9830;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[3], v2, v3);
}

uint64_t sub_10096DB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10096DB44, 0, 0);
}

uint64_t sub_10096DB44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_1002A991C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_10110DB70, v1, &type metadata for () + 1);
}

uint64_t sub_10096DBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[23] = a3;
  v4[24] = a4;
  v4[22] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[25] = swift_task_alloc(v6);
  v4[26] = swift_task_alloc(v6);
  return swift_task_switch(sub_10096DC44, a3, 0);
}

uint64_t sub_10096DC44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 184);
  swift_beginAccess(v1 + 136, v0 + 128, 0, 0);
  v2 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v0 + 216) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_10096DC9C, 0, 0);
}

void sub_10096DC9C()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;

  v1 = 0;
  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v2 + 64);
  v37 = v2 + 64;
  v39 = v2;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v39 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & v3;
  v38 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v42 = (v6 - 1) & v6;
      v9 = v1;
      v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v11);
    v13 = v1 + 1;
    if (!v12)
    {
      v13 = v1 + 2;
      if (v1 + 2 >= v38)
        goto LABEL_31;
      v12 = *(_QWORD *)(v37 + 8 * v13);
      if (!v12)
      {
        v13 = v1 + 3;
        if (v1 + 3 >= v38)
          goto LABEL_31;
        v12 = *(_QWORD *)(v37 + 8 * v13);
        if (!v12)
        {
          v13 = v1 + 4;
          if (v1 + 4 >= v38)
            goto LABEL_31;
          v12 = *(_QWORD *)(v37 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v42 = (v12 - 1) & v12;
    v9 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    v15 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 192);
    sub_100030784(*(_QWORD *)(v39 + 56) + 40 * v10, (uint64_t)v41);
    v18 = type metadata accessor for TaskPriority(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1, 1, v18);
    sub_10000F9FC(v41, (uint64_t)v40);
    v20 = (_QWORD *)swift_allocObject(&unk_10109EB38, 80, 7);
    v20[2] = 0;
    v21 = v20 + 2;
    v20[3] = 0;
    sub_10000F9FC(v40, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_10000F9B8(v16, v15, &qword_1010F46C0);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
    swift_bridgeObjectRetain(v17);
    v23 = *(_QWORD *)(v0 + 200);
    if ((_DWORD)v15 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 200), &qword_1010F46C0);
      v24 = 0;
    }
    else
    {
      v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
      v24 = v25;
    }
    v1 = v9;
    v6 = v42;
    v26 = *v21;
    if (*v21)
    {
      v27 = v20[3];
      ObjectType = swift_getObjectType(*v21);
      swift_unknownObjectRetain(v26);
      v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      v31 = v30;
      swift_unknownObjectRelease(v26);
    }
    else
    {
      v29 = 0;
      v31 = 0;
    }
    v32 = **(_QWORD **)(v0 + 176);
    v33 = swift_allocObject(&unk_10109EB60, 32, 7);
    *(_QWORD *)(v33 + 16) = &unk_10110DB80;
    *(_QWORD *)(v33 + 24) = v20;
    v34 = v31 | v29;
    if (v31 | v29)
    {
      v34 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v29;
      *(_QWORD *)(v0 + 120) = v31;
    }
    v7 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v0 + 152) = 1;
    *(_QWORD *)(v0 + 160) = v34;
    *(_QWORD *)(v0 + 168) = v32;
    swift_task_create(v24 | 0x3100, v0 + 152, &type metadata for () + 1, &unk_1010F4908, v33);
    swift_release();
    sub_100004048(v7, &qword_1010F46C0);
  }
  v14 = v1 + 5;
  if (v1 + 5 >= v38)
  {
LABEL_31:
    v35 = *(_QWORD *)(v0 + 208);
    v36 = *(_QWORD *)(v0 + 200);
    swift_release();
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = *(_QWORD *)(v37 + 8 * v14);
  if (v12)
  {
    v13 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_10096E054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10096E06C, 0, 0);
}

uint64_t sub_10096E06C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[2];
  v2 = v0[3];
  v3 = v1[3];
  v4 = v1[4];
  sub_10001AA44(v1, v3);
  swift_bridgeObjectRetain(v2);
  v6 = sub_100CA82BC(v5);
  v0[4] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int **)(v4 + 48);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[5] = v8;
  *v8 = v0;
  v8[1] = sub_1002A9E9C;
  return v10(v6, v3, v4);
}

uint64_t sub_10096E110()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B79A0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B79A0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD00000000000002BLL, 0x8000000100E56100);
}

uint64_t sub_10096E18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _BYTE v11[24];

  if (qword_1010EA3D8 != -1)
    swift_once(&qword_1010EA3D8, sub_100BECD20);
  v6 = *(void **)(a1 + 64);
  swift_beginAccess(&qword_1011B7EE8, v11, 33, 0);
  v7 = v6;
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(qword_1011B7EE8);
  v10 = qword_1011B7EE8;
  qword_1011B7EE8 = 0x8000000000000000;
  sub_10010BD38(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  qword_1011B7EE8 = v10;

  swift_bridgeObjectRelease();
  return swift_endAccess(v11);
}

uint64_t sub_10096E278(unint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;

  v3 = *v2;
  v4 = sub_1000193A4(a1, a2, byte_100E64980);
  v5._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v3, v4);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v10 = v2[2];
  v9 = (void *)v2[3];
  swift_bridgeObjectRetain(v9);
  v11._countAndFlagsBits = v10;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 60;
}

uint64_t sub_10096E370(uint64_t a1)
{
  uint64_t v1;

  return sub_10096B6F8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_BYTE *)(v1 + 88), *(_BYTE *)(v1 + 89), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
}

void sub_10096E3C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  sub_10096F564(a3, a4, a5);
}

uint64_t sub_10096E3D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_10096ADF0(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_10096E3DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;

  return sub_10096AF48(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v12);
}

uint64_t sub_10096E408(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A7EF8(a1, v1, (uint64_t)&unk_10109EB88, (uint64_t)&unk_10110DB90);
}

uint64_t sub_10096E430(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A7EF8(a1, v1, (uint64_t)&unk_10109EB10, (uint64_t)&unk_10110DB60);
}

void sub_10096E458()
{
  sub_10037D974();
}

uint64_t sub_10096E47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_10110DB5C);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_10096DB44, 0, 0);
}

uint64_t sub_10096E4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_10110DB6C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004A74;
  return sub_10096DBD0(a1, a2, v7, v6);
}

uint64_t sub_10096E54C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_10110DB7C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_10096E06C, 0, 0);
}

uint64_t sub_10096E5B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10096E5D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_10110DB8C);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004C28;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_10096D584, 0, 0);
}

uint64_t sub_10096E638(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_10110DB9C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004A74;
  return sub_10096D610(a1, a2, v7, v6);
}

uint64_t sub_10096E6A8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10096E6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_10110DBAC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_10096DAAC, 0, 0);
}

uint64_t sub_10096E740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for MessagingMessageContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 104) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease();
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v4, 1, v7);
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  if (!v9)
    v10(v0 + v4, v7);
  v10(v6 + *(int *)(v1 + 20), v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v6 + *(int *)(v1 + 44);
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10096E87C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessagingMessageContext(0) - 8) + 80);
  v15 = *(_OWORD *)(v0 + 16);
  v14 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_BYTE *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = v0 + ((v2 + 104) & ~v2);
  v12 = swift_task_alloc(dword_10110DBC4);
  *(_QWORD *)(v1 + 16) = v12;
  *(_QWORD *)v12 = v1;
  *(_QWORD *)(v12 + 8) = sub_100004A74;
  *(_QWORD *)(v12 + 80) = v9;
  *(_QWORD *)(v12 + 88) = v11;
  *(_QWORD *)(v12 + 64) = v8;
  *(_QWORD *)(v12 + 72) = v10;
  *(_BYTE *)(v12 + 113) = v6;
  *(_QWORD *)(v12 + 48) = v5;
  *(_QWORD *)(v12 + 56) = v7;
  *(_BYTE *)(v12 + 112) = v3;
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v4;
  *(_OWORD *)(v12 + 16) = v15;
  return swift_task_switch(sub_10096CD88, 0, 0);
}

uint64_t sub_10096E958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v10 = *(_BYTE *)(v2 + 40);
  v11 = (_QWORD *)swift_task_alloc(dword_10110DBD4);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100004A74;
  return sub_10096CE70(a1, a2, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_10096EA24()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  uint64_t v12;

  v1 = type metadata accessor for MessagingMessageContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 152) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)v0 + 4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*((_QWORD *)v0 + 16), *((_QWORD *)v0 + 17));
  swift_bridgeObjectRelease();
  v6 = &v0[v4];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(&v0[v4], 1, v7);
  v10 = *(void (**)(char *, uint64_t))(v8 + 8);
  if (!v9)
    v10(&v0[v4], v7);
  v10(&v6[*(int *)(v1 + 20)], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = &v6[*(int *)(v1 + 44)];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10096EB68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessagingMessageContext(0) - 8) + 80);
  v3 = v0 + 32;
  v4 = *(_BYTE *)(v0 + 88);
  v12 = *(_OWORD *)(v0 + 96);
  v13 = *(_OWORD *)(v0 + 72);
  v5 = *(_BYTE *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = v0 + ((v2 + 152) & ~v2);
  v9 = swift_task_alloc(dword_10110DBE4);
  *(_QWORD *)(v1 + 16) = v9;
  *(_QWORD *)v9 = v1;
  *(_QWORD *)(v9 + 8) = sub_100004A74;
  *(_QWORD *)(v9 + 112) = v7;
  *(_QWORD *)(v9 + 120) = v8;
  *(_QWORD *)(v9 + 104) = v6;
  *(_OWORD *)(v9 + 88) = v11;
  *(_BYTE *)(v9 + 137) = v5;
  *(_OWORD *)(v9 + 72) = v12;
  *(_BYTE *)(v9 + 136) = v4;
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 48) = v3;
  return swift_task_switch(sub_10096D460, 0, 0);
}

uint64_t sub_10096EC44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 16));
  return swift_deallocObject(v0, v6 + 24, v5);
}

uint64_t sub_10096ECE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v12 = *(_OWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = v0 + v3;
  v6 = (char *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = *((_QWORD *)v6 + 1);
  v9 = *((_QWORD *)v6 + 2);
  v10 = swift_task_alloc(dword_10110DBFC);
  *(_QWORD *)(v1 + 16) = v10;
  *(_QWORD *)v10 = v1;
  *(_QWORD *)(v10 + 8) = sub_100004A74;
  *(_QWORD *)(v10 + 48) = v8;
  *(_QWORD *)(v10 + 56) = v9;
  *(_BYTE *)(v10 + 80) = v7;
  *(_QWORD *)(v10 + 32) = v4;
  *(_QWORD *)(v10 + 40) = v5;
  *(_OWORD *)(v10 + 16) = v12;
  return swift_task_switch(sub_10096C678, 0, 0);
}

uint64_t sub_10096EDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 56);
  v11 = *(_BYTE *)(v2 + 48);
  v12 = (_QWORD *)swift_task_alloc(dword_10110DC0C);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_100004A74;
  return sub_10096C72C(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_10096EE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 88) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10096EEE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + 32;
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = v0 + v3;
  v8 = (char *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  v11 = *((_QWORD *)v8 + 2);
  v12 = swift_task_alloc(dword_10110DC1C);
  *(_QWORD *)(v1 + 16) = v12;
  *(_QWORD *)v12 = v1;
  *(_QWORD *)(v12 + 8) = sub_100004A74;
  *(_QWORD *)(v12 + 48) = v10;
  *(_QWORD *)(v12 + 56) = v11;
  *(_BYTE *)(v12 + 72) = v9;
  *(_QWORD *)(v12 + 32) = v6;
  *(_QWORD *)(v12 + 40) = v7;
  *(_QWORD *)(v12 + 16) = v4;
  *(_QWORD *)(v12 + 24) = v5;
  return swift_task_switch(sub_10096CCC0, 0, 0);
}

void sub_10096EFA8(uint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
  sub_10096EFCC(a1, a2, a3, (uint64_t (*)(_QWORD *))sub_1006BA464, &qword_10110DC40, &qword_1010FAB10, (uint64_t)sub_10096F938, a4, a5);
}

void sub_10096EFCC(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(_QWORD *), unint64_t *a5, uint64_t *a6, uint64_t a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  NSString v35;
  id v36;
  uint64_t Controller;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t (*v60)(char *);
  uint64_t v61;
  uint64_t (*v62)(_QWORD *);
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;

  v52 = a3;
  v53 = a7;
  v50 = a5;
  v51 = a6;
  v62 = a4;
  v63 = a2;
  v10 = v9;
  v58 = a1;
  v13 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v20 = *(_QWORD *)(v19 - 8);
  v61 = v19;
  __chkstk_darwin(v19);
  v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010FAAF0);
  v24 = swift_allocObject(v23, 20, 7);
  *(_DWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v9 + 32) = v24;
  *(_QWORD *)(v9 + 40) = 0;
  v54 = sub_10001F6FC();
  v59 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v60 = *(uint64_t (**)(char *))(v20 + 104);
  v25 = v60(v22);
  static DispatchQoS.unspecified.getter(v25);
  v66 = _swiftEmptyArrayStorage;
  v26 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v57 = v26;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v56 = v27;
  v55 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v27, v55, v13, v26);
  *(_QWORD *)(v9 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100EEB0F0, v18, v15, v22, 0);
  *(_QWORD *)(v9 + 80) = v62(_swiftEmptyArrayStorage);
  *(_QWORD *)(v9 + 88) = sub_1006B9B78((uint64_t)_swiftEmptyArrayStorage);
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  v28 = v58;
  v29 = v63;
  *(_QWORD *)(v9 + 16) = v58;
  *(_QWORD *)(v9 + 24) = v29;
  v66 = 0;
  v67 = 0xE000000000000000;
  swift_bridgeObjectRetain(v29);
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v66 = (_QWORD *)0xD00000000000002BLL;
  v67 = 0x8000000100EEB110;
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  v32 = v66;
  v31 = v67;
  v33 = ((uint64_t (*)(char *, _QWORD, uint64_t))v60)(v22, v59, v61);
  static DispatchQoS.unspecified.getter(v33);
  v66 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v56, v55, v13, v57);
  *(_QWORD *)(v9 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v32, v31, v18, v15, v22, 0);
  v34 = objc_allocWithZone((Class)IDSService);
  swift_bridgeObjectRetain(v29);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v36 = objc_msgSend(v34, "initWithService:", v35);

  if (v36)
  {
    *(_QWORD *)(v10 + 64) = v36;
    Controller = type metadata accessor for MessagingQueryController();
    swift_allocObject(Controller, 136, 15);
    swift_bridgeObjectRetain(v29);
    *(_QWORD *)(v10 + 72) = sub_100D8A504(v28, (uint64_t)v29);
    *(double *)(v10 + 96) = a8;
    *(double *)(v10 + 104) = a9;
    *(_QWORD *)(v10 + 112) = v52;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v38 = type metadata accessor for Logger(0);
    sub_10001A9E8(v38, (uint64_t)qword_1011B7EC8);
    v39 = swift_retain();
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = (_QWORD *)swift_slowAlloc(32, -1);
      v66 = v43;
      *(_DWORD *)v42 = 136446210;
      v44 = sub_10096E278(v50, v51);
      v64 = sub_100016940(v44, v45, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v42 + 4, v42 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Created %{public}s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      v46 = swift_release();
    }
    v47 = v53;
    if (qword_1010EA3D0 != -1)
      v46 = swift_once(&qword_1010EA3D0, sub_100BECCEC);
    __chkstk_darwin(v46);
    *(&v49 - 4) = v10;
    *(&v49 - 3) = v28;
    *(&v49 - 2) = (uint64_t)v29;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(v47, &v49 - 6, v48, &type metadata for () + 1, &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
}

void sub_10096F564(uint64_t a1, int a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  id v30;
  NSString v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35[3];

  v32 = a3;
  v33 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = sub_10001A9A8(&qword_1010EF180);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EF178);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v3 + 144, v35, 33, 0);
  sub_100103698(a1, (uint64_t)v14);
  swift_endAccess(v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_1010EF180);
    if (qword_1010EA068 != -1)
      swift_once(&qword_1010EA068, sub_10096A994);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B7988);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v35[0] = v24;
      *(_DWORD *)v23 = 136446210;
      v25 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v5, v25);
      v34 = sub_100016940(v26, v27, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Untracked identifier: %{public}s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    if ((v33 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1, v5);
      CheckedContinuation.resume(returning:)(v11, v15);
    }
    else
    {
      v28 = v32;
      if (v32)
      {
        v29 = v32;
      }
      else
      {
        v30 = objc_allocWithZone((Class)NSError);
        v31 = String._bridgeToObjectiveC()();
        v29 = objc_msgSend(v30, "initWithDomain:code:userInfo:", v31, 0, 0);

      }
      v35[0] = (uint64_t)v29;
      swift_errorRetain(v28);
      CheckedContinuation.resume(throwing:)(v35, v15);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
}

uint64_t sub_10096F938()
{
  uint64_t *v0;

  return sub_10096E18C(v0[2], v0[3], v0[4]);
}

uint64_t sub_10096F964()
{
  return sub_10096F938();
}

uint64_t sub_10096F978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B79B8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B79B8);
  if (qword_1010EA080 != -1)
    swift_once(&qword_1010EA080, sub_100984270);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B79D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10096FA08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(v2 + 128))
  {
    v3 = *(_QWORD *)(v2 + 128);
  }
  else
  {
    v4 = sub_100006C64(&qword_10110DF30, a2, (uint64_t (*)(uint64_t))type metadata accessor for CircleTrustService, (uint64_t)&unk_100E56240);
    v5 = type metadata accessor for CircleTrustMessageRouter();
    v3 = swift_allocObject(v5, 128, 15);
    swift_retain();
    swift_defaultActor_initialize(v3);
    *(_QWORD *)(v3 + 112) = v2;
    *(_QWORD *)(v3 + 120) = v4;
    *(_QWORD *)(v2 + 128) = v3;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v3;
}

uint64_t sub_10096FAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(v4 + 160) = a4;
  v6 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v4 + 168) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10096FB08, a4, 0);
}

uint64_t sub_10096FB08()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB28 + dword_1010EBB28);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB2C);
    *(_QWORD *)(v0 + 176) = v2;
    *v2 = v0;
    v2[1] = sub_10096FBF4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10096FBF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10096FC54, v3, 0);
}

uint64_t sub_10096FC54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 184))
  {
    v2 = *(_QWORD *)(v0 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_QWORD *)(v0 + 120) = type metadata accessor for CircleTrustService();
    *(_QWORD *)(v0 + 128) = sub_100006C64(&qword_10110DDD8, v3, (uint64_t (*)(uint64_t))type metadata accessor for CircleTrustService, (uint64_t)&unk_100E56224);
    *(_QWORD *)(v0 + 96) = v2;
    v4 = dword_10110DA34;
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 192) = v5;
    *v5 = v0;
    v5[1] = sub_10096FDCC;
    return sub_10096B0AC(*(_QWORD *)(v0 + 168), v0 + 96);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B79B8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No IDSTransportService_ItemSharingCrossAccount available!", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10096FDCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 192));
  if (v0)
  {
    v3 = *(_QWORD *)(v2 + 160);
    swift_errorRelease(v0);
    v4 = sub_10096FEB8;
    v5 = v3;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 96));
    v4 = sub_10096FE48;
    v5 = v6;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_10096FE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = *(_QWORD *)(v0 + 168);
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_100004048(v1, &qword_1010ED860);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10096FEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 168);
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  sub_100004048(v1, &qword_1010ED860);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10096FF34(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[18] = a1;
  v2[19] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[20] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[21] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v5);
  v2[23] = swift_task_alloc(v5);
  v2[24] = swift_task_alloc(v5);
  v2[25] = swift_task_alloc(v5);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v6);
  v2[27] = swift_task_alloc(v6);
  v2[28] = swift_task_alloc(v6);
  v7 = type metadata accessor for OwnerSharingCircle(0);
  v2[29] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[30] = v8;
  v2[31] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100970024, v1, 0);
}

uint64_t sub_100970024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(uint64_t, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(unint64_t, uint64_t);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  void (*v49)(uint64_t, char *, uint64_t);
  Swift::String v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  void (*v57)(_QWORD, uint64_t, uint64_t, _QWORD);
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(uint64_t, unint64_t, uint64_t);
  uint64_t v96;
  void (*v97)(_QWORD, uint64_t, uint64_t, _QWORD);
  _QWORD *v98;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 256) = v2;
  if (!v2)
  {
    v20 = *(_QWORD *)(v0 + 216);
    v21 = *(_QWORD *)(v0 + 224);
    v23 = *(_QWORD *)(v0 + 200);
    v22 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 184);
    v24 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 320) = v5;
  *(_QWORD *)(v0 + 264) = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v0 + 272) = 0;
  v6 = *(_QWORD *)(v0 + 248);
  v7 = v1 + ((v5 + 32) & ~(unint64_t)v5);
  swift_bridgeObjectRetain(v1);
  sub_10005972C(v7, v6, type metadata accessor for OwnerSharingCircle);
  v8 = *(_QWORD *)(v6 + *(int *)(v4 + 32));
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(v0 + 168);
    v11 = sub_10001A9A8(&qword_1011003C0);
    v12 = *(_QWORD *)(v10 + 72);
    v13 = *(unsigned __int8 *)(v10 + 80);
    v14 = (v13 + 32) & ~v13;
    v15 = (_QWORD *)swift_allocObject(v11, v14 + v12 * v9, v13 | 7);
    result = j__malloc_size(v15);
    if (!v12)
      goto LABEL_41;
    if (result - v14 == 0x8000000000000000 && v12 == -1)
      goto LABEL_43;
    v15[2] = v9;
    v15[3] = 2 * ((result - v14) / v12);
    swift_bridgeObjectRetain_n(v8, 2);
    v18 = sub_10050A294(v0 + 16, (char *)v15 + v14, v9, v8);
    result = sub_10007CC38(*(_QWORD *)(v0 + 16));
    if (v18 != v9)
      goto LABEL_42;
    swift_bridgeObjectRelease();
    v19 = v15;
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
  }
  v27 = v19[2];
  v28 = *(_QWORD *)(v0 + 168);
  v90 = v19;
  if (!v27)
  {
    swift_retain();
    v57 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v28 + 56);
    v31 = &_swiftEmptyDictionarySingleton;
LABEL_35:
    v57(*(_QWORD *)(v0 + 224), 1, 1, *(_QWORD *)(v0 + 160));
LABEL_37:
    swift_release_n(v90, 2);
    *(_QWORD *)(v0 + 112) = v31;
    v86 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    *(_QWORD *)(v0 + 280) = v86;
    v87 = sub_10001A9A8(&qword_10110DF18);
    v88 = type metadata accessor for OwnerPeerTrust(0);
    v89 = sub_1000193A4(&qword_10110DF20, &qword_10110DF18, (const char *)&protocol conformance descriptor for [A : B].Values);
    *v86 = v0;
    v86[1] = sub_10097075C;
    return Sequence.asyncCompactMap<A>(_:)(&unk_10110DF10, *(_QWORD *)(v0 + 152), v87, v88, v89);
  }
  v91 = (_QWORD *)(v0 + 128);
  v29 = (char *)v19 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  v92 = *(_QWORD *)(v28 + 72);
  v30 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 16);
  swift_retain();
  v31 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    v98 = v31;
    v37 = *(_QWORD *)(v0 + 224);
    v38 = *(_QWORD *)(v0 + 160);
    v39 = *(_QWORD *)(v0 + 168);
    v30(v37, v29, v38);
    v40 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56);
    v40(v37, 0, 1, v38);
    v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
    if (v41(v37, 1, v38) == 1)
    {
      v31 = v98;
      goto LABEL_37;
    }
    v93 = v27;
    v94 = v29;
    v42 = *(_QWORD *)(v0 + 216);
    v43 = *(char **)(v0 + 192);
    v44 = *(char **)(v0 + 200);
    v96 = *(_QWORD *)(v0 + 184);
    v97 = v40;
    v45 = *(_QWORD *)(v0 + 160);
    v95 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 32);
    v95((uint64_t)v44, *(_QWORD *)(v0 + 224), v45);
    v46 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    *(_QWORD *)(v0 + 80) = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
    *(_QWORD *)(v0 + 88) = v47;
    v48._countAndFlagsBits = 124;
    v48._object = (void *)0xE100000000000000;
    v49 = v30;
    String.append(_:)(v48);
    v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51 = String.utf8Data.getter(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
    v53 = v52;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 96) = v51;
    *(_QWORD *)(v0 + 104) = v53;
    v54 = sub_100035530();
    DataProtocol.stableUUID.getter(&type metadata for Data, v54);
    v55 = v53;
    v30 = v49;
    sub_10001BC14(v51, v55);
    v49(v96, v43, v45);
    v56 = v44;
    v57 = v97;
    v49(v42, v56, v45);
    v97(v42, 0, 1, v45);
    v58 = v41(v42, 1, v45);
    v59 = *(_QWORD *)(v0 + 184);
    if (v58 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 216), &qword_1010ED860);
      v31 = v98;
      swift_bridgeObjectRetain(v98);
      v60 = sub_100003FB0(v59);
      v62 = v61;
      swift_bridgeObjectRelease();
      if ((v62 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v98);
        *v91 = v98;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100A9AA68();
          v31 = (_QWORD *)*v91;
        }
        v64 = *(_QWORD *)(v0 + 208);
        v65 = *(_QWORD *)(v0 + 160);
        v33 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 8);
        v33(v31[6] + v60 * v92, v65);
        v31 = *(_QWORD **)(v0 + 128);
        v95(v64, v31[7] + v60 * v92, v65);
        sub_10010589C(v60, (uint64_t)v31);
        swift_bridgeObjectRelease();
        v97(v64, 0, 1, v65);
      }
      else
      {
        v32 = *(_QWORD *)(v0 + 168);
        v97(*(_QWORD *)(v0 + 208), 1, 1, *(_QWORD *)(v0 + 160));
        v33 = *(void (**)(unint64_t, uint64_t))(v32 + 8);
      }
      v34 = *(_QWORD *)(v0 + 208);
      v33(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
      sub_100004048(v34, &qword_1010ED860);
      goto LABEL_16;
    }
    v95(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 160));
    v66 = swift_isUniquelyReferenced_nonNull_native(v98);
    *(_QWORD *)(v0 + 136) = v98;
    v68 = sub_100003FB0(v59);
    v69 = v98[2];
    v70 = (v67 & 1) == 0;
    result = v69 + v70;
    if (__OFADD__(v69, v70))
      break;
    v71 = v67;
    if (v98[3] >= result)
    {
      if ((v66 & 1) == 0)
        sub_100A9AA68();
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 184);
      sub_100A86BBC(result, v66);
      v73 = sub_100003FB0(v72);
      if ((v71 & 1) != (v74 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 160));
      v68 = v73;
    }
    v75 = *(_QWORD **)(v0 + 136);
    v76 = *(_QWORD *)(v0 + 160);
    if ((v71 & 1) != 0)
    {
      (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 40))(v75[7] + v68 * v92, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
    }
    else
    {
      v78 = *(_QWORD *)(v0 + 176);
      v77 = *(char **)(v0 + 184);
      v75[(v68 >> 6) + 8] |= 1 << v68;
      v79 = v68 * v92;
      v30(v75[6] + v79, v77, v76);
      result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v95)(v75[7] + v79, v78, v76);
      v80 = v75[2];
      v81 = __OFADD__(v80, 1);
      v82 = v80 + 1;
      if (v81)
        goto LABEL_40;
      v75[2] = v82;
    }
    v83 = *(_QWORD *)(v0 + 184);
    v84 = *(_QWORD *)(v0 + 160);
    v85 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD **)(v0 + 136);
    swift_bridgeObjectRelease();
    v33 = *(void (**)(unint64_t, uint64_t))(v85 + 8);
    v33(v83, v84);
LABEL_16:
    v35 = *(_QWORD *)(v0 + 200);
    v36 = *(_QWORD *)(v0 + 160);
    v33(*(_QWORD *)(v0 + 192), v36);
    v33(v35, v36);
    v29 = &v94[v92];
    v27 = v93 - 1;
    if (v93 == 1)
      goto LABEL_35;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_10097075C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 280);
  v5 = *(_QWORD **)v2;
  v5[36] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
    return swift_task_switch(sub_100970FD4, v5[19], 0);
  v5[37] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_10110DC7C);
  v5[38] = v7;
  *v7 = v5;
  v7[1] = sub_100970814;
  return sub_10097266C(v5[31], a1);
}

uint64_t sub_100970814()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 304);
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  if (v0)
    v4 = sub_100971894;
  else
    v4 = sub_100970888;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 152), 0);
}

uint64_t sub_100970888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(uint64_t, char *, uint64_t);
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(unint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  void (*v45)(uint64_t, char *, uint64_t);
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  void (*v53)(_QWORD, uint64_t, uint64_t, _QWORD);
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void (*v91)(uint64_t, unint64_t, uint64_t);
  uint64_t v92;
  void (*v93)(_QWORD, uint64_t, uint64_t, _QWORD);
  _QWORD *v94;

  sub_1000126B0(*(_QWORD *)(v0 + 248), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 272) + 1;
  if (v1 == *(_QWORD *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(v0 + 216);
    v3 = *(_QWORD *)(v0 + 224);
    v5 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 192);
    v8 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 272) = v1;
  v10 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 232);
  sub_10005972C(*(_QWORD *)(v0 + 144)+ ((*(unsigned __int8 *)(v0 + 320) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 320))+ *(_QWORD *)(v0 + 264) * v1, v10, type metadata accessor for OwnerSharingCircle);
  v12 = *(_QWORD *)(v10 + *(int *)(v11 + 32));
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)(v0 + 168);
    v15 = sub_10001A9A8(&qword_1011003C0);
    v16 = *(_QWORD *)(v14 + 72);
    v17 = *(unsigned __int8 *)(v14 + 80);
    v18 = (v17 + 32) & ~v17;
    v19 = (_QWORD *)swift_allocObject(v15, v18 + v16 * v13, v17 | 7);
    result = j__malloc_size(v19);
    if (!v16)
      goto LABEL_41;
    if (result - v18 == 0x8000000000000000 && v16 == -1)
      goto LABEL_43;
    v19[2] = v13;
    v19[3] = 2 * ((result - v18) / v16);
    swift_bridgeObjectRetain_n(v12, 2);
    v21 = sub_10050A294(v0 + 16, (char *)v19 + v18, v13, v12);
    result = sub_10007CC38(*(_QWORD *)(v0 + 16));
    if (v21 != v13)
      goto LABEL_42;
    swift_bridgeObjectRelease();
    v22 = v19;
  }
  else
  {
    v22 = _swiftEmptyArrayStorage;
  }
  v23 = v22[2];
  v24 = *(_QWORD *)(v0 + 168);
  v86 = v22;
  if (!v23)
  {
    swift_retain();
    v53 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v24 + 56);
    v27 = &_swiftEmptyDictionarySingleton;
LABEL_35:
    v53(*(_QWORD *)(v0 + 224), 1, 1, *(_QWORD *)(v0 + 160));
LABEL_37:
    swift_release_n(v86, 2);
    *(_QWORD *)(v0 + 112) = v27;
    v82 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    *(_QWORD *)(v0 + 280) = v82;
    v83 = sub_10001A9A8(&qword_10110DF18);
    v84 = type metadata accessor for OwnerPeerTrust(0);
    v85 = sub_1000193A4(&qword_10110DF20, &qword_10110DF18, (const char *)&protocol conformance descriptor for [A : B].Values);
    *v82 = v0;
    v82[1] = sub_10097075C;
    return Sequence.asyncCompactMap<A>(_:)(&unk_10110DF10, *(_QWORD *)(v0 + 152), v83, v84, v85);
  }
  v87 = (_QWORD *)(v0 + 128);
  v25 = (char *)v22 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  v88 = *(_QWORD *)(v24 + 72);
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 16);
  swift_retain();
  v27 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    v94 = v27;
    v33 = *(_QWORD *)(v0 + 224);
    v34 = *(_QWORD *)(v0 + 160);
    v35 = *(_QWORD *)(v0 + 168);
    v26(v33, v25, v34);
    v36 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56);
    v36(v33, 0, 1, v34);
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
    if (v37(v33, 1, v34) == 1)
    {
      v27 = v94;
      goto LABEL_37;
    }
    v89 = v23;
    v90 = v25;
    v38 = *(_QWORD *)(v0 + 216);
    v39 = *(char **)(v0 + 192);
    v40 = *(char **)(v0 + 200);
    v92 = *(_QWORD *)(v0 + 184);
    v93 = v36;
    v41 = *(_QWORD *)(v0 + 160);
    v91 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 32);
    v91((uint64_t)v40, *(_QWORD *)(v0 + 224), v41);
    v42 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    *(_QWORD *)(v0 + 80) = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
    *(_QWORD *)(v0 + 88) = v43;
    v44._countAndFlagsBits = 124;
    v44._object = (void *)0xE100000000000000;
    v45 = v26;
    String.append(_:)(v44);
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47 = String.utf8Data.getter(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
    v49 = v48;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 96) = v47;
    *(_QWORD *)(v0 + 104) = v49;
    v50 = sub_100035530();
    DataProtocol.stableUUID.getter(&type metadata for Data, v50);
    v51 = v49;
    v26 = v45;
    sub_10001BC14(v47, v51);
    v45(v92, v39, v41);
    v52 = v40;
    v53 = v93;
    v45(v38, v52, v41);
    v93(v38, 0, 1, v41);
    v54 = v37(v38, 1, v41);
    v55 = *(_QWORD *)(v0 + 184);
    if (v54 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 216), &qword_1010ED860);
      v27 = v94;
      swift_bridgeObjectRetain(v94);
      v56 = sub_100003FB0(v55);
      v58 = v57;
      swift_bridgeObjectRelease();
      if ((v58 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v94);
        *v87 = v94;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100A9AA68();
          v27 = (_QWORD *)*v87;
        }
        v60 = *(_QWORD *)(v0 + 208);
        v61 = *(_QWORD *)(v0 + 160);
        v29 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 8);
        v29(v27[6] + v56 * v88, v61);
        v27 = *(_QWORD **)(v0 + 128);
        v91(v60, v27[7] + v56 * v88, v61);
        sub_10010589C(v56, (uint64_t)v27);
        swift_bridgeObjectRelease();
        v93(v60, 0, 1, v61);
      }
      else
      {
        v28 = *(_QWORD *)(v0 + 168);
        v93(*(_QWORD *)(v0 + 208), 1, 1, *(_QWORD *)(v0 + 160));
        v29 = *(void (**)(unint64_t, uint64_t))(v28 + 8);
      }
      v30 = *(_QWORD *)(v0 + 208);
      v29(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
      sub_100004048(v30, &qword_1010ED860);
      goto LABEL_16;
    }
    v91(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 160));
    v62 = swift_isUniquelyReferenced_nonNull_native(v94);
    *(_QWORD *)(v0 + 136) = v94;
    v64 = sub_100003FB0(v55);
    v65 = v94[2];
    v66 = (v63 & 1) == 0;
    result = v65 + v66;
    if (__OFADD__(v65, v66))
      break;
    v67 = v63;
    if (v94[3] >= result)
    {
      if ((v62 & 1) == 0)
        sub_100A9AA68();
    }
    else
    {
      v68 = *(_QWORD *)(v0 + 184);
      sub_100A86BBC(result, v62);
      v69 = sub_100003FB0(v68);
      if ((v67 & 1) != (v70 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 160));
      v64 = v69;
    }
    v71 = *(_QWORD **)(v0 + 136);
    v72 = *(_QWORD *)(v0 + 160);
    if ((v67 & 1) != 0)
    {
      (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 40))(v71[7] + v64 * v88, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
    }
    else
    {
      v74 = *(_QWORD *)(v0 + 176);
      v73 = *(char **)(v0 + 184);
      v71[(v64 >> 6) + 8] |= 1 << v64;
      v75 = v64 * v88;
      v26(v71[6] + v75, v73, v72);
      result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v91)(v71[7] + v75, v74, v72);
      v76 = v71[2];
      v77 = __OFADD__(v76, 1);
      v78 = v76 + 1;
      if (v77)
        goto LABEL_40;
      v71[2] = v78;
    }
    v79 = *(_QWORD *)(v0 + 184);
    v80 = *(_QWORD *)(v0 + 160);
    v81 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD **)(v0 + 136);
    swift_bridgeObjectRelease();
    v29 = *(void (**)(unint64_t, uint64_t))(v81 + 8);
    v29(v79, v80);
LABEL_16:
    v31 = *(_QWORD *)(v0 + 200);
    v32 = *(_QWORD *)(v0 + 160);
    v29(*(_QWORD *)(v0 + 192), v32);
    v29(v31, v32);
    v25 = &v90[v88];
    v23 = v89 - 1;
    if (v89 == 1)
      goto LABEL_35;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100970FD4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t, char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(unint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  void (*v56)(uint64_t, char *, uint64_t);
  Swift::String v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  void (*v64)(_QWORD, uint64_t, uint64_t, _QWORD);
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  void (*v101)(uint64_t, unint64_t, uint64_t);
  uint64_t v102;
  void (*v103)(_QWORD, uint64_t, uint64_t, _QWORD);
  _QWORD *v104;
  uint64_t v105;

  v1 = *(_QWORD *)(v0 + 288);
  if (qword_1010EA078 != -1)
    goto LABEL_45;
  while (1)
  {
    v2 = type metadata accessor for Logger(0);
    sub_10001A9E8(v2, (uint64_t)qword_1011B79B8);
    swift_errorRetain(v1);
    v3 = swift_errorRetain(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 248);
    if (v6)
    {
      v8 = swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v105 = v9;
      *(_DWORD *)v8 = 136446210;
      swift_getErrorValue(v1, v0 + 120, v0 + 56);
      v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
      *(_QWORD *)(v8 + 4) = sub_100016940(v10, v11, &v105);
      swift_bridgeObjectRelease();
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Can't update the circle, error: %{public}s", (uint8_t *)v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }
    swift_errorRelease(v1);
    sub_1000126B0(v7, type metadata accessor for OwnerSharingCircle);
    v12 = *(_QWORD *)(v0 + 272) + 1;
    if (v12 == *(_QWORD *)(v0 + 256))
    {
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v0 + 216);
      v14 = *(_QWORD *)(v0 + 224);
      v16 = *(_QWORD *)(v0 + 200);
      v15 = *(_QWORD *)(v0 + 208);
      v18 = *(_QWORD *)(v0 + 184);
      v17 = *(_QWORD *)(v0 + 192);
      v19 = *(_QWORD *)(v0 + 176);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v14);
      swift_task_dealloc(v13);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    *(_QWORD *)(v0 + 272) = v12;
    v21 = *(_QWORD *)(v0 + 248);
    v22 = *(_QWORD *)(v0 + 232);
    sub_10005972C(*(_QWORD *)(v0 + 144)+ ((*(unsigned __int8 *)(v0 + 320) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 320))+ *(_QWORD *)(v0 + 264) * v12, v21, type metadata accessor for OwnerSharingCircle);
    v23 = *(_QWORD *)(v21 + *(int *)(v22 + 32));
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v25 = *(_QWORD *)(v0 + 168);
      v26 = sub_10001A9A8(&qword_1011003C0);
      v27 = *(_QWORD *)(v25 + 72);
      v28 = *(unsigned __int8 *)(v25 + 80);
      v29 = (v28 + 32) & ~v28;
      v30 = (_QWORD *)swift_allocObject(v26, v29 + v27 * v24, v28 | 7);
      result = j__malloc_size(v30);
      if (!v27)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        return result;
      }
      if (result - v29 == 0x8000000000000000 && v27 == -1)
        goto LABEL_48;
      v30[2] = v24;
      v30[3] = 2 * ((result - v29) / v27);
      swift_bridgeObjectRetain_n(v23, 2);
      v32 = sub_10050A294(v0 + 16, (char *)v30 + v29, v24, v23);
      result = sub_10007CC38(*(_QWORD *)(v0 + 16));
      if (v32 != v24)
        goto LABEL_47;
      swift_bridgeObjectRelease();
      v33 = v30;
    }
    else
    {
      v33 = _swiftEmptyArrayStorage;
    }
    v34 = v33[2];
    v35 = *(_QWORD *)(v0 + 168);
    v96 = v33;
    if (!v34)
      break;
    v97 = (_QWORD *)(v0 + 128);
    v36 = (char *)v33 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v98 = *(_QWORD *)(v35 + 72);
    v37 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 16);
    swift_retain();
    v38 = &_swiftEmptyDictionarySingleton;
    while (1)
    {
      v104 = v38;
      v44 = *(_QWORD *)(v0 + 224);
      v45 = *(_QWORD *)(v0 + 160);
      v46 = *(_QWORD *)(v0 + 168);
      v37(v44, v36, v45);
      v47 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56);
      v47(v44, 0, 1, v45);
      v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
      if (v48(v44, 1, v45) == 1)
      {
        v38 = v104;
        goto LABEL_41;
      }
      v99 = v34;
      v100 = v36;
      v49 = *(_QWORD *)(v0 + 216);
      v50 = *(char **)(v0 + 192);
      v51 = *(char **)(v0 + 200);
      v102 = *(_QWORD *)(v0 + 184);
      v103 = v47;
      v52 = *(_QWORD *)(v0 + 160);
      v101 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 32);
      v101((uint64_t)v51, *(_QWORD *)(v0 + 224), v52);
      v53 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      *(_QWORD *)(v0 + 80) = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
      *(_QWORD *)(v0 + 88) = v54;
      v55._countAndFlagsBits = 124;
      v55._object = (void *)0xE100000000000000;
      v56 = v37;
      String.append(_:)(v55);
      v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      v58 = String.utf8Data.getter(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
      v60 = v59;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 96) = v58;
      *(_QWORD *)(v0 + 104) = v60;
      v61 = sub_100035530();
      DataProtocol.stableUUID.getter(&type metadata for Data, v61);
      v62 = v60;
      v37 = v56;
      sub_10001BC14(v58, v62);
      v56(v102, v50, v52);
      v63 = v51;
      v64 = v103;
      v56(v49, v63, v52);
      v103(v49, 0, 1, v52);
      v65 = v48(v49, 1, v52);
      v66 = *(_QWORD *)(v0 + 184);
      if (v65 == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 216), &qword_1010ED860);
        v38 = v104;
        swift_bridgeObjectRetain(v104);
        v67 = sub_100003FB0(v66);
        v69 = v68;
        swift_bridgeObjectRelease();
        if ((v69 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v104);
          *v97 = v104;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100A9AA68();
            v38 = (_QWORD *)*v97;
          }
          v71 = *(_QWORD *)(v0 + 208);
          v72 = *(_QWORD *)(v0 + 160);
          v40 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 8);
          v40(v38[6] + v67 * v98, v72);
          v38 = *(_QWORD **)(v0 + 128);
          v101(v71, v38[7] + v67 * v98, v72);
          sub_10010589C(v67, (uint64_t)v38);
          swift_bridgeObjectRelease();
          v103(v71, 0, 1, v72);
        }
        else
        {
          v39 = *(_QWORD *)(v0 + 168);
          v103(*(_QWORD *)(v0 + 208), 1, 1, *(_QWORD *)(v0 + 160));
          v40 = *(void (**)(unint64_t, uint64_t))(v39 + 8);
        }
        v41 = *(_QWORD *)(v0 + 208);
        v40(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
        sub_100004048(v41, &qword_1010ED860);
        goto LABEL_20;
      }
      v101(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 160));
      v73 = swift_isUniquelyReferenced_nonNull_native(v104);
      *(_QWORD *)(v0 + 136) = v104;
      v1 = sub_100003FB0(v66);
      v75 = v104[2];
      v76 = (v74 & 1) == 0;
      v77 = v75 + v76;
      if (__OFADD__(v75, v76))
        break;
      v78 = v74;
      if (v104[3] >= v77)
      {
        if ((v73 & 1) == 0)
          sub_100A9AA68();
      }
      else
      {
        v79 = *(_QWORD *)(v0 + 184);
        sub_100A86BBC(v77, v73);
        v80 = sub_100003FB0(v79);
        if ((v78 & 1) != (v81 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 160));
        v1 = v80;
      }
      v82 = *(_QWORD **)(v0 + 136);
      v83 = *(_QWORD *)(v0 + 160);
      if ((v78 & 1) != 0)
      {
        (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 40))(v82[7] + v1 * v98, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
      }
      else
      {
        v85 = *(_QWORD *)(v0 + 176);
        v84 = *(char **)(v0 + 184);
        v82[(v1 >> 6) + 8] |= 1 << v1;
        v1 *= v98;
        v37(v82[6] + v1, v84, v83);
        v101(v82[7] + v1, v85, v83);
        v86 = v82[2];
        v87 = __OFADD__(v86, 1);
        v88 = v86 + 1;
        if (v87)
          goto LABEL_44;
        v82[2] = v88;
      }
      v89 = *(_QWORD *)(v0 + 184);
      v90 = *(_QWORD *)(v0 + 160);
      v91 = *(_QWORD *)(v0 + 168);
      v38 = *(_QWORD **)(v0 + 136);
      swift_bridgeObjectRelease();
      v40 = *(void (**)(unint64_t, uint64_t))(v91 + 8);
      v40(v89, v90);
LABEL_20:
      v42 = *(_QWORD *)(v0 + 200);
      v43 = *(_QWORD *)(v0 + 160);
      v40(*(_QWORD *)(v0 + 192), v43);
      v40(v42, v43);
      v36 = &v100[v98];
      v34 = v99 - 1;
      if (v99 == 1)
        goto LABEL_39;
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    swift_once(&qword_1010EA078, sub_10096F978);
  }
  swift_retain();
  v64 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v35 + 56);
  v38 = &_swiftEmptyDictionarySingleton;
LABEL_39:
  v64(*(_QWORD *)(v0 + 224), 1, 1, *(_QWORD *)(v0 + 160));
LABEL_41:
  swift_release_n(v96, 2);
  *(_QWORD *)(v0 + 112) = v38;
  v92 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 280) = v92;
  v93 = sub_10001A9A8(&qword_10110DF18);
  v94 = type metadata accessor for OwnerPeerTrust(0);
  v95 = sub_1000193A4(&qword_10110DF20, &qword_10110DF18, (const char *)&protocol conformance descriptor for [A : B].Values);
  *v92 = v0;
  v92[1] = sub_10097075C;
  return Sequence.asyncCompactMap<A>(_:)(&unk_10110DF10, *(_QWORD *)(v0 + 152), v93, v94, v95);
}

uint64_t sub_100971894()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t, char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(unint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  void (*v56)(uint64_t, char *, uint64_t);
  Swift::String v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  void (*v64)(_QWORD, uint64_t, uint64_t, _QWORD);
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  void (*v101)(uint64_t, unint64_t, uint64_t);
  uint64_t v102;
  void (*v103)(_QWORD, uint64_t, uint64_t, _QWORD);
  _QWORD *v104;
  uint64_t v105;

  v1 = *(_QWORD *)(v0 + 312);
  if (qword_1010EA078 != -1)
    goto LABEL_45;
  while (1)
  {
    v2 = type metadata accessor for Logger(0);
    sub_10001A9E8(v2, (uint64_t)qword_1011B79B8);
    swift_errorRetain(v1);
    v3 = swift_errorRetain(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 248);
    if (v6)
    {
      v8 = swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v105 = v9;
      *(_DWORD *)v8 = 136446210;
      swift_getErrorValue(v1, v0 + 120, v0 + 56);
      v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
      *(_QWORD *)(v8 + 4) = sub_100016940(v10, v11, &v105);
      swift_bridgeObjectRelease();
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Can't update the circle, error: %{public}s", (uint8_t *)v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }
    swift_errorRelease(v1);
    sub_1000126B0(v7, type metadata accessor for OwnerSharingCircle);
    v12 = *(_QWORD *)(v0 + 272) + 1;
    if (v12 == *(_QWORD *)(v0 + 256))
    {
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v0 + 216);
      v14 = *(_QWORD *)(v0 + 224);
      v16 = *(_QWORD *)(v0 + 200);
      v15 = *(_QWORD *)(v0 + 208);
      v18 = *(_QWORD *)(v0 + 184);
      v17 = *(_QWORD *)(v0 + 192);
      v19 = *(_QWORD *)(v0 + 176);
      swift_task_dealloc(*(_QWORD *)(v0 + 248));
      swift_task_dealloc(v14);
      swift_task_dealloc(v13);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    *(_QWORD *)(v0 + 272) = v12;
    v21 = *(_QWORD *)(v0 + 248);
    v22 = *(_QWORD *)(v0 + 232);
    sub_10005972C(*(_QWORD *)(v0 + 144)+ ((*(unsigned __int8 *)(v0 + 320) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 320))+ *(_QWORD *)(v0 + 264) * v12, v21, type metadata accessor for OwnerSharingCircle);
    v23 = *(_QWORD *)(v21 + *(int *)(v22 + 32));
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v25 = *(_QWORD *)(v0 + 168);
      v26 = sub_10001A9A8(&qword_1011003C0);
      v27 = *(_QWORD *)(v25 + 72);
      v28 = *(unsigned __int8 *)(v25 + 80);
      v29 = (v28 + 32) & ~v28;
      v30 = (_QWORD *)swift_allocObject(v26, v29 + v27 * v24, v28 | 7);
      result = j__malloc_size(v30);
      if (!v27)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        return result;
      }
      if (result - v29 == 0x8000000000000000 && v27 == -1)
        goto LABEL_48;
      v30[2] = v24;
      v30[3] = 2 * ((result - v29) / v27);
      swift_bridgeObjectRetain_n(v23, 2);
      v32 = sub_10050A294(v0 + 16, (char *)v30 + v29, v24, v23);
      result = sub_10007CC38(*(_QWORD *)(v0 + 16));
      if (v32 != v24)
        goto LABEL_47;
      swift_bridgeObjectRelease();
      v33 = v30;
    }
    else
    {
      v33 = _swiftEmptyArrayStorage;
    }
    v34 = v33[2];
    v35 = *(_QWORD *)(v0 + 168);
    v96 = v33;
    if (!v34)
      break;
    v97 = (_QWORD *)(v0 + 128);
    v36 = (char *)v33 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v98 = *(_QWORD *)(v35 + 72);
    v37 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 16);
    swift_retain();
    v38 = &_swiftEmptyDictionarySingleton;
    while (1)
    {
      v104 = v38;
      v44 = *(_QWORD *)(v0 + 224);
      v45 = *(_QWORD *)(v0 + 160);
      v46 = *(_QWORD *)(v0 + 168);
      v37(v44, v36, v45);
      v47 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56);
      v47(v44, 0, 1, v45);
      v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
      if (v48(v44, 1, v45) == 1)
      {
        v38 = v104;
        goto LABEL_41;
      }
      v99 = v34;
      v100 = v36;
      v49 = *(_QWORD *)(v0 + 216);
      v50 = *(char **)(v0 + 192);
      v51 = *(char **)(v0 + 200);
      v102 = *(_QWORD *)(v0 + 184);
      v103 = v47;
      v52 = *(_QWORD *)(v0 + 160);
      v101 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 32);
      v101((uint64_t)v51, *(_QWORD *)(v0 + 224), v52);
      v53 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      *(_QWORD *)(v0 + 80) = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
      *(_QWORD *)(v0 + 88) = v54;
      v55._countAndFlagsBits = 124;
      v55._object = (void *)0xE100000000000000;
      v56 = v37;
      String.append(_:)(v55);
      v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      v58 = String.utf8Data.getter(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
      v60 = v59;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 96) = v58;
      *(_QWORD *)(v0 + 104) = v60;
      v61 = sub_100035530();
      DataProtocol.stableUUID.getter(&type metadata for Data, v61);
      v62 = v60;
      v37 = v56;
      sub_10001BC14(v58, v62);
      v56(v102, v50, v52);
      v63 = v51;
      v64 = v103;
      v56(v49, v63, v52);
      v103(v49, 0, 1, v52);
      v65 = v48(v49, 1, v52);
      v66 = *(_QWORD *)(v0 + 184);
      if (v65 == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 216), &qword_1010ED860);
        v38 = v104;
        swift_bridgeObjectRetain(v104);
        v67 = sub_100003FB0(v66);
        v69 = v68;
        swift_bridgeObjectRelease();
        if ((v69 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v104);
          *v97 = v104;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100A9AA68();
            v38 = (_QWORD *)*v97;
          }
          v71 = *(_QWORD *)(v0 + 208);
          v72 = *(_QWORD *)(v0 + 160);
          v40 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 8);
          v40(v38[6] + v67 * v98, v72);
          v38 = *(_QWORD **)(v0 + 128);
          v101(v71, v38[7] + v67 * v98, v72);
          sub_10010589C(v67, (uint64_t)v38);
          swift_bridgeObjectRelease();
          v103(v71, 0, 1, v72);
        }
        else
        {
          v39 = *(_QWORD *)(v0 + 168);
          v103(*(_QWORD *)(v0 + 208), 1, 1, *(_QWORD *)(v0 + 160));
          v40 = *(void (**)(unint64_t, uint64_t))(v39 + 8);
        }
        v41 = *(_QWORD *)(v0 + 208);
        v40(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
        sub_100004048(v41, &qword_1010ED860);
        goto LABEL_20;
      }
      v101(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 160));
      v73 = swift_isUniquelyReferenced_nonNull_native(v104);
      *(_QWORD *)(v0 + 136) = v104;
      v1 = sub_100003FB0(v66);
      v75 = v104[2];
      v76 = (v74 & 1) == 0;
      v77 = v75 + v76;
      if (__OFADD__(v75, v76))
        break;
      v78 = v74;
      if (v104[3] >= v77)
      {
        if ((v73 & 1) == 0)
          sub_100A9AA68();
      }
      else
      {
        v79 = *(_QWORD *)(v0 + 184);
        sub_100A86BBC(v77, v73);
        v80 = sub_100003FB0(v79);
        if ((v78 & 1) != (v81 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 160));
        v1 = v80;
      }
      v82 = *(_QWORD **)(v0 + 136);
      v83 = *(_QWORD *)(v0 + 160);
      if ((v78 & 1) != 0)
      {
        (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 40))(v82[7] + v1 * v98, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
      }
      else
      {
        v85 = *(_QWORD *)(v0 + 176);
        v84 = *(char **)(v0 + 184);
        v82[(v1 >> 6) + 8] |= 1 << v1;
        v1 *= v98;
        v37(v82[6] + v1, v84, v83);
        v101(v82[7] + v1, v85, v83);
        v86 = v82[2];
        v87 = __OFADD__(v86, 1);
        v88 = v86 + 1;
        if (v87)
          goto LABEL_44;
        v82[2] = v88;
      }
      v89 = *(_QWORD *)(v0 + 184);
      v90 = *(_QWORD *)(v0 + 160);
      v91 = *(_QWORD *)(v0 + 168);
      v38 = *(_QWORD **)(v0 + 136);
      swift_bridgeObjectRelease();
      v40 = *(void (**)(unint64_t, uint64_t))(v91 + 8);
      v40(v89, v90);
LABEL_20:
      v42 = *(_QWORD *)(v0 + 200);
      v43 = *(_QWORD *)(v0 + 160);
      v40(*(_QWORD *)(v0 + 192), v43);
      v40(v42, v43);
      v36 = &v100[v98];
      v34 = v99 - 1;
      if (v99 == 1)
        goto LABEL_39;
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    swift_once(&qword_1010EA078, sub_10096F978);
  }
  swift_retain();
  v64 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v35 + 56);
  v38 = &_swiftEmptyDictionarySingleton;
LABEL_39:
  v64(*(_QWORD *)(v0 + 224), 1, 1, *(_QWORD *)(v0 + 160));
LABEL_41:
  swift_release_n(v96, 2);
  *(_QWORD *)(v0 + 112) = v38;
  v92 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 280) = v92;
  v93 = sub_10001A9A8(&qword_10110DF18);
  v94 = type metadata accessor for OwnerPeerTrust(0);
  v95 = sub_1000193A4(&qword_10110DF20, &qword_10110DF18, (const char *)&protocol conformance descriptor for [A : B].Values);
  *v92 = v0;
  v92[1] = sub_10097075C;
  return Sequence.asyncCompactMap<A>(_:)(&unk_10110DF10, *(_QWORD *)(v0 + 152), v93, v94, v95);
}

uint64_t sub_100972154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10110DF2C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return sub_1009721B8(a1, a2);
}

uint64_t sub_1009721B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[18] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[19] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[20] = v6;
  v3[21] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100972220, v2, 0);
}

uint64_t sub_100972220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 176) = v3;
    *v3 = v0;
    v3[1] = sub_100972320;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100972320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100972380, v3, 0);
}

uint64_t sub_100972380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 184);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1009724E4, *(_QWORD *)(v0 + 184), 0);
  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B79B8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconStoreActor available!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 168);

  v9 = sub_100033220();
  v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
  *v11 = 0x74536E6F63616542;
  v11[1] = 0xEB0000000065726FLL;
  swift_willThrow(v10);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009724E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0[23];
  v3 = v0[20];
  v2 = v0[21];
  v4 = v0[18];
  v5 = v0[19];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[16], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109F058, v7 + v3, v6 | 7);
  v0[24] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[25] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *v10 = v0;
  v10[1] = sub_1009725CC;
  return unsafeBlocking<A>(_:)(v0[15], sub_10007CC14, v8, v11);
}

uint64_t sub_1009725CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_10097262C, v1, 0);
}

uint64_t sub_10097262C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097266C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v3[19] = *v2;
  v4 = sub_10001A9A8(&qword_1010ED860);
  v3[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v3[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[22] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[23] = swift_task_alloc(v7);
  v3[24] = swift_task_alloc(v7);
  v8 = type metadata accessor for OwnerPeerTrust(0);
  v3[25] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[26] = v9;
  v3[27] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(type metadata accessor for PeerCommunicationIdentifier(0) - 8);
  v3[28] = v10;
  v3[29] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100972758, v2, 0);
}

uint64_t sub_100972758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 136) + 16);
  *(_QWORD *)(v0 + 240) = v1;
  if (!v1)
  {
    v6 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  v2 = qword_1010EA5B0;
  swift_retain();
  if (v2 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v10 = (uint64_t (*)(void))((char *)&dword_1010EBB28 + dword_1010EBB28);
    v4 = (_QWORD *)swift_task_alloc(unk_1010EBB2C);
    *(_QWORD *)(v0 + 248) = v4;
    *v4 = v0;
    v4[1] = sub_1009728B0;
    v5 = v10;
    return v5();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009728B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100972910, v3, 0);
}

uint64_t sub_100972910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 256);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 224);
    v3 = *(_QWORD *)(v0 + 208);
    v32 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 136);
    sub_10009A8E4(0, *(_QWORD *)(v0 + 240), 0);
    v5 = 0;
    v6 = v4 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v31 = *(_QWORD *)(v3 + 72);
    do
    {
      v7 = *(_QWORD *)(v0 + 232);
      v8 = *(_QWORD *)(v0 + 216);
      sub_10005972C(v6, v8, type metadata accessor for OwnerPeerTrust);
      sub_10005972C(v8 + *(int *)(v32 + 28), v7, type metadata accessor for PeerCommunicationIdentifier);
      sub_1000126B0(v8, type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A8E4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_10009A8E4(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v0 + 296) = _swiftEmptyArrayStorage;
      v11 = *(_QWORD *)(v0 + 232);
      v12 = *(_QWORD *)(v0 + 240);
      ++v5;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      sub_1000126EC(v11, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v10, type metadata accessor for PeerCommunicationIdentifier);
      v6 += v31;
    }
    while (v5 != v12);
    v13 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 120) = _swiftEmptyArrayStorage;
    v14 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 264) = v14;
    *(_QWORD *)(v14 + 16) = v13;
    v15 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    *(_QWORD *)(v0 + 272) = v15;
    v16 = sub_10001A9A8(&qword_10110DEF8);
    v17 = sub_1000193A4(&qword_10110DF00, &qword_10110DEF8, (const char *)&protocol conformance descriptor for [A]);
    *v15 = v0;
    v15[1] = sub_100972C74;
    return Sequence.asyncCompactMap<A>(_:)(&unk_10110DEF0, v14, v16, &type metadata for MessagingDestination, v17);
  }
  else
  {
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B79B8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No IDSTransportService_ItemSharingCrossAccount available!", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = sub_100033220();
    v25 = swift_allocError(&type metadata for DaemonError, v24, 0, 0);
    *v26 = 0xD00000000000002BLL;
    v26[1] = 0x8000000100ECC560;
    swift_willThrow(v25);
    v27 = *(_QWORD *)(v0 + 216);
    v29 = *(_QWORD *)(v0 + 184);
    v28 = *(_QWORD *)(v0 + 192);
    v30 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100972C74(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v2;
  v5 = *(_QWORD *)(*v2 + 264);
  v4 = *(_QWORD *)(*v2 + 272);
  v6 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(v3 + 280) = a1;
  *(_QWORD *)(v3 + 288) = v1;
  swift_task_dealloc(v4);
  swift_release();
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100972CF0, v6, 0);
}

uint64_t sub_100972CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[8];
  __int128 v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = sub_10001A9A8(&qword_1011003C0);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v5, v7 + *(_QWORD *)(v3 + 72), v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  v9 = type metadata accessor for OwnerSharingCircle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v8 + v7, v4 + *(int *)(v9 + 20), v2);
  sub_10038A1DC(5, 1, v8, (uint64_t)v15);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v10 = *(_QWORD *)(v0 + 216);
    v12 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 192);
    v13 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_BYTE *)(v0 + 368) = v15[0];
    *(_OWORD *)(v0 + 304) = v16;
    *(_QWORD *)(v0 + 320) = v17;
    return swift_task_switch(sub_100972E40, *(_QWORD *)(v0 + 256), 0);
  }
}

uint64_t sub_100972E40()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;
  uint64_t v13;

  v13 = *(_QWORD *)(v0 + 320);
  v12 = *(_OWORD *)(v0 + 304);
  v1 = *(_BYTE *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 56))(v5, 1, 1, *(_QWORD *)(v0 + 168));
  v6 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 328) = v6;
  v7 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 336) = v7;
  UUID.init()(v7);
  v8 = sub_100006C64(&qword_10110DB40, 255, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount, (uint64_t)&unk_100E561AC);
  v9 = swift_task_alloc(128);
  *(_QWORD *)(v0 + 344) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = v4;
  *(_BYTE *)(v9 + 32) = v1;
  *(_OWORD *)(v9 + 40) = v12;
  *(_QWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 64) = v2;
  *(_QWORD *)(v9 + 72) = v5;
  *(_QWORD *)(v9 + 80) = 0;
  *(_WORD *)(v9 + 88) = 1;
  *(_QWORD *)(v9 + 96) = v6;
  *(_QWORD *)(v9 + 104) = v7;
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = 0;
  v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 352) = v10;
  *v10 = v0;
  v10[1] = sub_100972FA8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 256), v8, 0xD000000000000083, 0x8000000100EEB060, sub_100985FB0, v9, *(_QWORD *)(v0 + 168));
}

uint64_t sub_100972FA8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 352);
  *(_QWORD *)(*v1 + 360) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(*(_QWORD *)(v2 + 344));
  if (v0)
    v4 = sub_100973138;
  else
    v4 = sub_100973014;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 256), 0);
}

uint64_t sub_100973014()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = v0[24];
  v2 = v0[21];
  v3 = v0[20];
  v4 = v0[18];
  v5 = *(void (**)(uint64_t, uint64_t))(v0[22] + 8);
  v5(v0[23], v2);
  sub_100004048(v3, &qword_1010ED860);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5(v1, v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1009730B8, v4, 0);
}

uint64_t sub_1009730B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  swift_release();
  sub_10001BC14(v1, v2);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100973138()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[20];
  v2 = v0[18];
  (*(void (**)(_QWORD, _QWORD))(v0[22] + 8))(v0[23], v0[21]);
  sub_100004048(v1, &qword_1010ED860);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1009731C0, v2, 0);
}

uint64_t sub_1009731C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  swift_release();
  sub_10001BC14(v1, v2);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100973248(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v2[9] = a1;
  v2[10] = a2;
  v4 = type metadata accessor for PeerCommunicationIdentifier(0);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
  v5 = (_QWORD *)swift_task_alloc(unk_10111223C);
  v2[12] = v5;
  *v5 = v2;
  v5[1] = sub_1009732CC;
  return v7(a2);
}

uint64_t sub_1009732CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();

  v8 = *(_QWORD **)v4;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 96);
  *(_QWORD *)(*(_QWORD *)v4 + 104) = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    v10 = sub_1009733A0;
  }
  else
  {
    v8[14] = a3;
    v8[15] = a2;
    v8[16] = a1;
    v10 = sub_100973354;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_100973354()
{
  uint64_t v0;
  uint64_t v1;
  int8x16_t *v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(int8x16_t **)(v0 + 72);
  *v2 = vextq_s8(*(int8x16_t *)(v0 + 120), *(int8x16_t *)(v0 + 120), 8uLL);
  v2[1].i64[0] = v1;
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009733A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B79B8);
  sub_10005972C(v3, v2, type metadata accessor for PeerCommunicationIdentifier);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 88);
  if (v8)
  {
    v11 = swift_slowAlloc(32, -1);
    v18 = swift_slowAlloc(64, -1);
    v19 = v18;
    *(_DWORD *)v11 = 141558531;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    sub_100728868();
    *(_QWORD *)(v0 + 48) = sub_100016940(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for PeerCommunicationIdentifier);
    *(_WORD *)(v11 + 22) = 2082;
    swift_getErrorValue(v9, v0 + 56, v0 + 16);
    v14 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 64) = sub_100016940(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Can't get messagingDestination for communicationsIdentifier: %{private,mask.hash}s, error: %{public}s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    sub_1000126B0(v10, type metadata accessor for PeerCommunicationIdentifier);
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  v16 = *(_QWORD **)(v0 + 72);
  *v16 = 0;
  v16[1] = 0;
  v16[2] = 0;
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for CircleTrustService()
{
  return objc_opt_self(_TtC12searchpartyd18CircleTrustService);
}

uint64_t sub_100973668()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v1[3] = *v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009736CC, v0, 0);
}

uint64_t sub_1009736CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for TaskPriority(0);
  v8 = *(_OWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v5 = sub_100006C64(&qword_10110DDB8, v4, (uint64_t (*)(uint64_t))type metadata accessor for CircleTrustService, (uint64_t)&unk_100E56288);
  v6 = swift_allocObject(&unk_10109EDD8, 48, 7);
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v5;
  *(_OWORD *)(v6 + 32) = v8;
  swift_retain_n(v3, 2);
  sub_100691AC0(v1, (uint64_t)&unk_10110DDD0, v6);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1009737AC(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22,uint64_t a23,unint64_t a24)
{
  uint64_t *v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  void (*v43)(char *, unint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, char *, uint64_t);
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  NSObject *v107;

  v88 = a8;
  v97 = a7;
  v98 = a5;
  v86 = a6;
  v85 = a3;
  v84 = a1;
  v104 = a23;
  v105 = a24;
  LODWORD(v107) = a22;
  v99 = a20;
  v89 = a18;
  v100 = a17;
  v101 = a21;
  v90 = a16;
  v91 = a19;
  v95 = a13;
  v96 = a14;
  v102 = a15;
  v103 = a12;
  v92 = a11;
  v93 = a9;
  v94 = a10;
  v87 = *v24;
  v27 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_QWORD *)(v28 + 64);
  v30 = __chkstk_darwin(v27);
  v106 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v32 = (char *)&v74 - v31;
  v33 = sub_10001A9A8(&qword_1010ED860);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(_QWORD *)(v34 + 64);
  v36 = __chkstk_darwin(v33);
  __chkstk_darwin(v36);
  v38 = (char *)&v74 - v37;
  if ((sub_100AB3A40() & 1) != 0 && v107 == 2)
  {
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B79B8);
    v107 = Logger.logObject.getter(v40);
    v41 = static os_log_type_t.error.getter(v107);
    if (os_log_type_enabled(v107, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v41, "handleCircleTrust received by underage account. Ignoring it.", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

  }
  else
  {
    v83 = type metadata accessor for Transaction(0);
    sub_10000F9B8(a4, (uint64_t)v38, &qword_1010ED860);
    v43 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
    v81 = v32;
    v43(v32, v84, v27);
    v43(v106, a2, v27);
    v82 = (uint64_t)&v74 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_10000F9B8(v85, v82, &qword_1010ED860);
    v44 = *(unsigned __int8 *)(v34 + 80);
    v45 = (v44 + 17) & ~v44;
    v46 = *(unsigned __int8 *)(v28 + 80);
    v47 = (v35 + v46 + v45) & ~v46;
    v48 = (v29 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = (v48 + 31) & 0xFFFFFFFFFFFFFFF8;
    v75 = (v49 + 23) & 0xFFFFFFFFFFFFFFF8;
    v50 = (v75 + 15) & 0xFFFFFFFFFFFFFFF8;
    v74 = (v46 + v50 + 16) & ~v46;
    v76 = (v29 + v44 + v74) & ~v44;
    v51 = (v35 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
    v77 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8;
    v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8;
    v80 = (v78 + 19) & 0xFFFFFFFFFFFFFFF8;
    v85 = (v80 + 15) & 0xFFFFFFFFFFFFFFF8;
    v79 = (v85 + 15) & 0xFFFFFFFFFFFFFFF8;
    v84 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8;
    v52 = swift_allocObject(&unk_10109EE00, v84 + 8, v44 | v46 | 7);
    *(_BYTE *)(v52 + 16) = (_BYTE)v107;
    sub_100005CF0((uint64_t)v38, v52 + v45, &qword_1010ED860);
    v53 = v52 + v47;
    v54 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
    v54(v53, v81, v27);
    v55 = v52 + v48;
    *(_BYTE *)v55 = v89;
    v57 = v99;
    v56 = v100;
    *(_QWORD *)(v55 + 8) = v91;
    *(_QWORD *)(v55 + 16) = v57;
    v58 = (_QWORD *)(v52 + v49);
    *v58 = v90;
    v58[1] = v56;
    v59 = v101;
    *(_QWORD *)(v52 + v75) = v101;
    v60 = (uint64_t *)(v52 + v50);
    v61 = v52 + v74;
    v63 = v104;
    v62 = v105;
    *v60 = v104;
    v60[1] = v62;
    v54(v61, v106, v27);
    sub_100005CF0(v82, v52 + v76, &qword_1010ED860);
    v64 = (_QWORD *)(v52 + v51);
    v65 = v103;
    *v64 = v92;
    v64[1] = v65;
    v66 = (_QWORD *)(v52 + v77);
    v67 = v88;
    *v66 = v97;
    v66[1] = v67;
    v68 = (_QWORD *)(v52 + v78);
    v69 = v86;
    *v68 = v98;
    v68[1] = v69;
    v70 = (_DWORD *)(v52 + v80);
    v71 = v94;
    *v70 = v93;
    v70[1] = v71;
    *(_QWORD *)(v52 + v85) = v95;
    v72 = (_QWORD *)(v52 + v79);
    v73 = v102;
    *v72 = v96;
    v72[1] = v73;
    *(_QWORD *)(v52 + v84) = v87;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v59);
    sub_10001BBBC(v63, v62);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRetain(v69);
    static Transaction.asyncTask(name:block:)("handleCircleTrust", 17, 2, &unk_10110DE10, v52);
    swift_release();
  }
}

uint64_t sub_100973D34(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v8 + 416) = v32;
  *(_QWORD *)(v8 + 424) = v33;
  *(_DWORD *)(v8 + 812) = v30;
  *(_DWORD *)(v8 + 808) = v29;
  *(_QWORD *)(v8 + 400) = v28;
  *(_QWORD *)(v8 + 408) = v31;
  *(_OWORD *)(v8 + 368) = v26;
  *(_OWORD *)(v8 + 384) = v27;
  *(_OWORD *)(v8 + 336) = v24;
  *(_OWORD *)(v8 + 352) = v25;
  *(_OWORD *)(v8 + 320) = v23;
  *(_QWORD *)(v8 + 304) = a7;
  *(_QWORD *)(v8 + 312) = a8;
  *(_QWORD *)(v8 + 288) = a5;
  *(_QWORD *)(v8 + 296) = a6;
  *(_BYTE *)(v8 + 821) = a4;
  *(_QWORD *)(v8 + 272) = a2;
  *(_QWORD *)(v8 + 280) = a3;
  *(_BYTE *)(v8 + 820) = a1;
  v9 = type metadata accessor for PeerTrustEnvelopeV1(0);
  *(_QWORD *)(v8 + 432) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 440) = v10;
  *(_QWORD *)(v8 + 448) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010ED300);
  *(_QWORD *)(v8 + 456) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 464) = v12;
  *(_QWORD *)(v8 + 472) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EE1E0);
  *(_QWORD *)(v8 + 480) = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 488) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 496) = swift_task_alloc(v14);
  v15 = sub_10001A9A8(&qword_1010EE1E8);
  *(_QWORD *)(v8 + 504) = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 512) = swift_task_alloc(v16);
  *(_QWORD *)(v8 + 520) = swift_task_alloc(v16);
  v17 = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
  *(_QWORD *)(v8 + 528) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 536) = swift_task_alloc(v18);
  *(_QWORD *)(v8 + 544) = swift_task_alloc(v18);
  *(_QWORD *)(v8 + 552) = swift_task_alloc(v18);
  *(_QWORD *)(v8 + 560) = swift_task_alloc(v18);
  v19 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 568) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v8 + 576) = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 584) = swift_task_alloc(v21);
  *(_QWORD *)(v8 + 592) = swift_task_alloc(v21);
  *(_QWORD *)(v8 + 600) = swift_task_alloc(v21);
  *(_QWORD *)(v8 + 608) = swift_task_alloc(v21);
  *(_QWORD *)(v8 + 616) = swift_task_alloc(v21);
  *(_QWORD *)(v8 + 624) = swift_task_alloc(v21);
  return swift_task_switch(sub_100973F4C, 0, 0);
}

uint64_t sub_100973F4C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 632) = v2;
    *v2 = v0;
    v2[1] = sub_100974038;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100974038(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 632);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100974094, 0, 0);
}

uint64_t sub_100974094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (__cdecl *v24)();
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 640);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v24 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB28 + dword_1010EBB28);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB2C);
      *(_QWORD *)(v0 + 648) = v3;
      *v3 = v0;
      v3[1] = sub_10097430C;
      return v24();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B79B8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No BeaconSharingService available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 616);
    v10 = *(_QWORD *)(v0 + 608);
    v11 = *(_QWORD *)(v0 + 600);
    v12 = *(_QWORD *)(v0 + 592);
    v13 = *(_QWORD *)(v0 + 584);
    v14 = *(_QWORD *)(v0 + 560);
    v15 = *(_QWORD *)(v0 + 552);
    v16 = *(_QWORD *)(v0 + 544);
    v17 = *(_QWORD *)(v0 + 536);
    v18 = *(_QWORD *)(v0 + 528);
    v19 = *(_QWORD *)(v0 + 520);
    v20 = *(_QWORD *)(v0 + 512);
    v21 = *(_QWORD *)(v0 + 496);
    v22 = *(_QWORD *)(v0 + 488);
    v23 = *(_QWORD *)(v0 + 472);
    v25 = *(_QWORD *)(v0 + 448);
    swift_task_dealloc(*(_QWORD *)(v0 + 624));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10097430C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 648);
  *(_QWORD *)(*(_QWORD *)v1 + 656) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100974368, 0, 0);
}

uint64_t sub_100974368()
{
  uint64_t v0;
  _QWORD *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(_QWORD, _QWORD);
  uint64_t v123;

  v1 = (_QWORD *)(v0 + 96);
  if (*(_QWORD *)(v0 + 656))
  {
    v2 = *(unsigned __int8 *)(v0 + 820);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (v2 == 2)
    {
      v3 = *(_QWORD *)(v0 + 576);
      v4 = *(_QWORD *)(v0 + 568);
      v5 = *(_QWORD *)(v0 + 560);
      sub_10000F9B8(*(_QWORD *)(v0 + 272), v5, &qword_1010ED860);
      v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
      *(_QWORD *)(v0 + 664) = v6;
      if (v6(v5, 1, v4) != 1)
      {
        v73 = *(_QWORD *)(v0 + 624);
        v74 = *(_QWORD *)(v0 + 568);
        v75 = *(_QWORD *)(v0 + 560);
        v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 576) + 32);
        *(_QWORD *)(v0 + 672) = v76;
        v76(v73, v75, v74);
        return swift_task_switch(sub_100974C38, *(_QWORD *)(v0 + 640), 0);
      }
      sub_100004048(*(_QWORD *)(v0 + 560), &qword_1010ED860);
    }
    v7 = *(_QWORD *)(v0 + 520);
    v8 = *(int **)(v0 + 504);
    v9 = *(_QWORD *)(v0 + 304);
    v114 = *(_QWORD *)(v0 + 312);
    v118 = *(_QWORD *)(v0 + 320);
    v11 = *(_QWORD *)(v0 + 288);
    v10 = *(_QWORD *)(v0 + 296);
    v12 = *(_BYTE *)(v0 + 821);
    v13 = *(_BYTE *)(v0 + 820);
    v14 = v8[12];
    v15 = v7 + v8[16];
    v93 = v8;
    v16 = (_QWORD *)(v7 + v8[20]);
    v122 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 576) + 16);
    ((void (*)(uint64_t, _QWORD, _QWORD))v122)(v7, *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 568));
    *(_BYTE *)(v7 + v14) = v13;
    *(_BYTE *)v15 = v12;
    *(_QWORD *)(v15 + 8) = v11;
    *(_QWORD *)(v15 + 16) = v10;
    *v16 = v9;
    v16[1] = v114;
    v17 = *(_QWORD *)(v118 + 16);
    if (v17)
    {
      v115 = *(_QWORD *)(v0 + 456);
      v119 = *(_QWORD *)(v0 + 464);
      v18 = *(_QWORD *)(v0 + 440);
      v108 = *(_QWORD *)(v0 + 432);
      v19 = *(_QWORD *)(v0 + 312);
      v20 = *(_QWORD *)(v0 + 320);
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 296));
      swift_bridgeObjectRetain(v19);
      sub_10009B578(0, v17, 0);
      v21 = v20 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      v111 = *(_QWORD *)(v18 + 72);
      do
      {
        v22 = *(_QWORD *)(v0 + 568);
        v23 = *(_QWORD *)(v0 + 472);
        v24 = *(_QWORD *)(v0 + 448);
        sub_10005972C(v21, v24, type metadata accessor for PeerTrustEnvelopeV1);
        v25 = (_QWORD *)(v23 + *(int *)(v115 + 48));
        v26 = (uint64_t *)(v23 + *(int *)(v115 + 64));
        ((void (*)(uint64_t, uint64_t, uint64_t))v122)(v23, v24, v22);
        v27 = (_QWORD *)(v24 + *(int *)(v108 + 20));
        v28 = v27[1];
        *v25 = *v27;
        v25[1] = v28;
        v29 = (uint64_t *)(v24 + *(int *)(v108 + 24));
        v30 = *v29;
        v31 = v29[1];
        *v26 = *v29;
        v26[1] = v31;
        swift_bridgeObjectRetain(v28);
        sub_10001BBBC(v30, v31);
        sub_1000126B0(v24, type metadata accessor for PeerTrustEnvelopeV1);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009B578(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v33 = _swiftEmptyArrayStorage[2];
        v32 = _swiftEmptyArrayStorage[3];
        if (v33 >= v32 >> 1)
          sub_10009B578(v32 > 1, v33 + 1, 1);
        v34 = *(_QWORD *)(v0 + 472);
        _swiftEmptyArrayStorage[2] = v33 + 1;
        sub_100005CF0(v34, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(_QWORD *)(v119 + 72) * v33, &qword_1010ED300);
        v21 += v111;
        --v17;
      }
      while (v17);
      v94 = *(_QWORD *)(v0 + 296);
      v95 = *(_QWORD *)(v0 + 312);
    }
    else
    {
      v50 = *(_QWORD *)(v0 + 312);
      v94 = *(_QWORD *)(v0 + 296);
      swift_bridgeObjectRetain(v94);
      v95 = v50;
      swift_bridgeObjectRetain(v50);
    }
    *(_QWORD *)(v0 + 792) = _swiftEmptyArrayStorage;
    v96 = *(_QWORD *)(v0 + 568);
    v91 = *(_QWORD *)(v0 + 512);
    v52 = *(_QWORD *)(v0 + 488);
    v51 = *(_QWORD *)(v0 + 496);
    v53 = *(int **)(v0 + 480);
    v117 = *(_QWORD *)(v0 + 416);
    v121 = *(_QWORD *)(v0 + 424);
    v113 = *(_QWORD *)(v0 + 408);
    v110 = *(_DWORD *)(v0 + 812);
    v107 = *(_DWORD *)(v0 + 808);
    v103 = *(_QWORD *)(v0 + 392);
    v105 = *(_QWORD *)(v0 + 400);
    v101 = *(_QWORD *)(v0 + 376);
    v102 = *(_QWORD *)(v0 + 384);
    v100 = *(_QWORD *)(v0 + 368);
    v54 = *(_QWORD *)(v0 + 344);
    v80 = *(_QWORD *)(v0 + 504);
    v81 = *(_QWORD *)(v0 + 352);
    v98 = *(_QWORD *)(v0 + 336);
    v99 = *(_QWORD *)(v0 + 360);
    v97 = *(_QWORD *)(v0 + 328);
    v87 = *(_QWORD *)(v0 + 288);
    v89 = *(_QWORD *)(v0 + 304);
    v86 = *(_BYTE *)(v0 + 821);
    v84 = *(_BYTE *)(v0 + 820);
    v83 = *(_QWORD *)(v0 + 520);
    v55 = (uint64_t *)(v83 + *(int *)(v80 + 112));
    *(_QWORD *)(v83 + *(int *)(v80 + 96)) = _swiftEmptyArrayStorage;
    *v55 = v97;
    v55[1] = v98;
    v56 = v51 + v53[12];
    v85 = v56;
    v57 = (_QWORD *)(v51 + v53[16]);
    v58 = (_QWORD *)(v51 + v53[20]);
    v59 = (_QWORD *)(v51 + v53[24]);
    v60 = (_QWORD *)(v51 + v53[40]);
    v77 = v53[28];
    v78 = v53[32];
    v79 = v53[36];
    v122(v51, v54);
    sub_10000F9B8(v81, v56, &qword_1010ED860);
    *v57 = v99;
    v57[1] = v100;
    *v58 = v101;
    v58[1] = v102;
    *v59 = v103;
    v59[1] = v105;
    *(_DWORD *)(v51 + v77) = v107;
    *(_DWORD *)(v51 + v78) = v110;
    *(_QWORD *)(v51 + v79) = v113;
    *v60 = v117;
    v60[1] = v121;
    v82 = v93[12];
    v61 = v91 + v93[16];
    v62 = (_QWORD *)(v91 + v93[20]);
    v63 = (uint64_t *)(v91 + *(int *)(v80 + 112));
    v64 = *(int *)(v80 + 96);
    ((void (*)(void))v122)();
    *(_BYTE *)(v91 + v82) = v84;
    *(_BYTE *)v61 = v86;
    *(_QWORD *)(v61 + 8) = v87;
    *(_QWORD *)(v61 + 16) = v94;
    *v62 = v89;
    v62[1] = v95;
    *(_QWORD *)(v91 + v64) = _swiftEmptyArrayStorage;
    *v63 = v97;
    v63[1] = v98;
    v65 = v53[12];
    *(_DWORD *)(v0 + 816) = v65;
    v66 = v52 + v65;
    v67 = (_QWORD *)(v52 + v53[16]);
    v68 = (_QWORD *)(v52 + v53[20]);
    v69 = (_QWORD *)(v52 + v53[24]);
    v90 = v53[32];
    v92 = v53[28];
    v88 = v53[36];
    v70 = (_QWORD *)(v52 + v53[40]);
    ((void (*)(uint64_t, uint64_t, uint64_t))v122)(v52, v51, v96);
    sub_10000F9B8(v85, v66, &qword_1010ED860);
    *v67 = v99;
    v67[1] = v100;
    *v68 = v101;
    v68[1] = v102;
    *v69 = v103;
    v69[1] = v105;
    *(_DWORD *)(v52 + v92) = v107;
    *(_DWORD *)(v52 + v90) = v110;
    *(_QWORD *)(v52 + v88) = v113;
    *v70 = v117;
    v70[1] = v121;
    sub_10001BBBC(v97, v98);
    swift_bridgeObjectRetain(v121);
    swift_bridgeObjectRetain(v94);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v105);
    sub_10001BBBC(v97, v98);
    v71 = dword_1010EE1DC;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(v105);
    swift_bridgeObjectRetain(v121);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v72 = (_QWORD *)swift_task_alloc(v71);
    *(_QWORD *)(v0 + 800) = v72;
    *v72 = v0;
    v72[1] = sub_10097635C;
    return sub_1000C1A38(*(_QWORD *)(v0 + 512), *(_BYTE *)(v0 + 820), *(_BYTE *)(v0 + 821), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312), (uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B79B8);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "No IDSTransportService_ItemSharingCrossAccount available!", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v40 = *(_QWORD *)(v0 + 616);
    v41 = *(_QWORD *)(v0 + 608);
    v42 = *(_QWORD *)(v0 + 600);
    v43 = *(_QWORD *)(v0 + 592);
    v44 = *(_QWORD *)(v0 + 584);
    v45 = *(_QWORD *)(v0 + 560);
    v46 = *(_QWORD *)(v0 + 552);
    v47 = *(_QWORD *)(v0 + 544);
    v48 = *(_QWORD *)(v0 + 536);
    v104 = *(_QWORD *)(v0 + 528);
    v106 = *(_QWORD *)(v0 + 520);
    v109 = *(_QWORD *)(v0 + 512);
    v112 = *(_QWORD *)(v0 + 496);
    v116 = *(_QWORD *)(v0 + 488);
    v120 = *(_QWORD *)(v0 + 472);
    v123 = *(_QWORD *)(v0 + 448);
    swift_task_dealloc(*(_QWORD *)(v0 + 624));
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v109);
    swift_task_dealloc(v112);
    swift_task_dealloc(v116);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100974C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 624);
  swift_beginAccess(v1 + 232, v0 + 200, 0, 0);
  v3 = *(_QWORD *)(v1 + 232);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  swift_bridgeObjectRetain(v3);
  *(_BYTE *)(v0 + 822) = sub_1007EF65C((uint64_t (*)(char *))sub_100426430, v4, v3);
  *(_QWORD *)(v0 + 680) = 0;
  swift_bridgeObjectRelease();
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100974CE0, 0, 0);
}

uint64_t sub_100974CE0()
{
  _QWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(_QWORD, _QWORD);
  uint64_t v165;
  _QWORD *v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  __int128 v178;
  uint64_t v179;

  v1 = v0 + 89;
  if (*((_BYTE *)v0 + 822) == 1)
  {
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v2 = v0[78];
    v3 = v0[77];
    v4 = v0[76];
    v5 = v0[72];
    v6 = v0[71];
    v7 = v0[35];
    v8 = type metadata accessor for Logger(0);
    v0[86] = sub_10001A9E8(v8, (uint64_t)qword_1011B79B8);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v0[87] = v9;
    v9(v3, v2, v6);
    v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v4, v7, v6);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = v0[77];
    v15 = v0[76];
    v16 = v0[72];
    v17 = v0[71];
    if (v13)
    {
      v148 = v0[76];
      v18 = swift_slowAlloc(42, -1);
      v155 = (_QWORD *)swift_slowAlloc(64, -1);
      v166 = v155;
      *(_DWORD *)v18 = 141558787;
      v0[30] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v18 + 4, v18 + 12);
      *(_WORD *)(v18 + 12) = 2081;
      v19 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v17, v19);
      v0[31] = sub_100016940(v20, v21, (uint64_t *)&v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v22(v14, v17);
      *(_WORD *)(v18 + 22) = 2160;
      v0[32] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v18 + 24, v18 + 32);
      *(_WORD *)(v18 + 32) = 2081;
      v23 = v19;
      v1 = v0 + 89;
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v17, v23);
      v0[33] = sub_100016940(v24, v25, (uint64_t *)&v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 33, v0 + 34, v18 + 34, v18 + 42);
      swift_bridgeObjectRelease();
      v22(v148, v17);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "handleCircleTrust received for newly declined share with %{private,mask.hash}s. Declining it.\nDeclined share identifier %{private,mask.hash}s.", (uint8_t *)v18, 0x2Au);
      swift_arrayDestroy(v155, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v155, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {
      v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v22(v0[77], v0[71]);
      v22(v15, v17);

    }
    v0[88] = v22;
    v57 = v0[85];
    v58 = v0[66];
    v9(v58, v0[35], v0[71]);
    sub_10038A8B0(4, 1, v58, (uint64_t)&v166);
    if (v57)
    {
      v59 = v0[78];
      v60 = v0[71];
      swift_release();
      swift_release();
      swift_errorRelease(v57);
      v22(v59, v60);
      v61 = v0[77];
      v62 = v0[76];
      v63 = v0[75];
      v64 = v0[74];
      v65 = v0[73];
      v66 = v0[70];
      v67 = v0[69];
      v68 = v0[68];
      v69 = v0[67];
      v144 = v0[66];
      v146 = v0[65];
      v150 = v0[64];
      v154 = v0[62];
      v159 = v0[61];
      v162 = v0[59];
      v165 = v0[56];
      swift_task_dealloc(v0[78]);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v144);
      swift_task_dealloc(v146);
      swift_task_dealloc(v150);
      swift_task_dealloc(v154);
      swift_task_dealloc(v159);
      swift_task_dealloc(v162);
      swift_task_dealloc(v165);
      return ((uint64_t (*)(void))v0[1])();
    }
    else
    {
      v110 = v0[36];
      v111 = v0[37];
      v112 = *((unsigned __int8 *)v0 + 821);
      *((_BYTE *)v0 + 823) = (_BYTE)v166;
      *v1 = v167;
      v0[91] = v168;
      v113 = sub_10001A9A8(&qword_1010EE2B0);
      v114 = swift_allocObject(v113, 56, 7);
      v0[92] = v114;
      *(_OWORD *)(v114 + 16) = xmmword_100E22B00;
      *(_BYTE *)(v114 + 32) = v112;
      *(_QWORD *)(v114 + 40) = v110;
      *(_QWORD *)(v114 + 48) = v111;
      v115 = v0[82];
      swift_bridgeObjectRetain(v111);
      return swift_task_switch(sub_100975814, v115, 0);
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[72] + 8))(v0[78], v0[71]);
    v26 = v0[65];
    v27 = (int *)v0[63];
    v28 = v0[38];
    v156 = v0[39];
    v160 = v0[40];
    v30 = v0[36];
    v29 = v0[37];
    v31 = *((_BYTE *)v0 + 821);
    v32 = *((_BYTE *)v0 + 820);
    v33 = v27[12];
    v34 = v26 + v27[16];
    v132 = v27;
    v35 = (_QWORD *)(v26 + v27[20]);
    v164 = *(void (**)(_QWORD, _QWORD))(v0[72] + 16);
    ((void (*)(uint64_t, _QWORD, _QWORD))v164)(v26, v0[35], v0[71]);
    *(_BYTE *)(v26 + v33) = v32;
    *(_BYTE *)v34 = v31;
    *(_QWORD *)(v34 + 8) = v30;
    *(_QWORD *)(v34 + 16) = v29;
    *v35 = v28;
    v35[1] = v156;
    v36 = *(_QWORD *)(v160 + 16);
    if (v36)
    {
      v157 = v0[57];
      v161 = v0[58];
      v37 = v0[55];
      v149 = v0[54];
      v38 = v0[39];
      v39 = v0[40];
      v40 = v0[37];
      v166 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v38);
      sub_10009B578(0, v36, 0);
      v41 = v39 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
      v152 = *(_QWORD *)(v37 + 72);
      v42 = _swiftEmptyArrayStorage;
      do
      {
        v43 = v0[71];
        v44 = v0[59];
        v45 = v0;
        v46 = v0[56];
        sub_10005972C(v41, v46, type metadata accessor for PeerTrustEnvelopeV1);
        v47 = (_QWORD *)(v44 + *(int *)(v157 + 48));
        v48 = (uint64_t *)(v44 + *(int *)(v157 + 64));
        ((void (*)(uint64_t, uint64_t, uint64_t))v164)(v44, v46, v43);
        v49 = (_QWORD *)(v46 + *(int *)(v149 + 20));
        v50 = v49[1];
        *v47 = *v49;
        v47[1] = v50;
        v51 = (uint64_t *)(v46 + *(int *)(v149 + 24));
        v52 = *v51;
        v53 = v51[1];
        *v48 = *v51;
        v48[1] = v53;
        swift_bridgeObjectRetain(v50);
        sub_10001BBBC(v52, v53);
        sub_1000126B0(v46, type metadata accessor for PeerTrustEnvelopeV1);
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_10009B578(0, v42[2] + 1, 1);
          v42 = v166;
        }
        v55 = v42[2];
        v54 = v42[3];
        v0 = v45;
        if (v55 >= v54 >> 1)
        {
          sub_10009B578(v54 > 1, v55 + 1, 1);
          v42 = v166;
        }
        v56 = v45[59];
        v42[2] = v55 + 1;
        sub_100005CF0(v56, (uint64_t)v42+ ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80))+ *(_QWORD *)(v161 + 72) * v55, &qword_1010ED300);
        v41 += v152;
        --v36;
      }
      while (v36);
      v153 = v45[37];
      v158 = v45[39];
    }
    else
    {
      v71 = v0[39];
      v153 = v0[37];
      swift_bridgeObjectRetain(v153);
      v158 = v71;
      swift_bridgeObjectRetain(v71);
      v42 = _swiftEmptyArrayStorage;
    }
    v0[99] = v42;
    v134 = v0[71];
    v130 = v0[64];
    v73 = v0[61];
    v72 = v0[62];
    v74 = (int *)v0[60];
    v163 = v0[53];
    v147 = v0[51];
    v151 = v0[52];
    v143 = *((_DWORD *)v0 + 202);
    v145 = *((_DWORD *)v0 + 203);
    v142 = v0[50];
    v140 = v0[48];
    v141 = v0[49];
    v138 = v0[46];
    v139 = v0[47];
    v75 = v0[43];
    v119 = v0[63];
    v120 = v0[44];
    v136 = v0[42];
    v137 = v0[45];
    v135 = v0[41];
    v126 = v0[36];
    v128 = v0[38];
    v125 = *((_BYTE *)v0 + 821);
    v123 = *((_BYTE *)v0 + 820);
    v122 = v0[65];
    v76 = (uint64_t *)(v122 + *(int *)(v119 + 112));
    *(_QWORD *)(v122 + *(int *)(v119 + 96)) = v42;
    *v76 = v135;
    v76[1] = v136;
    v77 = v72 + v74[12];
    v124 = v77;
    v78 = (_QWORD *)(v72 + v74[16]);
    v79 = (_QWORD *)(v72 + v74[20]);
    v80 = (_QWORD *)(v72 + v74[24]);
    v81 = (_QWORD *)(v72 + v74[40]);
    v116 = v74[28];
    v117 = v74[32];
    v118 = v74[36];
    v164(v72, v75);
    sub_10000F9B8(v120, v77, &qword_1010ED860);
    *v78 = v137;
    v78[1] = v138;
    *v79 = v139;
    v79[1] = v140;
    *v80 = v141;
    v80[1] = v142;
    *(_DWORD *)(v72 + v116) = v143;
    *(_DWORD *)(v72 + v117) = v145;
    *(_QWORD *)(v72 + v118) = v147;
    *v81 = v151;
    v81[1] = v163;
    v121 = v132[12];
    v82 = v130 + v132[16];
    v83 = (_QWORD *)(v130 + v132[20]);
    v84 = (uint64_t *)(v130 + *(int *)(v119 + 112));
    v85 = *(int *)(v119 + 96);
    ((void (*)(void))v164)();
    *(_BYTE *)(v130 + v121) = v123;
    *(_BYTE *)v82 = v125;
    *(_QWORD *)(v82 + 8) = v126;
    *(_QWORD *)(v82 + 16) = v153;
    *v83 = v128;
    v83[1] = v158;
    *(_QWORD *)(v130 + v85) = v42;
    *v84 = v135;
    v84[1] = v136;
    v86 = v74[12];
    *((_DWORD *)v0 + 204) = v86;
    v87 = v73 + v86;
    v133 = v73 + v86;
    v88 = (_QWORD *)(v73 + v74[16]);
    v89 = (_QWORD *)(v73 + v74[20]);
    v90 = (_QWORD *)(v73 + v74[24]);
    v129 = v74[32];
    v131 = v74[28];
    v127 = v74[36];
    v91 = (_QWORD *)(v73 + v74[40]);
    ((void (*)(uint64_t, uint64_t, uint64_t))v164)(v73, v72, v134);
    sub_10000F9B8(v124, v87, &qword_1010ED860);
    *v88 = v137;
    v88[1] = v138;
    *v89 = v139;
    v89[1] = v140;
    *v90 = v141;
    v90[1] = v142;
    *(_DWORD *)(v73 + v131) = v143;
    *(_DWORD *)(v73 + v129) = v145;
    *(_QWORD *)(v73 + v127) = v147;
    *v91 = v151;
    v91[1] = v163;
    sub_10001BBBC(v135, v136);
    swift_bridgeObjectRetain(v163);
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v158);
    swift_bridgeObjectRetain(v138);
    swift_bridgeObjectRetain(v140);
    swift_bridgeObjectRetain(v142);
    sub_10001BBBC(v135, v136);
    v92 = dword_1010EE1DC;
    swift_bridgeObjectRetain(v138);
    swift_bridgeObjectRetain(v140);
    swift_bridgeObjectRetain(v142);
    swift_bridgeObjectRetain(v163);
    swift_bridgeObjectRetain(v42);
    v93 = (_QWORD *)swift_task_alloc(v92);
    v0[100] = v93;
    *v93 = v0;
    v93[1] = sub_10097635C;
    v94 = v0[64];
    v95 = v0[61];
    v96 = *(_OWORD *)(v0 + 51);
    v97 = *((_DWORD *)v0 + 203);
    v98 = *((_DWORD *)v0 + 202);
    v100 = v0[49];
    v99 = v0[50];
    v101 = *(_OWORD *)(v0 + 47);
    v102 = *(_OWORD *)(v0 + 45);
    v103 = *(_OWORD *)(v0 + 41);
    v104 = v0[38];
    v105 = v0[39];
    v106 = v0[36];
    v107 = v0[37];
    v108 = *((_BYTE *)v0 + 821);
    v109 = *((_BYTE *)v0 + 820);
    v179 = v0[53];
    v178 = v96;
    v176 = v98;
    v177 = v97;
    v174 = v100;
    v175 = v99;
    v172 = v102;
    v173 = v101;
    v170 = v95;
    v171 = v133;
    v169 = v103;
    return sub_1000C1A38(v94, v109, v108, v106, v107, v104, v105, (uint64_t)v42);
  }
}

uint64_t sub_100975814()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;

  v15 = *(_QWORD *)(v0 + 736);
  v1 = *(_QWORD *)(v0 + 728);
  v14 = *(_OWORD *)(v0 + 712);
  v2 = *(_BYTE *)(v0 + 823);
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 544);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 576) + 56);
  *(_QWORD *)(v0 + 744) = v7;
  v7(v6, 1, 1, v5);
  v8 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 752) = v8;
  v9 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 760) = v9;
  UUID.init()(v9);
  v10 = sub_100006C64(&qword_10110DB40, 255, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount, (uint64_t)&unk_100E561AC);
  v11 = swift_task_alloc(128);
  *(_QWORD *)(v0 + 768) = v11;
  *(_QWORD *)(v11 + 16) = v3;
  *(_QWORD *)(v11 + 24) = v4;
  *(_BYTE *)(v11 + 32) = v2;
  *(_OWORD *)(v11 + 40) = v14;
  *(_QWORD *)(v11 + 56) = v1;
  *(_QWORD *)(v11 + 64) = v15;
  *(_QWORD *)(v11 + 72) = v6;
  *(_QWORD *)(v11 + 80) = 0;
  *(_WORD *)(v11 + 88) = 1;
  *(_QWORD *)(v11 + 96) = v8;
  *(_QWORD *)(v11 + 104) = v9;
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  v12 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 776) = v12;
  *v12 = v0;
  v12[1] = sub_10097598C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 656), v10, 0xD000000000000083, 0x8000000100EEB060, sub_100985FB0, v11, *(_QWORD *)(v0 + 568));
}

uint64_t sub_10097598C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 776);
  *(_QWORD *)(*v1 + 784) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(*(_QWORD *)(v2 + 768));
  if (v0)
    v4 = sub_100975EA0;
  else
    v4 = sub_1009759F8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 656), 0);
}

uint64_t sub_1009759F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 544);
  (*(void (**)(_QWORD, _QWORD))(v0 + 704))(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 568));
  sub_100004048(v1, &qword_1010ED860);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100975A7C, 0, 0);
}

uint64_t sub_100975A7C()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 664);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 536);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 744))(v3, 0, 1, v2);
  sub_10000F9B8(v3, v4, &qword_1010ED860);
  if (v1(v4, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 728);
    v6 = *(_QWORD *)(v0 + 720);
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 704);
    v8 = *(_QWORD *)(v0 + 624);
    v9 = *(_QWORD *)(v0 + 568);
    v10 = *(_QWORD *)(v0 + 552);
    v11 = *(_QWORD *)(v0 + 536);
    swift_release();
    sub_10001BC14(v6, v5);
    swift_release();
    sub_100004048(v10, &qword_1010ED860);
    v7(v8, v9);
    sub_100004048(v11, &qword_1010ED860);
  }
  else
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
    v13 = *(_QWORD *)(v0 + 592);
    v14 = *(_QWORD *)(v0 + 584);
    v15 = *(_QWORD *)(v0 + 568);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 672))(v13, *(_QWORD *)(v0 + 536), v15);
    v16 = v12(v14, v13, v15);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v49 = *(_QWORD *)(v0 + 720);
    v51 = *(_QWORD *)(v0 + 728);
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 704);
    v47 = *(_QWORD *)(v0 + 624);
    v21 = *(_QWORD *)(v0 + 592);
    v22 = *(_QWORD *)(v0 + 584);
    v23 = *(_QWORD *)(v0 + 568);
    v24 = *(_QWORD *)(v0 + 552);
    if (v19)
    {
      v45 = *(_QWORD *)(v0 + 552);
      v25 = swift_slowAlloc(22, -1);
      v42 = v21;
      v26 = swift_slowAlloc(32, -1);
      v53 = v26;
      *(_DWORD *)v25 = 141558275;
      *(_QWORD *)(v0 + 224) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2081;
      v27 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v23, v27);
      *(_QWORD *)(v0 + 232) = sub_100016940(v28, v29, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v25 + 14, v25 + 22);
      swift_bridgeObjectRelease();
      v20(v22, v23);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Decline message identifier is %{private,mask.hash}s.", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
      swift_release();
      sub_10001BC14(v49, v51);
      swift_release();

      v20(v42, v23);
      v30 = v45;
    }
    else
    {
      swift_release();
      sub_10001BC14(v49, v51);
      swift_release();

      v20(v22, v23);
      v20(v21, v23);
      v30 = v24;
    }
    sub_100004048(v30, &qword_1010ED860);
    v20(v47, v23);
  }
  v31 = *(_QWORD *)(v0 + 616);
  v32 = *(_QWORD *)(v0 + 608);
  v33 = *(_QWORD *)(v0 + 600);
  v34 = *(_QWORD *)(v0 + 592);
  v35 = *(_QWORD *)(v0 + 584);
  v36 = *(_QWORD *)(v0 + 560);
  v37 = *(_QWORD *)(v0 + 552);
  v38 = *(_QWORD *)(v0 + 544);
  v39 = *(_QWORD *)(v0 + 536);
  v41 = *(_QWORD *)(v0 + 528);
  v43 = *(_QWORD *)(v0 + 520);
  v44 = *(_QWORD *)(v0 + 512);
  v46 = *(_QWORD *)(v0 + 496);
  v48 = *(_QWORD *)(v0 + 488);
  v50 = *(_QWORD *)(v0 + 472);
  v52 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 624));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100975EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 784);
  v2 = *(_QWORD *)(v0 + 544);
  (*(void (**)(_QWORD, _QWORD))(v0 + 704))(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 568));
  sub_100004048(v2, &qword_1010ED860);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease(v1);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100975F38, 0, 0);
}

uint64_t sub_100975F38()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 664);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 536);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 744))(v3, 1, 1, v2);
  sub_10000F9B8(v3, v4, &qword_1010ED860);
  if (v1(v4, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 728);
    v6 = *(_QWORD *)(v0 + 720);
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 704);
    v8 = *(_QWORD *)(v0 + 624);
    v9 = *(_QWORD *)(v0 + 568);
    v10 = *(_QWORD *)(v0 + 552);
    v11 = *(_QWORD *)(v0 + 536);
    swift_release();
    sub_10001BC14(v6, v5);
    swift_release();
    sub_100004048(v10, &qword_1010ED860);
    v7(v8, v9);
    sub_100004048(v11, &qword_1010ED860);
  }
  else
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
    v13 = *(_QWORD *)(v0 + 592);
    v14 = *(_QWORD *)(v0 + 584);
    v15 = *(_QWORD *)(v0 + 568);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 672))(v13, *(_QWORD *)(v0 + 536), v15);
    v16 = v12(v14, v13, v15);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v49 = *(_QWORD *)(v0 + 720);
    v51 = *(_QWORD *)(v0 + 728);
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 704);
    v47 = *(_QWORD *)(v0 + 624);
    v21 = *(_QWORD *)(v0 + 592);
    v22 = *(_QWORD *)(v0 + 584);
    v23 = *(_QWORD *)(v0 + 568);
    v24 = *(_QWORD *)(v0 + 552);
    if (v19)
    {
      v45 = *(_QWORD *)(v0 + 552);
      v25 = swift_slowAlloc(22, -1);
      v42 = v21;
      v26 = swift_slowAlloc(32, -1);
      v53 = v26;
      *(_DWORD *)v25 = 141558275;
      *(_QWORD *)(v0 + 224) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2081;
      v27 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v23, v27);
      *(_QWORD *)(v0 + 232) = sub_100016940(v28, v29, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v25 + 14, v25 + 22);
      swift_bridgeObjectRelease();
      v20(v22, v23);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Decline message identifier is %{private,mask.hash}s.", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
      swift_release();
      sub_10001BC14(v49, v51);
      swift_release();

      v20(v42, v23);
      v30 = v45;
    }
    else
    {
      swift_release();
      sub_10001BC14(v49, v51);
      swift_release();

      v20(v22, v23);
      v20(v21, v23);
      v30 = v24;
    }
    sub_100004048(v30, &qword_1010ED860);
    v20(v47, v23);
  }
  v31 = *(_QWORD *)(v0 + 616);
  v32 = *(_QWORD *)(v0 + 608);
  v33 = *(_QWORD *)(v0 + 600);
  v34 = *(_QWORD *)(v0 + 592);
  v35 = *(_QWORD *)(v0 + 584);
  v36 = *(_QWORD *)(v0 + 560);
  v37 = *(_QWORD *)(v0 + 552);
  v38 = *(_QWORD *)(v0 + 544);
  v39 = *(_QWORD *)(v0 + 536);
  v41 = *(_QWORD *)(v0 + 528);
  v43 = *(_QWORD *)(v0 + 520);
  v44 = *(_QWORD *)(v0 + 512);
  v46 = *(_QWORD *)(v0 + 496);
  v48 = *(_QWORD *)(v0 + 488);
  v50 = *(_QWORD *)(v0 + 472);
  v52 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 624));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097635C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 800));
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 328);
    v3 = *(_QWORD *)(v2 + 336);
    swift_errorRelease(v0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v4, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_10097665C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 568);
    v11 = *(_QWORD *)(v2 + 576);
    v12 = *(_QWORD *)(v2 + 512);
    v7 = *(_QWORD *)(v2 + 488);
    v10 = v7 + *(int *)(v2 + 816);
    sub_10001BC14(*(_QWORD *)(v2 + 328), *(_QWORD *)(v2 + 336));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100004048(v10, &qword_1010ED860);
    v8 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v8(v7, v6);
    v8(v12, v6);
    v5 = sub_100976500;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100976500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 496);
  swift_release();
  swift_release();
  sub_100004048(v2, &qword_1010EE1E0);
  sub_100004048(v1, &qword_1010EE1E8);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 600);
  v6 = *(_QWORD *)(v0 + 592);
  v7 = *(_QWORD *)(v0 + 584);
  v8 = *(_QWORD *)(v0 + 560);
  v9 = *(_QWORD *)(v0 + 552);
  v10 = *(_QWORD *)(v0 + 544);
  v11 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 528);
  v14 = *(_QWORD *)(v0 + 520);
  v15 = *(_QWORD *)(v0 + 512);
  v16 = *(_QWORD *)(v0 + 496);
  v17 = *(_QWORD *)(v0 + 488);
  v18 = *(_QWORD *)(v0 + 472);
  v19 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 624));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097665C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 520);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 496);
  v7 = v6 + *(int *)(v0 + 816);
  swift_release();
  swift_release();
  sub_100004048(v5, &qword_1010EE1E0);
  sub_100004048(v3, &qword_1010EE1E8);
  sub_100004048(v7, &qword_1010ED860);
  v8 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v8(v6, v2);
  v8(v4, v2);
  v9 = *(_QWORD *)(v0 + 616);
  v10 = *(_QWORD *)(v0 + 608);
  v11 = *(_QWORD *)(v0 + 600);
  v12 = *(_QWORD *)(v0 + 592);
  v13 = *(_QWORD *)(v0 + 584);
  v14 = *(_QWORD *)(v0 + 560);
  v15 = *(_QWORD *)(v0 + 552);
  v16 = *(_QWORD *)(v0 + 544);
  v17 = *(_QWORD *)(v0 + 536);
  v19 = *(_QWORD *)(v0 + 528);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 512);
  v22 = *(_QWORD *)(v0 + 496);
  v23 = *(_QWORD *)(v0 + 488);
  v24 = *(_QWORD *)(v0 + 472);
  v25 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 624));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009767F8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = *v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Transaction(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = (v13 + 48) & ~v13;
  v15 = (v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_10109EE28, v15 + 8, v13 | 7);
  *(_QWORD *)(v16 + 16) = v4;
  *(_BYTE *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = a3;
  *(_QWORD *)(v16 + 40) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16 + v14, v12, v9);
  *(_QWORD *)(v16 + v15) = v19;
  swift_retain(v4);
  swift_bridgeObjectRetain(a4);
  static Transaction.asyncTask(name:block:)("CircleTrustService.handleCircleTrustAck", 39, 2, &unk_10110DE20, v16);
  return swift_release(v16);
}

uint64_t sub_10097693C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v6 + 304) = a5;
  *(_QWORD *)(v6 + 312) = a6;
  *(_QWORD *)(v6 + 288) = a3;
  *(_QWORD *)(v6 + 296) = a4;
  *(_BYTE *)(v6 + 408) = a2;
  *(_QWORD *)(v6 + 280) = a1;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 320) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 328) = v8;
  v9 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v6 + 336) = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 344) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 352) = swift_task_alloc(v10);
  return swift_task_switch(sub_1009769BC, 0, 0);
}

uint64_t sub_1009769BC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 256, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 360) = v2;
    *v2 = v0;
    v2[1] = sub_100976AA8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100976AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100976B04, 0, 0);
}

uint64_t sub_100976B04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (__cdecl *v10)();

  v1 = *(_QWORD *)(v0 + 368);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 176, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 200))
    {
      sub_10000F9FC((__int128 *)(v0 + 176), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v10 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB58 + dword_1010EBB58);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB5C);
      *(_QWORD *)(v0 + 376) = v3;
      *v3 = v0;
      v3[1] = sub_100976C90;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B79B8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No BeaconStoreActor available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 344);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100976C90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100976CEC, 0, 0);
}

uint64_t sub_100976CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  v1 = *(_QWORD *)(v0 + 384);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 216);
      sub_10001AA44((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
      v10 = (uint64_t (*)(void))((char *)&dword_1010EBB10 + dword_1010EBB10);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB14);
      *(_QWORD *)(v0 + 392) = v3;
      *v3 = v0;
      v3[1] = sub_100976E8C;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B79B8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No PeerTrustService available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    swift_release();
    v9 = *(_QWORD *)(v0 + 344);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100976E8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100976EE8, 0, 0);
}

uint64_t sub_100976EE8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = (_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 400);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 368);
    v4 = *(_QWORD *)(v0 + 352);
    v23 = v4;
    v28 = *(_QWORD *)(v0 + 344);
    v5 = *(_QWORD *)(v0 + 328);
    v6 = *(_QWORD *)(v0 + 336);
    v7 = *(_QWORD *)(v0 + 320);
    v26 = *(_QWORD *)(v0 + 384);
    v27 = *(_QWORD *)(v0 + 312);
    v9 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 304);
    v24 = *(_BYTE *)(v0 + 408);
    v25 = *(_QWORD *)(v0 + 288);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for WorkItemQueue.WorkItem(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v7);
    v10 = *(unsigned __int8 *)(v5 + 80);
    v11 = (v10 + 64) & ~v10;
    v12 = (v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = swift_allocObject(&unk_10109EE50, v12 + 8, v10 | 7);
    *(_QWORD *)(v13 + 16) = v2;
    *(_BYTE *)(v13 + 24) = v24;
    *(_QWORD *)(v13 + 32) = v25;
    *(_QWORD *)(v13 + 40) = v9;
    *(_QWORD *)(v13 + 48) = v26;
    *(_QWORD *)(v13 + 56) = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v13 + v11, v23, v7);
    *(_QWORD *)(v13 + v12) = v27;
    swift_retain();
    swift_bridgeObjectRetain(v9);
    swift_retain();
    v14 = swift_retain();
    UUID.init()(v14);
    v15 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v28, &unk_10110DE30, v13, &unk_10110DE38, 0);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v15);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B79B8);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No FamilyCircleService available!", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    swift_release();
  }
  swift_release();
  v21 = *(_QWORD *)(v0 + 344);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100977168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v7 + 168) = a6;
  *(_QWORD *)(v7 + 176) = a7;
  *(_QWORD *)(v7 + 152) = a4;
  *(_QWORD *)(v7 + 160) = a5;
  *(_BYTE *)(v7 + 440) = a2;
  *(_QWORD *)(v7 + 136) = a1;
  *(_QWORD *)(v7 + 144) = a3;
  v11 = sub_10001A9A8(&qword_1010EC870);
  *(_QWORD *)(v7 + 184) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EE0E0);
  *(_QWORD *)(v7 + 192) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v7 + 200) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v7 + 208) = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 216) = swift_task_alloc(v15);
  *(_QWORD *)(v7 + 224) = swift_task_alloc(v15);
  *(_QWORD *)(v7 + 232) = swift_task_alloc(v15);
  *(_QWORD *)(v7 + 240) = swift_task_alloc(v15);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *(_QWORD *)(v7 + 248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v7 + 256) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  *(_QWORD *)(v7 + 264) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v7 + 272) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 280) = swift_task_alloc(v20);
  *(_QWORD *)(v7 + 288) = swift_task_alloc(v20);
  *(_QWORD *)(v7 + 296) = swift_task_alloc(v20);
  *(_QWORD *)(v7 + 304) = swift_task_alloc(v20);
  *(_QWORD *)(v7 + 312) = swift_task_alloc(v20);
  v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
  v21 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
  *(_QWORD *)(v7 + 320) = v21;
  *v21 = v7;
  v21[1] = sub_100977330;
  return v23(a2, a3, a4);
}

uint64_t sub_100977330(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 320);
  v4[41] = a2;
  v4[42] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_1009773F8;
    v7 = 0;
  }
  else
  {
    v7 = v4[17];
    v6 = sub_100977398;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100977398()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 328))
    swift_bridgeObjectRelease();
  v1 = (_QWORD *)swift_task_alloc(dword_101112094);
  *(_QWORD *)(v0 + 344) = v1;
  *v1 = v0;
  v1[1] = sub_100977750;
  return sub_100AAF5B4(*(_BYTE *)(v0 + 440), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1009773F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t type[8];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 336);
  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B79B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 264);
  if (v10)
  {
    v14 = swift_slowAlloc(32, -1);
    v32 = swift_slowAlloc(64, -1);
    v34 = v32;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 40) = sub_100016940(v16, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(_WORD *)(v14 + 22) = 2082;
    swift_getErrorValue(v1, v0 + 48, v0 + 16);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 64) = sub_100016940(v18, v19, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failure on handleCircleTrustAck: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v20 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 288);
  v21 = *(_QWORD *)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 248);
  v24 = *(_QWORD *)(v0 + 256);
  v27 = *(_QWORD *)(v0 + 232);
  v26 = *(_QWORD *)(v0 + 240);
  v28 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)type = *(_QWORD *)(v0 + 216);
  v31 = *(_QWORD *)(v0 + 192);
  v33 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(*(_QWORD *)type);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100977750(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 344);
  *(_QWORD *)(v3 + 352) = a1;
  *(_QWORD *)(v3 + 360) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100978E00;
  else
    v5 = sub_1009777BC;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1009777BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for OwnerPeerTrust(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    sub_10005972C(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 248), type metadata accessor for OwnerPeerTrust);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3);
  v8 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 256);
  if (v7 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 248), (uint64_t *)&unk_1010EE160);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
LABEL_7:
    sub_100004048(*(_QWORD *)(v0 + 256), &qword_1010ED860);
    v14 = *(_QWORD *)(v0 + 304);
    v16 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 296);
    v17 = *(_QWORD *)(v0 + 280);
    v19 = *(_QWORD *)(v0 + 248);
    v18 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 240);
    v22 = *(_QWORD *)(v0 + 224);
    v25 = *(_QWORD *)(v0 + 216);
    v26 = *(_QWORD *)(v0 + 192);
    v27 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = v11 + *(int *)(v3 + 20);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  *(_QWORD *)(v0 + 368) = v13;
  v13(v10, v12, v8);
  sub_1000126B0(v11, type metadata accessor for OwnerPeerTrust);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v10, 0, 1, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
    goto LABEL_7;
  v24 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 32))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  return swift_task_switch(sub_100977A08, v24, 0);
}

uint64_t sub_100977A08()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 376) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_100977A84;
  return unsafeBlocking<A>(_:)(v0 + 72, sub_100068004, *(_QWORD *)(v0 + 168), v3);
}

uint64_t sub_100977A84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 376));
  swift_release();
  return swift_task_switch(sub_100977AE4, v1, 0);
}

uint64_t sub_100977AE4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 384) = *(_QWORD *)(v0 + 72);
  return swift_task_switch(sub_100977B00, 0, 0);
}

uint64_t sub_100977B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  void (*v42)(uint64_t, uint64_t);
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_log_type_t type[8];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120[2];

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 200);
    v3 = *(_QWORD *)(v0 + 208);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v7 = *(_QWORD *)(v0 + 232);
      v8 = *(_QWORD *)(v0 + 176);
      sub_10005972C(v5, v7, type metadata accessor for OwnerSharingCircle);
      if ((static UUID.== infix(_:_:)(v7 + *(int *)(v4 + 20), v8) & 1) != 0)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 232), type metadata accessor for OwnerSharingCircle);
      v5 += v6;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    v10 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRelease();
    sub_1000126EC(v10, v11, type metadata accessor for OwnerSharingCircle);
    v9 = 0;
  }
  else
  {
LABEL_6:
    v9 = 1;
  }
  v12 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v14, v9, 1, v12);
  swift_bridgeObjectRelease();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12);
  v16 = *(_QWORD *)(v0 + 192);
  if (v15 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 264));
    sub_100004048(v16, &qword_1010EE0E0);
LABEL_31:
    v79 = *(_QWORD *)(v0 + 304);
    v81 = *(_QWORD *)(v0 + 288);
    v80 = *(_QWORD *)(v0 + 296);
    v82 = *(_QWORD *)(v0 + 280);
    v84 = *(_QWORD *)(v0 + 248);
    v83 = *(_QWORD *)(v0 + 256);
    v86 = *(_QWORD *)(v0 + 232);
    v85 = *(_QWORD *)(v0 + 240);
    v87 = *(_QWORD *)(v0 + 224);
    *(_QWORD *)type = *(_QWORD *)(v0 + 216);
    v116 = *(_QWORD *)(v0 + 192);
    v118 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 312));
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(*(_QWORD *)type);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v17 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 224);
  sub_1000126EC(*(_QWORD *)(v0 + 192), v18, type metadata accessor for OwnerSharingCircle);
  sub_10005972C(v18, v19, type metadata accessor for OwnerSharingCircle);
  v20 = *(_QWORD *)(v0 + 224);
  if (v17)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 224), type metadata accessor for OwnerSharingCircle);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 200);
    v22 = sub_100CA8018((uint64_t)&off_10104DDB8);
    LOBYTE(v21) = sub_100A0658C(*(unsigned __int8 *)(v20 + *(int *)(v21 + 28)), v22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v20, type metadata accessor for OwnerSharingCircle);
    if ((v21 & 1) != 0)
    {
      if (qword_1010EA078 != -1)
        swift_once(&qword_1010EA078, sub_10096F978);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B79B8);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Ignoring incoming UTFS message from non-family member", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }
      v28 = *(_QWORD *)(v0 + 312);
      v29 = *(_QWORD *)(v0 + 264);
      v30 = *(_QWORD *)(v0 + 272);
      v31 = *(_QWORD *)(v0 + 240);

      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
      sub_1000126B0(v31, type metadata accessor for OwnerSharingCircle);
      goto LABEL_31;
    }
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v0 + 240) + *(int *)(*(_QWORD *)(v0 + 200) + 32));
  *(_QWORD *)(v0 + 80) = v32;
  v33 = *(_QWORD *)(v32 + 16);
  swift_bridgeObjectRetain(v32);
  if (!v33
    || (v34 = sub_100003FB0(*(_QWORD *)(v0 + 312)), (v35 & 1) == 0)
    || *(_BYTE *)(*(_QWORD *)(v32 + 56) + v34) != 3)
  {
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
    v60 = *(_QWORD *)(v0 + 312);
    v61 = *(_QWORD *)(v0 + 288);
    v62 = *(_QWORD *)(v0 + 264);
    v63 = type metadata accessor for Logger(0);
    sub_10001A9E8(v63, (uint64_t)qword_1011B79B8);
    v64 = v59(v61, v60, v62);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter(v65);
    v67 = os_log_type_enabled(v65, v66);
    v68 = *(_QWORD *)(v0 + 312);
    v69 = *(_QWORD *)(v0 + 288);
    v70 = *(_QWORD *)(v0 + 264);
    v71 = *(_QWORD *)(v0 + 272);
    if (v67)
    {
      v117 = *(_QWORD *)(v0 + 272);
      v72 = swift_slowAlloc(22, -1);
      v73 = swift_slowAlloc(32, -1);
      v120[0] = v73;
      *(_DWORD *)v72 = 141558275;
      *(_QWORD *)(v0 + 88) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v72 + 4, v72 + 12);
      *(_WORD *)(v72 + 12) = 2081;
      v74 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v70, v74);
      v115 = v68;
      *(_QWORD *)(v0 + 96) = sub_100016940(v75, v76, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v72 + 14, v72 + 22);
      swift_bridgeObjectRelease();
      v77 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
      v77(v69, v70);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Member already acked: %{private,mask.hash}s!", (uint8_t *)v72, 0x16u);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);

      v77(v115, v70);
    }
    else
    {

      v78 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
      v78(v69, v70);
      v78(v68, v70);
    }
    sub_1000126B0(*(_QWORD *)(v0 + 240), type metadata accessor for OwnerSharingCircle);
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  v36 = v0 + 80;
  v37 = *(_QWORD *)(v0 + 304);
  v38 = *(_QWORD *)(v0 + 264);
  v39 = *(_QWORD *)(v0 + 272);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 368))(v37, *(_QWORD *)(v0 + 312), v38);
  v40 = *(_QWORD *)(v0 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
  v120[0] = v40;
  sub_10010A278(0, v37, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v0 + 80) = v40;
  swift_bridgeObjectRelease();
  v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  *(_QWORD *)(v0 + 392) = v42;
  v42(v37, v38);
  v43 = &qword_1010EA000;
  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v44 = *(_QWORD *)(v0 + 240);
  v45 = *(_QWORD *)(v0 + 216);
  v46 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 400) = sub_10001A9E8(v46, (uint64_t)qword_1011B79B8);
  v47 = sub_10005972C(v44, v45, type metadata accessor for OwnerSharingCircle);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter(v48);
  if (os_log_type_enabled(v48, v49))
  {
    v114 = v46;
    v112 = *(_QWORD *)(v0 + 264);
    v50 = *(_QWORD *)(v0 + 216);
    v51 = swift_slowAlloc(22, -1);
    v52 = swift_slowAlloc(32, -1);
    v120[0] = v52;
    *(_DWORD *)v51 = 141558275;
    *(_QWORD *)(v0 + 120) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v51 + 4, v51 + 12);
    *(_WORD *)(v51 + 12) = 2081;
    v53 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v54 = dispatch thunk of CustomStringConvertible.description.getter(v112, v53);
    *(_QWORD *)(v0 + 128) = sub_100016940(v54, v55, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v51 + 14, v51 + 22);
    swift_bridgeObjectRelease();
    v56 = v50;
    v46 = v114;
    sub_1000126B0(v56, type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Data update on handle circle trust ack. Update %{private,mask.hash}s", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    v57 = v52;
    v43 = &qword_1010EA000;
    swift_slowDealloc(v57, -1, -1);
    v58 = v51;
    v36 = v0 + 80;
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 216), type metadata accessor for OwnerSharingCircle);
  }

  v89 = *(_QWORD *)(v0 + 360);
  v90 = *(_QWORD *)(v0 + 240);
  v91 = *(_QWORD *)(v0 + 184);
  v92 = swift_task_alloc(32);
  *(_QWORD *)(v92 + 16) = v90;
  *(_QWORD *)(v92 + 24) = v36;
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_100986238, v91);
  if (v89)
  {
    v93 = *(_QWORD *)(v0 + 240);
    v42(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 264));
    swift_task_dealloc(v92);
    sub_1000126B0(v93, type metadata accessor for OwnerSharingCircle);
    swift_bridgeObjectRelease();
    if (v43[15] != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v95 = *(_QWORD *)(v0 + 272);
    v94 = *(_QWORD *)(v0 + 280);
    v96 = *(_QWORD *)(v0 + 264);
    v97 = *(_QWORD *)(v0 + 176);
    sub_10001A9E8(v46, (uint64_t)qword_1011B79B8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v94, v97, v96);
    swift_errorRetain(v89);
    v98 = swift_errorRetain(v89);
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.error.getter(v99);
    v101 = os_log_type_enabled(v99, v100);
    v103 = *(_QWORD *)(v0 + 272);
    v102 = *(_QWORD *)(v0 + 280);
    v104 = *(_QWORD *)(v0 + 264);
    if (v101)
    {
      v105 = swift_slowAlloc(32, -1);
      v119 = swift_slowAlloc(64, -1);
      v120[0] = v119;
      *(_DWORD *)v105 = 141558531;
      *(_QWORD *)(v0 + 56) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v105 + 4, v105 + 12);
      *(_WORD *)(v105 + 12) = 2081;
      v106 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v107 = dispatch thunk of CustomStringConvertible.description.getter(v104, v106);
      *(_QWORD *)(v0 + 40) = sub_100016940(v107, v108, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v105 + 14, v105 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v104);
      *(_WORD *)(v105 + 22) = 2082;
      swift_getErrorValue(v89, v0 + 48, v0 + 16);
      v109 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
      *(_QWORD *)(v0 + 64) = sub_100016940(v109, v110, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v105 + 24, v105 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v89);
      swift_errorRelease(v89);
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "Failure on handleCircleTrustAck: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v105, 0x20u);
      swift_arrayDestroy(v119, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1, -1);
      swift_slowDealloc(v105, -1, -1);

      swift_errorRelease(v89);
    }
    else
    {
      swift_errorRelease(v89);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v104);
      swift_errorRelease(v89);
      swift_errorRelease(v89);

    }
    goto LABEL_31;
  }
  v111 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(v92);
  return swift_task_switch(sub_100978624, v111, 0);
}

uint64_t sub_100978624()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 408) = *(_QWORD *)(*(_QWORD *)(v0 + 168) + 128);
  return swift_task_switch(sub_100978644, 0, 0);
}

uint64_t sub_100978644()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[51];
  v2 = v0[23];
  v3 = swift_task_alloc(32);
  v0[52] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[53] = v4;
  *v4 = v0;
  v4[1] = sub_1009786E8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, &type metadata for () + 1);
}

uint64_t sub_1009786E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 424);
  *(_QWORD *)(*v1 + 432) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100978A28;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 416));
    v4 = sub_100978754;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100978754()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 368))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 264));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v30 = *(_QWORD *)(v0 + 312);
    v4 = *(_QWORD *)(v0 + 296);
    v5 = *(_QWORD *)(v0 + 264);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    v28 = *(_QWORD *)(v0 + 184);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 104) = 1752392040;
    v32 = v7;
    *(_DWORD *)v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    v8 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 112) = sub_100016940(v9, v10, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    v26(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Updated circle member %{private,mask.hash}s to unaccepted.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    sub_100004048(v28, &qword_1010EC870);
    v26(v30, v5);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
    v12 = *(_QWORD *)(v0 + 312);
    v13 = *(_QWORD *)(v0 + 296);
    v14 = *(_QWORD *)(v0 + 264);
    v15 = *(_QWORD *)(v0 + 184);

    v11(v13, v14);
    sub_100004048(v15, &qword_1010EC870);
    v11(v12, v14);
  }
  sub_1000126B0(*(_QWORD *)(v0 + 240), type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v0 + 304);
  v18 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 296);
  v19 = *(_QWORD *)(v0 + 280);
  v21 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 224);
  v27 = *(_QWORD *)(v0 + 216);
  v29 = *(_QWORD *)(v0 + 192);
  v31 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100978A28()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  return swift_task_switch(sub_100978A64, 0, 0);
}

uint64_t sub_100978A64()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t type[8];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 240);
  sub_100004048(*(_QWORD *)(v0 + 184), &qword_1010EC870);
  v1(v2, v3);
  sub_1000126B0(v4, type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v0 + 432);
  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v7 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 176);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B79B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  swift_errorRetain(v5);
  v11 = swift_errorRetain(v5);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v16 = *(_QWORD *)(v0 + 272);
  v15 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 264);
  if (v14)
  {
    v18 = swift_slowAlloc(32, -1);
    v36 = swift_slowAlloc(64, -1);
    v38 = v36;
    *(_DWORD *)v18 = 141558531;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2081;
    v19 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v17, v19);
    *(_QWORD *)(v0 + 40) = sub_100016940(v20, v21, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    *(_WORD *)(v18 + 22) = 2082;
    swift_getErrorValue(v5, v0 + 48, v0 + 16);
    v22 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 64) = sub_100016940(v22, v23, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failure on handleCircleTrustAck: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  v24 = *(_QWORD *)(v0 + 304);
  v26 = *(_QWORD *)(v0 + 288);
  v25 = *(_QWORD *)(v0 + 296);
  v27 = *(_QWORD *)(v0 + 280);
  v29 = *(_QWORD *)(v0 + 248);
  v28 = *(_QWORD *)(v0 + 256);
  v31 = *(_QWORD *)(v0 + 232);
  v30 = *(_QWORD *)(v0 + 240);
  v32 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)type = *(_QWORD *)(v0 + 216);
  v35 = *(_QWORD *)(v0 + 192);
  v37 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(*(_QWORD *)type);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100978E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t type[8];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 360);
  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B79B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 264);
  if (v10)
  {
    v14 = swift_slowAlloc(32, -1);
    v32 = swift_slowAlloc(64, -1);
    v34 = v32;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 40) = sub_100016940(v16, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(_WORD *)(v14 + 22) = 2082;
    swift_getErrorValue(v1, v0 + 48, v0 + 16);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 64) = sub_100016940(v18, v19, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failure on handleCircleTrustAck: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v20 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 288);
  v21 = *(_QWORD *)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 248);
  v24 = *(_QWORD *)(v0 + 256);
  v27 = *(_QWORD *)(v0 + 232);
  v26 = *(_QWORD *)(v0 + 240);
  v28 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)type = *(_QWORD *)(v0 + 216);
  v31 = *(_QWORD *)(v0 + 192);
  v33 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 312));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(*(_QWORD *)type);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100979158(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_10097BDC4(a1, a2, a3, a4, (uint64_t)&unk_10109EE78, (uint64_t)"CircleTrustService.handleCircleTrustAccept", 42, (uint64_t)&unk_10110DE48);
}

uint64_t sub_100979178(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a4;
  *(_BYTE *)(v6 + 96) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 64) = v8;
  v9 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v6 + 72) = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v10);
  return swift_task_switch(sub_1009791F8, 0, 0);
}

uint64_t sub_1009791F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 88);
  v18 = v1;
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  v20 = *(_QWORD *)(v0 + 32);
  v21 = *(_QWORD *)(v0 + 48);
  v19 = *(_BYTE *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v22 = *(_QWORD *)(v0 + 80);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v4);
  v8 = *(unsigned __int8 *)(v2 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_10109EEA0, v12 + 8, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v13 + v9, v18, v4);
  v14 = v13 + v10;
  *(_BYTE *)v14 = v19;
  *(_QWORD *)(v14 + 8) = v20;
  *(_QWORD *)(v14 + 16) = v5;
  *(_QWORD *)(v13 + v11) = v7;
  *(_QWORD *)(v13 + v12) = v21;
  swift_bridgeObjectRetain(v5);
  v15 = swift_retain(v7);
  UUID.init()(v15);
  v16 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v22, &unk_10110DE58, v13, &unk_10110DE60, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v16);
  swift_release(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100979368(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *(_QWORD *)(v5 + 408) = a4;
  *(_QWORD *)(v5 + 416) = a5;
  *(_BYTE *)(v5 + 740) = a2;
  *(_QWORD *)(v5 + 392) = a1;
  *(_QWORD *)(v5 + 400) = a3;
  v6 = sub_10001A9A8(&qword_1010EC870);
  *(_QWORD *)(v5 + 424) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *(_QWORD *)(v5 + 432) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EE0E0);
  *(_QWORD *)(v5 + 440) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 448) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 456) = v10;
  *(_QWORD *)(v5 + 464) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnerPeerTrust(0);
  *(_QWORD *)(v5 + 472) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 480) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 488) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 496) = swift_task_alloc(v13);
  v14 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v5 + 504) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v5 + 512) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 520) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 528) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 536) = swift_task_alloc(v16);
  return swift_task_switch(sub_1009794B8, 0, 0);
}

uint64_t sub_1009794B8()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t (__cdecl *v24)();
  uint64_t v25;

  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = (__int128 *)(v0 + 12);
  v2 = v0 + 35;
  v3 = v0[57];
  v4 = v0[58];
  v5 = v0[56];
  v6 = v0[49];
  v7 = type metadata accessor for Logger(0);
  v0[68] = sub_10001A9E8(v7, (uint64_t)qword_1011B79B8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v6, v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[58];
  v13 = v0[56];
  if (v11)
  {
    v23 = v0[57];
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v25 = v15;
    *(_DWORD *)v14 = 141558275;
    v0[47] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 47, v0 + 48, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v0[48] = sub_100016940(v17, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 49, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received handleCircleTrustAck -- identifier: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v19 = v15;
    v2 = v0 + 35;
    swift_slowDealloc(v19, -1, -1);
    v20 = v14;
    v1 = (__int128 *)(v0 + 12);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[57] + 8))(v0[58], v0[56]);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v2, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[15])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    sub_10001AA44(v0 + 2, v0[5]);
    v24 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB58 + dword_1010EBB58);
    v22 = (_QWORD *)swift_task_alloc(unk_1010EBB5C);
    v0[69] = v22;
    *v22 = v0;
    v22[1] = sub_1009797A8;
    return v24();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009797A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100979804, 0, 0);
}

uint64_t sub_100979804()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);

  v1 = (_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v0 + 560))
  {
    v5 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No PeerTrustService available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 528);
    v10 = *(_QWORD *)(v0 + 520);
    v12 = *(_QWORD *)(v0 + 488);
    v11 = *(_QWORD *)(v0 + 496);
    v13 = *(_QWORD *)(v0 + 464);
    v15 = *(_QWORD *)(v0 + 432);
    v14 = *(_QWORD *)(v0 + 440);
    v16 = *(_QWORD *)(v0 + 424);
    swift_task_dealloc(*(_QWORD *)(v0 + 536));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 176, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 200))
  {
    sub_10000F9FC((__int128 *)(v0 + 176), v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v17 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 568) = v3;
    *v3 = v0;
    v3[1] = sub_1009799B4;
    v4 = v17;
    return v4();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009799B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 568);
  *(_QWORD *)(*(_QWORD *)v1 + 576) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100979A10, 0, 0);
}

uint64_t sub_100979A10()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v0 + 576))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_retain();
    return swift_task_switch(sub_100979D40, *(_QWORD *)(v0 + 576), 0);
  }
  v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = sub_100033220();
  v8 = swift_allocError(&type metadata for DaemonError, v7, 0, 0);
  *v9 = 0x74536E6F63616542;
  v9[1] = 0xEB0000000065726FLL;
  swift_willThrow(v8);
  swift_release();
  swift_errorRetain(v8);
  v10 = swift_errorRetain(v8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v25 = v14;
    *(_DWORD *)v13 = 136446210;
    swift_getErrorValue(v8, v0 + 336, v0 + 256);
    v15 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 328) = sub_100016940(v15, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v8);
    if (!*(_QWORD *)(v0 + 576))
      goto LABEL_10;
    goto LABEL_9;
  }
  swift_errorRelease(v8);
  swift_errorRelease(v8);
  swift_errorRelease(v8);

  if (*(_QWORD *)(v0 + 576))
LABEL_9:
    swift_release();
LABEL_10:
  v17 = *(_QWORD *)(v0 + 528);
  v18 = *(_QWORD *)(v0 + 520);
  v20 = *(_QWORD *)(v0 + 488);
  v19 = *(_QWORD *)(v0 + 496);
  v21 = *(_QWORD *)(v0 + 464);
  v23 = *(_QWORD *)(v0 + 432);
  v22 = *(_QWORD *)(v0 + 440);
  v24 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 536));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100979D40()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 584) = *(_QWORD *)(*(_QWORD *)(v0 + 576) + 128);
  return swift_task_switch(sub_100979D60, 0, 0);
}

uint64_t sub_100979D60()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 592) = v1;
  *v1 = v0;
  v1[1] = sub_100979DE8;
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_100068180, *(_QWORD *)(v0 + 584), &type metadata for () + 1);
}

uint64_t sub_100979DE8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 592));
  return swift_task_switch(sub_100979E3C, 0, 0);
}

uint64_t sub_100979E3C()
{
  uint64_t v0;

  return swift_task_switch(sub_100979E50, *(_QWORD *)(v0 + 576), 0);
}

uint64_t sub_100979E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 600) = v3;
  v4 = sub_10001A9A8(&qword_1010EE100);
  *v3 = v0;
  v3[1] = sub_100979ED8;
  return unsafeBlocking<A>(_:)(v0 + 304, sub_100068004, v1, v4);
}

uint64_t sub_100979ED8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 600));
  swift_release();
  return swift_task_switch(sub_100979F34, *(_QWORD *)(v1 + 576), 0);
}

uint64_t sub_100979F34()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 608) = *(_QWORD *)(v0 + 304);
  return swift_task_switch(sub_100979F50, 0, 0);
}

uint64_t sub_100979F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 608);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 504);
    v3 = *(_QWORD *)(v0 + 512);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v7 = *(_QWORD *)(v0 + 528);
      v8 = *(_QWORD *)(v0 + 392);
      sub_10005972C(v5, v7, type metadata accessor for OwnerSharingCircle);
      if ((static UUID.== infix(_:_:)(v7 + *(int *)(v4 + 20), v8) & 1) != 0)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for OwnerSharingCircle);
      v5 += v6;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    v10 = *(_QWORD *)(v0 + 528);
    v11 = *(_QWORD *)(v0 + 440);
    swift_bridgeObjectRelease();
    sub_1000126EC(v10, v11, type metadata accessor for OwnerSharingCircle);
    v9 = 0;
  }
  else
  {
LABEL_6:
    v9 = 1;
  }
  v12 = *(_QWORD *)(v0 + 504);
  v13 = *(_QWORD *)(v0 + 512);
  v14 = *(_QWORD *)(v0 + 440);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v14, v9, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) != 1)
  {
    sub_1000126EC(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 536), type metadata accessor for OwnerSharingCircle);
    v29 = (_QWORD *)swift_task_alloc(dword_101112094);
    *(_QWORD *)(v0 + 616) = v29;
    *v29 = v0;
    v29[1] = sub_10097A39C;
    return sub_100AAF5B4(*(_BYTE *)(v0 + 740), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
  }
  v15 = sub_100004048(*(_QWORD *)(v0 + 440), &qword_1010EE0E0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "ownerSharingCircle cannot be found", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = sub_100986460();
  v20 = swift_allocError(&type metadata for CircleTrustServiceError, v19, 0, 0);
  *v21 = 3;
  swift_willThrow(v20);
  swift_release();
  swift_release();
  swift_errorRetain(v20);
  v22 = swift_errorRetain(v20);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v39 = v26;
    *(_DWORD *)v25 = 136446210;
    swift_getErrorValue(v20, v0 + 336, v0 + 256);
    v27 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 328) = sub_100016940(v27, v28, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    swift_errorRelease(v20);
    if (!*(_QWORD *)(v0 + 576))
      goto LABEL_17;
    goto LABEL_16;
  }
  swift_errorRelease(v20);
  swift_errorRelease(v20);
  swift_errorRelease(v20);

  if (*(_QWORD *)(v0 + 576))
LABEL_16:
    swift_release();
LABEL_17:
  v31 = *(_QWORD *)(v0 + 528);
  v32 = *(_QWORD *)(v0 + 520);
  v34 = *(_QWORD *)(v0 + 488);
  v33 = *(_QWORD *)(v0 + 496);
  v35 = *(_QWORD *)(v0 + 464);
  v37 = *(_QWORD *)(v0 + 432);
  v36 = *(_QWORD *)(v0 + 440);
  v38 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 536));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097A39C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 616);
  *(_QWORD *)(v3 + 624) = a1;
  *(_QWORD *)(v3 + 632) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10097B5D0;
  else
    v5 = sub_10097A40C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10097A40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];

  v1 = v0 + 328;
  v2 = *(_QWORD *)(v0 + 624);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 480) + 80);
    sub_10005972C(v2 + ((v3 + 32) & ~v3), *(_QWORD *)(v0 + 432), type metadata accessor for OwnerPeerTrust);
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  v6 = *(_QWORD *)(v0 + 472);
  v5 = *(_QWORD *)(v0 + 480);
  v7 = *(_QWORD *)(v0 + 432);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v7, v4, 1, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v6) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 432), (uint64_t *)&unk_1010EE160);
LABEL_10:
    swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 408), 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 408);
    if (v33)
    {
      v35 = *(_QWORD *)(v0 + 400);
      v36 = swift_slowAlloc(22, -1);
      v37 = swift_slowAlloc(32, -1);
      v63[0] = v37;
      *(_DWORD *)v36 = 141558275;
      *(_QWORD *)(v0 + 312) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2081;
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v0 + 320) = sub_100016940(v35, v34, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease_n(v34, 3);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Missing ownerPeerTrust for %{private,mask.hash}s.", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 408), 2);
    }

    v38 = sub_100986460();
    v39 = swift_allocError(&type metadata for CircleTrustServiceError, v38, 0, 0);
    *v40 = 2;
    swift_willThrow(v39);
    swift_release();
    swift_release();
    v41 = 0;
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(v0 + 632);
  v9 = *(_QWORD *)(v0 + 536);
  v10 = *(_QWORD *)(v0 + 504);
  v11 = *(_QWORD *)(v0 + 488);
  v12 = *(_QWORD *)(v0 + 472);
  sub_1000126EC(*(_QWORD *)(v0 + 432), v11, type metadata accessor for OwnerPeerTrust);
  v13 = *(int *)(v10 + 32);
  *(_DWORD *)(v0 + 736) = v13;
  v14 = swift_bridgeObjectRetain(*(_QWORD *)(v9 + v13));
  v15 = sub_100508A54(v14);
  swift_bridgeObjectRelease();
  v16 = v11 + *(int *)(v12 + 20);
  v17 = swift_task_alloc(32);
  *(_QWORD *)(v17 + 16) = v16;
  LOBYTE(v10) = sub_1007EF65C((uint64_t (*)(char *))sub_1004D63F4, v17, v15);
  swift_release();
  swift_task_dealloc(v17);
  if ((v10 & 1) == 0)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 488), type metadata accessor for OwnerPeerTrust);
    goto LABEL_10;
  }
  v18 = *(_QWORD *)(v0 + 536);
  v19 = *(_QWORD *)(v0 + 520);
  sub_10005972C(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), type metadata accessor for OwnerPeerTrust);
  v20 = sub_10005972C(v18, v19, type metadata accessor for OwnerSharingCircle);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 520);
  if (v23)
  {
    v62 = *(_QWORD *)(v0 + 448);
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(32, -1);
    v63[0] = v26;
    *(_DWORD *)v25 = 141558275;
    *(_QWORD *)(v0 + 360) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2081;
    v1 = v0 + 328;
    v27 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v62, v27);
    *(_QWORD *)(v0 + 368) = sub_100016940(v28, v29, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v24, type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Data update on circle trust acceptance. Update %{private,mask.hash}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 520), type metadata accessor for OwnerSharingCircle);
  }

  v58 = *(_QWORD *)(v0 + 536);
  v59 = *(_QWORD *)(v0 + 496);
  v60 = *(_QWORD *)(v0 + 424);
  v61 = swift_task_alloc(32);
  *(_QWORD *)(v61 + 16) = v58;
  *(_QWORD *)(v61 + 24) = v59;
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_1009864A4, v60);
  if (!v8)
  {
    swift_task_dealloc(v61);
    return swift_task_switch(sub_10097AB88, *(_QWORD *)(v0 + 576), 0);
  }
  v39 = v8;
  sub_1000126B0(*(_QWORD *)(v0 + 488), type metadata accessor for OwnerPeerTrust);
  swift_release();
  swift_release();
  swift_task_dealloc(v61);
  v41 = 1;
LABEL_14:
  swift_errorRetain(v39);
  v42 = swift_errorRetain(v39);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.error.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v63[0] = v46;
    *(_DWORD *)v45 = 136446210;
    swift_getErrorValue(v39, v0 + 336, v0 + 256);
    v47 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 328) = sub_100016940(v47, v48, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v0 + 336, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v39);
    swift_errorRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    swift_errorRelease(v39);
    if (!v41)
      goto LABEL_19;
    goto LABEL_18;
  }
  swift_errorRelease(v39);
  swift_errorRelease(v39);
  swift_errorRelease(v39);

  if (v41)
LABEL_18:
    sub_1000126B0(*(_QWORD *)(v0 + 496), type metadata accessor for OwnerPeerTrust);
LABEL_19:
  sub_1000126B0(*(_QWORD *)(v0 + 536), type metadata accessor for OwnerSharingCircle);
  if (*(_QWORD *)(v0 + 576))
    swift_release();
  v49 = *(_QWORD *)(v0 + 528);
  v50 = *(_QWORD *)(v0 + 520);
  v52 = *(_QWORD *)(v0 + 488);
  v51 = *(_QWORD *)(v0 + 496);
  v53 = *(_QWORD *)(v0 + 464);
  v55 = *(_QWORD *)(v0 + 432);
  v54 = *(_QWORD *)(v0 + 440);
  v56 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 536));
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097AB88()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 640) = *(_QWORD *)(*(_QWORD *)(v0 + 576) + 128);
  return swift_task_switch(sub_10097ABA8, 0, 0);
}

uint64_t sub_10097ABA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[80];
  v2 = v0[53];
  v3 = swift_task_alloc(32);
  v0[81] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[82] = v4;
  *v4 = v0;
  v4[1] = sub_10097AC4C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_1000682F8, v3, &type metadata for () + 1);
}

uint64_t sub_10097AC4C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 656);
  *(_QWORD *)(*v1 + 664) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10097AD5C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 648));
    v4 = sub_10097ACB8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10097ACB8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 216, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 240))
  {
    sub_10000F9FC((__int128 *)(v0 + 216), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 672) = v2;
    *v2 = v0;
    v2[1] = sub_10097B020;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10097AD5C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 648));
  return swift_task_switch(sub_10097AD98, 0, 0);
}

uint64_t sub_10097AD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 424);
  swift_release();
  swift_release();
  sub_100004048(v2, &qword_1010EC870);
  sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  v3 = *(_QWORD *)(v0 + 664);
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v20 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_getErrorValue(v3, v0 + 336, v0 + 256);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 328) = sub_100016940(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  sub_1000126B0(*(_QWORD *)(v0 + 496), type metadata accessor for OwnerPeerTrust);
  sub_1000126B0(*(_QWORD *)(v0 + 536), type metadata accessor for OwnerSharingCircle);
  if (*(_QWORD *)(v0 + 576))
    swift_release();
  v11 = *(_QWORD *)(v0 + 528);
  v12 = *(_QWORD *)(v0 + 520);
  v14 = *(_QWORD *)(v0 + 488);
  v13 = *(_QWORD *)(v0 + 496);
  v15 = *(_QWORD *)(v0 + 464);
  v17 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 440);
  v18 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 536));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097B020(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 672);
  *(_QWORD *)(*(_QWORD *)v1 + 680) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10097B07C, 0, 0);
}

uint64_t sub_10097B07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 680);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 680);
    swift_retain();
    return swift_task_switch(sub_10097B1BC, v2, 0);
  }
  else
  {
    swift_release();
    v4 = *(int *)(v0 + 736);
    v5 = *(_QWORD *)(v0 + 576);
    v6 = *(_QWORD *)(v0 + 536);
    v7 = *(_QWORD *)(v0 + 488);
    sub_100004048(*(_QWORD *)(v0 + 424), &qword_1010EC870);
    sub_1000126B0(v7, type metadata accessor for OwnerPeerTrust);
    v8 = swift_bridgeObjectRetain(*(_QWORD *)(v6 + v4));
    v9 = sub_100508A54(v8);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 344) = v9;
    v10 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    *(_QWORD *)(v0 + 688) = v10;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
    v12 = sub_1000193A4((unint64_t *)&qword_1010F1DF8, (uint64_t *)&unk_1010F7730, (const char *)&protocol conformance descriptor for [A]);
    *v10 = v0;
    v10[1] = sub_10097B370;
    return Sequence.asyncCompactMap<A>(_:)(&unk_10110DE78, v5, v11, *(_QWORD *)(v0 + 472), v12);
  }
}

uint64_t sub_10097B1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 680);
  type metadata accessor for Transaction(0);
  v2 = swift_allocObject(&unk_10109EEC8, 24, 7);
  swift_weakInit(v2 + 16, v1);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE110, v2);
  swift_release_n(v2, 2);
  swift_release();
  return swift_task_switch(sub_10097B268, 0, 0);
}

uint64_t sub_10097B268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  swift_release();
  swift_release();
  v1 = *(int *)(v0 + 736);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 488);
  sub_100004048(*(_QWORD *)(v0 + 424), &qword_1010EC870);
  sub_1000126B0(v4, type metadata accessor for OwnerPeerTrust);
  v5 = swift_bridgeObjectRetain(*(_QWORD *)(v3 + v1));
  v6 = sub_100508A54(v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 344) = v6;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 688) = v7;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  v9 = sub_1000193A4((unint64_t *)&qword_1010F1DF8, (uint64_t *)&unk_1010F7730, (const char *)&protocol conformance descriptor for [A]);
  *v7 = v0;
  v7[1] = sub_10097B370;
  return Sequence.asyncCompactMap<A>(_:)(&unk_10110DE78, v2, v8, *(_QWORD *)(v0 + 472), v9);
}

uint64_t sub_10097B370(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 688);
  *(_QWORD *)(v3 + 696) = a1;
  *(_QWORD *)(v3 + 704) = v1;
  swift_task_dealloc(v4);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10097B3EC, 0, 0);
}

uint64_t sub_10097B3EC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[87];
  v2 = v0[62];
  v3 = (unint64_t *)swift_task_alloc(32);
  v3[2] = v2;
  v4 = sub_10008B598((uint64_t (*)(char *))sub_100986548, v3, v1);
  v0[89] = v4;
  swift_task_dealloc(v3);
  v5 = (_QWORD *)swift_task_alloc(dword_10110DC7C);
  v0[90] = v5;
  *v5 = v0;
  v5[1] = sub_10097B490;
  return sub_10097266C(v0[67], v4);
}

uint64_t sub_10097B490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 720);
  *(_QWORD *)(*(_QWORD *)v1 + 728) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
    v3 = sub_10097B820;
  else
    v3 = sub_10097B4FC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10097B4FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 496);
  swift_release();
  sub_1000126B0(v2, type metadata accessor for OwnerPeerTrust);
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 520);
  v6 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 496);
  v7 = *(_QWORD *)(v0 + 464);
  v9 = *(_QWORD *)(v0 + 432);
  v8 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 536));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097B5D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 632);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v18 = v6;
    *(_DWORD *)v5 = 136446210;
    swift_getErrorValue(v1, v0 + 336, v0 + 256);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 328) = sub_100016940(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  sub_1000126B0(*(_QWORD *)(v0 + 536), type metadata accessor for OwnerSharingCircle);
  if (*(_QWORD *)(v0 + 576))
    swift_release();
  v9 = *(_QWORD *)(v0 + 528);
  v10 = *(_QWORD *)(v0 + 520);
  v12 = *(_QWORD *)(v0 + 488);
  v11 = *(_QWORD *)(v0 + 496);
  v13 = *(_QWORD *)(v0 + 464);
  v15 = *(_QWORD *)(v0 + 432);
  v14 = *(_QWORD *)(v0 + 440);
  v16 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 536));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097B820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 728);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 728);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v8 = _convertErrorToNSError(_:)(v5);
    *(_QWORD *)(v0 + 352) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error in handleCircleTrustAccept, send update message: %@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    v5 = *(_QWORD *)(v0 + 728);

    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }
  swift_errorRelease(v5);
  v10 = *(_QWORD *)(v0 + 536);
  v11 = *(_QWORD *)(v0 + 496);
  swift_release();
  sub_1000126B0(v11, type metadata accessor for OwnerPeerTrust);
  sub_1000126B0(v10, type metadata accessor for OwnerSharingCircle);
  v12 = *(_QWORD *)(v0 + 528);
  v13 = *(_QWORD *)(v0 + 520);
  v15 = *(_QWORD *)(v0 + 488);
  v14 = *(_QWORD *)(v0 + 496);
  v16 = *(_QWORD *)(v0 + 464);
  v18 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 440);
  v19 = *(_QWORD *)(v0 + 424);
  swift_task_dealloc(*(_QWORD *)(v0 + 536));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097BA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerPeerTrust(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2 + *(int *)(v8 + 20), v4);
  v9 = *(int *)(type metadata accessor for OwnerSharingCircle(0) + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + v9));
  v13 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = 0x8000000000000000;
  sub_10010A278(1u, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + v9) = v13;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10097BB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[7] = v7;
  v3[8] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10097BB88, a3, 0);
}

uint64_t sub_10097BB88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109EEF0, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *v10 = v0;
  v10[1] = sub_1001BE938;
  return unsafeBlocking<A>(_:)(v0[2], sub_10007CC14, v8, v11);
}

BOOL sub_10097BC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  _QWORD v17[2];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v17 - v9;
  v11 = type metadata accessor for OwnerPeerTrust(0);
  v12 = a1 + *(int *)(v11 + 20);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, v12, v4);
  v13(v8, a2 + *(int *)(v11 + 20), v4);
  v14 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  return (a2 & 1) == 0;
}

uint64_t sub_10097BDA4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_10097BDC4(a1, a2, a3, a4, (uint64_t)&unk_10109EF18, (uint64_t)"CircleTrustService.handleCircleTrustDecline", 43, (uint64_t)&unk_10110DE90);
}

uint64_t sub_10097BDC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a7;
  v30 = a8;
  v27 = a3;
  v28 = a6;
  v10 = v8;
  v25 = a2;
  v26 = *v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = type metadata accessor for Transaction(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(a5, v20 + 8, v17 | 7);
  *(_QWORD *)(v21 + 16) = v10;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v21 + v18, v16, v13);
  v22 = v21 + v19;
  *(_BYTE *)v22 = v25;
  *(_QWORD *)(v22 + 8) = v27;
  *(_QWORD *)(v22 + 16) = a4;
  *(_QWORD *)(v21 + v20) = v26;
  swift_retain(v10);
  swift_bridgeObjectRetain(a4);
  static Transaction.asyncTask(name:block:)(v28, v29, 2, v30, v21);
  return swift_release(v21);
}

uint64_t sub_10097BF18(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a4;
  *(_BYTE *)(v6 + 96) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 64) = v8;
  v9 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v6 + 72) = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v10);
  return swift_task_switch(sub_10097BF98, 0, 0);
}

uint64_t sub_10097BF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 40);
  v22 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v20 = *(_QWORD *)(v0 + 32);
  v19 = *(_BYTE *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 80);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v4);
  v7 = *(unsigned __int8 *)(v2 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = (v3 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_10109EF40, v11 + 8, v7 | 7);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v14 = v1;
  v13(v12 + v8, v1, v4);
  *(_QWORD *)(v12 + v9) = v6;
  v15 = v12 + v10;
  *(_BYTE *)v15 = v19;
  *(_QWORD *)(v15 + 8) = v20;
  *(_QWORD *)(v15 + 16) = v21;
  *(_QWORD *)(v12 + v11) = v22;
  swift_retain(v6);
  v16 = swift_bridgeObjectRetain(v21);
  UUID.init()(v16);
  v17 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v23, &unk_10110DEA0, v12, &unk_10110DEA8, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v17);
  swift_release(v17);
  swift_task_dealloc(v14);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097C10C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v5 + 176) = a4;
  *(_QWORD *)(v5 + 184) = a5;
  *(_BYTE *)(v5 + 289) = a3;
  *(_QWORD *)(v5 + 160) = a1;
  *(_QWORD *)(v5 + 168) = a2;
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 192) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 200) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 208) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 216) = swift_task_alloc(v8);
  return swift_task_switch(sub_10097C184, 0, 0);
}

uint64_t sub_10097C184()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t (__cdecl *v26)();
  uint64_t v27;

  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0 + 12;
  v3 = v0[20];
  v4 = v0[27];
  v6 = v0[24];
  v5 = v0[25];
  v7 = type metadata accessor for Logger(0);
  v0[28] = sub_10001A9E8(v7, (uint64_t)qword_1011B79B8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[29] = v8;
  v9 = v8(v4, v3, v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = v0[27];
  v15 = v0[24];
  v14 = v0[25];
  if (v12)
  {
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(32, -1);
    v27 = v17;
    *(_DWORD *)v16 = 141558275;
    v0[19] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    v18 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v15, v18);
    v0[16] = sub_100016940(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v21(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received handleCircleTrustDecline -- identifier: %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v22 = v17;
    v2 = v0 + 12;
    swift_slowDealloc(v22, -1, -1);
    v23 = v16;
    v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v21(v0[27], v0[24]);
  }

  v0[30] = v21;
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v2, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    sub_10001AA44(v0 + 2, v0[5]);
    v26 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v25 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    v0[31] = v25;
    *v25 = v0;
    v25[1] = sub_10097C478;
    return v26();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10097C478(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10097C4D4, 0, 0);
}

uint64_t sub_10097C4D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 256))
  {
    v2 = *(_QWORD *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_10097C750, v2, 0);
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No SharingService available!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = sub_100033220();
    v9 = swift_allocError(&type metadata for DaemonError, v8, 0, 0);
    strcpy(v10, "SharingService");
    v10[15] = -18;
    swift_willThrow(v9);
    v11 = swift_errorRetain(v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      v16 = _convertErrorToNSError(_:)(v9);
      *(_QWORD *)(v0 + 120) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v14 + 4, v14 + 12);
      *v15 = v16;
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error in handleCircleTrustDecline: %@", v14, 0xCu);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v9);
    }
    else
    {
      swift_errorRelease(v9);
      swift_errorRelease(v9);

    }
    v18 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10097C750()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v1 = swift_retain();
  AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 288), v1);
  swift_release();
  if (*(_BYTE *)(v0 + 288) == 1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1010EE21C);
    *(_QWORD *)(v0 + 272) = v2;
    *v2 = v0;
    v2[1] = sub_10097CA78;
    return sub_1000C629C(*(_QWORD *)(v0 + 160), *(_BYTE *)(v0 + 289), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  }
  else
  {
    *(_QWORD *)(v0 + 264) = *(_QWORD *)(*(_QWORD *)(v0 + 168) + 144);
    return swift_task_switch(sub_10097C830, 0, 0);
  }
}

uint64_t sub_10097C830()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)(v0 + 264))
  {
    v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 232))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 192));
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter(v2);
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
    v6 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 192);
    if (v4)
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(32, -1);
      v16 = v9;
      *(_DWORD *)v8 = 141558275;
      *(_QWORD *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2081;
      v10 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v11 = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
      *(_QWORD *)(v0 + 144) = sub_100016940(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease();
      v5(v6, v7);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Ignoring non-me device handleCircleTrustDecline for identifier: %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
      swift_release();
    }
    else
    {
      swift_release();
      v5(v6, v7);
    }

    v15 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = (_QWORD *)swift_task_alloc(dword_1010EE21C);
    *(_QWORD *)(v0 + 272) = v13;
    *v13 = v0;
    v13[1] = sub_10097CA78;
    return sub_1000C629C(*(_QWORD *)(v0 + 160), *(_BYTE *)(v0 + 289), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  }
}

uint64_t sub_10097CA78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10097CB20;
  else
    v3 = sub_10097CADC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10097CADC()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 256));
  v1 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097CB20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release();
  v1 = *(_QWORD *)(v0 + 280);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    v7 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 120) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error in handleCircleTrustDecline: %@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097CC98(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v5 + 352) = a4;
  *(_QWORD *)(v5 + 360) = v4;
  *(_BYTE *)(v5 + 704) = a2;
  *(_QWORD *)(v5 + 336) = a1;
  *(_QWORD *)(v5 + 344) = a3;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  *(_QWORD *)(v5 + 368) = v6;
  *(_QWORD *)(v5 + 376) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharedBeaconRecord(0);
  *(_QWORD *)(v5 + 384) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 392) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 400) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 408) = swift_task_alloc(v9);
  v10 = sub_10001A9A8((uint64_t *)&unk_101111440);
  *(_QWORD *)(v5 + 416) = v10;
  *(_QWORD *)(v5 + 424) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v5 + 432) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 440) = v12;
  *(_QWORD *)(v5 + 448) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 456) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v5 + 464) = v14;
  v15 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v5 + 472) = v15;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 480) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 488) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 496) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 504) = swift_task_alloc(v16);
  v17 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v5 + 512) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10097CE00, v4, 0);
}

uint64_t sub_10097CE00()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t (__cdecl *v21)();
  uint64_t v22;

  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = (__int128 *)(v0 + 12);
  v2 = v0 + 32;
  v3 = v0[42];
  v4 = type metadata accessor for Logger(0);
  v0[65] = sub_10001A9E8(v4, (uint64_t)qword_1011B79B8);
  swift_bridgeObjectRetain_n(v3, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = v0[57];
    v9 = v0[42];
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v22 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(v9);
    v13 = Array.description.getter(v12, v8);
    v15 = v14;
    swift_bridgeObjectRelease();
    v16 = v13;
    v1 = (__int128 *)(v0 + 12);
    v0[41] = sub_100016940(v16, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 41, v0 + 42, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v9, 2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sharing Circles updated: %s.", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    v17 = v10;
    v2 = v0 + 32;
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[42], 2);
  }

  v18 = qword_1010EA5B0;
  swift_retain();
  if (v18 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v2, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[15])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v21 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v20 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    v0[66] = v20;
    *v20 = v0;
    v20[1] = sub_10097D0B8;
    return v21();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10097D0B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10097D118, v3, 0);
}

uint64_t sub_10097D118()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (__cdecl *v17)();

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 536))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 176, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 200))
    {
      sub_10000F9FC((__int128 *)(v0 + 176), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v17 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 544) = v3;
      *v3 = v0;
      v3[1] = sub_10097D2E8;
      return v17();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconSharingService available!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = *(_QWORD *)(v0 + 504);
    v10 = *(_QWORD *)(v0 + 488);
    v9 = *(_QWORD *)(v0 + 496);
    v11 = *(_QWORD *)(v0 + 480);
    v12 = *(_QWORD *)(v0 + 448);
    v13 = *(_QWORD *)(v0 + 424);
    v15 = *(_QWORD *)(v0 + 400);
    v14 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 376);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10097D2E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10097D348, v3, 0);
}

uint64_t sub_10097D348()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (__cdecl *v17)();

  v1 = (_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v0 + 552))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 216);
      sub_10001AA44((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
      v17 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB10 + dword_1010EBB10);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB14);
      *(_QWORD *)(v0 + 560) = v3;
      *v3 = v0;
      v3[1] = sub_10097D534;
      return v17();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconStoreActor available!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v8 = *(_QWORD *)(v0 + 504);
    v10 = *(_QWORD *)(v0 + 488);
    v9 = *(_QWORD *)(v0 + 496);
    v11 = *(_QWORD *)(v0 + 480);
    v12 = *(_QWORD *)(v0 + 448);
    v13 = *(_QWORD *)(v0 + 424);
    v15 = *(_QWORD *)(v0 + 400);
    v14 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 376);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10097D534(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10097D594, v3, 0);
}

uint64_t sub_10097D594()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char, uint64_t, uint64_t);

  v1 = (_QWORD *)(v0 + 216);
  if (*(_QWORD *)(v0 + 568))
  {
    v2 = *(_QWORD *)(v0 + 336);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 576) = v3;
    v4 = *(_QWORD *)(v0 + 464);
    v5 = *(_QWORD *)(v0 + 336);
    if (v3)
    {
      v6 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)(v0 + 696) = v6;
      *(_QWORD *)(v0 + 584) = *(_QWORD *)(v4 + 72);
      v7 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v4 + 16);
      *(_QWORD *)(v0 + 592) = v7;
      *(_QWORD *)(v0 + 600) = 0;
      v8 = *(_QWORD *)(v0 + 512);
      v9 = *(_QWORD *)(v0 + 456);
      v10 = v5 + ((v6 + 32) & ~(unint64_t)v6);
      v11 = swift_bridgeObjectRetain(v5);
      v7(v8, v10, v9, v11);
      v12 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56);
      *(_QWORD *)(v0 + 608) = v12;
      v12(v8, 0, 1, v9);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v8, 1, v9) != 1)
      {
        v13 = *(_QWORD *)(v0 + 504);
        v14 = *(_QWORD *)(v0 + 512);
        v15 = *(_QWORD *)(v0 + 456);
        v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 464) + 32);
        *(_QWORD *)(v0 + 616) = v16;
        v16(v13, v14, v15);
        v36 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
        v17 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
        *(_QWORD *)(v0 + 624) = v17;
        *v17 = v0;
        v17[1] = sub_10097D848;
        return v36(*(_BYTE *)(v0 + 704), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
      }
    }
    else
    {
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
      v24 = *(_QWORD *)(v0 + 512);
      v25 = *(_QWORD *)(v0 + 456);
      v26 = swift_bridgeObjectRetain(v5);
      v23(v24, 1, 1, v25, v26);
    }
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_10;
  }
  v19 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (!os_log_type_enabled(v20, v21))
  {

LABEL_10:
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  v22 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v22 = 0;
  _os_log_impl((void *)&_mh_execute_header, v20, v21, "No FamilyCircleService available!", v22, 2u);
  swift_slowDealloc(v22, -1, -1);
  swift_release();
  swift_release();

LABEL_11:
  v27 = *(_QWORD *)(v0 + 504);
  v29 = *(_QWORD *)(v0 + 488);
  v28 = *(_QWORD *)(v0 + 496);
  v30 = *(_QWORD *)(v0 + 480);
  v31 = *(_QWORD *)(v0 + 448);
  v32 = *(_QWORD *)(v0 + 424);
  v34 = *(_QWORD *)(v0 + 400);
  v33 = *(_QWORD *)(v0 + 408);
  v35 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097D848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 624);
  v4[79] = a2;
  v4[80] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = v4[45];
    v7 = sub_10097D8F4;
  }
  else
  {
    v6 = v4[71];
    v7 = sub_10097D8B4;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10097D8B4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 632))
    swift_bridgeObjectRelease();
  return swift_task_switch(sub_10097DCE8, *(_QWORD *)(v0 + 552), 0);
}

uint64_t sub_10097D8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  _QWORD *v40;
  uint64_t v41;
  uint64_t (*v42)(char, uint64_t, uint64_t);
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 640);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 592))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 456));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v41 = *(_QWORD *)(v0 + 504);
    v5 = *(_QWORD *)(v0 + 480);
    v6 = *(_QWORD *)(v0 + 456);
    v7 = *(_QWORD *)(v0 + 464);
    v8 = swift_slowAlloc(32, -1);
    v9 = swift_slowAlloc(64, -1);
    v43 = v9;
    *(_DWORD *)v8 = 141558531;
    *(_QWORD *)(v8 + 4) = 1752392040;
    *(_WORD *)(v8 + 12) = 2081;
    v10 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
    *(_QWORD *)(v8 + 14) = sub_100016940(v11, v12, &v43);
    swift_bridgeObjectRelease();
    v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v13(v5, v6);
    *(_WORD *)(v8 + 22) = 2082;
    swift_getErrorValue(v1, v0 + 304, v0 + 280);
    v14 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
    *(_QWORD *)(v8 + 24) = sub_100016940(v14, v15, &v43);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error downloading keys for updated share: %{private,mask.hash}s, %{public}s.", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v1);
    v13(v41, v6);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 504);
    v17 = *(_QWORD *)(v0 + 480);
    v18 = *(_QWORD *)(v0 + 456);
    v19 = *(_QWORD *)(v0 + 464);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v20(v17, v18);
    swift_errorRelease(v1);
    v20(v16, v18);
  }
  v21 = *(_QWORD *)(v0 + 600) + 1;
  if (v21 == *(_QWORD *)(v0 + 576))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 608))(*(_QWORD *)(v0 + 512), 1, 1, *(_QWORD *)(v0 + 456));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    v26 = *(_QWORD *)(v0 + 504);
    v28 = *(_QWORD *)(v0 + 488);
    v27 = *(_QWORD *)(v0 + 496);
    v29 = *(_QWORD *)(v0 + 480);
    v30 = *(_QWORD *)(v0 + 448);
    v31 = *(_QWORD *)(v0 + 424);
    v33 = *(_QWORD *)(v0 + 400);
    v32 = *(_QWORD *)(v0 + 408);
    v34 = *(_QWORD *)(v0 + 376);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 600) = v21;
  v22 = *(_QWORD *)(v0 + 512);
  v23 = *(_QWORD *)(v0 + 456);
  v24 = *(_QWORD *)(v0 + 464);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 592))(v22, *(_QWORD *)(v0 + 336)+ ((*(unsigned __int8 *)(v0 + 696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 696))+ *(_QWORD *)(v0 + 584) * v21, v23);
  v25 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56);
  *(_QWORD *)(v0 + 608) = v25;
  v25(v22, 0, 1, v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
    goto LABEL_7;
  v36 = *(_QWORD *)(v0 + 504);
  v37 = *(_QWORD *)(v0 + 512);
  v38 = *(_QWORD *)(v0 + 456);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 464) + 32);
  *(_QWORD *)(v0 + 616) = v39;
  v39(v36, v37, v38);
  v42 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
  v40 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
  *(_QWORD *)(v0 + 624) = v40;
  *v40 = v0;
  v40[1] = sub_10097D848;
  return v42(*(_BYTE *)(v0 + 704), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
}

uint64_t sub_10097DCE8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 616);
  v2 = *(unsigned __int8 *)(v0 + 696);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 496);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 472);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 592))(v4, *(_QWORD *)(v0 + 504), v5);
  v9 = swift_allocObject(&unk_10109EF68, v7, v8);
  *(_QWORD *)(v0 + 648) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 656) = v11;
  *v11 = v0;
  v11[1] = sub_10097DDD0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 424), sub_10007CC24, v9, *(_QWORD *)(v0 + 416));
}

uint64_t sub_10097DDD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 360);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 656));
  swift_release();
  return swift_task_switch(sub_10097DE34, v1, 0);
}

uint64_t sub_10097DE34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 424);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 440) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 504);
    v4 = *(_QWORD *)(v0 + 456);
    v5 = *(_QWORD *)(v0 + 464);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    swift_bridgeObjectRelease();
    sub_100004048(v2, (uint64_t *)&unk_101111440);
    v6 = *(_QWORD *)(v0 + 504);
    v8 = *(_QWORD *)(v0 + 488);
    v7 = *(_QWORD *)(v0 + 496);
    v9 = *(_QWORD *)(v0 + 480);
    v10 = *(_QWORD *)(v0 + 448);
    v11 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 400);
    v12 = *(_QWORD *)(v0 + 408);
    v14 = *(_QWORD *)(v0 + 376);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1000126EC(v2, *(_QWORD *)(v0 + 448), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 700) = *(_DWORD *)(v1 + 24);
    return swift_task_switch(sub_10097DFA8, *(_QWORD *)(v0 + 552), 0);
  }
}

uint64_t sub_10097DFA8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 616);
  v2 = *(unsigned __int8 *)(v0 + 696);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 496);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 472);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 592))(v4, *(_QWORD *)(v0 + 448) + *(int *)(v0 + 700), v5);
  v9 = swift_allocObject(&unk_10109EF90, v7, v8);
  *(_QWORD *)(v0 + 664) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 672) = v11;
  *v11 = v0;
  v11[1] = sub_10097E098;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 376), sub_100067DF8, v9, *(_QWORD *)(v0 + 368));
}

uint64_t sub_10097E098()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 360);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 672));
  swift_release();
  return swift_task_switch(sub_10097E0FC, v1, 0);
}

uint64_t sub_10097E0FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  _QWORD *v40;
  uint64_t (*v41)(char, uint64_t, uint64_t);
  uint64_t v42;
  char v43;
  char v44;

  v1 = *(_QWORD *)(v0 + 376);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 392) + 48))(v1, 1, *(_QWORD *)(v0 + 384)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 504);
    v3 = *(_QWORD *)(v0 + 456);
    v4 = *(_QWORD *)(v0 + 464);
    v5 = *(_QWORD *)(v0 + 448);
    swift_release();
    swift_release();
    swift_release();
    sub_1000126B0(v5, type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    swift_bridgeObjectRelease();
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
LABEL_3:
    v6 = *(_QWORD *)(v0 + 504);
    v8 = *(_QWORD *)(v0 + 488);
    v7 = *(_QWORD *)(v0 + 496);
    v9 = *(_QWORD *)(v0 + 480);
    v10 = *(_QWORD *)(v0 + 448);
    v11 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 400);
    v12 = *(_QWORD *)(v0 + 408);
    v14 = *(_QWORD *)(v0 + 376);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v16 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 400);
  v17 = *(_QWORD *)(v0 + 408);
  sub_1000126EC(v1, v17, type metadata accessor for SharedBeaconRecord);
  sub_10005972C(v17, v18, type metadata accessor for SharedBeaconRecord);
  v19 = *(_QWORD *)(v0 + 400);
  if (v16)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 400), type metadata accessor for SharedBeaconRecord);
LABEL_11:
    v31 = (_QWORD *)swift_task_alloc(dword_1010EE234);
    *(_QWORD *)(v0 + 680) = v31;
    *v31 = v0;
    v31[1] = sub_10097E538;
    return sub_1000C2F10(*(_QWORD *)(v0 + 504), 1);
  }
  v20 = *(_QWORD *)(v0 + 384);
  sub_1009867F4();
  v42 = Set.init(minimumCapacity:)(2);
  sub_100A10D1C(&v43, 4);
  sub_100A10D1C(&v44, 1);
  LOBYTE(v20) = sub_100A0658C(*(unsigned __int8 *)(v19 + *(int *)(v20 + 64)), v42);
  swift_bridgeObjectRelease();
  v21 = sub_1000126B0(v19, type metadata accessor for SharedBeaconRecord);
  if ((v20 & 1) == 0)
    goto LABEL_11;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Ignoring incoming UTFS message from non-family member", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }
  v25 = *(_QWORD *)(v0 + 504);
  v26 = *(_QWORD *)(v0 + 456);
  v27 = *(_QWORD *)(v0 + 464);
  v28 = *(_QWORD *)(v0 + 448);
  v29 = *(_QWORD *)(v0 + 408);

  sub_1000126B0(v29, type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v28, type metadata accessor for MemberSharingCircle);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  v30 = *(_QWORD *)(v0 + 600) + 1;
  if (v30 == *(_QWORD *)(v0 + 576))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 608))(*(_QWORD *)(v0 + 512), 1, 1, *(_QWORD *)(v0 + 456));
LABEL_13:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_3;
  }
  *(_QWORD *)(v0 + 600) = v30;
  v32 = *(_QWORD *)(v0 + 512);
  v33 = *(_QWORD *)(v0 + 456);
  v34 = *(_QWORD *)(v0 + 464);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 592))(v32, *(_QWORD *)(v0 + 336)+ ((*(unsigned __int8 *)(v0 + 696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 696))+ *(_QWORD *)(v0 + 584) * v30, v33);
  v35 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56);
  *(_QWORD *)(v0 + 608) = v35;
  v35(v32, 0, 1, v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) == 1)
    goto LABEL_13;
  v36 = *(_QWORD *)(v0 + 504);
  v37 = *(_QWORD *)(v0 + 512);
  v38 = *(_QWORD *)(v0 + 456);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 464) + 32);
  *(_QWORD *)(v0 + 616) = v39;
  v39(v36, v37, v38);
  v41 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
  v40 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
  *(_QWORD *)(v0 + 624) = v40;
  *v40 = v0;
  v40[1] = sub_10097D848;
  return v41(*(_BYTE *)(v0 + 704), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
}

uint64_t sub_10097E538()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 680);
  *(_QWORD *)(*v1 + 688) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10097E99C;
  else
    v4 = sub_10097E59C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 360), 0);
}

uint64_t sub_10097E59C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char, uint64_t, uint64_t);
  uint64_t v44;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 592))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 456));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 488);
    v5 = *(_QWORD *)(v0 + 456);
    v41 = *(_QWORD *)(v0 + 448);
    v42 = *(_QWORD *)(v0 + 504);
    v39 = *(_QWORD *)(v0 + 464);
    v40 = *(_QWORD *)(v0 + 408);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    v44 = v7;
    *(_DWORD *)v6 = 141558275;
    *(_QWORD *)(v0 + 312) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    v8 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 320) = sub_100016940(v9, v10, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    v11 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v11(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Downloaded keys for updated share: %{private,mask.hash}s.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    sub_1000126B0(v40, type metadata accessor for SharedBeaconRecord);
    sub_1000126B0(v41, type metadata accessor for MemberSharingCircle);
    v11(v42, v5);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 504);
    v13 = *(_QWORD *)(v0 + 488);
    v14 = *(_QWORD *)(v0 + 456);
    v15 = *(_QWORD *)(v0 + 464);
    v16 = *(_QWORD *)(v0 + 448);
    v17 = *(_QWORD *)(v0 + 408);

    v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v18(v13, v14);
    sub_1000126B0(v17, type metadata accessor for SharedBeaconRecord);
    sub_1000126B0(v16, type metadata accessor for MemberSharingCircle);
    v18(v12, v14);
  }
  v19 = *(_QWORD *)(v0 + 600) + 1;
  if (v19 == *(_QWORD *)(v0 + 576))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 608))(*(_QWORD *)(v0 + 512), 1, 1, *(_QWORD *)(v0 + 456));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    v24 = *(_QWORD *)(v0 + 504);
    v26 = *(_QWORD *)(v0 + 488);
    v25 = *(_QWORD *)(v0 + 496);
    v27 = *(_QWORD *)(v0 + 480);
    v28 = *(_QWORD *)(v0 + 448);
    v29 = *(_QWORD *)(v0 + 424);
    v31 = *(_QWORD *)(v0 + 400);
    v30 = *(_QWORD *)(v0 + 408);
    v32 = *(_QWORD *)(v0 + 376);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 600) = v19;
  v20 = *(_QWORD *)(v0 + 512);
  v21 = *(_QWORD *)(v0 + 456);
  v22 = *(_QWORD *)(v0 + 464);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 592))(v20, *(_QWORD *)(v0 + 336)+ ((*(unsigned __int8 *)(v0 + 696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 696))+ *(_QWORD *)(v0 + 584) * v19, v21);
  v23 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56);
  *(_QWORD *)(v0 + 608) = v23;
  v23(v20, 0, 1, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    goto LABEL_7;
  v34 = *(_QWORD *)(v0 + 504);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 456);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 464) + 32);
  *(_QWORD *)(v0 + 616) = v37;
  v37(v34, v35, v36);
  v43 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
  v38 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
  *(_QWORD *)(v0 + 624) = v38;
  *v38 = v0;
  v38[1] = sub_10097D848;
  return v43(*(_BYTE *)(v0 + 704), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
}

uint64_t sub_10097E99C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  _QWORD *v41;
  uint64_t v42;
  uint64_t (*v43)(char, uint64_t, uint64_t);
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 448);
  sub_1000126B0(*(_QWORD *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  v2 = *(_QWORD *)(v0 + 688);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 592))(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 456));
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v42 = *(_QWORD *)(v0 + 504);
    v6 = *(_QWORD *)(v0 + 480);
    v7 = *(_QWORD *)(v0 + 456);
    v8 = *(_QWORD *)(v0 + 464);
    v9 = swift_slowAlloc(32, -1);
    v10 = swift_slowAlloc(64, -1);
    v44 = v10;
    *(_DWORD *)v9 = 141558531;
    *(_QWORD *)(v9 + 4) = 1752392040;
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    *(_QWORD *)(v9 + 14) = sub_100016940(v12, v13, &v44);
    swift_bridgeObjectRelease();
    v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v14(v6, v7);
    *(_WORD *)(v9 + 22) = 2082;
    swift_getErrorValue(v2, v0 + 304, v0 + 280);
    v15 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
    *(_QWORD *)(v9 + 24) = sub_100016940(v15, v16, &v44);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error downloading keys for updated share: %{private,mask.hash}s, %{public}s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v2);
    v14(v42, v7);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 504);
    v18 = *(_QWORD *)(v0 + 480);
    v19 = *(_QWORD *)(v0 + 456);
    v20 = *(_QWORD *)(v0 + 464);

    swift_errorRelease(v2);
    swift_errorRelease(v2);
    v21 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v21(v18, v19);
    swift_errorRelease(v2);
    v21(v17, v19);
  }
  v22 = *(_QWORD *)(v0 + 600) + 1;
  if (v22 == *(_QWORD *)(v0 + 576))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 608))(*(_QWORD *)(v0 + 512), 1, 1, *(_QWORD *)(v0 + 456));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    v27 = *(_QWORD *)(v0 + 504);
    v29 = *(_QWORD *)(v0 + 488);
    v28 = *(_QWORD *)(v0 + 496);
    v30 = *(_QWORD *)(v0 + 480);
    v31 = *(_QWORD *)(v0 + 448);
    v32 = *(_QWORD *)(v0 + 424);
    v34 = *(_QWORD *)(v0 + 400);
    v33 = *(_QWORD *)(v0 + 408);
    v35 = *(_QWORD *)(v0 + 376);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 600) = v22;
  v23 = *(_QWORD *)(v0 + 512);
  v24 = *(_QWORD *)(v0 + 456);
  v25 = *(_QWORD *)(v0 + 464);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 592))(v23, *(_QWORD *)(v0 + 336)+ ((*(unsigned __int8 *)(v0 + 696) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 696))+ *(_QWORD *)(v0 + 584) * v22, v24);
  v26 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56);
  *(_QWORD *)(v0 + 608) = v26;
  v26(v23, 0, 1, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
    goto LABEL_7;
  v37 = *(_QWORD *)(v0 + 504);
  v38 = *(_QWORD *)(v0 + 512);
  v39 = *(_QWORD *)(v0 + 456);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 464) + 32);
  *(_QWORD *)(v0 + 616) = v40;
  v40(v37, v38, v39);
  v43 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
  v41 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
  *(_QWORD *)(v0 + 624) = v41;
  *v41 = v0;
  v41[1] = sub_10097D848;
  return v43(*(_BYTE *)(v0 + 704), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
}

uint64_t sub_10097EDB4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = *v1;
  type metadata accessor for Transaction(0);
  v4 = (_QWORD *)swift_allocObject(&unk_10109EFB8, 40, 7);
  v4[2] = a1;
  v4[3] = v1;
  v4[4] = v3;
  swift_bridgeObjectRetain(a1);
  swift_retain(v1);
  static Transaction.asyncTask(name:block:)("CircleTrustService.handleCircleStopped", 38, 2, &unk_10110DEC8, v4);
  return swift_release(v4);
}

uint64_t sub_10097EE48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  return swift_task_switch(sub_10097EE60, 0, 0);
}

uint64_t sub_10097EE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t (__cdecl *v18)();
  uint64_t v19;

  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = v0 + 96;
  v2 = *(_QWORD *)(v0 + 160);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 176) = sub_10001A9E8(v3, (uint64_t)qword_1011B79B8);
  swift_bridgeObjectRetain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 160);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v19 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 152) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    swift_bridgeObjectRetain(v8);
    v13 = Array.description.getter(v12, v11);
    v15 = v14;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 128) = sub_100016940(v13, v15, &v19);
    v1 = v0 + 96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v8, 2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received handleCircleStopped -- identifiers: %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 160), 2);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v1, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v18 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v17 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 184) = v17;
    *v17 = v0;
    v17[1] = sub_10097F124;
    return v18();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10097F124(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10097F180, 0, 0);
}

uint64_t sub_10097F180()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 192))
  {
    v2 = *(_QWORD *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_10097F3E8, v2, 0);
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No SharingService available!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = sub_100033220();
    v9 = swift_allocError(&type metadata for DaemonError, v8, 0, 0);
    strcpy(v10, "SharingService");
    v10[15] = -18;
    swift_willThrow(v9);
    v11 = swift_errorRetain(v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      v16 = _convertErrorToNSError(_:)(v9);
      *(_QWORD *)(v0 + 120) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v14 + 4, v14 + 12);
      *v15 = v16;
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error in handleCircleStopped: %@", v14, 0xCu);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v9);
    }
    else
    {
      swift_errorRelease(v9);
      swift_errorRelease(v9);

    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10097F3E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v1 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v0 + 28, v1);
  swift_release();
  if (*((_BYTE *)v0 + 224) == 1)
  {
    v2 = (uint64_t **)swift_task_alloc(dword_1010EE24C);
    v0[26] = (uint64_t)v2;
    *v2 = v0;
    v2[1] = (uint64_t *)sub_10097F6E8;
    return sub_1000C9044(v0[20]);
  }
  else
  {
    v0[25] = *(_QWORD *)(v0[21] + 144);
    return swift_task_switch(sub_10097F4C0, 0, 0);
  }
}

uint64_t sub_10097F4C0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  if (*(_QWORD *)(v0 + 200))
  {
    swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 160), 2);
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter(v2);
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(_QWORD *)(v0 + 160);
    if (v4)
    {
      v6 = swift_slowAlloc(22, -1);
      v7 = swift_slowAlloc(32, -1);
      v15 = v7;
      *(_DWORD *)v6 = 141558275;
      *(_QWORD *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v6 + 4, v6 + 12);
      *(_WORD *)(v6 + 12) = 2081;
      v8 = type metadata accessor for UUID(0);
      swift_bridgeObjectRetain(v5);
      v10 = Array.description.getter(v9, v8);
      v12 = v11;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 144) = sub_100016940(v10, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 14, v6 + 22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v5, 2);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Ignoring non-me device handleCircleStopped for identifiers: %{private,mask.hash}s.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
      swift_release();

    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 160), 2);

      swift_release();
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = (_QWORD *)swift_task_alloc(dword_1010EE24C);
    *(_QWORD *)(v0 + 208) = v13;
    *v13 = v0;
    v13[1] = sub_10097F6E8;
    return sub_1000C9044(*(_QWORD *)(v0 + 160));
  }
}

uint64_t sub_10097F6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10097F77C;
  else
    v3 = sub_10097F74C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10097F74C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 192));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10097F77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  v1 = *(_QWORD *)(v0 + 216);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    v7 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 120) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error in handleCircleStopped: %@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10097F8E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  NSObject *v28;

  v9 = *v4;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_100AB3A40() & 1) != 0)
  {
    if (qword_1010EA078 != -1)
      swift_once(&qword_1010EA078, sub_10096F978);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B79B8);
    v28 = Logger.logObject.getter(v15);
    v16 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v16, "handleCircleRequested received by underage account. Ignoring it.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    v28 = type metadata accessor for Transaction(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
    v18 = *(unsigned __int8 *)(v11 + 80);
    v27 = a2;
    v19 = (v18 + 16) & ~v18;
    v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v25 = v9;
    v26 = a3;
    v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
    v23 = swift_allocObject(&unk_10109EFE0, v22 + 8, v18 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v23 + v19, v13, v10);
    *(_QWORD *)(v23 + v20) = v4;
    v24 = v23 + v21;
    *(_BYTE *)v24 = v27;
    *(_QWORD *)(v24 + 8) = v26;
    *(_QWORD *)(v24 + 16) = a4;
    *(_QWORD *)(v23 + v22) = v25;
    swift_retain();
    swift_bridgeObjectRetain(a4);
    static Transaction.asyncTask(name:block:)("CircleTrustService.handleCircleRequested", 40, 2, &unk_10110DED8, v23);
    swift_release();
  }
}

uint64_t sub_10097FB18(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *(_QWORD *)(v5 + 504) = a4;
  *(_QWORD *)(v5 + 512) = a5;
  *(_BYTE *)(v5 + 1078) = a3;
  *(_QWORD *)(v5 + 488) = a1;
  *(_QWORD *)(v5 + 496) = a2;
  v6 = sub_10001A9A8(&qword_1010EC870);
  *(_QWORD *)(v5 + 520) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *(_QWORD *)(v5 + 528) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerPeerTrust(0);
  *(_QWORD *)(v5 + 536) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 544) = v9;
  *(_QWORD *)(v5 + 552) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EE0E0);
  *(_QWORD *)(v5 + 560) = v10;
  *(_QWORD *)(v5 + 568) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v5 + 576) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 584) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 592) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 600) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 608) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 616) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 624) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 632) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 640) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 648) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 656) = swift_task_alloc(v13);
  *(_QWORD *)(v5 + 664) = swift_task_alloc(v13);
  v14 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 672) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v5 + 680) = v15;
  v16 = *(_QWORD *)(v15 + 64);
  *(_QWORD *)(v5 + 688) = v16;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 696) = swift_task_alloc(v17);
  *(_QWORD *)(v5 + 704) = swift_task_alloc(v17);
  *(_QWORD *)(v5 + 712) = swift_task_alloc(v17);
  *(_QWORD *)(v5 + 720) = swift_task_alloc(v17);
  return swift_task_switch(sub_10097FCDC, 0, 0);
}

uint64_t sub_10097FCDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v21;

  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = v0[90];
  v2 = v0[85];
  v3 = v0[84];
  v4 = v0[61];
  v5 = type metadata accessor for Logger(0);
  v0[91] = v5;
  v0[92] = sub_10001A9E8(v5, (uint64_t)qword_1011B79B8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[93] = v6;
  v7 = v6(v1, v4, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[90];
  v12 = v0[85];
  v13 = v0[84];
  if (v10)
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v21 = v15;
    *(_DWORD *)v14 = 141558275;
    v0[54] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 54, v0 + 55, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v0[49] = sub_100016940(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 49, v0 + 50, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received handleCircleRequested -- shareIdentifier: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(v0[90], v0[84]);
  }

  v0[94] = v19;
  return swift_task_switch(sub_10097FF18, v0[62], 0);
}

uint64_t sub_10097FF18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)();

  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v1 = swift_retain();
  AnyCurrentValuePublisher.value.getter((_QWORD *)((char *)v0 + 1077), v1);
  swift_release();
  if (*((_BYTE *)v0 + 1077) == 1)
  {
    v2 = sub_10097FFC0;
  }
  else
  {
    v0[95] = *(_QWORD *)(v0[62] + 144);
    v2 = sub_1009800AC;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10097FFC0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 336, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 216, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 240))
  {
    sub_10000F9FC((__int128 *)(v0 + 216), v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB58 + dword_1010EBB58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB5C);
    *(_QWORD *)(v0 + 768) = v2;
    *v2 = v0;
    v2[1] = sub_10098043C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009800AC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (__cdecl *v31)();
  uint64_t v32;
  uint64_t v33;

  if (*(_QWORD *)(v0 + 760))
  {
    v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 744))(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 672));
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter(v2);
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    v6 = *(_QWORD *)(v0 + 696);
    v7 = *(_QWORD *)(v0 + 672);
    if (v4)
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(32, -1);
      v33 = v9;
      *(_DWORD *)v8 = 141558275;
      *(_QWORD *)(v0 + 456) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2081;
      v10 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v11 = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
      *(_QWORD *)(v0 + 448) = sub_100016940(v11, v12, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease();
      v5(v6, v7);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Ignoring non-me device handleCircleRequested for identifier: %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      v5(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 672));
    }

    v15 = *(_QWORD *)(v0 + 712);
    v16 = *(_QWORD *)(v0 + 704);
    v17 = *(_QWORD *)(v0 + 696);
    v18 = *(_QWORD *)(v0 + 664);
    v19 = *(_QWORD *)(v0 + 656);
    v20 = *(_QWORD *)(v0 + 648);
    v21 = *(_QWORD *)(v0 + 640);
    v22 = *(_QWORD *)(v0 + 632);
    v23 = *(_QWORD *)(v0 + 624);
    v24 = *(_QWORD *)(v0 + 616);
    v25 = *(_QWORD *)(v0 + 608);
    v26 = *(_QWORD *)(v0 + 600);
    v27 = *(_QWORD *)(v0 + 592);
    v28 = *(_QWORD *)(v0 + 568);
    v29 = *(_QWORD *)(v0 + 552);
    v30 = *(_QWORD *)(v0 + 528);
    v32 = *(_QWORD *)(v0 + 520);
    swift_task_dealloc(*(_QWORD *)(v0 + 720));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 336, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 216, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 240))
    {
      sub_10000F9FC((__int128 *)(v0 + 216), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v31 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB58 + dword_1010EBB58);
      v14 = (_QWORD *)swift_task_alloc(unk_1010EBB5C);
      *(_QWORD *)(v0 + 768) = v14;
      *v14 = v0;
      v14[1] = sub_10098043C;
      return v31();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10098043C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 768);
  *(_QWORD *)(*(_QWORD *)v1 + 776) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100980498, 0, 0);
}

uint64_t sub_100980498()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (__cdecl *v24)();
  uint64_t v25;

  v1 = (_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v0 + 776))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 296, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 320))
    {
      sub_10000F9FC((__int128 *)(v0 + 296), v0 + 256);
      sub_10001AA44((_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 280));
      v24 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 784) = v3;
      *v3 = v0;
      v3[1] = sub_1009806E4;
      return v24();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No PeerTrustService available!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = *(_QWORD *)(v0 + 712);
    v9 = *(_QWORD *)(v0 + 704);
    v10 = *(_QWORD *)(v0 + 696);
    v11 = *(_QWORD *)(v0 + 664);
    v12 = *(_QWORD *)(v0 + 656);
    v13 = *(_QWORD *)(v0 + 648);
    v14 = *(_QWORD *)(v0 + 640);
    v15 = *(_QWORD *)(v0 + 632);
    v16 = *(_QWORD *)(v0 + 624);
    v17 = *(_QWORD *)(v0 + 616);
    v18 = *(_QWORD *)(v0 + 608);
    v19 = *(_QWORD *)(v0 + 600);
    v20 = *(_QWORD *)(v0 + 592);
    v21 = *(_QWORD *)(v0 + 568);
    v22 = *(_QWORD *)(v0 + 552);
    v23 = *(_QWORD *)(v0 + 528);
    v25 = *(_QWORD *)(v0 + 520);
    swift_task_dealloc(*(_QWORD *)(v0 + 720));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1009806E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 784);
  *(_QWORD *)(*(_QWORD *)v1 + 792) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100980740, 0, 0);
}

uint64_t sub_100980740()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = (_QWORD *)(v0 + 256);
  if (*(_QWORD *)(v0 + 792))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_100980A90, *(_QWORD *)(v0 + 792), 0);
  }
  else
  {
    v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = sub_100033220();
    v8 = swift_allocError(&type metadata for DaemonError, v7, 0, 0);
    *v9 = 0x74536E6F63616542;
    v9[1] = 0xEB0000000065726FLL;
    swift_willThrow(v8);
    swift_release();
    v10 = swift_errorRetain(v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 138412290;
      v15 = _convertErrorToNSError(_:)(v8);
      *(_QWORD *)(v0 + 440) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v13 + 4, v13 + 12);
      *v14 = v15;
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error in handleCircleRequested: %@", v13, 0xCu);
      v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v14, 1, v16);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      swift_errorRelease(v8);
    }
    else
    {
      swift_errorRelease(v8);
      swift_errorRelease(v8);

    }
    v17 = *(_QWORD *)(v0 + 712);
    v18 = *(_QWORD *)(v0 + 704);
    v19 = *(_QWORD *)(v0 + 696);
    v20 = *(_QWORD *)(v0 + 664);
    v21 = *(_QWORD *)(v0 + 656);
    v22 = *(_QWORD *)(v0 + 648);
    v23 = *(_QWORD *)(v0 + 640);
    v24 = *(_QWORD *)(v0 + 632);
    v25 = *(_QWORD *)(v0 + 624);
    v26 = *(_QWORD *)(v0 + 616);
    v27 = *(_QWORD *)(v0 + 608);
    v28 = *(_QWORD *)(v0 + 600);
    v29 = *(_QWORD *)(v0 + 592);
    v30 = *(_QWORD *)(v0 + 568);
    v31 = *(_QWORD *)(v0 + 552);
    v32 = *(_QWORD *)(v0 + 528);
    v33 = *(_QWORD *)(v0 + 520);
    swift_task_dealloc(*(_QWORD *)(v0 + 720));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100980A90()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 800) = *(_QWORD *)(*(_QWORD *)(v0 + 792) + 128);
  return swift_task_switch(sub_100980AB0, 0, 0);
}

uint64_t sub_100980AB0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 808) = v1;
  *v1 = v0;
  v1[1] = sub_100980B38;
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_100068180, *(_QWORD *)(v0 + 800), &type metadata for () + 1);
}

uint64_t sub_100980B38()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 808));
  return swift_task_switch(sub_100980B8C, 0, 0);
}

uint64_t sub_100980B8C()
{
  uint64_t v0;

  return swift_task_switch(sub_100980BA0, *(_QWORD *)(v0 + 792), 0);
}

uint64_t sub_100980BA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[99];
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[102] = v3;
  v4 = sub_10001A9A8(&qword_1010EE100);
  v0[103] = v4;
  *v3 = v0;
  v3[1] = sub_100980C2C;
  return unsafeBlocking<A>(_:)(v0 + 45, sub_100068004, v1, v4);
}

uint64_t sub_100980C2C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 816));
  swift_release();
  return swift_task_switch(sub_100980C88, *(_QWORD *)(v1 + 792), 0);
}

uint64_t sub_100980C88()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 832) = *(_QWORD *)(v0 + 360);
  return swift_task_switch(sub_100980CA4, 0, 0);
}

uint64_t sub_100980CA4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 832);
  v20 = *(_QWORD *)(v1 + 16);
  if (v20)
  {
    v2 = 0;
    v19 = *(_QWORD *)(v0 + 584);
    v18 = *(_QWORD *)(v0 + 576);
    v17 = *(_QWORD *)(v0 + 832);
    while (v2 < *(_QWORD *)(v1 + 16))
    {
      v3 = *(_QWORD *)(v0 + 664);
      v4 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
      v5 = *(_QWORD *)(v19 + 72);
      sub_10005972C(*(_QWORD *)(v0 + 832) + v4 + v5 * v2, v3, type metadata accessor for OwnerSharingCircle);
      v6 = *(_QWORD *)(v3 + *(int *)(v18 + 32));
      *(_BYTE *)(v0 + 1076) = 2;
      v7 = swift_task_alloc(32);
      *(_QWORD *)(v7 + 16) = v0 + 1076;
      swift_bridgeObjectRetain(v6);
      v8 = sub_1007EF884((uint64_t (*)(char *))sub_100986A1C, v7, v6);
      swift_bridgeObjectRelease();
      swift_task_dealloc(v7);
      v9 = *(_QWORD *)(v0 + 664);
      if ((v8 & 1) != 0)
      {
        sub_1000126EC(v9, *(_QWORD *)(v0 + 656), type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A520(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v11 = _swiftEmptyArrayStorage[2];
        v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1)
          sub_10009A520(v10 > 1, v11 + 1, 1);
        v12 = *(_QWORD *)(v0 + 656);
        _swiftEmptyArrayStorage[2] = v11 + 1;
        sub_1000126EC(v12, (uint64_t)_swiftEmptyArrayStorage + v4 + v11 * v5, type metadata accessor for OwnerSharingCircle);
      }
      else
      {
        sub_1000126B0(v9, type metadata accessor for OwnerSharingCircle);
      }
      ++v2;
      v1 = v17;
      if (v20 == v2)
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 840) = _swiftEmptyArrayStorage[2];
  swift_release();
  if (qword_1010E9D08 != -1)
LABEL_15:
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v13 = qword_1011B71A8;
  *(_QWORD *)(v0 + 848) = qword_1011B71A8;
  v14 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc(v14);
  *(_QWORD *)(v0 + 856) = v15;
  *v15 = v0;
  v15[1] = sub_100980F04;
  return unsafeBlocking<A>(_:)(v0 + 376, sub_100033264, v13, &type metadata for Configuration);
}

uint64_t sub_100980F04()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 856));
  swift_release();
  return swift_task_switch(sub_100980F64, 0, 0);
}

uint64_t sub_100980F64()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 840);
  v2 = sub_100C1BA64(*(_QWORD *)(v0 + 376));
  swift_bridgeObjectRelease();
  if (v1 < v2)
    return swift_task_switch(sub_100981480, *(_QWORD *)(v0 + 792), 0);
  v4 = (_QWORD *)(v0 + 384);
  v5 = v0 + 464;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 744))(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 672));
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 840);
    v44 = *(_QWORD *)(v0 + 704);
    v46 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    v42 = *(_QWORD *)(v0 + 672);
    v10 = swift_slowAlloc(42, -1);
    v11 = swift_slowAlloc(32, -1);
    v50 = v11;
    *(_DWORD *)v10 = 134218755;
    *(_QWORD *)(v0 + 400) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2048;
    *(_QWORD *)(v0 + 408) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2160;
    *(_QWORD *)(v0 + 416) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v10 + 24, v10 + 32);
    *(_WORD *)(v10 + 32) = 2081;
    v12 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v42, v12);
    *(_QWORD *)(v0 + 424) = sub_100016940(v13, v14, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v10 + 34, v10 + 42);
    swift_bridgeObjectRelease();
    v46(v44, v42);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Cannot process handleCircleRequested. existingRequests: %ld >= maxPendingRequestSharedItem: %lu,\nshareIdentifier: %{private,mask.hash}s", (uint8_t *)v10, 0x2Au);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    v15 = v11;
    v5 = v0 + 464;
    swift_slowDealloc(v15, -1, -1);
    v16 = v10;
    v4 = (_QWORD *)(v0 + 384);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 752))(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 672));
  }

  type metadata accessor for SPBeaconSharingError(0);
  v18 = v17;
  *(_QWORD *)(v0 + 464) = 10;
  v19 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v20 = sub_100006C64((unint64_t *)&qword_1010EB490, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)byte_100E21930);
  v21 = _BridgedStoredNSError.init(_:userInfo:)(v4, v5, v19, v18, v20);
  v22 = *(_QWORD *)(v0 + 384);
  swift_willThrow(v21);
  swift_release();
  swift_release();
  v23 = swift_errorRetain(v22);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v26 = 138412290;
    v28 = _convertErrorToNSError(_:)(v22);
    *(_QWORD *)(v0 + 440) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v26 + 4, v26 + 12);
    *v27 = v28;
    swift_errorRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error in handleCircleRequested: %@", v26, 0xCu);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v27, 1, v29);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    swift_errorRelease(v22);
  }
  else
  {
    swift_errorRelease(v22);
    swift_errorRelease(v22);

  }
  v30 = *(_QWORD *)(v0 + 712);
  v31 = *(_QWORD *)(v0 + 704);
  v32 = *(_QWORD *)(v0 + 696);
  v33 = *(_QWORD *)(v0 + 664);
  v34 = *(_QWORD *)(v0 + 656);
  v35 = *(_QWORD *)(v0 + 648);
  v36 = *(_QWORD *)(v0 + 640);
  v37 = *(_QWORD *)(v0 + 632);
  v38 = *(_QWORD *)(v0 + 624);
  v39 = *(_QWORD *)(v0 + 616);
  v40 = *(_QWORD *)(v0 + 608);
  v41 = *(_QWORD *)(v0 + 600);
  v43 = *(_QWORD *)(v0 + 592);
  v45 = *(_QWORD *)(v0 + 568);
  v47 = *(_QWORD *)(v0 + 552);
  v48 = *(_QWORD *)(v0 + 528);
  v49 = *(_QWORD *)(v0 + 520);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100981480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 672);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 744))(v2, *(_QWORD *)(v0 + 488), v5);
  LODWORD(v6) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1064) = v6;
  v6 = v6;
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109F008, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 864) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 872) = v9;
  v9(v8 + v7, v2, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 880) = v11;
  *v11 = v0;
  v11[1] = sub_100981570;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 568), sub_10007CC00, v8, *(_QWORD *)(v0 + 560));
}

uint64_t sub_100981570()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 880));
  swift_release();
  return swift_task_switch(sub_1009815D0, 0, 0);
}

uint64_t sub_1009815D0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 568);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 584) + 48))(v1, 1, *(_QWORD *)(v0 + 576)) == 1)
  {
    sub_100004048(v1, &qword_1010EE0E0);
    v2 = sub_100986460();
    v3 = swift_allocError(&type metadata for CircleTrustServiceError, v2, 0, 0);
    *v4 = 7;
    swift_willThrow(v3);
    swift_release();
    swift_release();
    v5 = swift_errorRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      v10 = _convertErrorToNSError(_:)(v3);
      *(_QWORD *)(v0 + 440) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v8 + 4, v8 + 12);
      *v9 = v10;
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error in handleCircleRequested: %@", v8, 0xCu);
      v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
    v14 = *(_QWORD *)(v0 + 712);
    v15 = *(_QWORD *)(v0 + 704);
    v16 = *(_QWORD *)(v0 + 696);
    v17 = *(_QWORD *)(v0 + 664);
    v18 = *(_QWORD *)(v0 + 656);
    v19 = *(_QWORD *)(v0 + 648);
    v20 = *(_QWORD *)(v0 + 640);
    v21 = *(_QWORD *)(v0 + 632);
    v22 = *(_QWORD *)(v0 + 624);
    v23 = *(_QWORD *)(v0 + 616);
    v24 = *(_QWORD *)(v0 + 608);
    v25 = *(_QWORD *)(v0 + 600);
    v26 = *(_QWORD *)(v0 + 592);
    v27 = *(_QWORD *)(v0 + 568);
    v28 = *(_QWORD *)(v0 + 552);
    v29 = *(_QWORD *)(v0 + 528);
    v30 = *(_QWORD *)(v0 + 520);
    swift_task_dealloc(*(_QWORD *)(v0 + 720));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1000126EC(v1, *(_QWORD *)(v0 + 648), type metadata accessor for OwnerSharingCircle);
    v12 = (_QWORD *)swift_task_alloc(dword_101112094);
    *(_QWORD *)(v0 + 888) = v12;
    *v12 = v0;
    v12[1] = sub_1009818F8;
    return sub_100AAF5B4(*(_BYTE *)(v0 + 1078), *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 512));
  }
}

uint64_t sub_1009818F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 888);
  *(_QWORD *)(v3 + 896) = a1;
  *(_QWORD *)(v3 + 904) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100983838;
  else
    v5 = sub_100981968;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100981968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 896);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 544) + 80);
    sub_10005972C(v1 + ((v2 + 32) & ~v2), *(_QWORD *)(v0 + 528), type metadata accessor for OwnerPeerTrust);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = *(_QWORD *)(v0 + 544);
  v5 = *(_QWORD *)(v0 + 536);
  v6 = *(_QWORD *)(v0 + 528);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v3, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    v7 = *(_QWORD *)(v0 + 648);
    sub_100004048(*(_QWORD *)(v0 + 528), (uint64_t *)&unk_1010EE160);
    v8 = sub_100986460();
    v9 = swift_allocError(&type metadata for CircleTrustServiceError, v8, 0, 0);
    *v10 = 7;
    swift_willThrow(v9);
    swift_release();
    swift_release();
    sub_1000126B0(v7, type metadata accessor for OwnerSharingCircle);
    v11 = swift_errorRetain(v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      v16 = _convertErrorToNSError(_:)(v9);
      *(_QWORD *)(v0 + 440) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v14 + 4, v14 + 12);
      *v15 = v16;
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error in handleCircleRequested: %@", v14, 0xCu);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v9);
    }
    else
    {
      swift_errorRelease(v9);
      swift_errorRelease(v9);

    }
    v21 = *(_QWORD *)(v0 + 712);
    v22 = *(_QWORD *)(v0 + 704);
    v23 = *(_QWORD *)(v0 + 696);
    v24 = *(_QWORD *)(v0 + 664);
    v25 = *(_QWORD *)(v0 + 656);
    v26 = *(_QWORD *)(v0 + 648);
    v27 = *(_QWORD *)(v0 + 640);
    v28 = *(_QWORD *)(v0 + 632);
    v29 = *(_QWORD *)(v0 + 624);
    v30 = *(_QWORD *)(v0 + 616);
    v31 = *(_QWORD *)(v0 + 608);
    v32 = *(_QWORD *)(v0 + 600);
    v33 = *(_QWORD *)(v0 + 592);
    v34 = *(_QWORD *)(v0 + 568);
    v35 = *(_QWORD *)(v0 + 552);
    v36 = *(_QWORD *)(v0 + 528);
    v37 = *(_QWORD *)(v0 + 520);
    swift_task_dealloc(*(_QWORD *)(v0 + 720));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 576);
    sub_1000126EC(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 552), type metadata accessor for OwnerPeerTrust);
    sub_1008A43D0();
    sub_1008A4414();
    v19 = static CaseIterable<>.allMembers.getter();
    *(_QWORD *)(v0 + 912) = sub_1006411D4((uint64_t)&off_10104DDE0, v19);
    *(_DWORD *)(v0 + 1068) = *(_DWORD *)(v18 + 24);
    return swift_task_switch(sub_100981D28, *(_QWORD *)(v0 + 792), 0);
  }
}

uint64_t sub_100981D28()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 872);
  v3 = *(unsigned __int8 *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 792);
  v5 = *(_QWORD *)(v0 + 712);
  v6 = *(_QWORD *)(v0 + 688);
  v7 = *(_QWORD *)(v0 + 672);
  v8 = v3 | 7;
  v9 = (v3 + 24) & ~v3;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 744))(v5, *(_QWORD *)(v0 + 648) + *(int *)(v0 + 1068), v7);
  v10 = (v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_10109F030, v10 + 8, v8);
  *(_QWORD *)(v0 + 920) = v11;
  *(_QWORD *)(v11 + 16) = v4;
  v2(v11 + v9, v5, v7);
  *(_QWORD *)(v11 + v10) = v1;
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 928) = v13;
  *v13 = v0;
  v13[1] = sub_100981E44;
  return unsafeBlocking<A>(_:)(v0 + 368, sub_1000DAC7C, v11, *(_QWORD *)(v0 + 824));
}

uint64_t sub_100981E44()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 928));
  swift_release();
  return swift_task_switch(sub_100981EA0, *(_QWORD *)(v1 + 792), 0);
}

uint64_t sub_100981EA0()
{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 936) = *(_QWORD *)(v0 + 368);
  return swift_task_switch(sub_100981EE4, 0, 0);
}

uint64_t sub_100981EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112[2];

  v1 = *(_QWORD *)(v0 + 936);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = (unint64_t *)swift_task_alloc(32);
  v4[2] = v3;
  swift_bridgeObjectRetain(v1);
  v5 = sub_10008B4C0((uint64_t (*)(char *))sub_100986AC8, v4, v1);
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6)
  {
    v7 = swift_bridgeObjectRelease();
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Already requested by the sharee.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 648);
    v12 = *(_QWORD *)(v0 + 552);

    swift_release();
    swift_release();
    sub_1000126B0(v11, type metadata accessor for OwnerSharingCircle);
    sub_1000126B0(v12, type metadata accessor for OwnerPeerTrust);
    goto LABEL_14;
  }
  v13 = *(unsigned __int8 *)(v0 + 1064);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 744);
  v15 = *(_QWORD *)(v0 + 680);
  v16 = *(_QWORD *)(v0 + 672);
  v17 = *(_QWORD *)(v0 + 552);
  v18 = *(_QWORD *)(v0 + 536);
  v19 = sub_10001A9A8(&qword_1011003C0);
  v20 = *(_QWORD *)(v15 + 72);
  v21 = (v13 + 32) & ~v13;
  v22 = swift_allocObject(v19, v20 + v21, v13 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
  v23 = v22 + v21;
  v14(v23, v17 + *(int *)(v18 + 20), v16);
  v24 = sub_1003B9FE0(v22);
  swift_setDeallocating(v22);
  swift_arrayDestroy(v23, 1, v16);
  swift_deallocClassInstance(v22, 32, 7);
  if (!v24[2])
  {
    v36 = *(_QWORD *)(v0 + 680);
    v37 = *(_QWORD *)(v0 + 672);
    v38 = type metadata accessor for BeaconSharingCircleTransformer.Error(0);
    v39 = sub_100006C64(&qword_1010EC8F0, 255, type metadata accessor for BeaconSharingCircleTransformer.Error, (uint64_t)&unk_100E2DAE0);
    v27 = swift_allocError(v38, v39, 0, 0);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v40, 1, 1, v37);
    swift_willThrow(v41);
LABEL_11:
    v42 = *(_QWORD *)(v0 + 552);
    sub_1000126B0(*(_QWORD *)(v0 + 648), type metadata accessor for OwnerSharingCircle);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_1000126B0(v42, type metadata accessor for OwnerPeerTrust);
    v43 = swift_errorRetain(v27);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v46 = 138412290;
      v48 = _convertErrorToNSError(_:)(v27);
      *(_QWORD *)(v0 + 440) = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v46 + 4, v46 + 12);
      *v47 = v48;
      swift_errorRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Error in handleCircleRequested: %@", v46, 0xCu);
      v49 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v47, 1, v49);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      swift_errorRelease(v27);
    }
    else
    {
      swift_errorRelease(v27);
      swift_errorRelease(v27);

    }
LABEL_14:
    v50 = *(_QWORD *)(v0 + 712);
    v51 = *(_QWORD *)(v0 + 704);
    v52 = *(_QWORD *)(v0 + 696);
    v53 = *(_QWORD *)(v0 + 664);
    v54 = *(_QWORD *)(v0 + 656);
    v55 = *(_QWORD *)(v0 + 648);
    v56 = *(_QWORD *)(v0 + 640);
    v57 = *(_QWORD *)(v0 + 632);
    v58 = *(_QWORD *)(v0 + 624);
    v99 = *(_QWORD *)(v0 + 616);
    v101 = *(_QWORD *)(v0 + 608);
    v102 = *(_QWORD *)(v0 + 600);
    v104 = *(_QWORD *)(v0 + 592);
    v105 = *(_QWORD *)(v0 + 568);
    v106 = *(_QWORD *)(v0 + 552);
    v109 = *(_QWORD *)(v0 + 528);
    v110 = *(_QWORD *)(v0 + 520);
    swift_task_dealloc(*(_QWORD *)(v0 + 720));
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v25 = sub_1001EFBE8(*(_QWORD *)(v0 + 648) + *(int *)(v0 + 1068), (unint64_t)v24, 2, *(_QWORD *)(v0 + 936), 0, 2, 2);
  v27 = v2;
  *(_QWORD *)(v0 + 944) = v25;
  if (v2)
    goto LABEL_11;
  v28 = v26;
  v29 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v28 + 16);
  v31 = v28;
  v100 = v29;
  if (v30)
  {
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(22, -1);
      *(_DWORD *)v35 = 134218240;
      *(_QWORD *)(v0 + 472) = *(_QWORD *)(v31 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 472, v0 + 480, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2048;
      *(_QWORD *)(v0 + 480) = *(_QWORD *)(v29 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 480, v0 + 488, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Not empty circlesToDelete list on share request transformation! Count of items to delete: %ld, items to create: %ld", (uint8_t *)v35, 0x16u);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

  }
  v103 = v31;
  v60 = *(_QWORD *)(v29 + 16);
  *(_QWORD *)(v0 + 952) = v60;
  if (v60)
  {
    v61 = *(_QWORD *)(v0 + 584);
    v62 = v29;
    v63 = v29 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    v64 = *(_QWORD *)(v61 + 72);
    swift_bridgeObjectRetain(v62);
    v111 = v30;
    v107 = v64;
    do
    {
      v65 = *(_QWORD *)(v0 + 640);
      v66 = *(_QWORD *)(v0 + 632);
      sub_10005972C(v63, v65, type metadata accessor for OwnerSharingCircle);
      v67 = sub_10005972C(v65, v66, type metadata accessor for OwnerSharingCircle);
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.default.getter(v68);
      if (os_log_type_enabled(v68, v69))
      {
        v70 = *(_QWORD *)(v0 + 672);
        v71 = *(_QWORD *)(v0 + 632);
        v72 = swift_slowAlloc(22, -1);
        v73 = swift_slowAlloc(32, -1);
        v112[0] = v73;
        *(_DWORD *)v72 = 141558275;
        *(_QWORD *)(v72 + 4) = 1752392040;
        *(_WORD *)(v72 + 12) = 2081;
        v74 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v75 = v70;
        v30 = v111;
        v76 = dispatch thunk of CustomStringConvertible.description.getter(v75, v74);
        *(_QWORD *)(v72 + 14) = sub_100016940(v76, v77, v112);
        swift_bridgeObjectRelease();
        sub_1000126B0(v71, type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "Data update on circle request. Create %{private,mask.hash}s", (uint8_t *)v72, 0x16u);
        swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
        v78 = v73;
        v64 = v107;
        swift_slowDealloc(v78, -1, -1);
        swift_slowDealloc(v72, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v0 + 632), type metadata accessor for OwnerSharingCircle);
      }

      sub_1000126B0(*(_QWORD *)(v0 + 640), type metadata accessor for OwnerSharingCircle);
      v63 += v64;
      --v60;
    }
    while (v60);
    v29 = v100;
    swift_bridgeObjectRelease();
  }
  v79 = v103;
  if (v30)
  {
    v80 = *(_QWORD *)(v0 + 584);
    v81 = v103 + ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80));
    v82 = *(_QWORD *)(v80 + 72);
    swift_bridgeObjectRetain(v103);
    v108 = v82;
    do
    {
      v83 = *(_QWORD *)(v0 + 624);
      v84 = *(_QWORD *)(v0 + 616);
      sub_10005972C(v81, v83, type metadata accessor for OwnerSharingCircle);
      v85 = sub_10005972C(v83, v84, type metadata accessor for OwnerSharingCircle);
      v86 = Logger.logObject.getter(v85);
      v87 = static os_log_type_t.default.getter(v86);
      if (os_log_type_enabled(v86, v87))
      {
        v88 = v30;
        v89 = *(_QWORD *)(v0 + 672);
        v90 = *(_QWORD *)(v0 + 616);
        v91 = swift_slowAlloc(22, -1);
        v92 = swift_slowAlloc(32, -1);
        v112[0] = v92;
        *(_DWORD *)v91 = 141558275;
        *(_QWORD *)(v91 + 4) = 1752392040;
        *(_WORD *)(v91 + 12) = 2081;
        v93 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v94 = v89;
        v30 = v88;
        v95 = dispatch thunk of CustomStringConvertible.description.getter(v94, v93);
        *(_QWORD *)(v91 + 14) = sub_100016940(v95, v96, v112);
        swift_bridgeObjectRelease();
        sub_1000126B0(v90, type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Data update on circle request. Delete %{private,mask.hash}s", (uint8_t *)v91, 0x16u);
        swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
        v97 = v92;
        v82 = v108;
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v91, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v0 + 616), type metadata accessor for OwnerSharingCircle);
      }

      sub_1000126B0(*(_QWORD *)(v0 + 624), type metadata accessor for OwnerSharingCircle);
      v81 += v82;
      --v30;
    }
    while (v30);
    v79 = v103;
    swift_bridgeObjectRelease();
    v29 = v100;
  }
  v98 = *(_QWORD *)(v0 + 520);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v29);
  sub_100ADB044(v79, v29, v98);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100982948, *(_QWORD *)(v0 + 792), 0);
}

uint64_t sub_100982948()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 960) = *(_QWORD *)(*(_QWORD *)(v0 + 792) + 128);
  return swift_task_switch(sub_100982968, 0, 0);
}

uint64_t sub_100982968()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[120];
  v2 = v0[65];
  v3 = swift_task_alloc(32);
  v0[121] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[122] = v4;
  *v4 = v0;
  v4[1] = sub_100982A0C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_1000682F8, v3, &type metadata for () + 1);
}

uint64_t sub_100982A0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 976);
  *(_QWORD *)(*v1 + 984) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100982B1C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 968));
    v4 = sub_100982A78;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100982A78()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 176);
    sub_10001AA44((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 992) = v2;
    *v2 = v0;
    v2[1] = sub_100982E30;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100982B1C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 968));
  return swift_task_switch(sub_100982B58, *(_QWORD *)(v0 + 792), 0);
}

uint64_t sub_100982B58()
{
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100982B94, 0, 0);
}

uint64_t sub_100982B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 648);
  v2 = *(_QWORD *)(v0 + 552);
  v3 = *(_QWORD *)(v0 + 520);
  swift_release();
  swift_release();
  sub_100004048(v3, &qword_1010EC870);
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v2, type metadata accessor for OwnerPeerTrust);
  v4 = *(_QWORD *)(v0 + 984);
  v5 = swift_errorRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v4);
    *(_QWORD *)(v0 + 440) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error in handleCircleRequested: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  v12 = *(_QWORD *)(v0 + 712);
  v13 = *(_QWORD *)(v0 + 704);
  v14 = *(_QWORD *)(v0 + 696);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 656);
  v17 = *(_QWORD *)(v0 + 648);
  v18 = *(_QWORD *)(v0 + 640);
  v19 = *(_QWORD *)(v0 + 632);
  v20 = *(_QWORD *)(v0 + 624);
  v22 = *(_QWORD *)(v0 + 616);
  v23 = *(_QWORD *)(v0 + 608);
  v24 = *(_QWORD *)(v0 + 600);
  v25 = *(_QWORD *)(v0 + 592);
  v26 = *(_QWORD *)(v0 + 568);
  v27 = *(_QWORD *)(v0 + 552);
  v28 = *(_QWORD *)(v0 + 528);
  v29 = *(_QWORD *)(v0 + 520);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100982E30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 992);
  *(_QWORD *)(*(_QWORD *)v1 + 1000) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100982E8C, 0, 0);
}

uint64_t sub_100982E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t (*v5)(void);

  v1 = *(_QWORD *)(v0 + 1000);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 1000);
    swift_retain();
    return swift_task_switch(sub_100982F70, v2, 0);
  }
  else
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 16, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 40))
    {
      sub_10000F9FC((__int128 *)(v0 + 16), v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v5 = (uint64_t (*)(void))((char *)&dword_1010EBBB8 + dword_1010EBBB8);
      v4 = (_QWORD *)swift_task_alloc(unk_1010EBBBC);
      *(_QWORD *)(v0 + 1008) = v4;
      *v4 = v0;
      v4[1] = sub_1009830C0;
      return v5();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100982F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 1000);
  type metadata accessor for Transaction(0);
  v2 = swift_allocObject(&unk_10109EEC8, 24, 7);
  swift_weakInit(v2 + 16, v1);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE250, v2);
  swift_release_n(v2, 2);
  swift_release();
  return swift_task_switch(sub_10098301C, 0, 0);
}

uint64_t sub_10098301C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 16, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 40))
  {
    sub_10000F9FC((__int128 *)(v0 + 16), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBBB8 + dword_1010EBBB8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBBC);
    *(_QWORD *)(v0 + 1008) = v2;
    *v2 = v0;
    v2[1] = sub_1009830C0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009830C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1008);
  *(_QWORD *)(*(_QWORD *)v1 + 1016) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10098311C, 0, 0);
}

uint64_t sub_10098311C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (!*(_QWORD *)(v0 + 1016))
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    if (qword_1010E9FD0 == -1)
    {
LABEL_16:
      v20 = sub_10001A9E8(*(_QWORD *)(v0 + 728), (uint64_t)qword_1011B7860);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "No ItemSharingNotificationsService available!", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }
      v24 = *(_QWORD *)(v0 + 648);
      v25 = *(_QWORD *)(v0 + 552);
      v26 = *(_QWORD *)(v0 + 520);

      goto LABEL_20;
    }
LABEL_22:
    swift_once(&qword_1010E9FD0, sub_1008973A4);
    goto LABEL_16;
  }
  v1 = *(_QWORD *)(v0 + 952);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if (v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(v0 + 584);
    v4 = *(_QWORD *)(v0 + 576);
    v43 = v4;
    while (1)
    {
      v5 = *(_QWORD *)(v0 + 944);
      if (v2 >= *(_QWORD *)(v5 + 16))
        break;
      v6 = *(_QWORD *)(v0 + 608);
      v7 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v8 = *(_QWORD *)(v3 + 72);
      sub_10005972C(v5 + v7 + v8 * v2, v6, type metadata accessor for OwnerSharingCircle);
      v9 = *(_QWORD *)(v0 + 608);
      if (*(_BYTE *)(v6 + *(int *)(v4 + 28)) == 2)
      {
        sub_1000126EC(v9, *(_QWORD *)(v0 + 600), type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A520(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v11 = _swiftEmptyArrayStorage[2];
        v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1)
          sub_10009A520(v10 > 1, v11 + 1, 1);
        v12 = *(_QWORD *)(v0 + 600);
        _swiftEmptyArrayStorage[2] = v11 + 1;
        sub_1000126EC(v12, (uint64_t)_swiftEmptyArrayStorage + v7 + v11 * v8, type metadata accessor for OwnerSharingCircle);
        v4 = v43;
      }
      else
      {
        sub_1000126B0(v9, type metadata accessor for OwnerSharingCircle);
      }
      if (++v2 == *(_QWORD *)(v0 + 952))
        goto LABEL_13;
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 1024) = _swiftEmptyArrayStorage;
  v13 = _swiftEmptyArrayStorage[2];
  *(_QWORD *)(v0 + 1032) = v13;
  if (v13)
  {
    v14 = *(_QWORD *)(v0 + 584);
    v15 = *(_QWORD *)(v0 + 512);
    v16 = *(unsigned __int8 *)(v0 + 1078);
    v17 = *(_DWORD *)(v14 + 80);
    *(_DWORD *)(v0 + 1072) = v17;
    *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v0 + 1048) = 0;
    sub_10005972C((uint64_t)_swiftEmptyArrayStorage + ((v17 + 32) & ~(unint64_t)v17), *(_QWORD *)(v0 + 592), type metadata accessor for OwnerSharingCircle);
    v18 = (_QWORD *)swift_task_alloc(dword_10110B664);
    *(_QWORD *)(v0 + 1056) = v18;
    *v18 = v0;
    v18[1] = sub_100983570;
    return sub_100899D48(*(_QWORD *)(v0 + 592), v16, *(_QWORD *)(v0 + 504), v15);
  }
  v24 = *(_QWORD *)(v0 + 648);
  v25 = *(_QWORD *)(v0 + 552);
  v26 = *(_QWORD *)(v0 + 520);
  swift_release();
  swift_release();
LABEL_20:
  swift_release();
  swift_release();
  swift_release();
  sub_100004048(v26, &qword_1010EC870);
  sub_1000126B0(v24, type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v25, type metadata accessor for OwnerPeerTrust);
  v27 = *(_QWORD *)(v0 + 712);
  v28 = *(_QWORD *)(v0 + 704);
  v29 = *(_QWORD *)(v0 + 696);
  v30 = *(_QWORD *)(v0 + 664);
  v31 = *(_QWORD *)(v0 + 656);
  v32 = *(_QWORD *)(v0 + 648);
  v33 = *(_QWORD *)(v0 + 640);
  v34 = *(_QWORD *)(v0 + 632);
  v35 = *(_QWORD *)(v0 + 624);
  v36 = *(_QWORD *)(v0 + 616);
  v37 = *(_QWORD *)(v0 + 608);
  v38 = *(_QWORD *)(v0 + 600);
  v39 = *(_QWORD *)(v0 + 592);
  v40 = *(_QWORD *)(v0 + 568);
  v41 = *(_QWORD *)(v0 + 552);
  v42 = *(_QWORD *)(v0 + 528);
  v44 = *(_QWORD *)(v0 + 520);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100983570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 1056));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_1009870D8;
  }
  else
  {
    v2 = sub_1009835DC;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1009835DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 1032);
  v2 = *(_QWORD *)(v0 + 1048) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 592), type metadata accessor for OwnerSharingCircle);
  if (v2 == v1)
  {
    v3 = *(_QWORD *)(v0 + 648);
    v4 = *(_QWORD *)(v0 + 552);
    v5 = *(_QWORD *)(v0 + 520);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100004048(v5, &qword_1010EC870);
    sub_1000126B0(v3, type metadata accessor for OwnerSharingCircle);
    sub_1000126B0(v4, type metadata accessor for OwnerPeerTrust);
    v6 = *(_QWORD *)(v0 + 712);
    v7 = *(_QWORD *)(v0 + 704);
    v8 = *(_QWORD *)(v0 + 696);
    v9 = *(_QWORD *)(v0 + 664);
    v10 = *(_QWORD *)(v0 + 656);
    v11 = *(_QWORD *)(v0 + 648);
    v12 = *(_QWORD *)(v0 + 640);
    v13 = *(_QWORD *)(v0 + 632);
    v14 = *(_QWORD *)(v0 + 624);
    v20 = *(_QWORD *)(v0 + 616);
    v21 = *(_QWORD *)(v0 + 608);
    v22 = *(_QWORD *)(v0 + 600);
    v23 = *(_QWORD *)(v0 + 592);
    v24 = *(_QWORD *)(v0 + 568);
    v25 = *(_QWORD *)(v0 + 552);
    v26 = *(_QWORD *)(v0 + 528);
    v27 = *(_QWORD *)(v0 + 520);
    swift_task_dealloc(*(_QWORD *)(v0 + 720));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 1048) + 1;
    *(_QWORD *)(v0 + 1048) = v16;
    v17 = *(_QWORD *)(v0 + 512);
    v18 = *(unsigned __int8 *)(v0 + 1078);
    sub_10005972C(*(_QWORD *)(v0 + 1024)+ ((*(unsigned __int8 *)(v0 + 1072) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1072))+ *(_QWORD *)(v0 + 1040) * v16, *(_QWORD *)(v0 + 592), type metadata accessor for OwnerSharingCircle);
    v19 = (_QWORD *)swift_task_alloc(dword_10110B664);
    *(_QWORD *)(v0 + 1056) = v19;
    *v19 = v0;
    v19[1] = sub_100983570;
    return sub_100899D48(*(_QWORD *)(v0 + 592), v18, *(_QWORD *)(v0 + 504), v17);
  }
}

uint64_t sub_100983838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 648);
  swift_release();
  swift_release();
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v8 = _convertErrorToNSError(_:)(v2);
    *(_QWORD *)(v0 + 440) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error in handleCircleRequested: %@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v10 = *(_QWORD *)(v0 + 712);
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 696);
  v13 = *(_QWORD *)(v0 + 664);
  v14 = *(_QWORD *)(v0 + 656);
  v15 = *(_QWORD *)(v0 + 648);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 632);
  v18 = *(_QWORD *)(v0 + 624);
  v20 = *(_QWORD *)(v0 + 616);
  v21 = *(_QWORD *)(v0 + 608);
  v22 = *(_QWORD *)(v0 + 600);
  v23 = *(_QWORD *)(v0 + 592);
  v24 = *(_QWORD *)(v0 + 568);
  v25 = *(_QWORD *)(v0 + 552);
  v26 = *(_QWORD *)(v0 + 528);
  v27 = *(_QWORD *)(v0 + 520);
  swift_task_dealloc(*(_QWORD *)(v0 + 720));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_100983AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v11[4];

  v4 = type metadata accessor for OwnerSharingCircle(0);
  v5 = *(_QWORD *)(a1 + *(int *)(v4 + 32));
  v11[2] = a2;
  swift_bridgeObjectRetain(v5);
  v7 = sub_100986D6C(v6, (uint64_t (*)(char *, _QWORD))sub_100986AE4, (uint64_t)v11);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 16);
  swift_release();
  return *(_BYTE *)(a1 + *(int *)(v4 + 36)) == 2 && v8 != 0;
}

uint64_t sub_100983B50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_100983B68, v1, 0);
}

uint64_t sub_100983B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B79B8);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = sub_1003D0C34();
    swift_bridgeObjectRetain(v7);
    v12 = Set.description.getter(v11, &type metadata for MessagingAccount, v10);
    v14 = v13;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = sub_100016940(v12, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Messaging accounts changed. Accounts: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100983D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_100983D68, v1, 0);
}

uint64_t sub_100983D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B79B8);
  swift_bridgeObjectRetain_n(v1, 4);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(32, -1);
    v17 = v16;
    *(_DWORD *)v8 = 136315394;
    v9 = sub_100985328();
    swift_bridgeObjectRetain(v7);
    v11 = Set.description.getter(v10, &type metadata for MessagingDevice, v9);
    v13 = v12;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = sub_100016940(v11, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v7, 2);
    *(_WORD *)(v8 + 12) = 2048;
    v14 = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Messaging devices changed. Devices: %s, count: %ld.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 4);
  }

  *(_QWORD *)(*(_QWORD *)(v0 + 32) + 144) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100983F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10110DEE0 + dword_10110DEE0);
  v11 = (_QWORD *)swift_task_alloc(unk_10110DEE4);
  *(_QWORD *)(v6 + 16) = v11;
  *v11 = v6;
  v11[1] = sub_100004A74;
  return v13(a3, a4, a5, a6);
}

uint64_t sub_100984010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = a6[1];
  v14 = a6[2];
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10110DDF8 + dword_10110DDF8);
  v15 = a6[3];
  v16 = *(unsigned __int8 *)a6;
  v17 = (_QWORD *)swift_task_alloc(unk_10110DDFC);
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_100004A74;
  return v19(a3, a4, a5, v16, v13, v14, v15, a7, a8);
}

uint64_t sub_1009840C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_10110DDF4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[3] = a1;
  return swift_task_switch(sub_100983B68, v4, 0);
}

uint64_t sub_10098412C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_10110DDE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[3] = a1;
  v5[4] = v4;
  return swift_task_switch(sub_100983D68, v4, 0);
}

uint64_t sub_100984190(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_10110DDB8, a2, (uint64_t (*)(uint64_t))type metadata accessor for CircleTrustService, (uint64_t)&unk_100E56288);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1009841CC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1009841F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110DDCC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_10096FAA8(a1, v4, v5, v6);
}

uint64_t sub_100984270()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B79D0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B79D0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100E561F0);
}

void sub_1009842F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v3);
  __asm { BR              X12 }
}

void sub_100984858(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8(&qword_1010EE0E0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for OwnerSharingCircle(0);
  __chkstk_darwin(v3);
  __asm { BR              X12 }
}

void sub_100984DC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v3);
  __asm { BR              X12 }
}

unint64_t sub_100985328()
{
  unint64_t result;

  result = qword_10110DDE8;
  if (!qword_10110DDE8)
  {
    result = swift_getWitnessTable(byte_100E5A44C, &type metadata for MessagingDevice);
    atomic_store(result, &qword_10110DDE8);
  }
  return result;
}

uint64_t sub_10098536C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[6] = a3;
  v5[7] = a4;
  v5[5] = a1;
  v6 = type metadata accessor for UUID(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009853D0, v4, 0);
}

uint64_t sub_1009853D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  os_log_type_t type;
  uint64_t v22;
  uint64_t v23;

  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B79B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_bridgeObjectRetain_n(v5, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  if (v10)
  {
    v20 = *(_QWORD *)(v0 + 48);
    type = v9;
    v15 = swift_slowAlloc(32, -1);
    v22 = swift_slowAlloc(64, -1);
    v23 = v22;
    *(_DWORD *)v15 = 136446723;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 16) = sub_100016940(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v14);
    *(_WORD *)(v15 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    swift_bridgeObjectRetain(v13);
    *(_QWORD *)(v0 + 32) = sub_100016940(v20, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease_n(v13, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Message %{public}s delivered successfully from %{private,mask.hash}s.", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    swift_bridgeObjectRelease_n(v13, 2);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100985670(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)(v9 + 104) = v13;
  *(_QWORD *)(v9 + 112) = v8;
  *(_QWORD *)(v9 + 88) = a7;
  *(_QWORD *)(v9 + 96) = a8;
  *(_QWORD *)(v9 + 72) = a5;
  *(_QWORD *)(v9 + 80) = a6;
  *(_BYTE *)(v9 + 144) = a4;
  *(_QWORD *)(v9 + 56) = a2;
  *(_QWORD *)(v9 + 64) = a3;
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v9 + 120) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 128) = v11;
  *(_QWORD *)(v9 + 136) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009856E4, v8, 0);
}

uint64_t sub_1009856E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v50 = v0 + 32;
  if (qword_1010EA078 != -1)
    swift_once(&qword_1010EA078, sub_10096F978);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = sub_10001A9E8(*(_QWORD *)(v0 + 120), (uint64_t)qword_1011B79B8);
  sub_10001BBBC(v1, v2);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v1, v2);
  swift_bridgeObjectRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  if (v8)
  {
    v11 = *(_QWORD *)(v0 + 72);
    v43 = *(_QWORD *)(v0 + 64);
    v44 = *(_QWORD *)(v0 + 56);
    v12 = *(_BYTE *)(v0 + 144);
    v48 = v4;
    v13 = swift_slowAlloc(32, -1);
    v46 = swift_slowAlloc(64, -1);
    v51 = v46;
    *(_DWORD *)v13 = 136446723;
    sub_10001BBBC(v10, v9);
    sub_1003B0B0C(v12, v11, v10, v9);
    v15 = v14;
    v17 = v16;
    sub_10001BC14(v10, v9);
    *(_QWORD *)(v0 + 32) = sub_100016940(v15, v17, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, v0 + 40, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(v10, v9);
    sub_10001BC14(v10, v9);
    *(_WORD *)(v13 + 12) = 2160;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    swift_bridgeObjectRetain(v43);
    *(_QWORD *)(v0 + 48) = sub_100016940(v44, v43, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease_n(v43, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Message %{public}s received from %{private,mask.hash}s.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    v18 = v13;
    v4 = v48;
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 64);
    sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
    sub_10001BC14(v10, v9);
    swift_bridgeObjectRelease_n(v19, 2);
  }

  v20 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 16))(*(_QWORD *)(v0 + 136), v4, *(_QWORD *)(v0 + 120));
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (!os_log_type_enabled(v21, v22))
  {
    v34 = *(_QWORD *)(v0 + 128);
    v33 = *(_QWORD *)(v0 + 136);
    v35 = *(_QWORD *)(v0 + 120);

    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    goto LABEL_10;
  }
  v23 = (uint8_t *)swift_slowAlloc(12, -1);
  v24 = swift_slowAlloc(32, -1);
  v51 = v24;
  *(_DWORD *)v23 = 136315138;
  v25 = type metadata accessor for Transaction(0);
  result = static Transaction.current.getter();
  if (result)
  {
    v45 = *(_QWORD *)(v0 + 128);
    v47 = *(_QWORD *)(v0 + 120);
    v49 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 16) = result;
    v27 = sub_100006C64(&qword_10110DE00, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Transaction, (uint64_t)&protocol conformance descriptor for Transaction);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v25, v27);
    v30 = v29;
    swift_release();
    *(_QWORD *)(v0 + 24) = sub_100016940(v28, v30, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v50, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "txn: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v49, v47);
LABEL_10:
    v36 = *(_QWORD *)(v0 + 136);
    v37 = *(_QWORD *)(v0 + 104);
    v39 = *(_QWORD *)(v0 + 88);
    v38 = *(_QWORD *)(v0 + 96);
    v41 = *(_QWORD *)(v0 + 72);
    v40 = *(_QWORD *)(v0 + 80);
    v42 = *(_BYTE *)(v0 + 144);
    sub_10096FA08(v31, v32);
    sub_1003E95F8(v42, v41, v40, v39, v38, v37);
    swift_release();
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_100985B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  void (*v13)(uint64_t, uint64_t);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 17) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v17 = v4;
  v8 = (v3 + v4 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v15 = (((((((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = v2;
  v16 = (v9 + v2 + ((v7 + v15 + 16) & ~v7)) & ~v2;
  v10 = v0 + v3;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  v12 = v11(v10, 1, v5);
  v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v12)
    v13(v10, v5);
  v13(v0 + v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + v15), *(_QWORD *)(v0 + v15 + 8));
  v13(v0 + ((v7 + v15 + 16) & ~v7), v5);
  if (!v11(v0 + v16, 1, v5))
    v13(v0 + v16, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((((((((((((((v17 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 19) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8, v18 | v7 | 7);
}

uint64_t sub_100985D94()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  char v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v6;
  v18 = *(_QWORD *)(v8 + 16);
  v19 = *(_QWORD *)(v8 + 8);
  v9 = (uint64_t *)(v0 + v7);
  v16 = v9[1];
  v17 = *v9;
  v14 = v0 + v2;
  v15 = v0 + v5;
  v10 = *(_BYTE *)v8;
  v11 = *(_BYTE *)(v0 + 16);
  v12 = (_QWORD *)swift_task_alloc(dword_10110DE0C);
  *(_QWORD *)(v20 + 16) = v12;
  *v12 = v20;
  v12[1] = sub_100004A74;
  return sub_100973D34(v11, v14, v15, v10, v19, v18, v17, v16);
}

uint64_t sub_100985FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10098603C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = v0 + v3;
  v8 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = *(_BYTE *)(v0 + 24);
  v10 = (_QWORD *)swift_task_alloc(dword_10110DE1C);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004A74;
  return sub_10097693C(v4, v9, v5, v6, v7, v8);
}

uint64_t sub_1009860E4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 5));
  swift_release(*((_QWORD *)v0 + 6));
  swift_release(*((_QWORD *)v0 + 7));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10098617C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80));
  v9 = *(unsigned __int8 *)(v0 + 24);
  v10 = (_QWORD *)swift_task_alloc(dword_10110DE2C);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004C28;
  return sub_100977168(v3, v9, v4, v5, v6, v7, v8);
}

void sub_100986238()
{
  uint64_t v0;

  sub_100ADDC30(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100986258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 31) & 0xFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v0 + 16);
  v7 = v0 + v3;
  v8 = v0 + v4;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v0 + v5);
  v12 = *(_BYTE *)v8;
  v13 = (_QWORD *)swift_task_alloc(dword_10110DE44);
  *(_QWORD *)(v1 + 16) = v13;
  *v13 = v1;
  v13[1] = sub_100004A74;
  return sub_100979178(v6, v7, v12, v9, v10, v11);
}

uint64_t sub_10098630C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 16));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1009863A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = v0 + v4;
  v8 = *(_QWORD *)(v0 + v5);
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(_BYTE *)v7;
  v12 = (_QWORD *)swift_task_alloc(dword_10110DE54);
  *(_QWORD *)(v1 + 16) = v12;
  *v12 = v1;
  v12[1] = sub_100004A74;
  return sub_100979368(v6, v11, v9, v10, v8);
}

unint64_t sub_100986460()
{
  unint64_t result;

  result = qword_10110DE68;
  if (!qword_10110DE68)
  {
    result = swift_getWitnessTable(aA_43, &type metadata for CircleTrustServiceError);
    atomic_store(result, &qword_10110DE68);
  }
  return result;
}

void sub_1009864A4()
{
  uint64_t v0;

  sub_100984858(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1009864E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10110DE74);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_10097BB1C(a1, a2, v2);
}

BOOL sub_100986548(uint64_t a1)
{
  uint64_t v1;

  return sub_10097BC6C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100986564()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10098658C(uint64_t a1)
{
  uint64_t v1;

  return sub_10097BA34(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_100986594()
{
  unint64_t result;

  result = qword_10110DE80;
  if (!qword_10110DE80)
  {
    result = swift_getWitnessTable(byte_100E5D300, &type metadata for CloudKitChangeSet.Error);
    atomic_store(result, &qword_10110DE80);
  }
  return result;
}

uint64_t sub_1009865DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 16));
  return swift_deallocObject(v0, ((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100986678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 31) & 0xFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v0 + 16);
  v7 = v0 + v3;
  v8 = v0 + v4;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v0 + v5);
  v12 = *(_BYTE *)v8;
  v13 = (_QWORD *)swift_task_alloc(dword_10110DE8C);
  *(_QWORD *)(v1 + 16) = v13;
  *v13 = v1;
  v13[1] = sub_100004A74;
  return sub_10097BF18(v6, v7, v12, v9, v10, v11);
}

uint64_t sub_100986730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + v4);
  v7 = v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_BYTE *)v7;
  v11 = (_QWORD *)swift_task_alloc(dword_10110DE9C);
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_100004A74;
  return sub_10097C10C(v5, v6, v10, v8, v9);
}

unint64_t sub_1009867F4()
{
  unint64_t result;

  result = qword_10110DEB8;
  if (!qword_10110DEB8)
  {
    result = swift_getWitnessTable(aI_39, &type metadata for ShareType);
    atomic_store(result, &qword_10110DEB8);
  }
  return result;
}

uint64_t sub_100986838()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100986864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_10110DEC4);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004C28;
  *(_OWORD *)(v2 + 160) = v3;
  return swift_task_switch(sub_10097EE60, 0, 0);
}

uint64_t sub_1009868C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 16));
  return swift_deallocObject(v0, ((v7 + 31) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100986960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + v4);
  v7 = v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_BYTE *)v7;
  v11 = (_QWORD *)swift_task_alloc(dword_10110DED4);
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_100004A74;
  return sub_10097FB18(v5, v6, v10, v8, v9);
}

BOOL sub_100986A1C(unsigned __int8 *a1)
{
  uint64_t v1;

  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

uint64_t sub_100986A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

BOOL sub_100986AC8(uint64_t a1)
{
  uint64_t v1;

  return sub_100983AAC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100986AE4(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = type metadata accessor for OwnerPeerTrust(0);
  return static UUID.== infix(_:_:)(a1, v5 + *(int *)(v6 + 20)) & (v4 == 2);
}

uint64_t sub_100986B34(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t (*v27)(char *, _QWORD);

  v22 = a2;
  v27 = a4;
  v23 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v11 = *(_QWORD *)(a3 + 64);
  v24 = 0;
  v25 = a3 + 64;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v26)
      return sub_10041C2BC(v23, v22, v24, (_QWORD *)a3);
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v26)
        return sub_10041C2BC(v23, v22, v24, (_QWORD *)a3);
      v19 = *(_QWORD *)(v25 + 8 * v10);
      if (!v19)
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v26)
          return sub_10041C2BC(v23, v22, v24, (_QWORD *)a3);
        v19 = *(_QWORD *)(v25 + 8 * v10);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v14 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v6 + 72) * v16, v5);
    v17 = v27(v9, *(unsigned __int8 *)(*(_QWORD *)(a3 + 56) + v16));
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if ((v17 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return sub_10041C2BC(v23, v22, v24, (_QWORD *)a3);
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v26)
    return sub_10041C2BC(v23, v22, v24, (_QWORD *)a3);
  v19 = *(_QWORD *)(v25 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v26)
      return sub_10041C2BC(v23, v22, v24, (_QWORD *)a3);
    v19 = *(_QWORD *)(v25 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100986D6C(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v6 = isStackAllocationSafe;
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = v7 & 0x3F;
  v9 = (1 << v7) + 63;
  v10 = v9 >> 6;
  v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    v12 = sub_100986B34((unint64_t *)((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0)), v10, v6, a2);
    if (v3)
      swift_willThrow(v12);
    else
      return v12;
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v11, -1);
    bzero(v13, v11);
    a3 = sub_100986B34((unint64_t *)v13, v10, v6, a2);
    swift_slowDealloc(v13, -1, -1);
  }
  return a3;
}

uint64_t sub_100986EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10110DEEC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return sub_100973248(a1, a2);
}

uint64_t sub_100986F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;

  v5 = (_QWORD *)swift_task_alloc(dword_10110DF0C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v6 = (_QWORD *)swift_task_alloc(dword_10110DF2C);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_100004C28;
  return sub_1009721B8(a1, a2);
}

uint64_t storeEnumTagSinglePayload for CircleTrustServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100987010 + 4 * byte_100E561E5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100987044 + 4 * byte_100E561E0[v4]))();
}

uint64_t sub_100987044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098704C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100987054);
  return result;
}

uint64_t sub_100987060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100987068);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10098706C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100987074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustServiceError()
{
  return &type metadata for CircleTrustServiceError;
}

unint64_t sub_100987094()
{
  unint64_t result;

  result = qword_10110DF38;
  if (!qword_10110DF38)
  {
    result = swift_getWitnessTable(aY_57, &type metadata for CircleTrustServiceError);
    atomic_store(result, (unint64_t *)&qword_10110DF38);
  }
  return result;
}

uint64_t sub_1009870E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B79E8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B79E8);
  if (qword_1010EA090 != -1)
    swift_once(&qword_1010EA090, sub_100989354);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7A00);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

unint64_t sub_100987170()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 144);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 144);
  }
  else
  {
    v3 = sub_10001A9A8(&qword_1010F0E48);
    inited = swift_initStackObject(v3, &v11);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(FAFamilyUpdateNotification);
    v7 = v6;
    v8 = swift_allocObject(&unk_10109F250, 24, 7);
    swift_weakInit(v8 + 16, v0);
    v9 = swift_allocObject(&unk_10109F278, 32, 7);
    *(_QWORD *)(v9 + 16) = sub_10098AA3C;
    *(_QWORD *)(v9 + 24) = v8;
    *(_QWORD *)(inited + 32) = v5;
    *(_QWORD *)(inited + 40) = v7;
    *(_QWORD *)(inited + 48) = sub_10015A05C;
    *(_QWORD *)(inited + 56) = v9;
    v2 = sub_1006B9680(inited);
    *(_QWORD *)(v0 + 144) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_10098726C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    type metadata accessor for Transaction(0);
    swift_retain(v4);
    static Transaction.asyncTask(name:block:)("FAFamilyUpdate", 14, 2, &unk_10110E108, v4);
    return swift_release_n(v4, 2);
  }
  return result;
}

uint64_t sub_1009872F4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v1[2] = a1;
  v1[3] = *a1;
  v3 = sub_10001A9A8(&qword_1010F46C0);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10098735C, a1, 0);
}

uint64_t sub_10098735C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  if (qword_1010EA088 != -1)
    swift_once(&qword_1010EA088, sub_1009870E0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B79E8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Flushing cached familyMembers", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 32);
  v12 = *(_OWORD *)(v0 + 16);

  *(_QWORD *)(v12 + 152) = 0;
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = sub_100006C64(&qword_10110E0E0, v8, (uint64_t (*)(uint64_t))type metadata accessor for FamilyCircleService, (uint64_t)&unk_100E56420);
  v10 = swift_allocObject(&unk_10109F2A0, 48, 7);
  *(_QWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 24) = v9;
  *(_OWORD *)(v10 + 32) = v12;
  swift_retain_n(v12, 2);
  sub_100691AC0(v6, (uint64_t)&unk_10110E118, v10);
  swift_release();
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009874F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4[5] = a4;
  v6 = sub_10001A9A8(&qword_10110E120);
  v4[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[7] = v7;
  v4[8] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_10110E128);
  v4[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[10] = v9;
  v4[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)swift_task_alloc(dword_10110DF6C);
  v4[12] = v10;
  *v10 = v4;
  v10[1] = sub_1009875B4;
  v10[16] = a4;
  return swift_task_switch(sub_100987960, a4, 0);
}

uint64_t sub_1009875B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 96);
  v5 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v6 = sub_100987788;
  else
    v6 = sub_100987624;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100987624()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for Transaction(0);
  result = static Transaction.current.getter();
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 136);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(v0 + 80);
      v18 = *(_QWORD *)(v0 + 56);
      v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v7 = v5;
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
      v17 = *(_QWORD *)(v5 + 72);
      v15 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 136);
      swift_bridgeObjectRetain(v3);
      do
      {
        v8 = *(_QWORD *)(v0 + 104);
        v9 = *(_QWORD *)(v0 + 88);
        v11 = *(_QWORD *)(v0 + 64);
        v10 = *(_QWORD *)(v0 + 72);
        v12 = *(_QWORD *)(v0 + 48);
        v16(v9, v6, v10);
        *(_QWORD *)(v0 + 16) = v2;
        *(_QWORD *)(v0 + 24) = v8;
        swift_retain(v2);
        swift_bridgeObjectRetain(v8);
        AsyncStream.Continuation.yield(_:)(v0 + 16, v10);
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v11, v12);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v10);
        v6 += v17;
        --v4;
      }
      while (v4);
      v13 = *(_QWORD *)(v0 + 104);
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      v13 = *(_QWORD *)(v0 + 104);
    }
    swift_release(v2);
    swift_bridgeObjectRelease(v13);
    v14 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100987788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (qword_1010EA088 != -1)
    swift_once(&qword_1010EA088, sub_1009870E0);
  v1 = *(_QWORD *)(v0 + 112);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B79E8);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 112);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    v10 = _convertErrorToNSError(_:)(v7);
    *(_QWORD *)(v0 + 32) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching members: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 112));
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100987948()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch(sub_100987960, v0, 0);
}

uint64_t sub_100987960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v1 + 152);
  if (v2)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 152));
    v4 = static os_log_type_t.debug.getter(v3);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7D58, "Using cached FamilyCircle", 25, 2, _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  else
  {
    v6 = v0 + 16;
    v7 = objc_msgSend(objc_allocWithZone((Class)FAFetchFamilyCircleRequest), "init");
    *(_QWORD *)(v0 + 136) = v7;
    objc_msgSend(v7, "setCachePolicy:", 1);
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100987ABC;
    v8 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v9 = (_QWORD *)(v0 + 80);
    v9[1] = 0x40000000;
    v9[2] = sub_100987EBC;
    v9[3] = &unk_10109F228;
    v9[4] = v8;
    objc_msgSend(v7, "startRequestWithCompletionHandler:", v9);
    return swift_continuation_await(v6);
  }
}

uint64_t sub_100987ABC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 144) = v2;
  if (v2)
    v3 = sub_100987E7C;
  else
    v3 = sub_100987B1C;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 128), 0);
}

void sub_100987B1C()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  char **v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(void **)(v0 + 120);
  v2 = objc_msgSend(v1, "members");
  v3 = sub_10098A998();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v4);
    v43 = v1;
    v44 = v0;
    if (v5)
      goto LABEL_3;
LABEL_31:
    v8 = _swiftEmptyArrayStorage;
LABEL_32:
    v40 = *(_QWORD *)(v44 + 128);
    v41 = *(void **)(v44 + 136);
    swift_bridgeObjectRelease_n(v4, 2);
    v42 = sub_100CA9048((uint64_t)v8);
    swift_bridgeObjectRelease();

    *(_QWORD *)(v40 + 152) = v42;
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(v44 + 8))(v42);
    return;
  }
  if (v4 < 0)
    v39 = v4;
  else
    v39 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v39);
  v43 = v1;
  v44 = v0;
  if (!v5)
    goto LABEL_31;
LABEL_3:
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = v4 & 0xC000000000000001;
    v8 = _swiftEmptyArrayStorage;
    v9 = &selRef_connectedServicesChanged_;
    v45 = v4 & 0xC000000000000001;
    v46 = v5;
    do
    {
      if (v7)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      else
        v10 = *(id *)(v4 + 8 * v6 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, v9[412]);
      if (v12)
      {
        v13 = v12;
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v16 = v15;

        v17 = objc_msgSend(v11, "appleID");
        if (v17)
        {
          v18 = v17;
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          v50 = v20;
          v51 = v19;

          v49 = objc_msgSend(v11, "isMe");
          v21 = objc_msgSend(v11, "firstName");
          if (v21)
          {
            v22 = v21;
            v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
            v47 = v24;
            v48 = v23;

          }
          else
          {
            v47 = 0;
            v48 = 0;
          }
          v52 = v14;
          v25 = objc_msgSend(v11, "lastName");
          if (v25)
          {
            v26 = v25;
            v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
            v29 = v28;

          }
          else
          {
            v27 = 0;
            v29 = 0;
          }
          v30 = v4;
          v31 = objc_msgSend(v11, "fullName");
          if (v31)
          {
            v32 = v31;
            v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
            v35 = v34;

          }
          else
          {

            v33 = 0;
            v35 = 0;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
            v8 = sub_1007CA454(0, v8[2] + 1, 1, v8);
          v37 = v8[2];
          v36 = v8[3];
          if (v37 >= v36 >> 1)
            v8 = sub_1007CA454((_QWORD *)(v36 > 1), v37 + 1, 1, v8);
          v8[2] = v37 + 1;
          v38 = &v8[11 * v37];
          v38[4] = v52;
          v38[5] = v16;
          v38[6] = v51;
          v38[7] = v50;
          *((_BYTE *)v38 + 64) = v49;
          v38[9] = v48;
          v38[10] = v47;
          v38[11] = v27;
          v38[12] = v29;
          v38[13] = v33;
          v38[14] = v35;
          v4 = v30;
          v7 = v45;
          v5 = v46;
          v9 = &selRef_connectedServicesChanged_;
        }
        else
        {

          swift_bridgeObjectRelease();
        }
      }
      else
      {

      }
      ++v6;
    }
    while (v5 != v6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_100987E7C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 136);
  swift_willThrow(a1);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100987EBC(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100987F48(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = a3;
  *(_QWORD *)(v4 + 128) = v3;
  *(_QWORD *)(v4 + 112) = a2;
  *(_BYTE *)(v4 + 336) = a1;
  return swift_task_switch(sub_100987F68, 0, 0);
}

uint64_t sub_100987F68()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v1 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_100987FE8;
  return sub_100D8C77C(*(_BYTE *)(v0 + 336), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
}

uint64_t sub_100987FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*v3 + 136);
  v5 = *v3;
  *(_QWORD *)(v5 + 144) = a1;
  *(_QWORD *)(v5 + 152) = a2;
  swift_task_dealloc(v4);
  if (v2)
    return (*(uint64_t (**)(void))(v5 + 8))();
  v7 = (_QWORD *)swift_task_alloc(dword_10110DF6C);
  *(_QWORD *)(v5 + 160) = v7;
  *v7 = v5;
  v7[1] = sub_100988084;
  v8 = *(_QWORD *)(v5 + 128);
  v7[16] = v8;
  return swift_task_switch(sub_100987960, v8, 0);
}

uint64_t sub_100988084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100989128;
  else
    v5 = sub_1009880F0;
  return swift_task_switch(v5, v3[16], 0);
}

void sub_1009880F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  NSString v18;
  void *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 337) = v2;
  v3 = -1;
  v4 = -1 << v2;
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v1 + 56);
  if (!v5)
  {
    v24 = 63 - v4;
    if (v24 > 0x7F)
    {
      v25 = *(_QWORD *)(v1 + 64);
      if (v25)
      {
        v6 = 1;
LABEL_14:
        v8 = (v25 - 1) & v25;
        v7 = __clz(__rbit64(v25)) + (v6 << 6);
        goto LABEL_5;
      }
      if (v24 >= 0xC0)
      {
        v25 = *(_QWORD *)(v1 + 72);
        if (v25)
        {
          v6 = 2;
          goto LABEL_14;
        }
        if (v24 >= 0x100)
        {
          v25 = *(_QWORD *)(v1 + 80);
          if (v25)
          {
            v6 = 3;
            goto LABEL_14;
          }
          if (v24 >= 0x140)
          {
            v25 = *(_QWORD *)(v1 + 88);
            if (v25)
            {
              v6 = 4;
              goto LABEL_14;
            }
            v26 = 0;
            v27 = v24 >> 6;
            if (v27 <= 5)
              v27 = 5;
            v28 = v27 - 5;
            while (v28 != v26)
            {
              v25 = *(_QWORD *)(v1 + 96 + 8 * v26++);
              if (v25)
              {
                v6 = v26 + 4;
                goto LABEL_14;
              }
            }
          }
        }
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    v29 = sub_10098A9D4();
    v30 = swift_allocError(&type metadata for FamilyCircleServiceError, v29, 0, 0);
    *v31 = 1;
    swift_willThrow(v30);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v6 = 0;
  v7 = __clz(__rbit64(v5));
  v8 = (v5 - 1) & v5;
LABEL_5:
  *(_QWORD *)(v0 + 184) = v6;
  *(_QWORD *)(v0 + 192) = v8;
  v9 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 88 * v7);
  v10 = v9[1];
  *(_QWORD *)(v0 + 200) = v10;
  v12 = v9[2];
  v11 = v9[3];
  *(_QWORD *)(v0 + 208) = v11;
  v13 = v9[6];
  *(_QWORD *)(v0 + 216) = v13;
  v14 = v9[8];
  *(_QWORD *)(v0 + 224) = v14;
  *(_QWORD *)(v0 + 232) = v9[9];
  v15 = v9[10];
  *(_QWORD *)(v0 + 240) = v15;
  *(_QWORD *)(v0 + 72) = v12;
  *(_QWORD *)(v0 + 80) = v11;
  *(_QWORD *)(v0 + 88) = 64;
  *(_QWORD *)(v0 + 96) = 0xE100000000000000;
  v16 = sub_1000330C8();
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain_n(v11, 2);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  v17 = StringProtocol.contains<A>(_:)(v0 + 88, &type metadata for String, &type metadata for String, v16, v16);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
    v19 = (void *)IDSCopyIDForEmailAddress(v18);

    if (v19)
    {
      v20 = 0;
LABEL_10:
      *(_BYTE *)(v0 + 338) = v20;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;

      *(_QWORD *)(v0 + 248) = v23;
      *(_QWORD *)(v0 + 256) = v21;
      swift_task_switch(sub_1009883BC, 0, 0);
      return;
    }
    __break(1u);
  }
  else
  {
    v19 = (void *)IDSCopyIDForPhoneNumber(v18);

    if (v19)
    {
      v20 = 1;
      goto LABEL_10;
    }
  }
  __break(1u);
}

uint64_t sub_1009883BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = qword_1010EEF90;
  *(_QWORD *)(v0 + 264) = qword_1010EEF90;
  return swift_task_switch(sub_1009883D8, v1, 0);
}

uint64_t sub_1009883D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t inited;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_BYTE *)(v0 + 338);
  v5 = sub_10001A9A8(&qword_1010EE2B0);
  inited = swift_initStackObject(v5, v0 + 16);
  *(_QWORD *)(v0 + 272) = inited;
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_BYTE *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v3;
  v7 = *(void **)(v1 + 112);
  *(_QWORD *)(v0 + 280) = v7;
  swift_bridgeObjectRetain(v3);
  if (v7)
  {
    v8 = *(_QWORD *)(v0 + 264);
    v9 = sub_100006C64((unint64_t *)&qword_1010EEFB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for MessagingQueryController, (uint64_t)asc_100E7126C);
    v10 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 288) = v10;
    v10[2] = inited;
    v10[3] = v7;
    v10[4] = v8;
    v11 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    v12 = v7;
    v13 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 296) = v13;
    v14 = sub_10001A9A8(&qword_1010EEFB8);
    *v13 = v0;
    v13[1] = sub_1009885A0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 104, v8, v9, 0xD00000000000001CLL, 0x8000000100EC8090, sub_10098AC68, v10, v14);
  }
  else
  {
    v16 = sub_1000FE094();
    v17 = swift_allocError(&type metadata for MessagingError, v16, 0, 0);
    *v18 = 6;
    swift_willThrow(v17);
    *(_QWORD *)(v0 + 312) = v17;
    v19 = *(_QWORD *)(v0 + 272);
    swift_setDeallocating(v19);
    swift_arrayDestroy(v19 + 32, *(_QWORD *)(v19 + 16), &type metadata for MessagingDestination);
    return swift_task_switch(sub_100988878, 0, 0);
  }
}

uint64_t sub_1009885A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 296);
  *(_QWORD *)(*v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 264);
    v5 = sub_100988808;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 264);
    swift_task_dealloc(*(_QWORD *)(v2 + 288));
    v5 = sub_100988614;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100988614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  char v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 272);

  swift_setDeallocating(v1);
  swift_arrayDestroy(v1 + 32, *(_QWORD *)(v1 + 16), &type metadata for MessagingDestination);
  v2 = *(_QWORD *)(v0 + 104);
  result = sub_10001D6A8(v2);
  if ((v5 & 1) != 0)
    goto LABEL_27;
  if (*(_DWORD *)(v2 + 36) != v4)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v6 = 1 << *(_BYTE *)(v2 + 32);
  if (result == v6)
    goto LABEL_23;
  if (result < 0 || result >= v6)
    goto LABEL_17;
  if (((*(_QWORD *)(v2 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    if (v1 < 0)
      v16 = v1;
    else
      v16 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v17 = _CocoaArrayWrapper.endIndex.getter(v16);
    result = swift_bridgeObjectRelease();
    if (v17)
      goto LABEL_9;
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v0 + 128);
    v14 = sub_100988D78;
    return swift_task_switch(v14, v15, 0);
  }
  v1 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * result);
  swift_bridgeObjectRetain(v1);
  result = swift_bridgeObjectRelease();
  if ((unint64_t)v1 >> 62)
    goto LABEL_19;
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_23;
LABEL_9:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v1 + 32);
LABEL_12:
    v8 = v7;
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v8, "senderCorrelationIdentifier");

    v10 = *(_QWORD *)(v0 + 128);
    if (v9)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v13 = v12;

      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 320) = v11;
      *(_QWORD *)(v0 + 328) = v13;
      v14 = sub_100988940;
    }
    else
    {
      swift_bridgeObjectRelease();
      v14 = sub_10098AC6C;
    }
    v15 = v10;
    return swift_task_switch(v14, v15, 0);
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100988808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 288);

  swift_task_dealloc(v1);
  *(_QWORD *)(v0 + 312) = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 272);
  swift_setDeallocating(v2);
  swift_arrayDestroy(v2 + 32, *(_QWORD *)(v2 + 16), &type metadata for MessagingDestination);
  return swift_task_switch(sub_100988878, 0, 0);
}

uint64_t sub_100988878()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10098890C, v1, 0);
}

uint64_t sub_10098890C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100988940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  NSString v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;

  v1 = *(_QWORD *)(v0 + 152);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 320);
    v3 = *(_QWORD *)(v0 + 144);
    if (v2 == v3 && v1 == *(_QWORD *)(v0 + 328))
    {
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v0 + 240))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = sub_10098A9D4();
      v7 = swift_allocError(&type metadata for FamilyCircleServiceError, v6, 0, 0);
      *v8 = 2;
      swift_willThrow(v7);
      swift_release();
      goto LABEL_36;
    }
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, *(_QWORD *)(v0 + 328), v3, *(_QWORD *)(v0 + 152), 0);
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 192);
  if (v10)
  {
    v11 = (v10 - 1) & v10;
    v12 = __clz(__rbit64(v10)) | (v9 << 6);
    v13 = *(_QWORD *)(v0 + 168);
    goto LABEL_15;
  }
  v29 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  v30 = (unint64_t)((1 << *(_BYTE *)(v0 + 337)) + 63) >> 6;
  v13 = *(_QWORD *)(v0 + 168);
  if (v29 >= v30)
  {
LABEL_35:
    swift_release();
    swift_bridgeObjectRelease();
    v34 = sub_10098A9D4();
    v35 = swift_allocError(&type metadata for FamilyCircleServiceError, v34, 0, 0);
    *v36 = 1;
    swift_willThrow(v35);
LABEL_36:
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v31 = v13 + 56;
  v32 = *(_QWORD *)(v13 + 56 + 8 * v29);
  ++v9;
  if (!v32)
  {
    v9 = v29 + 1;
    if (v29 + 1 < v30)
    {
      v32 = *(_QWORD *)(v31 + 8 * v9);
      if (v32)
        goto LABEL_24;
      v9 = v29 + 2;
      if (v29 + 2 < v30)
      {
        v32 = *(_QWORD *)(v31 + 8 * v9);
        if (v32)
          goto LABEL_24;
        v33 = v29 + 3;
        if (v33 < v30)
        {
          v32 = *(_QWORD *)(v31 + 8 * v33);
          if (v32)
          {
            v9 = v33;
            goto LABEL_24;
          }
          while (1)
          {
            v9 = v33 + 1;
            if (__OFADD__(v33, 1))
              break;
            if (v9 >= v30)
              goto LABEL_35;
            v32 = *(_QWORD *)(v31 + 8 * v9);
            ++v33;
            if (v32)
              goto LABEL_24;
          }
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
      }
    }
    goto LABEL_35;
  }
LABEL_24:
  v11 = (v32 - 1) & v32;
  v12 = __clz(__rbit64(v32)) + (v9 << 6);
LABEL_15:
  *(_QWORD *)(v0 + 184) = v9;
  *(_QWORD *)(v0 + 192) = v11;
  v14 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 88 * v12);
  v15 = v14[1];
  *(_QWORD *)(v0 + 200) = v15;
  v17 = v14[2];
  v16 = v14[3];
  *(_QWORD *)(v0 + 208) = v16;
  v18 = v14[6];
  *(_QWORD *)(v0 + 216) = v18;
  v19 = v14[8];
  *(_QWORD *)(v0 + 224) = v19;
  *(_QWORD *)(v0 + 232) = v14[9];
  v20 = v14[10];
  *(_QWORD *)(v0 + 240) = v20;
  *(_QWORD *)(v0 + 72) = v17;
  *(_QWORD *)(v0 + 80) = v16;
  *(_QWORD *)(v0 + 88) = 64;
  *(_QWORD *)(v0 + 96) = 0xE100000000000000;
  v21 = sub_1000330C8();
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain_n(v16, 2);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  v22 = StringProtocol.contains<A>(_:)(v0 + 88, &type metadata for String, &type metadata for String, v21, v21);
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
    v24 = (void *)IDSCopyIDForEmailAddress(v23);

    if (v24)
    {
      v25 = 0;
LABEL_20:
      *(_BYTE *)(v0 + 338) = v25;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;

      *(_QWORD *)(v0 + 248) = v28;
      *(_QWORD *)(v0 + 256) = v26;
      swift_task_switch(sub_1009883BC, 0, 0);
      return;
    }
    goto LABEL_39;
  }
  v24 = (void *)IDSCopyIDForPhoneNumber(v23);

  if (v24)
  {
    v25 = 1;
    goto LABEL_20;
  }
LABEL_40:
  __break(1u);
}

void sub_100988D78()
{
  uint64_t v0;
  int64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  NSString v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;

  if (!*(_QWORD *)(v0 + 152))
  {
    if (*(_QWORD *)(v0 + 240))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = sub_10098A9D4();
    v26 = swift_allocError(&type metadata for FamilyCircleServiceError, v25, 0, 0);
    *v27 = 2;
    swift_willThrow(v26);
    swift_release();
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  if (!v2)
  {
    v21 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    v22 = (unint64_t)((1 << *(_BYTE *)(v0 + 337)) + 63) >> 6;
    v5 = *(_QWORD *)(v0 + 168);
    if (v21 < v22)
    {
      v23 = v5 + 56;
      v24 = *(_QWORD *)(v5 + 56 + 8 * v21);
      ++v1;
      if (v24)
      {
LABEL_15:
        v3 = (v24 - 1) & v24;
        v4 = __clz(__rbit64(v24)) + (v1 << 6);
        goto LABEL_4;
      }
      v1 = v21 + 1;
      if (v21 + 1 < v22)
      {
        v24 = *(_QWORD *)(v23 + 8 * v1);
        if (v24)
          goto LABEL_15;
        v1 = v21 + 2;
        if (v21 + 2 < v22)
        {
          v24 = *(_QWORD *)(v23 + 8 * v1);
          if (v24)
            goto LABEL_15;
          v28 = v21 + 3;
          if (v28 < v22)
          {
            v24 = *(_QWORD *)(v23 + 8 * v28);
            if (v24)
            {
              v1 = v28;
              goto LABEL_15;
            }
            while (1)
            {
              v1 = v28 + 1;
              if (__OFADD__(v28, 1))
                break;
              if (v1 >= v22)
                goto LABEL_27;
              v24 = *(_QWORD *)(v23 + 8 * v1);
              ++v28;
              if (v24)
                goto LABEL_15;
            }
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
        }
      }
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    v29 = sub_10098A9D4();
    v30 = swift_allocError(&type metadata for FamilyCircleServiceError, v29, 0, 0);
    *v31 = 1;
    swift_willThrow(v30);
LABEL_28:
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v3 = (v2 - 1) & v2;
  v4 = __clz(__rbit64(v2)) | (v1 << 6);
  v5 = *(_QWORD *)(v0 + 168);
LABEL_4:
  *(_QWORD *)(v0 + 184) = v1;
  *(_QWORD *)(v0 + 192) = v3;
  v6 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 88 * v4);
  v7 = v6[1];
  *(_QWORD *)(v0 + 200) = v7;
  v9 = v6[2];
  v8 = v6[3];
  *(_QWORD *)(v0 + 208) = v8;
  v10 = v6[6];
  *(_QWORD *)(v0 + 216) = v10;
  v11 = v6[8];
  *(_QWORD *)(v0 + 224) = v11;
  *(_QWORD *)(v0 + 232) = v6[9];
  v12 = v6[10];
  *(_QWORD *)(v0 + 240) = v12;
  *(_QWORD *)(v0 + 72) = v9;
  *(_QWORD *)(v0 + 80) = v8;
  *(_QWORD *)(v0 + 88) = 64;
  *(_QWORD *)(v0 + 96) = 0xE100000000000000;
  v13 = sub_1000330C8();
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain_n(v8, 2);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v14 = StringProtocol.contains<A>(_:)(v0 + 88, &type metadata for String, &type metadata for String, v13, v13);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
    v16 = (void *)IDSCopyIDForPhoneNumber(v15);

    if (v16)
    {
      v17 = 1;
      goto LABEL_11;
    }
    goto LABEL_32;
  }
  v16 = (void *)IDSCopyIDForEmailAddress(v15);

  if (v16)
  {
    v17 = 0;
LABEL_11:
    *(_BYTE *)(v0 + 338) = v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    *(_QWORD *)(v0 + 248) = v20;
    *(_QWORD *)(v0 + 256) = v18;
    swift_task_switch(sub_1009883BC, 0, 0);
    return;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
}

uint64_t sub_100989128()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10098915C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (qword_1010E9968 != -1)
    swift_once(&qword_1010E9968, sub_1000FC8C8);
  v2 = qword_1010EEF78;
  v3 = sub_10001A9A8(&qword_1010FA130);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D0B6C, 0, v2, &type metadata for () + 1, v3);
  if ((v7 & 1) != 0)
  {
    v5 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    return swift_willThrowTypedImpl(&v6, v5, &protocol self-conformance witness table for Error);
  }
  else
  {
    *a1 = v6;
  }
  return result;
}

uint64_t sub_100989230()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FamilyCircleService()
{
  return objc_opt_self(_TtC12searchpartyd19FamilyCircleService);
}

uint64_t sub_100989294()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1009892AC, v0, 0);
}

uint64_t sub_1009892AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = sub_100987170();
  v3 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v1 + 128) = DarwinNotificationHelper.init(notificationHandlers:)(v2);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100989318(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_10110E0E0, a2, (uint64_t (*)(uint64_t))type metadata accessor for FamilyCircleService, (uint64_t)&unk_100E56420);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100989354()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7A00);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7A00);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000013, 0x8000000100E563B0);
}

uint64_t sub_1009893D4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 184) = a2;
  *(_QWORD *)(v3 + 192) = a3;
  *(_BYTE *)(v3 + 392) = a1;
  return swift_task_switch(sub_1009893F0, 0, 0);
}

uint64_t sub_1009893F0()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v1 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 200) = v1;
  *v1 = v0;
  v1[1] = sub_100989470;
  return sub_100D8C77C(*(_BYTE *)(v0 + 392), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
}

uint64_t sub_100989470(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*v3 + 200);
  v7 = *v3;
  *(_QWORD *)(v7 + 208) = a1;
  *(_QWORD *)(v7 + 216) = a2;
  swift_task_dealloc(v6);
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  if (!a2)
    return (*(uint64_t (**)(uint64_t, _QWORD))(v7 + 8))(a1, 0);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  *(_QWORD *)(v7 + 224) = v9;
  v10 = sub_10001A9A8(&qword_10110E0F0);
  *v9 = v7;
  v9[1] = sub_100989554;
  return unsafeBlocking<A>(_:)(v7 + 144, sub_10098915C, 0, v10);
}

uint64_t sub_100989554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_10098A98C;
  }
  else
  {
    v3 = sub_1009895C0;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_1009895C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  NSString v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 144);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 >= 0)
      v1 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = __CocoaSet.makeIterator()(v1);
    v3 = sub_10098A998();
    v4 = sub_100006C64(&qword_1010FA140, 255, (uint64_t (*)(uint64_t))sub_10098A998, (uint64_t)&protocol conformance descriptor for NSObject);
    Set.Iterator.init(_cocoa:)((_QWORD *)(v0 + 72), v2, v3, v4);
    v1 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
  }
  else
  {
    v7 = 0;
    v9 = -1;
    v10 = -1 << *(_BYTE *)(v1 + 32);
    v5 = v1 + 56;
    v6 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v9 = ~(-1 << v11);
    v8 = v9 & *(_QWORD *)(v1 + 56);
  }
  *(_QWORD *)(v0 + 248) = v5;
  *(_QWORD *)(v0 + 256) = v6;
  *(_QWORD *)(v0 + 240) = v1;
  *(_QWORD *)(v0 + 264) = v7;
  *(_QWORD *)(v0 + 272) = v8;
  if (v1 < 0)
    goto LABEL_11;
LABEL_9:
  if (v8)
  {
    v12 = (v8 - 1) & v8;
    v13 = __clz(__rbit64(v8)) | (v7 << 6);
    v14 = v7;
    goto LABEL_27;
  }
  v19 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    v20 = (unint64_t)(*(_QWORD *)(v0 + 256) + 64) >> 6;
    if (v19 < v20)
    {
      v21 = *(_QWORD *)(v0 + 248);
      v22 = *(_QWORD *)(v21 + 8 * v19);
      v14 = v7 + 1;
      if (v22)
        goto LABEL_26;
      v14 = v7 + 2;
      if (v7 + 2 >= v20)
        goto LABEL_38;
      v22 = *(_QWORD *)(v21 + 8 * v14);
      if (v22)
        goto LABEL_26;
      v14 = v7 + 3;
      if (v7 + 3 >= v20)
        goto LABEL_38;
      v22 = *(_QWORD *)(v21 + 8 * v14);
      if (v22)
      {
LABEL_26:
        v12 = (v22 - 1) & v22;
        v13 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_27:
        v18 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v13);
        while (1)
        {
          *(_QWORD *)(v0 + 288) = v14;
          *(_QWORD *)(v0 + 296) = v12;
          *(_QWORD *)(v0 + 280) = v18;
          if (!v18)
            goto LABEL_38;
          v24 = objc_msgSend(v18, "appleID");
          if (v24)
          {
            v25 = v24;
            v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
            v28 = v27;

            *(_QWORD *)(v0 + 112) = v26;
            *(_QWORD *)(v0 + 120) = v28;
            *(_QWORD *)(v0 + 128) = 64;
            *(_QWORD *)(v0 + 136) = 0xE100000000000000;
            v29 = sub_1000330C8();
            v30 = StringProtocol.contains<A>(_:)(v0 + 128, &type metadata for String, &type metadata for String, v29, v29);
            v31 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            if ((v30 & 1) != 0)
            {
              v32 = (void *)IDSCopyIDForEmailAddress(v31);

              if (!v32)
                goto LABEL_42;
              v33 = 0;
            }
            else
            {
              v32 = (void *)IDSCopyIDForPhoneNumber(v31);

              if (!v32)
                goto LABEL_43;
              v33 = 1;
            }
            *(_BYTE *)(v0 + 393) = v33;
            v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
            v36 = v35;

            *(_QWORD *)(v0 + 304) = v36;
            *(_QWORD *)(v0 + 312) = v34;
            v37 = qword_1010EEF90;
            *(_QWORD *)(v0 + 320) = qword_1010EEF90;
            swift_task_switch(sub_10098996C, v37, 0);
            return;
          }

          v1 = *(_QWORD *)(v0 + 240);
          v7 = v14;
          v8 = v12;
          *(_QWORD *)(v0 + 264) = v14;
          *(_QWORD *)(v0 + 272) = v12;
          if ((v1 & 0x8000000000000000) == 0)
            goto LABEL_9;
LABEL_11:
          v15 = __CocoaSet.Iterator.next()(v1);
          if (!v15)
            goto LABEL_38;
          v16 = v15;
          *(_QWORD *)(v0 + 176) = v15;
          v17 = sub_10098A998();
          swift_unknownObjectRetain(v16);
          swift_dynamicCast(v0 + 168, v0 + 176, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
          v18 = *(id *)(v0 + 168);
          swift_unknownObjectRelease(v16);
          v14 = v7;
          v12 = v8;
        }
      }
      v14 = v7 + 4;
      if (v7 + 4 < v20)
      {
        v22 = *(_QWORD *)(v21 + 8 * v14);
        if (!v22)
        {
          v23 = v7 + 5;
          while (v20 != v23)
          {
            v22 = *(_QWORD *)(v21 + 8 * v23++);
            if (v22)
            {
              v14 = v23 - 1;
              goto LABEL_26;
            }
          }
          goto LABEL_39;
        }
        goto LABEL_26;
      }
    }
LABEL_38:
    v1 = *(_QWORD *)(v0 + 240);
LABEL_39:
    sub_10007CC38(v1);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
    return;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t sub_10098996C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t inited;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_BYTE *)(v0 + 393);
  v5 = sub_10001A9A8(&qword_1010EE2B0);
  inited = swift_initStackObject(v5, v0 + 16);
  *(_QWORD *)(v0 + 328) = inited;
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_BYTE *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v3;
  v7 = *(void **)(v1 + 112);
  *(_QWORD *)(v0 + 336) = v7;
  swift_bridgeObjectRetain(v3);
  if (v7)
  {
    v8 = *(_QWORD *)(v0 + 320);
    v9 = sub_100006C64((unint64_t *)&qword_1010EEFB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for MessagingQueryController, (uint64_t)asc_100E7126C);
    v10 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 344) = v10;
    v10[2] = inited;
    v10[3] = v7;
    v10[4] = v8;
    v11 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    v12 = v7;
    v13 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 352) = v13;
    v14 = sub_10001A9A8(&qword_1010EEFB8);
    *v13 = v0;
    v13[1] = sub_100989B34;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 160, v8, v9, 0xD00000000000001CLL, 0x8000000100EC8090, sub_1000FE178, v10, v14);
  }
  else
  {
    v16 = sub_1000FE094();
    v17 = swift_allocError(&type metadata for MessagingError, v16, 0, 0);
    *v18 = 6;
    swift_willThrow(v17);
    *(_QWORD *)(v0 + 368) = v17;
    v19 = *(_QWORD *)(v0 + 328);
    swift_setDeallocating(v19);
    swift_arrayDestroy(v19 + 32, *(_QWORD *)(v19 + 16), &type metadata for MessagingDestination);
    return swift_task_switch(sub_100989DFC, 0, 0);
  }
}

uint64_t sub_100989B34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 352);
  *(_QWORD *)(*v1 + 360) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 320);
    v5 = sub_100989D8C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 320);
    swift_task_dealloc(*(_QWORD *)(v2 + 344));
    v5 = sub_100989BA8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100989BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  char v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)();
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 328);

  swift_setDeallocating(v1);
  swift_arrayDestroy(v1 + 32, *(_QWORD *)(v1 + 16), &type metadata for MessagingDestination);
  v2 = *(_QWORD *)(v0 + 160);
  result = sub_10001D6A8(v2);
  if ((v5 & 1) != 0)
    goto LABEL_26;
  if (*(_DWORD *)(v2 + 36) != v4)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = 1 << *(_BYTE *)(v2 + 32);
  if (result == v6)
    goto LABEL_22;
  if (result < 0 || result >= v6)
    goto LABEL_16;
  if (((*(_QWORD *)(v2 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    if (v1 < 0)
      v14 = v1;
    else
      v14 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v15 = _CocoaArrayWrapper.endIndex.getter(v14);
    result = swift_bridgeObjectRelease();
    if (v15)
      goto LABEL_9;
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = sub_10098A688;
    return swift_task_switch(v13, 0, 0);
  }
  v1 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * result);
  swift_bridgeObjectRetain(v1);
  result = swift_bridgeObjectRelease();
  if ((unint64_t)v1 >> 62)
    goto LABEL_18;
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_22;
LABEL_9:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v1);
LABEL_12:
    v8 = v7;
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v8, "senderCorrelationIdentifier");

    if (v9)
    {
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 376) = v10;
      *(_QWORD *)(v0 + 384) = v12;
      v13 = sub_10098A2B4;
    }
    else
    {
      swift_bridgeObjectRelease();
      v13 = sub_10098AC70;
    }
    return swift_task_switch(v13, 0, 0);
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v1 + 32);
    goto LABEL_12;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100989D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 344);

  swift_task_dealloc(v1);
  *(_QWORD *)(v0 + 368) = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 328);
  swift_setDeallocating(v2);
  swift_arrayDestroy(v2 + 32, *(_QWORD *)(v2 + 16), &type metadata for MessagingDestination);
  return swift_task_switch(sub_100989DFC, 0, 0);
}

void sub_100989DFC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  NSString v39;
  void *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  swift_bridgeObjectRelease();
  if (qword_1010EA090 != -1)
LABEL_42:
    swift_once(&qword_1010EA090, sub_100989354);
  v1 = *(void **)(v0 + 280);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7A00);
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(void **)(v0 + 280);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 152) = v7;
    *(_DWORD *)v6 = 141558275;
    *(_QWORD *)(v6 + 4) = 1752392040;
    *(_WORD *)(v6 + 12) = 2081;
    v8 = objc_msgSend(v5, "appleID");
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v12 = v11;

    }
    else
    {
      v12 = 0xE300000000000000;
      v10 = 7104846;
    }
    v15 = *(_QWORD *)(v0 + 368);
    v16 = *(void **)(v0 + 280);
    *(_QWORD *)(v6 + 14) = sub_100016940(v10, v12, (uint64_t *)(v0 + 152));
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on getting correlationIdentifier for appleID: %{private,mask.hash}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_errorRelease(v15);

  }
  else
  {
    v13 = *(_QWORD *)(v0 + 368);
    v14 = *(void **)(v0 + 280);

    swift_errorRelease(v13);
  }
  v17 = *(_QWORD *)(v0 + 288);
  for (i = *(_QWORD *)(v0 + 296); ; i = v20)
  {
    *(_QWORD *)(v0 + 264) = v17;
    *(_QWORD *)(v0 + 272) = i;
    v19 = *(_QWORD *)(v0 + 240);
    if (v19 < 0)
    {
      v23 = __CocoaSet.Iterator.next()(v19);
      if (!v23)
        goto LABEL_38;
      v24 = v23;
      *(_QWORD *)(v0 + 176) = v23;
      v25 = sub_10098A998();
      swift_unknownObjectRetain(v24);
      swift_dynamicCast(v0 + 168, v0 + 176, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
      v26 = *(id *)(v0 + 168);
      swift_unknownObjectRelease(v24);
      v22 = v17;
      v20 = i;
    }
    else
    {
      if (i)
      {
        v20 = (i - 1) & i;
        v21 = __clz(__rbit64(i)) | (v17 << 6);
        v22 = v17;
      }
      else
      {
        v27 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v28 = (unint64_t)(*(_QWORD *)(v0 + 256) + 64) >> 6;
        if (v27 >= v28)
          goto LABEL_38;
        v29 = *(_QWORD *)(v0 + 248);
        v30 = *(_QWORD *)(v29 + 8 * v27);
        v22 = v17 + 1;
        if (!v30)
        {
          v22 = v17 + 2;
          if (v17 + 2 >= v28)
            goto LABEL_38;
          v30 = *(_QWORD *)(v29 + 8 * v22);
          if (!v30)
          {
            v22 = v17 + 3;
            if (v17 + 3 >= v28)
              goto LABEL_38;
            v30 = *(_QWORD *)(v29 + 8 * v22);
            if (!v30)
            {
              v22 = v17 + 4;
              if (v17 + 4 >= v28)
                goto LABEL_38;
              v30 = *(_QWORD *)(v29 + 8 * v22);
              if (!v30)
              {
                v31 = v17 + 5;
                while (v28 != v31)
                {
                  v30 = *(_QWORD *)(v29 + 8 * v31++);
                  if (v30)
                  {
                    v22 = v31 - 1;
                    goto LABEL_27;
                  }
                }
LABEL_39:
                sub_10007CC38(v19);
                swift_bridgeObjectRelease();
                (*(void (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
                return;
              }
            }
          }
        }
LABEL_27:
        v20 = (v30 - 1) & v30;
        v21 = __clz(__rbit64(v30)) + (v22 << 6);
      }
      v26 = *(id *)(*(_QWORD *)(v19 + 48) + 8 * v21);
    }
    *(_QWORD *)(v0 + 288) = v22;
    *(_QWORD *)(v0 + 296) = v20;
    *(_QWORD *)(v0 + 280) = v26;
    if (!v26)
    {
LABEL_38:
      v19 = *(_QWORD *)(v0 + 240);
      goto LABEL_39;
    }
    v32 = objc_msgSend(v26, "appleID");
    if (v32)
      break;

    v17 = v22;
  }
  v33 = v32;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v36 = v35;

  *(_QWORD *)(v0 + 112) = v34;
  *(_QWORD *)(v0 + 120) = v36;
  *(_QWORD *)(v0 + 128) = 64;
  *(_QWORD *)(v0 + 136) = 0xE100000000000000;
  v37 = sub_1000330C8();
  v38 = StringProtocol.contains<A>(_:)(v0 + 128, &type metadata for String, &type metadata for String, v37, v37);
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if ((v38 & 1) != 0)
  {
    v40 = (void *)IDSCopyIDForEmailAddress(v39);

    if (v40)
    {
      v41 = 0;
LABEL_37:
      *(_BYTE *)(v0 + 393) = v41;
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v44 = v43;

      *(_QWORD *)(v0 + 304) = v44;
      *(_QWORD *)(v0 + 312) = v42;
      v45 = qword_1010EEF90;
      *(_QWORD *)(v0 + 320) = qword_1010EEF90;
      swift_task_switch(sub_10098996C, v45, 0);
      return;
    }
    __break(1u);
  }
  else
  {
    v40 = (void *)IDSCopyIDForPhoneNumber(v39);

    if (v40)
    {
      v41 = 1;
      goto LABEL_37;
    }
  }
  __break(1u);
}

void sub_10098A2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  NSString v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 208);
  if (v1 == v2 && *(_QWORD *)(v0 + 216) == *(_QWORD *)(v0 + 384))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, *(_QWORD *)(v0 + 384), v2, *(_QWORD *)(v0 + 216), 0);
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {

      v13 = *(_QWORD *)(v0 + 288);
      for (i = *(_QWORD *)(v0 + 296); ; i = v15)
      {
        *(_QWORD *)(v0 + 264) = v13;
        *(_QWORD *)(v0 + 272) = i;
        v14 = *(_QWORD *)(v0 + 240);
        if (v14 < 0)
        {
          v18 = __CocoaSet.Iterator.next()(v14);
          if (!v18)
            goto LABEL_41;
          v19 = v18;
          *(_QWORD *)(v0 + 176) = v18;
          v20 = sub_10098A998();
          swift_unknownObjectRetain(v19);
          swift_dynamicCast(v0 + 168, v0 + 176, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
          v21 = *(id *)(v0 + 168);
          swift_unknownObjectRelease(v19);
          v17 = v13;
          v15 = i;
        }
        else
        {
          if (i)
          {
            v15 = (i - 1) & i;
            v16 = __clz(__rbit64(i)) | (v13 << 6);
            v17 = v13;
          }
          else
          {
            v22 = v13 + 1;
            if (__OFADD__(v13, 1))
            {
              __break(1u);
              goto LABEL_47;
            }
            v23 = (unint64_t)(*(_QWORD *)(v0 + 256) + 64) >> 6;
            if (v22 >= v23)
              goto LABEL_41;
            v24 = *(_QWORD *)(v0 + 248);
            v25 = *(_QWORD *)(v24 + 8 * v22);
            v17 = v13 + 1;
            if (!v25)
            {
              v17 = v13 + 2;
              if (v13 + 2 >= v23)
                goto LABEL_41;
              v25 = *(_QWORD *)(v24 + 8 * v17);
              if (!v25)
              {
                v17 = v13 + 3;
                if (v13 + 3 >= v23)
                  goto LABEL_41;
                v25 = *(_QWORD *)(v24 + 8 * v17);
                if (!v25)
                {
                  v17 = v13 + 4;
                  if (v13 + 4 >= v23)
                    goto LABEL_41;
                  v25 = *(_QWORD *)(v24 + 8 * v17);
                  if (!v25)
                  {
                    v26 = v13 + 5;
                    while (v23 != v26)
                    {
                      v25 = *(_QWORD *)(v24 + 8 * v26++);
                      if (v25)
                      {
                        v17 = v26 - 1;
                        goto LABEL_30;
                      }
                    }
LABEL_42:
                    sub_10007CC38(v14);
                    swift_bridgeObjectRelease();
LABEL_43:
                    v9 = 0;
                    v11 = 0;
                    goto LABEL_44;
                  }
                }
              }
            }
LABEL_30:
            v15 = (v25 - 1) & v25;
            v16 = __clz(__rbit64(v25)) + (v17 << 6);
          }
          v21 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v16);
        }
        *(_QWORD *)(v0 + 288) = v17;
        *(_QWORD *)(v0 + 296) = v15;
        *(_QWORD *)(v0 + 280) = v21;
        if (!v21)
        {
LABEL_41:
          v14 = *(_QWORD *)(v0 + 240);
          goto LABEL_42;
        }
        v27 = objc_msgSend(v21, "appleID");
        if (v27)
        {
          v28 = v27;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          v31 = v30;

          *(_QWORD *)(v0 + 112) = v29;
          *(_QWORD *)(v0 + 120) = v31;
          *(_QWORD *)(v0 + 128) = 64;
          *(_QWORD *)(v0 + 136) = 0xE100000000000000;
          v32 = sub_1000330C8();
          v33 = StringProtocol.contains<A>(_:)(v0 + 128, &type metadata for String, &type metadata for String, v32, v32);
          v34 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
          {
            v35 = (void *)IDSCopyIDForEmailAddress(v34);

            if (v35)
            {
              v36 = 0;
LABEL_40:
              *(_BYTE *)(v0 + 393) = v36;
              v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
              v39 = v38;

              *(_QWORD *)(v0 + 304) = v39;
              *(_QWORD *)(v0 + 312) = v37;
              v40 = qword_1010EEF90;
              *(_QWORD *)(v0 + 320) = qword_1010EEF90;
              swift_task_switch(sub_10098996C, v40, 0);
              return;
            }
LABEL_47:
            __break(1u);
          }
          else
          {
            v35 = (void *)IDSCopyIDForPhoneNumber(v34);

            if (v35)
            {
              v36 = 1;
              goto LABEL_40;
            }
          }
          __break(1u);
          return;
        }

        v13 = v17;
      }
    }
  }
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(*(id *)(v0 + 280), "altDSID");
  v6 = *(void **)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 240);
  if (!v5)
  {

    sub_10007CC38(v7);
    goto LABEL_43;
  }
  v8 = v5;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v11 = v10;

  sub_10007CC38(v7);
LABEL_44:
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v9, v11);
}

void sub_10098A688()
{
  uint64_t v0;
  unint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  NSString v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(v0 + 288);
  for (i = *(_QWORD *)(v0 + 296); ; i = v4)
  {
    *(_QWORD *)(v0 + 264) = v2;
    *(_QWORD *)(v0 + 272) = i;
    v3 = *(_QWORD *)(v0 + 240);
    if ((v3 & 0x8000000000000000) == 0)
      break;
    v7 = __CocoaSet.Iterator.next()(v3);
    if (!v7)
      goto LABEL_31;
    v8 = v7;
    *(_QWORD *)(v0 + 176) = v7;
    v9 = sub_10098A998();
    swift_unknownObjectRetain(v8);
    swift_dynamicCast(v0 + 168, v0 + 176, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
    v10 = *(id *)(v0 + 168);
    swift_unknownObjectRelease(v8);
    v6 = v2;
    v4 = i;
LABEL_22:
    *(_QWORD *)(v0 + 288) = v6;
    *(_QWORD *)(v0 + 296) = v4;
    *(_QWORD *)(v0 + 280) = v10;
    if (!v10)
    {
LABEL_31:
      v3 = *(_QWORD *)(v0 + 240);
      goto LABEL_32;
    }
    v16 = objc_msgSend(v10, "appleID");
    if (v16)
    {
      v17 = v16;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v20 = v19;

      *(_QWORD *)(v0 + 112) = v18;
      *(_QWORD *)(v0 + 120) = v20;
      *(_QWORD *)(v0 + 128) = 64;
      *(_QWORD *)(v0 + 136) = 0xE100000000000000;
      v21 = sub_1000330C8();
      v22 = StringProtocol.contains<A>(_:)(v0 + 128, &type metadata for String, &type metadata for String, v21, v21);
      v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
      {
        v24 = (void *)IDSCopyIDForEmailAddress(v23);

        if (v24)
        {
          v25 = 0;
LABEL_30:
          *(_BYTE *)(v0 + 393) = v25;
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          v28 = v27;

          *(_QWORD *)(v0 + 304) = v28;
          *(_QWORD *)(v0 + 312) = v26;
          v29 = qword_1010EEF90;
          *(_QWORD *)(v0 + 320) = qword_1010EEF90;
          swift_task_switch(sub_10098996C, v29, 0);
          return;
        }
LABEL_35:
        __break(1u);
      }
      else
      {
        v24 = (void *)IDSCopyIDForPhoneNumber(v23);

        if (v24)
        {
          v25 = 1;
          goto LABEL_30;
        }
      }
      __break(1u);
      return;
    }

    v2 = v6;
  }
  if (i)
  {
    v4 = (i - 1) & i;
    v5 = __clz(__rbit64(i)) | (v2 << 6);
    v6 = v2;
LABEL_21:
    v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v5);
    goto LABEL_22;
  }
  v11 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  v12 = (unint64_t)(*(_QWORD *)(v0 + 256) + 64) >> 6;
  if (v11 >= v12)
    goto LABEL_31;
  v13 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v13 + 8 * v11);
  v6 = v2 + 1;
  if (v14)
    goto LABEL_20;
  v6 = v2 + 2;
  if (v2 + 2 >= v12)
    goto LABEL_31;
  v14 = *(_QWORD *)(v13 + 8 * v6);
  if (v14)
    goto LABEL_20;
  v6 = v2 + 3;
  if (v2 + 3 >= v12)
    goto LABEL_31;
  v14 = *(_QWORD *)(v13 + 8 * v6);
  if (v14)
    goto LABEL_20;
  v6 = v2 + 4;
  if (v2 + 4 >= v12)
    goto LABEL_31;
  v14 = *(_QWORD *)(v13 + 8 * v6);
  if (v14)
  {
LABEL_20:
    v4 = (v14 - 1) & v14;
    v5 = __clz(__rbit64(v14)) + (v6 << 6);
    goto LABEL_21;
  }
  v15 = v2 + 5;
  while (v12 != v15)
  {
    v14 = *(_QWORD *)(v13 + 8 * v15++);
    if (v14)
    {
      v6 = v15 - 1;
      goto LABEL_20;
    }
  }
LABEL_32:
  sub_10007CC38(v3);
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

uint64_t sub_10098A98C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10098A998()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10110FFD0;
  if (!qword_10110FFD0)
  {
    v1 = objc_opt_self(FAFamilyMember);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10110FFD0);
  }
  return result;
}

unint64_t sub_10098A9D4()
{
  unint64_t result;

  result = qword_10110E0F8;
  if (!qword_10110E0F8)
  {
    result = swift_getWitnessTable(byte_100E564D4, &type metadata for FamilyCircleServiceError);
    atomic_store(result, &qword_10110E0F8);
  }
  return result;
}

uint64_t sub_10098AA18()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10098AA3C(uint64_t a1)
{
  uint64_t v1;

  return sub_10098726C(a1, v1);
}

uint64_t sub_10098AA44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10098AA68()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110E104);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_1009872F4(v0);
}

uint64_t sub_10098AAB0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10098AADC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110E114);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_1009874F8(a1, v4, v5, v6);
}

uint64_t storeEnumTagSinglePayload for FamilyCircleServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10098ABA0 + 4 * byte_100E56375[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10098ABD4 + 4 * byte_100E56370[v4]))();
}

uint64_t sub_10098ABD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098ABDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10098ABE4);
  return result;
}

uint64_t sub_10098ABF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10098ABF8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10098ABFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098AC04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FamilyCircleServiceError()
{
  return &type metadata for FamilyCircleServiceError;
}

unint64_t sub_10098AC24()
{
  unint64_t result;

  result = qword_10110E130;
  if (!qword_10110E130)
  {
    result = swift_getWitnessTable(byte_100E564AC, &type metadata for FamilyCircleServiceError);
    atomic_store(result, (unint64_t *)&qword_10110E130);
  }
  return result;
}

uint64_t sub_10098AC74(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110E2C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10098D720();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnSubmitPayload.CodingKeys, &type metadata for OwnSubmitPayload.CodingKeys, v11, v9, v10);
  v23 = *v3;
  v22 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for Data, v12);
  if (!v2)
  {
    LOBYTE(v23) = *((_BYTE *)v3 + 16);
    v22 = 1;
    v13 = sub_10036118C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for OwnSubmitPayloadTypes.KeyType, v13);
    v14 = *((_QWORD *)v3 + 3);
    v15 = *((_QWORD *)v3 + 4);
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v23, v5);
    sub_100005CF0((uint64_t)v3 + 40, (uint64_t)&v25, &qword_10110E2C8);
    sub_100005CF0((uint64_t)&v25, (uint64_t)&v23, &qword_10110E2C8);
    v22 = 3;
    v16 = sub_100435994();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v23, &v22, v5, &type metadata for OwnSubmitPayloadTypes.ShareType, v16);
    sub_100005CF0((uint64_t)v3 + 41, (uint64_t)&v24, &qword_10110E2D0);
    sub_100005CF0((uint64_t)&v24, (uint64_t)&v23, &qword_10110E2D0);
    v22 = 4;
    v17 = sub_1003611D0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v23, &v22, v5, &type metadata for OwnSubmitPayloadTypes.Mode, v17);
    *(_QWORD *)&v23 = *((_QWORD *)v3 + 6);
    v22 = 5;
    v18 = sub_10001A9A8(&qword_10110E2B0);
    v19 = sub_10098D764(&qword_10110E2D8, &qword_10110E1E8, (uint64_t)&unk_100E56624, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10098AF0C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110E298);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10098D058();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnSubmitLocationInfo.CodingKeys, &type metadata for OwnSubmitLocationInfo.CodingKeys, v11, v9, v10);
  v19 = *v3;
  v18 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (char *)v3 + *(int *)(type metadata accessor for OwnSubmitLocationInfo(0) + 20);
    LOBYTE(v19) = 1;
    v14 = type metadata accessor for Date(0);
    v15 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v19, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10098B078@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;

  v24 = a2;
  v26 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v25 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10001A9A8(&qword_10110E288);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnSubmitLocationInfo(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_10098D058();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnSubmitLocationInfo.CodingKeys, &type metadata for OwnSubmitLocationInfo.CodingKeys, v13, v12, v11);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v21 = a1;
  v22 = v5;
  v14 = v25;
  v15 = v26;
  v29 = 0;
  v16 = sub_100036994();
  v17 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for Data, &v29, v27, &type metadata for Data, v16);
  *(_OWORD *)v10 = v28;
  LOBYTE(v28) = 1;
  v18 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v14, v15, &v28, v17, v15, v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v17);
  (*(void (**)(char *, _QWORD *, uint64_t))(v23 + 32))(&v10[*(int *)(v8 + 20)], v14, v15);
  sub_10098D09C((uint64_t)v10, v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
  return sub_10098D0E0((uint64_t)v10);
}

uint64_t sub_10098B2E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  char v18;
  _OWORD v19[3];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110E260);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10098CF6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnSubmitRequestBody.CodingKeys, &type metadata for OwnSubmitRequestBody.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v19[0] = *(_OWORD *)v3;
  v19[1] = v12;
  v19[2] = *(_OWORD *)(v3 + 32);
  v18 = 0;
  v13 = sub_10098CFB0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v18, v5, &type metadata for OwnSubmitClientContext, v13);
  if (!v2)
  {
    *(_QWORD *)&v19[0] = *(_QWORD *)(v3 + 48);
    v18 = 1;
    v14 = sub_10001A9A8(&qword_10110E278);
    v15 = sub_10098CFF4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10098B438(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110E328);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10098DC2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnSubmitClientContext.CodingKeys, &type metadata for OwnSubmitClientContext.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v21, v5);
    v16 = v3[4];
    v17 = v3[5];
    v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10098B574()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10098B598 + 4 * byte_100E56520[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_10098B598()
{
  return 0x6570795479656BLL;
}

uint64_t sub_10098B5B0()
{
  return 0x64496572616873;
}

uint64_t sub_10098B5C8()
{
  return 1701869940;
}

uint64_t sub_10098B5D8()
{
  return 1701080941;
}

uint64_t sub_10098B5E8()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10098B608@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10098D11C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10098B62C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10098D720();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10098B654(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10098D720();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10098B67C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t sub_10098B684()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t sub_10098B6B0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

double sub_10098B6B8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_10098D37C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_10098B704(_QWORD *a1)
{
  return sub_10098AC74(a1);
}

uint64_t sub_10098B744(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10098D058();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10098B76C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10098D058();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10098B794@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10098B078(a1, a2);
}

uint64_t sub_10098B7A8(_QWORD *a1)
{
  return sub_10098AF0C(a1);
}

uint64_t sub_10098B7BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10098CF6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10098B7E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10098CF6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10098B80C(_QWORD *a1)
{
  return sub_10098B2E0(a1);
}

uint64_t sub_10098B820()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x526873696C627570;
  if (*v0 != 1)
    v1 = 0x6449746E65696C63;
  if (*v0)
    return v1;
  else
    return 0x41747865746E6F63;
}

uint64_t sub_10098B88C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10098DE14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10098B8B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10098DC2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10098B8D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10098DC2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10098B900(_QWORD *a1)
{
  return sub_10098B438(a1);
}

uint64_t sub_10098B914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v3 + 208) = a2;
  *(_QWORD *)(v3 + 216) = a3;
  *(_OWORD *)(v3 + 224) = *(_OWORD *)a1;
  *(_QWORD *)(v3 + 240) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 248) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 264) = *(_QWORD *)(a1 + 40);
  v4 = type metadata accessor for HashAlgorithm(0);
  *(_QWORD *)(v3 + 272) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 280) = v5;
  *(_QWORD *)(v3 + 288) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnSubmitLocationInfo(0);
  *(_QWORD *)(v3 + 296) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 304) = v7;
  *(_QWORD *)(v3 + 312) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  *(_QWORD *)(v3 + 320) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 328) = v9;
  *(_QWORD *)(v3 + 336) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  *(_QWORD *)(v3 + 344) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v3 + 352) = v11;
  *(_QWORD *)(v3 + 360) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10098BA0C, 0, 0);
}

id sub_10098BA0C()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t *v2;
  id result;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedTypeWitness;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  _QWORD *v93;

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  v93 = v0;
  v0[19] = v1;
  v2 = v0 + 19;
  result = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "serverFriendlyDescription");

    v80 = v0 + 2;
    if (v5)
    {
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
      *v2 = 0x8000000000000000;
      sub_100109D28(v6, v8, 0xD000000000000011, 0x8000000100ECA2C0, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100102BE0(0xD000000000000011, 0x8000000100ECA2C0);
      swift_bridgeObjectRelease();
      v1 = *v2;
    }
    v11 = v0[44];
    v10 = v0[45];
    v12 = v0[43];
    v13 = v0[26];
    v14 = swift_isUniquelyReferenced_nonNull_native(v1);
    sub_100109D28(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v14);
    swift_bridgeObjectRelease();
    v15 = swift_isUniquelyReferenced_nonNull_native(v1);
    sub_100109D28(0xD000000000000010, 0x8000000100ECC390, 0x2D746E65746E6F43, 0xEC00000065707954, v15);
    v16 = v1;
    v17 = swift_bridgeObjectRelease();
    v18 = Date.init()(v17);
    v19 = Date.epoch.getter(v18);
    v20 = v12;
    v21 = v0;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v20);
    v0[24] = v19;
    v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v24 = v23;
    v25 = swift_isUniquelyReferenced_nonNull_native(v16);
    v0[19] = 0x8000000000000000;
    sub_100109D28(v22, v24, 0xD000000000000015, 0x8000000100ECC3B0, v25);
    v0[19] = v16;
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v13 + 16);
    if (v26)
    {
      v27 = v0 + 9;
      v91 = v93[39];
      v89 = v93[38];
      v88 = v2 - 5;
      v28 = v93[26];
      sub_10009A6AC(0, v26, 0);
      v29 = 0;
      v81 = v28 + 32;
      v82 = v26;
      do
      {
        v87 = v29;
        sub_100030784(v81 + 40 * v29, (uint64_t)v88);
        v30 = v21[17];
        v31 = v21[18];
        sub_10001AA44(v88, v30);
        v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 64))(v30, v31);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v31, v30, &unk_100F1C36C, &unk_100F1C38C);
        v34 = sub_10001A9A8(&qword_10110E140);
        v35 = _arrayForceCast<A, B>(_:)(v32, AssociatedTypeWitness, v34);
        swift_bridgeObjectRelease();
        v36 = *(_QWORD *)(v35 + 16);
        if (v36)
        {
          sub_10009A6C8(0, v36, 0);
          v37 = v35 + 32;
          do
          {
            v38 = v21;
            v39 = (uint64_t *)v21[39];
            sub_100030784(v37, (uint64_t)v27);
            v40 = v38[12];
            v41 = v38[13];
            sub_10001AA44(v27, v40);
            v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
            v44 = v43;
            v46 = v38[12];
            v45 = v38[13];
            sub_10001AA44(v27, v46);
            (*(void (**)(uint64_t, uint64_t))(v45 + 32))(v46, v45);
            *v39 = v42;
            *(_QWORD *)(v91 + 8) = v44;
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
            if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
              sub_10009A6C8(0, _swiftEmptyArrayStorage[2] + 1, 1);
            v48 = _swiftEmptyArrayStorage[2];
            v47 = _swiftEmptyArrayStorage[3];
            v21 = v93;
            if (v48 >= v47 >> 1)
              sub_10009A6C8(v47 > 1, v48 + 1, 1);
            v49 = v93[39];
            _swiftEmptyArrayStorage[2] = v48 + 1;
            sub_10098C810(v49, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80))+ *(_QWORD *)(v89 + 72) * v48);
            v37 += 40;
            --v36;
          }
          while (v36);
        }
        swift_bridgeObjectRelease();
        v50 = v21[17];
        v51 = v21[18];
        sub_10001AA44(v88, v50);
        v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 40))(v50, v51);
        v85 = v53;
        v86 = v52;
        v54 = v21[17];
        v55 = v21[18];
        sub_10001AA44(v88, v54);
        v84 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 48))(v54, v55);
        v56 = v21[17];
        v57 = v21[18];
        sub_10001AA44(v88, v56);
        v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 72))(v56, v57);
        v59 = v58;
        v60 = v21[17];
        v61 = v21[18];
        sub_10001AA44(v88, v60);
        v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 80))(v60, v61);
        v63 = v21[17];
        v64 = v21[18];
        sub_10001AA44(v88, v63);
        v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 56))(v63, v64);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v88);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A6AC(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v66 = v87;
        v68 = _swiftEmptyArrayStorage[2];
        v67 = _swiftEmptyArrayStorage[3];
        if (v68 >= v67 >> 1)
        {
          sub_10009A6AC(v67 > 1, v68 + 1, 1);
          v66 = v87;
        }
        v29 = v66 + 1;
        _swiftEmptyArrayStorage[2] = v68 + 1;
        v69 = &_swiftEmptyArrayStorage[7 * v68];
        v69[4] = v86;
        v69[5] = v85;
        *((_BYTE *)v69 + 48) = v84;
        v69[7] = v83;
        v69[8] = v59;
        *((_BYTE *)v69 + 72) = v62;
        *((_BYTE *)v69 + 73) = v65;
        v69[10] = _swiftEmptyArrayStorage;
      }
      while (v29 != v82);
    }
    swift_bridgeObjectRelease();
    v70 = (_QWORD *)v21[42];
    v71 = v93[41];
    v72 = v93[40];
    v73 = v93[33];
    v74 = v93[32];
    v92 = *((_OWORD *)v93 + 15);
    v90 = *((_OWORD *)v93 + 14);
    v75 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
    v93[46] = JSONEncoder.init()(v76);
    *v70 = sub_1002994E8;
    v70[1] = 0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v71 + 104))(v70, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v72);
    dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v70);
    *((_OWORD *)v93 + 1) = v90;
    *((_OWORD *)v93 + 2) = v92;
    v93[6] = v74;
    v93[7] = v73;
    v93[8] = _swiftEmptyArrayStorage;
    v77 = sub_10098C854();
    v93[47] = dispatch thunk of JSONEncoder.encode<A>(_:)(v80, &type metadata for OwnSubmitRequestBody, v77);
    v93[48] = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v92 = (char *)&dword_101115318 + dword_101115318;
    v79 = (_QWORD *)swift_task_alloc(unk_10111531C);
    v93[49] = v79;
    *v79 = v93;
    v79[1] = sub_10098C268;
    return (id)((uint64_t (__cdecl *)())v92)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10098C268(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 392);
  *(_QWORD *)(v3 + 400) = a1;
  *(_QWORD *)(v3 + 408) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10098C2C4, 0, 0);
}

uint64_t sub_10098C2C4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[50];
  v1 = v0[51];
  v4 = v0[47];
  v3 = v0[48];
  v6 = v0[35];
  v5 = v0[36];
  v7 = v0[34];
  v0[22] = v2;
  v0[23] = v1;
  sub_10001BBBC(v2, v1);
  sub_10001BBBC(v4, v3);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[22];
  v9 = v0[23];
  v0[52] = v8;
  v0[53] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[54] = v10;
  v0[55] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115310 + dword_101115310;
  v13 = (_QWORD *)swift_task_alloc(unk_101115314);
  v0[56] = v13;
  *v13 = v0;
  v13[1] = sub_10098C3F0;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[27]);
}

uint64_t sub_10098C3F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 448);
  *(_QWORD *)(*(_QWORD *)v2 + 456) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10098C584;
  }
  else
  {
    v7 = v4[54];
    v8 = v4[55];
    v4[58] = a1;
    sub_10001BC14(v7, v8);
    v6 = sub_10098C46C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10098C46C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v14 = v1;
  *(_QWORD *)(v0 + 152) = 0x8000000000000000;
  sub_1001664D0(v2, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v14);
  if (v3)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 416);
  v7 = *(_QWORD *)(v0 + 424);
  *(_QWORD *)(v0 + 152) = v14;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v10, v9);
}

uint64_t sub_10098C584()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  sub_10001BC14(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440));
  sub_10001BC14(v1, v2);
  if (qword_1010EA030 != -1)
    swift_once(&qword_1010EA030, sub_1008F4BD0);
  v3 = *(_QWORD *)(v0 + 456);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B78E0);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 456);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138543362;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 200) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to generate attestation header: %{public}@.", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
    swift_release();
    swift_release();

    swift_errorRelease(v9);
  }
  else
  {
    swift_release();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release();

  }
  v14 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 376);
  v15 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v14, v16, v15);
}

uint64_t type metadata accessor for OwnSubmitLocationInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_10110E1A8;
  if (!qword_10110E1A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnSubmitLocationInfo);
  return result;
}

uint64_t sub_10098C810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnSubmitLocationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10098C854()
{
  unint64_t result;

  result = qword_10110E148;
  if (!qword_10110E148)
  {
    result = swift_getWitnessTable("ё$", &type metadata for OwnSubmitRequestBody);
    atomic_store(result, (unint64_t *)&qword_10110E148);
  }
  return result;
}

uint64_t destroy for OwnSubmitRequestBody(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[6]);
}

_QWORD *initializeWithCopy for OwnSubmitRequestBody(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for OwnSubmitRequestBody(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for OwnSubmitRequestBody(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OwnSubmitRequestBody(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnSubmitRequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitRequestBody()
{
  return &type metadata for OwnSubmitRequestBody;
}

ValueMetadata *type metadata accessor for OwnSubmitRequest()
{
  return &type metadata for OwnSubmitRequest;
}

uint64_t sub_10098CAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10098CAFC);
}

uint64_t sub_10098CAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10098CB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10098CB90);
}

char *sub_10098CB90(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10098CC0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E565A8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for OwnSubmitPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OwnSubmitPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for OwnSubmitPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OwnSubmitPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for OwnSubmitPayload()
{
  return &type metadata for OwnSubmitPayload;
}

uint64_t sub_10098CE30(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_10110E1E0, type metadata accessor for OwnSubmitLocationInfo, (uint64_t)&unk_100E5664C);
  result = sub_100006204(&qword_10110E1E8, type metadata accessor for OwnSubmitLocationInfo, (uint64_t)&unk_100E56624);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10098CE8C()
{
  return sub_100006204(&qword_10110E1F0, type metadata accessor for OwnSubmitLocationInfo, (uint64_t)&unk_100E56674);
}

unint64_t sub_10098CEB8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10098CEE4();
  result = sub_10098CF28();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10098CEE4()
{
  unint64_t result;

  result = qword_10110E250;
  if (!qword_10110E250)
  {
    result = swift_getWitnessTable(byte_100E565FC, &type metadata for OwnSubmitPayload);
    atomic_store(result, (unint64_t *)&qword_10110E250);
  }
  return result;
}

unint64_t sub_10098CF28()
{
  unint64_t result;

  result = qword_10110E258;
  if (!qword_10110E258)
  {
    result = swift_getWitnessTable(byte_100E565D4, &type metadata for OwnSubmitPayload);
    atomic_store(result, (unint64_t *)&qword_10110E258);
  }
  return result;
}

unint64_t sub_10098CF6C()
{
  unint64_t result;

  result = qword_10110E268;
  if (!qword_10110E268)
  {
    result = swift_getWitnessTable(byte_100E56A58, &type metadata for OwnSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E268);
  }
  return result;
}

unint64_t sub_10098CFB0()
{
  unint64_t result;

  result = qword_10110E270;
  if (!qword_10110E270)
  {
    result = swift_getWitnessTable(aA_44, &type metadata for OwnSubmitClientContext);
    atomic_store(result, (unint64_t *)&qword_10110E270);
  }
  return result;
}

unint64_t sub_10098CFF4()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_10110E280;
  if (!qword_10110E280)
  {
    v1 = sub_10001F784(&qword_10110E278);
    v2 = sub_10098CF28();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_10110E280);
  }
  return result;
}

unint64_t sub_10098D058()
{
  unint64_t result;

  result = qword_10110E290;
  if (!qword_10110E290)
  {
    result = swift_getWitnessTable(aA_45, &type metadata for OwnSubmitLocationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E290);
  }
  return result;
}

uint64_t sub_10098D09C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnSubmitLocationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10098D0E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OwnSubmitLocationInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10098D11C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6570795479656BLL && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795479656BLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x64496572616873 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496572616873, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49)
  {
    swift_bridgeObjectRelease(0xEC0000006F666E49);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC0000006F666E49, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_10098D37C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  char v34;

  v5 = sub_10001A9A8(&qword_10110E2A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10098D720();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnSubmitPayload.CodingKeys, &type metadata for OwnSubmitPayload.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v34 = 0;
  v12 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for Data, &v34, v5, &type metadata for Data, v12);
  v14 = v31;
  v13 = v32;
  v34 = 1;
  sub_10001BBBC(v31, v32);
  v15 = sub_100361104();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for OwnSubmitPayloadTypes.KeyType, &v34, v5, &type metadata for OwnSubmitPayloadTypes.KeyType, v15);
  v33 = v31;
  LOBYTE(v31) = 2;
  v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
  v18 = v17;
  v29 = v16;
  v34 = 3;
  v19 = sub_1004359D8();
  swift_bridgeObjectRetain(v18);
  v30 = v18;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for OwnSubmitPayloadTypes.ShareType, &v34, v5, &type metadata for OwnSubmitPayloadTypes.ShareType, v19);
  v28 = v31;
  v34 = 4;
  v20 = sub_100361148();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for OwnSubmitPayloadTypes.Mode, &v34, v5, &type metadata for OwnSubmitPayloadTypes.Mode, v20);
  v27 = v31;
  v21 = sub_10001A9A8(&qword_10110E2B0);
  v34 = 5;
  v22 = sub_10098D764(&qword_10110E2B8, &qword_10110E1E0, (uint64_t)&unk_100E5664C, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, v21, &v34, v5, v21, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = v31;
  sub_10001BBBC(v14, v13);
  swift_bridgeObjectRetain(v23);
  sub_10001BC14(v14, v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_10001BC14(v14, v13);
  swift_bridgeObjectRelease();
  v24 = v30;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 16) = v33;
  *(_QWORD *)(a2 + 24) = v29;
  *(_QWORD *)(a2 + 32) = v24;
  *(_BYTE *)(a2 + 40) = v28;
  *(_BYTE *)(a2 + 41) = v27;
  *(_QWORD *)(a2 + 48) = v23;
  return result;
}

unint64_t sub_10098D720()
{
  unint64_t result;

  result = qword_10110E2A8;
  if (!qword_10110E2A8)
  {
    result = swift_getWitnessTable(byte_100E56990, &type metadata for OwnSubmitPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E2A8);
  }
  return result;
}

uint64_t sub_10098D764(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_10110E2B0);
    v10 = sub_100006204(a2, type metadata accessor for OwnSubmitLocationInfo, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OwnSubmitPayload.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10098D834 + 4 * byte_100E5652B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10098D868 + 4 * byte_100E56526[v4]))();
}

uint64_t sub_10098D868(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098D870(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10098D878);
  return result;
}

uint64_t sub_10098D884(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10098D88CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10098D890(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098D898(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayload.CodingKeys()
{
  return &type metadata for OwnSubmitPayload.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnSubmitLocationInfo.CodingKeys()
{
  return &type metadata for OwnSubmitLocationInfo.CodingKeys;
}

uint64_t _s12searchpartyd21OwnSubmitLocationInfoV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10098D914 + 4 * byte_100E56535[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10098D948 + 4 * byte_100E56530[v4]))();
}

uint64_t sub_10098D948(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098D950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10098D958);
  return result;
}

uint64_t sub_10098D964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10098D96CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10098D970(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098D978(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitRequestBody.CodingKeys()
{
  return &type metadata for OwnSubmitRequestBody.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnSubmitClientContext()
{
  return &type metadata for OwnSubmitClientContext;
}

unint64_t sub_10098D9A8()
{
  unint64_t result;

  result = qword_10110E2E0;
  if (!qword_10110E2E0)
  {
    result = swift_getWitnessTable(a9_16, &type metadata for OwnSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E2E0);
  }
  return result;
}

unint64_t sub_10098D9F0()
{
  unint64_t result;

  result = qword_10110E2E8;
  if (!qword_10110E2E8)
  {
    result = swift_getWitnessTable(byte_100E568B0, &type metadata for OwnSubmitLocationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E2E8);
  }
  return result;
}

unint64_t sub_10098DA38()
{
  unint64_t result;

  result = qword_10110E2F0;
  if (!qword_10110E2F0)
  {
    result = swift_getWitnessTable("ɏ$", &type metadata for OwnSubmitPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E2F0);
  }
  return result;
}

unint64_t sub_10098DA80()
{
  unint64_t result;

  result = qword_10110E2F8;
  if (!qword_10110E2F8)
  {
    result = swift_getWitnessTable(byte_100E568D8, &type metadata for OwnSubmitPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E2F8);
  }
  return result;
}

unint64_t sub_10098DAC8()
{
  unint64_t result;

  result = qword_10110E300;
  if (!qword_10110E300)
  {
    result = swift_getWitnessTable(byte_100E56900, &type metadata for OwnSubmitPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E300);
  }
  return result;
}

unint64_t sub_10098DB10()
{
  unint64_t result;

  result = qword_10110E308;
  if (!qword_10110E308)
  {
    result = swift_getWitnessTable("ɐ$", &type metadata for OwnSubmitLocationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E308);
  }
  return result;
}

unint64_t sub_10098DB58()
{
  unint64_t result;

  result = qword_10110E310;
  if (!qword_10110E310)
  {
    result = swift_getWitnessTable(byte_100E56848, &type metadata for OwnSubmitLocationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E310);
  }
  return result;
}

unint64_t sub_10098DBA0()
{
  unint64_t result;

  result = qword_10110E318;
  if (!qword_10110E318)
  {
    result = swift_getWitnessTable(byte_100E56768, &type metadata for OwnSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E318);
  }
  return result;
}

unint64_t sub_10098DBE8()
{
  unint64_t result;

  result = qword_10110E320;
  if (!qword_10110E320)
  {
    result = swift_getWitnessTable(aI_40, &type metadata for OwnSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E320);
  }
  return result;
}

unint64_t sub_10098DC2C()
{
  unint64_t result;

  result = qword_10110E330;
  if (!qword_10110E330)
  {
    result = swift_getWitnessTable(byte_100E56B60, &type metadata for OwnSubmitClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E330);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OwnSubmitClientContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10098DCBC + 4 * byte_100E5653F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10098DCF0 + 4 * byte_100E5653A[v4]))();
}

uint64_t sub_10098DCF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098DCF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10098DD00);
  return result;
}

uint64_t sub_10098DD0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10098DD14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10098DD18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098DD20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitClientContext.CodingKeys()
{
  return &type metadata for OwnSubmitClientContext.CodingKeys;
}

unint64_t sub_10098DD40()
{
  unint64_t result;

  result = qword_10110E338;
  if (!qword_10110E338)
  {
    result = swift_getWitnessTable(byte_100E56B38, &type metadata for OwnSubmitClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E338);
  }
  return result;
}

unint64_t sub_10098DD88()
{
  unint64_t result;

  result = qword_10110E340;
  if (!qword_10110E340)
  {
    result = swift_getWitnessTable(aA_47, &type metadata for OwnSubmitClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E340);
  }
  return result;
}

unint64_t sub_10098DDD0()
{
  unint64_t result;

  result = qword_10110E348;
  if (!qword_10110E348)
  {
    result = swift_getWitnessTable(asc_100E56AD0, &type metadata for OwnSubmitClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110E348);
  }
  return result;
}

uint64_t sub_10098DE14(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x41747865746E6F63 && a2 == 0xEA00000000007070)
  {
    v5 = 0xEA00000000007070;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x41747865746E6F63, 0xEA00000000007070, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x526873696C627570 && a2 == 0xED00006E6F736165)
  {
    v7 = 0xED00006E6F736165;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x526873696C627570, 0xED00006E6F736165, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

id sub_10098E1F4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContainerAPSBridge();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ContainerAPSBridge()
{
  return objc_opt_self(_TtC12searchpartyd18ContainerAPSBridge);
}

uint64_t sub_10098E254(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 >> 60 == 15)
  {
    v3 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    return os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7D40, "Invalid Public Token", 20, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    result = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC12searchpartyd18ContainerAPSBridge_delegate);
    if (result)
    {
      v7 = result;
      v8 = sub_10001BBBC(a1, a2);
      v9 = static os_log_type_t.default.getter(v8);
      if (qword_1010EA260 != -1)
        swift_once(&qword_1010EA260, sub_100B5DA30);
      v10 = qword_1011B7D40;
      v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v12 = swift_allocObject(v11, 72, 7);
      *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
      v13 = Data.hexString.getter(a1, a2);
      v15 = v14;
      *(_QWORD *)(v12 + 56) = &type metadata for String;
      *(_QWORD *)(v12 + 64) = sub_10001AA00();
      *(_QWORD *)(v12 + 32) = v13;
      *(_QWORD *)(v12 + 40) = v15;
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "APS public token: <%@>", 22, 2, v12);
      swift_unknownObjectRelease(v7);
      swift_bridgeObjectRelease();
      return sub_10001EF3C(a1, a2);
    }
  }
  return result;
}

uint64_t sub_10098E414(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  if (a2 >> 60 == 15 || a4 == 0 || a6 == 0)
  {
    v9 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    return os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D40, "Invalid APS data arguments", 26, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    result = swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC12searchpartyd18ContainerAPSBridge_delegate);
    if (result)
    {
      v27 = result;
      v17 = sub_10001BBBC(a1, a2);
      v26 = static os_log_type_t.default.getter(v17);
      if (qword_1010EA260 != -1)
        swift_once(&qword_1010EA260, sub_100B5DA30);
      v25 = qword_1011B7D40;
      v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v19 = swift_allocObject(v18, 152, 7);
      *(_OWORD *)(v19 + 16) = xmmword_100E221E0;
      v20 = Data.hexString.getter(a1, a2);
      v22 = v21;
      *(_QWORD *)(v19 + 56) = &type metadata for String;
      v23 = sub_10001AA00();
      *(_QWORD *)(v19 + 32) = v20;
      *(_QWORD *)(v19 + 40) = v22;
      *(_QWORD *)(v19 + 96) = &type metadata for String;
      *(_QWORD *)(v19 + 104) = v23;
      *(_QWORD *)(v19 + 64) = v23;
      *(_QWORD *)(v19 + 72) = a3;
      *(_QWORD *)(v19 + 80) = a4;
      *(_QWORD *)(v19 + 136) = &type metadata for String;
      *(_QWORD *)(v19 + 144) = v23;
      *(_QWORD *)(v19 + 112) = a5;
      *(_QWORD *)(v19 + 120) = a6;
      swift_bridgeObjectRetain(a4);
      *(_QWORD *)&v24 = swift_bridgeObjectRetain(a6).n128_u64[0];
      os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v25, "APS token: <%@> forTopic: [%{public}@] identifier: [%{public}@]", 63, 2, v19, v24);
      swift_bridgeObjectRelease();
      sub_10001EF3C(a1, a2);
      return swift_unknownObjectRelease(v27);
    }
  }
  return result;
}

uint64_t sub_10098E630(void *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  id v5;
  uint64_t v6;

  if (a1)
  {
    result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC12searchpartyd18ContainerAPSBridge_delegate);
    if (result)
    {
      v4 = result;
      v5 = a1;
      sub_1001729C4(v5);

      return swift_unknownObjectRelease(v4);
    }
  }
  else
  {
    v6 = static os_log_type_t.error.getter(0);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    return os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_1011B7D40, "Invalid message Token", 21, 2, _swiftEmptyArrayStorage);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingCompleteCommandPayload()
{
  return &type metadata for PencilPairingCompleteCommandPayload;
}

unint64_t sub_10098E700(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10098E72C();
  result = sub_10015CC98();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10098E72C()
{
  unint64_t result;

  result = qword_10110E3E0;
  if (!qword_10110E3E0)
  {
    result = swift_getWitnessTable(byte_100E56C58, &type metadata for PencilPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_10110E3E0);
  }
  return result;
}

uint64_t sub_10098E770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10098E77C);
}

uint64_t sub_10098E77C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10098E7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10098E804);
}

char *sub_10098E804(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryIdentityPairingLockAckEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_10110E440;
  if (!qword_10110E440)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryIdentityPairingLockAckEndPoint);
  return result;
}

void sub_10098E8B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  void *v6;
  id v7;
  unsigned int v8;
  NSString v9;
  id v10;
  uint64_t v11;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v11);
  v5._countAndFlagsBits = 0xD00000000000001ELL;
  v5._object = (void *)0x8000000100EEB450;
  String.append(_:)(v5);
  v4(&v11, 0);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v6 = (void *)qword_1011B7C08;
  v7 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v8 = objc_msgSend(v7, "isInternalBuild");

  if (v8)
  {
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v6, "stringForKey:", v9);

    if (v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_10098EA78(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v14, v3, v4);
  v13 = *v1;
  v5 = v15;
  v6 = v16;
  sub_10009F5D0((uint64_t)v14, v15);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v13, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v13 = v1[2];
    v8 = v15;
    v9 = v16;
    sub_10009F5D0((uint64_t)v14, v15);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v13, &type metadata for Data, v7, v8, v9);
    v13 = v1[1];
    v10 = v15;
    v11 = v16;
    sub_10009F5D0((uint64_t)v14, v15);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v13, &type metadata for Data, v7, v10, v11);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

double sub_10098EBAC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_10098ED48(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10098EBEC(_QWORD *a1)
{
  return sub_10098EA78(a1);
}

uint64_t sub_10098EC00(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_10098EC0C + *((int *)qword_10098ED18 + (a2 >> 62))))();
}

uint64_t sub_10098EC1C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 32)
  {
    __break(1u);
    JUMPOUT(0x10098ED10);
  }
  return ((uint64_t (*)(void))((char *)&loc_10098EC58 + *((int *)qword_10098ED28 + (a4 >> 62))))();
}

uint64_t sub_10098ED48@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v27, v5, v6);
  v7 = v28;
  v8 = v29;
  sub_10009F5D0((uint64_t)v27, v28);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v28;
    v14 = v29;
    sub_10009F5D0((uint64_t)v27, v28);
    v15 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v13, v14);
    v33 = v16;
    v18 = v28;
    v17 = v29;
    sub_10009F5D0((uint64_t)v27, v28);
    v19 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v18, v17);
    v26 = v33;
    v21 = v20;
    sub_10001BBBC(v19, v20);
    v22 = sub_100035530();
    v23 = DataProtocol.intValue.getter(&type metadata for Data, v22);
    sub_1002F7C0C(v23, v19, v21);
    sub_10001BC14(v15, v26);
    sub_10098EC00(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v25 = v31;
    *a2 = v30;
    a2[1] = v25;
    a2[2] = v32;
  }
  return result;
}

void sub_10098EF08(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10098EF58()
{
  uint64_t v0;

  if (BYTE6(v0) == 32)
    __asm { BR              X9 }
  __break(1u);
}

ValueMetadata *type metadata accessor for PencilFinalizePairingCommandPayload()
{
  return &type metadata for PencilFinalizePairingCommandPayload;
}

unint64_t sub_10098F218(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10098F244();
  result = sub_10015CD20();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10098F244()
{
  unint64_t result;

  result = qword_10110E478;
  if (!qword_10110E478)
  {
    result = swift_getWitnessTable(byte_100E56D2C, &type metadata for PencilFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_10110E478);
  }
  return result;
}

uint64_t sub_10098F288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10098F294);
}

uint64_t sub_10098F294(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10098F310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10098F31C);
}

char *sub_10098F31C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockAckEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_10110E4D8;
  if (!qword_10110E4D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryPairingLockAckEndpoint);
  return result;
}

void sub_10098F3CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  unsigned int v6;
  NSString v7;
  id v8;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  URLComponents.path.setter();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v4 = (void *)qword_1011B7C08;
  v5 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v6 = objc_msgSend(v5, "isInternalBuild");

  if (v6)
  {
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v4, "stringForKey:", v7);

    if (v8)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_10098F574@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t updated;
  uint64_t v6;

  v2 = enum case for FMNAccountType.pairingLock(_:);
  v3 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  updated = type metadata accessor for PairingLockUpdateEndPoint(0);
  URLComponents.init()(updated);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B4E0(v6);
  swift_bridgeObjectRelease();
  return URLComponents.host.setter();
}

uint64_t type metadata accessor for PairingLockUpdateEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_10110E568;
  if (!qword_10110E568)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PairingLockUpdateEndPoint);
  return result;
}

uint64_t sub_10098F6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10098F6DC);
}

uint64_t sub_10098F6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for URLComponents(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10098F750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10098F75C);
}

uint64_t sub_10098F75C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for URLComponents(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10098F7D8(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7A18, 0x6F4C657275636573, 0xEF736E6F69746163);
}

uint64_t sub_10098F804(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7A30, 0x6F6C796D646E6966, 0xEC00000065746163);
}

_QWORD *sub_10098F82C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = type metadata accessor for SecureLocationsInfo();
  swift_allocObject(v0, 368, 7);
  result = sub_10098F8F4();
  qword_1011B7A48 = (uint64_t)result;
  return result;
}

uint64_t sub_10098F864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_10110E5A0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_10110E5A0);
  if (qword_1010EA0A0 != -1)
    swift_once(&qword_1010EA0A0, sub_10098F804);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7A30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_10098F8F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t (*v37)(char *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[12];

  v1 = (_QWORD *)v0;
  v39 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v39);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  LOBYTE(v42[0]) = 0;
  v11 = sub_10001A9A8(&qword_101108C08);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v40 = CurrentValueSubject.init(_:)(v42);
  *(_QWORD *)(v0 + 32) = v40;
  v12 = sub_10001A9A8(&qword_1010F6870);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v0 + 48) = PassthroughSubject.init()();
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v0 + 64) = PassthroughSubject.init()();
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v0 + 80) = PassthroughSubject.init()();
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v0 + 96) = PassthroughSubject.init()();
  v13 = sub_10001A9A8(&qword_1010FAAF0);
  v14 = swift_allocObject(v13, 20, 7);
  *(_DWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v0 + 112) = v14;
  *(_BYTE *)(v0 + 120) = 0;
  v35 = sub_10001F6FC();
  v36 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v37 = *(uint64_t (**)(char *))(v8 + 104);
  v15 = v37(v10);
  static DispatchQoS.unspecified.getter(v15);
  *(_QWORD *)&v42[0] = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v34 = v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v19 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(v42, v17, v18, v39, v16);
  *(_QWORD *)(v0 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ALL, 0x8000000100EEB750, v6, v3, v10, 0);
  *(_QWORD *)(v0 + 136) = &_swiftEmptyDictionarySingleton;
  v20 = ((uint64_t (*)(char *, _QWORD, uint64_t))v37)(v10, v36, v38);
  static DispatchQoS.unspecified.getter(v20);
  *(_QWORD *)&v42[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v42, v17, v18, v19, v34);
  *(_QWORD *)(v0 + 144) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000034, 0x8000000100EEB780, v6, v3, v10, 0);
  sub_1009968D0(v42);
  sub_10099681C((uint64_t)v42, v0 + 152);
  *(_QWORD *)(v0 + 360) = 0;
  v21 = v40;
  v22 = swift_retain();
  v23 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v22);
  swift_release(v21);
  v1[5] = v23;
  v41 = v1[6];
  v24 = sub_1000193A4(&qword_10110E888, &qword_1010F6870, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v1[7] = Publisher.eraseToAnyPublisher()(v12, v24);
  v41 = v1[8];
  v1[9] = Publisher.eraseToAnyPublisher()(v12, v24);
  v41 = v1[10];
  v1[11] = Publisher.eraseToAnyPublisher()(v12, v24);
  v41 = v1[12];
  v1[13] = Publisher.eraseToAnyPublisher()(v12, v24);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v25 = *(_QWORD *)(qword_1011B8588 + 24);
  v26 = swift_retain();
  v27 = AnyCurrentValuePublisher.publisher.getter(v26);
  swift_release(v25);
  v41 = v27;
  swift_retain();
  v28 = sub_10001A9A8(&qword_1011194D0);
  v29 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v30 = Publisher<>.sink(receiveValue:)(sub_100996998, v1, v28, v29);
  swift_release(v1);
  swift_release(v41);
  v31 = v1[3];
  v1[3] = v30;
  swift_release(v31);
  sub_10098FEA0();
  type metadata accessor for Transaction(0);
  swift_retain();
  static Transaction.asyncTask(name:block:)("computeLocationSharingStatus", 28, 2, &unk_10110E898, v1);
  swift_release(v1);
  return v1;
}

uint64_t sub_10098FE58()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110E5F4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_100994200();
}

uint64_t sub_10098FEA0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE v25[192];
  _QWORD v26[2];
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  v3 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v26[0] = 0x7365547265646E75;
  v26[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v27, v26, sub_10001F628, 0, &type metadata for Bool);
  result = swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
    v7 = swift_allocObject(&unk_10109FB38, 24, 7);
    swift_weakInit(v7 + 16, v0);
    v8 = swift_allocObject(&unk_10109FB38, 24, 7);
    swift_weakInit(v8 + 16, v0);
    v9 = swift_allocObject(&unk_10109FB38, 24, 7);
    swift_weakInit(v9 + 16, v0);
    v10 = swift_allocObject(&unk_10109FB38, 24, 7);
    swift_weakInit(v10 + 16, v0);
    v11 = sub_10001A9A8(&qword_1010F0E48);
    inited = swift_initStackObject(v11, v25);
    *(_OWORD *)(inited + 16) = xmmword_100E27910;
    v13 = swift_allocObject(&unk_10109FBD8, 32, 7);
    *(_QWORD *)(v13 + 16) = sub_100996B6C;
    *(_QWORD *)(v13 + 24) = v7;
    *(_QWORD *)(inited + 32) = 0xD000000000000027;
    *(_QWORD *)(inited + 40) = 0x8000000100EEB840;
    *(_QWORD *)(inited + 48) = sub_10015A05C;
    *(_QWORD *)(inited + 56) = v13;
    v14 = swift_allocObject(&unk_10109FC00, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_100996B74;
    *(_QWORD *)(v14 + 24) = v8;
    *(_QWORD *)(inited + 64) = 0xD000000000000028;
    *(_QWORD *)(inited + 72) = 0x8000000100EEB870;
    *(_QWORD *)(inited + 80) = sub_10015AAF0;
    *(_QWORD *)(inited + 88) = v14;
    *(_QWORD *)(inited + 96) = 0xD000000000000021;
    *(_QWORD *)(inited + 104) = 0x8000000100EEB8A0;
    *(_QWORD *)(inited + 112) = sub_1000090C8;
    *(_QWORD *)(inited + 120) = 0;
    v15 = swift_allocObject(&unk_10109FC28, 32, 7);
    *(_QWORD *)(v15 + 16) = sub_100996B7C;
    *(_QWORD *)(v15 + 24) = v9;
    *(_QWORD *)(inited + 128) = 0xD00000000000002FLL;
    *(_QWORD *)(inited + 136) = 0x8000000100EEB8D0;
    *(_QWORD *)(inited + 144) = sub_10015AAF0;
    *(_QWORD *)(inited + 152) = v15;
    v16 = swift_allocObject(&unk_10109FC50, 32, 7);
    *(_QWORD *)(v16 + 16) = sub_100996B84;
    *(_QWORD *)(v16 + 24) = v10;
    *(_QWORD *)(inited + 160) = 0xD000000000000030;
    *(_QWORD *)(inited + 168) = 0x8000000100EEB900;
    *(_QWORD *)(inited + 176) = sub_10015AAF0;
    *(_QWORD *)(inited + 184) = v16;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v17 = sub_1006B9680(inited);
    v18 = type metadata accessor for DarwinNotificationHelper(0);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v19 = DarwinNotificationHelper.init(notificationHandlers:)(v17);
    v20 = v1[2];
    v1[2] = v19;
    swift_release(v20);
    v21 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 1, 1, v21);
    v22 = swift_allocObject(&unk_10109FB38, 24, 7);
    swift_weakInit(v22 + 16, v1);
    v23 = (_QWORD *)swift_allocObject(&unk_10109FC78, 48, 7);
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = v22;
    v23[5] = v2;
    v24 = sub_100691AC0((uint64_t)v5, (uint64_t)&unk_10110E910, (uint64_t)v23);
    swift_release(v7);
    swift_release(v8);
    swift_release(v9);
    swift_release(v10);
    return swift_release(v24);
  }
  return result;
}

uint64_t sub_100990280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t Strong;
  uint64_t v9;
  id v10;
  Class isa;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];

  v2 = a2 + 16;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received notification that autoMe is enabled", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  swift_beginAccess(v2, v20, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v9 = Strong;
    v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "setValue:forKey:", isa, v12);

    sub_1009948C0();
    swift_release(v9);
  }
  swift_beginAccess(v2, v19, 0, 0);
  v13 = swift_weakLoadStrong(v2);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 80);
    swift_retain();
    swift_release(v14);
    v18[0] = 1;
    PassthroughSubject.send(_:)(v18);
    swift_release(v15);
  }
  swift_beginAccess(v2, v18, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v17 = result;
    sub_1009948C0();
    return swift_release(v17);
  }
  return result;
}

uint64_t sub_100990490(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t Strong;
  uint64_t v9;
  id v10;
  Class isa;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];
  _BYTE v20[24];

  v2 = a2 + 16;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received notification that autoMe is disabled", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  swift_beginAccess(v2, v20, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v9 = Strong;
    v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "setValue:forKey:", isa, v12);

    sub_1009948C0();
    swift_release(v9);
  }
  swift_beginAccess(v2, v19, 0, 0);
  v13 = swift_weakLoadStrong(v2);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 80);
    swift_retain();
    swift_release(v14);
    v18[0] = 0;
    PassthroughSubject.send(_:)(v18);
    swift_release(v15);
  }
  swift_beginAccess(v2, v18, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v17 = result;
    sub_1009948C0();
    return swift_release(v17);
  }
  return result;
}

void sub_10099069C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t Strong;
  uint64_t v9;
  void *v10;
  id v11;
  NSString v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class isa;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];

  v2 = a2 + 16;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received owner proactive eligible notification", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  swift_beginAccess(v2, v25, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v9 = Strong;
    v10 = (void *)objc_opt_self(NSUserDefaults);
    v11 = objc_msgSend(v10, "standardUserDefaults");
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "BOOLForKey:", v12);
    swift_release(v9);

    if ((v13 & 1) == 0)
    {
      swift_beginAccess(v2, v24, 0, 0);
      v14 = swift_weakLoadStrong(v2);
      if (v14)
      {
        v15 = v14;
        v16 = objc_msgSend(v10, "standardUserDefaults");
        isa = Bool._bridgeToObjectiveC()().super.super.isa;
        v18 = String._bridgeToObjectiveC()();
        objc_msgSend(v16, "setValue:forKey:", isa, v18);
        swift_release(v15);

      }
      swift_beginAccess(v2, v23, 0, 0);
      v19 = swift_weakLoadStrong(v2);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)(v19 + 96);
        swift_retain();
        swift_release(v20);
        v22 = 1;
        PassthroughSubject.send(_:)(&v22);
        swift_release(v21);
      }
    }
  }
}

void sub_1009908F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t Strong;
  uint64_t v9;
  void *v10;
  id v11;
  NSString v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class isa;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];

  v2 = a2 + 16;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received owner proactive not eligible notification", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  swift_beginAccess(v2, v25, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v9 = Strong;
    v10 = (void *)objc_opt_self(NSUserDefaults);
    v11 = objc_msgSend(v10, "standardUserDefaults");
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "BOOLForKey:", v12);
    swift_release(v9);

    if (v13)
    {
      swift_beginAccess(v2, v24, 0, 0);
      v14 = swift_weakLoadStrong(v2);
      if (v14)
      {
        v15 = v14;
        v16 = objc_msgSend(v10, "standardUserDefaults");
        isa = Bool._bridgeToObjectiveC()().super.super.isa;
        v18 = String._bridgeToObjectiveC()();
        objc_msgSend(v16, "setValue:forKey:", isa, v18);
        swift_release(v15);

      }
      swift_beginAccess(v2, v23, 0, 0);
      v19 = swift_weakLoadStrong(v2);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)(v19 + 96);
        swift_retain();
        swift_release(v20);
        v22 = 0;
        PassthroughSubject.send(_:)(&v22);
        swift_release(v21);
      }
    }
  }
}

uint64_t sub_100990B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[181] = a4;
  v5 = type metadata accessor for ClientOrigin(0);
  v4[187] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[188] = v6;
  v4[189] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RequestOrigin(0);
  v4[190] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100990BC8, 0, 0);
}

uint64_t sub_100990BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 1448) + 16;
  swift_beginAccess(v1, v0 + 1336, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 1528) = Strong;
  if (Strong)
  {
    if (qword_1010EA0B0 != -1)
      swift_once(&qword_1010EA0B0, sub_10098F864);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_10110E5A0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v14 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 1400) = sub_100016940(0xD000000000000012, 0x8000000100EEB940, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1400, v0 + 1408, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Monitoring FindMyLocate changes", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 1512);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1504) + 104))(v9, enum case for ClientOrigin.other(_:), *(_QWORD *)(v0 + 1496));
    RequestOrigin.init(_:)(v9);
    v10 = type metadata accessor for Session(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
    *(_QWORD *)(v0 + 1536) = v11;
    *v11 = v0;
    v11[1] = sub_100990E14;
    return Session.init(_:)(*(_QWORD *)(v0 + 1520));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 1512);
    swift_task_dealloc(*(_QWORD *)(v0 + 1520));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100990E14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1536);
  *(_QWORD *)(*(_QWORD *)v1 + 1544) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100990E70, 0, 0);
}

uint64_t sub_100990E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 1528);
  *(_QWORD *)(v1 + 360) = *(_QWORD *)(v0 + 1544);
  swift_release();
  swift_asyncLet_begin(v0 + 16, 0, &type metadata for () + 1, &unk_10110E920, v1, v2);
  swift_asyncLet_begin(v0 + 656, 0, &type metadata for () + 1, &unk_10110E930, v1, v3);
  return swift_asyncLet_get(v0 + 16, v4, sub_100990F18, v0 + 1360);
}

uint64_t sub_100990F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 656, a2, sub_100990F2C, v2 + 1296);
}

uint64_t sub_100990F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_100990F40, v2 + 1456);
}

uint64_t sub_100990F40()
{
  return swift_task_switch(sub_100990F54, 0, 0);
}

uint64_t sub_100990F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 16, a2, sub_100990F68, v2 + 1408);
}

uint64_t sub_100990F68()
{
  return swift_task_switch(sub_100990F7C, 0, 0);
}

uint64_t sub_100990F7C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 1528));
  v1 = *(_QWORD *)(v0 + 1512);
  swift_task_dealloc(*(_QWORD *)(v0 + 1520));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100990FC0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110E5EC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100030654;
  return sub_100992468();
}

uint64_t sub_100991008()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110E5E4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1002613B8;
  return sub_100991050();
}

uint64_t sub_100991050()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[13] = v0;
  v2 = type metadata accessor for PreferenceStreamChange(0);
  v1[14] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[15] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[16] = swift_task_alloc(v4);
  v1[17] = swift_task_alloc(v4);
  v1[18] = swift_task_alloc(v4);
  v1[19] = swift_task_alloc(v4);
  v5 = sub_10001A9A8(&qword_10110E8E0);
  v1[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_10110E8E8);
  v1[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[22] = v7;
  v1[23] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_10110E8F0);
  v1[24] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[25] = v9;
  v1[26] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100991154, 0, 0);
}

uint64_t sub_100991154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_1010EA0B0 != -1)
    swift_once(&qword_1010EA0B0, sub_10098F864);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_10110E5A0);
  *(_QWORD *)(v0 + 216) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v22 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 96) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEB820, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v8 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 360);
  *(_QWORD *)(v0 + 224) = v8;
  if (v8)
  {
    v9 = async function pointer to Session.startMonitoringPreferencesChange()[1];
    swift_retain();
    v10 = (_QWORD *)swift_task_alloc(v9);
    *(_QWORD *)(v0 + 232) = v10;
    *v10 = v0;
    v10[1] = sub_100991484;
    return Session.startMonitoringPreferencesChange()(*(_QWORD *)(v0 + 208));
  }
  else
  {
    v12 = Logger.logObject.getter(v7);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v22 = v15;
      *(_DWORD *)v14 = 136446210;
      *(_QWORD *)(v0 + 80) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEB820, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v14 + 4, v14 + 12);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s Missing FindMyLocate.Session!", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }

    v16 = *(_QWORD *)(v0 + 184);
    v18 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 144);
    v21 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100991484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1009920BC;
  else
    v3 = sub_1009914E8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1009914E8()
{
  uint64_t v0;
  _QWORD *v1;

  AsyncStream.makeAsyncIterator()(*(_QWORD *)(v0 + 192));
  *(_DWORD *)(v0 + 304) = enum case for PreferenceStreamChange.meDevice(_:);
  *(_DWORD *)(v0 + 308) = enum case for PreferenceStreamChange.myLocation(_:);
  *(_DWORD *)(v0 + 312) = enum case for PreferenceStreamChange.friendRequests(_:);
  *(_DWORD *)(v0 + 316) = enum case for PreferenceStreamChange.initialized(_:);
  *(_QWORD *)(v0 + 248) = *(_QWORD *)(v0 + 240);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 256) = v1;
  *v1 = v0;
  v1[1] = sub_100991598;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 160), 0, 0, *(_QWORD *)(v0 + 168));
}

uint64_t sub_100991598()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  return swift_task_switch(sub_1009915EC, 0, 0);
}

uint64_t sub_1009915EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90[2];

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 192);
    v8 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 176);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v10 = *(_QWORD *)(v0 + 184);
    v12 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 136);
    v13 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v18 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v17, v1, v2);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v20 = v19(v18, v17, v2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v0 + 120);
  if (v23)
  {
    v27 = swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(64, -1);
    v90[0] = v28;
    *(_DWORD *)v27 = 136446466;
    *(_QWORD *)(v27 + 4) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEB820, v90);
    *(_WORD *)(v27 + 12) = 2080;
    v29 = sub_100006204(&qword_10110E8F8, (uint64_t (*)(uint64_t))&type metadata accessor for PreferenceStreamChange, (uint64_t)&protocol conformance descriptor for PreferenceStreamChange);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v25, v29);
    *(_QWORD *)(v27 + 14) = sub_100016940(v30, v31, v90);
    swift_bridgeObjectRelease();
    v32 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v32(v24, v25);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s Received preference update: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v32(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112));
  }

  *(_QWORD *)(v0 + 264) = v32;
  v33 = *(_DWORD *)(v0 + 304);
  v34 = *(_QWORD *)(v0 + 136);
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 120);
  v19(v34, *(_QWORD *)(v0 + 152), v35);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 88))(v34, v35);
  if (v37 == v33)
  {
    v38 = *(_QWORD *)(v0 + 136);
    v39 = *(_QWORD *)(v0 + 112);
    v40 = *(_QWORD *)(v0 + 120);
    v32(*(_QWORD *)(v0 + 152), v39);
    (*(void (**)(uint64_t, uint64_t))(v40 + 96))(v38, v39);
    sub_100996AE0(v38);
LABEL_32:
    v48 = *(_QWORD *)(v0 + 248);
    goto LABEL_33;
  }
  if (v37 != *(_DWORD *)(v0 + 308))
  {
    if (v37 == *(_DWORD *)(v0 + 312))
    {
      v57 = *(_QWORD *)(v0 + 152);
    }
    else
    {
      if (v37 == *(_DWORD *)(v0 + 316))
      {
        v65 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
        *(_QWORD *)(v0 + 272) = v65;
        *v65 = v0;
        v65[1] = sub_100991F2C;
        v66 = &type metadata for () + 1;
        v67 = sub_10099230C;
        v68 = 0;
        return unsafeBlocking<A>(_:)(v65, v67, v68, v66);
      }
      v74 = v19(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112));
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.error.getter(v75);
      v77 = os_log_type_enabled(v75, v76);
      v78 = *(_QWORD *)(v0 + 152);
      v79 = *(_QWORD *)(v0 + 128);
      v80 = *(_QWORD *)(v0 + 112);
      if (v77)
      {
        v81 = swift_slowAlloc(22, -1);
        v82 = swift_slowAlloc(64, -1);
        v90[0] = v82;
        *(_DWORD *)v81 = 136446466;
        *(_QWORD *)(v81 + 4) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEB820, v90);
        *(_WORD *)(v81 + 12) = 2080;
        v83 = sub_100006204(&qword_10110E8F8, (uint64_t (*)(uint64_t))&type metadata accessor for PreferenceStreamChange, (uint64_t)&protocol conformance descriptor for PreferenceStreamChange);
        v84 = dispatch thunk of CustomStringConvertible.description.getter(v80, v83);
        *(_QWORD *)(v81 + 14) = sub_100016940(v84, v85, v90);
        swift_bridgeObjectRelease();
        v32(v79, v80);
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "%{public}s Unknown preference change %s", (uint8_t *)v81, 0x16u);
        swift_arrayDestroy(v82, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v81, -1, -1);

      }
      else
      {

        v32(v79, v80);
      }
      v32(v78, v80);
      v57 = *(_QWORD *)(v0 + 136);
    }
    v32(v57, *(_QWORD *)(v0 + 112));
    goto LABEL_32;
  }
  v89 = v32;
  v41 = *(unsigned __int8 **)(v0 + 136);
  v42 = (*(uint64_t (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)(v0 + 120) + 96))(v41, *(_QWORD *)(v0 + 112));
  v43 = *v41;
  v44 = Logger.logObject.getter(v42);
  v45 = static os_log_type_t.default.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc(18, -1);
    v47 = swift_slowAlloc(32, -1);
    v90[0] = v47;
    *(_DWORD *)v46 = 136446466;
    *(_QWORD *)(v46 + 4) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEB820, v90);
    *(_WORD *)(v46 + 12) = 1024;
    *(_DWORD *)(v46 + 14) = v43;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "%{public}s Location sharing status changed: Enabled? %{BOOL}d", (uint8_t *)v46, 0x12u);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }

  v48 = *(_QWORD *)(v0 + 248);
  v49 = *(_QWORD *)(v0 + 104);
  v50 = *(_QWORD *)(v49 + 112);
  v51 = swift_allocObject(&unk_10109FB38, 24, 7);
  swift_weakInit(v51 + 16, v49);
  v52 = swift_task_alloc(32);
  *(_QWORD *)(v52 + 16) = v51;
  *(_BYTE *)(v52 + 24) = v43;
  v88 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100996B20, v52, v50, &type metadata for () + 1, v88);
  swift_release();
  swift_task_dealloc(v52);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v53 = (unsigned __int8 *)(v0 + 324);
  v54 = *(_QWORD *)(v0 + 104);
  v55 = swift_retain();
  AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 320), v55);
  swift_release();
  *(_BYTE *)(v0 + 324) = *(_BYTE *)(v0 + 320) == 1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100996D1C, v54, v50, &type metadata for () + 1, &type metadata for Bool);
  if (*(_BYTE *)(v0 + 326) == 1)
  {
    swift_beginAccess(v0 + 324, v0 + 16, 0, 0);
    v56 = *v53;
  }
  else
  {
    v56 = 0;
  }
  v58 = swift_retain();
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.default.getter(v59);
  v61 = os_log_type_enabled(v59, v60);
  v62 = *(_QWORD *)(v0 + 104);
  if (v61)
  {
    v87 = v56;
    v63 = swift_slowAlloc(14, -1);
    *(_DWORD *)v63 = 67109376;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100996D1C, v62, v50, &type metadata for () + 1, &type metadata for Bool);
    *(_DWORD *)(v63 + 4) = *(unsigned __int8 *)(v0 + 323);
    swift_release();
    *(_WORD *)(v63 + 8) = 1024;
    swift_beginAccess(v0 + 324, v0 + 40, 0, 0);
    *(_DWORD *)(v63 + 10) = *v53;
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "RecomputeLocationSharing: isMyLocationEnabled %{BOOL}d isThisMeDevice %{BOOL}d", (uint8_t *)v63, 0xEu);
    v64 = v63;
    v56 = v87;
    swift_slowDealloc(v64, -1, -1);
  }
  else
  {
    swift_release();
  }

  *(_QWORD *)(v0 + 280) = v48;
  AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 321), v69);
  if (v56 != *(unsigned __int8 *)(v0 + 321))
  {
    v70 = *(_QWORD *)(v0 + 104);
    v71 = swift_allocObject(&unk_10109FB38, 24, 7);
    swift_weakInit(v71 + 16, v70);
    v72 = swift_allocObject(&unk_10109FBB0, 25, 7);
    *(_QWORD *)(v0 + 288) = v72;
    *(_QWORD *)(v72 + 16) = v71;
    *(_BYTE *)(v72 + 24) = v56;
    v73 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    *(_QWORD *)(v0 + 296) = v73;
    *v73 = v0;
    v73[1] = sub_100991FEC;
    v67 = sub_100996B60;
    v65 = (_QWORD *)(v0 + 322);
    v68 = v72;
    v66 = (_QWORD *)v88;
    return unsafeBlocking<A>(_:)(v65, v67, v68, v66);
  }
  v89(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112));
LABEL_33:
  *(_QWORD *)(v0 + 248) = v48;
  v86 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 256) = v86;
  *v86 = v0;
  v86[1] = sub_100991598;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 160), 0, 0, *(_QWORD *)(v0 + 168));
}

uint64_t sub_100991F2C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  return swift_task_switch(sub_100991F80, 0, 0);
}

uint64_t sub_100991F80()
{
  uint64_t v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0 + 264))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112));
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 256) = v1;
  *v1 = v0;
  v1[1] = sub_100991598;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 160), 0, 0, *(_QWORD *)(v0 + 168));
}

uint64_t sub_100991FEC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  swift_release();
  return swift_task_switch(sub_100992048, 0, 0);
}

uint64_t sub_100992048()
{
  uint64_t v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0 + 264))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112));
  *(_QWORD *)(v0 + 248) = *(_QWORD *)(v0 + 280);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 256) = v1;
  *v1 = v0;
  v1[1] = sub_100991598;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 160), 0, 0, *(_QWORD *)(v0 + 168));
}

uint64_t sub_1009920BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 240);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 240);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v19 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 88) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEB820, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 64) = v5;
    swift_errorRetain(v5);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(v0 + 64, v8);
    *(_QWORD *)(v0 + 72) = sub_100016940(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_release();

    swift_errorRelease(v5);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 240);
    swift_release();
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v12 = *(_QWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 160);
  v16 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10099230C()
{
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  sub_100DFCFE0();
}

uint64_t sub_100992358@<X0>(uint64_t a1@<X0>, char a2@<W1>, BOOL *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  v7 = result;
  if (result)
  {
    *(_BYTE *)(result + 120) = a2 & 1;
    result = swift_release(result);
  }
  *a3 = v7 == 0;
  return result;
}

uint64_t sub_1009923D4@<X0>(uint64_t a1@<X0>, char a2@<W1>, BOOL *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v5);
  v7 = result;
  if (result)
  {
    v8 = *(_QWORD *)(result + 32);
    swift_retain(v8);
    swift_release(v7);
    v9 = a2 & 1;
    CurrentValueSubject.send(_:)(&v9);
    result = swift_release(v8);
  }
  *a3 = v7 == 0;
  return result;
}

uint64_t sub_100992468()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1[7] = v0;
  v2 = type metadata accessor for HandleType(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  v5 = type metadata accessor for Friend(0);
  v1[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[13] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[14] = swift_task_alloc(v7);
  v1[15] = swift_task_alloc(v7);
  v1[16] = swift_task_alloc(v7);
  v1[17] = swift_task_alloc(v7);
  v1[18] = swift_task_alloc(v7);
  v1[19] = swift_task_alloc(v7);
  v1[20] = swift_task_alloc(v7);
  v1[21] = swift_task_alloc(v7);
  v8 = type metadata accessor for FriendStreamChange(0);
  v1[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[23] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[24] = swift_task_alloc(v10);
  v1[25] = swift_task_alloc(v10);
  v1[26] = swift_task_alloc(v10);
  v1[27] = swift_task_alloc(v10);
  v1[28] = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_10110E8B8);
  v1[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_10110E8C0);
  v1[30] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[31] = v13;
  v1[32] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_10110E8C8);
  v1[33] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v1[34] = v15;
  v1[35] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100992630, 0, 0);
}

uint64_t sub_100992630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (qword_1010EA0B0 != -1)
    swift_once(&qword_1010EA0B0, sub_10098F864);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_10110E5A0);
  *(_QWORD *)(v0 + 288) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v33 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 48) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEB800, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v8 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 360);
  *(_QWORD *)(v0 + 296) = v8;
  if (v8)
  {
    v9 = async function pointer to Session.startUpdatingFriends(receiveInitialUpdates:)[1];
    swift_retain();
    v10 = (_QWORD *)swift_task_alloc(v9);
    *(_QWORD *)(v0 + 304) = v10;
    *v10 = v0;
    v10[1] = sub_1009929F0;
    return Session.startUpdatingFriends(receiveInitialUpdates:)(*(_QWORD *)(v0 + 280), 0);
  }
  else
  {
    v12 = Logger.logObject.getter(v7);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v33 = v15;
      *(_DWORD *)v14 = 136446210;
      *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEB800, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s Missing FindMyLocate.Session!", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }

    v16 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 216);
    v21 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 200);
    v24 = *(_QWORD *)(v0 + 160);
    v23 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 144);
    v27 = *(_QWORD *)(v0 + 136);
    v28 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v0 + 120);
    v30 = *(_QWORD *)(v0 + 112);
    v31 = *(_QWORD *)(v0 + 88);
    v32 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009929F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100993BB0;
  else
    v3 = sub_100992A54;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100992A54()
{
  uint64_t v0;
  _QWORD *v1;

  AsyncStream.makeAsyncIterator()(*(_QWORD *)(v0 + 264));
  *(_DWORD *)(v0 + 384) = enum case for FriendStreamChange.added(_:);
  *(_DWORD *)(v0 + 388) = enum case for FriendStreamChange.removed(_:);
  *(_DWORD *)(v0 + 392) = enum case for FriendStreamChange.modified(_:);
  *(_DWORD *)(v0 + 396) = enum case for HandleType.follower(_:);
  *(_DWORD *)(v0 + 400) = enum case for HandleType.following(_:);
  *(_DWORD *)(v0 + 404) = enum case for HandleType.futureFollower(_:);
  *(_DWORD *)(v0 + 408) = enum case for HandleType.futureFollowing(_:);
  *(_DWORD *)(v0 + 412) = enum case for HandleType.pendingOffer(_:);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 320) = v1;
  *v1 = v0;
  v1[1] = sub_100992B3C;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 232), 0, 0, *(_QWORD *)(v0 + 240));
}

uint64_t sub_100992B3C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  return swift_task_switch(sub_100992B90, 0, 0);
}

uint64_t sub_100992B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  const char *v62;
  void (*v63)(uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  void (*v161)(uint64_t, uint64_t);
  void (*v162)(uint64_t, uint64_t);
  uint64_t v163;
  void (*v164)(uint64_t, uint64_t);
  uint64_t v165;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t);
  void (*v182)(uint64_t, uint64_t);
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 280);
    v7 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 240);
    v9 = *(_QWORD *)(v0 + 248);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v10 = *(_QWORD *)(v0 + 256);
    v12 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 216);
    v15 = *(_QWORD *)(v0 + 192);
    v16 = *(_QWORD *)(v0 + 200);
    v18 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 168);
    v165 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)type = *(_QWORD *)(v0 + 144);
    v168 = *(_QWORD *)(v0 + 136);
    v170 = *(_QWORD *)(v0 + 128);
    v172 = *(_QWORD *)(v0 + 120);
    v174 = *(_QWORD *)(v0 + 112);
    v177 = *(_QWORD *)(v0 + 88);
    v180 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v165);
    swift_task_dealloc(*(_QWORD *)type);
    swift_task_dealloc(v168);
    swift_task_dealloc(v170);
    swift_task_dealloc(v172);
    swift_task_dealloc(v174);
    swift_task_dealloc(v177);
    swift_task_dealloc(v180);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v21 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v20, v1, v2);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v23 = v22(v21, v20, v2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = os_log_type_enabled(v24, v25);
  v27 = *(_QWORD *)(v0 + 216);
  if (v26)
  {
    v28 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 176);
    v30 = *(_QWORD *)(v0 + 184);
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v184 = v32;
    *(_DWORD *)v31 = 136446466;
    *(_QWORD *)(v31 + 4) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEB800, &v184);
    *(_WORD *)(v31 + 12) = 2080;
    v22(v28, v27, v29);
    v33 = String.init<A>(describing:)(v28, v29);
    *(_QWORD *)(v31 + 14) = sub_100016940(v33, v34, &v184);
    swift_bridgeObjectRelease();
    v35 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v35(v27, v29);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s Received friend update: %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 184) + 8);
    v35(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 176));
  }

  *(_QWORD *)(v0 + 328) = v35;
  v36 = *(_DWORD *)(v0 + 384);
  v37 = *(_QWORD *)(v0 + 200);
  v38 = *(_QWORD *)(v0 + 176);
  v39 = *(_QWORD *)(v0 + 184);
  v22(v37, *(_QWORD *)(v0 + 224), v38);
  v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 88))(v37, v38);
  if (v40 == v36)
  {
    v41 = *(_QWORD *)(v0 + 200);
    v43 = *(_QWORD *)(v0 + 128);
    v42 = *(_QWORD *)(v0 + 136);
    v44 = *(_QWORD *)(v0 + 96);
    v45 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 96))(v41, *(_QWORD *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v42, v41, v44);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v43, v42, v44);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    v49 = os_log_type_enabled(v47, v48);
    v50 = *(_QWORD *)(v0 + 224);
    v51 = *(_QWORD *)(v0 + 176);
    v52 = *(_QWORD *)(v0 + 128);
    v53 = *(_QWORD *)(v0 + 136);
    v55 = *(_QWORD *)(v0 + 96);
    v54 = *(_QWORD *)(v0 + 104);
    if (v49)
    {
      v178 = *(_QWORD *)(v0 + 176);
      v181 = v35;
      v56 = swift_slowAlloc(22, -1);
      v175 = v50;
      v57 = swift_slowAlloc(64, -1);
      v184 = v57;
      *(_DWORD *)v56 = 136446466;
      *(_QWORD *)(v56 + 4) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEB800, &v184);
      *(_WORD *)(v56 + 12) = 2080;
      v58 = sub_100006204(&qword_10110E8D0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v55, v58);
      *(_QWORD *)(v56 + 14) = sub_100016940(v59, v60, &v184);
      swift_bridgeObjectRelease();
      v61 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v61(v52, v55);
      v62 = "%{public}s Ignoring newly added friend: %s";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v47, v48, v62, (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      v61(v53, v55);
      v181(v175, v178);
LABEL_32:
      v137 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
      *(_QWORD *)(v0 + 320) = v137;
      *v137 = v0;
      v137[1] = sub_100992B3C;
      return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 232), 0, 0, *(_QWORD *)(v0 + 240));
    }
    goto LABEL_17;
  }
  if (v40 != *(_DWORD *)(v0 + 388))
  {
    if (v40 != *(_DWORD *)(v0 + 392))
    {
      v114 = v22(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 176));
      v115 = Logger.logObject.getter(v114);
      v116 = static os_log_type_t.error.getter(v115);
      v117 = os_log_type_enabled(v115, v116);
      v118 = *(_QWORD *)(v0 + 224);
      if (v117)
      {
        v182 = v35;
        v119 = *(_QWORD *)(v0 + 208);
        v120 = *(_QWORD *)(v0 + 192);
        v121 = *(_QWORD *)(v0 + 176);
        v122 = swift_slowAlloc(22, -1);
        v123 = swift_slowAlloc(64, -1);
        v184 = v123;
        *(_DWORD *)v122 = 136446466;
        *(_QWORD *)(v122 + 4) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEB800, &v184);
        *(_WORD *)(v122 + 12) = 2080;
        v22(v119, v120, v121);
        v124 = String.init<A>(describing:)(v119, v121);
        *(_QWORD *)(v122 + 14) = sub_100016940(v124, v125, &v184);
        v35 = v182;
        swift_bridgeObjectRelease();
        v182(v120, v121);
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "%{public}s Unknown friendship change %s", (uint8_t *)v122, 0x16u);
        swift_arrayDestroy(v123, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v123, -1, -1);
        swift_slowDealloc(v122, -1, -1);

        v126 = v118;
        v127 = v121;
      }
      else
      {
        v135 = *(_QWORD *)(v0 + 192);
        v136 = *(_QWORD *)(v0 + 176);

        v35(v135, v136);
        v126 = v118;
        v127 = v136;
      }
      v35(v126, v127);
      v99 = *(_QWORD *)(v0 + 200);
      v100 = *(_QWORD *)(v0 + 176);
      goto LABEL_31;
    }
    v87 = *(_QWORD *)(v0 + 200);
    v89 = *(_QWORD *)(v0 + 112);
    v88 = *(_QWORD *)(v0 + 120);
    v90 = *(_QWORD *)(v0 + 96);
    v91 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 96))(v87, *(_QWORD *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32))(v88, v87, v90);
    v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 16))(v89, v88, v90);
    v47 = Logger.logObject.getter(v92);
    v48 = static os_log_type_t.default.getter(v47);
    v93 = os_log_type_enabled(v47, v48);
    v50 = *(_QWORD *)(v0 + 224);
    v51 = *(_QWORD *)(v0 + 176);
    v52 = *(_QWORD *)(v0 + 112);
    v53 = *(_QWORD *)(v0 + 120);
    v55 = *(_QWORD *)(v0 + 96);
    v54 = *(_QWORD *)(v0 + 104);
    if (v93)
    {
      v178 = *(_QWORD *)(v0 + 176);
      v181 = v35;
      v56 = swift_slowAlloc(22, -1);
      v175 = v50;
      v57 = swift_slowAlloc(64, -1);
      v184 = v57;
      *(_DWORD *)v56 = 136446466;
      *(_QWORD *)(v56 + 4) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEB800, &v184);
      *(_WORD *)(v56 + 12) = 2080;
      v94 = sub_100006204(&qword_10110E8D0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v95 = dispatch thunk of CustomStringConvertible.description.getter(v55, v94);
      *(_QWORD *)(v56 + 14) = sub_100016940(v95, v96, &v184);
      swift_bridgeObjectRelease();
      v61 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v61(v52, v55);
      v62 = "%{public}s Ignoring modified friend: %s";
      goto LABEL_9;
    }
LABEL_17:
    v97 = v51;

    v98 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v98(v52, v55);
    v98(v53, v55);
    v99 = v50;
    v100 = v97;
LABEL_31:
    v35(v99, v100);
    goto LABEL_32;
  }
  v63 = v35;
  v64 = *(_DWORD *)(v0 + 396);
  v65 = *(_QWORD *)(v0 + 200);
  v66 = *(_QWORD *)(v0 + 168);
  v67 = *(_QWORD *)(v0 + 96);
  v68 = *(_QWORD *)(v0 + 104);
  v69 = *(_QWORD *)(v0 + 88);
  v70 = *(_QWORD *)(v0 + 64);
  v71 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 96))(v65, *(_QWORD *)(v0 + 176));
  v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v66, v65, v67);
  Friend.type.getter(v72);
  v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 88))(v69, v70);
  if (v73 == v64)
  {
    v74 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 16))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 96));
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter(v75);
    v77 = os_log_type_enabled(v75, v76);
    v78 = *(_QWORD *)(v0 + 152);
    v79 = *(_QWORD *)(v0 + 96);
    v80 = *(_QWORD *)(v0 + 104);
    if (v77)
    {
      v81 = swift_slowAlloc(12, -1);
      v82 = swift_slowAlloc(32, -1);
      v184 = v82;
      *(_DWORD *)v81 = 136315138;
      v83 = sub_100006204(&qword_10110E8D0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v84 = dispatch thunk of CustomStringConvertible.description.getter(v79, v83);
      *(_QWORD *)(v81 + 4) = sub_100016940(v84, v85, &v184);
      swift_bridgeObjectRelease();
      v86 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
      v86(v78, v79);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Removed a follower: %s", (uint8_t *)v81, 0xCu);
      swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v81, -1, -1);
    }
    else
    {
      v86 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
      v86(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 96));
    }

    *(_QWORD *)(v0 + 360) = v86;
    v128 = *(_QWORD *)(v0 + 56);
    v129 = swift_allocObject(&unk_10109FB38, 24, 7);
    *(_QWORD *)(v0 + 368) = v129;
    swift_weakInit(v129 + 16, v128);
    v130 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    *(_QWORD *)(v0 + 376) = v130;
    v131 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
    *v130 = v0;
    v130[1] = sub_100993ACC;
    return unsafeBlocking<A>(_:)(v0 + 416, sub_100996A80, v129, v131);
  }
  else
  {
    if (v73 != *(_DWORD *)(v0 + 400))
    {
      v132 = v63;
      if (v73 == *(_DWORD *)(v0 + 404) || v73 == *(_DWORD *)(v0 + 408) || v73 == *(_DWORD *)(v0 + 412))
      {
        v133 = *(_QWORD *)(v0 + 224);
        v134 = *(_QWORD *)(v0 + 176);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 96));
        v63(v133, v134);
      }
      else
      {
        v141 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 16))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 96));
        v142 = Logger.logObject.getter(v141);
        v143 = static os_log_type_t.error.getter(v142);
        v144 = os_log_type_enabled(v142, v143);
        v145 = *(_QWORD *)(v0 + 224);
        v147 = *(_QWORD *)(v0 + 168);
        v146 = *(_QWORD *)(v0 + 176);
        v148 = *(_QWORD *)(v0 + 144);
        v150 = *(_QWORD *)(v0 + 96);
        v149 = *(_QWORD *)(v0 + 104);
        if (v144)
        {
          v176 = *(_QWORD *)(v0 + 176);
          v179 = *(_QWORD *)(v0 + 224);
          v152 = *(_QWORD *)(v0 + 72);
          v151 = *(_QWORD *)(v0 + 80);
          v171 = *(_QWORD *)(v0 + 96);
          v153 = *(_QWORD *)(v0 + 64);
          v183 = v132;
          v173 = *(_QWORD *)(v0 + 168);
          v154 = swift_slowAlloc(22, -1);
          v169 = v149;
          v155 = swift_slowAlloc(64, -1);
          v184 = v155;
          *(_DWORD *)v154 = 136446466;
          v156 = sub_100016940(0xD00000000000001DLL, 0x8000000100EEB800, &v184);
          *(_QWORD *)(v154 + 4) = v156;
          *(_WORD *)(v154 + 12) = 2080;
          typea = v143;
          Friend.type.getter(v156);
          v157 = sub_100006204(&qword_10110E8D8, (uint64_t (*)(uint64_t))&type metadata accessor for HandleType, (uint64_t)&protocol conformance descriptor for HandleType);
          v158 = dispatch thunk of CustomStringConvertible.description.getter(v153, v157);
          v160 = v159;
          v161 = *(void (**)(uint64_t, uint64_t))(v152 + 8);
          v161(v151, v153);
          *(_QWORD *)(v154 + 14) = sub_100016940(v158, v160, &v184);
          swift_bridgeObjectRelease();
          v162 = *(void (**)(uint64_t, uint64_t))(v169 + 8);
          v162(v148, v171);
          _os_log_impl((void *)&_mh_execute_header, v142, typea, "%{public}s Unexpected friend.type %s", (uint8_t *)v154, 0x16u);
          swift_arrayDestroy(v155, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v155, -1, -1);
          swift_slowDealloc(v154, -1, -1);

          v162(v173, v171);
          v183(v179, v176);
        }
        else
        {
          v163 = *(_QWORD *)(v0 + 72);

          v164 = *(void (**)(uint64_t, uint64_t))(v149 + 8);
          v164(v148, v150);
          v164(v147, v150);
          v132(v145, v146);
          v161 = *(void (**)(uint64_t, uint64_t))(v163 + 8);
        }
        v161(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
      }
      goto LABEL_32;
    }
    v101 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 16))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 96));
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.default.getter(v102);
    v104 = os_log_type_enabled(v102, v103);
    v105 = *(_QWORD *)(v0 + 160);
    v106 = *(_QWORD *)(v0 + 96);
    v107 = *(_QWORD *)(v0 + 104);
    if (v104)
    {
      v108 = swift_slowAlloc(12, -1);
      v109 = swift_slowAlloc(32, -1);
      v184 = v109;
      *(_DWORD *)v108 = 136315138;
      v110 = sub_100006204(&qword_10110E8D0, (uint64_t (*)(uint64_t))&type metadata accessor for Friend, (uint64_t)&protocol conformance descriptor for Friend);
      v111 = dispatch thunk of CustomStringConvertible.description.getter(v106, v110);
      *(_QWORD *)(v108 + 4) = sub_100016940(v111, v112, &v184);
      swift_bridgeObjectRelease();
      v113 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
      v113(v105, v106);
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Removed a following: %s", (uint8_t *)v108, 0xCu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v108, -1, -1);
    }
    else
    {
      v113 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
      v113(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 96));
    }

    *(_QWORD *)(v0 + 336) = v113;
    v138 = *(_QWORD *)(v0 + 56);
    v139 = swift_allocObject(&unk_10109FB38, 24, 7);
    *(_QWORD *)(v0 + 344) = v139;
    swift_weakInit(v139 + 16, v138);
    v140 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    *(_QWORD *)(v0 + 352) = v140;
    *v140 = v0;
    v140[1] = sub_1009939EC;
    return unsafeBlocking<A>(_:)(v140, sub_100996A88, v139, &type metadata for () + 1);
  }
}

uint64_t sub_1009939EC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  swift_release();
  return swift_task_switch(sub_100993A48, 0, 0);
}

uint64_t sub_100993A48()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 176);
  (*(void (**)(_QWORD, _QWORD))(v0 + 336))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 96));
  v1(v2, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 320) = v4;
  *v4 = v0;
  v4[1] = sub_100992B3C;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 232), 0, 0, *(_QWORD *)(v0 + 240));
}

uint64_t sub_100993ACC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 376));
  swift_release();
  return swift_task_switch(sub_100993B28, 0, 0);
}

uint64_t sub_100993B28()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 176);
  (*(void (**)(_QWORD, _QWORD))(v0 + 360))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 96));
  v1(v2, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 320) = v4;
  *v4 = v0;
  v4[1] = sub_100992B3C;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 232), 0, 0, *(_QWORD *)(v0 + 240));
}

uint64_t sub_100993BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 312);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 312);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v30 = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEB800, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 32) = v5;
    swift_errorRetain(v5);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(v0 + 32, v8);
    *(_QWORD *)(v0 + 40) = sub_100016940(v9, v10, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_release();

    swift_errorRelease(v5);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 312);
    swift_release();
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v12 = *(_QWORD *)(v0 + 256);
  v14 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 128);
  v26 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 112);
  v28 = *(_QWORD *)(v0 + 88);
  v29 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100993E8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  char v8;
  _QWORD aBlock[6];
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    goto LABEL_3;
  v3 = Strong;
  v4 = *(NSObject **)(Strong + 128);
  v5 = swift_allocObject(&unk_10109FB60, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100996A90;
  *(_QWORD *)(v5 + 24) = v3;
  aBlock[4] = sub_10001D850;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10109FB78;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v6);
  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v5, "", 105, 422, 39, 1);
  swift_release_n(v3, 2);
  result = swift_release();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    swift_beginAccess(v1, aBlock, 0, 0);
    result = swift_weakLoadStrong(v1);
    if (result)
    {
      swift_retain();
      swift_release();
      v8 = 1;
      PassthroughSubject.send(_:)(&v8);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100994010@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v3);
  v5 = result;
  if (result)
  {
    v6 = 1;
    PassthroughSubject.send(_:)(&v6);
    result = swift_release(v5);
  }
  *a2 = v5 == 0;
  return result;
}

void sub_10099408C(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *oslog;

  v1 = *a1;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7A18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "LocationSharing: recompute sharing status after me device change", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  if (v1)
  {
    sub_1009948C0();
  }
  else
  {
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "LocationSharing: Me device state is unknown. Lets not recompute", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
}

uint64_t sub_100994200()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = v0;
  v2 = type metadata accessor for ClientOrigin(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RequestOrigin(0);
  v1[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100994280, 0, 0);
}

uint64_t sub_100994280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 16) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 24) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 124), v0 + 16, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 124) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
    *(_QWORD *)(v0 + 80) = v4;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "LocationSharing: Computing LocationSharing status", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 48);
    v10 = *(_QWORD *)(v0 + 56);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v8, enum case for ClientOrigin.other(_:), v9);
    RequestOrigin.init(_:)(v8);
    v11 = type metadata accessor for Session(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v12 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
    *(_QWORD *)(v0 + 88) = v12;
    *v12 = v0;
    v12[1] = sub_100994488;
    return Session.init(_:)(*(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_100994488(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 88);
  v6 = *v1;
  *(_QWORD *)(v6 + 96) = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Session.isMyLocationEnabled(cached:)[1]);
  *(_QWORD *)(v6 + 104) = v4;
  *v4 = v6;
  v4[1] = sub_1009944F8;
  return Session.isMyLocationEnabled(cached:)(1);
}

uint64_t sub_1009944F8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100994724;
  }
  else
  {
    swift_release();
    *(_BYTE *)(v4 + 127) = a1 & 1;
    v6 = sub_100994578;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100994578()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;

  v1 = *(_BYTE *)(v0 + 127);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v2 + 112);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_BYTE *)(v4 + 24) = v1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100996A4C, v4, v3, &type metadata for () + 1, &type metadata for () + 1);
  swift_task_dealloc(v4);
  v5 = swift_retain();
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 40);
    v9 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67109120;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100996D1C, v8, v3, &type metadata for () + 1, &type metadata for Bool);
    *(_DWORD *)(v0 + 120) = *(unsigned __int8 *)(v0 + 126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 124, v9 + 4, v9 + 8);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ComputeLocationSharing: Updating sharing status to %{BOOL}d", v9, 8u);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release();
  }

  *(_BYTE *)(v0 + 125) = sub_10000D338() & 1;
  CurrentValueSubject.send(_:)(v0 + 125);
  v10 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100994724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 112);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 32) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ComputeLocationSharing: Error getting status of sharing %@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 112);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v11 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009948C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = v0;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7A18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "RecomputeLocationSharing", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  type metadata accessor for Transaction(0);
  swift_retain();
  static Transaction.asyncTask(name:block:)("RecomputeLocationSharing", 24, 2, &unk_10110E8B0, v1);
  return swift_release(v1);
}

uint64_t sub_1009949C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[7] = a1;
  v2 = type metadata accessor for ClientOrigin(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RequestOrigin(0);
  v1[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100994A48, 0, 0);
}

uint64_t sub_100994A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = swift_retain();
  AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 150), v4);
  swift_release();
  *(_BYTE *)(v0 + 151) = *(_BYTE *)(v0 + 150) == 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v1, enum case for ClientOrigin.other(_:), v2);
  RequestOrigin.init(_:)(v1);
  v5 = type metadata accessor for Session(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
  *(_QWORD *)(v0 + 96) = v6;
  *v6 = v0;
  v6[1] = sub_100994B54;
  return Session.init(_:)(*(_QWORD *)(v0 + 88));
}

uint64_t sub_100994B54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 96);
  v6 = *v1;
  *(_QWORD *)(v6 + 104) = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Session.isMyLocationEnabled(cached:)[1]);
  *(_QWORD *)(v6 + 112) = v4;
  *v4 = v6;
  v4[1] = sub_100994BC4;
  return Session.isMyLocationEnabled(cached:)(1);
}

uint64_t sub_100994BC4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100994EE0;
  }
  else
  {
    swift_release();
    *(_BYTE *)(v4 + 152) = a1 & 1;
    v6 = sub_100994C44;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100994C44()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (_QWORD *)(v0 + 146);
  v2 = *(_BYTE *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v3 + 112);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v3;
  *(_BYTE *)(v5 + 24) = v2;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100996D3C, v5, v4, &type metadata for () + 1, &type metadata for () + 1);
  swift_task_dealloc(v5);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100996D1C, v3, v4, &type metadata for () + 1, &type metadata for Bool);
  v6 = *(_BYTE *)(v0 + 145);
  v7 = *(_BYTE *)(v0 + 151);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v8 = v6 & v7;
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  v10 = swift_retain();
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 56);
  if (v13)
  {
    v15 = swift_slowAlloc(14, -1);
    *(_DWORD *)v15 = 67109376;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100996D1C, v14, v4, &type metadata for () + 1, &type metadata for Bool);
    *(_DWORD *)(v0 + 136) = *(unsigned __int8 *)(v0 + 148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 140, v15 + 4, v15 + 8);
    swift_release();
    *(_WORD *)(v15 + 8) = 1024;
    v1 = (_QWORD *)(v0 + 146);
    swift_beginAccess(v0 + 151, v0 + 16, 0, 0);
    *(_DWORD *)(v0 + 128) = *(unsigned __int8 *)(v0 + 151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 132, v15 + 10, v15 + 14);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RecomputeLocationSharing: isMyLocationEnabled %{BOOL}d isThisMeDevice %{BOOL}d", (uint8_t *)v15, 0xEu);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_release();
  }

  AnyCurrentValuePublisher.value.getter(v1, v16);
  if ((v8 & 1) != *(_BYTE *)(v0 + 146))
  {
    *(_BYTE *)(v0 + 147) = v8 & 1;
    CurrentValueSubject.send(_:)(v0 + 147);
  }
  v17 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100994EE0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v18;
  uint64_t v19;

  swift_release();
  v1 = swift_retain();
  AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 144), v1);
  swift_release();
  v2 = *(unsigned __int8 *)(v0 + 144);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
  swift_retain();
  swift_errorRetain(v3);
  swift_retain();
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 56);
  if (v8)
  {
    v18 = v2 == 1;
    v11 = swift_slowAlloc(24, -1);
    v12 = swift_slowAlloc(32, -1);
    v19 = v12;
    *(_DWORD *)v11 = 136315650;
    *(_QWORD *)(v0 + 48) = v9;
    swift_errorRetain(v9);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v14 = String.init<A>(describing:)(v0 + 48, v13);
    *(_QWORD *)(v0 + 40) = sub_100016940(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    *(_WORD *)(v11 + 12) = 1024;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100996D1C, v10, *(_QWORD *)(v10 + 112), &type metadata for () + 1, &type metadata for Bool);
    swift_release();
    *(_DWORD *)(v0 + 140) = *(unsigned __int8 *)(v0 + 149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 140, v0 + 144, v11 + 14, v11 + 18);
    swift_release();
    *(_WORD *)(v11 + 18) = 1024;
    *(_DWORD *)(v0 + 132) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 132, v0 + 136, v11 + 20, v11 + 24);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "RecomputeLocationSharing: error recomputing location sharing status. Error %s Sharing enabled: %{BOOL}d isThisMeDevice: %{BOOL}d", (uint8_t *)v11, 0x18u);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_release();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release();

  }
  v16 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1009951E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *result;
  uint64_t v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  __int128 v58;
  _QWORD *v59;
  uint64_t v60[3];
  uint64_t v61[4];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (unint64_t *)((char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 128);
  *v4 = (unint64_t)v5;
  (*(void (**)(unint64_t *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(unint64_t *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v7 = sub_10001A9A8(&qword_1010FEF48);
    unsafeFromAsyncTask<A>(_:)(&unk_10110E8A0, 0, v7);
    v14 = v61[0];
    v57 = (_QWORD *)(v0 + 136);
    swift_beginAccess(v0 + 136, v61, 1, 0);
    *(_QWORD *)(v0 + 136) = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v14 + 16);
    if (v16)
    {
      v52 = v14;
      v4 = (unint64_t *)(v14 + 64);
      v13 = _swiftEmptyArrayStorage;
      *(_QWORD *)&v15 = 136315394;
      v54 = v15;
      v53 = (char *)&type metadata for Any + 8;
      while (1)
      {
        v55 = v16;
        v17 = *(v4 - 4);
        v58 = *(_OWORD *)(v4 - 3);
        v19 = *(v4 - 1);
        v18 = *v4;
        v20 = v58;
        swift_bridgeObjectRetain_n(v58, 2);
        v21 = *((_QWORD *)&v58 + 1);
        swift_bridgeObjectRetain_n(*((_QWORD *)&v58 + 1), 2);
        swift_bridgeObjectRetain_n(v18, 2);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          v13 = sub_1007CA57C(0, v13[2] + 1, 1, v13);
        v23 = v13[2];
        v22 = v13[3];
        if (v23 >= v22 >> 1)
          v13 = sub_1007CA57C((_QWORD *)(v22 > 1), v23 + 1, 1, v13);
        v13[2] = v23 + 1;
        v56 = v13;
        v24 = &v13[5 * v23];
        v25 = v17;
        v24[4] = v17;
        *(_OWORD *)(v24 + 5) = v58;
        v24[7] = v19;
        v24[8] = v18;
        v26 = v57;
        swift_beginAccess(v57, v60, 33, 0);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v18);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
        v59 = (_QWORD *)*v26;
        v28 = v59;
        *v26 = 0x8000000000000000;
        v30 = sub_100518DA0(v19, v18);
        v31 = v28[2];
        v32 = (v29 & 1) == 0;
        v33 = v31 + v32;
        if (__OFADD__(v31, v32))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        v34 = v29;
        if (v28[3] >= v33)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v37 = v59;
            if ((v29 & 1) != 0)
              goto LABEL_22;
          }
          else
          {
            sub_100A99D98();
            v37 = v59;
            if ((v34 & 1) != 0)
              goto LABEL_22;
          }
        }
        else
        {
          sub_100A84DD4(v33, isUniquelyReferenced_nonNull_native);
          v35 = sub_100518DA0(v19, v18);
          if ((v34 & 1) != (v36 & 1))
          {
            result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }
          v30 = v35;
          v37 = v59;
          if ((v34 & 1) != 0)
          {
LABEL_22:
            v38 = (uint64_t *)(v37[7] + 16 * v30);
            swift_bridgeObjectRelease();
            *v38 = v25;
            v38[1] = v20;
            goto LABEL_26;
          }
        }
        v37[(v30 >> 6) + 8] |= 1 << v30;
        v39 = (uint64_t *)(v37[6] + 16 * v30);
        *v39 = v19;
        v39[1] = v18;
        v40 = (uint64_t *)(v37[7] + 16 * v30);
        *v40 = v25;
        v40[1] = v20;
        v41 = v37[2];
        v42 = __OFADD__(v41, 1);
        v43 = v41 + 1;
        if (v42)
          goto LABEL_34;
        v37[2] = v43;
        swift_bridgeObjectRetain(v18);
LABEL_26:
        *v57 = v37;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess(v60);
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v44 = type metadata accessor for Logger(0);
        sub_10001A9E8(v44, (uint64_t)qword_1011B7A18);
        swift_bridgeObjectRetain_n(v20, 3);
        swift_bridgeObjectRetain_n(v21, 3);
        swift_bridgeObjectRetain_n(v18, 3);
        v46 = Logger.logObject.getter(v45);
        v47 = static os_log_type_t.default.getter(v46);
        if (os_log_type_enabled(v46, v47))
        {
          v48 = swift_slowAlloc(22, -1);
          v49 = swift_slowAlloc(64, -1);
          v60[0] = v49;
          *(_DWORD *)v48 = v54;
          swift_bridgeObjectRetain(v18);
          *(_QWORD *)(v48 + 4) = sub_100016940(v19, v18, v60);
          swift_bridgeObjectRelease_n(v21, 2);
          swift_bridgeObjectRelease_n(v20, 2);
          swift_bridgeObjectRelease_n(v18, 3);
          *(_WORD *)(v48 + 12) = 2080;
          swift_bridgeObjectRetain(v20);
          *(_QWORD *)(v48 + 14) = sub_100016940(v25, v20, v60);
          swift_bridgeObjectRelease_n(v18, 2);
          swift_bridgeObjectRelease_n(v21, 2);
          swift_bridgeObjectRelease_n(v20, 3);
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "#sharesLocation with me - %s - %s", (uint8_t *)v48, 0x16u);
          swift_arrayDestroy(v49, 2, v53);
          swift_slowDealloc(v49, -1, -1);
          swift_slowDealloc(v48, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v18, 4);
          swift_bridgeObjectRelease_n(v21, 4);
          swift_bridgeObjectRelease_n(v20, 4);
        }
        v13 = v56;
        v4 += 5;
        v16 = v55 - 1;
        if (v55 == 1)
        {
          v50 = v52;
          sub_1000FE214(v52, 0);
          sub_1000FE214(v50, 0);
          return v13;
        }
      }
    }
    sub_1000FE214(v14, 0);
    sub_1000FE214(v14, 0);
  }
  else
  {
LABEL_35:
    __break(1u);
    swift_once(&qword_1010EA098, sub_10098F7D8);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7A18);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to get handlesSharingLocationsWithMe", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    sub_1000FE214((uint64_t)v4, 1);

  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100995848(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1[2] = a1;
  v2 = type metadata accessor for Handle(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  v5 = type metadata accessor for Friend(0);
  v1[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v7);
  v1[10] = swift_task_alloc(v7);
  v8 = type metadata accessor for ClientOrigin(0);
  v1[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[12] = v9;
  v1[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RequestOrigin(0);
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100995938, 0, 0);
}

uint64_t sub_100995938()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[13];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[12] + 104))(v1, enum case for ClientOrigin.other(_:), v0[11]);
  RequestOrigin.init(_:)(v1);
  v2 = type metadata accessor for Session(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
  v0[15] = v3;
  *v3 = v0;
  v3[1] = sub_1009959CC;
  return Session.init(_:)(v0[14]);
}

uint64_t sub_1009959CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 120);
  v6 = *v1;
  *(_QWORD *)(v6 + 128) = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Session.friendsSharingLocationsWithMe()[1]);
  *(_QWORD *)(v6 + 136) = v4;
  *v4 = v6;
  v4[1] = sub_100995A38;
  return Session.friendsSharingLocationsWithMe()();
}

uint64_t sub_100995A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 136);
  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1008CD258;
  }
  else
  {
    swift_release();
    v5 = sub_100995AAC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100995AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  _QWORD *v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 64);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v42 = *(_QWORD *)(v3 + 72);
    v43 = *(_QWORD *)(v0 + 32);
    v44 = v3;
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    v5 = swift_bridgeObjectRetain(v1);
    v6 = _swiftEmptyArrayStorage;
    do
    {
      v50 = v6;
      v9 = *(_QWORD *)(v0 + 72);
      v8 = *(_QWORD *)(v0 + 80);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 24);
      v41(v8, v4, v10, v5);
      v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v41)(v9, v8, v10);
      v14 = Friend.handle.getter(v13);
      v15 = Handle.serverID.getter(v14);
      v17 = v16;
      v18 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8);
      v19 = v18(v11, v12);
      v20 = *(_QWORD *)(v0 + 72);
      v21 = *(_QWORD *)(v0 + 80);
      v22 = *(_QWORD *)(v0 + 56);
      if (v17)
      {
        v48 = v17;
        v49 = v15;
        v23 = *(_QWORD *)(v0 + 40);
        v24 = *(_QWORD *)(v0 + 24);
        v25 = Friend.handle.getter(v19);
        v26 = Handle.identifier.getter(v25);
        v46 = v27;
        v47 = v26;
        v28 = v18(v23, v24);
        v29 = Friend.handle.getter(v28);
        v45 = Handle.siblingIdentifiers.getter(v29);
        v30 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
        v30(v20, v22);
        v18(v23, v24);
        v30(v21, v22);
        v6 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
          v6 = sub_1007CA57C(0, v50[2] + 1, 1, v50);
        v32 = v6[2];
        v31 = v6[3];
        if (v32 >= v31 >> 1)
          v6 = sub_1007CA57C((_QWORD *)(v31 > 1), v32 + 1, 1, v6);
        v6[2] = v32 + 1;
        v33 = &v6[5 * v32];
        v33[4] = v47;
        v33[5] = v46;
        v33[6] = v45;
        v33[7] = v49;
        v33[8] = v48;
      }
      else
      {
        v7 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
        v7(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
        v7(v21, v22);
        v6 = v50;
      }
      v4 += v42;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 144), 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = _swiftEmptyArrayStorage;
  }
  v35 = *(_QWORD *)(v0 + 104);
  v34 = *(_QWORD *)(v0 + 112);
  v37 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 80);
  v39 = *(_QWORD *)(v0 + 40);
  v38 = *(_QWORD *)(v0 + 48);
  **(_QWORD **)(v0 + 16) = v6;
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100995D44@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1009951E0();
  *a1 = result;
  return result;
}

uint64_t sub_100995D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  swift_beginAccess(a1 + 136, v15, 0, 0);
  v8 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(v8 + 16)
    || (sub_1009951E0(), result = swift_bridgeObjectRelease(), v8 = *(_QWORD *)(a1 + 136), *(_QWORD *)(v8 + 16)))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v8);
    v10 = sub_100518DA0(a2, a3);
    if ((v11 & 1) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v10);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain(v13);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  *a4 = v14;
  a4[1] = v13;
  return result;
}

uint64_t sub_100995E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16[24];

  swift_beginAccess(a1 + 136, v16, 0, 0);
  v8 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(v8 + 16)
    || (sub_1009951E0(), swift_bridgeObjectRelease(), v8 = *(_QWORD *)(a1 + 136), *(_QWORD *)(v8 + 16)))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v8);
    v9 = sub_100518DA0(a2, a3);
    if ((v10 & 1) != 0)
    {
      v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      v13 = *v11;
      v12 = v11[1];
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *a4 = v13;
      a4[1] = v12;
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = sub_1008CBE70(a2, a3);
  *a4 = result;
  if (v15)
    a4[1] = v15;
  else
    a4[1] = 0;
  return result;
}

uint64_t sub_100995F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  double v14;
  void (*v15)(char *, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v36;
  os_log_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  _OWORD v43[13];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v3 = type metadata accessor for SecureLocation(0);
  __chkstk_darwin(v3);
  v41 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v42 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v36 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v36 - v12;
  if (*(_QWORD *)(a1 + *(int *)(v3 + 60)) == 100)
  {
    v14 = -7200.0;
  }
  else
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v1, &type metadata for SecureLocationsConfig);
    v54 = v43[10];
    v55 = v43[11];
    v56 = v43[12];
    v50 = v43[6];
    v51 = v43[7];
    v52 = v43[8];
    v53 = v43[9];
    v46 = v43[2];
    v47 = v43[3];
    v48 = v43[4];
    v49 = v43[5];
    v44 = v43[0];
    v45 = v43[1];
    sub_1003D09E0(&v44);
    v14 = -*((double *)&v45 + 1);
  }
  static Date.trustedNow.getter((uint64_t)v11);
  Date.addingTimeInterval(_:)(v14);
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v11, v5);
  v16 = static Date.> infix(_:_:)(a1 + *(int *)(v3 + 52), v13);
  if ((v16 & 1) == 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
    v18 = a1;
    v19 = v41;
    sub_10016C890(v18, v41);
    v20 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
    v21 = v42;
    v22 = v20(v42, v13, v5);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = swift_slowAlloc(22, -1);
      v38 = v25;
      v27 = v26;
      v39 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v44 = v39;
      *(_DWORD *)v27 = 136315394;
      v36 = v27 + 4;
      v37 = v23;
      v28 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v5, v28);
      *(_QWORD *)&v43[0] = sub_100016940(v29, v30, (uint64_t *)&v44);
      v40 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, (char *)v43 + 8, v36, v27 + 12);
      swift_bridgeObjectRelease();
      sub_10016C910(v19);
      *(_WORD *)(v27 + 12) = 2080;
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v5, v28);
      *(_QWORD *)&v43[0] = sub_100016940(v31, v32, (uint64_t *)&v44);
      LOBYTE(v16) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, (char *)v43 + 8, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease();
      v15(v21, v5);
      v33 = v37;
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v38, "Location timestamp %s not within threshold %s", (uint8_t *)v27, 0x16u);
      v34 = v39;
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      v15(v21, v5);
      sub_10016C910(v19);
    }
  }
  v15(v13, v5);
  return v16 & 1;
}

uint64_t sub_100996350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, char *, uint64_t);
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  os_log_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[13];
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v3 = type metadata accessor for SecureLocation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v39 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v16 = (uint64_t)&v34 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v34 - v12;
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v1, &type metadata for SecureLocationsConfig);
  v52 = v42[10];
  v53 = v42[11];
  v54 = v42[12];
  v48 = v42[6];
  v49 = v42[7];
  v50 = v42[8];
  v51 = v42[9];
  v44 = v42[2];
  v45 = v42[3];
  v46 = v42[4];
  v47 = v42[5];
  v43[0] = v42[0];
  v43[1] = v42[1];
  sub_1003D09E0(v43);
  v14 = *((double *)&v44 + 1);
  static Date.trustedNow.getter(v16);
  Date.addingTimeInterval(_:)(-v14);
  v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v15(v16, v6);
  LODWORD(v16) = static Date.< infix(_:_:)(a1 + *(int *)(v3 + 52), v13);
  if ((v16 & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
    sub_10016C890(a1, (uint64_t)v5);
    v18 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
    v19 = v39;
    v20 = v18(v39, v13, v6);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      v24 = swift_slowAlloc(22, -1);
      v38 = v16;
      v16 = v24;
      v37 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v42[0] = v37;
      *(_DWORD *)v16 = 136315394;
      v34 = v16 + 4;
      v36 = v21;
      v25 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v6, v25);
      v40 = sub_100016940(v26, v27, (uint64_t *)v42);
      v35 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v34, v16 + 12);
      swift_bridgeObjectRelease();
      sub_10016C910((uint64_t)v5);
      *(_WORD *)(v16 + 12) = 2080;
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v6, v25);
      v40 = sub_100016940(v28, v29, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease();
      v15((uint64_t)v19, v6);
      v30 = v36;
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v35, "Location timestamp %s close to expiring %s", (uint8_t *)v16, 0x16u);
      v31 = v37;
      swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      v32 = v16;
      LOBYTE(v16) = v38;
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      v15((uint64_t)v19, v6);
      sub_10016C910((uint64_t)v5);
    }
  }
  v15((uint64_t)v13, v6);
  return v16 & 1;
}

uint64_t sub_10099671C()
{
  uint64_t v0;
  _QWORD v2[26];

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  sub_10099681C(v0 + 152, (uint64_t)v2);
  sub_100996864(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004493DC);
  swift_release();
  return v0;
}

uint64_t sub_1009967DC()
{
  uint64_t v0;

  sub_10099671C();
  return swift_deallocClassInstance(v0, 368, 7);
}

uint64_t type metadata accessor for SecureLocationsInfo()
{
  return objc_opt_self(_TtC12searchpartyd19SecureLocationsInfo);
}

uint64_t sub_10099681C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010FC1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100996864(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25]);
  return a1;
}

double sub_1009968D0(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

_QWORD *sub_1009968F4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[13];
  _QWORD v12[26];

  v4 = *(_OWORD *)(a2 + 176);
  v11[10] = *(_OWORD *)(a2 + 160);
  v11[11] = v4;
  v11[12] = *(_OWORD *)(a2 + 192);
  v5 = *(_OWORD *)(a2 + 112);
  v11[6] = *(_OWORD *)(a2 + 96);
  v11[7] = v5;
  v6 = *(_OWORD *)(a2 + 144);
  v11[8] = *(_OWORD *)(a2 + 128);
  v11[9] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v11[4] = *(_OWORD *)(a2 + 64);
  v11[5] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  SharingCircleWildAdvertisementKey.init(key:)(v11);
  a1 += 152;
  sub_10099681C(a1, (uint64_t)v12);
  sub_10099681C((uint64_t)v11, a1);
  sub_1004F1D0C((_QWORD *)a2);
  return sub_100996864(v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004493DC);
}

void sub_100996998(unsigned __int8 *a1)
{
  sub_10099408C(a1);
}

uint64_t sub_1009969A0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110E894);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_10110E5F4);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100994200();
}

uint64_t sub_100996A04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110E8AC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_1009949C8(v0);
}

void sub_100996A4C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 120) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100996A5C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100996A80@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100994010(v1, a1);
}

uint64_t sub_100996A88()
{
  uint64_t v0;

  return sub_100993E8C(v0);
}

uint64_t sub_100996A90()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 136, v3, 1, 0);
  v1 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 136) = &_swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_100996AD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100996AE0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_10110E900);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100996B20@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100992358(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_100996B3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100996B60@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_1009923D4(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_100996B6C(uint64_t a1)
{
  uint64_t v1;

  return sub_100990280(a1, v1);
}

uint64_t sub_100996B74(uint64_t a1)
{
  uint64_t v1;

  return sub_100990490(a1, v1);
}

void sub_100996B7C(uint64_t a1)
{
  uint64_t v1;

  sub_10099069C(a1, v1);
}

void sub_100996B84(uint64_t a1)
{
  uint64_t v1;

  sub_1009908F4(a1, v1);
}

uint64_t sub_100996B8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100996BB0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100996BDC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110E90C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_100990B48(a1, v4, v5, v6);
}

uint64_t sub_100996C54()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110E91C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  v2 = (_QWORD *)swift_task_alloc(dword_10110E5EC);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100030654;
  return sub_100992468();
}

uint64_t sub_100996CB8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110E92C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_10110E5E4);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1002613B8;
  return sub_100991050();
}

void sub_100996D1C(_BYTE *a1@<X8>)
{
  sub_10001E92C(a1);
}

void sub_100996D3C()
{
  sub_100996A4C();
}

uint64_t sub_100996D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7A50);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7A50);
  if (qword_1010EA0C0 != -1)
    swift_once(&qword_1010EA0C0, sub_100998224);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7A68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100996DE0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[8] = v0;
  v1[9] = *v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100996E44, v0, 0);
}

uint64_t sub_100996E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = swift_allocObject(&unk_10109FD90, 24, 7);
  v10 = *(_OWORD *)(v0 + 64);
  v3 = *(NSObject **)(v10 + 128);
  swift_weakInit(v2 + 16, *(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 48) = sub_1009982FC;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_100BFAAA0;
  *(_QWORD *)(v0 + 40) = &unk_10109FDA8;
  v4 = _Block_copy((const void *)(v0 + 16));
  swift_release();
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v3, v4);
  _Block_release(v4);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 1, 1, v5);
  v7 = sub_100006C64(&qword_10110EA70, v6, (uint64_t (*)(uint64_t))type metadata accessor for DistributedNotificationService, (uint64_t)&unk_100E56F8C);
  v8 = swift_allocObject(&unk_10109FDE0, 48, 7);
  *(_QWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 24) = v7;
  *(_OWORD *)(v8 + 32) = v10;
  swift_retain_n(v10, 2);
  sub_100691AC0(v1, (uint64_t)&unk_10110EA88, v8);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100996FB4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  const char *string;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE v16[24];

  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v16, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v8 = result;
    string = xpc_dictionary_get_string(a1, _xpc_event_key_name);
    if (string)
    {
      v10 = String.init(cString:)(string);
      v12 = v11;
      v13 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
      v14 = (_QWORD *)swift_allocObject(&unk_10109FE08, 56, 7);
      v14[2] = 0;
      v14[3] = 0;
      v14[4] = v8;
      v14[5] = v10;
      v14[6] = v12;
      sub_100691AC0((uint64_t)v6, (uint64_t)&unk_10110EA98, (uint64_t)v14);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1009970CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_1009970E8, a4, 0);
}

uint64_t sub_1009970E8()
{
  uint64_t v0;

  sub_100997310(*(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10099711C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_100997174;
  return static Task<>.sleep(nanoseconds:)(30000000000);
}

uint64_t sub_100997174()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 32));
  v3 = *(_QWORD *)(v2 + 24);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_100998550;
  }
  else
  {
    v4 = sub_1009971E0;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1009971E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v1 + 144) == 1)
  {
    if (qword_1010EA0B8 != -1)
      swift_once(&qword_1010EA0B8, sub_100996D50);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7A50);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v6 = 134217984;
      *(_QWORD *)(v0 + 16) = 30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stop special launch event processing -- %llu seconds have passed since launch", v6, 0xCu);
      swift_slowDealloc(v6, -1, -1);
    }

    *(_BYTE *)(v1 + 144) = 0;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100997310(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  _QWORD v25[8];
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29[2];
  _BYTE v30[24];

  swift_beginAccess(v2 + 136, v30, 0, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 16);
  if (*(_BYTE *)(v2 + 144) == 1 && !*(_QWORD *)(v2 + 160))
  {
    if (qword_1010EA0B8 != -1)
      swift_once(&qword_1010EA0B8, sub_100996D50);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7A50);
    swift_bridgeObjectRetain_n(a2, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v26 = v5;
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      *(_DWORD *)v10 = 136315138;
      v25[7] = v10 + 4;
      v29[0] = v11;
      swift_bridgeObjectRetain(a2);
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v28 = 0x8000000100EEB9F0;
      swift_bridgeObjectRetain(a2);
      v12._countAndFlagsBits = a1;
      v12._object = a2;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 93;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v27 = sub_100016940(0xD00000000000001ALL, 0x8000000100EEB9F0, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Storing launchEvent: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      v14 = v10;
      v5 = v26;
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    *(_BYTE *)(v2 + 144) = 0;
    *(_QWORD *)(v2 + 152) = a1;
    *(_QWORD *)(v2 + 160) = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease();
  }
  if (qword_1010EA0B8 != -1)
    swift_once(&qword_1010EA0B8, sub_100996D50);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B7A50);
  swift_bridgeObjectRetain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v26 = v5;
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(32, -1);
    *(_DWORD *)v19 = 136315394;
    v27 = 0;
    v28 = 0xE000000000000000;
    v29[0] = v20;
    swift_bridgeObjectRetain(a2);
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v27 = 0xD00000000000001ALL;
    v28 = 0x8000000100EEB9F0;
    swift_bridgeObjectRetain(a2);
    v21._countAndFlagsBits = a1;
    v21._object = a2;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 93;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v27 = sub_100016940(v27, v28, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2048;
    v27 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 14, v19 + 22);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Publishing %s to %ld clients.", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v23 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v23);
  v25[2] = v2;
  v25[3] = a1;
  v25[4] = a2;
  return static Transaction.named<A>(_:with:)("DistributedNotificationService", 30, 2, sub_1009982BC, v25, &type metadata for () + 1);
}

uint64_t sub_1009977C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t, __n128);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  char v28[24];
  uint64_t v29;

  v9 = sub_10001A9A8(&qword_10110EA78);
  v22 = *(_QWORD *)(v9 - 8);
  v23 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_101109240);
  v29 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 136, v28, 0, 0);
  result = *(_QWORD *)(a2 + 136);
  v16 = *(_QWORD *)(result + 16);
  if (v16)
  {
    v21[1] = *(_QWORD *)(a2 + 136);
    v21[2] = v4;
    v17 = result + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
    v25 = *(_QWORD *)(v29 + 72);
    v26 = a3;
    v24 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v29 + 16);
    v18 = swift_bridgeObjectRetain(result);
    v20 = v22;
    v19 = v23;
    do
    {
      v24(v14, v17, v12, v18);
      v27[0] = a1;
      v27[1] = v26;
      v27[2] = a4;
      swift_retain();
      swift_bridgeObjectRetain(a4);
      AsyncStream.Continuation.yield(_:)(v27, v12);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v19);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v12);
      v17 += v25;
      --v16;
    }
    while (v16);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10099796C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  unint64_t *v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];

  v3 = sub_10001A9A8(&qword_10110EA78);
  v27 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_101109240);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v26 = a1;
  v10(v9, a1, v6);
  v11 = v1 + 17;
  swift_beginAccess(v1 + 17, v28, 33, 0);
  v12 = v1[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
  v1[17] = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = sub_1007CA80C(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
    *v11 = v12;
  }
  v15 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    v12 = sub_1007CA80C(v14 > 1, v15 + 1, 1, v12);
    *v11 = v12;
  }
  *(_QWORD *)(v12 + 16) = v15 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, v9, v6);
  result = swift_endAccess(v28);
  v17 = v1[20];
  if (v17)
  {
    v18 = v1[19];
    v19 = qword_1010EA0B8;
    swift_bridgeObjectRetain(v17);
    if (v19 != -1)
      swift_once(&qword_1010EA0B8, sub_100996D50);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7A50);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Publishing LaunchEvent to new client", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v25);
    *(&v26 - 4) = v26;
    *(&v26 - 3) = v18;
    *(&v26 - 2) = v17;
    static Transaction.named<A>(_:with:)("DistributedNotificationService", 30, 2, sub_1009982A0, &v26 - 6, v3);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100997C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD v7[3];

  v7[2] = a4;
  v7[0] = a1;
  v7[1] = a3;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  v5 = sub_10001A9A8(&qword_101109240);
  return AsyncStream.Continuation.yield(_:)(v7, v5);
}

uint64_t sub_100997CA4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DistributedNotificationService()
{
  return objc_opt_self(_TtC12searchpartyd30DistributedNotificationService);
}

ValueMetadata *type metadata accessor for DistributedNotification()
{
  return &type metadata for DistributedNotification;
}

uint64_t sub_100997D10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 112) = 0xD00000000000001ELL;
  *(_QWORD *)(v1 + 120) = 0x8000000100E56EE0;
  sub_10001F6FC();
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_10001F738();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v2, v13);
  *(_QWORD *)(v1 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000034, 0x8000000100EEBA30, v7, v4, v11, 0);
  *(_QWORD *)(v1 + 136) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v1 + 144) = 1;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  return v1;
}

uint64_t sub_100997EF0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110E964);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_100996DE0();
}

uint64_t sub_100997F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = sub_10001A9A8(&qword_101109240);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (char *)swift_allocObject(&unk_10109FE30, v12 + v6, v11 | 7);
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v13[v12], (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  sub_100691AC0((uint64_t)v9, (uint64_t)&unk_10110EAB0, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_10099807C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_100998094, a4, 0);
}

uint64_t sub_100998094()
{
  uint64_t v0;

  sub_10099796C(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009980C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v2[2] = a2;
  v2[3] = v3;
  v2[4] = v4;
  return swift_task_switch(sub_1009980E4, 0, 0);
}

uint64_t sub_1009980E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(v2);
  LOBYTE(v1) = sub_100A06590(v1, v2, v3);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1 & 1);
}

unint64_t sub_100998144(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRetain(a2);
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(a2);
  v5._countAndFlagsBits = 93;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD00000000000001ALL;
}

unint64_t sub_1009981E0()
{
  uint64_t v0;

  return sub_100998144(*(_QWORD *)v0, *(void **)(v0 + 8));
}

uint64_t sub_1009981E8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_10110EA70, a2, (uint64_t (*)(uint64_t))type metadata accessor for DistributedNotificationService, (uint64_t)&unk_100E56F8C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100998224()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7A68);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7A68);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD00000000000001ELL, 0x8000000100E56EE0);
}

uint64_t sub_1009982A0(uint64_t a1)
{
  uint64_t *v1;

  return sub_100997C3C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1009982BC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1009977C8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1009982D8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009982FC(void *a1)
{
  uint64_t v1;

  return sub_100996FB4(a1, v1);
}

uint64_t sub_100998304()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100998330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10110EA84);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[3] = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v3[4] = v4;
  *v4 = v3;
  v4[1] = sub_100997174;
  return static Task<>.sleep(nanoseconds:)(30000000000);
}

uint64_t sub_1009983AC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1009983E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc(dword_10110EA94);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v5[3] = v3;
  v5[4] = v4;
  v5[2] = v2;
  return swift_task_switch(sub_1009970E8, v2, 0);
}

uint64_t sub_100998450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101109240);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1009984D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101109240) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_10110EAAC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004C28;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_100998094, v3, 0);
}

void sub_100998554(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;

  v17[0] = a1;
  type metadata accessor for SPPairingSessionError(0);
  v9 = v8;
  v10 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.code.getter(&v18, v9, v10);
  if ((unint64_t)(v18 - 2) > 0x12)
  {
    *(_BYTE *)(a4 + 16) = 0;
    if (!a3)
    {
LABEL_5:
      v17[0] = a1;
      v11 = _BridgedStoredNSError.userInfo.getter(v9, v10);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      if (*(_QWORD *)(v11 + 16) && (v14 = sub_100518DA0(v12, v13), (v15 & 1) != 0))
      {
        sub_100016A30(*(_QWORD *)(v11 + 56) + 32 * v14, (uint64_t)&v18);
      }
      else
      {
        v18 = 0u;
        v19 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v19 + 1))
      {
        if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          a2 = v17[0];
          a3 = v17[1];
          goto LABEL_14;
        }
      }
      else
      {
        sub_10014785C((uint64_t)&v18);
      }
      a2 = 0;
      a3 = 0xE000000000000000;
    }
  }
  else
  {
    *(_BYTE *)(a4 + 16) = byte_100E5748E[(_QWORD)v18 - 2];
    if (!a3)
      goto LABEL_5;
  }
LABEL_14:
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a3;
  v16 = type metadata accessor for PairingError(0);
  static Date.trustedNow.getter(a4 + *(int *)(v16 + 24));

}

void sub_1009986E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[64];

  v1 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
  inited = swift_initStackObject(v1, v16);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v3;
  v4 = *(unsigned __int8 *)(v0 + 16);
  v14 = sub_100998A70(*(_BYTE *)(v0 + 16));
  v15 = v5;
  v6._countAndFlagsBits = 2108704;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7 = *(_QWORD *)v0;
  v8 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 2108704;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  type metadata accessor for PairingError(0);
  v11 = type metadata accessor for Date(0);
  v12 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = v15;
  sub_1006B8DC4(inited);
  __asm { BR              X9 }
}

uint64_t sub_100998818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for SPPairingSessionError(0);
  v2 = v1;
  v7 = 1;
  sub_10047B41C(v0);
  v4 = v3;
  swift_bridgeObjectRelease();
  v5 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v2, v5);
  return v8;
}

uint64_t sub_100998A70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100998AA4 + 4 * byte_100E56FD2[a1]))(0x6E776F6E6B6E752ELL, 0xE800000000000000);
}

uint64_t sub_100998AA4()
{
  return 0x64616552746F6E2ELL;
}

uint64_t sub_100998AC4()
{
  return 0x656E654779656B2ELL;
}

unint64_t sub_100998AEC()
{
  return 0xD000000000000010;
}

uint64_t sub_100998B08()
{
  return 0x6B726F7774656E2ELL;
}

unint64_t sub_100998B1C()
{
  return 0xD000000000000011;
}

uint64_t sub_100998B78()
{
  return 0x746E65687475612ELL;
}

uint64_t sub_100998B9C()
{
  return 0x746E756F6363612ELL;
}

uint64_t sub_100998BB0()
{
  return 0x636552657661732ELL;
}

uint64_t sub_100998BD0()
{
  return 0x696E756D6D6F632ELL;
}

uint64_t sub_100998BF4()
{
  return 0x754F64656D69742ELL;
}

uint64_t sub_100998C10()
{
  return 0x70707553746F6E2ELL;
}

uint64_t sub_100998C34()
{
  return 0x797265747461622ELL;
}

uint64_t sub_100998C58()
{
  return 0x67696C45746F6E2ELL;
}

uint64_t sub_100998C78()
{
  return 0x655274696D696C2ELL;
}

uint64_t sub_100998C9C()
{
  return 0x64656B636F6C2ELL;
}

unint64_t sub_100998CB4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10099ABB0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100998CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10099ADE8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100998D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10099ADE8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100998D84(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110EC28);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10099A5F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PairingError.CodingKeys, &type metadata for PairingError.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    v22 = *((_BYTE *)v3 + 16);
    v21 = 1;
    v14 = sub_10099A680();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for PairingError.ErrorKind, v14);
    v15 = (uint64_t)v3 + *(int *)(type metadata accessor for PairingError(0) + 24);
    v20 = 2;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100998F18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;

  v24 = a2;
  v25 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_10001A9A8(&qword_10110EC10);
  v5 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PairingError(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_10099A5F8();
  v27 = v7;
  v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PairingError.CodingKeys, &type metadata for PairingError.CodingKeys, v13, v11, v12);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v28 = v8;
  v15 = v5;
  v17 = v25;
  v16 = v26;
  BYTE1(v31) = 0;
  *(_QWORD *)v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v31 + 1, v26);
  *((_QWORD *)v10 + 1) = v18;
  v30 = 1;
  v19 = sub_10099A63C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for PairingError.ErrorKind, &v30, v16, &type metadata for PairingError.ErrorKind, v19);
  v10[16] = v31;
  v29 = 2;
  v20 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v21 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v17, &v29, v16, v17, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v16);
  (*(void (**)(char *, _QWORD *, uint64_t))(v23 + 32))(&v10[*(int *)(v28 + 24)], v4, v17);
  sub_10005972C((uint64_t)v10, v24, type metadata accessor for PairingError);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_1000126B0((uint64_t)v10, type metadata accessor for PairingError);
}

uint64_t sub_1009991D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110EC00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10099A570();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PairingErrorRecord.CodingKeys, &type metadata for PairingErrorRecord.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for PairingErrorRecord(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for PairingError(0);
    v16 = sub_100006204(&qword_10110EC08, type metadata accessor for PairingError, (uint64_t)&unk_100E570B8);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10099935C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;

  v26 = a2;
  v27 = type metadata accessor for PairingError(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v30 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_10001A9A8(&qword_10110EBE8);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PairingErrorRecord(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_10099A570();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PairingErrorRecord.CodingKeys, &type metadata for PairingErrorRecord.CodingKeys, v14, v12, v13);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v24 = a1;
  v25 = v6;
  v15 = (uint64_t)v11;
  v16 = v28;
  v17 = v29;
  v34 = 0;
  v18 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v30;
  v20 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v31, &v34, v32, v31, v18);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v16 + 32))(v15, v19, v20);
  v33 = 1;
  v21 = sub_100006204(&qword_10110EBF8, type metadata accessor for PairingError, (uint64_t)&unk_100E570E0);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v27, &v33, v32, v27, v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v32);
  sub_10099A5B4((uint64_t)v17, v15 + *(int *)(v9 + 20));
  sub_10005972C(v15, v26, type metadata accessor for PairingErrorRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  return sub_1000126B0(v15, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_100999644()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1684957547;
  if (*v0 != 1)
    v1 = 1702125924;
  if (*v0)
    return v1;
  else
    return 0x6F666E4972657375;
}

uint64_t sub_100999690@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10099ABC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009996B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10099A5F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009996DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10099A5F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100999704@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100998F18(a1, a2);
}

uint64_t sub_100999718(_QWORD *a1)
{
  return sub_100998D84(a1);
}

uint64_t sub_10099972C()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;

  v1._countAndFlagsBits = sub_100998A70(*(_BYTE *)(v0 + 16));
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v4 = *(_QWORD *)v0;
  v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 60;
}

uint64_t sub_1009997C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7A80);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7A80);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012, 0x8000000100E57010, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100999898()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F727265;
  else
    return 0x696669746E656469;
}

uint64_t sub_1009998D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10099ACF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009998F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10099A570();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100999920(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10099A570();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100999948@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10099935C(a1, a2);
}

uint64_t sub_10099995C(_QWORD *a1)
{
  return sub_1009991D8(a1);
}

uint64_t sub_100999970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;

  v1 = type metadata accessor for UUID(0);
  v2 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5 = v0 + *(int *)(type metadata accessor for PairingErrorRecord(0) + 20);
  v6._countAndFlagsBits = sub_100998A70(*(_BYTE *)(v5 + 16));
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8 = *(_QWORD *)v5;
  v9 = *(void **)(v5 + 8);
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 60;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  type metadata accessor for PairingError(0);
  v14 = type metadata accessor for Date(0);
  v15 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return 60;
}

uint64_t type metadata accessor for PairingErrorRecord(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110EBA8, (uint64_t)&nominal type descriptor for PairingErrorRecord);
}

uint64_t type metadata accessor for PairingError(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110EB10, (uint64_t)&nominal type descriptor for PairingError);
}

_QWORD *sub_100999B3C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 24);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100999BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_100999C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_100999CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_100999D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100999D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100999DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100999E08);
}

uint64_t sub_100999E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100999E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100999E90);
}

uint64_t sub_100999E90(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100999F04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100E57060;
  v4[1] = &unk_100E57078;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100999F80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(uint64_t *)((char *)a2 + v8);
    v12 = *((_QWORD *)v10 + 1);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    v9[16] = v10[16];
    v13 = *(int *)(type metadata accessor for PairingError(0) + 24);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for Date(0);
    v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
    v18 = swift_bridgeObjectRetain(v12);
    v17(v14, v15, v16, v18);
  }
  return a1;
}

uint64_t sub_10099A060(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(type metadata accessor for PairingError(0) + 24);
  v7 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_10099A0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(a2 + v7 + 16);
  v11 = *(int *)(type metadata accessor for PairingError(0) + 24);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v14 - 8) + 16);
  v16 = swift_bridgeObjectRetain(v10);
  v15(v12, v13, v14, v16);
  return a1;
}

uint64_t sub_10099A188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v11 = *(int *)(type metadata accessor for PairingError(0) + 24);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_10099A240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v10 = *(int *)(type metadata accessor for PairingError(0) + 24);
  v11 = v8 + v10;
  v12 = v9 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t sub_10099A2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v11 = *(int *)(type metadata accessor for PairingError(0) + 24);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_10099A388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10099A394);
}

uint64_t sub_10099A394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for PairingError(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10099A408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10099A414);
}

uint64_t sub_10099A414(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for PairingError(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10099A490(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PairingError(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10099A514(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_10110EBE0, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_100E5714C);
  result = sub_100006204(&qword_101108440, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_100E57124);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10099A570()
{
  unint64_t result;

  result = qword_10110EBF0;
  if (!qword_10110EBF0)
  {
    result = swift_getWitnessTable(byte_100E5743C, &type metadata for PairingErrorRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EBF0);
  }
  return result;
}

uint64_t sub_10099A5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PairingError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10099A5F8()
{
  unint64_t result;

  result = qword_10110EC18;
  if (!qword_10110EC18)
  {
    result = swift_getWitnessTable(asc_100E573EC, &type metadata for PairingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EC18);
  }
  return result;
}

unint64_t sub_10099A63C()
{
  unint64_t result;

  result = qword_10110EC20;
  if (!qword_10110EC20)
  {
    result = swift_getWitnessTable(byte_100E573C4, &type metadata for PairingError.ErrorKind);
    atomic_store(result, (unint64_t *)&qword_10110EC20);
  }
  return result;
}

unint64_t sub_10099A680()
{
  unint64_t result;

  result = qword_10110EC30;
  if (!qword_10110EC30)
  {
    result = swift_getWitnessTable("͌$", &type metadata for PairingError.ErrorKind);
    atomic_store(result, (unint64_t *)&qword_10110EC30);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PairingError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10099A710 + 4 * byte_100E56FE9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10099A744 + 4 * byte_100E56FE4[v4]))();
}

uint64_t sub_10099A744(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099A74C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10099A754);
  return result;
}

uint64_t sub_10099A760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10099A768);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10099A76C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099A774(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingError.CodingKeys()
{
  return &type metadata for PairingError.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PairingErrorRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10099A7DC + 4 * byte_100E56FF3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10099A810 + 4 * byte_100E56FEE[v4]))();
}

uint64_t sub_10099A810(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099A818(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10099A820);
  return result;
}

uint64_t sub_10099A82C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10099A834);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10099A838(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099A840(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingErrorRecord.CodingKeys()
{
  return &type metadata for PairingErrorRecord.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PairingError.ErrorKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingError.ErrorKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_10099A938 + 4 * byte_100E56FFD[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_10099A96C + 4 * byte_100E56FF8[v4]))();
}

uint64_t sub_10099A96C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099A974(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10099A97CLL);
  return result;
}

uint64_t sub_10099A988(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10099A990);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_10099A994(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099A99C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingError.ErrorKind()
{
  return &type metadata for PairingError.ErrorKind;
}

unint64_t sub_10099A9BC()
{
  unint64_t result;

  result = qword_10110EC38;
  if (!qword_10110EC38)
  {
    result = swift_getWitnessTable("Վ$", &type metadata for PairingError.ErrorKind);
    atomic_store(result, (unint64_t *)&qword_10110EC38);
  }
  return result;
}

unint64_t sub_10099AA04()
{
  unint64_t result;

  result = qword_10110EC40;
  if (!qword_10110EC40)
  {
    result = swift_getWitnessTable(byte_100E572BC, &type metadata for PairingErrorRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EC40);
  }
  return result;
}

unint64_t sub_10099AA4C()
{
  unint64_t result;

  result = qword_10110EC48;
  if (!qword_10110EC48)
  {
    result = swift_getWitnessTable(aE_40, &type metadata for PairingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EC48);
  }
  return result;
}

unint64_t sub_10099AA94()
{
  unint64_t result;

  result = qword_10110EC50;
  if (!qword_10110EC50)
  {
    result = swift_getWitnessTable(byte_100E572E4, &type metadata for PairingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EC50);
  }
  return result;
}

unint64_t sub_10099AADC()
{
  unint64_t result;

  result = qword_10110EC58;
  if (!qword_10110EC58)
  {
    result = swift_getWitnessTable(aM_36, &type metadata for PairingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EC58);
  }
  return result;
}

unint64_t sub_10099AB24()
{
  unint64_t result;

  result = qword_10110EC60;
  if (!qword_10110EC60)
  {
    result = swift_getWitnessTable(byte_100E5722C, &type metadata for PairingErrorRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EC60);
  }
  return result;
}

unint64_t sub_10099AB6C()
{
  unint64_t result;

  result = qword_10110EC68;
  if (!qword_10110EC68)
  {
    result = swift_getWitnessTable(byte_100E57254, &type metadata for PairingErrorRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EC68);
  }
  return result;
}

unint64_t sub_10099ABB0(unint64_t result)
{
  if (result >= 0x12)
    return 18;
  return result;
}

uint64_t sub_10099ABC0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E4972657375, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684957547, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10099ACF4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F727265, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_10099ADE8()
{
  unint64_t result;

  result = qword_10110EC70;
  if (!qword_10110EC70)
  {
    result = swift_getWitnessTable(byte_100E5718C, &type metadata for PairingError.ErrorKind);
    atomic_store(result, (unint64_t *)&qword_10110EC70);
  }
  return result;
}

uint64_t sub_10099AE2C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10099AFF0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10099AE58(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_10099AE64 + dword_10099AF0C[a2 >> 62]))();
}

uint64_t sub_10099AE74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 32)
  {
    __break(1u);
    JUMPOUT(0x10099AF08);
  }
  return ((uint64_t (*)(void))((char *)&loc_10099AEB0 + dword_10099AF1C[a4 >> 62]))();
}

ValueMetadata *type metadata accessor for InitiatePairingCommandPayload()
{
  return &type metadata for InitiatePairingCommandPayload;
}

unint64_t sub_10099AF3C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10099AF68();
  result = sub_10099AFAC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10099AF68()
{
  unint64_t result;

  result = qword_10110EC78;
  if (!qword_10110EC78)
  {
    result = swift_getWitnessTable(byte_100E574F8, &type metadata for InitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_10110EC78);
  }
  return result;
}

unint64_t sub_10099AFAC()
{
  unint64_t result;

  result = qword_10110EC80;
  if (!qword_10110EC80)
  {
    result = swift_getWitnessTable(byte_100E574D0, &type metadata for InitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_10110EC80);
  }
  return result;
}

uint64_t sub_10099AFF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v15, v3, v4);
  v5 = v16;
  v6 = v17;
  v7 = sub_10009F5D0((uint64_t)v15, v16);
  v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v5, v6);
  if (!v1)
  {
    v10 = v8;
    v11 = v9;
    v12 = v16;
    v13 = v17;
    sub_10009F5D0((uint64_t)v15, v16);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(113, v12, v13);
    v7 = sub_10099AE58(v10, v11);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

_QWORD *sub_10099B120(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

uint64_t sub_10099B1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 32)));
}

uint64_t sub_10099B218(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_10099B2A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10099B33C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10099B3C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10099B44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10099B458);
}

uint64_t sub_10099B458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10099B4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10099B4E0);
}

uint64_t sub_10099B4E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BeaconLocationUpdate(uint64_t a1)
{
  uint64_t result;

  result = qword_10110ECE0;
  if (!qword_10110ECE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconLocationUpdate);
  return result;
}

uint64_t sub_10099B594(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = &unk_100E57568;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10099B624(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10099B660 + 4 * byte_100E57540[a1]))(0x6D617473656D6974, 0xE900000000000070);
}

uint64_t sub_10099B660()
{
  return 0x656475746974616CLL;
}

uint64_t sub_10099B678()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_10099B694()
{
  return 0xD000000000000012;
}

unint64_t sub_10099B6B4()
{
  return 0xD000000000000011;
}

uint64_t sub_10099B6D0()
{
  return 0x656372756F73;
}

uint64_t sub_10099B6E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110ED38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10099BD80();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeaconLocationUpdate.CodingKeys, &type metadata for BeaconLocationUpdate.CodingKeys, v11, v9, v10);
  v30 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v30, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for BeaconLocationUpdate(0);
    v15 = *(double *)(v3 + v14[5]);
    v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v15);
    v16 = *(double *)(v3 + v14[6]);
    v28 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v28, v5, v16);
    v17 = *(double *)(v3 + v14[7]);
    v27 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v27, v5, v17);
    v26 = *(_QWORD *)(v3 + v14[8]);
    v25 = 4;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
    v19 = sub_10035B44C((unint64_t *)&qword_101114210, &qword_1010EDAC0, (uint64_t)&protocol conformance descriptor for UUID, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, v18, v19);
    v24 = *(_BYTE *)(v3 + v14[9]);
    v23 = 5;
    v20 = sub_1002ED2E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for LocationSource, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10099B944@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v28 = a2;
  v29 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_10001A9A8(&qword_10110ED28);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for BeaconLocationUpdate(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_10099BD80();
  v30 = v7;
  v14 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeaconLocationUpdate.CodingKeys, &type metadata for BeaconLocationUpdate.CodingKeys, v13, v11, v12);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v15 = v5;
  v33 = a1;
  v16 = v10;
  BYTE5(v36) = 0;
  v17 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v18 = v31;
  v20 = v29;
  v19 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v29, (char *)&v36 + 5, v31, v29, v17);
  v21 = *(void (**)(char *, _QWORD *, uint64_t))(v3 + 32);
  v22 = (uint64_t)v16;
  v21(v16, v32, v20);
  BYTE4(v36) = 1;
  *(double *)&v16[v8[5]] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v36 + 4, v18);
  BYTE3(v36) = 2;
  *(double *)&v16[v8[6]] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v36 + 3, v18);
  BYTE2(v36) = 3;
  *(double *)&v16[v8[7]] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v36 + 2, v18);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  BYTE1(v36) = 4;
  v24 = sub_10035B44C((unint64_t *)&qword_10111F690, (unint64_t *)&qword_1010EDA90, (uint64_t)&protocol conformance descriptor for UUID, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, v23, (char *)&v36 + 1, v18, v23, v24);
  *(_QWORD *)(v22 + v8[8]) = v34;
  v35 = 5;
  v25 = sub_1002ED1DC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, &type metadata for LocationSource, &v35, v18, &type metadata for LocationSource, v25);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v18);
  *(_BYTE *)(v22 + v8[9]) = v36;
  sub_10099BDC4(v22, v28);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  return sub_10035C248(v22);
}

uint64_t sub_10099BCDC()
{
  unsigned __int8 *v0;

  return sub_10099B624(*v0);
}

uint64_t sub_10099BCE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10099BFAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10099BD08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10099BD80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10099BD30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10099BD80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10099BD58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10099B944(a1, a2);
}

uint64_t sub_10099BD6C(_QWORD *a1)
{
  return sub_10099B6E4(a1);
}

unint64_t sub_10099BD80()
{
  unint64_t result;

  result = qword_10110ED30;
  if (!qword_10110ED30)
  {
    result = swift_getWitnessTable(byte_100E57694, &type metadata for BeaconLocationUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110ED30);
  }
  return result;
}

uint64_t sub_10099BDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconLocationUpdate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for BeaconLocationUpdate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10099BE54 + 4 * byte_100E5754B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10099BE88 + 4 * byte_100E57546[v4]))();
}

uint64_t sub_10099BE88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099BE90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10099BE98);
  return result;
}

uint64_t sub_10099BEA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10099BEACLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10099BEB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099BEB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconLocationUpdate.CodingKeys()
{
  return &type metadata for BeaconLocationUpdate.CodingKeys;
}

unint64_t sub_10099BED8()
{
  unint64_t result;

  result = qword_10110ED40;
  if (!qword_10110ED40)
  {
    result = swift_getWitnessTable(byte_100E5766C, &type metadata for BeaconLocationUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110ED40);
  }
  return result;
}

unint64_t sub_10099BF20()
{
  unint64_t result;

  result = qword_10110ED48;
  if (!qword_10110ED48)
  {
    result = swift_getWitnessTable(byte_100E575DC, &type metadata for BeaconLocationUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110ED48);
  }
  return result;
}

unint64_t sub_10099BF68()
{
  unint64_t result;

  result = qword_10110ED50;
  if (!qword_10110ED50)
  {
    result = swift_getWitnessTable("͌$", &type metadata for BeaconLocationUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110ED50);
  }
  return result;
}

uint64_t sub_10099BFAC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v4 = 0xE900000000000070;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000)
  {
    v6 = 0xE800000000000000;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100EC3570)
  {
    v8 = 0x8000000100EC3570;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC3570, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_24;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x8000000100EEBAB0;
    if (a2 == 0x8000000100EEBAB0)
      goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EEBAB0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 5;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void destroy for AirPodsLEPairingCommand(uint64_t a1)
{
  sub_10099C298(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    (void (*)(void))sub_10001BC14,
    (void (*)(uint64_t, uint64_t))sub_10001EF3C);
}

void sub_10099C298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25,uint64_t a26,unint64_t a27,void (*a28)(void),void (*a29)(uint64_t, uint64_t))
{
  switch((a27 >> 59) & 6 | (a25 >> 63))
  {
    case 0uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      break;
    case 1uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a28)(a9, a10);
      break;
    case 2uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      ((void (*)(uint64_t, uint64_t))a28)(a23, a24);
      ((void (*)(uint64_t, unint64_t))a28)(a26, a27 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      a29(a23, a24);
      break;
    case 4uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for AirPodsLEPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  v22 = a2[18];
  v23 = a2[19];
  v24 = a2[20];
  v25 = a2[21];
  v26 = a2[22];
  v27 = a2[23];
  v28 = a2[24];
  v29 = a2[25];
  v30 = a2[26];
  v3 = a2[8];
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  sub_10099C298(*a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    (void (*)(void))sub_10001BBBC,
    (void (*)(uint64_t, uint64_t))sub_10001BD08);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v3;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  a1[25] = v29;
  a1[26] = v30;
  return a1;
}

uint64_t assignWithCopy for AirPodsLEPairingCommand(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v31 = a2[9];
  v32 = a2[10];
  v33 = a2[11];
  v34 = a2[12];
  v35 = a2[13];
  v36 = a2[14];
  v37 = a2[15];
  v38 = a2[16];
  v39 = a2[17];
  v40 = a2[18];
  v41 = a2[19];
  v42 = a2[20];
  v43 = a2[21];
  v44 = a2[22];
  v45 = a2[23];
  v46 = a2[24];
  v47 = a2[25];
  v48 = a2[26];
  v3 = a2[8];
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  sub_10099C298(*a2, v5, v6, v7, v8, v9, v10, v11, v3, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    (void (*)(void))sub_10001BBBC,
    (void (*)(uint64_t, uint64_t))sub_10001BD08);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v31;
  *(_QWORD *)(a1 + 80) = v32;
  *(_QWORD *)(a1 + 88) = v33;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v34;
  *(_QWORD *)(a1 + 104) = v35;
  *(_QWORD *)(a1 + 112) = v36;
  *(_QWORD *)(a1 + 120) = v37;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v38;
  *(_QWORD *)(a1 + 136) = v39;
  *(_QWORD *)(a1 + 144) = v40;
  *(_QWORD *)(a1 + 152) = v41;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v42;
  *(_QWORD *)(a1 + 168) = v43;
  *(_QWORD *)(a1 + 176) = v44;
  *(_QWORD *)(a1 + 184) = v45;
  v28 = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v46;
  *(_QWORD *)(a1 + 200) = v47;
  v29 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v48;
  sub_10099C298(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    (void (*)(void))sub_10001BC14,
    (void (*)(uint64_t, uint64_t))sub_10001EF3C);
  return a1;
}

uint64_t assignWithTake for AirPodsLEPairingCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = *(_QWORD *)(a2 + 208);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 192);
  v22 = *(_QWORD *)(a1 + 208);
  v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v23;
  v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v24;
  v25 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v25;
  v26 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v26;
  v27 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v27;
  v28 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v28;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = v4;
  sub_10099C298(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    (void (*)(void))sub_10001BC14,
    (void (*)(uint64_t, uint64_t))sub_10001EF3C);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingCommand(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (*(_QWORD *)(a1 + 56) >> 54) & 0xC0 | (*(_QWORD *)(a1 + 72) >> 52) & 0x300 | (*(_QWORD *)(a1 + 88) >> 50) & 0xC00 | *(_WORD *)(a1 + 110) & 0x3000 | (*(_QWORD *)(a1 + 120) >> 46) & 0xC000 | (*(_QWORD *)(a1 + 136) >> 44) & 0x30000 | (*(_QWORD *)(a1 + 152) >> 42) & 0xC0000 | (*(_QWORD *)(a1 + 168) >> 40) & 0x300000 | (*(_DWORD *)(a1 + 192) >> 8 << 22);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingCommand(uint64_t result, int a2, int a3)
{
  unint64_t v3;

  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      v3 = -a2;
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(-(char)a2 & 3) << 60;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = (v3 << 56) & 0x3000000000000000;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = (v3 << 54) & 0x3000000000000000;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = (v3 << 52) & 0x3000000000000000;
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = (v3 << 50) & 0x3000000000000000;
      *(_QWORD *)(result + 96) = 0;
      *(_QWORD *)(result + 104) = (v3 << 48) & 0x3000000000000000;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = (v3 << 46) & 0x3000000000000000;
      *(_QWORD *)(result + 128) = 0;
      *(_QWORD *)(result + 136) = (v3 << 44) & 0x3000000000000000;
      *(_QWORD *)(result + 144) = 0;
      *(_QWORD *)(result + 152) = (v3 << 42) & 0x3000000000000000;
      *(_QWORD *)(result + 160) = 0;
      *(_QWORD *)(result + 168) = (v3 << 40) & 0x3000000000000000;
      *(_QWORD *)(result + 176) = 0;
      *(_QWORD *)(result + 184) = 0;
      *(_QWORD *)(result + 200) = 0;
      *(_QWORD *)(result + 208) = 0;
      *(_QWORD *)(result + 192) = (v3 >> 14) & 0x3FF00;
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10099CBCC(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (a2 < 5)
  {
    v2 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
    v3 = *(_QWORD *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
    v4 = *(_QWORD *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
    v5 = *(_QWORD *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
    v6 = *(_QWORD *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
    v7 = *(_QWORD *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
    v8 = *(_QWORD *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
    v9 = *(_QWORD *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
    v10 = *(_QWORD *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
    v11 = *(_QWORD *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
    v12 = (unint64_t)a2 >> 1;
    v13 = *(unsigned __int8 *)(result + 192) | ((unint64_t)a2 << 63);
    v14 = *(_QWORD *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | ((v12 & 3) << 60);
    *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
    *(_QWORD *)(result + 24) = v2;
    *(_QWORD *)(result + 40) = v3;
    *(_QWORD *)(result + 56) = v4;
    *(_QWORD *)(result + 72) = v5;
    *(_QWORD *)(result + 88) = v6;
    *(_QWORD *)(result + 104) = v7;
    *(_QWORD *)(result + 120) = v8;
    *(_QWORD *)(result + 136) = v9;
    *(_QWORD *)(result + 152) = v10;
    *(_QWORD *)(result + 168) = v11;
    *(_QWORD *)(result + 192) = v13;
    *(_QWORD *)(result + 208) = v14;
  }
  else
  {
    *(_QWORD *)result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 192) = xmmword_100E26E20;
    *(_QWORD *)(result + 208) = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingCommand()
{
  return &type metadata for AirPodsLEPairingCommand;
}

void sub_10099CCDC()
{
  uint64_t v0;
  char *v1;
  _BYTE v2[216];
  _BYTE v3[216];
  _BYTE v4[216];

  sub_1000F7F88(v0, (uint64_t)v2);
  sub_1000F7F88((uint64_t)v2, (uint64_t)v4);
  sub_1000F7F88(v0, (uint64_t)v3);
  v1 = (char *)sub_10099CD48 + 4 * byte_100E576F5[sub_1000F9034((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_10099CD48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v9;
  _BYTE v10[432];
  uint64_t v11;
  uint64_t v12;

  v1 = sub_1000F9B34((uint64_t)&v11);
  v9 = *(_OWORD *)v1;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v0[3] = (uint64_t)&type metadata for AirPodsSendBeaconGroupDataCommandPayload;
  v0[4] = sub_10005A2C0();
  v4 = swift_allocObject(&unk_1010A0490, 48, 7);
  *v0 = v4;
  *(_OWORD *)(v4 + 16) = v9;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  sub_1000F7F88((uint64_t)&v12, (uint64_t)v10);
  v5 = (uint64_t *)sub_1000F9B34((uint64_t)v10);
  v6 = v5[2];
  v7 = v5[3];
  sub_10001BBBC(*v5, v5[1]);
  return sub_10001BBBC(v6, v7);
}

void sub_10099D094(char a1)
{
  __asm { BR              X10 }
}

ValueMetadata *sub_10099D0BC()
{
  sub_10005A334();
  return &type metadata for AccessoryGenericPayload;
}

void sub_10099D14C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[32];
  _BYTE v9[232];

  v2 = v1;
  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryEncoding.container()(v8, v5, v6);
  sub_1000F7F88(v2, (uint64_t)v9);
  v7 = (char *)sub_10099D20C + 4 * byte_100E57705[sub_1000F9034((uint64_t)v9)];
  __asm { BR              X11 }
}

uint64_t sub_10099D20C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v6 = sub_1000F9B34(v0 + 1000);
  *(_WORD *)(v0 + 272) = 268;
  static Endianness.current.getter(v6);
  v7 = sub_100112060();
  FixedWidthInteger.convert(to:)((_QWORD *)(v0 + 488), v4, &type metadata for UInt16, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  *(_WORD *)(v0 + 272) = *(_WORD *)(v0 + 488);
  v8 = *(_QWORD *)(v0 + 768);
  v9 = *(_QWORD *)(v0 + 776);
  sub_10009F5D0(v0 + 744, v8);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v0 + 272, &type metadata for UInt16, v7, v8, v9);
  if (!v1)
  {
    sub_1000F7F88(v2, v0 + 784);
    v10 = (char *)&loc_10099D320 + 4 * word_100E5770E[sub_1000F9034(v0 + 784)];
    __asm { BR              X10 }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 744));
}

uint64_t sub_10099D944@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[216];

  result = sub_10099DF2C(a1, (uint64_t)v5);
  if (!v2)
    return sub_1000F7F88((uint64_t)v5, a2);
  return result;
}

void sub_10099D988(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[216];

  sub_1000F7F88(v1, (uint64_t)v3);
  sub_10099D14C(a1);
}

uint64_t sub_10099D9D4(unsigned __int16 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 1;
  switch(v1)
  {
    case 256:
      result = 2;
      break;
    case 257:
      result = 3;
      break;
    case 258:
      result = 4;
      break;
    case 259:
      result = 5;
      break;
    case 260:
      result = 6;
      break;
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
      goto LABEL_5;
    case 267:
      result = 0;
      break;
    case 268:
      return result;
    default:
      if (v1 == 516)
        result = 7;
      else
LABEL_5:
        result = 8;
      break;
  }
  return result;
}

void sub_10099DA48(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t DynamicType;
  _QWORD v8[3];
  uint64_t v9;

  sub_100030784(a2, (uint64_t)v8);
  sub_10099D094(a1);
  v4 = v3;
  v5 = v9;
  v6 = sub_10001AA44(v8, v9);
  DynamicType = swift_getDynamicType(v6, v5, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x10099DF0CLL);
}

uint64_t sub_10099DF2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD v41[5];
  _QWORD v42[5];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  _WORD v46[120];

  v39 = a2;
  v4 = type metadata accessor for Endianness(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  v40 = a1;
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v43, v8, v9);
  v11 = v44;
  v10 = v45;
  sub_10009F5D0((uint64_t)v43, v44);
  v12 = sub_100112060();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v41, &type metadata for UInt16, &type metadata for UInt16, v12, v11, v10);
  if (v2)
  {
    v14 = v40;
  }
  else
  {
    v15 = v39;
    v46[119] = v41[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v42, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = v42[0];
    v17 = sub_10099D9D4(v42[0]);
    if (v17 != 8)
    {
      v31 = v17;
      sub_10099D094(v17);
      v33 = v32;
      v35 = v34;
      v36 = v40;
      sub_100030784((uint64_t)v40, (uint64_t)v41);
      v42[3] = v33;
      v42[4] = v35;
      sub_100018F08(v42);
      dispatch thunk of BinaryDecodable.init(from:)(v41, v33, *(_QWORD *)(v35 + 8));
      sub_100030784((uint64_t)v42, (uint64_t)v41);
      sub_10099DA48(v31, (uint64_t)v41);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
      return sub_1000F7F88((uint64_t)v46, v15);
    }
    v18 = static os_log_type_t.error.getter(v17);
    v14 = v40;
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v19 = qword_1011B7DF0;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
    LOWORD(v42[0]) = v16;
    v22 = FixedWidthInteger.data.getter(&type metadata for UInt16, v12);
    v24 = v23;
    v25 = Data.hexString.getter(v22, v23);
    v27 = v26;
    sub_10001BC14(v22, v24);
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10001AA00();
    *(_QWORD *)(v21 + 32) = v25;
    *(_QWORD *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Invalid opcode: %@", 18, 2, v21);
    swift_bridgeObjectRelease();
    v28 = sub_10099E254();
    v29 = swift_allocError(&type metadata for AirPodsLEPairingCommand.AccessoryPairingCommandError, v28, 0, 0);
    *v30 = 1;
    swift_willThrow(v29);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

unint64_t sub_10099E254()
{
  unint64_t result;

  result = qword_10110ED58;
  if (!qword_10110ED58)
  {
    result = swift_getWitnessTable(aY_59, &type metadata for AirPodsLEPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_10110ED58);
  }
  return result;
}

double sub_10099E298(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  result = -0.0;
  *(_OWORD *)(a1 + 192) = xmmword_100E26E20;
  *(_QWORD *)(a1 + 208) = 0x2000000000000000;
  return result;
}

uint64_t sub_10099E2EC(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(unsigned __int8 *)(result + 192);
  v2 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 40) = v3;
  *(_QWORD *)(result + 56) = v4;
  *(_QWORD *)(result + 72) = v5;
  *(_QWORD *)(result + 88) = v6;
  *(_QWORD *)(result + 104) = v7;
  *(_QWORD *)(result + 120) = v8;
  *(_QWORD *)(result + 136) = v9;
  *(_QWORD *)(result + 152) = v10;
  *(_QWORD *)(result + 168) = v11;
  *(_QWORD *)(result + 192) = v1;
  *(_QWORD *)(result + 208) = v12;
  return result;
}

uint64_t sub_10099E38C(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(unsigned __int8 *)(result + 192);
  v2 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 40) = v3;
  *(_QWORD *)(result + 56) = v4;
  *(_QWORD *)(result + 72) = v5;
  *(_QWORD *)(result + 88) = v6;
  *(_QWORD *)(result + 104) = v7;
  *(_QWORD *)(result + 120) = v8;
  *(_QWORD *)(result + 136) = v9;
  *(_QWORD *)(result + 152) = v10;
  *(_QWORD *)(result + 168) = v11;
  *(_QWORD *)(result + 192) = v1;
  *(_QWORD *)(result + 208) = v12;
  return result;
}

uint64_t sub_10099E42C(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(unsigned __int8 *)(result + 192);
  v2 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 24) = v2;
  *(_QWORD *)(result + 40) = v3;
  *(_QWORD *)(result + 56) = v4;
  *(_QWORD *)(result + 72) = v5;
  *(_QWORD *)(result + 88) = v6;
  *(_QWORD *)(result + 104) = v7;
  *(_QWORD *)(result + 120) = v8;
  *(_QWORD *)(result + 136) = v9;
  *(_QWORD *)(result + 152) = v10;
  *(_QWORD *)(result + 168) = v11;
  *(_QWORD *)(result + 192) = v1;
  *(_QWORD *)(result + 208) = v12;
  return result;
}

uint64_t sub_10099E4C8()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10099E504()
{
  _QWORD *v0;
  unint64_t v1;

  sub_10001BC14(v0[2], v0[3]);
  sub_10001BC14(v0[4], v0[5]);
  sub_10001BC14(v0[6], v0[7]);
  sub_10001BC14(v0[8], v0[9]);
  sub_10001BC14(v0[10], v0[11]);
  sub_10001BC14(v0[12], v0[13]);
  sub_10001BC14(v0[14], v0[15]);
  sub_10001BC14(v0[16], v0[17]);
  sub_10001BC14(v0[18], v0[19]);
  sub_10001BC14(v0[20], v0[21]);
  sub_10001BC14(v0[22], v0[23]);
  v1 = v0[25];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[24], v1);
  return swift_deallocObject(v0, 208, 7);
}

uint64_t *sub_10099E590(uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = a1[9];
  v14 = a1[11];
  v15 = a1[10];
  v16 = a1[13];
  v17 = a1[12];
  v18 = a1[15];
  v19 = a1[14];
  v20 = a1[17];
  v21 = a1[16];
  v22 = a1[19];
  v23 = a1[18];
  v24 = a1[21];
  v25 = a1[20];
  v27 = a1[22];
  v26 = a1[23];
  a2(*a1, a1[1]);
  a2(v5, v6);
  a2(v7, v8);
  a2(v9, v10);
  a2(v11, v12);
  a2(v15, v14);
  a2(v17, v16);
  a2(v19, v18);
  a2(v21, v20);
  a2(v23, v22);
  a2(v25, v24);
  a3(v27, v26);
  return a1;
}

uint64_t sub_10099E6BC()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  sub_10001BC14(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
  return swift_deallocObject(v0, 232, 7);
}

uint64_t sub_10099E740()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10099E784()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingCommand.AccessoryPairingCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10099E7FC + 4 * byte_100E57730[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10099E830 + 4 * byte_100E5772B[v4]))();
}

uint64_t sub_10099E830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099E838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10099E840);
  return result;
}

uint64_t sub_10099E84C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10099E854);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10099E858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10099E860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingCommand.AccessoryPairingCommandError()
{
  return &type metadata for AirPodsLEPairingCommand.AccessoryPairingCommandError;
}

unint64_t sub_10099E880()
{
  unint64_t result;

  result = qword_10110ED60;
  if (!qword_10110ED60)
  {
    result = swift_getWitnessTable(aQ_34, &type metadata for AirPodsLEPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_10110ED60);
  }
  return result;
}

uint64_t sub_10099E8C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_log_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[3];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  uint64_t v102;
  uint64_t v103;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v94 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for AccessoryMetadata(0);
  v8 = *((_QWORD *)v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 168))(v11, v12);
  if (v14 >> 60 != 15)
  {
    v31 = v14;
    v92 = v13;
    v93 = v5;
    v95 = v4;
    v32 = a1[3];
    v33 = a1[4];
    sub_10001AA44(a1, v32);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v32, v33);
    v36 = sub_10072D700(v34, v35);
    if ((v36 & 0x100000000) != 0)
    {
      v47 = a1[3];
      v48 = a1[4];
      sub_10001AA44(a1, v47);
      v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 24))(v47, v48);
      v51 = sub_1008C3DA4(v49, v50);
      if ((v53 & 1) != 0)
      {
        if (qword_1010EA408 != -1)
          swift_once(&qword_1010EA408, sub_100C3EE24);
        v67 = type metadata accessor for Logger(0);
        sub_10001A9E8(v67, (uint64_t)qword_1011B7F30);
        sub_100030784((uint64_t)a1, (uint64_t)v101);
        v68 = sub_100030784((uint64_t)a1, (uint64_t)v97);
        v69 = Logger.logObject.getter(v68);
        v70 = static os_log_type_t.default.getter(v69);
        v71 = v70;
        if (os_log_type_enabled(v69, v70))
        {
          v72 = swift_slowAlloc(22, -1);
          v91 = swift_slowAlloc(64, -1);
          v100 = v91;
          *(_DWORD *)v72 = 136315394;
          v88 = v72 + 4;
          v89 = v69;
          LODWORD(v90) = v71;
          v74 = v102;
          v73 = v103;
          sub_10001AA44(v101, v102);
          v75 = v94;
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v73 + 8) + 8) + 32))(v74);
          v76 = sub_1001D4C18();
          v77 = v95;
          v78 = dispatch thunk of CustomStringConvertible.description.getter(v95, v76);
          v80 = v79;
          (*(void (**)(char *, uint64_t))(v93 + 8))(v75, v77);
          v81 = sub_100016940(v78, v80, &v100);
          v95 = v8;
          v96 = v81;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v88, v72 + 12);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
          *(_WORD *)(v72 + 12) = 2080;
          v82 = v98;
          v83 = v99;
          sub_10001AA44(v97, v98);
          v84 = (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 24))(v82, v83);
          v96 = sub_100016940(v84, v85, &v100);
          v8 = v95;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v72 + 14, v72 + 22);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v97);
          v69 = v89;
          _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v90, "Invalid FW version for %s %s", (uint8_t *)v72, 0x16u);
          v86 = v91;
          swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v86, -1, -1);
          swift_slowDealloc(v72, -1, -1);
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v97);
        }
        sub_10001EF3C(v92, v31);

        goto LABEL_19;
      }
      v54 = v51;
      v55 = v52;
      v95 = v8;
      v38 = a2;
      v39 = a1[3];
      v56 = a1[4];
      sub_10001AA44(a1, v39);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 8) + 32))(v39);
      LOBYTE(v39) = 0;
      LOBYTE(v40) = 0;
      v57 = v7[10];
      v58 = &v10[v7[15]];
      *(_QWORD *)v58 = 0;
      *((_QWORD *)v58 + 1) = 0xE000000000000000;
      v59 = &v10[v57];
      v60 = &v10[v7[5]];
      *(_QWORD *)v60 = v92;
      *((_QWORD *)v60 + 1) = v31;
      *(_QWORD *)v59 = v54;
      *((_QWORD *)v59 + 1) = v55;
      v59[16] = 0;
      v46 = &v10[v7[8]];
      *(_WORD *)v46 = 0;
    }
    else
    {
      v37 = v36;
      v95 = v8;
      v38 = a2;
      v39 = v36 >> 16;
      v40 = v36 >> 24;
      v42 = a1[3];
      v41 = a1[4];
      sub_10001AA44(a1, v42);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 8) + 32))(v42);
      v43 = &v10[v7[10]];
      *(_QWORD *)v43 = 0;
      *((_QWORD *)v43 + 1) = 0;
      v43[16] = 1;
      v44 = &v10[v7[15]];
      *(_QWORD *)v44 = 0;
      *((_QWORD *)v44 + 1) = 0xE000000000000000;
      v45 = &v10[v7[5]];
      *(_QWORD *)v45 = v92;
      *((_QWORD *)v45 + 1) = v31;
      v46 = &v10[v7[8]];
      *(_WORD *)v46 = v37;
    }
    v46[2] = v39;
    v46[3] = v40;
    v61 = &v10[v7[7]];
    *(_QWORD *)v61 = 0;
    *((_QWORD *)v61 + 1) = 0;
    v62 = &v10[v7[6]];
    *(_QWORD *)v62 = 0;
    *((_QWORD *)v62 + 1) = 0;
    v63 = &v10[v7[9]];
    *(_DWORD *)v63 = 0;
    v63[4] = 1;
    v64 = &v10[v7[11]];
    *(_QWORD *)v64 = 0;
    v64[8] = 1;
    v65 = &v10[v7[12]];
    *(_DWORD *)v65 = 0;
    v65[4] = 1;
    v10[v7[13]] = 4;
    v10[v7[14]] = 5;
    sub_10099EFF8((uint64_t)v10, v38);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v95 + 56))(v38, 0, 1, v7);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  if (qword_1010EA408 != -1)
    swift_once(&qword_1010EA408, sub_100C3EE24);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B7F30);
  v16 = sub_100030784((uint64_t)a1, (uint64_t)v101);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v95 = v8;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v93 = v5;
    v91 = v21;
    v97[0] = v21;
    *(_DWORD *)v20 = 136315138;
    v90 = v20 + 4;
    v92 = a2;
    v23 = v102;
    v22 = v103;
    sub_10001AA44(v101, v102);
    v24 = v94;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8) + 32))(v23);
    v25 = sub_1001D4C18();
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v4, v25);
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v93 + 8))(v24, v4);
    v100 = sub_100016940(v26, v28, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v90, v20 + 12);
    a2 = v92;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "No productData for %s", v20, 0xCu);
    v29 = v91;
    swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v20;
    v8 = v95;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
  }

LABEL_19:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v8 + 56))(a2, 1, 1, v7);
}

uint64_t sub_10099EFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AccessoryBatteryTypeResponsePayload()
{
  return &type metadata for AccessoryBatteryTypeResponsePayload;
}

unint64_t sub_10099F04C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10099F078();
  result = sub_1003ECC5C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10099F078()
{
  unint64_t result;

  result = qword_10110ED68;
  if (!qword_10110ED68)
  {
    result = swift_getWitnessTable(aU_28, &type metadata for AccessoryBatteryTypeResponsePayload);
    atomic_store(result, (unint64_t *)&qword_10110ED68);
  }
  return result;
}

unint64_t sub_10099F0BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = (char *)a2 + *(int *)(a3 + 24);
    v14 = type metadata accessor for StableIdentifier(0);
    v15 = (char *)&loc_10099F180 + 4 * byte_100E57910[swift_getEnumCaseMultiPayload(v13, v14)];
    __asm { BR              X10 }
  }
  v16 = *a2;
  *a1 = *a2;
  v17 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return v17;
}

uint64_t sub_10099F4EC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = a1 + a2[6];
  v9 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v8, v9))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v7(v8, v5);
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v7(v8, v5);
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v10 = a1 + a2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5))
    v7(v10, v5);
  v11 = a1 + a2[8];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  sub_10001BC14(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
  v13 = (uint64_t *)(a1 + a2[10]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_10001BC14(*v13, v14);
  v15 = (uint64_t *)(a1 + a2[11]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10001BC14(*v15, v16);
  sub_10001BC14(*(_QWORD *)(a1 + a2[12]), *(_QWORD *)(a1 + a2[12] + 8));
  sub_10001BC14(*(_QWORD *)(a1 + a2[13]), *(_QWORD *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10099F738(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = (char *)a2 + *(int *)(a3 + 24);
  v13 = type metadata accessor for StableIdentifier(0);
  v14 = (char *)sub_10099F7F0 + 4 * byte_100E5791A[swift_getEnumCaseMultiPayload(v12, v13)];
  __asm { BR              X10 }
}

uint64_t sub_10099F7F0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v54)(void *, const void *, uint64_t);

  v9 = v7[1];
  *v4 = *v7;
  v4[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_storeEnumTagMultiPayload(v4, v5, v6);
  v10 = v2[7];
  v11 = (void *)(v0 + v10);
  v12 = (const void *)(v1 + v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v1 + v10, 1, v3))
  {
    v13 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v54(v11, v12, v3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v3);
  }
  v14 = v2[8];
  v15 = v0 + v14;
  v16 = v1 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = v2[9];
  v19 = (uint64_t *)(v0 + v18);
  v20 = (uint64_t *)(v1 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_10001BBBC(*v20, v22);
  *v19 = v21;
  v19[1] = v22;
  v23 = v2[10];
  v24 = v0 + v23;
  v25 = (uint64_t *)(v1 + v23);
  v26 = v25[1];
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  else
  {
    v27 = *v25;
    sub_10001BBBC(*v25, v25[1]);
    *(_QWORD *)v24 = v27;
    *(_QWORD *)(v24 + 8) = v26;
  }
  v28 = v2[11];
  v29 = v0 + v28;
  v30 = (uint64_t *)(v1 + v28);
  v31 = v30[1];
  if (v31 >> 60 == 15)
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
  }
  else
  {
    v32 = *v30;
    sub_10001BBBC(*v30, v30[1]);
    *(_QWORD *)v29 = v32;
    *(_QWORD *)(v29 + 8) = v31;
  }
  v33 = v2[12];
  v34 = (uint64_t *)(v0 + v33);
  v35 = (uint64_t *)(v1 + v33);
  v36 = *v35;
  v37 = v35[1];
  sub_10001BBBC(*v35, v37);
  *v34 = v36;
  v34[1] = v37;
  v38 = v2[13];
  v39 = (uint64_t *)(v0 + v38);
  v40 = (uint64_t *)(v1 + v38);
  v41 = *v40;
  v42 = v40[1];
  sub_10001BBBC(*v40, v42);
  *v39 = v41;
  v39[1] = v42;
  v43 = v2[14];
  v44 = v2[15];
  v45 = (_QWORD *)(v0 + v43);
  v46 = (_QWORD *)(v1 + v43);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  v48 = (_QWORD *)(v0 + v44);
  v49 = (_QWORD *)(v1 + v44);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  v51 = v2[17];
  *(_QWORD *)(v0 + v2[16]) = *(_QWORD *)(v1 + v2[16]);
  *(_QWORD *)(v0 + v51) = *(_QWORD *)(v1 + v51);
  v52 = v2[19];
  *(_BYTE *)(v0 + v2[18]) = *(_BYTE *)(v1 + v2[18]);
  *(_BYTE *)(v0 + v52) = *(_BYTE *)(v1 + v52);
  *(_BYTE *)(v0 + v2[20]) = *(_BYTE *)(v1 + v2[20]);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v50);
  return v0;
}

uint64_t *sub_10099FB3C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  void (*v76)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v76 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v76(v11, v12, v13);
  if (a1 != a2)
  {
    v15 = a3[6];
    v16 = (char *)a2 + v15;
    sub_1000126B0((uint64_t)a1 + v15, type metadata accessor for StableIdentifier);
    v17 = type metadata accessor for StableIdentifier(0);
    v18 = (char *)&loc_10099FC14 + 4 * byte_100E5791F[swift_getEnumCaseMultiPayload(v16, v17)];
    __asm { BR              X10 }
  }
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v23 = v22((char *)a1 + v19, 1, v13);
  v24 = v22(v21, 1, v13);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v21, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
LABEL_8:
    v25 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_9;
  }
  v76(v20, v21, v13);
LABEL_9:
  v26 = a3[8];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = a3[9];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)((char *)a2 + v30);
  v33 = *v32;
  v34 = v32[1];
  sub_10001BBBC(*v32, v34);
  v35 = *v31;
  v36 = v31[1];
  *v31 = v33;
  v31[1] = v34;
  sub_10001BC14(v35, v36);
  v37 = a3[10];
  v38 = (uint64_t *)((char *)a1 + v37);
  v39 = (uint64_t *)((char *)a2 + v37);
  v40 = *(uint64_t *)((char *)a2 + v37 + 8);
  if (*(unint64_t *)((char *)a1 + v37 + 8) >> 60 == 15)
  {
    if (v40 >> 60 != 15)
    {
      v41 = *v39;
      sub_10001BBBC(v41, v40);
      *v38 = v41;
      v38[1] = v40;
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v40 >> 60 == 15)
  {
    sub_1001FD268((uint64_t)v38);
LABEL_14:
    *(_OWORD *)v38 = *(_OWORD *)v39;
    goto LABEL_16;
  }
  v42 = *v39;
  sub_10001BBBC(v42, v40);
  v43 = *v38;
  v44 = v38[1];
  *v38 = v42;
  v38[1] = v40;
  sub_10001BC14(v43, v44);
LABEL_16:
  v45 = a3[11];
  v46 = (uint64_t *)((char *)a1 + v45);
  v47 = (uint64_t *)((char *)a2 + v45);
  v48 = *(uint64_t *)((char *)a2 + v45 + 8);
  if (*(unint64_t *)((char *)a1 + v45 + 8) >> 60 != 15)
  {
    if (v48 >> 60 != 15)
    {
      v50 = *v47;
      sub_10001BBBC(v50, v48);
      v51 = *v46;
      v52 = v46[1];
      *v46 = v50;
      v46[1] = v48;
      sub_10001BC14(v51, v52);
      goto LABEL_23;
    }
    sub_1001FD268((uint64_t)v46);
    goto LABEL_21;
  }
  if (v48 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)v46 = *(_OWORD *)v47;
    goto LABEL_23;
  }
  v49 = *v47;
  sub_10001BBBC(v49, v48);
  *v46 = v49;
  v46[1] = v48;
LABEL_23:
  v53 = a3[12];
  v54 = (uint64_t *)((char *)a1 + v53);
  v55 = (uint64_t *)((char *)a2 + v53);
  v56 = *v55;
  v57 = v55[1];
  sub_10001BBBC(*v55, v57);
  v58 = *v54;
  v59 = v54[1];
  *v54 = v56;
  v54[1] = v57;
  sub_10001BC14(v58, v59);
  v60 = a3[13];
  v61 = (uint64_t *)((char *)a1 + v60);
  v62 = (uint64_t *)((char *)a2 + v60);
  v63 = *v62;
  v64 = v62[1];
  sub_10001BBBC(*v62, v64);
  v65 = *v61;
  v66 = v61[1];
  *v61 = v63;
  v61[1] = v64;
  sub_10001BC14(v65, v66);
  v67 = a3[14];
  v68 = (uint64_t *)((char *)a1 + v67);
  v69 = (uint64_t *)((char *)a2 + v67);
  *v68 = *v69;
  v70 = v69[1];
  v68[1] = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease();
  v71 = a3[15];
  v72 = (uint64_t *)((char *)a1 + v71);
  v73 = (uint64_t *)((char *)a2 + v71);
  *v72 = *v73;
  v74 = v73[1];
  v72[1] = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
  *(uint64_t *)((char *)a1 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  *((_BYTE *)a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
  return a1;
}

_OWORD *sub_1009A00D4(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  int *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  v15 = type metadata accessor for StableIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
  if (EnumCaseMultiPayload == 3)
  {
    v11(v13, v14, v9);
    v18 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    *(_OWORD *)&v13[v18[12]] = *(_OWORD *)&v14[v18[12]];
    *(_OWORD *)&v13[v18[16]] = *(_OWORD *)&v14[v18[16]];
    *(_OWORD *)&v13[v18[20]] = *(_OWORD *)&v14[v18[20]];
    v13[v18[24]] = v14[v18[24]];
    swift_storeEnumTagMultiPayload(v13, v15, 3);
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v11(v13, v14, v9);
    v17 = (int *)sub_10001A9A8(&qword_101106F40);
    *(_OWORD *)&v13[v17[12]] = *(_OWORD *)&v14[v17[12]];
    *(_OWORD *)&v13[v17[16]] = *(_OWORD *)&v14[v17[16]];
    *(_OWORD *)&v13[v17[20]] = *(_OWORD *)&v14[v17[20]];
    *(_WORD *)&v13[v17[24]] = *(_WORD *)&v14[v17[24]];
    *(_OWORD *)&v13[v17[28]] = *(_OWORD *)&v14[v17[28]];
    swift_storeEnumTagMultiPayload(v13, v15, 2);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = &a2[v19];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v19], 1, v9))
  {
    v22 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v11(v20, v21, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  }
  v23 = a3[8];
  v24 = (char *)a1 + v23;
  v25 = &a2[v23];
  v26 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)&a2[v27];
  v28 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)&a2[v28];
  v29 = a3[14];
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)((char *)a1 + v29) = *(_OWORD *)&a2[v29];
  v30 = a3[16];
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)&a2[a3[15]];
  *(_QWORD *)((char *)a1 + v30) = *(_QWORD *)&a2[v30];
  v31 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)&a2[a3[17]];
  *((_BYTE *)a1 + v31) = a2[v31];
  v32 = a3[20];
  *((_BYTE *)a1 + a3[19]) = a2[a3[19]];
  *((_BYTE *)a1 + v32) = a2[v32];
  return a1;
}

uint64_t *sub_1009A037C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  int *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  if (a1 != a2)
  {
    v14 = a3[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    sub_1000126B0((uint64_t)a1 + v14, type metadata accessor for StableIdentifier);
    v17 = type metadata accessor for StableIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v15, v16, v11);
      v20 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      *(_OWORD *)&v15[v20[12]] = *(_OWORD *)&v16[v20[12]];
      *(_OWORD *)&v15[v20[16]] = *(_OWORD *)&v16[v20[16]];
      *(_OWORD *)&v15[v20[20]] = *(_OWORD *)&v16[v20[20]];
      v15[v20[24]] = v16[v20[24]];
      swift_storeEnumTagMultiPayload(v15, v17, 3);
    }
    else if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v15, v16, v11);
      v19 = (int *)sub_10001A9A8(&qword_101106F40);
      *(_OWORD *)&v15[v19[12]] = *(_OWORD *)&v16[v19[12]];
      *(_OWORD *)&v15[v19[16]] = *(_OWORD *)&v16[v19[16]];
      *(_OWORD *)&v15[v19[20]] = *(_OWORD *)&v16[v19[20]];
      *(_WORD *)&v15[v19[24]] = *(_WORD *)&v16[v19[24]];
      *(_OWORD *)&v15[v19[28]] = *(_OWORD *)&v16[v19[28]];
      swift_storeEnumTagMultiPayload(v15, v17, 2);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v25 = v24((char *)a1 + v21, 1, v11);
  v26 = v24(v23, 1, v11);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v22, v23, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v22, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v11);
LABEL_12:
    v27 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  v13(v22, v23, v11);
LABEL_13:
  v28 = a3[8];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  v32 = a3[9];
  v33 = *(uint64_t *)((char *)a1 + v32);
  v34 = *(uint64_t *)((char *)a1 + v32 + 8);
  *(_OWORD *)((char *)a1 + v32) = *(_OWORD *)((char *)a2 + v32);
  sub_10001BC14(v33, v34);
  v35 = a3[10];
  v36 = (uint64_t)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *(uint64_t *)((char *)a1 + v35 + 8);
  if (v38 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)v36 = *(_OWORD *)v37;
    goto LABEL_18;
  }
  v39 = *((_QWORD *)v37 + 1);
  if (v39 >> 60 == 15)
  {
    sub_1001FD268(v36);
    goto LABEL_16;
  }
  v40 = *(_QWORD *)v36;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_QWORD *)(v36 + 8) = v39;
  sub_10001BC14(v40, v38);
LABEL_18:
  v41 = a3[11];
  v42 = (uint64_t *)((char *)a1 + v41);
  v43 = (uint64_t *)((char *)a2 + v41);
  v44 = *(uint64_t *)((char *)a1 + v41 + 8);
  if (v44 >> 60 != 15)
  {
    v45 = v43[1];
    if (v45 >> 60 != 15)
    {
      v46 = *v42;
      *v42 = *v43;
      v42[1] = v45;
      sub_10001BC14(v46, v44);
      goto LABEL_23;
    }
    sub_1001FD268((uint64_t)v42);
  }
  *(_OWORD *)v42 = *(_OWORD *)v43;
LABEL_23:
  v47 = a3[12];
  v48 = *(uint64_t *)((char *)a1 + v47);
  v49 = *(uint64_t *)((char *)a1 + v47 + 8);
  *(_OWORD *)((char *)a1 + v47) = *(_OWORD *)((char *)a2 + v47);
  sub_10001BC14(v48, v49);
  v50 = a3[13];
  v51 = *(uint64_t *)((char *)a1 + v50);
  v52 = *(uint64_t *)((char *)a1 + v50 + 8);
  *(_OWORD *)((char *)a1 + v50) = *(_OWORD *)((char *)a2 + v50);
  sub_10001BC14(v51, v52);
  v53 = a3[14];
  v54 = (uint64_t *)((char *)a1 + v53);
  v55 = (uint64_t *)((char *)a2 + v53);
  v57 = *v55;
  v56 = v55[1];
  *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  v58 = a3[15];
  v59 = (uint64_t *)((char *)a1 + v58);
  v60 = (uint64_t *)((char *)a2 + v58);
  v62 = *v60;
  v61 = v60[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease();
  v63 = a3[17];
  *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
  *(uint64_t *)((char *)a1 + v63) = *(uint64_t *)((char *)a2 + v63);
  v64 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  *((_BYTE *)a1 + v64) = *((_BYTE *)a2 + v64);
  *((_BYTE *)a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
  return a1;
}

uint64_t sub_1009A0770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009A077C);
}

uint64_t sub_1009A077C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for StableIdentifier(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_10001A9A8(&qword_1010ED860);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + a3[14] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1009A0870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009A087C);
}

uint64_t sub_1009A087C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = type metadata accessor for StableIdentifier(0);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v13 = sub_10001A9A8(&qword_1010ED860);
  v9 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v13;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[14] + 8) = (a2 - 1);
  return result;
}

void sub_1009A096C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[17];

  v10[0] = &unk_100E57998;
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for StableIdentifier(319);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_100252558(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for Date(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_100E57998;
          v10[6] = &unk_100E579B0;
          v10[7] = &unk_100E579B0;
          v10[8] = &unk_100E57998;
          v10[9] = &unk_100E57998;
          v10[10] = &unk_100E579C8;
          v10[11] = &unk_100E579C8;
          v10[12] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[13] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[14] = &unk_100E579E0;
          v10[15] = &unk_100E579F8;
          v10[16] = &unk_100E57A10;
          swift_initStructMetadata(a1, 256, 17, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_1009A0A80(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  NSString v51;
  id v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  NSString v57;
  id v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  NSString v70;
  id v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSString v80;
  id v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  NSString v85;
  id v86;
  uint64_t v87;
  NSString v88;
  id v89;
  NSString v90;
  id v91;
  NSString v92;
  id v93;
  NSString v94;
  id v95;
  unint64_t v96;
  char v97;
  NSString v98;
  id v99;
  char v100;
  uint64_t *v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  NSString v111;
  id v112;
  __int128 v113;
  NSString v114;
  id v115;
  _QWORD *v116;
  int *v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  NSString v126;
  id v127;
  char v128;
  NSString v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  __int128 v136;
  unint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  char *v151;
  char *v152;
  uint64_t v153;
  int *v154;
  _QWORD *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  unint64_t v164;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v6 = (char *)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v157 = v7;
  v158 = v8;
  __chkstk_darwin(v7);
  v156 = (char *)&v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110EE80);
  __chkstk_darwin(v10);
  v12 = (Swift::String *)((char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for StableIdentifier(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v134 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010ED860);
  v18 = __chkstk_darwin(v17);
  v152 = (char *)&v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v134 - v20;
  v22 = type metadata accessor for UUID(0);
  v161 = *(_QWORD *)(v22 - 8);
  v162 = v22;
  __chkstk_darwin(v22);
  v160 = (char *)&v134 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for OwnedBeaconRecord(0);
  v154 = (int *)v24;
  v155 = a2;
  v153 = *(int *)(v24 + 72);
  *((_BYTE *)a2 + v153) = 3;
  v25 = CKRecord.recordType.getter(v24);
  v27 = v26;
  if (qword_1010EA0D0 != -1)
    swift_once(&qword_1010EA0D0, sub_1009A3038);
  if (v25 == qword_1011B7A98 && v27 == unk_1011B7AA0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, qword_1011B7A98, unk_1011B7AA0, 0);
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      v49 = sub_1009A6294();
      v37 = swift_allocError(&type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError, v49, 0, 0);
      *v50 = 0;
      goto LABEL_15;
    }
  }
  v151 = v16;
  v29 = objc_msgSend(a1, "recordID");
  v30 = objc_msgSend(v29, "recordName");

  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  UUID.init(uuidString:)(v31, v33);
  swift_bridgeObjectRelease();
  v35 = v161;
  v34 = v162;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v21, 1, v162) == 1)
  {
    sub_100004048((uint64_t)v21, &qword_1010ED860);
    v36 = sub_1009A6294();
    v37 = swift_allocError(&type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError, v36, 0, 0);
    *v38 = 2;
LABEL_15:
    swift_willThrow(v37);

    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v160, v21, v34);
  v39 = objc_msgSend(a1, "encryptedValues");
  v40 = String._bridgeToObjectiveC()();
  v150 = v39;
  v41 = objc_msgSend(v39, "objectForKeyedSubscript:", v40);

  if (!v41)
    goto LABEL_26;
  v164 = (unint64_t)v41;
  v43 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0);
  v42 = swift_dynamicCast(&v163, &v164, v43, &type metadata for String, 6);
  if ((v42 & 1) == 0)
    goto LABEL_26;
  v149 = v43;
  v44 = v163;
  v45 = objc_autoreleasePoolPush();
  v46 = v159;
  sub_100C6FB74(v44, *((void **)&v44 + 1), v12);
  if (v46)
  {
    objc_autoreleasePoolPop(v45);
    __break(1u);
    return;
  }
  objc_autoreleasePoolPop(v45);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(Swift::String *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v47 = &qword_10110EE80;
    v48 = (uint64_t)v12;
LABEL_24:
    v42 = sub_100004048(v48, v47);
    goto LABEL_25;
  }
  sub_1000126EC((uint64_t)v12, (uint64_t)v151, type metadata accessor for StableIdentifier);
  v51 = String._bridgeToObjectiveC()();
  v52 = objc_msgSend(v150, "objectForKeyedSubscript:", v51);

  if (!v52)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v158 + 56))(v6, 1, 1, v157);
    goto LABEL_23;
  }
  *(_QWORD *)&v163 = v52;
  v53 = v157;
  v54 = swift_dynamicCast(v6, &v163, v149, v157, 6);
  v55 = v158;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v6, v54 ^ 1u, 1, v53);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v6, 1, v53) == 1)
  {
LABEL_23:
    sub_1000126B0((uint64_t)v151, type metadata accessor for StableIdentifier);
    v47 = (uint64_t *)&unk_1010EA690;
    v48 = (uint64_t)v6;
    goto LABEL_24;
  }
  v56 = v156;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v156, v6, v53);
  v57 = String._bridgeToObjectiveC()();
  v58 = objc_msgSend(v150, "objectForKeyedSubscript:", v57);

  v59 = (uint64_t)v151;
  if (!v58
    || (v164 = (unint64_t)v58, (swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6) & 1) == 0))
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v53);
    v42 = sub_1000126B0(v59, type metadata accessor for StableIdentifier);
LABEL_25:
    v35 = v161;
    v34 = v162;
LABEL_26:
    v61 = static os_log_type_t.error.getter(v42);
    v62 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v63 = swift_allocObject(v62, 72, 7);
    *(_OWORD *)(v63 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v63 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v63 + 64) = sub_100088600();
    *(_QWORD *)(v63 + 32) = a1;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v64 = a1;
    v65 = (void *)static OS_os_log.default.getter(v64);
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v65, "Invalid Beacon Record - %@", 26, 2, v63);
    swift_bridgeObjectRelease();

    v66 = sub_1009A6294();
    v67 = swift_allocError(&type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError, v66, 0, 0);
    *v68 = 3;
    swift_willThrow(v67);
    swift_unknownObjectRelease(v150);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v160, v34);
    return;
  }
  v60 = v163;
  sub_10001BBBC(v163, *((unint64_t *)&v163 + 1));
  sub_1002F702C(v60, *((uint64_t *)&v60 + 1));
  v159 = *((_QWORD *)&v163 + 1);
  v69 = v163;
  v70 = String._bridgeToObjectiveC()();
  v71 = objc_msgSend(v150, "objectForKeyedSubscript:", v70);

  if (!v71)
  {
    v76 = v69;
    v77 = v159;
LABEL_32:
    sub_10001BC14(v76, v77);
    sub_10001BC14(v60, *((unint64_t *)&v60 + 1));
    v35 = v161;
    v34 = v162;
    v78 = (uint64_t)v151;
    (*(void (**)(char *, uint64_t))(v158 + 8))(v56, v53);
    v79 = v78;
LABEL_39:
    v42 = sub_1000126B0(v79, type metadata accessor for StableIdentifier);
    goto LABEL_26;
  }
  v72 = v159;
  v148 = v69;
  v164 = (unint64_t)v71;
  if ((swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6) & 1) == 0)
  {
    v76 = v148;
    v77 = v72;
    goto LABEL_32;
  }
  v147 = v60;
  v73 = v163;
  sub_10001BBBC(v163, *((unint64_t *)&v163 + 1));
  v74 = sub_1002FB3AC(v73, *((unint64_t *)&v73 + 1));
  v35 = v161;
  v34 = v162;
  v143 = 0;
  v145 = v74;
  v146 = v75;
  v144 = v73;
  v80 = String._bridgeToObjectiveC()();
  v81 = objc_msgSend(v150, "objectForKeyedSubscript:", v80);

  if (!v81
    || (v164 = (unint64_t)v81, (swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6) & 1) == 0))
  {
    sub_10001BC14(v145, v146);
    sub_10001BC14(v148, v159);
    sub_10001BC14(v144, *((unint64_t *)&v144 + 1));
    sub_10001BC14(v147, *((unint64_t *)&v60 + 1));
    goto LABEL_38;
  }
  v142 = *((_QWORD *)&v60 + 1);
  v82 = v163;
  sub_10001BBBC(v163, *((unint64_t *)&v163 + 1));
  v141 = *((_QWORD *)&v82 + 1);
  v83 = v143;
  v140 = sub_1002FB6C8(v82, *((unint64_t *)&v82 + 1));
  v143 = v84;
  if (v83)
  {
    sub_10001BC14(v145, v146);
    sub_10001BC14(v148, v159);
    sub_10001BC14(v82, v141);
    sub_10001BC14(v144, *((unint64_t *)&v144 + 1));
    sub_10001BC14(v147, v142);
    swift_errorRelease(v83);
LABEL_38:
    (*(void (**)(char *, uint64_t))(v158 + 8))(v56, v53);
    v79 = (uint64_t)v151;
    goto LABEL_39;
  }
  v85 = String._bridgeToObjectiveC()();
  v86 = objc_msgSend(v150, "objectForKeyedSubscript:", v85);

  if (!v86
    || (v164 = (unint64_t)v86, (swift_dynamicCast(&v163, &v164, v149, &type metadata for String, 6) & 1) == 0))
  {
LABEL_53:
    sub_10001BC14(v140, v143);
    sub_10001BC14(v145, v146);
    sub_10001BC14(v148, v159);
    sub_10001BC14(v82, v141);
    sub_10001BC14(v144, *((unint64_t *)&v144 + 1));
    sub_10001BC14(v147, v142);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v156, v157);
    v42 = sub_1000126B0((uint64_t)v151, type metadata accessor for StableIdentifier);
    goto LABEL_25;
  }
  v139 = *((_QWORD *)&v163 + 1);
  v87 = v163;
  v88 = String._bridgeToObjectiveC()();
  v89 = objc_msgSend(v150, "objectForKeyedSubscript:", v88);

  if (!v89
    || (v164 = (unint64_t)v89, (swift_dynamicCast(&v163, &v164, v149, &type metadata for String, 6) & 1) == 0))
  {
LABEL_52:
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  v138 = v163;
  v90 = String._bridgeToObjectiveC()();
  v91 = objc_msgSend(v150, "objectForKeyedSubscript:", v90);

  if (!v91
    || (*(_QWORD *)&v163 = v91, (swift_dynamicCast(&v164, &v163, v149, &type metadata for Int, 6) & 1) == 0)
    || (v137 = v164,
        v92 = String._bridgeToObjectiveC()(),
        v93 = objc_msgSend(v150, "objectForKeyedSubscript:", v92),
        v92,
        !v93)
    || (*(_QWORD *)&v163 = v93, (swift_dynamicCast(&v164, &v163, v149, &type metadata for Int, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  v135 = v164;
  v94 = String._bridgeToObjectiveC()();
  v95 = objc_msgSend(v150, "objectForKeyedSubscript:", v94);

  if (v95 && (*(_QWORD *)&v163 = v95, swift_dynamicCast(&v164, &v163, v149, &type metadata for Int, 6)))
    v96 = v164;
  else
    v96 = 0;
  v97 = sub_100DC72C8(v96);
  *((_BYTE *)v155 + v154[19]) = v97;
  v98 = String._bridgeToObjectiveC()();
  v99 = objc_msgSend(v150, "objectForKeyedSubscript:", v98);

  if (v99
    && (*(_QWORD *)&v163 = v99, swift_dynamicCast(&v164, &v163, v149, &type metadata for Bool, 6)))
  {
    v100 = v164;
  }
  else
  {
    v100 = 0;
  }
  v101 = v155;
  *((_BYTE *)v155 + v154[20]) = v100;
  *(_QWORD *)&v136 = objc_autoreleasePoolPush();
  v102 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v102);
  objc_msgSend(v102, "finishEncoding");
  v103 = objc_msgSend(v102, "encodedData");
  v104 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v103);
  v106 = v105;

  objc_autoreleasePoolPop((void *)v136);
  *v101 = v104;
  v101[1] = v106;
  v107 = v154;
  (*(void (**)(char *, char *, uint64_t))(v161 + 16))((char *)v101 + v154[5], v160, v162);
  sub_10005972C((uint64_t)v151, (uint64_t)v101 + v107[6], type metadata accessor for StableIdentifier);
  (*(void (**)(char *, char *, uint64_t))(v158 + 16))((char *)v101 + v107[8], v156, v157);
  v108 = (uint64_t *)((char *)v101 + v107[9]);
  v109 = v148;
  v110 = v159;
  *v108 = v148;
  v108[1] = v110;
  sub_10001BBBC(v109, v110);
  v111 = String._bridgeToObjectiveC()();
  v112 = objc_msgSend(v150, "objectForKeyedSubscript:", v111);

  v136 = xmmword_100E22B20;
  if (v112)
  {
    v164 = (unint64_t)v112;
    if ((swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6) & 1) != 0)
    {
      sub_1002F702C(v163, *((uint64_t *)&v163 + 1));
      v113 = v163;
    }
    else
    {
      v113 = v136;
    }
  }
  else
  {
    v113 = v136;
  }
  *(_OWORD *)((char *)v155 + v154[10]) = v113;
  v114 = String._bridgeToObjectiveC()();
  v115 = objc_msgSend(v150, "objectForKeyedSubscript:", v114);

  if (v115)
  {
    v164 = (unint64_t)v115;
    if ((swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6) & 1) != 0)
    {
      sub_1002F702C(v163, *((uint64_t *)&v163 + 1));
      v136 = v163;
    }
  }
  v117 = v154;
  v116 = v155;
  *(_OWORD *)((char *)v155 + v154[11]) = v136;
  v118 = (_QWORD *)((char *)v116 + v117[12]);
  v119 = v145;
  v120 = v146;
  *v118 = v145;
  v118[1] = v120;
  v121 = (_QWORD *)((char *)v116 + v117[13]);
  v122 = v140;
  v123 = v143;
  *v121 = v140;
  v121[1] = v123;
  v124 = (_QWORD *)((char *)v116 + v117[14]);
  v125 = v139;
  *v124 = v87;
  v124[1] = v125;
  *(_OWORD *)((char *)v116 + v117[15]) = v138;
  *(_QWORD *)((char *)v116 + v117[16]) = v137;
  *(_QWORD *)((char *)v116 + v117[17]) = v135;
  sub_10001BBBC(v119, v120);
  sub_10001BBBC(v122, v123);
  v126 = String._bridgeToObjectiveC()();
  v127 = objc_msgSend(v150, "objectForKeyedSubscript:", v126);

  if (v127 && (*(_QWORD *)&v163 = v127, (swift_dynamicCast(&v164, &v163, v149, &type metadata for Int, 6) & 1) != 0))
  {
    v128 = v164;
    if (v164 >= 3)
      v128 = 3;
  }
  else
  {
    v128 = 3;
  }
  *((_BYTE *)v155 + v153) = v128;
  v129 = String._bridgeToObjectiveC()();
  v130 = objc_msgSend(v150, "objectForKeyedSubscript:", v129);

  if (v130
    && (v164 = (unint64_t)v130, (swift_dynamicCast(&v163, &v164, v149, &type metadata for String, 6) & 1) != 0))
  {
    v131 = (uint64_t)v152;
    UUID.init(uuidString:)(v163, *((_QWORD *)&v163 + 1));
    swift_unknownObjectRelease(v150);

    swift_bridgeObjectRelease();
    sub_10001BC14(v140, v143);
    sub_10001BC14(v145, v146);
    sub_10001BC14(v148, v159);
    sub_10001BC14(v82, v141);
    sub_10001BC14(v144, *((unint64_t *)&v144 + 1));
    sub_10001BC14(v147, v142);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v156, v157);
    sub_1000126B0((uint64_t)v151, type metadata accessor for StableIdentifier);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v162);
    sub_1001C0884(v131, (uint64_t)v155 + v154[7]);
  }
  else
  {
    swift_unknownObjectRelease(v150);

    sub_10001BC14(v140, v143);
    sub_10001BC14(v145, v146);
    sub_10001BC14(v148, v159);
    sub_10001BC14(v82, v141);
    sub_10001BC14(v144, *((unint64_t *)&v144 + 1));
    sub_10001BC14(v147, v142);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v156, v157);
    sub_1000126B0((uint64_t)v151, type metadata accessor for StableIdentifier);
    v132 = v161;
    v133 = v162;
    (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v162);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v132 + 56))((char *)v155 + v154[7], 1, 1, v133);
  }
}

uint64_t sub_1009A1DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  sub_10005972C(v0 + v4[6], (uint64_t)v3, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v1);
  if (EnumCaseMultiPayload == 3)
  {
    sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 2)
  {
    sub_10001A9A8(&qword_101106F40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
    return sub_1001EE37C(*(_QWORD *)(v0 + v4[16]), *(_QWORD *)(v0 + v4[17]));
  }
  sub_1000126B0((uint64_t)v3, type metadata accessor for StableIdentifier);
  return 0;
}

uint64_t sub_1009A1F44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[27] = v0;
  v2 = type metadata accessor for OwnedBeaconRecord(0);
  v1[28] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[29] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v1[30] = v4;
  v1[31] = swift_task_alloc((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009A1FA8, 0, 0);
}

uint64_t sub_1009A1FA8()
{
  uint64_t v0;
  char v1;
  uint64_t My;
  uint64_t v3;
  _QWORD *v4;
  void (*v5)(_QWORD *, _QWORD, uint64_t);
  char v6;
  void *v7;
  id v8;
  unsigned int v9;
  NSString v10;
  unsigned int v11;
  char v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t (*v18)(void);

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 200) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 208) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 304), v0 + 200, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 304) & 1) != 0)
  {
    v1 = 1;
LABEL_16:
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(v1 & 1);
  }
  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 80) = My;
  v3 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  *(_QWORD *)(v0 + 88) = v3;
  v4 = sub_100018F08((_QWORD *)(v0 + 56));
  v5 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104);
  v5(v4, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  v6 = isFeatureEnabled(_:)(v0 + 56);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if ((v6 & 1) == 0)
    goto LABEL_15;
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v7 = (void *)qword_1011B7C08;
  v8 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v9 = objc_msgSend(v8, "isInternalBuild");

  if (v9)
  {
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v7, "BOOLForKey:", v10);

    if (v11)
    {
      v12 = sub_100C6F9A8();
LABEL_13:
      v1 = v12;
      goto LABEL_16;
    }
  }
  *(_QWORD *)(v0 + 120) = My;
  *(_QWORD *)(v0 + 128) = v3;
  v13 = sub_100018F08((_QWORD *)(v0 + 96));
  v5(v13, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  v14 = isFeatureEnabled(_:)(v0 + 96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  if ((v14 & 1) != 0)
  {
    v12 = sub_1009A2EDC();
    goto LABEL_13;
  }
  *(_QWORD *)(v0 + 256) = sub_1009A1DCC();
  *(_QWORD *)(v0 + 264) = v15;
  if (v15 >> 60 == 15)
  {
LABEL_15:
    v1 = 0;
    goto LABEL_16;
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v18 = (uint64_t (*)(void))((char *)&dword_1010EBC40 + dword_1010EBC40);
    v17 = (_QWORD *)swift_task_alloc(unk_1010EBC44);
    *(_QWORD *)(v0 + 272) = v17;
    *v17 = v0;
    v17[1] = sub_1009A22F0;
    return v18();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009A22F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009A234C, 0, 0);
}

uint64_t sub_1009A234C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 280);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 240);
    v3 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 232);
    v6 = *(_QWORD *)(v0 + 216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10005972C(v6, v3, type metadata accessor for OwnedBeaconRecord);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = (v7 + 24) & ~v7;
    v9 = swift_allocObject(&unk_1010A0790, v8 + v4, v7 | 7);
    *(_QWORD *)(v0 + 288) = v9;
    *(_QWORD *)(v9 + 16) = v2;
    sub_1000126EC(v3, v9 + v8, type metadata accessor for OwnedBeaconRecord);
    v10 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 296) = v11;
    v12 = sub_10001A9A8(&qword_1010FBAA0);
    *v11 = v0;
    v11[1] = sub_1009A24A0;
    return unsafeBlocking<A>(_:)(v0 + 305, sub_1009A6FA8, v9, v12);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 256);
    v15 = *(_QWORD *)(v0 + 264);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v16 = sub_100A088E4(v14, v15);
    sub_10001EF3C(v14, v15);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    return (*(uint64_t (**)(BOOL))(v0 + 8))(v16);
  }
}

uint64_t sub_1009A24A0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  swift_release();
  return swift_task_switch(sub_1009A24FC, 0, 0);
}

uint64_t sub_1009A24FC()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(unsigned __int8 *)(v0 + 305);
  if (v1 != 2 && (v1 & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 264);
    swift_release();
    sub_10001EF3C(v5, v6);
    v4 = 1;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 256);
    v2 = *(_QWORD *)(v0 + 264);
    v4 = sub_100A088E4(v3, v2);
    swift_release();
    sub_10001EF3C(v3, v2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v4);
}

void sub_1009A2594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10005972C(v0 + *(int *)(v4 + 24), (uint64_t)v3, type metadata accessor for StableIdentifier);
  v5 = (char *)sub_1009A2630 + 4 * byte_100E57924[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1009A2630()
{
  swift_bridgeObjectRelease();
  return 0;
}

void sub_1009A2848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v0 + *(int *)(v1 + 24), (uint64_t)v4, v5);
  v6 = (char *)sub_1009A2910 + 4 * byte_100E57929[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_1009A2910()
{
  swift_bridgeObjectRelease();
  return 0;
}

void sub_1009A2B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10005972C(v0 + *(int *)(v4 + 24), (uint64_t)v3, type metadata accessor for StableIdentifier);
  v5 = (char *)sub_1009A2BDC + 4 * byte_100E5792E[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1009A2BDC()
{
  uint64_t v0;

  sub_1000126B0(v0, type metadata accessor for StableIdentifier);
  return 256;
}

void sub_1009A2CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10005972C(v0 + *(int *)(v4 + 24), (uint64_t)v3, type metadata accessor for StableIdentifier);
  v5 = (char *)sub_1009A2D8C + 4 * byte_100E57933[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

id sub_1009A2D8C()
{
  uint64_t v0;

  sub_1000126B0(v0, type metadata accessor for StableIdentifier);
  return SPBeaconTypeSelfBeaconing;
}

uint64_t sub_1009A2EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10005972C(v0 + *(int *)(v4 + 24), (uint64_t)v3, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v1);
  if (EnumCaseMultiPayload == 3)
  {
    sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 2)
  {
    sub_10001A9A8(&qword_101106F40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
    return 1;
  }
  sub_1000126B0((uint64_t)v3, type metadata accessor for StableIdentifier);
  return 0;
}

uint64_t sub_1009A3038()
{
  uint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  v2[0] = 0xD000000000000012;
  v2[1] = 0x8000000100EEBAF0;
  result = String.init<A>(_:)(v2, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  qword_1011B7A98 = result;
  unk_1011B7AA0 = v1;
  return result;
}

uint64_t sub_1009A3098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7AA8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7AA8);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x61654264656E774FLL, 0xEC000000736E6F63, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_1009A316C()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(SPHandle), "handleWithEmailAddress:", v0);

  qword_1011B7AC0 = (uint64_t)v1;
}

void sub_1009A31E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v1;
  v12 = v1[1];
  sub_10001BBBC(*v1, v12);
  Data.hash(into:)(a1, v11, v12);
  sub_10001BC14(v11, v12);
  v13 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v14 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
  sub_100C70898();
  sub_10000F9B8((uint64_t)v1 + v13[7], (uint64_t)v10, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v15 = type metadata accessor for Date(0);
  v16 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v15, v16);
  v17 = (uint64_t *)((char *)v1 + v13[9]);
  v18 = *v17;
  v19 = v17[1];
  sub_10001BBBC(*v17, v19);
  Data.hash(into:)(a1, v18, v19);
  sub_10001BC14(v18, v19);
  v20 = (uint64_t *)((char *)v2 + v13[10]);
  v21 = v20[1];
  if (v21 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v22 = *v20;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v22, v21);
    Data.hash(into:)(a1, v22, v21);
    sub_10001EF3C(v22, v21);
  }
  v23 = (uint64_t *)((char *)v2 + v13[11]);
  v24 = v23[1];
  if (v24 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v25 = *v23;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v25, v24);
    Data.hash(into:)(a1, v25, v24);
    sub_10001EF3C(v25, v24);
  }
  v26 = (uint64_t *)((char *)v2 + v13[12]);
  v27 = *v26;
  v28 = v26[1];
  sub_10001BBBC(*v26, v28);
  Data.hash(into:)(a1, v27, v28);
  sub_10001BC14(v27, v28);
  v29 = (uint64_t *)((char *)v2 + v13[13]);
  v30 = *v29;
  v31 = v29[1];
  sub_10001BBBC(*v29, v31);
  Data.hash(into:)(a1, v30, v31);
  sub_10001BC14(v30, v31);
  v32 = (uint64_t *)((char *)v2 + v13[14]);
  v33 = *v32;
  v34 = v32[1];
  swift_bridgeObjectRetain(v34);
  String.hash(into:)(a1, v33, v34);
  swift_bridgeObjectRelease();
  v35 = (uint64_t *)((char *)v2 + v13[15]);
  v36 = *v35;
  v37 = v35[1];
  swift_bridgeObjectRetain(v37);
  String.hash(into:)(a1, v36, v37);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(uint64_t *)((char *)v2 + v13[16]));
  Hasher._combine(_:)(*(uint64_t *)((char *)v2 + v13[17]));
  v38 = *((unsigned __int8 *)v2 + v13[18]);
  if (v38 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v13[19]));
  Hasher._combine(_:)(*((_BYTE *)v2 + v13[20]));
}

uint64_t sub_1009A3600(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  char v43;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110EEE8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1009A6FE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconRecord.CodingKeys, &type metadata for OwnedBeaconRecord.CodingKeys, v11, v9, v10);
  v42 = *v3;
  v43 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for OwnedBeaconRecord(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v42) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v42, v5, v15, v16);
    v17 = v13[6];
    v41 = v3;
    v18 = (char *)v3 + v17;
    LOBYTE(v42) = 2;
    v19 = type metadata accessor for StableIdentifier(0);
    v20 = sub_100006204((unint64_t *)&unk_10110EEF0, type metadata accessor for StableIdentifier, (uint64_t)&unk_100E6AF40);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v42, v5, v19, v20);
    v21 = v41;
    v22 = (char *)v41 + v13[7];
    LOBYTE(v42) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v42, v5, v15, v16);
    v23 = (uint64_t)v21 + v13[8];
    LOBYTE(v42) = 4;
    v24 = type metadata accessor for Date(0);
    v25 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v42, v5, v24, v25);
    v42 = *(_OWORD *)((char *)v21 + v13[9]);
    v43 = 5;
    v26 = sub_1001EC4B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for SharedSecretKey, v26);
    v42 = *(_OWORD *)((char *)v21 + v13[10]);
    v43 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v43, v5, &type metadata for SharedSecretKey, v26);
    v42 = *(_OWORD *)((char *)v21 + v13[11]);
    v43 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v43, v5, &type metadata for SharedSecretKey, v26);
    v42 = *(_OWORD *)((char *)v21 + v13[12]);
    v43 = 8;
    v27 = sub_100068134();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for PrivateKey, v27);
    v42 = *(_OWORD *)((char *)v21 + v13[13]);
    v43 = 9;
    v28 = sub_1002FD29C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for PublicKey, v28);
    v29 = (uint64_t *)((char *)v21 + v13[14]);
    v30 = *v29;
    v31 = v29[1];
    LOBYTE(v42) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v30, v31, &v42, v5);
    v32 = (uint64_t *)((char *)v41 + v13[15]);
    v33 = *v32;
    v34 = v32[1];
    LOBYTE(v42) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v33, v34, &v42, v5);
    v35 = *(_QWORD *)((char *)v41 + v13[16]);
    LOBYTE(v42) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v35, &v42, v5);
    v36 = *(_QWORD *)((char *)v41 + v13[17]);
    LOBYTE(v42) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v36, &v42, v5);
    LOBYTE(v42) = *((_BYTE *)v41 + v13[19]);
    v43 = 14;
    v37 = sub_1009A7070();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for BatteryLevel, v37);
    v38 = *((unsigned __int8 *)v41 + v13[20]);
    LOBYTE(v42) = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v38, &v42, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1009A3B04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  char *v26;
  int *v27;
  uint64_t result;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  char *v77;
  int *v78;
  __int128 v79;
  char v80;

  v67 = a2;
  v4 = type metadata accessor for Date(0);
  v69 = *(_QWORD *)(v4 - 8);
  v70 = v4;
  __chkstk_darwin(v4);
  v68 = (_QWORD **)((char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v76 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (_QWORD **)((char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v73 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v12 = (_QWORD **)((char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = sub_10001A9A8(&qword_10110EEB8);
  v13 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconRecord(0);
  v17 = __chkstk_darwin(v16);
  v77 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = (int *)v17;
  v77[*(int *)(v17 + 72)] = 3;
  v20 = a1[3];
  v19 = a1[4];
  v75 = a1;
  sub_10001AA44(a1, v20);
  v21 = sub_1009A6FE8();
  v74 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconRecord.CodingKeys, &type metadata for OwnedBeaconRecord.CodingKeys, v21, v20, v19);
  if (v2)
  {
    v76 = v2;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v65 = v10;
    v66 = v13;
    v80 = 0;
    v22 = sub_100036994();
    v23 = v72;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v79, &type metadata for Data, &v80, v72, &type metadata for Data, v22);
    v34 = v77;
    *(_OWORD *)v77 = v79;
    LOBYTE(v79) = 1;
    v35 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = v73;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v12, v73, &v79, v23, v73, v35);
    v37 = v78;
    (*(void (**)(char *, _QWORD *, uint64_t))(v71 + 32))(&v34[v78[5]], v12, v36);
    LOBYTE(v79) = 2;
    v38 = sub_100006204(&qword_10110EEC8, type metadata accessor for StableIdentifier, (uint64_t)&unk_100E6AF68);
    v39 = v65;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v65, v8, &v79, v72, v8, v38);
    sub_1000126EC((uint64_t)v39, (uint64_t)&v34[v37[6]], type metadata accessor for StableIdentifier);
    LOBYTE(v79) = 3;
    v40 = (uint64_t)v76;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, &v79, v72, v36, v35);
    sub_1001C0884(v40, (uint64_t)&v34[v37[7]]);
    LOBYTE(v79) = 4;
    v41 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v42 = v68;
    v43 = v70;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v68, v70, &v79, v72, v70, v41);
    (*(void (**)(char *, _QWORD *, uint64_t))(v69 + 32))(&v34[v37[8]], v42, v43);
    v80 = 5;
    v44 = sub_1001EC3A8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v79, &type metadata for SharedSecretKey, &v80, v72, &type metadata for SharedSecretKey, v44);
    *(_OWORD *)&v34[v37[9]] = v79;
    v80 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for SharedSecretKey, &v80, v72, &type metadata for SharedSecretKey, v44);
    *(_OWORD *)&v34[v37[10]] = v79;
    v80 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for SharedSecretKey, &v80, v72, &type metadata for SharedSecretKey, v44);
    *(_OWORD *)&v34[v37[11]] = v79;
    v80 = 8;
    v45 = sub_10007CB0C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v79, &type metadata for PrivateKey, &v80, v72, &type metadata for PrivateKey, v45);
    *(_OWORD *)&v34[v37[12]] = v79;
    v80 = 9;
    v46 = sub_1002FD258();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v79, &type metadata for PublicKey, &v80, v72, &type metadata for PublicKey, v46);
    v76 = 0;
    *(_OWORD *)&v77[v78[13]] = v79;
    LOBYTE(v79) = 10;
    v47 = v76;
    v48 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
    v76 = v47;
    if (v47)
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v74, v72);
      v24 = 0;
      v25 = 1023;
    }
    else
    {
      v50 = (uint64_t *)&v77[v78[14]];
      *v50 = v48;
      v50[1] = v49;
      LOBYTE(v79) = 11;
      v51 = v76;
      v52 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
      v76 = v51;
      if (!v51)
      {
        v54 = (uint64_t *)&v77[v78[15]];
        *v54 = v52;
        v54[1] = v53;
        LOBYTE(v79) = 12;
        v55 = v76;
        v56 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
        v76 = v55;
        if (!v55)
        {
          *(_QWORD *)&v77[v78[16]] = v56;
          LOBYTE(v79) = 13;
          v57 = v76;
          v58 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
          v76 = v57;
          if (!v57)
          {
            *(_QWORD *)&v77[v78[17]] = v58;
            v80 = 14;
            v59 = sub_1009A702C();
            v60 = v76;
            KeyedDecodingContainer.decode<A>(_:forKey:)(&v79, &type metadata for BatteryLevel, &v80, v72, &type metadata for BatteryLevel, v59);
            v76 = v60;
            if (!v60)
            {
              v77[v78[19]] = v79;
              LOBYTE(v79) = 15;
              v61 = v76;
              v62 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
              v76 = v61;
              if (!v61)
              {
                v63 = v62;
                (*(void (**)(char *, uint64_t))(v66 + 8))(v74, v72);
                v64 = (uint64_t)v77;
                v77[v78[20]] = v63 & 1;
                sub_10005972C(v64, v67, type metadata accessor for OwnedBeaconRecord);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v75);
                return sub_1000126B0(v64, type metadata accessor for OwnedBeaconRecord);
              }
            }
          }
        }
        (*(void (**)(char *, uint64_t))(v66 + 8))(v74, v72);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v75);
        v26 = v77;
        sub_10001BC14(*(_QWORD *)v77, *((_QWORD *)v77 + 1));
        v27 = v78;
        (*(void (**)(char *, uint64_t))(v71 + 8))(&v26[v78[5]], v73);
        sub_1000126B0((uint64_t)&v26[v27[6]], type metadata accessor for StableIdentifier);
        sub_100004048((uint64_t)&v26[v27[7]], &qword_1010ED860);
        (*(void (**)(char *, uint64_t))(v69 + 8))(&v26[v27[8]], v70);
        v33 = 1;
        v24 = 1;
        v32 = 1;
        v31 = 1;
        v30 = 1;
        LOBYTE(v29) = 1;
LABEL_11:
        result = sub_10001BC14(*(_QWORD *)&v26[v27[9]], *(_QWORD *)&v26[v27[9] + 8]);
        if ((v29 & 1) != 0)
          goto LABEL_12;
        goto LABEL_24;
      }
      (*(void (**)(char *, uint64_t))(v66 + 8))(v74, v72);
      v25 = 2047;
      v24 = 1;
    }
  }
  v26 = v77;
  v27 = v78;
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v75);
  v29 = (v25 >> 6) & 1;
  v30 = (v25 >> 7) & 1;
  v31 = (v25 >> 8) & 1;
  v32 = (v25 >> 9) & 1;
  if ((v25 & 1) != 0)
  {
    result = sub_10001BC14(*(_QWORD *)v26, *((_QWORD *)v26 + 1));
    if ((v25 & 2) == 0)
    {
LABEL_6:
      if ((v25 & 4) == 0)
        goto LABEL_7;
      goto LABEL_20;
    }
  }
  else if ((v25 & 2) == 0)
  {
    goto LABEL_6;
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(&v26[v27[5]], v73);
  if ((v25 & 4) == 0)
  {
LABEL_7:
    if ((v25 & 8) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = sub_1000126B0((uint64_t)&v26[v27[6]], type metadata accessor for StableIdentifier);
  if ((v25 & 8) == 0)
  {
LABEL_8:
    if ((v25 & 0x10) == 0)
      goto LABEL_9;
LABEL_22:
    result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(&v26[v27[8]], v70);
    if ((v25 & 0x20) != 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_21:
  result = sub_100004048((uint64_t)&v26[v27[7]], &qword_1010ED860);
  if ((v25 & 0x10) != 0)
    goto LABEL_22;
LABEL_9:
  if ((v25 & 0x20) != 0)
  {
LABEL_10:
    v33 = 0;
    goto LABEL_11;
  }
LABEL_23:
  v33 = 0;
  if ((v25 & 0x40) != 0)
  {
LABEL_12:
    result = sub_10001EF3C(*(_QWORD *)&v26[v27[10]], *(_QWORD *)&v26[v27[10] + 8]);
    if ((v30 & 1) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  if (!v30)
  {
LABEL_13:
    if (v31)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = sub_10001EF3C(*(_QWORD *)&v26[v27[11]], *(_QWORD *)&v26[v27[11] + 8]);
  if ((v31 & 1) != 0)
  {
LABEL_14:
    result = sub_10001BC14(*(_QWORD *)&v26[v27[12]], *(_QWORD *)&v26[v27[12] + 8]);
    if ((v32 & 1) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  if (!v32)
  {
LABEL_15:
    if (v24)
      goto LABEL_16;
LABEL_28:
    if (!v33)
      return result;
    return swift_bridgeObjectRelease();
  }
LABEL_27:
  result = sub_10001BC14(*(_QWORD *)&v26[v27[13]], *(_QWORD *)&v26[v27[13] + 8]);
  if ((v24 & 1) == 0)
    goto LABEL_28;
LABEL_16:
  result = swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
    return result;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1009A4574(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 56));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1009A45A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 60));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1009A45DC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 64));
}

uint64_t sub_1009A45E8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 68));
}

BOOL sub_1009A45F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v8;

  v3 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v1 + *(int *)(a1 + 24), (uint64_t)v5, type metadata accessor for StableIdentifier);
  v6 = swift_getEnumCaseMultiPayload(v5, v3) == 0;
  sub_1000126B0((uint64_t)v5, type metadata accessor for StableIdentifier);
  return v6;
}

BOOL sub_1009A469C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v8;

  v3 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v1 + *(int *)(a1 + 24), (uint64_t)v5, type metadata accessor for StableIdentifier);
  v6 = swift_getEnumCaseMultiPayload(v5, v3) == 1;
  sub_1000126B0((uint64_t)v5, type metadata accessor for StableIdentifier);
  return v6;
}

uint64_t sub_1009A4748()
{
  return sub_100C6F9A8() & 1;
}

BOOL sub_1009A4774(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v8;

  v3 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v1 + *(int *)(a1 + 24), (uint64_t)v5, type metadata accessor for StableIdentifier);
  v6 = swift_getEnumCaseMultiPayload(v5, v3) == 4;
  sub_1000126B0((uint64_t)v5, type metadata accessor for StableIdentifier);
  return v6;
}

uint64_t sub_1009A4824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000F9B8(v2 + *(int *)(a1 + 28), a2, &qword_1010ED860);
}

Swift::Int sub_1009A484C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1009A31E0((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1009A488C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1009A31E0((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1009A48C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32));
}

BOOL sub_1009A48D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 32), a1 + *(int *)(a3 + 32)) & 1) == 0;
}

BOOL sub_1009A4900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32)) & 1) == 0;
}

uint64_t sub_1009A4928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 32), a1 + *(int *)(a3 + 32));
}

uint64_t sub_1009A493C(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  int *v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char v76;
  void (*v77)(char *, uint64_t);
  char v78;
  char v79;
  __int128 v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  __int128 v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  int *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSString v109;
  id v110;
  NSString v111;
  __int128 v112;
  char v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  NSString v117;
  id v118;
  NSString v119;
  uint64_t v120;
  __int128 v121;
  char v122;
  char v123;
  int v124;
  char v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  int *v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  void *v141;

  v134 = type metadata accessor for Date(0);
  v132 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v128 = (char *)&v127 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_10001A9A8(&qword_1010ED570);
  __chkstk_darwin(v131);
  v133 = (uint64_t)&v127 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5 = __chkstk_darwin(v4);
  v129 = (uint64_t)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v135 = (uint64_t)&v127 - v8;
  __chkstk_darwin(v7);
  v136 = (uint64_t *)((char *)&v127 - v9);
  v10 = sub_10001A9A8(&qword_1010ED860);
  v11 = __chkstk_darwin(v10);
  v130 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v127 - v14;
  v16 = static os_log_type_t.debug.getter(v13);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  v19 = *a1;
  v20 = objc_msgSend(v19, "description");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = v23;
  v24 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v25 = (void *)static OS_os_log.default.getter(v24);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v25, "Updating owned beacon record: %@", 32, 2, v18);
  swift_bridgeObjectRelease();

  v26 = objc_msgSend(v19, "encryptedValues");
  ObjectType = swift_getObjectType(v26);
  CKRecordKeyValueSetting.subscript.getter(&v139, 0xD000000000000010, 0x8000000100EC38B0, ObjectType, &type metadata for String);
  v29 = *((_QWORD *)&v139 + 1);
  v28 = v139;
  v137 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  sub_100C6ED38();
  if (!v29)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_100C6ED38();
    *((_QWORD *)&v140 + 1) = &type metadata for String;
    v141 = &protocol witness table for String;
    *(_QWORD *)&v139 = v33;
    *((_QWORD *)&v139 + 1) = v34;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0xD000000000000010, 0x8000000100EC38B0, ObjectType);
    goto LABEL_8;
  }
  if (v28 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v30, v31, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x65644970756F7267, 0xEF7265696669746ELL, ObjectType, &type metadata for String);
  v35 = v139;
  v36 = v138 + v137[7];
  sub_10000F9B8(v36, (uint64_t)v15, &qword_1010ED860);
  v37 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v15, 1, v37);
  if ((_DWORD)v40 == 1)
  {
    sub_100004048((uint64_t)v15, &qword_1010ED860);
    v41 = v138;
    if (!*((_QWORD *)&v35 + 1))
      goto LABEL_23;
    goto LABEL_18;
  }
  v127 = v35;
  v42 = UUID.uuidString.getter(v40);
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v37);
  if (!*((_QWORD *)&v35 + 1))
  {
    v41 = v138;
    if (!v44)
      goto LABEL_23;
    goto LABEL_18;
  }
  v41 = v138;
  if (!v44)
  {
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_19:
    v45 = v130;
    sub_10000F9B8(v36, (uint64_t)v130, &qword_1010ED860);
    v46 = v39(v45, 1, v37);
    if ((_DWORD)v46 == 1)
    {
      sub_100004048((uint64_t)v45, &qword_1010ED860);
      v139 = 0u;
      v140 = 0u;
      v141 = 0;
    }
    else
    {
      v47 = UUID.uuidString.getter(v46);
      *((_QWORD *)&v140 + 1) = &type metadata for String;
      v141 = &protocol witness table for String;
      *(_QWORD *)&v139 = v47;
      *((_QWORD *)&v139 + 1) = v48;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v37);
    }
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x65644970756F7267, 0xEF7265696669746ELL, ObjectType);
    goto LABEL_23;
  }
  if (v127 == v42 && *((_QWORD *)&v35 + 1) == (_QWORD)v35)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v126 = _stringCompareWithSmolCheck(_:_:expecting:)(v127, *((_QWORD *)&v35 + 1), v42, v35, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v126 & 1) == 0)
    goto LABEL_19;
LABEL_23:
  v49 = v136;
  v50 = v134;
  CKRecordKeyValueSetting.subscript.getter(v136, 0x44676E6972696170, 0xEB00000000657461, ObjectType, v134);
  v51 = v41 + v137[8];
  v52 = v132;
  v53 = v135;
  v130 = *(char **)(v132 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v130)(v135, v51, v50);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v50);
  v54 = v133;
  v55 = v133 + *(int *)(v131 + 48);
  sub_10000F9B8((uint64_t)v49, v133, (uint64_t *)&unk_1010EA690);
  v56 = v52;
  sub_10000F9B8(v53, v55, (uint64_t *)&unk_1010EA690);
  v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  if (v57(v54, 1, v50) == 1)
  {
    sub_100004048(v53, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v49, (uint64_t *)&unk_1010EA690);
    if (v57(v55, 1, v50) == 1)
    {
      sub_100004048(v54, (uint64_t *)&unk_1010EA690);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  v58 = v129;
  sub_10000F9B8(v54, v129, (uint64_t *)&unk_1010EA690);
  if (v57(v55, 1, v50) == 1)
  {
    sub_100004048(v135, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v136, (uint64_t *)&unk_1010EA690);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v50);
LABEL_28:
    sub_100004048(v54, &qword_1010ED570);
LABEL_29:
    *((_QWORD *)&v140 + 1) = v50;
    v141 = &protocol witness table for Date;
    v59 = sub_100018F08(&v139);
    ((void (*)(_QWORD *, uint64_t, uint64_t))v130)(v59, v51, v50);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x44676E6972696170, 0xEB00000000657461, ObjectType);
    goto LABEL_30;
  }
  v74 = v128;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v128, v55, v50);
  v75 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v76 = dispatch thunk of static Equatable.== infix(_:_:)(v58, v74, v50, v75);
  v77 = *(void (**)(char *, uint64_t))(v56 + 8);
  v77(v74, v50);
  sub_100004048(v135, (uint64_t *)&unk_1010EA690);
  sub_100004048((uint64_t)v136, (uint64_t *)&unk_1010EA690);
  v77((char *)v58, v50);
  sub_100004048(v54, (uint64_t *)&unk_1010EA690);
  if ((v76 & 1) == 0)
    goto LABEL_29;
LABEL_30:
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x6553646572616873, 0xEC00000074657263, ObjectType, &type metadata for Data);
  v60 = v139;
  v61 = v138;
  v62 = (uint64_t *)(v138 + v137[9]);
  v63 = *v62;
  v64 = v62[1];
  sub_10001BBBC(*v62, v64);
  if (*((_QWORD *)&v60 + 1) >> 60 == 15)
  {
    sub_10001EF3C(v60, *((unint64_t *)&v60 + 1));
    sub_10001EF3C(v63, v64);
  }
  else
  {
    sub_10001BD08(v60, *((unint64_t *)&v60 + 1));
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v60, *((uint64_t *)&v60 + 1));
    v66 = v65;
    sub_10001BC14(v63, v64);
    sub_10001EF3C(v60, *((unint64_t *)&v60 + 1));
    sub_10001EF3C(v60, *((unint64_t *)&v60 + 1));
    if ((v66 & 1) != 0)
      goto LABEL_34;
  }
  *((_QWORD *)&v140 + 1) = &type metadata for Data;
  v141 = &protocol witness table for Data;
  *(_QWORD *)&v139 = v63;
  *((_QWORD *)&v139 + 1) = v64;
  sub_10001BBBC(v63, v64);
  CKRecordKeyValueSetting.subscript.setter(&v139, 0x6553646572616873, 0xEC00000074657263, ObjectType);
LABEL_34:
  v67 = v137;
  v68 = (uint64_t *)(v61 + v137[10]);
  v70 = *v68;
  v69 = v68[1];
  v134 = v69 >> 60;
  v71 = v61;
  if (v69 >> 60 == 15)
    goto LABEL_42;
  sub_10001BBBC(v70, v69);
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x6553646572616873, 0xED00003274657263, ObjectType, &type metadata for Data);
  v72 = v139;
  if (*((_QWORD *)&v139 + 1) >> 60 == 15)
  {
    sub_10001BBBC(v70, v69);
    sub_10001EF3C(v72, *((unint64_t *)&v72 + 1));
    sub_10001EF3C(v70, v69);
    v73 = v70;
LABEL_40:
    *((_QWORD *)&v140 + 1) = &type metadata for Data;
    v141 = &protocol witness table for Data;
    *(_QWORD *)&v139 = v73;
    *((_QWORD *)&v139 + 1) = v69;
    sub_10001BD08(v73, v69);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x6553646572616873, 0xED00003274657263, ObjectType);
    goto LABEL_41;
  }
  sub_10001BD08(v70, v69);
  sub_10001BD08(v72, *((unint64_t *)&v72 + 1));
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v72, *((uint64_t *)&v72 + 1));
  v73 = v70;
  v79 = v78;
  sub_10001EF3C(v73, v69);
  sub_10001EF3C(v72, *((unint64_t *)&v72 + 1));
  sub_10001EF3C(v72, *((unint64_t *)&v72 + 1));
  if ((v79 & 1) == 0)
    goto LABEL_40;
LABEL_41:
  sub_10001EF3C(v73, v69);
  v71 = v138;
  v70 = v73;
LABEL_42:
  v135 = v70;
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x4B65746176697270, 0xEA00000000007965, ObjectType, &type metadata for Data);
  v80 = v139;
  v81 = (uint64_t *)(v71 + v67[12]);
  v82 = *v81;
  v83 = v81[1];
  sub_10001BBBC(*v81, v83);
  v136 = (_QWORD *)v69;
  if (*((_QWORD *)&v80 + 1) >> 60 == 15)
  {
    sub_10001EF3C(v80, *((unint64_t *)&v80 + 1));
    sub_10001EF3C(v82, v83);
  }
  else
  {
    sub_10001BD08(v80, *((unint64_t *)&v80 + 1));
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v80, *((uint64_t *)&v80 + 1));
    v85 = v84;
    sub_10001BC14(v82, v83);
    sub_10001EF3C(v80, *((unint64_t *)&v80 + 1));
    sub_10001EF3C(v80, *((unint64_t *)&v80 + 1));
    if ((v85 & 1) != 0)
      goto LABEL_46;
  }
  *((_QWORD *)&v140 + 1) = &type metadata for Data;
  v141 = &protocol witness table for Data;
  *(_QWORD *)&v139 = v82;
  *((_QWORD *)&v139 + 1) = v83;
  sub_10001BBBC(v82, v83);
  CKRecordKeyValueSetting.subscript.setter(&v139, 0x4B65746176697270, 0xEA00000000007965, ObjectType);
LABEL_46:
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x654B63696C627570, 0xE900000000000079, ObjectType, &type metadata for Data);
  v86 = v139;
  v87 = (uint64_t *)(v138 + v137[13]);
  v88 = *v87;
  v89 = v87[1];
  sub_10001BBBC(*v87, v89);
  if (*((_QWORD *)&v86 + 1) >> 60 == 15)
  {
    sub_10001EF3C(v86, *((unint64_t *)&v86 + 1));
    sub_10001EF3C(v88, v89);
    v90 = v138;
LABEL_49:
    *((_QWORD *)&v140 + 1) = &type metadata for Data;
    v141 = &protocol witness table for Data;
    *(_QWORD *)&v139 = v88;
    *((_QWORD *)&v139 + 1) = v89;
    sub_10001BBBC(v88, v89);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x654B63696C627570, 0xE900000000000079, ObjectType);
    goto LABEL_50;
  }
  sub_10001BD08(v86, *((unint64_t *)&v86 + 1));
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v86, *((uint64_t *)&v86 + 1));
  v92 = v91;
  sub_10001BC14(v88, v89);
  sub_10001EF3C(v86, *((unint64_t *)&v86 + 1));
  sub_10001EF3C(v86, *((unint64_t *)&v86 + 1));
  v90 = v138;
  if ((v92 & 1) == 0)
    goto LABEL_49;
LABEL_50:
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x6C65646F6DLL, 0xE500000000000000, ObjectType, &type metadata for String);
  v93 = v137;
  v94 = (unint64_t *)(v90 + v137[14]);
  v96 = *v94;
  v95 = v94[1];
  if (!*((_QWORD *)&v139 + 1))
    goto LABEL_54;
  if (v139 == __PAIR128__(v95, v96))
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v139, *((_QWORD *)&v139 + 1), *v94, v94[1], 0);
  swift_bridgeObjectRelease();
  if ((v97 & 1) == 0)
  {
LABEL_54:
    *((_QWORD *)&v140 + 1) = &type metadata for String;
    v141 = &protocol witness table for String;
    *(_QWORD *)&v139 = v96;
    *((_QWORD *)&v139 + 1) = v95;
    swift_bridgeObjectRetain(v95);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x6C65646F6DLL, 0xE500000000000000, ObjectType);
  }
LABEL_55:
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x65566D6574737973, 0xED00006E6F697372, ObjectType, &type metadata for String);
  v98 = (unint64_t *)(v90 + v93[15]);
  v100 = *v98;
  v99 = v98[1];
  if (!*((_QWORD *)&v139 + 1))
  {
    v101 = v135;
LABEL_60:
    *((_QWORD *)&v140 + 1) = &type metadata for String;
    v141 = &protocol witness table for String;
    *(_QWORD *)&v139 = v100;
    *((_QWORD *)&v139 + 1) = v99;
    swift_bridgeObjectRetain(v99);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x65566D6574737973, 0xED00006E6F697372, ObjectType);
    goto LABEL_61;
  }
  if (v139 == __PAIR128__(v99, v100))
  {
    swift_bridgeObjectRelease();
    v101 = v135;
    goto LABEL_61;
  }
  v102 = _stringCompareWithSmolCheck(_:_:expecting:)(v139, *((_QWORD *)&v139 + 1), *v98, v98[1], 0);
  swift_bridgeObjectRelease();
  v101 = v135;
  if ((v102 & 1) == 0)
    goto LABEL_60;
LABEL_61:
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x6449726F646E6576, 0xE800000000000000, ObjectType, &type metadata for Int);
  v103 = *(_QWORD *)(v90 + v93[16]);
  if ((BYTE8(v139) & 1) != 0)
  {
    v104 = v136;
    v105 = v134;
LABEL_64:
    *((_QWORD *)&v140 + 1) = &type metadata for Int;
    v141 = &protocol witness table for Int;
    *(_QWORD *)&v139 = v103;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x6449726F646E6576, 0xE800000000000000, ObjectType);
    goto LABEL_65;
  }
  v104 = v136;
  v105 = v134;
  if ((_QWORD)v139 != v103)
    goto LABEL_64;
LABEL_65:
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x49746375646F7270, 0xE900000000000064, ObjectType, &type metadata for Int);
  v106 = *(_QWORD *)(v90 + v93[17]);
  if ((BYTE8(v139) & 1) != 0 || (_QWORD)v139 != v106)
  {
    *((_QWORD *)&v140 + 1) = &type metadata for Int;
    v141 = &protocol witness table for Int;
    *(_QWORD *)&v139 = v106;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x49746375646F7270, 0xE900000000000064, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x65646F4D74736F6CLL, 0xEE00737574617453, ObjectType, &type metadata for Int);
  v107 = *(unsigned __int8 *)(v90 + v93[18]);
  if ((BYTE8(v139) & 1) != 0)
  {
    if ((_DWORD)v107 == 3)
      goto LABEL_76;
    goto LABEL_74;
  }
  if ((_DWORD)v107 == 3)
  {
    v141 = 0;
    v139 = 0u;
    v140 = 0u;
LABEL_75:
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x65646F4D74736F6CLL, 0xEE00737574617453, ObjectType);
    goto LABEL_76;
  }
  if ((_QWORD)v139 != v107)
  {
LABEL_74:
    *((_QWORD *)&v140 + 1) = &type metadata for Int;
    v141 = &protocol witness table for Int;
    *(_QWORD *)&v139 = v107;
    goto LABEL_75;
  }
LABEL_76:
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x4C79726574746162, 0xEC0000006C657665, ObjectType, &type metadata for Int);
  v108 = *(unsigned __int8 *)(v90 + v93[19]);
  if ((BYTE8(v139) & 1) != 0 || (_QWORD)v139 != v108)
  {
    *((_QWORD *)&v140 + 1) = &type metadata for Int;
    v141 = &protocol witness table for Int;
    *(_QWORD *)&v139 = v108;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x4C79726574746162, 0xEC0000006C657665, ObjectType);
  }
  if (v105 <= 0xE)
  {
    sub_10001BBBC(v101, (unint64_t)v104);
    CKRecordKeyValueSetting.subscript.getter(&v139, 0x6553646572616873, 0xED00003274657263, ObjectType, &type metadata for Data);
    v112 = v139;
    if (*((_QWORD *)&v139 + 1) >> 60 == 15)
    {
      sub_10001BBBC(v101, (unint64_t)v104);
      sub_10001EF3C(v112, *((unint64_t *)&v112 + 1));
      sub_10001EF3C(v101, (unint64_t)v104);
    }
    else
    {
      sub_10001BD08(v101, (unint64_t)v104);
      sub_10001BD08(v112, *((unint64_t *)&v112 + 1));
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v112, *((uint64_t *)&v112 + 1));
      v114 = v113;
      sub_10001EF3C(v101, (unint64_t)v104);
      sub_10001EF3C(v112, *((unint64_t *)&v112 + 1));
      sub_10001EF3C(v112, *((unint64_t *)&v112 + 1));
      if ((v114 & 1) != 0)
      {
LABEL_86:
        sub_10001EF3C(v101, (unint64_t)v104);
        goto LABEL_87;
      }
    }
    *((_QWORD *)&v140 + 1) = &type metadata for Data;
    v141 = &protocol witness table for Data;
    *(_QWORD *)&v139 = v101;
    *((_QWORD *)&v139 + 1) = v104;
    sub_10001BD08(v101, (unint64_t)v104);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x6553646572616873, 0xED00003274657263, ObjectType);
    goto LABEL_86;
  }
  v109 = String._bridgeToObjectiveC()();
  v110 = objc_msgSend(v26, "objectForKeyedSubscript:", v109);
  swift_unknownObjectRelease(v110);

  if (v110)
  {
    v111 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "setObject:forKeyedSubscript:", 0, v111);

  }
LABEL_87:
  v115 = v90 + v93[11];
  v116 = *(_QWORD *)(v115 + 8);
  if (v116 >> 60 != 15)
  {
    v120 = *(_QWORD *)v115;
    sub_10001BBBC(*(_QWORD *)v115, *(_QWORD *)(v115 + 8));
    CKRecordKeyValueSetting.subscript.getter(&v139, 0xD00000000000001BLL, 0x8000000100EC3910, ObjectType, &type metadata for Data);
    v121 = v139;
    if (*((_QWORD *)&v139 + 1) >> 60 == 15)
    {
      sub_10001BBBC(v120, v116);
      sub_10001EF3C(v121, *((unint64_t *)&v121 + 1));
      sub_10001EF3C(v120, v116);
    }
    else
    {
      sub_10001BD08(v120, v116);
      sub_10001BD08(v121, *((unint64_t *)&v121 + 1));
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v121, *((uint64_t *)&v121 + 1));
      v123 = v122;
      sub_10001EF3C(v120, v116);
      sub_10001EF3C(v121, *((unint64_t *)&v121 + 1));
      sub_10001EF3C(v121, *((unint64_t *)&v121 + 1));
      if ((v123 & 1) != 0)
      {
LABEL_94:
        sub_10001EF3C(v120, v116);
        v93 = v137;
        v90 = v138;
        goto LABEL_95;
      }
    }
    *((_QWORD *)&v140 + 1) = &type metadata for Data;
    v141 = &protocol witness table for Data;
    *(_QWORD *)&v139 = v120;
    *((_QWORD *)&v139 + 1) = v116;
    sub_10001BBBC(v120, v116);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0xD00000000000001BLL, 0x8000000100EC3910, ObjectType);
    goto LABEL_94;
  }
  v117 = String._bridgeToObjectiveC()();
  v118 = objc_msgSend(v26, "objectForKeyedSubscript:", v117);
  swift_unknownObjectRelease(v118);

  if (v118)
  {
    v119 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "setObject:forKeyedSubscript:", 0, v119);

  }
LABEL_95:
  CKRecordKeyValueSetting.subscript.getter(&v139, 0x7375655A7369, 0xE600000000000000, ObjectType, &type metadata for Bool);
  v124 = *(unsigned __int8 *)(v90 + v93[20]);
  if (v139 == 2 || ((v124 ^ v139) & 1) != 0)
  {
    *((_QWORD *)&v140 + 1) = &type metadata for Bool;
    v141 = &protocol witness table for Bool;
    LOBYTE(v139) = v124;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x7375655A7369, 0xE600000000000000, ObjectType);
  }
  return swift_unknownObjectRelease(v26);
}

uint64_t sub_1009A5DD0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1009A5E08 + 4 * byte_100E57938[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_1009A5E08()
{
  return 0x696669746E656469;
}

uint64_t sub_1009A5EBC()
{
  return 0x4B65746176697270;
}

uint64_t sub_1009A5EDC()
{
  return 0x654B63696C627570;
}

uint64_t sub_1009A5EFC()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_1009A5F10()
{
  return 0x65566D6574737973;
}

uint64_t sub_1009A5F34()
{
  return 0x6449726F646E6576;
}

uint64_t sub_1009A5F4C()
{
  return 0x49746375646F7270;
}

uint64_t sub_1009A5F68()
{
  return 0x4C79726574746162;
}

uint64_t sub_1009A5F88()
{
  return 0x7375655A7369;
}

uint64_t sub_1009A5F9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1009A5FD4 + 4 * byte_100E57948[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_1009A5FD4()
{
  return 0x696669746E656469;
}

uint64_t sub_1009A6088()
{
  return 0x4B65746176697270;
}

uint64_t sub_1009A60A8()
{
  return 0x654B63696C627570;
}

uint64_t sub_1009A60C8()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_1009A60DC()
{
  return 0x65566D6574737973;
}

uint64_t sub_1009A6100()
{
  return 0x6449726F646E6576;
}

uint64_t sub_1009A6118()
{
  return 0x49746375646F7270;
}

uint64_t sub_1009A6134()
{
  return 0x4C79726574746162;
}

uint64_t sub_1009A6154()
{
  return 0x7375655A7369;
}

uint64_t sub_1009A616C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009A3B04(a1, a2);
}

uint64_t sub_1009A6180(_QWORD *a1)
{
  return sub_1009A3600(a1);
}

uint64_t sub_1009A6194(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204((unint64_t *)&unk_10110EE50, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57A50);
  result = sub_100006204((unint64_t *)&unk_101108060, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57A28);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1009A61F0(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_10110EE60, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57A78);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1009A622C()
{
  return sub_100006204(&qword_10110EE68, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57A94);
}

uint64_t sub_1009A6258(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204((unint64_t *)&unk_10110EE70, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57ABC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1009A6294()
{
  unint64_t result;

  result = qword_10110EE88;
  if (!qword_10110EE88)
  {
    result = swift_getWitnessTable(asc_100E57D6C, &type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_10110EE88);
  }
  return result;
}

uint64_t sub_1009A62D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_1009A5DD0(*a1);
  v5 = v4;
  v6 = sub_1009A5DD0(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1009A6360()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_1009A5DD0(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1009A63C0(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1009A5DD0(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1009A6400()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_1009A5DD0(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1009A645C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1009A736C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1009A6488@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1009A5DD0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1009A64B0()
{
  unsigned __int8 *v0;

  return sub_1009A5F9C(*v0);
}

unint64_t sub_1009A64B8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1009A736C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1009A64DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1009A6FE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009A6504(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1009A6FE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009A652C@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;

  v4 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10081BB64(a1 + *(int *)(v7 + 20), (uint64_t)v6);
  v8 = type metadata accessor for BeaconProductInfoRecord(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    result = sub_100004048((uint64_t)v6, &qword_10110EEB0);
    v10 = 2;
  }
  else
  {
    v10 = v6[*(int *)(v8 + 20)];
    result = sub_1000126B0((uint64_t)v6, type metadata accessor for BeaconProductInfoRecord);
  }
  *a2 = v10;
  return result;
}

uint64_t sub_1009A6610(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  int *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  int *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  char v55;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  int v88;
  int v89;
  BOOL v90;
  int *v91;
  uint64_t *v92;
  uint64_t v93;
  int *v94;
  uint64_t *v95;
  uint64_t v96;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v8);
  v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v93 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v93 - v18;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v20 & 1) == 0)
    goto LABEL_23;
  v96 = v4;
  v21 = a2;
  v22 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  if ((static UUID.== infix(_:_:)((char *)a1 + v22[5], v21 + v22[5]) & 1) == 0)
    goto LABEL_23;
  sub_100C72B64((uint64_t)a1 + v22[6], v21 + v22[6]);
  if ((v23 & 1) == 0)
    goto LABEL_23;
  v24 = v22[7];
  v95 = a1;
  sub_10000F9B8((uint64_t)a1 + v24, (uint64_t)v19, &qword_1010ED860);
  v94 = v22;
  sub_10000F9B8(v21 + v22[7], (uint64_t)v17, &qword_1010ED860);
  v25 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10000F9B8((uint64_t)v19, (uint64_t)v10, &qword_1010ED860);
  v26 = v25;
  sub_10000F9B8((uint64_t)v17, v25, &qword_1010ED860);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v28 = v96;
  if (v27((uint64_t)v10, 1, v96) == 1)
  {
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    sub_100004048((uint64_t)v19, &qword_1010ED860);
    if (v27(v26, 1, v28) == 1)
    {
      sub_100004048((uint64_t)v10, &qword_1010ED860);
      goto LABEL_11;
    }
LABEL_9:
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_10110EE90);
    goto LABEL_23;
  }
  sub_10000F9B8((uint64_t)v10, (uint64_t)v14, &qword_1010ED860);
  if (v27(v26, 1, v28) == 1)
  {
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    sub_100004048((uint64_t)v19, &qword_1010ED860);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v28);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v26, v28);
  v29 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v30 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v28, v29);
  v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  v31(v7, v28);
  sub_100004048((uint64_t)v17, &qword_1010ED860);
  sub_100004048((uint64_t)v19, &qword_1010ED860);
  v31(v14, v28);
  sub_100004048((uint64_t)v10, &qword_1010ED860);
  if ((v30 & 1) == 0)
    goto LABEL_23;
LABEL_11:
  v32 = v21;
  v33 = v94;
  v34 = v95;
  if ((static Date.== infix(_:_:)((char *)v95 + v94[8], v21 + v94[8]) & 1) == 0)
    goto LABEL_23;
  v35 = v33[9];
  v36 = *(uint64_t *)((char *)v34 + v35);
  v37 = *(uint64_t *)((char *)v34 + v35 + 8);
  v38 = (uint64_t *)(v32 + v35);
  v39 = *v38;
  v40 = v38[1];
  sub_10001BBBC(v36, v37);
  sub_10001BBBC(v39, v40);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v36, v37);
  v42 = v41;
  sub_10001BC14(v39, v40);
  sub_10001BC14(v36, v37);
  if ((v42 & 1) == 0)
    goto LABEL_23;
  v43 = v33[10];
  v44 = *(uint64_t *)((char *)v34 + v43);
  v45 = *(uint64_t *)((char *)v34 + v43 + 8);
  v46 = v32;
  v47 = (uint64_t *)(v32 + v43);
  v48 = *v47;
  v49 = v47[1];
  if (v45 >> 60 != 15)
  {
    if (v49 >> 60 == 15)
      goto LABEL_22;
    sub_10001BD08(v44, v45);
    sub_10001BD08(v48, v49);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v44, v45);
    v51 = v50;
    sub_10001EF3C(v48, v49);
    sub_10001EF3C(v44, v45);
    if ((v51 & 1) != 0)
      goto LABEL_18;
LABEL_23:
    v55 = 0;
    return v55 & 1;
  }
  if (v49 >> 60 != 15)
    goto LABEL_22;
LABEL_18:
  v52 = v33[11];
  v53 = v95;
  v44 = *(uint64_t *)((char *)v95 + v52);
  v45 = *(uint64_t *)((char *)v95 + v52 + 8);
  v54 = (uint64_t *)(v46 + v52);
  v48 = *v54;
  v49 = v54[1];
  if (v45 >> 60 == 15)
  {
    if (v49 >> 60 == 15)
      goto LABEL_26;
LABEL_22:
    sub_10001BD08(v44, v45);
    sub_10001BD08(v48, v49);
    sub_10001EF3C(v44, v45);
    sub_10001EF3C(v48, v49);
    goto LABEL_23;
  }
  if (v49 >> 60 == 15)
    goto LABEL_22;
  sub_10001BD08(v44, v45);
  sub_10001BD08(v48, v49);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v44, v45);
  v58 = v57;
  sub_10001EF3C(v48, v49);
  sub_10001EF3C(v44, v45);
  if ((v58 & 1) == 0)
    goto LABEL_23;
LABEL_26:
  v59 = v33[12];
  v60 = *(uint64_t *)((char *)v53 + v59);
  v61 = *(uint64_t *)((char *)v53 + v59 + 8);
  v62 = (uint64_t *)(v46 + v59);
  v63 = *v62;
  v64 = v62[1];
  sub_10001BBBC(v60, v61);
  sub_10001BBBC(v63, v64);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v60, v61);
  v66 = v65;
  sub_10001BC14(v63, v64);
  sub_10001BC14(v60, v61);
  if ((v66 & 1) == 0)
    goto LABEL_23;
  v67 = v33[13];
  v68 = *(uint64_t *)((char *)v53 + v67);
  v69 = *(uint64_t *)((char *)v53 + v67 + 8);
  v70 = (uint64_t *)(v46 + v67);
  v71 = *v70;
  v72 = v70[1];
  sub_10001BBBC(v68, v69);
  sub_10001BBBC(v71, v72);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v68, v69);
  v74 = v73;
  sub_10001BC14(v71, v72);
  sub_10001BC14(v68, v69);
  if ((v74 & 1) == 0)
    goto LABEL_23;
  v75 = v33[14];
  v76 = *(uint64_t *)((char *)v53 + v75);
  v77 = *(uint64_t *)((char *)v53 + v75 + 8);
  v78 = (_QWORD *)(v46 + v75);
  v79 = v78[1];
  if (v76 == *v78 && v77 == v79
    || (v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, *v78, v79, 0), v55 = 0, (v80 & 1) != 0))
  {
    if ((v81 = v33[15],
          v82 = *(uint64_t *)((char *)v53 + v81),
          v83 = *(uint64_t *)((char *)v53 + v81 + 8),
          v84 = (_QWORD *)(v46 + v81),
          v85 = v84[1],
          v82 == *v84)
      && v83 == v85
      || (v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, *v84, v85, 0), v55 = 0, (v86 & 1) != 0))
    {
      if (*(uint64_t *)((char *)v53 + v33[16]) != *(_QWORD *)(v46 + v33[16])
        || *(uint64_t *)((char *)v53 + v33[17]) != *(_QWORD *)(v46 + v33[17]))
      {
        goto LABEL_23;
      }
      v87 = v33[18];
      v88 = *((unsigned __int8 *)v53 + v87);
      v89 = *(unsigned __int8 *)(v46 + v87);
      if (v88 == 3)
      {
        v90 = v89 == 3;
        v91 = v94;
        v92 = v95;
        if (!v90)
          goto LABEL_23;
LABEL_43:
        if (*((unsigned __int8 *)v92 + v91[19]) == *(unsigned __int8 *)(v46 + v91[19]))
        {
          v55 = *((_BYTE *)v95 + v94[20]) ^ *(_BYTE *)(v46 + v94[20]) ^ 1;
          return v55 & 1;
        }
        goto LABEL_23;
      }
      v55 = 0;
      if (v89 != 3)
      {
        v90 = v88 == v89;
        v91 = v94;
        v92 = v95;
        if (v90)
          goto LABEL_43;
      }
    }
  }
  return v55 & 1;
}

uint64_t sub_1009A6D08()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1009A6FA8@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_1009A652C(v1 + ((v3 + 24) & ~v3), a1);
}

unint64_t sub_1009A6FE8()
{
  unint64_t result;

  result = qword_10110EEC0;
  if (!qword_10110EEC0)
  {
    result = swift_getWitnessTable(byte_100E57D1C, &type metadata for OwnedBeaconRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EEC0);
  }
  return result;
}

unint64_t sub_1009A702C()
{
  unint64_t result;

  result = qword_10110EEE0;
  if (!qword_10110EEE0)
  {
    result = swift_getWitnessTable(asc_100E71CDC, &type metadata for BatteryLevel);
    atomic_store(result, (unint64_t *)&qword_10110EEE0);
  }
  return result;
}

unint64_t sub_1009A7070()
{
  unint64_t result;

  result = qword_10110EF08;
  if (!qword_10110EF08)
  {
    result = swift_getWitnessTable(asc_100E71CB4, &type metadata for BatteryLevel);
    atomic_store(result, (unint64_t *)&qword_10110EF08);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1009A7100 + 4 * byte_100E57971[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1009A7134 + 4 * byte_100E5796C[v4]))();
}

uint64_t sub_1009A7134(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1009A713C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1009A7144);
  return result;
}

uint64_t sub_1009A7150(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1009A7158);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1009A715C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1009A7164(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconRecord.CodingKeys()
{
  return &type metadata for OwnedBeaconRecord.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconRecord.OwnedBeaconRecordConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1009A71CC + 4 * byte_100E5797B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1009A7200 + 4 * byte_100E57976[v4]))();
}

uint64_t sub_1009A7200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1009A7208(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1009A7210);
  return result;
}

uint64_t sub_1009A721C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1009A7224);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1009A7228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1009A7230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconRecord.OwnedBeaconRecordConversionError()
{
  return &type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError;
}

unint64_t sub_1009A7250()
{
  unint64_t result;

  result = qword_10110EF10;
  if (!qword_10110EF10)
  {
    result = swift_getWitnessTable(byte_100E57C04, &type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_10110EF10);
  }
  return result;
}

unint64_t sub_1009A7298()
{
  unint64_t result;

  result = qword_10110EF18;
  if (!qword_10110EF18)
  {
    result = swift_getWitnessTable(byte_100E57CF4, &type metadata for OwnedBeaconRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EF18);
  }
  return result;
}

unint64_t sub_1009A72E0()
{
  unint64_t result;

  result = qword_10110EF20;
  if (!qword_10110EF20)
  {
    result = swift_getWitnessTable(aE_41, &type metadata for OwnedBeaconRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EF20);
  }
  return result;
}

unint64_t sub_1009A7328()
{
  unint64_t result;

  result = qword_10110EF28;
  if (!qword_10110EF28)
  {
    result = swift_getWitnessTable(asc_100E57C54, &type metadata for OwnedBeaconRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110EF28);
  }
  return result;
}

unint64_t sub_1009A736C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104B908, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0x10)
    return 16;
  else
    return v3;
}

uint64_t sub_1009A73B4()
{
  uint64_t result;
  uint64_t v1;

  result = Data.init(base64Encoded:options:)(0xD000000000000058, 0x8000000100EEBC20, 0);
  qword_10110EF30 = result;
  qword_10110EF38 = v1;
  return result;
}

uint64_t sub_1009A73F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t result;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD v89[2];
  id v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v4 = type metadata accessor for HashAlgorithm(0);
  v93 = *(_QWORD *)(v4 - 8);
  v94 = v4;
  __chkstk_darwin(v4);
  v92 = (char *)v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B7DF8);
  sub_10001BD08(a1, a2);
  v11 = sub_10001BD08(a1, a2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v97 = v6;
  v98 = v10;
  v96 = v7;
  if (v14)
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v100 = v16;
    *(_DWORD *)v15 = 136315138;
    if (a2 >> 60 == 15)
    {
      v17 = 0;
      v18 = 0xE000000000000000;
    }
    else
    {
      v17 = Data.hexString.getter(a1, a2);
      v18 = v19;
    }
    v102 = sub_100016940(v17, v18, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    sub_10001EF3C(a1, a2);
    sub_10001EF3C(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, " E1 encryption key from server: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v10 = v98;
  }
  else
  {
    sub_10001EF3C(a1, a2);
    sub_10001EF3C(a1, a2);

  }
  v20 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v20)
  {
    v21 = v20;
    v99 = a1;
    v22 = a2;
    if (a2 >> 60 == 15)
    {
      if (qword_1010EA0E8 != -1)
        swift_once(&qword_1010EA0E8, sub_1009A73B4);
      v22 = qword_10110EF38;
      if ((unint64_t)qword_10110EF38 >> 60 == 15)
      {
        if (qword_1010EA0F8 != -1)
          swift_once(&qword_1010EA0F8, sub_1009B4438);
        v23 = sub_10001A9E8(v10, (uint64_t)qword_1011B7AE0);
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.error.getter(v24);
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, " Invalid server public key.", v26, 2u);
          swift_slowDealloc(v26, -1, -1);
        }

        return 0;
      }
      v99 = qword_10110EF30;
      sub_10001BBBC(qword_10110EF30, qword_10110EF38);
    }
    sub_10001BD08(a1, a2);
    v27 = objc_msgSend(v21, "aa_primaryAppleAccount");
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(v27, "aa_personID");
      if (v29)
      {
        v30 = v29;
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v33 = v32;

        if (qword_1010EA0F8 != -1)
          swift_once(&qword_1010EA0F8, sub_1009B4438);
        v34 = sub_10001A9E8(v10, (uint64_t)qword_1011B7AE0);
        swift_bridgeObjectRetain_n(v33, 2);
        v89[1] = v34;
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.debug.getter(v36);
        v38 = os_log_type_enabled(v36, v37);
        v91 = v28;
        if (v38)
        {
          v39 = (uint8_t *)swift_slowAlloc(12, -1);
          v40 = swift_slowAlloc(32, -1);
          v90 = v21;
          v41 = v40;
          v100 = v40;
          *(_DWORD *)v39 = 136315138;
          swift_bridgeObjectRetain(v33);
          v102 = sub_100016940(v31, v33, &v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v39 + 4, v39 + 12);
          swift_bridgeObjectRelease_n(v33, 3);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "DSID: %s", v39, 0xCu);
          swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
          v42 = v41;
          v21 = v90;
          swift_slowDealloc(v42, -1, -1);
          swift_slowDealloc(v39, -1, -1);

        }
        else
        {

          v43 = swift_bridgeObjectRelease_n(v33, 2);
        }
        v68 = v99;
        static String.Encoding.utf8.getter(v43);
        v69 = String.data(using:allowLossyConversion:)(v9, 0, v31, v33);
        v71 = v70;
        (*(void (**)(char *, uint64_t))(v96 + 8))(v9, v97);
        if (v71 >> 60 == 15)
        {
          swift_bridgeObjectRetain(v33);
          v73 = Logger.logObject.getter(v72);
          v74 = static os_log_type_t.error.getter(v73);
          if (!os_log_type_enabled(v73, v74))
          {
            swift_bridgeObjectRelease_n(v33, 2);

            sub_10001BC14(v68, v22);
            return 0;
          }
          v75 = swift_slowAlloc(22, -1);
          v76 = swift_slowAlloc(32, -1);
          v90 = v21;
          v77 = v76;
          v100 = v76;
          *(_DWORD *)v75 = 141558275;
          v102 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v75 + 4, v75 + 12);
          *(_WORD *)(v75 + 12) = 2081;
          v60 = v22;
          swift_bridgeObjectRetain(v33);
          v102 = sub_100016940(v31, v33, &v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v75 + 14, v75 + 22);
          swift_bridgeObjectRelease_n(v33, 3);
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "Invalid DSID %{private,mask.hash}s", (uint8_t *)v75, 0x16u);
          swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v77, -1, -1);
          swift_slowDealloc(v75, -1, -1);

          v61 = v68;
          goto LABEL_39;
        }
        swift_bridgeObjectRelease();
        v63 = v92;
        v62 = v93;
        v64 = v94;
        (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v92, enum case for HashAlgorithm.sha256(_:), v94);
        v65 = Data.hash(algorithm:)(v63, v69, v71);
        v67 = v78;

        sub_10001EF3C(v69, v71);
        goto LABEL_41;
      }

    }
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v44 = sub_10001A9E8(v10, (uint64_t)qword_1011B7AE0);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to obtain DSID from account. Using device serial number instead to support account signed out.", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v49 = *(_QWORD *)(v95 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    v48 = *(_QWORD *)(v95 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    swift_bridgeObjectRetain(v48);
    static String.Encoding.utf8.getter(v50);
    v51 = String.data(using:allowLossyConversion:)(v9, 0, v49, v48);
    v53 = v52;
    (*(void (**)(char *, uint64_t))(v96 + 8))(v9, v97);
    if (v53 >> 60 == 15)
    {
      swift_bridgeObjectRetain(v48);
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.error.getter(v55);
      if (!os_log_type_enabled(v55, v56))
      {
        sub_10001BC14(v99, v22);

        swift_bridgeObjectRelease_n(v48, 2);
        return 0;
      }
      v57 = swift_slowAlloc(22, -1);
      v58 = v21;
      v59 = swift_slowAlloc(32, -1);
      v100 = v59;
      *(_DWORD *)v57 = 141558275;
      v102 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v57 + 4, v57 + 12);
      *(_WORD *)(v57 + 12) = 2081;
      v60 = v22;
      swift_bridgeObjectRetain(v48);
      v102 = sub_100016940(v49, v48, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v57 + 14, v57 + 22);
      swift_bridgeObjectRelease_n(v48, 3);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v57, -1, -1);

      v61 = v99;
LABEL_39:
      sub_10001BC14(v61, v60);
      return 0;
    }
    swift_bridgeObjectRelease();
    v63 = v92;
    v62 = v93;
    v64 = v94;
    (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v92, enum case for HashAlgorithm.sha256(_:), v94);
    v65 = Data.hash(algorithm:)(v63, v51, v53);
    v67 = v66;
    sub_10001EF3C(v51, v53);
    v68 = v99;
LABEL_41:
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
    sub_10001BBBC(v68, v22);
    v79 = sub_1002FB894(v68, v22);
    v81 = v80;
    sub_10001BBBC(v79, v80);
    v82 = objc_autoreleasePoolPush();
    sub_1007E5D00(&v100);
    objc_autoreleasePoolPop(v82);
    sub_10001BC14(v79, v81);
    sub_1002F7040(v100, v101);
    sub_10001BC14(v65, v67);
    sub_10001BC14(v68, v22);

    sub_10001BC14(v79, v81);
    v84 = v100;
    v85 = v101;
    v86 = v95;
    v87 = *(_QWORD *)(v95 + 40);
    v88 = *(_QWORD *)(v95 + 48);
    *(_QWORD *)(v95 + 40) = v100;
    *(_QWORD *)(v86 + 48) = v85;
    sub_10001BBBC(v84, v85);
    sub_10001EF3C(v87, v88);
    return v84;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000040, 0x8000000100EEBBD0, "searchpartyd/PencilPairingInfo.swift", 36, 2, 21, 0);
  __break(1u);
  return result;
}

uint64_t sub_1009A8094@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *log;
  uint64_t v58;
  uint8_t *buf;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD v110[38];

  v3 = v1[6];
  if (v3 >> 60 == 15)
    goto LABEL_10;
  v4 = v1;
  v5 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
  v6 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8);
  if (v6 >> 60 == 15
    || (v7 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v7 >> 60 == 15)
    || (v8 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8),
        v8 >> 60 == 15)
    || (v9 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts),
        v10 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8),
        v10 >> 60 == 15)
    || (v11 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8), v11 >> 60 == 15)
    || (v12 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8), v12 >> 60 == 15)
    || (v13 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation + 8),
        v13 >> 60 == 15)
    || *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature + 8) >> 60 == 15)
  {
LABEL_10:
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7AE0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing pairing info to generate PencilPairingCheckData.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    sub_1009A8D1C(&v73);
  }
  else
  {
    v64 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature + 8);
    v65 = v11;
    v20 = *v5;
    v62 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    v61 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
    v70 = *v9;
    v71 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
    v72 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
    v69 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation);
    v63 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature);
    v67 = v4[5];
    v21 = v12;
    sub_10001BD08(v67, v3);
    v58 = v20;
    sub_10001BD08(v20, v6);
    sub_10001BD08(v62, v7);
    sub_10001BD08(v61, v8);
    sub_10001BD08(v70, v10);
    sub_10001BD08(v71, v65);
    v68 = v21;
    sub_10001BD08(v72, v21);
    sub_10001BD08(v69, v13);
    sub_10001BD08(v63, v64);
    v66 = v13;
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B7AE0);
    sub_10001BD08(v67, v3);
    sub_10001BD08(v70, v10);
    sub_10001BD08(v71, v65);
    sub_10001BD08(v72, v21);
    sub_10001BD08(v69, v13);
    sub_10001BD08(v67, v3);
    sub_10001BD08(v70, v10);
    sub_10001BD08(v71, v65);
    sub_10001BD08(v72, v21);
    v23 = sub_10001BD08(v69, v13);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    log = v24;
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(52, -1);
      v56 = swift_slowAlloc(160, -1);
      *(_QWORD *)&v73 = v56;
      *(_DWORD *)v26 = 136316162;
      v109 = v67;
      v110[0] = v3;
      sub_10001BBBC(v67, v3);
      v27 = String.init<A>(describing:)(&v109, &type metadata for EncryptedBlobE1);
      v109 = sub_100016940(v27, v28, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v67, v3);
      sub_10001EF3C(v67, v3);
      *(_WORD *)(v26 + 12) = 2080;
      sub_10001BBBC(v70, v10);
      v51 = Data.description.getter(v70, v10);
      v30 = v29;
      sub_10001EF3C(v70, v10);
      v109 = sub_100016940(v51, v30, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v70, v10);
      sub_10001EF3C(v70, v10);
      buf = (uint8_t *)v26;
      *(_WORD *)(v26 + 22) = 2080;
      v55 = v26 + 24;
      sub_10001BBBC(v71, v65);
      v52 = Data.description.getter(v71, v65);
      v32 = v31;
      sub_10001EF3C(v71, v65);
      v109 = sub_100016940(v52, v32, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v55, buf + 32);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v71, v65);
      sub_10001EF3C(v71, v65);
      *((_WORD *)buf + 16) = 2080;
      sub_10001BBBC(v72, v68);
      v53 = Data.description.getter(v72, v68);
      v34 = v33;
      sub_10001EF3C(v72, v68);
      v109 = sub_100016940(v53, v34, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, buf + 34, buf + 42);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v72, v68);
      sub_10001EF3C(v72, v68);
      *((_WORD *)buf + 21) = 2080;
      sub_10001BBBC(v69, v66);
      v54 = Data.description.getter(v69, v66);
      v36 = v35;
      sub_10001EF3C(v69, v66);
      v109 = sub_100016940(v54, v36, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, buf + 44, buf + 52);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v69, v66);
      sub_10001EF3C(v69, v66);
      _os_log_impl((void *)&_mh_execute_header, log, v25, "encryptedBlobE1: %s, accessoryCerts: %s, csr: %s seedK1: %s, accessoryAttestation: %s", buf, 0x34u);
      swift_arrayDestroy(v56, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(buf, -1, -1);

    }
    else
    {
      sub_10001EF3C(v67, v3);
      sub_10001EF3C(v67, v3);
      sub_10001EF3C(v70, v10);
      sub_10001EF3C(v70, v10);
      sub_10001EF3C(v71, v65);
      sub_10001EF3C(v71, v65);
      sub_10001EF3C(v72, v68);
      sub_10001EF3C(v72, v68);
      sub_10001EF3C(v69, v66);
      sub_10001EF3C(v69, v66);

    }
    v37 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    v60 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    v38 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    v39 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    v40 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    v41 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    v42 = v4[2];
    v43 = v4[3];
    v44 = v4[11];
    v45 = v4[12];
    v47 = v4[13];
    v46 = v4[14];
    v73 = xmmword_100E22B20;
    v74 = v37;
    v75 = v60;
    v76 = v38;
    v77 = v39;
    v78 = v40;
    v79 = v41;
    v80 = v58;
    v81 = v6;
    v82 = v62;
    v83 = v7;
    v84 = v61;
    v85 = v8;
    v86 = 1;
    v87 = 0;
    v88 = _swiftEmptyArrayStorage;
    v89 = 0;
    v90 = v72;
    v91 = v68;
    v92 = v70;
    v93 = v10;
    v94 = v71;
    v95 = v65;
    v96 = v69;
    v97 = v66;
    v98 = v63;
    v99 = v64;
    v100 = xmmword_100E22B20;
    v48 = v42;
    v101 = v42;
    v102 = v43;
    v49 = v43;
    v103 = v67;
    v104 = v3;
    v105 = v44;
    v106 = v45;
    v50 = v45;
    v107 = v47;
    v108 = v46;
    SharingCircleWildAdvertisementKey.init(key:)(&v73);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v60);
    sub_10001BBBC(v48, v49);
    swift_bridgeObjectRetain(v50);
    sub_10001BD08(v47, v46);
  }
  sub_100005CF0((uint64_t)&v73, (uint64_t)&v109, &qword_10110EF48);
  return sub_100005CF0((uint64_t)&v109, a1, &qword_10110EF48);
}

uint64_t sub_1009A89A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE v61[248];

  v4 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation + 8);
  if (v4 >> 60 == 15
    || (v5 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8), v5 >> 60 == 15)
    || (v6 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v6 >> 60 == 15)
    || (v7 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8),
        v7 >> 60 == 15)
    || (v8 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8),
        v8 >> 60 == 15)
    || (v9 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8),
        v9 >> 60 == 15)
    || (v10 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8), v10 >> 60 == 15)
    || (v11 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8), v11 >> 60 == 15))
  {
    v12 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_1011B7DF0, "Missing info to generate AirPodsPairingAckData!", 47, 2, _swiftEmptyArrayStorage);
    sub_1009A8CEC(&v33);
  }
  else
  {
    v17 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
    v18 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    v19 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
    v20 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
    v22 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
    v23 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
    v24 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation);
    v21 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
    v32 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    v14 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    v15 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    v30 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    v31 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    v25 = v2[3];
    v26 = v2[2];
    v16 = v2[11];
    v29 = v2[13];
    v27 = v2[12];
    v28 = v2[14];
    *(_QWORD *)&v33 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *((_QWORD *)&v33 + 1) = v32;
    v34 = v14;
    v35 = v30;
    v36 = v15;
    v37 = v31;
    v38 = v17;
    v39 = v5;
    v40 = v18;
    v41 = v6;
    v42 = v20;
    v43 = v7;
    v44 = v22;
    v45 = v9;
    v46 = v23;
    v47 = v10;
    v48 = v19;
    v49 = v8;
    v50 = v24;
    v51 = v4;
    v52 = xmmword_100E22B20;
    v53 = v26;
    v54 = v25;
    v55 = v21;
    v56 = v11;
    v57 = v16;
    v58 = v27;
    v59 = v29;
    v60 = v28;
    SharingCircleWildAdvertisementKey.init(key:)(&v33);
    sub_10001BD08(v24, v4);
    sub_10001BD08(v17, v5);
    sub_10001BD08(v18, v6);
    sub_10001BD08(v20, v7);
    sub_10001BD08(v19, v8);
    sub_10001BD08(v22, v9);
    sub_10001BD08(v23, v10);
    sub_10001BD08(v21, v11);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    sub_10001BBBC(v26, v25);
    swift_bridgeObjectRetain(v27);
    sub_10001BD08(v29, v28);
  }
  sub_100005CF0((uint64_t)&v33, (uint64_t)v61, &qword_10110EF40);
  return sub_100005CF0((uint64_t)v61, a2, &qword_10110EF40);
}

double sub_1009A8CEC(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_100E2C1E0;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  return result;
}

double sub_1009A8D1C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

_QWORD *sub_1009A8D4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = v2;
  v21 = a1;
  v22 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[2] = 0xD000000000000025;
  v3[3] = 0x8000000100E57DD0;
  sub_10001F6FC();
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v14);
  v23 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v16, v17, v4, v15);
  v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000043, 0x8000000100EEBD90, v9, v6, v13, 0);
  v3[7] = 0;
  v3[8] = 0;
  v3[4] = v21;
  v3[5] = v22;
  v3[6] = v18;
  return v3;
}

uint64_t sub_1009A8F40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v2 = sub_10001A9A8(&qword_101106EF8);
  v68 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v67 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_10110F0E0);
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  __chkstk_darwin(v4);
  v72 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_10110F0E8);
  v76 = *(_QWORD *)(v6 - 8);
  v77 = v6;
  __chkstk_darwin(v6);
  v73 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v66 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v70 = v10;
  v71 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v63 - v11;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B75D0);
  v78 = a1;
  v14 = sub_10005972C(a1, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v80 = v18;
    *(_DWORD *)v17 = 136315138;
    v64 = v17 + 4;
    v19 = v2;
    v20 = v8;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = v21;
    v8 = v20;
    v2 = v19;
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v23, v22);
    v79 = sub_100016940(v24, v25, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v64, v17 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Handling freshly paired beacon: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
  }

  v65 = v8;
  v26 = v69;
  v27 = *(_QWORD *)(v69 + 32);
  v28 = sub_10001A9A8(&qword_1011003C0);
  v29 = type metadata accessor for UUID(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = (v31 + 32) & ~v31;
  v33 = swift_allocObject(v28, v32 + *(_QWORD *)(v30 + 72), v31 | 7);
  *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
  v34 = v33 + v32;
  v35 = v78;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v34, v78 + *(int *)(v8 + 20), v29);
  v36 = swift_allocObject(&unk_1010A0A80, 32, 7);
  *(_QWORD *)(v36 + 16) = v27;
  *(_QWORD *)(v36 + 24) = v33;
  swift_retain();
  swift_bridgeObjectRetain(v33);
  v37 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
  v38 = sub_1000193A4(&qword_101106F00, (uint64_t *)&unk_101106EA8, (const char *)&protocol conformance descriptor for Future<A, B>);
  v39 = v67;
  Deferred.init(createPublisher:)(sub_1009AAFA8, v36, v37, v38);
  v40 = sub_1000193A4((unint64_t *)&unk_101106F08, &qword_101106EF8, (const char *)&protocol conformance descriptor for Deferred<A>);
  v41 = Publisher.eraseToAnyPublisher()(v2, v40);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v39, v2);
  swift_bridgeObjectRelease();
  v80 = v41;
  v42 = v71;
  sub_10005972C(v35, v71, type metadata accessor for OwnedBeaconRecord);
  v43 = *(unsigned __int8 *)(v66 + 80);
  v44 = (v43 + 24) & ~v43;
  v45 = v70;
  v68 = v43 | 7;
  v46 = swift_allocObject(&unk_1010A0AA8, v44 + v70, v43 | 7);
  *(_QWORD *)(v46 + 16) = v26;
  sub_100082514(v42, v46 + v44);
  v47 = swift_retain();
  v48 = static Subscribers.Demand.unlimited.getter(v47);
  v49 = sub_10001A9A8(&qword_10110F0F0);
  v50 = sub_10001A9A8(&qword_101106EC8);
  v51 = sub_1000193A4(&qword_10110F0F8, &qword_10110F0F0, byte_100E48F98);
  v52 = sub_1000193A4(&qword_101106ED8, &qword_101106EC8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v53 = v72;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v48, sub_1009AAFB4, v46, v49, v50, v51, v52);
  swift_release();
  swift_release();
  sub_10005972C(v78, v42, type metadata accessor for OwnedBeaconRecord);
  v54 = (v43 + 16) & ~v43;
  v55 = swift_allocObject(&unk_1010A0AD0, v54 + v45, v68);
  sub_100082514(v42, v55 + v54);
  v56 = sub_1000193A4(&qword_10110F100, &qword_10110F0E0, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v57 = v73;
  v58 = v75;
  Publisher.map<A>(_:)(sub_1009AB29C, v55, v75, v65, v56);
  swift_release();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v53, v58);
  v59 = sub_1000193A4(&qword_10110F108, &qword_10110F0E8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v60 = v77;
  v61 = Publisher.eraseToAnyPublisher()(v77, v59);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v57, v60);
  return v61;
}

uint64_t sub_1009A9594@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v6 = sub_10001A9A8(&qword_101106EF8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = sub_10001A9A8(&qword_1011003C0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v11, v15 + *(_QWORD *)(v13 + 72), v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16 + v15, a2 + *(int *)(v17 + 20), v12);
  v18 = swift_allocObject(&unk_1010A0AF8, 32, 7);
  *(_QWORD *)(v18 + 16) = v10;
  *(_QWORD *)(v18 + 24) = v16;
  swift_retain();
  swift_bridgeObjectRetain(v16);
  v19 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
  v20 = sub_1000193A4(&qword_101106F00, (uint64_t *)&unk_101106EA8, (const char *)&protocol conformance descriptor for Future<A, B>);
  Deferred.init(createPublisher:)(sub_1009AB2E8, v18, v19, v20);
  v21 = sub_1000193A4((unint64_t *)&unk_101106F08, &qword_101106EF8, (const char *)&protocol conformance descriptor for Deferred<A>);
  v22 = Publisher.eraseToAnyPublisher()(v6, v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  result = swift_bridgeObjectRelease();
  *a3 = v22;
  return result;
}

uint64_t sub_1009A974C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_10110F090);
  v35 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_10110F098);
  v9 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  v37 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_10110F0A0);
  v13 = *(_QWORD *)(v12 - 8);
  v38 = v12;
  v39 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(id *)(*(_QWORD *)(v0 + 40) + 24);
  swift_retain();
  v16 = sub_10001A9A8(&qword_1010F5470);
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  v18 = sub_1000193A4(&qword_1010F5478, &qword_1010F5470, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_1009A9AD0, 0, v16, v17, v18);
  swift_release();
  v19 = swift_retain();
  v20 = static Subscribers.Demand.unlimited.getter(v19);
  v21 = sub_10001A9A8(&qword_10110F0A8);
  v22 = sub_1000193A4(&qword_10110F0B0, &qword_10110F090, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v23 = sub_1000193A4(&qword_10110F0B8, &qword_10110F0A8, byte_100E48F98);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v20, sub_1009AAF84, v1, v5, v21, v22, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
  v40 = *(id *)(v1 + 48);
  v24 = v40;
  v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v4, 1, 1, v25);
  v26 = sub_10001F6FC();
  v27 = sub_1000193A4(&qword_10110F0C0, &qword_10110F098, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v28 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v29 = v24;
  v30 = v36;
  Publisher.subscribe<A>(on:options:)(&v40, v4, v36, v26, v27, v28);
  sub_100004048((uint64_t)v4, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v30);
  v31 = sub_1000193A4(&qword_10110F0C8, &qword_10110F0A0, (const char *)&protocol conformance descriptor for Publishers.SubscribeOn<A, B>);
  v32 = v38;
  v33 = Publisher<>.sink(receiveValue:)(sub_1009A9D10, 0, v38, v31);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v32);
  *(_QWORD *)(v1 + 56) = v33;
  return swift_release();
}

uint64_t sub_1009A9AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for PairingEvent(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    v8 = type metadata accessor for OwnedBeaconRecord(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 1, 1, v8);
    return sub_1000126B0((uint64_t)v6, type metadata accessor for PairingEvent);
  }
  else
  {
    sub_100082514((uint64_t)v6, a2);
    v10 = type metadata accessor for OwnedBeaconRecord(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 0, 1, v10);
  }
}

uint64_t sub_1009A9BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[6];

  type metadata accessor for Transaction(0);
  v6[2] = a2;
  v6[3] = a1;
  v4 = sub_10001A9A8(&qword_10110F0A8);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.SeparationMonitoringEnrollmentService.handleFreshlyPairedOrUpgradedBeacon", 103, 2, sub_1009AAF8C, v6, v4);
}

uint64_t sub_1009A9C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  sub_1009A8F40(a3);
  swift_retain();
  v4 = sub_10001A9A8(&qword_10110F0D0);
  v5 = sub_1000193A4(&qword_10110F0D8, &qword_10110F0D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, 0, 0, j___s10FindMyBase11TransactionC7captureyyF, a1, 0, 0, 0, 0, v4, v5);
  swift_release();
  return swift_release();
}

void sub_1009A9D10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = type metadata accessor for OwnedBeaconRecord(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v33 - v6;
  v8 = sub_10001A9A8(&qword_10110F088);
  __chkstk_darwin(v8);
  v10 = (void **)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1009AAF3C(a1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = *v10;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B75D0);
    v13 = v11;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v33 = (uint64_t)v13;
      v34 = v17;
      *(_DWORD *)v16 = 136315138;
      type metadata accessor for SPSeparationMonitoringError(0);
      v19 = v18;
      v20 = v13;
      v21 = String.init<A>(describing:)(&v33, v19);
      v33 = sub_100016940(v21, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v16 + 4, v16 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to automatically enroll beacon due to: %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    sub_100082514((uint64_t)v10, (uint64_t)v7);
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B75D0);
    v24 = sub_10005972C((uint64_t)v7, (uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v34 = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = type metadata accessor for UUID(0);
      v30 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
      v33 = sub_100016940(v31, v32, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully enrolled beacon %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    }
    sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
  }
}

void sub_1009AA148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(_BYTE *, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v55[4];
  int v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  void (*v63)(_QWORD, _QWORD);
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v4);
  v66 = &v55[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = type metadata accessor for OwnedBeaconRecord(0);
  v6 = *(_QWORD *)(v67 - 8);
  v7 = __chkstk_darwin(v67);
  v62 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v7);
  v60 = &v55[-v10];
  v61 = v11;
  __chkstk_darwin(v9);
  v13 = &v55[-v12];
  v14 = type metadata accessor for SystemVersionNumber(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v64 = &v55[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v16);
  v20 = &v55[-v19];
  __chkstk_darwin(v18);
  v22 = &v55[-v21];
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B75D0);
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
  v68 = a1;
  v25(v22, a1, v14);
  v26 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v25)(v20, a2, v14);
  v65 = v24;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    v30 = swift_slowAlloc(22, -1);
    v57 = swift_slowAlloc(64, -1);
    v72 = v57;
    *(_DWORD *)v30 = 136315394;
    v31 = sub_100006204(&qword_1010F9FB8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v58 = v6;
    v32 = v31;
    v56 = v29;
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v14, v31);
    v70 = sub_100016940(v33, v34, &v72);
    v59 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease();
    v35 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
    v35(v22, v14);
    *(_WORD *)(v30 + 12) = 2080;
    v36 = v32;
    v6 = v58;
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v14, v36);
    v70 = sub_100016940(v37, v38, &v72);
    v13 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease();
    v63 = (void (*)(_QWORD, _QWORD))v35;
    v35(v20, v14);
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v56, "Handling local beacon migration from: %s to: %s", (uint8_t *)v30, 0x16u);
    v39 = v57;
    swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    v40 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
    v40(v22, v14);
    v63 = (void (*)(_QWORD, _QWORD))v40;
    v40(v20, v14);
  }

  v41 = *(_QWORD *)(v69 + 32);
  v42 = sub_10080D208();
  v43 = v66;
  if (v42[2])
  {
    sub_10005972C((uint64_t)v42 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v66, type metadata accessor for OwnedBeaconRecord);
    v44 = 0;
  }
  else
  {
    v44 = 1;
  }
  v45 = v67;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v43, v44, 1, v67);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v43, 1, v45) != 1)
  {
    sub_100082514((uint64_t)v43, (uint64_t)v13);
    v50 = sub_1004AA8E4((uint64_t)v13, v41);
    sub_100A077E4(8u, (uint64_t)v50);
    swift_bridgeObjectRelease();
    v51 = (uint64_t *)&v13[*(int *)(v45 + 56)];
    v53 = *v51;
    v52 = v51[1];
    swift_bridgeObjectRetain(v52);
    sub_100089E0C(v53, v52);
    __asm { BR              X10 }
  }
  v46 = sub_100004048((uint64_t)v43, (uint64_t *)&unk_1010F47C0);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.error.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Local beacon not found, can't migrate", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

}

uint64_t sub_1009AAA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B75D0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Will attempt to automatically enroll local beacon after migration", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_1009A8F40(a2);
  v9 = sub_10001A9A8(&qword_10110F078);
  v10 = sub_1000193A4(&qword_10110F080, &qword_10110F078, byte_100E48F98);
  v11 = Publisher<>.sink(receiveValue:)(sub_1009AAB80, 0, v9, v10);
  swift_release();
  *(_QWORD *)(a1 + 64) = v11;
  return swift_release();
}

void sub_1009AAB80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = sub_10001A9A8(&qword_10110F088);
  __chkstk_darwin(v2);
  v4 = (void **)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1009AAF3C(a1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 1)
  {
    v5 = *v4;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B75D0);
    v7 = v5;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v22 = (uint64_t)v7;
      v23 = v11;
      *(_DWORD *)v10 = 136315138;
      type metadata accessor for SPSeparationMonitoringError(0);
      v13 = v12;
      v14 = v7;
      v15 = String.init<A>(describing:)(&v22, v13);
      v22 = sub_100016940(v15, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v10 + 4, v10 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to automatically enroll beacon due to: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B75D0);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Separation Monitoring auto-enrollment completed succesfully for local beacon.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    sub_100004048((uint64_t)v4, &qword_10110F088);
  }
}

uint64_t sub_1009AAE5C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for SeparationMonitoringEnrollmentService()
{
  return objc_opt_self(_TtC12searchpartyd37SeparationMonitoringEnrollmentService);
}

uint64_t sub_1009AAEC8()
{
  return sub_1009A974C();
}

void sub_1009AAEE8(uint64_t a1, uint64_t a2)
{
  sub_1009AA148(a1, a2);
}

uint64_t sub_1009AAF0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_1009AAA28(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1009AAF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_10110F088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009AAF84(uint64_t a1)
{
  uint64_t v1;

  return sub_1009A9BC4(a1, v1);
}

uint64_t sub_1009AAF8C(uint64_t a1)
{
  uint64_t v1;

  return sub_1009A9C44(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1009AAFA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1007731B4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1009AAFB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_1009A9594(*(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1009AB004()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1009AB29C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_10005972C(v1 + ((v3 + 16) & ~v3), a1, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_1009AB2E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1007738E4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1009AB2F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t *v23;

  v3 = v1;
  v23 = a1;
  v4 = type metadata accessor for SharingCircleSecret(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_10110F130);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)(v3 + *(int *)(v4 + 32));
  v11 = *v10;
  v12 = v10[1];
  v13 = (uint64_t *)(v3 + *(int *)(v4 + 28));
  v15 = *v13;
  v14 = (void *)v13[1];
  sub_10001BBBC(v11, v12);
  swift_bridgeObjectRetain(v14);
  sub_100DFE068(v11, v12, v15, v14);
  if (v2)
  {
    swift_errorRelease(v2);
    v16 = type metadata accessor for SharingCircleSecretValue(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
  }
  else
  {
    v16 = type metadata accessor for SharingCircleSecretValue(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 0, 1, v16);
  }
  sub_10005972C(v3, (uint64_t)v6, type metadata accessor for SharingCircleSecret);
  type metadata accessor for SharingCircleSecretValue(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v9, 1, v16) == 1)
  {
    v17 = (uint64_t *)&v6[*(int *)(v4 + 32)];
    v18 = *v17;
    v19 = v17[1];
    sub_10001BBBC(*v17, v19);
    sub_1000126B0((uint64_t)v6, type metadata accessor for SharingCircleSecret);
    v20 = v23;
    *v23 = v18;
    v20[1] = v19;
    swift_storeEnumTagMultiPayload(v20, v16, 0);
    return sub_100004048((uint64_t)v9, &qword_10110F130);
  }
  else
  {
    sub_1000126B0((uint64_t)v6, type metadata accessor for SharingCircleSecret);
    return sub_1000126EC((uint64_t)v9, (uint64_t)v23, type metadata accessor for SharingCircleSecretValue);
  }
}

void sub_1009AB508(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  id v28;
  NSString v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  _BYTE *v36;
  NSString v37;
  id v38;
  NSString v39;
  id v40;
  char *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int *v48;
  void (*v49)(char *, char *, uint64_t);
  _QWORD *v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  void (*v57)(char *, uint64_t);
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  id v73;

  v69 = a2;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v61 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v70 = (char *)&v61 - v15;
  v16 = CKRecord.recordType.getter(v14);
  if (v16 == 0xD000000000000013 && v17 == 0x8000000100E57EC0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0xD000000000000013, 0x8000000100E57EC0, 0);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      v35 = sub_1009AD304();
      v26 = swift_allocError(&type metadata for SharingCircleSecret.ConversionError, v35, 0, 0);
      *v36 = 0;
      goto LABEL_13;
    }
  }
  v68 = v13;
  v19 = objc_msgSend(a1, "recordID");
  v20 = objc_msgSend(v19, "recordName");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  UUID.init(uuidString:)(v21, v23);
  swift_bridgeObjectRelease();
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v24(v8, 1, v9) == 1)
  {
    sub_100004048((uint64_t)v8, &qword_1010ED860);
    v25 = sub_1009AD304();
    v26 = swift_allocError(&type metadata for SharingCircleSecret.ConversionError, v25, 0, 0);
    *v27 = 1;
LABEL_13:
    swift_willThrow(v26);

    return;
  }
  v67 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v67(v70, v8, v9);
  v28 = objc_msgSend(a1, "encryptedValues");
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v28, "objectForKeyedSubscript:", v29);

  if (!v30
    || (v73 = v30,
        v31 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        (swift_dynamicCast(&v71, &v73, v31, &type metadata for String, 6) & 1) == 0))
  {
LABEL_11:
    v32 = sub_1009AD304();
    v33 = swift_allocError(&type metadata for SharingCircleSecret.ConversionError, v32, 0, 0);
    *v34 = 2;
    swift_willThrow(v33);
    swift_unknownObjectRelease(v28);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v70, v9);
    return;
  }
  UUID.init(uuidString:)(v71, v72);
  swift_bridgeObjectRelease();
  if (v24(v6, 1, v9) == 1)
  {
    sub_100004048((uint64_t)v6, &qword_1010ED860);
    goto LABEL_11;
  }
  v67(v68, v6, v9);
  v37 = String._bridgeToObjectiveC()();
  v38 = objc_msgSend(v28, "objectForKeyedSubscript:", v37);

  if (v38 && (v73 = v38, (swift_dynamicCast(&v71, &v73, v31, &type metadata for Data, 6) & 1) != 0))
  {
    v65 = v71;
    v66 = v72;
    v39 = String._bridgeToObjectiveC()();
    v40 = objc_msgSend(v28, "objectForKeyedSubscript:", v39);

    v41 = v68;
    if (v40)
    {
      v73 = v40;
      if ((swift_dynamicCast(&v71, &v73, v31, &type metadata for String, 6) & 1) != 0)
      {
        v63 = v72;
        v64 = v71;
        v62 = objc_autoreleasePoolPush();
        v42 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
        objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v42);
        objc_msgSend(v42, "finishEncoding");
        v43 = objc_msgSend(v42, "encodedData");
        v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v46 = v45;

        objc_autoreleasePoolPop(v62);
        swift_unknownObjectRelease(v28);

        v47 = v69;
        *v69 = v44;
        v47[1] = v46;
        v48 = (int *)type metadata accessor for SharingCircleSecret(0);
        v49 = v67;
        v67((char *)v47 + v48[5], v70, v9);
        v49((char *)v47 + v48[6], v41, v9);
        v50 = (uint64_t *)((char *)v47 + v48[8]);
        v51 = v66;
        *v50 = v65;
        v50[1] = v51;
        v52 = (uint64_t *)((char *)v47 + v48[7]);
        v53 = v63;
        *v52 = v64;
        v52[1] = v53;
        return;
      }
    }
    v58 = sub_1009AD304();
    v59 = swift_allocError(&type metadata for SharingCircleSecret.ConversionError, v58, 0, 0);
    *v60 = 5;
    swift_willThrow(v59);
    sub_10001BC14(v65, v66);
    swift_unknownObjectRelease(v28);

    v57 = *(void (**)(char *, uint64_t))(v10 + 8);
    v57(v41, v9);
  }
  else
  {
    v54 = sub_1009AD304();
    v55 = swift_allocError(&type metadata for SharingCircleSecret.ConversionError, v54, 0, 0);
    *v56 = 4;
    swift_willThrow(v55);
    swift_unknownObjectRelease(v28);

    v57 = *(void (**)(char *, uint64_t))(v10 + 8);
    v57(v68, v9);
  }
  v57(v70, v9);
}

uint64_t sub_1009ABB50@<X0>(void (*a1)(char *, uint64_t)@<X0>, void (*a2)(_QWORD, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  uint64_t (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  _OWORD *v55;
  void (*v56)(_QWORD, _QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v58 = a3;
  v56 = a2;
  v51 = a1;
  v57 = type metadata accessor for SharingCircleSecret(0);
  __chkstk_darwin(v57);
  v55 = (_OWORD *)((char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v53 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - v8;
  v49 = type metadata accessor for SharingCircleSecretValue(0);
  v10 = __chkstk_darwin(v49);
  v50 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v59 = (uint64_t)&v48 - v12;
  v13 = type metadata accessor for P256.Signing.PrivateKey(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v48 - v18;
  v54 = (char *)&v48 - v18;
  P256.Signing.PrivateKey.init(compactRepresentable:)(1);
  v20 = *(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v5 + 16);
  v48 = v5;
  v20(v9, (void (*)(_QWORD, _QWORD))v51, v4);
  v21 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 16);
  v22 = v19;
  v23 = v13;
  v52 = v13;
  v24 = v21(v17, v22, v13);
  v25 = P256.Signing.PrivateKey.rawRepresentation.getter(v24);
  v27 = v26;
  v51 = *(void (**)(char *, uint64_t))(v14 + 8);
  v51(v17, v23);
  v28 = type metadata accessor for KeyDropJoinToken(0);
  v29 = v59;
  v30 = (uint64_t *)(v59 + *(int *)(v28 + 20));
  *v30 = v25;
  v30[1] = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v29, v9, v4);
  v31 = swift_storeEnumTagMultiPayload(v29, v49, 4);
  UUID.init()(v31);
  v32 = v53;
  v20(v53, v56, v4);
  v33 = v50;
  sub_10005972C(v29, v50, type metadata accessor for SharingCircleSecretValue);
  v34 = (uint64_t)v55;
  *v55 = xmmword_100E22FC0;
  v35 = v57;
  v20((char *)(v34 + *(int *)(v57 + 20)), (void (*)(_QWORD, _QWORD))v9, v4);
  v36 = v35;
  v37 = v32;
  v20((char *)(v34 + *(int *)(v35 + 24)), (void (*)(_QWORD, _QWORD))v32, v4);
  sub_100DFDE64();
  v38 = (_QWORD *)(v34 + *(int *)(v35 + 32));
  *v38 = v39;
  v38[1] = v40;
  sub_100DFDD20();
  v42 = v41;
  v44 = v43;
  sub_1000126B0(v33, type metadata accessor for SharingCircleSecretValue);
  v45 = *(void (**)(char *, uint64_t))(v48 + 8);
  v45(v37, v4);
  v45(v9, v4);
  v46 = (_QWORD *)(v34 + *(int *)(v36 + 28));
  *v46 = v42;
  v46[1] = v44;
  sub_1000126EC(v34, v58, type metadata accessor for SharingCircleSecret);
  sub_1000126B0(v59, type metadata accessor for SharingCircleSecretValue);
  return ((uint64_t (*)(char *, uint64_t))v51)(v54, v52);
}

uint64_t sub_1009ABE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009ABEB8(a1, 1u, a2);
}

uint64_t sub_1009ABEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009ABEB8(a1, 2u, a2);
}

uint64_t sub_1009ABEB8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t, uint64_t);
  int *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, uint64_t);
  _QWORD *v30;
  _BYTE v32[12];
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v33 = a2;
  v38 = a3;
  v37 = a1;
  v36 = type metadata accessor for SharingCircleSecret(0);
  __chkstk_darwin(v36);
  v4 = &v32[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v32[-v9];
  v11 = type metadata accessor for SharingCircleSecretValue(0);
  v12 = __chkstk_darwin(v11);
  v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v16 = (uint64_t *)&v32[-v15];
  sub_1003F0FD8();
  v18 = v39;
  v17 = v40;
  *v16 = v39;
  v16[1] = v17;
  v34 = v17;
  v35 = v18;
  swift_storeEnumTagMultiPayload(v16, v11, v33);
  v19 = sub_10001BBBC(v18, v17);
  UUID.init()(v19);
  v20 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v41 + 16);
  v20(v8, v37, v5);
  sub_10005972C((uint64_t)v16, (uint64_t)v14, type metadata accessor for SharingCircleSecretValue);
  *v4 = xmmword_100E22FC0;
  v21 = (int *)v36;
  v20((_BYTE *)v4 + *(int *)(v36 + 20), (uint64_t)v10, v5);
  v20((_BYTE *)v4 + v21[6], (uint64_t)v8, v5);
  sub_100DFDE64();
  v22 = (_QWORD *)((char *)v4 + v21[8]);
  *v22 = v23;
  v22[1] = v24;
  sub_100DFDD20();
  v26 = v25;
  v28 = v27;
  sub_1000126B0((uint64_t)v14, type metadata accessor for SharingCircleSecretValue);
  v29 = *(void (**)(_BYTE *, uint64_t))(v41 + 8);
  v29(v8, v5);
  v29(v10, v5);
  v30 = (_QWORD *)((char *)v4 + v21[7]);
  *v30 = v26;
  v30[1] = v28;
  sub_1000126EC((uint64_t)v4, v38, type metadata accessor for SharingCircleSecret);
  sub_10001BC14(v35, v34);
  return sub_1000126B0((uint64_t)v16, type metadata accessor for SharingCircleSecretValue);
}

uint64_t sub_1009AC10C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t result;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v31 = a1;
  v32 = a2;
  v3 = (int *)type metadata accessor for SharingCircleSecret(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v31 - v10;
  v12 = type metadata accessor for SharingCircleSecretValue(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (_OWORD *)((char *)&v31 - v16);
  result = sub_1007E95C4(v33);
  if (!v2)
  {
    v35 = v34;
    *v17 = v34;
    swift_storeEnumTagMultiPayload(v17, v12, 3);
    v19 = sub_100059DE8((uint64_t)&v35);
    UUID.init()(v19);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
    v20(v9, v31, v6);
    sub_10005972C((uint64_t)v17, (uint64_t)v15, type metadata accessor for SharingCircleSecretValue);
    *(_OWORD *)v5 = xmmword_100E22FC0;
    v20(&v5[v3[5]], (uint64_t)v11, v6);
    v20(&v5[v3[6]], (uint64_t)v9, v6);
    sub_100DFDE64();
    v21 = &v5[v3[8]];
    *(_QWORD *)v21 = v22;
    *((_QWORD *)v21 + 1) = v23;
    sub_100DFDD20();
    v25 = v24;
    v31 = v26;
    sub_1000126B0((uint64_t)v15, type metadata accessor for SharingCircleSecretValue);
    v27 = *(void (**)(char *, uint64_t))(v36 + 8);
    v27(v9, v6);
    v27(v11, v6);
    v28 = &v5[v3[7]];
    v30 = v31;
    v29 = v32;
    *(_QWORD *)v28 = v25;
    *((_QWORD *)v28 + 1) = v30;
    sub_1000126EC((uint64_t)v5, v29, type metadata accessor for SharingCircleSecret);
    sub_10087BE2C(v33);
    return sub_1000126B0((uint64_t)v17, type metadata accessor for SharingCircleSecretValue);
  }
  return result;
}

uint64_t sub_1009AC360(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1009AC398 + 4 * byte_100E57E30[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_1009AC398()
{
  return 0x696669746E656469;
}

uint64_t sub_1009AC3B4(uint64_t a1)
{
  return a1 + 7;
}

uint64_t sub_1009AC3CC()
{
  return 0x7954746572636573;
}

uint64_t sub_1009AC3EC()
{
  return 0x6144746572636573;
}

Swift::Int sub_1009AC408()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[9];

  v1 = v0;
  Hasher.init(_seed:)(v14);
  v2 = *v0;
  v3 = v1[1];
  sub_10001BBBC(v2, v3);
  Data.hash(into:)(v14, v2, v3);
  sub_10001BC14(v2, v3);
  v4 = type metadata accessor for SharingCircleSecret(0);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v14, v5, v6);
  dispatch thunk of Hashable.hash(into:)(v14, v5, v6);
  v7 = (uint64_t *)((char *)v1 + *(int *)(v4 + 28));
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(v14, v8, v9);
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)((char *)v1 + *(int *)(v4 + 32));
  v11 = *v10;
  v12 = v10[1];
  sub_10001BBBC(*v10, v12);
  Data.hash(into:)(v14, v11, v12);
  sub_10001BC14(v11, v12);
  return Hasher._finalize()();
}

uint64_t sub_1009AC548()
{
  unsigned __int8 *v0;

  return sub_1009AC360(*v0);
}

uint64_t sub_1009AC550@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1009ADD84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1009AC574(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1009AD348();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1009AC59C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1009AD348();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1009AC5CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  v4 = v2;
  v6 = *v2;
  v7 = v4[1];
  sub_10001BBBC(v6, v7);
  Data.hash(into:)(a1, v6, v7);
  sub_10001BC14(v6, v7);
  v8 = type metadata accessor for UUID(0);
  v9 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
  v10 = (uint64_t *)((char *)v4 + *(int *)(a2 + 28));
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease();
  v13 = (uint64_t *)((char *)v4 + *(int *)(a2 + 32));
  v14 = *v13;
  v15 = v13[1];
  sub_10001BBBC(*v13, v15);
  Data.hash(into:)(a1, v14, v15);
  return sub_10001BC14(v14, v15);
}

Swift::Int sub_1009AC6E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[9];

  v4 = v2;
  Hasher.init(_seed:)(v16);
  v5 = *v2;
  v6 = v4[1];
  sub_10001BBBC(v5, v6);
  Data.hash(into:)(v16, v5, v6);
  sub_10001BC14(v5, v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v16, v7, v8);
  dispatch thunk of Hashable.hash(into:)(v16, v7, v8);
  v9 = (uint64_t *)((char *)v4 + *(int *)(a2 + 28));
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(v16, v10, v11);
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)((char *)v4 + *(int *)(a2 + 32));
  v13 = *v12;
  v14 = v12[1];
  sub_10001BBBC(*v12, v14);
  Data.hash(into:)(v16, v13, v14);
  sub_10001BC14(v13, v14);
  return Hasher._finalize()();
}

uint64_t sub_1009AC81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7AC8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7AC8);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x8000000100E57EC0, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1009AC8EC(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;

  v2 = v1;
  v3 = *a1;
  v4 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v4);
  v6 = static os_log_type_t.debug.getter(ObjectType);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v7 = qword_1011B7D40;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = v3;
  v11 = objc_msgSend(v10, "description");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v14;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Updating SharingCircleSecret record: %@", 39, 2, v9);
  swift_bridgeObjectRelease();
  v15 = type metadata accessor for SharingCircleSecret(0);
  v26 = &type metadata for String;
  v27 = &protocol witness table for String;
  v24 = UUID.uuidString.getter(v15);
  v25 = v16;
  CKRecordKeyValueSetting.subscript.setter(&v24, 0xD000000000000017, 0x8000000100ECBB00, ObjectType);
  v17 = (uint64_t *)(v2 + *(int *)(v15 + 32));
  v18 = *v17;
  v19 = v17[1];
  v26 = &type metadata for Data;
  v27 = &protocol witness table for Data;
  v24 = v18;
  v25 = v19;
  sub_10001BBBC(v18, v19);
  CKRecordKeyValueSetting.subscript.setter(&v24, 0x6144746572636573, 0xEA00000000006174, ObjectType);
  v20 = (uint64_t *)(v2 + *(int *)(v15 + 28));
  v22 = *v20;
  v21 = v20[1];
  v26 = &type metadata for String;
  v27 = &protocol witness table for String;
  v24 = v22;
  v25 = v21;
  swift_bridgeObjectRetain(v21);
  CKRecordKeyValueSetting.subscript.setter(&v24, 0x7954746572636573, 0xEA00000000006570, ObjectType);
  return swift_unknownObjectRelease(v4);
}

uint64_t sub_1009ACB14(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int *v22;
  __int128 v23;
  char v24;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110F148);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1009AD348();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharingCircleSecret.CodingKeys, &type metadata for SharingCircleSecret.CodingKeys, v11, v9, v10);
  v23 = *v3;
  v24 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v22 = (int *)type metadata accessor for SharingCircleSecret(0);
    v13 = (char *)v3 + v22[5];
    LOBYTE(v23) = 1;
    v14 = type metadata accessor for UUID(0);
    v15 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v23, v5, v14, v15);
    v16 = (char *)v3 + v22[6];
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v23, v5, v14, v15);
    v17 = (uint64_t *)((char *)v3 + v22[7]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v23) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v23, v5);
    v23 = *(__int128 *)((char *)v3 + v22[8]);
    v24 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v5, &type metadata for Data, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1009ACD44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(uint64_t, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  __int128 v46;
  char v47;

  v39 = a2;
  v44 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v44 - 8);
  v3 = __chkstk_darwin(v44);
  v40 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v36 - v5;
  v43 = sub_10001A9A8(&qword_10110F138);
  v7 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for SharingCircleSecret(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10001AA44(a1, v13);
  v15 = sub_1009AD348();
  v42 = v9;
  v16 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharingCircleSecret.CodingKeys, &type metadata for SharingCircleSecret.CodingKeys, v15, v13, v14);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v38 = v7;
  v45 = a1;
  v17 = v12;
  v18 = v41;
  v19 = v44;
  v47 = 0;
  v20 = sub_100036994();
  v21 = v42;
  v22 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, &type metadata for Data, &v47, v43, &type metadata for Data, v20);
  v36 = v20;
  v23 = (uint64_t)v17;
  *v17 = v46;
  LOBYTE(v46) = 1;
  v24 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v25 = v6;
  v26 = v6;
  v27 = v19;
  v37 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v19, &v46, v22, v19, v24);
  v28 = v25;
  v29 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 32);
  v29(v23 + v10[5], v28, v19);
  LOBYTE(v46) = 2;
  v30 = v40;
  v31 = v37;
  v37 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v27, &v46, v22, v27, v31);
  v29(v23 + v10[6], v30, v27);
  LOBYTE(v46) = 3;
  v32 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v22);
  v33 = (uint64_t *)(v23 + v10[7]);
  *v33 = v32;
  v33[1] = v34;
  v47 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, &type metadata for Data, &v47, v22, &type metadata for Data, v36);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v22);
  *(_OWORD *)(v23 + v10[8]) = v46;
  sub_10005972C(v23, v39, type metadata accessor for SharingCircleSecret);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
  return sub_1000126B0(v23, type metadata accessor for SharingCircleSecret);
}

uint64_t sub_1009AD180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1010EA0F0 != -1)
    swift_once(&qword_1010EA0F0, sub_1009AC81C);
  v0 = type metadata accessor for URL(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7AC8);
  v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1009AD208@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1009ACD44(a1, a2);
}

uint64_t sub_1009AD21C(_QWORD *a1)
{
  return sub_1009ACB14(a1);
}

uint64_t sub_1009AD230(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204((unint64_t *)&unk_10110F110, type metadata accessor for SharingCircleSecret, (uint64_t)&unk_100E57E74);
  result = sub_100006204(&qword_101108138, type metadata accessor for SharingCircleSecret, (uint64_t)&unk_100E57E4C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for SharingCircleSecret(uint64_t a1)
{
  uint64_t result;

  result = qword_10110F1A8;
  if (!qword_10110F1A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SharingCircleSecret);
  return result;
}

uint64_t sub_1009AD2C8(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_101108140, type metadata accessor for SharingCircleSecret, (uint64_t)&unk_100E57E9C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1009AD304()
{
  unint64_t result;

  result = qword_10110F120;
  if (!qword_10110F120)
  {
    result = swift_getWitnessTable(a9_17, &type metadata for SharingCircleSecret.ConversionError);
    atomic_store(result, (unint64_t *)&qword_10110F120);
  }
  return result;
}

unint64_t sub_1009AD348()
{
  unint64_t result;

  result = qword_10110F140;
  if (!qword_10110F140)
  {
    result = swift_getWitnessTable(aQ_35, &type metadata for SharingCircleSecret.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110F140);
  }
  return result;
}

void sub_1009AD38C(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) != 0)
  {
    v5 = (int *)type metadata accessor for SharingCircleSecret(0);
    if ((static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) != 0
      && (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) != 0)
    {
      v6 = v5[7];
      v7 = *(uint64_t *)((char *)a1 + v6);
      v8 = *(uint64_t *)((char *)a1 + v6 + 8);
      v9 = (_QWORD *)(a2 + v6);
      v10 = v9[1];
      v11 = v7 == *v9 && v8 == v10;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0) & 1) != 0)
        _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(uint64_t *)((char *)a1 + v5[8]), *(uint64_t *)((char *)a1 + v5[8] + 8));
    }
  }
}

uint64_t storeEnumTagSinglePayload for SharingCircleSecret.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1009AD49C + 4 * byte_100E57E3A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1009AD4D0 + 4 * byte_100E57E35[v4]))();
}

uint64_t sub_1009AD4D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1009AD4D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1009AD4E0);
  return result;
}

uint64_t sub_1009AD4EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1009AD4F4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1009AD4F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1009AD500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleSecret.CodingKeys()
{
  return &type metadata for SharingCircleSecret.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SharingCircleSecret.ConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1009AD568 + 4 * byte_100E57E44[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1009AD59C + 4 * byte_100E57E3F[v4]))();
}

uint64_t sub_1009AD59C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1009AD5A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1009AD5ACLL);
  return result;
}

uint64_t sub_1009AD5B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1009AD5C0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1009AD5C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1009AD5CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleSecret.ConversionError()
{
  return &type metadata for SharingCircleSecret.ConversionError;
}

uint64_t *sub_1009AD5E8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    v14 = a3[7];
    v15 = a3[8];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (uint64_t *)((char *)a1 + v15);
    v20 = (char *)a2 + v15;
    v21 = *(uint64_t *)((char *)a2 + v15);
    v22 = *((_QWORD *)v20 + 1);
    swift_bridgeObjectRetain(v18);
    sub_10001BBBC(v21, v22);
    *v19 = v21;
    v19[1] = v22;
  }
  return a1;
}

uint64_t sub_1009AD6E0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  swift_bridgeObjectRelease();
  return sub_10001BC14(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t *sub_1009AD770(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  v13 = a3[7];
  v14 = a3[8];
  v15 = (uint64_t *)((char *)a1 + v13);
  v16 = (uint64_t *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (uint64_t *)((char *)a1 + v14);
  v19 = *(uint64_t *)((char *)a2 + v14);
  v20 = *(uint64_t *)((char *)a2 + v14 + 8);
  swift_bridgeObjectRetain(v17);
  sub_10001BBBC(v19, v20);
  *v18 = v19;
  v18[1] = v20;
  return a1;
}

uint64_t *sub_1009AD83C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  v15 = a3[7];
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  v19 = a3[8];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = *v21;
  v23 = v21[1];
  sub_10001BBBC(*v21, v23);
  v24 = *v20;
  v25 = v20[1];
  *v20 = v22;
  v20[1] = v23;
  sub_10001BC14(v24, v25);
  return a1;
}

char *sub_1009AD930(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  return a1;
}

uint64_t *sub_1009AD9D0(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  v13 = a3[7];
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)&a2[v13];
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = *(uint64_t *)((char *)a1 + v18);
  v20 = *(uint64_t *)((char *)a1 + v18 + 8);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)&a2[v18];
  sub_10001BC14(v19, v20);
  return a1;
}

uint64_t sub_1009ADA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1009ADAA8);
}

uint64_t sub_1009ADAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1009ADB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1009ADB38);
}

uint64_t sub_1009ADB38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1009ADBB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v4 = &unk_100E57F28;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = &unk_100E57F40;
    v8 = &unk_100E57F28;
    swift_initStructMetadata(a1, 256, 5, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1009ADC38()
{
  return sub_100006204(&qword_10110F1F0, type metadata accessor for SharingCircleSecret, (uint64_t)&unk_100E57F98);
}

unint64_t sub_1009ADC68()
{
  unint64_t result;

  result = qword_10110F1F8;
  if (!qword_10110F1F8)
  {
    result = swift_getWitnessTable(byte_100E58000, &type metadata for SharingCircleSecret.ConversionError);
    atomic_store(result, (unint64_t *)&qword_10110F1F8);
  }
  return result;
}

unint64_t sub_1009ADCB0()
{
  unint64_t result;

  result = qword_10110F200;
  if (!qword_10110F200)
  {
    result = swift_getWitnessTable(aI_41, &type metadata for SharingCircleSecret.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110F200);
  }
  return result;
}

unint64_t sub_1009ADCF8()
{
  unint64_t result;

  result = qword_10110F208;
  if (!qword_10110F208)
  {
    result = swift_getWitnessTable(byte_100E58028, &type metadata for SharingCircleSecret.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110F208);
  }
  return result;
}

unint64_t sub_1009ADD40()
{
  unint64_t result;

  result = qword_10110F210[0];
  if (!qword_10110F210[0])
  {
    result = swift_getWitnessTable("ь$", &type metadata for SharingCircleSecret.CodingKeys);
    atomic_store(result, qword_10110F210);
  }
  return result;
}

uint64_t sub_1009ADD84(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100ECBB00)
  {
    v7 = 0x8000000100ECBB00;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100ECBB00, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x7954746572636573 && a2 == 0xEA00000000006570)
  {
    v8 = 0xEA00000000006570;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954746572636573, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x6144746572636573 && a2 == 0xEA00000000006174)
  {
    swift_bridgeObjectRelease(0xEA00000000006174);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6144746572636573, 0xEA00000000006174, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1009ADFAC(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = &unk_100E581C0;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 5, v2, a1 + 224);
}

void sub_1009AE00C()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  v1 = *(void (**)(uint64_t))(v0 + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v3 = swift_retain();
    v1(v3);
    sub_10001D8A8((uint64_t)v1, v2);
  }
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B71C8);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "All location fetch subscriptions terminated.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

uint64_t sub_1009AE0FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[6];

  v2 = *(_QWORD *)(v1 + 56);
  v4[3] = a1;
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1009AE4F8, v4, v2, &type metadata for () + 1, &type metadata for () + 1);
}

void sub_1009AE148(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  _OWORD v33[6];
  char v34;
  uint64_t v35;

  v5 = *a2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  XPCSession.identifier.getter(v8);
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  v11 = swift_beginAccess(a1 + 80, &v31, 33, 0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v5, &type metadata for LocationFetchContext, "session context ", 0, v11);
  v13 = sub_10001AA68(&qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
  v15 = type metadata accessor for Dictionary(0, v6, TupleTypeMetadata2, v13, v14);
  Dictionary.subscript.setter(v33, v10, v15);
  swift_endAccess(&v31);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B71C8);
  v17 = swift_retain_n(a2, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v33[0] = v30;
    *(_DWORD *)v20 = 141558275;
    v31 = 1752392040;
    v35 = v2;
    v21 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v29 = v20 + 14;
    XPCSession.identifier.getter(v21);
    v22 = sub_10001AA68((unint64_t *)&qword_1010EDAE0, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v6, v22);
    v24 = v7;
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v6);
    v31 = sub_100016940(v23, v26, (uint64_t *)v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v29, v20 + 22);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Removed location fetch subscription %{private,mask.hash}s.", (uint8_t *)v20, 0x16u);
    v27 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
}

uint64_t sub_1009AE44C()
{
  uint64_t v0;

  sub_10001D8A8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1009AE480()
{
  uint64_t v0;

  v0 = sub_100C6BEB0();
  sub_10001D8A8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1009AE4D0()
{
  uint64_t v0;

  v0 = sub_1009AE480();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for LocationFetchServiceConnections(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LocationFetchServiceConnections);
}

void sub_1009AE4F8()
{
  uint64_t v0;

  sub_1009AE148(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1009AE510(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2[11] = a1;
  v2[12] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[14] = v4;
  v2[15] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v2[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[17] = v6;
  v2[18] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v2[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[20] = v8;
  v2[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v2[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[23] = v10;
  v2[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EC638);
  v2[25] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[26] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[27] = swift_task_alloc(v13);
  v2[28] = swift_task_alloc(v13);
  v14 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v2[29] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[30] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[31] = swift_task_alloc(v16);
  v2[32] = swift_task_alloc(v16);
  v2[33] = swift_task_alloc(v16);
  v17 = sub_10001A9A8(&qword_1010EC450);
  v2[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Peripheral.ConnectionOptions(0);
  v2[35] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v2[36] = v19;
  v2[37] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010EC458);
  v2[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1010EC460);
  v2[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ContinuousClock.Instant(0);
  v2[40] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v2[41] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[42] = swift_task_alloc(v24);
  v2[43] = swift_task_alloc(v24);
  v2[44] = swift_task_alloc(v24);
  v2[45] = swift_task_alloc(v24);
  v25 = sub_10001A9A8(&qword_1010EC448);
  v2[46] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v2[47] = v26;
  v2[48] = swift_task_alloc((*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ContinuousClock(0);
  v2[49] = v27;
  v28 = *(_QWORD *)(v27 - 8);
  v2[50] = v28;
  v2[51] = swift_task_alloc((*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009AE7A8, 0, 0);
}

uint64_t sub_1009AE7A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  ContinuousClock.init()(a1);
  v2 = type metadata accessor for Service(0);
  v1[52] = v2;
  v3 = Identifier.init(stringLiteral:)("180A", 4, 2, v2);
  v4 = ContinuousClock.now.getter(v3);
  static Task<>.checkCancellation()(v4);
  v5 = v1[38];
  v6 = v1[39];
  v8 = v1[36];
  v7 = v1[37];
  v10 = v1[34];
  v9 = v1[35];
  v11 = type metadata accessor for ConnectUseCase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  v12 = sub_10001A9A8(&qword_1010EC480);
  v13 = swift_allocObject(v12, ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ 2 * *(_QWORD *)(v8 + 72), *(unsigned __int8 *)(v8 + 80) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B10;
  v14 = static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  static Peripheral.ConnectionOptions.shouldSkipUnpair.getter(v14);
  v1[6] = v13;
  v15 = sub_100006204(&qword_1010EC488, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions, (uint64_t)&protocol conformance descriptor for Peripheral.ConnectionOptions);
  v16 = sub_10001A9A8(&qword_1010EC490);
  v17 = sub_1000193A4(&qword_1010EC498, &qword_1010EC490, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 6, v16, v17, v9, v15);
  v18 = type metadata accessor for PeripheralPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
  Peripheral.Options.init(connectionOptions:pairingInfo:)(v7, v10);
  v19 = type metadata accessor for Peripheral.Options(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 0, 1, v19);
  v20 = type metadata accessor for Peripheral(0);
  v1[53] = v20;
  v21 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v1[54] = v21;
  v22 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect(useCase:options:)[1]);
  v1[55] = v22;
  *v22 = v1;
  v22[1] = sub_1009AEA7C;
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v1[39], v1[38], v20, v21);
}

uint64_t sub_1009AEA7C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v6;

  v2 = (*v1)[55];
  v3 = *v1;
  v3[56] = v0;
  swift_task_dealloc(v2);
  v4 = v3[39];
  sub_100004048(v3[38], &qword_1010EC458);
  sub_100004048(v4, &qword_1010EC460);
  if (v0)
    return swift_task_switch(sub_1009AEBB0, 0, 0);
  v6 = (uint64_t **)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
  v3[57] = (uint64_t)v6;
  *v6 = v3;
  v6[1] = (uint64_t *)sub_1009AEB44;
  return dispatch thunk of PeripheralProtocol.subscript.getter(v3[48], v3[53], v3[54]);
}

uint64_t sub_1009AEB44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 456);
  *(_QWORD *)(v3 + 464) = a1;
  *(_QWORD *)(v3 + 472) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009AEFA4;
  else
    v5 = sub_1009AEC50;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1009AEBB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  (*(void (**)(_QWORD, _QWORD))(v0[41] + 8))(v0[45], v0[40]);
  v0[87] = v0[56];
  v1 = type metadata accessor for Peripheral(0);
  v2 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[88] = v3;
  *v3 = v0;
  v3[1] = sub_1009B05FC;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v1, v2);
}

uint64_t sub_1009AEC50(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v2 = v1[59];
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v1[41] + 8))(v1[45], v1[40]);
    swift_release();
    v1[87] = v2;
    v3 = type metadata accessor for Peripheral(0);
    v4 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[88] = v5;
    *v5 = v1;
    v5[1] = sub_1009B05FC;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v3, v4);
  }
  else
  {
    v7 = v1[30];
    sub_10009A380(0, 3, 0);
    v8 = type metadata accessor for Characteristic(0);
    Identifier.init(stringLiteral:)("2A50", 4, 2, v8);
    v10 = _swiftEmptyArrayStorage[2];
    v9 = _swiftEmptyArrayStorage[3];
    if (v10 >= v9 >> 1)
      sub_10009A380(v9 > 1, v10 + 1, 1);
    v1[60] = _swiftEmptyArrayStorage;
    v11 = v1[33];
    v12 = v1[29];
    _swiftEmptyArrayStorage[2] = v10 + 1;
    v13 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14 = *(_QWORD *)(v7 + 72);
    v15 = (char *)_swiftEmptyArrayStorage + v13 + v14 * v10;
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    v16(v15, v11, v12);
    Identifier.init(stringLiteral:)("2A25", 4, 2, v8);
    v18 = _swiftEmptyArrayStorage[2];
    v17 = _swiftEmptyArrayStorage[3];
    if (v18 >= v17 >> 1)
      sub_10009A380(v17 > 1, v18 + 1, 1);
    v1[60] = _swiftEmptyArrayStorage;
    v19 = v1[33];
    v20 = v1[29];
    _swiftEmptyArrayStorage[2] = v18 + 1;
    v16((char *)_swiftEmptyArrayStorage + v13 + v14 * v18, v19, v20);
    Identifier.init(stringLiteral:)("2A26", 4, 2, v8);
    v22 = _swiftEmptyArrayStorage[2];
    v21 = _swiftEmptyArrayStorage[3];
    if (v22 >= v21 >> 1)
      sub_10009A380(v21 > 1, v22 + 1, 1);
    v1[60] = _swiftEmptyArrayStorage;
    v23 = v1[33];
    v24 = v1[29];
    _swiftEmptyArrayStorage[2] = v22 + 1;
    v16((char *)_swiftEmptyArrayStorage + v13 + v14 * v22, v23, v24);
    v25 = sub_100006204(&qword_1010EC4A8, (uint64_t (*)(uint64_t))&type metadata accessor for Service, (uint64_t)&protocol conformance descriptor for Service);
    v1[61] = v25;
    v26 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.discover(characteristicIdentifiers:)[1]);
    v1[62] = v26;
    *v26 = v1;
    v26[1] = sub_1009AF044;
    return dispatch thunk of ServiceProtocol.discover(characteristicIdentifiers:)(_swiftEmptyArrayStorage, v1[52], v25);
  }
}

uint64_t sub_1009AEFA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  (*(void (**)(_QWORD, _QWORD))(v0[41] + 8))(v0[45], v0[40]);
  v0[87] = v0[59];
  v1 = type metadata accessor for Peripheral(0);
  v2 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[88] = v3;
  *v3 = v0;
  v3[1] = sub_1009B05FC;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v1, v2);
}

uint64_t sub_1009AF044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_release();
    v3 = sub_1009AF1FC;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    v3 = sub_1009AF0D0;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1009AF0D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v2 = v1[63];
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v1[41] + 8))(v1[45], v1[40]);
    swift_release();
    v1[87] = v2;
    v3 = type metadata accessor for Peripheral(0);
    v4 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[88] = v5;
    *v5 = v1;
    v5[1] = sub_1009B05FC;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v3, v4);
  }
  else
  {
    v7 = type metadata accessor for Characteristic(0);
    v1[64] = v7;
    Identifier.init(stringLiteral:)("2A50", 4, 2, v7);
    v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[65] = v8;
    *v8 = v1;
    v8[1] = sub_1009AF2AC;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[32], v1[52], v1[61]);
  }
}

uint64_t sub_1009AF1FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[45];
  v2 = v0[40];
  v3 = v0[41];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[87] = v0[63];
  v4 = type metadata accessor for Peripheral(0);
  v5 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[88] = v6;
  *v6 = v0;
  v6[1] = sub_1009B05FC;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_1009AF2AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 520);
  v5 = *(_QWORD **)v2;
  v5[66] = a1;
  v5[67] = v1;
  swift_task_dealloc(v4);
  v6 = v5[32];
  v7 = v5[29];
  v8 = *(void (**)(uint64_t, uint64_t))(v5[30] + 8);
  if (v1)
  {
    v8(v6, v7);
    return swift_task_switch(sub_1009AF47C, 0, 0);
  }
  else
  {
    v5[68] = v8;
    v8(v6, v7);
    v10 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v5[69] = v10;
    v11 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
    v5[70] = v11;
    *v11 = v5;
    v11[1] = sub_1009AF39C;
    return dispatch thunk of CharacteristicProtocol.read()(v5[28], v5[64], v10);
  }
}

uint64_t sub_1009AF39C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  v3 = *(_QWORD **)v1;
  v3[71] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_1009AF5A8, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[72] = v5;
  v6 = sub_1000193A4((unint64_t *)&unk_101116020, &qword_1010EC638, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  v3[73] = v6;
  *v5 = v3;
  v5[1] = sub_1009AF52C;
  return AsyncSequence.first()(v3 + 4, v3[25], v6);
}

uint64_t sub_1009AF47C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[45];
  v2 = v0[40];
  v3 = v0[41];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[87] = v0[67];
  v4 = type metadata accessor for Peripheral(0);
  v5 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[88] = v6;
  *v6 = v0;
  v6[1] = sub_1009B05FC;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_1009AF52C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void *v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 576);
  *(_QWORD *)(*(_QWORD *)v1 + 592) = v0;
  swift_task_dealloc(v3);
  v4 = v2[28];
  v5 = v2[25];
  v6 = *(void (**)(uint64_t, uint64_t))(v2[26] + 8);
  if (v0)
  {
    v6(v4, v5);
    v7 = sub_1009AFA00;
  }
  else
  {
    v2[75] = v6;
    v6(v4, v5);
    v7 = sub_1009AF658;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1009AF5A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[45];
  v2 = v0[40];
  v3 = v0[41];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[87] = v0[71];
  v4 = type metadata accessor for Peripheral(0);
  v5 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[88] = v6;
  *v6 = v0;
  v6[1] = sub_1009B05FC;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_1009AF658(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1[4];
  v3 = v1[5];
  v1[76] = v2;
  v1[77] = v3;
  if (v3 >> 60 == 15)
  {
    v4 = 0;
    v5 = 0x8000000000000;
  }
  else
  {
    sub_10001BBBC(v2, v3);
    sub_10001BBBC(v2, v3);
    sub_100355688(v2, v3);
    if (v7 >> 60 == 15)
    {
      v4 = 0;
      v5 = 0x8000000000000;
    }
    else
    {
      v8 = v6;
      v9 = v7;
      if (qword_1010E9AA8 != -1)
        swift_once(&qword_1010E9AA8, sub_100217BB8);
      sub_10001A9E8(v1[22], (uint64_t)qword_1011B6C30);
      sub_10001BD08(v8, v9);
      v10 = sub_10001BBBC(v8, v9);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(12, -1);
        v27 = swift_slowAlloc(32, -1);
        v28 = v27;
        *(_DWORD *)v13 = 136315138;
        sub_10001BBBC(v8, v9);
        v14 = sub_1003552C8(v8, v9);
        v16 = v15;
        sub_10001EF3C(v8, v9);
        v1[10] = sub_100016940(v14, v16, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 10, v1 + 11, v13 + 4, v13 + 12);
        swift_bridgeObjectRelease();
        sub_10001EF3C(v8, v9);
        sub_10001EF3C(v8, v9);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "DISProductData: %s", v13, 0xCu);
        swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v13, -1, -1);
      }
      else
      {
        sub_10001EF3C(v8, v9);
        sub_10001EF3C(v8, v9);
      }

      v4 = sub_100355708(v8, v9);
      v5 = v17;
      sub_10001EF3C(v8, v9);
    }
    a1 = sub_10001EF3C(v2, v3);
  }
  v1[79] = v5;
  v1[78] = v4;
  v18 = v1[74];
  static Task<>.checkCancellation()(a1);
  if (v18)
  {
    v19 = v1[45];
    v20 = v1[40];
    v21 = v1[41];
    swift_release();
    sub_10001EF3C(v2, v3);
    sub_10001BC14(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
    v1[87] = v18;
    v22 = type metadata accessor for Peripheral(0);
    v23 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[88] = v24;
    *v24 = v1;
    v24[1] = sub_1009B05FC;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v22, v23);
  }
  else
  {
    Identifier.init(stringLiteral:)("2A26", 4, 2, v1[64]);
    v26 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[80] = v26;
    *v26 = v1;
    v26[1] = sub_1009AFAB0;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[31], v1[52], v1[61]);
  }
}

uint64_t sub_1009AFA00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[45];
  v2 = v0[40];
  v3 = v0[41];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[87] = v0[74];
  v4 = type metadata accessor for Peripheral(0);
  v5 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[88] = v6;
  *v6 = v0;
  v6[1] = sub_1009B05FC;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_1009AFAB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 640);
  v5 = *v2;
  *(_QWORD *)(v5 + 648) = a1;
  *(_QWORD *)(v5 + 656) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5 + 544))(*(_QWORD *)(v5 + 248), *(_QWORD *)(v5 + 232));
  if (v1)
    return swift_task_switch(sub_1009AFC34, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(_QWORD *)(v5 + 664) = v7;
  *v7 = v5;
  v7[1] = sub_1009AFB74;
  return dispatch thunk of CharacteristicProtocol.read()(*(_QWORD *)(v5 + 216), *(_QWORD *)(v5 + 512), *(_QWORD *)(v5 + 552));
}

uint64_t sub_1009AFB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  v3 = *(_QWORD **)v1;
  v3[84] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_1009AFD90, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[85] = v5;
  *v5 = v3;
  v5[1] = sub_1009AFD1C;
  return AsyncSequence.first()(v3 + 2, v3[25], v3[73]);
}

uint64_t sub_1009AFC34()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[79];
  v2 = v0[78];
  v3 = v0[77];
  v4 = v0[76];
  v5 = v0[45];
  v6 = v0[40];
  v7 = v0[41];
  swift_release();
  sub_10001EF3C(v4, v3);
  sub_10001BC14(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[87] = v0[82];
  v8 = type metadata accessor for Peripheral(0);
  v9 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[88] = v10;
  *v10 = v0;
  v10[1] = sub_1009B05FC;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_1009AFD1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 680);
  *(_QWORD *)(*v1 + 688) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 600))(*(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 200));
  if (v0)
    v4 = sub_1009B0514;
  else
    v4 = sub_1009AFE78;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1009AFD90()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[79];
  v2 = v0[78];
  v3 = v0[77];
  v4 = v0[76];
  v5 = v0[45];
  v6 = v0[40];
  v7 = v0[41];
  swift_release();
  sub_10001EF3C(v4, v3);
  sub_10001BC14(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[87] = v0[84];
  v8 = type metadata accessor for Peripheral(0);
  v9 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[88] = v10;
  *v10 = v0;
  v10[1] = sub_1009B05FC;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_1009AFE78()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  os_log_type_t type[8];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88[2];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v3 = sub_10001A9E8(*(_QWORD *)(v0 + 176), (uint64_t)qword_1011B6C30);
  sub_10001BD08(v1, v2);
  v4 = sub_10001BD08(v1, v2);
  v83 = v3;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v86 = v2;
  v87 = v1;
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v88[0] = v8;
    *(_DWORD *)v7 = 136315138;
    if (v2 >> 60 == 15)
    {
      v9 = 0;
      v10 = 0xE000000000000000;
    }
    else
    {
      v9 = Data.hexString.getter(v1, v2);
      v10 = v11;
    }
    *(_QWORD *)(v0 + 72) = sub_100016940(v9, v10, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v1, v2);
    sub_10001EF3C(v1, v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DIS firmware version: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    sub_10001EF3C(v1, v2);
    sub_10001EF3C(v1, v2);
  }

  v13 = *(_QWORD *)(v0 + 352);
  v12 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 344);
  v80 = *(_QWORD *)(v0 + 336);
  v16 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 328);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 192);
  v19 = *(_QWORD *)(v0 + 176);
  ContinuousClock.now.getter(v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v18, v83, v19);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  v21(v14, v12, v16);
  v22 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v21)(v80, v13, v16);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  v25 = os_log_type_enabled(v23, v24);
  v26 = *(_QWORD *)(v0 + 336);
  v27 = *(_QWORD *)(v0 + 344);
  v29 = *(_QWORD *)(v0 + 320);
  v28 = *(_QWORD *)(v0 + 328);
  v31 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 176);
  if (v25)
  {
    v84 = *(_QWORD *)(v0 + 176);
    v33 = *(_QWORD *)(v0 + 168);
    v67 = *(_QWORD *)(v0 + 160);
    v69 = *(_QWORD *)(v0 + 152);
    v77 = v23;
    v81 = *(_QWORD *)(v0 + 184);
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v75 = swift_slowAlloc(32, -1);
    v88[0] = v75;
    *(_DWORD *)v34 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v75);
    v35 = sub_100006204(&qword_101116030, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v73 = v30;
    v36 = static Duration.description<A>(_:_:units:)(v27, v26, v33, v29, v35);
    v38 = v37;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v33, v69);
    *(_QWORD *)(v0 + 64) = sub_100016940(v36, v38, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease();
    v39 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v39(v27, v29);
    v39(v26, v29);
    _os_log_impl((void *)&_mh_execute_header, v77, v24, "Raw metadata read time: %{public}s", v34, 0xCu);
    swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v73, v84);
  }
  else
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v39(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 320));
    v39(v26, v29);

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  }
  v62 = *(_QWORD *)(v0 + 624);
  v63 = *(_QWORD *)(v0 + 632);
  v53 = *(_QWORD *)(v0 + 616);
  v60 = *(_QWORD *)(v0 + 392);
  v61 = *(_QWORD *)(v0 + 408);
  v58 = *(_QWORD *)(v0 + 384);
  v59 = *(_QWORD *)(v0 + 400);
  v56 = *(_QWORD *)(v0 + 376);
  v57 = *(_QWORD *)(v0 + 368);
  v55 = *(_QWORD *)(v0 + 360);
  v50 = *(_QWORD *)(v0 + 352);
  v51 = *(_QWORD *)(v0 + 608);
  v64 = *(_QWORD *)(v0 + 344);
  v65 = *(_QWORD *)(v0 + 336);
  v40 = *(_QWORD *)(v0 + 320);
  v66 = *(_QWORD *)(v0 + 312);
  v68 = *(_QWORD *)(v0 + 304);
  v70 = *(_QWORD *)(v0 + 296);
  v71 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)type = *(_QWORD *)(v0 + 264);
  v74 = *(_QWORD *)(v0 + 256);
  v76 = *(_QWORD *)(v0 + 248);
  v78 = *(_QWORD *)(v0 + 224);
  v79 = *(_QWORD *)(v0 + 216);
  v82 = *(_QWORD *)(v0 + 192);
  v85 = *(_QWORD *)(v0 + 168);
  v42 = *(_QWORD *)(v0 + 136);
  v41 = *(_QWORD *)(v0 + 144);
  v44 = *(_QWORD *)(v0 + 120);
  v43 = *(_QWORD *)(v0 + 128);
  v52 = *(_QWORD *)(v0 + 112);
  v54 = *(_QWORD *)(v0 + 104);
  v45 = *(_QWORD *)(v0 + 88);
  dispatch thunk of PeripheralProtocol.id.getter(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432));
  Identifier.id.getter(v43);
  swift_release();
  sub_10001EF3C(v51, v53);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
  v39(v50, v40);
  v39(v55, v40);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v57);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v61, v60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v45, v44, v54);
  v46 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  v47 = (_QWORD *)(v45 + v46[5]);
  *v47 = v62;
  v47[1] = v63;
  *(_OWORD *)(v45 + v46[6]) = xmmword_100E22B20;
  *(_OWORD *)(v45 + v46[7]) = xmmword_100E22B20;
  *(_OWORD *)(v45 + v46[8]) = xmmword_100E22B20;
  *(_OWORD *)(v45 + v46[9]) = xmmword_100E22B20;
  *(_OWORD *)(v45 + v46[10]) = xmmword_100E22B20;
  v48 = (uint64_t *)(v45 + v46[11]);
  *v48 = v87;
  v48[1] = v86;
  *(_OWORD *)(v45 + v46[12]) = xmmword_100E22B20;
  *(_OWORD *)(v45 + v46[13]) = xmmword_100E22B20;
  *(_OWORD *)(v45 + v46[14]) = xmmword_100E22B20;
  swift_task_dealloc(v61);
  swift_task_dealloc(v58);
  swift_task_dealloc(v55);
  swift_task_dealloc(v50);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(*(_QWORD *)type);
  swift_task_dealloc(v74);
  swift_task_dealloc(v76);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v82);
  swift_task_dealloc(v85);
  swift_task_dealloc(v41);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B0514()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[79];
  v2 = v0[78];
  v3 = v0[77];
  v4 = v0[76];
  v5 = v0[45];
  v6 = v0[40];
  v7 = v0[41];
  swift_release();
  sub_10001EF3C(v4, v3);
  sub_10001BC14(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[87] = v0[86];
  v8 = type metadata accessor for Peripheral(0);
  v9 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[88] = v10;
  *v10 = v0;
  v10[1] = sub_1009B05FC;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_1009B05FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 704);
  *(_QWORD *)(*(_QWORD *)v1 + 712) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1009B07D8;
  else
    v3 = sub_1009B0660;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1009B0660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(v1 + 400);
  v3 = *(_QWORD *)(v1 + 408);
  v5 = *(_QWORD *)(v1 + 384);
  v4 = *(_QWORD *)(v1 + 392);
  v7 = *(_QWORD *)(v1 + 368);
  v6 = *(_QWORD *)(v1 + 376);
  v8 = *(_QWORD *)(v1 + 352);
  v9 = *(_QWORD *)(v1 + 360);
  v11 = *(_QWORD *)(v1 + 344);
  v12 = *(_QWORD *)(v1 + 336);
  v13 = *(_QWORD *)(v1 + 312);
  v14 = *(_QWORD *)(v1 + 304);
  v15 = *(_QWORD *)(v1 + 296);
  v16 = *(_QWORD *)(v1 + 272);
  v17 = *(_QWORD *)(v1 + 264);
  v18 = *(_QWORD *)(v1 + 256);
  v19 = *(_QWORD *)(v1 + 248);
  v20 = *(_QWORD *)(v1 + 224);
  v21 = *(_QWORD *)(v1 + 216);
  v22 = *(_QWORD *)(v1 + 192);
  v23 = *(_QWORD *)(v1 + 168);
  v24 = *(_QWORD *)(v1 + 144);
  v25 = *(_QWORD *)(v1 + 120);
  swift_willThrow(a1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009B07D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (qword_1010EA230 != -1)
    swift_once(&qword_1010EA230, sub_100B5D824);
  v1 = *(_QWORD *)(v0 + 712);
  sub_10001A9E8(*(_QWORD *)(v0 + 176), (uint64_t)qword_1011B7D00);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 712);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    v9 = _convertErrorToNSError(_:)(v6);
    *(_QWORD *)(v0 + 56) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "cancelConnection error in readRawAccessoryMetadata() catch block: %{public}@", v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v11 = swift_errorRelease(v6);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 712));
    swift_errorRelease(v6);

  }
  v12 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 352);
  v19 = *(_QWORD *)(v0 + 360);
  v21 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 336);
  v23 = *(_QWORD *)(v0 + 312);
  v24 = *(_QWORD *)(v0 + 304);
  v25 = *(_QWORD *)(v0 + 296);
  v26 = *(_QWORD *)(v0 + 272);
  v27 = *(_QWORD *)(v0 + 264);
  v28 = *(_QWORD *)(v0 + 256);
  v29 = *(_QWORD *)(v0 + 248);
  v30 = *(_QWORD *)(v0 + 224);
  v31 = *(_QWORD *)(v0 + 216);
  v32 = *(_QWORD *)(v0 + 192);
  v33 = *(_QWORD *)(v0 + 168);
  v34 = *(_QWORD *)(v0 + 144);
  v35 = *(_QWORD *)(v0 + 120);
  swift_willThrow(v11);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B0AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for Date(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v3[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[14] = v9;
  v3[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B0B68, v2, 0);
}

uint64_t sub_1009B0B68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[4];
  v3 = v0[14];
  v2 = v0[15];
  v4 = v0[13];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[15];
  v11 = v0[13];
  if (v9)
  {
    v12 = v0[12];
    v22 = v0[11];
    v13 = v0[10];
    v24 = v0[14];
    v14 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v14 = 136446466;
    type = v8;
    v0[2] = sub_100016940(0xD000000000000023, 0x8000000100EEC120, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    Identifier.id.getter(v11);
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v12, v13);
    v0[3] = sub_100016940(v16, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s for %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
  }

  v19 = v0[13];
  static Date.trustedNow.getter(v0[9]);
  Identifier.id.getter(v19);
  v20 = (_QWORD *)swift_task_alloc(dword_10110F894);
  v0[16] = v20;
  *v20 = v0;
  v20[1] = sub_1009B0E34;
  return sub_1009D6430(v0[12], 1, v0[9], v0[5]);
}

uint64_t sub_1009B0E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1009F9E20, v4, 0);
}

uint64_t sub_1009B0EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for Date(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v3[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[14] = v9;
  v3[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B0F64, v2, 0);
}

uint64_t sub_1009B0F64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[4];
  v3 = v0[14];
  v2 = v0[15];
  v4 = v0[13];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[15];
  v11 = v0[13];
  if (v9)
  {
    v12 = v0[12];
    v22 = v0[11];
    v13 = v0[10];
    v24 = v0[14];
    v14 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v14 = 136446466;
    type = v8;
    v0[2] = sub_100016940(0xD000000000000026, 0x8000000100EEC250, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    Identifier.id.getter(v11);
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v12, v13);
    v0[3] = sub_100016940(v16, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s for %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
  }

  v19 = v0[13];
  static Date.trustedNow.getter(v0[9]);
  Identifier.id.getter(v19);
  v20 = (_QWORD *)swift_task_alloc(dword_10110F894);
  v0[16] = v20;
  *v20 = v0;
  v20[1] = sub_1009B0E34;
  return sub_1009D6430(v0[12], 2, v0[9], v0[5]);
}

uint64_t sub_1009B1230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for Date(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v3[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[14] = v9;
  v3[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B12E8, v2, 0);
}

uint64_t sub_1009B12E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[4];
  v3 = v0[14];
  v2 = v0[15];
  v4 = v0[13];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[15];
  v11 = v0[13];
  if (v9)
  {
    v12 = v0[12];
    v22 = v0[11];
    v13 = v0[10];
    v24 = v0[14];
    v14 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v14 = 136446466;
    type = v8;
    v0[2] = sub_100016940(0xD000000000000022, 0x8000000100EEC280, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    Identifier.id.getter(v11);
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v12, v13);
    v0[3] = sub_100016940(v16, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s for %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
  }

  v19 = v0[13];
  static Date.trustedNow.getter(v0[9]);
  Identifier.id.getter(v19);
  v20 = (_QWORD *)swift_task_alloc(dword_10110F894);
  v0[16] = v20;
  *v20 = v0;
  v20[1] = sub_1009B15B4;
  return sub_1009D6430(v0[12], 3, v0[9], v0[5]);
}

uint64_t sub_1009B15B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1009B162C, v4, 0);
}

uint64_t sub_1009B162C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v3, *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B1690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for Date(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v3[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[14] = v9;
  v3[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B1748, v2, 0);
}

uint64_t sub_1009B1748()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[4];
  v3 = v0[14];
  v2 = v0[15];
  v4 = v0[13];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[15];
  v11 = v0[13];
  if (v9)
  {
    v12 = v0[12];
    v22 = v0[11];
    v13 = v0[10];
    v24 = v0[14];
    v14 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v14 = 136446466;
    type = v8;
    v0[2] = sub_100016940(0xD000000000000022, 0x8000000100EEC2B0, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    Identifier.id.getter(v11);
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v12, v13);
    v0[3] = sub_100016940(v16, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s for %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[14] + 8))(v0[15], v0[13]);
  }

  v19 = v0[13];
  static Date.trustedNow.getter(v0[9]);
  Identifier.id.getter(v19);
  v20 = (_QWORD *)swift_task_alloc(dword_10110F894);
  v0[16] = v20;
  *v20 = v0;
  v20[1] = sub_1009B0E34;
  return sub_1009D6430(v0[12], 4, v0[9], v0[5]);
}

uint64_t sub_1009B1A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v3[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v3[23] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[24] = v6;
  v3[25] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v3[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[27] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[28] = swift_task_alloc(v9);
  v3[29] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EF7C0);
  v3[30] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[31] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v12);
  v3[33] = swift_task_alloc(v12);
  return swift_task_switch(sub_1009B1B10, v2, 0);
}

uint64_t sub_1009B1B10()
{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  os_log_type_t type;
  uint64_t v28;
  uint64_t v29;
  uint64_t (__cdecl *v30)();
  uint64_t v31;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0[19];
  v3 = v0[33];
  v4 = v0[30];
  v5 = v0[31];
  v6 = type metadata accessor for Logger(0);
  v0[34] = sub_10001A9E8(v6, (uint64_t)qword_10110F2A8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[35] = v7;
  v8 = v7(v3, v2, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[33];
  v13 = v0[30];
  if (v11)
  {
    v14 = v0[29];
    v15 = v0[26];
    v26 = v0[27];
    v28 = v0[31];
    v16 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v31 = v29;
    *(_DWORD *)v16 = 136446466;
    type = v10;
    v0[17] = sub_100016940(0xD000000000000022, 0x8000000100EEC1F0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2082;
    Identifier.id.getter(v13);
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v14, v15);
    v0[18] = sub_100016940(v18, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    v21 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v21(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "%{public}s for %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v22 = v16;
    v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t))(v0[31] + 8);
    v21(v0[33], v0[30]);
  }

  v0[36] = v21;
  static Date.trustedNow.getter(v0[25]);
  v23 = qword_1010EA5B0;
  swift_retain();
  if (v23 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 12, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v30 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v25 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    v0[37] = v25;
    *v25 = v0;
    v25[1] = sub_1009B1E88;
    return v30();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009B1E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009B1EE8, v3, 0);
}

uint64_t sub_1009B1EE8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  NSObject *log;
  uint64_t *v35;
  os_log_type_t type;
  uint64_t v37;
  uint64_t v38;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 304))
  {
    v2 = *(_QWORD *)(v0 + 240);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    Identifier.id.getter(v2);
    return swift_task_switch(sub_1009B2294, *(_QWORD *)(v0 + 304), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD000000000000013;
    v6[1] = 0x8000000100ED7110;
    swift_willThrow(v5);
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
    v8 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    v7(v8, v10, v9);
    swift_errorRetain(v5);
    v11 = swift_errorRetain(v5);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v16 = *(_QWORD *)(v0 + 256);
    v17 = *(_QWORD *)(v0 + 240);
    if (v14)
    {
      v18 = *(_QWORD *)(v0 + 232);
      v19 = *(_QWORD *)(v0 + 208);
      v32 = *(_QWORD *)(v0 + 216);
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      v20 = swift_slowAlloc(22, -1);
      v35 = (uint64_t *)swift_slowAlloc(8, -1);
      v37 = swift_slowAlloc(32, -1);
      v38 = v37;
      *(_DWORD *)v20 = 136446466;
      type = v13;
      log = v12;
      Identifier.id.getter(v17);
      v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v19, v21);
      v24 = v23;
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v18, v19);
      *(_QWORD *)(v0 + 120) = sub_100016940(v22, v24, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      v33(v16, v17);
      *(_WORD *)(v20 + 12) = 2114;
      swift_errorRetain(v5);
      v25 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(_QWORD *)(v0 + 128) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v20 + 14, v20 + 22);
      *v35 = v25;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to store detected device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v20, 0x16u);
      v26 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v35, 1, v26);
      swift_slowDealloc(v35, -1, -1);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      v15(v16, v17);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
    v27 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 232);
    v30 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009B2294()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD9C);
  v0[39] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1009B22EC;
  return sub_1008FBBC8(v0[22], v0[28]);
}

uint64_t sub_1009B22EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[38];
    v5 = sub_1009B2760;
  }
  else
  {
    v6 = v2[28];
    v7 = v2[26];
    v8 = v2[21];
    v9 = *(void (**)(uint64_t, uint64_t))(v2[27] + 8);
    v2[41] = v9;
    v9(v6, v7);
    v5 = sub_1009B236C;
    v4 = v8;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009B236C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  NSObject *log;
  uint64_t *v37;
  os_log_type_t type;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
  if (v3 == 1)
  {
    v4 = sub_100350CCC();
    v5 = swift_allocError(&type metadata for PencilPairingService.Error, v4, 0, 0);
    *(_OWORD *)v6 = xmmword_100E2E3C0;
    *(_BYTE *)(v6 + 16) = 3;
    swift_willThrow(v5);
    swift_release();
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
    v8 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    v7(v8, v10, v9);
    swift_errorRetain(v5);
    v11 = swift_errorRetain(v5);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v16 = *(_QWORD *)(v0 + 256);
    v17 = *(_QWORD *)(v0 + 240);
    if (v14)
    {
      v18 = *(_QWORD *)(v0 + 232);
      v19 = *(_QWORD *)(v0 + 208);
      v34 = *(_QWORD *)(v0 + 216);
      v35 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      v20 = swift_slowAlloc(22, -1);
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      v39 = swift_slowAlloc(32, -1);
      v40 = v39;
      *(_DWORD *)v20 = 136446466;
      type = v13;
      log = v12;
      Identifier.id.getter(v17);
      v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v19, v21);
      v24 = v23;
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v18, v19);
      *(_QWORD *)(v0 + 120) = sub_100016940(v22, v24, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      v35(v16, v17);
      *(_WORD *)(v20 + 12) = 2114;
      swift_errorRetain(v5);
      v25 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(_QWORD *)(v0 + 128) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v20 + 14, v20 + 22);
      *v37 = v25;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to store detected device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v20, 0x16u);
      v26 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v37, 1, v26);
      swift_slowDealloc(v37, -1, -1);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      v15(v16, v17);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
    v29 = *(_QWORD *)(v0 + 256);
    v31 = *(_QWORD *)(v0 + 224);
    v30 = *(_QWORD *)(v0 + 232);
    v32 = *(_QWORD *)(v0 + 200);
    v33 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    Identifier.id.getter(*(_QWORD *)(v0 + 240));
    v27 = (_QWORD *)swift_task_alloc(dword_10110F894);
    *(_QWORD *)(v0 + 336) = v27;
    *v27 = v0;
    v27[1] = sub_1009B2AAC;
    return sub_1009D6430(*(_QWORD *)(v0 + 232), 5, *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 160));
  }
}

uint64_t sub_1009B2760()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[21];
  (*(void (**)(_QWORD, _QWORD))(v0[27] + 8))(v0[28], v0[26]);
  return swift_task_switch(sub_1009B27A8, v1, 0);
}

uint64_t sub_1009B27A8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;

  swift_release();
  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 240);
    v29 = v11;
    v12 = *(_QWORD *)(v0 + 208);
    v30 = *(_QWORD *)(v0 + 216);
    v31 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v13 = swift_slowAlloc(22, -1);
    v32 = (uint64_t *)swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(32, -1);
    v34 = v33;
    *(_DWORD *)v13 = 136446466;
    Identifier.id.getter(v11);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v10, v12);
    *(_QWORD *)(v0 + 120) = sub_100016940(v15, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    v31(v9, v29);
    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain(v1);
    v18 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 128) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v13 + 14, v13 + 22);
    *v32 = v18;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to store detected device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v13, 0x16u);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v32, 1, v19);
    swift_slowDealloc(v32, -1, -1);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v21 = *(_QWORD *)(v0 + 256);
    v22 = *(_QWORD *)(v0 + 240);
    swift_errorRelease(v1);
    v20(v21, v22);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v23 = *(_QWORD *)(v0 + 256);
  v25 = *(_QWORD *)(v0 + 224);
  v24 = *(_QWORD *)(v0 + 232);
  v26 = *(_QWORD *)(v0 + 200);
  v27 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B2AAC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 328);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  v1(v2, v3);
  return swift_task_switch(sub_1009B2B20, v4, 0);
}

uint64_t sub_1009B2B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 192);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B2BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v3[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v3[23] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[24] = v6;
  v3[25] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v3[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[27] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[28] = swift_task_alloc(v9);
  v3[29] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EF7C0);
  v3[30] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[31] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v12);
  v3[33] = swift_task_alloc(v12);
  return swift_task_switch(sub_1009B2CB0, v2, 0);
}

uint64_t sub_1009B2CB0()
{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  os_log_type_t type;
  uint64_t v28;
  uint64_t v29;
  uint64_t (__cdecl *v30)();
  uint64_t v31;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0[19];
  v3 = v0[33];
  v4 = v0[30];
  v5 = v0[31];
  v6 = type metadata accessor for Logger(0);
  v0[34] = sub_10001A9E8(v6, (uint64_t)qword_10110F2A8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[35] = v7;
  v8 = v7(v3, v2, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[33];
  v13 = v0[30];
  if (v11)
  {
    v14 = v0[29];
    v15 = v0[26];
    v26 = v0[27];
    v28 = v0[31];
    v16 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v31 = v29;
    *(_DWORD *)v16 = 136446466;
    type = v10;
    v0[17] = sub_100016940(0xD000000000000025, 0x8000000100EEC220, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2082;
    Identifier.id.getter(v13);
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v14, v15);
    v0[18] = sub_100016940(v18, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    v21 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v21(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "%{public}s for %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v22 = v16;
    v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t))(v0[31] + 8);
    v21(v0[33], v0[30]);
  }

  v0[36] = v21;
  static Date.trustedNow.getter(v0[25]);
  v23 = qword_1010EA5B0;
  swift_retain();
  if (v23 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 12, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v30 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v25 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    v0[37] = v25;
    *v25 = v0;
    v25[1] = sub_1009B3028;
    return v30();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009B3028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009B3088, v3, 0);
}

uint64_t sub_1009B3088()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  NSObject *log;
  uint64_t *v35;
  os_log_type_t type;
  uint64_t v37;
  uint64_t v38;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 304))
  {
    v2 = *(_QWORD *)(v0 + 240);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    Identifier.id.getter(v2);
    return swift_task_switch(sub_1009B3434, *(_QWORD *)(v0 + 304), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD000000000000013;
    v6[1] = 0x8000000100ED7110;
    swift_willThrow(v5);
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
    v8 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    v7(v8, v10, v9);
    swift_errorRetain(v5);
    v11 = swift_errorRetain(v5);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v16 = *(_QWORD *)(v0 + 256);
    v17 = *(_QWORD *)(v0 + 240);
    if (v14)
    {
      v18 = *(_QWORD *)(v0 + 232);
      v19 = *(_QWORD *)(v0 + 208);
      v32 = *(_QWORD *)(v0 + 216);
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      v20 = swift_slowAlloc(22, -1);
      v35 = (uint64_t *)swift_slowAlloc(8, -1);
      v37 = swift_slowAlloc(32, -1);
      v38 = v37;
      *(_DWORD *)v20 = 136446466;
      type = v13;
      log = v12;
      Identifier.id.getter(v17);
      v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v19, v21);
      v24 = v23;
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v18, v19);
      *(_QWORD *)(v0 + 120) = sub_100016940(v22, v24, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      v33(v16, v17);
      *(_WORD *)(v20 + 12) = 2114;
      swift_errorRetain(v5);
      v25 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(_QWORD *)(v0 + 128) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v20 + 14, v20 + 22);
      *v35 = v25;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to store disappeared device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v20, 0x16u);
      v26 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v35, 1, v26);
      swift_slowDealloc(v35, -1, -1);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      v15(v16, v17);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
    v27 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 232);
    v30 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009B3434()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD9C);
  v0[39] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1009B348C;
  return sub_1008FBBC8(v0[22], v0[28]);
}

uint64_t sub_1009B348C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[38];
    v5 = sub_1009B3900;
  }
  else
  {
    v6 = v2[28];
    v7 = v2[26];
    v8 = v2[21];
    v9 = *(void (**)(uint64_t, uint64_t))(v2[27] + 8);
    v2[41] = v9;
    v9(v6, v7);
    v5 = sub_1009B350C;
    v4 = v8;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009B350C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  NSObject *log;
  uint64_t *v37;
  os_log_type_t type;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
  if (v3 == 1)
  {
    v4 = sub_100350CCC();
    v5 = swift_allocError(&type metadata for PencilPairingService.Error, v4, 0, 0);
    *(_OWORD *)v6 = xmmword_100E2E3C0;
    *(_BYTE *)(v6 + 16) = 3;
    swift_willThrow(v5);
    swift_release();
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
    v8 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    v7(v8, v10, v9);
    swift_errorRetain(v5);
    v11 = swift_errorRetain(v5);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v16 = *(_QWORD *)(v0 + 256);
    v17 = *(_QWORD *)(v0 + 240);
    if (v14)
    {
      v18 = *(_QWORD *)(v0 + 232);
      v19 = *(_QWORD *)(v0 + 208);
      v34 = *(_QWORD *)(v0 + 216);
      v35 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      v20 = swift_slowAlloc(22, -1);
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      v39 = swift_slowAlloc(32, -1);
      v40 = v39;
      *(_DWORD *)v20 = 136446466;
      type = v13;
      log = v12;
      Identifier.id.getter(v17);
      v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v19, v21);
      v24 = v23;
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v18, v19);
      *(_QWORD *)(v0 + 120) = sub_100016940(v22, v24, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      v35(v16, v17);
      *(_WORD *)(v20 + 12) = 2114;
      swift_errorRetain(v5);
      v25 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(_QWORD *)(v0 + 128) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v20 + 14, v20 + 22);
      *v37 = v25;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to store disappeared device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v20, 0x16u);
      v26 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v37, 1, v26);
      swift_slowDealloc(v37, -1, -1);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      v15(v16, v17);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
    v29 = *(_QWORD *)(v0 + 256);
    v31 = *(_QWORD *)(v0 + 224);
    v30 = *(_QWORD *)(v0 + 232);
    v32 = *(_QWORD *)(v0 + 200);
    v33 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    Identifier.id.getter(*(_QWORD *)(v0 + 240));
    v27 = (_QWORD *)swift_task_alloc(dword_10110F894);
    *(_QWORD *)(v0 + 336) = v27;
    *v27 = v0;
    v27[1] = sub_1009B3C4C;
    return sub_1009D6430(*(_QWORD *)(v0 + 232), 6, *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 160));
  }
}

uint64_t sub_1009B3900()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[21];
  (*(void (**)(_QWORD, _QWORD))(v0[27] + 8))(v0[28], v0[26]);
  return swift_task_switch(sub_1009B3948, v1, 0);
}

uint64_t sub_1009B3948()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;

  swift_release();
  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 240);
    v29 = v11;
    v12 = *(_QWORD *)(v0 + 208);
    v30 = *(_QWORD *)(v0 + 216);
    v31 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v13 = swift_slowAlloc(22, -1);
    v32 = (uint64_t *)swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(32, -1);
    v34 = v33;
    *(_DWORD *)v13 = 136446466;
    Identifier.id.getter(v11);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v10, v12);
    *(_QWORD *)(v0 + 120) = sub_100016940(v15, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    v31(v9, v29);
    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain(v1);
    v18 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 128) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v13 + 14, v13 + 22);
    *v32 = v18;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to store disappeared device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v13, 0x16u);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v32, 1, v19);
    swift_slowDealloc(v32, -1, -1);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v21 = *(_QWORD *)(v0 + 256);
    v22 = *(_QWORD *)(v0 + 240);
    swift_errorRelease(v1);
    v20(v21, v22);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v23 = *(_QWORD *)(v0 + 256);
  v25 = *(_QWORD *)(v0 + 224);
  v24 = *(_QWORD *)(v0 + 232);
  v26 = *(_QWORD *)(v0 + 200);
  v27 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B3C4C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 328);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  v1(v2, v3);
  return swift_task_switch(sub_1009F9E1C, v4, 0);
}

uint64_t sub_1009B3CC0(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 104) = a2;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = v2;
  *(_QWORD *)(v3 + 48) = *v2;
  v4 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v3 + 56) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 64) = v5;
  *(_QWORD *)(v3 + 72) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B3D30, v2, 0);
}

uint64_t sub_1009B3D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 56);
  if (v9)
  {
    v24 = *(_QWORD *)(v0 + 64);
    v12 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v12 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000039, 0x8000000100EEBF10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2082;
    v13 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    *(_QWORD *)(v0 + 24) = sub_100016940(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s for %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  }

  v16 = *(_QWORD *)(v0 + 40);
  v17 = *(_QWORD *)(v0 + 48);
  v18 = *(_BYTE *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 32);
  v20 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v21 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 80) = v21;
  *(_QWORD *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = v19;
  *(_BYTE *)(v21 + 32) = v18;
  *(_QWORD *)(v21 + 40) = v17;
  v22 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 88) = v22;
  *v22 = v0;
  v22[1] = sub_1009B4010;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v22, v16, v20, 0xD000000000000039, 0x8000000100EEBF10, sub_1009F4044, v21, &type metadata for () + 1);
}

uint64_t sub_1009B4010()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v5 = sub_1009B40B8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 40);
    swift_task_dealloc(*(_QWORD *)(v2 + 80));
    v5 = sub_1009B4084;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009B4084()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B40B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B40F4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  v3 = sub_10001A9A8(&qword_1010EF7C0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B4160, v1, 0);
}

uint64_t sub_1009B4160()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[4];
  v3 = v0[8];
  v2 = v0[9];
  v4 = v0[7];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[9];
  v11 = v0[7];
  if (v9)
  {
    v23 = v0[8];
    v12 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v25 = v24;
    *(_DWORD *)v12 = 136446466;
    v0[2] = sub_100016940(0xD000000000000029, 0x8000000100EEBFD0, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2082;
    v13 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v0[3] = sub_100016940(v14, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s for identifier %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
  }

  v16 = v0[5];
  v17 = v0[6];
  v18 = v0[4];
  v19 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v20 = (_QWORD *)swift_task_alloc(48);
  v0[10] = v20;
  v20[2] = v16;
  v20[3] = v18;
  v20[4] = v17;
  v21 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[11] = v21;
  *v21 = v0;
  v21[1] = sub_1009B4010;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v21, v16, v19, 0xD000000000000029, 0x8000000100EEBFD0, sub_1009F6B30, v20, &type metadata for () + 1);
}

uint64_t sub_1009B4438()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7AE0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7AE0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100EEBFB0);
}

uint64_t sub_1009B44BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_10110F2A8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_10110F2A8);
  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7AE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1009B454C()
{
  void *v0;
  uint64_t result;

  v0 = (void *)sub_100CA7D78((uint64_t)&off_10104DE08);
  result = swift_arrayDestroy(&unk_10104DE28, 1, &type metadata for String);
  off_10110F2C0 = v0;
  return result;
}

void sub_1009B4594(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

unint64_t sub_1009B45CC()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
  return 0xD000000000000018;
}

void sub_1009B47F8()
{
  JUMPOUT(0x1009B47E4);
}

void sub_1009B481C()
{
  JUMPOUT(0x1009B47E4);
}

void sub_1009B4948()
{
  JUMPOUT(0x1009B47E4);
}

void sub_1009B4960()
{
  JUMPOUT(0x1009B47E4);
}

void sub_1009B497C()
{
  JUMPOUT(0x1009B47E4);
}

void sub_1009B4994()
{
  JUMPOUT(0x1009B47E4);
}

void sub_1009B49D0()
{
  JUMPOUT(0x1009B47E4);
}

void sub_1009B49F4()
{
  JUMPOUT(0x1009B4A08);
}

void sub_1009B4A14()
{
  uint64_t v0;

  sub_1009B4594(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_1009B4A20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v1;
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_101116060);
  v5 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + 80) = v5;
  v6 = type metadata accessor for UUID(0);
  v7 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + 88) = v7;
  swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 112) = 0xD000000000000014;
  *(_QWORD *)(v1 + 120) = 0x8000000100E582F0;
  *(_BYTE *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 176) = 0;
  *(_BYTE *)(v1 + 184) = 0;
  v8 = v1 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory;
  v9 = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  swift_storeEnumTagMultiPayload(v8, v9, 3);
  v10 = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_peripheralStreamProvider;
  v11 = sub_10001A9A8((uint64_t *)&unk_10110FB40);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v1 + v10) = AsyncStreamProvider.init()();
  v12 = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_queue;
  v13 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v13);
  *(_QWORD *)(v1 + v12) = WorkItemQueue.__allocating_init(identifier:)(v7);
  v14 = static Data.random(bytes:)(32);
  v16 = v15;
  *(_QWORD *)(v2 + 96) = v14;
  *(_QWORD *)(v2 + 104) = v15;
  v17 = type metadata accessor for AccessoryPairingInfo(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  sub_10001BBBC(v14, v16);
  v18 = sub_1001482FC(v14, v16);
  *(_QWORD *)(v2 + 112) = v18;
  if (v18)
  {
    type metadata accessor for CentralManager(0);
    v19 = sub_10001A9A8((uint64_t *)&unk_101117280);
    v20 = type metadata accessor for CentralManager.Options(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = swift_allocObject(v19, ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72), *(unsigned __int8 *)(v21 + 80) | 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    static CentralManager.Options.needsRestrictedStateOperation.getter();
    *(_QWORD *)(v2 + 56) = v22;
    v23 = sub_100006204((unint64_t *)&unk_101116070, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager.Options, (uint64_t)&protocol conformance descriptor for CentralManager.Options);
    v24 = sub_10001A9A8((uint64_t *)&unk_101117290);
    v25 = sub_1000193A4((unint64_t *)&unk_101116080, (uint64_t *)&unk_101117290, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v2 + 56, v24, v25, v20, v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v5, 0, 1, v20);
    v26 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
    *(_QWORD *)(v2 + 120) = v26;
    *v26 = v2;
    v26[1] = sub_1009B4E44;
    return CentralManager.__allocating_init(options:)(v5);
  }
  else
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10001A9E8(v28, (uint64_t)qword_10110F2A8);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Missing critical information to init pairing ", v32, 2u);
      swift_slowDealloc(v32, -1, -1);

      sub_10001BC14(v14, v16);
    }
    else
    {
      sub_10001BC14(v14, v16);

    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_1000126B0(v8, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    swift_release();
    swift_release();
    v33 = type metadata accessor for PencilPairingService(0);
    swift_defaultActor_destroy(v3);
    swift_release();
    swift_deallocPartialClassInstance(v3, v33, *(unsigned int *)(*(_QWORD *)v3 + 48), *(unsigned __int16 *)(*(_QWORD *)v3 + 52));
    v34 = *(_QWORD *)(v2 + 80);
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(0);
  }
}

void sub_1009B4E44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  void (*v16)(uint64_t);

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD **)(*v1 + 72);
  v6 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 120));
  v5[18] = a1;
  v5[20] = v4;
  v7 = type metadata accessor for AccessoryPairingValidator();
  v8 = swift_allocObject(v7, 32, 7);
  v9 = type metadata accessor for DeviceIdentityUtility(0);
  *(_QWORD *)(v3 + 128) = v9;
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  swift_retain();
  swift_defaultActor_initialize(v10);
  v11 = v10 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v12 = type metadata accessor for Date(0);
  *(_QWORD *)(v3 + 136) = v12;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  *(_QWORD *)(v3 + 144) = v13;
  v13(v11, 1, 1, v12);
  *(_QWORD *)(v10 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v10 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v10 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 5;
  *(_QWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 24) = 0;
  v5[17] = v8;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  v3 += 16;
  v14 = unk_10111EAE4;
  v16 = (void (*)(uint64_t))((char *)&dword_10111EAE0 + dword_10111EAE0);
  *(_QWORD *)(v3 + 32) = 0;
  v15 = (uint64_t *)swift_task_alloc(v14);
  *(_QWORD *)(v3 + 136) = v15;
  *v15 = v6;
  v15[1] = (uint64_t)sub_1009B4F9C;
  v16(v3);
}

uint64_t sub_1009B4F9C(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 144);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 152));
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_locationPublisher) = a1;
  v8 = type metadata accessor for PencilLocationsFetcher();
  v9 = swift_allocObject(v8, 120, 15);
  swift_defaultActor_initialize(v9);
  v10 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  swift_defaultActor_initialize(v10);
  v3(v10 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate, 1, 1, v4);
  *(_QWORD *)(v10 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v10 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v10 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 0;
  *(_QWORD *)(v9 + 112) = v10;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_locationsFetcher) = v9;
  *(_QWORD *)(v6 + 128) = v7;
  return swift_task_switch(sub_1009B50A8, v6, 0);
}

uint64_t sub_1009B50A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  swift_release();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1009B50FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B5158, v0, 0);
}

uint64_t sub_1009B5158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_10110F2A8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, " PencilPairingService: Starting up.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);

  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject(&unk_1010A1270, 40, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v7;
  swift_retain();
  sub_100028774(v6, (uint64_t)&unk_10110FA50, (uint64_t)v9);
  swift_release();
  sub_100004048(v6, &qword_1010F46C0);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B52B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10110F334);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_100004A74;
  v6[407] = a4;
  return swift_task_switch(sub_1009B532C, a4, 0);
}

uint64_t sub_1009B5314()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 3256) = v0;
  return swift_task_switch(sub_1009B532C, v0, 0);
}

uint64_t sub_1009B532C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(_QWORD *)(v6 + 3256);
  swift_asyncLet_begin(v6 + 16, 0, &type metadata for () + 1, &unk_10110F9D0, v7, a6);
  swift_asyncLet_begin(v6 + 656, 0, &type metadata for () + 1, &unk_10110F9E0, v7, v8);
  swift_asyncLet_begin(v6 + 1296, 0, &type metadata for () + 1, &unk_10110F9F0, v7, v9);
  swift_asyncLet_begin(v6 + 1936, 0, &type metadata for () + 1, &unk_10110FA00, v7, v10);
  swift_asyncLet_begin(v6 + 2576, 0, &type metadata for () + 1, &unk_10110FA10, v7, v11);
  return swift_asyncLet_get(v6 + 16, v12, sub_1009B542C, v6 + 3216);
}

uint64_t sub_1009B542C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 656, a2, sub_1009B5440, v2 + 3216);
}

uint64_t sub_1009B5440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 1296, a2, sub_1009B5454, v2 + 3216);
}

uint64_t sub_1009B5454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 1936, a2, sub_1009B5468, v2 + 3216);
}

uint64_t sub_1009B5468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_get(v2 + 2576, a2, sub_1009B547C, v2 + 3216);
}

uint64_t sub_1009B547C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 2576, a2, sub_1009B5490, v2 + 3216);
}

uint64_t sub_1009B5490()
{
  uint64_t v0;

  return swift_task_switch(sub_1009B54A4, *(_QWORD *)(v0 + 3256), 0);
}

uint64_t sub_1009B54A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 1936, a2, sub_1009B54B8, v2 + 2576);
}

uint64_t sub_1009B54B8()
{
  uint64_t v0;

  return swift_task_switch(sub_1009B54CC, *(_QWORD *)(v0 + 3256), 0);
}

uint64_t sub_1009B54CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 1296, a2, sub_1009B54E0, v2 + 1936);
}

uint64_t sub_1009B54E0()
{
  uint64_t v0;

  return swift_task_switch(sub_1009B54F4, *(_QWORD *)(v0 + 3256), 0);
}

uint64_t sub_1009B54F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_1009B5508, v2 + 1296);
}

uint64_t sub_1009B5508()
{
  uint64_t v0;

  return swift_task_switch(sub_1009B551C, *(_QWORD *)(v0 + 3256), 0);
}

uint64_t sub_1009B551C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 16, a2, sub_1009B5530, v2 + 656);
}

uint64_t sub_1009B5530()
{
  uint64_t v0;

  return swift_task_switch(sub_1002A7C1C, *(_QWORD *)(v0 + 3256), 0);
}

uint64_t sub_1009B5544()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110F34C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1002613B8;
  return sub_1009BD388();
}

uint64_t sub_1009B558C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110F354);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100030654;
  return sub_1009BF67C();
}

uint64_t sub_1009B55D4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110FA34);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1002613B8;
  return sub_1009B561C();
}

uint64_t sub_1009B561C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[4] = v0;
  v1[5] = *v0;
  v2 = sub_10001A9A8(&qword_1010EF7C8);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_1010EF7D0);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EF7E0);
  v1[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[9] = v5;
  v1[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF7D8);
  v1[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[12] = v7;
  v1[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B56FC, v0, 0);
}

uint64_t sub_1009B56FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 144);
  sub_1009B76B0();
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v5 = enum case for CentralManager.State.restricted(_:);
  *(_DWORD *)(v0 + 208) = enum case for CentralManager.State.poweredOn(_:);
  *(_DWORD *)(v0 + 212) = v5;
  *(_QWORD *)(v0 + 120) = v4;
  *(_QWORD *)(v0 + 128) = 0;
  v6 = *(_QWORD *)(v0 + 32);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 136) = v7;
  *v7 = v0;
  v7[1] = sub_1009B57F0;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 56), v6, v4, *(_QWORD *)(v0 + 88));
}

uint64_t sub_1009B57F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_1009B5848, v1, 0);
}

uint64_t sub_1009B5848()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD **)(v0 + 56);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EF7F0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 144) = *v1;
    v5 = sub_100005CF0((uint64_t)v1 + *(int *)(v2 + 48), v4, &qword_1010EF7C8);
    static Task<>.checkCancellation()(v5);
    if (!v3)
    {
      v15 = *(unsigned int *)(v0 + 208);
      v16 = *(unsigned int *)(v0 + 212);
      v17 = sub_10001A9A8((uint64_t *)&unk_101117030);
      v18 = type metadata accessor for CentralManager.State(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(_QWORD *)(v19 + 72);
      v21 = *(unsigned __int8 *)(v19 + 80);
      v22 = (v21 + 32) & ~v21;
      v23 = swift_allocObject(v17, v22 + 2 * v20, v21 | 7);
      *(_QWORD *)(v0 + 152) = v23;
      *(_OWORD *)(v23 + 16) = xmmword_100E22B10;
      v24 = v23 + v22;
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 104);
      v25(v24, v15, v18);
      v25(v24 + v20, v16, v18);
      v26 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(states:)[1]);
      *(_QWORD *)(v0 + 160) = v26;
      v27 = type metadata accessor for CentralManager(0);
      v28 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
      *v26 = v0;
      v26[1] = sub_1009B5BD0;
      return CentralManagerProtocol.await(states:)(v23, v27, v28);
    }
    v6 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    swift_release();
    sub_100004048(v6, &qword_1010EF7C8);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_10110F2A8);
    swift_errorRetain(v3);
    v8 = swift_errorRetain(v3);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      swift_errorRetain(v3);
      v13 = _swift_stdlib_bridgeErrorToNSError(v3);
      *(_QWORD *)(v0 + 16) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
      *v12 = v13;
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error from subscribeToAccessoryConnectionChanges: %@", v11, 0xCu);
      v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
  }
  v30 = *(_QWORD *)(v0 + 80);
  v32 = *(_QWORD *)(v0 + 48);
  v31 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B5BD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 32);
  swift_bridgeObjectRelease();
  if (v0)
    v5 = sub_1009B5E64;
  else
    v5 = sub_1009B5C40;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009B5C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 48);
  type metadata accessor for Transaction(0);
  v9 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 176) = static Transaction.$current.getter();
  *(_QWORD *)(v0 + 24) = v1;
  v5 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 184) = v5;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = v9;
  v6 = async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1];
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc(v6);
  *(_QWORD *)(v0 + 192) = v7;
  *v7 = v0;
  v7[1] = sub_1009B5D44;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v7, v0 + 24, &unk_10110FA40, v5, v9, v2, 0xD000000000000027, 0x8000000100EEC320);
}

uint64_t sub_1009B5D44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  v2 += 24;
  v4 = *(_QWORD *)(v2 + 160);
  v5 = *(_QWORD *)(v2 + 8);
  swift_release();
  swift_release();
  swift_task_dealloc(v4);
  if (v0)
    v6 = sub_1009B6084;
  else
    v6 = sub_1009B5DD0;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1009B5DD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[6];
  swift_release();
  sub_100004048(v1, &qword_1010EF7C8);
  v0[16] = v0[25];
  v2 = v0[15];
  v3 = v0[4];
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[17] = v4;
  *v4 = v0;
  v4[1] = sub_1009B57F0;
  return AsyncStream.Iterator.next(isolation:)(v0[7], v3, v2, v0[11]);
}

uint64_t sub_1009B5E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100004048(v4, &qword_1010EF7C8);
  v5 = *(_QWORD *)(v0 + 168);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_10110F2A8);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v5);
    v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error from subscribeToAccessoryConnectionChanges: %@", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  v14 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 48);
  v15 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B6084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100004048(v4, &qword_1010EF7C8);
  v5 = *(_QWORD *)(v0 + 200);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_10110F2A8);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v5);
    v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error from subscribeToAccessoryConnectionChanges: %@", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  v14 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 48);
  v15 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B62AC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110FA1C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1002613B8;
  return sub_1009B62F4();
}

uint64_t sub_1009B62F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1[41] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[42] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[43] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v1[44] = v4;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[45] = swift_task_alloc(v5);
  v1[46] = swift_task_alloc(v5);
  v6 = type metadata accessor for CloudStorageStore.State(0);
  v1[47] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[48] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[49] = swift_task_alloc(v8);
  v1[50] = swift_task_alloc(v8);
  v1[51] = swift_task_alloc(v8);
  v1[52] = swift_task_alloc(v8);
  v1[53] = swift_task_alloc(v8);
  v1[54] = swift_task_alloc(v8);
  v9 = sub_10001A9A8((uint64_t *)&unk_101100420);
  v1[55] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101100438);
  v1[56] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[57] = v11;
  v1[58] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1011088A0);
  v1[59] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[60] = v13;
  v1[61] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101100430);
  v1[62] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v1[63] = v15;
  v1[64] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B6478, v0, 0);
}

uint64_t sub_1009B6478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t (__cdecl *v9)();

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_10110F2A8);
  *(_QWORD *)(v0 + 520) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Monitoring CloudKit state stream", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = qword_1010EA5B0;
  swift_retain();
  if (v6 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v9 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v8 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 528) = v8;
    *v8 = v0;
    v8[1] = sub_1009B6634;
    return v9();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009B6634(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009B6694, v3, 0);
}

uint64_t sub_1009B6694()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 536))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_1009B69B4, *(_QWORD *)(v0 + 536), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = sub_100033220();
    v4 = swift_allocError(&type metadata for DaemonError, v3, 0, 0);
    *v5 = 0xD000000000000013;
    v5[1] = 0x8000000100ED7110;
    swift_willThrow(v4);
    swift_errorRetain(v4);
    swift_errorRetain(v4);
    v6 = swift_errorRetain(v4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      v11 = swift_slowAlloc(32, -1);
      v25 = v11;
      *(_DWORD *)v9 = 136446466;
      *(_QWORD *)(v0 + 312) = sub_100016940(0xD000000000000016, 0x8000000100EEC3C0, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2114;
      swift_errorRetain(v4);
      v12 = _swift_stdlib_bridgeErrorToNSError(v4);
      *(_QWORD *)(v0 + 296) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v9 + 14, v9 + 22);
      *v10 = v12;
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s error %{public}@", (uint8_t *)v9, 0x16u);
      v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v10, 1, v13);
      swift_slowDealloc(v10, -1, -1);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_errorRelease(v4);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      swift_errorRelease(v4);

    }
    swift_errorRelease(v4);
    v14 = *(_QWORD *)(v0 + 488);
    v15 = *(_QWORD *)(v0 + 464);
    v17 = *(_QWORD *)(v0 + 432);
    v16 = *(_QWORD *)(v0 + 440);
    v19 = *(_QWORD *)(v0 + 416);
    v18 = *(_QWORD *)(v0 + 424);
    v21 = *(_QWORD *)(v0 + 400);
    v20 = *(_QWORD *)(v0 + 408);
    v22 = *(_QWORD *)(v0 + 392);
    v23 = *(_QWORD *)(v0 + 368);
    v24 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009B69B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 536) + 128);
  *(_QWORD *)(v0 + 544) = v1;
  return swift_task_switch(sub_1009B69D0, v1, 0);
}

uint64_t sub_1009B69D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[68];
  v3 = v0[60];
  v2 = v0[61];
  v4 = v0[59];
  v5 = v0[47];
  v6 = v0[41];
  v7 = swift_allocObject(&unk_1010A1220, 24, 7);
  swift_weakInit(v7 + 16, v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(v5, v2, sub_1005CD3D8, v7, v5);
  swift_release();
  return swift_task_switch(sub_1009B6A9C, v6, 0);
}

uint64_t sub_1009B6A9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  AsyncStream.makeAsyncIterator()(v0[62]);
  v1 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v0[69] = v1;
  v2 = v0[41];
  v3 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[70] = v3;
  *v3 = v0;
  v3[1] = sub_1009B6B38;
  return AsyncStream.Iterator.next(isolation:)(v0[55], v2, v1, v0[56]);
}

uint64_t sub_1009B6B38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 328);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 560));
  return swift_task_switch(sub_1009B6B90, v1, 0);
}

uint64_t sub_1009B6B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  uint64_t v79;
  Swift::String v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v1 = *(_QWORD *)(v0 + 440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 384) + 48))(v1, 1, *(_QWORD *)(v0 + 376)) == 1)
  {
    v3 = *(_QWORD *)(v0 + 504);
    v2 = *(_QWORD *)(v0 + 512);
    v4 = *(_QWORD *)(v0 + 496);
    v6 = *(_QWORD *)(v0 + 456);
    v5 = *(_QWORD *)(v0 + 464);
    v7 = *(_QWORD *)(v0 + 448);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    v8 = *(_QWORD *)(v0 + 488);
    v9 = *(_QWORD *)(v0 + 464);
    v11 = *(_QWORD *)(v0 + 432);
    v10 = *(_QWORD *)(v0 + 440);
    v13 = *(_QWORD *)(v0 + 416);
    v12 = *(_QWORD *)(v0 + 424);
    v15 = *(_QWORD *)(v0 + 400);
    v14 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 392);
    v86 = *(_QWORD *)(v0 + 368);
    v88 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v19 = *(_QWORD *)(v0 + 424);
  v18 = *(_QWORD *)(v0 + 432);
  sub_1000126EC(v1, v18, type metadata accessor for CloudStorageStore.State);
  v20 = sub_10005972C(v18, v19, type metadata accessor for CloudStorageStore.State);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 424);
  if (v23)
  {
    v25 = (uint64_t *)(v0 + 320);
    v26 = *(_QWORD *)(v0 + 416);
    v27 = *(_QWORD *)(v0 + 376);
    v28 = swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 320) = v29;
    *(_DWORD *)v28 = 136446210;
    sub_10005972C(v24, v26, type metadata accessor for CloudStorageStore.State);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v27);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v31 = *(_QWORD *)(v0 + 368);
        v33 = *(_QWORD *)(v0 + 336);
        v32 = *(_QWORD *)(v0 + 344);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 32))(v31, *(_QWORD *)(v0 + 416), v33);
        *(_QWORD *)(v0 + 232) = 0;
        *(_QWORD *)(v0 + 240) = 0xE000000000000000;
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 248) = 0xD00000000000002ELL;
        *(_QWORD *)(v0 + 256) = 0x8000000100EEADE0;
        v34 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        v37 = *(_QWORD *)(v0 + 248);
        v36 = *(_QWORD *)(v0 + 256);
        v38 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v25 = (uint64_t *)(v0 + 320);
        v38(v31, v33);
      }
      else
      {
        v37 = 0x6E776F6E6B6E752ELL;
        v36 = 0xE800000000000000;
      }
    }
    else
    {
      sub_10000F9FC(*(__int128 **)(v0 + 416), v0 + 96);
      *(_QWORD *)(v0 + 280) = 0;
      *(_QWORD *)(v0 + 288) = 0xE000000000000000;
      v39._countAndFlagsBits = 0x65696669646F6D2ELL;
      v39._object = (void *)0xEA00000000002864;
      String.append(_:)(v39);
      v40 = sub_10001A9A8(&qword_101100440);
      _print_unlocked<A, B>(_:_:)(v0 + 96, v0 + 280, v40, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v41._countAndFlagsBits = 41;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      v37 = *(_QWORD *)(v0 + 280);
      v36 = *(_QWORD *)(v0 + 288);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
    }
    v42 = *(_QWORD *)(v0 + 424);
    *(_QWORD *)(v28 + 4) = sub_100016940(v37, v36, v25);
    swift_bridgeObjectRelease();
    sub_1000126B0(v42, type metadata accessor for CloudStorageStore.State);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "cloudKitAccountStateStream event: %{public}s", (uint8_t *)v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 424), type metadata accessor for CloudStorageStore.State);
  }

  v43 = *(_QWORD *)(v0 + 408);
  v44 = *(_QWORD *)(v0 + 376);
  sub_10005972C(*(_QWORD *)(v0 + 432), v43, type metadata accessor for CloudStorageStore.State);
  v45 = swift_getEnumCaseMultiPayload(v43, v44);
  if (v45)
  {
    if (v45 == 1)
    {
      v46 = *(_QWORD *)(v0 + 360);
      v47 = *(_QWORD *)(v0 + 368);
      v49 = *(_QWORD *)(v0 + 344);
      v48 = *(_QWORD *)(v0 + 352);
      v51 = *(_QWORD *)(v0 + 328);
      v50 = *(_QWORD *)(v0 + 336);
      v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
      v52(v46, *(_QWORD *)(v0 + 408), v50);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v47, v46, v50);
      v53 = *(unsigned __int8 *)(v49 + 80);
      v54 = (v53 + 24) & ~v53;
      v55 = swift_allocObject(&unk_1010A1248, v54 + v48, v53 | 7);
      *(_QWORD *)(v0 + 568) = v55;
      *(_QWORD *)(v55 + 16) = v51;
      v52(v55 + v54, v47, v50);
      v56 = async function pointer to withTimeout<A>(_:block:)[1];
      swift_retain();
      v57 = (_QWORD *)swift_task_alloc(v56);
      *(_QWORD *)(v0 + 576) = v57;
      *v57 = v0;
      v57[1] = sub_1009B73A8;
      return withTimeout<A>(_:block:)(v57, 0x40AAD21B3B700000, 3, &unk_10110FA28, v55, &type metadata for () + 1);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(*(_QWORD **)(v0 + 408));
  }
  v58 = sub_10005972C(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 400), type metadata accessor for CloudStorageStore.State);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.info.getter(v59);
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint64_t *)(v0 + 304);
    v63 = *(_QWORD *)(v0 + 392);
    v62 = *(_QWORD *)(v0 + 400);
    v64 = *(_QWORD *)(v0 + 376);
    v65 = swift_slowAlloc(12, -1);
    v66 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 304) = v66;
    *(_DWORD *)v65 = 136315138;
    sub_10005972C(v62, v63, type metadata accessor for CloudStorageStore.State);
    v67 = swift_getEnumCaseMultiPayload(v63, v64);
    if (v67)
    {
      if (v67 == 1)
      {
        v68 = *(_QWORD *)(v0 + 368);
        v87 = *(_QWORD *)(v0 + 344);
        v69 = *(_QWORD *)(v0 + 336);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v87 + 32))(v68, *(_QWORD *)(v0 + 392), v69);
        *(_QWORD *)(v0 + 200) = 0;
        *(_QWORD *)(v0 + 208) = 0xE000000000000000;
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 216) = 0xD00000000000002ELL;
        *(_QWORD *)(v0 + 224) = 0x8000000100EEADE0;
        v70 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v71._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v69, v70);
        String.append(_:)(v71);
        swift_bridgeObjectRelease();
        v72 = *(_QWORD *)(v0 + 216);
        v73 = *(_QWORD *)(v0 + 224);
        v74 = v69;
        v61 = (uint64_t *)(v0 + 304);
        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v68, v74);
      }
      else
      {
        v72 = 0x6E776F6E6B6E752ELL;
        v73 = 0xE800000000000000;
      }
    }
    else
    {
      sub_10000F9FC(*(__int128 **)(v0 + 392), v0 + 136);
      *(_QWORD *)(v0 + 264) = 0;
      *(_QWORD *)(v0 + 272) = 0xE000000000000000;
      v78._countAndFlagsBits = 0x65696669646F6D2ELL;
      v78._object = (void *)0xEA00000000002864;
      String.append(_:)(v78);
      v79 = sub_10001A9A8(&qword_101100440);
      _print_unlocked<A, B>(_:_:)(v0 + 136, v0 + 264, v79, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v80._countAndFlagsBits = 41;
      v80._object = (void *)0xE100000000000000;
      String.append(_:)(v80);
      v72 = *(_QWORD *)(v0 + 264);
      v73 = *(_QWORD *)(v0 + 272);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
    }
    v81 = *(_QWORD *)(v0 + 432);
    v82 = *(_QWORD *)(v0 + 400);
    *(_QWORD *)(v65 + 4) = sub_100016940(v72, v73, v61);
    swift_bridgeObjectRelease();
    sub_1000126B0(v82, type metadata accessor for CloudStorageStore.State);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Ignoring %s", (uint8_t *)v65, 0xCu);
    swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v65, -1, -1);

    v77 = v81;
  }
  else
  {
    v75 = *(_QWORD *)(v0 + 432);
    v76 = *(_QWORD *)(v0 + 400);

    sub_1000126B0(v76, type metadata accessor for CloudStorageStore.State);
    v77 = v75;
  }
  sub_1000126B0(v77, type metadata accessor for CloudStorageStore.State);
  v83 = *(_QWORD *)(v0 + 552);
  v84 = *(_QWORD *)(v0 + 328);
  v85 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 560) = v85;
  *v85 = v0;
  v85[1] = sub_1009B6B38;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 440), v84, v83, *(_QWORD *)(v0 + 448));
}

uint64_t sub_1009B73A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 576);
  *(_QWORD *)(*v1 + 584) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 328);
    v5 = sub_1009B74AC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 328);
    swift_release();
    v5 = sub_1009B741C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009B741C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[54];
  (*(void (**)(_QWORD, _QWORD))(v0[43] + 8))(v0[45], v0[42]);
  sub_1000126B0(v1, type metadata accessor for CloudStorageStore.State);
  v2 = v0[69];
  v3 = v0[41];
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[70] = v4;
  *v4 = v0;
  v4[1] = sub_1009B6B38;
  return AsyncStream.Iterator.next(isolation:)(v0[55], v3, v2, v0[56]);
}

uint64_t sub_1009B74AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0[73];
  swift_release();
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[73];
  if (v5)
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v7 + 4) = v9;
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "bluetoothUnpair failed: %{public}@", (uint8_t *)v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }
  v11 = v0[54];
  v12 = v0[45];
  v13 = v0[42];
  v14 = v0[43];
  swift_errorRelease(v0[73]);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  sub_1000126B0(v11, type metadata accessor for CloudStorageStore.State);
  v15 = v0[69];
  v16 = v0[41];
  v17 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[70] = v17;
  *v17 = v0;
  v17[1] = sub_1009B6B38;
  return AsyncStream.Iterator.next(isolation:)(v0[55], v16, v15, v0[56]);
}

uint64_t sub_1009B7668()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110F33C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1002613B8;
  return sub_1009B79B8();
}

void sub_1009B76B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  _BYTE v8[24];

  v1 = sub_10001A9A8(&qword_1010EF7C0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  __chkstk_darwin(v2);
  v4 = v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v5 = v0 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory;
  swift_beginAccess(v0 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory, v8, 0, 0);
  sub_10005972C(v5, (uint64_t)v4, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
  v6 = (char *)sub_1009B77B4 + 4 * byte_100E582A0[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_1009B77B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_10001A9A8(&qword_10110F5F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1 + *(int *)(v4 + 48), v0);
  v5 = sub_10001A9A8(&qword_10110F9C0);
  v6 = sub_10001A9A8(&qword_1010EF7C8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v5, v10 + v8, v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  v12 = v11 + v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v12, v2, v0);
  v13 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  swift_storeEnumTagMultiPayload(v12, v6, 0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v1, v14);
  AsyncStreamProvider.stream(initialEvents:)(v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1009B79B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1[57] = v0;
  v2 = type metadata accessor for BeaconIdentifier(0);
  v1[58] = v2;
  v1[59] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_1010EF480);
  v1[60] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v1[61] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[62] = v5;
  v1[63] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v1[64] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[65] = swift_task_alloc(v7);
  v1[66] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v1[67] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[68] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v1[69] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[70] = swift_task_alloc(v11);
  v1[71] = swift_task_alloc(v11);
  v12 = type metadata accessor for DeviceEvent(0);
  v1[72] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[73] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v1[74] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[75] = swift_task_alloc(v15);
  v1[76] = swift_task_alloc(v15);
  v1[77] = swift_task_alloc(v15);
  v1[78] = swift_task_alloc(v15);
  v1[79] = swift_task_alloc(v15);
  v1[80] = swift_task_alloc(v15);
  v1[81] = swift_task_alloc(v15);
  v16 = sub_10001A9A8(&qword_1010EF488);
  v1[82] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1011004B0);
  v1[83] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v1[84] = v18;
  v1[85] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1011004B8);
  v1[86] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v1[87] = v20;
  v1[88] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1011004C0);
  v1[89] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v1[90] = v22;
  v1[91] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009B7C14, v0, 0);
}

uint64_t sub_1009B7C14()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 336, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 736) = v2;
    *v2 = v0;
    v2[1] = sub_1009B7D00;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009B7D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 736);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 744) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009B7D60, v3, 0);
}

uint64_t sub_1009B7D60()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 744);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1009B8090, 0, 0);
  v3 = sub_100350CCC();
  v4 = swift_allocError(&type metadata for PencilPairingService.Error, v3, 0, 0);
  *(_OWORD *)v5 = xmmword_100E58200;
  *(_BYTE *)(v5 + 16) = 3;
  swift_willThrow(v4);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_10110F2A8);
  swift_errorRetain(v4);
  v7 = swift_errorRetain(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138543362;
    swift_errorRetain(v4);
    v12 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v0 + 376) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to register for device events: %{public}@.", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  v14 = *(_QWORD *)(v0 + 704);
  v15 = *(_QWORD *)(v0 + 680);
  v16 = *(_QWORD *)(v0 + 656);
  v17 = *(_QWORD *)(v0 + 648);
  v18 = *(_QWORD *)(v0 + 640);
  v19 = *(_QWORD *)(v0 + 632);
  v20 = *(_QWORD *)(v0 + 624);
  v21 = *(_QWORD *)(v0 + 616);
  v22 = *(_QWORD *)(v0 + 608);
  v23 = *(_QWORD *)(v0 + 600);
  v24 = *(_QWORD *)(v0 + 568);
  v25 = *(_QWORD *)(v0 + 560);
  v26 = *(_QWORD *)(v0 + 528);
  v27 = *(_QWORD *)(v0 + 520);
  v28 = *(_QWORD *)(v0 + 512);
  v29 = *(_QWORD *)(v0 + 504);
  v30 = *(_QWORD *)(v0 + 480);
  v31 = *(_QWORD *)(v0 + 472);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009B8090()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[93];
  v2 = v0[85];
  v3 = v0[72];
  v4 = v0[57];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[84] + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v0[83]);
  AsyncStream.init(_:bufferingPolicy:_:)(v3, v2, sub_1005CD694, v1, v3);
  swift_release();
  return swift_task_switch(sub_1009B8130, v4, 0);
}

uint64_t sub_1009B8130()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[88];
  v2 = v0[87];
  v3 = v0[86];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v0[94] = v4;
  v5 = v0[57];
  v6 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[95] = v6;
  *v6 = v0;
  v6[1] = sub_1009B81E8;
  return AsyncStream.Iterator.next(isolation:)(v0[82], v5, v4, v0[89]);
}

uint64_t sub_1009B81E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 456);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 760));
  return swift_task_switch(sub_1009B8240, v1, 0);
}

uint64_t sub_1009B8240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (__cdecl *v41)();
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 656);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 584) + 48))(v1, 1, *(_QWORD *)(v0 + 576)) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 720) + 8))(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 712));
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Device event: observationService.stream() terminated.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = *(_QWORD *)(v0 + 704);
    v8 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 656);
    v10 = *(_QWORD *)(v0 + 648);
    v11 = *(_QWORD *)(v0 + 640);
    v12 = *(_QWORD *)(v0 + 632);
    v13 = *(_QWORD *)(v0 + 624);
    v14 = *(_QWORD *)(v0 + 616);
    v15 = *(_QWORD *)(v0 + 608);
    v32 = *(_QWORD *)(v0 + 600);
    v33 = *(_QWORD *)(v0 + 568);
    v34 = *(_QWORD *)(v0 + 560);
    v35 = *(_QWORD *)(v0 + 528);
    v36 = *(_QWORD *)(v0 + 520);
    v37 = *(_QWORD *)(v0 + 512);
    v38 = *(_QWORD *)(v0 + 504);
    v39 = *(_QWORD *)(v0 + 480);
    v40 = *(_QWORD *)(v0 + 472);
    swift_task_dealloc(*(_QWORD *)(v0 + 728));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1000126EC(v1, *(_QWORD *)(v0 + 648), type metadata accessor for DeviceEvent);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v17 = *(_QWORD *)(v0 + 648);
    v18 = *(_QWORD *)(v0 + 640);
    v19 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 768) = sub_10001A9E8(v19, (uint64_t)qword_10110F2A8);
    v20 = sub_10005972C(v17, v18, type metadata accessor for DeviceEvent);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 640);
    if (v23)
    {
      v25 = *(_QWORD *)(v0 + 536);
      v26 = swift_slowAlloc(32, -1);
      v27 = swift_slowAlloc(64, -1);
      v42 = v27;
      *(_DWORD *)v26 = 136446723;
      *(_QWORD *)(v26 + 4) = sub_100016940(0xD000000000000015, 0x8000000100EEC3A0, &v42);
      *(_WORD *)(v26 + 12) = 2160;
      *(_QWORD *)(v26 + 14) = 1752392040;
      *(_WORD *)(v26 + 22) = 2081;
      v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v25, v28);
      *(_QWORD *)(v26 + 24) = sub_100016940(v29, v30, &v42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v24, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s for %{private,mask.hash}s", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 640), type metadata accessor for DeviceEvent);
    }

    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 216, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 240))
    {
      sub_10000F9FC((__int128 *)(v0 + 216), v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
      v41 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v31 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 776) = v31;
      *v31 = v0;
      v31[1] = sub_1009B86E8;
      return v41();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1009B86E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 776);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 784) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009B8748, v3, 0);
}

uint64_t sub_1009B8748()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = (_QWORD *)(v0 + 176);
  if (*(_QWORD *)(v0 + 784))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_1009B8AAC, *(_QWORD *)(v0 + 784), 0);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 728);
    v4 = *(_QWORD *)(v0 + 720);
    v5 = *(_QWORD *)(v0 + 712);
    v6 = *(_QWORD *)(v0 + 648);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = sub_100350CCC();
    v8 = swift_allocError(&type metadata for PencilPairingService.Error, v7, 0, 0);
    *(_OWORD *)v9 = xmmword_100E58210;
    *(_BYTE *)(v9 + 16) = 3;
    swift_willThrow(v8);
    sub_1000126B0(v6, type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_10110F2A8);
    swift_errorRetain(v8);
    v11 = swift_errorRetain(v8);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      swift_errorRetain(v8);
      v16 = _swift_stdlib_bridgeErrorToNSError(v8);
      *(_QWORD *)(v0 + 376) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v14 + 4, v14 + 12);
      *v15 = v16;
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to register for device events: %{public}@.", v14, 0xCu);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v8);
    }
    else
    {
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      swift_errorRelease(v8);

    }
    v18 = *(_QWORD *)(v0 + 704);
    v19 = *(_QWORD *)(v0 + 680);
    v20 = *(_QWORD *)(v0 + 656);
    v21 = *(_QWORD *)(v0 + 648);
    v22 = *(_QWORD *)(v0 + 640);
    v23 = *(_QWORD *)(v0 + 632);
    v24 = *(_QWORD *)(v0 + 624);
    v25 = *(_QWORD *)(v0 + 616);
    v26 = *(_QWORD *)(v0 + 608);
    v27 = *(_QWORD *)(v0 + 600);
    v28 = *(_QWORD *)(v0 + 568);
    v29 = *(_QWORD *)(v0 + 560);
    v30 = *(_QWORD *)(v0 + 528);
    v31 = *(_QWORD *)(v0 + 520);
    v32 = *(_QWORD *)(v0 + 512);
    v33 = *(_QWORD *)(v0 + 504);
    v34 = *(_QWORD *)(v0 + 480);
    v35 = *(_QWORD *)(v0 + 472);
    swift_task_dealloc(*(_QWORD *)(v0 + 728));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009B8AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 784);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 792) = v3;
  v4 = sub_10001A9A8(&qword_1010EE190);
  *v3 = v0;
  v3[1] = sub_1009B8B34;
  return unsafeBlocking<A>(_:)(v0 + 440, sub_1005CD268, v1, v4);
}

uint64_t sub_1009B8B34()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 792));
  swift_release();
  return swift_task_switch(sub_1009B8B90, *(_QWORD *)(v1 + 784), 0);
}

uint64_t sub_1009B8B90()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[57];
  swift_release();
  v0[100] = v0[55];
  return swift_task_switch(sub_1009B8BD8, v1, 0);
}

uint64_t sub_1009B8BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  void (*v14)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t (__cdecl *v48)();
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 800);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for OwnedBeaconRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    sub_10005972C(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 512), type metadata accessor for OwnedBeaconRecord);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)(v0 + 512);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3);
  v8 = *(_QWORD *)(v0 + 544);
  v9 = *(_QWORD *)(v0 + 536);
  v10 = *(_QWORD *)(v0 + 528);
  v11 = *(_QWORD *)(v0 + 512);
  if (v7 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 512), (uint64_t *)&unk_1010F47C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v10, 1, 1, v9);
LABEL_7:
    v15 = *(_QWORD *)(v0 + 528);
    v16 = &qword_1010ED860;
    goto LABEL_8;
  }
  v12 = v11 + *(int *)(v3 + 20);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  *(_QWORD *)(v0 + 808) = v13;
  v13(v10, v12, v9);
  sub_1000126B0(v11, type metadata accessor for OwnedBeaconRecord);
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56);
  *(_QWORD *)(v0 + 816) = v14;
  v14(v10, 0, 1, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9) == 1)
    goto LABEL_7;
  v33 = *(_QWORD *)(v0 + 648);
  v34 = *(_QWORD *)(v0 + 576);
  v35 = *(_QWORD *)(v0 + 568);
  v36 = *(_QWORD *)(v0 + 536);
  v37 = *(_QWORD *)(v0 + 528);
  v38 = *(_QWORD *)(v0 + 488);
  v39 = *(_QWORD *)(v0 + 496);
  v40 = *(_QWORD *)(v0 + 480);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 32);
  *(_QWORD *)(v0 + 824) = v41;
  v41(v35, v37, v36);
  sub_10000F9B8(v33 + *(int *)(v34 + 32), v40, &qword_1010EF480);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v40, 1, v38) != 1)
  {
    v43 = *(_QWORD *)(v0 + 648);
    v44 = *(_QWORD *)(v0 + 576);
    v45 = *(_QWORD *)(v0 + 472);
    sub_1000126EC(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 504), type metadata accessor for DeviceEvent.AttachmentInfo);
    v46 = *(int *)(v44 + 36);
    *(_DWORD *)(v0 + 920) = v46;
    sub_10005972C(v43 + v46, v45, type metadata accessor for BeaconIdentifier);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 256, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 280))
    {
      sub_10000F9FC((__int128 *)(v0 + 256), v0 + 296);
      sub_10001AA44((_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 320));
      v48 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
      v47 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
      *(_QWORD *)(v0 + 832) = v47;
      *v47 = v0;
      v47[1] = sub_1009B9070;
      return v48();
    }
    else
    {
      __break(1u);
    }
    return result;
  }
  v42 = *(_QWORD *)(v0 + 480);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 544) + 8))(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 536));
  v16 = &qword_1010EF480;
  v15 = v42;
LABEL_8:
  sub_100004048(v15, v16);
  v17 = sub_10005972C(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 616), type metadata accessor for DeviceEvent);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.error.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v21 = *(_QWORD *)(v0 + 648);
  v22 = *(_QWORD *)(v0 + 616);
  if (v20)
  {
    v23 = *(_QWORD *)(v0 + 536);
    v24 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(32, -1);
    v49 = v25;
    *(_DWORD *)v24 = 141558275;
    *(_QWORD *)(v24 + 4) = 1752392040;
    *(_WORD *)(v24 + 12) = 2081;
    v26 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v23, v26);
    *(_QWORD *)(v24 + 14) = sub_100016940(v27, v28, &v49);
    swift_bridgeObjectRelease();
    sub_1000126B0(v22, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Could not determine self-beacon UUID to publish the device event,for beacon: %{private,mask.hash}s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    sub_1000126B0(v22, type metadata accessor for DeviceEvent);
  }
  sub_1000126B0(v21, type metadata accessor for DeviceEvent);
  v29 = *(_QWORD *)(v0 + 752);
  v30 = *(_QWORD *)(v0 + 456);
  v31 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 760) = v31;
  *v31 = v0;
  v31[1] = sub_1009B81E8;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 656), v30, v29, *(_QWORD *)(v0 + 712));
}

uint64_t sub_1009B9070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 832);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 840) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009B90D0, v3, 0);
}

uint64_t sub_1009B90D0()
{
  _QWORD *v0;
  _QWORD *v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t type;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[2];

  v1 = v0 + 37;
  if (v0[105])
  {
    v2 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v0[102];
    v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[101];
    v4 = v0[71];
    v5 = v0[67];
    v6 = v0[65];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3(v6, v4, v5);
    v2(v6, 0, 1, v5);
    v7 = (_QWORD *)swift_task_alloc(dword_10111BAEC);
    v0[106] = v7;
    *v7 = v0;
    v7[1] = sub_1009B98E8;
    return sub_100C65D6C(v0[59], v0[65]);
  }
  v9 = v0 + 54;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v10 = sub_100350CCC();
  v11 = swift_allocError(&type metadata for PencilPairingService.Error, v10, 0, 0);
  *(_OWORD *)v12 = xmmword_100E58200;
  *(_BYTE *)(v12 + 16) = 3;
  swift_willThrow(v11);
  sub_10005972C(v0[81], v0[76], type metadata accessor for DeviceEvent);
  swift_errorRetain(v11);
  v13 = swift_errorRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v17 = v0[76];
  if (v16)
  {
    v65 = v0[67];
    v18 = swift_slowAlloc(32, -1);
    v66 = (uint64_t *)swift_slowAlloc(8, -1);
    v70 = swift_slowAlloc(32, -1);
    v73[0] = v70;
    *(_DWORD *)v18 = 138543875;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    v0[51] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 51, v0 + 52, v18 + 4, v18 + 12);
    *v66 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    *(_WORD *)(v18 + 12) = 2160;
    v0[52] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 52, v0 + 53, v18 + 14, v18 + 22);
    *(_WORD *)(v18 + 22) = 2081;
    v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v0[45] = dispatch thunk of CustomStringConvertible.description.getter(v65, v20);
    v0[46] = v21;
    v22._countAndFlagsBits = 47;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23 = v20;
    v9 = v0 + 54;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v65, v23);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v0[54] = sub_100016940(v0[45], v0[46], v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 54, v0 + 55, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v17, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to update the device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v18, 0x20u);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v66, 1, v25);
    swift_slowDealloc(v66, -1, -1);
    swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease(v11);
  }
  else
  {
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    sub_1000126B0(v17, type metadata accessor for DeviceEvent);

  }
  if ((static UUID.== infix(_:_:)(v0[71], v0[63]) & 1) != 0)
  {
    v26 = v0[81];
    v27 = v0[79];
    v28 = v0[74];
    v29 = v0[73];
    v30 = v0[57];
    type metadata accessor for Transaction(0);
    sub_10005972C(v26, v27, type metadata accessor for DeviceEvent);
    v31 = *(unsigned __int8 *)(v29 + 80);
    v32 = (v31 + 24) & ~v31;
    v33 = swift_allocObject(&unk_1010A11D0, v32 + v28, v31 | 7);
    *(_QWORD *)(v33 + 16) = v30;
    sub_1000126EC(v27, v33 + v32, type metadata accessor for DeviceEvent);
    swift_retain();
    static Transaction.asyncTask(name:block:)("latentLocationUpdate", 20, 2, &unk_10110F9B0, v33);
    swift_release();
    v34 = *(unsigned __int8 *)(v26 + 9);
    if (v34 == 7 || v34 == 3 || v34 == 4)
    {
      v55 = (_QWORD *)swift_task_alloc(dword_10110F9BC);
      v0[113] = v55;
      *v55 = v0;
      v55[1] = sub_1009BA918;
      v56 = v0[57];
      v55[15] = v56;
      return swift_task_switch(sub_1009BB5BC, v56, 0);
    }
    v35 = v0[81];
    v36 = v0[71];
    v37 = v0[68];
    v38 = v0[67];
    v39 = v0[63];
    sub_1000126B0(v0[59], type metadata accessor for BeaconIdentifier);
    sub_1000126B0(v39, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    v40 = v35;
  }
  else
  {
    v41 = sub_10005972C(v0[81], v0[78], type metadata accessor for DeviceEvent);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.info.getter(v42);
    v44 = os_log_type_enabled(v42, v43);
    v45 = v0[81];
    v46 = v0[78];
    if (v44)
    {
      v71 = v0[81];
      v72 = v0[71];
      v47 = v0[67];
      type = v0[63];
      v69 = v0[68];
      v67 = v0[59];
      v48 = swift_slowAlloc(22, -1);
      v49 = swift_slowAlloc(32, -1);
      v50 = v9;
      v51 = v49;
      v73[0] = v49;
      *(_DWORD *)v48 = 141558275;
      v0[53] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 53, v50, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2081;
      v52 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v53 = dispatch thunk of CustomStringConvertible.description.getter(v47, v52);
      v0[56] = sub_100016940(v53, v54, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 57, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v46, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Not publishing event from another device for beacon: %{private,mask.hash}s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      sub_1000126B0(v67, type metadata accessor for BeaconIdentifier);
      sub_1000126B0(type, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v72, v47);
      v40 = v71;
    }
    else
    {
      v57 = v0[71];
      v58 = v0[68];
      v59 = v0[67];
      v60 = v0[63];
      v61 = v0[59];

      sub_1000126B0(v46, type metadata accessor for DeviceEvent);
      sub_1000126B0(v61, type metadata accessor for BeaconIdentifier);
      sub_1000126B0(v60, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
      v40 = v45;
    }
  }
  sub_1000126B0(v40, type metadata accessor for DeviceEvent);
  v62 = v0[94];
  v63 = v0[57];
  v64 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[95] = v64;
  *v64 = v0;
  v64[1] = sub_1009B81E8;
  return AsyncStream.Iterator.next(isolation:)(v0[82], v63, v62, v0[89]);
}

uint64_t sub_1009B98E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 848);
  v3[107] = a1;
  v3[108] = v1;
  swift_task_dealloc(v4);
  v5 = v3[65];
  v6 = v3[57];
  sub_100004048(v5, &qword_1010ED860);
  swift_release();
  if (v1)
    v7 = sub_1009BAA48;
  else
    v7 = sub_1009B9980;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009B9980()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (__cdecl *v11)();

  if (*(_QWORD *)(v0 + 856))
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v11 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 872) = v2;
      *v2 = v0;
      v2[1] = sub_1009B9AE8;
      return v11();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 648);
    v4 = *(_QWORD *)(v0 + 568);
    v5 = *(_QWORD *)(v0 + 544);
    v6 = *(_QWORD *)(v0 + 536);
    v7 = *(_QWORD *)(v0 + 504);
    sub_1000126B0(*(_QWORD *)(v0 + 472), type metadata accessor for BeaconIdentifier);
    sub_1000126B0(v7, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    sub_1000126B0(v3, type metadata accessor for DeviceEvent);
    v8 = *(_QWORD *)(v0 + 752);
    v9 = *(_QWORD *)(v0 + 456);
    v10 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 760) = v10;
    *v10 = v0;
    v10[1] = sub_1009B81E8;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 656), v9, v8, *(_QWORD *)(v0 + 712));
  }
  return result;
}

uint64_t sub_1009B9AE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 872);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 880) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009B9B48, v3, 0);
}

uint64_t sub_1009B9B48()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t type;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[2];

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 880))
  {
    v2 = *(_QWORD *)(v0 + 464);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_DWORD *)(v0 + 924) = *(_DWORD *)(v2 + 20);
    v3 = *(_QWORD *)(v0 + 880);
    v4 = sub_1009BA304;
    return swift_task_switch(v4, v3, 0);
  }
  v6 = v0 + 432;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v7 = sub_100350CCC();
  v8 = swift_allocError(&type metadata for PencilPairingService.Error, v7, 0, 0);
  *(_OWORD *)v9 = xmmword_100E58210;
  *(_BYTE *)(v9 + 16) = 3;
  swift_willThrow(v8);
  swift_bridgeObjectRelease();
  sub_10005972C(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608), type metadata accessor for DeviceEvent);
  swift_errorRetain(v8);
  v10 = swift_errorRetain(v8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 608);
  if (v13)
  {
    v61 = *(_QWORD *)(v0 + 536);
    v15 = swift_slowAlloc(32, -1);
    v62 = (uint64_t *)swift_slowAlloc(8, -1);
    v66 = swift_slowAlloc(32, -1);
    v69[0] = v66;
    *(_DWORD *)v15 = 138543875;
    swift_errorRetain(v8);
    v16 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 408) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v15 + 4, v15 + 12);
    *v62 = v16;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    *(_WORD *)(v15 + 12) = 2160;
    *(_QWORD *)(v0 + 416) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    *(_QWORD *)(v0 + 360) = dispatch thunk of CustomStringConvertible.description.getter(v61, v17);
    *(_QWORD *)(v0 + 368) = v18;
    v19._countAndFlagsBits = 47;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20 = v17;
    v6 = v0 + 432;
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v61, v20);
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 432) = sub_100016940(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v14, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to update the device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v15, 0x20u);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v62, 1, v22);
    swift_slowDealloc(v62, -1, -1);
    swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    sub_1000126B0(v14, type metadata accessor for DeviceEvent);

  }
  if ((static UUID.== infix(_:_:)(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 504)) & 1) != 0)
  {
    v23 = *(_QWORD *)(v0 + 648);
    v24 = *(_QWORD *)(v0 + 632);
    v25 = *(_QWORD *)(v0 + 592);
    v26 = *(_QWORD *)(v0 + 584);
    v27 = *(_QWORD *)(v0 + 456);
    type metadata accessor for Transaction(0);
    sub_10005972C(v23, v24, type metadata accessor for DeviceEvent);
    v28 = *(unsigned __int8 *)(v26 + 80);
    v29 = (v28 + 24) & ~v28;
    v30 = swift_allocObject(&unk_1010A11D0, v29 + v25, v28 | 7);
    *(_QWORD *)(v30 + 16) = v27;
    sub_1000126EC(v24, v30 + v29, type metadata accessor for DeviceEvent);
    swift_retain();
    static Transaction.asyncTask(name:block:)("latentLocationUpdate", 20, 2, &unk_10110F9B0, v30);
    swift_release();
    v31 = *(unsigned __int8 *)(v23 + 9);
    if (v31 == 7 || v31 == 3 || v31 == 4)
    {
      v52 = (_QWORD *)swift_task_alloc(dword_10110F9BC);
      *(_QWORD *)(v0 + 904) = v52;
      *v52 = v0;
      v52[1] = sub_1009BA918;
      v3 = *(_QWORD *)(v0 + 456);
      v52[15] = v3;
      v4 = sub_1009BB5BC;
      return swift_task_switch(v4, v3, 0);
    }
    v32 = *(_QWORD *)(v0 + 648);
    v33 = *(_QWORD *)(v0 + 568);
    v34 = *(_QWORD *)(v0 + 544);
    v35 = *(_QWORD *)(v0 + 536);
    v36 = *(_QWORD *)(v0 + 504);
    sub_1000126B0(*(_QWORD *)(v0 + 472), type metadata accessor for BeaconIdentifier);
    sub_1000126B0(v36, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    v37 = v32;
  }
  else
  {
    v38 = sub_10005972C(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 624), type metadata accessor for DeviceEvent);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter(v39);
    v41 = os_log_type_enabled(v39, v40);
    v42 = *(_QWORD *)(v0 + 648);
    v43 = *(_QWORD *)(v0 + 624);
    if (v41)
    {
      v67 = *(_QWORD *)(v0 + 648);
      v68 = *(_QWORD *)(v0 + 568);
      v44 = *(_QWORD *)(v0 + 536);
      type = *(_QWORD *)(v0 + 504);
      v65 = *(_QWORD *)(v0 + 544);
      v63 = *(_QWORD *)(v0 + 472);
      v45 = swift_slowAlloc(22, -1);
      v46 = swift_slowAlloc(32, -1);
      v47 = v6;
      v48 = v46;
      v69[0] = v46;
      *(_DWORD *)v45 = 141558275;
      *(_QWORD *)(v0 + 424) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v47, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2081;
      v49 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v44, v49);
      *(_QWORD *)(v0 + 448) = sub_100016940(v50, v51, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v43, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Not publishing event from another device for beacon: %{private,mask.hash}s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      sub_1000126B0(v63, type metadata accessor for BeaconIdentifier);
      sub_1000126B0(type, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v68, v44);
      v37 = v67;
    }
    else
    {
      v53 = *(_QWORD *)(v0 + 568);
      v54 = *(_QWORD *)(v0 + 544);
      v55 = *(_QWORD *)(v0 + 536);
      v56 = *(_QWORD *)(v0 + 504);
      v57 = *(_QWORD *)(v0 + 472);

      sub_1000126B0(v43, type metadata accessor for DeviceEvent);
      sub_1000126B0(v57, type metadata accessor for BeaconIdentifier);
      sub_1000126B0(v56, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
      v37 = v42;
    }
  }
  sub_1000126B0(v37, type metadata accessor for DeviceEvent);
  v58 = *(_QWORD *)(v0 + 752);
  v59 = *(_QWORD *)(v0 + 456);
  v60 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 760) = v60;
  *v60 = v0;
  v60[1] = sub_1009B81E8;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 656), v59, v58, *(_QWORD *)(v0 + 712));
}

uint64_t sub_1009BA304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 880);
  v2 = *(_QWORD *)(v0 + 856);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
  v4 = *(_QWORD *)(v0 + 560);
  v5 = *(_QWORD *)(v0 + 552);
  v6 = *(_QWORD *)(v0 + 544);
  v7 = *(_QWORD *)(v0 + 536);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 808))(v4, *(_QWORD *)(v0 + 648) + *(int *)(v0 + 920) + *(int *)(v0 + 924), v7);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(&unk_1010A11F8, v9 + v5, v8 | 7);
  *(_QWORD *)(v0 + 888) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  *(_QWORD *)(v10 + 24) = v2;
  v3(v10 + v9, v4, v7);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v2);
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 896) = v12;
  *v12 = v0;
  v12[1] = sub_1009BA40C;
  return unsafeBlocking<A>(_:)(v12, sub_1009F84F0, v10, &type metadata for () + 1);
}

uint64_t sub_1009BA40C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 896));
  swift_release();
  return swift_task_switch(sub_1009BA468, *(_QWORD *)(v1 + 880), 0);
}

uint64_t sub_1009BA468()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 456);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1009BA4B4, v1, 0);
}

uint64_t sub_1009BA4B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if ((static UUID.== infix(_:_:)(v0[71], v0[63]) & 1) != 0)
  {
    v1 = v0[81];
    v2 = v0[79];
    v3 = v0[74];
    v4 = v0[73];
    v5 = v0[57];
    type metadata accessor for Transaction(0);
    sub_10005972C(v1, v2, type metadata accessor for DeviceEvent);
    v6 = *(unsigned __int8 *)(v4 + 80);
    v7 = (v6 + 24) & ~v6;
    v8 = swift_allocObject(&unk_1010A11D0, v7 + v3, v6 | 7);
    *(_QWORD *)(v8 + 16) = v5;
    sub_1000126EC(v2, v8 + v7, type metadata accessor for DeviceEvent);
    swift_retain();
    static Transaction.asyncTask(name:block:)("latentLocationUpdate", 20, 2, &unk_10110F9B0, v8);
    swift_release();
    v9 = *(unsigned __int8 *)(v1 + 9);
    if (v9 == 7 || v9 == 3 || v9 == 4)
    {
      v12 = (_QWORD *)swift_task_alloc(dword_10110F9BC);
      v0[113] = v12;
      *v12 = v0;
      v12[1] = sub_1009BA918;
      v13 = v0[57];
      v12[15] = v13;
      return swift_task_switch(sub_1009BB5BC, v13, 0);
    }
    v27 = v0[81];
    v28 = v0[71];
    v29 = v0[68];
    v30 = v0[67];
    v31 = v0[63];
    sub_1000126B0(v0[59], type metadata accessor for BeaconIdentifier);
    sub_1000126B0(v31, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    v32 = v27;
  }
  else
  {
    v15 = sub_10005972C(v0[81], v0[78], type metadata accessor for DeviceEvent);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = v0[81];
    v20 = v0[78];
    if (v18)
    {
      v44 = v0[71];
      v21 = v0[67];
      v42 = v0[63];
      v43 = v0[68];
      v41 = v0[59];
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(32, -1);
      v45 = v23;
      *(_DWORD *)v22 = 141558275;
      v0[53] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 53, v0 + 54, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v21, v24);
      v0[56] = sub_100016940(v25, v26, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 57, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v20, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not publishing event from another device for beacon: %{private,mask.hash}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      sub_1000126B0(v41, type metadata accessor for BeaconIdentifier);
      sub_1000126B0(v42, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v21);
    }
    else
    {
      v33 = v0[71];
      v34 = v0[68];
      v35 = v0[67];
      v36 = v0[63];
      v37 = v0[59];

      sub_1000126B0(v20, type metadata accessor for DeviceEvent);
      sub_1000126B0(v37, type metadata accessor for BeaconIdentifier);
      sub_1000126B0(v36, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
    v32 = v19;
  }
  sub_1000126B0(v32, type metadata accessor for DeviceEvent);
  v38 = v0[94];
  v39 = v0[57];
  v40 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[95] = v40;
  *v40 = v0;
  v40[1] = sub_1009B81E8;
  return AsyncStream.Iterator.next(isolation:)(v0[82], v39, v38, v0[89]);
}

uint64_t sub_1009BA918()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 904);
  *(_QWORD *)(*v1 + 912) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009BB18C;
  else
    v4 = sub_1009BA97C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 456), 0);
}

uint64_t sub_1009BA97C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[81];
  v2 = v0[71];
  v3 = v0[68];
  v4 = v0[67];
  v5 = v0[63];
  sub_1000126B0(v0[59], type metadata accessor for BeaconIdentifier);
  sub_1000126B0(v5, type metadata accessor for DeviceEvent.AttachmentInfo);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1000126B0(v1, type metadata accessor for DeviceEvent);
  v6 = v0[94];
  v7 = v0[57];
  v8 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[95] = v8;
  *v8 = v0;
  v8[1] = sub_1009B81E8;
  return AsyncStream.Iterator.next(isolation:)(v0[82], v7, v6, v0[89]);
}

uint64_t sub_1009BAA48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t type[8];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v1 = v0[108];
  sub_10005972C(v0[81], v0[76], type metadata accessor for DeviceEvent);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v51 = v0[76];
    v52 = v0[67];
    v5 = swift_slowAlloc(32, -1);
    v53 = (uint64_t *)swift_slowAlloc(8, -1);
    v58 = swift_slowAlloc(32, -1);
    v60 = v58;
    *(_DWORD *)v5 = 138543875;
    swift_errorRetain(v1);
    v6 = _swift_stdlib_bridgeErrorToNSError(v1);
    v0[51] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 51, v0 + 52, v5 + 4, v5 + 12);
    *v53 = v6;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v5 + 12) = 2160;
    v0[52] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 52, v0 + 53, v5 + 14, v5 + 22);
    *(_WORD *)(v5 + 22) = 2081;
    v7 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v0[45] = dispatch thunk of CustomStringConvertible.description.getter(v52, v7);
    v0[46] = v8;
    v9._countAndFlagsBits = 47;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v52, v7);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v0[54] = sub_100016940(v0[45], v0[46], &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 54, v0 + 55, v5 + 24, v5 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v51, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to update the device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v5, 0x20u);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v53, 1, v11);
    swift_slowDealloc(v53, -1, -1);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    v12 = v0[76];
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    sub_1000126B0(v12, type metadata accessor for DeviceEvent);

  }
  if ((static UUID.== infix(_:_:)(v0[71], v0[63]) & 1) != 0)
  {
    v13 = v0[81];
    v14 = v0[79];
    v15 = v0[74];
    v16 = v0[73];
    v17 = v0[57];
    type metadata accessor for Transaction(0);
    sub_10005972C(v13, v14, type metadata accessor for DeviceEvent);
    v18 = *(unsigned __int8 *)(v16 + 80);
    v19 = (v18 + 24) & ~v18;
    v20 = swift_allocObject(&unk_1010A11D0, v19 + v15, v18 | 7);
    *(_QWORD *)(v20 + 16) = v17;
    sub_1000126EC(v14, v20 + v19, type metadata accessor for DeviceEvent);
    swift_retain();
    static Transaction.asyncTask(name:block:)("latentLocationUpdate", 20, 2, &unk_10110F9B0, v20);
    swift_release();
    v21 = *(unsigned __int8 *)(v13 + 9);
    if (v21 == 7 || v21 == 3 || v21 == 4)
    {
      v40 = (_QWORD *)swift_task_alloc(dword_10110F9BC);
      v0[113] = v40;
      *v40 = v0;
      v40[1] = sub_1009BA918;
      v41 = v0[57];
      v40[15] = v41;
      return swift_task_switch(sub_1009BB5BC, v41, 0);
    }
    v22 = v0[81];
    v23 = v0[71];
    v24 = v0[68];
    v25 = v0[67];
    v26 = v0[63];
    sub_1000126B0(v0[59], type metadata accessor for BeaconIdentifier);
    sub_1000126B0(v26, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    v27 = v22;
  }
  else
  {
    v28 = sub_10005972C(v0[81], v0[78], type metadata accessor for DeviceEvent);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.info.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v32 = v0[81];
    v33 = v0[78];
    if (v31)
    {
      *(_QWORD *)type = v0[71];
      v59 = v0[81];
      v34 = v0[67];
      v55 = v0[63];
      v56 = v0[68];
      v54 = v0[59];
      v35 = swift_slowAlloc(22, -1);
      v36 = swift_slowAlloc(32, -1);
      v60 = v36;
      *(_DWORD *)v35 = 141558275;
      v0[53] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 53, v0 + 54, v35 + 4, v35 + 12);
      *(_WORD *)(v35 + 12) = 2081;
      v37 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v34, v37);
      v0[56] = sub_100016940(v38, v39, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 57, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v33, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Not publishing event from another device for beacon: %{private,mask.hash}s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      sub_1000126B0(v54, type metadata accessor for BeaconIdentifier);
      sub_1000126B0(v55, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(os_log_type_t *, uint64_t))(v56 + 8))(*(os_log_type_t **)type, v34);
      v27 = v59;
    }
    else
    {
      v43 = v0[71];
      v44 = v0[68];
      v45 = v0[67];
      v46 = v0[63];
      v47 = v0[59];

      sub_1000126B0(v33, type metadata accessor for DeviceEvent);
      sub_1000126B0(v47, type metadata accessor for BeaconIdentifier);
      sub_1000126B0(v46, type metadata accessor for DeviceEvent.AttachmentInfo);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
      v27 = v32;
    }
  }
  sub_1000126B0(v27, type metadata accessor for DeviceEvent);
  v48 = v0[94];
  v49 = v0[57];
  v50 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[95] = v50;
  *v50 = v0;
  v50[1] = sub_1009B81E8;
  return AsyncStream.Iterator.next(isolation:)(v0[82], v49, v48, v0[89]);
}

uint64_t sub_1009BB18C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0[114];
  sub_10005972C(v0[81], v0[75], type metadata accessor for DeviceEvent);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[114];
    v31 = v0[71];
    v32 = v0[81];
    v33 = v0[67];
    v29 = v0[63];
    v30 = v0[68];
    v26 = v0[75];
    v28 = v0[59];
    v6 = swift_slowAlloc(32, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v27 = swift_slowAlloc(32, -1);
    v34 = v27;
    *(_DWORD *)v6 = 138543875;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    v0[48] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 49, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    *(_WORD *)(v6 + 12) = 2160;
    v0[49] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 49, v0 + 50, v6 + 14, v6 + 22);
    *(_WORD *)(v6 + 22) = 2081;
    v9 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v33, v9);
    v0[50] = sub_100016940(v10, v11, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 50, v0 + 51, v6 + 24, v6 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v26, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to publish the device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v6, 0x20u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v12);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
    sub_1000126B0(v28, type metadata accessor for BeaconIdentifier);
    sub_1000126B0(v29, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v33);
    v13 = v32;
  }
  else
  {
    v14 = v0[114];
    v15 = v0[81];
    v16 = v0[75];
    v17 = v0[71];
    v18 = v0[68];
    v19 = v0[67];
    v20 = v0[63];
    v21 = v0[59];

    sub_1000126B0(v16, type metadata accessor for DeviceEvent);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    sub_1000126B0(v21, type metadata accessor for BeaconIdentifier);
    sub_1000126B0(v20, type metadata accessor for DeviceEvent.AttachmentInfo);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v13 = v15;
  }
  sub_1000126B0(v13, type metadata accessor for DeviceEvent);
  v22 = v0[94];
  v23 = v0[57];
  v24 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[95] = v24;
  *v24 = v0;
  v24[1] = sub_1009B81E8;
  return AsyncStream.Iterator.next(isolation:)(v0[82], v23, v22, v0[89]);
}

uint64_t sub_1009BB550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110F344);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_1009BB858(a2);
}

uint64_t sub_1009BB5A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return swift_task_switch(sub_1009BB5BC, v0, 0);
}

uint64_t sub_1009BB5BC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCE8 + dword_1010EBCE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBCEC);
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = sub_1009BB6A8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009BB6A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009BB704, v3, 0);
}

uint64_t sub_1009BB704()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 136))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10110181C);
    *(_QWORD *)(v0 + 144) = v2;
    *v2 = v0;
    v2[1] = sub_1009BB7C0;
    return sub_10061A894();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD00000000000001CLL;
    v6[1] = 0x8000000100ECBC60;
    swift_willThrow(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009BB7C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009BB824;
  else
    v4 = sub_10061572C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), 0);
}

uint64_t sub_1009BB824()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009BB858(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[27] = a1;
  v2[28] = v1;
  v3 = type metadata accessor for Date(0);
  v2[29] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[30] = v4;
  v2[31] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DeviceEvent(0);
  v2[32] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[33] = swift_task_alloc(v6);
  v2[34] = swift_task_alloc(v6);
  v2[35] = swift_task_alloc(v6);
  v2[36] = swift_task_alloc(v6);
  v2[37] = swift_task_alloc(v6);
  v2[38] = swift_task_alloc(v6);
  v7 = type metadata accessor for DeviceEvent.Location(0);
  v2[39] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[40] = v8;
  v2[41] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1011003F0);
  v2[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009BB968, v1, 0);
}

uint64_t sub_1009BB968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 216);
  if (*(_BYTE *)(v1 + 9) == 6)
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Not updating existing location for the disappeared device event.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
  else
  {
    v7 = *(_QWORD *)(v0 + 336);
    v8 = *(_QWORD *)(v0 + 312);
    v9 = *(_QWORD *)(v0 + 320);
    sub_10000F9B8(v1 + *(int *)(*(_QWORD *)(v0 + 256) + 28), v7, &qword_1011003F0);
    LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
    sub_100004048(v7, &qword_1011003F0);
    if ((_DWORD)v8 == 1)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_locationPublisher);
      *(_QWORD *)(v0 + 344) = v10;
      return swift_task_switch(sub_1009BBD4C, v10, 0);
    }
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v12 = *(_QWORD *)(v0 + 272);
    v13 = *(_QWORD *)(v0 + 216);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_10110F2A8);
    v15 = sub_10005972C(v13, v12, type metadata accessor for DeviceEvent);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 272);
    if (v18)
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(32, -1);
      v34 = v21;
      *(_DWORD *)v20 = 141558275;
      *(_QWORD *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2081;
      type metadata accessor for BeaconIdentifier(0);
      v22 = type metadata accessor for UUID(0);
      v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
      *(_QWORD *)(v0 + 208) = sub_100016940(v24, v25, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v19, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not updating existing location for the device event for beacon: %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 272), type metadata accessor for DeviceEvent);
    }

  }
  v26 = *(_QWORD *)(v0 + 328);
  v28 = *(_QWORD *)(v0 + 296);
  v27 = *(_QWORD *)(v0 + 304);
  v30 = *(_QWORD *)(v0 + 280);
  v29 = *(_QWORD *)(v0 + 288);
  v32 = *(_QWORD *)(v0 + 264);
  v31 = *(_QWORD *)(v0 + 272);
  v33 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009BBD4C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 344) + 112), *(_QWORD *)(*(_QWORD *)(v0 + 344) + 136));
  v1 = (_QWORD *)swift_task_alloc(dword_10111677C);
  *(_QWORD *)(v0 + 352) = v1;
  *v1 = v0;
  v1[1] = sub_1009BBDA4;
  return sub_100B8CF38();
}

uint64_t sub_1009BBDA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 352);
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[43];
    v6 = sub_1009BC2D4;
  }
  else
  {
    v5 = v3[28];
    v6 = sub_1009BBE14;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1009BBE14()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t (__cdecl *v47)();
  uint64_t v48;

  v1 = *(void **)(v0 + 360);
  if (v1)
  {
    v46 = (__int128 *)(v0 + 16);
    v2 = *(_QWORD **)(v0 + 328);
    v4 = *(_QWORD *)(v0 + 304);
    v3 = *(_QWORD *)(v0 + 312);
    v5 = *(int **)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 240);
    v44 = *(_QWORD *)(v0 + 232);
    v45 = *(_QWORD *)(v0 + 320);
    v7 = *(uint64_t **)(v0 + 216);
    objc_msgSend(v1, "coordinate");
    v9 = v8;
    objc_msgSend(v1, "coordinate");
    v11 = v10;
    objc_msgSend(v1, "horizontalAccuracy");
    v13 = v12;
    v14 = objc_msgSend(v1, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

    *v2 = v9;
    v2[1] = v11;
    v2[2] = v13;
    v15 = *v7;
    v16 = *((_BYTE *)v7 + 8);
    v17 = *((_BYTE *)v7 + 9);
    v18 = v5[6];
    *(_DWORD *)(v0 + 408) = v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4 + v18, (uint64_t)v7 + v18, v44);
    v19 = v4 + v5[7];
    sub_10005972C((uint64_t)v2, v19, type metadata accessor for DeviceEvent.Location);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v19, 0, 1, v3);
    sub_10000F9B8((uint64_t)v7 + v5[8], v4 + v5[8], &qword_1010EF480);
    sub_10005972C((uint64_t)v7 + v5[9], v4 + v5[9], type metadata accessor for BeaconIdentifier);
    static Date.trustedNow.getter(v4 + v5[10]);
    *(_QWORD *)v4 = v15;
    *(_BYTE *)(v4 + 8) = v16;
    *(_BYTE *)(v4 + 9) = v17;
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v46, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 40))
    {
      sub_10000F9FC(v46, v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v47 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
      v21 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
      *(_QWORD *)(v0 + 376) = v21;
      *v21 = v0;
      v21[1] = sub_1009BC5A0;
      return v47();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v22 = *(_QWORD *)(v0 + 280);
    v23 = *(_QWORD *)(v0 + 216);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_10110F2A8);
    v25 = sub_10005972C(v23, v22, type metadata accessor for DeviceEvent);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    v28 = os_log_type_enabled(v26, v27);
    v29 = *(_QWORD *)(v0 + 280);
    if (v28)
    {
      v30 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(32, -1);
      v48 = v31;
      *(_DWORD *)v30 = 141558275;
      *(_QWORD *)(v0 + 128) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2081;
      type metadata accessor for BeaconIdentifier(0);
      v32 = type metadata accessor for UUID(0);
      v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
      *(_QWORD *)(v0 + 120) = sub_100016940(v34, v35, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v29, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to update location for the device eventfor beacon: %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 280), type metadata accessor for DeviceEvent);
    }

    v36 = *(_QWORD *)(v0 + 328);
    v38 = *(_QWORD *)(v0 + 296);
    v37 = *(_QWORD *)(v0 + 304);
    v40 = *(_QWORD *)(v0 + 280);
    v39 = *(_QWORD *)(v0 + 288);
    v42 = *(_QWORD *)(v0 + 264);
    v41 = *(_QWORD *)(v0 + 272);
    v43 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1009BC2D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  swift_errorRelease(*(_QWORD *)(v0 + 368));
  return swift_task_switch(sub_1009BC314, v1, 0);
}

uint64_t sub_1009BC314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_10110F2A8);
  v4 = sub_10005972C(v2, v1, type metadata accessor for DeviceEvent);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 280);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v24 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    type metadata accessor for BeaconIdentifier(0);
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 120) = sub_100016940(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to update location for the device eventfor beacon: %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 280), type metadata accessor for DeviceEvent);
  }

  v15 = *(_QWORD *)(v0 + 328);
  v17 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 304);
  v19 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 288);
  v21 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 272);
  v22 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009BC5A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009BC600, v3, 0);
}

uint64_t sub_1009BC600()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t type;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 384))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10111BB0C);
    *(_QWORD *)(v0 + 392) = v2;
    *v2 = v0;
    v2[1] = sub_1009BCA50;
    return sub_100C67B74(*(_QWORD *)(v0 + 304));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100350CCC();
    v5 = swift_allocError(&type metadata for PencilPairingService.Error, v4, 0, 0);
    *(_OWORD *)v6 = xmmword_100E58200;
    *(_BYTE *)(v6 + 16) = 3;
    swift_willThrow(v5);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v7 = *(_QWORD *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 216);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_10110F2A8);
    sub_10005972C(v8, v7, type metadata accessor for DeviceEvent);
    swift_errorRetain(v5);
    v10 = swift_errorRetain(v5);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(void **)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 328);
    v16 = *(_QWORD *)(v0 + 304);
    v17 = *(_QWORD *)(v0 + 264);
    if (v13)
    {
      v38 = *(void **)(v0 + 360);
      v39 = *(_QWORD *)(v0 + 304);
      type = v12;
      v18 = swift_slowAlloc(32, -1);
      v19 = (uint64_t *)swift_slowAlloc(8, -1);
      v36 = swift_slowAlloc(32, -1);
      v40 = v36;
      *(_DWORD *)v18 = 138543875;
      swift_errorRetain(v5);
      v37 = v15;
      v20 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(_QWORD *)(v0 + 136) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v18 + 4, v18 + 12);
      *v19 = v20;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      *(_WORD *)(v18 + 12) = 2160;
      *(_QWORD *)(v0 + 144) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v18 + 14, v18 + 22);
      *(_WORD *)(v18 + 22) = 2081;
      type metadata accessor for BeaconIdentifier(0);
      v21 = type metadata accessor for UUID(0);
      v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
      *(_QWORD *)(v0 + 152) = sub_100016940(v23, v24, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v18 + 24, v18 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v17, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v11, type, "Failed to update location for the device event, error: %{public}@ for beacon: %{private,mask.hash}s", (uint8_t *)v18, 0x20u);
      v25 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v19, 1, v25);
      swift_slowDealloc(v19, -1, -1);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(v5);
      sub_1000126B0(v39, type metadata accessor for DeviceEvent);
      v26 = v37;
    }
    else
    {

      sub_1000126B0(v17, type metadata accessor for DeviceEvent);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      sub_1000126B0(v16, type metadata accessor for DeviceEvent);
      v26 = v15;
    }
    sub_1000126B0(v26, type metadata accessor for DeviceEvent.Location);
    v27 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 296);
    v28 = *(_QWORD *)(v0 + 304);
    v31 = *(_QWORD *)(v0 + 280);
    v30 = *(_QWORD *)(v0 + 288);
    v33 = *(_QWORD *)(v0 + 264);
    v32 = *(_QWORD *)(v0 + 272);
    v34 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009BCA50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 392);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 224);
    v5 = sub_1009BCFC4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 224);
    swift_release();
    v5 = sub_1009BCAC4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009BCAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  double v6;
  void (*v7)(uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t type;
  uint64_t v50;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 216) + *(int *)(v0 + 408);
  v5 = objc_msgSend(*(id *)(v0 + 360), "timestamp");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v5);

  v6 = Date.timeIntervalSince(_:)(v4);
  v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v1, v3);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v8 = *(void **)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 288);
  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 216);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_10110F2A8);
  sub_10005972C(v11, v10, type metadata accessor for DeviceEvent);
  sub_10005972C(v11, v9, type metadata accessor for DeviceEvent);
  v13 = Logger.logObject.getter(v8);
  v14 = static os_log_type_t.info.getter(v13);
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(void **)(v0 + 360);
  v17 = *(_QWORD *)(v0 + 328);
  v19 = *(_QWORD *)(v0 + 296);
  v18 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 288);
  if (v15)
  {
    type = v14;
    v46 = *(_QWORD *)(v0 + 288);
    v43 = *(_QWORD *)(v0 + 248);
    v44 = *(_QWORD *)(v0 + 232);
    v45 = v7;
    v21 = swift_slowAlloc(52, -1);
    v48 = swift_slowAlloc(96, -1);
    v50 = v48;
    *(_DWORD *)v21 = 141559043;
    *(_QWORD *)(v0 + 160) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    type metadata accessor for BeaconIdentifier(0);
    v47 = v17;
    v22 = type metadata accessor for UUID(0);
    v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    *(_QWORD *)(v0 + 168) = sub_100016940(v24, v25, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v19, type metadata accessor for DeviceEvent);
    *(_WORD *)(v21 + 22) = 2082;
    v26 = objc_msgSend(v16, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v27 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v44, v27);
    v30 = v29;
    v45(v43, v44);
    *(_QWORD *)(v0 + 176) = sub_100016940(v28, v30, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease();

    *(_WORD *)(v21 + 32) = 2082;
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v44, v27);
    *(_QWORD *)(v0 + 184) = sub_100016940(v31, v32, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v21 + 34, v21 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v46, type metadata accessor for DeviceEvent);
    *(_WORD *)(v21 + 42) = 2048;
    *(double *)(v0 + 192) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v21 + 44, v21 + 52);
    _os_log_impl((void *)&_mh_execute_header, v13, type, "Updated existing device event location for beacon: %{private,mask.hash}s. Location timestamp: %{public}s, eventTimestamp: %{public}s, delta: %f.", (uint8_t *)v21, 0x34u);
    swift_arrayDestroy(v48, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    sub_1000126B0(v18, type metadata accessor for DeviceEvent);
    v33 = v47;
  }
  else
  {

    sub_1000126B0(v20, type metadata accessor for DeviceEvent);
    sub_1000126B0(v19, type metadata accessor for DeviceEvent);

    sub_1000126B0(v18, type metadata accessor for DeviceEvent);
    v33 = v17;
  }
  sub_1000126B0(v33, type metadata accessor for DeviceEvent.Location);
  v34 = *(_QWORD *)(v0 + 328);
  v36 = *(_QWORD *)(v0 + 296);
  v35 = *(_QWORD *)(v0 + 304);
  v38 = *(_QWORD *)(v0 + 280);
  v37 = *(_QWORD *)(v0 + 288);
  v40 = *(_QWORD *)(v0 + 264);
  v39 = *(_QWORD *)(v0 + 272);
  v41 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009BCFC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  swift_release();
  v1 = *(_QWORD *)(v0 + 400);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_10110F2A8);
  sub_10005972C(v3, v2, type metadata accessor for DeviceEvent);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(void **)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 264);
  if (v8)
  {
    v34 = *(void **)(v0 + 360);
    v35 = *(_QWORD *)(v0 + 304);
    type = v7;
    v13 = swift_slowAlloc(32, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v32 = swift_slowAlloc(32, -1);
    v36 = v32;
    *(_DWORD *)v13 = 138543875;
    swift_errorRetain(v1);
    v33 = v10;
    v15 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 136) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 4, v13 + 12);
    *v14 = v15;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v13 + 12) = 2160;
    *(_QWORD *)(v0 + 144) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    type metadata accessor for BeaconIdentifier(0);
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    *(_QWORD *)(v0 + 152) = sub_100016940(v18, v19, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v12, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Failed to update location for the device event, error: %{public}@ for beacon: %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v14, 1, v20);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v1);
    sub_1000126B0(v35, type metadata accessor for DeviceEvent);
    v21 = v33;
  }
  else
  {

    sub_1000126B0(v12, type metadata accessor for DeviceEvent);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    sub_1000126B0(v11, type metadata accessor for DeviceEvent);
    v21 = v10;
  }
  sub_1000126B0(v21, type metadata accessor for DeviceEvent.Location);
  v22 = *(_QWORD *)(v0 + 328);
  v24 = *(_QWORD *)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 304);
  v26 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 288);
  v28 = *(_QWORD *)(v0 + 264);
  v27 = *(_QWORD *)(v0 + 272);
  v29 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009BD388()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1[30] = v0;
  v2 = sub_10001A9A8(&qword_1010EF7C8);
  v1[31] = v2;
  v1[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_1010EF7C0);
  v1[33] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[34] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[35] = swift_task_alloc(v5);
  v1[36] = swift_task_alloc(v5);
  v6 = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  v1[37] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[38] = swift_task_alloc(v7);
  v1[39] = swift_task_alloc(v7);
  v1[40] = swift_task_alloc(v7);
  v8 = sub_10001A9A8(&qword_10110F980);
  v1[41] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessoryConnectionService.Event(0);
  v1[42] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[43] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[44] = swift_task_alloc(v11);
  v1[45] = swift_task_alloc(v11);
  v1[46] = swift_task_alloc(v11);
  v1[47] = swift_task_alloc(v11);
  v1[48] = swift_task_alloc(v11);
  v12 = sub_10001A9A8(&qword_1010EF1D0);
  v1[49] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[50] = v13;
  v1[51] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F9890) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[52] = swift_task_alloc(v14);
  v1[53] = swift_task_alloc(v14);
  v1[54] = swift_task_alloc(v14);
  v15 = type metadata accessor for UUID(0);
  v1[55] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[56] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[57] = swift_task_alloc(v17);
  v1[58] = swift_task_alloc(v17);
  v1[59] = swift_task_alloc(v17);
  v1[60] = swift_task_alloc(v17);
  v1[61] = swift_task_alloc(v17);
  v1[62] = swift_task_alloc(v17);
  v1[63] = swift_task_alloc(v17);
  v1[64] = swift_task_alloc(v17);
  v1[65] = swift_task_alloc(v17);
  v1[66] = swift_task_alloc(v17);
  v1[67] = swift_task_alloc(v17);
  v1[68] = swift_task_alloc(v17);
  v1[69] = swift_task_alloc(v17);
  v1[70] = swift_task_alloc(v17);
  v18 = sub_10001A9A8(&qword_10110F988);
  v1[71] = v18;
  v19 = (*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[72] = swift_task_alloc(v19);
  v1[73] = swift_task_alloc(v19);
  v1[74] = swift_task_alloc(v19);
  v20 = sub_10001A9A8(&qword_10110F990);
  v1[75] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v1[76] = v21;
  v1[77] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_10110F998);
  v1[78] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v1[79] = v23;
  v1[80] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009BD6B4, v0, 0);
}

uint64_t sub_1009BD6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD28 + dword_1010EBD28);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBD2C);
    *(_QWORD *)(v0 + 648) = v3;
    *v3 = v0;
    v3[1] = sub_1009BD7B4;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009BD7B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 648);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 656) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009BD814, v3, 0);
}

uint64_t sub_1009BD814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 656);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1009BDB1C, *(_QWORD *)(v0 + 656), 0);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_10110F2A8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing AccessoryConnectionService", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 616);
  v9 = *(_QWORD *)(v0 + 592);
  v10 = *(_QWORD *)(v0 + 584);
  v11 = *(_QWORD *)(v0 + 576);
  v12 = *(_QWORD *)(v0 + 560);
  v13 = *(_QWORD *)(v0 + 552);
  v14 = *(_QWORD *)(v0 + 544);
  v15 = *(_QWORD *)(v0 + 536);
  v16 = *(_QWORD *)(v0 + 528);
  v17 = *(_QWORD *)(v0 + 520);
  v18 = *(_QWORD *)(v0 + 512);
  v19 = *(_QWORD *)(v0 + 504);
  v20 = *(_QWORD *)(v0 + 496);
  v21 = *(_QWORD *)(v0 + 488);
  v22 = *(_QWORD *)(v0 + 480);
  v23 = *(_QWORD *)(v0 + 472);
  v24 = *(_QWORD *)(v0 + 464);
  v25 = *(_QWORD *)(v0 + 456);
  v26 = *(_QWORD *)(v0 + 432);
  v27 = *(_QWORD *)(v0 + 424);
  v28 = *(_QWORD *)(v0 + 416);
  v29 = *(_QWORD *)(v0 + 408);
  v30 = *(_QWORD *)(v0 + 384);
  v31 = *(_QWORD *)(v0 + 376);
  v32 = *(_QWORD *)(v0 + 368);
  v33 = *(_QWORD *)(v0 + 360);
  v34 = *(_QWORD *)(v0 + 352);
  v35 = *(_QWORD *)(v0 + 328);
  v36 = *(_QWORD *)(v0 + 320);
  v37 = *(_QWORD *)(v0 + 312);
  v38 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 288);
  v40 = *(_QWORD *)(v0 + 280);
  v41 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 640));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1009BDB1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, unint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v1 = v0[82];
  v41 = v0[71];
  v51 = v0[56];
  v39 = v0[49];
  v40 = v0[50];
  v38 = v0[43];
  swift_beginAccess(v1 + 144, v0 + 15, 0, 0);
  v2 = *(_QWORD *)(v1 + 144);
  v36 = v2 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v37 = (unint64_t)(63 - v4) >> 6;
  v42 = v2;
  v6 = swift_bridgeObjectRetain_n(v2, 2);
  v7 = 0;
  v8 = _swiftEmptyArrayStorage;
  v52 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v49 = (v5 - 1) & v5;
  v50 = v7;
  for (i = __clz(__rbit64(v5)) | (v7 << 6); ; i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    v14 = v0[74];
    v15 = v0[73];
    v16 = v0[72];
    v17 = v0[55];
    v46 = v0[70];
    v47 = v0[54];
    v45 = v0[51];
    v18 = v0[48];
    v48 = v0[42];
    v19 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v51 + 16);
    v19(v14, *(_QWORD *)(v42 + 48) + *(_QWORD *)(v51 + 72) * i, v17, v6);
    sub_10000F9B8(*(_QWORD *)(v42 + 56) + *(_QWORD *)(v40 + 72) * i, v14 + *(int *)(v41 + 48), &qword_1010EF1D0);
    sub_100005CF0(v14, v15, &qword_10110F988);
    v20 = *(int *)(v41 + 48);
    v21 = v16 + v20 + *(int *)(v39 + 64);
    v22 = (char *)(v15 + v20);
    ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v16, v15, v17);
    v43 = *v22;
    v44 = v22[1];
    sub_10000F9B8((uint64_t)&v22[*(int *)(v39 + 64)], v21, (uint64_t *)&unk_1010F9890);
    v23 = v45 + *(int *)(v39 + 64);
    sub_100005CF0(v21, v23, (uint64_t *)&unk_1010F9890);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v46, v16, v17);
    sub_100005CF0(v23, v47, (uint64_t *)&unk_1010F9890);
    v24 = (int *)sub_10001A9A8((uint64_t *)&unk_101103958);
    v25 = v24[12];
    v26 = v18 + v24[16];
    v27 = v24[20];
    ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v18, v46, v17);
    *(_BYTE *)(v18 + v25) = v43;
    sub_10000F9B8(v47, v26, (uint64_t *)&unk_1010F9890);
    *(_BYTE *)(v18 + v27) = v44;
    swift_storeEnumTagMultiPayload(v18, v48, 0);
    v8 = v52;
    if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
      v8 = (_QWORD *)sub_1007CA27C(0, v52[2] + 1, 1, (unint64_t)v52);
    v29 = v8[2];
    v28 = v8[3];
    if (v29 >= v28 >> 1)
      v8 = (_QWORD *)sub_1007CA27C(v28 > 1, v29 + 1, 1, (unint64_t)v8);
    v30 = v0[73];
    v31 = v0[70];
    v33 = v0[54];
    v32 = v0[55];
    v34 = v0[48];
    v8[2] = v29 + 1;
    sub_1000126EC(v34, (uint64_t)v8+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v29, type metadata accessor for AccessoryConnectionService.Event);
    sub_100004048(v33, (uint64_t *)&unk_1010F9890);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v31, v32);
    sub_100004048(v30, &qword_10110F988);
    v7 = v50;
    v5 = v49;
    v52 = v8;
    if (v49)
      goto LABEL_4;
LABEL_5:
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v37)
      goto LABEL_27;
    v11 = *(_QWORD *)(v36 + 8 * v10);
    v12 = v7 + 1;
    if (!v11)
    {
      v12 = v7 + 2;
      if (v7 + 2 >= v37)
        goto LABEL_27;
      v11 = *(_QWORD *)(v36 + 8 * v12);
      if (!v11)
      {
        v12 = v7 + 3;
        if (v7 + 3 >= v37)
          goto LABEL_27;
        v11 = *(_QWORD *)(v36 + 8 * v12);
        if (!v11)
        {
          v12 = v7 + 4;
          if (v7 + 4 >= v37)
            goto LABEL_27;
          v11 = *(_QWORD *)(v36 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_20:
    v49 = (v11 - 1) & v11;
    v50 = v12;
  }
  v13 = v7 + 5;
  if (v7 + 5 >= v37)
  {
LABEL_27:
    v35 = v0[30];
    swift_release();
    swift_bridgeObjectRelease();
    AsyncStreamProvider.stream(initialEvents:)(v8);
    swift_bridgeObjectRelease();
    swift_task_switch(sub_1009BDFA8, v35, 0);
    return;
  }
  v11 = *(_QWORD *)(v36 + 8 * v13);
  if (v11)
  {
    v12 = v7 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v37)
      goto LABEL_27;
    v11 = *(_QWORD *)(v36 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_1009BDFA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[77];
  v2 = v0[76];
  v3 = v0[75];
  v4 = v0[30];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[83] = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v5 = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory;
  v0[84] = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory;
  v0[85] = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_peripheralStreamProvider;
  swift_beginAccess(v4 + v5, v0 + 18, 0, 0);
  v6 = v0[83];
  v7 = v0[30];
  v8 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[86] = v8;
  *v8 = v0;
  v8[1] = sub_1009BE09C;
  return AsyncStream.Iterator.next(isolation:)(v0[41], v7, v6, v0[78]);
}

uint64_t sub_1009BE09C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 688));
  return swift_task_switch(sub_1009BE0F4, v1, 0);
}

uint64_t sub_1009BE0F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v1 = *(_QWORD **)(v0 + 328);
  v2 = sub_10001A9A8(&qword_10110F9A0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 632) + 8))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 624));
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_10110F2A8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "accessoryConnectionService.stream() terminated", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    swift_release();
    v8 = *(_QWORD *)(v0 + 616);
    v9 = *(_QWORD *)(v0 + 592);
    v10 = *(_QWORD *)(v0 + 584);
    v11 = *(_QWORD *)(v0 + 576);
    v12 = *(_QWORD *)(v0 + 560);
    v13 = *(_QWORD *)(v0 + 552);
    v14 = *(_QWORD *)(v0 + 544);
    v15 = *(_QWORD *)(v0 + 536);
    v16 = *(_QWORD *)(v0 + 528);
    v68 = *(_QWORD *)(v0 + 520);
    v69 = *(_QWORD *)(v0 + 512);
    v70 = *(_QWORD *)(v0 + 504);
    v71 = *(_QWORD *)(v0 + 496);
    v72 = *(_QWORD *)(v0 + 488);
    v73 = *(_QWORD *)(v0 + 480);
    v74 = *(_QWORD *)(v0 + 472);
    v75 = *(_QWORD *)(v0 + 464);
    v76 = *(_QWORD *)(v0 + 456);
    v77 = *(_QWORD *)(v0 + 432);
    v78 = *(_QWORD *)(v0 + 424);
    v79 = *(_QWORD *)(v0 + 416);
    v80 = *(_QWORD *)(v0 + 408);
    v81 = *(_QWORD *)(v0 + 384);
    v82 = *(_QWORD *)(v0 + 376);
    v83 = *(_QWORD *)(v0 + 368);
    v84 = *(_QWORD *)(v0 + 360);
    v85 = *(_QWORD *)(v0 + 352);
    v86 = *(_QWORD *)(v0 + 328);
    v87 = *(_QWORD *)(v0 + 320);
    v88 = *(_QWORD *)(v0 + 312);
    v89 = *(_QWORD *)(v0 + 304);
    v90 = *(_QWORD *)(v0 + 288);
    v91 = *(_QWORD *)(v0 + 280);
    v92 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 640));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 376);
    v20 = *(_QWORD *)(v0 + 336);
    *(_QWORD *)(v0 + 696) = *v1;
    sub_1000126EC((uint64_t)v1 + *(int *)(v2 + 48), v18, type metadata accessor for AccessoryConnectionService.Event);
    sub_10005972C(v18, v19, type metadata accessor for AccessoryConnectionService.Event);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v20);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v22 = *(_QWORD *)(v0 + 544);
        v24 = *(_QWORD *)(v0 + 440);
        v23 = *(_QWORD *)(v0 + 448);
        v25 = *(_QWORD *)(v0 + 416);
        v26 = *(_QWORD *)(v0 + 368);
        v27 = *(_QWORD *)(v0 + 320);
        v28 = *(_QWORD *)(v0 + 296);
        v29 = *(_QWORD *)(v0 + 240) + *(_QWORD *)(v0 + 672);
        v30 = v26 + *(int *)(sub_10001A9A8(&qword_101103968) + 48);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v22, v26, v24);
        sub_100005CF0(v30, v25, (uint64_t *)&unk_1010F9890);
        sub_10005972C(v29, v27, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
        v31 = (char *)&loc_1009BE4F8 + 4 * byte_100E582AC[swift_getEnumCaseMultiPayload(v27, v28)];
        __asm { BR              X10 }
      }
      v46 = *(_QWORD *)(v0 + 312);
      v47 = *(_QWORD *)(v0 + 296);
      v48 = *(_QWORD *)(v0 + 240) + *(_QWORD *)(v0 + 672);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 448) + 32))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 440));
      sub_10005972C(v48, v46, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
      v49 = (char *)&loc_1009BE654 + 4 * word_100E582A4[swift_getEnumCaseMultiPayload(v46, v47)];
      __asm { BR              X10 }
    }
    v32 = *(_QWORD *)(v0 + 552);
    v33 = *(_QWORD *)(v0 + 440);
    v34 = *(_QWORD *)(v0 + 448);
    v35 = *(_QWORD *)(v0 + 424);
    v36 = *(_QWORD *)(v0 + 368);
    v37 = (int *)sub_10001A9A8((uint64_t *)&unk_101103958);
    v38 = *(_BYTE *)(v36 + v37[12]);
    v39 = v36 + v37[16];
    v40 = *(_BYTE *)(v36 + v37[20]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v32, v36, v33);
    sub_100005CF0(v39, v35, (uint64_t *)&unk_1010F9890);
    if (((1 << v38) & 0x6BF) != 0)
    {
      v41 = *(_QWORD *)(v0 + 552);
      v43 = *(_QWORD *)(v0 + 440);
      v42 = *(_QWORD *)(v0 + 448);
      v44 = *(_QWORD *)(v0 + 424);
      v45 = *(_QWORD *)(v0 + 376);
      swift_release();
      sub_100004048(v44, (uint64_t *)&unk_1010F9890);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
      sub_1000126B0(v45, type metadata accessor for AccessoryConnectionService.Event);
      v65 = *(_QWORD *)(v0 + 664);
      v66 = *(_QWORD *)(v0 + 240);
      v67 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
      *(_QWORD *)(v0 + 688) = v67;
      *v67 = v0;
      v67[1] = sub_1009BE09C;
      return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 328), v66, v65, *(_QWORD *)(v0 + 624));
    }
    else
    {
      if (qword_1010EA100 != -1)
        swift_once(&qword_1010EA100, sub_1009B44BC);
      v50 = *(_QWORD *)(v0 + 376);
      v51 = *(_QWORD *)(v0 + 360);
      v52 = type metadata accessor for Logger(0);
      sub_10001A9E8(v52, (uint64_t)qword_10110F2A8);
      v53 = sub_10005972C(v50, v51, type metadata accessor for AccessoryConnectionService.Event);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.default.getter(v54);
      v56 = os_log_type_enabled(v54, v55);
      v57 = *(_QWORD *)(v0 + 360);
      if (v56)
      {
        v58 = *(_QWORD *)(v0 + 352);
        v59 = *(_QWORD *)(v0 + 336);
        v60 = swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v93 = v61;
        *(_DWORD *)v60 = 136315138;
        sub_10005972C(v57, v58, type metadata accessor for AccessoryConnectionService.Event);
        v62 = String.init<A>(describing:)(v58, v59);
        *(_QWORD *)(v60 + 4) = sub_100016940(v62, v63, &v93);
        swift_bridgeObjectRelease();
        sub_1000126B0(v57, type metadata accessor for AccessoryConnectionService.Event);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "raw accessoryConnectionService event: %s", (uint8_t *)v60, 0xCu);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v0 + 360), type metadata accessor for AccessoryConnectionService.Event);
      }

      v64 = (_QWORD *)swift_task_alloc(dword_10110F35C);
      *(_QWORD *)(v0 + 704) = v64;
      *v64 = v0;
      v64[1] = sub_1009BF44C;
      return sub_1009C61B8(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 424), v40);
    }
  }
}

uint64_t sub_1009BF44C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 704));
  return swift_task_switch(sub_1009BF4A4, v1, 0);
}

uint64_t sub_1009BF4A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[69];
  v2 = v0[55];
  v3 = v0[56];
  v4 = v0[53];
  v5 = v0[47];
  swift_release();
  sub_100004048(v4, (uint64_t *)&unk_1010F9890);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_1000126B0(v5, type metadata accessor for AccessoryConnectionService.Event);
  v6 = v0[83];
  v7 = v0[30];
  v8 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[86] = v8;
  *v8 = v0;
  v8[1] = sub_1009BE09C;
  return AsyncStream.Iterator.next(isolation:)(v0[41], v7, v6, v0[78]);
}

uint64_t sub_1009BF564()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 712));
  return swift_task_switch(sub_1009BF5BC, v1, 0);
}

uint64_t sub_1009BF5BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[68];
  v2 = v0[55];
  v3 = v0[56];
  v4 = v0[52];
  v5 = v0[47];
  swift_release();
  sub_100004048(v4, (uint64_t *)&unk_1010F9890);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_1000126B0(v5, type metadata accessor for AccessoryConnectionService.Event);
  v6 = v0[83];
  v7 = v0[30];
  v8 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[86] = v8;
  *v8 = v0;
  v8[1] = sub_1009BE09C;
  return AsyncStream.Iterator.next(isolation:)(v0[41], v7, v6, v0[78]);
}

uint64_t sub_1009BF67C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[4] = v0;
  v1[5] = *v0;
  v2 = type metadata accessor for CentralManager.ConnectedState(0);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8((uint64_t *)&unk_1011171C0);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_10110F948);
  v1[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[9] = v5;
  v1[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1011171D0);
  v1[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[12] = v7;
  v1[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009BF758, v0, 0);
}

uint64_t sub_1009BF758()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v0[14] = *(_QWORD *)(v0[4] + 144);
  v1 = sub_10001A9A8((uint64_t *)&unk_101117030);
  v2 = type metadata accessor for CentralManager.State(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  v0[15] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  v8 = v7 + v6;
  v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104);
  v9(v8, enum case for CentralManager.State.poweredOn(_:), v2);
  v9(v8 + v4, enum case for CentralManager.State.restricted(_:), v2);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(states:)[1]);
  v0[16] = v10;
  v11 = type metadata accessor for CentralManager(0);
  v0[17] = v11;
  v12 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v10 = v0;
  v10[1] = sub_1009BF884;
  return CentralManagerProtocol.await(states:)(v7, v11, v12);
}

uint64_t sub_1009BF884()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 32);
    v5 = sub_1009C00A8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 32);
    swift_bridgeObjectRelease();
    v5 = sub_1009BF8F8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009BF8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = sub_10001A9A8(&qword_1010EC650);
  v3 = sub_10001A9A8(&qword_1010EC448);
  v4 = swift_allocObject(v2, ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v3 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) | 7);
  *(_QWORD *)(v0 + 152) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100E22B00;
  v5 = type metadata accessor for Service(0);
  Identifier.init(stringLiteral:)("FD44", 4, 2, v5);
  v6 = sub_100006204((unint64_t *)&unk_1011171E0, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v1, v6);
  return swift_task_switch(sub_1009BF9E4, v7, v8);
}

uint64_t sub_1009BF9E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;

  v1 = v0[18];
  dispatch thunk of CentralManager.connectionEvents(serviceIdentifiers:)(v0[19]);
  v0[20] = v1;
  if (v1)
  {
    v2 = v0[4];
    v3 = sub_1009C029C;
  }
  else
  {
    v4 = v0[4];
    swift_bridgeObjectRelease();
    v3 = sub_1009BFA50;
    v2 = v4;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_1009BFA50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  AsyncStream.makeAsyncIterator()(v0[11]);
  v1 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v2 = v0[20];
  v0[21] = v1;
  v0[22] = v2;
  v3 = v0[4];
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[23] = v4;
  *v4 = v0;
  v4[1] = sub_1009BFAEC;
  return AsyncStream.Iterator.next(isolation:)(v0[7], v3, v1, v0[8]);
}

uint64_t sub_1009BFAEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  return swift_task_switch(sub_1009BFB44, v1, 0);
}

uint64_t sub_1009BFB44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v1 = *(uint64_t **)(v0 + 56);
  v2 = sub_10001A9A8(&qword_10110F950);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_10110F2A8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "centralManager.connectionEvents() terminated", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 48);
    v13 = *v1;
    *(_QWORD *)(v0 + 192) = *v1;
    v14 = sub_1000126EC((uint64_t)v1 + *(int *)(v2 + 48), v12, (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
    static Task<>.checkCancellation()(v14);
    if (!v11)
    {
      v30 = *(_QWORD *)(v0 + 168);
      v31 = *(_QWORD *)(v0 + 48);
      type metadata accessor for Transaction(0);
      v39 = *(_OWORD *)(v0 + 32);
      *(_QWORD *)(v0 + 200) = static Transaction.$current.getter();
      *(_QWORD *)(v0 + 24) = v13;
      v32 = swift_task_alloc(48);
      *(_QWORD *)(v0 + 208) = v32;
      *(_QWORD *)(v32 + 16) = v31;
      *(_OWORD *)(v32 + 24) = v39;
      v33 = async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1];
      swift_retain();
      v34 = (_QWORD *)swift_task_alloc(v33);
      *(_QWORD *)(v0 + 216) = v34;
      *v34 = v0;
      v34[1] = sub_1009BFF90;
      return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v34, v0 + 24, &unk_10110F960, v32, v39, v30, 0xD000000000000027, 0x8000000100EEC320);
    }
    v16 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 64);
    v20 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 48);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    sub_1000126B0(v21, (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_10110F2A8);
    swift_errorRetain(v11);
    v23 = swift_errorRetain(v11);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 138543362;
      swift_errorRetain(v11);
      v28 = _swift_stdlib_bridgeErrorToNSError(v11);
      *(_QWORD *)(v0 + 16) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v26 + 4, v26 + 12);
      *v27 = v28;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v26, 0xCu);
      v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_errorRelease(v11);
    }
    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);

    }
  }
  v36 = *(_QWORD *)(v0 + 80);
  v38 = *(_QWORD *)(v0 + 48);
  v37 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009BFF90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  v2 += 24;
  v4 = *(_QWORD *)(v2 + 184);
  v5 = *(_QWORD *)(v2 + 8);
  swift_release();
  swift_release();
  swift_task_dealloc(v4);
  if (v0)
    v6 = sub_1009C0490;
  else
    v6 = sub_1009C001C;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1009C001C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  swift_release();
  v1 = v0[28];
  sub_1000126B0(v0[6], (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
  v0[22] = v1;
  v2 = v0[21];
  v3 = v0[4];
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[23] = v4;
  *v4 = v0;
  v4[1] = sub_1009BFAEC;
  return AsyncStream.Iterator.next(isolation:)(v0[7], v3, v2, v0[8]);
}

uint64_t sub_1009C00A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 144);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 48);
  v11 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C029C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 160);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 48);
  v11 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C0490()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[28];
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[28];
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error processing monitorBluetoothConnections event: %{public}@", (uint8_t *)v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  sub_1000126B0(v0[6], (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
  v0[22] = 0;
  v12 = v0[21];
  v13 = v0[4];
  v14 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[23] = v14;
  *v14 = v0;
  v14[1] = sub_1009BFAEC;
  return AsyncStream.Iterator.next(isolation:)(v0[7], v13, v12, v0[8]);
}

uint64_t sub_1009C0688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3[14] = a2;
  v3[15] = a3;
  v4 = type metadata accessor for CentralManager.State(0);
  v3[16] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[17] = v5;
  v3[18] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v3[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v3[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[21] = v8;
  v3[22] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EDC50) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[23] = swift_task_alloc(v9);
  v3[24] = swift_task_alloc(v9);
  v10 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v3[25] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[26] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[27] = swift_task_alloc(v12);
  v3[28] = swift_task_alloc(v12);
  v13 = sub_10001A9A8(&qword_1010EF7C0);
  v3[29] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[30] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v15);
  v3[32] = swift_task_alloc(v15);
  v3[33] = swift_task_alloc(v15);
  v3[34] = swift_task_alloc(v15);
  v3[35] = swift_task_alloc(v15);
  v3[36] = swift_task_alloc(v15);
  v3[37] = swift_task_alloc(v15);
  v3[38] = swift_task_alloc(v15);
  v3[39] = swift_task_alloc(v15);
  v3[40] = swift_task_alloc(v15);
  v3[41] = swift_task_alloc(v15);
  v3[42] = swift_task_alloc(v15);
  v3[43] = swift_task_alloc(v15);
  v3[44] = swift_task_alloc(v15);
  v16 = type metadata accessor for CentralManager.ConnectedState(0);
  v3[45] = v16;
  v3[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[47] = type metadata accessor for CentralManager(0);
  v17 = (_QWORD *)swift_task_alloc(async function pointer to static CentralManager.pairingCentralManager.getter[1]);
  v3[48] = v17;
  *v17 = v3;
  v17[1] = sub_1009C08B4;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_1009C08B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD *)(*v2 + 384);
  v4 = *v2;
  *(_QWORD *)(v4 + 392) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1009C0A68, *(_QWORD *)(v4 + 120), 0);
  v6 = *(_QWORD *)(v4 + 344);
  v5 = *(_QWORD *)(v4 + 352);
  v8 = *(_QWORD *)(v4 + 328);
  v7 = *(_QWORD *)(v4 + 336);
  v10 = *(_QWORD *)(v4 + 312);
  v9 = *(_QWORD *)(v4 + 320);
  v12 = *(_QWORD *)(v4 + 296);
  v11 = *(_QWORD *)(v4 + 304);
  v15 = *(_QWORD *)(v4 + 288);
  v16 = *(_QWORD *)(v4 + 280);
  v17 = *(_QWORD *)(v4 + 272);
  v18 = *(_QWORD *)(v4 + 264);
  v19 = *(_QWORD *)(v4 + 256);
  v20 = *(_QWORD *)(v4 + 248);
  v21 = *(_QWORD *)(v4 + 224);
  v22 = *(_QWORD *)(v4 + 216);
  v23 = *(_QWORD *)(v4 + 192);
  v24 = *(_QWORD *)(v4 + 184);
  v13 = *(_QWORD *)(v4 + 144);
  v25 = *(_QWORD *)(v4 + 176);
  v26 = *(_QWORD *)(v4 + 152);
  swift_task_dealloc(*(_QWORD *)(v4 + 368));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1009C0A68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  void (*v5)(_QWORD, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;

  v2 = v0[45];
  v1 = v0[46];
  v3 = v0[30];
  sub_10005972C(v0[14], v1, (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  v5 = *(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32);
  v6 = v0[46];
  v7 = v0[29];
  if (EnumCaseMultiPayload == 1)
  {
    v5(v0[37], v6, v7);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v9 = v0[36];
    v8 = v0[37];
    v10 = v0[29];
    v11 = v0[30];
    v12 = type metadata accessor for Logger(0);
    v0[67] = sub_10001A9E8(v12, (uint64_t)qword_10110F2A8);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v0[68] = v13;
    v14 = v13(v9, v8, v10);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    v17 = os_log_type_enabled(v15, v16);
    v18 = v0[36];
    v19 = v0[29];
    v20 = v0[30];
    if (v17)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v51 = v22;
      *(_DWORD *)v21 = 136446210;
      v23 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v19, v23);
      v0[7] = sub_100016940(v24, v25, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v18, v19);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Connected to %{public}s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v0[36], v0[29]);
    }

    v0[69] = v26;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[17] + 104))(v0[18], enum case for CentralManager.State.poweredOn(_:), v0[16]);
    v45 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
    v0[70] = v45;
    v46 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
    *v45 = v0;
    v45[1] = sub_1009C2394;
    return CentralManagerProtocol.await(state:)(v0[18], v0[47], v46);
  }
  else
  {
    v5(v0[44], v6, v7);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v28 = v0[43];
    v27 = v0[44];
    v29 = v0[29];
    v30 = v0[30];
    v31 = type metadata accessor for Logger(0);
    v0[50] = sub_10001A9E8(v31, (uint64_t)qword_10110F2A8);
    v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
    v0[51] = v32;
    v33 = v32(v28, v27, v29);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    v36 = os_log_type_enabled(v34, v35);
    v37 = v0[43];
    v38 = v0[29];
    v39 = v0[30];
    if (v36)
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v51 = v50;
      *(_DWORD *)v40 = 136446210;
      v41 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v38, v41);
      v0[13] = sub_100016940(v42, v43, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease();
      v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v44(v37, v38);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Disconnected from %{public}s", v40, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      v44 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v44(v0[43], v0[29]);
    }

    v0[52] = v44;
    v48 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v49 = (_QWORD *)swift_task_alloc(v48);
    v0[53] = v49;
    *v49 = v0;
    v49[1] = sub_1009C0F48;
    return withTimeout<A>(_:block:)(v49, 2000000000000000000, 0, &unk_10110F978, v0[49], &type metadata for () + 1);
  }
}

uint64_t sub_1009C0F48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 424);
  *(_QWORD *)(*v1 + 432) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 120);
    v5 = sub_1009C3A28;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 120);
    swift_release();
    v5 = sub_1009C0FBC;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009C0FBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v1 = v0[29];
  v2 = v0[21];
  v3 = sub_10001A9A8(&qword_1011003C0);
  v4 = swift_allocObject(v3, ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72), *(unsigned __int8 *)(v2 + 80) | 7);
  v0[55] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100E22B00;
  Identifier.id.getter(v1);
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                       + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                  + 1));
  v0[56] = v5;
  *v5 = v0;
  v5[1] = sub_1009C107C;
  return v7(v4);
}

uint64_t sub_1009C107C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 448);
  v3[57] = a1;
  v3[58] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[15];
    v6 = sub_1009C3C20;
  }
  else
  {
    v7 = v3[15];
    swift_bridgeObjectRelease();
    v6 = sub_1009C10F8;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

void sub_1009C10F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0[57];
  if (!((unint64_t)v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[51];
    v8 = v0[44];
    v9 = v0[42];
    v10 = v0[29];
    swift_bridgeObjectRelease();
    v11 = v7(v9, v8, v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = (void (*)(uint64_t, uint64_t))v0[52];
    v16 = v0[44];
    v17 = v0[42];
    v18 = v0[29];
    if (v14)
    {
      v46 = v0[44];
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v48 = v20;
      *(_DWORD *)v19 = 136446210;
      v21 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
      v0[12] = sub_100016940(v22, v23, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      v15(v17, v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to retrieve a Peripheral for %{public}s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
      swift_release();

      v24 = v46;
    }
    else
    {

      v15(v17, v18);
      swift_release();
      v24 = v16;
    }
    v15(v24, v18);
    v26 = v0[43];
    v25 = v0[44];
    v28 = v0[41];
    v27 = v0[42];
    v30 = v0[39];
    v29 = v0[40];
    v32 = v0[37];
    v31 = v0[38];
    v33 = v0[36];
    v34 = v0[35];
    v35 = v0[34];
    v36 = v0[33];
    v37 = v0[32];
    v38 = v0[31];
    v39 = v0[28];
    v40 = v0[27];
    v41 = v0[24];
    v42 = v0[23];
    v43 = v0[22];
    v44 = v0[19];
    v47 = v0[18];
    swift_task_dealloc(v0[46]);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v47);
    v4 = (void (*)(void))v0[1];
    goto LABEL_15;
  }
  if (v1 < 0)
    v5 = v0[57];
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v0[57]);
  v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_11;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0[57]);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v0[57] + 32);
    swift_retain();
LABEL_6:
    v0[59] = v2;
    swift_bridgeObjectRelease();
    v45 = (void (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.isPaired.getter
                         + async function pointer to dispatch thunk of Peripheral.isPaired.getter);
    v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.isPaired.getter
                                    + 1));
    v0[60] = v3;
    *v3 = v0;
    v3[1] = sub_1009C14AC;
    v4 = v45;
LABEL_15:
    v4();
    return;
  }
  __break(1u);
}

uint64_t sub_1009C14AC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 480);
  *(_QWORD *)(*v2 + 488) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 120);
  if (v1)
  {
    v7 = sub_1009C3E18;
  }
  else
  {
    *(_BYTE *)(v4 + 688) = a1 & 1;
    v7 = sub_1009C1524;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009C1524()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  if ((*(_BYTE *)(v0 + 688) & 1) != 0)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_10110F364);
    *(_QWORD *)(v0 + 520) = v1;
    *v1 = v0;
    v1[1] = sub_1009C1DCC;
    v2 = *(_QWORD *)(v0 + 120);
    v1[2] = *(_QWORD *)(v0 + 472);
    v1[3] = v2;
    return swift_task_switch(sub_1009C75AC, v2, 0);
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 408))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 232));
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v9 = *(_QWORD *)(v0 + 328);
    v10 = *(_QWORD *)(v0 + 232);
    if (v7)
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v17 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      *(_QWORD *)(v0 + 80) = sub_100016940(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      v8(v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Checking if we have a matching record for %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      v8(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 232));
    }

    v16 = (_QWORD *)swift_task_alloc(dword_10110F96C);
    *(_QWORD *)(v0 + 496) = v16;
    *v16 = v0;
    v16[1] = sub_1009C1750;
    return sub_1009C49B0(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 352));
  }
}

uint64_t sub_1009C1750()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 496);
  *(_QWORD *)(*v1 + 504) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009C4010;
  else
    v4 = sub_1009C17B4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), 0);
}

uint64_t sub_1009C17B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 192);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 48))(v1, 1, *(_QWORD *)(v0 + 200)) == 1)
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    v3 = *(_QWORD *)(v0 + 352);
    v4 = *(_QWORD *)(v0 + 320);
    v5 = *(_QWORD *)(v0 + 232);
    sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    v6 = v2(v4, v3, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v11 = *(_QWORD *)(v0 + 352);
    v12 = *(_QWORD *)(v0 + 320);
    v13 = *(_QWORD *)(v0 + 232);
    if (v9)
    {
      v47 = *(_QWORD *)(v0 + 352);
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v49 = v15;
      *(_DWORD *)v14 = 136446210;
      v16 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      *(_QWORD *)(v0 + 72) = sub_100016940(v17, v18, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      v10(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No LocalFindableRecord for %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
      swift_release();

      swift_release();
      v10(v47, v13);
    }
    else
    {

      swift_release();
      v10(v12, v13);
      swift_release();
      v10(v11, v13);
    }
    v28 = *(_QWORD *)(v0 + 344);
    v27 = *(_QWORD *)(v0 + 352);
    v30 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 336);
    v32 = *(_QWORD *)(v0 + 312);
    v31 = *(_QWORD *)(v0 + 320);
    v34 = *(_QWORD *)(v0 + 296);
    v33 = *(_QWORD *)(v0 + 304);
    v35 = *(_QWORD *)(v0 + 288);
    v36 = *(_QWORD *)(v0 + 280);
    v37 = *(_QWORD *)(v0 + 272);
    v38 = *(_QWORD *)(v0 + 264);
    v39 = *(_QWORD *)(v0 + 256);
    v40 = *(_QWORD *)(v0 + 248);
    v41 = *(_QWORD *)(v0 + 224);
    v42 = *(_QWORD *)(v0 + 216);
    v43 = *(_QWORD *)(v0 + 192);
    v44 = *(_QWORD *)(v0 + 184);
    v45 = *(_QWORD *)(v0 + 176);
    v46 = *(_QWORD *)(v0 + 152);
    v48 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 224);
    v21 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 160);
    sub_1000126EC(v1, v19, type metadata accessor for LocalFindableAccessoryRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v19, v22);
    v24 = type metadata accessor for Peripheral(0);
    Identifier.init(_:)(v20, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v23, 1, 1, v22);
    v25 = (_QWORD *)swift_task_alloc(dword_10110F8F4);
    *(_QWORD *)(v0 + 512) = v25;
    *v25 = v0;
    v25[1] = sub_1009C1BA4;
    return sub_1009B0EAC(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 152));
  }
}

uint64_t sub_1009C1BA4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 416);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 512));
  sub_100004048(v4, &qword_1010ED860);
  v1(v2, v3);
  return swift_task_switch(sub_1009C1C38, v5, 0);
}

uint64_t sub_1009C1C38()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
  v2 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  swift_release();
  swift_release();
  sub_1000126B0(v4, type metadata accessor for LocalFindableAccessoryRecord);
  v1(v2, v3);
  v6 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 256);
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C1DCC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_BYTE *)(*(_QWORD *)v1 + 689) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009C1E2C, v3, 0);
}

uint64_t sub_1009C1E2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (*(_BYTE *)(v0 + 689) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 56))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 160));
    v1 = (_QWORD *)swift_task_alloc(dword_10110F8F4);
    *(_QWORD *)(v0 + 528) = v1;
    *v1 = v0;
    v1[1] = sub_1009C21A4;
    return sub_1009B0EAC(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 152));
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 408))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 232));
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v8 = *(_QWORD *)(v0 + 352);
    v9 = *(_QWORD *)(v0 + 304);
    v10 = *(_QWORD *)(v0 + 232);
    if (v6)
    {
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v38 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      *(_QWORD *)(v0 + 88) = sub_100016940(v14, v15, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      v33(v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ignore connection event for unsupported accessory %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
      swift_release();

      swift_release();
      v33(v8, v10);
    }
    else
    {

      swift_release();
      v7(v9, v10);
      swift_release();
      v7(v8, v10);
    }
    v17 = *(_QWORD *)(v0 + 344);
    v16 = *(_QWORD *)(v0 + 352);
    v19 = *(_QWORD *)(v0 + 328);
    v18 = *(_QWORD *)(v0 + 336);
    v21 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 296);
    v22 = *(_QWORD *)(v0 + 304);
    v24 = *(_QWORD *)(v0 + 288);
    v25 = *(_QWORD *)(v0 + 280);
    v26 = *(_QWORD *)(v0 + 272);
    v27 = *(_QWORD *)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 248);
    v30 = *(_QWORD *)(v0 + 224);
    v31 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 192);
    v34 = *(_QWORD *)(v0 + 184);
    v35 = *(_QWORD *)(v0 + 176);
    v36 = *(_QWORD *)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009C21A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 528));
  sub_100004048(v1, &qword_1010ED860);
  return swift_task_switch(sub_1009C2210, v2, 0);
}

uint64_t sub_1009C2210()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 472));
  swift_release(v2);
  v1(v3, v4);
  v6 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 256);
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C2394()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  v5 = *(_QWORD *)(*v1 + 136);
  v4 = *(_QWORD *)(*v1 + 144);
  v6 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1009C4208;
  else
    v7 = sub_1009C2420;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 120), 0);
}

uint64_t sub_1009C2420()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v1 = v0[29];
  v2 = v0[21];
  v3 = sub_10001A9A8(&qword_1011003C0);
  v4 = swift_allocObject(v3, ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72), *(unsigned __int8 *)(v2 + 80) | 7);
  v0[72] = v4;
  *(_OWORD *)(v4 + 16) = xmmword_100E22B00;
  Identifier.id.getter(v1);
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                       + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                  + 1));
  v0[73] = v5;
  *v5 = v0;
  v5[1] = sub_1009C24E0;
  return v7(v4);
}

uint64_t sub_1009C24E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 584);
  v3[74] = a1;
  v3[75] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
    v5 = sub_1009C4384;
  else
    v5 = sub_1009C2564;
  return swift_task_switch(v5, v3[15], 0);
}

void sub_1009C2564()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void);
  uint64_t v45;
  uint64_t v46;

  v1 = v0[74];
  if (!((unint64_t)v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[68];
    v8 = v0[37];
    v9 = v0[35];
    v10 = v0[29];
    swift_bridgeObjectRelease();
    v11 = v7(v9, v8, v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = (void (*)(uint64_t, uint64_t))v0[69];
    v16 = v0[37];
    v17 = v0[35];
    v18 = v0[29];
    if (v14)
    {
      v19 = swift_slowAlloc(22, -1);
      v20 = swift_slowAlloc(32, -1);
      v46 = v20;
      *(_DWORD *)v19 = 141558275;
      v0[5] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2081;
      v21 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
      v0[6] = sub_100016940(v22, v23, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease();
      v15(v17, v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to retrieve a Peripheral for %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
      swift_release();

    }
    else
    {
      swift_release();

      v15(v17, v18);
    }
    v15(v16, v18);
    v25 = v0[43];
    v24 = v0[44];
    v27 = v0[41];
    v26 = v0[42];
    v29 = v0[39];
    v28 = v0[40];
    v31 = v0[37];
    v30 = v0[38];
    v32 = v0[36];
    v33 = v0[35];
    v34 = v0[34];
    v35 = v0[33];
    v36 = v0[32];
    v37 = v0[31];
    v38 = v0[28];
    v39 = v0[27];
    v40 = v0[24];
    v41 = v0[23];
    v42 = v0[22];
    v43 = v0[19];
    v45 = v0[18];
    swift_task_dealloc(v0[46]);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    v4 = (void (*)(void))v0[1];
    goto LABEL_15;
  }
  if (v1 < 0)
    v5 = v0[74];
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v0[74]);
  v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_11;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0[74]);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v0[74] + 32);
    swift_retain();
LABEL_6:
    v0[76] = v2;
    swift_bridgeObjectRelease();
    v44 = (void (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.isPaired.getter
                         + async function pointer to dispatch thunk of Peripheral.isPaired.getter);
    v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.isPaired.getter
                                    + 1));
    v0[77] = v3;
    *v3 = v0;
    v3[1] = sub_1009C2940;
    v4 = v44;
LABEL_15:
    v4();
    return;
  }
  __break(1u);
}

uint64_t sub_1009C2940(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 616);
  *(_QWORD *)(*v2 + 624) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 120);
  if (v1)
  {
    v7 = sub_1009C4500;
  }
  else
  {
    *(_BYTE *)(v4 + 690) = a1 & 1;
    v7 = sub_1009C29B8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009C29B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  if ((*(_BYTE *)(v0 + 690) & 1) != 0)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_10110F364);
    *(_QWORD *)(v0 + 656) = v1;
    *v1 = v0;
    v1[1] = sub_1009C3270;
    v2 = *(_QWORD *)(v0 + 120);
    v1[2] = *(_QWORD *)(v0 + 608);
    v1[3] = v2;
    return swift_task_switch(sub_1009C75AC, v2, 0);
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 544))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 232));
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v9 = *(_QWORD *)(v0 + 272);
    v10 = *(_QWORD *)(v0 + 232);
    if (v7)
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v17 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      *(_QWORD *)(v0 + 24) = sub_100016940(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      v8(v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Checking if we have a matching record for %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      v8(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 232));
    }

    v16 = (_QWORD *)swift_task_alloc(dword_10110F96C);
    *(_QWORD *)(v0 + 632) = v16;
    *v16 = v0;
    v16[1] = sub_1009C2BE8;
    return sub_1009C49B0(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 296));
  }
}

uint64_t sub_1009C2BE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 632);
  *(_QWORD *)(*v1 + 640) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009C4684;
  else
    v4 = sub_1009C2C4C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), 0);
}

uint64_t sub_1009C2C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 48))(v1, 1, *(_QWORD *)(v0 + 200)) == 1)
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 544);
    v3 = *(_QWORD *)(v0 + 296);
    v4 = *(_QWORD *)(v0 + 264);
    v5 = *(_QWORD *)(v0 + 232);
    sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    v6 = v2(v4, v3, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v11 = *(_QWORD *)(v0 + 296);
    v12 = *(_QWORD *)(v0 + 264);
    v13 = *(_QWORD *)(v0 + 232);
    if (v9)
    {
      v47 = *(_QWORD *)(v0 + 296);
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v49 = v15;
      *(_DWORD *)v14 = 136446210;
      v16 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      *(_QWORD *)(v0 + 16) = sub_100016940(v17, v18, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      v10(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No LocalFindableRecord for %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
      swift_release();

      swift_release();
      v10(v47, v13);
    }
    else
    {
      swift_release();

      swift_release();
      v10(v12, v13);
      v10(v11, v13);
    }
    v28 = *(_QWORD *)(v0 + 344);
    v27 = *(_QWORD *)(v0 + 352);
    v30 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 336);
    v32 = *(_QWORD *)(v0 + 312);
    v31 = *(_QWORD *)(v0 + 320);
    v34 = *(_QWORD *)(v0 + 296);
    v33 = *(_QWORD *)(v0 + 304);
    v35 = *(_QWORD *)(v0 + 288);
    v36 = *(_QWORD *)(v0 + 280);
    v37 = *(_QWORD *)(v0 + 272);
    v38 = *(_QWORD *)(v0 + 264);
    v39 = *(_QWORD *)(v0 + 256);
    v40 = *(_QWORD *)(v0 + 248);
    v41 = *(_QWORD *)(v0 + 224);
    v42 = *(_QWORD *)(v0 + 216);
    v43 = *(_QWORD *)(v0 + 192);
    v44 = *(_QWORD *)(v0 + 184);
    v45 = *(_QWORD *)(v0 + 176);
    v46 = *(_QWORD *)(v0 + 152);
    v48 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 216);
    v21 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 160);
    sub_1000126EC(v1, v19, type metadata accessor for LocalFindableAccessoryRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v19, v22);
    v24 = type metadata accessor for Peripheral(0);
    Identifier.init(_:)(v20, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v23, 1, 1, v22);
    v25 = (_QWORD *)swift_task_alloc(dword_10110F7A4);
    *(_QWORD *)(v0 + 648) = v25;
    *v25 = v0;
    v25[1] = sub_1009C3044;
    return sub_1009B0AB0(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 152));
  }
}

uint64_t sub_1009C3044()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 552);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 648));
  sub_100004048(v4, &qword_1010ED860);
  v1(v2, v3);
  return swift_task_switch(sub_1009C30D8, v5, 0);
}

uint64_t sub_1009C30D8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 216);
  swift_release();
  swift_release();
  sub_1000126B0(v4, type metadata accessor for LocalFindableAccessoryRecord);
  v1(v2, v3);
  v6 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 256);
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C3270(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_BYTE *)(*(_QWORD *)v1 + 691) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009C32D0, v3, 0);
}

uint64_t sub_1009C32D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (*(_BYTE *)(v0 + 691) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 56))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 160));
    v1 = (_QWORD *)swift_task_alloc(dword_10110F7A4);
    *(_QWORD *)(v0 + 664) = v1;
    *v1 = v0;
    v1[1] = sub_1009C3648;
    return sub_1009B0AB0(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 152));
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 544))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 232));
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v8 = *(_QWORD *)(v0 + 296);
    v9 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 232);
    if (v6)
    {
      v36 = *(_QWORD *)(v0 + 296);
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v38 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      *(_QWORD *)(v0 + 32) = sub_100016940(v14, v15, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      v7(v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ignore connection event for unsupported accessory %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
      swift_release();

      swift_release();
      v7(v36, v10);
    }
    else
    {
      swift_release();

      swift_release();
      v7(v9, v10);
      v7(v8, v10);
    }
    v17 = *(_QWORD *)(v0 + 344);
    v16 = *(_QWORD *)(v0 + 352);
    v19 = *(_QWORD *)(v0 + 328);
    v18 = *(_QWORD *)(v0 + 336);
    v21 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 296);
    v22 = *(_QWORD *)(v0 + 304);
    v24 = *(_QWORD *)(v0 + 288);
    v25 = *(_QWORD *)(v0 + 280);
    v26 = *(_QWORD *)(v0 + 272);
    v27 = *(_QWORD *)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 248);
    v30 = *(_QWORD *)(v0 + 224);
    v31 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 192);
    v33 = *(_QWORD *)(v0 + 184);
    v34 = *(_QWORD *)(v0 + 176);
    v35 = *(_QWORD *)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009C3648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 664));
  sub_100004048(v1, &qword_1010ED860);
  return swift_task_switch(sub_1009C36B4, v2, 0);
}

uint64_t sub_1009C36B4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 608));
  swift_release(v2);
  v1(v3, v4);
  v6 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 256);
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C3838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 680));
  sub_100004048(v1, &qword_1010ED860);
  return swift_task_switch(sub_1009C38A4, v2, 0);
}

uint64_t sub_1009C38A4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 232);
  swift_errorRelease(*(_QWORD *)(v0 + 672));
  swift_release(v2);
  v1(v3, v4);
  v6 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 256);
  v19 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 224);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C3A28()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  swift_release();
  *(_QWORD *)(v0 + 672) = *(_QWORD *)(v0 + 432);
  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 408))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 232));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v4 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 232);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 64) = sub_100016940(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    v13(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Timed out waiting for BT .poweredOn. Saving disconnect event for %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 416))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  }

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 56))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 160));
  v11 = (_QWORD *)swift_task_alloc(dword_10110F8F4);
  *(_QWORD *)(v0 + 680) = v11;
  *v11 = v0;
  v11[1] = sub_1009C3838;
  return sub_1009B0EAC(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1009C3C20()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 672) = *(_QWORD *)(v0 + 464);
  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 408))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 232));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v4 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 232);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 64) = sub_100016940(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    v13(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Timed out waiting for BT .poweredOn. Saving disconnect event for %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 416))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  }

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 56))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 160));
  v11 = (_QWORD *)swift_task_alloc(dword_10110F8F4);
  *(_QWORD *)(v0 + 680) = v11;
  *v11 = v0;
  v11[1] = sub_1009C3838;
  return sub_1009B0EAC(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1009C3E18()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  swift_release();
  *(_QWORD *)(v0 + 672) = *(_QWORD *)(v0 + 488);
  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 408))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 232));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v4 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 232);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 64) = sub_100016940(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    v13(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Timed out waiting for BT .poweredOn. Saving disconnect event for %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 416))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  }

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 56))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 160));
  v11 = (_QWORD *)swift_task_alloc(dword_10110F8F4);
  *(_QWORD *)(v0 + 680) = v11;
  *v11 = v0;
  v11[1] = sub_1009C3838;
  return sub_1009B0EAC(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1009C4010()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  swift_release();
  *(_QWORD *)(v0 + 672) = *(_QWORD *)(v0 + 504);
  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 408))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 232));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v4 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 232);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 64) = sub_100016940(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    v13(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Timed out waiting for BT .poweredOn. Saving disconnect event for %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 416))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  }

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 56))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 160));
  v11 = (_QWORD *)swift_task_alloc(dword_10110F8F4);
  *(_QWORD *)(v0 + 680) = v11;
  *v11 = v0;
  v11[1] = sub_1009C3838;
  return sub_1009B0EAC(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 152));
}

uint64_t sub_1009C4208()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 392));
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C4384()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 392));
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C4500()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_release(*(_QWORD *)(v0 + 392));
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 608));
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C4684()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_release(*(_QWORD *)(v0 + 392));
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 608));
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C4808(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a2;
  v3 = type metadata accessor for CentralManager.State(0);
  v2[3] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[4] = v4;
  v2[5] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009C4868, 0, 0);
}

uint64_t sub_1009C4868()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[4] + 104))(v0[5], enum case for CentralManager.State.poweredOn(_:), v0[3]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[6] = v1;
  v2 = type metadata accessor for CentralManager(0);
  v3 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_1009C4910;
  return CentralManagerProtocol.await(state:)(v0[5], v2, v3);
}

uint64_t sub_1009C4910()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 40);
  v2 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 24);
  v5 = *(_QWORD *)(*v1 + 32);
  v6 = *v1;
  *(_QWORD *)(v6 + 56) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_1002176D8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 40));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1009C49B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3[24] = a2;
  v3[25] = v2;
  v3[23] = a1;
  v4 = type metadata accessor for MACAddress(0);
  v3[26] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[27] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[28] = swift_task_alloc(v6);
  v3[29] = swift_task_alloc(v6);
  v7 = type metadata accessor for UUID(0);
  v3[30] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[31] = v8;
  v3[32] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v3[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v3[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[35] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v12);
  v3[37] = swift_task_alloc(v12);
  v3[38] = swift_task_alloc(v12);
  v13 = sub_10001A9A8(&qword_1010EF7C0);
  v3[39] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[40] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[41] = swift_task_alloc(v15);
  v3[42] = swift_task_alloc(v15);
  v3[43] = swift_task_alloc(v15);
  v3[44] = swift_task_alloc(v15);
  return swift_task_switch(sub_1009C4B08, v2, 0);
}

uint64_t sub_1009C4B08()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t (__cdecl *v26)();
  uint64_t v27;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0 + 12;
  v3 = v0[44];
  v5 = v0[39];
  v4 = v0[40];
  v6 = v0[24];
  v7 = type metadata accessor for Logger(0);
  v0[45] = sub_10001A9E8(v7, (uint64_t)qword_10110F2A8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[46] = v8;
  v9 = v8(v3, v6, v5);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = v0[44];
  v14 = v0[39];
  if (v12)
  {
    v25 = v0[40];
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v27 = v16;
    *(_DWORD *)v15 = 136446466;
    v0[21] = sub_100016940(0xD00000000000002ALL, 0x8000000100EEC350, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2082;
    v17 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    v0[22] = sub_100016940(v18, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v15 + 14, v15 + 22);
    v1 = (__int128 *)(v0 + 7);
    swift_bridgeObjectRelease();
    v20 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v20(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s for %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    v21 = v16;
    v2 = v0 + 12;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v0[40] + 8);
    v20(v0[44], v0[39]);
  }

  v0[47] = v20;
  v22 = qword_1010EA5B0;
  swift_retain();
  if (v22 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v2, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v26 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v24 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    v0[48] = v24;
    *v24 = v0;
    v24[1] = sub_1009C4E2C;
    return v26();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009C4E2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009C4E8C, v3, 0);
}

uint64_t sub_1009C4E8C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 392))
  {
    v2 = *(_QWORD *)(v0 + 312);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    Identifier.id.getter(v2);
    return swift_task_switch(sub_1009C50DC, *(_QWORD *)(v0 + 392), 0);
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v22 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 120) = sub_100016940(0xD00000000000002ALL, 0x8000000100EEC350, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s No CloudStorageService available!", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = sub_100350CCC();
    v10 = swift_allocError(&type metadata for PencilPairingService.Error, v9, 0, 0);
    *(_OWORD *)v11 = xmmword_100E2E420;
    *(_BYTE *)(v11 + 16) = 3;
    swift_willThrow(v10);
    v12 = *(_QWORD *)(v0 + 344);
    v14 = *(_QWORD *)(v0 + 328);
    v13 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 296);
    v15 = *(_QWORD *)(v0 + 304);
    v17 = *(_QWORD *)(v0 + 288);
    v19 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)(v0 + 264);
    v20 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009C50DC()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD9C);
  v0[50] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1009C5130;
  return sub_1008FBBC8(v0[33], v0[32]);
}

uint64_t sub_1009C5130()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[49];
    v5 = sub_1009C5624;
  }
  else
  {
    v6 = v2[25];
    (*(void (**)(_QWORD, _QWORD))(v2[31] + 8))(v2[32], v2[30]);
    v5 = sub_1009C51AC;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009C51AC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 48))(v1, 1, *(_QWORD *)(v0 + 272));
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
  v4 = *(_QWORD *)(v0 + 312);
  if (v2 == 1)
  {
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 192);
    sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    v7 = v3(v5, v6, v4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 336);
    v12 = *(_QWORD *)(v0 + 312);
    if (v10)
    {
      v43 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v45 = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
      *(_QWORD *)(v0 + 144) = sub_100016940(v16, v17, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease();
      v43(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Iterating all LocalFindableBeaconRecords to find peripheralIdentifier: %{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 312));
    }

    return swift_task_switch(sub_1009C5734, *(_QWORD *)(v0 + 392), 0);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 344);
    v19 = *(_QWORD *)(v0 + 192);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 304), type metadata accessor for LocalFindableAccessoryRecord);
    v20 = v3(v18, v19, v4);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 344);
    v25 = *(_QWORD *)(v0 + 312);
    if (v23)
    {
      v41 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
      v26 = swift_slowAlloc(22, -1);
      v45 = swift_slowAlloc(64, -1);
      v27 = v45;
      *(_DWORD *)v26 = 136446466;
      *(_QWORD *)(v0 + 152) = sub_100016940(0xD00000000000002ALL, 0x8000000100EEC350, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2082;
      v28 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v25, v28);
      *(_QWORD *)(v0 + 160) = sub_100016940(v29, v30, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      v41(v24, v25);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s Found LocalFindableAccessoryRecord matching %{public}s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 312));
    }
    swift_release();

    sub_1000126EC(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 184), type metadata accessor for LocalFindableAccessoryRecord);
    v32 = *(_QWORD *)(v0 + 344);
    v33 = *(_QWORD *)(v0 + 352);
    v35 = *(_QWORD *)(v0 + 328);
    v34 = *(_QWORD *)(v0 + 336);
    v37 = *(_QWORD *)(v0 + 296);
    v36 = *(_QWORD *)(v0 + 304);
    v38 = *(_QWORD *)(v0 + 288);
    v39 = *(_QWORD *)(v0 + 264);
    v40 = *(_QWORD *)(v0 + 256);
    v42 = *(_QWORD *)(v0 + 232);
    v44 = *(_QWORD *)(v0 + 224);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 56))(*(_QWORD *)(v0 + 184), 0, 1, *(_QWORD *)(v0 + 272));
    swift_task_dealloc(v33);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009C5624()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[25];
  (*(void (**)(_QWORD, _QWORD))(v0[31] + 8))(v0[32], v0[30]);
  return swift_task_switch(sub_1009C566C, v1, 0);
}

uint64_t sub_1009C566C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 392));
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C5734()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110CE34);
  *(_QWORD *)(v0 + 416) = v1;
  *v1 = v0;
  v1[1] = sub_1009C5780;
  return sub_10001C938();
}

uint64_t sub_1009C5780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 416);
  v3[53] = a1;
  v3[54] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009C59B0;
  else
    v5 = sub_1009C57EC;
  return swift_task_switch(v5, v3[25], 0);
}

uint64_t sub_1009C57EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD);
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 440) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v0 + 208);
    v6 = *(_QWORD *)(v0 + 216);
    *(_QWORD *)(v0 + 448) = *(_QWORD *)(*(_QWORD *)(v0 + 200) + 144);
    v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 504) = v7;
    *(_QWORD *)(v0 + 456) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 464) = 0;
    v8 = *(_QWORD *)(v0 + 296);
    v9 = *(_QWORD *)(v0 + 232);
    sub_10005972C(v1 + ((v7 + 32) & ~(unint64_t)v7), v8, type metadata accessor for LocalFindableAccessoryRecord);
    v10 = v8 + *(int *)(v4 + 52);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    *(_QWORD *)(v0 + 472) = v11;
    v11(v9, v10, v5);
    v24 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                         + async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:));
    v12 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                     + 1));
    *(_QWORD *)(v0 + 480) = v12;
    *v12 = v0;
    v12[1] = sub_1009C5A78;
    return v24(*(_QWORD *)(v0 + 232));
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    v14 = *(_QWORD *)(v0 + 344);
    v15 = *(_QWORD *)(v0 + 352);
    v17 = *(_QWORD *)(v0 + 328);
    v16 = *(_QWORD *)(v0 + 336);
    v19 = *(_QWORD *)(v0 + 296);
    v18 = *(_QWORD *)(v0 + 304);
    v20 = *(_QWORD *)(v0 + 288);
    v21 = *(_QWORD *)(v0 + 264);
    v22 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 232);
    v25 = *(_QWORD *)(v0 + 224);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 56))(*(_QWORD *)(v0 + 184), 1, 1, *(_QWORD *)(v0 + 272));
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009C59B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 392));
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C5A78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 480);
  v3[61] = a1;
  v3[62] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[25];
    swift_bridgeObjectRelease();
    v6 = sub_1009C60C4;
    v7 = v5;
  }
  else
  {
    v7 = v3[25];
    v6 = sub_1009C5AF4;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_1009C5AF4(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD);
  uint64_t v67;
  uint64_t v68;

  if (*(_QWORD *)(v1 + 488))
  {
    v2 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
    v3 = *(_QWORD *)(v1 + 328);
    v4 = *(_QWORD *)(v1 + 312);
    v5 = *(_QWORD *)(v1 + 192);
    Peripheral.id.getter(a1);
    v6 = type metadata accessor for Peripheral(0);
    v7 = static Identifier.== infix(_:_:)(v3, v5, v6);
    v2(v3, v4);
    if ((v7 & 1) != 0)
    {
      v9 = *(_QWORD *)(v1 + 288);
      v8 = *(_QWORD *)(v1 + 296);
      swift_bridgeObjectRelease();
      v10 = sub_10005972C(v8, v9, type metadata accessor for LocalFindableAccessoryRecord);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      v13 = os_log_type_enabled(v11, v12);
      v14 = *(_QWORD *)(v1 + 288);
      v15 = *(_QWORD *)(v1 + 232);
      v16 = *(_QWORD *)(v1 + 208);
      v17 = *(_QWORD *)(v1 + 216);
      if (v13)
      {
        v63 = *(_QWORD *)(v1 + 232);
        v18 = swift_slowAlloc(22, -1);
        v19 = swift_slowAlloc(64, -1);
        v68 = v19;
        *(_DWORD *)v18 = 136446466;
        *(_QWORD *)(v1 + 128) = sub_100016940(0xD00000000000002ALL, 0x8000000100EEC350, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v18 + 4, v18 + 12);
        *(_WORD *)(v18 + 12) = 2080;
        v20 = sub_1000A8F4C();
        *(_QWORD *)(v1 + 136) = sub_100016940(v20, v21, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v18 + 14, v18 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v14, type metadata accessor for LocalFindableAccessoryRecord);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s Found LocalFindableAccessoryRecord record %s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);
        swift_release();
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v63, v16);
      }
      else
      {
        swift_release();

        swift_release();
        sub_1000126B0(v14, type metadata accessor for LocalFindableAccessoryRecord);
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      }
      sub_1000126EC(*(_QWORD *)(v1 + 296), *(_QWORD *)(v1 + 184), type metadata accessor for LocalFindableAccessoryRecord);
      v44 = 0;
      goto LABEL_14;
    }
    v38 = *(_QWORD *)(v1 + 296);
    v39 = *(_QWORD *)(v1 + 232);
    v40 = *(_QWORD *)(v1 + 208);
    v41 = *(_QWORD *)(v1 + 216);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    v37 = v38;
  }
  else
  {
    v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 472))(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 208));
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    v25 = os_log_type_enabled(v23, v24);
    v26 = *(_QWORD *)(v1 + 296);
    v27 = *(_QWORD *)(v1 + 224);
    v28 = *(_QWORD *)(v1 + 232);
    v30 = *(_QWORD *)(v1 + 208);
    v29 = *(_QWORD *)(v1 + 216);
    if (v25)
    {
      v65 = *(_QWORD *)(v1 + 296);
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v68 = v32;
      *(_DWORD *)v31 = 136446466;
      *(_QWORD *)(v31 + 4) = sub_100016940(0xD00000000000002ALL, 0x8000000100EEC350, &v68);
      *(_WORD *)(v31 + 12) = 2082;
      v33 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      *(_QWORD *)(v31 + 14) = sub_100016940(v34, v35, &v68);
      swift_bridgeObjectRelease();
      v36 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v36(v27, v30);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s No peripheral for %{public}s!", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      v36(v28, v30);
      v37 = v65;
    }
    else
    {

      v42 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v42(v27, v30);
      v42(v28, v30);
      v37 = v26;
    }
  }
  sub_1000126B0(v37, type metadata accessor for LocalFindableAccessoryRecord);
  v43 = *(_QWORD *)(v1 + 464) + 1;
  if (v43 != *(_QWORD *)(v1 + 440))
  {
    *(_QWORD *)(v1 + 464) = v43;
    v45 = *(_QWORD *)(v1 + 296);
    v46 = *(_QWORD *)(v1 + 272);
    v47 = *(_QWORD *)(v1 + 232);
    v48 = *(_QWORD *)(v1 + 208);
    v49 = *(_QWORD *)(v1 + 216);
    sub_10005972C(*(_QWORD *)(v1 + 424)+ ((*(unsigned __int8 *)(v1 + 504) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 504))+ *(_QWORD *)(v1 + 456) * v43, v45, type metadata accessor for LocalFindableAccessoryRecord);
    v50 = v45 + *(int *)(v46 + 52);
    v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
    *(_QWORD *)(v1 + 472) = v51;
    v51(v47, v50, v48);
    v66 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                         + async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:));
    v52 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                     + 1));
    *(_QWORD *)(v1 + 480) = v52;
    *v52 = v1;
    v52[1] = sub_1009C5A78;
    return v66(*(_QWORD *)(v1 + 232));
  }
  swift_bridgeObjectRelease();
  swift_release();
  v44 = 1;
LABEL_14:
  v54 = *(_QWORD *)(v1 + 344);
  v55 = *(_QWORD *)(v1 + 352);
  v57 = *(_QWORD *)(v1 + 328);
  v56 = *(_QWORD *)(v1 + 336);
  v59 = *(_QWORD *)(v1 + 296);
  v58 = *(_QWORD *)(v1 + 304);
  v60 = *(_QWORD *)(v1 + 288);
  v61 = *(_QWORD *)(v1 + 264);
  v62 = *(_QWORD *)(v1 + 256);
  v64 = *(_QWORD *)(v1 + 232);
  v67 = *(_QWORD *)(v1 + 224);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 + 280) + 56))(*(_QWORD *)(v1 + 184), v44, 1, *(_QWORD *)(v1 + 272));
  swift_task_dealloc(v55);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v67);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009C60C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v5 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 256);
  v11 = *(_QWORD *)(v0 + 264);
  v13 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C61B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *(_QWORD *)(v4 + 168) = a2;
  *(_QWORD *)(v4 + 176) = v3;
  *(_BYTE *)(v4 + 424) = a3;
  *(_QWORD *)(v4 + 160) = a1;
  v5 = sub_10001A9A8(&qword_1010EF7C8);
  *(_QWORD *)(v4 + 184) = v5;
  *(_QWORD *)(v4 + 192) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v4 + 200) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 208) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 216) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 224) = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_10110F940) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 232) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 240) = swift_task_alloc(v9);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  *(_QWORD *)(v4 + 248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MACAddress(0);
  *(_QWORD *)(v4 + 256) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v4 + 264) = v12;
  *(_QWORD *)(v4 + 272) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  *(_QWORD *)(v4 + 280) = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 288) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 296) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 304) = swift_task_alloc(v14);
  v15 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 312) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v4 + 320) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 328) = swift_task_alloc(v17);
  *(_QWORD *)(v4 + 336) = swift_task_alloc(v17);
  *(_QWORD *)(v4 + 344) = swift_task_alloc(v17);
  *(_QWORD *)(v4 + 352) = swift_task_alloc(v17);
  *(_QWORD *)(v4 + 360) = swift_task_alloc(v17);
  *(_QWORD *)(v4 + 368) = swift_task_alloc(v17);
  *(_QWORD *)(v4 + 376) = swift_task_alloc(v17);
  return swift_task_switch(sub_1009C6390, v3, 0);
}

void sub_1009C6390()
{
  __asm { BR              X10 }
}

uint64_t sub_1009C63E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_10110F2A8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 312);
  if (v10)
  {
    v32 = *(_QWORD *)(v0 + 320);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v36 = v34;
    *(_DWORD *)v13 = 136446210;
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    *v1 = sub_100016940(v15, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v0 + 160, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unknown auth status for %{public}s", v13, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 312));

  }
  v17 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 360);
  v21 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 328);
  v23 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 304);
  v25 = *(_QWORD *)(v0 + 288);
  v27 = *(_QWORD *)(v0 + 272);
  v28 = *(_QWORD *)(v0 + 248);
  v29 = *(_QWORD *)(v0 + 240);
  v30 = *(_QWORD *)(v0 + 232);
  v31 = *(_QWORD *)(v0 + 224);
  v33 = *(_QWORD *)(v0 + 216);
  v35 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C6D88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  return swift_task_switch(sub_1009C6DE0, v1, 0);
}

uint64_t sub_1009C6DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  os_log_type_t type;
  os_log_type_t typea[8];
  os_log_type_t typeb[8];
  os_log_type_t typec[8];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  sub_10000F9B8(*(_QWORD *)(v0 + 240), v1, &qword_10110F940);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
  v6 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 232);
  if (v4 == 1)
  {
    v92 = v0 + 64;
    v8 = *(_QWORD *)(v0 + 336);
    v9 = *(_QWORD *)(v0 + 160);
    sub_100004048(v7, &qword_10110F940);
    v10 = v5(v8, v9, v6);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
    v15 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 312);
    if (v13)
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v99 = v18;
      *(_DWORD *)v17 = 136446210;
      v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
      *(_QWORD *)(v0 + 104) = sub_100016940(v20, v21, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      v14(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unsupported pencil attached: uuid: %{public}s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      v14(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 312));
    }

    v45 = *(_QWORD *)(v0 + 288);
    v46 = *(_QWORD *)(v0 + 296);
    v47 = *(_QWORD *)(v0 + 280);
    v48 = *(_QWORD *)(v0 + 264);
    *(_QWORD *)typea = *(_QWORD *)(v0 + 256);
    v89 = *(_QWORD *)(v0 + 272);
    v49 = *(_QWORD *)(v0 + 240);
    v51 = *(_QWORD *)(v0 + 184);
    v50 = *(_QWORD **)(v0 + 192);
    v52 = *(_QWORD *)(v0 + 176) + *(_QWORD *)(v0 + 408);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 392))(v46, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 312));
    swift_storeEnumTagMultiPayload(v46, v47, 2);
    sub_1000126EC(v46, v45, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    swift_beginAccess(v52, v92, 33, 0);
    sub_1009F8164(v45, v52);
    swift_endAccess(v92);
    type metadata accessor for SPPairingSessionError(0);
    v54 = v53;
    *(_QWORD *)(v0 + 96) = 16;
    v55 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 88), v0 + 96, v55, v54, v56);
    *v50 = *(_QWORD *)(v0 + 88);
    swift_storeEnumTagMultiPayload(v50, v51, 1);
    AsyncStreamProvider.yield(value:transaction:)(v50, 0);
    sub_100004048((uint64_t)v50, &qword_1010EF7C8);
    sub_100004048(v49, &qword_10110F940);
    (*(void (**)(uint64_t, os_log_type_t *))(v48 + 8))(v89, *(os_log_type_t **)typea);
  }
  else
  {
    v97 = v0 + 16;
    v22 = *(_QWORD *)(v0 + 344);
    v24 = *(_QWORD *)(v0 + 216);
    v23 = *(_QWORD *)(v0 + 224);
    v25 = *(_QWORD *)(v0 + 200);
    v26 = *(_QWORD *)(v0 + 208);
    v27 = *(_QWORD *)(v0 + 160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v23, v7, v25);
    v5(v22, v27, v6);
    v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    v28 = v95(v24, v23, v25);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
    v33 = *(_QWORD *)(v0 + 344);
    v34 = *(_QWORD *)(v0 + 312);
    v36 = *(_QWORD *)(v0 + 208);
    v35 = *(_QWORD *)(v0 + 216);
    v37 = *(_QWORD *)(v0 + 200);
    if (v31)
    {
      type = v30;
      v38 = swift_slowAlloc(22, -1);
      v88 = swift_slowAlloc(64, -1);
      v99 = v88;
      *(_DWORD *)v38 = 136446466;
      v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v34, v39);
      *(_QWORD *)(v0 + 120) = sub_100016940(v40, v41, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease();
      v32(v33, v34);
      *(_WORD *)(v38 + 12) = 2082;
      v42 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v37, v42);
      *(_QWORD *)(v0 + 128) = sub_100016940(v43, v44, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      v93 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v93(v35, v37);
      _os_log_impl((void *)&_mh_execute_header, v29, type, "Pencil attached: uuid: %{public}s (%{public}s)", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      v32(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 312));
      v93 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v93(v35, v37);
    }

    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
    v58 = *(_QWORD *)(v0 + 312);
    v59 = *(_QWORD *)(v0 + 296);
    v77 = *(_QWORD *)(v0 + 280);
    v78 = *(_QWORD *)(v0 + 288);
    *(_QWORD *)typeb = *(_QWORD *)(v0 + 256);
    v90 = *(_QWORD *)(v0 + 272);
    v80 = *(_QWORD *)(v0 + 240);
    v82 = *(_QWORD *)(v0 + 264);
    v60 = *(_QWORD *)(v0 + 224);
    v62 = *(_QWORD *)(v0 + 192);
    v61 = *(_QWORD *)(v0 + 200);
    v79 = *(_QWORD *)(v0 + 184);
    v63 = *(_QWORD *)(v0 + 176) + *(_QWORD *)(v0 + 408);
    v64 = *(_QWORD *)(v0 + 160);
    v65 = v59 + *(int *)(sub_10001A9A8(&qword_10110F5F8) + 48);
    v57(v59, v64, v58);
    v95(v65, v60, v61);
    swift_storeEnumTagMultiPayload(v59, v77, 1);
    sub_1000126EC(v59, v78, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    swift_beginAccess(v63, v97, 33, 0);
    sub_1009F8164(v78, v63);
    swift_endAccess(v97);
    v95(v62, v60, v61);
    v66 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
    swift_storeEnumTagMultiPayload(v62, v66, 0);
    swift_storeEnumTagMultiPayload(v62, v79, 0);
    AsyncStreamProvider.yield(value:transaction:)(v62, 0);
    sub_100004048(v62, &qword_1010EF7C8);
    v93(v60, v61);
    sub_100004048(v80, &qword_10110F940);
    (*(void (**)(uint64_t, os_log_type_t *))(v82 + 8))(v90, *(os_log_type_t **)typeb);
  }
  v67 = *(_QWORD *)(v0 + 368);
  v69 = *(_QWORD *)(v0 + 352);
  v68 = *(_QWORD *)(v0 + 360);
  v71 = *(_QWORD *)(v0 + 336);
  v70 = *(_QWORD *)(v0 + 344);
  v72 = *(_QWORD *)(v0 + 328);
  v73 = *(_QWORD *)(v0 + 296);
  v74 = *(_QWORD *)(v0 + 304);
  v75 = *(_QWORD *)(v0 + 288);
  v81 = *(_QWORD *)(v0 + 272);
  v83 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)typec = *(_QWORD *)(v0 + 240);
  v91 = *(_QWORD *)(v0 + 232);
  v94 = *(_QWORD *)(v0 + 224);
  v96 = *(_QWORD *)(v0 + 216);
  v98 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  swift_task_dealloc(v81);
  swift_task_dealloc(v83);
  swift_task_dealloc(*(_QWORD *)typec);
  swift_task_dealloc(v91);
  swift_task_dealloc(v94);
  swift_task_dealloc(v96);
  swift_task_dealloc(v98);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C7594(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1009C75AC, v1, 0);
}

uint64_t sub_1009C75AC()
{
  uint64_t v0;
  _BYTE *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010EA108 != -1)
    swift_once(&qword_1010EA108, sub_1009B454C);
  v1 = off_10110F2C0;
  *(_QWORD *)(v0 + 32) = off_10110F2C0;
  v2 = v1[32];
  *(_BYTE *)(v0 + 72) = v2;
  v3 = -1;
  v4 = -1 << v2;
  if (-(-1 << v2) < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *((_QWORD *)v1 + 7);
  swift_bridgeObjectRetain(v1);
  if (v5)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v5));
    v9 = (v5 - 1) & v5;
LABEL_7:
    *(_QWORD *)(v0 + 40) = v7;
    *(_QWORD *)(v0 + 48) = v9;
    v10 = (_QWORD *)(v6[6] + 16 * v8);
    *(_QWORD *)(v0 + 56) = *v10;
    v11 = v10[1];
    *(_QWORD *)(v0 + 64) = v11;
    v12 = type metadata accessor for Peripheral(0);
    v13 = sub_100006204(&qword_10110F938, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    swift_bridgeObjectRetain(v11);
    v14 = dispatch thunk of Actor.unownedExecutor.getter(v12, v13);
    return swift_task_switch(sub_1009C779C, v14, v15);
  }
  v17 = 63 - v4;
  if ((unint64_t)(63 - v4) > 0x7F)
  {
    v18 = v6[8];
    if (v18)
    {
      v7 = 1;
LABEL_11:
      v9 = (v18 - 1) & v18;
      v8 = __clz(__rbit64(v18)) + (v7 << 6);
      goto LABEL_7;
    }
    if (v17 >= 0xC0)
    {
      v18 = v6[9];
      if (v18)
      {
        v7 = 2;
        goto LABEL_11;
      }
      if (v17 >= 0x100)
      {
        v18 = v6[10];
        if (v18)
        {
          v7 = 3;
          goto LABEL_11;
        }
        if (v17 >= 0x140)
        {
          v18 = v6[11];
          if (v18)
          {
            v7 = 4;
            goto LABEL_11;
          }
          v19 = 0;
          v20 = v17 >> 6;
          if (v20 <= 5)
            v20 = 5;
          v21 = v20 - 5;
          while (v21 != v19)
          {
            v18 = v6[v19++ + 12];
            if (v18)
            {
              v7 = v19 + 4;
              goto LABEL_11;
            }
          }
        }
      }
    }
  }
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1009C779C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v0 + 73) = dispatch thunk of Peripheral.hasTag(_:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64)) & 1;
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1009C77F8, v1, 0);
}

void sub_1009C77F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;

  v1 = *(unsigned __int8 *)(v0 + 73);
  if ((v1 & 1) != 0)
    goto LABEL_2;
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  if (v2)
  {
    v4 = (v2 - 1) & v2;
    v5 = __clz(__rbit64(v2)) | (v3 << 6);
    v6 = *(_QWORD *)(v0 + 32);
LABEL_5:
    *(_QWORD *)(v0 + 40) = v3;
    *(_QWORD *)(v0 + 48) = v4;
    v7 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v5);
    *(_QWORD *)(v0 + 56) = *v7;
    v8 = v7[1];
    *(_QWORD *)(v0 + 64) = v8;
    v9 = type metadata accessor for Peripheral(0);
    v10 = sub_100006204(&qword_10110F938, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    swift_bridgeObjectRetain(v8);
    v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
    swift_task_switch(sub_1009C779C, v11, v12);
    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)((1 << *(_BYTE *)(v0 + 72)) + 63) >> 6;
    if (v13 >= v14)
      goto LABEL_2;
    v6 = *(_QWORD *)(v0 + 32);
    v15 = v6 + 56;
    v16 = *(_QWORD *)(v6 + 56 + 8 * v13);
    ++v3;
    if (v16)
    {
LABEL_9:
      v4 = (v16 - 1) & v16;
      v5 = __clz(__rbit64(v16)) + (v3 << 6);
      goto LABEL_5;
    }
    v3 = v13 + 1;
    if (v13 + 1 >= v14)
      goto LABEL_2;
    v16 = *(_QWORD *)(v15 + 8 * v3);
    if (v16)
      goto LABEL_9;
    v3 = v13 + 2;
    if (v13 + 2 >= v14)
      goto LABEL_2;
    v16 = *(_QWORD *)(v15 + 8 * v3);
    if (v16)
      goto LABEL_9;
    v17 = v13 + 3;
    if (v17 >= v14)
    {
LABEL_2:
      swift_release();
      (*(void (**)(uint64_t))(v0 + 8))(v1);
      return;
    }
    v16 = *(_QWORD *)(v15 + 8 * v17);
    if (v16)
    {
      v3 = v17;
      goto LABEL_9;
    }
    while (1)
    {
      v3 = v17 + 1;
      if (__OFADD__(v17, 1))
        break;
      if (v3 >= v14)
        goto LABEL_2;
      v16 = *(_QWORD *)(v15 + 8 * v3);
      ++v17;
      if (v16)
        goto LABEL_9;
    }
  }
  __break(1u);
}

uint64_t sub_1009C79A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v4 = type metadata accessor for MACAddress(0);
  v3[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[16] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v6);
  v3[18] = swift_task_alloc(v6);
  v7 = sub_10001A9A8((uint64_t *)&unk_101116060);
  v3[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009C7A3C, v2, 0);
}

uint64_t sub_1009C7A3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[19];
  v0[2] = _swiftEmptyArrayStorage;
  v2 = type metadata accessor for CentralManager(0);
  v0[20] = v2;
  static CentralManager.Options.needsRestrictedStateOperation.getter(v2);
  v3 = type metadata accessor for CentralManager.Options(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 0, 1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v0[21] = v4;
  *v4 = v0;
  v4[1] = sub_1009C7ADC;
  return CentralManager.__allocating_init(options:)(v0[19]);
}

uint64_t sub_1009C7ADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009C7B3C, v3, 0);
}

uint64_t sub_1009C7B3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[18];
  v2 = v0[15];
  v3 = v0[16];
  v4 = v0[13];
  v5 = type metadata accessor for Logger(0);
  v0[23] = sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[24] = v6;
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[18];
  v12 = v0[15];
  v13 = v0[16];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v23 = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    v0[11] = sub_100016940(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Looking for CBPeripheral for attached accessory by MAC address: %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v0[18], v0[15]);
  }

  v0[25] = v19;
  v20 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v21 = (_QWORD *)swift_task_alloc(v20);
  v0[26] = v21;
  *v21 = v0;
  v21[1] = sub_1009C7D8C;
  return withTimeout<A>(_:block:)(v21, 1000000000000000000, 0, &unk_10110F910, v0[22], &type metadata for () + 1);
}

uint64_t sub_1009C7D8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 112);
    swift_bridgeObjectRelease();
    swift_release();
    v5 = sub_1009C8644;
    v6 = v4;
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 112);
    swift_release();
    v5 = sub_1009C7E20;
    v6 = v7;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_1009C7E20()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;

  v1 = swift_retain_n(v0[22], 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[22];
    v5 = v0[20];
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446466;
    v0[8] = sub_100016940(0xD000000000000032, 0x8000000100EEC2E0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    v0[9] = v4;
    v8 = sub_100006204(&qword_10110F790, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v0[10] = sub_100016940(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s %s has powered on!", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release_n(v0[22], 2);
  }

  v13 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                       + async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:));
  v11 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                   + 1));
  v0[28] = v11;
  *v11 = v0;
  v11[1] = sub_1009C8030;
  return v13(v0[13]);
}

uint64_t sub_1009C8030(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[14];
    swift_bridgeObjectRelease();
    v6 = sub_1009C880C;
    v7 = v5;
  }
  else
  {
    v7 = v3[14];
    v6 = sub_1009C80AC;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_1009C80AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 232);
  if (v1)
  {
    v2 = (_QWORD *)(v0 + 16);
    v3 = swift_retain_n(*(_QWORD *)(v0 + 232), 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v34 = v7;
      *(_DWORD *)v6 = 136446210;
      *(_QWORD *)(v0 + 48) = v1;
      v8 = type metadata accessor for Peripheral(0);
      v9 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
      v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
      *(_QWORD *)(v0 + 56) = sub_100016940(v10, v11, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease();
      swift_release_n(v1, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Found peripheral by MAC address: %{public}s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }
    else
    {
      swift_release_n(v1, 2);
    }

    v23 = swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
    v25 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v24 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v25 >= v24 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
    v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v1);
    specialized Array._endMutation()(v26);
    swift_release();
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 120));
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 120);
    if (v15)
    {
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v34 = v19;
      *(_DWORD *)v18 = 136446210;
      v20 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      *(_QWORD *)(v0 + 40) = sub_100016940(v21, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      v33(v16, v17);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No CBPeripheral found for %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 200))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    }

  }
  v27 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 248) = v27;
  *(_QWORD *)(v0 + 32) = v27;
  v28 = async function pointer to Sequence.asyncFilter(_:)[1];
  swift_bridgeObjectRetain(v27);
  v29 = (_QWORD *)swift_task_alloc(v28);
  *(_QWORD *)(v0 + 256) = v29;
  v30 = sub_10001A9A8(&qword_10110F928);
  v31 = sub_1000193A4(&qword_10110F930, &qword_10110F928, (const char *)&protocol conformance descriptor for [A]);
  *v29 = v0;
  v29[1] = sub_1009C8490;
  return Sequence.asyncFilter(_:)(&unk_10110F920, *(_QWORD *)(v0 + 112), v30, v31);
}

uint64_t sub_1009C8490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1009C8508, v3, 0);
}

void sub_1009C8508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 264);
  if (!((unint64_t)v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    v3 = 1;
    goto LABEL_12;
  }
  if (v1 < 0)
    v4 = *(_QWORD *)(v0 + 264);
  else
    v4 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 264));
  v5 = _CocoaArrayWrapper.endIndex.getter(v4);
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_11;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 264));
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_6:
    v2 = swift_bridgeObjectRelease();
    Peripheral.id.getter(v2);
    swift_release();
    v3 = 0;
LABEL_12:
    swift_release();
    v6 = *(_QWORD *)(v0 + 96);
    v7 = sub_10001A9A8(&qword_1010EF7C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, v3, 1, v7);
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  __break(1u);
}

uint64_t sub_1009C8644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release();
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error while retrieving peripheral: %{public}@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 96);
  v10 = sub_10001A9A8(&qword_1010EF7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C880C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 240);
  swift_release();
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error while retrieving peripheral: %{public}@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 96);
  v10 = sub_10001A9A8(&qword_1010EF7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C89D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch(sub_1009C89EC, 0, 0);
}

uint64_t sub_1009C89EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = sub_10001A9A8((uint64_t *)&unk_101117030);
  v2 = type metadata accessor for CentralManager.State(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_QWORD *)(v0 + 24) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  v8 = v7 + v6;
  v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104);
  v9(v8, enum case for CentralManager.State.poweredOn(_:), v2);
  v9(v8 + v4, enum case for CentralManager.State.restricted(_:), v2);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(states:)[1]);
  *(_QWORD *)(v0 + 32) = v10;
  v11 = type metadata accessor for CentralManager(0);
  v12 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v10 = v0;
  v10[1] = sub_1009C8B0C;
  return CentralManagerProtocol.await(states:)(v7, v11, v12);
}

uint64_t sub_1009C8B0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1009C8B80, 0, 0);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1009C8B80()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009C8BB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *a1;
  v5 = (_QWORD *)swift_task_alloc(dword_10110F364);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10027A6D0;
  v5[2] = v4;
  v5[3] = a2;
  return swift_task_switch(sub_1009C75AC, a2, 0);
}

uint64_t sub_1009C8C18()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000126B0(v0 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1009C8CC4()
{
  uint64_t v0;

  sub_1009C8C18();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1009C8CDC()
{
  return type metadata accessor for PencilPairingService(0);
}

uint64_t type metadata accessor for PencilPairingService(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_10110F318, (uint64_t)&nominal type descriptor for PencilPairingService);
}

uint64_t sub_1009C8CF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  v4[1] = &unk_100E58340;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = &unk_100E58358;
  v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[7] = &unk_100E58370;
  v4[8] = &unk_100E58370;
  v4[9] = &unk_100E58388;
  result = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(result - 8) + 64;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[14] = (char *)&value witness table for Builtin.NativeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
  return result;
}

uint64_t type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110F670, (uint64_t)&nominal type descriptor for PencilPairingService.AttachedLocalFindableAccessory);
}

uint64_t *sub_1009C8DC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v8 = sub_10001A9A8(&qword_1010EF7C0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload == 1);
  }
  return a1;
}

uint64_t sub_1009C8E74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF7C0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1009C8EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
  v7 = sub_10001A9A8(&qword_1010EF7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, v6);
  return a1;
}

uint64_t sub_1009C8F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1000126B0(a1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
    v7 = sub_10001A9A8(&qword_1010EF7C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, v6);
  }
  return a1;
}

uint64_t type metadata accessor for PencilPairingService.PeripheralDiscovery(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_10110F5B8, (uint64_t)&nominal type descriptor for PencilPairingService.PeripheralDiscovery);
}

uint64_t sub_1009C8FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
  v7 = sub_10001A9A8(&qword_1010EF7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  swift_storeEnumTagMultiPayload(a1, a3, v6);
  return a1;
}

uint64_t sub_1009C9040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1000126B0(a1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    v6 = swift_getEnumCaseMultiPayload(a2, a3) == 1;
    v7 = sub_10001A9A8(&qword_1010EF7C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, v6);
  }
  return a1;
}

void sub_1009C90D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_1009C9134(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
  }
}

void sub_1009C9134(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10110F5C8)
  {
    v2 = type metadata accessor for Peripheral(255);
    v3 = type metadata accessor for Identifier(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10110F5C8);
  }
}

uint64_t *sub_1009C9188(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(sub_10001A9A8(&qword_10110F5F8) + 48);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = sub_10001A9A8(&qword_1010EF7C0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1009C92EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = a1;
  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      v5 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
      v2 += *(int *)(sub_10001A9A8(&qword_10110F5F8) + 48);
      v4 = sub_10001A9A8(&qword_1010EF7C0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
    }
    if ((_DWORD)result)
      return result;
  }
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
}

char *sub_1009C9384(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = *(int *)(sub_10001A9A8(&qword_10110F5F8) + 48);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = sub_10001A9A8(&qword_1010EF7C0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

char *sub_1009C94C0(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = *(int *)(sub_10001A9A8(&qword_10110F5F8) + 48);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = sub_10001A9A8(&qword_1010EF7C0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

char *sub_1009C9614(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = *(int *)(sub_10001A9A8(&qword_10110F5F8) + 48);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = sub_10001A9A8(&qword_1010EF7C0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

char *sub_1009C9750(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = *(int *)(sub_10001A9A8(&qword_10110F5F8) + 48);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = sub_10001A9A8(&qword_1010EF7C0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void sub_1009C98A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v7[32];
  _QWORD v8[3];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v8[0] = v4;
    sub_1009C9134(319);
    if (v6 <= 0x3F)
    {
      swift_getTupleTypeLayout2(v7, v4, *(_QWORD *)(v5 - 8) + 64);
      v8[1] = v7;
      v8[2] = v4;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v8);
    }
  }
}

uint64_t sub_1009C993C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110F32C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_1009B50FC();
}

uint64_t sub_1009C9980(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_1009C9998, v3, 0);
}

uint64_t sub_1009C9998()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10111E99C);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1009C99F4;
  return sub_100D4065C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1009C99F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1009C9A48(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1009C9A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v54 = a4;
  v49 = a3;
  v58 = a2;
  v47 = a1;
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v55 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F8318);
  v10 = *(_QWORD *)(v9 - 8);
  v56 = v9;
  v57 = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v51 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - v13;
  v44 = (char *)&v41 - v13;
  v15 = sub_10001A9A8(&qword_1010EF7C0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = __chkstk_darwin(v15);
  v50 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v41 - v19;
  v53 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_queue);
  v52 = type metadata accessor for WorkItemQueue.WorkItem(0);
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v48(v20, a3, v15);
  v21 = v57;
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
  v46(v14, a1, v9);
  v22 = *(unsigned __int8 *)(v16 + 80);
  v23 = (v22 + 16) & ~v22;
  v45 = v23 + v17;
  v24 = (v23 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(unsigned __int8 *)(v21 + 80);
  v26 = (v25 + v24 + 8) & ~v25;
  v43 = v22 | v25 | 7;
  v27 = v11 + 7;
  v28 = (v11 + 7 + v26) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_1010A0FB0, v28 + 8, v43);
  v42 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
  v42(v29 + v23, v20, v15);
  *(_QWORD *)(v29 + v24) = v58;
  v30 = v56;
  v57 = *(_QWORD *)(v57 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v57)(v29 + v26, v44, v56);
  v31 = v54;
  *(_QWORD *)(v29 + v28) = v54;
  v32 = v50;
  v48(v50, v49, v15);
  v33 = v51;
  v46(v51, v47, v30);
  v34 = (v45 + v25) & ~v25;
  v35 = (v27 + v34) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(&unk_1010A0FD8, v35 + 8, v43);
  v42(v36 + v23, v32, v15);
  ((void (*)(uint64_t, char *, uint64_t))v57)(v36 + v34, v33, v56);
  *(_QWORD *)(v36 + v35) = v31;
  v37 = swift_retain();
  v38 = v55;
  UUID.init()(v37);
  v39 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v38, &unk_10110F750, v29, &unk_10110F760, v36);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v39);
  return swift_release();
}

uint64_t sub_1009C9D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_10001A9A8(&qword_1010F8318);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[8] = v7;
  v4[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v4[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[11] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v4[12] = v10;
  v4[13] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009C9E28, 0, 0);
}

uint64_t sub_1009C9E28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  v6 = v0[8];
  v5 = v0[9];
  v7 = v0[6];
  v8 = v0[7];
  v20 = v7;
  v21 = v5;
  v9 = v0[4];
  v22 = v0[3];
  v23 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[2], v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v9, v7);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = (v2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = (v13 + v12 + 8) & ~v13;
  v15 = (v6 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_1010A1000, v15 + 8, v10 | v13 | 7);
  v0[14] = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v16 + v11, v1, v3);
  *(_QWORD *)(v16 + v12) = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v16 + v14, v21, v20);
  *(_QWORD *)(v16 + v15) = v23;
  v17 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v18 = (_QWORD *)swift_task_alloc(v17);
  v0[15] = v18;
  *v18 = v0;
  v18[1] = sub_1009C9F90;
  return withTimeout<A>(_:block:)(v18, 0x40AAD21B3B700000, 3, &unk_10110F770, v16, &type metadata for () + 1);
}

uint64_t sub_1009C9F90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1009F9E24;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 112));
    v4 = sub_1009F9DF4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1009C9FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[14] = a3;
  v4[15] = a4;
  v4[13] = a2;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v4[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[17] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v7);
  v4[19] = swift_task_alloc(v7);
  v4[20] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v4[21] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[22] = v9;
  v4[23] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CentralManager.State(0);
  v4[24] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[25] = v11;
  v4[26] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[27] = type metadata accessor for CentralManager(0);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to static CentralManager.pairingCentralManager.getter[1]);
  v4[28] = v12;
  *v12 = v4;
  v12[1] = sub_1009CA0F4;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_1009CA0F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*v2 + 224);
  v4 = *v2;
  *(_QWORD *)(v4 + 232) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1009CA1B4, 0, 0);
  v5 = *(_QWORD *)(v4 + 184);
  v7 = *(_QWORD *)(v4 + 152);
  v6 = *(_QWORD *)(v4 + 160);
  v8 = *(_QWORD *)(v4 + 144);
  swift_task_dealloc(*(_QWORD *)(v4 + 208));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1009CA1B4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[25] + 104))(v0[26], enum case for CentralManager.State.poweredOn(_:), v0[24]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[30] = v1;
  v2 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_1009CA244;
  return CentralManagerProtocol.await(state:)(v0[26], v0[27], v2);
}

uint64_t sub_1009CA244()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[25] + 8))(v2[26], v2[24]);
  if (v0)
    v4 = sub_1009CB6E0;
  else
    v4 = sub_1009CA2B8;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1009CA2B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t (*v34)(_QWORD *);
  _QWORD *v35;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[29];
  v2 = type metadata accessor for Logger(0);
  v0[32] = sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[29];
  if (v6)
  {
    v8 = v0[27];
    v9 = swift_slowAlloc(22, -1);
    v10 = (_QWORD *)swift_slowAlloc(64, -1);
    v35 = v10;
    *(_DWORD *)v9 = 136446466;
    v0[10] = sub_100016940(0xD000000000000029, 0x8000000100EEBFD0, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2080;
    v0[11] = v7;
    v11 = sub_100006204(&qword_10110F790, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v8, v11);
    v0[12] = sub_100016940(v12, v13, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s %s has powered on!", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release_n(v0[29], 2);
  }

  v14 = v0[20];
  v15 = v0[16];
  v16 = v0[17];
  v17 = v0[13];
  v18 = sub_10001A9A8(&qword_10110F778);
  v19 = *(unsigned __int8 *)(v16 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(v18, v20 + *(_QWORD *)(v16 + 72), v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  v22 = v21 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v0[33] = v23;
  v23(v22, v17, v15);
  v35 = _swiftEmptyArrayStorage;
  sub_10009A578(0, 1, 0);
  v23(v14, v22, v15);
  Identifier.id.getter(v15);
  v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[34] = v24;
  v24(v14, v15);
  v25 = v35;
  if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
  {
    sub_10009A578(0, v25[2] + 1, 1);
    v25 = v35;
  }
  v27 = v25[2];
  v26 = v25[3];
  if (v27 >= v26 >> 1)
  {
    sub_10009A578(v26 > 1, v27 + 1, 1);
    v25 = v35;
  }
  v0[35] = v25;
  v29 = v0[22];
  v28 = v0[23];
  v30 = v0[21];
  v31 = v0[16];
  v25[2] = v27 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))((unint64_t)v25+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v27, v28, v30);
  swift_setDeallocating(v21);
  swift_arrayDestroy(v22, *(_QWORD *)(v21 + 16), v31);
  swift_deallocClassInstance(v21, 32, 7);
  v34 = (uint64_t (*)(_QWORD *))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                         + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  v32 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                   + 1));
  v0[36] = v32;
  *v32 = v0;
  v32[1] = sub_1009CA684;
  return v34(v25);
}

uint64_t sub_1009CA684(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 288);
  *(_QWORD *)(v3 + 296) = a1;
  *(_QWORD *)(v3 + 304) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1009CB758;
  }
  else
  {
    swift_release();
    v5 = sub_1009CA6F8;
  }
  return swift_task_switch(v5, 0, 0);
}

void sub_1009CA6F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];

  v1 = *(_QWORD *)(v0 + 296);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v14 = *(_QWORD *)(v0 + 296);
    else
      v14 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 296));
    v15 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
    if (v15)
      goto LABEL_3;
LABEL_14:
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 264);
    v17 = *(_QWORD *)(v0 + 152);
    v18 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 104);
    swift_bridgeObjectRelease();
    v20 = v16(v17, v19, v18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 128);
    if (v23)
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v39[0] = v28;
      *(_DWORD *)v27 = 136446210;
      v29 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v26, v29);
      *(_QWORD *)(v0 + 72) = sub_100016940(v30, v31, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      v24(v25, v26);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Missing peripheral for %{public}s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      v24(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128));
    }

    v32 = sub_100350CCC();
    v33 = swift_allocError(&type metadata for PencilPairingService.Error, v32, 0, 0);
    *(_OWORD *)v34 = xmmword_100E58220;
    *(_BYTE *)(v34 + 16) = 3;
    swift_willThrow(v33);
    swift_release();
    v35 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 152);
    v36 = *(_QWORD *)(v0 + 160);
    v38 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 296));
  }
  else
  {
    if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 296) + 32);
    swift_retain();
  }
  *(_QWORD *)(v0 + 312) = v2;
  swift_bridgeObjectRelease();
  v3 = swift_retain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v39[0] = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 48) = sub_100016940(0xD000000000000029, 0x8000000100EEBFD0, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    *(_QWORD *)(v0 + 56) = v2;
    v8 = type metadata accessor for Peripheral(0);
    v9 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
    *(_QWORD *)(v0 + 64) = sub_100016940(v10, v11, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v2, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Retrieved peripheral: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
  }

  v12 = (_QWORD *)swift_task_alloc(dword_10110F364);
  *(_QWORD *)(v0 + 320) = v12;
  *v12 = v0;
  v12[1] = sub_1009CABA8;
  v13 = *(_QWORD *)(v0 + 112);
  v12[2] = v2;
  v12[3] = v13;
  swift_task_switch(sub_1009C75AC, v13, 0);
}

uint64_t sub_1009CABA8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  *(_BYTE *)(*(_QWORD *)v1 + 376) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009CAC04, 0, 0);
}

uint64_t sub_1009CAC04()
{
  uint64_t v0;
  void *v1;
  id v2;
  unsigned int v3;
  NSString v4;
  unsigned __int8 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_BYTE *)(v0 + 376) == 1)
  {
    if (qword_1010EA198 != -1)
      swift_once(&qword_1010EA198, sub_100ACDE4C);
    v1 = (void *)qword_1011B7C08;
    v2 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v3 = objc_msgSend(v2, "isInternalBuild");

    if (v3
      && (v4 = String._bridgeToObjectiveC()(),
          v5 = objc_msgSend(v1, "BOOLForKey:", v4),
          v4,
          (v5 & 1) != 0))
    {
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter(v7);
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Pairing notification is enabled! Proceed with pairing", v9, 2u);
        swift_slowDealloc(v9, -1, -1);
      }

      v10 = (_QWORD *)swift_task_alloc(dword_10110F78C);
      *(_QWORD *)(v0 + 360) = v10;
      *v10 = v0;
      v10[1] = sub_1009CB56C;
      return sub_1009CB968(*(_QWORD *)(v0 + 312));
    }
    else
    {
      v24 = (_QWORD *)swift_task_alloc(dword_10110F784);
      *(_QWORD *)(v0 + 328) = v24;
      *v24 = v0;
      v24[1] = sub_1009CAFEC;
      return sub_1009D2FDC(*(_QWORD *)(v0 + 312));
    }
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 264))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 128));
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
    v17 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 128);
    if (v15)
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v32 = v20;
      *(_DWORD *)v19 = 136446210;
      v21 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v21);
      *(_QWORD *)(v0 + 16) = sub_100016940(v22, v23, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      v16(v17, v18);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unsupported local findable accessory %{public}s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      v16(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    }

    v25 = sub_100350CCC();
    v26 = swift_allocError(&type metadata for PencilPairingService.Error, v25, 0, 0);
    *(_OWORD *)v27 = xmmword_100E2E400;
    *(_BYTE *)(v27 + 16) = 3;
    swift_willThrow(v26);
    swift_release();
    swift_release();
    v28 = *(_QWORD *)(v0 + 184);
    v30 = *(_QWORD *)(v0 + 152);
    v29 = *(_QWORD *)(v0 + 160);
    v31 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009CAFEC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 328);
  *(_BYTE *)(v3 + 377) = a1;
  *(_QWORD *)(v3 + 336) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009CB860;
  else
    v5 = sub_1009CB05C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1009CB05C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_BYTE *)(v1 + 377);
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(64, -1);
    v27[0] = v6;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v1 + 32) = sub_100016940(0xD000000000000029, 0x8000000100EEBFD0, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2082;
    sub_1008F3008(v4);
    *(_QWORD *)(v1 + 40) = sub_100016940(v7, v8, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s accountCheckResult: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  if (*(_BYTE *)(v1 + 377) == 3)
  {
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v27[0] = v13;
      *(_DWORD *)v12 = 136446210;
      *(_QWORD *)(v1 + 24) = sub_100016940(0xD000000000000029, 0x8000000100EEBFD0, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s Paired to this account. Proceed with pairing", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    v14 = (_QWORD *)swift_task_alloc(dword_10110F78C);
    *(_QWORD *)(v1 + 344) = v14;
    *v14 = v1;
    v14[1] = sub_1009CB3F8;
    return sub_1009CB968(*(_QWORD *)(v1 + 312));
  }
  else
  {
    v16 = *(_QWORD *)(v1 + 336);
    static Task<>.checkCancellation()(v9);
    if (v16)
    {
      swift_release();
      swift_release();
      v17 = *(_QWORD *)(v1 + 184);
      v19 = *(_QWORD *)(v1 + 152);
      v18 = *(_QWORD *)(v1 + 160);
      v20 = *(_QWORD *)(v1 + 144);
      swift_task_dealloc(*(_QWORD *)(v1 + 208));
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
    }
    else
    {
      v21 = *(_QWORD *)(v1 + 208);
      v22 = *(_QWORD *)(v1 + 184);
      v24 = *(_QWORD *)(v1 + 152);
      v23 = *(_QWORD *)(v1 + 160);
      v25 = *(_QWORD *)(v1 + 144);
      v26 = sub_10001A9A8(&qword_1010F8318);
      CheckedContinuation.resume(returning:)(v26, v26);
      swift_release();
      swift_release();
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
    }
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1009CB3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1009CB8E4;
  else
    v3 = sub_1009CB45C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1009CB45C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v1 + 352);
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    swift_release();
    swift_release();
    v3 = *(_QWORD *)(v1 + 184);
    v5 = *(_QWORD *)(v1 + 152);
    v4 = *(_QWORD *)(v1 + 160);
    v6 = *(_QWORD *)(v1 + 144);
    swift_task_dealloc(*(_QWORD *)(v1 + 208));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 208);
    v8 = *(_QWORD *)(v1 + 184);
    v10 = *(_QWORD *)(v1 + 152);
    v9 = *(_QWORD *)(v1 + 160);
    v11 = *(_QWORD *)(v1 + 144);
    v12 = sub_10001A9A8(&qword_1010F8318);
    CheckedContinuation.resume(returning:)(v12, v12);
    swift_release();
    swift_release();
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009CB56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1009CB7DC;
  else
    v3 = sub_1009CB5D0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1009CB5D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v1 + 368);
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    swift_release();
    swift_release();
    v3 = *(_QWORD *)(v1 + 184);
    v5 = *(_QWORD *)(v1 + 152);
    v4 = *(_QWORD *)(v1 + 160);
    v6 = *(_QWORD *)(v1 + 144);
    swift_task_dealloc(*(_QWORD *)(v1 + 208));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 208);
    v8 = *(_QWORD *)(v1 + 184);
    v10 = *(_QWORD *)(v1 + 152);
    v9 = *(_QWORD *)(v1 + 160);
    v11 = *(_QWORD *)(v1 + 144);
    v12 = sub_10001A9A8(&qword_1010F8318);
    CheckedContinuation.resume(returning:)(v12, v12);
    swift_release();
    swift_release();
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009CB6E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CB758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 280));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CB7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 312));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CB860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 312));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CB8E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 312));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CB968(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v2[333] = v1;
  v2[332] = a1;
  v2[334] = *v1;
  v3 = sub_10001A9A8(&qword_1010F46C0);
  v2[335] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BinaryDecoder(0);
  v2[336] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[337] = v5;
  v2[338] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BinaryEncoder(0);
  v2[339] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[340] = v7;
  v2[341] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v2[342] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[343] = v9;
  v2[344] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EC448);
  v2[345] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[346] = v11;
  v2[347] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010ED860);
  v2[348] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EC450);
  v2[349] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Peripheral.ConnectionOptions(0);
  v2[350] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[351] = v15;
  v2[352] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010EC458);
  v2[353] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010EC460);
  v2[354] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AccessoryProductInfo(0);
  v2[355] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v2[356] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[357] = swift_task_alloc(v20);
  v2[358] = swift_task_alloc(v20);
  v21 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_10111C0A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[359] = swift_task_alloc(v21);
  v2[360] = swift_task_alloc(v21);
  v2[361] = swift_task_alloc(v21);
  v2[362] = swift_task_alloc(v21);
  v22 = type metadata accessor for RawAccessoryMetadata(0);
  v2[363] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for UUID(0);
  v2[364] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v2[365] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[366] = swift_task_alloc(v25);
  v2[367] = swift_task_alloc(v25);
  v26 = sub_10001A9A8(&qword_1010EF7C0);
  v2[368] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v2[369] = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[370] = swift_task_alloc(v28);
  v2[371] = swift_task_alloc(v28);
  v29 = type metadata accessor for AccessoryMetadata(0);
  v2[372] = v29;
  v30 = (*(_QWORD *)(*(_QWORD *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[373] = swift_task_alloc(v30);
  v2[374] = swift_task_alloc(v30);
  v2[375] = swift_task_alloc(v30);
  v2[376] = swift_task_alloc(v30);
  return swift_task_switch(sub_1009CBC94, v1, 0);
}

uint64_t sub_1009CBC94()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  BOOL v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  BOOL v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133[2];

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 2392) = My;
  *(_QWORD *)(v0 + 2400) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_100018F08((_QWORD *)(v0 + 2368));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 2368);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 2368));
  if ((My & 1) == 0)
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001A9E8(v15, (uint64_t)qword_10110F2A8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Feature.FindMy.lineUp is disabled!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = sub_100350CCC();
    v21 = swift_allocError(&type metadata for PencilPairingService.Error, v20, 0, 0);
    *(_OWORD *)v22 = xmmword_100E2E400;
    *(_BYTE *)(v22 + 16) = 3;
    swift_willThrow(v21);
    goto LABEL_11;
  }
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 3016) = sub_10001A9E8(v3, (uint64_t)qword_10110F2A8);
  v4 = swift_retain();
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 2656);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v133[0] = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 2552) = v8;
    v11 = type metadata accessor for Peripheral(0);
    v12 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 2496) = sub_100016940(v13, v14, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2496, v0 + 2504, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Reading DIS from peripheral: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release();
  }

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 2408) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 2416) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 3336), v0 + 2408, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 3336) == 1)
  {
    v33 = *(_QWORD *)(v0 + 2968);
    v34 = *(_QWORD *)(v0 + 2952);
    v35 = *(_QWORD *)(v0 + 2944);
    v36 = type metadata accessor for Peripheral(0);
    v131 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter(v36, v131);
    Identifier.id.getter(v35);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    result = sub_1001EE37C(76, 1106);
    if (v37 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      v38 = result;
      v39 = v37;
      v40 = *(_QWORD *)(v0 + 3000);
      v41 = *(int **)(v0 + 2976);
      v42 = *(_QWORD *)(v0 + 2936);
      v43 = *(_QWORD *)(v0 + 2920);
      v44 = *(_QWORD *)(v0 + 2912);
      v45 = v40 + v41[10];
      *(_QWORD *)v45 = 0;
      *(_QWORD *)(v45 + 8) = 0;
      *(_BYTE *)(v45 + 16) = 1;
      v46 = (_QWORD *)(v40 + v41[15]);
      *v46 = 0;
      v46[1] = 0xE000000000000000;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v40, v42, v44);
      v47 = (uint64_t *)(v40 + v41[5]);
      *v47 = v38;
      v47[1] = v39;
      *(_DWORD *)(v40 + v41[8]) = 4063235;
      v48 = (_QWORD *)(v40 + v41[7]);
      *v48 = 0;
      v48[1] = 0;
      v49 = (_QWORD *)(v40 + v41[6]);
      *v49 = 0;
      v49[1] = 0;
      v50 = v40 + v41[9];
      *(_DWORD *)v50 = 0;
      *(_BYTE *)(v50 + 4) = 1;
      v51 = v40 + v41[11];
      *(_QWORD *)v51 = 0;
      *(_BYTE *)(v51 + 8) = 1;
      v52 = v40 + v41[12];
      *(_DWORD *)v52 = 0;
      *(_BYTE *)(v52 + 4) = 1;
      *(_BYTE *)(v40 + v41[13]) = 4;
      *(_BYTE *)(v40 + v41[14]) = 5;
      v53 = *(_QWORD *)(v0 + 3008);
      v54 = *(_QWORD *)(v0 + 2984);
      sub_1000126EC(*(_QWORD *)(v0 + 3000), v53, type metadata accessor for AccessoryMetadata);
      v55 = sub_10005972C(v53, v54, type metadata accessor for AccessoryMetadata);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.default.getter(v56);
      v58 = os_log_type_enabled(v56, v57);
      v59 = *(_QWORD *)(v0 + 2984);
      v129 = v36;
      if (v58)
      {
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v133[0] = v61;
        *(_DWORD *)v60 = 136446210;
        v62 = sub_100132D48();
        *(_QWORD *)(v0 + 2560) = sub_100016940(v62, v63, v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2560, v0 + 2568, v60 + 4, v60 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v59, type metadata accessor for AccessoryMetadata);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "DIS: %{public}s", v60, 0xCu);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {
        sub_1000126B0(v59, type metadata accessor for AccessoryMetadata);
      }

      *(_QWORD *)(v0 + 2424) = 0x7365547265646E75;
      *(_QWORD *)(v0 + 2432) = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 3338), v0 + 2424, sub_10001F628, 0, &type metadata for Bool);
      swift_bridgeObjectRelease();
      if (*(_BYTE *)(v0 + 3338) == 1)
      {
        v65 = *(_QWORD *)(v0 + 2928);
        v66 = *(_QWORD *)(v0 + 2920);
        v67 = *(_QWORD *)(v0 + 2912);
        v68 = *(_QWORD *)(v0 + 2888);
        v69 = *(_QWORD *)(v0 + 2848);
        v70 = *(_QWORD *)(v0 + 2840);
        v71 = type metadata accessor for BeaconStore(0);
        UUID.init()(v71);
        sub_100C9AB8C(v65, 0, v68);
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v68, 0, 1, v70);
        v72 = *(_QWORD *)(v0 + 2896);
        v73 = *(_QWORD *)(v0 + 2872);
        v74 = *(_QWORD *)(v0 + 2848);
        v75 = *(_QWORD *)(v0 + 2840);
        sub_100005CF0(*(_QWORD *)(v0 + 2888), v72, (uint64_t *)&unk_10111C0A0);
        sub_10000F9B8(v72, v73, (uint64_t *)&unk_10111C0A0);
        v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v73, 1, v75);
        v77 = *(_QWORD *)(v0 + 2872);
        if (v76 == 1)
        {
          v78 = sub_100004048(v77, (uint64_t *)&unk_10111C0A0);
          v79 = Logger.logObject.getter(v78);
          v80 = static os_log_type_t.error.getter(v79);
          if (os_log_type_enabled(v79, v80))
          {
            v81 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v81 = 0;
            _os_log_impl((void *)&_mh_execute_header, v79, v80, "Missing product info!", v81, 2u);
            swift_slowDealloc(v81, -1, -1);
          }
          v82 = *(_QWORD *)(v0 + 3008);
          v83 = *(_QWORD *)(v0 + 2896);

          v84 = sub_100350CCC();
          v85 = swift_allocError(&type metadata for PencilPairingService.Error, v84, 0, 0);
          *(_OWORD *)v86 = xmmword_100E58230;
          *(_BYTE *)(v86 + 16) = 3;
          swift_willThrow(v85);
          sub_100004048(v83, (uint64_t *)&unk_10111C0A0);
          sub_1000126B0(v82, type metadata accessor for AccessoryMetadata);
LABEL_11:
          v23 = *(_QWORD *)(v0 + 3000);
          v24 = *(_QWORD *)(v0 + 2992);
          v25 = *(_QWORD *)(v0 + 2984);
          v26 = *(_QWORD *)(v0 + 2968);
          v27 = *(_QWORD *)(v0 + 2960);
          v28 = *(_QWORD *)(v0 + 2936);
          v29 = *(_QWORD *)(v0 + 2928);
          v30 = *(_QWORD *)(v0 + 2904);
          v31 = *(_QWORD *)(v0 + 2896);
          v115 = *(_QWORD *)(v0 + 2888);
          v116 = *(_QWORD *)(v0 + 2880);
          v117 = *(_QWORD *)(v0 + 2872);
          v118 = *(_QWORD *)(v0 + 2864);
          v119 = *(_QWORD *)(v0 + 2856);
          v120 = *(_QWORD *)(v0 + 2832);
          v121 = *(_QWORD *)(v0 + 2824);
          v122 = *(_QWORD *)(v0 + 2816);
          v123 = *(_QWORD *)(v0 + 2792);
          v124 = *(_QWORD *)(v0 + 2784);
          v125 = *(_QWORD *)(v0 + 2776);
          v126 = *(_QWORD *)(v0 + 2752);
          v127 = *(_QWORD *)(v0 + 2728);
          v128 = *(_QWORD *)(v0 + 2704);
          v130 = *(_QWORD *)(v0 + 2680);
          swift_task_dealloc(*(_QWORD *)(v0 + 3008));
          swift_task_dealloc(v23);
          swift_task_dealloc(v24);
          swift_task_dealloc(v25);
          swift_task_dealloc(v26);
          swift_task_dealloc(v27);
          swift_task_dealloc(v28);
          swift_task_dealloc(v29);
          swift_task_dealloc(v30);
          swift_task_dealloc(v31);
          swift_task_dealloc(v115);
          swift_task_dealloc(v116);
          swift_task_dealloc(v117);
          swift_task_dealloc(v118);
          swift_task_dealloc(v119);
          swift_task_dealloc(v120);
          swift_task_dealloc(v121);
          swift_task_dealloc(v122);
          swift_task_dealloc(v123);
          swift_task_dealloc(v124);
          swift_task_dealloc(v125);
          swift_task_dealloc(v126);
          swift_task_dealloc(v127);
          swift_task_dealloc(v128);
          swift_task_dealloc(v130);
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
        v88 = *(_QWORD *)(v0 + 2864);
        v89 = *(_QWORD *)(v0 + 2856);
        sub_1000126EC(v77, v88, type metadata accessor for AccessoryProductInfo);
        v90 = sub_10005972C(v88, v89, type metadata accessor for AccessoryProductInfo);
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.default.getter(v91);
        v93 = os_log_type_enabled(v91, v92);
        v94 = *(_QWORD *)(v0 + 2856);
        if (v93)
        {
          v95 = (uint8_t *)swift_slowAlloc(12, -1);
          v96 = swift_slowAlloc(32, -1);
          v133[0] = v96;
          *(_DWORD *)v95 = 136446210;
          v97 = sub_100D1A984();
          *(_QWORD *)(v0 + 2648) = sub_100016940(v97, v98, v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2648, v0 + 2656, v95 + 4, v95 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v94, type metadata accessor for AccessoryProductInfo);
          _os_log_impl((void *)&_mh_execute_header, v91, v92, "Product info: %{public}s)", v95, 0xCu);
          swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1, -1);
          swift_slowDealloc(v95, -1, -1);
        }
        else
        {
          sub_1000126B0(*(_QWORD *)(v0 + 2856), type metadata accessor for AccessoryProductInfo);
        }

        sub_1009E4DD0(*(_QWORD *)(v0 + 3008), *(_QWORD *)(v0 + 2864));
        v99 = *(_QWORD *)(v0 + 2832);
        v100 = *(_QWORD *)(v0 + 2824);
        v101 = *(_QWORD *)(v0 + 2816);
        v102 = *(_QWORD *)(v0 + 2808);
        v103 = *(_QWORD *)(v0 + 2800);
        v104 = *(_QWORD *)(v0 + 2792);
        v105 = type metadata accessor for ConnectUseCase(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56))(v99, 1, 1, v105);
        v106 = sub_10001A9A8(&qword_1010EC480);
        v107 = swift_allocObject(v106, ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80))+ 2 * *(_QWORD *)(v102 + 72), *(unsigned __int8 *)(v102 + 80) | 7);
        *(_OWORD *)(v107 + 16) = xmmword_100E22B10;
        v108 = static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
        static Peripheral.ConnectionOptions.shouldSkipUnpair.getter(v108);
        *(_QWORD *)(v0 + 2480) = v107;
        v109 = sub_100006204(&qword_1010EC488, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions, (uint64_t)&protocol conformance descriptor for Peripheral.ConnectionOptions);
        v110 = sub_10001A9A8(&qword_1010EC490);
        v111 = sub_1000193A4(&qword_1010EC498, &qword_1010EC490, (const char *)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 2480, v110, v111, v103, v109);
        v112 = type metadata accessor for PeripheralPairingInfo(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v104, 1, 1, v112);
        Peripheral.Options.init(connectionOptions:pairingInfo:)(v101, v104);
        v113 = type metadata accessor for Peripheral.Options(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v100, 0, 1, v113);
        *(_QWORD *)(v0 + 3072) = v129;
        *(_QWORD *)(v0 + 3080) = v131;
        v114 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect(useCase:options:)[1]);
        *(_QWORD *)(v0 + 3088) = v114;
        *v114 = v0;
        v114[1] = sub_1009CD610;
        return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(*(_QWORD *)(v0 + 2832), *(_QWORD *)(v0 + 2824), v129, v131);
      }
      else
      {
        type metadata accessor for AccessoryMetadataManager();
        v87 = (_QWORD *)swift_task_alloc(dword_1010F37D4);
        *(_QWORD *)(v0 + 3056) = v87;
        *v87 = v0;
        v87[1] = sub_1009CD5AC;
        return sub_10021770C(*(_QWORD *)(v0 + 2880), *(_QWORD *)(v0 + 3008), 3);
      }
    }
  }
  else
  {
    v132 = (char *)&dword_10110F798 + dword_10110F798;
    v64 = (_QWORD *)swift_task_alloc(unk_10110F79C);
    *(_QWORD *)(v0 + 3024) = v64;
    *v64 = v0;
    v64[1] = sub_1009CCA74;
    return ((uint64_t (*)(_QWORD, _QWORD))v132)(*(_QWORD *)(v0 + 2904), *(_QWORD *)(v0 + 2656));
  }
  return result;
}

uint64_t sub_1009CCA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 3024);
  *(_QWORD *)(*(_QWORD *)v1 + 3032) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1009CCB40;
  else
    v3 = sub_1009CCAD8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1009CCAD8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = v0[379];
  sub_100133B68(v0[363], v0[374]);
  v0[380] = v1;
  if (v1)
  {
    v0[381] = v1;
    v2 = v0[333];
    v3 = sub_1009CD410;
  }
  else
  {
    v2 = v0[333];
    v3 = sub_1009CCB5C;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_1009CCB40()
{
  _QWORD *v0;

  v0[381] = v0[379];
  return swift_task_switch(sub_1009CD410, v0[333], 0);
}

uint64_t sub_1009CCB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  BOOL v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[2];

  v1 = v0 + 2424;
  v2 = *(_QWORD *)(v0 + 3040);
  v3 = *(_QWORD *)(v0 + 3008);
  v4 = *(_QWORD *)(v0 + 2984);
  sub_1000126EC(*(_QWORD *)(v0 + 2992), v3, type metadata accessor for AccessoryMetadata);
  v5 = sub_10005972C(v3, v4, type metadata accessor for AccessoryMetadata);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v91 = v2;
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 2984);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v92[0] = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = sub_100132D48();
    *(_QWORD *)(v0 + 2560) = sub_100016940(v11, v12, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2560, v0 + 2568, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DIS: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    v13 = v9;
    v1 = v0 + 2424;
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 2984), type metadata accessor for AccessoryMetadata);
  }

  *(_QWORD *)(v0 + 2424) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 2432) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 3338), v1, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 3338) != 1)
  {
    type metadata accessor for AccessoryMetadataManager();
    v36 = (_QWORD *)swift_task_alloc(dword_1010F37D4);
    *(_QWORD *)(v0 + 3056) = v36;
    *v36 = v0;
    v36[1] = sub_1009CD5AC;
    return sub_10021770C(*(_QWORD *)(v0 + 2880), *(_QWORD *)(v0 + 3008), 3);
  }
  v14 = *(_QWORD *)(v0 + 2928);
  v15 = *(_QWORD *)(v0 + 2920);
  v16 = *(_QWORD *)(v0 + 2912);
  v17 = *(_QWORD *)(v0 + 2888);
  v18 = *(_QWORD *)(v0 + 2848);
  v19 = *(_QWORD *)(v0 + 2840);
  v20 = type metadata accessor for BeaconStore(0);
  UUID.init()(v20);
  sub_100C9AB8C(v14, 0, v17);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, v19);
  v21 = *(_QWORD *)(v0 + 2896);
  v22 = *(_QWORD *)(v0 + 2872);
  v23 = *(_QWORD *)(v0 + 2848);
  v24 = *(_QWORD *)(v0 + 2840);
  sub_100005CF0(*(_QWORD *)(v0 + 2888), v21, (uint64_t *)&unk_10111C0A0);
  sub_10000F9B8(v21, v22, (uint64_t *)&unk_10111C0A0);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, 1, v24);
  v26 = *(_QWORD *)(v0 + 2872);
  if (v25 == 1)
  {
    v27 = sub_100004048(v26, (uint64_t *)&unk_10111C0A0);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Missing product info!", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }
    v31 = *(_QWORD *)(v0 + 3008);
    v32 = *(_QWORD *)(v0 + 2896);

    v33 = sub_100350CCC();
    v34 = swift_allocError(&type metadata for PencilPairingService.Error, v33, 0, 0);
    *(_OWORD *)v35 = xmmword_100E58230;
    *(_BYTE *)(v35 + 16) = 3;
    swift_willThrow(v34);
    goto LABEL_15;
  }
  v38 = *(_QWORD *)(v0 + 2864);
  v39 = *(_QWORD *)(v0 + 2856);
  sub_1000126EC(v26, v38, type metadata accessor for AccessoryProductInfo);
  v40 = sub_10005972C(v38, v39, type metadata accessor for AccessoryProductInfo);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  v43 = os_log_type_enabled(v41, v42);
  v44 = *(_QWORD *)(v0 + 2856);
  if (v43)
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v92[0] = v46;
    *(_DWORD *)v45 = 136446210;
    v47 = sub_100D1A984();
    *(_QWORD *)(v0 + 2648) = sub_100016940(v47, v48, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2648, v0 + 2656, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v44, type metadata accessor for AccessoryProductInfo);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Product info: %{public}s)", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 2856), type metadata accessor for AccessoryProductInfo);
  }

  sub_1009E4DD0(*(_QWORD *)(v0 + 3008), *(_QWORD *)(v0 + 2864));
  if (v91)
  {
    v31 = *(_QWORD *)(v0 + 3008);
    v32 = *(_QWORD *)(v0 + 2896);
    sub_1000126B0(*(_QWORD *)(v0 + 2864), type metadata accessor for AccessoryProductInfo);
LABEL_15:
    sub_100004048(v32, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v31, type metadata accessor for AccessoryMetadata);
    v49 = *(_QWORD *)(v0 + 3000);
    v50 = *(_QWORD *)(v0 + 2992);
    v51 = *(_QWORD *)(v0 + 2984);
    v52 = *(_QWORD *)(v0 + 2968);
    v53 = *(_QWORD *)(v0 + 2960);
    v54 = *(_QWORD *)(v0 + 2936);
    v55 = *(_QWORD *)(v0 + 2928);
    v56 = *(_QWORD *)(v0 + 2904);
    v57 = *(_QWORD *)(v0 + 2896);
    v76 = *(_QWORD *)(v0 + 2888);
    v77 = *(_QWORD *)(v0 + 2880);
    v78 = *(_QWORD *)(v0 + 2872);
    v79 = *(_QWORD *)(v0 + 2864);
    v80 = *(_QWORD *)(v0 + 2856);
    v81 = *(_QWORD *)(v0 + 2832);
    v82 = *(_QWORD *)(v0 + 2824);
    v83 = *(_QWORD *)(v0 + 2816);
    v84 = *(_QWORD *)(v0 + 2792);
    v85 = *(_QWORD *)(v0 + 2784);
    v86 = *(_QWORD *)(v0 + 2776);
    v87 = *(_QWORD *)(v0 + 2752);
    v88 = *(_QWORD *)(v0 + 2728);
    v89 = *(_QWORD *)(v0 + 2704);
    v90 = *(_QWORD *)(v0 + 2680);
    swift_task_dealloc(*(_QWORD *)(v0 + 3008));
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v58 = *(_QWORD *)(v0 + 2832);
  v59 = *(_QWORD *)(v0 + 2824);
  v60 = *(_QWORD *)(v0 + 2816);
  v61 = *(_QWORD *)(v0 + 2808);
  v62 = *(_QWORD *)(v0 + 2800);
  v63 = *(_QWORD *)(v0 + 2792);
  v64 = type metadata accessor for ConnectUseCase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v58, 1, 1, v64);
  v65 = sub_10001A9A8(&qword_1010EC480);
  v66 = swift_allocObject(v65, ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ 2 * *(_QWORD *)(v61 + 72), *(unsigned __int8 *)(v61 + 80) | 7);
  *(_OWORD *)(v66 + 16) = xmmword_100E22B10;
  v67 = static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  static Peripheral.ConnectionOptions.shouldSkipUnpair.getter(v67);
  *(_QWORD *)(v0 + 2480) = v66;
  v68 = sub_100006204(&qword_1010EC488, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions, (uint64_t)&protocol conformance descriptor for Peripheral.ConnectionOptions);
  v69 = sub_10001A9A8(&qword_1010EC490);
  v70 = sub_1000193A4(&qword_1010EC498, &qword_1010EC490, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 2480, v69, v70, v62, v68);
  v71 = type metadata accessor for PeripheralPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v63, 1, 1, v71);
  Peripheral.Options.init(connectionOptions:pairingInfo:)(v60, v63);
  v72 = type metadata accessor for Peripheral.Options(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v59, 0, 1, v72);
  v73 = type metadata accessor for Peripheral(0);
  *(_QWORD *)(v0 + 3072) = v73;
  v74 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  *(_QWORD *)(v0 + 3080) = v74;
  v75 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect(useCase:options:)[1]);
  *(_QWORD *)(v0 + 3088) = v75;
  *v75 = v0;
  v75[1] = sub_1009CD610;
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(*(_QWORD *)(v0 + 2832), *(_QWORD *)(v0 + 2824), v73, v74);
}

uint64_t sub_1009CD410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 3000);
  v2 = *(_QWORD *)(v0 + 2992);
  v3 = *(_QWORD *)(v0 + 2984);
  v4 = *(_QWORD *)(v0 + 2968);
  v5 = *(_QWORD *)(v0 + 2960);
  v6 = *(_QWORD *)(v0 + 2936);
  v7 = *(_QWORD *)(v0 + 2928);
  v8 = *(_QWORD *)(v0 + 2904);
  v9 = *(_QWORD *)(v0 + 2896);
  v11 = *(_QWORD *)(v0 + 2888);
  v12 = *(_QWORD *)(v0 + 2880);
  v13 = *(_QWORD *)(v0 + 2872);
  v14 = *(_QWORD *)(v0 + 2864);
  v15 = *(_QWORD *)(v0 + 2856);
  v16 = *(_QWORD *)(v0 + 2832);
  v17 = *(_QWORD *)(v0 + 2824);
  v18 = *(_QWORD *)(v0 + 2816);
  v19 = *(_QWORD *)(v0 + 2792);
  v20 = *(_QWORD *)(v0 + 2784);
  v21 = *(_QWORD *)(v0 + 2776);
  v22 = *(_QWORD *)(v0 + 2752);
  v23 = *(_QWORD *)(v0 + 2728);
  v24 = *(_QWORD *)(v0 + 2704);
  v25 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CD5AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3056);
  *(_QWORD *)(*v1 + 3064) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009D2E30;
  else
    v4 = sub_1009D27FC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 2664), 0);
}

uint64_t sub_1009CD610()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 3088);
  *(_QWORD *)(*(_QWORD *)v1 + 3096) = v0;
  swift_task_dealloc(v3);
  v4 = v2[354];
  v5 = v2[353];
  v6 = v2[333];
  sub_100004048(v5, &qword_1010EC458);
  sub_100004048(v4, &qword_1010EC460);
  if (v0)
    v7 = sub_1009CD898;
  else
    v7 = sub_1009CD6A4;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009CD6A4()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v1 = swift_retain();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[384];
    v5 = v0[332];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[329] = v5;
    v8 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v4, v8);
    v0[330] = sub_100016940(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 330, v0 + 331, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Connected to peripheral: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v11 = v0[365];
  v12 = v0[364];
  v13 = v0[348];
  dispatch thunk of PeripheralProtocol.id.getter(v0[384], v0[385]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v13, 1, 1, v12);
  v14 = (_QWORD *)swift_task_alloc(dword_10110F7A4);
  v0[388] = v14;
  *v14 = v0;
  v14[1] = sub_1009CDA6C;
  return sub_1009B0AB0(v0[370], v0[348]);
}

uint64_t sub_1009CD898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 3008);
  v2 = *(_QWORD *)(v0 + 2896);
  sub_1000126B0(*(_QWORD *)(v0 + 2864), type metadata accessor for AccessoryProductInfo);
  sub_100004048(v2, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v3 = *(_QWORD *)(v0 + 3000);
  v4 = *(_QWORD *)(v0 + 2992);
  v5 = *(_QWORD *)(v0 + 2984);
  v6 = *(_QWORD *)(v0 + 2968);
  v7 = *(_QWORD *)(v0 + 2960);
  v8 = *(_QWORD *)(v0 + 2936);
  v9 = *(_QWORD *)(v0 + 2928);
  v10 = *(_QWORD *)(v0 + 2904);
  v11 = *(_QWORD *)(v0 + 2896);
  v13 = *(_QWORD *)(v0 + 2888);
  v14 = *(_QWORD *)(v0 + 2880);
  v15 = *(_QWORD *)(v0 + 2872);
  v16 = *(_QWORD *)(v0 + 2864);
  v17 = *(_QWORD *)(v0 + 2856);
  v18 = *(_QWORD *)(v0 + 2832);
  v19 = *(_QWORD *)(v0 + 2824);
  v20 = *(_QWORD *)(v0 + 2816);
  v21 = *(_QWORD *)(v0 + 2792);
  v22 = *(_QWORD *)(v0 + 2784);
  v23 = *(_QWORD *)(v0 + 2776);
  v24 = *(_QWORD *)(v0 + 2752);
  v25 = *(_QWORD *)(v0 + 2728);
  v26 = *(_QWORD *)(v0 + 2704);
  v27 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CDA6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2960);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 2952);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 2944);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 2784);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 2664);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3104));
  sub_100004048(v4, &qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1009CDB04, v5, 0);
}

uint64_t sub_1009CDB04()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v0[307] = 0x7365547265646E75;
  v0[308] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)((char *)v0 + 3337), v0 + 307, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((*((_BYTE *)v0 + 3337) & 1) != 0)
  {
    v1 = type metadata accessor for Service(0);
    v0[391] = v1;
    Identifier.init(stringLiteral:)("FD44", 4, 2, v1);
    v2 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
    v0[392] = v2;
    *v2 = v0;
    v2[1] = sub_1009CDC94;
    return dispatch thunk of PeripheralProtocol.subscript.getter(v0[347], v0[384], v0[385]);
  }
  else
  {
    v4 = (_QWORD *)swift_task_alloc(dword_10110F784);
    v0[389] = v4;
    *v4 = v0;
    v4[1] = sub_1009CDC20;
    return sub_1009D2FDC(v0[332]);
  }
}

uint64_t sub_1009CDC20(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 3112);
  *(_QWORD *)(*v2 + 3120) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 2664);
  if (v1)
  {
    v7 = sub_1009D2628;
  }
  else
  {
    *(_BYTE *)(v4 + 3339) = a1;
    v7 = sub_1009D2290;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009CDC94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 3136);
  v3[393] = a1;
  v3[394] = v1;
  swift_task_dealloc(v4);
  v5 = v3[347];
  v6 = v3[346];
  v7 = v3[345];
  v8 = v3[333];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1)
    v9 = sub_1009CDE60;
  else
    v9 = sub_1009CDD1C;
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_1009CDD1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for Characteristic(0);
  v0[395] = v1;
  Identifier.init(stringLiteral:)("4F860001-943B-49EF-BED4-2F730304427A", 36, 2, v1);
  v2 = sub_100006204(&qword_1010EC4A8, (uint64_t (*)(uint64_t))&type metadata accessor for Service, (uint64_t)&protocol conformance descriptor for Service);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
  v0[396] = v3;
  *v3 = v0;
  v3[1] = sub_1009CDDC4;
  return dispatch thunk of ServiceProtocol.subscript.getter(v0[344], v0[391], v2);
}

uint64_t sub_1009CDDC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 3168);
  v3[397] = a1;
  v3[398] = v1;
  swift_task_dealloc(v4);
  v5 = v3[344];
  v6 = v3[343];
  v7 = v3[342];
  v8 = v3[333];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  if (v1)
    v9 = sub_1009CE268;
  else
    v9 = sub_1009CE034;
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_1009CDE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 3008);
  v2 = *(_QWORD *)(v0 + 2896);
  sub_1000126B0(*(_QWORD *)(v0 + 2864), type metadata accessor for AccessoryProductInfo);
  sub_100004048(v2, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v3 = *(_QWORD *)(v0 + 3000);
  v4 = *(_QWORD *)(v0 + 2992);
  v5 = *(_QWORD *)(v0 + 2984);
  v6 = *(_QWORD *)(v0 + 2968);
  v7 = *(_QWORD *)(v0 + 2960);
  v8 = *(_QWORD *)(v0 + 2936);
  v9 = *(_QWORD *)(v0 + 2928);
  v10 = *(_QWORD *)(v0 + 2904);
  v11 = *(_QWORD *)(v0 + 2896);
  v13 = *(_QWORD *)(v0 + 2888);
  v14 = *(_QWORD *)(v0 + 2880);
  v15 = *(_QWORD *)(v0 + 2872);
  v16 = *(_QWORD *)(v0 + 2864);
  v17 = *(_QWORD *)(v0 + 2856);
  v18 = *(_QWORD *)(v0 + 2832);
  v19 = *(_QWORD *)(v0 + 2824);
  v20 = *(_QWORD *)(v0 + 2816);
  v21 = *(_QWORD *)(v0 + 2792);
  v22 = *(_QWORD *)(v0 + 2784);
  v23 = *(_QWORD *)(v0 + 2776);
  v24 = *(_QWORD *)(v0 + 2752);
  v25 = *(_QWORD *)(v0 + 2728);
  v26 = *(_QWORD *)(v0 + 2704);
  v27 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CE034(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovered FindMy services and Pairing characteristic.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = swift_retain();
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = v1[384];
    v9 = v1[332];
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v17 = v11;
    *(_DWORD *)v10 = 136315138;
    v1[326] = v9;
    v12 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v8, v12);
    v1[327] = sub_100016940(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 327, v1 + 328, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Pairing peripheral: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_release();
  }

  v15 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.pair()[1]);
  v1[399] = v15;
  *v15 = v1;
  v15[1] = sub_1009CE43C;
  return dispatch thunk of PeripheralProtocol.pair()(v1[384], v1[385]);
}

uint64_t sub_1009CE268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 3008);
  v2 = *(_QWORD *)(v0 + 2896);
  sub_1000126B0(*(_QWORD *)(v0 + 2864), type metadata accessor for AccessoryProductInfo);
  sub_100004048(v2, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v3 = *(_QWORD *)(v0 + 3000);
  v4 = *(_QWORD *)(v0 + 2992);
  v5 = *(_QWORD *)(v0 + 2984);
  v6 = *(_QWORD *)(v0 + 2968);
  v7 = *(_QWORD *)(v0 + 2960);
  v8 = *(_QWORD *)(v0 + 2936);
  v9 = *(_QWORD *)(v0 + 2928);
  v10 = *(_QWORD *)(v0 + 2904);
  v11 = *(_QWORD *)(v0 + 2896);
  v13 = *(_QWORD *)(v0 + 2888);
  v14 = *(_QWORD *)(v0 + 2880);
  v15 = *(_QWORD *)(v0 + 2872);
  v16 = *(_QWORD *)(v0 + 2864);
  v17 = *(_QWORD *)(v0 + 2856);
  v18 = *(_QWORD *)(v0 + 2832);
  v19 = *(_QWORD *)(v0 + 2824);
  v20 = *(_QWORD *)(v0 + 2816);
  v21 = *(_QWORD *)(v0 + 2792);
  v22 = *(_QWORD *)(v0 + 2784);
  v23 = *(_QWORD *)(v0 + 2776);
  v24 = *(_QWORD *)(v0 + 2752);
  v25 = *(_QWORD *)(v0 + 2728);
  v26 = *(_QWORD *)(v0 + 2704);
  v27 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CE43C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3192);
  *(_QWORD *)(*v1 + 3200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009CEE70;
  else
    v4 = sub_1009CE4A0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 2664), 0);
}

uint64_t sub_1009CE4A0()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];

  v1 = (_OWORD *)(v0 + 160);
  v2 = swift_retain();
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 3072);
    v6 = *(_QWORD *)(v0 + 2656);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v63[0] = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 2592) = v6;
    v9 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v5, v9);
    *(_QWORD *)(v0 + 2600) = sub_100016940(v10, v11, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2600, v0 + 2608, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Paired peripheral: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    v12 = v7;
    v1 = (_OWORD *)(v0 + 160);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_release();
  }

  v13 = *(_QWORD *)(v0 + 3200);
  v15 = BinaryEncoder.init()(v14);
  BinaryDecoder.init()(v15);
  sub_1009E5570(v1);
  if (v13)
  {
    v16 = *(_QWORD *)(v0 + 3008);
    v17 = *(_QWORD *)(v0 + 2896);
    v18 = *(_QWORD *)(v0 + 2864);
    v19 = *(_QWORD *)(v0 + 2728);
    v20 = *(_QWORD *)(v0 + 2720);
    v21 = *(_QWORD *)(v0 + 2712);
    v22 = *(_QWORD *)(v0 + 2704);
    v23 = *(_QWORD *)(v0 + 2696);
    v24 = *(_QWORD *)(v0 + 2688);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    sub_1000126B0(v18, type metadata accessor for AccessoryProductInfo);
    sub_100004048(v17, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v16, type metadata accessor for AccessoryMetadata);
    v38 = *(_QWORD *)(v0 + 3000);
    v39 = *(_QWORD *)(v0 + 2992);
    v40 = *(_QWORD *)(v0 + 2984);
    v41 = *(_QWORD *)(v0 + 2968);
    v42 = *(_QWORD *)(v0 + 2960);
    v43 = *(_QWORD *)(v0 + 2936);
    v44 = *(_QWORD *)(v0 + 2928);
    v45 = *(_QWORD *)(v0 + 2904);
    v46 = *(_QWORD *)(v0 + 2896);
    v48 = *(_QWORD *)(v0 + 2888);
    v49 = *(_QWORD *)(v0 + 2880);
    v50 = *(_QWORD *)(v0 + 2872);
    v51 = *(_QWORD *)(v0 + 2864);
    v52 = *(_QWORD *)(v0 + 2856);
    v53 = *(_QWORD *)(v0 + 2832);
    v54 = *(_QWORD *)(v0 + 2824);
    v55 = *(_QWORD *)(v0 + 2816);
    v56 = *(_QWORD *)(v0 + 2792);
    v57 = *(_QWORD *)(v0 + 2784);
    v58 = *(_QWORD *)(v0 + 2776);
    v59 = *(_QWORD *)(v0 + 2752);
    v60 = *(_QWORD *)(v0 + 2728);
    v61 = *(_QWORD *)(v0 + 2704);
    v62 = *(_QWORD *)(v0 + 2680);
    swift_task_dealloc(*(_QWORD *)(v0 + 3008));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v25 = (_OWORD *)(v0 + 2032);
    sub_10015BAD8(v1, (_OWORD *)(v0 + 1600));
    sub_10015BAD8((_OWORD *)(v0 + 1600), (_OWORD *)(v0 + 1456));
    SharingCircleWildAdvertisementKey.init(key:)(v0 + 1456);
    sub_10015BAD8((_OWORD *)(v0 + 1600), (_OWORD *)(v0 + 1888));
    sub_100005CF0(v0 + 1456, v0 + 1744, &qword_10110F7A8);
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
    v26 = sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v63[0] = v30;
      *(_DWORD *)v29 = 136315138;
      sub_10015BAD8((_OWORD *)(v0 + 1888), (_OWORD *)(v0 + 304));
      sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
      v31 = String.init<A>(describing:)(v0 + 304, &type metadata for PencilPairingCommand);
      *(_QWORD *)(v0 + 2584) = sub_100016940(v31, v32, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2584, v0 + 2592, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
      sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Sending command: %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      v33 = v29;
      v25 = (_OWORD *)(v0 + 2032);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
      sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
    }

    sub_10015BAD8((_OWORD *)(v0 + 1888), v25);
    v34 = sub_1009F6FD4();
    *(_QWORD *)(v0 + 3208) = v34;
    *(_QWORD *)(v0 + 3216) = BinaryEncoder.encode<A>(_:)(v25, &type metadata for PencilPairingCommand, v34);
    *(_QWORD *)(v0 + 3224) = v35;
    v36 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v37 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.mtu.getter[1]);
    *(_QWORD *)(v0 + 3232) = v37;
    *v37 = v0;
    v37[1] = sub_1009CF050;
    return dispatch thunk of CharacteristicProtocol.mtu.getter(*(_QWORD *)(v0 + 3160), v36);
  }
}

uint64_t sub_1009CEE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 3008);
  v2 = *(_QWORD *)(v0 + 2896);
  v3 = *(_QWORD *)(v0 + 2864);
  swift_release();
  sub_1000126B0(v3, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v2, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v4 = *(_QWORD *)(v0 + 3000);
  v5 = *(_QWORD *)(v0 + 2992);
  v6 = *(_QWORD *)(v0 + 2984);
  v7 = *(_QWORD *)(v0 + 2968);
  v8 = *(_QWORD *)(v0 + 2960);
  v9 = *(_QWORD *)(v0 + 2936);
  v10 = *(_QWORD *)(v0 + 2928);
  v11 = *(_QWORD *)(v0 + 2904);
  v12 = *(_QWORD *)(v0 + 2896);
  v14 = *(_QWORD *)(v0 + 2888);
  v15 = *(_QWORD *)(v0 + 2880);
  v16 = *(_QWORD *)(v0 + 2872);
  v17 = *(_QWORD *)(v0 + 2864);
  v18 = *(_QWORD *)(v0 + 2856);
  v19 = *(_QWORD *)(v0 + 2832);
  v20 = *(_QWORD *)(v0 + 2824);
  v21 = *(_QWORD *)(v0 + 2816);
  v22 = *(_QWORD *)(v0 + 2792);
  v23 = *(_QWORD *)(v0 + 2784);
  v24 = *(_QWORD *)(v0 + 2776);
  v25 = *(_QWORD *)(v0 + 2752);
  v26 = *(_QWORD *)(v0 + 2728);
  v27 = *(_QWORD *)(v0 + 2704);
  v28 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CF050(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 3232);
  *(_QWORD *)(*v2 + 3240) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 2664);
  if (v1)
  {
    v7 = sub_1009CF230;
  }
  else
  {
    *(_QWORD *)(v4 + 3248) = a1;
    v7 = sub_1009CF0C8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009CF0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = fragment(data:mtu:)(*(_QWORD *)(v0 + 3216), *(_QWORD *)(v0 + 3224), *(_QWORD *)(v0 + 3248));
  sub_10015BAD8((_OWORD *)(v0 + 1888), (_OWORD *)(v0 + 2176));
  if (sub_10015BB08(v0 + 2176) == 4)
  {
    v2 = *(_QWORD *)(v0 + 3176);
    v3 = swift_allocObject(&unk_1010A1078, 32, 7);
    *(_QWORD *)(v0 + 3256) = v3;
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    v4 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 3264) = v5;
    *v5 = v0;
    v5[1] = sub_1009CF77C;
    v6 = &type metadata for () + 1;
    v7 = &unk_10110F7E0;
    v8 = v3;
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 3176);
    v10 = swift_allocObject(&unk_1010A1028, 32, 7);
    *(_QWORD *)(v0 + 3280) = v10;
    *(_QWORD *)(v10 + 16) = v9;
    *(_QWORD *)(v10 + 24) = v1;
    v11 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v12 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 3288) = v12;
    *v12 = v0;
    v12[1] = sub_1009CF7F0;
    v7 = &unk_10110F7C0;
    v6 = &type metadata for Data;
    v5 = (_QWORD *)(v0 + 2440);
    v8 = v10;
  }
  return withTimeout<A>(_:block:)(v5, 0x40AAD21B3B700000, 3, v7, v8, v6);
}

uint64_t sub_1009CF230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = v0 + 1744;
  sub_10001BC14(*(_QWORD *)(v0 + 3216), *(_QWORD *)(v0 + 3224));
  sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
  v2 = *(_QWORD *)(v0 + 3240);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v2);
    v8 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 2536) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2536, v0 + 2544, v6 + 4, v6 + 12);
    *v7 = v8;
    v1 = v0 + 1744;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pairing command error: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  swift_errorRelease(0);
  sub_1009F7018(v1);
  swift_errorRetain(v2);
  swift_errorRetain(v2);
  v10 = swift_errorRetain(v2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v53 = v2;
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v54 = v15;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 2488) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEC030, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2488, v0 + 2496, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain(v2);
    v16 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 2576) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2576, v0 + 2584, v13 + 14, v13 + 22);
    *v14 = v16;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s failed with %{public}@", (uint8_t *)v13, 0x16u);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v14, 1, v17);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  v51 = *(_QWORD *)(v0 + 3008);
  v47 = *(_QWORD *)(v0 + 2864);
  v49 = *(_QWORD *)(v0 + 2896);
  v18 = *(_QWORD *)(v0 + 2728);
  v19 = *(_QWORD *)(v0 + 2720);
  v20 = *(_QWORD *)(v0 + 2712);
  v21 = *(_QWORD *)(v0 + 2704);
  v22 = *(_QWORD *)(v0 + 2696);
  v23 = *(_QWORD *)(v0 + 2688);
  swift_willThrow(v24);
  swift_release();
  swift_errorRelease(v53);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  sub_1000126B0(v47, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v49, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v51, type metadata accessor for AccessoryMetadata);
  v25 = *(_QWORD *)(v0 + 3000);
  v26 = *(_QWORD *)(v0 + 2992);
  v27 = *(_QWORD *)(v0 + 2984);
  v28 = *(_QWORD *)(v0 + 2968);
  v29 = *(_QWORD *)(v0 + 2960);
  v30 = *(_QWORD *)(v0 + 2936);
  v31 = *(_QWORD *)(v0 + 2928);
  v32 = *(_QWORD *)(v0 + 2904);
  v35 = *(_QWORD *)(v0 + 2896);
  v36 = *(_QWORD *)(v0 + 2888);
  v37 = *(_QWORD *)(v0 + 2880);
  v38 = *(_QWORD *)(v0 + 2872);
  v39 = *(_QWORD *)(v0 + 2864);
  v40 = *(_QWORD *)(v0 + 2856);
  v41 = *(_QWORD *)(v0 + 2832);
  v42 = *(_QWORD *)(v0 + 2824);
  v43 = *(_QWORD *)(v0 + 2816);
  v44 = *(_QWORD *)(v0 + 2792);
  v45 = *(_QWORD *)(v0 + 2784);
  v46 = *(_QWORD *)(v0 + 2776);
  v48 = *(_QWORD *)(v0 + 2752);
  v50 = *(_QWORD *)(v0 + 2728);
  v52 = *(_QWORD *)(v0 + 2704);
  v33 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009CF77C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3264);
  *(_QWORD *)(*v1 + 3272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 2664);
    v5 = sub_1009CFE70;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 2664);
    swift_release();
    v5 = sub_1009CF864;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009CF7F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3288);
  *(_QWORD *)(*v1 + 3296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 2664);
    v5 = sub_1009D0F04;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 2664);
    swift_release();
    v5 = sub_1009D03B4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009CF864(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.info.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v63 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_10015BAD8((_OWORD *)(v1 + 1888), (_OWORD *)(v1 + 448));
    v6 = String.init<A>(describing:)(v1 + 448, &type metadata for PencilPairingCommand);
    *(_QWORD *)(v1 + 2568) = sub_100016940(v6, v7, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2568, v1 + 2576, v4 + 4, v4 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sent final command: %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

    v8 = sub_1009F7018(v1 + 1744);
  }
  else
  {
    sub_1009F7018(v1 + 1744);

  }
  *(_BYTE *)(*(_QWORD *)(v1 + 2664) + 152) = 9;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Pairing completed succesfully!", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v12 = *(_QWORD *)(v1 + 3224);
  v13 = *(_QWORD *)(v1 + 3216);
  v14 = *(_QWORD *)(v1 + 2680);
  v15 = *(_QWORD *)(v1 + 2672);
  v16 = *(_QWORD *)(v1 + 2664);
  v17 = *(_QWORD *)(v1 + 2656);

  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 1, 1, v18);
  v19 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v20 = (_QWORD *)swift_allocObject(&unk_1010A10A0, 56, 7);
  v20[2] = v16;
  v20[3] = v19;
  v20[4] = v16;
  v20[5] = v17;
  v20[6] = v15;
  swift_retain_n(v16, 2);
  swift_retain();
  sub_100691AC0(v14, (uint64_t)&unk_10110F7F0, (uint64_t)v20);
  swift_release();
  sub_10001BC14(v13, v12);
  v21 = swift_errorRetain(0);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(_QWORD *)(v1 + 3008);
  v26 = *(_QWORD *)(v1 + 2896);
  v27 = *(_QWORD *)(v1 + 2864);
  v28 = *(_QWORD *)(v1 + 2728);
  v29 = *(_QWORD *)(v1 + 2712);
  v59 = *(_QWORD *)(v1 + 2704);
  v61 = *(_QWORD *)(v1 + 2720);
  v30 = *(_QWORD *)(v1 + 2696);
  v57 = *(_QWORD *)(v1 + 2688);
  if (v24)
  {
    v52 = *(_QWORD *)(v1 + 2728);
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = v27;
    v32 = swift_slowAlloc(32, -1);
    v63 = v32;
    *(_DWORD *)v31 = 136446210;
    *(_QWORD *)(v1 + 2472) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEC030, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2472, v1 + 2480, v31 + 4, v31 + 12);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s completed successfully", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    swift_release();
    swift_errorRelease(0);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v59, v57);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v52, v29);
    sub_1000126B0(v50, type metadata accessor for AccessoryProductInfo);
  }
  else
  {

    swift_release();
    swift_errorRelease(0);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v59, v57);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v28, v29);
    sub_1000126B0(v27, type metadata accessor for AccessoryProductInfo);
  }
  sub_100004048(v26, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v25, type metadata accessor for AccessoryMetadata);
  v33 = *(_QWORD *)(v1 + 3000);
  v34 = *(_QWORD *)(v1 + 2992);
  v35 = *(_QWORD *)(v1 + 2984);
  v36 = *(_QWORD *)(v1 + 2968);
  v37 = *(_QWORD *)(v1 + 2960);
  v38 = *(_QWORD *)(v1 + 2936);
  v39 = *(_QWORD *)(v1 + 2928);
  v40 = *(_QWORD *)(v1 + 2904);
  v41 = *(_QWORD *)(v1 + 2896);
  v43 = *(_QWORD *)(v1 + 2888);
  v44 = *(_QWORD *)(v1 + 2880);
  v45 = *(_QWORD *)(v1 + 2872);
  v46 = *(_QWORD *)(v1 + 2864);
  v47 = *(_QWORD *)(v1 + 2856);
  v48 = *(_QWORD *)(v1 + 2832);
  v49 = *(_QWORD *)(v1 + 2824);
  v51 = *(_QWORD *)(v1 + 2816);
  v53 = *(_QWORD *)(v1 + 2792);
  v54 = *(_QWORD *)(v1 + 2784);
  v55 = *(_QWORD *)(v1 + 2776);
  v56 = *(_QWORD *)(v1 + 2752);
  v58 = *(_QWORD *)(v1 + 2728);
  v60 = *(_QWORD *)(v1 + 2704);
  v62 = *(_QWORD *)(v1 + 2680);
  swift_task_dealloc(*(_QWORD *)(v1 + 3008));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009CFE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = v0 + 1744;
  sub_10001BC14(*(_QWORD *)(v0 + 3216), *(_QWORD *)(v0 + 3224));
  swift_release();
  v2 = *(_QWORD *)(v0 + 3272);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v2);
    v8 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 2536) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2536, v0 + 2544, v6 + 4, v6 + 12);
    *v7 = v8;
    v1 = v0 + 1744;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pairing command error: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  swift_errorRelease(0);
  sub_1009F7018(v1);
  swift_errorRetain(v2);
  swift_errorRetain(v2);
  v10 = swift_errorRetain(v2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v53 = v2;
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v54 = v15;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 2488) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEC030, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2488, v0 + 2496, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain(v2);
    v16 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 2576) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2576, v0 + 2584, v13 + 14, v13 + 22);
    *v14 = v16;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s failed with %{public}@", (uint8_t *)v13, 0x16u);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v14, 1, v17);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  v51 = *(_QWORD *)(v0 + 3008);
  v47 = *(_QWORD *)(v0 + 2864);
  v49 = *(_QWORD *)(v0 + 2896);
  v18 = *(_QWORD *)(v0 + 2728);
  v19 = *(_QWORD *)(v0 + 2720);
  v20 = *(_QWORD *)(v0 + 2712);
  v21 = *(_QWORD *)(v0 + 2704);
  v22 = *(_QWORD *)(v0 + 2696);
  v23 = *(_QWORD *)(v0 + 2688);
  swift_willThrow(v24);
  swift_release();
  swift_errorRelease(v53);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  sub_1000126B0(v47, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v49, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v51, type metadata accessor for AccessoryMetadata);
  v25 = *(_QWORD *)(v0 + 3000);
  v26 = *(_QWORD *)(v0 + 2992);
  v27 = *(_QWORD *)(v0 + 2984);
  v28 = *(_QWORD *)(v0 + 2968);
  v29 = *(_QWORD *)(v0 + 2960);
  v30 = *(_QWORD *)(v0 + 2936);
  v31 = *(_QWORD *)(v0 + 2928);
  v32 = *(_QWORD *)(v0 + 2904);
  v35 = *(_QWORD *)(v0 + 2896);
  v36 = *(_QWORD *)(v0 + 2888);
  v37 = *(_QWORD *)(v0 + 2880);
  v38 = *(_QWORD *)(v0 + 2872);
  v39 = *(_QWORD *)(v0 + 2864);
  v40 = *(_QWORD *)(v0 + 2856);
  v41 = *(_QWORD *)(v0 + 2832);
  v42 = *(_QWORD *)(v0 + 2824);
  v43 = *(_QWORD *)(v0 + 2816);
  v44 = *(_QWORD *)(v0 + 2792);
  v45 = *(_QWORD *)(v0 + 2784);
  v46 = *(_QWORD *)(v0 + 2776);
  v48 = *(_QWORD *)(v0 + 2752);
  v50 = *(_QWORD *)(v0 + 2728);
  v52 = *(_QWORD *)(v0 + 2704);
  v33 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D03B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[2];

  v1 = *(_QWORD *)(v0 + 2440);
  *(_QWORD *)(v0 + 3304) = v1;
  v2 = *(_QWORD *)(v0 + 2448);
  *(_QWORD *)(v0 + 3312) = v2;
  sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
  v3 = sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v82[0] = v7;
    *(_DWORD *)v6 = 136315138;
    sub_10015BAD8((_OWORD *)(v0 + 1888), (_OWORD *)(v0 + 592));
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
    v8 = String.init<A>(describing:)(v0 + 592, &type metadata for PencilPairingCommand);
    *(_QWORD *)(v0 + 2544) = sub_100016940(v8, v9, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2544, v0 + 2552, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sent command: %s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
  }

  sub_10001BBBC(v1, v2);
  v10 = sub_10001BBBC(v1, v2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (_DWORD *)swift_slowAlloc(22, -1);
    *(_QWORD *)(v0 + 2512) = swift_slowAlloc(32, -1);
    *v13 = 134218242;
    __asm { BR              X10 }
  }
  sub_10001BC14(v1, v2);
  sub_10001BC14(v1, v2);

  v14 = *(_QWORD *)(v0 + 3296);
  v15 = sub_1009F7170();
  BinaryDecoder.decode<A>(_:from:)(&type metadata for PencilPairingCommand, v1, v2, &type metadata for PencilPairingCommand, v15);
  if (v14)
  {
    v16 = v14;
    v17 = *(_QWORD *)(v0 + 3224);
    v18 = *(_QWORD *)(v0 + 3216);
    sub_10001BC14(v1, v2);
    sub_10001BC14(v18, v17);
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
    swift_errorRetain(v14);
    v19 = swift_errorRetain(v14);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    v81 = v14;
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v22 = 138543362;
      swift_errorRetain(v14);
      v24 = _swift_stdlib_bridgeErrorToNSError(v14);
      *(_QWORD *)(v0 + 2536) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2536, v0 + 2544, v22 + 4, v22 + 12);
      *v23 = v24;
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Pairing command error: %{public}@", v22, 0xCu);
      v25 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v23, 1, v25);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_errorRelease(v14);
      swift_errorRelease(v14);
    }
    swift_errorRelease(0);
    sub_1009F7018(v0 + 1744);
    swift_errorRetain(v14);
    swift_errorRetain(v14);
    v35 = swift_errorRetain(v14);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = (uint64_t *)swift_slowAlloc(8, -1);
      v40 = swift_slowAlloc(32, -1);
      v82[0] = v40;
      *(_DWORD *)v38 = 136446466;
      *(_QWORD *)(v0 + 2488) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEC030, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2488, v0 + 2496, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2114;
      swift_errorRetain(v16);
      v41 = _swift_stdlib_bridgeErrorToNSError(v16);
      *(_QWORD *)(v0 + 2576) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2576, v0 + 2584, v38 + 14, v38 + 22);
      *v39 = v41;
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%{public}s failed with %{public}@", (uint8_t *)v38, 0x16u);
      v42 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v39, 1, v42);
      swift_slowDealloc(v39, -1, -1);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      swift_errorRelease(v14);
      swift_errorRelease(v14);
    }

    v79 = *(_QWORD *)(v0 + 3008);
    v75 = *(_QWORD *)(v0 + 2864);
    v77 = *(_QWORD *)(v0 + 2896);
    v43 = *(_QWORD *)(v0 + 2728);
    v44 = *(_QWORD *)(v0 + 2720);
    v45 = *(_QWORD *)(v0 + 2712);
    v46 = *(_QWORD *)(v0 + 2704);
    v47 = *(_QWORD *)(v0 + 2696);
    v48 = *(_QWORD *)(v0 + 2688);
    swift_willThrow(v49);
    swift_release();
    swift_errorRelease(v81);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    sub_1000126B0(v75, type metadata accessor for AccessoryProductInfo);
    sub_100004048(v77, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v79, type metadata accessor for AccessoryMetadata);
    v50 = *(_QWORD *)(v0 + 3000);
    v51 = *(_QWORD *)(v0 + 2992);
    v52 = *(_QWORD *)(v0 + 2984);
    v53 = *(_QWORD *)(v0 + 2968);
    v54 = *(_QWORD *)(v0 + 2960);
    v55 = *(_QWORD *)(v0 + 2936);
    v56 = *(_QWORD *)(v0 + 2928);
    v57 = *(_QWORD *)(v0 + 2904);
    v63 = *(_QWORD *)(v0 + 2896);
    v64 = *(_QWORD *)(v0 + 2888);
    v65 = *(_QWORD *)(v0 + 2880);
    v66 = *(_QWORD *)(v0 + 2872);
    v67 = *(_QWORD *)(v0 + 2864);
    v68 = *(_QWORD *)(v0 + 2856);
    v69 = *(_QWORD *)(v0 + 2832);
    v70 = *(_QWORD *)(v0 + 2824);
    v71 = *(_QWORD *)(v0 + 2816);
    v72 = *(_QWORD *)(v0 + 2792);
    v73 = *(_QWORD *)(v0 + 2784);
    v74 = *(_QWORD *)(v0 + 2776);
    v76 = *(_QWORD *)(v0 + 2752);
    v78 = *(_QWORD *)(v0 + 2728);
    v80 = *(_QWORD *)(v0 + 2704);
    v58 = *(_QWORD *)(v0 + 2680);
    swift_task_dealloc(*(_QWORD *)(v0 + 3008));
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v58);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v26 = v0 + 16;
    sub_10015BAD8((_OWORD *)(v0 + 1312), (_OWORD *)(v0 + 1168));
    sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BBBC);
    v27 = sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BBBC);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v82[0] = swift_slowAlloc(32, -1);
      v31 = v82[0];
      *(_DWORD *)v30 = 136315138;
      sub_10015BAD8((_OWORD *)(v0 + 1168), (_OWORD *)(v0 + 736));
      sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BBBC);
      v32 = String.init<A>(describing:)(v0 + 736, &type metadata for PencilPairingCommand);
      *(_QWORD *)(v0 + 2504) = sub_100016940(v32, v33, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2504, v0 + 2512, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease();
      sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BC14);
      sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BC14);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received response: %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      v34 = v31;
      v26 = v0 + 16;
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BC14);
      sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BC14);
    }

    v60 = *(_QWORD *)(v0 + 3208);
    *(_QWORD *)(v0 + 2344) = &type metadata for PencilPairingCommand;
    *(_QWORD *)(v0 + 2352) = v15;
    *(_QWORD *)(v0 + 2360) = v60;
    v61 = swift_allocObject(&unk_1010A1050, 160, 7);
    *(_QWORD *)(v0 + 2320) = v61;
    sub_10015BAD8((_OWORD *)(v0 + 1168), (_OWORD *)(v61 + 16));
    sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BBBC);
    v62 = (_QWORD *)swift_task_alloc(dword_10110F7D4);
    *(_QWORD *)(v0 + 3320) = v62;
    *v62 = v0;
    v62[1] = sub_1009D1460;
    return sub_1009EE10C(v26, *(_QWORD *)(v0 + 2656), v0 + 2320);
  }
}

uint64_t sub_1009D0F04()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = v0 + 1744;
  v2 = *(_QWORD *)(v0 + 3224);
  v3 = *(_QWORD *)(v0 + 3216);
  sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
  sub_10001BC14(v3, v2);
  swift_release();
  v4 = *(_QWORD *)(v0 + 3296);
  swift_errorRetain(v4);
  v5 = swift_errorRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v4);
    v10 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v0 + 2536) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2536, v0 + 2544, v8 + 4, v8 + 12);
    *v9 = v10;
    v1 = v0 + 1744;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Pairing command error: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }
  swift_errorRelease(0);
  sub_1009F7018(v1);
  swift_errorRetain(v4);
  swift_errorRetain(v4);
  v12 = swift_errorRetain(v4);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  v55 = v4;
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = (uint64_t *)swift_slowAlloc(8, -1);
    v17 = swift_slowAlloc(32, -1);
    v56 = v17;
    *(_DWORD *)v15 = 136446466;
    *(_QWORD *)(v0 + 2488) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEC030, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2488, v0 + 2496, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2114;
    swift_errorRetain(v4);
    v18 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v0 + 2576) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2576, v0 + 2584, v15 + 14, v15 + 22);
    *v16 = v18;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s failed with %{public}@", (uint8_t *)v15, 0x16u);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v16, 1, v19);
    swift_slowDealloc(v16, -1, -1);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  v53 = *(_QWORD *)(v0 + 3008);
  v49 = *(_QWORD *)(v0 + 2864);
  v51 = *(_QWORD *)(v0 + 2896);
  v20 = *(_QWORD *)(v0 + 2728);
  v21 = *(_QWORD *)(v0 + 2720);
  v22 = *(_QWORD *)(v0 + 2712);
  v23 = *(_QWORD *)(v0 + 2704);
  v24 = *(_QWORD *)(v0 + 2696);
  v25 = *(_QWORD *)(v0 + 2688);
  swift_willThrow(v26);
  swift_release();
  swift_errorRelease(v55);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  sub_1000126B0(v49, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v51, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v53, type metadata accessor for AccessoryMetadata);
  v27 = *(_QWORD *)(v0 + 3000);
  v28 = *(_QWORD *)(v0 + 2992);
  v29 = *(_QWORD *)(v0 + 2984);
  v30 = *(_QWORD *)(v0 + 2968);
  v31 = *(_QWORD *)(v0 + 2960);
  v32 = *(_QWORD *)(v0 + 2936);
  v33 = *(_QWORD *)(v0 + 2928);
  v34 = *(_QWORD *)(v0 + 2904);
  v37 = *(_QWORD *)(v0 + 2896);
  v38 = *(_QWORD *)(v0 + 2888);
  v39 = *(_QWORD *)(v0 + 2880);
  v40 = *(_QWORD *)(v0 + 2872);
  v41 = *(_QWORD *)(v0 + 2864);
  v42 = *(_QWORD *)(v0 + 2856);
  v43 = *(_QWORD *)(v0 + 2832);
  v44 = *(_QWORD *)(v0 + 2824);
  v45 = *(_QWORD *)(v0 + 2816);
  v46 = *(_QWORD *)(v0 + 2792);
  v47 = *(_QWORD *)(v0 + 2784);
  v48 = *(_QWORD *)(v0 + 2776);
  v50 = *(_QWORD *)(v0 + 2752);
  v52 = *(_QWORD *)(v0 + 2728);
  v54 = *(_QWORD *)(v0 + 2704);
  v35 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D1460()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  _OWORD *v6;
  _QWORD *v7;
  _OWORD *v8;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3320);
  *(_QWORD *)(*v1 + 3328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 2664);
    v5 = sub_1009D1D0C;
  }
  else
  {
    v6 = (_OWORD *)(v2 + 16);
    v7 = (_QWORD *)(v2 + 2320);
    v8 = (_OWORD *)(v2 + 880);
    v9 = *(_QWORD *)(v2 + 2664);
    sub_10015BAD8(v6, v8);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    v5 = sub_1009D14E4;
    v4 = v9;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009D14E4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[2];

  v66 = (_OWORD *)(v0 + 2032);
  v1 = *(_QWORD *)(v0 + 3312);
  v2 = *(_QWORD *)(v0 + 3304);
  v3 = *(_QWORD *)(v0 + 3224);
  v4 = *(_QWORD *)(v0 + 3216);
  sub_1009F7018(v0 + 1744);
  sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
  sub_10001BC14(v2, v1);
  sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BC14);
  sub_10001BC14(v4, v3);
  sub_10015BAD8((_OWORD *)(v0 + 880), (_OWORD *)(v0 + 1024));
  SharingCircleWildAdvertisementKey.init(key:)(v0 + 1024);
  sub_10015BAD8((_OWORD *)(v0 + 880), (_OWORD *)(v0 + 1888));
  sub_100005CF0(v0 + 1024, v0 + 1744, &qword_10110F7A8);
  v5 = *(_QWORD *)(v0 + 3328);
  sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
  sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
  v6 = sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v70[0] = v10;
    *(_DWORD *)v9 = 136315138;
    sub_10015BAD8((_OWORD *)(v0 + 1888), (_OWORD *)(v0 + 304));
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BBBC);
    v11 = String.init<A>(describing:)(v0 + 304, &type metadata for PencilPairingCommand);
    *(_QWORD *)(v0 + 2584) = sub_100016940(v11, v12, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2584, v0 + 2592, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sending command: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
  }

  sub_10015BAD8((_OWORD *)(v0 + 1888), v66);
  v13 = sub_1009F6FD4();
  *(_QWORD *)(v0 + 3208) = v13;
  *(_QWORD *)(v0 + 3216) = BinaryEncoder.encode<A>(_:)(v66, &type metadata for PencilPairingCommand, v13);
  *(_QWORD *)(v0 + 3224) = v14;
  if (v5)
  {
    v15 = v5;
    sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
    swift_errorRetain(v5);
    v16 = swift_errorRetain(v5);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138543362;
      swift_errorRetain(v15);
      v21 = _swift_stdlib_bridgeErrorToNSError(v15);
      *(_QWORD *)(v0 + 2536) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2536, v0 + 2544, v19 + 4, v19 + 12);
      *v20 = v21;
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Pairing command error: %{public}@", v19, 0xCu);
      v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_errorRelease(v5);
      swift_errorRelease(v5);
    }
    swift_errorRelease(0);
    sub_1009F7018(v0 + 1744);
    swift_errorRetain(v15);
    swift_errorRetain(v15);
    v26 = swift_errorRetain(v15);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    v69 = v15;
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = (uint64_t *)swift_slowAlloc(8, -1);
      v31 = swift_slowAlloc(32, -1);
      v70[0] = v31;
      *(_DWORD *)v29 = 136446466;
      *(_QWORD *)(v0 + 2488) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEC030, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2488, v0 + 2496, v29 + 4, v29 + 12);
      *(_WORD *)(v29 + 12) = 2114;
      swift_errorRetain(v15);
      v32 = _swift_stdlib_bridgeErrorToNSError(v15);
      *(_QWORD *)(v0 + 2576) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2576, v0 + 2584, v29 + 14, v29 + 22);
      *v30 = v32;
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s failed with %{public}@", (uint8_t *)v29, 0x16u);
      v33 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v30, 1, v33);
      swift_slowDealloc(v30, -1, -1);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_errorRelease(v15);
      swift_errorRelease(v15);
    }

    v67 = *(_QWORD *)(v0 + 3008);
    v62 = *(_QWORD *)(v0 + 2864);
    v64 = *(_QWORD *)(v0 + 2896);
    v34 = *(_QWORD *)(v0 + 2728);
    v35 = *(_QWORD *)(v0 + 2720);
    v36 = *(_QWORD *)(v0 + 2712);
    v37 = *(_QWORD *)(v0 + 2704);
    v38 = *(_QWORD *)(v0 + 2696);
    v39 = *(_QWORD *)(v0 + 2688);
    swift_willThrow(v40);
    swift_release();
    swift_errorRelease(v69);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    sub_1000126B0(v62, type metadata accessor for AccessoryProductInfo);
    sub_100004048(v64, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v67, type metadata accessor for AccessoryMetadata);
    v41 = *(_QWORD *)(v0 + 3000);
    v42 = *(_QWORD *)(v0 + 2992);
    v43 = *(_QWORD *)(v0 + 2984);
    v44 = *(_QWORD *)(v0 + 2968);
    v45 = *(_QWORD *)(v0 + 2960);
    v46 = *(_QWORD *)(v0 + 2936);
    v47 = *(_QWORD *)(v0 + 2928);
    v48 = *(_QWORD *)(v0 + 2904);
    v50 = *(_QWORD *)(v0 + 2896);
    v51 = *(_QWORD *)(v0 + 2888);
    v52 = *(_QWORD *)(v0 + 2880);
    v53 = *(_QWORD *)(v0 + 2872);
    v54 = *(_QWORD *)(v0 + 2864);
    v55 = *(_QWORD *)(v0 + 2856);
    v56 = *(_QWORD *)(v0 + 2832);
    v57 = *(_QWORD *)(v0 + 2824);
    v58 = *(_QWORD *)(v0 + 2816);
    v59 = *(_QWORD *)(v0 + 2792);
    v60 = *(_QWORD *)(v0 + 2784);
    v61 = *(_QWORD *)(v0 + 2776);
    v63 = *(_QWORD *)(v0 + 2752);
    v65 = *(_QWORD *)(v0 + 2728);
    v68 = *(_QWORD *)(v0 + 2704);
    v49 = *(_QWORD *)(v0 + 2680);
    swift_task_dealloc(*(_QWORD *)(v0 + 3008));
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v68);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v23 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.mtu.getter[1]);
    *(_QWORD *)(v0 + 3232) = v24;
    *v24 = v0;
    v24[1] = sub_1009CF050;
    return dispatch thunk of CharacteristicProtocol.mtu.getter(*(_QWORD *)(v0 + 3160), v23);
  }
}

uint64_t sub_1009D1D0C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = v0 + 1744;
  v2 = *(_QWORD *)(v0 + 3312);
  v3 = *(_QWORD *)(v0 + 3304);
  v4 = *(_QWORD *)(v0 + 3224);
  v5 = *(_QWORD *)(v0 + 3216);
  sub_1009F6DD0(v0 + 1888, (void (*)(void))sub_10001BC14);
  sub_10001BC14(v3, v2);
  sub_1009F6DD0(v0 + 1168, (void (*)(void))sub_10001BC14);
  sub_10001BC14(v5, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 2320));
  v6 = *(_QWORD *)(v0 + 3328);
  swift_errorRetain(v6);
  v7 = swift_errorRetain(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138543362;
    swift_errorRetain(v6);
    v12 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 2536) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2536, v0 + 2544, v10 + 4, v10 + 12);
    *v11 = v12;
    v1 = v0 + 1744;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Pairing command error: %{public}@", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }
  swift_errorRelease(0);
  sub_1009F7018(v1);
  swift_errorRetain(v6);
  swift_errorRetain(v6);
  v14 = swift_errorRetain(v6);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  v57 = v6;
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = (uint64_t *)swift_slowAlloc(8, -1);
    v19 = swift_slowAlloc(32, -1);
    v58 = v19;
    *(_DWORD *)v17 = 136446466;
    *(_QWORD *)(v0 + 2488) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEC030, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2488, v0 + 2496, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2114;
    swift_errorRetain(v6);
    v20 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 2576) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2576, v0 + 2584, v17 + 14, v17 + 22);
    *v18 = v20;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s failed with %{public}@", (uint8_t *)v17, 0x16u);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v18, 1, v21);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }

  v55 = *(_QWORD *)(v0 + 3008);
  v51 = *(_QWORD *)(v0 + 2864);
  v53 = *(_QWORD *)(v0 + 2896);
  v22 = *(_QWORD *)(v0 + 2728);
  v23 = *(_QWORD *)(v0 + 2720);
  v24 = *(_QWORD *)(v0 + 2712);
  v25 = *(_QWORD *)(v0 + 2704);
  v26 = *(_QWORD *)(v0 + 2696);
  v27 = *(_QWORD *)(v0 + 2688);
  swift_willThrow(v28);
  swift_release();
  swift_errorRelease(v57);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  sub_1000126B0(v51, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v53, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v55, type metadata accessor for AccessoryMetadata);
  v29 = *(_QWORD *)(v0 + 3000);
  v30 = *(_QWORD *)(v0 + 2992);
  v31 = *(_QWORD *)(v0 + 2984);
  v32 = *(_QWORD *)(v0 + 2968);
  v33 = *(_QWORD *)(v0 + 2960);
  v34 = *(_QWORD *)(v0 + 2936);
  v35 = *(_QWORD *)(v0 + 2928);
  v36 = *(_QWORD *)(v0 + 2904);
  v39 = *(_QWORD *)(v0 + 2896);
  v40 = *(_QWORD *)(v0 + 2888);
  v41 = *(_QWORD *)(v0 + 2880);
  v42 = *(_QWORD *)(v0 + 2872);
  v43 = *(_QWORD *)(v0 + 2864);
  v44 = *(_QWORD *)(v0 + 2856);
  v45 = *(_QWORD *)(v0 + 2832);
  v46 = *(_QWORD *)(v0 + 2824);
  v47 = *(_QWORD *)(v0 + 2816);
  v48 = *(_QWORD *)(v0 + 2792);
  v49 = *(_QWORD *)(v0 + 2784);
  v50 = *(_QWORD *)(v0 + 2776);
  v52 = *(_QWORD *)(v0 + 2752);
  v54 = *(_QWORD *)(v0 + 2728);
  v56 = *(_QWORD *)(v0 + 2704);
  v37 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D2290(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (*(unsigned __int8 *)(v1 + 3339) > 4u)
  {
    v5 = Logger.logObject.getter(a1);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v39 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v1 + 2624) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEC030, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2624, v1 + 2632, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Not your pencil!", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = *(_QWORD *)(v1 + 3008);
    v10 = *(_QWORD *)(v1 + 2896);
    v11 = *(_QWORD *)(v1 + 2864);
    v12 = sub_100350CCC();
    v38 = swift_allocError(&type metadata for PencilPairingService.Error, v12, 0, 0);
    *(_OWORD *)v13 = xmmword_100E58240;
    *(_BYTE *)(v13 + 16) = 3;
    swift_willThrow(v38);
    sub_1000126B0(v11, type metadata accessor for AccessoryProductInfo);
    sub_100004048(v10, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v9, type metadata accessor for AccessoryMetadata);
    v14 = *(_QWORD *)(v1 + 3000);
    v15 = *(_QWORD *)(v1 + 2992);
    v16 = *(_QWORD *)(v1 + 2984);
    v17 = *(_QWORD *)(v1 + 2968);
    v18 = *(_QWORD *)(v1 + 2960);
    v19 = *(_QWORD *)(v1 + 2936);
    v20 = *(_QWORD *)(v1 + 2928);
    v21 = *(_QWORD *)(v1 + 2904);
    v22 = *(_QWORD *)(v1 + 2896);
    v23 = *(_QWORD *)(v1 + 2888);
    v24 = *(_QWORD *)(v1 + 2880);
    v25 = *(_QWORD *)(v1 + 2872);
    v26 = *(_QWORD *)(v1 + 2864);
    v27 = *(_QWORD *)(v1 + 2856);
    v28 = *(_QWORD *)(v1 + 2832);
    v29 = *(_QWORD *)(v1 + 2824);
    v30 = *(_QWORD *)(v1 + 2816);
    v31 = *(_QWORD *)(v1 + 2792);
    v32 = *(_QWORD *)(v1 + 2784);
    v33 = *(_QWORD *)(v1 + 2776);
    v34 = *(_QWORD *)(v1 + 2752);
    v35 = *(_QWORD *)(v1 + 2728);
    v36 = *(_QWORD *)(v1 + 2704);
    v37 = *(_QWORD *)(v1 + 2680);
    swift_task_dealloc(*(_QWORD *)(v1 + 3008));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v2 = type metadata accessor for Service(0);
    *(_QWORD *)(v1 + 3128) = v2;
    Identifier.init(stringLiteral:)("FD44", 4, 2, v2);
    v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
    *(_QWORD *)(v1 + 3136) = v3;
    *v3 = v1;
    v3[1] = sub_1009CDC94;
    return dispatch thunk of PeripheralProtocol.subscript.getter(*(_QWORD *)(v1 + 2776), *(_QWORD *)(v1 + 3072), *(_QWORD *)(v1 + 3080));
  }
}

uint64_t sub_1009D2628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 3008);
  v2 = *(_QWORD *)(v0 + 2896);
  sub_1000126B0(*(_QWORD *)(v0 + 2864), type metadata accessor for AccessoryProductInfo);
  sub_100004048(v2, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v3 = *(_QWORD *)(v0 + 3000);
  v4 = *(_QWORD *)(v0 + 2992);
  v5 = *(_QWORD *)(v0 + 2984);
  v6 = *(_QWORD *)(v0 + 2968);
  v7 = *(_QWORD *)(v0 + 2960);
  v8 = *(_QWORD *)(v0 + 2936);
  v9 = *(_QWORD *)(v0 + 2928);
  v10 = *(_QWORD *)(v0 + 2904);
  v11 = *(_QWORD *)(v0 + 2896);
  v13 = *(_QWORD *)(v0 + 2888);
  v14 = *(_QWORD *)(v0 + 2880);
  v15 = *(_QWORD *)(v0 + 2872);
  v16 = *(_QWORD *)(v0 + 2864);
  v17 = *(_QWORD *)(v0 + 2856);
  v18 = *(_QWORD *)(v0 + 2832);
  v19 = *(_QWORD *)(v0 + 2824);
  v20 = *(_QWORD *)(v0 + 2816);
  v21 = *(_QWORD *)(v0 + 2792);
  v22 = *(_QWORD *)(v0 + 2784);
  v23 = *(_QWORD *)(v0 + 2776);
  v24 = *(_QWORD *)(v0 + 2752);
  v25 = *(_QWORD *)(v0 + 2728);
  v26 = *(_QWORD *)(v0 + 2704);
  v27 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D27FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v1 = *(_QWORD *)(v0 + 3064);
  v2 = *(_QWORD *)(v0 + 2896);
  v3 = *(_QWORD *)(v0 + 2872);
  v4 = *(_QWORD *)(v0 + 2848);
  v5 = *(_QWORD *)(v0 + 2840);
  sub_100005CF0(*(_QWORD *)(v0 + 2880), v2, (uint64_t *)&unk_10111C0A0);
  sub_10000F9B8(v2, v3, (uint64_t *)&unk_10111C0A0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5);
  v7 = *(_QWORD *)(v0 + 2872);
  if (v6 == 1)
  {
    v8 = sub_100004048(v7, (uint64_t *)&unk_10111C0A0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing product info!", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 3008);
    v13 = *(_QWORD *)(v0 + 2896);

    v14 = sub_100350CCC();
    v15 = swift_allocError(&type metadata for PencilPairingService.Error, v14, 0, 0);
    *(_OWORD *)v16 = xmmword_100E58230;
    *(_BYTE *)(v16 + 16) = 3;
    swift_willThrow(v15);
    goto LABEL_10;
  }
  v17 = *(_QWORD *)(v0 + 2864);
  v18 = *(_QWORD *)(v0 + 2856);
  sub_1000126EC(v7, v17, type metadata accessor for AccessoryProductInfo);
  v19 = sub_10005972C(v17, v18, type metadata accessor for AccessoryProductInfo);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v0 + 2856);
  if (v22)
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v71 = v25;
    *(_DWORD *)v24 = 136446210;
    v26 = sub_100D1A984();
    *(_QWORD *)(v0 + 2648) = sub_100016940(v26, v27, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2648, v0 + 2656, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v23, type metadata accessor for AccessoryProductInfo);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Product info: %{public}s)", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 2856), type metadata accessor for AccessoryProductInfo);
  }

  sub_1009E4DD0(*(_QWORD *)(v0 + 3008), *(_QWORD *)(v0 + 2864));
  if (v1)
  {
    v12 = *(_QWORD *)(v0 + 3008);
    v13 = *(_QWORD *)(v0 + 2896);
    sub_1000126B0(*(_QWORD *)(v0 + 2864), type metadata accessor for AccessoryProductInfo);
LABEL_10:
    sub_100004048(v13, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v12, type metadata accessor for AccessoryMetadata);
    v28 = *(_QWORD *)(v0 + 3000);
    v29 = *(_QWORD *)(v0 + 2992);
    v30 = *(_QWORD *)(v0 + 2984);
    v31 = *(_QWORD *)(v0 + 2968);
    v32 = *(_QWORD *)(v0 + 2960);
    v33 = *(_QWORD *)(v0 + 2936);
    v34 = *(_QWORD *)(v0 + 2928);
    v35 = *(_QWORD *)(v0 + 2904);
    v36 = *(_QWORD *)(v0 + 2896);
    v56 = *(_QWORD *)(v0 + 2888);
    v57 = *(_QWORD *)(v0 + 2880);
    v58 = *(_QWORD *)(v0 + 2872);
    v59 = *(_QWORD *)(v0 + 2864);
    v60 = *(_QWORD *)(v0 + 2856);
    v61 = *(_QWORD *)(v0 + 2832);
    v62 = *(_QWORD *)(v0 + 2824);
    v63 = *(_QWORD *)(v0 + 2816);
    v64 = *(_QWORD *)(v0 + 2792);
    v65 = *(_QWORD *)(v0 + 2784);
    v66 = *(_QWORD *)(v0 + 2776);
    v67 = *(_QWORD *)(v0 + 2752);
    v68 = *(_QWORD *)(v0 + 2728);
    v69 = *(_QWORD *)(v0 + 2704);
    v70 = *(_QWORD *)(v0 + 2680);
    swift_task_dealloc(*(_QWORD *)(v0 + 3008));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v38 = *(_QWORD *)(v0 + 2832);
  v39 = *(_QWORD *)(v0 + 2824);
  v40 = *(_QWORD *)(v0 + 2816);
  v41 = *(_QWORD *)(v0 + 2808);
  v42 = *(_QWORD *)(v0 + 2800);
  v43 = *(_QWORD *)(v0 + 2792);
  v44 = type metadata accessor for ConnectUseCase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v38, 1, 1, v44);
  v45 = sub_10001A9A8(&qword_1010EC480);
  v46 = swift_allocObject(v45, ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ 2 * *(_QWORD *)(v41 + 72), *(unsigned __int8 *)(v41 + 80) | 7);
  *(_OWORD *)(v46 + 16) = xmmword_100E22B10;
  v47 = static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  static Peripheral.ConnectionOptions.shouldSkipUnpair.getter(v47);
  *(_QWORD *)(v0 + 2480) = v46;
  v48 = sub_100006204(&qword_1010EC488, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions, (uint64_t)&protocol conformance descriptor for Peripheral.ConnectionOptions);
  v49 = sub_10001A9A8(&qword_1010EC490);
  v50 = sub_1000193A4(&qword_1010EC498, &qword_1010EC490, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 2480, v49, v50, v42, v48);
  v51 = type metadata accessor for PeripheralPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v43, 1, 1, v51);
  Peripheral.Options.init(connectionOptions:pairingInfo:)(v40, v43);
  v52 = type metadata accessor for Peripheral.Options(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v39, 0, 1, v52);
  v53 = type metadata accessor for Peripheral(0);
  *(_QWORD *)(v0 + 3072) = v53;
  v54 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  *(_QWORD *)(v0 + 3080) = v54;
  v55 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect(useCase:options:)[1]);
  *(_QWORD *)(v0 + 3088) = v55;
  *v55 = v0;
  v55[1] = sub_1009CD610;
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(*(_QWORD *)(v0 + 2832), *(_QWORD *)(v0 + 2824), v53, v54);
}

uint64_t sub_1009D2E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_1000126B0(*(_QWORD *)(v0 + 3008), type metadata accessor for AccessoryMetadata);
  v1 = *(_QWORD *)(v0 + 3000);
  v2 = *(_QWORD *)(v0 + 2992);
  v3 = *(_QWORD *)(v0 + 2984);
  v4 = *(_QWORD *)(v0 + 2968);
  v5 = *(_QWORD *)(v0 + 2960);
  v6 = *(_QWORD *)(v0 + 2936);
  v7 = *(_QWORD *)(v0 + 2928);
  v8 = *(_QWORD *)(v0 + 2904);
  v9 = *(_QWORD *)(v0 + 2896);
  v11 = *(_QWORD *)(v0 + 2888);
  v12 = *(_QWORD *)(v0 + 2880);
  v13 = *(_QWORD *)(v0 + 2872);
  v14 = *(_QWORD *)(v0 + 2864);
  v15 = *(_QWORD *)(v0 + 2856);
  v16 = *(_QWORD *)(v0 + 2832);
  v17 = *(_QWORD *)(v0 + 2824);
  v18 = *(_QWORD *)(v0 + 2816);
  v19 = *(_QWORD *)(v0 + 2792);
  v20 = *(_QWORD *)(v0 + 2784);
  v21 = *(_QWORD *)(v0 + 2776);
  v22 = *(_QWORD *)(v0 + 2752);
  v23 = *(_QWORD *)(v0 + 2728);
  v24 = *(_QWORD *)(v0 + 2704);
  v25 = *(_QWORD *)(v0 + 2680);
  swift_task_dealloc(*(_QWORD *)(v0 + 3008));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D2FDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[16] = a1;
  v2[17] = v1;
  v3 = sub_10001A9A8(&qword_1010EF7C0);
  v2[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009D3040, v1, 0);
}

uint64_t sub_1009D3040()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = type metadata accessor for Logger(0);
  v0[21] = sub_10001A9E8(v1, (uint64_t)qword_10110F2A8);
  v2 = swift_retain();
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[20];
    v16 = v0[19];
    v15 = v0[18];
    v6 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v18 = v17;
    *(_DWORD *)v6 = 136446466;
    v0[14] = sub_100016940(0xD000000000000018, 0x8000000100EEC160, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    v7 = type metadata accessor for Peripheral(0);
    v8 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter(v7, v8);
    v9 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v15, v9);
    v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v5, v15);
    v0[15] = sub_100016940(v10, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s for peripheral: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v13 = (_QWORD *)swift_task_alloc(dword_10110F89C);
  v0[22] = v13;
  *v13 = v0;
  v13[1] = sub_1009D32E4;
  return sub_1009E324C(v0[16]);
}

uint64_t sub_1009D32E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v3 + 176);
  v5 = *v3;
  *(_QWORD *)(v5 + 184) = a1;
  *(_QWORD *)(v5 + 192) = a2;
  swift_task_dealloc(v4);
  if (!v2)
    return swift_task_switch(sub_1009D3360, *(_QWORD *)(v5 + 136), 0);
  swift_task_dealloc(*(_QWORD *)(v5 + 160));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1009D3360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  _QWORD *v16;
  uint64_t v17;

  if ((*(_QWORD *)(v1 + 192) & 0x3000000000000000) == 0x1000000000000000)
  {
    v2 = *(_QWORD *)(v1 + 184);
    v3 = Logger.logObject.getter(a1);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = 0xD000000000000010;
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v17 = v7;
      *(_DWORD *)v6 = 136446210;
      if ((_BYTE)v2)
      {
        if (v2 == 1)
          v5 = 0xD000000000000014;
        else
          v5 = 0xD000000000000017;
        if (v2 == 1)
          v8 = 0x8000000100EDE2C0;
        else
          v8 = 0x8000000100EDE2A0;
      }
      else
      {
        v8 = 0x8000000100EDE2E0;
      }
      *(_QWORD *)(v1 + 104) = sub_100016940(v5, v8, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "FMND status: %{public}s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    v16 = (_QWORD *)swift_task_alloc(dword_10110F8A4);
    *(_QWORD *)(v1 + 200) = v16;
    *v16 = v1;
    v16[1] = sub_1009D35F0;
    return sub_1009DB174(*(_QWORD *)(v1 + 128));
  }
  else
  {
    v9 = Logger.logObject.getter(a1);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v13 = *(_QWORD *)(v1 + 184);
    v12 = *(_QWORD *)(v1 + 192);
    if (v11)
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unexpected FMND ID response!", v14, 2u);
      swift_slowDealloc(v14, -1, -1);

      sub_100666EC8(v13, v12);
    }
    else
    {
      sub_100666EC8(*(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 192));

    }
    swift_task_dealloc(*(_QWORD *)(v1 + 160));
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
}

uint64_t sub_1009D35F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 200);
  v4[26] = a1;
  v4[27] = a2;
  v4[28] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1009D3754;
  else
    v6 = sub_1009D3660;
  return swift_task_switch(v6, v4[17], 0);
}

uint64_t sub_1009D3660()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  sub_10001BBBC(v1, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10110CA0C);
  *(_QWORD *)(v0 + 232) = v3;
  *v3 = v0;
  v3[1] = sub_1009D36D4;
  return sub_1008F3350(v0 + 16);
}

uint64_t sub_1009D36D4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 232);
  *(_BYTE *)(v3 + 57) = a1;
  *(_QWORD *)(v3 + 240) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = *(_QWORD *)(v3 + 136);
    v6 = sub_1009D3D74;
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 136);
    sub_10001BC14(*(_QWORD *)(v3 + 208), *(_QWORD *)(v3 + 216));
    v6 = sub_1009D3978;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1009D3754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 224);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v12 = v11;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 64) = sub_100016940(0xD000000000000018, 0x8000000100EEC160, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 72) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 14, v5 + 22);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = 0x50304u >> (8 * *(_DWORD *)(v0 + 184));
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t sub_1009D3978(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  char v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  char v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_BYTE *)(v1 + 57);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v31 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1008F2D90(v4);
    *(_QWORD *)(v1 + 96) = sub_100016940(v7, v8, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AccountCheckResult.SeverStatus: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v30 = v1 + 88;
  if (!*(_BYTE *)(v1 + 184))
  {
    v10 = 0;
    v12 = 328706;
    v13 = 8 * *(_BYTE *)(v1 + 57);
LABEL_10:
    v11 = v12 >> v13;
    goto LABEL_11;
  }
  if (*(_BYTE *)(v1 + 184) != 1)
  {
    v14 = *(_BYTE *)(v1 + 57);
    v10 = v14 & 1;
    v13 = 8 * v14;
    v12 = 327939;
    goto LABEL_10;
  }
  v10 = 0;
  if (*(unsigned __int8 *)(v1 + 57) >= 2u)
    v11 = 5;
  else
    v11 = 3;
LABEL_11:
  v15 = Logger.logObject.getter(v9);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v31 = v18;
    *(_DWORD *)v17 = 136446210;
    sub_1008F3008(v11);
    *(_QWORD *)(v1 + 88) = sub_100016940(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v30, v1 + 96, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "AccountCheckResult: %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  if (v10)
  {
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      sub_1008F3008(1);
      *(_QWORD *)(v1 + 80) = sub_100016940(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v30, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Handling %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    v28 = (_QWORD *)swift_task_alloc(dword_10110F8AC);
    *(_QWORD *)(v1 + 248) = v28;
    *v28 = v1;
    v28[1] = sub_1009D3FB4;
    return sub_1009EA2D0(*(_QWORD *)(v1 + 128));
  }
  else
  {
    sub_10001BC14(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 216));
    swift_task_dealloc(*(_QWORD *)(v1 + 160));
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v11);
  }
}

uint64_t sub_1009D3D74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  sub_10001BC14(v1, v2);
  sub_10001BC14(v1, v2);
  v3 = *(_QWORD *)(v0 + 240);
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    v13 = swift_slowAlloc(32, -1);
    v14 = v13;
    *(_DWORD *)v7 = 136446466;
    *(_QWORD *)(v0 + 64) = sub_100016940(0xD000000000000018, 0x8000000100EEC160, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2114;
    swift_errorRetain(v3);
    v9 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(_QWORD *)(v0 + 72) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v7 + 14, v7 + 22);
    *v8 = v9;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s error %{public}@", (uint8_t *)v7, 0x16u);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v11 = 0x50304u >> (8 * *(_DWORD *)(v0 + 184));
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

uint64_t sub_1009D3FB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009D4058;
  else
    v4 = sub_1009D4018;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), 0);
}

uint64_t sub_1009D4018()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(4);
}

uint64_t sub_1009D4058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_10001BC14(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 256);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v12 = v11;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 64) = sub_100016940(0xD000000000000018, 0x8000000100EEC160, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 72) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 14, v5 + 22);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = 0x50304u >> (8 * *(_DWORD *)(v0 + 184));
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t sub_1009D4284(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  *(_BYTE *)(v4 + 128) = a2;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v7);
  return swift_task_switch(sub_1009D4300, 0, 0);
}

uint64_t sub_1009D4300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 72);
    swift_errorRetain(v17);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v19 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 80);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_10110F2A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    sub_1002437C4(v22, 1);
    v24 = swift_errorRetain(v17);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 72);
    if (v27)
    {
      v48 = v17;
      v32 = swift_slowAlloc(32, -1);
      v49 = (uint64_t *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(64, -1);
      v52 = v50;
      *(_DWORD *)v32 = 136446722;
      *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000029, 0x8000000100EEBFD0, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2082;
      v33 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      *(_QWORD *)(v0 + 40) = sub_100016940(v34, v35, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(_WORD *)(v32 + 22) = 2114;
      swift_errorRetain(v48);
      v36 = _swift_stdlib_bridgeErrorToNSError(v48);
      *(_QWORD *)(v0 + 48) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v32 + 24, v32 + 32);
      *v49 = v36;
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v32, 0x20u);
      v37 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v49, 1, v37);
      swift_slowDealloc(v49, -1, -1);
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v17 = v48;
      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
      {
LABEL_10:
        *(_QWORD *)(v0 + 16) = v17;
        v39 = sub_10001A9A8(&qword_1010F8318);
        CheckedContinuation.resume(throwing:)(v0 + 16, v39);
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);

      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
        goto LABEL_10;
    }
    v40 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 72);
    if (v42)
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v52 = v45;
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD000000000000029, 0x8000000100EEBFD0, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v44 + 4, v44 + 12);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s Not resuming continuation in cancelled task.", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      sub_10010F948(v43, 1);
    }
    else
    {
      sub_10010F948(*(_QWORD *)(v0 + 72), 1);

    }
    goto LABEL_16;
  }
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v52 = v51;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD000000000000029, 0x8000000100EEBFD0, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(_QWORD *)(v0 + 64) = sub_100016940(v15, v16, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));

  }
LABEL_16:
  v46 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D4988(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return swift_task_switch(sub_1009D49A8, v1, 0);
}

uint64_t sub_1009D49A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[4];
  v2 = v0[5];
  v3 = v0[3];
  v4 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v5 = (_QWORD *)swift_task_alloc(48);
  v0[6] = v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v6;
  v7 = sub_10001A9A8(&qword_101102158);
  *v6 = v0;
  v6[1] = sub_1006B2058;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v1, v4, 0xD000000000000017, 0x8000000100EEC420, sub_1009F8F58, v5, v7);
}

uint64_t sub_1009D4A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a2;
  v31 = a4;
  v29 = a1;
  v5 = sub_10001A9A8(&qword_101111900);
  v6 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v28 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v5);
  v16 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 40) & ~v17;
  v19 = *(unsigned __int8 *)(v6 + 80);
  v20 = (v10 + v19 + v18) & ~v19;
  v21 = (v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (char *)swift_allocObject(&unk_1010A1388, v21 + 8, v17 | v19 | 7);
  v23 = v30;
  *((_QWORD *)v22 + 2) = v30;
  *((_QWORD *)v22 + 3) = v16;
  *((_QWORD *)v22 + 4) = v23;
  v24 = v23;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v22[v18], v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v22[v20], v28, v27);
  *(_QWORD *)&v22[v21] = v31;
  swift_retain_n(v24, 2);
  sub_100691AC0((uint64_t)v14, (uint64_t)&unk_10110FAE0, (uint64_t)v22);
  return swift_release();
}

uint64_t sub_1009D4C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v9 = type metadata accessor for UUID(0);
  v7[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101111900);
  v7[7] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[8] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v7[9] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[10] = swift_task_alloc(v13);
  v7[11] = swift_task_alloc(v13);
  v14 = sub_10001A9A8(&qword_1010EF7C0);
  v7[12] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v7[13] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v7[14] = v16;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v17);
  v7[16] = swift_task_alloc(v17);
  return swift_task_switch(sub_1009D4D7C, a4, 0);
}

uint64_t sub_1009D4D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 128);
  v35 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v28 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v38 = v4;
  v40 = v3;
  v5 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v23 = *(_QWORD *)(v0 + 64);
  v37 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 32);
  v31 = v7;
  v8 = *(_QWORD *)(v0 + 24);
  v33 = v8;
  v34 = *(_QWORD *)(v0 + 40);
  v39 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v32(v1, v8, v4);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  v30(v3, v7, v6);
  v9 = *(unsigned __int8 *)(v2 + 80);
  v10 = (v9 + 16) & ~v9;
  v27 = v10;
  v29 = v10 + v28;
  v11 = (v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(unsigned __int8 *)(v23 + 80);
  v13 = (v12 + v11 + 8) & ~v12;
  v25 = v5 + 7;
  v26 = v9 | v12 | 7;
  v14 = (v13 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_1010A13B0, v14 + 8, v26);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v24(v15 + v10, v1, v38);
  *(_QWORD *)(v15 + v11) = v39;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
  v16(v15 + v13, v40, v6);
  *(_QWORD *)(v15 + v14) = v34;
  v32(v35, v33, v38);
  v30(v36, v31, v6);
  v17 = (v29 + v12) & ~v12;
  v18 = (v17 + v25) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1010A13D8, v18 + 8, v26);
  v24(v19 + v27, v35, v38);
  v16(v19 + v17, v36, v6);
  *(_QWORD *)(v19 + v18) = v34;
  v20 = swift_retain(v39);
  UUID.init()(v20);
  v21 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v37, &unk_10110FAF0, v15, &unk_10110FB00, v19);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v21);
  swift_release(v21);
  swift_task_dealloc(v1);
  swift_task_dealloc(v35);
  swift_task_dealloc(v40);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D4FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = sub_10001A9A8(&qword_1010ED860);
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v3[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v3[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[14] = v8;
  v3[15] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F46C0);
  v3[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EF7C0);
  v3[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[18] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v12);
  v3[20] = swift_task_alloc(v12);
  return swift_task_switch(sub_1009D5100, 0, 0);
}

uint64_t sub_1009D5100()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[6];
  v2 = v0[20];
  v3 = v0[17];
  v4 = v0[18];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[20];
  v11 = v0[17];
  if (v9)
  {
    v19 = v0[18];
    v12 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v21 = v20;
    *(_DWORD *)v12 = 136446466;
    v0[4] = sub_100016940(0xD000000000000017, 0x8000000100EEC420, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2082;
    v13 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v0[5] = sub_100016940(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v0[18] + 8);
    v16(v0[20], v0[17]);
  }

  v0[21] = v16;
  v17 = *(_QWORD *)(v0[7] + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_locationPublisher);
  v0[22] = v17;
  return swift_task_switch(sub_1009D5358, v17, 0);
}

uint64_t sub_1009D5358()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[22];
  v2 = v0[16];
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = sub_100006204(&qword_10110FB08, (uint64_t (*)(uint64_t))type metadata accessor for PencilLocationsPublisher, (uint64_t)&unk_100E6FC0C);
  v5 = (_QWORD *)swift_allocObject(&unk_1010A1400, 40, 7);
  v5[2] = v1;
  v5[3] = v4;
  v5[4] = v1;
  swift_retain_n(v1, 2);
  v0[23] = sub_100626D10(v2, (uint64_t)&unk_10110FB10, (uint64_t)v5);
  type metadata accessor for CentralManager(0);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to static CentralManager.pairingCentralManager.getter[1]);
  v0[24] = v6;
  *v6 = v0;
  v6[1] = sub_1009D5444;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_1009D5444(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v5 = *(_QWORD **)v2;
  v5[25] = a1;
  v5[26] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1009D5950, 0, 0);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10110FB18 + dword_10110FB18);
  v7 = (_QWORD *)swift_task_alloc(unk_10110FB1C);
  v5[27] = v7;
  *v7 = v5;
  v7[1] = sub_1009D54F8;
  return v8(a1, v5[6]);
}

uint64_t sub_1009D54F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 216);
  *(_QWORD *)(v3 + 224) = a1;
  *(_QWORD *)(v3 + 232) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009D59D0;
  else
    v5 = sub_1009D5564;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1009D5564()
{
  uint64_t *v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;

  static Date.trustedNow.getter(v0[15]);
  v1 = (uint64_t **)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v0[30] = (uint64_t)v1;
  v2 = sub_10001A9A8(&qword_101102158);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1009D55F8;
  return Task.value.getter(v0 + 2, v0[23], v2, v3, &protocol self-conformance witness table for Error);
}

uint64_t sub_1009D55F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = sub_1009D5A5C;
  }
  else
  {
    v3 = sub_1009D5664;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1009D5664(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v1[2];
  v1[32] = v1[31];
  v1[33] = v2;
  v3 = (void (*)(uint64_t, uint64_t))v1[21];
  v4 = v1[19];
  v5 = v1[17];
  v6 = v1[11];
  v8 = v1[9];
  v7 = v1[10];
  Peripheral.id.getter(a1);
  Identifier.id.getter(v5);
  v3(v4, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v8, 1, 1, v7);
  v9 = (_QWORD *)swift_task_alloc(dword_10110F894);
  v1[34] = v9;
  *v9 = v1;
  v9[1] = sub_1009D5738;
  return sub_1009D6430(v1[12], 7, v1[15], v1[9]);
}

uint64_t sub_1009D5738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  sub_100004048(v4, &qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1009D57BC, 0, 0);
}

uint64_t sub_1009D57BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(v1 + 256);
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    v3 = *(void **)(v1 + 264);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 112) + 8))(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 104));
    swift_release();
    swift_release();
    swift_release();

    v4 = *(_QWORD *)(v1 + 152);
    v6 = *(_QWORD *)(v1 + 120);
    v5 = *(_QWORD *)(v1 + 128);
    v7 = *(_QWORD *)(v1 + 96);
    v8 = *(_QWORD *)(v1 + 72);
    swift_task_dealloc(*(_QWORD *)(v1 + 160));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
  }
  else
  {
    v9 = *(void **)(v1 + 264);
    v16 = *(_QWORD *)(v1 + 160);
    v17 = *(_QWORD *)(v1 + 152);
    v10 = *(_QWORD *)(v1 + 120);
    v11 = *(_QWORD *)(v1 + 104);
    v12 = *(_QWORD *)(v1 + 112);
    v18 = *(_QWORD *)(v1 + 128);
    v19 = *(_QWORD *)(v1 + 96);
    v20 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 24) = v9;
    v13 = v9;
    v14 = sub_10001A9A8(&qword_101111900);
    CheckedContinuation.resume(returning:)(v1 + 24, v14);
    swift_release();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v10);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009D5950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 184));
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D59D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D5A5C(uint64_t a1)
{
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;

  v1[32] = 0;
  v1[33] = 0;
  v2 = (void (*)(uint64_t, uint64_t))v1[21];
  v3 = v1[19];
  v4 = v1[17];
  v5 = v1[11];
  v7 = v1[9];
  v6 = v1[10];
  Peripheral.id.getter(a1);
  Identifier.id.getter(v4);
  v2(v3, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v7, 1, 1, v6);
  v8 = (uint64_t **)swift_task_alloc(dword_10110F894);
  v1[34] = (uint64_t)v8;
  *v8 = v1;
  v8[1] = (uint64_t *)sub_1009D5738;
  return sub_1009D6430(v1[12], 7, v1[15], v1[9]);
}

uint64_t sub_1009D5B28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v3[9] = *v2;
  v4 = type metadata accessor for CentralManager.State(0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  v3[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[14] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[15] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v9);
  v3[17] = swift_task_alloc(v9);
  v3[18] = swift_task_alloc(v9);
  return swift_task_switch(sub_1009D5BE0, v2, 0);
}

uint64_t sub_1009D5BE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[18];
  v2 = v0[13];
  v3 = v0[14];
  v4 = v0[7];
  v5 = type metadata accessor for Logger(0);
  v0[19] = sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[20] = v6;
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[18];
  v12 = v0[13];
  v13 = v0[14];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    v0[5] = sub_100016940(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Pairing Pencil with identifier %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v0[18], v0[13]);
  }

  v0[21] = v19;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[11] + 104))(v0[12], enum case for CentralManager.State.poweredOn(_:), v0[10]);
  v20 = type metadata accessor for CentralManager(0);
  v21 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  v22 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CentralManagerProtocol.await(state:)[1]);
  v0[22] = v22;
  *v22 = v0;
  v22[1] = sub_1009D5E58;
  return dispatch thunk of CentralManagerProtocol.await(state:)(v0[12], v20, v21);
}

uint64_t sub_1009D5E58()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  v5 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 96);
  v6 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1009D619C;
  else
    v7 = sub_1009D5EE4;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_1009D5EE4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 160))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 104));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v4 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 104);
    v6 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v26 = v24;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 24) = sub_100016940(0xD000000000000026, 0x8000000100EEC440, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    v7 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v8 = dispatch thunk of CustomStringConvertible.description.getter(v5, v7);
    *(_QWORD *)(v0 + 32) = sub_100016940(v8, v9, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    v25(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Retrieving peripheral matching identifier: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 168))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104));
  }

  v11 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 160))(v10, *(_QWORD *)(v0 + 56), v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1010A1428, v18 + 8, v16 | 7);
  *(_QWORD *)(v0 + 192) = v19;
  *(_QWORD *)(v19 + 16) = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v19 + v17, v10, v12);
  *(_QWORD *)(v19 + v18) = v14;
  v20 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v21 = (_QWORD *)swift_task_alloc(v20);
  *(_QWORD *)(v0 + 200) = v21;
  v22 = type metadata accessor for Peripheral(0);
  *v21 = v0;
  v21[1] = sub_1009D61F8;
  return withTimeout<A>(_:block:)(v0 + 16, 0x40AAD21B3B700000, 3, &unk_10110FB28, v19, v22);
}

uint64_t sub_1009D619C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D61F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 64);
    v5 = sub_1009D6368;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 64);
    swift_release();
    v5 = sub_1009D626C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009D626C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[2];
  v0[27] = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_10110F78C);
  v0[28] = v2;
  *v2 = v0;
  v2[1] = sub_1009D62C0;
  return sub_1009CB968(v1);
}

uint64_t sub_1009D62C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 224);
  v3 = *v1;
  *(_QWORD *)(v3 + 232) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1009D63CC, *(_QWORD *)(v3 + 64), 0);
  v5 = *(_QWORD *)(v3 + 136);
  v6 = *(_QWORD *)(v3 + 128);
  v7 = *(_QWORD *)(v3 + 96);
  swift_task_dealloc(*(_QWORD *)(v3 + 144));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v3 + 8))(*(_QWORD *)(v3 + 216));
}

uint64_t sub_1009D6368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D63CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D6430(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *(_QWORD *)(v5 + 312) = a4;
  *(_QWORD *)(v5 + 320) = v4;
  *(_BYTE *)(v5 + 572) = a2;
  *(_QWORD *)(v5 + 296) = a1;
  *(_QWORD *)(v5 + 304) = a3;
  v6 = type metadata accessor for Date(0);
  *(_QWORD *)(v5 + 328) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 336) = v7;
  *(_QWORD *)(v5 + 344) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DeviceEvent(0);
  *(_QWORD *)(v5 + 352) = v8;
  *(_QWORD *)(v5 + 360) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconIdentifier(0);
  *(_QWORD *)(v5 + 368) = v9;
  *(_QWORD *)(v5 + 376) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  *(_QWORD *)(v5 + 384) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconRecord(0);
  *(_QWORD *)(v5 + 392) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 400) = v12;
  *(_QWORD *)(v5 + 408) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v5 + 416) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 424) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v5 + 432) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 440) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 448) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 456) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 464) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 472) = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EF480) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 480) = swift_task_alloc(v17);
  *(_QWORD *)(v5 + 488) = swift_task_alloc(v17);
  return swift_task_switch(sub_1009D65E0, v4, 0);
}

uint64_t sub_1009D65E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uid_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t (__cdecl *v20)();

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 416);
  sub_10000F9B8(*(_QWORD *)(v0 + 312), v3, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 416), &qword_1010ED860);
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 200, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 120))
    {
      sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v20 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v5 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 496) = v5;
      v6 = sub_1009D6864;
LABEL_10:
      *v5 = v0;
      v5[1] = v6;
      return v20();
    }
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 488);
    v8 = *(_QWORD *)(v0 + 472);
    v9 = *(_QWORD *)(v0 + 424);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 432) + 32);
    v10(v8, *(_QWORD *)(v0 + 416), v9);
    v10(v7, v8, v9);
    v11 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 0, 1, v11);
    v12 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 432);
    v15 = *(_QWORD *)(v0 + 368);
    v14 = *(_QWORD *)(v0 + 376);
    v16 = *(_QWORD *)(v0 + 296);
    v17 = getuid();
    sub_100A06500(v17);
    v18 = v14 + *(int *)(v15 + 20);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    *(_QWORD *)(v0 + 528) = v19;
    v19(v18, v16, v12);
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v20 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
      v5 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
      *(_QWORD *)(v0 + 536) = v5;
      v6 = sub_1009D7254;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1009D6864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009D68C4, v3, 0);
}

uint64_t sub_1009D68C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  os_log_t log;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 504);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1009D6CBC, *(_QWORD *)(v0 + 504), 0);
  v3 = sub_100350CCC();
  v4 = swift_allocError(&type metadata for PencilPairingService.Error, v3, 0, 0);
  *(_OWORD *)v5 = xmmword_100E58210;
  *(_BYTE *)(v5 + 16) = 3;
  swift_willThrow(v4);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v7 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 440);
  v8 = *(_QWORD *)(v0 + 424);
  v9 = *(_QWORD *)(v0 + 296);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_10110F2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  swift_errorRetain(v4);
  v11 = swift_errorRetain(v4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v16 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 440);
  v17 = *(_QWORD *)(v0 + 424);
  if (v14)
  {
    v34 = *(_QWORD *)(v0 + 432);
    v18 = swift_slowAlloc(32, -1);
    v33 = (uint64_t *)swift_slowAlloc(8, -1);
    v37 = swift_slowAlloc(32, -1);
    v39 = v37;
    *(_DWORD *)v18 = 138543875;
    swift_errorRetain(v4);
    v19 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v0 + 232) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v18 + 4, v18 + 12);
    *v33 = v19;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    *(_WORD *)(v18 + 12) = 2160;
    *(_QWORD *)(v0 + 240) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v18 + 14, v18 + 22);
    *(_WORD *)(v18 + 22) = 2081;
    v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
    *(_QWORD *)(v0 + 248) = sub_100016940(v21, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v15, v17);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error while saving peripheral event: %{public}@, beacon: %{private,mask.hash}s.", (uint8_t *)v18, 0x20u);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v33, 1, v23);
    swift_slowDealloc(v33, -1, -1);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);

  }
  v24 = *(_QWORD *)(v0 + 480);
  v26 = *(_QWORD *)(v0 + 464);
  v25 = *(_QWORD *)(v0 + 472);
  v28 = *(_QWORD *)(v0 + 448);
  v27 = *(_QWORD *)(v0 + 456);
  v29 = *(_QWORD *)(v0 + 440);
  v31 = *(_QWORD *)(v0 + 408);
  v30 = *(_QWORD *)(v0 + 416);
  v32 = *(_QWORD *)(v0 + 384);
  v35 = *(_QWORD *)(v0 + 376);
  log = *(os_log_t *)(v0 + 360);
  v38 = *(_QWORD *)(v0 + 344);
  swift_task_dealloc(*(_QWORD *)(v0 + 488));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v35);
  swift_task_dealloc(log);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

