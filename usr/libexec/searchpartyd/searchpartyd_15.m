uint64_t sub_1008A1700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v3 + 104) = v2;
  v6 = sub_10001A9A8(&qword_1010EC868);
  *(_QWORD *)(v3 + 112) = v6;
  *(_QWORD *)(v3 + 120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MemberPeerTrust(0);
  *(_QWORD *)(v3 + 128) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 136) = v8;
  *(_QWORD *)(v3 + 144) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F7778) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 152) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 160) = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101111440) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 168) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 176) = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 184) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v3 + 192) = v12;
  v13 = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v3 + 200) = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v14);
  *(_QWORD *)(v3 + 216) = swift_task_alloc(v14);
  *(_QWORD *)(v3 + 224) = swift_task_alloc(v14);
  *(_QWORD *)(v3 + 232) = swift_task_alloc(v14);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  *(_QWORD *)(v3 + 240) = v15;
  *(_QWORD *)(v3 + 248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SharedBeaconRecord(0);
  *(_QWORD *)(v3 + 256) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v3 + 264) = v17;
  *(_QWORD *)(v3 + 272) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010ECD00);
  *(_QWORD *)(v3 + 280) = v18;
  v19 = (*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 288) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 296) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 304) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 312) = swift_task_alloc(v19);
  v20 = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 320) = v20;
  v21 = *(int *)(v18 + 48);
  *(_DWORD *)(v3 + 456) = v21;
  v22 = v20 + v21;
  sub_10000F9B8(a1, v20, (uint64_t *)&unk_101111440);
  sub_10005972C(a2, v22, type metadata accessor for MemberSharingCircle);
  return swift_task_switch(sub_1008A1940, v2, 0);
}

uint64_t sub_1008A1940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  v7 = v1 + *(int *)(v0 + 456);
  v8 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 136);
  *(_QWORD *)(v0 + 328) = v8;
  v9 = v2 + *(int *)(v3 + 48);
  sub_10000F9B8(v1, v2, (uint64_t *)&unk_101111440);
  sub_10005972C(v7, v9, type metadata accessor for MemberSharingCircle);
  v10 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v0 + 336) = v10;
  v11 = v9 + *(int *)(v10 + 24);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 344) = v12;
  v12(v4, v11, v5);
  sub_1000126B0(v9, type metadata accessor for MemberSharingCircle);
  return swift_task_switch(sub_1008A1A10, v8, 0);
}

uint64_t sub_1008A1A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 344))(v2, *(_QWORD *)(v0 + 232), v5);
  LODWORD(v6) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 460) = v6;
  v6 = v6;
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101097B40, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 352) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 360) = v9;
  v9(v8 + v7, v2, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 368) = v11;
  *v11 = v0;
  v11[1] = sub_1008A1AF4;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 248), sub_100067DF8, v8, *(_QWORD *)(v0 + 240));
}

uint64_t sub_1008A1AF4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 312);
  v3 = *(_QWORD *)(*v0 + 232);
  v4 = *(_QWORD *)(*v0 + 184);
  v5 = *(_QWORD *)(*v0 + 192);
  v6 = *(_QWORD *)(*v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*v0 + 368));
  swift_release();
  v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v1 + 376) = v7;
  v7(v3, v4);
  sub_100004048(v2, (uint64_t *)&unk_101111440);
  return swift_task_switch(sub_1008A1B9C, v6, 0);
}

uint64_t sub_1008A1B9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  char v73;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 248);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 264) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 320), &qword_1010ECD00);
    v3 = (uint64_t *)&unk_1010EE180;
LABEL_7:
    v14 = v2;
LABEL_12:
    sub_100004048(v14, v3);
    v24 = *(_QWORD *)(v0 + 312);
    v26 = *(_QWORD *)(v0 + 296);
    v25 = *(_QWORD *)(v0 + 304);
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 272);
    v29 = *(_QWORD *)(v0 + 248);
    v30 = *(_QWORD *)(v0 + 224);
    v31 = *(_QWORD *)(v0 + 232);
    v32 = *(_QWORD *)(v0 + 216);
    v76 = *(_QWORD *)(v0 + 208);
    v77 = *(_QWORD *)(v0 + 176);
    v78 = *(_QWORD *)(v0 + 168);
    v79 = *(_QWORD *)(v0 + 160);
    v80 = *(_QWORD *)(v0 + 152);
    v81 = *(_QWORD *)(v0 + 144);
    v82 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_QWORD *)(v0 + 272);
  sub_1000126EC(v2, v4, type metadata accessor for SharedBeaconRecord);
  if (*(_BYTE *)(v4 + *(int *)(v1 + 64)) != 2)
  {
    v2 = *(_QWORD *)(v0 + 320);
    sub_1000126B0(*(_QWORD *)(v0 + 272), type metadata accessor for SharedBeaconRecord);
    v3 = &qword_1010ECD00;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = v6 + *(int *)(v0 + 456);
  v10 = v7 + *(int *)(*(_QWORD *)(v0 + 280) + 48);
  sub_10000F9B8(v6, v7, (uint64_t *)&unk_101111440);
  sub_10005972C(v9, v10, type metadata accessor for MemberSharingCircle);
  sub_100005CF0(v7, v8, (uint64_t *)&unk_101111440);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (v11(v8, 1, v5) == 1)
  {
    v12 = *(_QWORD *)(v0 + 176);
    sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
    sub_100004048(v12, (uint64_t *)&unk_101111440);
    v13 = 6;
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 176);
    v13 = *(unsigned __int8 *)(v15 + *(int *)(*(_QWORD *)(v0 + 336) + 40));
    sub_1000126B0(v15, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
  }
  v16 = *(_QWORD *)(v0 + 336);
  v17 = *(_QWORD *)(v0 + 320);
  v18 = *(_QWORD *)(v0 + 296);
  v19 = v17 + *(int *)(v0 + 456);
  v20 = v18 + *(int *)(*(_QWORD *)(v0 + 280) + 48);
  sub_10000F9B8(v17, v18, (uint64_t *)&unk_101111440);
  sub_10005972C(v19, v20, type metadata accessor for MemberSharingCircle);
  v21 = *(unsigned __int8 *)(v20 + *(int *)(v16 + 40));
  sub_1000126B0(v20, type metadata accessor for MemberSharingCircle);
  if (v13 != 1 || v21 != 1)
  {
    v22 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 272);
LABEL_11:
    sub_1000126B0(v23, type metadata accessor for SharedBeaconRecord);
    sub_100004048(v22, &qword_1010ECD00);
    v14 = *(_QWORD *)(v0 + 296);
    v3 = (uint64_t *)&unk_101111440;
    goto LABEL_12;
  }
  v34 = *(_QWORD *)(v0 + 336);
  v35 = *(_QWORD *)(v0 + 320);
  v36 = *(_QWORD *)(v0 + 288);
  v37 = *(_QWORD *)(v0 + 168);
  v38 = v35 + *(int *)(v0 + 456);
  v39 = v36 + *(int *)(*(_QWORD *)(v0 + 280) + 48);
  sub_10000F9B8(v35, v36, (uint64_t *)&unk_101111440);
  sub_10005972C(v38, v39, type metadata accessor for MemberSharingCircle);
  sub_100005CF0(v36, v37, (uint64_t *)&unk_101111440);
  if (v11(v37, 1, v34) == 1)
  {
    v40 = *(_QWORD *)(v0 + 168);
    sub_1000126B0(v39, type metadata accessor for MemberSharingCircle);
    sub_100004048(v40, (uint64_t *)&unk_101111440);
    v41 = sub_1006BB658((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v42 = *(_QWORD *)(v0 + 168);
    v41 = *(_QWORD *)(v42 + *(int *)(*(_QWORD *)(v0 + 336) + 36));
    swift_bridgeObjectRetain(v41);
    sub_1000126B0(v42, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v39, type metadata accessor for MemberSharingCircle);
  }
  *(_QWORD *)(v0 + 384) = v41;
  v43 = *(_QWORD *)(v0 + 336);
  v45 = *(_QWORD *)(v0 + 312);
  v44 = *(_QWORD *)(v0 + 320);
  v46 = v44 + *(int *)(v0 + 456);
  v47 = v45 + *(int *)(*(_QWORD *)(v0 + 280) + 48);
  sub_10000F9B8(v44, v45, (uint64_t *)&unk_101111440);
  sub_10005972C(v46, v47, type metadata accessor for MemberSharingCircle);
  v48 = *(_QWORD *)(v47 + *(int *)(v43 + 36));
  *(_QWORD *)(v0 + 392) = v48;
  swift_bridgeObjectRetain(v48);
  sub_1000126B0(v47, type metadata accessor for MemberSharingCircle);
  result = sub_100004048(v45, (uint64_t *)&unk_101111440);
  v49 = 0;
  v50 = *(_BYTE *)(v41 + 32);
  *(_BYTE *)(v0 + 464) = v50;
  v51 = 1 << v50;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  else
    v52 = -1;
  v53 = v52 & *(_QWORD *)(v41 + 64);
  while (1)
  {
    if (v53)
    {
      v54 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      v55 = v54 | (v49 << 6);
      v56 = *(_QWORD *)(v0 + 384);
      goto LABEL_24;
    }
    v60 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    v61 = (unint64_t)((1 << *(_BYTE *)(v0 + 464)) + 63) >> 6;
    if (v60 >= v61)
    {
      v64 = v49;
    }
    else
    {
      v56 = *(_QWORD *)(v0 + 384);
      v62 = v56 + 64;
      v63 = *(_QWORD *)(v56 + 64 + 8 * v60);
      if (v63)
        goto LABEL_28;
      v64 = v49 + 1;
      if (v49 + 2 < v61)
      {
        v63 = *(_QWORD *)(v62 + 8 * (v49 + 2));
        if (v63)
        {
          v60 = v49 + 2;
          goto LABEL_28;
        }
        v64 = v49 + 2;
        if (v49 + 3 < v61)
        {
          v63 = *(_QWORD *)(v62 + 8 * (v49 + 3));
          if (v63)
          {
            v60 = v49 + 3;
LABEL_28:
            v53 = (v63 - 1) & v63;
            v55 = __clz(__rbit64(v63)) + (v60 << 6);
            v49 = v60;
LABEL_24:
            v57 = *(_QWORD *)(v0 + 152);
            (*(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 344))(v57, *(_QWORD *)(v56 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 192) + 72) * v55, *(_QWORD *)(v0 + 184));
            v58 = *(_QWORD *)(v56 + 56);
            v59 = sub_10001A9A8((uint64_t *)&unk_1010F7780);
            *(_BYTE *)(v57 + *(int *)(v59 + 48)) = *(_BYTE *)(v58 + v55);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v57, 0, 1, v59);
            goto LABEL_31;
          }
          v60 = v49 + 4;
          v64 = v49 + 3;
          if (v49 + 4 < v61)
          {
            v63 = *(_QWORD *)(v62 + 8 * v60);
            if (v63)
              goto LABEL_28;
            v64 = v61 - 1;
            v75 = v61 - 5;
            while (v75 != v49)
            {
              v63 = *(_QWORD *)(v56 + 104 + 8 * v49++);
              if (v63)
              {
                v60 = v49 + 4;
                goto LABEL_28;
              }
            }
          }
        }
      }
    }
    v65 = *(_QWORD *)(v0 + 152);
    v66 = sub_10001A9A8((uint64_t *)&unk_1010F7780);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 1, 1, v66);
    v53 = 0;
    v49 = v64;
LABEL_31:
    *(_QWORD *)(v0 + 400) = v49;
    *(_QWORD *)(v0 + 408) = v53;
    v67 = *(_QWORD *)(v0 + 160);
    sub_100005CF0(*(_QWORD *)(v0 + 152), v67, &qword_1010F7778);
    v68 = sub_10001A9A8((uint64_t *)&unk_1010F7780);
    v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 48))(v67, 1, v68);
    v70 = *(_QWORD *)(v0 + 392);
    if (v69 == 1)
    {
      v22 = *(_QWORD *)(v0 + 320);
      v23 = *(_QWORD *)(v0 + 272);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_11;
    }
    v71 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 160) + *(int *)(v68 + 48));
    (*(void (**)(_QWORD))(v0 + 360))(*(_QWORD *)(v0 + 216));
    if (*(_QWORD *)(v70 + 16))
    {
      v72 = sub_100003FB0(*(_QWORD *)(v0 + 216));
      if ((v73 & 1) != 0 && !v71 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v0 + 392) + 56) + v72) == 1)
        return swift_task_switch(sub_1008A22B0, *(_QWORD *)(v0 + 328), 0);
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 184));
  }
  __break(1u);
  return result;
}

uint64_t sub_1008A22B0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  v2 = *(unsigned __int8 *)(v0 + 460);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 200) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 344))(v4, *(_QWORD *)(v0 + 216), v5);
  v9 = swift_allocObject(&unk_101097B68, v7, v8);
  *(_QWORD *)(v0 + 416) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 424) = v11;
  *v11 = v0;
  v11[1] = sub_1008A239C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 120), sub_100067E08, v9, *(_QWORD *)(v0 + 112));
}

uint64_t sub_1008A239C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 424));
  swift_release();
  return swift_task_switch(sub_1008A23FC, v1, 0);
}

uint64_t sub_1008A23FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 48))(v2, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100004048(v2, &qword_1010EC868);
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
    v4 = *(_QWORD *)(v0 + 208);
    v5 = *(_QWORD *)(v0 + 216);
    v6 = *(_QWORD *)(v0 + 184);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7860);
    v8 = v3(v4, v5, v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
    v13 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 184);
    if (v11)
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v49 = v16;
      *(_DWORD *)v15 = 136380675;
      v17 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
      *(_QWORD *)(v0 + 96) = sub_100016940(v18, v19, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease();
      v12(v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Can't post transparency notification due to no member peer trust for %{private}s identifier.", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      v12(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 184));
    }

    v30 = sub_1008A450C();
    v48 = swift_allocError(&type metadata for ItemSharingNotificationError, v30, 0, 0);
    swift_willThrow(v48);
    v32 = *(_QWORD *)(v0 + 312);
    v31 = *(_QWORD *)(v0 + 320);
    v33 = *(_QWORD *)(v0 + 296);
    v34 = *(_QWORD *)(v0 + 304);
    v35 = *(_QWORD *)(v0 + 288);
    v36 = *(_QWORD *)(v0 + 272);
    v37 = *(_QWORD *)(v0 + 248);
    v38 = *(_QWORD *)(v0 + 216);
    v39 = *(_QWORD *)(v0 + 232);
    v40 = *(_QWORD *)(v0 + 224);
    v41 = *(_QWORD *)(v0 + 208);
    v42 = *(_QWORD *)(v0 + 176);
    v43 = *(_QWORD *)(v0 + 168);
    v44 = *(_QWORD *)(v0 + 160);
    v45 = *(_QWORD *)(v0 + 152);
    v46 = *(_QWORD *)(v0 + 144);
    v47 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, _QWORD))(v0 + 376))(v38, *(_QWORD *)(v0 + 184));
    swift_release();
    sub_1000126B0(v36, type metadata accessor for SharedBeaconRecord);
    sub_100004048(v31, &qword_1010ECD00);
    sub_100004048(v33, (uint64_t *)&unk_101111440);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v38);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(int *)(v0 + 456);
    v21 = *(_QWORD *)(v0 + 320);
    v22 = *(_QWORD *)(v0 + 144);
    sub_1000126EC(v2, v22, type metadata accessor for MemberPeerTrust);
    v23 = v22 + *(int *)(v1 + 20);
    v24 = (uint64_t *)(v22 + *(int *)(v1 + 32));
    v25 = *v24;
    v26 = v24[1];
    *(_QWORD *)(v0 + 432) = v26;
    v27 = dword_10110B66C;
    swift_bridgeObjectRetain(v26);
    v28 = (_QWORD *)swift_task_alloc(v27);
    *(_QWORD *)(v0 + 440) = v28;
    *v28 = v0;
    v28[1] = sub_1008A280C;
    return sub_10089E158(v0 + 16, v21 + v20, v23, v25, v26);
  }
}

uint64_t sub_1008A280C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 440);
  *(_QWORD *)(*v1 + 448) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1008A2DB8;
  else
    v4 = sub_1008A2870;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 104), 0);
}

uint64_t sub_1008A2870()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  char v36;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;

  v1 = (uint64_t *)(v0 + 16);
  v60 = (_QWORD *)(v0 + 56);
  if (qword_1010E9FD0 != -1)
LABEL_38:
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7860);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Post Transparency Notification", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v56 = *(_QWORD *)(v0 + 216);
  v58 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v54 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 104);

  swift_unownedRetainStrong(*(_QWORD *)(v8 + 128));
  v10 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 48);
  v11 = sub_10001AA44(v1, v10);
  *(_QWORD *)(v0 + 80) = v10;
  v12 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v0 + 88) = v12;
  v13 = v1;
  v14 = sub_100018F08(v60);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v14, v11, v10);
  sub_100A3B794((uint64_t)v14, 0, 0, v10, v12);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
  swift_bridgeObjectRelease();
  sub_1000126B0(v7, type metadata accessor for MemberPeerTrust);
  v58(v56, v54);
  v15 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 408);
  v1 = &qword_1010F7778;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v15 << 6);
      v19 = *(_QWORD *)(v0 + 384);
LABEL_8:
      v20 = *(_QWORD *)(v0 + 152);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 344))(v20, *(_QWORD *)(v19 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 192) + 72) * v18, *(_QWORD *)(v0 + 184));
      v21 = *(_QWORD *)(v19 + 56);
      v22 = sub_10001A9A8((uint64_t *)&unk_1010F7780);
      *(_BYTE *)(v20 + *(int *)(v22 + 48)) = *(_BYTE *)(v21 + v18);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 0, 1, v22);
      goto LABEL_15;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    v24 = (unint64_t)((1 << *(_BYTE *)(v0 + 464)) + 63) >> 6;
    if (v23 >= v24)
    {
      v27 = v15;
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 384);
      v25 = v19 + 64;
      v26 = *(_QWORD *)(v19 + 64 + 8 * v23);
      if (v26)
        goto LABEL_12;
      v27 = v15 + 1;
      if (v15 + 2 < v24)
      {
        v26 = *(_QWORD *)(v25 + 8 * (v15 + 2));
        if (v26)
        {
          v23 = v15 + 2;
LABEL_12:
          v16 = (v26 - 1) & v26;
          v18 = __clz(__rbit64(v26)) + (v23 << 6);
          v15 = v23;
          goto LABEL_8;
        }
        v27 = v15 + 2;
        if (v15 + 3 < v24)
        {
          v26 = *(_QWORD *)(v25 + 8 * (v15 + 3));
          if (v26)
          {
            v23 = v15 + 3;
            goto LABEL_12;
          }
          v23 = v15 + 4;
          v27 = v15 + 3;
          if (v15 + 4 < v24)
          {
            v26 = *(_QWORD *)(v25 + 8 * v23);
            if (v26)
              goto LABEL_12;
            v27 = v24 - 1;
            v38 = v24 - 5;
            while (v38 != v15)
            {
              v26 = *(_QWORD *)(v19 + 104 + 8 * v15++);
              if (v26)
              {
                v23 = v15 + 4;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
    v28 = *(_QWORD *)(v0 + 152);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010F7780);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
    v16 = 0;
    v15 = v27;
LABEL_15:
    *(_QWORD *)(v0 + 400) = v15;
    *(_QWORD *)(v0 + 408) = v16;
    v30 = *(_QWORD *)(v0 + 160);
    sub_100005CF0(*(_QWORD *)(v0 + 152), v30, &qword_1010F7778);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010F7780);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31);
    v33 = *(_QWORD *)(v0 + 392);
    if (v32 == 1)
      break;
    v34 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 160) + *(int *)(v31 + 48));
    (*(void (**)(_QWORD))(v0 + 360))(*(_QWORD *)(v0 + 216));
    if (*(_QWORD *)(v33 + 16))
    {
      v35 = sub_100003FB0(*(_QWORD *)(v0 + 216));
      if ((v36 & 1) != 0 && !v34 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v0 + 392) + 56) + v35) == 1)
        return swift_task_switch(sub_1008A22B0, *(_QWORD *)(v0 + 328), 0);
    }
    (*(void (**)(_QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 184));
  }
  v39 = *(_QWORD *)(v0 + 320);
  v40 = *(_QWORD *)(v0 + 272);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000126B0(v40, type metadata accessor for SharedBeaconRecord);
  sub_100004048(v39, &qword_1010ECD00);
  sub_100004048(*(_QWORD *)(v0 + 296), (uint64_t *)&unk_101111440);
  v41 = *(_QWORD *)(v0 + 312);
  v43 = *(_QWORD *)(v0 + 296);
  v42 = *(_QWORD *)(v0 + 304);
  v44 = *(_QWORD *)(v0 + 288);
  v45 = *(_QWORD *)(v0 + 272);
  v46 = *(_QWORD *)(v0 + 248);
  v47 = *(_QWORD *)(v0 + 224);
  v48 = *(_QWORD *)(v0 + 232);
  v49 = *(_QWORD *)(v0 + 216);
  v51 = *(_QWORD *)(v0 + 208);
  v52 = *(_QWORD *)(v0 + 176);
  v53 = *(_QWORD *)(v0 + 168);
  v55 = *(_QWORD *)(v0 + 160);
  v57 = *(_QWORD *)(v0 + 152);
  v59 = *(_QWORD *)(v0 + 144);
  v61 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008A2DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126B0(v1, type metadata accessor for MemberPeerTrust);
  v3 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD))(v0 + 376))(v9, *(_QWORD *)(v0 + 184));
  swift_release();
  sub_1000126B0(v7, type metadata accessor for SharedBeaconRecord);
  sub_100004048(v2, &qword_1010ECD00);
  sub_100004048(v4, (uint64_t *)&unk_101111440);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v9);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008A2F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v3 + 24) = v2;
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 32) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 40) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v3 + 48) = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 56) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 64) = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010ECCF8);
  *(_QWORD *)(v3 + 72) = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v11);
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v11);
  *(_QWORD *)(v3 + 96) = swift_task_alloc(v11);
  v12 = swift_task_alloc(v11);
  *(_QWORD *)(v3 + 104) = v12;
  v13 = *(int *)(v10 + 48);
  *(_DWORD *)(v3 + 176) = v13;
  v14 = v12 + v13;
  sub_10000F9B8(a1, v12, &qword_1010EE0E0);
  sub_10005972C(a2, v14, type metadata accessor for OwnerSharingCircle);
  return swift_task_switch(sub_1008A3060, v2, 0);
}

uint64_t sub_1008A3060()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = (int *)type metadata accessor for OwnerSharingCircle(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v2 - 1) + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = v1 + *(int *)(v0 + 176);
    v7 = v3 + *(int *)(v5 + 48);
    sub_10000F9B8(v1, v3, &qword_1010EE0E0);
    sub_10005972C(v6, v7, type metadata accessor for OwnerSharingCircle);
    v8 = *(unsigned __int8 *)(v7 + v2[7]);
    sub_1000126B0(v7, type metadata accessor for OwnerSharingCircle);
    sub_100004048(v3, &qword_1010EE0E0);
    v9 = v4 + *(int *)(v5 + 48);
    sub_10000F9B8(v1, v4, &qword_1010EE0E0);
    sub_10005972C(v6, v9, type metadata accessor for OwnerSharingCircle);
    if (v8 == 2)
    {
      v11 = *(_QWORD *)(v0 + 88);
      v10 = *(_QWORD *)(v0 + 96);
      v12 = v10 + *(int *)(*(_QWORD *)(v0 + 72) + 48);
      sub_10000F9B8(v11, v10, &qword_1010EE0E0);
      sub_10005972C(v9, v12, type metadata accessor for OwnerSharingCircle);
      v13 = *(unsigned __int8 *)(v12 + v2[9]);
      sub_1000126B0(v12, type metadata accessor for OwnerSharingCircle);
      sub_100004048(v11, &qword_1010ECCF8);
      sub_100004048(v10, &qword_1010EE0E0);
      if (v13 == 2)
      {
        v15 = *(_QWORD *)(v0 + 96);
        v14 = *(_QWORD *)(v0 + 104);
        v16 = *(_QWORD *)(v0 + 72);
        v32 = *(_QWORD *)(v0 + 64);
        v17 = *(_QWORD *)(v0 + 32);
        v18 = *(_QWORD *)(v0 + 40);
        v19 = *(_QWORD *)(v0 + 24);
        v20 = v14 + *(int *)(v0 + 176);
        sub_1008A43D0();
        sub_1008A4414();
        v21 = static CaseIterable<>.allMembers.getter();
        *(_QWORD *)(v0 + 112) = sub_1006411D4((uint64_t)&off_10104DD10, v21);
        v22 = *(_QWORD *)(v19 + 136);
        *(_QWORD *)(v0 + 120) = v22;
        v23 = v15 + *(int *)(v16 + 48);
        sub_10000F9B8(v14, v15, &qword_1010EE0E0);
        sub_10005972C(v20, v23, type metadata accessor for OwnerSharingCircle);
        v24 = v23 + v2[6];
        v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
        *(_QWORD *)(v0 + 128) = v25;
        v25(v32, v24, v17);
        sub_1000126B0(v23, type metadata accessor for OwnerSharingCircle);
        return swift_task_switch(sub_1008A332C, v22, 0);
      }
    }
    else
    {
      sub_100004048(*(_QWORD *)(v0 + 88), &qword_1010ECCF8);
    }
    v1 = *(_QWORD *)(v0 + 104);
  }
  sub_100004048(v1, &qword_1010ECCF8);
  v27 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 88);
  v31 = *(_QWORD *)(v0 + 56);
  v30 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008A332C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 128))(v3, *(_QWORD *)(v0 + 64), v6);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_101097B18, v9 + 8, v7 | 7);
  *(_QWORD *)(v0 + 136) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v8, v3, v6);
  *(_QWORD *)(v10 + v9) = v2;
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 144) = v12;
  v13 = sub_10001A9A8(&qword_1010EE100);
  *v12 = v0;
  v12[1] = sub_1008A3440;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_1000DAC7C, v10, v13);
}

uint64_t sub_1008A3440()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_release();
  return swift_task_switch(sub_1008A34A0, v1, 0);
}

uint64_t sub_1008A34A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[12];
  v2 = v0[8];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[3];
  swift_release();
  v0[19] = v0[2];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_100004048(v1, &qword_1010EE0E0);
  return swift_task_switch(sub_1008A3524, v5, 0);
}

uint64_t sub_1008A3524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = v2 + *(int *)(v0 + 176);
  v5 = v3 + *(int *)(*(_QWORD *)(v0 + 72) + 48);
  sub_10000F9B8(v2, v3, &qword_1010EE0E0);
  sub_10005972C(v4, v5, type metadata accessor for OwnerSharingCircle);
  v6 = (unint64_t *)swift_task_alloc(32);
  v6[2] = v3;
  v7 = sub_10008B4C0((uint64_t (*)(char *))sub_1008A44E8, v6, v1);
  swift_task_dealloc(v6);
  sub_100004048(v3, &qword_1010ECCF8);
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v8)
  {
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7860);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Beacon already requested by the sharee!", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
    v14 = *(_QWORD *)(v0 + 104);

    sub_100004048(v14, &qword_1010ECCF8);
    v15 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 56);
    v18 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v21 = *(int *)(v0 + 176);
    v22 = *(_QWORD *)(v0 + 104);
    v23 = (_QWORD *)swift_task_alloc(dword_10110B664);
    *(_QWORD *)(v0 + 160) = v23;
    *v23 = v0;
    v23[1] = sub_1008A3744;
    return sub_100899D48(v22 + v21, 0, 0, 0);
  }
}

uint64_t sub_1008A3744()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1008A382C;
  else
    v4 = sub_1008A37A8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 24), 0);
}

uint64_t sub_1008A37A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100004048(*(_QWORD *)(v0 + 104), &qword_1010ECCF8);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008A382C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  sub_100004048(v2, &qword_1010ECCF8);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008A38B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  char v38;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a1;
  v44 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v44 - 8);
  v4 = __chkstk_darwin(v44);
  v43 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v42 = (char *)&v40 - v6;
  v7 = (int *)type metadata accessor for OwnerSharingCircle(0);
  __chkstk_darwin(v7);
  v49 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ECCF8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v40 - v14;
  v16 = *(_QWORD *)(a1 + v7[8]);
  v17 = *(int *)(v13 + 48);
  v18 = (char *)&v40 + v17 - v14;
  v19 = a2;
  v48 = a2;
  v20 = a2 + v17;
  sub_10000F9B8(v19, (uint64_t)&v40 - v14, &qword_1010EE0E0);
  sub_10005972C(v20, (uint64_t)v18, type metadata accessor for OwnerSharingCircle);
  v21 = *(_QWORD *)&v18[v7[8]];
  swift_bridgeObjectRetain(v21);
  sub_1000126B0((uint64_t)v18, type metadata accessor for OwnerSharingCircle);
  v45 = sub_100326834(v16, v21);
  v22 = v49;
  swift_bridgeObjectRelease();
  v41 = v15;
  v23 = (uint64_t)v15;
  v24 = v9;
  sub_100004048(v23, &qword_1010EE0E0);
  LODWORD(v18) = *(unsigned __int8 *)(v47 + v7[9]);
  sub_10005972C(v47, v22, type metadata accessor for OwnerSharingCircle);
  v25 = (uint64_t)&v12[*(int *)(v9 + 48)];
  sub_10000F9B8(v48, (uint64_t)v12, &qword_1010EE0E0);
  sub_10005972C(v20, v25, type metadata accessor for OwnerSharingCircle);
  if ((_DWORD)v18 == 2 && (v45 & 1) != 0)
  {
    v26 = v22 + v7[5];
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
    v28 = v42;
    v29 = v44;
    v27(v42, v26, v44);
    v30 = (uint64_t)v41;
    v31 = (uint64_t)&v41[*(int *)(v24 + 48)];
    sub_10000F9B8((uint64_t)v12, (uint64_t)v41, &qword_1010EE0E0);
    sub_10005972C(v25, v31, type metadata accessor for OwnerSharingCircle);
    v32 = v31 + v7[5];
    v33 = (uint64_t)v12;
    v34 = v43;
    v27(v43, v32, v29);
    sub_1000126B0(v31, type metadata accessor for OwnerSharingCircle);
    v35 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v34, v29, v35);
    v37 = *(void (**)(char *, uint64_t))(v46 + 8);
    v37(v34, v29);
    v37(v28, v29);
    sub_100004048(v33, &qword_1010ECCF8);
    sub_1000126B0(v49, type metadata accessor for OwnerSharingCircle);
    v38 = v36 ^ 1;
    sub_100004048(v30, &qword_1010EE0E0);
  }
  else
  {
    sub_100004048((uint64_t)v12, &qword_1010ECCF8);
    sub_1000126B0(v22, type metadata accessor for OwnerSharingCircle);
    v38 = 0;
  }
  return v38 & 1;
}

uint64_t sub_1008A3C24(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[21] = a1;
  v2[22] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[23] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[24] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[25] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v6);
  v2[27] = swift_task_alloc(v6);
  v7 = sub_10001A9A8((uint64_t *)&unk_101105880);
  v2[28] = v7;
  v2[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconNamingRecord(0);
  v2[30] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[31] = v9;
  v2[32] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008A3CE8, v1, 0);
}

uint64_t sub_1008A3CE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 176) + 136);
  *(_QWORD *)(v0 + 264) = v1;
  return swift_task_switch(sub_1008A3D04, v1, 0);
}

uint64_t sub_1008A3D04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[33];
  v2 = v0[27];
  v4 = v0[24];
  v3 = v0[25];
  v5 = v0[23];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[21], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101097AF0, v7 + v3, v6 | 7);
  v0[34] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[35] = v10;
  *v10 = v0;
  v10[1] = sub_1008A3DE0;
  return unsafeBlocking<A>(_:)(v0[29], sub_10007CBEC, v8, v0[28]);
}

uint64_t sub_1008A3DE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_release();
  return swift_task_switch(sub_1008A3E40, v1, 0);
}

uint64_t sub_1008A3E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 232);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 248) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 264);
    sub_100004048(v2, (uint64_t *)&unk_101105880);
    return swift_task_switch(sub_1008A3F44, v3, 0);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 256);
    sub_1000126EC(v2, v5, type metadata accessor for BeaconNamingRecord);
    v6 = (uint64_t *)(v5 + *(int *)(v1 + 32));
    v8 = *v6;
    v7 = v6[1];
    swift_bridgeObjectRetain(v7);
    sub_1000126B0(v5, type metadata accessor for BeaconNamingRecord);
    v9 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 256));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v7);
  }
}

uint64_t sub_1008A3F44()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 288) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_1008A3FBC;
  return unsafeBlocking<A>(_:)(v0 + 160, sub_10007C6FC, *(_QWORD *)(v0 + 264), v3);
}

uint64_t sub_1008A3FBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 288));
  swift_release();
  return swift_task_switch(sub_1008A401C, v1, 0);
}

uint64_t sub_1008A401C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[22];
  v0[37] = v0[20];
  return swift_task_switch(sub_1008A4038, v1, 0);
}

uint64_t sub_1008A4038()
{
  uid_t v0;

  v0 = getuid();
  sub_100A06500(v0);
  return swift_task_switch(sub_1008A407C, 0, 0);
}

uint64_t sub_1008A407C()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1010FCEDC);
  v0[38] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1008A40E8;
  return sub_100478B94((uint64_t)(v0 + 11), v0[21], v0[26]);
}

uint64_t sub_1008A40E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1008A4218;
    v5 = 0;
  }
  else
  {
    v6 = v2[26];
    v7 = v2[23];
    v8 = v2[24];
    v9 = v2[22];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_release();
    v4 = sub_1008A4170;
    v5 = v9;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1008A4170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_100005CF0(v0 + 88, v0 + 16, (uint64_t *)&unk_1010F4830);
  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
    sub_10007CB54((uint64_t *)(v0 + 88));
  }
  else
  {
    v2 = 0;
  }
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1008A4218()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[39];
  v2 = v0[26];
  v3 = v0[23];
  v4 = v0[24];
  v5 = v0[22];
  swift_release();
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch(sub_1008A428C, v5, 0);
}

uint64_t sub_1008A428C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

uint64_t sub_1008A42EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_unownedRelease(*(_QWORD *)(v0 + 128));
  swift_release();
  sub_100004048(v0 + 144, &qword_10110B900);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 184));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1008A4358()
{
  uint64_t v0;

  sub_1008A42EC();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ItemSharingNotificationsService()
{
  return objc_opt_self(_TtC12searchpartyd31ItemSharingNotificationsService);
}

uint64_t sub_1008A4390(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_10110B838, a2, (uint64_t (*)(uint64_t))type metadata accessor for ItemSharingNotificationsService, (uint64_t)&unk_100E5236C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1008A43D0()
{
  unint64_t result;

  result = qword_10110B848;
  if (!qword_10110B848)
  {
    result = swift_getWitnessTable(asc_100E59844, &type metadata for SharingCircleType);
    atomic_store(result, (unint64_t *)&qword_10110B848);
  }
  return result;
}

unint64_t sub_1008A4414()
{
  unint64_t result;

  result = qword_10110B850;
  if (!qword_10110B850)
  {
    result = swift_getWitnessTable(asc_100E5987C, &type metadata for SharingCircleType);
    atomic_store(result, (unint64_t *)&qword_10110B850);
  }
  return result;
}

uint64_t sub_1008A4458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1008A44E8(uint64_t a1)
{
  uint64_t v1;

  return sub_1008A38B4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

unint64_t sub_1008A450C()
{
  unint64_t result;

  result = qword_10110B858;
  if (!qword_10110B858)
  {
    result = swift_getWitnessTable(byte_100E52428, &type metadata for ItemSharingNotificationError);
    atomic_store(result, (unint64_t *)&qword_10110B858);
  }
  return result;
}

uint64_t sub_1008A4550(uint64_t (*a1)(unint64_t, __n128), uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v35;
  uint64_t *v36;
  uint64_t (*v37)(uint64_t);
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (*v44)(unint64_t, __n128);

  v7 = v4;
  v44 = a1;
  v42 = a3;
  v8 = sub_10001A9A8(a3);
  v9 = __chkstk_darwin(v8);
  v40 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v39 = (uint64_t)&v36 - v12;
  __chkstk_darwin(v11);
  v41 = (uint64_t)&v36 - v14;
  v15 = *v4;
  v16 = *(_QWORD *)(*v4 + 16);
  if (!v16)
    return 0;
  v37 = a4;
  v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = *(_QWORD *)(v13 + 72);
  v19 = swift_bridgeObjectRetain(v15);
  v20 = 0;
  v38 = v17;
  while (1)
  {
    v21 = v44(v15 + v17, v19);
    if (v5)
    {
      swift_bridgeObjectRelease();
      return v20;
    }
    if ((v21 & 1) != 0)
      break;
    ++v20;
    v17 += v18;
    if (v16 == v20)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)(v15 + 16);
    }
  }
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v20, 1))
  {
    v23 = *(_QWORD *)(v15 + 16);
    if (v20 + 1 == v23)
      return v20;
    v24 = v18 + v17;
    v25 = v20 + 1;
    v36 = v4;
    while (v25 < v23)
    {
      v26 = v18;
      v27 = v7;
      v43 = v24;
      v28 = v41;
      v29 = v42;
      sub_10000F9B8(v15 + v24, v41, v42);
      v30 = ((uint64_t (*)(uint64_t))v44)(v28);
      result = sub_100004048(v28, v29);
      if ((v30 & 1) != 0)
      {
        v7 = v27;
        v18 = v26;
      }
      else
      {
        v7 = v27;
        v18 = v26;
        if (v25 != v20)
        {
          if ((v20 & 0x8000000000000000) != 0)
            goto LABEL_32;
          v31 = *v27;
          v32 = *(_QWORD *)(*v27 + 16);
          if (v20 >= v32)
            goto LABEL_33;
          v33 = v42;
          result = sub_10000F9B8(v31 + v38 + v20 * v26, v39, v42);
          if (v25 >= v32)
            goto LABEL_34;
          sub_10000F9B8(v31 + v43, v40, v33);
          result = swift_isUniquelyReferenced_nonNull_native(v31);
          v7 = v36;
          *v36 = v31;
          if ((result & 1) == 0)
          {
            result = v37(v31);
            v31 = result;
            *v7 = result;
          }
          if (v20 >= *(_QWORD *)(v31 + 16))
            goto LABEL_35;
          result = sub_100004084(v40, v31 + v38 + v20 * v26, v33);
          if (v25 >= *(_QWORD *)(*v7 + 16))
            goto LABEL_36;
          result = sub_100004084(v39, *v7 + v43, v33);
        }
        if (__OFADD__(v20++, 1))
          goto LABEL_31;
      }
      v35 = v25 + 1;
      if (__OFADD__(v25, 1))
        goto LABEL_30;
      v15 = *v7;
      v23 = *(_QWORD *)(*v7 + 16);
      ++v25;
      v24 = v43 + v18;
      if (v35 == v23)
        return v20;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1008A4858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110B86C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_10089F9B0(a1, v1);
}

uint64_t sub_1008A48A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110B88C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_10089FCAC(a1, v1);
}

uint64_t sub_1008A48F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110B8AC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_10089FFA8(a1, v1);
}

uint64_t sub_1008A4958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000D7070(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1008A4970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = v4 + *(int *)(type metadata accessor for OwnerPeerTrust(0) + 20);
  return static UUID.== infix(_:_:)(a2, v5);
}

_QWORD *sub_1008A49A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v6 = v5;
  v12 = type metadata accessor for UUID(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v6);
  v6[14] = 0xD00000000000001FLL;
  v6[15] = 0x8000000100E52300;
  v15 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v15);
  v6[25] = WorkItemQueue.__allocating_init(identifier:)(v14);
  v6[26] = _swiftEmptyArrayStorage;
  v6[27] = _swiftEmptyArrayStorage;
  v6[28] = _swiftEmptyArrayStorage;
  v6[16] = a1;
  v6[17] = a2;
  sub_100005CF0(a3, (uint64_t)(v6 + 18), &qword_10110B900);
  v6[23] = a4;
  v6[24] = a5;
  swift_unownedRetain(a1);
  return v6;
}

uint64_t sub_1008A4AA0()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1008A4ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10110B8CC);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004C28;
  return sub_100899B7C(a1, a2, v2);
}

uint64_t sub_1008A4B44(uint64_t a1)
{
  uint64_t v1;

  return sub_100898698(a1, *(_QWORD *)(v1 + 16), &qword_1010ECCF8, &qword_1010EE0E0, type metadata accessor for OwnerSharingCircle, (uint64_t (*)(char *, char *, char *, uint64_t))sub_100898210) & 1;
}

uint64_t sub_1008A4B80(uint64_t a1)
{
  uint64_t v1;

  return sub_100898698(a1, *(_QWORD *)(v1 + 16), &qword_1010ECCF0, (uint64_t *)&unk_1010EE180, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(char *, char *, char *, uint64_t))sub_100897F0C) & 1;
}

uint64_t sub_1008A4BBC(uint64_t a1)
{
  uint64_t v1;

  return sub_100898698(a1, *(_QWORD *)(v1 + 16), &qword_1010ECD00, (uint64_t *)&unk_101111440, type metadata accessor for MemberSharingCircle, (uint64_t (*)(char *, char *, char *, uint64_t))sub_100897C08) & 1;
}

uint64_t storeEnumTagSinglePayload for ItemSharingNotificationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1008A4C38 + 4 * byte_100E522C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1008A4C58 + 4 * byte_100E522C5[v4]))();
}

_BYTE *sub_1008A4C38(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1008A4C58(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1008A4C60(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1008A4C68(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1008A4C70(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1008A4C78(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ItemSharingNotificationError()
{
  return &type metadata for ItemSharingNotificationError;
}

unint64_t sub_1008A4C98()
{
  unint64_t result;

  result = qword_10110B908;
  if (!qword_10110B908)
  {
    result = swift_getWitnessTable(byte_100E52400, &type metadata for ItemSharingNotificationError);
    atomic_store(result, (unint64_t *)&qword_10110B908);
  }
  return result;
}

uint64_t MessagingDestination.destination.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a3);
  return a2;
}

searchpartyd::MessagingDestination __swiftcall MessagingDestination.init(email:)(Swift::String email)
{
  void *object;
  NSString v2;
  void *v3;
  searchpartyd::MessagingDestination::DestinationType v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  searchpartyd::MessagingDestination result;

  object = email._object;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v3 = (void *)IDSCopyIDForEmailAddress(v2);

  if (v3)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v9 = v8;

    v4 = searchpartyd_MessagingDestination_DestinationType_email;
    v5 = v7;
    v6 = v9;
  }
  else
  {
    __break(1u);
  }
  result.destination._object = v6;
  result.destination._countAndFlagsBits = v5;
  result.type = v4;
  return result;
}

uint64_t static MessagingDestination.== infix(_:_:)(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4)
    return 0;
  if (a2 == a5 && a3 == a6)
    return 1;
  return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5, a6, 0);
}

uint64_t sub_1008A4DC4(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  Swift::String v14;
  Swift::String v15;

  if (a1 != 2)
  {
    v12 = a1;
    swift_bridgeObjectRetain(a3);
    return v12;
  }
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v5, "_stripPotentialTokenURIWithToken:", 0);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v7, v9);
    if (v11)
      return v10;
  }
  else
  {
    __break(1u);
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a3);
  v14._countAndFlagsBits = a2;
  v14._object = a3;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD000000000000013;
  v15._object = (void *)0x8000000100EE9980;
  String.append(_:)(v15);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x8000000100ED1C50, "searchpartyd/MessagingDestination.swift", 39, 2, 71, 0);
  __break(1u);
  return result;
}

uint64_t sub_1008A4F38(unsigned __int8 a1, uint64_t a2, void *a3)
{
  uint64_t result;
  void *v4;
  NSString v5;
  uint64_t v6;
  void *v7;
  NSString v8;
  void *v9;
  int IsItemBlocked;

  if (a1 - 2 < 3)
    return 2;
  if (!a1)
  {
    v4 = (void *)sub_100ACD7B4(0, a2, a3);
    v5 = objc_msgSend(v4, "destination");

    if (!v5)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    v6 = CMFItemCreateWithEmailAddress(v5);

    if (v6)
      goto LABEL_12;
    __break(1u);
  }
  v7 = (void *)sub_100ACD7B4(1, a2, a3);
  v8 = objc_msgSend(v7, "destination");

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v9 = (void *)CFPhoneNumberCreate(kCFAllocatorDefault, v8, 0);

  result = CMFItemCreateWithPhoneNumber(v9);
  if (result)
  {
    v6 = result;

LABEL_12:
    IsItemBlocked = CMFBlockListIsItemBlocked(v6);
    swift_unknownObjectRelease(v6);
    return IsItemBlocked != 0;
  }
  __break(1u);
  return result;
}

uint64_t MessagingDestination.DestinationType.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t sub_1008A5080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1008A5ED8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1008A50DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1008A5ED8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

searchpartyd::MessagingDestination __swiftcall MessagingDestination.init(phoneNumber:)(Swift::String phoneNumber)
{
  void *object;
  NSString v2;
  void *v3;
  searchpartyd::MessagingDestination::DestinationType v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  searchpartyd::MessagingDestination result;

  object = phoneNumber._object;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v3 = (void *)IDSCopyIDForPhoneNumber(v2);

  if (v3)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v9 = v8;

    v4 = searchpartyd_MessagingDestination_DestinationType_phoneNumber;
    v5 = v7;
    v6 = v9;
  }
  else
  {
    __break(1u);
  }
  result.destination._object = v6;
  result.destination._countAndFlagsBits = v5;
  result.type = v4;
  return result;
}

uint64_t sub_1008A5194()
{
  _BYTE *v0;

  if (*v0)
    return 0x74616E6974736564;
  else
    return 1701869940;
}

uint64_t sub_1008A51D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008A58E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008A51F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008A5860();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008A521C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008A5860();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MessagingDestination.encode(to:)(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_10001A9A8(&qword_10110B910);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_1008A5860();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MessagingDestination.CodingKeys, &type metadata for MessagingDestination.CodingKeys, v14, v12, v13);
  v21 = a2;
  v20 = 0;
  v15 = sub_1008A58A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v8, &type metadata for MessagingDestination.DestinationType, v15);
  if (!v4)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, v18, &v19, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t MessagingDestination.init(from:)(_QWORD *a1)
{
  return sub_1008A59E0(a1);
}

uint64_t sub_1008A53A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1008A59E0(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1008A53CC(_QWORD *a1)
{
  uint64_t v1;

  return MessagingDestination.encode(to:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1008A53E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t MessagingDestination.hash(into:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain(a4);
  String.hash(into:)(a1, a3, a4);
  return swift_bridgeObjectRelease(a4);
}

Swift::Int MessagingDestination.hashValue.getter(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v7, a2, a3);
  swift_bridgeObjectRelease(a3);
  return Hasher._finalize()();
}

Swift::Int sub_1008A54D8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1008A5548(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)v1 + 1);
  v4 = *((_QWORD *)v1 + 2);
  Hasher._combine(_:)(*v1);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1008A5598()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1008A5604(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*a1 != *a2)
    return 0;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  if (v4 == v6 && v5 == v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0);
}

void _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;
  NSString v4;
  void *v5;
  _QWORD v6[4];

  v6[2] = a1;
  v6[3] = a2;
  v6[0] = 64;
  v6[1] = 0xE100000000000000;
  v2 = sub_1000330C8();
  v3 = StringProtocol.contains<A>(_:)(v6, &type metadata for String, &type metadata for String, v2, v2);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    v5 = (void *)IDSCopyIDForEmailAddress(v4);

    if (v5)
      goto LABEL_5;
    __break(1u);
  }
  else
  {
    v5 = (void *)IDSCopyIDForPhoneNumber(v4);

    if (v5)
    {
LABEL_5:
      static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

      return;
    }
  }
  __break(1u);
}

uint64_t _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  Swift::String v3;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  v3._countAndFlagsBits = 0x3A6F746C69616DLL;
  v3._object = (void *)0xE700000000000000;
  if (String.hasPrefix(_:)(v3))
    return 0;
  v5._countAndFlagsBits = 980182388;
  v5._object = (void *)0xE400000000000000;
  if (String.hasPrefix(_:)(v5))
    return 1;
  v6._countAndFlagsBits = 0x3A6E656B6F74;
  v6._object = (void *)0xE600000000000000;
  if (String.hasPrefix(_:)(v6))
    return 2;
  v7._countAndFlagsBits = 0x6B6F742D666C6573;
  v7._object = (void *)0xEB000000003A6E65;
  if (String.hasPrefix(_:)(v7))
    return 2;
  v8._countAndFlagsBits = 0x3A656369766564;
  v8._object = (void *)0xE700000000000000;
  if (String.hasPrefix(_:)(v8))
    return 3;
  v9._countAndFlagsBits = 0x3A6E6F6973736573;
  v9._object = (void *)0xE800000000000000;
  if (String.hasPrefix(_:)(v9))
    return 4;
  swift_bridgeObjectRelease(a2);
  return 0;
}

unint64_t sub_1008A5860()
{
  unint64_t result;

  result = qword_10110B918;
  if (!qword_10110B918)
  {
    result = swift_getWitnessTable(byte_100E52748, &type metadata for MessagingDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110B918);
  }
  return result;
}

unint64_t sub_1008A58A4()
{
  unint64_t result;

  result = qword_10110B920;
  if (!qword_10110B920)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessagingDestination.DestinationType, &type metadata for MessagingDestination.DestinationType);
    atomic_store(result, (unint64_t *)&qword_10110B920);
  }
  return result;
}

uint64_t sub_1008A58E8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease(0xEB000000006E6F69);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74616E6974736564, 0xEB000000006E6F69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1008A59E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v3 = sub_10001A9A8(&qword_10110B950);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1008A5860();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MessagingDestination.CodingKeys, &type metadata for MessagingDestination.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    v14 = 0;
    v10 = sub_1008A5F1C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, &type metadata for MessagingDestination.DestinationType, &v14, v3, &type metadata for MessagingDestination.DestinationType, v10);
    v7 = v15;
    v13 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

unint64_t sub_1008A5B50()
{
  unint64_t result;

  result = qword_10110B928;
  if (!qword_10110B928)
  {
    result = swift_getWitnessTable("E[$", &type metadata for MessagingDestination.DestinationType);
    atomic_store(result, (unint64_t *)&qword_10110B928);
  }
  return result;
}

uint64_t destroy for MessagingDestination(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s12searchpartyd20MessagingDestinationVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for MessagingDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for MessagingDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for MessagingDestination()
{
  return &type metadata for MessagingDestination;
}

uint64_t storeEnumTagSinglePayload for MessagingDestination.DestinationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1008A5CB4 + 4 * byte_100E52475[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1008A5CE8 + 4 * byte_100E52470[v4]))();
}

uint64_t sub_1008A5CE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008A5CF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008A5CF8);
  return result;
}

uint64_t sub_1008A5D04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008A5D0CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1008A5D10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008A5D18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessagingDestination.DestinationType()
{
  return &type metadata for MessagingDestination.DestinationType;
}

uint64_t storeEnumTagSinglePayload for MessagingDestination.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1008A5D80 + 4 * byte_100E5247F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1008A5DB4 + 4 * byte_100E5247A[v4]))();
}

uint64_t sub_1008A5DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008A5DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008A5DC4);
  return result;
}

uint64_t sub_1008A5DD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008A5DD8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1008A5DDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008A5DE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessagingDestination.CodingKeys()
{
  return &type metadata for MessagingDestination.CodingKeys;
}

unint64_t sub_1008A5E04()
{
  unint64_t result;

  result = qword_10110B930;
  if (!qword_10110B930)
  {
    result = swift_getWitnessTable(byte_100E52720, &type metadata for MessagingDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110B930);
  }
  return result;
}

unint64_t sub_1008A5E4C()
{
  unint64_t result;

  result = qword_10110B938;
  if (!qword_10110B938)
  {
    result = swift_getWitnessTable(byte_100E52690, &type metadata for MessagingDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110B938);
  }
  return result;
}

unint64_t sub_1008A5E94()
{
  unint64_t result;

  result = qword_10110B940;
  if (!qword_10110B940)
  {
    result = swift_getWitnessTable(byte_100E526B8, &type metadata for MessagingDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110B940);
  }
  return result;
}

unint64_t sub_1008A5ED8()
{
  unint64_t result;

  result = qword_10110B948;
  if (!qword_10110B948)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessagingDestination.DestinationType, &type metadata for MessagingDestination.DestinationType);
    atomic_store(result, (unint64_t *)&qword_10110B948);
  }
  return result;
}

unint64_t sub_1008A5F1C()
{
  unint64_t result;

  result = qword_10110B958;
  if (!qword_10110B958)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessagingDestination.DestinationType, &type metadata for MessagingDestination.DestinationType);
    atomic_store(result, (unint64_t *)&qword_10110B958);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSendPairingDataCommandPayloadv1()
{
  return &type metadata for AirPodsSendPairingDataCommandPayloadv1;
}

double sub_1008A5F70@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  sub_1008A61A8(a1, (uint64_t)v10);
  if (!v2)
  {
    v5 = v18;
    *(_OWORD *)(a2 + 128) = v17;
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 160) = v19;
    *(_QWORD *)(a2 + 176) = v20;
    v6 = v14;
    *(_OWORD *)(a2 + 64) = v13;
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v16;
    *(_OWORD *)(a2 + 96) = v15;
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = *(double *)&v11;
    v9 = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 48) = v9;
  }
  return result;
}

unint64_t sub_1008A5FEC(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1008A6018();
  result = sub_100785730();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008A6018()
{
  unint64_t result;

  result = qword_10110B960;
  if (!qword_10110B960)
  {
    result = swift_getWitnessTable(byte_100E527F0, &type metadata for AirPodsSendPairingDataCommandPayloadv1);
    atomic_store(result, (unint64_t *)&qword_10110B960);
  }
  return result;
}

void sub_1008A605C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X27 }
}

void sub_1008A60AC(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 32)
    __asm { BR              X27 }
  __break(1u);
  JUMPOUT(0x1008A6184);
}

uint64_t sub_1008A61A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t result;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v95, v5, v6);
  v7 = v96;
  v8 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v7, v8);
  if (v2)
  {
LABEL_12:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v95);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  v11 = v9;
  v12 = v10;
  v13 = v96;
  v14 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v15 = dispatch thunk of BinaryDecodingContaining.decode(length:)(20, v13, v14);
  v110 = v16;
  v18 = v96;
  v17 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v91 = dispatch thunk of BinaryDecodingContaining.decode(length:)(8, v18, v17);
  v92 = v19;
  v20 = v96;
  v21 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v89 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v20, v21);
  v90 = v22;
  v23 = v96;
  v24 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v87 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v23, v24);
  v88 = v25;
  v26 = v96;
  v27 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v28 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v26, v27);
  v30 = v29;
  v93 = v87;
  v94 = v88;
  v82 = sub_100035530();
  v31 = DataProtocol.intValue.getter(&type metadata for Data, v82);
  v32 = v31 - 1;
  if (__OFSUB__(v31, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  v33 = 20 * v32;
  if ((unsigned __int128)(v32 * (__int128)20) >> 64 != (20 * v32) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v33 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v83 = Data.subdata(in:)(0, v33, v28, v30);
  v84 = v34;
  v85 = v28;
  v86 = v30;
  v35 = v96;
  v36 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v80 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v35, v36);
  v81 = v37;
  v38 = v96;
  v39 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v78 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2048, v38, v39);
  v79 = v40;
  v41 = v96;
  v42 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v76 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v41, v42);
  v77 = v43;
  v44 = v96;
  v45 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v74 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v44, v45);
  v75 = v46;
  v47 = v96;
  v48 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v72 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v47, v48);
  v73 = v49;
  v93 = v72;
  v94 = v49;
  v82 = DataProtocol.intValue.getter(&type metadata for Data, v82);
  v50 = v96;
  v51 = v97;
  sub_10009F5D0((uint64_t)v95, v96);
  v52 = dispatch thunk of BinaryDecodingContaining.decode(length:)(10, v50, v51);
  v71 = v53;
  v28 = v52;
  if (v82 > 3)
  {
    if (qword_1010EA318 == -1)
    {
LABEL_9:
      v62 = type metadata accessor for Logger(0);
      v63 = sub_10001A9E8(v62, (uint64_t)qword_1011B7DF8);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.error.getter(v64);
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v66 = 134217984;
        v93 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v66 + 4, v66 + 12);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Invalid beaconPartId %ld!", v66, 0xCu);
        swift_slowDealloc(v66, -1, -1);
      }

      v67 = type metadata accessor for BinaryDecodingError(0);
      v68 = sub_100345C00();
      swift_allocError(v67, v68, 0, 0);
      v70 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v67 - 8) + 104))(v69, enum case for BinaryDecodingError.decodingError(_:), v67);
      swift_willThrow(v70);
      sub_10001BC14(v28, v71);
      sub_10001BC14(v72, v73);
      sub_10001BC14(v74, v75);
      sub_10001BC14(v76, v77);
      sub_10001BC14(v78, v79);
      sub_10001BC14(v80, v81);
      sub_10001BC14(v83, v84);
      sub_10001BC14(v85, v86);
      sub_10001BC14(v87, v88);
      sub_10001BC14(v89, v90);
      sub_10001BC14(v91, v92);
      sub_10001BC14(v15, v110);
      sub_10001BC14(v11, v12);
      goto LABEL_12;
    }
LABEL_16:
    swift_once(&qword_1010EA318, sub_100B5E330);
    goto LABEL_9;
  }
  sub_10001BC14(v72, v73);
  sub_10001BC14(v85, v86);
  if (v82 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    sub_1008A605C(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v95);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v55 = v107;
    v56 = v108;
    v57 = v105;
    *(_OWORD *)(a2 + 128) = v106;
    *(_OWORD *)(a2 + 144) = v55;
    *(_OWORD *)(a2 + 160) = v56;
    v58 = v103;
    v59 = v104;
    *(_OWORD *)(a2 + 64) = v102;
    *(_OWORD *)(a2 + 80) = v58;
    *(_QWORD *)(a2 + 176) = v109;
    *(_OWORD *)(a2 + 96) = v59;
    *(_OWORD *)(a2 + 112) = v57;
    v60 = v99;
    *(_OWORD *)a2 = v98;
    *(_OWORD *)(a2 + 16) = v60;
    v61 = v101;
    *(_OWORD *)(a2 + 32) = v100;
    *(_OWORD *)(a2 + 48) = v61;
  }
  return result;
}

uint64_t sub_1008A6808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  int64_t v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v6 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v40 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v46 = sub_10001A9A8(&qword_1010EBFF8);
  v7 = __chkstk_darwin(v46);
  v37 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v39 = (_QWORD **)((char *)&v34 - v10);
  v11 = __chkstk_darwin(v9);
  v13 = (_QWORD **)((char *)&v34 - v12);
  __chkstk_darwin(v11);
  v38 = (char *)&v34 - v14;
  v15 = *(_QWORD *)(a2 + 64);
  v34 = (_QWORD *)(a2 + 64);
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v35 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v41 = a2;
  swift_bridgeObjectRetain(a2);
  v36 = v13;
  v49 = a1;
  if (v18)
  {
    v45 = v3;
    v19 = __clz(__rbit64(v18));
    v42 = (v18 - 1) & v18;
    v43 = 0;
    goto LABEL_17;
  }
  v20 = 1;
  if (v35 > 1)
  {
    v21 = v34[1];
    if (v21)
    {
LABEL_16:
      v45 = v3;
      v42 = (v21 - 1) & v21;
      v43 = v20;
      v19 = __clz(__rbit64(v21)) + (v20 << 6);
LABEL_17:
      v23 = *(_QWORD *)(v41 + 56);
      v24 = (uint64_t *)(*(_QWORD *)(v41 + 48) + 16 * v19);
      v25 = *v24;
      v26 = v24[1];
      v44 = *(_QWORD *)(v40 + 72);
      v27 = v46;
      v28 = v38;
      sub_100035420(v23 + v44 * v19, (uint64_t)&v38[*(int *)(v46 + 48)]);
      *v28 = v25;
      v28[1] = v26;
      sub_100005CF0((uint64_t)v28, (uint64_t)v13, &qword_1010EBFF8);
      v29 = *(int *)(v27 + 48);
      v30 = v39;
      v31 = *v13;
      v32 = v13[1];
      *v39 = *v13;
      v30[1] = v32;
      sub_100035420((uint64_t)v13 + v29, (uint64_t)v30 + v29);
      v47 = v31;
      v48 = v32;
      __asm { BR              X9 }
    }
    v22 = 2;
    if (v35 > 2)
    {
      v21 = v34[2];
      if (v21)
        goto LABEL_15;
      v22 = 3;
      if (v35 <= 3)
        goto LABEL_22;
      v21 = v34[3];
      if (v21)
        goto LABEL_15;
      v22 = 4;
      if (v35 <= 4)
        goto LABEL_22;
      v21 = v34[4];
      if (v21)
      {
LABEL_15:
        v20 = v22;
        goto LABEL_16;
      }
      v22 = 5;
      if (v35 > 5)
      {
        v21 = v34[5];
        if (v21)
          goto LABEL_15;
        while (1)
        {
          v20 = v22 + 1;
          if (__OFADD__(v22, 1))
          {
            __break(1u);
            JUMPOUT(0x1008A6E28);
          }
          if (v20 >= v35)
            break;
          v21 = v34[v20];
          ++v22;
          if (v21)
            goto LABEL_16;
        }
      }
    }
  }
LABEL_22:
  swift_release();
  return a1;
}

uint64_t sub_1008A6E48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1008A6E84 + 4 * byte_100E52840[a1]))(0x4E6E6F6973736573, 0xEC00000065636E6FLL);
}

uint64_t sub_1008A6E84()
{
  return 12645;
}

unint64_t sub_1008A6E90()
{
  return 0xD000000000000013;
}

uint64_t sub_1008A70DC(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  __int128 v42;
  _BYTE v43[16];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110B978);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1008A9710();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsLEPairingLockCheckRequestContent.CodingKeys, &type metadata for AirPodsLEPairingLockCheckRequestContent.CodingKeys, v11, v9, v10);
  v42 = *v3;
  v41 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v42 = v3[1];
    v41 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    sub_100005CF0((uint64_t)(v3 + 2), (uint64_t)v43, &qword_1011194A0);
    sub_100005CF0((uint64_t)v43, (uint64_t)&v42, &qword_1011194A0);
    v41 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v13 = *((_QWORD *)v3 + 6);
    LOBYTE(v42) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v42, v5);
    v42 = *(__int128 *)((char *)v3 + 56);
    v41 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = *(__int128 *)((char *)v3 + 72);
    v41 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = *(__int128 *)((char *)v3 + 88);
    v41 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v14 = *((_QWORD *)v3 + 13);
    LOBYTE(v42) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v42, v5);
    v15 = *((_QWORD *)v3 + 14);
    v16 = *((unsigned __int8 *)v3 + 120);
    LOBYTE(v42) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v42, v5);
    *(_QWORD *)&v42 = *((_QWORD *)v3 + 16);
    v41 = 9;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v18 = sub_1001B1324();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, v17, v18);
    *(_QWORD *)&v42 = *((_QWORD *)v3 + 17);
    v41 = 10;
    v19 = sub_10001A9A8(&qword_101100BE0);
    v20 = sub_100600CF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, v19, v20);
    v21 = *((_QWORD *)v3 + 18);
    v22 = *((unsigned __int8 *)v3 + 152);
    LOBYTE(v42) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v42, v5);
    v42 = v3[10];
    v41 = 12;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[11];
    v41 = 13;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[12];
    v41 = 14;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[13];
    v41 = 15;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v23 = *((_QWORD *)v3 + 28);
    v24 = *((_QWORD *)v3 + 29);
    LOBYTE(v42) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v42, v5);
    v25 = *((_QWORD *)v3 + 30);
    v26 = *((_QWORD *)v3 + 31);
    LOBYTE(v42) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v42, v5);
    v27 = *((_QWORD *)v3 + 32);
    v28 = *((_QWORD *)v3 + 33);
    LOBYTE(v42) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v42, v5);
    v29 = *((_QWORD *)v3 + 34);
    v30 = *((_QWORD *)v3 + 35);
    LOBYTE(v42) = 19;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v42, v5);
    v31 = *((_QWORD *)v3 + 36);
    v32 = *((_QWORD *)v3 + 37);
    LOBYTE(v42) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v42, v5);
    v33 = *((_QWORD *)v3 + 38);
    v34 = *((_QWORD *)v3 + 39);
    LOBYTE(v42) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v42, v5);
    v35 = *((_QWORD *)v3 + 40);
    v36 = *((_QWORD *)v3 + 41);
    LOBYTE(v42) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v42, v5);
    v37 = *((_QWORD *)v3 + 42);
    v38 = *((_QWORD *)v3 + 43);
    LOBYTE(v42) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v38, &v42, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1008A76A0()
{
  unsigned __int8 *v0;

  return sub_1008A6E48(*v0);
}

uint64_t sub_1008A76A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008A98F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008A76CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008A9710();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008A76F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008A9710();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008A771C(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[352];

  memcpy(v4, v1, sizeof(v4));
  return sub_1008A70DC(a1);
}

uint64_t *sub_1008A776C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *result;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v56;
  unint64_t v59;
  uint64_t v60;

  v8 = *(_QWORD *)(a1 + 256);
  v9 = *(_QWORD *)(a1 + 264);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 128);
  v59 = *(_QWORD *)(a1 + 144);
  v60 = *(_QWORD *)(a1 + 136);
  v50 = *(_QWORD *)(a1 + 248);
  v51 = *(_QWORD *)(a1 + 240);
  sub_10001BBBC(v51, v50);
  v48 = v9;
  v49 = v8;
  sub_10001BBBC(v8, v9);
  v46 = v11;
  v47 = v10;
  sub_10001BD08(v10, v11);
  v53 = v12;
  v45 = v13;
  sub_10001BBBC(v12, v13);
  v44 = v14;
  v52 = v15;
  sub_10001BBBC(v14, v15);
  sub_10001BBBC(v60, v59);
  v16 = sub_100035530();
  v43 = DataProtocol.intValue.getter(&type metadata for Data, v16);
  v17 = *(_QWORD *)(a1 + 176);
  v40 = *(_QWORD *)(a1 + 168);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v17);
  v18 = sub_1006BABB8((uint64_t)_swiftEmptyArrayStorage);
  v41 = sub_1008A6808(v18, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 8);
  v56 = *(_QWORD *)a1;
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 64);
  v38 = *(_QWORD *)(a1 + 56);
  v39 = *(_QWORD *)(a1 + 88);
  v24 = *(_QWORD *)(a1 + 80);
  v36 = *(_QWORD *)(a1 + 192);
  v37 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 296);
  v42 = *(_QWORD *)(a1 + 288);
  v26 = *(_QWORD *)(a1 + 312);
  v34 = *(_QWORD *)(a1 + 304);
  v35 = *(_QWORD *)(a1 + 200);
  sub_10001BBBC(v36, v35);
  sub_10001BBBC(v20, v19);
  sub_10001BBBC(v56, v21);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  if (v26 >> 60 != 15)
  {
    sub_10001BBBC(a2, a3);
    v28 = sub_1001EDBAC(v34, v26);
    v30 = v29;
    Data.hexString.getter(v28, v29);
    sub_10001BC14(v28, v30);
    __asm { BR              X11 }
  }
  result = sub_100705188((uint64_t *)a1);
  *(_QWORD *)a6 = v51;
  *(_QWORD *)(a6 + 8) = v50;
  *(_QWORD *)(a6 + 16) = v49;
  *(_QWORD *)(a6 + 24) = v48;
  *(_QWORD *)(a6 + 32) = v47;
  *(_QWORD *)(a6 + 40) = v46;
  *(_QWORD *)(a6 + 64) = v45;
  *(_QWORD *)(a6 + 72) = v44;
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 56) = v53;
  v31 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a6 + 80) = v52;
  *(_QWORD *)(a6 + 88) = v60;
  v33 = *(_QWORD *)(a1 + 184);
  v32 = *(_BYTE *)(a1 + 160);
  *(_QWORD *)(a6 + 96) = v59;
  *(_QWORD *)(a6 + 104) = v43;
  *(_QWORD *)(a6 + 112) = v31;
  *(_BYTE *)(a6 + 120) = v32;
  *(_QWORD *)(a6 + 128) = v40;
  *(_QWORD *)(a6 + 136) = v41;
  *(_QWORD *)(a6 + 144) = v33;
  *(_BYTE *)(a6 + 152) = 0;
  *(_QWORD *)(a6 + 160) = v36;
  *(_QWORD *)(a6 + 168) = v35;
  *(_QWORD *)(a6 + 176) = a2;
  *(_QWORD *)(a6 + 184) = a3;
  *(_QWORD *)(a6 + 192) = v20;
  *(_QWORD *)(a6 + 200) = v19;
  *(_QWORD *)(a6 + 208) = v56;
  *(_QWORD *)(a6 + 216) = v21;
  *(_QWORD *)(a6 + 224) = v39;
  *(_QWORD *)(a6 + 232) = v22;
  *(_QWORD *)(a6 + 240) = v38;
  *(_QWORD *)(a6 + 248) = v23;
  *(_QWORD *)(a6 + 256) = v37;
  *(_QWORD *)(a6 + 264) = v24;
  *(_QWORD *)(a6 + 272) = 0x302E302E31;
  *(_QWORD *)(a6 + 280) = 0xE500000000000000;
  *(_QWORD *)(a6 + 288) = v42;
  *(_QWORD *)(a6 + 296) = v25;
  *(_QWORD *)(a6 + 304) = 0;
  *(_QWORD *)(a6 + 312) = 0;
  *(_QWORD *)(a6 + 320) = 0;
  *(_QWORD *)(a6 + 328) = 0;
  *(_QWORD *)(a6 + 336) = a4;
  *(_QWORD *)(a6 + 344) = a5;
  return result;
}

uint64_t sub_1008A7B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[190] = a6;
  v6[189] = a5;
  v6[188] = a4;
  v6[187] = a3;
  v6[186] = a2;
  v6[185] = a1;
  v7 = type metadata accessor for HashAlgorithm(0);
  v6[191] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[192] = v8;
  v6[193] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  v6[194] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[195] = v10;
  v6[196] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v6[197] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[198] = v12;
  v6[199] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008A7C10, 0, 0);
}

void sub_1008A7C10()
{
  _QWORD *v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  NSString v40;
  unsigned int v41;
  const void *v42;
  void *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (__cdecl *v61)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "serverFriendlyDescription");

  if (!v5)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v6 = v0[199];
  v7 = v0[198];
  v8 = v0[197];
  v58 = v0[196];
  v59 = v0[195];
  v60 = v0[194];
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v11 = v10;

  v12 = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(v9, v11, 0xD000000000000011, 0x8000000100ECA2C0, v12);
  v13 = v1;
  v14 = swift_bridgeObjectRelease();
  v15 = Date.init()(v14);
  v16 = Date.epoch.getter(v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[182] = v16;
  v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v19 = v18;
  v20 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_100109D28(v17, v19, 0xD000000000000015, 0x8000000100ECA2E0, v20);
  swift_bridgeObjectRelease();
  v0[181] = 1;
  v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v23 = v22;
  v24 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_100109D28(v21, v23, 0xD000000000000013, 0x8000000100ECA300, v24);
  v25 = v13;
  swift_bridgeObjectRelease();
  v26 = sub_100AC2EB8();
  v28 = v27;
  v29 = swift_isUniquelyReferenced_nonNull_native(v25);
  sub_100109D28((uint64_t)v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  v30 = swift_bridgeObjectRelease();
  v31 = static Locale.current.getter(v30);
  v32 = Locale.acceptLanguageCode.getter(v31);
  v34 = v33;
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
  v35 = swift_isUniquelyReferenced_nonNull_native(v25);
  sub_100109D28(v32, v34, 0x4C2D747065636341, 0xEF65676175676E61, v35);
  v36 = v25;
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  if (v39)
  {
    v40 = String._bridgeToObjectiveC()();
    v41 = objc_msgSend(v37, "BOOLForKey:", v40);

    v43 = v0 + 90;
    v42 = v0 + 2;
    if (v41)
    {
      v44 = swift_isUniquelyReferenced_nonNull_native(v36);
      sub_100109D28(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x8000000100ECA340, v44);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v43 = v0 + 90;
    v42 = v0 + 2;
  }
  v0[200] = v36;
  v45 = v0[189];
  v46 = v0[188];
  v47 = v0[187];
  v48 = v0[186];
  v49 = (uint64_t *)v0[185];
  sub_100704FDC(v49);
  sub_10001BBBC(v46, v45);
  sub_1008A776C((uint64_t)v49, v46, v45, v48, v47, (uint64_t)v42);
  v50 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  JSONEncoder.init()(v51);
  memcpy(v43, v42, 0x160uLL);
  v52 = sub_1008A93A0();
  v53 = dispatch thunk of JSONEncoder.encode<A>(_:)(v43, &type metadata for AirPodsLEPairingLockCheckRequestContent, v52);
  v0[201] = v53;
  v0[202] = v54;
  v55 = v53;
  v56 = v54;
  swift_release();
  sub_10001BBBC(v55, v56);
  v61 = (void (__cdecl *)())((char *)&dword_101115380 + dword_101115380);
  v57 = (_QWORD *)swift_task_alloc(unk_101115384);
  v0[203] = v57;
  *v57 = v0;
  v57[1] = sub_1008A83B0;
  v61();
}

uint64_t sub_1008A83B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1624);
  *(_QWORD *)(v3 + 1632) = a1;
  *(_QWORD *)(v3 + 1640) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1008A8410, 0, 0);
}

uint64_t sub_1008A8410()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v1 = v0[205];
  v2 = v0[204];
  v3 = v0[202];
  v4 = v0[201];
  v5 = v0[193];
  v6 = v0[192];
  v7 = v0[191];
  v0[178] = v2;
  v0[179] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[178];
  v0[206] = v8;
  v9 = v0[179];
  v0[207] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[208] = v10;
  v0[209] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115378 + dword_101115378;
  v13 = (_QWORD *)swift_task_alloc(unk_10111537C);
  v0[210] = v13;
  *v13 = v0;
  v13[1] = sub_1008A8550;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[190]);
}

uint64_t sub_1008A8550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1680);
  *(_QWORD *)(*(_QWORD *)v2 + 1688) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1008A8C0C;
  }
  else
  {
    v7 = v4[209];
    v8 = v4[208];
    v4[212] = a1;
    sub_10001BC14(v8, v7);
    v6 = sub_1008A85D0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1008A85D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t i;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *__dst;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t *v61;
  uint64_t v62[2];

  v1 = *(_QWORD *)(v0 + 1696);
  v2 = *(_QWORD *)(v0 + 1688);
  v3 = *(_QWORD *)(v0 + 1600);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v62[0] = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, v62);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 1656);
  v7 = *(_QWORD *)(v0 + 1648);
  v56 = v62[0];
  swift_bridgeObjectRelease();
  sub_10001BC14(v7, v6);
  if (qword_1010EA328 != -1)
LABEL_35:
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v54 = (uint64_t *)(v0 + 16);
  v55 = (_QWORD *)v0;
  __dst = (void *)(v0 + 368);
  v53 = v0 + 1464;
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7E28);
  v0 = Logger.logObject.getter(v9);
  v10 = static os_log_type_t.debug.getter(v0);
  if (os_log_type_enabled((os_log_t)v0, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v0, v10, "Pairing lock header:", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = v56;
  v57 = v56 + 64;
  v13 = -1;
  v14 = -1 << *(_BYTE *)(v56 + 32);
  if (-v14 < 64)
    v13 = ~(-1 << -(char)v14);
  v15 = v13 & *(_QWORD *)(v56 + 64);
  v58 = (unint64_t)(63 - v14) >> 6;
  swift_bridgeObjectRetain(v56);
  for (i = 0; ; i = v60)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v60 = i;
      v18 = v17 | (i << 6);
      goto LABEL_27;
    }
    v19 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v0 = (uint64_t)v55;
    if (v19 >= v58)
      goto LABEL_29;
    v20 = *(_QWORD *)(v57 + 8 * v19);
    v21 = i + 1;
    if (!v20)
    {
      v21 = i + 2;
      if (i + 2 >= v58)
        goto LABEL_29;
      v20 = *(_QWORD *)(v57 + 8 * v21);
      if (!v20)
      {
        v21 = i + 3;
        if (i + 3 >= v58)
          goto LABEL_29;
        v20 = *(_QWORD *)(v57 + 8 * v21);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v15 = (v20 - 1) & v20;
    v60 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_27:
    v23 = 16 * v18;
    v24 = (uint64_t *)(*(_QWORD *)(v12 + 48) + v23);
    v26 = *v24;
    v25 = v24[1];
    v27 = (uint64_t *)(*(_QWORD *)(v12 + 56) + v23);
    v29 = *v27;
    v28 = v27[1];
    swift_bridgeObjectRetain_n(v25, 2);
    swift_bridgeObjectRetain_n(v28, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v0 = swift_slowAlloc(64, -1);
      v62[0] = v0;
      *(_DWORD *)v33 = 136315394;
      swift_bridgeObjectRetain(v25);
      *(_QWORD *)(v33 + 4) = sub_100016940(v26, v25, v62);
      swift_bridgeObjectRelease_n(v25, 3);
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain(v28);
      *(_QWORD *)(v33 + 14) = sub_100016940(v29, v28, v62);
      swift_bridgeObjectRelease_n(v28, 3);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v0, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v0, -1, -1);
      v34 = v33;
      v12 = v56;
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v25, 2);
      swift_bridgeObjectRelease_n(v28, 2);
    }

  }
  v22 = i + 4;
  if (i + 4 < v58)
  {
    v20 = *(_QWORD *)(v57 + 8 * v22);
    if (!v20)
    {
      while (1)
      {
        v21 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_34;
        if (v21 >= v58)
          goto LABEL_29;
        v20 = *(_QWORD *)(v57 + 8 * v21);
        ++v22;
        if (v20)
          goto LABEL_26;
      }
    }
    v21 = i + 4;
    goto LABEL_26;
  }
LABEL_29:
  swift_release();
  sub_1008A93E4(v54);
  v35 = sub_1008A93E4(v54);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter(v36);
  v38 = os_log_type_enabled(v36, v37);
  v39 = v55[202];
  v40 = v55[201];
  v41 = v55[189];
  v42 = v55[188];
  v43 = (uint64_t *)v55[185];
  if (v38)
  {
    v61 = (uint64_t *)v55[185];
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v59 = v40;
    v45 = swift_slowAlloc(32, -1);
    v62[0] = v45;
    *(_DWORD *)v44 = 136315138;
    v0 = (uint64_t)v55;
    memcpy(__dst, v54, 0x160uLL);
    sub_1008A93E4(v54);
    v46 = String.init<A>(describing:)(__dst, &type metadata for AirPodsLEPairingLockCheckRequestContent);
    v55[183] = sub_100016940(v46, v47, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v55 + 184, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease();
    sub_1008A956C(v54);
    sub_1008A956C(v54);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Pairing lock body %s", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
    swift_release();
    sub_10001BC14(v42, v41);
    sub_100705188(v61);

    sub_10001BC14(v59, v39);
    sub_1008A956C(v54);
  }
  else
  {
    sub_1008A956C(v54);
    sub_10001BC14(v40, v39);
    sub_1008A956C(v54);
    sub_1008A956C(v54);
    swift_release();
    sub_10001BC14(v42, v41);
    sub_100705188(v43);

  }
  v48 = *(_QWORD *)(v0 + 1616);
  v49 = *(_QWORD *)(v0 + 1608);
  v50 = *(_QWORD *)(v0 + 1568);
  v51 = *(_QWORD *)(v0 + 1544);
  swift_task_dealloc(*(_QWORD *)(v0 + 1592));
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v56, v49, v48);
}

uint64_t sub_1008A8C0C()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  NSObject *v47;
  os_log_type_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v64;
  void *__dst;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  v1 = v0;
  v67 = v0 + 184;
  v2 = v0[209];
  v3 = v0[208];
  v4 = v0[207];
  v5 = v0[206];
  sub_10001BC14(v3, v2);
  sub_10001BC14(v5, v4);
  v6 = (unint64_t)&qword_1010EA000;
  if (qword_1010EA328 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_2:
    v7 = v1[211];
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7E28);
    swift_errorRetain(v7);
    v9 = swift_errorRetain(v7);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = v1[211];
    if (v12)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      swift_errorRetain(v13);
      v16 = _swift_stdlib_bridgeErrorToNSError(v13);
      v1[184] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, v1 + 185, v14 + 4, v14 + 12);
      *v15 = v16;
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to generate attestation header: %{public}@.", v14, 0xCu);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      v18 = v14;
      v6 = 0x1010EA000;
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(v13);
    }
    else
    {
      swift_errorRelease(v1[211]);
      swift_errorRelease(v13);
      swift_errorRelease(v13);

    }
    v19 = v1[200];
    if (*(_QWORD *)(v6 + 808) != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v68 = v1;
    __dst = v1 + 46;
    v66 = v1 + 2;
    v73 = sub_10001A9E8(v8, (uint64_t)qword_1011B7E28);
    v20 = Logger.logObject.getter(v73);
    v21 = static os_log_type_t.debug.getter(v20);
    v69 = v19;
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Pairing lock header:", v22, 2u);
      v23 = v22;
      v19 = v69;
      swift_slowDealloc(v23, -1, -1);
    }
    v64 = v1 + 183;

    v70 = v19 + 64;
    v24 = -1;
    v25 = -1 << *(_BYTE *)(v19 + 32);
    if (-v25 < 64)
      v24 = ~(-1 << -(char)v25);
    v6 = v24 & *(_QWORD *)(v19 + 64);
    v71 = (unint64_t)(63 - v25) >> 6;
    swift_bridgeObjectRetain(v19);
    v1 = 0;
    while (v6)
    {
      while (1)
      {
        v26 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v27 = v26 | ((_QWORD)v1 << 6);
LABEL_29:
        v31 = 16 * v27;
        v32 = (uint64_t *)(*(_QWORD *)(v19 + 48) + v31);
        v34 = *v32;
        v33 = v32[1];
        v35 = (uint64_t *)(*(_QWORD *)(v19 + 56) + v31);
        v37 = *v35;
        v36 = v35[1];
        swift_bridgeObjectRetain_n(v33, 2);
        swift_bridgeObjectRetain_n(v36, 2);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.debug.getter(v39);
        if (os_log_type_enabled(v39, v40))
          break;
        swift_bridgeObjectRelease_n(v33, 2);
        swift_bridgeObjectRelease_n(v36, 2);

        if (!v6)
          goto LABEL_15;
      }
      v41 = swift_slowAlloc(22, -1);
      v42 = v1;
      v43 = swift_slowAlloc(64, -1);
      v75 = v43;
      *(_DWORD *)v41 = 136315394;
      swift_bridgeObjectRetain(v33);
      *(_QWORD *)(v41 + 4) = sub_100016940(v34, v33, &v75);
      swift_bridgeObjectRelease_n(v33, 3);
      *(_WORD *)(v41 + 12) = 2080;
      swift_bridgeObjectRetain(v36);
      *(_QWORD *)(v41 + 14) = sub_100016940(v37, v36, &v75);
      swift_bridgeObjectRelease_n(v36, 3);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s: %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      v44 = v43;
      v1 = v42;
      swift_slowDealloc(v44, -1, -1);
      v45 = v41;
      v19 = v69;
      swift_slowDealloc(v45, -1, -1);

    }
LABEL_15:
    v28 = (int64_t)v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v28 >= v71)
      break;
    v29 = *(_QWORD *)(v70 + 8 * v28);
    v1 = (uint64_t *)((char *)v1 + 1);
    if (v29)
      goto LABEL_28;
    v1 = (uint64_t *)(v28 + 1);
    if (v28 + 1 >= v71)
      break;
    v29 = *(_QWORD *)(v70 + 8 * (_QWORD)v1);
    if (v29)
      goto LABEL_28;
    v1 = (uint64_t *)(v28 + 2);
    if (v28 + 2 >= v71)
      break;
    v29 = *(_QWORD *)(v70 + 8 * (_QWORD)v1);
    if (v29)
      goto LABEL_28;
    v30 = v28 + 3;
    if (v30 >= v71)
      break;
    v29 = *(_QWORD *)(v70 + 8 * v30);
    if (v29)
    {
      v1 = (uint64_t *)v30;
LABEL_28:
      v6 = (v29 - 1) & v29;
      v27 = __clz(__rbit64(v29)) + ((_QWORD)v1 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      v1 = (uint64_t *)(v30 + 1);
      if (__OFADD__(v30, 1))
        break;
      if ((uint64_t)v1 >= v71)
        goto LABEL_32;
      v29 = *(_QWORD *)(v70 + 8 * (_QWORD)v1);
      ++v30;
      if (v29)
        goto LABEL_28;
    }
LABEL_37:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_1008A93E4(v66);
  v46 = sub_1008A93E4(v66);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.debug.getter(v47);
  v49 = os_log_type_enabled(v47, v48);
  v50 = v68[202];
  v51 = v68[201];
  v52 = v68[189];
  v53 = v68[188];
  v54 = (uint64_t *)v68[185];
  if (v49)
  {
    v74 = v68[202];
    v72 = v68[201];
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    v75 = v56;
    *(_DWORD *)v55 = 136315138;
    memcpy(__dst, v66, 0x160uLL);
    sub_1008A93E4(v66);
    v57 = String.init<A>(describing:)(__dst, &type metadata for AirPodsLEPairingLockCheckRequestContent);
    *v64 = sub_100016940(v57, v58, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, v67, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease();
    sub_1008A956C(v66);
    sub_1008A956C(v66);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Pairing lock body %s", v55, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);
    swift_release();
    sub_10001BC14(v53, v52);
    sub_100705188(v54);

    sub_10001BC14(v72, v74);
    sub_1008A956C(v66);
  }
  else
  {
    sub_1008A956C(v66);
    sub_10001BC14(v51, v50);
    sub_1008A956C(v66);
    sub_1008A956C(v66);
    swift_release();
    sub_10001BC14(v53, v52);
    sub_100705188(v54);

  }
  v59 = v68[202];
  v60 = v68[201];
  v61 = v68[196];
  v62 = v68[193];
  swift_task_dealloc(v68[199]);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v68[1])(v69, v60, v59);
}

unint64_t sub_1008A93A0()
{
  unint64_t result;

  result = qword_10110B970;
  if (!qword_10110B970)
  {
    result = swift_getWitnessTable(byte_100E528D4, &type metadata for AirPodsLEPairingLockCheckRequestContent);
    atomic_store(result, (unint64_t *)&qword_10110B970);
  }
  return result;
}

uint64_t *sub_1008A93E4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v13 = a1[16];
  v14 = a1[17];
  v15 = a1[21];
  v18 = a1[22];
  v16 = a1[20];
  v17 = a1[23];
  v20 = a1[25];
  v21 = a1[24];
  v22 = a1[27];
  v23 = a1[26];
  v24 = a1[29];
  v25 = a1[31];
  v26 = a1[33];
  v27 = a1[35];
  v28 = a1[37];
  v29 = a1[39];
  v30 = a1[41];
  v19 = a1[43];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BD08(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BBBC(v21, v20);
  sub_10001BBBC(v23, v22);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t *sub_1008A956C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[7];
  v7 = a1[8];
  v9 = a1[9];
  v8 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v13 = a1[21];
  v14 = a1[20];
  v15 = a1[23];
  v16 = a1[22];
  v17 = a1[25];
  v19 = a1[27];
  v20 = a1[26];
  v18 = a1[24];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001EF3C(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v9, v8);
  sub_10001BC14(v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  sub_10001BC14(v20, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockCheckRequestContent()
{
  return &type metadata for AirPodsLEPairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockCheckRequest()
{
  return &type metadata for AirPodsLEPairingLockCheckRequest;
}

unint64_t sub_1008A9710()
{
  unint64_t result;

  result = qword_10110B980;
  if (!qword_10110B980)
  {
    result = swift_getWitnessTable("AZ$", &type metadata for AirPodsLEPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110B980);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingLockCheckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_1008A97A0 + 4 * byte_100E5285D[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_1008A97D4 + 4 * byte_100E52858[v4]))();
}

uint64_t sub_1008A97D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008A97DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008A97E4);
  return result;
}

uint64_t sub_1008A97F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008A97F8);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_1008A97FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008A9804(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsLEPairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_1008A9824()
{
  unint64_t result;

  result = qword_10110B988;
  if (!qword_10110B988)
  {
    result = swift_getWitnessTable("YZ$", &type metadata for AirPodsLEPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110B988);
  }
  return result;
}

unint64_t sub_1008A986C()
{
  unint64_t result;

  result = qword_10110B990;
  if (!qword_10110B990)
  {
    result = swift_getWitnessTable(byte_100E52960, &type metadata for AirPodsLEPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110B990);
  }
  return result;
}

unint64_t sub_1008A98B4()
{
  unint64_t result;

  result = qword_10110B998;
  if (!qword_10110B998)
  {
    result = swift_getWitnessTable(byte_100E52988, &type metadata for AirPodsLEPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110B998);
  }
  return result;
}

uint64_t sub_1008A98F8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;

  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v5 = 0xEC00000065636E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12645 && a2 == 0xE200000000000000)
  {
    v7 = 0xE200000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12645, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x8000000100EC3110;
    if (a2 == 0x8000000100EC3110)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EC3110, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x74617453636E7973 && a2 == 0xEA00000000007375)
  {
    v9 = 0xEA00000000007375;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617453636E7973, 0xEA00000000007375, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v12 = 0xEC0000007265626DLL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x644974726170 && a2 == 0xE600000000000000)
  {
    v13 = 0xE600000000000000;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726170, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x6F636165426D756ELL && a2 == 0xEA0000000000736ELL)
  {
    v14 = 0xEA0000000000736ELL;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F636165426D756ELL, 0xEA0000000000736ELL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100EC8A80)
  {
    v15 = 0x8000000100EC8A80;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC8A80, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100EDCCE0)
  {
    v16 = 0x8000000100EDCCE0;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100EDCCE0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x6E55646572616873 && a2 == 0xEA00000000007469)
  {
    v17 = 0xEA00000000007469;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E55646572616873, 0xEA00000000007469, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x314B64656573 && a2 == 0xE600000000000000)
  {
    v18 = 0xE600000000000000;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x314B64656573, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xEF74736574744179)
  {
    v19 = 0xEF74736574744179;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xEF74736574744179, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379)
  {
    v20 = 0xED00006E67695379;
LABEL_91:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00006E67695379, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_91;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100EDCD00)
  {
    v21 = 0x8000000100EDCD00;
LABEL_97:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EDCD00, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_97;
  }
  if (a1 == 0xD000000000000011)
  {
    v22 = 0x8000000100ECA360;
    if (a2 == 0x8000000100ECA360)
      goto LABEL_102;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA360, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_102:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064)
  {
    v23 = 0xE900000000000064;
LABEL_108:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_108;
  }
  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970)
  {
    v24 = 0xEB00000000644970;
LABEL_114:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_114;
  }
  if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69)
  {
    v25 = 0xEB000000006E6F69;
LABEL_120:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7372655663657073, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_120;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v26 = 0xEF6E6F6973726556;
LABEL_126:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_126;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v27 = 0xE900000000000064;
LABEL_132:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_132;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    v28 = 0xE800000000000000;
LABEL_138:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
    goto LABEL_138;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EDCD20)
  {
    swift_bridgeObjectRelease(0x8000000100EDCD20);
    return 23;
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EDCD20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v29 & 1) != 0)
      return 23;
    else
      return 24;
  }
}

uint64_t sub_1008AA2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;

  v2 = v0;
  v3 = type metadata accessor for PropertyListDecoder(0);
  v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v5 = PropertyListDecoder.init()(v4);
  v6 = sub_10001A9A8(&qword_1011063B0);
  v7 = (uint64_t *)(v2 + *(int *)(sub_10001A9A8(&qword_1010F7A08) + 44));
  v8 = *v7;
  v9 = v7[1];
  v10 = sub_1008C1C24();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, v8, v9, v6, v10);
  swift_release();
  if (!v1)
  {
    if (v15[2])
    {
      v5 = v15[4];
      swift_bridgeObjectRetain(v15[5]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = sub_10001A9A8(&qword_10110BE18);
      v12 = sub_1000193A4(&qword_10110BE20, &qword_10110BE18, protocol conformance descriptor for SessionMessage<A>.MessageError);
      v13 = swift_allocError(v5, v12, 0, 0);
      *v14 = 0;
      swift_willThrow(v13);
    }
  }
  return v5;
}

uint64_t sub_1008AA408@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = v1;
  v5 = type metadata accessor for PropertyListDecoder(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  PropertyListDecoder.init()(v6);
  v7 = sub_10001A9A8(&qword_1010F3E38);
  v8 = (uint64_t *)(v3 + *(int *)(sub_10001A9A8(&qword_1010F7A08) + 44));
  v9 = *v8;
  v10 = v8[1];
  v11 = sub_1008C1BC0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v7, v9, v10, v7, v11);
  result = swift_release();
  if (!v2)
  {
    if (*(_QWORD *)(v24 + 16))
    {
      v13 = *(_QWORD *)(v24 + 32);
      v14 = *(_QWORD *)(v24 + 40);
      v15 = *(_QWORD *)(v24 + 48);
      v16 = *(_BYTE *)(v24 + 56);
      v17 = *(_QWORD *)(v24 + 72);
      v23 = *(_QWORD *)(v24 + 64);
      v18 = *(_QWORD *)(v24 + 80);
      sub_10001BBBC(v13, v14);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v15;
      *(_BYTE *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 32) = v23;
      *(_QWORD *)(a1 + 40) = v17;
      *(_QWORD *)(a1 + 48) = v18;
    }
    else
    {
      swift_bridgeObjectRelease();
      v19 = sub_10001A9A8(&qword_10110BE18);
      v20 = sub_1000193A4(&qword_10110BE20, &qword_10110BE18, protocol conformance descriptor for SessionMessage<A>.MessageError);
      v21 = swift_allocError(v19, v20, 0, 0);
      *v22 = 0;
      return swift_willThrow(v21);
    }
  }
  return result;
}

uint64_t sub_1008AA594(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v9 - 8);
  v29 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = String.utf8Data.getter(a1, a2);
  v14 = v13;
  v32[0] = v12;
  v32[1] = v13;
  v15 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v15);
  sub_10001BC14(v12, v14);
  v16 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 160);
  v17 = qword_1010E9FD8;
  swift_retain();
  if (v17 != -1)
    swift_once(&qword_1010E9FD8, sub_1008AB7A8);
  v18 = sub_10001A9E8(v5, (uint64_t)qword_1011B7878);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v18, v5);
  __chkstk_darwin(v19);
  *(&v28 - 4) = v16;
  *(&v28 - 3) = (uint64_t)v11;
  *(&v28 - 2) = (uint64_t)v8;
  OS_dispatch_queue.sync<A>(execute:)(sub_10044AB30, &v28 - 6, &type metadata for Bool);
  v20 = LOBYTE(v32[0]);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v21 = type metadata accessor for Logger(0);
  sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a2, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(18, -1);
    v26 = swift_slowAlloc(32, -1);
    v32[0] = v26;
    *(_DWORD *)v25 = 136315394;
    swift_bridgeObjectRetain(a2);
    v30 = sub_100016940(a1, a2, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v25 + 12) = 1024;
    LODWORD(v30) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v25 + 14, v25 + 18);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Removed sharedkeys for %s with result %{BOOL}d", (uint8_t *)v25, 0x12u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v29);
}

uint64_t sub_1008AA8D4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t result;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  void *v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint8_t *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  void *v136;
  _BYTE v137[24];
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[3];
  uint64_t v143;
  uint64_t v144;

  v6 = v5;
  v133 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v133);
  v134 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_10001A9A8(&qword_1010F7970);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v125 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F7978);
  v129 = *(_QWORD *)(v14 - 8);
  v130 = v14;
  __chkstk_darwin(v14);
  v128 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = 0;
  v144 = 0;
  v136 = a2;
  v19 = objc_msgSend(a3, "pushIdentifiers", swift_bridgeObjectRetain(a2).n128_f64[0]);
  v20 = sub_10001A9A8(&qword_1011063B0);
  v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String, v20, &protocol witness table for String);

  v22 = *(_QWORD *)(v21 + 16);
  v135 = v6;
  v131 = a4;
  v132 = a5;
  if (!v22 || (v23 = sub_100518DA0(a1, (uint64_t)v136), (v24 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_11:
    v31 = swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v25 = *(_QWORD **)(*(_QWORD *)(v21 + 56) + 8 * v23);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v25[2])
    goto LABEL_11;
  v26 = v25[4];
  v27 = v25[5];
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease();
  v28 = Data.init(base64Encoded:options:)(v26, v27, 0);
  v30 = v29;
  v31 = swift_bridgeObjectRelease();
  if (v30 >> 60 != 15)
  {
    static String.Encoding.utf8.getter(v31);
    v124 = v28;
    v143 = String.init(data:encoding:)(v28, v30, v18);
    v144 = v32;
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B6D08);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (_QWORD *)swift_slowAlloc(32, -1);
      v139 = v38;
      *(_DWORD *)v37 = 136315138;
      v123 = v37 + 4;
      swift_beginAccess(&v143, v137, 0, 0);
      v141 = v143;
      v142[0] = v144;
      swift_bridgeObjectRetain(v144);
      v39 = sub_10001A9A8(&qword_1010F6350);
      v40 = String.init<A>(describing:)(&v141, v39);
      v141 = sub_100016940(v40, v41, (uint64_t *)&v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v123, v37 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "liveLocations: handle provided from server %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    sub_10001EF3C(v124, v30);
    goto LABEL_18;
  }
LABEL_12:
  if (qword_1010EA0A8 != -1)
    v31 = swift_once(&qword_1010EA0A8, sub_10098F82C);
  v42 = qword_1011B7A48;
  __chkstk_darwin(v31);
  *(&v122 - 4) = v42;
  *(&v122 - 3) = a1;
  *(&v122 - 2) = (uint64_t)v136;
  swift_retain();
  v43 = sub_10001A9A8(&qword_1010F6350);
  OS_dispatch_queue.sync<A>(execute:)(sub_100554E94, &v122 - 6, v43);
  swift_release();
  v44 = v141;
  v45 = v142[0];
  swift_bridgeObjectRelease();
  v143 = v44;
  v144 = v45;
  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v46 = type metadata accessor for Logger(0);
  v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B6D08);
  v35 = Logger.logObject.getter(v47);
  v48 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v35, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = (_QWORD *)swift_slowAlloc(32, -1);
    v139 = v50;
    *(_DWORD *)v49 = 136315138;
    swift_beginAccess(&v143, v137, 0, 0);
    v141 = v143;
    v142[0] = v144;
    swift_bridgeObjectRetain(v144);
    v51 = String.init<A>(describing:)(&v141, v43);
    v141 = sub_100016940(v51, v52, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v48, "liveLocations: no handle provided by server. Looking at fmf data %s", v49, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);
  }
LABEL_18:

  swift_beginAccess(&v143, &v141, 1, 0);
  if (!v144)
  {
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_10001A9E8(v53, (uint64_t)qword_1011B6D08);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "liveLocations: no handle found in cache. Checking fmf directly", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v58 = qword_1011B7A48;
    swift_retain();
    v59 = sub_10001A9A8(&qword_1010FEF48);
    OS_dispatch_queue.sync<A>(execute:)(sub_100555824, v58, v59);
    swift_release();
    v60 = v139;
    v61 = v139[2];
    if (v61)
    {
      v63 = v139[4];
      v62 = v139[5];
      v64 = v139[7];
      v65 = (void *)v139[8];
      if (v64 == a1 && v65 == v136 || (_stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, a1, v136, 0) & 1) != 0)
      {
LABEL_37:
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRelease();
        v143 = v63;
        v144 = v62;
      }
      else
      {
        v66 = 0;
        v67 = (void **)(v60 + 13);
        v68 = v61 - 1;
        while (v68 != v66)
        {
          if ((unint64_t)++v66 >= v60[2])
          {
            __break(1u);
            goto LABEL_62;
          }
          v63 = (uint64_t)*(v67 - 4);
          v62 = (uint64_t)*(v67 - 3);
          v69 = (uint64_t)*(v67 - 1);
          v70 = *v67;
          if (v69 != a1 || v70 != v136)
          {
            v67 += 5;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, a1, v136, 0) & 1) == 0)
              continue;
          }
          goto LABEL_37;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v72 = type metadata accessor for Logger(0);
  v73 = sub_10001A9E8(v72, (uint64_t)qword_1011B6D08);
  v74 = v143;
  v75 = v144;
  swift_bridgeObjectRetain_n(v144, 2);
  swift_bridgeObjectRetain_n(v136, 2);
  v77 = Logger.logObject.getter(v76);
  v78 = static os_log_type_t.default.getter(v77);
  if (os_log_type_enabled(v77, v78))
  {
    v79 = swift_slowAlloc(42, -1);
    v124 = v73;
    v80 = v79;
    v81 = (_QWORD *)swift_slowAlloc(64, -1);
    *(_DWORD *)v80 = 141558787;
    v138 = 1752392040;
    v139 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v80 + 4, v80 + 12);
    *(_WORD *)(v80 + 12) = 2081;
    if (v75)
      v82 = v74;
    else
      v82 = 7104878;
    v83 = a1;
    if (v75)
      v84 = v75;
    else
      v84 = 0xE300000000000000;
    swift_bridgeObjectRetain(v75);
    v138 = sub_100016940(v82, v84, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v80 + 14, v80 + 22);
    swift_bridgeObjectRelease_n(v75, 2);
    a1 = v83;
    swift_bridgeObjectRelease();
    *(_WORD *)(v80 + 22) = 2160;
    v138 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v80 + 24, v80 + 32);
    *(_WORD *)(v80 + 32) = 2081;
    v85 = (unint64_t)v136;
    swift_bridgeObjectRetain(v136);
    v138 = sub_100016940(v83, v85, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v80 + 34, v80 + 42);
    swift_bridgeObjectRelease_n(v85, 3);
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "liveLocations: Handle identifier %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v80, 0x2Au);
    swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v80, -1, -1);

    v86 = v144;
    if (!v144)
      goto LABEL_55;
  }
  else
  {

    swift_bridgeObjectRelease_n(v136, 2);
    swift_bridgeObjectRelease_n(v75, 2);
    v86 = v144;
    if (!v144)
    {
LABEL_55:
      if (qword_1010EA428 != -1)
LABEL_62:
        swift_once(&qword_1010EA428, sub_100C48554);
      v139 = 0;
      v140 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      v139 = (_QWORD *)0xD00000000000002CLL;
      v140 = 0x8000000100EEA010;
      v114._countAndFlagsBits = a1;
      v115 = v136;
      v114._object = v136;
      String.append(_:)(v114);
      sub_100C49090((uint64_t)v139, v140);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n(v115, 2);
      v117 = Logger.logObject.getter(v116);
      v118 = static os_log_type_t.error.getter(v117);
      if (os_log_type_enabled(v117, v118))
      {
        v119 = swift_slowAlloc(22, -1);
        v120 = (_QWORD *)swift_slowAlloc(32, -1);
        *(_DWORD *)v119 = 141558275;
        v138 = 1752392040;
        v139 = v120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v119 + 4, v119 + 12);
        *(_WORD *)(v119 + 12) = 2081;
        v121 = (unint64_t)v136;
        swift_bridgeObjectRetain(v136);
        v138 = sub_100016940(a1, v121, (uint64_t *)&v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v119 + 14, v119 + 22);
        swift_bridgeObjectRelease_n(v121, 3);
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "liveLocations: Unable to create a MessagingDestination for findMyId %{private,mask.hash}s", (uint8_t *)v119, 0x16u);
        swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v120, -1, -1);
        swift_slowDealloc(v119, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v136, 2);
      }
      return swift_bridgeObjectRelease();
    }
  }
  v87 = v143;
  swift_bridgeObjectRetain_n(v86, 2);
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v87, v86);
  if (!v90)
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  v91 = v90;
  v123 = (uint8_t *)v87;
  v124 = a1;
  v92 = (uint64_t)v134;
  v93 = v135;
  v94 = *(_QWORD *)(v135 + 40);
  *v134 = v88;
  *(_QWORD *)(v92 + 8) = v89;
  *(_QWORD *)(v92 + 16) = v90;
  result = swift_storeEnumTagMultiPayload(v92, v133, 1);
  if (*(_QWORD *)(v94 + 432))
  {
    swift_retain();
    swift_bridgeObjectRetain(v91);
    swift_retain();
    v96 = (_QWORD *)dispatch thunk of AsynchronousCache.value(for:)(v92);
    swift_release();
    v139 = v96;
    v97 = sub_10001A9A8(&qword_1010F7980);
    v98 = sub_1000193A4(&qword_1010F7988, &qword_1010F7980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v99 = (_QWORD *)Publisher.eraseToAnyPublisher()(v97, v98);
    swift_release();
    sub_1000126B0(v92, type metadata accessor for BeaconSharingSessionContext);
    swift_release();
    swift_bridgeObjectRelease();
    v139 = v99;
    v100 = sub_10001A9A8(&qword_1010F7990);
    v101 = v125;
    Publisher.map<A>(_:)(sub_100323884, 0, v97, v100, v98);
    swift_release();
    v102 = sub_10001A9A8(&qword_1010F7998);
    v103 = sub_1000193A4(&qword_1010F79A0, &qword_1010F7970, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v104 = sub_1000193A4(&qword_1010F79A8, &qword_1010F7998, (const char *)&protocol conformance descriptor for Just<A>);
    v105 = v128;
    v106 = v127;
    Publisher.catch<A>(_:)(sub_1003246C4, 0, v127, v102, v103, v104);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v101, v106);
    v107 = (_QWORD *)swift_allocObject(&unk_101099010, 72, 7);
    v107[2] = v123;
    v107[3] = v86;
    v108 = v136;
    v107[4] = v124;
    v107[5] = v108;
    v109 = v131;
    v110 = v132;
    v107[6] = v93;
    v107[7] = v109;
    v107[8] = v110;
    v111 = sub_1000193A4(&qword_1010F79B0, &qword_1010F7978, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_bridgeObjectRetain(v108);
    swift_retain();
    swift_retain();
    v112 = v130;
    v113 = Publisher<>.sink(receiveValue:)(sub_1008C1B80, v107, v130, v111);
    swift_release();
    (*(void (**)(char *, uint64_t))(v129 + 8))(v105, v112);
    *(_QWORD *)(v93 + 104) = v113;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1008AB7A8(uint64_t a1)
{
  return sub_1008AC5DC(a1, qword_1011B7878, 0xD000000000000018, 0x8000000100EE9C30);
}

void sub_1008AB7CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  Swift::UInt v29;
  Swift::UInt v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v11, v12);
  v13 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0);
  v14 = (uint64_t *)(v1 + v13[5]);
  v15 = *v14;
  v16 = v14[1];
  swift_bridgeObjectRetain(v16);
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease();
  v17 = (uint64_t *)(v2 + v13[6]);
  v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = *v17;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v19, v18);
    Data.hash(into:)(a1, v19, v18);
    sub_10001EF3C(v19, v18);
  }
  v20 = (uint64_t *)(v2 + v13[7]);
  v21 = v20[1];
  if (v21 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v22 = *v20;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v22, v21);
    Data.hash(into:)(a1, v22, v21);
    sub_10001EF3C(v22, v21);
  }
  v23 = (unsigned __int8 *)(v2 + v13[8]);
  v24 = *((_QWORD *)v23 + 2);
  if (v24)
  {
    v36 = *((_QWORD *)v23 + 1);
    v25 = v10;
    v26 = v4;
    v27 = v5;
    v28 = v7;
    v29 = *v23;
    Hasher._combine(_:)(1u);
    v30 = v29;
    v7 = v28;
    v5 = v27;
    v4 = v26;
    v10 = v25;
    Hasher._combine(_:)(v30);
    swift_bridgeObjectRetain(v24);
    String.hash(into:)(a1, v36, v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v31 = (uint64_t *)(v2 + v13[9]);
  v32 = v31[1];
  if (v32)
  {
    v33 = *v31;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(a1, v33, v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(_QWORD *)(v2 + v13[10]));
  sub_10000F9B8(v2 + v13[11], (uint64_t)v10, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v34 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v34);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1008ABB38(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1008ABB70 + 4 * byte_100E52A70[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1008ABB70()
{
  return 0x6449794D646E6966;
}

unint64_t sub_1008ABB88()
{
  return 0xD000000000000015;
}

unint64_t sub_1008ABBE8()
{
  return 0xD000000000000013;
}

void sub_1008ABC00()
{
  JUMPOUT(0x1008ABC14);
}

uint64_t sub_1008ABC20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  uint64_t v32;
  char v33;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110BF08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1008C2C10();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsCachedSharedKey.CodingKeys, &type metadata for SecureLocationsCachedSharedKey.CodingKeys, v11, v9, v10);
  LOBYTE(v31) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v31, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    LOBYTE(v31) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v31, v5);
    v31 = *(_OWORD *)(v3 + v14[6]);
    v33 = 2;
    v18 = sub_100068134();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v33, v5, &type metadata for PrivateKey, v18);
    v31 = *(_OWORD *)(v3 + v14[7]);
    v33 = 3;
    v19 = sub_1002FD6B0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v33, v5, &type metadata for HashedAdvertisement, v19);
    v20 = (__int128 *)(v3 + v14[8]);
    v21 = *((_QWORD *)v20 + 2);
    v31 = *v20;
    v32 = v21;
    v33 = 4;
    v22 = sub_1000A82E0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v33, v5, &type metadata for MessagingDestination, v22);
    v23 = (uint64_t *)(v3 + v14[9]);
    v24 = *v23;
    v25 = v23[1];
    LOBYTE(v31) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v31, v5);
    *(_QWORD *)&v31 = *(_QWORD *)(v3 + v14[10]);
    v33 = 6;
    v26 = sub_1008BC918();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v33, v5, &type metadata for SecureLocationsIndex, v26);
    v27 = v3 + v14[11];
    LOBYTE(v31) = 7;
    v28 = type metadata accessor for Date(0);
    v29 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v31, v5, v28, v29);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1008ABF24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  char v59;

  v44 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v45 = (uint64_t *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = sub_10001A9A8(&qword_10110BF18);
  v8 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  v12 = (int *)__chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = &v14[v12[6]];
  *(_OWORD *)v56 = xmmword_100E22B20;
  v50 = &v14[v12[7]];
  *(_OWORD *)v50 = xmmword_100E22B20;
  v15 = &v14[v12[8]];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v51 = v15;
  *((_QWORD *)v15 + 2) = 0;
  v16 = &v14[v12[9]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v54 = v16;
  v46 = v12;
  v17 = (uint64_t)&v14[v12[11]];
  v18 = type metadata accessor for Date(0);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v52 = v17;
  v19(v17, 1, 1, v18);
  v21 = a1[3];
  v20 = a1[4];
  v53 = a1;
  sub_10001AA44(a1, v21);
  v22 = sub_1008C2C10();
  v48 = v10;
  v23 = (uint64_t)v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsCachedSharedKey.CodingKeys, &type metadata for SecureLocationsCachedSharedKey.CodingKeys, v22, v21, v20);
  if (v23)
  {
    v27 = v50;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v53);
    v28 = v52;
    sub_10001EF3C(*(_QWORD *)v56, *((_QWORD *)v56 + 1));
    sub_10001EF3C(*(_QWORD *)v27, *((_QWORD *)v27 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100004048(v28, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v24 = v8;
    v55 = v5;
    LOBYTE(v57) = 0;
    v25 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v45, v6, &v57, v49, v6, v25);
    (*(void (**)(char *, _QWORD *, uint64_t))(v47 + 32))(v14, v26, v6);
    LOBYTE(v57) = 1;
    v30 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v49);
    v31 = v54;
    v32 = (uint64_t *)&v14[v46[5]];
    *v32 = v30;
    v32[1] = v33;
    v59 = 2;
    v34 = sub_10007CB0C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for PrivateKey, &v59, v49, &type metadata for PrivateKey, v34);
    v36 = v50;
    v35 = v51;
    *(_OWORD *)v56 = v57;
    v59 = 3;
    v37 = sub_1002FD66C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for HashedAdvertisement, &v59, v49, &type metadata for HashedAdvertisement, v37);
    *(_OWORD *)v36 = v57;
    v59 = 4;
    v38 = sub_1000A8368();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for MessagingDestination, &v59, v49, &type metadata for MessagingDestination, v38);
    v39 = v58;
    *(_OWORD *)v35 = v57;
    *((_QWORD *)v35 + 2) = v39;
    LOBYTE(v57) = 5;
    *(_QWORD *)v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v57, v49);
    *((_QWORD *)v31 + 1) = v40;
    v59 = 6;
    v41 = sub_1008BC8D4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v57, &type metadata for SecureLocationsIndex, &v59, v49, &type metadata for SecureLocationsIndex, v41);
    *(_QWORD *)&v14[v46[10]] = v57;
    LOBYTE(v57) = 7;
    v42 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v57, v49, v18, v42);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v48, v49);
    sub_100004084((uint64_t)v55, v52, (uint64_t *)&unk_1010EA690);
    sub_10005972C((uint64_t)v14, v44, type metadata accessor for SecureLocationsCachedSharedKey);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v53);
    return sub_1000126B0((uint64_t)v14, type metadata accessor for SecureLocationsCachedSharedKey);
  }
}

uint64_t sub_1008AC498()
{
  unsigned __int8 *v0;

  return sub_1008ABB38(*v0);
}

uint64_t sub_1008AC4A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008C0364(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008AC4C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008C2C10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008AC4EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008C2C10();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1008AC514()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1008AB7CC((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1008AC554()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1008AB7CC((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1008AC58C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1008ABF24(a1, a2);
}

uint64_t sub_1008AC5A0(_QWORD *a1)
{
  return sub_1008ABC20(a1);
}

uint64_t sub_1008AC5B8(uint64_t a1)
{
  return sub_1008AC5DC(a1, qword_1011B7890, 0xD000000000000012, 0x8000000100ED8E40);
}

uint64_t sub_1008AC5DC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v9, a2);
  sub_10001A9E8(v7, (uint64_t)a2);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v11);
  URL.appendingPathComponent(_:isDirectory:)(a3, a4, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1008AC6A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  char v24;
  _OWORD v25[3];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110BDC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1008BC890();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsCachedSharingKey.CodingKeys, &type metadata for SecureLocationsCachedSharingKey.CodingKeys, v11, v9, v10);
  LOBYTE(v25[0]) = 0;
  v12 = type metadata accessor for URL(0);
  v13 = sub_100006204(&qword_1010FE330, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v25, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for SecureLocationsCachedSharingKey(0);
    v15 = v3 + v14[5];
    LOBYTE(v25[0]) = 1;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v25, v5, v16, v17);
    v18 = (_OWORD *)(v3 + v14[6]);
    v19 = v18[1];
    v25[0] = *v18;
    v25[1] = v19;
    v25[2] = v18[2];
    v24 = 2;
    v20 = sub_1007EBD90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v24, v5, &type metadata for DiversifiedRootKeys, v20);
    *(_QWORD *)&v25[0] = *(_QWORD *)(v3 + v14[7]);
    v24 = 3;
    v21 = sub_1008BC918();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v24, v5, &type metadata for SecureLocationsIndex, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1008AC8C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _OWORD v41[3];
  char v42;

  v33 = a2;
  v4 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  __chkstk_darwin(v4);
  v34 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_10001A9A8(&qword_10110BDB0);
  v35 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  __chkstk_darwin(v39);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9FE0 != -1)
    swift_once(&qword_1010E9FE0, sub_1008AC5B8);
  v15 = sub_10001A9E8(v6, (uint64_t)qword_1011B7890);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v14, v15, v6);
  v16 = a1;
  v17 = a1[3];
  v18 = v16[4];
  v40 = v16;
  sub_10001AA44(v16, v17);
  v19 = sub_1008BC890();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsCachedSharingKey.CodingKeys, &type metadata for SecureLocationsCachedSharingKey.CodingKeys, v19, v17, v18);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  else
  {
    LOBYTE(v41[0]) = 0;
    v20 = sub_100006204(&qword_1010FE320, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v21 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v9, v6, v41, v36, v6, v20);
    (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 40))(v14, v9, v6);
    LOBYTE(v41[0]) = 1;
    v22 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = v34;
    v24 = v21;
    v25 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v38, v41, v24, v38, v22);
    v26 = v23;
    v27 = v39;
    (*(void (**)(char *, _QWORD *, uint64_t))(v37 + 32))(&v14[*(int *)(v39 + 20)], v26, v25);
    v42 = 2;
    v28 = sub_1007EBD08();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, &type metadata for DiversifiedRootKeys, &v42, v24, &type metadata for DiversifiedRootKeys, v28);
    v29 = &v14[*(int *)(v27 + 24)];
    v30 = v41[1];
    *(_OWORD *)v29 = v41[0];
    *((_OWORD *)v29 + 1) = v30;
    *((_OWORD *)v29 + 2) = v41[2];
    v42 = 3;
    v31 = sub_1008BC8D4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v41, &type metadata for SecureLocationsIndex, &v42, v24, &type metadata for SecureLocationsIndex, v31);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v24);
    *(_QWORD *)&v14[*(int *)(v27 + 28)] = *(_QWORD *)&v41[0];
    sub_10005972C((uint64_t)v14, v33, type metadata accessor for SecureLocationsCachedSharingKey);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
    return sub_1000126B0((uint64_t)v14, type metadata accessor for SecureLocationsCachedSharingKey);
  }
}

uint64_t sub_1008ACD44()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1008ACD80 + 4 * byte_100E52A78[*v0]))(0x614264726F636572, 0xED00004C52556573);
}

uint64_t sub_1008ACD80()
{
  return 0x696669746E656469;
}

uint64_t sub_1008ACD9C()
{
  return 0x4B676E6972616873;
}

uint64_t sub_1008ACDBC()
{
  return 0x6E49646572616873;
}

uint64_t sub_1008ACDDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008C069C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008ACE00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008BC890();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008ACE28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008BC890();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008ACE50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1008AC8C4(a1, a2);
}

uint64_t sub_1008ACE64(_QWORD *a1)
{
  return sub_1008AC6A8(a1);
}

_QWORD *sub_1008ACE78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *);
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[4];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;

  v3 = v2;
  v63 = a1;
  v64 = a2;
  v68 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v68);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v10 = *(_QWORD *)(v9 - 8);
  v67 = v9;
  __chkstk_darwin(v9);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_10001F6FC();
  v2[2] = 0;
  v2[3] = 0;
  v66 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v69 = *(uint64_t (**)(char *))(v10 + 104);
  v13 = v69(v12);
  v14 = v8;
  static DispatchQoS.unspecified.getter(v13);
  *(_QWORD *)&v84[0] = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v18 = v5;
  v19 = v16;
  v61 = v17;
  v65 = v15;
  dispatch thunk of SetAlgebra.init<A>(_:)(v84, v16, v17, v68, v15);
  v2[6] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x8000000100EEA080, v14, v18, v12, 0);
  v20 = ((uint64_t (*)(char *, _QWORD, uint64_t))v69)(v12, v66, v67);
  static DispatchQoS.unspecified.getter(v20);
  *(_QWORD *)&v84[0] = _swiftEmptyArrayStorage;
  v60 = v16;
  dispatch thunk of SetAlgebra.init<A>(_:)(v84, v16, v17, v68, v15);
  v21 = v14;
  v22 = v14;
  v23 = v12;
  v2[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x8000000100EEA0C0, v21, v18, v12, 0);
  v2[8] = 0;
  v2[9] = 0;
  v2[10] = 0;
  LOBYTE(v84[0]) = 0;
  v24 = sub_10001A9A8(&qword_101108C08);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v2[11] = CurrentValueSubject.init(_:)(v84);
  v2[13] = 0;
  v2[14] = 0;
  v25 = sub_10001A9A8(&qword_10110BE28);
  v26 = *(unsigned int *)(v25 + 48);
  v27 = *(unsigned __int16 *)(v25 + 52);
  v62 = v25;
  swift_allocObject(v25, v26, v27);
  v2[15] = PassthroughSubject.init()();
  v28 = (char *)v2 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
  v29 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  *(_QWORD *)((char *)v3
            + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cacheInvalidationMeDeviceSubscription) = 0;
  *(_QWORD *)((char *)v3
            + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cacheInvalidationAutoMeChangedSubscription) = 0;
  v59 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_decryptionKeyAccessQueue;
  v30 = v66;
  v31 = v67;
  v32 = ((uint64_t (*)(char *, _QWORD, uint64_t))v69)(v12, v66, v67);
  static DispatchQoS.unspecified.getter(v32);
  *(_QWORD *)&v84[0] = _swiftEmptyArrayStorage;
  v33 = v19;
  v34 = v61;
  v35 = v68;
  dispatch thunk of SetAlgebra.init<A>(_:)(v84, v33, v61, v68, v65);
  v36 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000034, 0x8000000100EEA0F0, v22, v18, v23, 0);
  *(_QWORD *)((char *)v3 + v59) = v36;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedDecryptionKeys) = _swiftEmptyDictionarySingleton;
  v59 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingQueue;
  v37 = ((uint64_t (*)(char *, uint64_t, uint64_t))v69)(v23, v30, v31);
  static DispatchQoS.unspecified.getter(v37);
  *(_QWORD *)&v84[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v84, v60, v34, v35, v65);
  v38 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000035, 0x8000000100EEA130, v22, v18, v23, 0);
  *(_QWORD *)((char *)v3 + v59) = v38;
  v39 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingThrottle;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v40 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v40, &type metadata for SecureLocationsConfig);
  swift_release();
  v91 = v81;
  v92 = v82;
  v93 = v83;
  v87 = v77;
  v88 = v78;
  v89 = v79;
  v90 = v80;
  v84[2] = v73;
  v84[3] = v74;
  v85 = v75;
  v86 = v76;
  v84[0] = v71;
  v84[1] = v72;
  sub_1003D09E0(v84);
  v41 = *((double *)&v85 + 1);
  v42 = sub_10001A9A8(&qword_10110BE30);
  v43 = swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  *(_QWORD *)((char *)v3 + v39) = KeyedThrottle.init(throttleInterval:)(v43, v41);
  *(_QWORD *)&v71 = v3[15];
  v44 = sub_1000193A4(&qword_10110BE38, &qword_10110BE28, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v3[16] = Publisher.eraseToAnyPublisher()(v62, v44);
  v45 = v64;
  v3[4] = v63;
  v3[5] = v45;
  swift_retain();
  swift_retain();
  v46 = swift_retain();
  v47 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v46);
  swift_release();
  v3[12] = v47;
  *(_QWORD *)&v71 = *(_QWORD *)(qword_1011B7A48 + 56);
  swift_retain();
  swift_retain();
  v48 = sub_10001A9A8(&qword_1010F2080);
  v49 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v50 = Publisher<>.sink(receiveValue:)(sub_1008C1C94, v3, v48, v49);
  swift_release();
  swift_release();
  v3[10] = v50;
  swift_release();
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v51 = swift_retain();
  v52 = AnyCurrentValuePublisher.publisher.getter(v51);
  swift_release();
  *(_QWORD *)&v71 = v52;
  swift_retain();
  v53 = sub_10001A9A8(&qword_1011194D0);
  v54 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v55 = Publisher<>.sink(receiveValue:)(sub_1008C1C9C, v3, v53, v54);
  swift_release();
  swift_release();
  *(_QWORD *)((char *)v3
            + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cacheInvalidationMeDeviceSubscription) = v55;
  swift_release();
  *(_QWORD *)&v71 = *(_QWORD *)(qword_1011B7A48 + 88);
  swift_retain();
  swift_retain();
  v56 = Publisher<>.sink(receiveValue:)(sub_1008C1CA4, v3, v48, v49);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)((char *)v3
            + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cacheInvalidationAutoMeChangedSubscription) = v56;
  swift_release();
  return v3;
}

uint64_t sub_1008AD600(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Transaction(0);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.handleFriendRemoved", 65, 2, sub_1008C1CB0, a2, &type metadata for () + 1);
}

void sub_1008AD668(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(NSObject **)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  if (!*a1)
    goto LABEL_4;
  if (v12 == 1)
    return;
  if (v12 != 4)
  {
    v27 = v5;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "MeDevice: state is not thisDevice. Invalidating key cache", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    aBlock[4] = sub_1008C1CAC;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101099078;
    v22 = _Block_copy(aBlock);
    v23 = swift_retain();
    static DispatchQoS.unspecified.getter(v23);
    v28 = _swiftEmptyArrayStorage;
    v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v26 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v25, v26, v4, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v22);
    _Block_release(v22);
    ((void (*)(char *, uint64_t))v27[1].isa)(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release();
  }
  else
  {
LABEL_4:
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
    v27 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v15, "MeDevice: state unknown or none. Not invalidating cache", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
}

uint64_t sub_1008AD9D0(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*a1 & 1) == 0)
  {
    v19 = *(_QWORD *)(a2 + 48);
    aBlock[4] = sub_1008C2EF0;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101099050;
    v13 = v5;
    v14 = _Block_copy(aBlock);
    v15 = swift_retain();
    static DispatchQoS.unspecified.getter(v15);
    v20 = _swiftEmptyArrayStorage;
    v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v17, v18, v4, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v7, v14);
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_1008ADBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1008BF9F8(a2, a3, a4);
}

uint64_t sub_1008ADBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v24 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1008AE420();
  v14 = sub_1008ADE48();
  sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
  v15 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v16 = swift_allocObject(&unk_101098520, 33, 7);
  *(_QWORD *)(v16 + 16) = v24;
  *(_QWORD *)(v16 + 24) = a3;
  *(_BYTE *)(v16 + 32) = v14 & 1;
  aBlock[4] = sub_1001D1D50;
  v30 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101098538;
  v17 = _Block_copy(aBlock);
  v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  v28 = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
  return swift_release(v30);
}

uint64_t sub_1008ADE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v31;

  v1 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v1);
  v3 = (char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v0 + 32);
  swift_retain();
  v12 = sub_1007FDEC4();
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  swift_release(v11);
  swift_release(v12);
  if (LOBYTE(aBlock[0]) == 1)
  {
    sub_1008AE274((uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      v27 = *(_QWORD *)(v0 + 32);
      swift_retain();
      sub_1008892B4((uint64_t)v3);
      swift_release(v27);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v28 = type metadata accessor for KeyAlignmentRecord(0);
      v26 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v3, 1, v28) != 1;
      sub_100004048((uint64_t)v3, (uint64_t *)&unk_1010F47D0);
      return v26;
    }
    sub_100004048((uint64_t)v6, &qword_1010ED860);
    return 0;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "SecureLocationSetup: BeaconStore is not available", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  v18 = qword_1011B7F60;
  v19 = *(NSObject **)(qword_1011B7F60 + 16);
  v20 = (_QWORD *)swift_allocObject(&unk_101098D68, 40, 7);
  v20[2] = v18;
  v20[3] = 0xD000000000000017;
  v20[4] = 0x8000000100EE9F70;
  v21 = swift_allocObject(&unk_101098D90, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_100555DCC;
  *(_QWORD *)(v21 + 24) = v20;
  aBlock[4] = sub_10005CBA4;
  v31 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_101098DA8;
  v22 = _Block_copy(aBlock);
  v23 = v31;
  swift_retain_n(v18, 2);
  swift_retain();
  swift_release(v23);
  dispatch_sync(v19, v22);
  _Block_release(v22);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation(v21, "", 110, 308, 38, 1);
  swift_release(v18);
  swift_release(v20);
  result = swift_release(v21);
  if ((v19 & 1) == 0)
  {
    v25 = qword_1011B7F60;
    swift_retain();
    sub_100C4C0F8(0xBu, 0xD000000000000017, 0x8000000100EE9F70);
    swift_release(v25);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1008AE274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 32);
  swift_retain();
  v9 = sub_10080D3EC();
  swift_release(v8);
  v10 = v9[2];
  if (v10)
  {
    if (v10 == 1
      || (type metadata accessor for Transaction(0),
          result = static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.removeDuplicateVirtualMeOBRs", 58, 2, sub_1008C13D0, v2, (char *)&type metadata for () + 8), v9[2]))
    {
      sub_10005972C((uint64_t)v9 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease();
      v12 = &v7[*(int *)(v4 + 20)];
      v13 = type metadata accessor for UUID(0);
      v14 = *(_QWORD *)(v13 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(a1, v12, v13);
      sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1008AE420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v49 - v7;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (_QWORD *)((char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v1 + 48);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    if (qword_1010EA0A8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA0A8, sub_10098F82C);
LABEL_3:
  v16 = qword_1011B7A48;
  swift_retain();
  v17 = sub_10000D338();
  swift_release(v16);
  if ((v17 & 1) != 0)
  {
    v18 = *(_QWORD *)(v1 + 32);
    swift_retain();
    v19 = (char *)sub_10080D3EC();
    swift_release(v18);
    if (!*((_QWORD *)v19 + 2))
    {
      swift_bridgeObjectRelease();
      sub_1008AEA80();
      return;
    }
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain(v19);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    v25 = os_log_type_enabled(v23, v24);
    v52 = v1;
    if (v25)
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v26 = 134217984;
      v54 = *((_QWORD *)v19 + 2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "SetupVirtualMeDevice: Found OBRs %ld", v26, 0xCu);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    if (*((_QWORD *)v19 + 2))
    {
      v32 = type metadata accessor for OwnedBeaconRecord(0);
      v33 = *(unsigned __int8 *)(*(_QWORD *)(v32 - 8) + 80);
      v34 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v34(v8, &v19[*(int *)(v32 + 20) + ((v33 + 32) & ~v33)], v2);
      v51 = v8;
      v35 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v6, v8, v2);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v54 = v39;
        v49[1] = v21;
        v50 = v2;
        *(_DWORD *)v38 = 136315138;
        v40 = UUID.uuidString.getter(v39);
        v53 = sub_100016940(v40, v41, (uint64_t *)&v54);
        v2 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v38 + 4, v38 + 12);
        swift_bridgeObjectRelease();
        v3 = *(_QWORD *)(v3 + 8);
        ((void (*)(char *, uint64_t))v3)(v6, v2);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "SetupVirtualMeDevice: Found existing OBR %s", v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 8);
        ((void (*)(char *, uint64_t))v3)(v6, v2);
      }

      v8 = v51;
      v42 = v52;
      sub_1008AF640((uint64_t)v51);
      v43 = *((_QWORD *)v19 + 2);
      if (v43 < 2)
      {
        ((void (*)(char *, uint64_t))v3)(v8, v2);
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRetain(v19);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.error.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v47 = 134217984;
        v42 = v52;
        swift_bridgeObjectRelease();
        v54 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v47 + 4, v47 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "SetupVirtualMeDevice: Anomalous condition - Duplicate VirtualMeDevice records found. Count %ld ", v47, 0xCu);
        swift_slowDealloc(v47, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v19, 2);
      }
      type metadata accessor for Transaction(0);
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.removeDuplicateVirtualMeOBRs", 58, 2, sub_1008C13D0, v42, (char *)&type metadata for () + 8);
      if (qword_1010EA428 == -1)
        goto LABEL_26;
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1010EA428, sub_100C48554);
LABEL_26:
    v48 = qword_1011B7F60;
    swift_retain();
    sub_100C4C0F8(2u, 0, 0);
    swift_release(v48);
    ((void (*)(char *, uint64_t))v3)(v8, v2);
    return;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7A18);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "SetupVirtualMeDevice: Not a LocationPublishing device. Not setting up OBR", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

}

void sub_1008AEA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 48);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_1010EA0A8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA0A8, sub_10098F82C);
LABEL_3:
  v8 = qword_1011B7A48;
  swift_retain();
  v9 = sub_10000D338();
  swift_release(v8);
  if ((v9 & 1) != 0)
  {
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.createVirtualMeOBR", 64, 2, sub_1008C1378, v1, (char *)&type metadata for () + 8);
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "SetupVirtualMeDevice: Not a LocationPublishing device. Not Creating VirtualMeDevice OBR", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
}

void sub_1008AEC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  NSObject *v18;
  uint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[24];

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v46 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v41 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime(0);
  v43 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v40 - v13;
  v15 = swift_allocBox(v4);
  v44 = v16;
  v45 = v7;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v47 = v6;
  v17(v16, 1, 1, v6);
  v18 = dispatch_group_create();
  dispatch_group_enter(v18);
  v42 = a2;
  v19 = *(_QWORD *)(a2 + 32);
  v20 = (_QWORD *)swift_allocObject(&unk_101098C50, 40, 7);
  v20[2] = v18;
  v20[3] = v15;
  v20[4] = a1;
  swift_retain();
  v21 = v18;
  v48 = v15;
  swift_retain();
  swift_retain();
  sub_1008320C4((uint64_t)sub_1008C13C4, (unint64_t)v20);
  swift_release(v19);
  v22 = swift_release(v20);
  static DispatchTime.now()(v22);
  + infix(_:_:)(v12, 120.0);
  v23 = *(void (**)(char *, uint64_t))(v43 + 8);
  v23(v12, v9);
  v24 = OS_dispatch_group.wait(timeout:)(v14) & 1;
  v23(v14, v9);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v24, 1) & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B7A18);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "SetupVirtualMeDevice: Timed out waiting to create OBR", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

  }
  v30 = v44;
  swift_beginAccess(v44, v49, 0, 0);
  v31 = v46;
  sub_10000F9B8(v30, v46, &qword_1010ED860);
  v32 = v45;
  v33 = v47;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v31, 1, v47) == 1)
  {
    sub_100004048(v31, &qword_1010ED860);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B7A18);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "SetupVirtualMeDevice: No OBR UUID. Not creating/checking for KeyAlignmentRecord", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
      swift_release(v48);

    }
    else
    {
      swift_release(v48);

    }
  }
  else
  {
    v39 = (uint64_t)v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v41, v31, v33);
    sub_1008AF640(v39);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v39, v33);
    swift_release(v48);
  }
}

void sub_1008AF0B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  NSObject *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];
  uint64_t v55;
  uint64_t v56;

  v53 = a4;
  v7 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v50 - v14;
  v16 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = swift_projectBox(a3);
  sub_10000F9B8(a1, (uint64_t)v18, (uint64_t *)&unk_101108050);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    v20 = *v18;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
    swift_errorRetain(v20);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = a2;
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v54[0] = v27;
      *(_DWORD *)v26 = 136315138;
      v55 = v20;
      swift_errorRetain(v20);
      v28 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v29 = String.init<A>(describing:)(&v55, v28);
      v55 = sub_100016940(v29, v30, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "SetupVirtualMeDevice: Failed to create VirtualMeDevice record %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      v31 = v26;
      a2 = v25;
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      swift_errorRelease(v20);
      swift_errorRelease(v20);
    }

    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    v42 = qword_1011B7F60;
    v54[0] = v20;
    swift_errorRetain(v20);
    swift_retain();
    v43 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v44 = String.init<A>(describing:)(v54, v43);
    sub_100C4C0F8(1u, v44, v45);
    swift_release(v42);
    swift_bridgeObjectRelease();
    swift_errorRelease(v20);
  }
  else
  {
    v52 = v19;
    sub_1000126EC((uint64_t)v18, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v32 = type metadata accessor for Logger(0);
    sub_10001A9E8(v32, (uint64_t)qword_1011B7A18);
    v33 = sub_10005972C((uint64_t)v15, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(12, -1);
      v51 = a2;
      v37 = (uint8_t *)v36;
      v38 = swift_slowAlloc(32, -1);
      v54[0] = v38;
      *(_DWORD *)v37 = 136315138;
      v50 = v37 + 4;
      v39 = UUID.uuidString.getter(v38);
      v55 = sub_100016940(v39, v40, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v50, v37 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "SetupVirtualMeDevice: VirtualMeDevice OBR created %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      v41 = v37;
      a2 = v51;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    }

    v46 = &v15[*(int *)(v10 + 20)];
    v47 = type metadata accessor for UUID(0);
    v48 = *(_QWORD *)(v47 - 8);
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v9, v46, v47);
    sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v9, 0, 1, v47);
    v49 = v52;
    swift_beginAccess(v52, v54, 1, 0);
    sub_100004084((uint64_t)v9, v49, &qword_1010ED860);
  }
  Transaction.capture()();
  dispatch_group_leave(a2);
}

void sub_1008AF640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(v2 + 48);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1010EA098, sub_10098F7D8);
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v2 + 32);
  swift_retain();
  sub_1008892B4((uint64_t)v10);
  swift_release(v17);
  v18 = type metadata accessor for KeyAlignmentRecord(0);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v10, 1, v18);
  sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F47D0);
  if (v19 == 1)
  {
    v20 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v20);
    *(&v29 - 2) = a1;
    *(&v29 - 1) = v2;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.createVirtualMeKeyAlignment", 73, 2, sub_1008C1360, &v29 - 4, (char *)&type metadata for () + 8);
    return;
  }
  if (qword_1010EA098 != -1)
    goto LABEL_10;
LABEL_5:
  v21 = type metadata accessor for Logger(0);
  sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v31[0] = v26;
    *(_DWORD *)v25 = 136315138;
    v27 = UUID.uuidString.getter(v26);
    v30 = sub_100016940(v27, v28, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "SetupVirtualMeDevice: KeyAlignmentRecord already exists for VirtualMeDevice %s", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

}

uint64_t sub_1008AF9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a3;
  v37 = a2;
  v4 = type metadata accessor for DispatchTime(0);
  v35 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v34 - v8;
  v10 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  __chkstk_darwin(v10);
  v12 = (_OWORD *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v15);
  v18 = (char *)v12 + v10[5];
  v36 = v14;
  v19 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v19(v18, v17, v13);
  v20 = (char *)v12 + v10[6];
  v21 = v37;
  v37 = v13;
  v19(v20, (char *)v21, v13);
  static Date.trustedNow.getter((uint64_t)v12 + v10[8]);
  *v12 = xmmword_100E22FC0;
  *(_QWORD *)((char *)v12 + v10[7]) = 1;
  v22 = dispatch_group_create();
  dispatch_group_enter(v22);
  v23 = *(_QWORD *)(v34 + 32);
  v24 = v22;
  swift_retain();
  swift_retain();
  sub_100872F5C((uint64_t)v12, 0, v23, v24, a1);
  swift_release(v23);

  v25 = swift_release(a1);
  static DispatchTime.now()(v25);
  + infix(_:_:)(v7, 120.0);
  v26 = *(void (**)(char *, uint64_t))(v35 + 8);
  v26(v7, v4);
  v27 = OS_dispatch_group.wait(timeout:)(v9) & 1;
  v26(v9, v4);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v27, 1) & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "SetupVirtualMeDevice: Timed out waiting to create KeyAlignmentRecord", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

  }
  else
  {
    v30 = v24;
  }

  sub_1000126B0((uint64_t)v12, type metadata accessor for KeyAlignmentRecord);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v17, v37);
}

void sub_1008AFCB4(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  dispatch_group_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a2;
  v5 = type metadata accessor for KeyAlignmentRecord(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v33 - v9;
  v11 = sub_10001A9A8(&qword_1011082B0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v13, &qword_1011082B0);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
  {
    v14 = *v13;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7A18);
    swift_errorRetain(v14);
    v16 = swift_errorRetain(v14);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v35 = v14;
      v36 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_errorRetain(v14);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v22 = String.init<A>(describing:)(&v35, v21);
      v35 = sub_100016940(v22, v23, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "SetupVirtualMeDevice: Failed to create KeyAlignmentRecord for VirtualMeDevice OBR %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_errorRelease(v14);
      swift_errorRelease(v14);
    }

    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    v32 = qword_1011B7F60;
    swift_retain();
    sub_100C4C0F8(9u, 0xD000000000000014, 0x8000000100EE9EC0);
    swift_release(v32);
    swift_errorRelease(v14);
  }
  else
  {
    sub_1000126EC((uint64_t)v13, (uint64_t)v10, type metadata accessor for KeyAlignmentRecord);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B7A18);
    v25 = sub_10005972C((uint64_t)v10, (uint64_t)v8, type metadata accessor for KeyAlignmentRecord);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v36 = v29;
      *(_DWORD *)v28 = 136315138;
      v33 = a3;
      v30 = UUID.uuidString.getter(v29);
      v35 = sub_100016940(v30, v31, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v8, type metadata accessor for KeyAlignmentRecord);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "SetupVirtualMeDevice: Created KeyAlignmentRecord for VirtualMeDevice OBR %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v8, type metadata accessor for KeyAlignmentRecord);
    }
    sub_1000126B0((uint64_t)v10, type metadata accessor for KeyAlignmentRecord);
  }
  Transaction.capture()();
  dispatch_group_leave(v34);
}

uint64_t sub_1008B016C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD aBlock[5];
  uint64_t v21;
  _QWORD *v22;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)(a2 + 48);
  v11 = swift_allocObject(&unk_101098C78, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_1008C1414;
  v21 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101098C90;
  v12 = _Block_copy(aBlock);
  swift_retain();
  v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v22 = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v21);
}

void sub_1008B0374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for OwnedBeaconRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v31 = (uint64_t)&v30 - v9;
  v10 = *(_QWORD *)(a1 + 32);
  swift_retain();
  v11 = sub_10080D3EC();
  swift_release(v10);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v16 = 134217984;
    v32 = v11[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SetupVirtualMeDevice: Found OBRs %ld", v16, 0xCu);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v17 = v11[2];
  if (v17 < 2)
    goto LABEL_14;
  swift_bridgeObjectRetain(v11);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (!os_log_type_enabled(v19, v20))
  {

    swift_bridgeObjectRelease();
    if (v11[2])
      goto LABEL_9;
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v21 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v21 = 134217984;
  v32 = v17;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v21 + 4, v21 + 12);
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v19, v20, "SetupVirtualMeDevice: Anomalous condition - Duplicate VirtualMeDevice records found. Count %ld ", v21, 0xCu);
  swift_slowDealloc(v21, -1, -1);

  if (!v11[2])
    goto LABEL_14;
LABEL_9:
  v22 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v23 = v31;
  v24 = sub_10005972C((uint64_t)v11 + v22, v31, type metadata accessor for OwnedBeaconRecord);
  __chkstk_darwin(v24);
  *(&v30 - 2) = v23;
  v25 = sub_10008B550((uint64_t (*)(char *))sub_10028F608, (unint64_t *)&v30 - 4, (uint64_t)v11);
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v30 = a2;
    v27 = v25 + v22;
    v28 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_10005972C(v27, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
      v29 = objc_autoreleasePoolPush();
      sub_1008B06FC(a1, (uint64_t)v8);
      objc_autoreleasePoolPop(v29);
      sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
      v27 += v28;
      --v26;
    }
    while (v26);
  }
  swift_bridgeObjectRelease();
  sub_1000126B0(v31, type metadata accessor for OwnedBeaconRecord);
LABEL_16:
  Transaction.capture()();
}

void sub_1008B06FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v27 - v12;
  v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  v15 = v14;
  sub_1008C0CA0(a2, a1, v15);

  static DispatchTime.now()(v16);
  + infix(_:_:)(v11, 60.0);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  v18 = OS_dispatch_group.wait(timeout:)(v13) & 1;
  v17(v13, v7);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v18, 1) & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B7A18);
    v20 = sub_10005972C(a2, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v31 = v24;
      *(_DWORD *)v23 = 136315138;
      v28 = v23 + 4;
      v25 = UUID.uuidString.getter(v24);
      v29 = sub_100016940(v25, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v28, v23 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "SetupVirtualMeDevice: Timed out waiting to remove duplicate OBR %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    }

  }
  else
  {

  }
}

uint64_t sub_1008B09DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t (*v36)(_QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v36 - v12;
  if (a1)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B7A18);
    v15 = sub_10005972C(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v37 = a4;
      v20 = v19;
      v39 = v19;
      *(_DWORD *)v18 = 136315138;
      v36 = a3;
      v21 = type metadata accessor for UUID(0);
      v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
      v38 = sub_100016940(v23, v24, &v39);
      a3 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SetupVirtualMeDevice: Failed to remove duplicate OBR %s", v18, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    }

  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7A18);
    v26 = sub_10005972C(a2, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v39 = v30;
      v37 = a4;
      *(_DWORD *)v29 = 136315138;
      v31 = type metadata accessor for UUID(0);
      v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      v38 = sub_100016940(v33, v34, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "SetupVirtualMeDevice: Successfully removed duplicate OBR %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    }

    a1 = 0;
  }
  return a3(a1);
}

uint64_t sub_1008B0DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD v13[8];

  v3 = v2;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7A18);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "shareKey: keyForSharingLocationToFriends", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v11);
  v13[2] = v3;
  v13[3] = a1;
  v13[4] = a2;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.keyForSharingLocation", 67, 2, sub_1008C01F0, v13, &type metadata for () + 1);
}

uint64_t sub_1008B0F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD aBlock[6];
  _QWORD *v25;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)(a2 + 48);
  v15 = (_QWORD *)swift_allocObject(&unk_101098930, 48, 7);
  v15[2] = a2;
  v15[3] = a1;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_1008C0210;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101098948;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v25 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v8, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_1008B1148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  os_log_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  void *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  os_log_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  __int128 aBlock;
  uint64_t (*v101)(uint64_t);
  void *v102;
  void (*v103)();
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;

  v95 = type metadata accessor for DispatchWorkItemFlags(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for DispatchQoS(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for DispatchQoS.QoSClass(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for HashAlgorithm(0);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v97 = *(_QWORD *)(v13 - 8);
  v98 = v13;
  __chkstk_darwin(v13);
  v96 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_10110BDD8);
  __chkstk_darwin(v15);
  v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1008B3914((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100004048((uint64_t)v17, &qword_10110BDD8);
    v22 = (_QWORD *)swift_allocObject(&unk_101098980, 48, 7);
    v22[2] = a3;
    v22[3] = a4;
    v22[4] = a2;
    v22[5] = a1;
    swift_retain_n(a4, 2);
    swift_retain_n(a2, 2);
    swift_retain_n(a1, 2);
    if ((sub_1008ADE48() & 1) != 0)
    {
      v23 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v23);
      *(&v79 - 4) = a1;
      *(&v79 - 3) = a3;
      v78 = a4;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.getKeysFromBeaconStore", 68, 2, sub_1008C022C, &v79 - 6, &type metadata for () + 1);
      Transaction.capture()();
    }
    else
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v56 = sub_10001A9E8(v98, (uint64_t)qword_1011B7A18);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "SetupVirtualMeDevice: Waiting on beaconStore to become available", v59, 2u);
        swift_slowDealloc(v59, -1, -1);
      }

      swift_retain();
      swift_retain();
      v60 = swift_retain();
      sub_100877B3C(v60, a1, (uint64_t)sub_1008C0220, (uint64_t)v22);
      swift_release();
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    v82 = a3;
    v84 = a4;
    v83 = a2;
    sub_1000126EC((uint64_t)v17, (uint64_t)v21, type metadata accessor for SecureLocationsCachedSharingKey);
    v24 = &v21[*(int *)(v18 + 24)];
    v25 = *((_OWORD *)v24 + 2);
    v26 = *(_OWORD *)v24;
    v106 = *((_OWORD *)v24 + 1);
    v107 = v25;
    v105 = v26;
    sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    v27 = (uint64_t)v21;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v28 = v98;
    v29 = sub_10001A9E8(v98, (uint64_t)qword_1011B7A18);
    v30 = v97;
    v31 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v96, v29, v28);
    sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    v32 = sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      v80 = v34;
      v81 = v33;
      v35 = swift_slowAlloc(22, -1);
      v36 = (_QWORD *)swift_slowAlloc(64, -1);
      v99 = v36;
      *(_DWORD *)v35 = 136315394;
      v108 = v106;
      aBlock = v106;
      v37 = sub_1002FD324();
      v38 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for PublicKey, v37);
      *(_QWORD *)&aBlock = sub_100016940(v38, v39, (uint64_t *)&v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease();
      sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      *(_WORD *)(v35 + 12) = 2080;
      v40 = v108;
      sub_100059DE8((uint64_t)&v108);
      v41 = sub_1007E6F8C(v40, *((uint64_t *)&v40 + 1));
      v43 = v42;
      v44 = v27;
      sub_1000ADA04((uint64_t)&v108);
      sub_1002F7394(v41, v43);
      v79 = v35 + 14;
      v45 = aBlock;
      v46 = v85;
      v47 = v86;
      (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v12, enum case for HashAlgorithm.sha256(_:), v86);
      v48 = Data.hash(algorithm:)(v12, v45, *((_QWORD *)&v45 + 1));
      v50 = v49;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v47);
      sub_10001BC14(v45, *((unint64_t *)&v45 + 1));
      *(_QWORD *)&aBlock = v48;
      *((_QWORD *)&aBlock + 1) = v50;
      v51 = sub_100153D50();
      v52 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for HashedAdvertisement, v51);
      v54 = v53;
      sub_10001BC14(v48, v50);
      *(_QWORD *)&aBlock = sub_100016940(v52, v54, (uint64_t *)&v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v79, v35 + 22);
      swift_bridgeObjectRelease();
      sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      v55 = v81;
      _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v80, "keysForFriends: Memory cached %s locationId: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v98);
      v27 = v44;
    }
    else
    {
      sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);

      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v28);
    }
    sub_10001F6FC();
    v62 = v88;
    v63 = v87;
    v64 = v89;
    (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v87, enum case for DispatchQoS.QoSClass.default(_:), v89);
    v65 = (void *)static OS_dispatch_queue.global(qos:)(v63);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
    v66 = swift_allocObject(&unk_1010989A8, 88, 7);
    v67 = v84;
    *(_QWORD *)(v66 + 16) = v82;
    *(_QWORD *)(v66 + 24) = v67;
    v68 = v106;
    *(_OWORD *)(v66 + 32) = v105;
    *(_OWORD *)(v66 + 48) = v68;
    *(_OWORD *)(v66 + 64) = v107;
    *(_QWORD *)(v66 + 80) = v83;
    v103 = sub_1008C02AC;
    v104 = v66;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v101 = sub_100016FB8;
    v102 = &unk_1010989C0;
    v69 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    v70 = sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    v71 = v90;
    static DispatchQoS.unspecified.getter(v70);
    v99 = _swiftEmptyArrayStorage;
    v72 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v73 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v74 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v75 = v93;
    v76 = v73;
    v77 = v95;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v99, v76, v74, v95, v72);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v71, v75, v69);
    _Block_release(v69);

    sub_1004D4410(&v105, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v75, v77);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v71, v92);
    swift_release();
    Transaction.capture()();
    return sub_1000126B0(v27, type metadata accessor for SecureLocationsCachedSharingKey);
  }
}

void sub_1008B1D5C(char a1, void (*a2)(void ***, void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[8];
  uint64_t v25;
  void *v26;
  void **aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  uint64_t (*v31)();
  uint64_t v32;

  if ((a1 & 1) != 0)
  {
    v8 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v8);
    v24[2] = a5;
    v24[3] = a2;
    v24[4] = a3;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.getKeysFromBeaconStore", 68, 2, sub_1008C2ED8, v24, &type metadata for () + 1);
LABEL_11:
    Transaction.capture()();
    return;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "keysForFriends: SecureLocations not setup. Cannot share keys", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  v14 = qword_1011B7F60;
  v15 = *(NSObject **)(qword_1011B7F60 + 16);
  v16 = (_QWORD *)swift_allocObject(&unk_101098BD8, 40, 7);
  v16[2] = v14;
  v16[3] = 0xD000000000000019;
  v16[4] = 0x8000000100EE9E50;
  v17 = swift_allocObject(&unk_101098C00, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_100555DCC;
  *(_QWORD *)(v17 + 24) = v16;
  v31 = sub_10005CBA4;
  v32 = v17;
  aBlock = _NSConcreteStackBlock;
  v28 = 1107296256;
  v29 = sub_10001D8B8;
  v30 = &unk_101098C18;
  v18 = _Block_copy(&aBlock);
  swift_retain_n(v14, 2);
  swift_retain();
  swift_release();
  dispatch_sync(v15, v18);
  _Block_release(v18);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v17, "", 110, 308, 38, 1);
  swift_release();
  swift_release();
  swift_release();
  if ((v15 & 1) == 0)
  {
    aBlock = 0;
    v28 = 0;
    v29 = 0;
    v30 = (void *)0xF000000000000000;
    v31 = 0;
    v32 = 0;
    type metadata accessor for SecureLocationsError(0);
    v20 = v19;
    v25 = 3;
    v21 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v22 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
    _BridgedStoredNSError.init(_:userInfo:)(&v26, &v25, v21, v20, v22);
    v23 = v26;
    a2(&aBlock, v26);

    goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_1008B20A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD aBlock[6];
  _QWORD *v25;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)(a2 + 48);
  v15 = (_QWORD *)swift_allocObject(&unk_1010989F8, 48, 7);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_1008C0334;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101098A10;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v25 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v8, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void sub_1008B22B8(uint64_t a1, uint64_t a2, void (*a3)(unsigned __int128 *, uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  NSObject *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t isEscapingClosureAtFileLocation;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  NSObject *v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  uint8_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  os_log_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int128 v133;
  void *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  unint64_t v146;
  Swift::String v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  os_log_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  void (*v180)(unsigned __int128 *, uint64_t);
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD v186[5];
  unsigned __int128 aBlock;
  unsigned __int128 v188;
  unsigned __int128 v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;

  v181 = a4;
  v180 = a3;
  v182 = a1;
  v175 = type metadata accessor for DispatchWorkItemFlags(0);
  v173 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v172 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = type metadata accessor for DispatchQoS(0);
  v171 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v170 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for DispatchQoS.QoSClass(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for HashAlgorithm(0);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = (_QWORD *)type metadata accessor for Logger(0);
  v166 = *(v183 - 1);
  __chkstk_darwin(v183);
  v165 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v10);
  v178 = (unint64_t)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = type metadata accessor for KeyAlignmentRecord(0);
  v12 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v176 = (uint64_t)&v149 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v14);
  v16 = (char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v179 = (uint64_t)&v149 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v20);
  v22 = (char *)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1008AE274((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    v27 = &qword_1010ED860;
    v28 = (uint64_t)v22;
LABEL_7:
    sub_100004048(v28, v27);
    v34 = (uint64_t)v183;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B7A18);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "keysForFriends: Can't get keys. Either VirtualMeDevice or KeyAlignmentRecord doesn't exist. ", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_retain();
    sub_100C4C0F8(8u, 0xD000000000000017, 0x8000000100EE9DF0);
    swift_release();
    v39 = qword_1011B7F60;
    v40 = *(NSObject **)(qword_1011B7F60 + 16);
    v41 = (_QWORD *)swift_allocObject(&unk_101098A48, 40, 7);
    v41[2] = v39;
    v41[3] = 0xD000000000000019;
    v41[4] = 0x8000000100EE9E10;
    v42 = swift_allocObject(&unk_101098A70, 32, 7);
    *(_QWORD *)(v42 + 16) = sub_100555DCC;
    *(_QWORD *)(v42 + 24) = v41;
    *(_QWORD *)&v189 = sub_10005CBA4;
    *((_QWORD *)&v189 + 1) = v42;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v188 = sub_10001D8B8;
    *((_QWORD *)&v188 + 1) = &unk_101098A88;
    v43 = _Block_copy(&aBlock);
    swift_retain_n(v39, 2);
    swift_retain();
    swift_release();
    dispatch_sync(v40, v43);
    _Block_release(v43);
    LOBYTE(v40) = swift_isEscapingClosureAtFileLocation(v42, "", 110, 308, 38, 1);
    swift_release();
    swift_release();
    swift_release();
    if ((v40 & 1) == 0)
    {
      aBlock = 0uLL;
      *(_QWORD *)&v188 = 0;
      *((_QWORD *)&v188 + 1) = 0xF000000000000000;
      v189 = 0uLL;
      type metadata accessor for SecureLocationsError(0);
      v45 = v44;
      v192 = 3;
      v46 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v47 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.init(_:userInfo:)(&v185, &v192, v46, v45, v47);
      v48 = (void *)v185;
      v180(&aBlock, v185);

LABEL_15:
      Transaction.capture()();
      return;
    }
    __break(1u);
    swift_once(&qword_1010EA098, sub_10098F7D8);
    v54 = sub_10001A9E8((uint64_t)v183, (uint64_t)qword_1011B7A18);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "keysForFriends: Error getting keys for meDeviceRecord", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }
    v88 = (uint64_t)v43;

    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    *(_QWORD *)&aBlock = v42;
    swift_retain();
    swift_errorRetain(v42);
    v58 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v59 = String.init<A>(describing:)(&aBlock, v58);
    sub_100C4C0F8(3u, v59, v60);
    swift_release();
    swift_bridgeObjectRelease();
    v87 = qword_1011B7F60;
    v61 = *(NSObject **)(qword_1011B7F60 + 16);
    v62 = (_QWORD *)swift_allocObject(&unk_101098AC0, 40, 7);
    v62[2] = v87;
    v62[3] = 0xD000000000000012;
    v62[4] = 0x8000000100EE9E30;
    v30 = swift_allocObject(&unk_101098AE8, 32, 7);
    *(_QWORD *)(v30 + 16) = sub_100555DCC;
    *(_QWORD *)(v30 + 24) = v62;
    *(_QWORD *)&v189 = sub_10005CBA4;
    *((_QWORD *)&v189 + 1) = v30;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v188 = sub_10001D8B8;
    *((_QWORD *)&v188 + 1) = &unk_101098B00;
    v63 = _Block_copy(&aBlock);
    v83 = *((_QWORD *)&v189 + 1);
    swift_retain_n(v87, 2);
    swift_retain();
    swift_release();
    dispatch_sync(v61, v63);
    _Block_release(v63);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v30, "", 110, 308, 38, 1);
    swift_release();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      sub_10001F6FC();
      v64 = v168;
      v65 = v167;
      v66 = v169;
      (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v167, enum case for DispatchQoS.QoSClass.default(_:), v169);
      v67 = (void *)static OS_dispatch_queue.global(qos:)(v65);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
      v68 = (_QWORD *)swift_allocObject(&unk_101098B38, 40, 7);
      v69 = v181;
      v68[2] = v180;
      v68[3] = v69;
      v68[4] = v42;
      *(_QWORD *)&v189 = sub_1008C1258;
      *((_QWORD *)&v189 + 1) = v68;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v188 = sub_100016FB8;
      *((_QWORD *)&v188 + 1) = &unk_101098B50;
      v70 = _Block_copy(&aBlock);
      swift_retain();
      v71 = swift_errorRetain(v42);
      v72 = v170;
      static DispatchQoS.unspecified.getter(v71);
      v185 = (uint64_t)_swiftEmptyArrayStorage;
      v73 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v74 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v75 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v76 = v172;
      v77 = v74;
      v78 = v175;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v185, v77, v75, v175, v73);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v72, v76, v70);
      _Block_release(v70);

      swift_errorRelease(v42);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v76, v78);
      (*(void (**)(char *, uint64_t))(v171 + 8))(v72, v174);
      sub_1000126B0(v176, type metadata accessor for KeyAlignmentRecord);
      sub_1000126B0(v18, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v88, v161);
LABEL_29:
      swift_release();
      goto LABEL_15;
    }
    __break(1u);
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  v29 = v24;
  swift_retain();
  sub_10080B950((uint64_t)v26, (uint64_t)v16);
  swift_release();
  v30 = (uint64_t)v26;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v23);
    v27 = (uint64_t *)&unk_1010F47C0;
    v28 = (uint64_t)v16;
    goto LABEL_7;
  }
  v160 = v29;
  v161 = v23;
  v18 = v179;
  sub_1000126EC((uint64_t)v16, v179, type metadata accessor for OwnedBeaconRecord);
  v31 = a2;
  swift_retain();
  v32 = v178;
  sub_1008892B4(v178);
  swift_release();
  v33 = v177;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v12 + 48))(v32, 1, v177) == 1)
  {
    sub_1000126B0(v18, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v26, v161);
    v27 = (uint64_t *)&unk_1010F47D0;
    v28 = v32;
    goto LABEL_7;
  }
  v49 = v176;
  sub_1000126EC(v32, v176, type metadata accessor for KeyAlignmentRecord);
  v50 = *(_QWORD *)(v49 + *(int *)(v33 + 28));
  v51 = *(_QWORD *)(a2 + 32);
  v52 = *(_QWORD *)(v51 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v53 = type metadata accessor for BeaconKeyManager(0);
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v51, v52, &type metadata for () + 1, v53);
  sub_100DF6F90(v18, v50, 0, 0, 0xF000000000000000, &aBlock);
  v156 = v50;
  v154 = 0;
  v158 = v31;
  v80 = *((_QWORD *)&aBlock + 1);
  v79 = aBlock;
  v81 = *((_QWORD *)&v188 + 1);
  v82 = v188;
  v83 = *((_QWORD *)&v189 + 1);
  v84 = v189;
  v85 = v191;
  v155 = v190;
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = v79;
  aBlock = __PAIR128__(v80, v79);
  v87 = v80;
  v88 = v82;
  v188 = __PAIR128__(v81, v82);
  v178 = v81;
  v42 = v84;
  v189 = __PAIR128__(v83, v84);
  sub_10001BC14(v155, v85);
  if (qword_1010EA098 != -1)
LABEL_32:
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v89 = (uint64_t)v183;
  v90 = sub_10001A9E8((uint64_t)v183, (uint64_t)qword_1011B7A18);
  (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v165, v90, v89);
  v91 = isEscapingClosureAtFileLocation;
  sub_10001BD08(isEscapingClosureAtFileLocation, v87);
  v92 = v178;
  sub_10001BBBC(v88, v178);
  sub_10001BD08(v42, v83);
  sub_10001BD08(isEscapingClosureAtFileLocation, v87);
  sub_10001BBBC(v88, v92);
  sub_10001BD08(v42, v83);
  sub_10001BD08(isEscapingClosureAtFileLocation, v87);
  sub_10001BBBC(v88, v92);
  sub_10001BD08(v42, v83);
  sub_10001BD08(isEscapingClosureAtFileLocation, v87);
  sub_10001BBBC(v88, v92);
  v93 = sub_10001BD08(v42, v83);
  v94 = Logger.logObject.getter(v93);
  LODWORD(v155) = static os_log_type_t.default.getter(v94);
  v95 = os_log_type_enabled(v94, (os_log_type_t)v155);
  v96 = v87;
  v157 = v30;
  v177 = v87;
  v159 = isEscapingClosureAtFileLocation;
  if (!v95)
  {
    sub_10001EF3C(isEscapingClosureAtFileLocation, v87);
    v126 = v89;
    v123 = v42;
    v127 = v178;
    sub_10001BC14(v88, v178);
    sub_10001EF3C(v123, v83);
    sub_10001EF3C(v91, v87);
    sub_10001BC14(v88, v127);
    sub_10001EF3C(v123, v83);
    sub_10001EF3C(v91, v87);
    sub_10001BC14(v88, v127);
    sub_10001EF3C(v123, v83);
    sub_10001EF3C(v91, v87);
    sub_10001BC14(v88, v127);
    sub_10001EF3C(v123, v83);

    (*(void (**)(char *, uint64_t))(v166 + 8))(v165, v126);
    goto LABEL_28;
  }
  v151 = v94;
  v97 = swift_slowAlloc(42, -1);
  v150 = swift_slowAlloc(64, -1);
  v192 = v150;
  *(_DWORD *)v97 = 141558787;
  v185 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v97 + 4, v97 + 12);
  v98 = v178;
  *(_WORD *)(v97 + 12) = 2081;
  v153 = v97 + 14;
  v185 = v88;
  v186[0] = v98;
  v99 = sub_1002FD324();
  v100 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for PublicKey, v99);
  v185 = sub_100016940(v100, v101, &v192);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v153, v97 + 22);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v91, v87);
  sub_10001BC14(v88, v98);
  sub_10001EF3C(v42, v83);
  sub_10001EF3C(v91, v87);
  sub_10001BC14(v88, v98);
  v152 = v42;
  v153 = v83;
  sub_10001EF3C(v42, v83);
  *(_WORD *)(v97 + 22) = 2160;
  v185 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v97 + 24, v97 + 32);
  v102 = (uint8_t *)v97;
  *(_WORD *)(v97 + 32) = 2081;
  sub_10001BBBC(v88, v98);
  v103 = v154;
  v104 = sub_1007E6F8C(v88, v98);
  if (!v103)
  {
    v106 = v104;
    v107 = v105;
    sub_10001BC14(v88, v178);
    sub_1002F7394(v106, v107);
    v108 = v102;
    v109 = v102 + 34;
    v110 = v185;
    v111 = v186[0];
    v112 = v163;
    v113 = v162;
    v114 = v164;
    (*(void (**)(char *, _QWORD, uint64_t))(v163 + 104))(v162, enum case for HashAlgorithm.sha256(_:), v164);
    v115 = Data.hash(algorithm:)(v113, v110, v111);
    v117 = v116;
    (*(void (**)(char *, uint64_t))(v112 + 8))(v113, v114);
    sub_10001BC14(v110, v111);
    v185 = v115;
    v186[0] = v117;
    v118 = sub_100153D50();
    v119 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for HashedAdvertisement, v118);
    v121 = v120;
    sub_10001BC14(v115, v117);
    v185 = sub_100016940(v119, v121, &v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v109, v108 + 42);
    swift_bridgeObjectRelease();
    v91 = v159;
    v96 = v177;
    sub_10001EF3C(v159, v177);
    v122 = v178;
    sub_10001BC14(v88, v178);
    v123 = v152;
    v83 = v153;
    sub_10001EF3C(v152, v153);
    sub_10001EF3C(v91, v96);
    sub_10001BC14(v88, v122);
    sub_10001EF3C(v123, v83);
    v124 = v151;
    _os_log_impl((void *)&_mh_execute_header, v151, (os_log_type_t)v155, "keysForFriends: from BeaconStore %{private,mask.hash}s locationId: %{private,mask.hash}s", v108, 0x2Au);
    v125 = v150;
    swift_arrayDestroy(v150, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1, -1);
    swift_slowDealloc(v108, -1, -1);

    (*(void (**)(char *, _QWORD *))(v166 + 8))(v165, v183);
LABEL_28:
    sub_1008B4098((uint64_t)&aBlock, v156);
    sub_10001F6FC();
    v128 = v168;
    v129 = v167;
    v130 = v169;
    (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v167, enum case for DispatchQoS.QoSClass.default(_:), v169);
    v183 = (_QWORD *)static OS_dispatch_queue.global(qos:)(v129);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v130);
    v131 = swift_allocObject(&unk_101098B88, 80, 7);
    v132 = v181;
    *(_QWORD *)(v131 + 16) = v180;
    *(_QWORD *)(v131 + 24) = v132;
    v133 = v188;
    *(_OWORD *)(v131 + 32) = aBlock;
    *(_OWORD *)(v131 + 48) = v133;
    *(_OWORD *)(v131 + 64) = v189;
    v186[3] = sub_1008C12F8;
    v186[4] = v131;
    v185 = (uint64_t)_NSConcreteStackBlock;
    v186[0] = 1107296256;
    v186[1] = sub_100016FB8;
    v186[2] = &unk_101098BA0;
    v134 = _Block_copy(&v185);
    sub_10001BD08(v91, v96);
    v135 = v178;
    sub_10001BBBC(v88, v178);
    sub_10001BD08(v123, v83);
    v136 = swift_retain();
    v137 = v83;
    v138 = v170;
    static DispatchQoS.unspecified.getter(v136);
    v192 = (uint64_t)_swiftEmptyArrayStorage;
    v139 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v140 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v141 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v142 = v172;
    v143 = v140;
    v144 = v175;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v192, v143, v141, v175, v139);
    v145 = v183;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v138, v142, v134);
    _Block_release(v134);

    sub_10001EF3C(v159, v177);
    sub_10001BC14(v88, v135);
    sub_10001EF3C(v123, v137);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v142, v144);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v138, v174);
    sub_1000126B0(v176, type metadata accessor for KeyAlignmentRecord);
    sub_1000126B0(v179, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v157, v161);
    goto LABEL_29;
  }
  sub_10001EF3C(v159, v177);
  v146 = v178;
  sub_10001BC14(v88, v178);
  sub_10001EF3C(v152, v153);
  sub_10001BC14(v88, v146);
  v185 = 0;
  v186[0] = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  v147._countAndFlagsBits = 0xD000000000000021;
  v147._object = (void *)0x8000000100EC7AC0;
  String.append(_:)(v147);
  v184 = v103;
  v148 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  _print_unlocked<A, B>(_:_:)(&v184, &v185, v148, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v185, v186[0], "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
  __break(1u);
}

uint64_t sub_1008B3914@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  NSObject *v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78[32];

  v73 = a1;
  v68 = type metadata accessor for URL(0);
  v71 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = (char *)&v60 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for UUID(0);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v64 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_10001A9A8(&qword_10110BDD8);
  v3 = __chkstk_darwin(v70);
  v69 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v60 - v5;
  v7 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v15 = type metadata accessor for Logger(0);
  v72 = sub_10001A9E8(v15, (uint64_t)qword_1011B7A18);
  v16 = Logger.logObject.getter(v72);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "shareKey: getCachedSharingKeys", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = v74;
  v20 = *(void **)(v74 + 48);
  *v14 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v22 = v19 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
  swift_beginAccess(v19 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, v78, 0, 0);
  sub_10000F9B8(v22, (uint64_t)v6, &qword_10110BDD8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v6, &qword_10110BDD8);
    v23 = sub_10001A9A8(&qword_1010F6350);
    v24 = OS_dispatch_queue.sync<A>(execute:)(sub_100449590, v19, v23);
    v25 = v77;
    if (v77)
    {
      v61 = v22;
      v62 = 0;
      v26 = v76;
      v27 = *(_QWORD *)(v19 + 32);
      swift_retain();
      v28 = String.utf8Data.getter(v26, v25);
      v30 = v29;
      swift_bridgeObjectRelease();
      v76 = v28;
      v77 = v30;
      v31 = sub_100035530();
      v11 = (uint64_t)v64;
      DataProtocol.stableUUID.getter(&type metadata for Data, v31);
      sub_10001BC14(v28, v30);
      v63 = v27;
      v10 = *(char **)(v27 + 160);
      if (qword_1010E9FE0 == -1)
      {
LABEL_9:
        v32 = v68;
        v33 = sub_10001A9E8(v68, (uint64_t)qword_1011B7890);
        v34 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v66, v33, v32);
        v35._object = (void *)0x8000000100ED68C0;
        v35._countAndFlagsBits = 0xD000000000000014;
        prohibitAsyncContext(functionName:)(v35);
        v76 = v7;
        v36 = sub_10001A9A8(&qword_10110BE10);
        v37 = String.init<A>(describing:)(&v76, v36);
        v39 = v38;
        v40 = objc_autoreleasePoolPush();
        __chkstk_darwin(v40);
        *(&v60 - 6) = (uint64_t)v10;
        *(&v60 - 5) = v11;
        *(&v60 - 4) = (uint64_t)v34;
        *(&v60 - 3) = v37;
        *(&v60 - 2) = v39;
        v41 = (uint64_t)v69;
        OS_dispatch_queue.sync<A>(execute:)(sub_1008C01D0, &v60 - 8, v70);
        objc_autoreleasePoolPop(v40);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v34, v32);
        v42 = v41;
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v11, v67);
        v43 = v61;
        swift_beginAccess(v61, &v76, 33, 0);
        sub_100004084(v41, v43, &qword_10110BDD8);
        swift_endAccess(&v76);
        v44 = swift_retain_n(v19, 2);
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.default.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          v47 = (uint8_t *)swift_slowAlloc(12, -1);
          v48 = swift_slowAlloc(32, -1);
          v76 = v48;
          *(_DWORD *)v47 = 136315138;
          sub_10000F9B8(v43, v42, &qword_10110BDD8);
          v49 = String.init<A>(describing:)(v42, v70);
          v75 = sub_100016940(v49, v50, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v47 + 4, v47 + 12);
          swift_release_n(v19, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "shareKey: Returning localstorage cached sharing keys %s", v47, 0xCu);
          swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1, -1);
          swift_slowDealloc(v47, -1, -1);

        }
        else
        {

          swift_release_n(v19, 2);
        }
        return sub_10000F9B8(v43, v73, &qword_10110BDD8);
      }
LABEL_20:
      swift_once(&qword_1010E9FE0, sub_1008AC5B8);
      goto LABEL_9;
    }
    v57 = Logger.logObject.getter(v24);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, (os_log_type_t)v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v58, "shareKey: no myPersonID", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v73, 1, 1, v7);
  }
  else
  {
    v51 = sub_1000126EC((uint64_t)v6, (uint64_t)v10, type metadata accessor for SecureLocationsCachedSharingKey);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.debug.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "shareKey: returning memory cached sharing keys", v54, 2u);
      swift_slowDealloc(v54, -1, -1);
    }

    v55 = v73;
    sub_1000126EC((uint64_t)v10, v73, type metadata accessor for SecureLocationsCachedSharingKey);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v55, 0, 1, v7);
  }
}

void sub_1008B4098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v3 = v2;
  v44 = a2;
  v5 = sub_10001A9A8(&qword_10110BDD8);
  v6 = __chkstk_darwin(v5);
  v45 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - v8;
  v10 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for SecureLocationsCachedSharingKey(0);
  v43 = *((_QWORD *)v13 - 1);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v3 + 48);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v22 = sub_10001A9A8(&qword_1010F6350);
  OS_dispatch_queue.sync<A>(execute:)(sub_100449590, v3, v22);
  if (v47)
  {
    v23 = String.utf8Data.getter(v46, v47);
    v25 = v24;
    swift_bridgeObjectRelease();
    v46 = v23;
    v47 = v25;
    v26 = sub_100035530();
    DataProtocol.stableUUID.getter(&type metadata for Data, v26);
    sub_10001BC14(v23, v25);
    sub_1004D4410((_QWORD *)a1, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    if (qword_1010E9FE0 == -1)
    {
LABEL_4:
      v27 = type metadata accessor for URL(0);
      v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7890);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v15, v28, v27);
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v15[v13[5]], v12, v42);
      v29 = &v15[v13[6]];
      v30 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v29 = *(_OWORD *)a1;
      *((_OWORD *)v29 + 1) = v30;
      *((_OWORD *)v29 + 2) = *(_OWORD *)(a1 + 32);
      *(_QWORD *)&v15[v13[7]] = v44;
      sub_10005972C((uint64_t)v15, (uint64_t)v9, type metadata accessor for SecureLocationsCachedSharingKey);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v43 + 56))(v9, 0, 1, v13);
      v31 = (uint64_t)v9;
      v32 = v45;
      sub_100005CF0(v31, v45, &qword_10110BDD8);
      v33 = v3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
      swift_beginAccess(v3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, &v46, 33, 0);
      sub_100004084(v32, v33, &qword_10110BDD8);
      swift_endAccess(&v46);
      v34 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v34);
      *(&v40 - 2) = v3;
      *(&v40 - 1) = (uint64_t)v15;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.updateCachedKey", 61, 2, sub_1008C01B0, &v40 - 4, &type metadata for () + 1);
      sub_1000126B0((uint64_t)v15, type metadata accessor for SecureLocationsCachedSharingKey);
      return;
    }
LABEL_11:
    swift_once(&qword_1010E9FE0, sub_1008AC5B8);
    goto LABEL_4;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v35 = type metadata accessor for Logger(0);
  v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B7A18);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "shareKey: Unable to get myPersonID to update cachedSharingKeys", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

}

uint64_t sub_1008B4504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  swift_retain();
  sub_100CAA68C(a3, (uint64_t)sub_1008C01C8, a1);
  swift_release();
  return swift_release();
}

void sub_1008B456C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = sub_10001A9A8(&qword_10110BE08);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v4, &qword_10110BE08);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 1)
  {
    v5 = *v4;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7A18);
    swift_errorRetain(v5);
    v7 = swift_errorRetain(v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v20 = v5;
      v21 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_errorRetain(v5);
      v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v13 = String.init<A>(describing:)(&v20, v12);
      v20 = sub_100016940(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "shareKey: Error saving sharing keys locally %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7A18);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "shareKey: Successfully saved sharing keys locally", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    sub_100004048((uint64_t)v4, &qword_10110BE08);
  }
  Transaction.capture()();
}

void sub_1008B4878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  const char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint32_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v56 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_10110BDD8);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v1 + 48);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    v20 = type metadata accessor for SecureLocationsCachedSharingKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13, 1, 1, v20);
    v21 = v1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
    swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, &v57, 33, 0);
    sub_100004084((uint64_t)v13, v21, &qword_10110BDD8);
    swift_endAccess(&v57);
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7A18);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "shareKey: Invalidated memory cached key", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = sub_10001A9A8(&qword_1010F6350);
  v28 = OS_dispatch_queue.sync<A>(execute:)(sub_100449590, v1, v27);
  v29 = v58;
  if (v58)
  {
    v30 = v57;
    v31 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v10, 1, 1, v31);
    v32 = (_QWORD *)swift_allocObject(&unk_101098908, 40, 7);
    v32[2] = 0;
    v32[3] = 0;
    v32[4] = v1;
    swift_retain();
    sub_100691AC0((uint64_t)v10, (uint64_t)&unk_10110BDF8, (uint64_t)v32);
    swift_release();
    v33 = *(_QWORD *)(v1 + 32);
    swift_retain();
    v34 = String.utf8Data.getter(v30, v29);
    v36 = v35;
    swift_bridgeObjectRelease();
    v57 = v34;
    v58 = v36;
    v37 = sub_100035530();
    DataProtocol.stableUUID.getter(&type metadata for Data, v37);
    sub_10001BC14(v34, v36);
    v38 = *(_QWORD *)(v33 + 160);
    if (qword_1010E9FE0 != -1)
      swift_once(&qword_1010E9FE0, sub_1008AC5B8);
    v39 = sub_10001A9E8(v2, (uint64_t)qword_1011B7890);
    v40 = v56;
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 16))(v4, v39, v2);
    __chkstk_darwin(v41);
    *(&v53 - 4) = v38;
    *(&v53 - 3) = (uint64_t)v7;
    *(&v53 - 2) = (uint64_t)v4;
    OS_dispatch_queue.sync<A>(execute:)(sub_100143FA8, &v53 - 6, &type metadata for Bool);
    v42 = v57;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v2);
    swift_release();
    v43 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v7, v55);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v46 = 67109120;
      LODWORD(v57) = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 4, v46 + 4, v46 + 8);
      v47 = "shareKey: Removed localstorage cached sharing key %{BOOL}d";
      v48 = v44;
      v49 = v45;
      v50 = v46;
      v51 = 8;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v48, v49, v47, v50, v51);
      swift_slowDealloc(v46, -1, -1);
    }
  }
  else
  {
    v44 = Logger.logObject.getter(v28);
    v52 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v52))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      v47 = "shareKey: unable to get myPersonID to invalidate localstorage cached keys";
      v48 = v44;
      v49 = v52;
      v50 = v46;
      v51 = 2;
      goto LABEL_12;
    }
  }

}

uint64_t sub_1008B4DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4[8] = a4;
  v5 = type metadata accessor for UUID(0);
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v4[12] = v7;
  v8 = sub_10001A9A8(&qword_10110BE00);
  *v7 = v4;
  v7[1] = sub_1008B4E7C;
  return unsafeBlocking<A>(_:)(v4 + 4, sub_1008B5300, 0, v8);
}

uint64_t sub_1008B4E7C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_1008B4ED0, 0, 0);
}

uint64_t sub_1008B4ED0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;

  v1 = v0[4];
  if ((v0[5] & 1) == 0)
  {
    v11 = *(_QWORD *)(v1 + 16);
    v12 = _swiftEmptyArrayStorage;
    if (!v11)
    {
LABEL_15:
      swift_retain();
      KeyedThrottle.clearThrottleForKeysExcept(keys:)((Swift::OpaquePointer)v12);
      sub_1000FE214(v1, 0);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    v34 = v0[10];
    v38 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v11, 0);
    v12 = _swiftEmptyArrayStorage;
    v14 = sub_1003B2D14(v1);
    v16 = v15 & 1;
    v35 = v1 + 56;
    v33 = v1;
    while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(v1 + 32))
    {
      if (((*(_QWORD *)(v35 + (((unint64_t)v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_20;
      if (*(_DWORD *)(v1 + 36) != (_DWORD)v13)
        goto LABEL_21;
      v36 = v16;
      v37 = v13;
      v17 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 40 * v14);
      v18 = v17[2];
      v19 = v0;
      v20 = v17[3];
      v21 = v17[4];
      swift_bridgeObjectRetain(v17[1]);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v21);
      v22 = String.utf8Data.getter(v20, v21);
      v24 = v23;
      v19[2] = v22;
      v19[3] = v23;
      v25 = sub_100035530();
      DataProtocol.stableUUID.getter(&type metadata for Data, v25);
      sub_10001BC14(v22, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = v12;
      v27 = v12[2];
      v26 = v12[3];
      if (v27 >= v26 >> 1)
      {
        sub_10009A578(v26 > 1, v27 + 1, 1);
        v12 = v38;
      }
      v28 = v19[11];
      v29 = v19[9];
      v12[2] = v27 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v27, v28, v29);
      v1 = v33;
      v30 = sub_1003B2DB8(v14, v37, v36 & 1, v33);
      v14 = v30;
      v16 = v31 & 1;
      --v11;
      v0 = v19;
      if (!v11)
      {
        sub_1000FE2A4(v30, v13, v16);
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_errorRetain(v0[4]);
  if (qword_1010EA098 != -1)
LABEL_22:
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7A18);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (_QWORD *)swift_slowAlloc(32, -1);
    v38 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[6] = v1;
    swift_errorRetain(v1);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(v0 + 6, v8);
    v0[7] = sub_100016940(v9, v10, (uint64_t *)&v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    sub_1000FE214(v1, 1);
    sub_1000FE214(v1, 1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to get follower handles %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    sub_1000FE214(v1, 1);
  }
  else
  {
    sub_1000FE214(v1, 1);
    sub_1000FE214(v1, 1);
    swift_errorRelease(v1);

  }
  sub_1000FE214(v1, 1);
LABEL_18:
  swift_task_dealloc(v0[11]);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1008B5300@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[6];
  uint64_t v9;

  v2 = sub_10001A9A8(&qword_1010FA368);
  unsafeFromAsyncTask<A>(_:)(&unk_10110C0F0, 0, v2);
  v3 = v9;
  v4 = qword_1010E9FF8;
  swift_bridgeObjectRetain(v9);
  if (v4 != -1)
    v5 = swift_once(&qword_1010E9FF8, sub_1008CC198);
  __chkstk_darwin(v5);
  v8[2] = v9;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D6408, v8, v6, &type metadata for () + 1, &type metadata for () + 1);
  result = sub_1000FE214(v3, 0);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1008B540C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _BYTE v30[24];

  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v4);
  v8 = &v30[-v7 - 8];
  v9 = dispatch_group_create();
  dispatch_group_enter(v9);
  v10 = (_QWORD *)swift_allocObject(&unk_1010988B8, 64, 7);
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = 0;
  v10[6] = 0;
  v10[7] = 0;
  v10[5] = 0xF000000000000000;
  v11 = swift_allocObject(&unk_1010988E0, 32, 7);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  swift_retain();
  v12 = v9;
  sub_1008B0DEC((uint64_t)sub_1008C0128, v11);
  v13 = swift_release();
  static DispatchTime.now()(v13);
  + infix(_:_:)(v6, 60.0);
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v6, v2);
  v15 = OS_dispatch_group.wait(timeout:)(v8) & 1;
  v14(v8, v2);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v15, 1) & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7A18);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "keysForFriends: sync - timed out waiting for keys", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
      v21 = v12;
      v12 = v18;
    }
    else
    {
      v21 = v18;
    }

  }
  swift_beginAccess(v10 + 2, v30, 0, 0);
  v22 = v10[2];
  v23 = v10[3];
  v24 = v10[4];
  v25 = v10[5];
  v26 = v10[6];
  v27 = v10[7];
  sub_1008BFF38(v22, v23, v24, v25, v26, v27, (void (*)(void))sub_10005CB9C, (void (*)(uint64_t, unint64_t))sub_10001BBBC, (uint64_t (*)(uint64_t, uint64_t))sub_10001BD08);
  result = swift_release();
  *a1 = v22;
  a1[1] = v23;
  a1[2] = v24;
  a1[3] = v25;
  a1[4] = v26;
  a1[5] = v27;
  return result;
}

void sub_1008B56AC(uint64_t a1, uint64_t a2, _QWORD *a3, NSObject *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v7 = (uint64_t)(a3 + 2);
  swift_beginAccess(a3 + 2, v14, 1, 0);
  v8 = a3[2];
  v9 = a3[3];
  v10 = a3[4];
  v11 = a3[5];
  v13 = a3[6];
  v12 = a3[7];
  sub_100005CF0(a1, v7, &qword_1010FA1E0);
  sub_1008BFEEC(a1, (void (*)(void))sub_10005CB9C, (void (*)(uint64_t, unint64_t))sub_10001BBBC, (uint64_t (*)(uint64_t, uint64_t))sub_10001BD08);
  sub_1008BFF38(v8, v9, v10, v11, v13, v12, (void (*)(void))sub_1000FC25C, (void (*)(uint64_t, unint64_t))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001EF3C);
  dispatch_group_leave(a4);
}

uint64_t sub_1008B5790(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Swift::String v38;
  BOOL v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[3];
  _OWORD v72[2];

  v63 = a5;
  v64 = a6;
  v15 = type metadata accessor for HashAlgorithm(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005CF0(a1, (uint64_t)&v68, &qword_1010FA1E0);
  if (*((_QWORD *)&v69 + 1) >> 60 == 15)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a2);
    v20 = swift_errorRetain(a2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v71[0] = v24;
      *(_DWORD *)v23 = 136315394;
      *(_QWORD *)&v72[0] = sub_100016940(0xD000000000000042, 0x8000000100EE9FC0, (uint64_t *)v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, (char *)v72 + 8, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2080;
      *(_QWORD *)&v72[0] = a2;
      swift_errorRetain(a2);
      v25 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
      v26 = String.init<A>(describing:)(v72, v25);
      *(_QWORD *)&v72[0] = sub_100016940(v26, v27, (uint64_t *)v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, (char *)v72 + 8, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "shareKey: Error getting key for %s, %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    return a8(a2);
  }
  else
  {
    v60[1] = a7;
    v62 = a9;
    v71[0] = v68;
    v71[1] = v69;
    v71[2] = v70;
    v72[0] = v69;
    v28 = v69;
    v61 = a1;
    sub_1008BFEEC(a1, (void (*)(void))sub_10005CB9C, (void (*)(uint64_t, unint64_t))sub_10001BBBC, (uint64_t (*)(uint64_t, uint64_t))sub_10001BD08);
    sub_100059DE8((uint64_t)v72);
    v29 = sub_1007E6F8C(v28, *((uint64_t *)&v28 + 1));
    v31 = v30;
    v32 = a8;
    sub_1000ADA04((uint64_t)v72);
    sub_1002F7394(v29, v31);
    v33 = v67[0];
    v34 = v67[1];
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for HashAlgorithm.sha256(_:), v15);
    v35 = Data.hash(algorithm:)(v18, v33, v34);
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_10001BC14(v33, v34);
    v38 = Data.base64EncodedString(options:)(0);
    sub_10001BC14(v35, v37);
    v39 = v38._countAndFlagsBits == a3 && v38._object == a4;
    if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(v38._countAndFlagsBits, v38._object, a3, a4, 0) & 1) != 0)
    {
      v40 = v32;
      swift_bridgeObjectRelease();
      v41 = v61;
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v42 = type metadata accessor for Logger(0);
      v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B7A18);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.debug.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "shareKey: all good - subscribedId is same as currentLocationId.", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

      v40(0);
      return sub_1008BFEEC(v41, (void (*)(void))sub_1000FC25C, (void (*)(uint64_t, unint64_t))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001EF3C);
    }
    else
    {
      v48 = (uint64_t)v32;
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v49 = type metadata accessor for Logger(0);
      sub_10001A9E8(v49, (uint64_t)qword_1011B7A18);
      swift_bridgeObjectRetain_n(a4, 2);
      v50 = v64;
      swift_bridgeObjectRetain_n(v64, 2);
      swift_bridgeObjectRetain(v38._object);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc(32, -1);
        v60[0] = swift_slowAlloc(96, -1);
        v67[0] = v60[0];
        *(_DWORD *)v54 = 136315650;
        swift_bridgeObjectRetain(a4);
        v65 = sub_100016940(a3, (unint64_t)a4, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v54 + 4, v54 + 12);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v54 + 12) = 2080;
        swift_bridgeObjectRetain(v38._object);
        v65 = sub_100016940(v38._countAndFlagsBits, (unint64_t)v38._object, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease_n(v38._object, 3);
        *(_WORD *)(v54 + 22) = 2080;
        swift_bridgeObjectRetain(v50);
        v55 = v63;
        v65 = sub_100016940(v63, v50, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v54 + 24, v54 + 32);
        swift_bridgeObjectRelease_n(v50, 3);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "shareKey: locationId mismatch. subscribedId %s current %s Sending current keys to %s", (uint8_t *)v54, 0x20u);
        v56 = v60[0];
        swift_arrayDestroy(v60[0], 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v54, -1, -1);

        v57 = v62;
      }
      else
      {

        swift_bridgeObjectRelease_n(v50, 2);
        swift_bridgeObjectRelease_n(v38._object, 2);
        swift_bridgeObjectRelease_n(a4, 2);
        v57 = v62;
        v55 = v63;
      }
      v58 = sub_10001A9A8(&qword_101106C20);
      v59 = swift_allocObject(v58, 48, 7);
      *(_OWORD *)(v59 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v59 + 32) = v55;
      *(_QWORD *)(v59 + 40) = v50;
      swift_bridgeObjectRetain(v50);
      sub_1008B601C(v59, (uint64_t)_swiftEmptyDictionarySingleton, 0, v48, v57);
      swift_bridgeObjectRelease();
      if (qword_1010EA428 != -1)
        swift_once(&qword_1010EA428, sub_100C48554);
      swift_retain();
      sub_100C4C864();
      sub_1008BFEEC(v61, (void (*)(void))sub_1000FC25C, (void (*)(uint64_t, unint64_t))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001EF3C);
      return swift_release();
    }
  }
}

void sub_1008B601C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v6 = v5;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v29 = a3;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = a5;
    v17 = a1;
    v18 = a2;
    v19 = swift_slowAlloc(32, -1);
    v31 = v19;
    *(_DWORD *)v16 = 136315138;
    v30 = sub_100016940(0xD000000000000051, 0x8000000100EE9C70, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s", v16, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    a2 = v18;
    a1 = v17;
    a5 = v28;
    swift_slowDealloc(v20, -1, -1);
    v21 = v16;
    a3 = v29;
    swift_slowDealloc(v21, -1, -1);
  }

  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v22 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v31, v22);
  v23 = swift_release();
  if (v31 == 1)
  {
    v24 = swift_allocObject(&unk_101098570, 57, 7);
    *(_QWORD *)(v24 + 16) = v6;
    *(_QWORD *)(v24 + 24) = a4;
    *(_QWORD *)(v24 + 32) = a5;
    *(_QWORD *)(v24 + 40) = a1;
    *(_QWORD *)(v24 + 48) = a2;
    *(_BYTE *)(v24 + 56) = a3 & 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    sub_1008B0DEC((uint64_t)sub_1008BFD58, v24);
    swift_release();
  }
  else
  {
    v25 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "shareKey: Not sending keys since its not meDevice.", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

  }
}

uint64_t sub_1008B6314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[6];

  v29 = a8;
  v28 = a2;
  v30 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v16 - 8);
  v33 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingQueue);
  v19 = swift_allocObject(&unk_101098598, 120, 7);
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = a4;
  *(_QWORD *)(v19 + 32) = a5;
  sub_100005CF0(a1, v19 + 40, &qword_1010FA1E0);
  *(_QWORD *)(v19 + 88) = a6;
  *(_QWORD *)(v19 + 96) = a7;
  *(_BYTE *)(v19 + 104) = v29;
  v20 = v28;
  *(_QWORD *)(v19 + 112) = v28;
  aBlock[4] = sub_1008BFE00;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010985B0;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1008BFEEC(a1, (void (*)(void))sub_10005CB9C, (void (*)(uint64_t, unint64_t))sub_10001BBBC, (uint64_t (*)(uint64_t, uint64_t))sub_10001BD08);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a7);
  v22 = swift_errorRetain(v20);
  static DispatchQoS.unspecified.getter(v22);
  v35 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v26 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v24, v25, v30, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v15, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v33);
  return swift_release();
}

void sub_1008B659C(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(_QWORD);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void *v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(_QWORD);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120[24];
  _QWORD *v121;
  void **aBlock;
  uint64_t v123;
  uint64_t (*v124)(uint64_t);
  void *v125;
  void *v126;
  _QWORD *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  char v134[8];
  uint64_t v135;
  unint64_t v136;

  v119 = a8;
  v102 = a7;
  v118 = a6;
  v99 = a5;
  v115 = a2;
  v117 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v15 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v113 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v112 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for DispatchQoS.QoSClass(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_10110BDD8);
  __chkstk_darwin(v19);
  v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_1010F6350);
  OS_dispatch_queue.sync<A>(execute:)(sub_100449590, a1, v22);
  v23 = *((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    v24 = v131;
    sub_100005CF0(a4, (uint64_t)&v128, &qword_1010FA1E0);
    v105 = a3;
    v106 = v16;
    if (*((_QWORD *)&v129 + 1) >> 60 == 15)
      goto LABEL_4;
    v108 = v24;
    v98 = a4;
    v131 = v128;
    v132 = v129;
    v133 = v130;
    sub_100005CF0((uint64_t)&v133, (uint64_t)v134, &qword_1010FC1C8);
    sub_100005CF0((uint64_t)v134, (uint64_t)&v135, &qword_1010FC1C8);
    v25 = v136;
    if (v136 >> 60 == 15)
    {
LABEL_4:
      swift_bridgeObjectRelease();
    }
    else
    {
      v107 = v135;
      v65 = a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
      swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, v120, 0, 0);
      sub_10000F9B8(v65, (uint64_t)v21, &qword_10110BDD8);
      v66 = type metadata accessor for SecureLocationsCachedSharingKey(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v21, 1, v66))
      {
        v96 = v15;
        v97 = v13;
        v67 = *(_QWORD *)&v21[*(int *)(v66 + 28)];
        sub_1008BFEEC(v98, (void (*)(void))sub_10005CB9C, (void (*)(uint64_t, unint64_t))sub_10001BBBC, (uint64_t (*)(uint64_t, uint64_t))sub_10001BD08);
        sub_1002B1E20((uint64_t)v134);
        sub_100004048((uint64_t)v21, &qword_10110BDD8);
        v68 = swift_allocObject(&unk_101098728, 24, 7);
        *(_QWORD *)(v68 + 16) = 0;
        v69 = *(_QWORD *)(v99 + 16);
        if (v69)
        {
          v95 = v68;
          v104 = v68 + 16;
          v103 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingThrottle;
          v102 &= 1u;
          swift_bridgeObjectRetain(v99);
          v71 = (uint64_t *)(v70 + 40);
          v101 = v25;
          v100 = v67;
          do
          {
            v73 = *(v71 - 1);
            v72 = *v71;
            swift_bridgeObjectRetain(*v71);
            v74 = String.utf8Data.getter(v73, v72);
            v76 = v75;
            aBlock = (void **)v74;
            v123 = v75;
            v77 = sub_100035530();
            DataProtocol.stableUUID.getter(&type metadata for Data, v77);
            v78 = sub_10001BC14(v74, v76);
            __chkstk_darwin(v78);
            *(&v95 - 14) = v118;
            *(&v95 - 13) = v73;
            *(&v95 - 12) = v72;
            *(&v95 - 11) = a1;
            *(&v95 - 10) = v104;
            *(&v95 - 9) = (uint64_t)v12;
            *(&v95 - 8) = v108;
            *(&v95 - 7) = v23;
            v79 = v107;
            *(&v95 - 6) = v100;
            *(&v95 - 5) = v79;
            *(&v95 - 4) = v101;
            *(&v95 - 3) = (uint64_t)&v131;
            *((_BYTE *)&v95 - 16) = v102;
            *(&v95 - 1) = v119;
            swift_retain();
            KeyedThrottle.throttle(key:block:)(v12, sub_1008BFE90, &v95 - 16);
            swift_release();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v116 + 8))(v12, v117);
            v71 += 2;
            --v69;
          }
          while (v69);
          swift_bridgeObjectRelease();
          v80 = v105;
          v81 = v115;
          v82 = v114;
          v68 = v95;
        }
        else
        {
          v80 = a3;
          v81 = v115;
          v82 = v114;
        }
        swift_bridgeObjectRelease();
        sub_10001F6FC();
        v83 = v110;
        v84 = v109;
        v85 = v111;
        (*(void (**)(char *, _QWORD, uint64_t))(v110 + 104))(v109, enum case for DispatchQoS.QoSClass.default(_:), v111);
        v86 = (void *)static OS_dispatch_queue.global(qos:)(v84);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
        v87 = (_QWORD *)swift_allocObject(&unk_101098750, 40, 7);
        v87[2] = v81;
        v87[3] = v80;
        v87[4] = v68;
        v126 = sub_1003D8D28;
        v127 = v87;
        aBlock = _NSConcreteStackBlock;
        v123 = 1107296256;
        v124 = sub_100016FB8;
        v125 = &unk_101098768;
        v88 = _Block_copy(&aBlock);
        swift_retain();
        v89 = swift_retain();
        v90 = v112;
        static DispatchQoS.unspecified.getter(v89);
        v121 = _swiftEmptyArrayStorage;
        v91 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v92 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v93 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v94 = v96;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v121, v92, v93, v82, v91);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v90, v94, v88);
        sub_1002B1E4C((uint64_t)v134);
        _Block_release(v88);

        sub_1008BFEEC(v98, (void (*)(void))sub_1000FC25C, (void (*)(uint64_t, unint64_t))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001EF3C);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v94, v82);
        (*(void (**)(char *, uint64_t))(v113 + 8))(v90, v106);
        swift_release();
        goto LABEL_13;
      }
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v21, &qword_10110BDD8);
    }
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B7A18);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "shareKey: Unable to get keys to send to followers", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }
    v31 = v15;
    v32 = v114;

    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    v33 = qword_1011B7F60;
    v34 = *(NSObject **)(qword_1011B7F60 + 16);
    v35 = (_QWORD *)swift_allocObject(&unk_101098660, 40, 7);
    v35[2] = v33;
    v35[3] = 0xD000000000000010;
    v35[4] = 0x8000000100EE9CD0;
    v36 = swift_allocObject(&unk_101098688, 32, 7);
    *(_QWORD *)(v36 + 16) = sub_100555DCC;
    *(_QWORD *)(v36 + 24) = v35;
    v126 = sub_10005CBA4;
    v127 = (_QWORD *)v36;
    aBlock = _NSConcreteStackBlock;
    v123 = 1107296256;
    v124 = sub_10001D8B8;
    v125 = &unk_1010986A0;
    v37 = _Block_copy(&aBlock);
    swift_retain_n(v33, 2);
    swift_retain();
    swift_release();
    dispatch_sync(v34, v37);
    _Block_release(v37);
    LOBYTE(v34) = swift_isEscapingClosureAtFileLocation(v36, "", 110, 308, 38, 1);
    swift_release();
    swift_release();
    swift_release();
    if ((v34 & 1) == 0)
    {
      sub_10001F6FC();
      v38 = v110;
      v39 = v109;
      v40 = v111;
      (*(void (**)(char *, _QWORD, uint64_t))(v110 + 104))(v109, enum case for DispatchQoS.QoSClass.default(_:), v111);
      v41 = (void *)static OS_dispatch_queue.global(qos:)(v39);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      v42 = swift_allocObject(&unk_1010986D8, 32, 7);
      v43 = v105;
      *(_QWORD *)(v42 + 16) = v115;
      *(_QWORD *)(v42 + 24) = v43;
      v126 = sub_1008BFE64;
      v127 = (_QWORD *)v42;
      aBlock = _NSConcreteStackBlock;
      v123 = 1107296256;
      v124 = sub_100016FB8;
      v125 = &unk_1010986F0;
      v44 = _Block_copy(&aBlock);
      v45 = swift_retain();
      v46 = v112;
      static DispatchQoS.unspecified.getter(v45);
      v121 = _swiftEmptyArrayStorage;
      v47 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v48 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v49 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v121, v48, v49, v32, v47);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v31, v44);
      _Block_release(v44);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v31, v32);
      (*(void (**)(char *, uint64_t))(v113 + 8))(v46, v106);
LABEL_13:
      swift_release();
      return;
    }
    __break(1u);
    goto LABEL_30;
  }
  if (qword_1010EA098 != -1)
LABEL_30:
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v50 = type metadata accessor for Logger(0);
  v51 = sub_10001A9E8(v50, (uint64_t)qword_1011B7A18);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.default.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "shareKey: Unable to get my own person ID. Not sending keys", v54, 2u);
    swift_slowDealloc(v54, -1, -1);
  }

  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  v55 = qword_1011B7F60;
  v56 = *(NSObject **)(qword_1011B7F60 + 16);
  v57 = swift_allocObject(&unk_1010985E8, 40, 7);
  *(_QWORD *)(v57 + 16) = v55;
  strcpy((char *)(v57 + 24), "No MyPersonID");
  *(_WORD *)(v57 + 38) = -4864;
  v58 = swift_allocObject(&unk_101098610, 32, 7);
  *(_QWORD *)(v58 + 16) = sub_100554420;
  *(_QWORD *)(v58 + 24) = v57;
  *(_QWORD *)&v133 = sub_10001D850;
  *((_QWORD *)&v133 + 1) = v58;
  *(_QWORD *)&v131 = _NSConcreteStackBlock;
  *((_QWORD *)&v131 + 1) = 1107296256;
  *(_QWORD *)&v132 = sub_10001D8B8;
  *((_QWORD *)&v132 + 1) = &unk_101098628;
  v59 = _Block_copy(&v131);
  swift_retain_n(v55, 2);
  swift_retain();
  swift_release();
  dispatch_sync(v56, v59);
  _Block_release(v59);
  LOBYTE(v56) = swift_isEscapingClosureAtFileLocation(v58, "", 110, 308, 38, 1);
  swift_release();
  swift_release();
  swift_release();
  if ((v56 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for SecureLocationsError(0);
    v61 = v60;
    *(_QWORD *)&v128 = 3;
    v62 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v63 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
    _BridgedStoredNSError.init(_:userInfo:)(&v131, &v128, v62, v61, v63);
    v64 = (void *)v131;
    v115(v131);

  }
}

void sub_1008B7390(void (*a1)(void *))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  type metadata accessor for SecureLocationsError(0);
  v3 = v2;
  v7 = 3;
  v4 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v5 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
  _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v3, v5);
  v6 = v8;
  a1(v8);

}

uint64_t sub_1008B7438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_QWORD, _QWORD, _QWORD), uint64_t a10, unint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  NSString v49;
  void *v50;
  void (*v51)(_QWORD, _QWORD);
  void (*v52)(_QWORD, _QWORD);
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  void (*v63)(_QWORD, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t ObjectType;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  NSObject *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  uint8_t *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  NSString v114;
  void *v115;
  int v116;
  void (*v117)(_QWORD, _QWORD);
  uint64_t v118;
  NSObject *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  void (*v128)(_QWORD, _QWORD);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  uint64_t v138;
  _QWORD *v139;
  NSObject *v140;
  int isa_low;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  _BOOL4 v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  uint8_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  uint64_t v185;
  uint64_t v186;
  NSObject *v187;
  os_log_type_t v188;
  uint8_t *v189;
  uint64_t v190;
  void (*v191)(uint64_t, uint64_t);
  uint64_t v192;
  uint64_t result;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  Swift::String v199;
  uint64_t v200;
  _QWORD v201[2];
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t *v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t *v218;
  uint64_t v219;
  NSObject *v220;
  NSObject *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void (*v225)(_QWORD, _QWORD);
  int v226;
  unint64_t v227;
  void (*v228)(_QWORD, _QWORD);
  _QWORD v229[4];
  uint64_t v230;
  char v231[8];
  uint64_t v232;
  _QWORD v233[4];
  uint64_t v234;
  unint64_t v235;
  __int128 v236;

  v207 = a8;
  v206 = a7;
  v205 = a6;
  v211 = a5;
  v204 = type metadata accessor for HashAlgorithm(0);
  v203 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v202 = (char *)v201 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010F46C0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)v201 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)v201 - v23;
  v25 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v25);
  v210 = (char *)v201 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a1 + 16);
  v212 = a3;
  v217 = a4;
  v209 = a2;
  if (!v27)
    goto LABEL_8;
  swift_bridgeObjectRetain(a3);
  v28 = sub_100518DA0(a2, a3);
  if ((v29 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v43 = sub_1008CC004(a2, a3);
    v44 = *(_QWORD *)(v43 + 16);
    if (!v44)
    {
      swift_bridgeObjectRelease();
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v86 = type metadata accessor for Logger(0);
      v87 = sub_10001A9E8(v86, (uint64_t)qword_1011B7A18);
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.default.getter(v88);
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "shareKey: No handle found in fmf. Cannot send keys", v90, 2u);
        swift_slowDealloc(v90, -1, -1);
      }

      v91 = 0;
      v225 = 0;
      v228 = 0;
      v216 = 0;
      v73 = 0;
      goto LABEL_76;
    }
    v210 = (char *)v43;
    v45 = (unint64_t *)(v43 + 40);
    v213 = &type metadata for () + 1;
    v214 = v22;
    while (1)
    {
      v219 = v44;
      v47 = *(v45 - 1);
      v46 = *v45;
      v218 = v45;
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v236 = v47;
      *((_QWORD *)&v236 + 1) = v46;
      v234 = 64;
      v235 = 0xE100000000000000;
      v48 = sub_1000330C8();
      swift_bridgeObjectRetain(v46);
      LOBYTE(v48) = StringProtocol.contains<A>(_:)(&v234, &type metadata for String, &type metadata for String, v48, v48);
      v216 = v47;
      v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v227 = v46;
      if ((v48 & 1) != 0)
      {
        v50 = (void *)IDSCopyIDForEmailAddress(v49);

        if (!v50)
        {
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          sub_1000ADA04((uint64_t)&v236);
          v234 = 0;
          v235 = 0xE000000000000000;
          _StringGuts.grow(_:)(35);
          v199._countAndFlagsBits = 0xD000000000000021;
          v199._object = (void *)0x8000000100EC7AC0;
          String.append(_:)(v199);
          v230 = v46;
          v200 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
          _print_unlocked<A, B>(_:_:)(&v230, &v234, v200, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v234, v235, "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
          __break(1u);
          return result;
        }
        v226 = 0;
      }
      else
      {
        v50 = (void *)IDSCopyIDForPhoneNumber(v49);

        if (!v50)
          goto LABEL_99;
        v226 = 1;
      }
      v51 = (void (*)(_QWORD, _QWORD))static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v228 = v52;

      v53 = *(_QWORD *)(a4 + 40);
      swift_retain();
      v54 = dispatch_group_create();
      v55 = swift_allocObject(&unk_1010987A0, 17, 7);
      *(_BYTE *)(v55 + 16) = 0;
      v222 = v55 + 16;
      dispatch_group_enter(v54);
      v223 = v53;
      v56 = *(_QWORD *)(v53 + 24);
      v57 = swift_allocObject(&unk_1010987C8, 32, 7);
      *(_QWORD *)(v57 + 16) = v55;
      *(_QWORD *)(v57 + 24) = v54;
      v58 = type metadata accessor for TaskPriority(0);
      v59 = *(_QWORD *)(v58 - 8);
      v60 = (uint64_t)v214;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v214, 1, 1, v58);
      v61 = swift_allocObject(&unk_1010987F0, 80, 7);
      *(_QWORD *)(v61 + 16) = 0;
      v62 = (uint64_t *)(v61 + 16);
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = sub_1008BFFC4;
      *(_QWORD *)(v61 + 40) = v57;
      *(_QWORD *)(v61 + 48) = v56;
      *(_BYTE *)(v61 + 56) = v226;
      v225 = v51;
      *(_QWORD *)(v61 + 64) = v51;
      v63 = v228;
      *(_QWORD *)(v61 + 72) = v228;
      v215 = v59;
      LODWORD(v59) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v60, 1, v58);
      v224 = v55;
      swift_retain();
      v220 = v54;
      v221 = v57;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v63);
      if ((_DWORD)v59 == 1)
      {
        sub_100004048(v60, &qword_1010F46C0);
        v65 = 0;
        v66 = *v62;
        if (!*v62)
          goto LABEL_19;
      }
      else
      {
        v72 = TaskPriority.rawValue.getter(v64);
        (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v60, v58);
        v65 = v72;
        v66 = *v62;
        if (!*v62)
        {
LABEL_19:
          v69 = 0;
          v71 = 0;
          goto LABEL_20;
        }
      }
      v67 = *(_QWORD *)(v61 + 24);
      ObjectType = swift_getObjectType(v66);
      swift_unknownObjectRetain(v66);
      v69 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v67);
      v71 = v70;
      swift_unknownObjectRelease(v66);
LABEL_20:
      v73 = v227;
      v74 = v222;
      v75 = swift_allocObject(&unk_101098818, 32, 7);
      *(_QWORD *)(v75 + 16) = &unk_1010F9F98;
      *(_QWORD *)(v75 + 24) = v61;
      if (v71 | v69)
      {
        v233[0] = 0;
        v233[1] = 0;
        v76 = v233;
        v233[2] = v69;
        v233[3] = v71;
      }
      else
      {
        v76 = 0;
      }
      v77 = v220;
      swift_task_create(v65 | 0x1C00, v76, v213, &unk_1010EE4A0, v75);
      swift_release();
      swift_release();
      OS_dispatch_group.wait()();

      swift_beginAccess(v74, &v232, 0, 0);
      v78 = *(unsigned __int8 *)(v224 + 16);
      swift_release();
      swift_release();
      if (v78 == 1)
      {
        swift_bridgeObjectRelease();
        a4 = v217;
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v92 = type metadata accessor for Logger(0);
        sub_10001A9E8(v92, (uint64_t)qword_1011B7A18);
        a3 = v212;
        swift_bridgeObjectRetain_n(v212, 2);
        swift_bridgeObjectRetain_n(v73, 2);
        v94 = Logger.logObject.getter(v93);
        v95 = static os_log_type_t.default.getter(v94);
        if (os_log_type_enabled(v94, v95))
        {
          v96 = swift_slowAlloc(42, -1);
          v97 = swift_slowAlloc(64, -1);
          *(_QWORD *)&v236 = v97;
          *(_DWORD *)v96 = 141558787;
          v234 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v96 + 4, v96 + 12);
          *(_WORD *)(v96 + 12) = 2081;
          swift_bridgeObjectRetain(a3);
          v234 = sub_100016940(v209, a3, (uint64_t *)&v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v96 + 14, v96 + 22);
          swift_bridgeObjectRelease_n(a3, 3);
          *(_WORD *)(v96 + 22) = 2160;
          v234 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v96 + 24, v96 + 32);
          *(_WORD *)(v96 + 32) = 2081;
          swift_bridgeObjectRetain(v73);
          v234 = sub_100016940(v216, v73, (uint64_t *)&v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v96 + 34, v96 + 42);
          swift_bridgeObjectRelease_n(v73, 3);
          v98 = "shareKey: Got valid messaging destination from fmf with %{private,mask.hash}s %{private,mask.hash}s";
          goto LABEL_73;
        }
        goto LABEL_74;
      }
      v45 = v218 + 2;
      swift_bridgeObjectRelease();
      v44 = v219 - 1;
      a4 = v217;
      if (v219 == 1)
      {
        swift_bridgeObjectRelease();
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v79 = type metadata accessor for Logger(0);
        v80 = sub_10001A9E8(v79, (uint64_t)qword_1011B7A18);
        v81 = Logger.logObject.getter(v80);
        v82 = static os_log_type_t.default.getter(v81);
        v83 = os_log_type_enabled(v81, v82);
        a3 = v212;
        if (v83)
        {
          v84 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v84 = 0;
          v85 = "shareKey: No valid handles found in fmf. Cannot send keys";
          goto LABEL_69;
        }
LABEL_70:

        v91 = 0;
        v225 = 0;
        v228 = 0;
        goto LABEL_76;
      }
    }
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v28);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(v30, 2);
  v208 = v32;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v36 = os_log_type_enabled(v34, v35);
  v214 = v24;
  if (v36)
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v232 = v38;
    *(_DWORD *)v37 = 136380675;
    swift_bridgeObjectRetain(v30);
    v40 = Array.description.getter(v39, &type metadata for String);
    v42 = v41;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v236 = sub_100016940(v40, v42, &v232);
    a4 = v217;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease_n(v30, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "shareKey: Valid handles: %{private}s", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v30, 2);
  }
  v99 = *(_QWORD *)(v30 + 16);
  v201[1] = v30;
  if (!v99)
  {
    v216 = 0;
    v73 = 0;
LABEL_67:
    v142 = swift_bridgeObjectRelease();
    v81 = Logger.logObject.getter(v142);
    v82 = static os_log_type_t.default.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v84 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v84 = 0;
      v85 = "shareKey: No valid handles found from server. Cannot send keys";
LABEL_69:
      _os_log_impl((void *)&_mh_execute_header, v81, v82, v85, v84, 2u);
      swift_slowDealloc(v84, -1, -1);
    }
    goto LABEL_70;
  }
  v100 = (unint64_t *)(v30 + 40);
  v213 = &type metadata for () + 1;
  while (1)
  {
    v219 = v99;
    v102 = *(v100 - 1);
    v101 = *v100;
    v218 = v100;
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRelease();
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    swift_retain();
    v103 = Data.init(base64Encoded:options:)(v102, v101, 0);
    if (v104 >> 60 == 15)
    {
      v105 = Logger.logObject.getter(v103);
      v106 = static os_log_type_t.default.getter(v105);
      v46 = v106;
      if (os_log_type_enabled(v105, v106))
      {
        v107 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v107 = 0;
        _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v46, "failed to decode server provided push identifier", v107, 2u);
        swift_slowDealloc(v107, -1, -1);
      }
      swift_release();

    }
    else
    {
      v108 = v103;
      v46 = v104;
      v109 = v210;
      static String.Encoding.utf8.getter(v103);
      v110 = String.init(data:encoding:)(v108, v46, v109);
      v112 = v111;
      sub_10001EF3C(v108, v46);
      swift_release();
      if (v112)
      {
        swift_bridgeObjectRelease();
        v102 = v110;
        goto LABEL_50;
      }
    }
    v112 = v101;
LABEL_50:
    *(_QWORD *)&v236 = v102;
    *((_QWORD *)&v236 + 1) = v112;
    v234 = 64;
    v235 = 0xE100000000000000;
    v113 = sub_1000330C8();
    swift_bridgeObjectRetain_n(v112, 2);
    LOBYTE(v113) = StringProtocol.contains<A>(_:)(&v234, &type metadata for String, &type metadata for String, v113, v113);
    v114 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v227 = v112;
    v216 = v102;
    if ((v113 & 1) != 0)
    {
      v115 = (void *)IDSCopyIDForEmailAddress(v114);

      if (!v115)
        goto LABEL_100;
      v116 = 0;
    }
    else
    {
      v115 = (void *)IDSCopyIDForPhoneNumber(v114);

      if (!v115)
        goto LABEL_101;
      v116 = 1;
    }
    v225 = (void (*)(_QWORD, _QWORD))static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
    v228 = v117;

    v118 = *(_QWORD *)(a4 + 40);
    swift_retain();
    v119 = dispatch_group_create();
    v120 = swift_allocObject(&unk_1010987A0, 17, 7);
    *(_BYTE *)(v120 + 16) = 0;
    v223 = v120 + 16;
    dispatch_group_enter(v119);
    v224 = v118;
    v121 = *(_QWORD *)(v118 + 24);
    v122 = swift_allocObject(&unk_101098840, 32, 7);
    *(_QWORD *)(v122 + 16) = v120;
    *(_QWORD *)(v122 + 24) = v119;
    v123 = type metadata accessor for TaskPriority(0);
    v124 = *(_QWORD *)(v123 - 8);
    v125 = (uint64_t)v214;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v214, 1, 1, v123);
    v126 = swift_allocObject(&unk_101098868, 80, 7);
    *(_QWORD *)(v126 + 16) = 0;
    v127 = (uint64_t *)(v126 + 16);
    *(_QWORD *)(v126 + 24) = 0;
    *(_QWORD *)(v126 + 32) = sub_1008C2EEC;
    *(_QWORD *)(v126 + 40) = v122;
    *(_QWORD *)(v126 + 48) = v121;
    v226 = v116;
    *(_BYTE *)(v126 + 56) = v116;
    v128 = v228;
    *(_QWORD *)(v126 + 64) = v225;
    *(_QWORD *)(v126 + 72) = v128;
    v215 = v124;
    LODWORD(v124) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v125, 1, v123);
    v220 = v120;
    swift_retain();
    v221 = v119;
    v222 = v122;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v128);
    if ((_DWORD)v124 == 1)
    {
      sub_100004048(v125, &qword_1010F46C0);
      v130 = 0;
      v131 = *v127;
      if (*v127)
        goto LABEL_57;
    }
    else
    {
      v137 = TaskPriority.rawValue.getter(v129);
      (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v125, v123);
      v130 = v137;
      v131 = *v127;
      if (*v127)
      {
LABEL_57:
        v132 = *(_QWORD *)(v126 + 24);
        v133 = swift_getObjectType(v131);
        swift_unknownObjectRetain(v131);
        v134 = dispatch thunk of Actor.unownedExecutor.getter(v133, v132);
        v136 = v135;
        swift_unknownObjectRelease(v131);
        goto LABEL_60;
      }
    }
    v134 = 0;
    v136 = 0;
LABEL_60:
    a3 = v212;
    v138 = swift_allocObject(&unk_101098890, 32, 7);
    *(_QWORD *)(v138 + 16) = &unk_10110BDE0;
    *(_QWORD *)(v138 + 24) = v126;
    if (v136 | v134)
    {
      v229[0] = 0;
      v229[1] = 0;
      v139 = v229;
      v229[2] = v134;
      v229[3] = v136;
    }
    else
    {
      v139 = 0;
    }
    swift_task_create(v130 | 0x1C00, v139, v213, &unk_10110BDE8, v138);
    swift_release();
    swift_release();
    v140 = v221;
    OS_dispatch_group.wait()();

    swift_beginAccess(v223, &v232, 0, 0);
    isa_low = LOBYTE(v220[2].isa);
    swift_release();
    swift_release();
    if (isa_low == 1)
      break;
    v100 = v218 + 2;
    swift_bridgeObjectRelease();
    v73 = v227;
    swift_bridgeObjectRelease();
    v99 = v219 - 1;
    a4 = v217;
    if (v219 == 1)
      goto LABEL_67;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n(a3, 2);
  v73 = v227;
  swift_bridgeObjectRetain(v227);
  v94 = Logger.logObject.getter(v143);
  v95 = static os_log_type_t.default.getter(v94);
  v144 = os_log_type_enabled(v94, v95);
  a4 = v217;
  if (!v144)
  {
LABEL_74:

    swift_bridgeObjectRelease_n(v73, 2);
    swift_bridgeObjectRelease_n(a3, 2);
    goto LABEL_75;
  }
  v96 = swift_slowAlloc(42, -1);
  v97 = swift_slowAlloc(64, -1);
  *(_QWORD *)&v236 = v97;
  *(_DWORD *)v96 = 141558787;
  v234 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v96 + 4, v96 + 12);
  *(_WORD *)(v96 + 12) = 2081;
  swift_bridgeObjectRetain(a3);
  v234 = sub_100016940(v209, a3, (uint64_t *)&v236);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v96 + 14, v96 + 22);
  swift_bridgeObjectRelease_n(a3, 3);
  *(_WORD *)(v96 + 22) = 2160;
  v234 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v96 + 24, v96 + 32);
  *(_WORD *)(v96 + 32) = 2081;
  swift_bridgeObjectRetain(v73);
  v234 = sub_100016940(v216, v73, (uint64_t *)&v236);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v96 + 34, v96 + 42);
  swift_bridgeObjectRelease_n(v73, 3);
  v98 = "shareKey: Received handle from server with valid messaging destination %{private,mask.hash}s %{private,mask.hash}s";
LABEL_73:
  _os_log_impl((void *)&_mh_execute_header, v94, v95, v98, (uint8_t *)v96, 0x2Au);
  swift_arrayDestroy(v97, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v97, -1, -1);
  swift_slowDealloc(v96, -1, -1);

LABEL_75:
  v91 = v226;
LABEL_76:
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v145 = type metadata accessor for Logger(0);
  v146 = sub_10001A9E8(v145, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain_n(a3, 2);
  v227 = v146;
  v148 = Logger.logObject.getter(v147);
  v149 = static os_log_type_t.default.getter(v148);
  v150 = os_log_type_enabled(v148, v149);
  v226 = v91;
  if (v150)
  {
    v151 = swift_slowAlloc(42, -1);
    v152 = v73;
    v153 = swift_slowAlloc(64, -1);
    v234 = v153;
    *(_DWORD *)v151 = 141558787;
    *(_QWORD *)&v236 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v151 + 4, v151 + 12);
    *(_WORD *)(v151 + 12) = 2081;
    swift_bridgeObjectRetain(a3);
    *(_QWORD *)&v236 = sub_100016940(v209, a3, &v234);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v151 + 14, v151 + 22);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v151 + 22) = 2160;
    *(_QWORD *)&v236 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v151 + 24, v151 + 32);
    *(_WORD *)(v151 + 32) = 2081;
    a4 = v217;
    *(_QWORD *)&v236 = v216;
    *((_QWORD *)&v236 + 1) = v152;
    swift_bridgeObjectRetain(v152);
    v154 = sub_10001A9A8(&qword_1010F6350);
    v155 = String.init<A>(describing:)(&v236, v154);
    *(_QWORD *)&v236 = sub_100016940(v155, v156, &v234);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v151 + 34, v151 + 42);
    swift_bridgeObjectRelease_n(v152, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v148, v149, "shareKey: Sending to %{private,mask.hash}s handle %{private,mask.hash}s", (uint8_t *)v151, 0x2Au);
    swift_arrayDestroy(v153, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v153, -1, -1);
    swift_slowDealloc(v151, -1, -1);

    if (v228)
      goto LABEL_80;
LABEL_84:
    swift_bridgeObjectRetain_n(a3, 2);
    v183 = Logger.logObject.getter(v182);
    v184 = static os_log_type_t.error.getter(v183);
    if (os_log_type_enabled(v183, v184))
    {
      v185 = swift_slowAlloc(22, -1);
      v186 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v236 = v186;
      *(_DWORD *)v185 = 141558275;
      v234 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v185 + 4, v185 + 12);
      *(_WORD *)(v185 + 12) = 2081;
      swift_bridgeObjectRetain(a3);
      v234 = sub_100016940(v209, a3, (uint64_t *)&v236);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v185 + 14, v185 + 22);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v183, v184, "shareKey: Cannot send keys to %{private,mask.hash}s. No handleIdentifier or destination to send key", (uint8_t *)v185, 0x16u);
      swift_arrayDestroy(v186, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v186, -1, -1);
      swift_slowDealloc(v185, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    type metadata accessor for SecureLocationsError(0);
    v195 = v194;
    v234 = 9;
    v196 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v197 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
    _BridgedStoredNSError.init(_:userInfo:)(&v236, &v234, v196, v195, v197);
    v198 = *v211;
    *v211 = v236;
    swift_errorRelease(v198);
    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_retain();
    sub_100C4A908(v209, a3, 0xD000000000000019, 0x8000000100EE9CF0);
    swift_release();
    return 0;
  }
  else
  {

    swift_bridgeObjectRelease_n(v73, 2);
    swift_bridgeObjectRelease_n(a3, 2);
    if (!v228)
      goto LABEL_84;
LABEL_80:
    v236 = *(_OWORD *)(a12 + 16);
    v157 = v236;
    sub_100059DE8((uint64_t)&v236);
    v158 = sub_1007E6F8C(v157, *((uint64_t *)&v157 + 1));
    v160 = v159;
    sub_1000ADA04((uint64_t)&v236);
    sub_1002F7394(v158, v160);
    v224 = a10;
    v161 = v234;
    v162 = v235;
    v163 = v203;
    v164 = v202;
    v165 = v204;
    (*(void (**)(char *, _QWORD, uint64_t))(v203 + 104))(v202, enum case for HashAlgorithm.sha256(_:), v204);
    v166 = Data.hash(algorithm:)(v164, v161, v162);
    v168 = v167;
    (*(void (**)(char *, uint64_t))(v163 + 8))(v164, v165);
    sub_10001BC14(v161, v162);
    v169 = a4;
    v170 = sub_1008B9674(v205, v206, v207, v226, v225, v228, a9, v224, a11, v166, v168);
    swift_bridgeObjectRelease();
    sub_10001BC14(v166, v168);
    v171 = v211;
    v172 = *v211;
    *v211 = v170;
    v173 = swift_errorRelease(v172);
    if (*v171)
    {
      swift_errorRetain(a14);
      v174 = swift_errorRetain(a14);
      v175 = Logger.logObject.getter(v174);
      v176 = static os_log_type_t.default.getter(v175);
      if (os_log_type_enabled(v175, v176))
      {
        v177 = (uint8_t *)swift_slowAlloc(12, -1);
        v178 = swift_slowAlloc(32, -1);
        v234 = v178;
        *(_DWORD *)v177 = 136446210;
        v230 = a14;
        swift_errorRetain(a14);
        v179 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
        v180 = String.init<A>(describing:)(&v230, v179);
        v230 = sub_100016940(v180, v181, &v234);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, v231, v177 + 4, v177 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(a14);
        swift_errorRelease(a14);
        _os_log_impl((void *)&_mh_execute_header, v175, v176, "shareKey: sent failed, error: %{public}s", v177, 0xCu);
        swift_arrayDestroy(v178, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v178, -1, -1);
        swift_slowDealloc(v177, -1, -1);
      }
      else
      {
        swift_errorRelease(a14);
        swift_errorRelease(a14);
      }

    }
    else
    {
      v187 = Logger.logObject.getter(v173);
      v188 = static os_log_type_t.default.getter(v187);
      if (os_log_type_enabled(v187, v188))
      {
        v189 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v189 = 67109120;
        v169 = a4;
        LODWORD(v234) = a13 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, (char *)&v234 + 4, v189 + 4, v189 + 8);
        _os_log_impl((void *)&_mh_execute_header, v187, v188, "shareKey: sent successfully, should force publish proactive location with new key: %{BOOL}d", v189, 8u);
        swift_slowDealloc(v189, -1, -1);
      }

      v190 = v212;
      if ((a13 & 1) != 0)
      {
        v191 = *(void (**)(uint64_t, uint64_t))(v169 + 16);
        if (v191)
        {
          v192 = *(_QWORD *)(v169 + 24);
          swift_retain();
          v191(v209, v190);
          sub_10001D8A8((uint64_t)v191, v192);
        }
      }
    }
    return *v211 == 0;
  }
}

uint64_t sub_1008B8F08(uint64_t isUniquelyReferenced_nonNull_native)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t result;
  _QWORD v52[5];
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  if (qword_1010EA098 != -1)
LABEL_47:
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7A18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v52[4] = isUniquelyReferenced_nonNull_native;
  if (v6)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v62 = (_QWORD *)v8;
    *(_DWORD *)v7 = 136315138;
    v60 = sub_100016940(0xD000000000000025, 0x8000000100EE9F90, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  v9 = sub_10001A9A8(&qword_1010FA368);
  isUniquelyReferenced_nonNull_native = 0;
  unsafeFromAsyncTask<A>(_:)(&unk_10110C0F0, 0, v9);
  v10 = (uint64_t)v62;
  v11 = qword_1010E9FF8;
  swift_bridgeObjectRetain(v62);
  if (v11 != -1)
    v12 = swift_once(&qword_1010E9FF8, sub_1008CC198);
  __chkstk_darwin(v12);
  v52[2] = v10;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1008C2DF8, v52, v13, &type metadata for () + 1, &type metadata for () + 1);
  sub_1000FE214(v10, 0);
  v14 = *(_QWORD *)(v10 + 56);
  v53 = v10 + 56;
  v15 = 1 << *(_BYTE *)(v10 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v54 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain(v10);
  v18 = 0;
  v19 = _swiftEmptyArrayStorage;
  v20 = _swiftEmptyDictionarySingleton;
  v56 = xmmword_100E22B00;
  v55 = v10;
  while (1)
  {
    if (v17)
    {
      v58 = (v17 - 1) & v17;
      v59 = v18;
      v22 = __clz(__rbit64(v17)) | (v18 << 6);
    }
    else
    {
      v23 = v18 + 1;
      if (__OFADD__(v18, 1))
        goto LABEL_45;
      if (v23 >= v54)
      {
LABEL_42:
        swift_release();
        sub_1008B601C((uint64_t)v19, (uint64_t)v20, 0, (uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
        sub_1000FE214(v10, 0);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v24 = *(_QWORD *)(v53 + 8 * v23);
      v25 = v18 + 1;
      if (!v24)
      {
        v25 = v18 + 2;
        if (v18 + 2 >= v54)
          goto LABEL_42;
        v24 = *(_QWORD *)(v53 + 8 * v25);
        if (!v24)
        {
          v25 = v18 + 3;
          if (v18 + 3 >= v54)
            goto LABEL_42;
          v24 = *(_QWORD *)(v53 + 8 * v25);
          if (!v24)
          {
            v26 = v18 + 4;
            if (v18 + 4 >= v54)
              goto LABEL_42;
            v24 = *(_QWORD *)(v53 + 8 * v26);
            if (!v24)
            {
              while (1)
              {
                v25 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_46;
                if (v25 >= v54)
                  goto LABEL_42;
                v24 = *(_QWORD *)(v53 + 8 * v25);
                ++v26;
                if (v24)
                  goto LABEL_26;
              }
            }
            v25 = v18 + 4;
          }
        }
      }
LABEL_26:
      v58 = (v24 - 1) & v24;
      v59 = v25;
      v22 = __clz(__rbit64(v24)) + (v25 << 6);
    }
    v27 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 40 * v22);
    v28 = *v27;
    v29 = v27[1];
    v30 = v27[2];
    v31 = v27[3];
    v32 = v27[4];
    swift_bridgeObjectRetain_n(v32, 2);
    swift_bridgeObjectRetain(v29);
    v57 = v30;
    swift_bridgeObjectRetain(v30);
    if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      v19 = sub_1007C7438(0, v19[2] + 1, 1, v19);
    v34 = v19[2];
    v33 = v19[3];
    if (v34 >= v33 >> 1)
      v19 = sub_1007C7438((_QWORD *)(v33 > 1), v34 + 1, 1, v19);
    v19[2] = v34 + 1;
    v35 = v19;
    v36 = &v19[2 * v34];
    v36[4] = v31;
    v36[5] = v32;
    v37 = sub_10001A9A8(&qword_101106C20);
    v38 = swift_allocObject(v37, 48, 7);
    *(_OWORD *)(v38 + 16) = v56;
    *(_QWORD *)(v38 + 32) = v28;
    *(_QWORD *)(v38 + 40) = v29;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v29);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    v62 = v20;
    v40 = sub_100518DA0(v31, v32);
    v41 = v20[2];
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v44 = v39;
    if (v20[3] < v43)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v20 = v62;
      if ((v39 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_100AA1148();
      v20 = v62;
      if ((v44 & 1) != 0)
      {
LABEL_9:
        v21 = v20[7];
        isUniquelyReferenced_nonNull_native = 8 * v40;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v21 + 8 * v40) = v38;
        goto LABEL_10;
      }
    }
LABEL_38:
    v20[(v40 >> 6) + 8] |= 1 << v40;
    v47 = (uint64_t *)(v20[6] + 16 * v40);
    *v47 = v31;
    v47[1] = v32;
    *(_QWORD *)(v20[7] + 8 * v40) = v38;
    v48 = v20[2];
    v49 = __OFADD__(v48, 1);
    v50 = v48 + 1;
    if (v49)
      goto LABEL_44;
    v20[2] = v50;
    swift_bridgeObjectRetain(v32);
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v32, 2);
    swift_bridgeObjectRelease();
    v10 = v55;
    v19 = v35;
    v17 = v58;
    v18 = v59;
  }
  sub_100A93A44(v43, isUniquelyReferenced_nonNull_native);
  v45 = sub_100518DA0(v31, v32);
  if ((v44 & 1) == (v46 & 1))
  {
    v40 = v45;
    v20 = v62;
    if ((v44 & 1) != 0)
      goto LABEL_9;
    goto LABEL_38;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1008B9674(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(_QWORD, _QWORD), void (*a6)(_QWORD, _QWORD), void (*a7)(_QWORD, _QWORD, _QWORD), uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(_QWORD, _QWORD, _QWORD);
  void (*v47)(_QWORD, _QWORD);
  int v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(_QWORD, _QWORD, _QWORD);
  uint64_t v54;

  v49 = a7;
  v50 = a8;
  v48 = a4;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (void (**)(_QWORD, _QWORD))((char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v11 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingQueue);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    swift_retain();
    sub_1003AB958(a1, a2, a3, v48, a5, a6, v49, v50, a9, a10, a11);
    v32 = v50;
    swift_release();
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B7A18);
    sub_10001BBBC(v32, a9);
    sub_10001BBBC(a10, a11);
    swift_bridgeObjectRetain(a6);
    sub_10001BBBC(v32, a9);
    sub_10001BBBC(a10, a11);
    swift_bridgeObjectRetain(a6);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    v37 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      v38 = swift_slowAlloc(62, -1);
      v49 = (void (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc(96, -1);
      v53 = v49;
      *(_DWORD *)v38 = 141559299;
      v51 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      v47 = a5;
      v51 = v32;
      v52 = a9;
      v39 = sub_1002FCF5C();
      v48 = v37;
      v40 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for PrivateKey, v39);
      v51 = sub_100016940(v40, v41, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v32, a9);
      sub_10001BC14(v32, a9);
      *(_WORD *)(v38 + 22) = 2160;
      v51 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 24, v38 + 32);
      *(_WORD *)(v38 + 32) = 2081;
      v51 = a10;
      v52 = a11;
      v42 = sub_100153D50();
      v43 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for HashedAdvertisement, v42);
      v51 = sub_100016940(v43, v44, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 34, v38 + 42);
      swift_bridgeObjectRelease();
      sub_10001BC14(a10, a11);
      sub_10001BC14(a10, a11);
      *(_WORD *)(v38 + 42) = 2160;
      v51 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 44, v38 + 52);
      *(_WORD *)(v38 + 52) = 2081;
      swift_bridgeObjectRetain(a6);
      v51 = sub_100016940((uint64_t)v47, (unint64_t)a6, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 54, v38 + 62);
      swift_bridgeObjectRelease_n(a6, 3);
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v48, "shareKey: Sent key %{private,mask.hash}s with locationId %{private,mask.hash}s to follower %{private,mask.hash}s", (uint8_t *)v38, 0x3Eu);
      v45 = v49;
      swift_arrayDestroy(v49, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {
      sub_10001BC14(v32, a9);
      sub_10001BC14(v32, a9);
      sub_10001BC14(a10, a11);
      sub_10001BC14(a10, a11);

      swift_bridgeObjectRelease_n(a6, 2);
    }
    return 0;
  }
  else
  {
    __break(1u);
    swift_once(&qword_1010EA098, sub_10098F7D8);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a1);
    v24 = swift_errorRetain(a1);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v51 = v28;
      *(_DWORD *)v27 = 136315138;
      v53 = (void (*)(_QWORD, _QWORD, _QWORD))a1;
      swift_errorRetain(a1);
      v29 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v30 = String.init<A>(describing:)(&v53, v29);
      v53 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100016940(v30, v31, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "shareKey: Error sending IDS message: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_retain();
    sub_100C4A908(a2, v18, 0xD000000000000015, 0x8000000100EE9C50);
    swift_release();
  }
  return a1;
}

uint64_t sub_1008B9CE0(uint64_t a1, uint64_t a2)
{
  _QWORD v5[6];

  type metadata accessor for Transaction(0);
  v5[2] = a2;
  v5[3] = j___s10FindMyBase11TransactionC7captureyyF;
  v5[4] = a1;
  swift_retain();
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.performKeyroll", 60, 2, sub_100750DE8, v5, &type metadata for () + 1);
  return swift_release();
}

uint64_t sub_1008B9D7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;

  v8 = (_QWORD *)swift_allocObject(&unk_101098DE0, 48, 7);
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a2;
  v8[5] = a1;
  swift_retain_n(a4, 2);
  swift_retain_n(a2, 2);
  swift_retain_n(a1, 2);
  if ((sub_1008ADE48() & 1) != 0)
  {
    sub_1008B9F48(1, a3, a4, a2, a1);
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "SetupVirtualMeDevice: Waiting on beaconStore to become available", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    swift_retain();
    swift_retain();
    v14 = swift_retain();
    sub_100877B3C(v14, a2, (uint64_t)sub_1008C1A60, (uint64_t)v8);
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1008B9F48(char a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  _QWORD *v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD);
  _QWORD *v40;
  _QWORD aBlock[6];

  v39 = a2;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v38 = a3;
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    swift_retain();
    v17 = sub_10000D338();
    swift_release();
    if ((v17 & 1) != 0)
    {
      v37 = *(_QWORD *)(a4 + 48);
      v18 = (_QWORD *)swift_allocObject(&unk_101098E08, 48, 7);
      v20 = v38;
      v19 = v39;
      v18[2] = a4;
      v18[3] = v19;
      v18[4] = v20;
      v18[5] = a5;
      aBlock[4] = sub_1008C1AA0;
      aBlock[5] = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101098E20;
      v21 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      v22 = swift_retain();
      static DispatchQoS.unspecified.getter(v22);
      v40 = _swiftEmptyArrayStorage;
      v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v24, v25, v9, v23);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v21);
      _Block_release(v21);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return swift_release();
    }
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B7A18);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "performKeyRoll: Not a me device. Not initiating keyRoll", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7A18);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "performKeyRoll: secureLocations not setup. Not proceeding with KeyRoll", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

  }
  return v39(0);
}

uint64_t sub_1008BA324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  void **aBlock;
  uint64_t v115;
  uint64_t (*v116)(uint64_t);
  void *v117;
  uint64_t (*v118)();
  uint64_t v119;

  v94 = a4;
  v110 = a2;
  v111 = a3;
  v109 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v107 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v106 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v105 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v104 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v102 = *(_QWORD *)(v8 - 8);
  v103 = v8;
  __chkstk_darwin(v8);
  v101 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for DispatchTime(0);
  v97 = *(_QWORD *)(v98 - 8);
  v10 = __chkstk_darwin(v98);
  v95 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v96 = (char *)&v93 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for KeyAlignmentRecord(0);
  v16 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v99 = (uint64_t)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v18);
  v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v112 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v24 = type metadata accessor for Logger(0);
  v108 = sub_10001A9E8(v24, (uint64_t)qword_1011B7A18);
  v25 = Logger.logObject.getter(v108);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = v22;
    v28 = v21;
    v29 = v6;
    v30 = v4;
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "performKeyRoll: Starting ", v31, 2u);
    v32 = v31;
    v4 = v30;
    v6 = v29;
    v21 = v28;
    v22 = v27;
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = v109;
  sub_1008AE274((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    v34 = sub_100004048((uint64_t)v20, &qword_1010ED860);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "performKeyRoll: No VirtualMeDevice OBR Identifier", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    sub_10001F6FC();
    v39 = v101;
    v38 = v102;
    v40 = v103;
    (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v101, enum case for DispatchQoS.QoSClass.default(_:), v103);
    v41 = (void *)static OS_dispatch_queue.global(qos:)(v39);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    v42 = swift_allocObject(&unk_101098E58, 32, 7);
    v43 = v111;
    *(_QWORD *)(v42 + 16) = v110;
    *(_QWORD *)(v42 + 24) = v43;
    v118 = sub_1002E3C58;
    v119 = v42;
    aBlock = _NSConcreteStackBlock;
    v115 = 1107296256;
    v116 = sub_100016FB8;
    v117 = &unk_101098E70;
    v44 = _Block_copy(&aBlock);
    v45 = swift_retain();
    v46 = v104;
    static DispatchQoS.unspecified.getter(v45);
    v113 = _swiftEmptyArrayStorage;
    v47 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v48 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v49 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v50 = v106;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v48, v49, v4, v47);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v50, v44);
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v107 + 8))(v50, v4);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v46, v6);
    return swift_release();
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v112, v20, v21);
  swift_retain();
  sub_1008892B4((uint64_t)v15);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v100) == 1)
  {
    v51 = v22;
    v109 = v21;
    v52 = sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010F47D0);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "performKeyRoll: No KeyAlignmentRecord setup for VirtualMeDevice", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    sub_10001F6FC();
    v57 = v101;
    v56 = v102;
    v58 = v103;
    (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v101, enum case for DispatchQoS.QoSClass.default(_:), v103);
    v59 = (void *)static OS_dispatch_queue.global(qos:)(v57);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
    v60 = swift_allocObject(&unk_101098EA8, 32, 7);
    v61 = v111;
    *(_QWORD *)(v60 + 16) = v110;
    *(_QWORD *)(v60 + 24) = v61;
    v118 = sub_1002E3C58;
    v119 = v60;
    aBlock = _NSConcreteStackBlock;
    v115 = 1107296256;
    v116 = sub_100016FB8;
    v117 = &unk_101098EC0;
    v62 = _Block_copy(&aBlock);
    v63 = swift_retain();
    v64 = v104;
    static DispatchQoS.unspecified.getter(v63);
    v113 = _swiftEmptyArrayStorage;
    v65 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v66 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v67 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v68 = v106;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v66, v67, v4, v65);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v64, v68, v62);
    _Block_release(v62);

    (*(void (**)(char *, uint64_t))(v107 + 8))(v68, v4);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v64, v6);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v112, v109);
    return swift_release();
  }
  v70 = v33;
  v71 = v22;
  v72 = v99;
  sub_1000126EC((uint64_t)v15, v99, type metadata accessor for KeyAlignmentRecord);
  v73 = dispatch_group_create();
  dispatch_group_enter(v73);
  v74 = swift_allocObject(&unk_101098EF8, 56, 7);
  *(_QWORD *)(v74 + 16) = v73;
  *(_QWORD *)(v74 + 24) = v70;
  v75 = v111;
  *(_QWORD *)(v74 + 32) = v110;
  *(_QWORD *)(v74 + 40) = v75;
  *(_QWORD *)(v74 + 48) = v94;
  swift_retain();
  v76 = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1007A277C(v72, 0, (void (*)(uint64_t))sub_1008BAD5C, 0, sub_1008C1B0C, (void (*)(uint64_t))v74);
  swift_release();
  v77 = swift_release();
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter(v78);
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "performKeyRoll: Waiting to complete KeyRoll", v80, 2u);
    swift_slowDealloc(v80, -1, -1);
  }
  v81 = v21;

  v82 = v95;
  static DispatchTime.now()(v83);
  v84 = v96;
  + infix(_:_:)(v82, 60.0);
  v85 = *(void (**)(char *, uint64_t))(v97 + 8);
  v86 = v82;
  v87 = v98;
  v85(v86, v98);
  v88 = OS_dispatch_group.wait(timeout:)(v84) & 1;
  v85(v84, v87);
  v89 = static DispatchTimeoutResult.== infix(_:_:)(v88, 1);
  if ((v89 & 1) != 0)
  {
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.default.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v92 = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "performKeyRoll: Timed out waiting to modify KeyAlignmentRecord", v92, 2u);
      swift_slowDealloc(v92, -1, -1);
    }

  }
  else
  {
    v90 = v76;
  }

  sub_1000126B0(v72, type metadata accessor for KeyAlignmentRecord);
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v112, v81);
}

uint64_t sub_1008BAD5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = type metadata accessor for KeyAlignmentRecord(0);
  v7 = *(int *)(result + 28);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = __CFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    v11 = result;
    *(_QWORD *)(a1 + v7) = v10;
    static Date.trustedNow.getter((uint64_t)v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 40))(a1 + *(int *)(v11 + 32), v5, v2);
  }
  return result;
}

void sub_1008BAE08(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint8_t *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  _QWORD *v68;
  void **aBlock;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  void *v72;
  void *v73;
  _QWORD *v74;

  v66 = a6;
  v67 = a2;
  v63 = a4;
  v64 = a5;
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  __chkstk_darwin(v8);
  v59 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for KeyAlignmentRecord(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1011082B0);
  __chkstk_darwin(v19);
  v21 = (uint8_t **)((char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v21, &qword_1011082B0);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    v57 = v15;
    v58 = v13;
    v22 = (_QWORD *)*v21;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B7A18);
    swift_errorRetain(v22);
    v24 = swift_errorRetain(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (void **)swift_slowAlloc(32, -1);
      v68 = v22;
      aBlock = v28;
      *(_DWORD *)v27 = 136315138;
      v56 = v27 + 4;
      swift_errorRetain(v22);
      v29 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v30 = String.init<A>(describing:)(&v68, v29);
      v68 = (_QWORD *)sub_100016940(v30, v31, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &aBlock, v56, v27 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "performKeyRoll: Error rolling keyIndex %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_errorRelease(v22);
      swift_errorRelease(v22);
    }

    v40 = v10;
    v41 = v12;
    v42 = v57;
    v43 = v64;
    sub_10001F6FC();
    v45 = v59;
    v44 = v60;
    v46 = v61;
    (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v59, enum case for DispatchQoS.QoSClass.default(_:), v61);
    v47 = (void *)static OS_dispatch_queue.global(qos:)(v45);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    v48 = (_QWORD *)swift_allocObject(&unk_101098F20, 40, 7);
    v48[2] = v63;
    v48[3] = v43;
    v48[4] = v22;
    v73 = sub_100016FE4;
    v74 = v48;
    aBlock = _NSConcreteStackBlock;
    v70 = 1107296256;
    v71 = sub_100016FB8;
    v72 = &unk_101098F38;
    v49 = _Block_copy(&aBlock);
    swift_retain();
    v50 = swift_errorRetain(v22);
    static DispatchQoS.unspecified.getter(v50);
    v68 = _swiftEmptyArrayStorage;
    v51 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v52 = v42;
    v53 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v54 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v53, v54, v40, v51);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v52, v41, v49);
    _Block_release(v49);

    swift_errorRelease(v22);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v41, v40);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v52, v62);
  }
  else
  {
    sub_1000126EC((uint64_t)v21, (uint64_t)v18, type metadata accessor for KeyAlignmentRecord);
    v32 = (_QWORD *)swift_allocObject(&unk_101098F70, 40, 7);
    v33 = v63;
    v34 = v64;
    v32[2] = a3;
    v32[3] = v33;
    v32[4] = v34;
    v73 = sub_1008C1B38;
    v74 = v32;
    aBlock = _NSConcreteStackBlock;
    v70 = 1107296256;
    v71 = sub_100016FB8;
    v72 = &unk_101098F88;
    v35 = _Block_copy(&aBlock);
    swift_retain();
    v36 = swift_retain();
    static DispatchQoS.unspecified.getter(v36);
    v68 = _swiftEmptyArrayStorage;
    v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v38, v39, v10, v37);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v35);
    _Block_release(v35);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v62);
    sub_1000126B0((uint64_t)v18, type metadata accessor for KeyAlignmentRecord);
  }
  swift_release();
  v55 = v67;
  Transaction.capture()();
  dispatch_group_leave(v55);
}

void sub_1008BB454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[6];

  v35 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7A18);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    v34 = a1;
    v20 = v10;
    v21 = v7;
    v22 = v5;
    v23 = a2;
    v24 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "performKeyRoll: Modified keyIndex.", v19, 2u);
    v25 = v24;
    a2 = v23;
    v5 = v22;
    v7 = v21;
    v10 = v20;
    a1 = v34;
    swift_slowDealloc(v25, -1, -1);
  }

  sub_1008B4878();
  sub_1008B8F08(a1);
  LOBYTE(aBlock[0]) = 1;
  CurrentValueSubject.send(_:)(aBlock);
  sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  v26 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v27 = swift_allocObject(&unk_101098FC0, 32, 7);
  v28 = v35;
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = v28;
  aBlock[4] = sub_1002A3AD4;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101098FD8;
  v29 = _Block_copy(aBlock);
  v30 = swift_retain();
  static DispatchQoS.unspecified.getter(v30);
  v39 = _swiftEmptyArrayStorage;
  v31 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v33 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v32, v33, v5, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v37);
  swift_release();
  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  sub_100C4C864();
}

void sub_1008BB7F0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  Swift::String v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  _QWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  Swift::String v54;
  uint64_t v55;

  v5 = type metadata accessor for String.Encoding(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    *a2 = *(_QWORD *)(a1 + 64);
    a2[1] = v9;
    goto LABEL_31;
  }
  v10 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v11 = objc_msgSend(v10, "aa_primaryAppleAccount");

  if (!v11)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7A18);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Could not obtain aa_primaryAppleAccount while getting myPersonID !", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    goto LABEL_17;
  }
  v12 = objc_msgSend(v11, "aa_personID");
  if (!v12)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Primary AppleAccount has nil aa_personID!", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_31;
  }
  v13 = v12;
  v50 = v11;
  v55 = v2;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v16 = v15;

  static String.Encoding.utf8.getter(v17);
  v18 = String.data(using:allowLossyConversion:)(v8, 0, v14, v16);
  v20 = v19;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v49 = v18;
  if (v20 >> 60 == 15)
  {
    v21 = 0;
    v22 = 0;
  }
  else
  {
    sub_10001BBBC(v18, v20);
    v33 = Data.base64EncodedString(options:)(0);
    sub_10001EF3C(v18, v20);
    v54 = v33;
    v52 = 61;
    v53 = 0xE100000000000000;
    v51[0] = 126;
    v51[1] = 0xE100000000000000;
    v34 = sub_1000330C8();
    v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v52, v51, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v34, v34, v34);
    v22 = v35;
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(a1 + 64) = v21;
  *(_QWORD *)(a1 + 72) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v36 = type metadata accessor for Logger(0);
  sub_10001A9E8(v36, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain(v22);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v54._countAndFlagsBits = v47;
    v48 = v20;
    *(_DWORD *)v40 = 136315138;
    if (v22)
      v41 = v21;
    else
      v41 = 7104878;
    if (v22)
      v42 = v22;
    else
      v42 = 0xE300000000000000;
    v46 = v40 + 4;
    swift_bridgeObjectRetain(v22);
    v52 = sub_100016940(v41, v42, &v54._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v46, v40 + 12);
    swift_bridgeObjectRelease_n(v22, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "MyPersonID %s", v40, 0xCu);
    v43 = v47;
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    sub_10001EF3C(v49, v48);
  }
  else
  {
    sub_10001EF3C(v49, v20);

    swift_bridgeObjectRelease_n(v22, 2);
  }
  v44 = *(_QWORD *)(a1 + 72);
  *a2 = *(_QWORD *)(a1 + 64);
  a2[1] = v44;
  swift_bridgeObjectRetain(v44);
LABEL_31:
  swift_bridgeObjectRetain(v9);
}

uint64_t sub_1008BBD30()
{
  uint64_t v0;

  sub_10001D8A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, &qword_10110BDD8);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1008BBE24()
{
  uint64_t v0;

  sub_1008BBD30();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1008BBE48()
{
  return type metadata accessor for SecureLocationsKeyManager(0);
}

uint64_t type metadata accessor for SecureLocationsKeyManager(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_10110BA00, (uint64_t)&nominal type descriptor for SecureLocationsKeyManager);
}

void sub_1008BBE64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[20];

  v4[0] = &unk_100E52B30;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = &unk_100E52B30;
  v4[6] = &unk_100E52B48;
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[9] = &unk_100E52B48;
  v4[10] = &unk_100E52B48;
  v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100149C5C(319, (unint64_t *)&unk_10110BA10, type metadata accessor for SecureLocationsCachedSharingKey);
  if (v3 <= 0x3F)
  {
    v4[13] = *(_QWORD *)(v2 - 8) + 64;
    v4[14] = &unk_100E52B48;
    v4[15] = &unk_100E52B48;
    v4[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 20, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for SecureLocationsCachedSharingKey(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110BD68, (uint64_t)&nominal type descriptor for SecureLocationsCachedSharingKey);
}

uint64_t *sub_1008BBF54(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = *(uint64_t *)((char *)a2 + v12 + 8);
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
    }
    else
    {
      v17 = *v14;
      sub_10001BBBC(*v14, v15);
      *(_QWORD *)v13 = v17;
      *((_QWORD *)v13 + 1) = v15;
    }
    v18 = v14[2];
    v19 = v14[3];
    sub_10001BBBC(v18, v19);
    *((_QWORD *)v13 + 2) = v18;
    *((_QWORD *)v13 + 3) = v19;
    v20 = v14 + 4;
    v21 = v14[5];
    if (v21 >> 60 == 15)
    {
      *((_OWORD *)v13 + 2) = *(_OWORD *)v20;
    }
    else
    {
      v22 = *v20;
      sub_10001BBBC(*v20, v14[5]);
      *((_QWORD *)v13 + 4) = v22;
      *((_QWORD *)v13 + 5) = v21;
    }
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_1008BC0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);
  result = sub_10001BC14(v7[2], v7[3]);
  v10 = v7[5];
  if (v10 >> 60 != 15)
    return sub_10001BC14(v7[4], v10);
  return result;
}

uint64_t sub_1008BC154(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = (uint64_t *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  else
  {
    v15 = *v13;
    sub_10001BBBC(*v13, v14);
    *(_QWORD *)v12 = v15;
    *(_QWORD *)(v12 + 8) = v14;
  }
  v16 = v13[2];
  v17 = v13[3];
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(v12 + 16) = v16;
  *(_QWORD *)(v12 + 24) = v17;
  v18 = v13 + 4;
  v19 = v13[5];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)(v12 + 32) = *(_OWORD *)v18;
  }
  else
  {
    v20 = *v18;
    sub_10001BBBC(*v18, v13[5]);
    *(_QWORD *)(v12 + 32) = v20;
    *(_QWORD *)(v12 + 40) = v19;
  }
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1008BC274(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  if (*(_QWORD *)(a1 + v11 + 8) >> 60 == 15)
  {
    if (v14 >> 60 != 15)
    {
      v15 = *v13;
      sub_10001BBBC(*v13, v14);
      *v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
    sub_1007EAC70((uint64_t)v12);
LABEL_6:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  v16 = *v13;
  sub_10001BBBC(*v13, v14);
  v17 = *v12;
  v18 = v12[1];
  *v12 = v16;
  v12[1] = v14;
  sub_10001BC14(v17, v18);
LABEL_8:
  v19 = v13[2];
  v20 = v13[3];
  sub_10001BBBC(v19, v20);
  v21 = v12[2];
  v22 = v12[3];
  v12[2] = v19;
  v12[3] = v20;
  sub_10001BC14(v21, v22);
  v23 = v13 + 4;
  v24 = v13[5];
  if ((unint64_t)v12[5] >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      v26 = *v23;
      sub_10001BBBC(*v23, v13[5]);
      v27 = v12[4];
      v28 = v12[5];
      v12[4] = v26;
      v12[5] = v24;
      sub_10001BC14(v27, v28);
      goto LABEL_15;
    }
    sub_1002EEEE0((uint64_t)(v12 + 4));
    goto LABEL_13;
  }
  if (v24 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)v12 + 2) = *(_OWORD *)v23;
    goto LABEL_15;
  }
  v25 = *v23;
  sub_10001BBBC(*v23, v13[5]);
  v12[4] = v25;
  v12[5] = v24;
LABEL_15:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1008BC424(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_OWORD *)(a1 + v11);
  v14 = (_OWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v13[2] = v14[2];
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_1008BC4CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_QWORD *)(a1 + v11 + 8);
  if (v14 >> 60 == 15)
    goto LABEL_4;
  v15 = *(_QWORD *)(v13 + 8);
  if (v15 >> 60 == 15)
  {
    sub_1007EAC70(v12);
LABEL_4:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_6;
  }
  v16 = *(_QWORD *)v12;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = v15;
  sub_10001BC14(v16, v14);
LABEL_6:
  v17 = *(_QWORD *)(v12 + 16);
  v18 = *(_QWORD *)(v12 + 24);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
  sub_10001BC14(v17, v18);
  v19 = (_QWORD *)(v13 + 32);
  v20 = *(_QWORD *)(v12 + 40);
  if (v20 >> 60 != 15)
  {
    v21 = *(_QWORD *)(v13 + 40);
    if (v21 >> 60 != 15)
    {
      v22 = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v12 + 32) = *v19;
      *(_QWORD *)(v12 + 40) = v21;
      sub_10001BC14(v22, v20);
      goto LABEL_11;
    }
    sub_1002EEEE0(v12 + 32);
  }
  *(_OWORD *)(v12 + 32) = *(_OWORD *)v19;
LABEL_11:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1008BC610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008BC61C);
}

uint64_t sub_1008BC61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24) >> 60;
  if (((4 * (_DWORD)v14) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v14) & 0xC | (v14 >> 2));
  else
    return 0;
}

uint64_t sub_1008BC6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008BC6E4);
}

uint64_t sub_1008BC6E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v15 = a1 + *(int *)(a4 + 24);
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_1008BC798(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "0";
      v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1008BC834(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_10110BDA8, type metadata accessor for SecureLocationsCachedSharingKey, (uint64_t)&unk_100E52BC0);
  result = sub_100006204(&qword_1011082F8, type metadata accessor for SecureLocationsCachedSharingKey, (uint64_t)&unk_100E52B98);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008BC890()
{
  unint64_t result;

  result = qword_10110BDB8;
  if (!qword_10110BDB8)
  {
    result = swift_getWitnessTable(byte_100E52DC0, &type metadata for SecureLocationsCachedSharingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BDB8);
  }
  return result;
}

unint64_t sub_1008BC8D4()
{
  unint64_t result;

  result = qword_10110BDC0;
  if (!qword_10110BDC0)
  {
    result = swift_getWitnessTable(byte_100E5EA18, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_10110BDC0);
  }
  return result;
}

unint64_t sub_1008BC918()
{
  unint64_t result;

  result = qword_10110BDD0;
  if (!qword_10110BDD0)
  {
    result = swift_getWitnessTable(byte_100E5E9F0, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_10110BDD0);
  }
  return result;
}

uint64_t sub_1008BC95C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[6];
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43[24];

  v42 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  v9 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedDecryptionKeys);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedDecryptionKeys, v43, 0, 0);
  v13 = *v12;
  if (*(_QWORD *)(*v12 + 16))
  {
    sub_10001BBBC(a2, a3);
    swift_bridgeObjectRetain(v13);
    v14 = sub_100519764(a2, a3);
    if ((v15 & 1) != 0)
    {
      v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v14);
      v17 = *v16;
      v18 = v16[1];
      sub_10001BBBC(*v16, v18);
      swift_bridgeObjectRelease();
      result = sub_10001BC14(a2, a3);
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
    sub_10001BC14(a2, a3);
  }
  v38 = a3;
  swift_retain();
  v20 = sub_10088A680();
  swift_release();
  v21 = v20[2];
  if (v21)
  {
    v28[3] = v12;
    v29 = a4;
    v30 = v4;
    v22 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v28[5] = v20;
    v23 = (uint64_t)v20 + v22;
    v24 = v38;
    v33 = HIDWORD(a2);
    v25 = __OFSUB__(HIDWORD(a2), (_DWORD)a2);
    v36 = v25;
    v40 = BYTE6(v38);
    v41 = v38 >> 62;
    v37 = v38 & 0x3FFFFFFFFFFFFFFFLL;
    v34 = (int)a2;
    v35 = HIDWORD(a2) - (int)a2;
    v31 = (a2 >> 32) - (int)a2;
    v32 = a2 >> 32;
    v26 = *(_QWORD *)(v9 + 72);
    v39 = v26;
    do
    {
      sub_10005972C(v23, (uint64_t)v11, type metadata accessor for SecureLocationsCachedSharedKey);
      v27 = *(_QWORD *)&v11[*(int *)(v42 + 28) + 8];
      if (v27 >> 60 != 15)
        __asm { BR              X8 }
      sub_10001BBBC(a2, v24);
      sub_10001EF3C(0, 0xF000000000000000);
      sub_10001EF3C(a2, v24);
      sub_1000126B0((uint64_t)v11, type metadata accessor for SecureLocationsCachedSharedKey);
      v23 += v26;
      --v21;
    }
    while (v21);
    result = swift_bridgeObjectRelease();
    v17 = 0;
    v18 = 0xF000000000000000;
    a4 = v29;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v17 = 0;
    v18 = 0xF000000000000000;
  }
LABEL_15:
  *a4 = v17;
  a4[1] = v18;
  return result;
}

uint64_t sub_1008BD5FC@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v34 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  v7 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v25 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v9 = sub_10088A680();
  swift_release();
  v10 = v9[2];
  if (v10)
  {
    v19 = a3;
    v20 = v3;
    v21 = v9;
    v11 = (uint64_t)v9 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v23 = HIDWORD(a1);
    v12 = __OFSUB__(HIDWORD(a1), (_DWORD)a1);
    v28 = v12;
    v32 = BYTE6(a2);
    v33 = a2 >> 62;
    v29 = a2;
    v30 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    v26 = (int)a1;
    v27 = HIDWORD(a1) - (int)a1;
    v24 = a1 >> 32;
    v22 = (a1 >> 32) - (int)a1;
    v13 = *(_QWORD *)(v7 + 72);
    v14 = a2;
    v15 = (uint64_t)v25;
    v31 = v13;
    do
    {
      sub_10005972C(v11, v15, type metadata accessor for SecureLocationsCachedSharedKey);
      v16 = *(_QWORD *)(v15 + *(int *)(v34 + 28) + 8);
      if (v16 >> 60 != 15)
        __asm { BR              X8 }
      sub_10001BBBC(a1, v14);
      sub_10001EF3C(0, 0xF000000000000000);
      sub_10001EF3C(a1, v14);
      sub_1000126B0(v15, type metadata accessor for SecureLocationsCachedSharedKey);
      v11 += v13;
      --v10;
    }
    while (v10);
    result = swift_bridgeObjectRelease();
    a3 = v19;
  }
  else
  {
    result = swift_bridgeObjectRelease();
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

unint64_t sub_1008BE354(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v62[4];
  int v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;

  v70 = a2;
  v71 = a4;
  v14 = sub_10001A9A8(&qword_1010F79B8);
  v72 = *(_QWORD *)(v14 - 8);
  v73 = v14;
  __chkstk_darwin(v14);
  v16 = &v62[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F79C0);
  v18 = __chkstk_darwin(v17);
  v21 = &v62[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = *(_QWORD *)a1;
  LODWORD(v23) = *(unsigned __int8 *)(a1 + 8);
  if ((v23 & 1) != 0)
  {
    sub_100165D28(*(_QWORD *)a1);
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B6D08);
    sub_100165D28(v22);
    v25 = sub_100165D28(v22);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(12, -1);
      v74 = v23;
      v23 = v28;
      v29 = swift_slowAlloc(32, -1);
      v75 = v22;
      v76 = v29;
      *(_DWORD *)v23 = 136446210;
      v30 = sub_1000FE094();
      v31 = Error.localizedDescription.getter(&type metadata for MessagingError, v30);
      v75 = sub_100016940(v31, v32, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      sub_100336044(v22, 1);
      sub_100336044(v22, 1);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "liveLocations: ERROR retrieving messagingSession during startLive: %{public}s", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      v33 = v23;
      LOBYTE(v23) = v74;
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      sub_100336044(v22, 1);
      sub_100336044(v22, 1);
    }

    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_retain();
    v45 = sub_100165B94(v22);
    sub_100C4892C(0, v45, v46);
    swift_release();
    swift_bridgeObjectRelease();
    v47 = sub_1000FE094();
    v48 = swift_allocError(&type metadata for MessagingError, v47, 0, 0);
    *v49 = v22;
    sub_100165D28(v22);
    a7(v48);
    swift_errorRelease(v48);
  }
  else
  {
    v67 = v19;
    v68 = v18;
    v69 = a6;
    v34 = qword_1010E9B48;
    swift_retain();
    if (v34 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v74 = v23;
    v35 = type metadata accessor for Logger(0);
    sub_10001A9E8(v35, (uint64_t)qword_1011B6D08);
    sub_100336050(v22, 0);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    sub_100336050(v22, 0);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      v40 = swift_slowAlloc(52, -1);
      v64 = swift_slowAlloc(96, -1);
      v76 = v64;
      *(_DWORD *)v40 = 136316163;
      v66 = a7;
      swift_retain();
      v63 = v39;
      v41 = sub_10037F868();
      v65 = a8;
      v43 = v42;
      sub_100336044(v22, 0);
      v75 = sub_100016940(v41, v43, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease();
      sub_100336044(v22, 0);
      sub_100336044(v22, 0);
      *(_WORD *)(v40 + 12) = 2160;
      v75 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 14, v40 + 22);
      *(_WORD *)(v40 + 22) = 2081;
      swift_bridgeObjectRetain(a3);
      v75 = sub_100016940(v70, a3, &v76);
      a7 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 24, v40 + 32);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v40 + 32) = 2160;
      v75 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 34, v40 + 42);
      *(_WORD *)(v40 + 42) = 2081;
      swift_bridgeObjectRetain(a5);
      v75 = sub_100016940(v71, a5, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 44, v40 + 52);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v63, "liveLocations: Received session %s for identifier %{private,mask.hash}s for findMyId %{private,mask.hash}s ", (uint8_t *)v40, 0x34u);
      v44 = v64;
      swift_arrayDestroy(v64, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {
      sub_100336044(v22, 0);
      sub_100336044(v22, 0);

      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease_n(a3, 2);
    }
    v76 = *(_QWORD *)(v22 + qword_1011B6D00);
    swift_retain();
    v50 = sub_10001A9A8(&qword_1010F79D0);
    v51 = sub_10001A9A8(&qword_1010F79D8);
    v52 = sub_1000193A4(&qword_1010F79E0, &qword_1010F79D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_100324B7C, 0, v50, v51, v52);
    swift_release();
    v53 = sub_10001A9A8(&qword_1010F79E8);
    v54 = sub_1000193A4(&qword_1010F79F0, &qword_1010F79B8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v55 = sub_1000193A4(&qword_1010F79F8, &qword_1010F79E8, (const char *)&protocol conformance descriptor for Just<A>);
    v56 = v73;
    Publisher.catch<A>(_:)(sub_100324BC0, 0, v73, v53, v54, v55);
    (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v16, v56);
    v57 = swift_allocObject(&unk_101099038, 24, 7);
    v23 = v69;
    swift_weakInit(v57 + 16, v69);
    v58 = sub_1000193A4(&qword_1010F7A00, (uint64_t *)&unk_1010F79C0, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v59 = v68;
    v60 = Publisher<>.sink(receiveValue:)(sub_1008C1BB8, v57, v68, v58);
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v21, v59);
    *(_QWORD *)(v23 + 112) = v60;
    swift_release();
    a7(0);
    LOBYTE(v23) = v74;
  }
  return sub_100336044(v22, v23);
}

unint64_t sub_1008BEB18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];

  v4 = sub_10001A9A8(&qword_1010F7A08);
  __chkstk_darwin(v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A9A8(&qword_1010F79D8);
  __chkstk_darwin(v7);
  v9 = (unint64_t *)&v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v30, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    sub_10000F9B8(a1, (uint64_t)v9, &qword_1010F79D8);
    if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
    {
      v11 = *v9;
      if (qword_1010E9B48 != -1)
        swift_once(&qword_1010E9B48, sub_100308748);
      v12 = type metadata accessor for Logger(0);
      sub_10001A9E8(v12, (uint64_t)qword_1011B6D08);
      sub_100165D28(v11);
      v13 = sub_100165D28(v11);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.error.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v17 = swift_slowAlloc(32, -1);
        v27 = v11;
        v28 = v17;
        *(_DWORD *)v16 = 136446210;
        v18 = sub_1000FE094();
        v19 = Error.localizedDescription.getter(&type metadata for MessagingError, v18);
        v27 = sub_100016940(v19, v20, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v16 + 4, v16 + 12);
        swift_bridgeObjectRelease();
        sub_100165D38(v11);
        sub_100165D38(v11);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "liveLocations: readMessagePublisher error: %{public}s", v16, 0xCu);
        swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);
      }
      else
      {
        sub_100165D38(v11);
        sub_100165D38(v11);
      }

      if (qword_1010EA428 != -1)
        swift_once(&qword_1010EA428, sub_100C48554);
      v28 = 0;
      v29 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v28 = 0xD00000000000001BLL;
      v29 = 0x8000000100EEA040;
      sub_100165D28(v11);
      v22 = sub_100165B94(v11);
      v24 = v23;
      sub_100165D38(v11);
      v25._countAndFlagsBits = v22;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      sub_100C4892C(0, v28, v29);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return sub_100165D38(v11);
    }
    else
    {
      sub_100005CF0((uint64_t)v9, (uint64_t)v6, &qword_1010F7A08);
      v21 = objc_autoreleasePoolPush();
      sub_1008BEEC8();
      objc_autoreleasePoolPop(v21);
      sub_100004048((uint64_t)v6, &qword_1010F7A08);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1008BEEC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  sub_1008AA408((uint64_t)&v30);
  if (v0)
  {
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v1 = type metadata accessor for Logger(0);
    sub_10001A9E8(v1, (uint64_t)qword_1011B6D08);
    swift_errorRetain(v0);
    v2 = swift_errorRetain(v0);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v30 = v6;
      *(_DWORD *)v5 = 136446210;
      v37 = v0;
      swift_errorRetain(v0);
      v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v8 = String.init<A>(describing:)(&v37, v7);
      v37 = sub_100016940(v8, v9, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "liveLocations: Message extract error: %{public}s", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);
    }
    else
    {
      swift_errorRelease(v0);
      swift_errorRelease(v0);
    }

    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    v30 = 0;
    v31 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v30 = 0xD000000000000016;
    v31 = 0x8000000100EEA060;
    v37 = v0;
    swift_errorRetain(v0);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v24._countAndFlagsBits = String.init<A>(describing:)(&v37, v23);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    sub_100C4892C(0, v30, v31);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_errorRelease(v0);
  }
  else
  {
    v10 = v30;
    v11 = v31;
    v29 = v33;
    v12 = v35;
    v27 = v32;
    v28 = v34;
    v13 = v36;
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B6D08);
    sub_10001BBBC(v10, v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    sub_10001BBBC(v10, v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v37 = v26;
      *(_DWORD *)v18 = 136315138;
      v30 = v10;
      v31 = v11;
      v32 = v27;
      v33 = v29;
      v34 = v28;
      v35 = v12;
      v36 = v13;
      sub_10001BBBC(v10, v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      v19 = String.init<A>(describing:)(&v30, &type metadata for SecureLocationsEncodedPayload);
      v30 = sub_100016940(v19, v20, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "liveLocations: Received Payload %s", v18, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      v21 = v28;
      v22 = v29;
    }
    else
    {
      sub_10001BC14(v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v10, v11);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = v29;
      v21 = v28;
    }
    v30 = v10;
    v31 = v11;
    v32 = v27;
    v33 = v22;
    v34 = v21;
    v35 = v12;
    v36 = v13;
    swift_retain();
    PassthroughSubject.send(_:)(&v30);
    swift_release();
    sub_10001BC14(v10, v11);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1008BF43C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  char v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED570);
  __chkstk_darwin(v8);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v74 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v74 - v18;
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v78 = v14;
  v79 = v19;
  v77 = v7;
  v20 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0);
  v21 = v20[5];
  result = *(_QWORD *)(a1 + v21);
  v23 = *(_QWORD *)(a1 + v21 + 8);
  v24 = (_QWORD *)(a2 + v21);
  v25 = v24[1];
  v26 = result == *v24 && v23 == v25;
  if (v26
    || (v27 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v23, *v24, v25, 0), result = 0, (v27 & 1) != 0))
  {
    v74 = v5;
    v75 = v10;
    v76 = v4;
    v28 = v20[6];
    v30 = *(_QWORD *)(a1 + v28);
    v29 = *(_QWORD *)(a1 + v28 + 8);
    v31 = (uint64_t *)(a2 + v28);
    v32 = *v31;
    v33 = v31[1];
    if (v29 >> 60 == 15)
    {
      if (v33 >> 60 == 15)
      {
LABEL_13:
        v38 = v20[7];
        v39 = *(_QWORD *)(a1 + v38);
        v40 = *(_QWORD *)(a1 + v38 + 8);
        v41 = (uint64_t *)(a2 + v38);
        v32 = *v41;
        v33 = v41[1];
        if (v40 >> 60 == 15)
        {
          if (v33 >> 60 == 15)
            goto LABEL_22;
        }
        else if (v33 >> 60 != 15)
        {
          sub_10001BD08(v39, v40);
          sub_10001BD08(v32, v33);
          _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v39, v40);
          v43 = v42;
          sub_10001EF3C(v32, v33);
          result = sub_10001EF3C(v39, v40);
          if ((v43 & 1) == 0)
            return 0;
LABEL_22:
          v44 = v20[8];
          v45 = (_QWORD *)(a1 + v44);
          v46 = *(_QWORD *)(a1 + v44 + 16);
          v47 = (_QWORD *)(a2 + v44);
          v48 = v47[2];
          if (v46)
          {
            v50 = (uint64_t)v75;
            v49 = v76;
            v51 = v74;
            if (!v48 || *v47 != *v45)
              return 0;
            result = v45[1];
            v52 = v47[1];
            if (result != v52 || v46 != v48)
            {
              v53 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v46, v52, v48, 0);
              result = 0;
              if ((v53 & 1) == 0)
                return result;
            }
          }
          else
          {
            v50 = (uint64_t)v75;
            v49 = v76;
            v51 = v74;
            if (v48)
              return 0;
          }
          v54 = v20[9];
          v55 = (uint64_t *)(a1 + v54);
          v56 = *(_QWORD *)(a1 + v54 + 8);
          v57 = (_QWORD *)(a2 + v54);
          v58 = v57[1];
          if (v56)
          {
            if (!v58)
              return 0;
            result = *v55;
            if (*v55 != *v57 || v56 != v58)
            {
              v59 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v56, *v57, v58, 0);
              result = 0;
              if ((v59 & 1) == 0)
                return result;
            }
          }
          else if (v58)
          {
            return 0;
          }
          v60 = v20[10];
          v61 = *(_QWORD *)(a1 + v60);
          v62 = *(_QWORD *)(a2 + v60);
          v63 = v62 - v61;
          if (v62 >= v61)
          {
            if ((uint64_t)(v62 - v61) >= 0)
            {
LABEL_41:
              if (!v63)
              {
                v64 = (uint64_t)v79;
                sub_10000F9B8(a1 + v20[11], (uint64_t)v79, (uint64_t *)&unk_1010EA690);
                v65 = v20[11];
                v66 = v64;
                sub_10000F9B8(a2 + v65, (uint64_t)v17, (uint64_t *)&unk_1010EA690);
                v67 = v50 + *(int *)(v8 + 48);
                sub_10000F9B8(v64, v50, (uint64_t *)&unk_1010EA690);
                sub_10000F9B8((uint64_t)v17, v67, (uint64_t *)&unk_1010EA690);
                v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
                if (v68(v50, 1, v49) == 1)
                {
                  sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
                  sub_100004048(v66, (uint64_t *)&unk_1010EA690);
                  if (v68(v67, 1, v49) == 1)
                  {
                    sub_100004048(v50, (uint64_t *)&unk_1010EA690);
                    return 1;
                  }
                  goto LABEL_47;
                }
                v69 = (uint64_t)v78;
                sub_10000F9B8(v50, (uint64_t)v78, (uint64_t *)&unk_1010EA690);
                if (v68(v67, 1, v49) == 1)
                {
                  sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
                  sub_100004048(v66, (uint64_t *)&unk_1010EA690);
                  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v69, v49);
LABEL_47:
                  sub_100004048(v50, &qword_1010ED570);
                  return 0;
                }
                v70 = v77;
                (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v77, v67, v49);
                v71 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                v72 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v70, v49, v71);
                v73 = *(void (**)(char *, uint64_t))(v51 + 8);
                v73(v70, v49);
                sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
                sub_100004048(v66, (uint64_t *)&unk_1010EA690);
                v73((char *)v69, v49);
                sub_100004048(v50, (uint64_t *)&unk_1010EA690);
                if ((v72 & 1) != 0)
                  return 1;
              }
              return 0;
            }
          }
          else
          {
            if ((uint64_t)(v61 - v62) >= 0)
            {
              v63 = v62 - v61;
              goto LABEL_41;
            }
            __break(1u);
          }
          __break(1u);
          return result;
        }
        sub_10001BD08(v39, v40);
        sub_10001BD08(v32, v33);
        v34 = v39;
        v35 = v40;
LABEL_18:
        sub_10001EF3C(v34, v35);
        sub_10001EF3C(v32, v33);
        return 0;
      }
    }
    else if (v33 >> 60 != 15)
    {
      sub_10001BD08(v30, v29);
      sub_10001BD08(v32, v33);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v30, v29);
      v37 = v36;
      sub_10001EF3C(v32, v33);
      result = sub_10001EF3C(v30, v29);
      if ((v37 & 1) == 0)
        return 0;
      goto LABEL_13;
    }
    sub_10001BD08(v30, v29);
    sub_10001BD08(v32, v33);
    v34 = v30;
    v35 = v29;
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_1008BF9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[5];
  _QWORD *v39;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    v35 = v12;
    v18 = a1;
    v19 = v9;
    v20 = v6;
    v21 = a3;
    v22 = v10;
    v23 = a2;
    v24 = v7;
    v25 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "SetupVirtualMeDevice: beaconStore is available. Now setting up VirtualMeDevice OBR", v17, 2u);
    v26 = v25;
    v7 = v24;
    a2 = v23;
    v10 = v22;
    a3 = v21;
    v6 = v20;
    v9 = v19;
    a1 = v18;
    v12 = v35;
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = (_QWORD *)swift_allocObject(&unk_1010984D0, 40, 7);
  v27[2] = a1;
  v27[3] = a2;
  v27[4] = a3;
  aBlock[4] = sub_1008BFCEC;
  v39 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010984E8;
  v28 = _Block_copy(aBlock);
  swift_retain();
  v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  v37 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v31, v32, v6, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v36);
  return swift_release(v39);
}

uint64_t sub_1008BFCDC()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1008BFCEC()
{
  uint64_t *v0;

  return sub_1008ADBC0(v0[2], v0[3], v0[4]);
}

uint64_t sub_1008BFCF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1008BFD1C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1008BFD58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1008B6314(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(unsigned __int8 *)(v2 + 56));
}

uint64_t sub_1008BFD6C()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;

  swift_release();
  swift_release();
  v1 = v0[8];
  if (v1 >> 60 != 15)
  {
    if (v0[6] >> 60 != 15)
    {
      sub_10001BC14(v0[5], v0[6]);
      v1 = v0[8];
    }
    sub_10001BC14(v0[7], v1);
    v2 = v0[10];
    if (v2 >> 60 != 15)
      sub_10001BC14(v0[9], v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease(v0[14]);
  return swift_deallocObject(v0, 120, 7);
}

void sub_1008BFE00()
{
  uint64_t v0;

  sub_1008B659C(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD))(v0 + 24), *(_QWORD *)(v0 + 32), v0 + 40, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(unsigned __int8 *)(v0 + 104), *(_QWORD *)(v0 + 112));
}

uint64_t sub_1008BFE1C()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1008BFE30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008BFE40()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1008BFE54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1008BFE64()
{
  uint64_t v0;

  sub_1008B7390(*(void (**)(void *))(v0 + 16));
}

uint64_t sub_1008BFE6C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008BFE90()
{
  uint64_t v0;

  return sub_1008B7438(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(uint64_t **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112), *(_QWORD *)(v0 + 120)) & 1;
}

uint64_t sub_1008BFEE0()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1008BFEEC(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t, unint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_1008BFF38(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3, a4);
  return a1;
}

uint64_t sub_1008BFF38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), void (*a8)(uint64_t, unint64_t), uint64_t (*a9)(uint64_t, uint64_t))
{
  uint64_t result;

  if (a4 >> 60 != 15)
  {
    a7();
    a8(a3, a4);
    return a9(a5, a6);
  }
  return result;
}

uint64_t sub_1008BFFB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1008BFFC4(char a1)
{
  uint64_t v1;

  sub_10038D28C(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1008BFFD8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1008C0014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_BYTE *)(v1 + 56);
  v11 = (_QWORD *)swift_task_alloc(dword_1010F9F94);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100004C28;
  return sub_1003B0014(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1008C00B8()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;

  v1 = v0[5];
  if (v1 >> 60 != 15)
  {
    if (v0[3] >> 60 != 15)
    {
      sub_10001BC14(v0[2], v0[3]);
      v1 = v0[5];
    }
    sub_10001BC14(v0[4], v1);
    v2 = v0[7];
    if (v2 >> 60 != 15)
      sub_10001BC14(v0[6], v2);
  }
  return swift_deallocObject(v0, 64, 7);
}

void sub_1008C0128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1008B56AC(a1, a2, *(_QWORD **)(v2 + 16), *(NSObject **)(v2 + 24));
}

uint64_t sub_1008C0130()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1008C0144(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110BDF4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1008B4DE0(a1, v4, v5, v6);
}

uint64_t sub_1008C01B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1008B4504(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1008C01C8(uint64_t a1)
{
  sub_1008B456C(a1);
}

uint64_t sub_1008C01D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100A7DDA8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_1008C01F0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1008B0F30(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1008C0210()
{
  uint64_t *v0;

  return sub_1008B1148(v0[2], v0[3], v0[4], v0[5]);
}

void sub_1008C0220(char a1)
{
  uint64_t v1;

  sub_1008B1D5C(a1, *(void (**)(void ***, void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1008C022C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1008B20A0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1008C0248()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;

  swift_release();
  v1 = v0[5];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[4], v1);
  sub_10001BC14(v0[6], v0[7]);
  v2 = v0[9];
  if (v2 >> 60 != 15)
    sub_10001BC14(v0[8], v2);
  swift_release();
  return swift_deallocObject(v0, 88, 7);
}

void sub_1008C02AC()
{
  uint64_t v0;
  void (*v1)(_OWORD *, _QWORD);
  __int128 v2;
  _OWORD v3[3];

  v1 = *(void (**)(_OWORD *, _QWORD))(v0 + 16);
  v2 = *(_OWORD *)(v0 + 48);
  v3[0] = *(_OWORD *)(v0 + 32);
  v3[1] = v2;
  v3[2] = *(_OWORD *)(v0 + 64);
  v1(v3, 0);
  Transaction.capture()();
}

uint64_t sub_1008C0300()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1008C0334()
{
  uint64_t v0;

  sub_1008B22B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(unsigned __int128 *, uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1008C0340()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1008C0354()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008C0364(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449794D646E6966 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449794D646E6966, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000015)
  {
    v8 = 0x8000000100EEA1C0;
    if (a2 == 0x8000000100EEA1C0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EEA1C0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100EEA1E0)
  {
    v9 = 0x8000000100EEA1E0;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EEA1E0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64)
  {
    v10 = 0xEB00000000656C64;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E614872656E776FLL, 0xEB00000000656C64, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000015)
  {
    v11 = 0x8000000100EC2AE0;
    if (a2 == 0x8000000100EC2AE0)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC2AE0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100EEA200)
  {
    v12 = 0x8000000100EEA200;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EEA200, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100EEA220)
  {
    swift_bridgeObjectRelease(0x8000000100EEA220);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EEA220, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1008C069C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x614264726F636572 && a2 == 0xED00004C52556573)
  {
    v5 = 0xED00004C52556573;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614264726F636572, 0xED00004C52556573, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x4B676E6972616873 && a2 == 0xEB00000000737965)
  {
    v8 = 0xEB00000000737965;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B676E6972616873, 0xEB00000000737965, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E49646572616873 && a2 == 0xEB00000000786564)
  {
    swift_bridgeObjectRelease(0xEB00000000786564);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E49646572616873, 0xEB00000000786564, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_1008C08B4(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for OwnedBeaconRecord(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  if (a1)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
    v13 = sub_10005972C(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v33 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = type metadata accessor for UUID(0);
      v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
      v32 = sub_100016940(v20, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "SetupVirtualMeDevice: Failed to remove duplicate OBR %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    }

  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B7A18);
    v23 = sub_10005972C(a2, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v33 = v27;
      *(_DWORD *)v26 = 136315138;
      v28 = type metadata accessor for UUID(0);
      v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
      v32 = sub_100016940(v30, v31, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "SetupVirtualMeDevice: Successfully removed duplicate OBR %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
    }

  }
  dispatch_group_leave(a3);
}

uint64_t sub_1008C0CA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (**v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t (**v67)(uint64_t);
  uint64_t (*v68)(uint64_t);
  unint64_t v69;
  uint64_t v71;
  id v72;
  __int128 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v76 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v75 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v74 = (char *)&v71 - v9;
  v84 = type metadata accessor for OwnedBeaconRecord(0);
  v10 = *(_QWORD *)(v84 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v84);
  v81 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v71 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v71 - v16;
  v18 = swift_allocObject(&unk_101098CC8, 24, 7);
  *(_QWORD *)(v18 + 16) = a3;
  v19 = *(_QWORD *)(a2 + 32);
  sub_10005972C(a1, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
  v83 = v15;
  sub_10005972C((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v77 = v20 | 7;
  v23 = swift_allocObject(&unk_101098CF0, v22 + 16, v20 | 7);
  v78 = v21;
  sub_1000126EC((uint64_t)v17, v23 + v21, type metadata accessor for OwnedBeaconRecord);
  v79 = v22;
  v80 = v23;
  v24 = (void (**)())(v23 + v22);
  *v24 = sub_100293D78;
  v24[1] = (void (*)())v18;
  v82 = v18;
  v25 = v18;
  v26 = v19;
  swift_retain_n(v25, 2);
  v72 = a3;
  v27 = swift_retain();
  v28 = static os_log_type_t.default.getter(v27);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v29 = qword_1011B7D38;
  v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v31 = swift_allocObject(v30, 72, 7);
  v73 = xmmword_100E22B00;
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  v32 = *(int *)(v84 + 20);
  v84 = a1;
  v33 = a1 + v32;
  v34 = type metadata accessor for UUID(0);
  v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
  v38 = v37;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = sub_10001AA00();
  *(_QWORD *)(v31 + 32) = v36;
  *(_QWORD *)(v31 + 40) = v38;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Unpair owned beacon: %@", 23, 2, v31);
  v39 = swift_bridgeObjectRelease();
  v40 = v74;
  static SystemInfo.lockState.getter(v39);
  v42 = v75;
  v41 = v76;
  (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v75, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  v43 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v86, v6, v43);
  dispatch thunk of RawRepresentable.rawValue.getter(&v85, v6, v43);
  v45 = v85;
  v44 = v86;
  v46 = *(void (**)(char *, uint64_t))(v41 + 8);
  v46(v42, v6);
  v47 = ((uint64_t (*)(char *, uint64_t))v46)(v40, v6);
  v48 = (uint64_t)v83;
  if (v44 == v45)
  {
    v49 = static os_log_type_t.default.getter(v47);
    os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
    v50 = sub_10008806C();
    v51 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v50, 0, 0);
    *v52 = 0;
    v53 = v72;
    sub_1008C08B4(v51, v48, v53);

    swift_errorRelease(v51);
  }
  v54 = dispatch_group_create();
  dispatch_group_enter(v54);
  v55 = sub_10001A9A8(&qword_1011003C0);
  v56 = *(_QWORD *)(v34 - 8);
  v57 = *(unsigned __int8 *)(v56 + 80);
  v58 = (v57 + 32) & ~v57;
  v59 = swift_allocObject(v55, v58 + *(_QWORD *)(v56 + 72), v57 | 7);
  *(_OWORD *)(v59 + 16) = v73;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v59 + v58, v33, v34);
  v60 = swift_allocObject(&unk_101098D18, 24, 7);
  *(_QWORD *)(v60 + 16) = v54;
  v61 = v54;
  sub_10075B3B4(v59, (uint64_t)sub_10028F938, v60);
  swift_bridgeObjectRelease();
  swift_release(v60);
  OS_dispatch_group.wait()();
  v62 = (char *)v84;
  v63 = v81;
  sub_10005972C(v84, v81, type metadata accessor for OwnedBeaconRecord);
  v64 = v79;
  v65 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8;
  v66 = swift_allocObject(&unk_101098D40, v65 + 10, v77);
  sub_1000126EC(v63, v66 + v78, type metadata accessor for OwnedBeaconRecord);
  v67 = (uint64_t (**)(uint64_t))(v66 + v64);
  v68 = (uint64_t (*)(uint64_t))v80;
  *v67 = sub_1008C16F0;
  v67[1] = v68;
  v69 = v66 + v65;
  *(_QWORD *)v69 = v26;
  *(_WORD *)(v69 + 8) = 257;
  swift_retain();
  swift_retain();
  sub_1009FB1F0(v62, (void (*)(_QWORD))sub_100297834, v66);
  swift_release(v68);
  swift_release(v26);
  swift_release(v66);

  sub_1000126B0(v48, type metadata accessor for OwnedBeaconRecord);
  return swift_release_n(v82, 2);
}

uint64_t sub_1008C1228()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1008C123C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008C124C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1008C1258()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD *, uint64_t);
  uint64_t v2;
  _QWORD v4[6];

  v1 = *(uint64_t (**)(_QWORD *, uint64_t))(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  memset(v4, 0, 24);
  v4[3] = 0xF000000000000000;
  v4[4] = 0;
  v4[5] = 0;
  return v1(v4, v2);
}

uint64_t sub_1008C129C()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;

  swift_release();
  v1 = v0[5];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[4], v1);
  sub_10001BC14(v0[6], v0[7]);
  v2 = v0[9];
  if (v2 >> 60 != 15)
    sub_10001BC14(v0[8], v2);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1008C12F8()
{
  uint64_t v0;
  uint64_t (*v1)(_OWORD *, _QWORD);
  __int128 v2;
  _OWORD v4[3];

  v1 = *(uint64_t (**)(_OWORD *, _QWORD))(v0 + 16);
  v2 = *(_OWORD *)(v0 + 48);
  v4[0] = *(_OWORD *)(v0 + 32);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(v0 + 64);
  return v1(v4, 0);
}

uint64_t sub_1008C133C()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1008C1350()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008C1360(uint64_t a1)
{
  uint64_t v1;

  return sub_1008AF9AC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1008C1378(uint64_t a1)
{
  uint64_t v1;

  sub_1008AEC70(a1, v1);
}

uint64_t sub_1008C1390()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1008C13C4(uint64_t a1)
{
  uint64_t v1;

  sub_1008AF0B0(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1008C13D0(uint64_t a1)
{
  uint64_t v1;

  return sub_1008B016C(a1, v1);
}

uint64_t sub_1008C13E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1008C1414()
{
  uint64_t v0;

  sub_1008B0374(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1008C141C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008C1440()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1008C16F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1008B09DC(a1, v1 + v4, *(uint64_t (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1008C1744()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v3 | 7);
}

uint64_t sub_1008C1A04()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1008C1A18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008C1A2C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1008C1A60(char a1)
{
  uint64_t v1;

  return sub_1008B9F48(a1, *(uint64_t (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1008C1A6C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1008C1AA0()
{
  uint64_t *v0;

  return sub_1008BA324(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1008C1AAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008C1AD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1008C1B0C(uint64_t a1)
{
  uint64_t v1;

  sub_1008BAE08(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1008C1B1C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1008C1B28()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

void sub_1008C1B38()
{
  uint64_t *v0;

  sub_1008BB454(v0[2], v0[3], v0[4]);
}

uint64_t sub_1008C1B44()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

unint64_t sub_1008C1B80(uint64_t a1)
{
  uint64_t v1;

  return sub_1008BE354(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void (**)(uint64_t))(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1008C1B94()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1008C1BB8(uint64_t a1)
{
  uint64_t v1;

  return sub_1008BEB18(a1, v1);
}

unint64_t sub_1008C1BC0()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1010F9658;
  if (!qword_1010F9658)
  {
    v1 = sub_10001F784(&qword_1010F3E38);
    v2 = sub_100365BE4();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F9658);
  }
  return result;
}

unint64_t sub_1008C1C24()
{
  unint64_t result;
  uint64_t v1;
  void *v2;

  result = qword_1010F9668;
  if (!qword_1010F9668)
  {
    v1 = sub_10001F784(&qword_1011063B0);
    v2 = &protocol witness table for String;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F9668);
  }
  return result;
}

uint64_t type metadata accessor for SecureLocationsCachedSharedKey(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110BE98, (uint64_t)&nominal type descriptor for SecureLocationsCachedSharedKey);
}

uint64_t sub_1008C1C94(uint64_t a1)
{
  uint64_t v1;

  return sub_1008AD600(a1, v1);
}

void sub_1008C1C9C(_BYTE *a1)
{
  uint64_t v1;

  sub_1008AD668(a1, v1);
}

uint64_t sub_1008C1CA4(_BYTE *a1)
{
  uint64_t v1;

  return sub_1008AD9D0(a1, v1);
}

uint64_t sub_1008C1CB0(uint64_t a1)
{
  uint64_t v1;

  return sub_1008B9CE0(a1, v1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsCachedSharingKey.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1008C1D14 + 4 * byte_100E52A8B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1008C1D48 + 4 * byte_100E52A86[v4]))();
}

uint64_t sub_1008C1D48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008C1D50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008C1D58);
  return result;
}

uint64_t sub_1008C1D64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008C1D6CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1008C1D70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008C1D78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCachedSharingKey.CodingKeys()
{
  return &type metadata for SecureLocationsCachedSharingKey.CodingKeys;
}

uint64_t *sub_1008C1D94(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (_OWORD *)((char *)a2 + v9);
    v15 = *(uint64_t *)((char *)a2 + v9 + 8);
    swift_bridgeObjectRetain(v12);
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)v13 = *v14;
    }
    else
    {
      v17 = *(_QWORD *)v14;
      sub_10001BBBC(v17, v15);
      *(_QWORD *)v13 = v17;
      *((_QWORD *)v13 + 1) = v15;
    }
    v18 = a3[7];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *((_QWORD *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    else
    {
      v22 = *(_QWORD *)v20;
      sub_10001BBBC(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
      *(_QWORD *)v19 = v22;
      *((_QWORD *)v19 + 1) = v21;
    }
    v23 = a3[8];
    v24 = a3[9];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    *v25 = *v26;
    v27 = *((_QWORD *)v26 + 2);
    *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
    *((_QWORD *)v25 + 2) = v27;
    v28 = (uint64_t *)((char *)a1 + v24);
    v29 = (uint64_t *)((char *)a2 + v24);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v34 = type metadata accessor for Date(0);
    v35 = *(_QWORD *)(v34 - 8);
    v36 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v35 + 48);
    swift_bridgeObjectRetain(v27);
    v37 = swift_bridgeObjectRetain(v30);
    if (v36(v33, 1, v34, v37))
    {
      v38 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
  }
  return a1;
}

uint64_t sub_1008C1F74(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = (uint64_t *)(a1 + a2[6]);
  v6 = v5[1];
  if (v6 >> 60 != 15)
    sub_10001BC14(*v5, v6);
  v7 = (uint64_t *)(a1 + a2[7]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = a1 + a2[11];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  return result;
}

uint64_t sub_1008C2074(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = (_OWORD *)(a2 + v8);
  v14 = *(_QWORD *)(a2 + v8 + 8);
  swift_bridgeObjectRetain(v11);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)v12 = *v13;
  }
  else
  {
    v15 = *(_QWORD *)v13;
    sub_10001BBBC(v15, v14);
    *(_QWORD *)v12 = v15;
    *(_QWORD *)(v12 + 8) = v14;
  }
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = (uint64_t *)(a2 + v16);
  v19 = v18[1];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    v20 = *v18;
    sub_10001BBBC(*v18, v18[1]);
    *(_QWORD *)v17 = v20;
    *(_QWORD *)(v17 + 8) = v19;
  }
  v21 = a3[8];
  v22 = a3[9];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v25 = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 16) = v25;
  v26 = (_QWORD *)(a1 + v22);
  v27 = (_QWORD *)(a2 + v22);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v33 + 48);
  swift_bridgeObjectRetain(v25);
  v35 = swift_bridgeObjectRetain(v28);
  if (v34(v31, 1, v32, v35))
  {
    v36 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t sub_1008C2228(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v11 = a3[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  if (*(_QWORD *)(a1 + v11 + 8) >> 60 == 15)
  {
    if (v14 >> 60 != 15)
    {
      v15 = *v13;
      sub_10001BBBC(v15, v14);
      *v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
    sub_1002EEEE0((uint64_t)v12);
LABEL_6:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  v16 = *v13;
  sub_10001BBBC(v16, v14);
  v17 = *v12;
  v18 = v12[1];
  *v12 = v16;
  v12[1] = v14;
  sub_10001BC14(v17, v18);
LABEL_8:
  v19 = a3[7];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *(_QWORD *)(a2 + v19 + 8);
  if (*(_QWORD *)(a1 + v19 + 8) >> 60 == 15)
  {
    if (v22 >> 60 != 15)
    {
      v23 = *v21;
      sub_10001BBBC(v23, v22);
      *v20 = v23;
      v20[1] = v22;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v22 >> 60 == 15)
  {
    sub_1008C24E8((uint64_t)v20);
LABEL_13:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    goto LABEL_15;
  }
  v24 = *v21;
  sub_10001BBBC(v24, v22);
  v25 = *v20;
  v26 = v20[1];
  *v20 = v24;
  v20[1] = v22;
  sub_10001BC14(v25, v26);
LABEL_15:
  v27 = a3[8];
  v28 = a1 + v27;
  v29 = a2 + v27;
  *(_BYTE *)v28 = *(_BYTE *)v29;
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  v30 = *(_QWORD *)(v29 + 16);
  *(_QWORD *)(v28 + 16) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  v31 = a3[9];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v34 = v33[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v35 = a3[11];
  v36 = (void *)(a1 + v35);
  v37 = (void *)(a2 + v35);
  v38 = type metadata accessor for Date(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 24))(v36, v37, v38);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
    goto LABEL_20;
  }
  if (v42)
  {
LABEL_20:
    v43 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v39 + 16))(v36, v37, v38);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  return a1;
}

uint64_t sub_1008C24E8(uint64_t a1)
{
  destroy for KeyRepresentableInternal();
  return a1;
}

uint64_t sub_1008C251C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  v11 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v12 = *(_QWORD *)(a2 + v11);
  v13 = a3[11];
  v14 = (const void *)(a2 + v13);
  v15 = (void *)(a1 + v13);
  *(_QWORD *)(a1 + v11) = v12;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
  {
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v15, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v15, v14, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_1008C2644(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a1 + v12 + 8);
  if (v15 >> 60 == 15)
    goto LABEL_4;
  v16 = *(_QWORD *)(v14 + 8);
  if (v16 >> 60 == 15)
  {
    sub_1002EEEE0(v13);
LABEL_4:
    *(_OWORD *)v13 = *(_OWORD *)v14;
    goto LABEL_6;
  }
  v17 = *(_QWORD *)v13;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = v16;
  sub_10001BC14(v17, v15);
LABEL_6:
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a1 + v18 + 8);
  if (v21 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    goto LABEL_11;
  }
  v22 = *(_QWORD *)(v20 + 8);
  if (v22 >> 60 == 15)
  {
    sub_1008C24E8(v19);
    goto LABEL_9;
  }
  v23 = *(_QWORD *)v19;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_QWORD *)(v19 + 8) = v22;
  sub_10001BC14(v23, v21);
LABEL_11:
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_BYTE *)v25 = *(_BYTE *)v26;
  v28 = *(_QWORD *)(v26 + 8);
  v27 = *(_QWORD *)(v26 + 16);
  *(_QWORD *)(v25 + 8) = v28;
  *(_QWORD *)(v25 + 16) = v27;
  swift_bridgeObjectRelease();
  v29 = a3[9];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (uint64_t *)(a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  v34 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v35 = (void *)(a1 + v34);
  v36 = (void *)(a2 + v34);
  v37 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 40))(v35, v36, v37);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_16;
  }
  if (v41)
  {
LABEL_16:
    v42 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v38 + 32))(v35, v36, v37);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  return a1;
}

uint64_t sub_1008C2870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008C287C);
}

uint64_t sub_1008C287C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1008C292C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008C2938);
}

uint64_t sub_1008C2938(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1008C29E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_100E52C30;
    v6[2] = &unk_100E52C48;
    v6[3] = &unk_100E52C48;
    v6[4] = &unk_100E52C60;
    v6[5] = &unk_100E52B30;
    v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_100149C5C(319, (unint64_t *)&qword_10110D930, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t sub_1008C2AB0()
{
  return sub_100006204(&qword_10110BEE8, type metadata accessor for SecureLocationsCachedSharedKey, (uint64_t)&unk_100E52C78);
}

unint64_t sub_1008C2AE0()
{
  unint64_t result;

  result = qword_10110BEF0;
  if (!qword_10110BEF0)
  {
    result = swift_getWitnessTable(byte_100E52D70, &type metadata for SecureLocationsCachedSharingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BEF0);
  }
  return result;
}

unint64_t sub_1008C2B28()
{
  unint64_t result;

  result = qword_10110BEF8;
  if (!qword_10110BEF8)
  {
    result = swift_getWitnessTable("qe$", &type metadata for SecureLocationsCachedSharingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BEF8);
  }
  return result;
}

unint64_t sub_1008C2B70()
{
  unint64_t result;

  result = qword_10110BF00;
  if (!qword_10110BF00)
  {
    result = swift_getWitnessTable("Ye$", &type metadata for SecureLocationsCachedSharingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BF00);
  }
  return result;
}

uint64_t sub_1008C2BB4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_101111B30, type metadata accessor for SecureLocationsCachedSharedKey, (uint64_t)&unk_100E52D98);
  result = sub_100006204(&qword_101108148, type metadata accessor for SecureLocationsCachedSharedKey, (uint64_t)&unk_100E52E2C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008C2C10()
{
  unint64_t result;

  result = qword_10110BF10;
  if (!qword_10110BF10)
  {
    result = swift_getWitnessTable("ec$", &type metadata for SecureLocationsCachedSharedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BF10);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsCachedSharedKey.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1008C2CA0 + 4 * byte_100E52A95[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1008C2CD4 + 4 * byte_100E52A90[v4]))();
}

uint64_t sub_1008C2CD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008C2CDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008C2CE4);
  return result;
}

uint64_t sub_1008C2CF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008C2CF8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1008C2CFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008C2D04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCachedSharedKey.CodingKeys()
{
  return &type metadata for SecureLocationsCachedSharedKey.CodingKeys;
}

unint64_t sub_1008C2D24()
{
  unint64_t result;

  result = qword_10110BF20;
  if (!qword_10110BF20)
  {
    result = swift_getWitnessTable("5c$", &type metadata for SecureLocationsCachedSharedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BF20);
  }
  return result;
}

unint64_t sub_1008C2D6C()
{
  unint64_t result;

  result = qword_10110BF28;
  if (!qword_10110BF28)
  {
    result = swift_getWitnessTable(byte_100E52E54, &type metadata for SecureLocationsCachedSharedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BF28);
  }
  return result;
}

unint64_t sub_1008C2DB4()
{
  unint64_t result;

  result = qword_10110BF30;
  if (!qword_10110BF30)
  {
    result = swift_getWitnessTable(byte_100E52E7C, &type metadata for SecureLocationsCachedSharedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BF30);
  }
  return result;
}

void sub_1008C2DF8()
{
  sub_1003D6408();
}

uint64_t sub_1008C2ED8(uint64_t a1)
{
  return sub_1008C022C(a1);
}

unint64_t sub_1008C2EF4(char a1)
{
  unint64_t result;

  result = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000014;
    else
      return 0xD000000000000017;
  }
  return result;
}

unint64_t sub_1008C2F54()
{
  char *v0;

  return sub_1008C2EF4(*v0);
}

ValueMetadata *type metadata accessor for LineUpVerifyFindMyNetworkIdResponsePayload()
{
  return &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload;
}

uint64_t sub_1008C2F70(char a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000014;
    else
      v2 = 0xD000000000000017;
    if (a1 == 1)
      v3 = 0x8000000100EDE2C0;
    else
      v3 = 0x8000000100EDE2A0;
  }
  else
  {
    v3 = 0x8000000100EDE2E0;
  }
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(v3);
  return 0x203A737574617473;
}

uint64_t sub_1008C301C()
{
  char *v0;

  return sub_1008C2F70(*v0);
}

uint64_t sub_1008C3024@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1008C3100(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1008C304C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1008C3078();
  result = sub_1008C30BC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008C3078()
{
  unint64_t result;

  result = qword_10110BF38;
  if (!qword_10110BF38)
  {
    result = swift_getWitnessTable("Ud$", &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload);
    atomic_store(result, (unint64_t *)&qword_10110BF38);
  }
  return result;
}

unint64_t sub_1008C30BC()
{
  unint64_t result;

  result = qword_10110BF40;
  if (!qword_10110BF40)
  {
    result = swift_getWitnessTable("%d$", &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload);
    atomic_store(result, (unint64_t *)&qword_10110BF40);
  }
  return result;
}

uint64_t sub_1008C3100(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  dispatch thunk of BinaryDecoding.container()(v31, v6, v7);
  v8 = v32;
  v9 = v33;
  v10 = sub_10009F5D0((uint64_t)v31, v32);
  v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v8, v9);
  if (v1)
  {
LABEL_11:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v10;
  }
  v13 = v11;
  v14 = v12;
  v15 = sub_10001BBBC(v11, v12);
  static Endianness.current.getter(v15);
  sub_100059570();
  FixedWidthInteger.init(data:ofEndianness:)(&v34, v13, v14, v5);
  if (BYTE1(v34) == 1 || (v10 = v34, v34 >= 3u))
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(v13, v14);
    v17 = sub_10001BBBC(v13, v14);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v34 = v29;
      *(_DWORD *)v20 = 136315138;
      v21 = Data.hexString.getter(v13, v14);
      v30 = sub_100016940(v21, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v13, v14);
      sub_10001BC14(v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalid FMNId status: %s", v20, 0xCu);
      v23 = v29;
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      sub_10001BC14(v13, v14);
      sub_10001BC14(v13, v14);
    }

    v10 = type metadata accessor for BinaryEncodingError(0);
    v24 = sub_1001120A4();
    swift_allocError(v10, v24, 0, 0);
    v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v25, enum case for BinaryEncodingError.encodingError(_:), v10);
    swift_willThrow(v26);
    sub_10001BC14(v13, v14);
    goto LABEL_11;
  }
  sub_10001BC14(v13, v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10;
}

uint64_t _s12searchpartyd42LineUpVerifyFindMyNetworkIdResponsePayloadV21FindMyNetworkIdStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1008C348C + 4 * byte_100E52F65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1008C34C0 + 4 * byte_100E52F60[v4]))();
}

uint64_t sub_1008C34C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008C34C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008C34D0);
  return result;
}

uint64_t sub_1008C34DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008C34E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1008C34E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008C34F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LineUpVerifyFindMyNetworkIdResponsePayload.FindMyNetworkIdStatus()
{
  return &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload.FindMyNetworkIdStatus;
}

unint64_t sub_1008C3510()
{
  unint64_t result;

  result = qword_10110BF48;
  if (!qword_10110BF48)
  {
    result = swift_getWitnessTable(byte_100E530E8, &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload.FindMyNetworkIdStatus);
    atomic_store(result, (unint64_t *)&qword_10110BF48);
  }
  return result;
}

uint64_t sub_1008C3554(unint64_t a1, unint64_t a2)
{
  int v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  Swift::String v68;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;

  v2 = a2;
  v3 = a1;
  v4 = HIDWORD(a1);
  v5 = HIDWORD(a2);
  v6 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v76) = v3;
  v9 = sub_1000588DC();
  v10 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
  v12 = v11;
  v76 = v10;
  v77 = v11;
  static String.Encoding.ascii.getter();
  v13 = sub_1000DCC90();
  v73 = String.init<A>(bytes:encoding:)(&v76, v8, &type metadata for Data, v13);
  v15 = v14;
  sub_10001BC14(v10, v12);
  if (!v15)
    goto LABEL_11;
  v74 = v5;
  LODWORD(v76) = v4;
  v16 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
  v18 = v17;
  v76 = v16;
  v77 = v17;
  static String.Encoding.ascii.getter();
  v72 = String.init<A>(bytes:encoding:)(&v76, v8, &type metadata for Data, v13);
  v20 = v19;
  sub_10001BC14(v16, v18);
  if (!v20)
  {
    LODWORD(v5) = v74;
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    LODWORD(v76) = v3;
    v38 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
    v40 = v39;
    v41 = Data.hexString.getter(v38, v39);
    v42 = v4;
    v44 = v43;
    sub_10001BC14(v38, v40);
    v76 = v41;
    v77 = v44;
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    v75 = v42;
    v46 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
    v48 = v47;
    v49 = Data.hexString.getter(v46, v47);
    v51 = v50;
    sub_10001BC14(v46, v48);
    v52._countAndFlagsBits = v49;
    v52._object = v51;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 46;
    v53._object = (void *)0xE100000000000000;
    String.append(_:)(v53);
    v75 = v2;
    v54 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
    v56 = v55;
    v57 = Data.hexString.getter(v54, v55);
    v59 = v58;
    sub_10001BC14(v54, v56);
    v60._countAndFlagsBits = v57;
    v60._object = v59;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    v61._countAndFlagsBits = 46;
    v61._object = (void *)0xE100000000000000;
    String.append(_:)(v61);
    v75 = v5;
    v62 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
    v64 = v63;
    v65 = Data.hexString.getter(v62, v63);
    v67 = v66;
    sub_10001BC14(v62, v64);
    v68._countAndFlagsBits = v65;
    v68._object = v67;
    String.append(_:)(v68);
    goto LABEL_12;
  }
  v71 = v4;
  LODWORD(v76) = v2;
  v21 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
  v23 = v22;
  v76 = v21;
  v77 = v22;
  static String.Encoding.ascii.getter();
  v70 = String.init<A>(bytes:encoding:)(&v76, v8, &type metadata for Data, v13);
  v25 = v24;
  sub_10001BC14(v21, v23);
  if (!v25)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    LODWORD(v5) = v74;
    LODWORD(v4) = v71;
    goto LABEL_10;
  }
  LODWORD(v76) = v74;
  v26 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
  v28 = v27;
  v76 = v26;
  v77 = v27;
  static String.Encoding.ascii.getter();
  v29 = String.init<A>(bytes:encoding:)(&v76, v8, &type metadata for Data, v13);
  v31 = v30;
  sub_10001BC14(v26, v28);
  if (!v31)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v76 = v73;
  v77 = v15;
  v32._countAndFlagsBits = 46;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = v72;
  v33._object = v20;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 46;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = v70;
  v35._object = v25;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 46;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = v29;
  v37._object = v31;
  String.append(_:)(v37);
LABEL_12:
  swift_bridgeObjectRelease();
  return v76;
}

uint64_t sub_1008C395C(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v7 = sub_10001A9A8(&qword_10110BF68);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_1008C4F8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys, &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys, v13, v11, v12);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v19, v7);
  if (!v3)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2), &v18, v7);
    v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v17, v7);
    v16 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a3), &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1008C3AC8()
{
  char *v0;

  return qword_100E53348[*v0];
}

uint64_t sub_1008C3AE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008C4C8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008C3B04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008C4F8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008C3B2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008C4F8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008C3B54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1008C4DE4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1008C3B88(_QWORD *a1)
{
  unint64_t *v1;

  return sub_1008C395C(a1, *v1, v1[1]);
}

uint64_t sub_1008C3BA0(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;

  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  v10 = CustomStringConvertible.typeDescription.getter(a1, a2);
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = sub_1008C3554(v3 | (v4 << 32), v5 | (v6 << 32));
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v10;
}

Swift::Int sub_1008C3C20()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_1008C3C9C()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_1008C3CF0()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_1008C3D68(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

_QWORD *sub_1008C3DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD v57[2];
  _QWORD v58[2];

  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.Encoding(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58[0] = a1;
  v58[1] = a2;
  v57[0] = 46;
  v57[1] = 0xE100000000000000;
  v11 = sub_1000330C8();
  v12 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v57, &type metadata for String, &type metadata for String, v11, v11);
  swift_bridgeObjectRelease();
  if (v12[2] != 4)
    goto LABEL_8;
  v13 = v12[4];
  v14 = v12[5];
  v15 = swift_bridgeObjectRetain(v14);
  static String.Encoding.ascii.getter(v15);
  v16 = String.data(using:allowLossyConversion:)(v10, 0, v13, v14);
  v18 = v17;
  swift_bridgeObjectRelease();
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, v7);
  if (v18 >> 60 == 15)
    goto LABEL_8;
  v20 = sub_10001BBBC(v16, v18);
  static Endianness.current.getter(v20);
  v21 = sub_1000588DC();
  result = FixedWidthInteger.init(data:ofEndianness:)(v58, v16, v18, v6);
  if (BYTE4(v58[0]) == 1)
    goto LABEL_6;
  v56 = v21;
  if (v12[2] < 2uLL)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  v55 = LODWORD(v58[0]);
  v23 = v12[6];
  v24 = v12[7];
  v25 = swift_bridgeObjectRetain(v24);
  static String.Encoding.ascii.getter(v25);
  v26 = String.data(using:allowLossyConversion:)(v10, 0, v23, v24);
  v28 = v27;
  swift_bridgeObjectRelease();
  v19(v10, v7);
  if (v28 >> 60 == 15)
  {
LABEL_6:
    v29 = v16;
    v30 = v18;
LABEL_7:
    sub_10001EF3C(v29, v30);
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  v31 = sub_10001BBBC(v26, v28);
  static Endianness.current.getter(v31);
  v32 = v28;
  result = FixedWidthInteger.init(data:ofEndianness:)(v58, v26, v28, v6);
  if (BYTE4(v58[0]) == 1)
  {
    v33 = v16;
    v34 = v18;
LABEL_12:
    sub_10001EF3C(v33, v34);
    v29 = v26;
    v30 = v32;
    goto LABEL_7;
  }
  v53 = v28;
  v54 = v26;
  if (v12[2] < 3uLL)
    goto LABEL_24;
  v52 = LODWORD(v58[0]);
  v35 = v12[8];
  v36 = v12[9];
  v37 = swift_bridgeObjectRetain(v36);
  static String.Encoding.ascii.getter(v37);
  v26 = String.data(using:allowLossyConversion:)(v10, 0, v35, v36);
  v39 = v38;
  swift_bridgeObjectRelease();
  v19(v10, v7);
  if (v39 >> 60 == 15)
  {
    sub_10001EF3C(v16, v18);
    v30 = v53;
    v29 = v54;
    goto LABEL_7;
  }
  v40 = sub_10001BBBC(v26, v39);
  static Endianness.current.getter(v40);
  v32 = v39;
  result = FixedWidthInteger.init(data:ofEndianness:)(v58, v26, v39, v6);
  v41 = v54;
  if (BYTE4(v58[0]) == 1)
  {
    sub_10001EF3C(v16, v18);
    v33 = v41;
    v34 = v53;
    goto LABEL_12;
  }
  v50 = v26;
  v51 = v32;
  if (v12[2] < 4uLL)
    goto LABEL_25;
  v42 = v12[10];
  v43 = v12[11];
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease();
  static String.Encoding.ascii.getter(v44);
  v45 = String.data(using:allowLossyConversion:)(v10, 0, v42, v43);
  v47 = v46;
  swift_bridgeObjectRelease();
  v48 = ((uint64_t (*)(char *, uint64_t))v19)(v10, v7);
  if (v47 >> 60 == 15)
  {
    sub_10001EF3C(v16, v18);
    sub_10001EF3C(v54, v53);
    sub_10001EF3C(v50, v51);
    return 0;
  }
  static Endianness.current.getter(v48);
  FixedWidthInteger.init(data:ofEndianness:)(v58, v45, v47, v6);
  sub_10001EF3C(v16, v18);
  sub_10001EF3C(v54, v53);
  sub_10001EF3C(v50, v51);
  if (BYTE4(v58[0]) == 1)
    return 0;
  return (_QWORD *)(v55 | (v52 << 32));
}

void sub_1008C4214(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_1008C4290()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;

  if (BYTE6(v0) == 19)
  {
    if (Data.subscript.getter(4) == 46
      && Data.subscript.getter(9) == 46
      && Data.subscript.getter(14) == 46)
    {
      *(_QWORD *)(v2 - 112) = Data.subdata(in:)(0, 4, v1, v0);
      v4 = v3;
      *(_QWORD *)(v2 - 144) = Data.subdata(in:)(5, 9, v1, v0);
      v6 = v5;
      *(_QWORD *)(v2 - 152) = Data.subdata(in:)(10, 14, v1, v0);
      v8 = v7;
      v9 = Data.subdata(in:)(15, 19, v1, v0);
      *(_QWORD *)(v2 - 128) = v4;
      *(_QWORD *)(v2 - 120) = v9;
      *(_QWORD *)(v2 - 104) = v6;
      v10 = (char *)&loc_1008C4394 + dword_1008C4BB4[v4 >> 62];
      *(_QWORD *)(v2 - 160) = v8;
      *(_QWORD *)(v2 - 136) = v11;
      __asm { BR              X9 }
    }
    v17 = sub_100134E24();
    v13 = swift_allocError(&type metadata for AccessoryMetadata.Error, v17, 0, 0);
    v15 = 0xD000000000000012;
    v16 = "Invalid delimiter!";
  }
  else
  {
    v12 = sub_100134E24();
    v13 = swift_allocError(&type metadata for AccessoryMetadata.Error, v12, 0, 0);
    v15 = 0xD000000000000013;
    v16 = "firmwareVersionData";
  }
  *(_QWORD *)v14 = v15;
  *(_QWORD *)(v14 + 8) = (unint64_t)(v16 - 32) | 0x8000000000000000;
  *(_BYTE *)(v14 + 16) = 1;
  swift_willThrow(v13);
  return sub_10001BC14(v1, v0);
}

uint64_t sub_1008C4474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 112);
  if (__OFSUB__(HIDWORD(v2), (_DWORD)v2))
  {
    __break(1u);
    JUMPOUT(0x1008C4B68);
  }
  if (HIDWORD(v2) - (_DWORD)v2 != 4)
    JUMPOUT(0x1008C4818);
  return ((uint64_t (*)(void))((char *)&loc_1008C44AC + dword_1008C4BC4[v0]))();
}

void sub_1008C448C()
{
  uint64_t v0;

  if (__OFSUB__(*(_QWORD *)(*(_QWORD *)(v0 - 112) + 24), *(_QWORD *)(*(_QWORD *)(v0 - 112) + 16)))
  {
    __break(1u);
    JUMPOUT(0x1008C4B6CLL);
  }
  JUMPOUT(0x1008C449CLL);
}

uint64_t sub_1008C44BC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v4;

  if (BYTE6(*(_QWORD *)(v2 - 104)) == 4)
    return ((uint64_t (*)(void))((char *)&loc_1008C4500 + dword_1008C4BD4[v0]))();
  *(_QWORD *)(v2 - 96) = 0;
  *(_QWORD *)(v2 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v4 = swift_bridgeObjectRelease(*(_QWORD *)(v2 - 88));
  *(_QWORD *)(v2 - 96) = 0xD000000000000014;
  *(_QWORD *)(v2 - 88) = 0x8000000100EEA280;
  return ((uint64_t (*)(uint64_t))((char *)&loc_1008C4864 + dword_1008C4BF4[v1]))(v4);
}

uint64_t sub_1008C4510()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (BYTE6(*(_QWORD *)(v2 - 160)) == 4)
    return ((uint64_t (*)(void))((char *)&loc_1008C4554 + dword_1008C4BE4[v1]))();
  *(_QWORD *)(v2 - 96) = 0;
  *(_QWORD *)(v2 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v4 = swift_bridgeObjectRelease(*(_QWORD *)(v2 - 88));
  *(_QWORD *)(v2 - 96) = 0xD000000000000014;
  *(_QWORD *)(v2 - 88) = 0x8000000100EEA280;
  return ((uint64_t (*)(uint64_t))((char *)&loc_1008C4864 + dword_1008C4BF4[v0]))(v4);
}

uint64_t sub_1008C4564(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (BYTE6(a2) == 4)
  {
    v7 = *(_QWORD *)(v6 - 112);
    v8 = *(_QWORD *)(v6 - 128);
    v9 = sub_10001BBBC(v7, v8);
    static Endianness.current.getter(v9);
    sub_1000588DC();
    FixedWidthInteger.init(data:ofEndianness:)((_QWORD *)(v6 - 96), v7, v8, v5);
    LODWORD(v10) = *(_DWORD *)(v6 - 96);
    if (*(_BYTE *)(v6 - 92))
      v10 = 0;
    else
      v10 = v10;
    *(_QWORD *)(v6 - 168) = v10;
    v11 = *(_QWORD *)(v6 - 144);
    v12 = *(_QWORD *)(v6 - 104);
    v13 = sub_10001BBBC(v11, v12);
    static Endianness.current.getter(v13);
    FixedWidthInteger.init(data:ofEndianness:)((_QWORD *)(v6 - 96), v11, v12, v5);
    LODWORD(v14) = *(_DWORD *)(v6 - 96);
    if (*(_BYTE *)(v6 - 92))
      v14 = 0;
    else
      v14 = v14;
    *(_QWORD *)(v6 - 176) = v14;
    v16 = *(_QWORD *)(v6 - 160);
    v15 = *(_QWORD *)(v6 - 152);
    v17 = sub_10001BBBC(v15, v16);
    static Endianness.current.getter(v17);
    FixedWidthInteger.init(data:ofEndianness:)((_QWORD *)(v6 - 96), v15, v16, v5);
    if (*(_BYTE *)(v6 - 92))
      v18 = 0;
    else
      v18 = *(_DWORD *)(v6 - 96);
    v19 = *(_QWORD *)(v6 - 120);
    v20 = *(_QWORD *)(v6 - 136);
    v21 = sub_10001BBBC(v19, v20);
    static Endianness.current.getter(v21);
    FixedWidthInteger.init(data:ofEndianness:)((_QWORD *)(v6 - 96), v19, v20, v5);
    if ((*(_BYTE *)(v6 - 92) & 1) == 0
      && *(_QWORD *)(v6 - 168)
      && *(_QWORD *)(v6 - 176)
      && v18
      && *(_DWORD *)(v6 - 96))
    {
      sub_10001BC14(v3, v2);
      sub_10001BC14(*(_QWORD *)(v6 - 120), *(_QWORD *)(v6 - 136));
      sub_10001BC14(*(_QWORD *)(v6 - 152), *(_QWORD *)(v6 - 160));
      sub_10001BC14(*(_QWORD *)(v6 - 144), *(_QWORD *)(v6 - 104));
      sub_10001BC14(*(_QWORD *)(v6 - 112), *(_QWORD *)(v6 - 128));
      JUMPOUT(0x1008C4450);
    }
    *(_QWORD *)(v6 - 96) = 0;
    *(_QWORD *)(v6 - 88) = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v22 = *(_QWORD *)(v6 - 88);
    *(_QWORD *)(v6 - 96) = *(_QWORD *)(v6 - 96);
    *(_QWORD *)(v6 - 88) = v22;
    v23._countAndFlagsBits = 0xD000000000000025;
    v23._object = (void *)0x8000000100EEA2A0;
    String.append(_:)(v23);
    v24._countAndFlagsBits = Data.description.getter(*(_QWORD *)(v6 - 112), *(_QWORD *)(v6 - 128));
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 978600480;
    v25._object = (void *)0xE400000000000000;
    String.append(_:)(v25);
    v26._countAndFlagsBits = Data.description.getter(*(_QWORD *)(v6 - 144), *(_QWORD *)(v6 - 104));
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 978603296;
    v27._object = (void *)0xE400000000000000;
    String.append(_:)(v27);
    v28 = *(_QWORD *)(v6 - 160);
    v29 = *(_QWORD *)(v6 - 152);
    v30._countAndFlagsBits = Data.description.getter(v29, v28);
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 976243744;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    v32 = *(_QWORD *)(v6 - 120);
    v33 = *(_QWORD *)(v6 - 136);
    v34._countAndFlagsBits = Data.description.getter(v32, v33);
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35 = *(_QWORD *)(v6 - 96);
    v36 = *(_QWORD *)(v6 - 88);
    v37 = sub_100134E24();
    v38 = swift_allocError(&type metadata for AccessoryMetadata.Error, v37, 0, 0);
    *(_QWORD *)v39 = v35;
    *(_QWORD *)(v39 + 8) = v36;
    *(_BYTE *)(v39 + 16) = 1;
    swift_willThrow(v38);
    sub_10001BC14(v3, v2);
    sub_10001BC14(v32, v33);
    sub_10001BC14(v29, v28);
    sub_10001BC14(*(_QWORD *)(v6 - 144), *(_QWORD *)(v6 - 104));
    JUMPOUT(0x1008C444CLL);
  }
  *(_QWORD *)(v6 - 96) = 0;
  *(_QWORD *)(v6 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v40 = swift_bridgeObjectRelease();
  *(_QWORD *)(v6 - 96) = 0xD000000000000014;
  *(_QWORD *)(v6 - 88) = 0x8000000100EEA280;
  return ((uint64_t (*)(uint64_t))((char *)&loc_1008C4864 + dword_1008C4BF4[v4]))(v40);
}

uint64_t sub_1008C4874()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;

  *(_QWORD *)(v1 - 72) = BYTE6(*(_QWORD *)(v1 - 128));
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 978600480;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  return ((uint64_t (*)(void))((char *)&loc_1008C4900 + dword_1008C4C04[v0]))();
}

uint64_t sub_1008C4918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;

  *(_QWORD *)(v3 - 72) = BYTE6(v0);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = v2 + 2816;
  v6._object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  return ((uint64_t (*)(void))((char *)&loc_1008C4988 + dword_1008C4C14[v1]))();
}

uint64_t sub_1008C499C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;

  *(_QWORD *)(v2 - 72) = BYTE6(v0);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 976243744;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  return ((uint64_t (*)(void))((char *)&loc_1008C4A10 + dword_1008C4C24[v1]))();
}

void sub_1008C4A20()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v4 - 72) = BYTE6(*(_QWORD *)(v4 - 136));
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v4 - 96);
  v7 = *(_QWORD *)(v4 - 88);
  v8 = sub_100134E24();
  v9 = swift_allocError(&type metadata for AccessoryMetadata.Error, v8, 0, 0);
  *(_QWORD *)v10 = v6;
  *(_QWORD *)(v10 + 8) = v7;
  *(_BYTE *)(v10 + 16) = 1;
  swift_willThrow(v9);
  sub_10001BC14(v1, v0);
  sub_10001BC14(*(_QWORD *)(v4 - 120), *(_QWORD *)(v4 - 136));
  sub_10001BC14(v3, v2);
  JUMPOUT(0x1008C4AE4);
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryFirmwareVersionNumber()
{
  return &type metadata for LocalFindableAccessoryFirmwareVersionNumber;
}

unint64_t sub_1008C4C48()
{
  unint64_t result;

  result = qword_10110BF50;
  if (!qword_10110BF50)
  {
    result = swift_getWitnessTable("Md$", &type metadata for LocalFindableAccessoryFirmwareVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10110BF50);
  }
  return result;
}

uint64_t sub_1008C4C8C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 13388 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(13388, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 21570 && a2 == 0xE200000000000000)
  {
    v7 = 0xE200000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(21570, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 21581 && a2 == 0xE200000000000000)
  {
    v8 = 0xE200000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(21581, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 12364 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(12364, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1008C4DE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = sub_10001A9A8(&qword_10110BF58);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1008C4F8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys, &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys, v9, v7, v8);
  if (v1)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v17 = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  v16 = 1;
  v11 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
  v15 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  v14 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10 | (unint64_t)(v11 << 32);
}

unint64_t sub_1008C4F8C()
{
  unint64_t result;

  result = qword_10110BF60;
  if (!qword_10110BF60)
  {
    result = swift_getWitnessTable("!c$", &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BF60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1008C501C + 4 * byte_100E53115[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1008C5050 + 4 * byte_100E53110[v4]))();
}

uint64_t sub_1008C5050(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008C5058(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008C5060);
  return result;
}

uint64_t sub_1008C506C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008C5074);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1008C5078(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008C5080(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys()
{
  return &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys;
}

unint64_t sub_1008C50A0()
{
  unint64_t result;

  result = qword_10110BF70;
  if (!qword_10110BF70)
  {
    result = swift_getWitnessTable(byte_100E532C8, &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BF70);
  }
  return result;
}

unint64_t sub_1008C50E8()
{
  unint64_t result;

  result = qword_10110BF78;
  if (!qword_10110BF78)
  {
    result = swift_getWitnessTable(byte_100E53238, &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BF78);
  }
  return result;
}

unint64_t sub_1008C5130()
{
  unint64_t result;

  result = qword_10110BF80;
  if (!qword_10110BF80)
  {
    result = swift_getWitnessTable(byte_100E53260, &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110BF80);
  }
  return result;
}

void sub_1008C5174()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  void *v13;

  v1 = sub_10001A9A8(&qword_1010ED860);
  v2 = __chkstk_darwin(v1);
  v3 = __chkstk_darwin(v2);
  v12[2] = (char *)v12 - v4;
  v5 = __chkstk_darwin(v3);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for UUID(0);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v12[3] = (char *)v12 - v8;
  v13 = v0;
  v9 = objc_msgSend(v0, "data");
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v11 = v10;

  __asm { BR              X10 }
}

void sub_1008C52DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  sub_10001BC14(v0, v7);
  if (BYTE6(v7) == 16)
  {
    v14 = objc_msgSend(*(id *)(v8 - 128), "data");
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v16 = v15;

    __asm { BR              X10 }
  }
  if (BYTE6(v7) == 4)
  {
    *(_QWORD *)(v8 - 152) = v4;
    *(_QWORD *)(v8 - 136) = v3;
    v9 = *(_QWORD *)(v8 - 144);
    UUID.init(uuidString:)(0xD000000000000024, 0x8000000100EEA330);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v9, 1, v2) != 1)
    {
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v5, v9, v2);
      *(_QWORD *)(v8 - 120) = ((uint64_t (*)(uint64_t))UUID.bytes.getter)(v10);
      v11 = objc_msgSend(*(id *)(v8 - 128), "data");
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v13 = v12;

      __asm { BR              X10 }
    }
    __break(1u);
  }
  else
  {
    if (BYTE6(v7) != 2)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x8000000100EEA300, "searchpartyd/CBUUIDExtensions.swift", 35, 2, 51, 0);
      __break(1u);
      JUMPOUT(0x1008C5B20);
    }
    UUID.init(uuidString:)(0xD000000000000024, 0x8000000100EEA330);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v6, 1, v2) != 1)
    {
      *(_QWORD *)(v8 - 144) = v1;
      v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v8 - 136), v6, v2);
      *(_QWORD *)(v8 - 112) = ((uint64_t (*)(uint64_t))UUID.bytes.getter)(v17);
      v18 = objc_msgSend(*(id *)(v8 - 128), "data");
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v20 = v19;

      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x1008C5AB0);
}

uint64_t sub_1008C5B60(_BYTE *a1, uint64_t a2, _QWORD *a3)
{
  _BYTE *v4;
  char v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;

  v4 = a1;
  v5 = *a1;
  v6 = (_QWORD *)*a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v6 = sub_1008C5F14(v6);
  if (v6[2] < 3uLL)
  {
    __break(1u);
  }
  else
  {
    *((_BYTE *)v6 + 34) = v5;
    *a3 = v6;
    LOBYTE(v4) = v4[1];
    result = swift_isUniquelyReferenced_nonNull_native(v6);
    *a3 = v6;
    if ((result & 1) != 0)
      goto LABEL_5;
  }
  result = (uint64_t)sub_1008C5F14(v6);
  v6 = (_QWORD *)result;
LABEL_5:
  if (v6[2] < 4uLL)
  {
    __break(1u);
  }
  else
  {
    *((_BYTE *)v6 + 35) = (_BYTE)v4;
    *a3 = v6;
  }
  return result;
}

uint64_t sub_1008C5C14(_BYTE *a1, uint64_t a2, _QWORD *a3)
{
  _BYTE *v4;
  char v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  char v9;
  uint64_t result;

  v4 = a1;
  v5 = *a1;
  v6 = (_QWORD *)*a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if (v6[2])
      goto LABEL_3;
  }
  else
  {
    v6 = sub_1008C5F14(v6);
    if (v6[2])
    {
LABEL_3:
      *((_BYTE *)v6 + 32) = v5;
      *a3 = v6;
      v5 = v4[1];
      v8 = swift_isUniquelyReferenced_nonNull_native(v6);
      *a3 = v6;
      if ((v8 & 1) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_12:
  v6 = sub_1008C5F14(v6);
LABEL_4:
  if (v6[2] < 2uLL)
  {
    __break(1u);
  }
  else
  {
    *((_BYTE *)v6 + 33) = v5;
    *a3 = v6;
    v5 = v4[2];
    v9 = swift_isUniquelyReferenced_nonNull_native(v6);
    *a3 = v6;
    if ((v9 & 1) != 0)
      goto LABEL_6;
  }
  v6 = sub_1008C5F14(v6);
LABEL_6:
  if (v6[2] < 3uLL)
  {
    __break(1u);
  }
  else
  {
    *((_BYTE *)v6 + 34) = v5;
    *a3 = v6;
    LOBYTE(v4) = v4[3];
    result = swift_isUniquelyReferenced_nonNull_native(v6);
    *a3 = v6;
    if ((result & 1) != 0)
      goto LABEL_8;
  }
  result = (uint64_t)sub_1008C5F14(v6);
  v6 = (_QWORD *)result;
LABEL_8:
  if (v6[2] < 4uLL)
  {
    __break(1u);
  }
  else
  {
    *((_BYTE *)v6 + 35) = (_BYTE)v4;
    *a3 = v6;
  }
  return result;
}

uint64_t sub_1008C5D40(unsigned __int8 *a1)
{
  return UUID.init(uuid:)(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], *((_QWORD *)a1 + 1));
}

_QWORD *sub_1008C5D94(_QWORD *a1)
{
  return sub_1007C77D4(0, a1[2], 0, a1);
}

uint64_t sub_1008C5DA8(unint64_t a1)
{
  return sub_1007C8C90(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1008C5DBC(unint64_t a1)
{
  return sub_1007C8FAC(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1008C5DD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

_QWORD *sub_1008C5E38(_QWORD *a1)
{
  return sub_1007C9A48(0, a1[2], 0, a1);
}

uint64_t sub_1008C5E4C(unint64_t a1)
{
  return sub_1007CA080(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1008C5E60(_QWORD *a1)
{
  return sub_1007C9F2C(0, a1[2], 0, a1);
}

_QWORD *sub_1008C5E74(_QWORD *a1)
{
  return sub_1007CA120(0, a1[2], 0, a1);
}

uint64_t sub_1008C5E88(unint64_t a1)
{
  return sub_1007CA15C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1008C5E9C(unint64_t a1)
{
  return sub_1007C84F8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1008C5EB0(unint64_t a1)
{
  return sub_1007C8874(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1008C5EC4(unint64_t a1)
{
  return sub_1007C8838(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1008C5ED8(unint64_t a1)
{
  return sub_1007C8688(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1008C5EEC(unint64_t a1)
{
  return sub_1007C86B0(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1008C5F00(unint64_t a1)
{
  return sub_1007C869C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1008C5F14(_QWORD *a1)
{
  return sub_1007C98C8(0, a1[2], 0, a1);
}

uint64_t sub_1008C5F28(unint64_t a1)
{
  return sub_1007CAC48(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1008C5F3C(_QWORD *a1)
{
  return sub_1007CAC84(0, a1[2], 0, a1);
}

uint64_t sub_1008C5F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = __DataStorage._bytes.getter();
  v10 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v10 += a1 - result;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = __DataStorage._length.getter();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v10 + v14;
  if (v10)
    v16 = v15;
  else
    v16 = 0;
  return a5(v10, v16, a4);
}

uint64_t sub_1008C5FF4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B78A8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B78A8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000016, 0x8000000100EEA390);
}

uint64_t sub_1008C6074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_10110BF88);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_10110BF88);
  if (qword_1010E9FE8 != -1)
    swift_once(&qword_1010E9FE8, sub_1008C5FF4);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B78A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1008C6104(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2[29] = a1;
  v2[30] = v1;
  v3 = sub_10001A9A8(&qword_1010F46C0);
  v2[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DeviceEvent(0);
  v2[32] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[33] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[34] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[35] = swift_task_alloc(v7);
  v2[36] = swift_task_alloc(v7);
  v2[37] = swift_task_alloc(v7);
  v2[38] = swift_task_alloc(v7);
  v2[39] = swift_task_alloc(v7);
  v2[40] = swift_task_alloc(v7);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_10110C098) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[41] = swift_task_alloc(v8);
  v2[42] = swift_task_alloc(v8);
  v9 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v2[43] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[44] = v10;
  v2[45] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Response(0);
  v2[46] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[47] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[48] = swift_task_alloc(v13);
  v2[49] = swift_task_alloc(v13);
  v14 = *(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8);
  v2[50] = v14;
  v2[51] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v2[52] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[53] = v16;
  v2[54] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008C62AC, v1, 0);
}

uint64_t sub_1008C62AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  int64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  char v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  if (qword_1010E9FF0 != -1)
    swift_once(&qword_1010E9FF0, sub_1008C6074);
  v1 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 440) = v1;
  v2 = sub_10001A9E8(v1, (uint64_t)qword_10110BF88);
  *(_QWORD *)(v0 + 448) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Preparing LocalFindable location fetching.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 232);

  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    v32 = 1;
LABEL_19:
    v33 = sub_1008CBAC0();
    v57 = swift_allocError(&type metadata for PencilLocationsFetcher.Error, v33, 0, 0);
    *v34 = v32;
    swift_willThrow(v57);
    v35 = *(_QWORD *)(v0 + 408);
    v37 = *(_QWORD *)(v0 + 384);
    v36 = *(_QWORD *)(v0 + 392);
    v38 = *(_QWORD *)(v0 + 360);
    v40 = *(_QWORD *)(v0 + 328);
    v39 = *(_QWORD *)(v0 + 336);
    v42 = *(_QWORD *)(v0 + 312);
    v41 = *(_QWORD *)(v0 + 320);
    v43 = *(_QWORD *)(v0 + 304);
    v49 = *(_QWORD *)(v0 + 296);
    v50 = *(_QWORD *)(v0 + 288);
    v52 = *(_QWORD *)(v0 + 280);
    v54 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 432));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v8
    || (v9 = v8,
        v10 = objc_msgSend(v8, "uniqueDeviceIdentifier"),
        v9,
        !v10))
  {
    v29 = Logger.logObject.getter(v8);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to get device identifier", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v32 = 0;
    goto LABEL_19;
  }
  v56 = v0 + 16;
  v11 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 232);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v51 = v15;
  v53 = v14;

  v58 = _swiftEmptyArrayStorage;
  sub_10009A578(0, v7, 0);
  v16 = v13 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v17 = *(_QWORD *)(v12 + 72);
  v18 = _swiftEmptyArrayStorage;
  do
  {
    v19 = *(_QWORD *)(v0 + 432);
    v20 = *(_QWORD *)(v0 + 408);
    v21 = *(_QWORD *)(v0 + 416);
    sub_10005972C(v16, v20, type metadata accessor for LocalFindableAccessoryRecord);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    *(_QWORD *)(v0 + 512) = v22;
    v22(v19, v20, v21);
    sub_1000126B0(v20, type metadata accessor for LocalFindableAccessoryRecord);
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
    {
      sub_10009A578(0, v18[2] + 1, 1);
      v18 = v58;
    }
    v24 = v18[2];
    v23 = v18[3];
    if (v24 >= v23 >> 1)
    {
      sub_10009A578(v23 > 1, v24 + 1, 1);
      v18 = v58;
    }
    v25 = *(_QWORD *)(v0 + 432);
    v26 = *(_QWORD *)(v0 + 416);
    v18[2] = v24 + 1;
    v27 = (char *)v18 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v28 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)(v0 + 520) = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(&v27[v28 * v24], v25, v26);
    v58 = v18;
    v16 += v17;
    --v7;
  }
  while (v7);
  v44 = *(_QWORD *)(v0 + 240);
  sub_100C0E874(v53, v51, (uint64_t)v18, v56);
  v45 = *(_QWORD *)(v44 + 112);
  v46 = unk_1011194DC;
  v55 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1011194D8 + dword_1011194D8);
  swift_retain();
  v47 = (_QWORD *)swift_task_alloc(v46);
  *(_QWORD *)(v0 + 456) = v47;
  *v47 = v0;
  v47[1] = sub_1008C6700;
  return v55(v56, v45);
}

uint64_t sub_1008C6700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);

  v5 = *(_QWORD *)(*v4 + 456);
  v6 = *v4;
  *(_QWORD *)(v6 + 464) = a1;
  *(_QWORD *)(v6 + 472) = a2;
  *(_QWORD *)(v6 + 480) = a3;
  swift_task_dealloc(v5);
  if (v3)
  {
    v7 = *(_QWORD *)(v6 + 408);
    v9 = *(_QWORD *)(v6 + 384);
    v8 = *(_QWORD *)(v6 + 392);
    v10 = *(_QWORD *)(v6 + 360);
    v12 = *(_QWORD *)(v6 + 328);
    v11 = *(_QWORD *)(v6 + 336);
    v13 = *(_QWORD *)(v6 + 320);
    v17 = *(_QWORD *)(v6 + 312);
    v18 = *(_QWORD *)(v6 + 304);
    v19 = *(_QWORD *)(v6 + 296);
    v20 = *(_QWORD *)(v6 + 288);
    v21 = *(_QWORD *)(v6 + 280);
    v14 = *(_QWORD *)(v6 + 248);
    swift_task_dealloc(*(_QWORD *)(v6 + 432));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    v22 = (uint64_t (*)(uint64_t))((char *)&dword_1010F60A0 + dword_1010F60A0);
    v16 = (_QWORD *)swift_task_alloc(unk_1010F60A4);
    *(_QWORD *)(v6 + 488) = v16;
    *v16 = v6;
    v16[1] = sub_1008C6874;
    return v22(0);
  }
}

uint64_t sub_1008C6874(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  v5 = *(_QWORD **)v2;
  v5[62] = a1;
  v5[63] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1008C6984, v5[30], 0);
  v7 = (_QWORD *)swift_task_alloc(dword_1010F600C);
  v5[66] = v7;
  *v7 = v5;
  v7[1] = sub_1008C6920;
  return sub_1002DFD3C(v5[49], v5[58], v5[59], v5[60]);
}

uint64_t sub_1008C6920()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 528);
  *(_QWORD *)(*v1 + 536) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1008C912C;
  else
    v4 = sub_1008C6A88;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 240), 0);
}

uint64_t sub_1008C6984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_10001EF3C(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472));
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008C6A88()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  void *v30;
  id v31;
  void (*v32)(uint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  void (*v36)(uint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __n128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (__cdecl *v126)();
  uint64_t v127[2];

  v1 = (void *)Response.response.getter();
  v2 = objc_msgSend(v1, "statusCode");

  if (v2 != (id)200)
  {
    v20 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 16))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 368));
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v122 = *(_QWORD *)(v0 + 472);
    v118 = *(_QWORD *)(v0 + 464);
    v25 = *(_QWORD *)(v0 + 384);
    v24 = *(_QWORD *)(v0 + 392);
    v27 = *(_QWORD *)(v0 + 368);
    v26 = *(_QWORD *)(v0 + 376);
    if (v23)
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v28 = 134217984;
      v29 = v27;
      v30 = (void *)Response.response.getter();
      v31 = objc_msgSend(v30, "statusCode");

      v32 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v32(v25, v29);
      *(_QWORD *)(v0 + 224) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v28 + 4, v28 + 12);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to fetch: %ld", v28, 0xCu);
      swift_slowDealloc(v28, -1, -1);

      v33 = sub_1008CBAC0();
      v34 = swift_allocError(&type metadata for PencilLocationsFetcher.Error, v33, 0, 0);
      *v35 = 2;
      swift_willThrow(v34);
      swift_release();
      sub_10001EF3C(v118, v122);
      swift_bridgeObjectRelease();
      v32(v24, v29);
    }
    else
    {
      v36 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v36(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 368));

      v37 = sub_1008CBAC0();
      v38 = swift_allocError(&type metadata for PencilLocationsFetcher.Error, v37, 0, 0);
      *v39 = 2;
      swift_willThrow(v38);
      swift_release();
      sub_10001EF3C(v118, v122);
      swift_bridgeObjectRelease();
      v36(v24, v27);
    }
    goto LABEL_9;
  }
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successful LocalFindable location fetching.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 536);
  v9 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD **)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 344);

  v11 = type metadata accessor for JSONDecoder(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v0 + 544) = JSONDecoder.init()(v12);
  *v8 = sub_1008C9240;
  v8[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v8, enum case for JSONDecoder.DateDecodingStrategy.custom(_:), v10);
  v13 = dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v8);
  v14 = Response.body.getter(v13);
  v16 = v15;
  v17 = sub_1008CBB04();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for PencilSecureLocationFetchResponse, v14, v16, &type metadata for PencilSecureLocationFetchResponse, v17);
  if (v7)
  {
    v18 = *(_QWORD *)(v0 + 472);
    v19 = *(_QWORD *)(v0 + 464);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 8))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 368));
    sub_10001BC14(v14, v16);
    swift_release();
    swift_release();
    sub_10001EF3C(v19, v18);
    swift_bridgeObjectRelease();
LABEL_9:
    v40 = *(_QWORD *)(v0 + 408);
    v42 = *(_QWORD *)(v0 + 384);
    v41 = *(_QWORD *)(v0 + 392);
    v43 = *(_QWORD *)(v0 + 360);
    v45 = *(_QWORD *)(v0 + 328);
    v44 = *(_QWORD *)(v0 + 336);
    v47 = *(_QWORD *)(v0 + 312);
    v46 = *(_QWORD *)(v0 + 320);
    v48 = *(_QWORD *)(v0 + 304);
    v113 = *(_QWORD *)(v0 + 296);
    v115 = *(_QWORD *)(v0 + 288);
    v119 = *(_QWORD *)(v0 + 280);
    v123 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 432));
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v119);
    swift_task_dealloc(v123);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v50 = *(_QWORD *)(v0 + 232);
  sub_10001BC14(v14, v16);
  v51 = sub_1008C9254(*(_QWORD *)(v0 + 152), v50);
  *(_QWORD *)(v0 + 552) = v51;
  swift_bridgeObjectRelease();
  v52 = *(_BYTE *)(v51 + 32);
  *(_BYTE *)(v0 + 170) = v52;
  v53 = -1;
  v54 = -1 << v52;
  if (-(-1 << v52) < 64)
    v53 = ~(-1 << -(char)v54);
  v55 = v53 & *(_QWORD *)(v51 + 64);
  *(_QWORD *)(v0 + 560) = 0;
  v56 = swift_bridgeObjectRetain(v51);
  if (v55)
  {
    v57 = 0;
    v58 = __clz(__rbit64(v55));
    v59 = (v55 - 1) & v55;
    v60 = *(_QWORD **)(v0 + 552);
LABEL_14:
    v61 = *(_QWORD *)(v0 + 328);
    v62 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(v0 + 512))(v61, v60[6] + *(_QWORD *)(v0 + 520) * v58, *(_QWORD *)(v0 + 416), v56);
    v63 = v60[7] + *(_QWORD *)(v62 + 72) * v58;
    v64 = sub_10001A9A8(&qword_1010FB238);
    sub_10005972C(v63, v61 + *(int *)(v64 + 48), type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v61, 0, 1, v64);
    goto LABEL_21;
  }
  v65 = 63 - v54;
  if ((unint64_t)(63 - v54) <= 0x7F)
  {
    v57 = 0;
  }
  else
  {
    v60 = *(_QWORD **)(v0 + 552);
    v66 = v60[9];
    if (v66)
    {
      v57 = 1;
LABEL_18:
      v59 = (v66 - 1) & v66;
      v58 = __clz(__rbit64(v66)) + (v57 << 6);
      goto LABEL_14;
    }
    if (v65 < 0xC0)
    {
      v57 = 1;
    }
    else
    {
      v66 = v60[10];
      if (v66)
      {
        v57 = 2;
        goto LABEL_18;
      }
      if (v65 < 0x100)
      {
        v57 = 2;
      }
      else
      {
        v66 = v60[11];
        if (v66)
        {
          v57 = 3;
          goto LABEL_18;
        }
        if (v65 < 0x140)
        {
          v57 = 3;
        }
        else
        {
          v66 = v60[12];
          if (v66)
          {
            v57 = 4;
            goto LABEL_18;
          }
          v102 = 0;
          v103 = v65 >> 6;
          v104 = 5;
          if (v103 > 5)
            v104 = v103;
          v105 = v104 - 5;
          while (v105 != v102)
          {
            v66 = v60[v102++ + 13];
            if (v66)
            {
              v57 = v102 + 4;
              goto LABEL_18;
            }
          }
          v57 = v103 - 1;
        }
      }
    }
  }
  v67 = *(_QWORD *)(v0 + 328);
  v68 = sub_10001A9A8(&qword_1010FB238);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
  v59 = 0;
LABEL_21:
  *(_QWORD *)(v0 + 576) = v59;
  *(_QWORD *)(v0 + 568) = v57;
  v69 = *(_QWORD *)(v0 + 336);
  sub_100005CF0(*(_QWORD *)(v0 + 328), v69, &qword_10110C098);
  v70 = sub_10001A9A8(&qword_1010FB238);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v69, 1, v70) == 1)
  {
    v71 = *(_QWORD *)(v0 + 472);
    v72 = *(_QWORD *)(v0 + 464);
    v73 = *(_QWORD *)(v0 + 432);
    v74 = *(_QWORD *)(v0 + 392);
    v106 = *(_QWORD *)(v0 + 408);
    v107 = *(_QWORD *)(v0 + 384);
    v76 = *(_QWORD *)(v0 + 368);
    v75 = *(_QWORD *)(v0 + 376);
    v108 = *(_QWORD *)(v0 + 360);
    v109 = *(_QWORD *)(v0 + 336);
    v110 = *(_QWORD *)(v0 + 328);
    v111 = *(_QWORD *)(v0 + 320);
    v112 = *(_QWORD *)(v0 + 312);
    v114 = *(_QWORD *)(v0 + 304);
    v116 = *(_QWORD *)(v0 + 296);
    v120 = *(_QWORD *)(v0 + 288);
    v124 = *(_QWORD *)(v0 + 280);
    v125 = *(_QWORD *)(v0 + 248);
    swift_release();
    swift_release();
    sub_10001EF3C(v72, v71);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
    swift_task_dealloc(v73);
    swift_task_dealloc(v106);
    swift_task_dealloc(v74);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v120);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 552));
  }
  else
  {
    v77 = (__int128 *)(v0 + 104);
    v78 = v0 + 176;
    v80 = *(_QWORD *)(v0 + 312);
    v79 = *(_QWORD *)(v0 + 320);
    v82 = *(_QWORD *)(v0 + 296);
    v81 = *(_QWORD *)(v0 + 304);
    sub_1000126EC(*(_QWORD *)(v0 + 336) + *(int *)(v70 + 48), v79, type metadata accessor for DeviceEvent);
    sub_10005972C(v79, v80, type metadata accessor for DeviceEvent);
    sub_10005972C(v79, v81, type metadata accessor for DeviceEvent);
    v83 = sub_10005972C(v79, v82, type metadata accessor for DeviceEvent);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.error.getter(v84);
    if (os_log_type_enabled(v84, v85))
    {
      v86 = *(_QWORD *)(v0 + 304);
      v87 = *(_QWORD *)(v0 + 312);
      v117 = *(_QWORD *)(v0 + 296);
      v121 = *(_QWORD *)(v0 + 416);
      v88 = swift_slowAlloc(38, -1);
      v89 = swift_slowAlloc(64, -1);
      v127[0] = v89;
      *(_DWORD *)v88 = 136446979;
      v90 = type metadata accessor for Date(0);
      v91 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v90, v91);
      *(_QWORD *)(v88 + 4) = sub_100016940(v92, v93, v127);
      swift_bridgeObjectRelease();
      sub_1000126B0(v87, type metadata accessor for DeviceEvent);
      *(_WORD *)(v88 + 12) = 1024;
      v94 = *(unsigned __int8 *)(v86 + 9);
      sub_1000126B0(v86, type metadata accessor for DeviceEvent);
      *(_DWORD *)(v88 + 14) = v94;
      *(_WORD *)(v88 + 18) = 2160;
      *(_QWORD *)(v88 + 20) = 1752392040;
      *(_WORD *)(v88 + 28) = 2081;
      v78 = v0 + 176;
      type metadata accessor for BeaconIdentifier(0);
      v95 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v96 = dispatch thunk of CustomStringConvertible.description.getter(v121, v95);
      *(_QWORD *)(v88 + 30) = sub_100016940(v96, v97, v127);
      swift_bridgeObjectRelease();
      sub_1000126B0(v117, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Saving device event %{public}s, source: %u, for beacon %{private,mask.hash}s.", (uint8_t *)v88, 0x26u);
      swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
      v98 = v89;
      v77 = (__int128 *)(v0 + 104);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v88, -1, -1);
    }
    else
    {
      v99 = *(_QWORD *)(v0 + 312);
      v100 = *(_QWORD *)(v0 + 296);
      sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for DeviceEvent);
      sub_1000126B0(v99, type metadata accessor for DeviceEvent);
      sub_1000126B0(v100, type metadata accessor for DeviceEvent);
    }

    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v78, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v77, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 128))
    {
      sub_10000F9FC(v77, v0 + 64);
      sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
      v126 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
      v101 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
      *(_QWORD *)(v0 + 584) = v101;
      *v101 = v0;
      v101[1] = sub_1008C759C;
      return v126();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1008C759C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 584);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 592) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008C75FC, v3, 0);
}

uint64_t sub_1008C75FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t (__cdecl *v87)();
  uint64_t v88[2];

  v1 = *(_QWORD *)(v0 + 592);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  if (v1)
    return swift_task_switch(sub_1008C7F44, *(_QWORD *)(v0 + 592), 0);
  v3 = sub_1008CBAC0();
  v4 = swift_allocError(&type metadata for PencilLocationsFetcher.Error, v3, 0, 0);
  *v5 = 3;
  swift_willThrow(v4);
  sub_10005972C(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 280), type metadata accessor for DeviceEvent);
  swift_errorRetain(v4);
  v6 = swift_errorRetain(v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v85 = (_QWORD *)(v0 + 64);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v0 + 416);
    v83 = *(_QWORD *)(v0 + 320);
    v10 = *(_QWORD *)(v0 + 280);
    v11 = swift_slowAlloc(32, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    v13 = swift_slowAlloc(32, -1);
    v88[0] = v13;
    *(_DWORD *)v11 = 138543875;
    swift_errorRetain(v4);
    v14 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v11 + 4) = v14;
    *v12 = v14;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    *(_WORD *)(v11 + 12) = 2160;
    *(_QWORD *)(v11 + 14) = 1752392040;
    *(_WORD *)(v11 + 22) = 2081;
    type metadata accessor for BeaconIdentifier(0);
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v9, v15);
    *(_QWORD *)(v11 + 24) = sub_100016940(v16, v17, v88);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to save location %{public}@, for beacon %{private,mask.hash}s.", (uint8_t *)v11, 0x20u);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v12, 1, v18);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v4);
    v19 = v83;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 320);
    v21 = *(_QWORD *)(v0 + 280);

    sub_1000126B0(v21, type metadata accessor for DeviceEvent);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    v19 = v20;
  }
  sub_1000126B0(v19, type metadata accessor for DeviceEvent);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 416));
  v22 = *(_QWORD *)(v0 + 576);
  v23 = *(_QWORD *)(v0 + 568);
  *(_QWORD *)(v0 + 560) = 0;
  if (v22)
  {
    v24 = (v22 - 1) & v22;
    v25 = __clz(__rbit64(v22)) | (v23 << 6);
    v26 = *(_QWORD *)(v0 + 552);
LABEL_8:
    v27 = *(_QWORD *)(v0 + 328);
    v28 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 512))(v27, *(_QWORD *)(v26 + 48) + *(_QWORD *)(v0 + 520) * v25, *(_QWORD *)(v0 + 416));
    v29 = *(_QWORD *)(v26 + 56) + *(_QWORD *)(v28 + 72) * v25;
    v30 = sub_10001A9A8(&qword_1010FB238);
    sub_10005972C(v29, v27 + *(int *)(v30 + 48), type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v27, 0, 1, v30);
    goto LABEL_27;
  }
  v31 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  v32 = (unint64_t)((1 << *(_BYTE *)(v0 + 170)) + 63) >> 6;
  if (v31 < v32)
  {
    v26 = *(_QWORD *)(v0 + 552);
    v33 = v26 + 64;
    v34 = *(_QWORD *)(v26 + 64 + 8 * v31);
    if (v34)
    {
LABEL_12:
      v24 = (v34 - 1) & v34;
      v25 = __clz(__rbit64(v34)) + (v31 << 6);
      v23 = v31;
      goto LABEL_8;
    }
    v35 = v23 + 2;
    ++v23;
    if (v31 + 1 < v32)
    {
      v34 = *(_QWORD *)(v33 + 8 * v35);
      if (v34)
      {
LABEL_15:
        v31 = v35;
        goto LABEL_12;
      }
      v23 = v31 + 1;
      if (v31 + 2 < v32)
      {
        v34 = *(_QWORD *)(v33 + 8 * (v31 + 2));
        if (v34)
        {
          v31 += 2;
          goto LABEL_12;
        }
        v35 = v31 + 3;
        v23 = v31 + 2;
        if (v31 + 3 < v32)
        {
          v34 = *(_QWORD *)(v33 + 8 * v35);
          if (v34)
            goto LABEL_15;
          while (1)
          {
            v31 = v35 + 1;
            if (__OFADD__(v35, 1))
              break;
            if (v31 >= v32)
            {
              v23 = v32 - 1;
              goto LABEL_26;
            }
            v34 = *(_QWORD *)(v33 + 8 * v31);
            ++v35;
            if (v34)
              goto LABEL_12;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
      }
    }
  }
LABEL_26:
  v36 = *(_QWORD *)(v0 + 328);
  v37 = sub_10001A9A8(&qword_1010FB238);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v24 = 0;
LABEL_27:
  *(_QWORD *)(v0 + 576) = v24;
  *(_QWORD *)(v0 + 568) = v23;
  v38 = *(_QWORD *)(v0 + 336);
  sub_100005CF0(*(_QWORD *)(v0 + 328), v38, &qword_10110C098);
  v39 = sub_10001A9A8(&qword_1010FB238);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39) == 1)
  {
    v40 = *(_QWORD *)(v0 + 472);
    v41 = *(_QWORD *)(v0 + 464);
    v42 = *(_QWORD *)(v0 + 432);
    v43 = *(_QWORD *)(v0 + 392);
    v71 = *(_QWORD *)(v0 + 408);
    v72 = *(_QWORD *)(v0 + 384);
    v45 = *(_QWORD *)(v0 + 368);
    v44 = *(_QWORD *)(v0 + 376);
    v73 = *(_QWORD *)(v0 + 360);
    v74 = *(_QWORD *)(v0 + 336);
    v75 = *(_QWORD *)(v0 + 328);
    v76 = *(_QWORD *)(v0 + 320);
    v77 = *(_QWORD *)(v0 + 312);
    v78 = *(_QWORD *)(v0 + 304);
    v80 = *(_QWORD *)(v0 + 296);
    v82 = *(_QWORD *)(v0 + 288);
    v84 = *(_QWORD *)(v0 + 280);
    v86 = *(_QWORD *)(v0 + 248);
    swift_release();
    swift_release();
    sub_10001EF3C(v41, v40);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    swift_task_dealloc(v42);
    swift_task_dealloc(v71);
    swift_task_dealloc(v43);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 552));
  }
  v46 = (__int128 *)(v0 + 104);
  v47 = v0 + 176;
  v49 = *(_QWORD *)(v0 + 312);
  v48 = *(_QWORD *)(v0 + 320);
  v51 = *(_QWORD *)(v0 + 296);
  v50 = *(_QWORD *)(v0 + 304);
  sub_1000126EC(*(_QWORD *)(v0 + 336) + *(int *)(v39 + 48), v48, type metadata accessor for DeviceEvent);
  sub_10005972C(v48, v49, type metadata accessor for DeviceEvent);
  sub_10005972C(v48, v50, type metadata accessor for DeviceEvent);
  v52 = sub_10005972C(v48, v51, type metadata accessor for DeviceEvent);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.error.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = *(_QWORD *)(v0 + 304);
    v56 = *(_QWORD *)(v0 + 312);
    v79 = *(_QWORD *)(v0 + 296);
    v81 = *(_QWORD *)(v0 + 416);
    v57 = swift_slowAlloc(38, -1);
    v58 = swift_slowAlloc(64, -1);
    v88[0] = v58;
    *(_DWORD *)v57 = 136446979;
    v59 = type metadata accessor for Date(0);
    v60 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v61 = dispatch thunk of CustomStringConvertible.description.getter(v59, v60);
    *(_QWORD *)(v57 + 4) = sub_100016940(v61, v62, v88);
    swift_bridgeObjectRelease();
    sub_1000126B0(v56, type metadata accessor for DeviceEvent);
    *(_WORD *)(v57 + 12) = 1024;
    v63 = *(unsigned __int8 *)(v55 + 9);
    sub_1000126B0(v55, type metadata accessor for DeviceEvent);
    *(_DWORD *)(v57 + 14) = v63;
    *(_WORD *)(v57 + 18) = 2160;
    *(_QWORD *)(v57 + 20) = 1752392040;
    *(_WORD *)(v57 + 28) = 2081;
    v47 = v0 + 176;
    type metadata accessor for BeaconIdentifier(0);
    v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v65 = dispatch thunk of CustomStringConvertible.description.getter(v81, v64);
    *(_QWORD *)(v57 + 30) = sub_100016940(v65, v66, v88);
    swift_bridgeObjectRelease();
    sub_1000126B0(v79, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Saving device event %{public}s, source: %u, for beacon %{private,mask.hash}s.", (uint8_t *)v57, 0x26u);
    swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
    v67 = v58;
    v46 = (__int128 *)(v0 + 104);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v57, -1, -1);
  }
  else
  {
    v68 = *(_QWORD *)(v0 + 312);
    v69 = *(_QWORD *)(v0 + 296);
    sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for DeviceEvent);
    sub_1000126B0(v68, type metadata accessor for DeviceEvent);
    sub_1000126B0(v69, type metadata accessor for DeviceEvent);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v47, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v46, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 128))
  {
    sub_10000F9FC(v46, (uint64_t)v85);
    sub_10001AA44(v85, *(_QWORD *)(v0 + 88));
    v87 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v70 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 584) = v70;
    *v70 = v0;
    v70[1] = sub_1008C759C;
    return v87();
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1008C7F44()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = *(char **)(v0[74] + 128);
  if (v1)
  {
    v2 = v0[70];
    v3 = v0[40];
    swift_retain();
    sub_1001284E0(v3, v1);
    v0[75] = v2;
    if (!v2)
    {
      v12 = v0[74];
      v13 = v0[40];
      v14 = v0[36];
      v16 = v0[33];
      v15 = v0[34];
      v17 = v0[30];
      v18 = v0[31];
      swift_release();
      swift_beginAccess(v12 + 144, v0 + 25, 0, 0);
      v19 = *(_QWORD *)(v12 + 144);
      v20 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 1, 1, v20);
      sub_10005972C(v13, v14, type metadata accessor for DeviceEvent);
      v21 = *(unsigned __int8 *)(v16 + 80);
      v22 = (v21 + 40) & ~v21;
      v23 = (_QWORD *)swift_allocObject(&unk_101099658, v22 + v15, v21 | 7);
      v23[2] = 0;
      v23[3] = 0;
      v23[4] = v19;
      sub_1000126EC(v14, (uint64_t)v23 + v22, type metadata accessor for DeviceEvent);
      swift_bridgeObjectRetain(v19);
      sub_100691AC0(v18, (uint64_t)&unk_10110C0B0, (uint64_t)v23);
      swift_release();
      swift_release();
      v11 = sub_1008C819C;
      v10 = v17;
      return swift_task_switch(v11, v10, 0);
    }
    v4 = v2;
    swift_release();
  }
  else
  {
    if (qword_1010EA460 != -1)
      swift_once(&qword_1010EA460, sub_100C67E60);
    v5 = sub_10001A9E8(v0[55], (uint64_t)qword_10111B888);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.fault.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No observation store on this platform!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100417FD0();
    v4 = swift_allocError(&type metadata for ObservationStoreService.ObservationStoreServiceError, v9, 0, 0);
    swift_willThrow(v4);
  }
  v0[76] = v4;
  v10 = v0[30];
  v11 = sub_1008C8850;
  return swift_task_switch(v11, v10, 0);
}

uint64_t sub_1008C819C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (__cdecl *v66)();
  uint64_t v67;

  sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for DeviceEvent);
  v1 = *(_QWORD *)(v0 + 600);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 416));
  v3 = *(_QWORD *)(v0 + 576);
  v4 = *(_QWORD *)(v0 + 568);
  *(_QWORD *)(v0 + 560) = v1;
  if (v3)
  {
    v5 = (v3 - 1) & v3;
    v6 = __clz(__rbit64(v3)) | (v4 << 6);
    v7 = *(_QWORD *)(v0 + 552);
LABEL_3:
    v8 = *(_QWORD *)(v0 + 328);
    v9 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 512))(v8, *(_QWORD *)(v7 + 48) + *(_QWORD *)(v0 + 520) * v6, *(_QWORD *)(v0 + 416));
    v10 = *(_QWORD *)(v7 + 56) + *(_QWORD *)(v9 + 72) * v6;
    v11 = sub_10001A9A8(&qword_1010FB238);
    sub_10005972C(v10, v8 + *(int *)(v11 + 48), type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 0, 1, v11);
    goto LABEL_22;
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  v13 = (unint64_t)((1 << *(_BYTE *)(v0 + 170)) + 63) >> 6;
  if (v12 < v13)
  {
    v7 = *(_QWORD *)(v0 + 552);
    v14 = v7 + 64;
    v15 = *(_QWORD *)(v7 + 64 + 8 * v12);
    if (v15)
    {
LABEL_7:
      v5 = (v15 - 1) & v15;
      v6 = __clz(__rbit64(v15)) + (v12 << 6);
      v4 = v12;
      goto LABEL_3;
    }
    v16 = v4 + 2;
    ++v4;
    if (v12 + 1 < v13)
    {
      v15 = *(_QWORD *)(v14 + 8 * v16);
      if (v15)
      {
LABEL_10:
        v12 = v16;
        goto LABEL_7;
      }
      v4 = v12 + 1;
      if (v12 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * (v12 + 2));
        if (v15)
        {
          v12 += 2;
          goto LABEL_7;
        }
        v16 = v12 + 3;
        v4 = v12 + 2;
        if (v12 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * v16);
          if (v15)
            goto LABEL_10;
          while (1)
          {
            v12 = v16 + 1;
            if (__OFADD__(v16, 1))
              break;
            if (v12 >= v13)
            {
              v4 = v13 - 1;
              goto LABEL_21;
            }
            v15 = *(_QWORD *)(v14 + 8 * v12);
            ++v16;
            if (v15)
              goto LABEL_7;
          }
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
      }
    }
  }
LABEL_21:
  v17 = *(_QWORD *)(v0 + 328);
  v18 = sub_10001A9A8(&qword_1010FB238);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v5 = 0;
LABEL_22:
  *(_QWORD *)(v0 + 576) = v5;
  *(_QWORD *)(v0 + 568) = v4;
  v19 = *(_QWORD *)(v0 + 336);
  sub_100005CF0(*(_QWORD *)(v0 + 328), v19, &qword_10110C098);
  v20 = sub_10001A9A8(&qword_1010FB238);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20) == 1)
  {
    v21 = *(_QWORD *)(v0 + 472);
    v22 = *(_QWORD *)(v0 + 464);
    v23 = *(_QWORD *)(v0 + 432);
    v24 = *(_QWORD *)(v0 + 392);
    v52 = *(_QWORD *)(v0 + 408);
    v53 = *(_QWORD *)(v0 + 384);
    v26 = *(_QWORD *)(v0 + 368);
    v25 = *(_QWORD *)(v0 + 376);
    v54 = *(_QWORD *)(v0 + 360);
    v55 = *(_QWORD *)(v0 + 336);
    v56 = *(_QWORD *)(v0 + 328);
    v57 = *(_QWORD *)(v0 + 320);
    v58 = *(_QWORD *)(v0 + 312);
    v59 = *(_QWORD *)(v0 + 304);
    v60 = *(_QWORD *)(v0 + 296);
    v62 = *(_QWORD *)(v0 + 288);
    v64 = *(_QWORD *)(v0 + 280);
    v65 = *(_QWORD *)(v0 + 248);
    swift_release();
    swift_release();
    sub_10001EF3C(v22, v21);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    swift_task_dealloc(v23);
    swift_task_dealloc(v52);
    swift_task_dealloc(v24);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 552));
  }
  v27 = (__int128 *)(v0 + 104);
  v28 = v0 + 176;
  v30 = *(_QWORD *)(v0 + 312);
  v29 = *(_QWORD *)(v0 + 320);
  v32 = *(_QWORD *)(v0 + 296);
  v31 = *(_QWORD *)(v0 + 304);
  sub_1000126EC(*(_QWORD *)(v0 + 336) + *(int *)(v20 + 48), v29, type metadata accessor for DeviceEvent);
  sub_10005972C(v29, v30, type metadata accessor for DeviceEvent);
  sub_10005972C(v29, v31, type metadata accessor for DeviceEvent);
  v33 = sub_10005972C(v29, v32, type metadata accessor for DeviceEvent);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = *(_QWORD *)(v0 + 304);
    v37 = *(_QWORD *)(v0 + 312);
    v61 = *(_QWORD *)(v0 + 296);
    v63 = *(_QWORD *)(v0 + 416);
    v38 = swift_slowAlloc(38, -1);
    v39 = swift_slowAlloc(64, -1);
    v67 = v39;
    *(_DWORD *)v38 = 136446979;
    v40 = type metadata accessor for Date(0);
    v41 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v42 = dispatch thunk of CustomStringConvertible.description.getter(v40, v41);
    *(_QWORD *)(v38 + 4) = sub_100016940(v42, v43, &v67);
    swift_bridgeObjectRelease();
    sub_1000126B0(v37, type metadata accessor for DeviceEvent);
    *(_WORD *)(v38 + 12) = 1024;
    v44 = *(unsigned __int8 *)(v36 + 9);
    sub_1000126B0(v36, type metadata accessor for DeviceEvent);
    *(_DWORD *)(v38 + 14) = v44;
    *(_WORD *)(v38 + 18) = 2160;
    *(_QWORD *)(v38 + 20) = 1752392040;
    *(_WORD *)(v38 + 28) = 2081;
    v28 = v0 + 176;
    type metadata accessor for BeaconIdentifier(0);
    v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v63, v45);
    *(_QWORD *)(v38 + 30) = sub_100016940(v46, v47, &v67);
    swift_bridgeObjectRelease();
    sub_1000126B0(v61, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Saving device event %{public}s, source: %u, for beacon %{private,mask.hash}s.", (uint8_t *)v38, 0x26u);
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    v48 = v39;
    v27 = (__int128 *)(v0 + 104);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    v49 = *(_QWORD *)(v0 + 312);
    v50 = *(_QWORD *)(v0 + 296);
    sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for DeviceEvent);
    sub_1000126B0(v49, type metadata accessor for DeviceEvent);
    sub_1000126B0(v50, type metadata accessor for DeviceEvent);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v28, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v27, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 128))
  {
    sub_10000F9FC(v27, v0 + 64);
    sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
    v66 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v51 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 584) = v51;
    *v51 = v0;
    v51[1] = sub_1008C759C;
    return v66();
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1008C8850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (__cdecl *v83)();
  uint64_t v84;

  swift_release();
  v1 = *(_QWORD *)(v0 + 608);
  sub_10005972C(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 280), type metadata accessor for DeviceEvent);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 416);
    v81 = *(_QWORD *)(v0 + 320);
    v6 = *(_QWORD *)(v0 + 280);
    v7 = swift_slowAlloc(32, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    v9 = swift_slowAlloc(32, -1);
    v84 = v9;
    *(_DWORD *)v7 = 138543875;
    swift_errorRetain(v1);
    v10 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v7 + 4) = v10;
    *v8 = v10;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v7 + 12) = 2160;
    *(_QWORD *)(v7 + 14) = 1752392040;
    *(_WORD *)(v7 + 22) = 2081;
    type metadata accessor for BeaconIdentifier(0);
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v5, v11);
    *(_QWORD *)(v7 + 24) = sub_100016940(v12, v13, &v84);
    swift_bridgeObjectRelease();
    sub_1000126B0(v6, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to save location %{public}@, for beacon %{private,mask.hash}s.", (uint8_t *)v7, 0x20u);
    v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v14);
    swift_slowDealloc(v8, -1, -1);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v1);
    v15 = v81;
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 320);
    v17 = *(_QWORD *)(v0 + 280);

    sub_1000126B0(v17, type metadata accessor for DeviceEvent);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    v15 = v16;
  }
  sub_1000126B0(v15, type metadata accessor for DeviceEvent);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 424) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 416));
  v19 = *(_QWORD *)(v0 + 576);
  v20 = *(_QWORD *)(v0 + 568);
  *(_QWORD *)(v0 + 560) = 0;
  if (v19)
  {
    v21 = (v19 - 1) & v19;
    v22 = __clz(__rbit64(v19)) | (v20 << 6);
    v23 = *(_QWORD *)(v0 + 552);
LABEL_6:
    v24 = *(_QWORD *)(v0 + 328);
    v25 = *(_QWORD *)(v0 + 264);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 512))(v24, *(_QWORD *)(v23 + 48) + *(_QWORD *)(v0 + 520) * v22, *(_QWORD *)(v0 + 416));
    v26 = *(_QWORD *)(v23 + 56) + *(_QWORD *)(v25 + 72) * v22;
    v27 = sub_10001A9A8(&qword_1010FB238);
    sub_10005972C(v26, v24 + *(int *)(v27 + 48), type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v24, 0, 1, v27);
    goto LABEL_25;
  }
  v28 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  v29 = (unint64_t)((1 << *(_BYTE *)(v0 + 170)) + 63) >> 6;
  if (v28 < v29)
  {
    v23 = *(_QWORD *)(v0 + 552);
    v30 = v23 + 64;
    v31 = *(_QWORD *)(v23 + 64 + 8 * v28);
    if (v31)
    {
LABEL_10:
      v21 = (v31 - 1) & v31;
      v22 = __clz(__rbit64(v31)) + (v28 << 6);
      v20 = v28;
      goto LABEL_6;
    }
    v32 = v20 + 2;
    ++v20;
    if (v28 + 1 < v29)
    {
      v31 = *(_QWORD *)(v30 + 8 * v32);
      if (v31)
      {
LABEL_13:
        v28 = v32;
        goto LABEL_10;
      }
      v20 = v28 + 1;
      if (v28 + 2 < v29)
      {
        v31 = *(_QWORD *)(v30 + 8 * (v28 + 2));
        if (v31)
        {
          v28 += 2;
          goto LABEL_10;
        }
        v32 = v28 + 3;
        v20 = v28 + 2;
        if (v28 + 3 < v29)
        {
          v31 = *(_QWORD *)(v30 + 8 * v32);
          if (v31)
            goto LABEL_13;
          while (1)
          {
            v28 = v32 + 1;
            if (__OFADD__(v32, 1))
              break;
            if (v28 >= v29)
            {
              v20 = v29 - 1;
              goto LABEL_24;
            }
            v31 = *(_QWORD *)(v30 + 8 * v28);
            ++v32;
            if (v31)
              goto LABEL_10;
          }
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
      }
    }
  }
LABEL_24:
  v33 = *(_QWORD *)(v0 + 328);
  v34 = sub_10001A9A8(&qword_1010FB238);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v21 = 0;
LABEL_25:
  *(_QWORD *)(v0 + 576) = v21;
  *(_QWORD *)(v0 + 568) = v20;
  v35 = *(_QWORD *)(v0 + 336);
  sub_100005CF0(*(_QWORD *)(v0 + 328), v35, &qword_10110C098);
  v36 = sub_10001A9A8(&qword_1010FB238);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36) == 1)
  {
    v37 = *(_QWORD *)(v0 + 472);
    v38 = *(_QWORD *)(v0 + 464);
    v39 = *(_QWORD *)(v0 + 432);
    v40 = *(_QWORD *)(v0 + 392);
    v68 = *(_QWORD *)(v0 + 408);
    v69 = *(_QWORD *)(v0 + 384);
    v42 = *(_QWORD *)(v0 + 368);
    v41 = *(_QWORD *)(v0 + 376);
    v70 = *(_QWORD *)(v0 + 360);
    v71 = *(_QWORD *)(v0 + 336);
    v72 = *(_QWORD *)(v0 + 328);
    v73 = *(_QWORD *)(v0 + 320);
    v74 = *(_QWORD *)(v0 + 312);
    v75 = *(_QWORD *)(v0 + 304);
    v76 = *(_QWORD *)(v0 + 296);
    v78 = *(_QWORD *)(v0 + 288);
    v80 = *(_QWORD *)(v0 + 280);
    v82 = *(_QWORD *)(v0 + 248);
    swift_release();
    swift_release();
    sub_10001EF3C(v38, v37);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    swift_task_dealloc(v39);
    swift_task_dealloc(v68);
    swift_task_dealloc(v40);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 552));
  }
  v43 = (__int128 *)(v0 + 104);
  v44 = v0 + 176;
  v46 = *(_QWORD *)(v0 + 312);
  v45 = *(_QWORD *)(v0 + 320);
  v48 = *(_QWORD *)(v0 + 296);
  v47 = *(_QWORD *)(v0 + 304);
  sub_1000126EC(*(_QWORD *)(v0 + 336) + *(int *)(v36 + 48), v45, type metadata accessor for DeviceEvent);
  sub_10005972C(v45, v46, type metadata accessor for DeviceEvent);
  sub_10005972C(v45, v47, type metadata accessor for DeviceEvent);
  v49 = sub_10005972C(v45, v48, type metadata accessor for DeviceEvent);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.error.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = *(_QWORD *)(v0 + 304);
    v53 = *(_QWORD *)(v0 + 312);
    v77 = *(_QWORD *)(v0 + 296);
    v79 = *(_QWORD *)(v0 + 416);
    v54 = swift_slowAlloc(38, -1);
    v55 = swift_slowAlloc(64, -1);
    v84 = v55;
    *(_DWORD *)v54 = 136446979;
    v56 = type metadata accessor for Date(0);
    v57 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v58 = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
    *(_QWORD *)(v54 + 4) = sub_100016940(v58, v59, &v84);
    swift_bridgeObjectRelease();
    sub_1000126B0(v53, type metadata accessor for DeviceEvent);
    *(_WORD *)(v54 + 12) = 1024;
    v60 = *(unsigned __int8 *)(v52 + 9);
    sub_1000126B0(v52, type metadata accessor for DeviceEvent);
    *(_DWORD *)(v54 + 14) = v60;
    *(_WORD *)(v54 + 18) = 2160;
    *(_QWORD *)(v54 + 20) = 1752392040;
    *(_WORD *)(v54 + 28) = 2081;
    v44 = v0 + 176;
    type metadata accessor for BeaconIdentifier(0);
    v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v62 = dispatch thunk of CustomStringConvertible.description.getter(v79, v61);
    *(_QWORD *)(v54 + 30) = sub_100016940(v62, v63, &v84);
    swift_bridgeObjectRelease();
    sub_1000126B0(v77, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Saving device event %{public}s, source: %u, for beacon %{private,mask.hash}s.", (uint8_t *)v54, 0x26u);
    swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
    v64 = v55;
    v43 = (__int128 *)(v0 + 104);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {
    v65 = *(_QWORD *)(v0 + 312);
    v66 = *(_QWORD *)(v0 + 296);
    sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for DeviceEvent);
    sub_1000126B0(v65, type metadata accessor for DeviceEvent);
    sub_1000126B0(v66, type metadata accessor for DeviceEvent);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v44, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v43, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 128))
  {
    sub_10000F9FC(v43, v0 + 64);
    sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
    v83 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v67 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 584) = v67;
    *v67 = v0;
    v67[1] = sub_1008C759C;
    return v83();
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1008C912C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 464);
  swift_release();
  sub_10001EF3C(v2, v1);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1008C9240(_QWORD *a1)
{
  return sub_1008CB254(a1);
}

uint64_t sub_1008C9254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  char **v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  _QWORD *v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _QWORD *v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, unint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  _BOOL8 v122;
  uint64_t v123;
  char v124;
  unint64_t v125;
  char v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _BOOL8 v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  uint8_t *v148;
  uint64_t result;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  __n128 v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  _QWORD *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char v189;
  _QWORD *v190;
  char v191[8];
  _QWORD *v192;

  v165 = a2;
  v154 = a1;
  v173 = type metadata accessor for UUID(0);
  v161 = *(_QWORD *)(v173 - 8);
  v2 = __chkstk_darwin(v173);
  v162 = (uint64_t)&v150 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v152 = (uint64_t)&v150 - v4;
  v5 = sub_10001A9A8(&qword_1010EF488);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v157 = (uint64_t)&v150 - v9;
  v10 = (char *)type metadata accessor for DeviceEvent(0);
  isUniquelyReferenced_nonNull_native = *((_QWORD *)v10 - 1);
  v12 = __chkstk_darwin(v10);
  v155 = (uint64_t)&v150 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v150 = (uint64_t)&v150 - v15;
  v16 = __chkstk_darwin(v14);
  v151 = (uint64_t)&v150 - v17;
  v18 = __chkstk_darwin(v16);
  v153 = (uint64_t)&v150 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (unint64_t)&v150 - v21;
  v23 = __chkstk_darwin(v20);
  v182 = (uint64_t)&v150 - v24;
  v25 = __chkstk_darwin(v23);
  v174 = (uint64_t)&v150 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v150 - v28;
  __chkstk_darwin(v27);
  v31 = (uint64_t *)((char *)&v150 - v30);
  v32 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v32);
  v34 = (unint64_t)&v150 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for HashAlgorithm(0);
  v172 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v171 = (char *)&v150 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v36 = *(_QWORD *)(v166 - 8);
  v37 = __chkstk_darwin(v166);
  v187 = (char *)&v150 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v185 = (unint64_t)&v150 - v40;
  v41 = __chkstk_darwin(v39);
  v43 = (char *)&v150 - v42;
  __chkstk_darwin(v41);
  v179 = (char *)&v150 - v44;
  if (qword_1010E9FF0 != -1)
    goto LABEL_91;
  while (1)
  {
    v167 = v36;
    v168 = (char *)v34;
    v156 = v31;
    v158 = v22;
    v45 = type metadata accessor for Logger(0);
    v181 = sub_10001A9E8(v45, (uint64_t)qword_10110BF88);
    v46 = Logger.logObject.getter(v181);
    v47 = static os_log_type_t.default.getter(v46);
    v48 = os_log_type_enabled(v46, v47);
    v178 = v29;
    if (v48)
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Process LocalFindable locations response.", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    v50 = *(_QWORD *)(v165 + 16);
    v175 = v8;
    v184 = v10;
    v180 = isUniquelyReferenced_nonNull_native;
    if (v50)
      break;
    v73 = _swiftEmptyDictionarySingleton;
LABEL_19:
    v192 = _swiftEmptyDictionarySingleton;
    v29 = v168;
    v165 = *(_QWORD *)(v154 + 16);
    if (!v165)
    {
LABEL_83:
      v145 = swift_bridgeObjectRelease();
      v146 = Logger.logObject.getter(v145);
      v147 = static os_log_type_t.default.getter(v146);
      if (os_log_type_enabled(v146, v147))
      {
        v148 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v148 = 134217984;
        swift_beginAccess(&v192, &v188, 0, 0);
        v190 = (_QWORD *)v192[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v148 + 4, v148 + 12);
        _os_log_impl((void *)&_mh_execute_header, v146, v147, "Found locations for %ld accessories.", v148, 0xCu);
        swift_slowDealloc(v148, -1, -1);
      }

      swift_beginAccess(&v192, &v190, 0, 0);
      return (uint64_t)v192;
    }
    v164 = v154 + 32;
    v171 = &v189;
    v74 = swift_bridgeObjectRetain(v154);
    v75 = 0;
    v74.n128_u64[0] = 136315138;
    v160 = v74;
    v159 = (char *)&type metadata for Any + 8;
    v74.n128_u64[0] = 138543875;
    v170 = v74;
    v177 = v73;
    while (1)
    {
      v172 = v75;
      v77 = (uint64_t *)(v164 + 24 * v75);
      v79 = *v77;
      v78 = v77[1];
      v80 = v77[2];
      v81 = v73[2];
      v176 = v80;
      if (!v81)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v167 + 56))(v29, 1, 1, v166);
        sub_10001BBBC(v79, v78);
        swift_bridgeObjectRetain(v80);
LABEL_30:
        sub_100004048((uint64_t)v29, (uint64_t *)&unk_1010EDC50);
        sub_10001BBBC(v79, v78);
        swift_bridgeObjectRetain(v80);
        sub_10001BBBC(v79, v78);
        swift_bridgeObjectRetain(v80);
        v89 = Logger.logObject.getter(v88);
        v90 = static os_log_type_t.error.getter(v89);
        if (os_log_type_enabled(v89, v90))
        {
          v91 = swift_slowAlloc(12, -1);
          v92 = swift_slowAlloc(32, -1);
          v190 = (_QWORD *)v92;
          *(_DWORD *)v91 = v160.n128_u32[0];
          sub_10001BBBC(v79, v78);
          v93 = Data.description.getter(v79, v78);
          v95 = v94;
          sub_10001BC14(v79, v78);
          *(_QWORD *)(v91 + 4) = sub_100016940(v93, v95, (uint64_t *)&v190);
          v8 = v175;
          swift_bridgeObjectRelease();
          sub_10001BC14(v79, v78);
          swift_bridgeObjectRelease();
          sub_10001BC14(v79, v78);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "Location for unknown identifier: %s", (uint8_t *)v91, 0xCu);
          swift_arrayDestroy(v92, 1, v159);
          v96 = v92;
          isUniquelyReferenced_nonNull_native = v180;
          swift_slowDealloc(v96, -1, -1);
          swift_slowDealloc(v91, -1, -1);

          sub_10001BC14(v79, v78);
        }
        else
        {
          sub_10001BC14(v79, v78);
          swift_bridgeObjectRelease();
          sub_10001BC14(v79, v78);
          swift_bridgeObjectRelease();
          sub_10001BC14(v79, v78);

        }
        swift_bridgeObjectRelease();
        v73 = v177;
        v76 = v172;
        v29 = v168;
        goto LABEL_23;
      }
      sub_10001BBBC(v79, v78);
      swift_bridgeObjectRetain(v80);
      sub_10001BBBC(v79, v78);
      v169 = v79;
      v82 = sub_100519764(v79, v78);
      if ((v83 & 1) != 0)
      {
        v84 = v167;
        sub_10005972C(v73[7] + *(_QWORD *)(v167 + 72) * v82, (uint64_t)v29, type metadata accessor for LocalFindableAccessoryRecord);
        v85 = 0;
      }
      else
      {
        v85 = 1;
        v84 = v167;
      }
      v86 = v166;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56))(v29, v85, 1, v166);
      v79 = v169;
      sub_10001BC14(v169, v78);
      v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v84 + 48))(v29, 1, v86);
      v22 = v185;
      v80 = v176;
      if (v87 == 1)
        goto LABEL_30;
      v163 = v78;
      sub_1000126EC((uint64_t)v29, v185, type metadata accessor for LocalFindableAccessoryRecord);
      v97 = *(_QWORD *)(v80 + 16);
      if (v97)
      {
        v98 = *(_QWORD *)(type metadata accessor for DeviceEventEncodedInfo(0) - 8);
        v99 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
        v183 = *(_QWORD *)(v98 + 72);
        swift_bridgeObjectRetain(v80);
        v100 = v80 + v99;
        v22 = v185;
        v101 = (uint64_t *)(v100 + 8);
        v10 = (char *)_swiftEmptyArrayStorage;
        do
        {
          v29 = 0;
          sub_1008CA890(*(v101 - 1), *v101, v22, (uint64_t)v8);
          (*(void (**)(char *, _QWORD, uint64_t, char *))(isUniquelyReferenced_nonNull_native + 56))(v8, 0, 1, v184);
          v102 = v174;
          sub_1000126EC((uint64_t)v8, v174, type metadata accessor for DeviceEvent);
          sub_1000126EC(v102, v182, type metadata accessor for DeviceEvent);
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            v10 = (char *)sub_1007C98D4(0, *((_QWORD *)v10 + 2) + 1, 1, (unint64_t)v10);
          v104 = *((_QWORD *)v10 + 2);
          v103 = *((_QWORD *)v10 + 3);
          if (v104 >= v103 >> 1)
            v10 = (char *)sub_1007C98D4(v103 > 1, v104 + 1, 1, (unint64_t)v10);
          *((_QWORD *)v10 + 2) = v104 + 1;
          sub_1000126EC(v182, (uint64_t)&v10[((*(unsigned __int8 *)(isUniquelyReferenced_nonNull_native + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(isUniquelyReferenced_nonNull_native + 80))+ *(_QWORD *)(isUniquelyReferenced_nonNull_native + 72) * v104], type metadata accessor for DeviceEvent);
          v22 = v185;
          v101 = (uint64_t *)((char *)v101 + v183);
          --v97;
        }
        while (v97);
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = (char *)_swiftEmptyArrayStorage;
      }
      v43 = v184;
      v31 = (_QWORD *)*((_QWORD *)v10 + 2);
      v36 = v158;
      if (v31)
        break;
      v106 = 1;
      v105 = v157;
LABEL_46:
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(isUniquelyReferenced_nonNull_native + 56))(v105, v106, 1, v43);
      swift_bridgeObjectRelease();
      v107 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(isUniquelyReferenced_nonNull_native + 48))(v105, 1, v43);
      v36 = (uint64_t)v156;
      if (v107 == 1)
      {
        sub_10001BC14(v169, v163);
        swift_bridgeObjectRelease();
        sub_1000126B0(v22, type metadata accessor for LocalFindableAccessoryRecord);
        sub_100004048(v105, &qword_1010EF488);
      }
      else
      {
        v34 = (unint64_t)type metadata accessor for DeviceEvent;
        sub_1000126EC(v105, (uint64_t)v156, type metadata accessor for DeviceEvent);
        v108 = v192;
        if (!v192[2])
          goto LABEL_63;
        v109 = sub_100003FB0(v22);
        if ((v110 & 1) == 0)
          goto LABEL_63;
        v111 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 72);
        v112 = v151;
        sub_10005972C(v108[7] + v111 * v109, v151, type metadata accessor for DeviceEvent);
        v113 = v112;
        v114 = v153;
        sub_1000126EC(v113, v153, type metadata accessor for DeviceEvent);
        if ((static Date.< infix(_:_:)(v114 + *((int *)v184 + 6), v36 + *((int *)v184 + 6)) & 1) == 0)
        {
          sub_1000126B0(v114, type metadata accessor for DeviceEvent);
          v22 = v185;
LABEL_63:
          v10 = *(char **)(v161 + 16);
          v130 = v22;
          v131 = v162;
          ((void (*)(uint64_t, unint64_t, uint64_t))v10)(v162, v130, v173);
          sub_10005972C(v36, v155, type metadata accessor for DeviceEvent);
          v31 = v192;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v192);
          v190 = v31;
          v192 = (_QWORD *)0x8000000000000000;
          v22 = sub_100003FB0(v131);
          v133 = v31[2];
          v134 = (v132 & 1) == 0;
          v135 = v133 + v134;
          if (__OFADD__(v133, v134))
            goto LABEL_89;
          v34 = v132;
          if (v31[3] >= v135)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_100A9E328();
          }
          else
          {
            sub_100A8DC68(v135, isUniquelyReferenced_nonNull_native);
            v136 = sub_100003FB0(v162);
            if ((v34 & 1) != (v137 & 1))
              goto LABEL_95;
            v22 = v136;
          }
          isUniquelyReferenced_nonNull_native = v180;
          v31 = v190;
          if ((v34 & 1) != 0)
          {
            sub_10010FA18(v155, v190[7] + *(_QWORD *)(v180 + 72) * v22, type metadata accessor for DeviceEvent);
          }
          else
          {
            v190[(v22 >> 6) + 8] |= 1 << v22;
            ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v31[6] + *(_QWORD *)(v161 + 72) * v22, v162, v173);
            v138 = v31[7] + *(_QWORD *)(isUniquelyReferenced_nonNull_native + 72) * v22;
            v22 = (unint64_t)type metadata accessor for DeviceEvent;
            sub_1000126EC(v155, v138, type metadata accessor for DeviceEvent);
            v139 = v31[2];
            v71 = __OFADD__(v139, 1);
            v140 = v139 + 1;
            if (v71)
              goto LABEL_90;
            v31[2] = v140;
            v31 = v190;
          }
          v192 = v31;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v162, v173);
          sub_10001BC14(v169, v163);
          swift_bridgeObjectRelease();
          sub_1000126B0(v36, type metadata accessor for DeviceEvent);
          sub_1000126B0(v185, type metadata accessor for LocalFindableAccessoryRecord);
          v29 = v168;
          goto LABEL_74;
        }
        v115 = *(void (**)(uint64_t, unint64_t, uint64_t))(v161 + 16);
        v116 = v152;
        v115(v152, v185, v173);
        sub_10005972C(v36, v150, type metadata accessor for DeviceEvent);
        v117 = (uint64_t)v192;
        v118 = swift_isUniquelyReferenced_nonNull_native(v192);
        v190 = (_QWORD *)v117;
        v192 = (_QWORD *)0x8000000000000000;
        v120 = sub_100003FB0(v116);
        v121 = *(_QWORD *)(v117 + 16);
        v122 = (v119 & 1) == 0;
        v123 = v121 + v122;
        if (__OFADD__(v121, v122))
        {
          __break(1u);
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }
        v124 = v119;
        if (*(_QWORD *)(v117 + 24) >= v123)
        {
          if ((v118 & 1) == 0)
            sub_100A9E328();
        }
        else
        {
          sub_100A8DC68(v123, v118);
          v125 = sub_100003FB0(v152);
          if ((v124 & 1) != (v126 & 1))
            goto LABEL_95;
          v120 = v125;
        }
        isUniquelyReferenced_nonNull_native = v180;
        v141 = v190;
        if ((v124 & 1) != 0)
        {
          sub_10010FA18(v150, v190[7] + v120 * v111, type metadata accessor for DeviceEvent);
          v8 = v175;
          v142 = v185;
        }
        else
        {
          v190[(v120 >> 6) + 8] |= 1 << v120;
          v115(v141[6] + *(_QWORD *)(v161 + 72) * v120, v152, v173);
          sub_1000126EC(v150, v141[7] + v120 * v111, type metadata accessor for DeviceEvent);
          v143 = v141[2];
          v71 = __OFADD__(v143, 1);
          v144 = v143 + 1;
          if (v71)
            goto LABEL_93;
          v141[2] = v144;
          v141 = v190;
          v8 = v175;
          v142 = v185;
        }
        v192 = v141;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v152, v173);
        sub_10001BC14(v169, v163);
        swift_bridgeObjectRelease();
        sub_1000126B0(v153, type metadata accessor for DeviceEvent);
        sub_1000126B0(v36, type metadata accessor for DeviceEvent);
        sub_1000126B0(v142, type metadata accessor for LocalFindableAccessoryRecord);
      }
      v29 = v168;
LABEL_74:
      v73 = v177;
      v76 = v172;
LABEL_23:
      v75 = v76 + 1;
      if (v75 == v165)
      {
        swift_bridgeObjectRelease();
        goto LABEL_83;
      }
    }
    v186 = &v10[(*(unsigned __int8 *)(isUniquelyReferenced_nonNull_native + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(isUniquelyReferenced_nonNull_native + 80)];
    sub_10005972C((uint64_t)v186, (uint64_t)v178, type metadata accessor for DeviceEvent);
    swift_bridgeObjectRetain(v10);
    if (v31 == (_QWORD *)1)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      v105 = v157;
      sub_1000126EC((uint64_t)v178, v157, type metadata accessor for DeviceEvent);
      v106 = 0;
      v22 = v185;
      goto LABEL_46;
    }
    v34 = 1;
    while (v34 < *((_QWORD *)v10 + 2))
    {
      v29 = v10;
      v22 = (unint64_t)v8;
      sub_10005972C((uint64_t)&v186[*(_QWORD *)(isUniquelyReferenced_nonNull_native + 72) * v34], v36, type metadata accessor for DeviceEvent);
      v127 = v43;
      v128 = *((int *)v43 + 6);
      v129 = (uint64_t)v178;
      if ((static Date.< infix(_:_:)(&v178[v128], v36 + v128) & 1) != 0)
      {
        sub_1000126B0(v129, type metadata accessor for DeviceEvent);
        sub_1000126EC(v36, v129, type metadata accessor for DeviceEvent);
      }
      else
      {
        sub_1000126B0(v36, type metadata accessor for DeviceEvent);
      }
      ++v34;
      v43 = v127;
      v10 = v29;
      if (v31 == (_QWORD *)v34)
        goto LABEL_44;
    }
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    swift_once(&qword_1010E9FF0, sub_1008C6074);
  }
  v170.n128_u64[0] = (unint64_t)v43;
  v51 = v165 + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80));
  v36 = *(_QWORD *)(v167 + 72);
  LODWORD(v169) = enum case for HashAlgorithm.sha256(_:);
  swift_bridgeObjectRetain(v165);
  v177 = _swiftEmptyDictionarySingleton;
  v10 = (char *)type metadata accessor for LocalFindableAccessoryRecord;
  v43 = v179;
  while (1)
  {
    v186 = (char *)v50;
    v183 = v51;
    v52 = sub_10005972C(v51, (uint64_t)v43, (uint64_t (*)(_QWORD))v10);
    v53 = UUID.data.getter(v52);
    v55 = v54;
    v56 = v172;
    v57 = v171;
    v58 = v176;
    (*(void (**)(char *, _QWORD, uint64_t))(v172 + 104))(v171, v169, v176);
    v29 = (char *)Data.hash(algorithm:)(v57, v53, v55);
    v8 = v59;
    sub_10001BC14(v53, v55);
    v60 = v57;
    v43 = v179;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v60, v58);
    isUniquelyReferenced_nonNull_native = v170.n128_u64[0];
    v22 = (unint64_t)v10;
    sub_10005972C((uint64_t)v43, v170.n128_i64[0], (uint64_t (*)(_QWORD))v10);
    v31 = v177;
    v34 = swift_isUniquelyReferenced_nonNull_native(v177);
    v190 = v31;
    v62 = sub_100519764((uint64_t)v29, (uint64_t)v8);
    v63 = v31[2];
    v64 = (v61 & 1) == 0;
    v65 = v63 + v64;
    if (__OFADD__(v63, v64))
      goto LABEL_87;
    v66 = v61;
    if (v31[3] >= v65)
    {
      if ((v34 & 1) == 0)
        sub_100A9E600();
      goto LABEL_14;
    }
    sub_100A8E074(v65, v34);
    v67 = sub_100519764((uint64_t)v29, (uint64_t)v8);
    if ((v66 & 1) != (v68 & 1))
      break;
    v62 = v67;
LABEL_14:
    v34 = (unint64_t)v187;
    v31 = v190;
    v177 = v190;
    if ((v66 & 1) != 0)
    {
      v10 = (char *)v22;
      sub_10010FA18(isUniquelyReferenced_nonNull_native, v190[7] + v62 * v36, (uint64_t (*)(_QWORD))v22);
    }
    else
    {
      v190[(v62 >> 6) + 8] |= 1 << v62;
      v69 = (char **)(v31[6] + 16 * v62);
      *v69 = v29;
      v69[1] = v8;
      v10 = (char *)v22;
      sub_1000126EC(isUniquelyReferenced_nonNull_native, v31[7] + v62 * v36, (uint64_t (*)(_QWORD))v22);
      v70 = v31[2];
      v71 = __OFADD__(v70, 1);
      v72 = v70 + 1;
      if (v71)
        goto LABEL_88;
      v31[2] = v72;
      sub_10001BBBC((uint64_t)v29, (unint64_t)v8);
    }
    swift_bridgeObjectRelease();
    sub_10001BC14((uint64_t)v29, (unint64_t)v8);
    sub_1000126B0((uint64_t)v43, (uint64_t (*)(_QWORD))v10);
    v51 = v183 + v36;
    v50 = (uint64_t)(v186 - 1);
    if (v186 == (char *)1)
    {
      swift_bridgeObjectRelease();
      v8 = v175;
      isUniquelyReferenced_nonNull_native = v180;
      v73 = v177;
      goto LABEL_19;
    }
  }
LABEL_94:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
LABEL_95:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v173);
  __break(1u);
  return result;
}

uint64_t sub_1008CA890@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  _OWORD *v60;
  _BYTE *v61;
  uint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uid_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  _BYTE *v83;
  int *v84;
  void (*v85)(uint64_t, _BYTE *, uint64_t);
  _BYTE v86[4];
  int v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[4];
  uint64_t v118;

  v110 = a3;
  v111 = a1;
  v112 = a2;
  v93 = a4;
  v104 = type metadata accessor for Date(0);
  v103 = *(_QWORD *)(v104 - 8);
  v4 = __chkstk_darwin(v104);
  v109 = &v86[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v107 = &v86[-v6];
  v95 = type metadata accessor for BeaconIdentifier(0);
  v7 = __chkstk_darwin(v95);
  v108 = &v86[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v96 = &v86[-v9];
  v10 = sub_10001A9A8(&qword_1010F9158);
  __chkstk_darwin(v10);
  v92 = &v86[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v101 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v91 = &v86[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_10001A9A8(&qword_1010EF480);
  v14 = __chkstk_darwin(v13);
  v106 = &v86[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v94 = &v86[-v16];
  v17 = sub_10001A9A8(&qword_1010F9150);
  __chkstk_darwin(v17);
  v97 = &v86[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v99 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  v98 = *(_QWORD *)(v99 - 8);
  v19 = __chkstk_darwin(v99);
  v90 = &v86[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v89 = &v86[-v21];
  v22 = sub_10001A9A8(&qword_1011003F0);
  v23 = __chkstk_darwin(v22);
  v102 = &v86[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  v105 = &v86[-v25];
  v26 = type metadata accessor for DeviceEventFormat(0);
  __chkstk_darwin(v26);
  v28 = &v86[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = type metadata accessor for P256PublicKey(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = &v86[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = &v86[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = type metadata accessor for JSONDecoder(0);
  v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v39 = JSONDecoder.init()(v38);
  *v36 = sub_1008C9240;
  v36[1] = 0;
  v40 = v39;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v34 + 104))(v36, enum case for JSONDecoder.DateDecodingStrategy.custom(_:), v33);
  dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v36);
  v41 = sub_1008CB308();
  v42 = v118;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for DeviceEventEncryptAndSignEnvelope, v111, v112, &type metadata for DeviceEventEncryptAndSignEnvelope, v41);
  if (v42)
    return swift_release();
  v112 = v26;
  v118 = v40;
  v43 = (uint64_t)v28;
  v117[0] = v113;
  v117[1] = v114;
  v117[2] = v115;
  v117[3] = v116;
  v44 = v110 + *(int *)(type metadata accessor for LocalFindableAccessoryRecord(0) + 60);
  P256PrivateKey.publicKey.getter();
  v45 = sub_1008CB34C(v117, v44);
  v48 = v47;
  v49 = (uint64_t)v45;
  (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v32, v29);
  v50 = sub_100006204(&qword_10110C080, type metadata accessor for DeviceEventFormat, (uint64_t)&unk_100E39978);
  v51 = (uint64_t)v28;
  v52 = v112;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v112, v49, v48, v112, v50);
  v88 = v49;
  v111 = v48;
  v53 = byte_100E534CA[*(char *)(v43 + *(int *)(v52 + 24))];
  v54 = v97;
  sub_10000F9B8(v43, (uint64_t)v97, &qword_1010F9150);
  v55 = v99;
  v56 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v98 + 48))(v54, 1, v99);
  v87 = v53;
  if (v56 == 1)
  {
    sub_100004048((uint64_t)v54, &qword_1010F9150);
    v57 = type metadata accessor for DeviceEvent.Location(0);
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v105, 1, 1, v57);
  }
  else
  {
    v58 = v89;
    sub_1000126EC((uint64_t)v54, (uint64_t)v89, type metadata accessor for DeviceEventFormat.LocationFormat);
    v59 = v90;
    sub_1000126EC((uint64_t)v58, (uint64_t)v90, type metadata accessor for DeviceEventFormat.LocationFormat);
    v60 = v105;
    *v105 = *(_OWORD *)v59;
    *((_QWORD *)v60 + 2) = *((_QWORD *)v59 + 2);
    v61 = &v59[*(int *)(v55 + 28)];
    v62 = type metadata accessor for DeviceEvent.Location(0);
    (*(void (**)(char *, _BYTE *, uint64_t))(v103 + 32))((char *)v60 + *(int *)(v62 + 28), v61, v104);
    v63 = v60;
    v51 = v43;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v63, 0, 1, v62);
  }
  v64 = v93;
  v65 = v96;
  v66 = v110;
  v67 = v95;
  v68 = (uint64_t)v94;
  v69 = v92;
  sub_10000F9B8(v51 + *(int *)(v112 + 20), (uint64_t)v92, &qword_1010F9158);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v100 + 48))(v69, 1, v101) == 1)
  {
    sub_100004048((uint64_t)v69, &qword_1010F9158);
    v70 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v68, 1, 1, v70);
  }
  else
  {
    v71 = (uint64_t)v69;
    v72 = v91;
    sub_1000126EC(v71, (uint64_t)v91, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
    v73 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v68, v72, v73);
    v74 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v68, 0, 1, v74);
  }
  v75 = v103;
  v76 = getuid();
  sub_100A06500(v76);
  v77 = *(int *)(v67 + 20);
  v78 = (uint64_t)v65;
  v79 = &v65[v77];
  v80 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v79, v66, v80);
  v81 = v104;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v75 + 16))(v107, v51 + *(int *)(v112 + 28), v104);
  v112 = v51;
  v82 = v105;
  v83 = v102;
  sub_10000F9B8((uint64_t)v105, (uint64_t)v102, &qword_1011003F0);
  sub_10000F9B8(v68, (uint64_t)v106, &qword_1010EF480);
  sub_10005972C(v78, (uint64_t)v108, type metadata accessor for BeaconIdentifier);
  static Date.trustedNow.getter((uint64_t)v109);
  sub_10001BC14(v88, v111);
  sub_1008CBA4C((uint64_t *)v117);
  swift_release();
  sub_1000126B0(v78, type metadata accessor for BeaconIdentifier);
  sub_100004048(v68, &qword_1010EF480);
  sub_100004048((uint64_t)v82, &qword_1011003F0);
  sub_1000126B0(v112, type metadata accessor for DeviceEventFormat);
  *(_QWORD *)v64 = 0;
  *(_BYTE *)(v64 + 8) = 1;
  *(_BYTE *)(v64 + 9) = v87;
  v84 = (int *)type metadata accessor for DeviceEvent(0);
  v85 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v75 + 32);
  v85(v64 + v84[6], v107, v81);
  sub_100005CF0((uint64_t)v83, v64 + v84[7], &qword_1011003F0);
  sub_100005CF0((uint64_t)v106, v64 + v84[8], &qword_1010EF480);
  sub_1000126EC((uint64_t)v108, v64 + v84[9], type metadata accessor for BeaconIdentifier);
  return ((uint64_t (*)(uint64_t, _BYTE *, uint64_t))v85)(v64 + v84[10], v109, v81);
}

uint64_t type metadata accessor for PencilLocationsFetcher()
{
  return objc_opt_self(_TtC12searchpartyd22PencilLocationsFetcher);
}

uint64_t sub_1008CB228()
{
  return sub_100006204(&qword_10110C070, type metadata accessor for DeviceEvent, (uint64_t)&unk_100E5F018);
}

_QWORD *sub_1008CB254(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  double v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = a1[3];
  v3 = a1[4];
  sub_10001AA44(a1, v2);
  result = dispatch thunk of Decoder.singleValueContainer()(v8, v2, v3);
  if (!v1)
  {
    v5 = v9;
    v6 = v10;
    sub_10001AA44(v8, v9);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5, v6);
    Date.init(timeIntervalSince1970:)(v7 / 1000.0);
    return (_QWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  }
  return result;
}

unint64_t sub_1008CB308()
{
  unint64_t result;

  result = qword_10110C078;
  if (!qword_10110C078)
  {
    result = swift_getWitnessTable(byte_100E399A0, &type metadata for DeviceEventEncryptAndSignEnvelope);
    atomic_store(result, (unint64_t *)&qword_10110C078);
  }
  return result;
}

char *sub_1008CB34C(_OWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint8_t *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v75 = a2;
  v79 = a1;
  v2 = type metadata accessor for AES.GCM.Nonce(0);
  __chkstk_darwin(v2);
  v76 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AES.GCM.SealedBox(0);
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  __chkstk_darwin(v4);
  v74 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SymmetricKey(0);
  v77 = *(_QWORD *)(v6 - 8);
  v78 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for P256.Signing.ECDSASignature(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for P256.Signing.PublicKey(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for P256PublicKey(0);
  v18 = sub_100006204(&qword_10110C088, (uint64_t (*)(uint64_t))&type metadata accessor for P256PublicKey, (uint64_t)&protocol conformance descriptor for P256PublicKey);
  *(_QWORD *)&v81 = KeyRepresenting.rawValue.getter(v17, v18);
  *((_QWORD *)&v81 + 1) = v19;
  v20 = v84;
  P256.Signing.PublicKey.init<A>(rawRepresentation:)(&v81, &type metadata for Data, &protocol witness table for Data);
  if (!v20)
  {
    v68 = v8;
    v69 = v9;
    v70 = v10;
    v71 = v16;
    v84 = v14;
    v21 = v79;
    v83 = *v79;
    v81 = *v79;
    sub_100059DE8((uint64_t)&v83);
    v22 = sub_100035530();
    P256.Signing.ECDSASignature.init<A>(rawRepresentation:)(&v81, &type metadata for Data, v22);
    v23 = v12;
    v67 = v13;
    v82 = v21[3];
    v24 = *((_QWORD *)v21 + 2);
    v25 = *((_QWORD *)v21 + 3);
    v80 = v82;
    sub_100059DE8((uint64_t)&v82);
    sub_100059DE8((uint64_t)&v82);
    sub_10001BBBC(v24, v25);
    sub_10078E27C(v24, v25);
    v66 = v24;
    v65 = v25;
    sub_10001BC14(v24, v25);
    sub_1000ADA04((uint64_t)&v82);
    v26 = v80;
    v28 = *((_QWORD *)v21 + 4);
    v27 = *((_QWORD *)v21 + 5);
    v81 = v80;
    sub_10001BBBC(v28, v27);
    sub_10001BBBC(v26, *((unint64_t *)&v26 + 1));
    sub_10078E27C(v28, v27);
    v64 = v28;
    sub_10001BC14(v28, v27);
    sub_10001BC14(v26, *((unint64_t *)&v26 + 1));
    v30 = (_OWORD *)*((_QWORD *)&v81 + 1);
    v29 = v81;
    v31 = v71;
    if ((P256.Signing.PublicKey.isValidSignature<A>(_:for:)(v23, &v81, &type metadata for Data, v22) & 1) != 0)
    {
      v63 = v29;
      v32 = type metadata accessor for SymmetricKey256(0);
      v33 = sub_100006204(&qword_1010EDA78, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey256, (uint64_t)&protocol conformance descriptor for SymmetricKey256);
      *(_QWORD *)&v81 = KeyRepresenting.rawValue.getter(v32, v33);
      *((_QWORD *)&v81 + 1) = v34;
      v35 = v68;
      SymmetricKey.init<A>(data:)(&v81, &type metadata for Data, &protocol witness table for Data);
      v81 = v82;
      sub_100059DE8((uint64_t)&v82);
      v36 = v76;
      v37 = v22;
      AES.GCM.Nonce.init<A>(data:)(&v81, &type metadata for Data, v22);
      v38 = v70;
      v79 = v30;
      *(_QWORD *)&v81 = v66;
      *((_QWORD *)&v81 + 1) = v65;
      v55 = v64;
      *(_QWORD *)&v80 = v64;
      *((_QWORD *)&v80 + 1) = v27;
      sub_10001BBBC(v66, v65);
      sub_10001BBBC(v55, v27);
      v56 = v74;
      AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)(v36, &v81, &v80, &type metadata for Data, &type metadata for Data, v37, v37);
      v57 = v67;
      v59 = v77;
      v58 = v78;
      v60 = static AES.GCM.open(_:using:)(v56, v35);
      v61 = v71;
      v12 = (char *)v60;
      sub_10001BC14(v63, (unint64_t)v79);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v73);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v68, v58);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v69);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v61, v57);
    }
    else
    {
      v79 = v30;
      if (qword_1010E9FF0 != -1)
        swift_once(&qword_1010E9FF0, sub_1008C6074);
      v39 = type metadata accessor for Logger(0);
      v40 = sub_10001A9E8(v39, (uint64_t)qword_10110BF88);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter(v41);
      v43 = os_log_type_enabled(v41, v42);
      v44 = v67;
      v45 = v84;
      v46 = v69;
      if (v43)
      {
        v47 = v29;
        v48 = v23;
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Invalid ECDSASignature", v49, 2u);
        v50 = v49;
        v23 = v48;
        v29 = v47;
        swift_slowDealloc(v50, -1, -1);
      }

      v12 = (char *)type metadata accessor for CryptoError(0);
      v51 = sub_100006204(&qword_10110C090, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
      swift_allocError(v12, v51, 0, 0);
      v53 = (*(uint64_t (**)(uint64_t, _QWORD, char *))(*((_QWORD *)v12 - 1) + 104))(v52, enum case for CryptoError.invalidSignature(_:), v12);
      swift_willThrow(v53);
      sub_10001BC14(v29, (unint64_t)v79);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v23, v46);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v31, v44);
    }
  }
  return v12;
}

uint64_t *sub_1008CBA4C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  return a1;
}

unint64_t sub_1008CBAC0()
{
  unint64_t result;

  result = qword_10110C0A0;
  if (!qword_10110C0A0)
  {
    result = swift_getWitnessTable(byte_100E53488, &type metadata for PencilLocationsFetcher.Error);
    atomic_store(result, (unint64_t *)&qword_10110C0A0);
  }
  return result;
}

unint64_t sub_1008CBB04()
{
  unint64_t result;

  result = qword_10110C0A8;
  if (!qword_10110C0A8)
  {
    result = swift_getWitnessTable(byte_100E65054, &type metadata for PencilSecureLocationFetchResponse);
    atomic_store(result, (unint64_t *)&qword_10110C0A8);
  }
  return result;
}

uint64_t sub_1008CBB48()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;

  v1 = (int *)type metadata accessor for DeviceEvent(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  v6 = v0 + v4;
  v7 = v0 + v4 + v1[6];
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v0 + v4 + v1[7];
  v11 = type metadata accessor for DeviceEvent.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    v9(v10 + *(int *)(v11 + 28), v8);
  v12 = v6 + v1[8];
  v13 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  v15 = v3 | 7;
  v16 = v4 + v5;
  v17 = v6 + v1[9];
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v20 = type metadata accessor for BeaconIdentifier(0);
  v19(v17 + *(int *)(v20 + 20), v18);
  v9(v6 + v1[10], v8);
  return swift_deallocObject(v0, v16, v15);
}

uint64_t sub_1008CBCC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DeviceEvent(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10111BB14);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004C28;
  return sub_100C68DFC(a1, v5, v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for PencilLocationsFetcher.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1008CBDA8 + 4 * byte_100E53375[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1008CBDDC + 4 * byte_100E53370[v4]))();
}

uint64_t sub_1008CBDDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008CBDE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008CBDECLL);
  return result;
}

uint64_t sub_1008CBDF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008CBE00);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1008CBE04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008CBE0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilLocationsFetcher.Error()
{
  return &type metadata for PencilLocationsFetcher.Error;
}

unint64_t sub_1008CBE2C()
{
  unint64_t result;

  result = qword_10110C0B8;
  if (!qword_10110C0B8)
  {
    result = swift_getWitnessTable(byte_100E53460, &type metadata for PencilLocationsFetcher.Error);
    atomic_store(result, (unint64_t *)&qword_10110C0B8);
  }
  return result;
}

uint64_t sub_1008CBE70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1010FA368);
  unsafeFromAsyncTask<A>(_:)(&unk_10110C0F0, 0, v4);
  v5 = v16;
  v6 = qword_1010E9FF8;
  swift_bridgeObjectRetain(v16);
  if (v6 != -1)
    v7 = swift_once(&qword_1010E9FF8, sub_1008CC198);
  __chkstk_darwin(v7);
  v14 = v16;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1008C2DF8, v13, v8, &type metadata for () + 1, &type metadata for () + 1);
  sub_1000FE214(v5, 0);
  v9 = sub_1000FE214(v5, 0);
  if (qword_1010E9FF8 != -1)
    v9 = swift_once(&qword_1010E9FF8, sub_1008CC198);
  v10 = qword_10110C0C0;
  __chkstk_darwin(v9);
  v14 = a1;
  v15 = a2;
  v11 = sub_10001A9A8(&qword_1010F6350);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1008CD5E0, v13, v10, &type metadata for () + 1, v11);
  return v16;
}

uint64_t sub_1008CC004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1010FA368);
  unsafeFromAsyncTask<A>(_:)(&unk_10110C0F0, 0, v4);
  v5 = v16;
  v6 = qword_1010E9FF8;
  swift_bridgeObjectRetain(v16);
  if (v6 != -1)
    v7 = swift_once(&qword_1010E9FF8, sub_1008CC198);
  __chkstk_darwin(v7);
  v14 = v16;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D6408, v13, v8, &type metadata for () + 1, &type metadata for () + 1);
  sub_1000FE214(v5, 0);
  v9 = sub_1000FE214(v5, 0);
  if (qword_1010E9FF8 != -1)
    v9 = swift_once(&qword_1010E9FF8, sub_1008CC198);
  v10 = qword_10110C0C0;
  __chkstk_darwin(v9);
  v14 = a1;
  v15 = a2;
  v11 = sub_10001A9A8(&qword_1011063B0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1008CD5C8, v13, v10, &type metadata for () + 1, v11);
  return v16;
}

uint64_t sub_1008CC198()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10001A9A8(&qword_1010FAAF0);
  result = swift_allocObject(v0, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  qword_10110C0C0 = result;
  return result;
}

void sub_1008CC1CC()
{
  off_10110C0C8 = &_swiftEmptyDictionarySingleton;
}

void sub_1008CC1E0()
{
  off_10110C0D0 = &_swiftEmptyDictionarySingleton;
}

void sub_1008CC1F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t i;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  int64_t v26;
  _QWORD v27[3];
  void *v28;

  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 56);
  v24 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  if (!v3)
    goto LABEL_5;
LABEL_4:
  v5 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v26 = v4;
  for (i = v5 | (v4 << 6); ; i = __clz(__rbit64(v8)) + (v9 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 40 * i);
    v12 = *v11;
    v13 = v11[1];
    v15 = v11[2];
    v14 = v11[3];
    v16 = v11[4];
    v17 = qword_1010EA000;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    if (v17 != -1)
      swift_once(&qword_1010EA000, sub_1008CC1CC);
    swift_beginAccess(&off_10110C0C8, v27, 33, 0);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_10110C0C8);
    v28 = off_10110C0C8;
    off_10110C0C8 = (_UNKNOWN *)0x8000000000000000;
    sub_100109D28(v12, v13, v14, v16, isUniquelyReferenced_nonNull_native);
    off_10110C0C8 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v27);
    if (qword_1010EA008 != -1)
      swift_once(&qword_1010EA008, sub_1008CC1E0);
    v19 = sub_10001A9A8(&qword_101106C20);
    v20 = swift_allocObject(v19, 48, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v20 + 32) = v12;
    *(_QWORD *)(v20 + 40) = v13;
    v27[0] = v20;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    sub_100302314(v15);
    v21 = v27[0];
    swift_beginAccess(&off_10110C0D0, v27, 33, 0);
    v22 = swift_isUniquelyReferenced_nonNull_native(off_10110C0D0);
    v28 = off_10110C0D0;
    off_10110C0D0 = (_UNKNOWN *)0x8000000000000000;
    sub_10010DDF8(v21, v14, v16, v22);
    off_10110C0D0 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v26;
    if (v3)
      goto LABEL_4;
LABEL_5:
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v7 >= v24)
      goto LABEL_25;
    v8 = *(_QWORD *)(v23 + 8 * v7);
    v9 = v4 + 1;
    if (!v8)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v24)
        goto LABEL_25;
      v8 = *(_QWORD *)(v23 + 8 * v9);
      if (!v8)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v24)
          goto LABEL_25;
        v8 = *(_QWORD *)(v23 + 8 * v9);
        if (!v8)
          break;
      }
    }
LABEL_18:
    v3 = (v8 - 1) & v8;
    v26 = v9;
  }
  v10 = v4 + 4;
  if (v4 + 4 >= v24)
  {
LABEL_25:
    swift_release();
    return;
  }
  v8 = *(_QWORD *)(v23 + 8 * v10);
  if (v8)
  {
    v9 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v9 >= v24)
      goto LABEL_25;
    v8 = *(_QWORD *)(v23 + 8 * v9);
    ++v10;
    if (v8)
      goto LABEL_18;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1008CC55C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  if (qword_1010EA000 != -1)
    swift_once(&qword_1010EA000, sub_1008CC1CC);
  swift_beginAccess(&off_10110C0C8, v13, 32, 0);
  v6 = off_10110C0C8;
  if (*((_QWORD *)off_10110C0C8 + 2))
  {
    swift_bridgeObjectRetain(a2);
    v7 = sub_100518DA0(a1, a2);
    if ((v8 & 1) != 0)
    {
      v9 = (uint64_t *)(v6[7] + 16 * v7);
      v11 = *v9;
      v10 = v9[1];
      swift_bridgeObjectRetain(v10);
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  *a3 = v11;
  a3[1] = v10;
  return swift_endAccess(v13);
}

uint64_t sub_1008CC648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t result;
  _BYTE v11[24];

  if (qword_1010EA008 != -1)
    swift_once(&qword_1010EA008, sub_1008CC1E0);
  swift_beginAccess(&off_10110C0D0, v11, 32, 0);
  v6 = off_10110C0D0;
  if (!*((_QWORD *)off_10110C0D0 + 2))
    goto LABEL_7;
  swift_bridgeObjectRetain(a2);
  v7 = sub_100518DA0(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    result = swift_endAccess(v11);
    v9 = _swiftEmptyArrayStorage;
    goto LABEL_8;
  }
  v9 = *(_QWORD **)(v6[7] + 8 * v7);
  swift_endAccess(v11);
  swift_bridgeObjectRetain(v9);
  result = swift_bridgeObjectRelease();
LABEL_8:
  *a3 = v9;
  return result;
}

uint64_t sub_1008CC734()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10001A9A8(&qword_1010FAAF0);
  result = swift_allocObject(v0, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  qword_10110C0D8 = result;
  return result;
}

void sub_1008CC768()
{
  qword_10110C0E0 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

void sub_1008CC77C()
{
  qword_10110C0E8 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

void sub_1008CC790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t i;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  int64_t v26;
  _QWORD v27[3];
  uint64_t v28;

  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 56);
  v24 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  if (!v3)
    goto LABEL_5;
LABEL_4:
  v5 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v26 = v4;
  for (i = v5 | (v4 << 6); ; i = __clz(__rbit64(v8)) + (v9 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 40 * i);
    v12 = *v11;
    v13 = v11[1];
    v15 = v11[2];
    v14 = v11[3];
    v16 = v11[4];
    v17 = qword_1010EA018;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    if (v17 != -1)
      swift_once(&qword_1010EA018, sub_1008CC768);
    swift_beginAccess(&qword_10110C0E0, v27, 33, 0);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(qword_10110C0E0);
    v28 = qword_10110C0E0;
    qword_10110C0E0 = 0x8000000000000000;
    sub_100109D28(v12, v13, v14, v16, isUniquelyReferenced_nonNull_native);
    qword_10110C0E0 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v27);
    if (qword_1010EA020 != -1)
      swift_once(&qword_1010EA020, sub_1008CC77C);
    v19 = sub_10001A9A8(&qword_101106C20);
    v20 = swift_allocObject(v19, 48, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v20 + 32) = v12;
    *(_QWORD *)(v20 + 40) = v13;
    v27[0] = v20;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    sub_100302314(v15);
    v21 = v27[0];
    swift_beginAccess(&qword_10110C0E8, v27, 33, 0);
    v22 = swift_isUniquelyReferenced_nonNull_native(qword_10110C0E8);
    v28 = qword_10110C0E8;
    qword_10110C0E8 = 0x8000000000000000;
    sub_10010DDF8(v21, v14, v16, v22);
    qword_10110C0E8 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v26;
    if (v3)
      goto LABEL_4;
LABEL_5:
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v7 >= v24)
      goto LABEL_25;
    v8 = *(_QWORD *)(v23 + 8 * v7);
    v9 = v4 + 1;
    if (!v8)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v24)
        goto LABEL_25;
      v8 = *(_QWORD *)(v23 + 8 * v9);
      if (!v8)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v24)
          goto LABEL_25;
        v8 = *(_QWORD *)(v23 + 8 * v9);
        if (!v8)
          break;
      }
    }
LABEL_18:
    v3 = (v8 - 1) & v8;
    v26 = v9;
  }
  v10 = v4 + 4;
  if (v4 + 4 >= v24)
  {
LABEL_25:
    swift_release();
    return;
  }
  v8 = *(_QWORD *)(v23 + 8 * v10);
  if (v8)
  {
    v9 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v9 >= v24)
      goto LABEL_25;
    v8 = *(_QWORD *)(v23 + 8 * v9);
    ++v10;
    if (v8)
      goto LABEL_18;
  }
LABEL_27:
  __break(1u);
}

Swift::Int sub_1008CCAF8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[9];

  v1 = v0;
  v2 = *v0;
  v3 = v1[1];
  v4 = v1[2];
  Hasher.init(_seed:)(v10);
  String.hash(into:)(v10, v2, v3);
  v5 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v6 = (_QWORD *)(v4 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      String.hash(into:)(v10, v7, v8);
      swift_bridgeObjectRelease(v8);
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  String.hash(into:)(v10, v1[3], v1[4]);
  return Hasher._finalize()();
}

uint64_t sub_1008CCBB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  String.hash(into:)(a1, *v1, v1[1]);
  v6 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    v7 = (_QWORD *)(v4 + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      swift_bridgeObjectRetain(*v7);
      String.hash(into:)(a1, v8, v9);
      swift_bridgeObjectRelease(v9);
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  return String.hash(into:)(a1, v3, v5);
}

Swift::Int sub_1008CCC48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)(v11);
  String.hash(into:)(v11, v1, v2);
  v6 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    v7 = (_QWORD *)(v4 + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      swift_bridgeObjectRetain(*v7);
      String.hash(into:)(v11, v8, v9);
      swift_bridgeObjectRelease(v9);
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  String.hash(into:)(v11, v3, v5);
  return Hasher._finalize()();
}

uint64_t sub_1008CCCFC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_1008CD53C((uint64_t *)v5, (uint64_t)v7) & 1;
}

uint64_t sub_1008CCD44(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1[2] = a1;
  v2 = type metadata accessor for Handle(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  v5 = type metadata accessor for Friend(0);
  v1[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v7);
  v1[10] = swift_task_alloc(v7);
  v8 = type metadata accessor for ClientOrigin(0);
  v1[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[12] = v9;
  v1[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RequestOrigin(0);
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008CCE34, 0, 0);
}

uint64_t sub_1008CCE34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[13];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[12] + 104))(v1, enum case for ClientOrigin.other(_:), v0[11]);
  RequestOrigin.init(_:)(v1);
  v2 = type metadata accessor for Session(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
  v0[15] = v3;
  *v3 = v0;
  v3[1] = sub_1008CCEC8;
  return Session.init(_:)(v0[14]);
}

uint64_t sub_1008CCEC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 120);
  v6 = *v1;
  *(_QWORD *)(v6 + 128) = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Session.friendsFollowingMyLocation()[1]);
  *(_QWORD *)(v6 + 136) = v4;
  *v4 = v6;
  v4[1] = sub_1008CCF34;
  return Session.friendsFollowingMyLocation()();
}

uint64_t sub_1008CCF34(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 136);
  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1008CD258;
  }
  else
  {
    swift_release();
    v5 = sub_1008CCFA8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1008CCFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  _QWORD *v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void (*v43)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 64);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v44 = *(_QWORD *)(v3 + 72);
    v45 = *(_QWORD *)(v0 + 32);
    v46 = v3;
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    v5 = swift_bridgeObjectRetain(v1);
    v6 = _swiftEmptyArrayStorage;
    do
    {
      v52 = v6;
      v9 = *(_QWORD *)(v0 + 72);
      v8 = *(_QWORD *)(v0 + 80);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 24);
      v43(v8, v4, v10, v5);
      v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v43)(v9, v8, v10);
      v14 = Friend.handle.getter(v13);
      v15 = Handle.serverID.getter(v14);
      v17 = v16;
      v18 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8);
      v19 = v18(v11, v12);
      v20 = *(_QWORD *)(v0 + 72);
      v21 = *(_QWORD *)(v0 + 80);
      v22 = *(_QWORD *)(v0 + 56);
      if (v17)
      {
        v50 = v17;
        v51 = v15;
        v23 = *(_QWORD *)(v0 + 40);
        v24 = *(_QWORD *)(v0 + 24);
        v25 = Friend.handle.getter(v19);
        v26 = Handle.identifier.getter(v25);
        v48 = v27;
        v49 = v26;
        v28 = v18(v23, v24);
        v29 = Friend.handle.getter(v28);
        v47 = Handle.siblingIdentifiers.getter(v29);
        v30 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
        v30(v20, v22);
        v18(v23, v24);
        v30(v21, v22);
        v6 = v52;
        if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
          v6 = sub_1007CA57C(0, v52[2] + 1, 1, v52);
        v32 = v6[2];
        v31 = v6[3];
        if (v32 >= v31 >> 1)
          v6 = sub_1007CA57C((_QWORD *)(v31 > 1), v32 + 1, 1, v6);
        v6[2] = v32 + 1;
        v33 = &v6[5 * v32];
        v33[4] = v49;
        v33[5] = v48;
        v33[6] = v47;
        v33[7] = v51;
        v33[8] = v50;
      }
      else
      {
        v7 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
        v7(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
        v7(v21, v22);
        v6 = v52;
      }
      v4 += v44;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 144), 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = _swiftEmptyArrayStorage;
  }
  v35 = *(_QWORD *)(v0 + 104);
  v34 = *(_QWORD *)(v0 + 112);
  v37 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 80);
  v39 = *(_QWORD *)(v0 + 40);
  v38 = *(_QWORD *)(v0 + 48);
  v40 = *(uint64_t **)(v0 + 16);
  v41 = sub_100CA912C((uint64_t)v6);
  swift_bridgeObjectRelease();
  *v40 = v41;
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008CD258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008CD2D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1[2] = a1;
  v2 = type metadata accessor for Handle(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  v5 = type metadata accessor for Friend(0);
  v1[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v7);
  v1[10] = swift_task_alloc(v7);
  v8 = type metadata accessor for ClientOrigin(0);
  v1[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[12] = v9;
  v1[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RequestOrigin(0);
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008CD3C8, 0, 0);
}

uint64_t sub_1008CD3C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[13];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[12] + 104))(v1, enum case for ClientOrigin.other(_:), v0[11]);
  RequestOrigin.init(_:)(v1);
  v2 = type metadata accessor for Session(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
  v0[15] = v3;
  *v3 = v0;
  v3[1] = sub_1008CD45C;
  return Session.init(_:)(v0[14]);
}

uint64_t sub_1008CD45C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 120);
  v6 = *v1;
  *(_QWORD *)(v6 + 128) = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Session.friendsSharingLocationsWithMe()[1]);
  *(_QWORD *)(v6 + 136) = v4;
  *v4 = v6;
  v4[1] = sub_1008CD4C8;
  return Session.friendsSharingLocationsWithMe()();
}

uint64_t sub_1008CD4C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 136);
  v3[18] = a1;
  v3[19] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1008CD7AC;
  }
  else
  {
    swift_release(v3[16]);
    v5 = sub_1008CD7B0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1008CD53C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    if ((sub_1002478F4((_QWORD *)a1[2], *(_QWORD **)(a2 + 16)) & 1) != 0)
    {
      v10 = a1[3];
      v11 = a1[4];
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *(_QWORD *)(a2 + 32);
      if (v10 == v12 && v11 == v13)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1008CD5C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1008CC648(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1008CD5E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1008CC55C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t destroy for FMFHandle(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *initializeWithCopy for FMFHandle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for FMFHandle(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for FMFHandle(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = a1[4];
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for FMFHandle()
{
  return &type metadata for FMFHandle;
}

unint64_t sub_1008CD768()
{
  unint64_t result;

  result = qword_10110C100;
  if (!qword_10110C100)
  {
    result = swift_getWitnessTable("Qc$", &type metadata for FMFHandle);
    atomic_store(result, (unint64_t *)&qword_10110C100);
  }
  return result;
}

uint64_t sub_1008CD7B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1008CD7E0 + 4 * byte_100E53550[a1]))(1684628325, 0xE400000000000000);
}

uint64_t sub_1008CD7E0()
{
  return 0x644970696863;
}

uint64_t sub_1008CD7F4()
{
  return 0x754E6C6169726573;
}

uint64_t sub_1008CD814()
{
  return 0x49746375646F7270;
}

uint64_t sub_1008CD830()
{
  return 0x6449726F646E6576;
}

uint64_t sub_1008CD848()
{
  return 0x6F69737265567766;
}

uint64_t sub_1008CD86C()
{
  return 0x727574616E676973;
}

uint64_t sub_1008CD88C()
{
  return 0x4E6E6F6973736573;
}

uint64_t sub_1008CD8AC()
{
  return 0x7361486572616873;
}

unint64_t sub_1008CD8CC()
{
  return 0xD000000000000015;
}

uint64_t sub_1008CD8E8()
{
  return 0x4364656573;
}

uint64_t sub_1008CD8FC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  __int128 v28;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110C110);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1008CE91C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PairingLockCheckRequestContent.CodingKeys, &type metadata for PairingLockCheckRequestContent.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v28) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v28, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v28) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v28, v5);
    v16 = v3[4];
    v17 = v3[5];
    LOBYTE(v28) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v28, v5);
    v18 = v3[6];
    LOBYTE(v28) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v28, v5);
    v19 = v3[7];
    LOBYTE(v28) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v28, v5);
    v20 = v3[8];
    v21 = v3[9];
    LOBYTE(v28) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v28, v5);
    v28 = *((_OWORD *)v3 + 5);
    v27 = 6;
    v22 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v22);
    v28 = *((_OWORD *)v3 + 6);
    v27 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v22);
    v28 = *((_OWORD *)v3 + 7);
    v27 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v22);
    v28 = *((_OWORD *)v3 + 8);
    v27 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v22);
    v23 = v3[18];
    v24 = v3[19];
    LOBYTE(v28) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v28, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1008CDBD0()
{
  unsigned __int8 *v0;

  return sub_1008CD7B4(*v0);
}

uint64_t sub_1008CDBD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008CEB04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008CDBFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008CE91C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008CDC24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008CE91C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008CDC4C(_QWORD *a1)
{
  return sub_1008CD8FC(a1);
}

void sub_1008CDC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, uint64_t a14, unint64_t a15, __int128 a16)
{
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  Swift::String v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __n128 v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  _OWORD v76[10];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  *((_QWORD *)&v71 + 1) = a2;
  v72 = a3;
  *(_QWORD *)&v71 = a1;
  v73 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
  *(_QWORD *)&v77 = v24;
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  v26 = v77;
  swift_bridgeObjectRelease();
  v27 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v27)
  {
    __break(1u);
    goto LABEL_8;
  }
  v28 = v27;
  *((_QWORD *)&v69 + 1) = a8;
  v70 = a4;
  *(_QWORD *)&v68 = a5;
  *((_QWORD *)&v68 + 1) = a6;
  *(_QWORD *)&v69 = a7;
  v29 = objc_msgSend(v27, "serverFriendlyDescription");

  if (!v29)
  {
LABEL_8:
    __break(1u);
    return;
  }
  v65 = a16;
  v66 = a13;
  v67 = a12;
  v74 = a11;
  v75 = a10;
  v64 = a9;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v33 = swift_isUniquelyReferenced_nonNull_native(v26);
  *(_QWORD *)&v77 = v26;
  sub_100109D28(v30, v32, 0xD000000000000011, 0x8000000100ECA2C0, v33);
  v34 = v77;
  v35 = swift_bridgeObjectRelease();
  v36 = Date.init()(v35);
  v37 = Date.epoch.getter(v36);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v73);
  *(_QWORD *)&v77 = v37;
  v38 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v40 = v39;
  v41 = swift_isUniquelyReferenced_nonNull_native(v34);
  *(_QWORD *)&v77 = v34;
  sub_100109D28(v38, v40, 0xD000000000000015, 0x8000000100ECA2E0, v41);
  v42 = v77;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v77 = 1;
  v43 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v45 = v44;
  v46 = swift_isUniquelyReferenced_nonNull_native(v42);
  *(_QWORD *)&v77 = v42;
  sub_100109D28(v43, v45, 0xD000000000000013, 0x8000000100ECA300, v46);
  v47 = v77;
  swift_bridgeObjectRelease();
  v48 = sub_10069BB84();
  v50 = v49;
  v51 = swift_isUniquelyReferenced_nonNull_native(v47);
  *(_QWORD *)&v77 = v47;
  sub_100109D28((uint64_t)v48, v50, 0x6567412D72657355, 0xEA0000000000746ELL, v51);
  v52 = v77;
  swift_bridgeObjectRelease();
  v62 = a14;
  v63 = a15;
  if (a15 >> 60 == 15)
  {
    v73 = v52;
  }
  else
  {
    sub_10001BBBC(a14, a15);
    v53 = Data.base64EncodedString(options:)(0);
    v54 = swift_isUniquelyReferenced_nonNull_native(v52);
    *(_QWORD *)&v77 = v52;
    sub_100109D28(v53._countAndFlagsBits, (uint64_t)v53._object, 0x49532D454D4D2D58, 0xEB00000000374E47, v54);
    v73 = v77;
    swift_bridgeObjectRelease();
    sub_10001EF3C(a14, a15);
  }
  v77 = v71;
  *(_QWORD *)&v78 = v72;
  *((_QWORD *)&v78 + 1) = v70;
  v79 = v68;
  v80 = v69;
  v81 = v64;
  v55 = v75;
  v82 = v75;
  v56 = v74;
  v83 = v74;
  v57 = v67;
  v84 = v67;
  v58 = v66;
  v85 = v66;
  v86 = v65;
  v59 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
  sub_10001BBBC(v55, *((unint64_t *)&v55 + 1));
  sub_10001BBBC(v56, *((unint64_t *)&v56 + 1));
  sub_10001BBBC(v57, *((unint64_t *)&v57 + 1));
  sub_10001BBBC(v58, *((unint64_t *)&v58 + 1));
  JSONEncoder.init()(v60);
  v76[6] = v83;
  v76[7] = v84;
  v76[8] = v85;
  v76[9] = v86;
  v76[2] = v79;
  v76[3] = v80;
  v76[4] = v81;
  v76[5] = v82;
  v76[0] = v77;
  v76[1] = v78;
  v61 = sub_1008CE30C();
  dispatch thunk of JSONEncoder.encode<A>(_:)(v76, &type metadata for PairingLockCheckRequestContent, v61);
  swift_release();
  sub_10001EF3C(v62, v63);
  sub_10001BC14(v58, *((unint64_t *)&v58 + 1));
  sub_10001BC14(v57, *((unint64_t *)&v57 + 1));
  sub_10001BC14(v74, *((unint64_t *)&v74 + 1));
  sub_10001BC14(v75, *((unint64_t *)&v75 + 1));
  sub_1008CE414(&v77);
}

unint64_t sub_1008CE30C()
{
  unint64_t result;

  result = qword_10110C108;
  if (!qword_10110C108)
  {
    result = swift_getWitnessTable("yd$", &type metadata for PairingLockCheckRequestContent);
    atomic_store(result, (unint64_t *)&qword_10110C108);
  }
  return result;
}

_QWORD *sub_1008CE350(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[14];
  v10 = a1[15];
  v12 = a1[17];
  v13 = a1[16];
  v14 = a1[19];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_10001BBBC(v5, v6);
  sub_10001BBBC(v7, v8);
  sub_10001BBBC(v9, v10);
  sub_10001BBBC(v13, v12);
  swift_bridgeObjectRetain(v14);
  return a1;
}

_QWORD *sub_1008CE414(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[14];
  v7 = a1[15];
  v9 = a1[17];
  v10 = a1[16];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v10, v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for PairingLockCheckRequestContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_10001BC14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_10001BC14(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  sub_10001BC14(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)(a1 + 120) = v13;
  v14 = *(_QWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 136) = v15;
  v16 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v16;
  swift_bridgeObjectRetain(v16);
  return a1;
}

_QWORD *assignWithCopy for PairingLockCheckRequestContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = a2[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v7 = a2[9];
  a1[9] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = a2[10];
  v9 = a2[11];
  sub_10001BBBC(v8, v9);
  v10 = a1[10];
  v11 = a1[11];
  a1[10] = v8;
  a1[11] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[12];
  v13 = a2[13];
  sub_10001BBBC(v12, v13);
  v14 = a1[12];
  v15 = a1[13];
  a1[12] = v12;
  a1[13] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[14];
  v17 = a2[15];
  sub_10001BBBC(v16, v17);
  v18 = a1[14];
  v19 = a1[15];
  a1[14] = v16;
  a1[15] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2[16];
  v21 = a2[17];
  sub_10001BBBC(v20, v21);
  v22 = a1[16];
  v23 = a1[17];
  a1[16] = v20;
  a1[17] = v21;
  sub_10001BC14(v22, v23);
  a1[18] = a2[18];
  v24 = a2[19];
  a1[19] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for MessagingDevice(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for PairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingDevice(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckRequestContent()
{
  return &type metadata for PairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for PairingLockCheckRequest()
{
  return &type metadata for PairingLockCheckRequest;
}

unint64_t sub_1008CE91C()
{
  unint64_t result;

  result = qword_10110C118;
  if (!qword_10110C118)
  {
    result = swift_getWitnessTable(byte_100E536EC, &type metadata for PairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C118);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PairingLockCheckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1008CE9AC + 4 * byte_100E53560[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1008CE9E0 + 4 * byte_100E5355B[v4]))();
}

uint64_t sub_1008CE9E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008CE9E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008CE9F0);
  return result;
}

uint64_t sub_1008CE9FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008CEA04);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1008CEA08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008CEA10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for PairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_1008CEA30()
{
  unint64_t result;

  result = qword_10110C120;
  if (!qword_10110C120)
  {
    result = swift_getWitnessTable(byte_100E536C4, &type metadata for PairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C120);
  }
  return result;
}

unint64_t sub_1008CEA78()
{
  unint64_t result;

  result = qword_10110C128;
  if (!qword_10110C128)
  {
    result = swift_getWitnessTable("=d$", &type metadata for PairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C128);
  }
  return result;
}

unint64_t sub_1008CEAC0()
{
  unint64_t result;

  result = qword_10110C130;
  if (!qword_10110C130)
  {
    result = swift_getWitnessTable("%d$", &type metadata for PairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C130);
  }
  return result;
}

uint64_t sub_1008CEB04(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v8 = 0xEC0000007265626DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v9 = 0xE900000000000064;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6F69737265567766 && a2 == 0xE90000000000006ELL)
  {
    v11 = 0xE90000000000006ELL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69737265567766, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    v12 = 0xE900000000000065;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x727574616E676973, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v13 = 0xEC00000065636E6FLL;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x4364656573 && a2 == 0xE500000000000000)
  {
    v14 = 0xE500000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4364656573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x7361486572616873 && a2 == 0xE900000000000068)
  {
    v15 = 0xE900000000000068;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7361486572616873, 0xE900000000000068, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_62;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EDCD20)
  {
    swift_bridgeObjectRelease(0x8000000100EDCD20);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EDCD20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1008CEF8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[37] = a1;
  v2[38] = a2;
  v3 = type metadata accessor for HashAlgorithm(0);
  v2[39] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[40] = v4;
  v2[41] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v2[42] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[43] = v6;
  v2[44] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008CF014, 0, 0);
}

void sub_1008CF014()
{
  uint64_t v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void (__cdecl *v41)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "serverFriendlyDescription");

    if (v5)
    {
      v6 = *(_QWORD *)(v0 + 344);
      v7 = *(_QWORD *)(v0 + 352);
      v8 = *(_QWORD *)(v0 + 336);
      v9 = *(_OWORD **)(v0 + 296);
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v12 = v11;

      v13 = swift_isUniquelyReferenced_nonNull_native(v1);
      sub_100109D28(v10, v12, 0xD000000000000011, 0x8000000100ECA2C0, v13);
      v14 = v1;
      v15 = swift_bridgeObjectRelease();
      v16 = Date.init()(v15);
      v17 = Date.epoch.getter(v16);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
      *(_QWORD *)(v0 + 288) = v17;
      v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v20 = v19;
      v21 = swift_isUniquelyReferenced_nonNull_native(v14);
      sub_100109D28(v18, v20, 0xD000000000000015, 0x8000000100ECA2E0, v21);
      v22 = v14;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 272) = 1;
      v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v25 = v24;
      v26 = swift_isUniquelyReferenced_nonNull_native(v22);
      sub_100109D28(v23, v25, 0xD000000000000013, 0x8000000100ECA300, v26);
      v27 = v22;
      swift_bridgeObjectRelease();
      v28 = sub_100AC2EB8();
      v30 = v29;
      v31 = swift_isUniquelyReferenced_nonNull_native(v27);
      sub_100109D28((uint64_t)v28, v30, 0x6567412D72657355, 0xEA0000000000746ELL, v31);
      *(_QWORD *)(v0 + 360) = v27;
      swift_bridgeObjectRelease();
      v32 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      *(_QWORD *)(v0 + 368) = JSONEncoder.init()(v33);
      *(_OWORD *)(v0 + 176) = *v9;
      v34 = v9[4];
      v36 = v9[1];
      v35 = v9[2];
      *(_OWORD *)(v0 + 224) = v9[3];
      *(_OWORD *)(v0 + 240) = v34;
      *(_OWORD *)(v0 + 192) = v36;
      *(_OWORD *)(v0 + 208) = v35;
      v37 = sub_1008CFF4C();
      v38 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 176, &type metadata for PencilUnpairData, v37);
      *(_QWORD *)(v0 + 376) = v38;
      *(_QWORD *)(v0 + 384) = v39;
      sub_10001BBBC(v38, v39);
      v41 = (void (__cdecl *)())((char *)&dword_101115250 + dword_101115250);
      v40 = (_QWORD *)swift_task_alloc(unk_101115254);
      *(_QWORD *)(v0 + 392) = v40;
      *v40 = v0;
      v40[1] = sub_1008CF4A0;
      v41();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1008CF4A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 392);
  *(_QWORD *)(v3 + 400) = a1;
  *(_QWORD *)(v3 + 408) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1008CF4FC, 0, 0);
}

uint64_t sub_1008CF4FC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[50];
  v1 = v0[51];
  v4 = v0[47];
  v3 = v0[48];
  v6 = v0[40];
  v5 = v0[41];
  v7 = v0[39];
  v0[32] = v2;
  v0[33] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v9 = v0[32];
  v8 = v0[33];
  v0[52] = v9;
  v0[53] = v8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v9, v8);
  v12 = v11;
  v0[54] = v10;
  v0[55] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115248 + dword_101115248;
  v13 = (_QWORD *)swift_task_alloc(unk_10111524C);
  v0[56] = v13;
  *v13 = v0;
  v13[1] = sub_1008CF620;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[38]);
}

uint64_t sub_1008CF620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 448);
  *(_QWORD *)(*(_QWORD *)v2 + 456) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1008CFAB8;
  }
  else
  {
    v7 = v4[54];
    v8 = v4[55];
    v4[58] = a1;
    sub_10001BC14(v7, v8);
    v6 = sub_1008CF69C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1008CF69C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  int64_t v51;
  _BYTE *v52;
  _BYTE *v53;

  v2 = v0[57];
  v1 = v0[58];
  v3 = (_BYTE *)v0[45];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v53 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v53);
  if (v2)
    return swift_bridgeObjectRelease();
  v7 = v0[52];
  v6 = v0[53];
  v49 = v0;
  v8 = v53;
  swift_bridgeObjectRelease();
  v9 = sub_10001BC14(v7, v6);
  v10 = static os_log_type_t.debug.getter(v9);
  if (qword_1010EA310 != -1)
LABEL_27:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7DF0, "Unpair header:", 14, 2, _swiftEmptyArrayStorage);
  v50 = v8 + 64;
  v11 = -1;
  v12 = -1 << v8[32];
  if (-v12 < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & *((_QWORD *)v8 + 8);
  v51 = (unint64_t)(63 - v12) >> 6;
  v52 = v8;
  swift_bridgeObjectRetain(v8);
  v14 = 0;
  v8 = &type metadata for String;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_8;
    }
    v29 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v51)
      goto LABEL_24;
    v30 = *(_QWORD *)&v50[8 * v29];
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v51)
        goto LABEL_24;
      v30 = *(_QWORD *)&v50[8 * v14];
      if (!v30)
      {
        v14 = v29 + 2;
        if (v29 + 2 >= v51)
          goto LABEL_24;
        v30 = *(_QWORD *)&v50[8 * v14];
        if (!v30)
          break;
      }
    }
LABEL_23:
    v13 = (v30 - 1) & v30;
    v16 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_8:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*((_QWORD *)v52 + 6) + v17);
    v10 = *v18;
    v19 = v18[1];
    v20 = (uint64_t *)(*((_QWORD *)v52 + 7) + v17);
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    v25 = qword_1011B7DF0;
    v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v27 = swift_allocObject(v26, 112, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    v28 = sub_10001AA00();
    *(_QWORD *)(v27 + 32) = v10;
    *(_QWORD *)(v27 + 40) = v19;
    *(_QWORD *)(v27 + 96) = &type metadata for String;
    *(_QWORD *)(v27 + 104) = v28;
    *(_QWORD *)(v27 + 64) = v28;
    *(_QWORD *)(v27 + 72) = v21;
    *(_QWORD *)(v27 + 80) = v22;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@: %@", 6, 2, v27);
    swift_bridgeObjectRelease();
  }
  v31 = v29 + 3;
  if (v31 < v51)
  {
    v30 = *(_QWORD *)&v50[8 * v31];
    if (!v30)
    {
      while (1)
      {
        v14 = v31 + 1;
        if (__OFADD__(v31, 1))
          goto LABEL_26;
        if (v14 >= v51)
          goto LABEL_24;
        v30 = *(_QWORD *)&v50[8 * v14];
        ++v31;
        if (v30)
          goto LABEL_23;
      }
    }
    v14 = v31;
    goto LABEL_23;
  }
LABEL_24:
  v33 = v49[47];
  v32 = v49[48];
  v34 = (_OWORD *)v49[37];
  v35 = swift_release();
  v36 = static os_log_type_t.debug.getter(v35);
  v37 = qword_1011B7DF0;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v39 = swift_allocObject(v38, 72, 7);
  *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
  *((_OWORD *)v49 + 6) = *v34;
  v40 = v34[4];
  v42 = v34[1];
  v41 = v34[2];
  *((_OWORD *)v49 + 9) = v34[3];
  *((_OWORD *)v49 + 10) = v40;
  *((_OWORD *)v49 + 7) = v42;
  *((_OWORD *)v49 + 8) = v41;
  v43 = String.init<A>(describing:)(v49 + 12, &type metadata for PencilUnpairData);
  v45 = v44;
  *(_QWORD *)(v39 + 56) = &type metadata for String;
  *(_QWORD *)(v39 + 64) = sub_10001AA00();
  *(_QWORD *)(v39 + 32) = v43;
  *(_QWORD *)(v39 + 40) = v45;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Unpair body %@", 14, 2, v39);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001BC14(v33, v32);
  swift_release();
  v47 = v49[47];
  v46 = v49[48];
  v48 = v49[41];
  swift_task_dealloc(v49[44]);
  swift_task_dealloc(v48);
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v49[1])(v52, v47, v46);
}

uint64_t sub_1008CFAB8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;

  v1 = v0 + 280;
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  sub_10001BC14(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440));
  v4 = sub_10001BC14(v3, v2);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = &qword_1010EA000;
  if (qword_1010EA310 != -1)
LABEL_27:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v7 = *(_QWORD *)(v0 + 456);
  v8 = qword_1011B7DF0;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v0 + 280) = v7;
  swift_errorRetain(v7);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v12 = String.init<A>(describing:)(v1, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v1 = sub_10001AA00();
  *(_QWORD *)(v10 + 64) = v1;
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v8, "Failed to sign unpair request. %@", 33, 2, v10);
  swift_bridgeObjectRelease();
  v15 = swift_errorRelease(v7);
  v53 = v0;
  v5 = *(_QWORD *)(v0 + 360);
  v16 = static os_log_type_t.debug.getter(v15);
  if (v6[98] != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7DF0, "Unpair header:", 14, 2, _swiftEmptyArrayStorage, 1, 2);
  v54 = v5 + 64;
  v17 = -1;
  v18 = -1 << *(_BYTE *)(v5 + 32);
  if (-v18 < 64)
    v17 = ~(-1 << -(char)v18);
  v19 = v17 & *(_QWORD *)(v5 + 64);
  v55 = (unint64_t)(63 - v18) >> 6;
  v57 = v5;
  swift_bridgeObjectRetain(v5);
  v0 = 0;
  while (1)
  {
    if (v19)
    {
      v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v21 = v20 | (v0 << 6);
      v22 = v57;
      goto LABEL_8;
    }
    v33 = v0 + 1;
    if (__OFADD__(v0, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v33 >= v55)
      goto LABEL_24;
    v34 = *(_QWORD *)(v54 + 8 * v33);
    ++v0;
    if (!v34)
    {
      v0 = v33 + 1;
      if (v33 + 1 >= v55)
        goto LABEL_24;
      v34 = *(_QWORD *)(v54 + 8 * v0);
      if (!v34)
      {
        v0 = v33 + 2;
        if (v33 + 2 >= v55)
          goto LABEL_24;
        v34 = *(_QWORD *)(v54 + 8 * v0);
        if (!v34)
          break;
      }
    }
LABEL_23:
    v19 = (v34 - 1) & v34;
    v21 = __clz(__rbit64(v34)) + (v0 << 6);
    v22 = v57;
LABEL_8:
    v23 = 16 * v21;
    v24 = (uint64_t *)(*(_QWORD *)(v22 + 48) + v23);
    v25 = *v24;
    v26 = v24[1];
    v27 = (uint64_t *)(*(_QWORD *)(v22 + 56) + v23);
    v5 = *v27;
    v28 = v27[1];
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    v6 = (uint64_t *)static os_log_type_t.debug.getter(v29);
    v30 = qword_1011B7DF0;
    v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v32 = swift_allocObject(v31, 112, 7);
    *(_OWORD *)(v32 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 64) = v1;
    *(_QWORD *)(v32 + 32) = v25;
    *(_QWORD *)(v32 + 40) = v26;
    *(_QWORD *)(v32 + 96) = &type metadata for String;
    *(_QWORD *)(v32 + 104) = v1;
    *(_QWORD *)(v32 + 72) = v5;
    *(_QWORD *)(v32 + 80) = v28;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v30, "%@: %@", 6, 2, v32);
    swift_bridgeObjectRelease();
  }
  v35 = v33 + 3;
  if (v35 < v55)
  {
    v34 = *(_QWORD *)(v54 + 8 * v35);
    if (!v34)
    {
      while (1)
      {
        v0 = v35 + 1;
        if (__OFADD__(v35, 1))
          goto LABEL_26;
        if (v0 >= v55)
          goto LABEL_24;
        v34 = *(_QWORD *)(v54 + 8 * v0);
        ++v35;
        if (v34)
          goto LABEL_23;
      }
    }
    v0 = v35;
    goto LABEL_23;
  }
LABEL_24:
  v36 = *(_QWORD *)(v53 + 376);
  v56 = *(_QWORD *)(v53 + 384);
  v37 = *(_OWORD **)(v53 + 296);
  v38 = swift_release();
  v39 = static os_log_type_t.debug.getter(v38);
  v40 = qword_1011B7DF0;
  v41 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v42 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v42 + 16) = v52;
  *(_OWORD *)(v53 + 96) = *v37;
  v43 = v37[4];
  v45 = v37[1];
  v44 = v37[2];
  *(_OWORD *)(v53 + 144) = v37[3];
  *(_OWORD *)(v53 + 160) = v43;
  *(_OWORD *)(v53 + 112) = v45;
  *(_OWORD *)(v53 + 128) = v44;
  v46 = String.init<A>(describing:)(v53 + 96, &type metadata for PencilUnpairData);
  *(_QWORD *)(v42 + 56) = &type metadata for String;
  *(_QWORD *)(v42 + 64) = v1;
  *(_QWORD *)(v42 + 32) = v46;
  *(_QWORD *)(v42 + 40) = v47;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Unpair body %@", 14, 2, v42);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001BC14(v36, v56);
  swift_release();
  v49 = *(_QWORD *)(v53 + 376);
  v48 = *(_QWORD *)(v53 + 384);
  v50 = *(_QWORD *)(v53 + 328);
  swift_task_dealloc(*(_QWORD *)(v53 + 352));
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 8))(v57, v49, v48);
}

unint64_t sub_1008CFF4C()
{
  unint64_t result;

  result = qword_10110C140;
  if (!qword_10110C140)
  {
    result = swift_getWitnessTable(byte_100E37E80, &type metadata for PencilUnpairData);
    atomic_store(result, (unint64_t *)&qword_10110C140);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilUnpairRequest()
{
  return &type metadata for PencilUnpairRequest;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse()
{
  return &type metadata for OwnedDeviceFetchResponse;
}

uint64_t initializeBufferWithCopyOfBuffer for FetchResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for FetchResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for FetchResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchResponse(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchResponse()
{
  return &type metadata for FetchResponse;
}

uint64_t *sub_1008D0104(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    a1[2] = v9;
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v14 + 48);
    v16 = swift_bridgeObjectRetain(v9);
    if (v15(v12, 1, v13, v16))
    {
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  }
  return a1;
}

uint64_t sub_1008D022C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t *sub_1008D02B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  a1[2] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
  v15 = swift_bridgeObjectRetain(v8);
  if (v14(v11, 1, v12, v15))
  {
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_1008D03B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a2[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1008D0500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_1008D05E0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1008D0720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008D072C);
}

uint64_t sub_1008D072C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1008D07AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008D07B8);
}

uint64_t sub_1008D07B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FetchResponse.SearchResult(uint64_t a1)
{
  uint64_t result;

  result = qword_10110C1A0;
  if (!qword_10110C1A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchResponse.SearchResult);
  return result;
}

void sub_1008D086C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100E53828;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1000A813C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_100E53840;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_1008D08F4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10104B148;
  return sub_10059BD44(v2, a1, a2);
}

uint64_t sub_1008D0900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1008D2CDC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1008D095C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1008D2CDC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1008D09A8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F43737574617473;
  else
    return 0x73746C75736572;
}

uint64_t sub_1008D09E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008D12AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008D0A0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D1578();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008D0A34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D1578();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008D0A5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_1008D13A8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_1008D0A8C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1008D0AB0 + 4 * byte_100E537C0[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_1008D0AB0()
{
  return 0x7364616F6C796170;
}

uint64_t sub_1008D0AC8()
{
  return 0x656372756F73;
}

uint64_t sub_1008D0ADC()
{
  return 0x656B636150766C74;
}

uint64_t sub_1008D0AF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008D1648(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008D0B1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D246C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008D0B44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D246C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1008D0B6C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1008D17EC(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1008D0BB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v15[5];
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;

  v5 = type metadata accessor for FetchResponse.SearchResult(0);
  __chkstk_darwin(v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030784((uint64_t)a1, (uint64_t)v15);
  sub_1008D17EC(v15, (uint64_t)&v16);
  if (!v2)
  {
    v20 = v16;
    *(_OWORD *)v7 = v16;
    v8 = &v7[*(int *)(v5 + 24)];
    v9 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
    v10 = v18;
    if (v18 == 19)
      v10 = 7;
    v7[*(int *)(v5 + 28)] = v10;
    v11 = v17;
    v12 = v19;
    sub_100059DE8((uint64_t)&v20);
    v13 = sub_1008F2140(v11, v12);
    sub_1008D2424((uint64_t)&v16);
    *((_QWORD *)v7 + 2) = v13;
    sub_1008D23A4((uint64_t)v7, a2);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1008D0CDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1008D0BB0(a1, a2);
}

uint64_t sub_1008D0CF0(char *a1, char *a2)
{
  return sub_100512A84(*a1, *a2);
}

Swift::Int sub_1008D0CFC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x61636F4C6E736361;
  else
    v2 = 0xD000000000000014;
  if (v1)
    v3 = 0xED0000736E6F6974;
  else
    v3 = 0x8000000100EC52E0;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1008D0D8C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x61636F4C6E736361;
  else
    v2 = 0xD000000000000014;
  if (*v1)
    v3 = 0xED0000736E6F6974;
  else
    v3 = 0x8000000100EC52E0;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1008D0DF8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x61636F4C6E736361;
  else
    v2 = 0xD000000000000014;
  if (v1)
    v3 = 0xED0000736E6F6974;
  else
    v3 = 0x8000000100EC52E0;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1008D0E84@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10104D1F8;
  return sub_10059BD44(v2, a1, a2);
}

void sub_1008D0E90(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000014;
  if (*v1)
    v2 = 0x61636F4C6E736361;
  v3 = 0x8000000100EC52E0;
  if (*v1)
    v3 = 0xED0000736E6F6974;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1008D0EE0()
{
  _BYTE *v0;

  if (*v0)
    return 0x61636F4C6E736361;
  else
    return 0xD000000000000014;
}

uint64_t sub_1008D0F2C@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D1F8, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1008D0F8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D2294();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008D0FB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D2294();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008D0FDC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65566769666E6F63;
  if (*v0 != 1)
    v1 = 0x6F43737574617473;
  if (*v0)
    return v1;
  else
    return 0x6E6F697461636F6CLL;
}

uint64_t sub_1008D1054@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008D33A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008D1078(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D2F44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008D10A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D2F44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008D10C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1008D124C((uint64_t (*)(void))sub_1008D2D20, a1);
}

uint64_t sub_1008D10E4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 25705;
  if (*v0 != 1)
    v1 = 0x656B636150766C74;
  if (*v0)
    return v1;
  else
    return 0x6E6F697461636F6CLL;
}

uint64_t sub_1008D1140@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008D2F88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008D1164(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D3BBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008D118C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D3BBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008D11B4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1008D30E8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1008D11E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D3774();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008D1208(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008D3774();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008D1230@<X0>(uint64_t a1@<X8>)
{
  return sub_1008D124C((uint64_t (*)(void))sub_1008D3550, a1);
}

uint64_t sub_1008D124C@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  __int16 v6;

  result = a1();
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
    *(_BYTE *)(a2 + 17) = HIBYTE(v6) & 1;
  }
  return result;
}

uint64_t sub_1008D1284@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1008D1B24(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1008D12AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x73746C75736572 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73746C75736572, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    swift_bridgeObjectRelease(0xEA00000000006564);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473, 0xEA00000000006564, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1008D13A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_10001A9A8(&qword_10110C1E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1008D1578();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FetchResponse.CodingKeys, &type metadata for FetchResponse.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_10110C1F0);
    HIBYTE(v14) = 0;
    v11 = sub_1008D24B0(&qword_10110C1F8, &qword_10110C1F0, (uint64_t (*)(void))sub_1008D15BC);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, v10, (char *)&v14 + 7, v3, v10, v11);
    v7 = v15;
    BYTE5(v14) = 1;
    v13 = sub_1008D1604();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v14 + 6), &type metadata for FetchResponse.Status, (char *)&v14 + 5, v3, &type metadata for FetchResponse.Status, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1008D1578()
{
  unint64_t result;

  result = qword_10110C1E8;
  if (!qword_10110C1E8)
  {
    result = swift_getWitnessTable(byte_100E53D98, &type metadata for FetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C1E8);
  }
  return result;
}

unint64_t sub_1008D15BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10110C200;
  if (!qword_10110C200)
  {
    v1 = type metadata accessor for FetchResponse.SearchResult(255);
    result = swift_getWitnessTable("Ij$", v1);
    atomic_store(result, (unint64_t *)&qword_10110C200);
  }
  return result;
}

unint64_t sub_1008D1604()
{
  unint64_t result;

  result = qword_10110C208;
  if (!qword_10110C208)
  {
    result = swift_getWitnessTable("1e$", &type metadata for FetchResponse.Status);
    atomic_store(result, (unint64_t *)&qword_10110C208);
  }
  return result;
}

uint64_t sub_1008D1648(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7364616F6C796170 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7364616F6C796170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x656B636150766C74 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease(0xEA00000000007374);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656B636150766C74, 0xEA00000000007374, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1008D17EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  int v32;
  char v33;

  v5 = sub_10001A9A8(&qword_10110C230);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1008D246C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FetchResponse.RawSearchResult.CodingKeys, &type metadata for FetchResponse.RawSearchResult.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v33 = 0;
  v12 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, &type metadata for Data, &v33, v5, &type metadata for Data, v12);
  v14 = v31[0];
  v13 = v31[1];
  v15 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
  v33 = 1;
  sub_10001BBBC(v14, v13);
  v16 = sub_100436BF8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v15, &v33, v5, v15, v16);
  v30 = v13;
  v17 = v31[0];
  v33 = 2;
  v18 = sub_1002ED1DC();
  swift_bridgeObjectRetain(v17);
  v29 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for LocationSource, &v33, v5, &type metadata for LocationSource, v18);
  v28 = v17;
  v32 = LOBYTE(v31[0]);
  v19 = sub_10001A9A8(&qword_10110C240);
  v33 = 3;
  v20 = sub_1008D24B0(&qword_10110C248, &qword_10110C240, (uint64_t (*)(void))sub_100436BF8);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, &v33, v5, v19, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v14;
  v22 = v14;
  v24 = v30;
  v23 = v31[0];
  sub_10001BBBC(v22, v30);
  swift_bridgeObjectRetain(v23);
  sub_10001BC14(v21, v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_10001BC14(v21, v24);
  swift_bridgeObjectRelease();
  v25 = v28;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v24;
  *(_QWORD *)(a2 + 16) = v25;
  *(_BYTE *)(a2 + 24) = v32;
  *(_QWORD *)(a2 + 32) = v23;
  return result;
}

uint64_t sub_1008D1B24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  unsigned __int16 v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int16 v93;
  int v94;
  char v95;

  v2 = type metadata accessor for FetchResponse.SearchResult(0);
  v88 = *(_QWORD *)(v2 - 8);
  v89 = v2;
  v3 = __chkstk_darwin(v2);
  v90 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v87 = (uint64_t *)((char *)&v70 - v6);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v70 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v70 - v10;
  v12 = sub_10001A9A8(&qword_10110C210);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v17 = a1[4];
  sub_10001AA44(a1, v16);
  v18 = sub_1008D2294();
  v19 = v91;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedDeviceFetchResponse.CodingKeys, &type metadata for OwnedDeviceFetchResponse.CodingKeys, v18, v16, v17);
  if (v19)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v80 = (uint64_t *)v11;
  v81 = v9;
  v82 = v13;
  v95 = 0;
  v20 = sub_1008D22D8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload, &v95, v12, &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload, v20);
  v21 = v12;
  v22 = v92;
  v23 = v93;
  v95 = 1;
  v24 = sub_1008D231C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload, &v95, v21, &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload, v24);
  v71 = v15;
  v26 = v92;
  v27 = v93;
  v74 = 0;
  v75 = a1;
  v73 = v21;
  v72 = v92;
  if (!v22)
  {
    v29 = _swiftEmptyArrayStorage;
    goto LABEL_30;
  }
  v94 = v93;
  if ((v23 & 0x100) != 0)
  {
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F7272456F6ELL, 0xE700000000000000, 3158066, 0xE300000000000000, 0);
    result = swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
LABEL_28:
      v31 = _swiftEmptyArrayStorage;
LABEL_29:
      v29 = v31;
      swift_bridgeObjectRelease();
      a1 = v75;
      v21 = v73;
      v26 = v72;
      v27 = v94;
LABEL_30:
      v53 = v82;
      if (v26)
      {
        if ((v27 & 0x100) != 0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v54 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F7272456F6ELL, 0xE700000000000000, 3158066, 0xE300000000000000, 0);
          swift_bridgeObjectRelease();
          if ((v54 & 1) == 0)
            goto LABEL_33;
        }
        v55 = *(_QWORD *)(v26 + 16);
        if (v55)
        {
          v56 = (uint64_t *)(v26 + 56);
          v57 = v87;
          do
          {
            v59 = *(v56 - 3);
            v58 = *(v56 - 2);
            v61 = *(v56 - 1);
            v60 = *v56;
            swift_bridgeObjectRetain(v59);
            sub_10001BBBC(v58, v61);
            swift_bridgeObjectRetain(v60);
            sub_10001BBBC(v58, v61);
            v86 = v59;
            v91 = v60;
            v62 = sub_1008F2140(v59, v60);
            v63 = v89;
            v64 = (char *)v57 + *(int *)(v89 + 24);
            v65 = type metadata accessor for Date(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 1, 1, v65);
            *v57 = v58;
            v57[1] = v61;
            v57[2] = (uint64_t)v62;
            *((_BYTE *)v57 + *(int *)(v63 + 28)) = 7;
            sub_1008D2360((uint64_t)v57, v90);
            if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
              v29 = (_QWORD *)sub_1007CA7BC(0, v29[2] + 1, 1, (unint64_t)v29);
            v67 = v29[2];
            v66 = v29[3];
            v68 = (uint64_t)v29;
            v69 = v88;
            if (v67 >= v66 >> 1)
              v68 = sub_1007CA7BC(v66 > 1, v67 + 1, 1, (unint64_t)v29);
            v56 += 4;
            v29 = (_QWORD *)v68;
            *(_QWORD *)(v68 + 16) = v67 + 1;
            sub_1008D23A4(v90, v68+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72) * v67);
            swift_bridgeObjectRelease();
            sub_10001BC14(v58, v61);
            swift_bridgeObjectRelease();
            v57 = v87;
            sub_1008D23E8((uint64_t)v87);
            --v55;
          }
          while (v55);
        }
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v82 + 8))(v71, v73);
        a1 = v75;
        goto LABEL_43;
      }
LABEL_33:
      (*(void (**)(char *, uint64_t))(v53 + 8))(v71, v21);
      swift_bridgeObjectRelease();
LABEL_43:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return (uint64_t)v29;
    }
  }
  v78 = *(_QWORD *)(v22 + 16);
  if (!v78)
    goto LABEL_28;
  v30 = 0;
  v31 = _swiftEmptyArrayStorage;
  v76 = v22 + 32;
  v77 = v22;
  v32 = v80;
  v33 = (uint64_t)v81;
  while (v30 < *(_QWORD *)(v22 + 16))
  {
    v84 = v30;
    v34 = (uint64_t *)(v76 + 56 * v30);
    v36 = *v34;
    v35 = v34[1];
    v37 = v34[5];
    v38 = v34[6];
    v39 = *(_QWORD *)(v38 + 16);
    v85 = v35;
    v86 = v36;
    v83 = v37;
    v91 = v38;
    if (v39)
    {
      v79 = v31;
      swift_bridgeObjectRetain(v38);
      sub_10001BBBC(v36, v35);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain_n(v38, 2);
      v40 = (unint64_t *)(v38 + 40);
      v41 = _swiftEmptyArrayStorage;
      do
      {
        v43 = *(v40 - 1);
        v42 = *v40;
        sub_10001BBBC(v43, *v40);
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
          v41 = sub_1007CA69C(0, v41[2] + 1, 1, v41);
        v45 = v41[2];
        v44 = v41[3];
        if (v45 >= v44 >> 1)
          v41 = sub_1007CA69C((_QWORD *)(v44 > 1), v45 + 1, 1, v41);
        v40 += 4;
        v41[2] = v45 + 1;
        v46 = &v41[3 * v45];
        v46[4] = v43;
        v46[5] = v42;
        *((_BYTE *)v46 + 52) = 0;
        *((_DWORD *)v46 + 12) = 3;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease_n(v91, 2);
      v31 = v79;
      v32 = v80;
      v33 = (uint64_t)v81;
      v35 = v85;
      v36 = v86;
    }
    else
    {
      sub_10001BBBC(v36, v35);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v38);
      v41 = _swiftEmptyArrayStorage;
    }
    v47 = v89;
    v48 = (char *)v32 + *(int *)(v89 + 24);
    v49 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
    *v32 = v36;
    v32[1] = v35;
    v32[2] = (uint64_t)v41;
    *((_BYTE *)v32 + *(int *)(v47 + 28)) = 15;
    sub_1008D2360((uint64_t)v32, v33);
    sub_10001BBBC(v36, v35);
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
      v31 = (_QWORD *)sub_1007CA7BC(0, v31[2] + 1, 1, (unint64_t)v31);
    v22 = v77;
    v51 = v31[2];
    v50 = v31[3];
    if (v51 >= v50 >> 1)
      v31 = (_QWORD *)sub_1007CA7BC(v50 > 1, v51 + 1, 1, (unint64_t)v31);
    v52 = v84 + 1;
    v31[2] = v51 + 1;
    v30 = v52;
    sub_1008D23A4(v33, (uint64_t)v31+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(_QWORD *)(v88 + 72) * v51);
    sub_10001BC14(v86, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_1008D23E8((uint64_t)v32);
    if (v30 == v78)
      goto LABEL_29;
  }
  __break(1u);
  return result;
}

unint64_t sub_1008D2294()
{
  unint64_t result;

  result = qword_10110C218;
  if (!qword_10110C218)
  {
    result = swift_getWitnessTable(byte_100E53D20, &type metadata for OwnedDeviceFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C218);
  }
  return result;
}

unint64_t sub_1008D22D8()
{
  unint64_t result;

  result = qword_10110C220;
  if (!qword_10110C220)
  {
    result = swift_getWitnessTable(byte_100E53CF8, &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload);
    atomic_store(result, (unint64_t *)&qword_10110C220);
  }
  return result;
}

unint64_t sub_1008D231C()
{
  unint64_t result;

  result = qword_10110C228;
  if (!qword_10110C228)
  {
    result = swift_getWitnessTable(byte_100E53CD0, &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload);
    atomic_store(result, (unint64_t *)&qword_10110C228);
  }
  return result;
}

uint64_t sub_1008D2360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FetchResponse.SearchResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008D23A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FetchResponse.SearchResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008D23E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FetchResponse.SearchResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1008D2424(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1008D246C()
{
  unint64_t result;

  result = qword_10110C238;
  if (!qword_10110C238)
  {
    result = swift_getWitnessTable(byte_100E53C80, &type metadata for FetchResponse.RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C238);
  }
  return result;
}

uint64_t sub_1008D24B0(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001F784(a2);
    v7 = a3();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for FetchResponse.RawSearchResult(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FetchResponse.RawSearchResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for FetchResponse.RawSearchResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FetchResponse.RawSearchResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FetchResponse.RawSearchResult()
{
  return &type metadata for FetchResponse.RawSearchResult;
}

uint64_t storeEnumTagSinglePayload for FetchResponse.RawSearchResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1008D26E8 + 4 * byte_100E537C9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1008D271C + 4 * byte_100E537C4[v4]))();
}

uint64_t sub_1008D271C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008D2724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008D272CLL);
  return result;
}

uint64_t sub_1008D2738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008D2740);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1008D2744(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008D274C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchResponse.RawSearchResult.CodingKeys()
{
  return &type metadata for FetchResponse.RawSearchResult.CodingKeys;
}

__n128 initializeWithTake for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload()
{
  return &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload;
}

uint64_t _s12searchpartyd24OwnedDeviceFetchResponseV25AcsnDeviceLocationPayloadVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v6;
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t *assignWithTake for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.OwnDeviceLocationPayload()
{
  return &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchResponse.CodingKeys()
{
  return &type metadata for FetchResponse.CodingKeys;
}

uint64_t _s12searchpartyd13FetchResponseV6StatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1008D298C + 4 * byte_100E537D3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1008D29C0 + 4 * byte_100E537CE[v4]))();
}

uint64_t sub_1008D29C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008D29C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008D29D0);
  return result;
}

uint64_t sub_1008D29DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008D29E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1008D29E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008D29F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchResponse.Status()
{
  return &type metadata for FetchResponse.Status;
}

unint64_t sub_1008D2A10()
{
  unint64_t result;

  result = qword_10110C250;
  if (!qword_10110C250)
  {
    result = swift_getWitnessTable("9i$", &type metadata for FetchResponse.Status);
    atomic_store(result, (unint64_t *)&qword_10110C250);
  }
  return result;
}

unint64_t sub_1008D2A58()
{
  unint64_t result;

  result = qword_10110C258;
  if (!qword_10110C258)
  {
    result = swift_getWitnessTable(byte_100E53A88, &type metadata for FetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C258);
  }
  return result;
}

unint64_t sub_1008D2AA0()
{
  unint64_t result;

  result = qword_10110C260;
  if (!qword_10110C260)
  {
    result = swift_getWitnessTable(byte_100E53B78, &type metadata for OwnedDeviceFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C260);
  }
  return result;
}

unint64_t sub_1008D2AE8()
{
  unint64_t result;

  result = qword_10110C268;
  if (!qword_10110C268)
  {
    result = swift_getWitnessTable(byte_100E53C30, &type metadata for FetchResponse.RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C268);
  }
  return result;
}

unint64_t sub_1008D2B30()
{
  unint64_t result;

  result = qword_10110C270;
  if (!qword_10110C270)
  {
    result = swift_getWitnessTable("yg$", &type metadata for FetchResponse.RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C270);
  }
  return result;
}

unint64_t sub_1008D2B78()
{
  unint64_t result;

  result = qword_10110C278;
  if (!qword_10110C278)
  {
    result = swift_getWitnessTable("ag$", &type metadata for FetchResponse.RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C278);
  }
  return result;
}

unint64_t sub_1008D2BC0()
{
  unint64_t result;

  result = qword_10110C280;
  if (!qword_10110C280)
  {
    result = swift_getWitnessTable("ih$", &type metadata for OwnedDeviceFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C280);
  }
  return result;
}

unint64_t sub_1008D2C08()
{
  unint64_t result;

  result = qword_10110C288;
  if (!qword_10110C288)
  {
    result = swift_getWitnessTable("Qh$", &type metadata for OwnedDeviceFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C288);
  }
  return result;
}

unint64_t sub_1008D2C50()
{
  unint64_t result;

  result = qword_10110C290;
  if (!qword_10110C290)
  {
    result = swift_getWitnessTable("!i$", &type metadata for FetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C290);
  }
  return result;
}

unint64_t sub_1008D2C98()
{
  unint64_t result;

  result = qword_10110C298;
  if (!qword_10110C298)
  {
    result = swift_getWitnessTable("\ti$", &type metadata for FetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C298);
  }
  return result;
}

unint64_t sub_1008D2CDC()
{
  unint64_t result;

  result = qword_10110C2A0;
  if (!qword_10110C2A0)
  {
    result = swift_getWitnessTable("ii$", &type metadata for FetchResponse.Status);
    atomic_store(result, (unint64_t *)&qword_10110C2A0);
  }
  return result;
}

uint64_t sub_1008D2D20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_10001A9A8(&qword_10110C2A8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1008D2F44();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys, &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_1010F3E38);
    BYTE2(v16) = 0;
    v11 = sub_1008D24B0((unint64_t *)&qword_1010F9658, &qword_1010F3E38, (uint64_t (*)(void))sub_100365BE4);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, (char *)&v16 + 2, v3, v10, v11);
    v7 = v17;
    BYTE1(v16) = 1;
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v16 + 1, v3);
    v15 = 2;
    v13 = sub_1008D1604();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for FetchResponse.Status, &v15, v3, &type metadata for FetchResponse.Status, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1008D2F44()
{
  unint64_t result;

  result = qword_10110C2B0;
  if (!qword_10110C2B0)
  {
    result = swift_getWitnessTable("Ec$", &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C2B0);
  }
  return result;
}

uint64_t sub_1008D2F88(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49)
  {
    v5 = 0xEC0000006F666E49;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC0000006F666E49, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v7 = 0xE200000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656B636150766C74 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease(0xEA00000000007374);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656B636150766C74, 0xEA00000000007374, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1008D30E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;

  v3 = sub_10001A9A8(&qword_10110C310);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1008D3BBC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys, &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v24 = 0;
    v11 = sub_100436BF8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, v10, &v24, v3, v10, v11);
    v7 = v23[0];
    v24 = 1;
    v13 = sub_100036994();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, &type metadata for Data, &v24, v3, &type metadata for Data, v13);
    v14 = v23[0];
    v15 = v23[1];
    v22 = 0;
    v16 = sub_10001A9A8(&qword_10110C240);
    v24 = 2;
    sub_10001BBBC(v14, v15);
    v17 = sub_1008D24B0(&qword_10110C248, &qword_10110C240, (uint64_t (*)(void))sub_100436BF8);
    v18 = v22;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v16, &v24, v3, v16, v17);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v18)
    {
      sub_10001BC14(v14, v15);
      swift_bridgeObjectRelease();
      v19 = v22;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      swift_bridgeObjectRelease();
      if (!v19)
        sub_10001BC14(v14, v15);
    }
    else
    {
      v20 = v23[0];
      swift_bridgeObjectRetain(v7);
      sub_10001BBBC(v14, v15);
      swift_bridgeObjectRetain(v20);
      sub_10001BC14(v14, v15);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      swift_bridgeObjectRelease();
      sub_10001BC14(v14, v15);
      swift_bridgeObjectRelease();
    }
  }
  return v7;
}

uint64_t sub_1008D33A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF64616F6C796150)
  {
    v5 = 0xEF64616F6C796150;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEF64616F6C796150, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65566769666E6F63 && a2 == 0xED00006E6F697372)
  {
    v7 = 0xED00006E6F697372;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65566769666E6F63, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    swift_bridgeObjectRelease(0xEA00000000006564);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473, 0xEA00000000006564, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1008D3550(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_10001A9A8(&qword_10110C2B8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1008D3774();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys, &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_10110C2C8);
    BYTE2(v16) = 0;
    v11 = sub_1008D24B0(&qword_10110C2D0, &qword_10110C2C8, (uint64_t (*)(void))sub_1008D37B8);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, (char *)&v16 + 2, v3, v10, v11);
    v7 = v17;
    BYTE1(v16) = 1;
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v16 + 1, v3);
    v15 = 2;
    v13 = sub_1008D1604();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for FetchResponse.Status, &v15, v3, &type metadata for FetchResponse.Status, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1008D3774()
{
  unint64_t result;

  result = qword_10110C2C0;
  if (!qword_10110C2C0)
  {
    result = swift_getWitnessTable(byte_100E53FA4, &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C2C0);
  }
  return result;
}

unint64_t sub_1008D37B8()
{
  unint64_t result;

  result = qword_10110C2D8;
  if (!qword_10110C2D8)
  {
    result = swift_getWitnessTable("%c$", &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload);
    atomic_store(result, (unint64_t *)&qword_10110C2D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys;
}

uint64_t destroy for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  v6 = a2[2];
  swift_bridgeObjectRetain(v4);
  sub_10001BBBC(v5, v6);
  a1[1] = v5;
  a1[2] = v6;
  v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = a2[1];
  v6 = a2[2];
  sub_10001BBBC(v5, v6);
  v7 = a1[1];
  v8 = a1[2];
  a1[1] = v5;
  a1[2] = v6;
  sub_10001BC14(v7, v8);
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = a1[1];
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_10001BC14(v4, v5);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload()
{
  return &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload;
}

unint64_t sub_1008D3A10()
{
  unint64_t result;

  result = qword_10110C2E0;
  if (!qword_10110C2E0)
  {
    result = swift_getWitnessTable("md$", &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C2E0);
  }
  return result;
}

unint64_t sub_1008D3A58()
{
  unint64_t result;

  result = qword_10110C2E8;
  if (!qword_10110C2E8)
  {
    result = swift_getWitnessTable(byte_100E53F54, &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C2E8);
  }
  return result;
}

unint64_t sub_1008D3AA0()
{
  unint64_t result;

  result = qword_10110C2F0;
  if (!qword_10110C2F0)
  {
    result = swift_getWitnessTable("Ud$", &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C2F0);
  }
  return result;
}

unint64_t sub_1008D3AE8()
{
  unint64_t result;

  result = qword_10110C2F8;
  if (!qword_10110C2F8)
  {
    result = swift_getWitnessTable("=d$", &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C2F8);
  }
  return result;
}

unint64_t sub_1008D3B30()
{
  unint64_t result;

  result = qword_10110C300;
  if (!qword_10110C300)
  {
    result = swift_getWitnessTable("\re$", &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C300);
  }
  return result;
}

unint64_t sub_1008D3B78()
{
  unint64_t result;

  result = qword_10110C308;
  if (!qword_10110C308)
  {
    result = swift_getWitnessTable(byte_100E53E34, &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C308);
  }
  return result;
}

unint64_t sub_1008D3BBC()
{
  unint64_t result;

  result = qword_10110C318;
  if (!qword_10110C318)
  {
    result = swift_getWitnessTable("=b$", &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C318);
  }
  return result;
}

uint64_t _s12searchpartyd24OwnedDeviceFetchResponseV25AcsnDeviceLocationPayloadV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1008D3C4C + 4 * byte_100E537DD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1008D3C80 + 4 * byte_100E537D8[v4]))();
}

uint64_t sub_1008D3C80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008D3C88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008D3C90);
  return result;
}

uint64_t sub_1008D3C9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008D3CA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1008D3CA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008D3CB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys;
}

unint64_t sub_1008D3CD0()
{
  unint64_t result;

  result = qword_10110C320;
  if (!qword_10110C320)
  {
    result = swift_getWitnessTable("5b$", &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C320);
  }
  return result;
}

unint64_t sub_1008D3D18()
{
  unint64_t result;

  result = qword_10110C328;
  if (!qword_10110C328)
  {
    result = swift_getWitnessTable(byte_100E54044, &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C328);
  }
  return result;
}

unint64_t sub_1008D3D60()
{
  unint64_t result;

  result = qword_10110C330[0];
  if (!qword_10110C330[0])
  {
    result = swift_getWitnessTable(byte_100E5406C, &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys);
    atomic_store(result, qword_10110C330);
  }
  return result;
}

uint64_t sub_1008D3DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a4;
  v33 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for FailableRecord(255, v33, a2, a3);
  v7 = type metadata accessor for Optional(0, v6);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  __chkstk_darwin(v7);
  v32 = (char *)&v29 - v8;
  v9 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v30 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DirectorySequence(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a1;
  v22 = *(int *)(a1 + 40);
  v34 = v4;
  v23 = v4 + v22;
  sub_1008D4098(v4 + v22, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010F77A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v37, 1, 1, v6);
  }
  v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  DirectorySequence.next()(v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    sub_100004048((uint64_t)v11, &qword_1010FBA40);
    sub_100004048(v23, (uint64_t *)&unk_1010F77A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v23, 1, 1, v18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v37, 1, 1, v6);
  }
  v26 = (uint64_t)v30;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v30, v11, v12);
  v27 = objc_autoreleasePoolPush();
  v28 = v32;
  sub_1008D40E0(v26, v34, v33, *(void (**)(char *, uint64_t))(v31 + 24), v32);
  objc_autoreleasePoolPop(v27);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v26, v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v37, v28, v36);
}

uint64_t sub_1008D4098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008D40E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, uint64_t)@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *);
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  _BOOL4 v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  void (*v140)(char *, uint64_t, uint64_t);
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  void (*v146)(char *, uint64_t);
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t, uint64_t);
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  void (*v162)(char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  v167 = a5;
  v162 = a4;
  v163 = a2;
  v7 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v7);
  v9 = (char *)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional(0, a3);
  v156 = *(_QWORD *)(v10 - 8);
  v157 = (void (*)(char *, uint64_t, uint64_t))v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v153 - v12;
  v168 = a3;
  v161 = *(char **)(a3 - 8);
  __chkstk_darwin(v11);
  v155 = (char *)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v169 = *(_QWORD *)(v15 - 8);
  v170 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v153 - v20;
  v22 = __chkstk_darwin(v19);
  v159 = (char *)&v153 - v23;
  v24 = __chkstk_darwin(v22);
  v160 = (char *)&v153 - v25;
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v153 - v27;
  __chkstk_darwin(v26);
  v165 = (char *)&v153 - v29;
  v30 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v30);
  v32 = (char *)&v153 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for UUID(0);
  v164 = *(_QWORD *)(v166 - 8);
  v33 = __chkstk_darwin(v166);
  v158 = (char *)&v153 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v37 = (char *)&v153 - v36;
  v171 = a1;
  v38 = URL.pathExtension.getter(v35);
  if (v38 == 0xD000000000000010 && v39 == 0x8000000100ECC9E0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v42 = type metadata accessor for Logger(0);
    sub_10001A9E8(v42, (uint64_t)qword_1011B77E8);
    v44 = v169;
    v43 = v170;
    v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v169 + 16);
    v46 = v45(v18, v171, v170);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc(22, -1);
      v50 = swift_slowAlloc(32, -1);
      v174 = v50;
      *(_DWORD *)v49 = 141558275;
      v172 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v49 + 4, v49 + 12);
      *(_WORD *)(v49 + 12) = 2081;
      v51 = sub_1008D4FB0();
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v170, v51);
      v172 = sub_100016940(v52, v53, &v174);
      v44 = v169;
      v43 = v170;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v49 + 14, v49 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v43);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Tombstoned file extension. Skipping file %{private,mask.hash}s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v43);
    }

    v54 = v168;
    v55 = v167;
    v56 = v171;
    v45(v167, v171, v43);
    v57 = &v55[*(int *)(type metadata accessor for BeaconStoreFileRecord(0) + 20)];
    v45(v57, v56, v43);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v57, 0, 1, v43);
    v60 = v54;
    goto LABEL_11;
  }
  v154 = v9;
  v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, 0xD000000000000010, 0x8000000100ECC9E0, 0);
  v41 = swift_bridgeObjectRelease();
  if ((v40 & 1) != 0)
    goto LABEL_5;
  v65 = URL.pathExtension.getter(v41);
  if (v65 == 0x64726F636572 && v66 == 0xE600000000000000)
  {
    v67 = swift_bridgeObjectRelease();
    v68 = v170;
  }
  else
  {
    v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v66, 0x64726F636572, 0xE600000000000000, 0);
    v67 = swift_bridgeObjectRelease();
    v68 = v170;
    if ((v69 & 1) == 0)
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v116 = type metadata accessor for Logger(0);
      sub_10001A9E8(v116, (uint64_t)qword_1011B77E8);
      v117 = v169;
      v118 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v169 + 16))(v21, v171, v68);
      v119 = Logger.logObject.getter(v118);
      v120 = static os_log_type_t.error.getter(v119);
      v121 = os_log_type_enabled(v119, v120);
      v122 = v168;
      if (v121)
      {
        v123 = swift_slowAlloc(22, -1);
        v171 = swift_slowAlloc(32, -1);
        v174 = v171;
        *(_DWORD *)v123 = 141558275;
        v172 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v123 + 4, v123 + 12);
        *(_WORD *)(v123 + 12) = 2081;
        v124 = sub_1008D4FB0();
        v125 = dispatch thunk of CustomStringConvertible.description.getter(v68, v124);
        v172 = sub_100016940(v125, v126, &v174);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v123 + 14, v123 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v169 + 8))(v21, v68);
        _os_log_impl((void *)&_mh_execute_header, v119, v120, "Invalid extension. Skipping file %{private,mask.hash}s", (uint8_t *)v123, 0x16u);
        v127 = v171;
        swift_arrayDestroy(v171, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v127, -1, -1);
        swift_slowDealloc(v123, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v117 + 8))(v21, v68);
      }

      v130 = v122;
      goto LABEL_36;
    }
  }
  v70 = v165;
  v71 = URL.deletingPathExtension()(v67);
  v72 = URL.lastPathComponent.getter(v71);
  v74 = v73;
  v75 = v169;
  v76 = v68;
  v77 = *(void (**)(char *, uint64_t))(v169 + 8);
  v77(v70, v76);
  UUID.init(uuidString:)(v72, v74);
  swift_bridgeObjectRelease();
  v78 = v164;
  v79 = v166;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v32, 1, v166) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v37, v32, v79);
    v90 = v168;
    v91 = v162;
    v93 = (uint64_t)v70;
    v171 = *(int *)(type metadata accessor for FailableRecordSequence(0, v168, (uint64_t)v162, v92) + 36);
    v94 = *(void (**)(char *))(v75 + 16);
    v95 = v70;
    v96 = v170;
    v94(v95);
    swift_retain();
    sub_100888238((uint64_t)v37, v93, v90, (uint64_t)v91);
    swift_release();
    v77((char *)v93, v96);
    v97 = v161;
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v161 + 6))(v13, 1, v90) != 1)
    {
      (*(void (**)(char *, uint64_t))(v164 + 8))(v37, v166);
      v131 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v97 + 4);
      v132 = v155;
      v131(v155, v13, v90);
      v133 = v167;
      v131(v167, v132, v90);
      v61 = type metadata accessor for FailableRecord(0, v90, v134, v135);
      swift_storeEnumTagMultiPayload(v133, v61, 0);
      v62 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56);
      v63 = v133;
      return v62((uint64_t)v63, 0, 1, v61);
    }
    v161 = v37;
    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v156 + 8))(v13, v157);
    v98 = v170;
    v99 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v94)(v93, v163, v170);
    v100 = URL.description.getter(v99);
    v102 = v101;
    v162 = v77;
    v77((char *)v93, v98);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v157 = (void (*)(char *, uint64_t, uint64_t))v94;
    v103 = type metadata accessor for Logger(0);
    sub_10001A9E8(v103, (uint64_t)qword_1011B77E8);
    v104 = v164;
    v105 = v158;
    v106 = v161;
    (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v158, v161, v166);
    swift_bridgeObjectRetain(v102);
    v108 = Logger.logObject.getter(v107);
    v109 = static os_log_type_t.error.getter(v108);
    v110 = v109;
    if (os_log_type_enabled(v108, v109))
    {
      v111 = swift_slowAlloc(42, -1);
      v156 = swift_slowAlloc(64, -1);
      v174 = v156;
      *(_DWORD *)v111 = 141558787;
      v172 = 1752392040;
      v112 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v111 + 4, v111 + 12);
      *(_WORD *)(v111 + 12) = 2081;
      LODWORD(v155) = v110;
      v113 = UUID.uuidString.getter(v112);
      v172 = sub_100016940(v113, v114, &v174);
      v106 = v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v111 + 14, v111 + 22);
      swift_bridgeObjectRelease();
      v164 = *(_QWORD *)(v104 + 8);
      ((void (*)(char *, uint64_t))v164)(v105, v166);
      *(_WORD *)(v111 + 22) = 2160;
      v172 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v111 + 24, v111 + 32);
      *(_WORD *)(v111 + 32) = 2081;
      swift_bridgeObjectRetain(v102);
      v172 = sub_100016940(v100, v102, &v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v111 + 34, v111 + 42);
      swift_bridgeObjectRelease_n(v102, 3);
      _os_log_impl((void *)&_mh_execute_header, v108, (os_log_type_t)v155, "Could not read item %{private,mask.hash}s for records at: %{private,mask.hash}s", (uint8_t *)v111, 0x2Au);
      v115 = v156;
      swift_arrayDestroy(v156, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v115, -1, -1);
      swift_slowDealloc(v111, -1, -1);

    }
    else
    {
      v164 = *(_QWORD *)(v104 + 8);
      ((void (*)(char *, uint64_t))v164)(v105, v166);

      swift_bridgeObjectRelease_n(v102, 2);
    }
    v137 = v163;
    v138 = v170;
    v139 = v160;
    v140 = v157;
    v157(v160, v163, v170);
    swift_retain();
    v161 = (char *)objc_autoreleasePoolPush();
    v141 = UUID.uuidString.getter(v161);
    v142 = v106;
    v143 = v159;
    URL.appendingPathComponent(_:)(v141, v144);
    swift_bridgeObjectRelease();
    URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
    v145 = v142;
    v146 = v162;
    v162(v143, v138);
    objc_autoreleasePoolPop(v161);
    swift_release();
    v146(v139, v138);
    v140(v139, v137, v138);
    swift_retain();
    v147 = objc_autoreleasePoolPush();
    v148 = UUID.uuidString.getter(v147);
    URL.appendingPathComponent(_:)(v148, v149);
    swift_bridgeObjectRelease();
    v150 = (uint64_t)v154;
    URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
    v146(v143, v138);
    objc_autoreleasePoolPop(v147);
    swift_release();
    v146(v139, v138);
    ((void (*)(char *, uint64_t))v164)(v145, v166);
    v151 = v169;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v169 + 56))(v150, 0, 1, v138);
    v55 = v167;
    (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v167, v165, v138);
    v152 = type metadata accessor for BeaconStoreFileRecord(0);
    sub_100027D20(v150, (uint64_t)&v55[*(int *)(v152 + 20)]);
    v60 = v168;
LABEL_11:
    v61 = type metadata accessor for FailableRecord(0, v60, v58, v59);
    swift_storeEnumTagMultiPayload(v55, v61, 1);
    v62 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56);
    v63 = v55;
    return v62((uint64_t)v63, 0, 1, v61);
  }
  v80 = v170;
  v162 = v77;
  sub_100004048((uint64_t)v32, &qword_1010ED860);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v81 = type metadata accessor for Logger(0);
  sub_10001A9E8(v81, (uint64_t)qword_1011B77E8);
  v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v169 + 16))(v28, v171, v80);
  v83 = Logger.logObject.getter(v82);
  v84 = static os_log_type_t.error.getter(v83);
  if (os_log_type_enabled(v83, v84))
  {
    v85 = swift_slowAlloc(22, -1);
    v86 = swift_slowAlloc(32, -1);
    v174 = v86;
    *(_DWORD *)v85 = 141558275;
    v172 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v85 + 4, v85 + 12);
    *(_WORD *)(v85 + 12) = 2081;
    v87 = sub_1008D4FB0();
    v88 = dispatch thunk of CustomStringConvertible.description.getter(v80, v87);
    v172 = sub_100016940(v88, v89, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v85 + 14, v85 + 22);
    swift_bridgeObjectRelease();
    v162(v28, v80);
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Invalid file identifier at URL: %{private,mask.hash}s", (uint8_t *)v85, 0x16u);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v85, -1, -1);
  }
  else
  {
    v162(v28, v80);
  }

  v130 = v168;
LABEL_36:
  v136 = type metadata accessor for FailableRecord(0, v130, v128, v129);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 56))(v167, 1, 1, v136);
}

unint64_t sub_1008D4FB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101108070;
  if (!qword_101108070)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_101108070);
  }
  return result;
}

void sub_1008D4FF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_1008D5660(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v6, a1 + 32);
    }
  }
}

uint64_t *sub_1008D5088(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 40);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DirectorySequence(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_1008D51A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  swift_retain();
  swift_release();
  v7 = *(int *)(a3 + 40);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for DirectorySequence(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_1008D52EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 40);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for DirectorySequence(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1008D53D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 36)) = *(_QWORD *)(a2 + *(int *)(a3 + 36));
  swift_release();
  v7 = *(int *)(a3 + 40);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for DirectorySequence(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_1008D550C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
    v10 = a1 + *(int *)(a3 + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1008D55B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
      return result;
    }
    v10 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1008D5660(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10110C3B8)
  {
    v2 = type metadata accessor for DirectorySequence(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10110C3B8);
  }
}

uint64_t sub_1008D56B4(uint64_t a1)
{
  return swift_getWitnessTable("Yb$", a1);
}

uint64_t sub_1008D56C4@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *i;
  Swift::UInt v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  id v53;
  NSDate v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Class isa;
  uint64_t result;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD v82[10];
  _QWORD *v83;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v8 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v9);
  v68 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BeaconObservation(0);
  v78 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v77 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v62 - v15;
  __chkstk_darwin(v14);
  v66 = (uint64_t)&v62 - v17;
  v18 = type metadata accessor for Date(0);
  v71 = *(_QWORD *)(v18 - 8);
  v72 = v18;
  v19 = __chkstk_darwin(v18);
  v70 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v19);
  if (qword_1010E9CF0 != -1)
LABEL_43:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v21 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  v22 = qword_1011B7160;
  v67 = objc_autoreleasePoolPush();
  v23 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v22, v23);
  v24 = v82[0];
  v25 = *(_QWORD *)(v82[0] + 16);
  v69 = v3;
  if (v25 && (v26 = sub_100003FB0((uint64_t)a1 + v21), (v27 & 1) != 0))
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v26);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease();
    v29 = sub_100508D98(v28);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v29);
    v31 = v30;
    swift_release(v29);
    v3 = _swiftEmptyArrayStorage;
    v83 = _swiftEmptyArrayStorage;
    v76 = *(_QWORD *)(v31 + 16);
    if (v76)
    {
      v63 = a1;
      v64 = v8;
      v65 = a2;
      v32 = 0;
      a1 = qword_100E54358;
      v74 = v16;
      v75 = v11;
      v73 = v31;
      while (1)
      {
        if (v32 >= *(_QWORD *)(v31 + 16))
        {
          __break(1u);
          goto LABEL_43;
        }
        v33 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
        v80 = *(_QWORD *)(v78 + 72);
        v81 = v32 + 1;
        v79 = v33;
        sub_10012D874(v31 + v33 + v80 * v32, (uint64_t)v16);
        sub_100374684();
        v3 = (_QWORD *)Set.init(minimumCapacity:)(7);
        v34 = 0;
        for (i = v3 + 7; ; i = v3 + 7)
        {
          while (1)
          {
            v8 = *((char *)&off_10104DD38 + v34++ + 32);
            Hasher.init(_seed:)(v82);
            v36 = qword_100E54358[v8];
            Hasher._combine(_:)(v36);
            v37 = Hasher._finalize()();
            v38 = -1 << *((_BYTE *)v3 + 32);
            a2 = v37 & ~v38;
            if (((*(_QWORD *)((char *)i + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
              goto LABEL_17;
            v39 = v3[6];
            if (qword_100E54358[*(char *)(v39 + a2)] != v36)
              break;
LABEL_10:
            if (v34 == 7)
              goto LABEL_19;
          }
          v40 = ~v38;
          while (1)
          {
            a2 = (a2 + 1) & v40;
            if (((*(_QWORD *)((char *)i + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
              break;
            if (qword_100E54358[*(char *)(v39 + a2)] == v36)
              goto LABEL_10;
          }
LABEL_17:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
          v82[0] = v3;
          sub_100A1F790(v8, a2, isUniquelyReferenced_nonNull_native);
          v3 = (_QWORD *)v82[0];
          swift_bridgeObjectRelease();
          if (v34 == 7)
            break;
        }
LABEL_19:
        v16 = v74;
        v11 = v75;
        v42 = sub_100A07E5C(v74[*(int *)(v75 + 24)], (uint64_t)v3);
        swift_bridgeObjectRelease();
        if (v42)
        {
          sub_10012D934((uint64_t)v16, v77);
          v3 = v83;
          if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
          {
            sub_10009AAC8(0, v3[2] + 1, 1);
            v3 = v83;
          }
          v8 = v79;
          v44 = v3[2];
          v43 = v3[3];
          a2 = v44 + 1;
          if (v44 >= v43 >> 1)
          {
            sub_10009AAC8(v43 > 1, v44 + 1, 1);
            v3 = v83;
          }
          v3[2] = a2;
          sub_10012D934(v77, (uint64_t)v3 + v8 + v44 * v80);
        }
        else
        {
          sub_10012D8F8((uint64_t)v16);
        }
        v31 = v73;
        v32 = v81;
        if (v81 == v76)
        {
          v3 = v83;
          a2 = v65;
          v8 = v64;
          a1 = v63;
          break;
        }
      }
    }
    swift_release(v31);
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = _swiftEmptyArrayStorage;
  }
  v45 = v70;
  v46 = (void *)SPBeaconTaskNamePlaySound;
  objc_autoreleasePoolPop(v67);
  v47 = v68;
  sub_100A797E8((uint64_t)v3, v68);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v47, 1, v11) == 1)
  {
    sub_100004048(v47, &qword_1010EF660);
    v48 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v45, v72);
    v49 = v47;
    v50 = v66;
    sub_10012D934(v49, v66);
    v51 = *(unsigned __int8 *)(v50 + *(int *)(v11 + 24)) - 23;
    if (v51 > 2)
      v48 = 2;
    else
      v48 = qword_100E54340[(char)v51];
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v45, v50 + *(int *)(v11 + 20), v72);
    sub_10012D8F8(v50);
  }
  v52 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError);
  if (v52)
    v48 = 3;
  v53 = v46;
  swift_errorRetain(v52);
  v54.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (v52)
  {
    v55 = (void *)_convertErrorToNSError(_:)(v52);
    swift_errorRelease(v52);
  }
  else
  {
    v55 = 0;
  }
  v56 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v53, v54.super.isa, v55, v48);

  v57 = (uint64_t)a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier;
  swift_beginAccess((char *)a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier, v82, 0, 0);
  sub_10000F9B8(v57, v8, &qword_1010ED860);
  v58 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v58 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v8, 1, v58) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v8, v58);
  }
  objc_msgSend(v56, "setCommandIdentifier:", isa);

  result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v70, v72);
  *(_QWORD *)a2 = v56;
  return result;
}

uint64_t sub_1008D5DDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *i;
  uint64_t v34;
  Swift::UInt v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  BOOL v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  NSDate v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Class isa;
  uint64_t result;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD v81[10];
  _QWORD *v82;

  v3 = v2;
  v70 = a1;
  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v8);
  v66 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconObservation(0);
  v77 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v76 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v61 - v14;
  __chkstk_darwin(v13);
  v64 = (uint64_t)&v61 - v16;
  v69 = type metadata accessor for Date(0);
  v68 = *(_QWORD *)(v69 - 8);
  v17 = __chkstk_darwin(v69);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v17);
  if (qword_1010E9CF0 != -1)
LABEL_40:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v20 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  v21 = qword_1011B7160;
  v65 = objc_autoreleasePoolPush();
  v22 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v21, v22);
  v67 = v3;
  v23 = v81[0];
  if (*(_QWORD *)(v81[0] + 16) && (v24 = sub_100003FB0(v70 + v20), (v25 & 1) != 0))
  {
    v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease();
    v27 = sub_100508D98(v26);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v27);
    v29 = v28;
    swift_release(v27);
    v3 = _swiftEmptyArrayStorage;
    v82 = _swiftEmptyArrayStorage;
    v75 = *(_QWORD *)(v29 + 16);
    if (v75)
    {
      v62 = v7;
      v63 = a2;
      v30 = 0;
      v7 = (char *)qword_100E54358;
      v73 = v10;
      v74 = v19;
      v71 = v29;
      v72 = v15;
      while (1)
      {
        if (v30 >= *(_QWORD *)(v29 + 16))
        {
          __break(1u);
          goto LABEL_40;
        }
        v31 = *(_QWORD *)(v77 + 72);
        v79 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
        v80 = v30 + 1;
        v78 = v31;
        sub_10012D874(v29 + v79 + v31 * v30, (uint64_t)v15);
        sub_100374684();
        v3 = (_QWORD *)Set.init(minimumCapacity:)(7);
        v32 = 0;
        for (i = v3 + 7; ; i = v3 + 7)
        {
          while (1)
          {
            v34 = *((char *)&off_10104DD60 + v32++ + 32);
            Hasher.init(_seed:)(v81);
            v35 = qword_100E54358[v34];
            Hasher._combine(_:)(v35);
            v36 = Hasher._finalize()();
            v37 = -1 << *((_BYTE *)v3 + 32);
            a2 = v36 & ~v37;
            if (((*(_QWORD *)((char *)i + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
              goto LABEL_17;
            v38 = v3[6];
            if (qword_100E54358[*(char *)(v38 + a2)] != v35)
              break;
LABEL_10:
            if (v32 == 7)
              goto LABEL_19;
          }
          v39 = ~v37;
          while (1)
          {
            a2 = (a2 + 1) & v39;
            if (((*(_QWORD *)((char *)i + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
              break;
            if (qword_100E54358[*(char *)(v38 + a2)] == v35)
              goto LABEL_10;
          }
LABEL_17:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
          v81[0] = v3;
          sub_100A1F790(v34, a2, isUniquelyReferenced_nonNull_native);
          v3 = (_QWORD *)v81[0];
          swift_bridgeObjectRelease();
          if (v32 == 7)
            break;
        }
LABEL_19:
        v15 = v72;
        v10 = v73;
        v41 = sub_100A07E5C(v72[*(int *)(v73 + 24)], (uint64_t)v3);
        swift_bridgeObjectRelease();
        if (v41)
        {
          sub_10012D934((uint64_t)v15, v76);
          v3 = v82;
          v42 = swift_isUniquelyReferenced_nonNull_native(v82);
          v19 = v74;
          if ((v42 & 1) == 0)
          {
            sub_10009AAC8(0, v3[2] + 1, 1);
            v3 = v82;
          }
          v44 = v3[2];
          v43 = v3[3];
          a2 = v44 + 1;
          if (v44 >= v43 >> 1)
          {
            sub_10009AAC8(v43 > 1, v44 + 1, 1);
            v3 = v82;
          }
          v3[2] = a2;
          sub_10012D934(v76, (uint64_t)v3 + v79 + v44 * v78);
        }
        else
        {
          sub_10012D8F8((uint64_t)v15);
          v19 = v74;
        }
        v29 = v71;
        v30 = v80;
        if (v80 == v75)
        {
          v3 = v82;
          a2 = v63;
          v7 = v62;
          break;
        }
      }
    }
    swift_release(v29);
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = _swiftEmptyArrayStorage;
  }
  objc_autoreleasePoolPop(v65);
  v45 = v66;
  sub_100A797E8((uint64_t)v3, v66);
  v46 = v45;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v45, 1, v10) == 1)
  {
    sub_100004048(v45, &qword_1010EF660);
    v47 = 2;
  }
  else
  {
    v48 = v68;
    v49 = v69;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v19, v69);
    v50 = v64;
    sub_10012D934(v46, v64);
    v47 = 2 * (*(_BYTE *)(v50 + *(int *)(v10 + 24)) != 26);
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v19, v50 + *(int *)(v10 + 20), v49);
    sub_10012D8F8(v50);
  }
  v51 = *(_QWORD *)(v70 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError);
  if (v51)
    v47 = 3;
  v52 = SPBeaconTaskNameStopSound;
  swift_errorRetain(v51);
  v53.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (v51)
  {
    v54 = (void *)_convertErrorToNSError(_:)(v51);
    swift_errorRelease(v51);
  }
  else
  {
    v54 = 0;
  }
  v55 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v52, v53.super.isa, v54, v47);

  v56 = v70 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier;
  swift_beginAccess(v70 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier, v81, 0, 0);
  sub_10000F9B8(v56, (uint64_t)v7, &qword_1010ED860);
  v57 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v57 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v7, 1, v57) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v7, v57);
  }
  objc_msgSend(v55, "setCommandIdentifier:", isa);

  result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v19, v69);
  *(_QWORD *)a2 = v55;
  return result;
}

uint64_t sub_1008D64F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, char *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  _QWORD aBlock[7];

  v49 = a3;
  v50 = a4;
  v40 = a2;
  v53 = a1;
  v45 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v4 + 56);
  v41 = v16;
  v42 = v15;
  v52 = *(void (**)(char *, uint64_t))(v12 + 16);
  v17 = a1;
  v18 = v16;
  v52(v14, v17);
  v19 = *(unsigned __int8 *)(v12 + 80);
  v20 = (v19 + 24) & ~v19;
  v43 = v19 | 7;
  v44 = v13 + 7;
  v21 = (v13 + 7 + v20) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_10109A920, v21 + 8, v19 | 7);
  *(_QWORD *)(v22 + 16) = v4;
  v51 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v51(v22 + v20, v14, v18);
  *(_QWORD *)(v22 + v21) = v40;
  aBlock[4] = sub_1008DD2E8;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10109A938;
  v23 = _Block_copy(aBlock);
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v54 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v28 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v26, v27, v45, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v28);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v47);
  swift_release();
  v29 = v41;
  ((void (*)(char *, uint64_t, uint64_t))v52)(v14, v53, v41);
  v30 = (v19 + 16) & ~v19;
  v31 = v43;
  v32 = (v44 + v30) & 0xFFFFFFFFFFFFFFF8;
  v48 = v32 + 16;
  v33 = swift_allocObject(&unk_10109A970, v32 + 16, v43);
  v51(v33 + v30, v14, v29);
  v34 = (_QWORD *)(v33 + v32);
  v36 = v49;
  v35 = v50;
  *v34 = v49;
  v34[1] = v35;
  swift_retain();
  Future.addFailure(block:)(sub_1008DD084, v33);
  swift_release();
  swift_release();
  ((void (*)(char *, uint64_t, uint64_t))v52)(v14, v53, v29);
  v37 = swift_allocObject(&unk_10109A998, v48, v31);
  v51(v37 + v30, v14, v29);
  v38 = (_QWORD *)(v37 + v32);
  *v38 = v36;
  v38[1] = v35;
  swift_retain();
  Future.addSuccess(block:)(sub_1008DD08C, v37);
  swift_release();
  return swift_release();
}

uint64_t sub_1008D688C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  v11 = &v17[-v10 - 8];
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  sub_100005CF0((uint64_t)v11, (uint64_t)v9, &qword_1010ED860);
  v14 = a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier, v17, 33, 0);
  sub_100004084((uint64_t)v9, v14, &qword_1010ED860);
  swift_endAccess(v17);
  return sub_1008D7FE4(a3);
}

uint64_t sub_1008D69B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(uint64_t, char *, uint64_t);
  uint64_t v52;
  _QWORD *v53;
  _QWORD aBlock[7];

  v47 = a2;
  v48 = a3;
  v52 = a1;
  v43 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = v3;
  v40[1] = *(_QWORD *)(v3 + 56);
  v41 = v14;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v49 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v15;
  v16 = a1;
  v17 = v14;
  ((void (*)(char *, uint64_t))v15)(v49, v16);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = (v18 + 24) & ~v18;
  v42 = v18 | 7;
  v20 = swift_allocObject(&unk_10109A7E0, v19 + v12, v18 | 7);
  *(_QWORD *)(v20 + 16) = v13;
  v51 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v51(v20 + v19, (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  aBlock[4] = sub_1008DD050;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10109A7F8;
  v21 = _Block_copy(aBlock);
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v53 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v26 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v24, v25, v43, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v45);
  swift_release();
  v27 = v49;
  v28 = v41;
  v50(v49, v52, v41);
  v29 = (v18 + 16) & ~v18;
  v30 = (v12 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = v42;
  v32 = swift_allocObject(&unk_10109A830, v30 + 16, v42);
  v51(v32 + v29, v27, v28);
  v33 = (_QWORD *)(v32 + v30);
  v35 = v47;
  v34 = v48;
  *v33 = v47;
  v33[1] = v34;
  swift_retain();
  Future.addFailure(block:)(sub_1008DD084, v32);
  swift_release();
  swift_release();
  v36 = v49;
  v50(v49, v52, v28);
  v37 = swift_allocObject(&unk_10109A858, v30 + 16, v31);
  v51(v37 + v29, v36, v28);
  v38 = (_QWORD *)(v37 + v30);
  *v38 = v35;
  v38[1] = v34;
  swift_retain();
  Future.addSuccess(block:)(sub_1008DD08C, v37);
  swift_release();
  return swift_release();
}

uint64_t sub_1008D6D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v15[-v8 - 8];
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v9, a2, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  sub_100005CF0((uint64_t)v9, (uint64_t)v7, &qword_1010ED860);
  v12 = a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier, v15, 33, 0);
  sub_100004084((uint64_t)v7, v12, &qword_1010ED860);
  swift_endAccess(v15);
  return sub_1008DA98C();
}

uint64_t sub_1008D6E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD aBlock[6];

  v36 = a3;
  v37 = a4;
  v33 = a2;
  v35 = a1;
  v38 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
  v34 = static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v33, v9);
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_10109A8D0, v20 + 8, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21 + v18, v12, v9);
  v22 = (_QWORD *)(v21 + v19);
  v23 = v37;
  *v22 = v36;
  v22[1] = v23;
  v24 = v35;
  *(_QWORD *)(v21 + v20) = v35;
  aBlock[4] = sub_1008DD218;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10109A8E8;
  v25 = _Block_copy(aBlock);
  swift_retain();
  v26 = swift_errorRetain(v24);
  static DispatchQoS.unspecified.getter(v26);
  v42 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v30 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v28, v29, v38, v27);
  v31 = (void *)v34;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v5, v30);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v40);
  return swift_release();
}

uint64_t sub_1008D7188(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  v11 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v12 = (void *)static OS_os_log.default.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)("SoundPlaybackCoordinator: calling failure for commandIdentifier %@", 66, 2, &_mh_execute_header, v12, v13, v7);
  swift_bridgeObjectRelease();

  return a2(a4);
}

uint64_t sub_1008D7274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD aBlock[6];

  v41 = a3;
  v42 = a4;
  v38 = a2;
  v39 = a1;
  v44 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v37 - v13;
  v15 = type metadata accessor for DispatchQoS.QoSClass(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchQoS.QoSClass.default(_:), v15);
  v40 = static OS_dispatch_queue.global(qos:)(v18);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19(v14, v38, v8);
  v19(v12, v39, v8);
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v10 + v20 + v21) & ~v20;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_10109A880, v23 + 16, v20 | 7);
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v25(v24 + v21, v14, v8);
  v25(v24 + v22, v12, v8);
  v26 = (_QWORD *)(v24 + v23);
  v27 = v42;
  *v26 = v41;
  v26[1] = v27;
  aBlock[4] = sub_1008DD134;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10109A898;
  v28 = _Block_copy(aBlock);
  v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  v48 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v34 = v43;
  v33 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v31, v32, v44, v30);
  v35 = (void *)v40;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v34, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v33);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v46);
  return swift_release();
}

uint64_t sub_1008D75C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B10;
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v9 = sub_10001AA00();
  *(_QWORD *)(v5 + 64) = v9;
  *(_QWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 40) = v8;
  v10 = UUID.uuidString.getter(v9);
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v9;
  *(_QWORD *)(v5 + 72) = v10;
  *(_QWORD *)(v5 + 80) = v11;
  v12 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v13 = (void *)static OS_os_log.default.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("SoundPlaybackCoordinator: calling success for commandIdentifier %@ beacon %@", 76, 2, &_mh_execute_header, v13, v14, v5);
  swift_bridgeObjectRelease();

  return a3(0);
}

uint64_t sub_1008D76CC()
{
  return sub_1008D7714((uint64_t)sub_1008DCE10, (uint64_t)&unk_10109A790, (uint64_t)sub_1008DCF50, (uint64_t)&unk_10109A7A8);
}

uint64_t sub_1008D76F0()
{
  return sub_1008D7714((uint64_t)sub_1008DCE10, (uint64_t)&unk_10109A740, (uint64_t)sub_1008DCE28, (uint64_t)&unk_10109A758);
}

uint64_t sub_1008D7714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  const void *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD aBlock[6];

  v61 = a4;
  v60 = a3;
  v59 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v72 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v70 = *(_QWORD *)(v9 - 8);
  v71 = v9;
  __chkstk_darwin(v9);
  v69 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for UUID(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = v11;
  v65 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DispatchQoS.QoSClass(0);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  v73 = *(_QWORD *)(v78 - 8);
  v13 = *(_QWORD *)(v73 + 64);
  v14 = __chkstk_darwin(v78);
  v15 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v77 = (char *)&v48 - v16;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 56));
  v17 = sub_10001A9A8(&qword_10110C678);
  v74 = v4;
  OS_dispatch_queue.sync<A>(execute:)(a1, v4, v17);
  v18 = aBlock[0];
  v19 = *(_QWORD *)(aBlock[0] + 16);
  if (v19)
  {
    v57 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v56 = v74 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
    v20 = *(unsigned __int8 *)(v73 + 80);
    v48 = v18;
    v21 = (char *)(v18 + ((v20 + 32) & ~v20));
    v54 = *(_QWORD *)(v73 + 72);
    v53 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    v52 = enum case for DispatchQoS.QoSClass.default(_:);
    v55 = v20;
    v51 = (v20 + 16) & ~v20;
    v50 = (v13 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = v50 + 8;
    v23 = v77;
    v22 = v78;
    v58 = v7;
    v76 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    do
    {
      v75 = v19;
      v24 = v53;
      v53(v23, v21, v22);
      v25 = v63;
      v26 = v62;
      v27 = v64;
      (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v62, v52, v64);
      v28 = (void *)static OS_dispatch_queue.global(qos:)(v26);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v27);
      v24(v15, v77, v22);
      v29 = v67;
      v30 = v65;
      v31 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v65, v56, v68);
      v32 = *(unsigned __int8 *)(v29 + 80);
      v33 = (v49 + v32) & ~v32;
      v34 = swift_allocObject(v59, v33 + v66, v55 | v32 | 7);
      v35 = v73;
      (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v34 + v51, v76, v78);
      *(_QWORD *)(v34 + v50) = v74;
      (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v34 + v33, v30, v31);
      aBlock[4] = v60;
      aBlock[5] = v34;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = v61;
      v36 = _Block_copy(aBlock);
      v37 = swift_retain();
      v38 = v69;
      static DispatchQoS.unspecified.getter(v37);
      v79 = _swiftEmptyArrayStorage;
      v39 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v40 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v41 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v42 = v72;
      v43 = v58;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v40, v41, v6, v39);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v42, v36);
      v44 = v36;
      v23 = v77;
      v22 = v78;
      _Block_release(v44);

      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v6);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v38, v71);
      v45 = *(void (**)(char *, uint64_t))(v35 + 8);
      v46 = v75;
      v15 = v76;
      v45(v23, v22);
      swift_release();
      v21 += v54;
      v19 = v46 - 1;
    }
    while (v19);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1008D7C98(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  _QWORD v8[5];

  v6 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  Subscription.subscriber.getter(v8, v6);
  sub_10001AA44(v8, v8[3]);
  a4(a3);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
}

uint64_t sub_1008D7D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for BeaconObservation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v0 + 56));
  v7 = static os_log_type_t.default.getter(v6);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7D50, "SoundPlaybackCoordinator: allPlaybackEnded", 42, 2, _swiftEmptyArrayStorage);
  v8 = v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer, v25, 0, 0);
  sub_10000F9B8(v8, (uint64_t)&v26, &qword_10110C640);
  if (*((_QWORD *)&v27 + 1))
  {
    sub_100030784((uint64_t)&v26, (uint64_t)v22);
    sub_100004048((uint64_t)&v26, &qword_10110C640);
    v9 = v23;
    v10 = v24;
    sub_10001AA44(v22, v23);
    dispatch thunk of Cancellable.cancel()(v9, v10);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  }
  else
  {
    sub_100004048((uint64_t)&v26, &qword_10110C640);
  }
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  swift_beginAccess(v8, v22, 33, 0);
  sub_100004084((uint64_t)&v26, v8, &qword_10110C640);
  swift_endAccess(v22);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v11 = qword_1011B7160;
  v12 = v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  v13 = type metadata accessor for UUID(0);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v5, v12, v13);
  Date.init()(v14);
  v5[*(int *)(v2 + 24)] = 27;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v16 = *(unsigned __int8 *)(v3 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v15, v17 + *(_QWORD *)(v3 + 72), v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  sub_10012D874((uint64_t)v5, v18 + v17);
  v19 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v19);
  *(&v21 - 4) = v11;
  *(&v21 - 3) = v18;
  *(&v21 - 2) = 0;
  *(&v21 - 1) = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v21 - 6, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  sub_10012D8F8((uint64_t)v5);
  sub_1008D76CC();
  return sub_1008D76F0();
}

uint64_t sub_1008D7FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for BeaconObservation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 56));
  v9 = static os_log_type_t.default.getter(v8);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D50, "SoundPlaybackCoordinator: requesting playSound()", 48, 2, _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F7A20);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.SoundPlaybackCoordinator.playSound", 64, 2, sub_1008DCBAC, v2, v10);
  swift_release();
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v11 = qword_1011B7160;
  v12 = v2 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  v13 = type metadata accessor for UUID(0);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, v12, v13);
  Date.init()(v14);
  v7[*(int *)(v4 + 24)] = 24;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v16 = *(_QWORD *)(v5 + 72);
  v17 = *(unsigned __int8 *)(v5 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(v15, v18 + v16, v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
  v20 = sub_10012D874((uint64_t)v7, v19 + v18);
  __chkstk_darwin(v20);
  *(&v39 - 4) = v11;
  *(&v39 - 3) = v19;
  v37 = 0;
  v38 = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v39 - 6, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  sub_10012D8F8((uint64_t)v7);
  v21 = sub_1008D76CC();
  v22 = dispatch thunk of Future.isFinished.getter(v21);
  if ((v22 & 1) != 0)
  {
    v36 = static os_log_type_t.error.getter(v22);
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, qword_1011B7D50, "SoundPlaybackCoordinator: Play called on an already started playback coordinator.", 81, 2, _swiftEmptyArrayStorage);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000047, 0x8000000100EEA840, "searchpartyd/SoundPlaybackCoordinator.swift", 43, 2, 218, 0);
    __break(1u);
  }
  else
  {
    v23 = type metadata accessor for AnalyticsEvent(0);
    v24 = (char *)swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    swift_defaultActor_initialize(v24);
    v25 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
    *((_QWORD *)v24 + 14) = v25;
    UUID.init()(v25);
    v26 = &v24[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    v27 = type metadata accessor for DispatchTime(0);
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
    v28(v26, 1, 1, v27);
    v28(&v24[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v27);
    *((_QWORD *)v24 + 15) = 0xD00000000000002CLL;
    *((_QWORD *)v24 + 16) = 0x8000000100EEA770;
    v29 = (_QWORD *)swift_allocObject(&unk_10109A600, 40, 7);
    v29[2] = v24;
    v29[3] = a1;
    v29[4] = v2;
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("PlayAnalytics", 13, 2, &unk_10110C650, v29);
    swift_release();
    sub_10001AA44((_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40));
    sub_10066B3BC(v12, a1);
    v30 = swift_allocObject(&unk_10109A448, 24, 7);
    swift_weakInit(v30 + 16, v2);
    v31 = swift_allocObject(&unk_10109A628, 32, 7);
    *(_QWORD *)(v31 + 16) = v24;
    *(_QWORD *)(v31 + 24) = v30;
    swift_retain();
    Future.addSuccess(block:)(sub_1008DCC50, v31);
    swift_release();
    swift_release();
    v32 = swift_allocObject(&unk_10109A448, 24, 7);
    swift_weakInit(v32 + 16, v2);
    swift_retain();
    Future.addFailure(block:)(sub_1008DCC58, v32);
    swift_release();
    swift_release_n(v32, 2);
    v33 = swift_allocObject(&unk_10109A448, 24, 7);
    swift_weakInit(v33 + 16, v2);
    v34 = swift_allocObject(&unk_10109A650, 32, 7);
    *(_QWORD *)(v34 + 16) = v24;
    *(_QWORD *)(v34 + 24) = v33;
    swift_retain();
    Future.addCompletion(block:)(sub_1008DCC64, v34);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1008D8548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  id v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[6];
  _BYTE v26[24];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a3 + 16, v26, 0, 0);
  result = swift_weakLoadStrong(a3 + 16);
  if (result)
  {
    v15 = *(id *)(result + 56);
    swift_release();
    v16 = (_QWORD *)swift_allocObject(&unk_10109A6F0, 40, 7);
    v16[2] = a4;
    v16[3] = a3;
    v16[4] = a2;
    aBlock[4] = sub_1008DCE04;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_10109A708;
    v17 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v18 = swift_errorRetain(a2);
    static DispatchQoS.unspecified.getter(v18);
    v24 = _swiftEmptyArrayStorage;
    v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v7, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v17);
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return swift_release();
  }
  return result;
}

uint64_t sub_1008D878C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  Transaction.capture()();
  swift_beginAccess(v4, v8, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError);
    *(_QWORD *)(result + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError) = a3;
    swift_errorRetain(a3);
    swift_errorRelease(v6);
    result = swift_release();
  }
  if (a3)
  {
    swift_beginAccess(v4, &v7, 0, 0);
    result = swift_weakLoadStrong(v4);
    if (result)
    {
      sub_1008D7D00();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1008D8844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v5;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v5);
  v3[9] = swift_task_alloc(v5);
  return swift_task_switch(sub_1008D88B8, a1, 0);
}

uint64_t sub_1008D88B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[8];
  v2 = v1[9];
  v4 = v1[5];
  static DispatchTime.now()(a1);
  v5 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
  sub_100005CF0(v2, v3, &qword_1010EBE20);
  v6 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 2, 33, 0);
  sub_100004084(v3, v6, &qword_1010EBE20);
  swift_endAccess(v1 + 2);
  return swift_task_switch(sub_1008D8988, 0, 0);
}

uint64_t sub_1008D8988()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain();
  return swift_task_switch(sub_1008D89C8, v1, 0);
}

uint64_t sub_1008D89C8()
{
  uint64_t v0;
  uint64_t v1;

  sub_100CF0270(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  swift_release();
  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1008D8A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  void *v11;
  id v12;
  id result;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  id v20;
  char v21;
  unint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id v32;
  id v33;
  _BOOL8 v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  NSString v46;
  char v47;
  id v48;
  uint64_t v49;
  char v50;
  id v51;
  void *v52;
  id v53;
  NSString v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  char v58[64];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v8, v58);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = 0x6C4154556D6F7266;
  *(_QWORD *)(inited + 40) = 0xEB00000000747265;
  *(_QWORD *)(inited + 48) = a1 == 2;
  *(_BYTE *)(inited + 56) = 1;
  v10 = sub_1006B9444(inited);
  v11 = *(void **)(a2 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon);
  if (!v11)
    return (id)v10;
  v12 = v11;
  result = objc_msgSend(v12, "systemVersion");
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  v14 = (uint64_t)result;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  v57 = v10;
  sub_10010AC08(v14, 0, 0xD000000000000013, 0x8000000100ED0EC0, isUniquelyReferenced_nonNull_native);
  v16 = v57;
  swift_bridgeObjectRelease();
  result = objc_msgSend(v12, "systemVersion");
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v17 = (uint64_t)result;
  v18 = swift_isUniquelyReferenced_nonNull_native(v16);
  v57 = v16;
  sub_10010AC08(v17, 0, 0xD00000000000001BLL, 0x8000000100ED0EE0, v18);
  v19 = v57;
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(v12, "batteryLevel"));
  v21 = swift_isUniquelyReferenced_nonNull_native(v19);
  v57 = v19;
  sub_10010AC08((uint64_t)v20, 0, 0x4C79726574746162, 0xEC0000006C657665, v21);
  v22 = v57;
  swift_bridgeObjectRelease();
  v23 = SPBeaconTaskNameBeginLeashing;
  v24 = objc_msgSend(v12, "taskInformation");
  type metadata accessor for SPBeaconTaskName(0);
  v26 = v25;
  v27 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  v28 = sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, v26, v27, v28);

  if (*(_QWORD *)(v29 + 16) && (v30 = sub_100519464(v23), (v31 & 1) != 0))
  {
    v32 = *(id *)(*(_QWORD *)(v29 + 56) + 8 * v30);

    swift_bridgeObjectRelease();
    v33 = objc_msgSend(v32, "state");

    v34 = v33 == 0;
  }
  else
  {

    swift_bridgeObjectRelease();
    v34 = 0;
  }
  v35 = swift_isUniquelyReferenced_nonNull_native(v22);
  v57 = v22;
  sub_10010AC08(v34, 1, 0x6563697665447369, 0xEF6465687361654CLL, v35);
  v36 = v57;
  swift_bridgeObjectRelease();
  v37 = objc_msgSend(v12, "connected");
  v38 = swift_isUniquelyReferenced_nonNull_native(v36);
  v57 = v36;
  sub_10010AC08(v37, 1, 0xD000000000000011, 0x8000000100ECAF20, v38);
  v10 = v57;
  swift_bridgeObjectRelease();
  v39 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v40 = objc_msgSend(v39, "isInternalBuild");

  if (!v40)
    goto LABEL_14;
  result = objc_msgSend(v12, "name");
  if (result)
  {
    v41 = (uint64_t)result;
    v42 = swift_isUniquelyReferenced_nonNull_native(v10);
    v57 = v10;
    sub_10010AC08(v41, 0, 0xD000000000000010, 0x8000000100EEA980, v42);
    v43 = v57;
    swift_bridgeObjectRelease();
    v44 = objc_msgSend(v12, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

    UUID.uuidString.getter(v45);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v47 = swift_isUniquelyReferenced_nonNull_native(v43);
    v57 = v43;
    sub_10010AC08((uint64_t)v46, 0, 0x6544646572696170, 0xEE00444965636976, v47);
    v10 = v57;
    swift_bridgeObjectRelease();
    v48 = objc_msgSend(v12, "serialNumber");
    if (v48)
    {
      v49 = (uint64_t)v48;
      v50 = swift_isUniquelyReferenced_nonNull_native(v10);
      v57 = v10;
      sub_10010AC08(v49, 0, 0xD000000000000018, 0x8000000100ECAF40, v50);
      v10 = v57;
      swift_bridgeObjectRelease();
    }
    v51 = objc_msgSend(v12, "role");
    if (v51)
    {
      v52 = v51;
      v53 = objc_msgSend(v51, "role");

      static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v55 = swift_isUniquelyReferenced_nonNull_native(v10);
      v57 = v10;
      sub_10010AC08((uint64_t)v54, 0, 0xD000000000000010, 0x8000000100EEA9A0, v55);
      v10 = v57;

      swift_bridgeObjectRelease();
      return (id)v10;
    }
LABEL_14:

    return (id)v10;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1008D906C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Strong;
  _BYTE v19[24];
  _BYTE v20[24];

  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *a1;
  v15 = a3 + 16;
  v16 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7D50, "#Durian: commandManager completed sound playback.", 49, 2, _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0);
  swift_retain();
  static Transaction.asyncTask(name:block:)("PlayAnalytics", 13, 2, &unk_10110C670, a2);
  swift_release();
  swift_beginAccess(v15, v20, 0, 0);
  Strong = swift_weakLoadStrong(v15);
  if (!Strong)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    return sub_100004048((uint64_t)v8, &qword_1010ED860);
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v8, Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier, v9);
  swift_release();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100004048((uint64_t)v8, &qword_1010ED860);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v13, v8, v9);
  swift_beginAccess(v15, v19, 0, 0);
  if (swift_weakLoadStrong(v15))
  {
    sub_1008DB908(v14, (uint64_t)v13, 0);
    swift_release();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1008D92CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[5] = a1;
  v3 = sub_10001A9A8(&qword_1010EBE20);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchTime(0);
  v1[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[8] = v5;
  v1[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008D9354, a1, 0);
}

uint64_t sub_1008D9354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v2, v0 + 16, 0, 0);
  sub_10000F9B8(v2, v1, &qword_1010EBE20);
  return swift_task_switch(sub_1008D93C4, 0, 0);
}

uint64_t sub_1008D93C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_1010EBE20);
    v4 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v1);
    v8 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 80) = v8;
    *(_QWORD *)(v8 + 16) = v6;
    return swift_task_switch(sub_1008D9498, v7, 0);
  }
}

uint64_t sub_1008D9498()
{
  uint64_t v0;

  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_1008DCD90);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return swift_task_switch(sub_1008D9518, 0, 0);
}

uint64_t sub_1008D9518()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1008D9564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  _BYTE v11[64];

  v0 = type metadata accessor for DispatchTime(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = static DispatchTime.now()(v2);
  v6 = DispatchTime.uptimeNanoseconds.getter(v5);
  result = DispatchTime.uptimeNanoseconds.getter(v6);
  if (v6 < result)
  {
    __break(1u);
  }
  else
  {
    v8 = sub_10001A9A8(&qword_1010EEBD0);
    inited = swift_initStackObject(v8, v11);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = 0x4474736575716572;
    *(_QWORD *)(inited + 40) = 0xEF6E6F6974617275;
    *(NSNumber *)(inited + 48) = Double._bridgeToObjectiveC()();
    *(_BYTE *)(inited + 56) = 0;
    v10 = sub_1006B9444(inited);
    (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v4, v0);
    return v10;
  }
  return result;
}

uint64_t sub_1008D968C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE v25[24];
  _QWORD v26[3];
  _BYTE v27[8];

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2 + 16;
  v13 = static os_log_type_t.error.getter(v9);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v14 = qword_1011B7D50;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  v23 = a1;
  swift_getErrorValue(a1, v27, v26);
  v17 = Error.localizedDescription.getter(v26[1], v26[2]);
  v19 = v18;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "#Durian: Error during play sound. Error - %@", 44, 2, v16);
  swift_bridgeObjectRelease();
  swift_beginAccess(v12, v25, 0, 0);
  Strong = swift_weakLoadStrong(v12);
  if (!Strong)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_100004048((uint64_t)v6, &qword_1010ED860);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier, v7);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_100004048((uint64_t)v6, &qword_1010ED860);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
  swift_beginAccess(v12, v24, 0, 0);
  if (swift_weakLoadStrong(v12))
  {
    sub_1008DB908(0, (uint64_t)v11, v23);
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1008D9920(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t Strong;
  uint64_t v40;
  uint64_t result;
  id v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66[8];
  uint64_t v67;
  uint64_t v68;
  char v69[8];
  _QWORD v70[3];
  char v71[8];
  char v72[24];
  _QWORD *v73;
  _QWORD aBlock[6];
  char v75[16];
  char v76[8];

  v63 = a3;
  v61 = type metadata accessor for DispatchWorkItemFlags(0);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v59 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v56 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for UUID(0);
  v64 = *(_QWORD *)(v65 - 8);
  v12 = __chkstk_darwin(v65);
  v54 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v55 = a4;
  v62 = a4 + 16;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v16 = qword_1011B7D50;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B10;
  v19 = v14;
  LOBYTE(aBlock[0]) = v14;
  v20 = sub_10001A9A8(&qword_1010FBAA0);
  v21 = String.init<A>(describing:)(aBlock, v20);
  v23 = v22;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v24 = sub_10001AA00();
  *(_QWORD *)(v18 + 64) = v24;
  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = v23;
  aBlock[0] = a2;
  swift_errorRetain(a2);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
  v26 = String.init<A>(describing:)(aBlock, v25);
  *(_QWORD *)(v18 + 96) = &type metadata for String;
  *(_QWORD *)(v18 + 104) = v24;
  *(_QWORD *)(v18 + 72) = v26;
  *(_QWORD *)(v18 + 80) = v27;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "#Durian: Play sound completed with success [%@], error [%@]", 59, 2, v18);
  swift_bridgeObjectRelease();
  if (!a2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(SPCommandErrorDomain);
    goto LABEL_9;
  }
  swift_getErrorValue(a2, v69, v66);
  v28 = Error.domain.getter(v67, v68);
  v30 = v29;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPCommandErrorDomain);
  if (!v30)
  {
LABEL_9:
    v33 = v65;
    v34 = v64;
    v35 = v63;
    v36 = v62;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v33 = v65;
  v34 = v64;
  v35 = v63;
  v36 = v62;
  if (v28 == v31 && v30 == v32)
  {
    swift_bridgeObjectRelease_n(v30, 2);
    goto LABEL_22;
  }
  v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v31, v32, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
  {
LABEL_10:
    v37 = 0;
    goto LABEL_11;
  }
LABEL_22:
  swift_getErrorValue(a2, v71, v70);
  if (Error.code.getter(v70[1], v70[2]) != 4)
    goto LABEL_10;
  v37 = 1;
LABEL_11:
  type metadata accessor for Transaction(0);
  v38 = swift_allocObject(&unk_10109A678, 41, 7);
  *(_QWORD *)(v38 + 16) = v35;
  *(_BYTE *)(v38 + 24) = v19;
  *(_QWORD *)(v38 + 32) = a2;
  *(_BYTE *)(v38 + 40) = v37;
  swift_errorRetain(a2);
  swift_retain();
  static Transaction.asyncTask(name:block:)("PlayAnalytics", 13, 2, &unk_10110C660, v38);
  swift_release();
  swift_beginAccess(v36, v76, 0, 0);
  Strong = swift_weakLoadStrong(v36);
  if (!Strong)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v11, 1, 1, v33);
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v11, Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier, v33);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v11, 0, 1, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v11, 1, v33) == 1)
  {
LABEL_17:
    sub_100004048((uint64_t)v11, &qword_1010ED860);
    goto LABEL_18;
  }
  v40 = (uint64_t)v54;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v54, v11, v33);
  swift_beginAccess(v36, v72, 0, 0);
  if (swift_weakLoadStrong(v36))
  {
    sub_1008DB908(a2 == 0, v40, a2);
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v40, v33);
LABEL_18:
  swift_beginAccess(v36, v75, 0, 0);
  result = swift_weakLoadStrong(v36);
  if (result)
  {
    v42 = *(id *)(result + 56);
    swift_release();
    aBlock[4] = sub_1008DCD2C;
    aBlock[5] = v55;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_10109A690;
    v43 = _Block_copy(aBlock);
    v44 = swift_retain();
    v45 = v56;
    static DispatchQoS.unspecified.getter(v44);
    v73 = _swiftEmptyArrayStorage;
    v46 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v47 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v48 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v49 = v59;
    v50 = v47;
    v51 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v73, v50, v48, v61, v46);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v49, v43);
    _Block_release(v43);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v51);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v45, v58);
    return swift_release();
  }
  return result;
}

uint64_t sub_1008D9FD8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_BYTE *)(v4 + 161) = a4;
  *(_BYTE *)(v4 + 160) = a2;
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a3;
  v6 = type metadata accessor for DispatchTimeInterval(0);
  *(_QWORD *)(v4 + 56) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 64) = v7;
  *(_QWORD *)(v4 + 72) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  *(_QWORD *)(v4 + 80) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 88) = v9;
  *(_QWORD *)(v4 + 96) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 104) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v10);
  return swift_task_switch(sub_1008DA0AC, a1, 0);
}

uint64_t sub_1008DA0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v2, v0 + 16, 0, 0);
  sub_10000F9B8(v2, v1, &qword_1010EBE20);
  return swift_task_switch(sub_1008DA120, 0, 0);
}

uint64_t sub_1008DA120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_1010EBE20);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 80));
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_BYTE *)(v0 + 161);
    v6 = *(_BYTE *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 40);
    v8 = *(_QWORD *)(v0 + 48);
    v9 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 136) = v9;
    *(_BYTE *)(v9 + 16) = v6;
    *(_QWORD *)(v9 + 24) = v8;
    *(_BYTE *)(v9 + 32) = v5;
    *(_QWORD *)(v9 + 40) = v4;
    v10 = sub_1008DA3D4;
    v11 = v7;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 40);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 96), v1, v2);
    v10 = sub_1008DA204;
    v11 = v12;
  }
  return swift_task_switch(v10, v11, 0);
}

uint64_t sub_1008DA204()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = sub_100CBE904(0x4474736575716572, 0xEF6E6F6974617275);
  return swift_task_switch(sub_1008DA264, 0, 0);
}

uint64_t sub_1008DA264()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 128);
  if (!v1)
    goto LABEL_5;
  v2 = objc_opt_self(NSNumber);
  v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
  {

LABEL_5:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 80));
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD **)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 56);
  *v9 = objc_msgSend(v3, "integerValue");
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v9, enum case for DispatchTimeInterval.seconds(_:), v11);
  DispatchTime.advanced(by:)(v9);

  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v9, v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  sub_100005CF0(v6, v4, &qword_1010EBE20);
LABEL_6:
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_BYTE *)(v0 + 161);
  v14 = *(_BYTE *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = *(_QWORD *)(v0 + 48);
  v17 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 136) = v17;
  *(_BYTE *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = v16;
  *(_BYTE *)(v17 + 32) = v13;
  *(_QWORD *)(v17 + 40) = v12;
  return swift_task_switch(sub_1008DA3D4, v15, 0);
}

uint64_t sub_1008DA3D4()
{
  uint64_t v0;

  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_1008DCD34);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return swift_task_switch(sub_1008DA454, 0, 0);
}

uint64_t sub_1008DA454()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[18] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[19] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1008DA4C0;
  return sub_100CD63AC(v0[5]);
}

uint64_t sub_1008DA4C0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release();
  return swift_task_switch(sub_1008DA51C, 0, 0);
}

uint64_t sub_1008DA51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  sub_100004048(v2, &qword_1010EBE20);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1008DA598(unsigned __int8 a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t inited;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  uint64_t v34;
  Class isa;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t result;
  Class v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  char v47[8];
  _QWORD v48[3];
  char v49[8];
  unint64_t v50;
  char v51[104];

  v8 = sub_10001A9A8(&qword_1010EBE20);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v44 - v16;
  v18 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v18, v51);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = 0x6563637553736177;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  *(_QWORD *)(inited + 48) = a1 & (a2 == 0);
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = 0xD000000000000016;
  *(_QWORD *)(inited + 72) = 0x8000000100EEA8D0;
  *(_QWORD *)(inited + 80) = a3 & 1;
  *(_BYTE *)(inited + 88) = 1;
  v20 = sub_1006B9444(inited);
  if (a2)
  {
    swift_getErrorValue(a2, v49, v48);
    v21 = v48[1];
    v22 = a2;
    v45 = a2;
    v23 = v10;
    v24 = v11;
    v25 = v12;
    v26 = v17;
    v27 = v15;
    v28 = a4;
    v29 = v48[2];
    swift_errorRetain(v22);
    v30 = v29;
    a4 = v28;
    v15 = v27;
    v17 = v26;
    v12 = v25;
    v11 = v24;
    v10 = v23;
    Error.domain.getter(v21, v30);
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    v50 = v20;
    sub_10010AC08((uint64_t)v31, 0, 0x6D6F44726F727265, 0xEB000000006E6961, isUniquelyReferenced_nonNull_native);
    v33 = v50;
    swift_bridgeObjectRelease();
    v34 = v45;
    swift_getErrorValue(v45, v47, v46);
    Error.code.getter(v46[1], v46[2]);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v36 = swift_isUniquelyReferenced_nonNull_native(v33);
    v50 = v33;
    sub_10010AC08((uint64_t)isa, 0, 0x646F43726F727265, 0xE900000000000065, v36);
    v20 = v50;
    swift_bridgeObjectRelease();
    swift_errorRelease(v34);
  }
  sub_10000F9B8(a4, (uint64_t)v10, &qword_1010EBE20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100004048((uint64_t)v10, &qword_1010EBE20);
    return v20;
  }
  v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
  v38 = static DispatchTime.now()(v37);
  v39 = DispatchTime.uptimeNanoseconds.getter(v38);
  result = DispatchTime.uptimeNanoseconds.getter(v39);
  if (v39 >= result)
  {
    v41 = Double._bridgeToObjectiveC()().super.super.isa;
    v42 = swift_isUniquelyReferenced_nonNull_native(v20);
    v50 = v20;
    sub_10010AC08((uint64_t)v41, 0, 0xD000000000000010, 0x8000000100EEA8F0, v42);
    v20 = v50;
    swift_bridgeObjectRelease();
    v43 = *(void (**)(char *, uint64_t))(v12 + 8);
    v43(v15, v11);
    v43(v17, v11);
    return v20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1008DA938(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_1008D7D00();
    return swift_release();
  }
  return result;
}

uint64_t sub_1008DA98C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  dispatch_queue_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  __int128 aBlock;
  __int128 v67;
  void (*v68)();
  uint64_t v69;
  char v70[40];

  v1 = v0;
  v57 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v49 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v3 - 8);
  v62 = v3;
  __chkstk_darwin(v3);
  v60 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for DispatchTimeInterval(0);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v53 = (uint64_t *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = type metadata accessor for DispatchTime(0);
  v52 = *(_QWORD *)(v58 - 8);
  v6 = __chkstk_darwin(v58);
  v50 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v51 = (char *)&v48 - v8;
  v9 = type metadata accessor for BeaconObservation(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = *(dispatch_queue_t *)(v0 + 56);
  dispatch_assert_queue_V2(v56);
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1011B7D50, "SoundPlaybackCoordinator: requesting stopSound()", 48, 2, _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F7A20);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.SoundPlaybackCoordinator.stopSound", 64, 2, sub_1008DCB40, v1, v15);
  swift_release();
  v16 = v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer, v70, 0, 0);
  sub_10000F9B8(v16, (uint64_t)&aBlock, &qword_10110C640);
  if (*((_QWORD *)&v67 + 1))
  {
    sub_100030784((uint64_t)&aBlock, (uint64_t)v63);
    sub_100004048((uint64_t)&aBlock, &qword_10110C640);
    v17 = v9;
    v19 = v64;
    v18 = v65;
    sub_10001AA44(v63, v64);
    v20 = v18;
    v9 = v17;
    dispatch thunk of Cancellable.cancel()(v19, v20);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
  }
  else
  {
    sub_100004048((uint64_t)&aBlock, &qword_10110C640);
  }
  v68 = 0;
  aBlock = 0u;
  v67 = 0u;
  swift_beginAccess(v16, v63, 33, 0);
  sub_100004084((uint64_t)&aBlock, v16, &qword_10110C640);
  swift_endAccess(v63);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v21 = qword_1011B7160;
  v22 = v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  v23 = type metadata accessor for UUID(0);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v12, v22, v23);
  Date.init()(v24);
  v12[*(int *)(v9 + 24)] = 26;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v26 = *(unsigned __int8 *)(v10 + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = swift_allocObject(v25, v27 + *(_QWORD *)(v10 + 72), v26 | 7);
  *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
  v29 = sub_10012D874((uint64_t)v12, v28 + v27);
  __chkstk_darwin(v29);
  *(&v48 - 4) = v21;
  *(&v48 - 3) = v28;
  *(&v48 - 2) = 0;
  *(&v48 - 1) = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v48 - 6, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  sub_10012D8F8((uint64_t)v12);
  sub_1008D76CC();
  sub_10001AA44((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  sub_10066CAC8(v22);
  swift_retain();
  Future.addCompletion(block:)(sub_1008DCB70, v1);
  swift_release();
  v30 = swift_release();
  v31 = v50;
  static DispatchTime.now()(v30);
  v32 = v53;
  *v53 = 8;
  v33 = v54;
  v34 = v55;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v54 + 104))(v32, enum case for DispatchTimeInterval.seconds(_:), v55);
  v35 = v51;
  + infix(_:_:)(v31, v32);
  (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v32, v34);
  v36 = *(void (**)(char *, uint64_t))(v52 + 8);
  v37 = v58;
  v36(v31, v58);
  v68 = sub_1008DCB78;
  v69 = v1;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v67 = sub_100016FB8;
  *((_QWORD *)&v67 + 1) = &unk_10109A550;
  v38 = _Block_copy(&aBlock);
  v39 = swift_retain();
  v40 = v60;
  static DispatchQoS.unspecified.getter(v39);
  v63[0] = _swiftEmptyArrayStorage;
  v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v44 = v49;
  v45 = v42;
  v46 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)(v63, v45, v43, v57, v41);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v35, v40, v44, v38);
  _Block_release(v38);
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v40, v62);
  v36(v35, v37);
  return swift_release();
}

uint64_t sub_1008DB024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v10 = swift_allocObject(&unk_10109A448, 24, 7);
  swift_weakInit(v10 + 16, a2);
  v11 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = a1;
  swift_retain(a1);
  v12 = Future.addCompletion(block:)(a4, v11);
  result = swift_release(v11);
  *a5 = v12;
  return result;
}

uint64_t sub_1008DB0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  id v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[6];
  _BYTE v26[24];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a3 + 16, v26, 0, 0);
  result = swift_weakLoadStrong(a3 + 16);
  if (result)
  {
    v15 = *(id *)(result + 56);
    swift_release();
    v16 = (_QWORD *)swift_allocObject(&unk_10109A5B0, 40, 7);
    v16[2] = a4;
    v16[3] = a2;
    v16[4] = a3;
    aBlock[4] = sub_1008DCBA0;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_10109A5C8;
    v17 = _Block_copy(aBlock);
    swift_retain();
    swift_errorRetain(a2);
    v18 = swift_retain();
    static DispatchQoS.unspecified.getter(v18);
    v24 = _swiftEmptyArrayStorage;
    v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v7, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v17);
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return swift_release();
  }
  return result;
}

uint64_t sub_1008DB31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];

  v4 = a3 + 16;
  Transaction.capture()();
  if (!a2)
  {
    swift_beginAccess(v4, v9, 0, 0);
    result = swift_weakLoadStrong(v4);
    if (!result)
      return result;
    sub_1008D7D00();
    return swift_release();
  }
  swift_beginAccess(v4, v9, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v6 = *(_QWORD *)(Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError);
    *(_QWORD *)(Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError) = a2;
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    swift_errorRelease(v6);
    swift_release();
  }
  else
  {
    swift_errorRetain(a2);
  }
  swift_beginAccess(v4, &v8, 0, 0);
  if (swift_weakLoadStrong(v4))
  {
    sub_1008D76CC();
    swift_errorRelease(a2);
    return swift_release();
  }
  return swift_errorRelease(a2);
}

uint64_t sub_1008DB418(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  _BYTE v18[8];

  if (a2)
  {
    v5 = swift_errorRetain(a2);
    v6 = static os_log_type_t.error.getter(v5);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    v7 = qword_1011B7D50;
    v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a2, v18, v17);
    v10 = Error.localizedDescription.getter(v17[1], v17[2]);
    v12 = v11;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_10001AA00();
    *(_QWORD *)(v9 + 32) = v10;
    *(_QWORD *)(v9 + 40) = v12;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "#Durian: Error during stop sound. Error - %@", 44, 2, v9);
    swift_bridgeObjectRelease();
    v13 = a3 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
    swift_errorRetain(a2);
    sub_1008DBA98(0, v13, a2);
    swift_errorRelease(a2);
    return swift_errorRelease(a2);
  }
  else
  {
    v15 = *a1;
    v16 = static os_log_type_t.default.getter(a1);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7D50, "SoundPlaybackCoordinator: sound stopped successfully.", 53, 2, _swiftEmptyArrayStorage);
    return sub_1008DBA98(v15 & 1, a3 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier, 0);
  }
}

void sub_1008DB5EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v1 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1011B7D50, "SoundPlaybackCoordinator: timeout block.", 40, 2, _swiftEmptyArrayStorage);
  type metadata accessor for SPOwnerSessionError(0);
  v3 = v2;
  v7 = 4;
  v4 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v5 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v3, v5);
  v6 = v8;
  Future.finish(error:)(v8);

}

void sub_1008DB6F4(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 56));
  if (a4)
  {
    v8 = swift_errorRetain(a4);
    v9 = static os_log_type_t.error.getter(v8);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    v10 = qword_1011B7D50;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 112, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    v17 = v16;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    v18 = sub_10001AA00();
    *(_QWORD *)(v12 + 64) = v18;
    *(_QWORD *)(v12 + 32) = v15;
    *(_QWORD *)(v12 + 40) = v17;
    v28 = a4;
    swift_errorRetain(a4);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v20 = String.init<A>(describing:)(&v28, v19);
    *(_QWORD *)(v12 + 96) = &type metadata for String;
    *(_QWORD *)(v12 + 104) = v18;
    *(_QWORD *)(v12 + 72) = v20;
    *(_QWORD *)(v12 + 80) = v21;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "SoundPlaybackCoordinator: Command failed on device UUID %@ error: %@", 68, 2, v12);
    swift_bridgeObjectRelease();
    Future.finish(error:)(a4);
    swift_errorRelease(a4);
  }
  else if ((a2 & 1) != 0)
  {
    Future.finish(result:)(a3);
  }
  else
  {
    type metadata accessor for SPOwnerSessionError(0);
    v23 = v22;
    v27 = 0;
    v24 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v25 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v27, v24, v23, v25);
    v26 = v28;
    Future.finish(error:)(v28);

  }
}

uint64_t sub_1008DB908(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1008DBAB4(a1, a2, a3, (uint64_t)&unk_10109A510, (uint64_t)sub_1008DCAD4, (uint64_t)&unk_10109A528);
}

uint64_t sub_1008DB924(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  void *v21;

  v7 = a1;
  v20 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v8 = qword_1011B7D50;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 152, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E221E0;
  *(_QWORD *)(v10 + 56) = &type metadata for Bool;
  *(_QWORD *)(v10 + 64) = &protocol witness table for Bool;
  v11 = v7 & 1;
  *(_BYTE *)(v10 + 32) = v11;
  v12 = UUID.uuidString.getter(v10);
  v14 = v13;
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 72) = v12;
  *(_QWORD *)(v10 + 80) = v14;
  v21 = a3;
  swift_errorRetain(a3);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
  v17 = String.init<A>(describing:)(&v21, v16);
  *(_QWORD *)(v10 + 136) = &type metadata for String;
  *(_QWORD *)(v10 + 144) = v15;
  *(_QWORD *)(v10 + 112) = v17;
  *(_QWORD *)(v10 + 120) = v18;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v8, "SoundPlaybackCoordinator: startPlayingSound completed %i %@ %@", 62, 2, v10);
  swift_bridgeObjectRelease();
  sub_1008DB6F4(*(_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playFuture), v11, a2, a3);
  return sub_1008D76CC();
}

uint64_t sub_1008DBA98(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1008DBAB4(a1, a2, a3, (uint64_t)&unk_10109A4C0, (uint64_t)sub_1008DCA38, (uint64_t)&unk_10109A4D8);
}

uint64_t sub_1008DBAB4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[6];

  v36 = a5;
  v37 = a6;
  v33 = a4;
  v7 = v6;
  v35 = a3;
  v34 = a1;
  v39 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)(v7 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  v18 = *(unsigned __int8 *)(v15 + 80);
  v19 = (v18 + 17) & ~v18;
  v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(v33, v21 + 8, v18 | 7);
  *(_BYTE *)(v22 + 16) = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v19, v17, v14);
  v24 = v35;
  v23 = v36;
  *(_QWORD *)(v22 + v20) = v35;
  *(_QWORD *)(v22 + v21) = v7;
  aBlock[4] = v23;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = v37;
  v25 = _Block_copy(aBlock);
  swift_errorRetain(v24);
  v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  v43 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v30 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v28, v29, v39, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v30);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v41);
  return swift_release();
}

void sub_1008DBD48(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;

  v7 = a1;
  v19 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v8 = qword_1011B7D50;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 152, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E221E0;
  *(_QWORD *)(v10 + 56) = &type metadata for Bool;
  *(_QWORD *)(v10 + 64) = &protocol witness table for Bool;
  v11 = v7 & 1;
  *(_BYTE *)(v10 + 32) = v11;
  v12 = UUID.uuidString.getter(v10);
  v14 = v13;
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 72) = v12;
  *(_QWORD *)(v10 + 80) = v14;
  v20 = a3;
  swift_errorRetain(a3);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
  v17 = String.init<A>(describing:)(&v20, v16);
  *(_QWORD *)(v10 + 136) = &type metadata for String;
  *(_QWORD *)(v10 + 144) = v15;
  *(_QWORD *)(v10 + 112) = v17;
  *(_QWORD *)(v10 + 120) = v18;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v8, "SoundPlaybackCoordinator: stopPlayingSound completed %i %@ %@", 61, 2, v10);
  swift_bridgeObjectRelease();
  sub_1008DB6F4(*(_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopFuture), v11, a2, a3);
}

uint64_t sub_1008DBEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _BYTE v19[40];

  v6 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100030784(a1, (uint64_t)v19);
  v10 = swift_allocObject(&unk_10109A448, 24, 7);
  swift_weakInit(v10 + 16, a2);
  v11 = sub_10001A9A8(&qword_10110C630);
  Subscription.init(subscriber:unsubscribeBlock:)(v19, sub_1008DC954, v10, v11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v12 = (unint64_t *)(a2 + 72);
  swift_beginAccess(a2 + 72, v19, 33, 0);
  v13 = *(_QWORD *)(a2 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
  *(_QWORD *)(a2 + 72) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = sub_1007CA7D0(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
    *v12 = v13;
  }
  v16 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    v13 = sub_1007CA7D0(v15 > 1, v16 + 1, 1, v13);
    *v12 = v13;
  }
  *(_QWORD *)(v13 + 16) = v16 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v7 + 32))(v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, v9, v6);
  return swift_endAccess(v19);
}

uint64_t sub_1008DC064(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_1008DC0D4(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1008DC0D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v21[1] = *(_QWORD *)(v1 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_10109A470, v13 + v11, v12 | 7);
  *(_QWORD *)(v14 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_1008DC9E4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10109A488;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  return swift_release();
}

uint64_t sub_1008DC33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];
  _BYTE v7[24];

  swift_beginAccess(a1 + 72, v7, 1, 0);
  v4 = *(_QWORD *)(a1 + 72);
  v6[2] = a2;
  swift_bridgeObjectRetain(v4);
  *(_QWORD *)(a1 + 72) = sub_10008C1BC((uint64_t (*)(char *))sub_1008DCA18, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_1008DC3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  v5 = sub_1000193A4(&qword_10110C638, (uint64_t *)&unk_1010F7A10, (const char *)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_1008DC43C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  swift_release();
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier, &qword_1010ED860);
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier, &qword_1010ED860);
  swift_errorRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError));
  swift_errorRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError));
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer, &qword_10110C640);
  return v0;
}

uint64_t sub_1008DC538()
{
  uint64_t v0;

  sub_1008DC43C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1008DC55C()
{
  return type metadata accessor for SoundPlaybackCoordinator(0);
}

uint64_t type metadata accessor for SoundPlaybackCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_10110C428;
  if (!qword_10110C428)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SoundPlaybackCoordinator);
  return result;
}

void sub_1008DC5A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v6[0] = "(";
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = &unk_100E54298;
    v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_100252558(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_100E54298;
      v10 = &unk_100E54298;
      v11 = &unk_100E542B0;
      swift_updateClassMetadata2(a1, 256, 13, v6, a1 + 80);
    }
  }
}

uint64_t sub_1008DC674()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *v0;
  swift_beginAccess(*v0 + 72, v3, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + 72));
}

uint64_t sub_1008DC6B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1;
  swift_beginAccess(v3 + 72, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 72) = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1008DC6FC(uint64_t a1))(_QWORD)
{
  _QWORD *v1;

  swift_beginAccess(*v1 + 72, a1, 33, 0);
  return j__swift_endAccess_0;
}

uint64_t sub_1008DC73C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];

  v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100336214, v5, v3);
}

uint64_t sub_1008DC79C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  id v13;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for UUID(0);
  v2 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x8000000100EEA4C0;
  v4._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v4);
  v5 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  OS_dispatch_queue.sync<A>(execute:)(sub_1004D00A8, v0, v5);
  v6 = objc_msgSend(v13, "debugDescription");

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0x496E6F636165623CLL;
}

uint64_t sub_1008DC910()
{
  return sub_1008DC79C();
}

uint64_t sub_1008DC930()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008DC954(uint64_t a1)
{
  uint64_t v1;

  return sub_1008DC064(a1, v1);
}

uint64_t sub_1008DC96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008DC9E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F7A10) - 8) + 80);
  return sub_1008DC33C(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

BOOL sub_1008DCA18(uint64_t a1)
{
  uint64_t v1;

  return sub_1008DC3B8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1008DCA38()
{
  return sub_1008DCAE0((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_1008DBD48);
}

uint64_t sub_1008DCA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 17) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1008DCAD4()
{
  return sub_1008DCAE0((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_1008DB924);
}

uint64_t sub_1008DCAE0(uint64_t (*a1)(_QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a1(*(unsigned __int8 *)(v1 + 16), v1 + v3, *(_QWORD *)(v1 + v4), *(_QWORD *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1008DCB40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1008DB024(a1, v2, (uint64_t)&unk_10109A588, (uint64_t)sub_1008DCB84, a2);
}

uint64_t sub_1008DCB70(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1008DB418(a1, a2, v2);
}

void sub_1008DCB78()
{
  uint64_t v0;

  sub_1008DB5EC(v0);
}

uint64_t sub_1008DCB84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1008DB0D8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1008DCB8C()
{
  return sub_1008DCDB8((void (*)(_QWORD))&_swift_errorRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1008DCBA0()
{
  uint64_t *v0;

  return sub_1008DB31C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1008DCBAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1008DB024(a1, v2, (uint64_t)&unk_10109A6C8, (uint64_t)sub_1008DCD9C, a2);
}

uint64_t sub_1008DCBDC()
{
  return sub_1008DCC7C((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1008DCBEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10110C64C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_1008D8844(v2, v3, v4);
}

uint64_t sub_1008DCC50(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_1008D906C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1008DCC58(uint64_t a1)
{
  uint64_t v1;

  return sub_1008D968C(a1, v1);
}

uint64_t sub_1008DCC64(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1008D9920(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1008DCC6C()
{
  return sub_1008DCC7C((void (*)(_QWORD))&_swift_errorRelease, 41);
}

uint64_t sub_1008DCC7C(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 16));
  a1(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_1008DCCC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_BYTE *)(v0 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10110C65C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004C28;
  return sub_1008D9FD8(v2, v5, v3, v4);
}

uint64_t sub_1008DCD2C()
{
  uint64_t v0;

  return sub_1008DA938(v0);
}

unint64_t sub_1008DCD34()
{
  uint64_t v0;

  return sub_1008DA598(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1008DCD48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110C66C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_1008D92CC(v0);
}

unint64_t sub_1008DCD90()
{
  return sub_1008D9564();
}

uint64_t sub_1008DCD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1008D8548(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1008DCDA4()
{
  return sub_1008DCDB8((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1008DCDB8(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  swift_release(v2[2]);
  a1(v2[3]);
  a2(v2[4]);
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_1008DCE04()
{
  uint64_t *v0;

  return sub_1008D878C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1008DCE10@<X0>(_QWORD *a1@<X8>)
{
  return sub_1008DCE34(a1);
}

uint64_t sub_1008DCE28()
{
  return sub_1008DCF5C((void (*)(uint64_t))sub_1003352B8);
}

uint64_t sub_1008DCE34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 72, v5, 0, 0);
  v3 = *(_QWORD *)(v1 + 72);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_1008DCE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1008DCF50()
{
  return sub_1008DCF5C((void (*)(uint64_t))sub_100335998);
}

uint64_t sub_1008DCF5C(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F7A10) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1008D7C98(v1 + v4, *(_QWORD *)(v1 + v5), v1 + ((v5 + v6 + 8) & ~v6), a1);
}

uint64_t sub_1008DCFDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008DD050()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1008D6D48(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1008DD090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_1008DD134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  return sub_1008D75C4(v0 + ((v2 + 16) & ~v2), v0 + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 16) & ~v2)) & ~v2), *(uint64_t (**)(_QWORD))(v0+ ((*(_QWORD *)(v1 + 64)+ ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 16) & ~v2)) & ~v2)+ 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1008DD188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_errorRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1008DD218()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1008D7188(v0 + v2, *(uint64_t (**)(uint64_t))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1008DD268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1008DD2E8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1008D688C(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1008DD330(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1008D6E68(a1, v1 + v4, *v5, v5[1]);
}

uint64_t sub_1008DD388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1008DD400(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1008D7274(a1, v1 + v4, *v5, v5[1]);
}

_QWORD *sub_1008DD4B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD v32[2];
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  _QWORD *v43;

  v41 = sub_10001A9A8(&qword_10110C6A8);
  v3 = *(_QWORD *)(v41 - 8);
  v4 = __chkstk_darwin(v41);
  v37 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v40 = (char *)v32 - v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_10110C6B0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v32[1] = v1;
    v43 = _swiftEmptyArrayStorage;
    sub_10009B260(0, v10, 0);
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v36 = *(_QWORD *)(v3 + 72);
    v13 = type metadata accessor for UUID(0);
    v34 = *(_QWORD *)(v13 - 8);
    v35 = v13;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    v14 = v40;
    v15 = (uint64_t)v37;
    do
    {
      v42 = v10;
      v16 = v41;
      v17 = *(int *)(v41 + 48);
      v18 = (uint64_t)v9;
      v19 = v39;
      v20 = *(int *)(v39 + 48);
      v21 = v35;
      v33(v14, v12, v35);
      v22 = *(void **)(v12 + v20);
      v23 = *(void **)(v12 + v17);
      v24 = *(int *)(v16 + 48);
      v25 = *(int *)(v19 + 48);
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v15, v14, v21);
      *(_QWORD *)(v15 + v25) = v22;
      v9 = (char *)v18;
      *(_QWORD *)(v15 + v24) = v23;
      sub_10000F9B8(v15, v18, (uint64_t *)&unk_10110C6B0);
      v26 = v22;
      v27 = v23;
      sub_100004048(v15, &qword_10110C6A8);
      v11 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_10009B260(0, v11[2] + 1, 1);
        v11 = v43;
      }
      v29 = v11[2];
      v28 = v11[3];
      v30 = v42;
      if (v29 >= v28 >> 1)
      {
        sub_10009B260(v28 > 1, v29 + 1, 1);
        v11 = v43;
      }
      v11[2] = v29 + 1;
      sub_100005CF0(v18, (uint64_t)v11+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v29, (uint64_t *)&unk_10110C6B0);
      v12 += v36;
      v10 = v30 - 1;
    }
    while (v10);
  }
  return v11;
}

uint64_t sub_1008DD73C(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;

  v10 = sub_10001A9A8(&qword_10110C6A0);
  v11 = sub_10001A9A8(&qword_10110C6A8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  v17 = v16 + v15;
  v18 = *(int *)(v11 + 48);
  v19 = *(int *)(sub_10001A9A8((uint64_t *)&unk_10110C6B0) + 48);
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, a2, v20);
  v21 = a3[3];
  v22 = a3[4];
  sub_10001AA44(a3, v21);
  *(_QWORD *)(v17 + v19) = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 176))(v21, v22);
  *(_QWORD *)(v17 + v18) = a4;
  v23 = *(_QWORD *)(a1 + 56);
  v24 = a4;
  v25 = sub_10001A9A8(&qword_101100380);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005CD190, a1, v23, &type metadata for () + 1, v25);
  v26 = sub_1008DD4B4(v16);
  type metadata accessor for Transaction(0);
  v27 = swift_allocObject(&unk_10109AA28, 64, 7);
  *(_QWORD *)(v27 + 16) = a1;
  *(_QWORD *)(v27 + 24) = v29;
  *(_QWORD *)(v27 + 32) = v26;
  *(_BYTE *)(v27 + 40) = a5;
  *(_QWORD *)(v27 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v27 + 56) = v16;
  swift_retain();
  swift_bridgeObjectRetain(v16);
  static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateDeviceEvent", 49, 2, &unk_10110C6C8, v27);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1008DD91C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_BYTE *)(v6 + 64) = a4;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008DD980, 0, 0);
}

uint64_t sub_1008DD980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_BYTE *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v7 = swift_allocObject(&unk_10109AA50, 56, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v4;
  *(_QWORD *)(v7 + 48) = v2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  v8 = swift_bridgeObjectRetain(v2);
  UUID.init()(v8);
  v9 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_10110C6D8, v7, &unk_10110C6E0, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v9);
  swift_release(v9);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008DDA74(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v5 + 56) = a4;
  *(_QWORD *)(v5 + 64) = a5;
  *(_BYTE *)(v5 + 193) = a3;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1011002D0);
  *(_QWORD *)(v5 + 72) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 80) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v5 + 88) = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 96) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 104) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 112) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 120) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 128) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 136) = swift_task_alloc(v9);
  return swift_task_switch(sub_1008DDB24, 0, 0);
}

void sub_1008DDB24()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Class isa;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  void (*v103)(void);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v74 = v0 + 4;
  v1 = v0[5];
  v2 = *(_BYTE *)(v1 + 32);
  *((_BYTE *)v0 + 194) = v2;
  v3 = 1 << v2;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRetain(v1);
  v6 = 0;
  v75 = v0;
  v85 = 0;
  if (!v5)
    goto LABEL_6;
LABEL_5:
  v7 = __clz(__rbit64(v5));
  v8 = (v5 - 1) & v5;
  v9 = v7 | (v6 << 6);
  v10 = v0[5];
  while (1)
  {
    v76 = v8;
    v77 = v6;
    v0[18] = v6;
    v0[19] = v8;
    v16 = v0[17];
    v106 = v0[16];
    v90 = v0[15];
    v17 = v0[9];
    v93 = *((_BYTE *)v0 + 193);
    v80 = v0[14];
    v81 = v0[7];
    v79 = v0[6];
    v18 = *(_QWORD *)(v10 + 48);
    v19 = type metadata accessor for UUID(0);
    v20 = *(_QWORD *)(v19 - 8);
    v103 = *(void (**)(void))(v20 + 16);
    v104 = v19;
    ((void (*)(uint64_t, unint64_t, uint64_t))v103)(v16, v18 + *(_QWORD *)(v20 + 72) * v9, v19);
    v21 = v17;
    v22 = *(_QWORD *)(v10 + 56) + 104 * v9;
    v23 = v16 + *(int *)(v17 + 48);
    v109 = *(_QWORD *)v22;
    v24 = *(_BYTE *)(v22 + 8);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = *(_QWORD *)(v22 + 24);
    v28 = *(_QWORD *)(v22 + 32);
    v27 = *(_QWORD *)(v22 + 40);
    v30 = *(_QWORD *)(v22 + 48);
    v29 = *(_QWORD *)(v22 + 56);
    v31 = *(_BYTE *)(v22 + 65);
    v100 = v31;
    v101 = *(_BYTE *)(v22 + 64);
    v89 = *(_QWORD *)(v22 + 72);
    v98 = *(_QWORD *)(v22 + 88);
    v99 = *(_QWORD *)(v22 + 80);
    v97 = *(_BYTE *)(v22 + 96);
    *(_QWORD *)v23 = *(_QWORD *)v22;
    *(_BYTE *)(v23 + 8) = v24;
    v32 = v24;
    v102 = v24;
    *(_QWORD *)(v23 + 16) = v25;
    *(_QWORD *)(v23 + 24) = v26;
    v110 = v25;
    v108 = v26;
    *(_QWORD *)(v23 + 32) = v28;
    *(_QWORD *)(v23 + 40) = v27;
    v96 = v28;
    v33 = v27;
    v105 = v27;
    *(_QWORD *)(v23 + 48) = v30;
    *(_QWORD *)(v23 + 56) = v29;
    v84 = v29;
    *(_BYTE *)(v23 + 64) = v101;
    *(_BYTE *)(v23 + 65) = v31;
    *(_QWORD *)(v23 + 72) = v89;
    *(_QWORD *)(v23 + 80) = v99;
    *(_QWORD *)(v23 + 88) = v98;
    *(_BYTE *)(v23 + 96) = v97;
    v78 = v21;
    v34 = v106 + *(int *)(v21 + 48);
    (*(void (**)(void))(v20 + 32))();
    *(_QWORD *)v34 = v109;
    *(_BYTE *)(v34 + 8) = v32;
    *(_QWORD *)(v34 + 16) = v25;
    *(_QWORD *)(v34 + 24) = v26;
    *(_QWORD *)(v34 + 32) = v28;
    *(_QWORD *)(v34 + 40) = v33;
    *(_QWORD *)(v34 + 48) = v30;
    *(_QWORD *)(v34 + 56) = v29;
    *(_BYTE *)(v34 + 64) = v101;
    *(_BYTE *)(v34 + 65) = v100;
    *(_QWORD *)(v34 + 72) = v89;
    *(_QWORD *)(v34 + 80) = v99;
    *(_QWORD *)(v34 + 88) = v98;
    *(_BYTE *)(v34 + 96) = v97;
    v35 = v90 + *(int *)(v21 + 48);
    v103();
    *(_QWORD *)v35 = v109;
    *(_BYTE *)(v35 + 8) = v102;
    *(_QWORD *)(v35 + 16) = v110;
    *(_QWORD *)(v35 + 24) = v26;
    *(_QWORD *)(v35 + 32) = v28;
    *(_QWORD *)(v35 + 40) = v105;
    *(_QWORD *)(v35 + 48) = v30;
    *(_QWORD *)(v35 + 56) = v29;
    *(_BYTE *)(v35 + 64) = v101;
    *(_BYTE *)(v35 + 65) = v100;
    *(_QWORD *)(v35 + 72) = v89;
    *(_QWORD *)(v35 + 80) = v99;
    *(_QWORD *)(v35 + 88) = v98;
    *(_BYTE *)(v35 + 96) = v97;
    v36 = swift_task_alloc(32);
    *(_QWORD *)(v36 + 16) = v90;
    *(_BYTE *)(v36 + 24) = v93;
    swift_bridgeObjectRetain_n(v29, 3);
    swift_bridgeObjectRetain_n(v89, 3);
    swift_retain_n(v109, 3);
    swift_bridgeObjectRetain_n(v110, 3);
    swift_bridgeObjectRetain_n(v26, 3);
    v37 = v28;
    swift_bridgeObjectRetain_n(v28, 3);
    swift_bridgeObjectRetain_n(v105, 3);
    swift_bridgeObjectRetain(v79);
    v38 = v85;
    v86 = sub_10008BA38((uint64_t (*)(char *))sub_1005CCF88, v36, v79);
    v39 = v29;
    swift_task_dealloc(v36);
    sub_100004048(v90, (uint64_t *)&unk_1011002D0);
    v40 = v80 + *(int *)(v78 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v80, v106, v104);
    *(_QWORD *)v40 = v109;
    *(_BYTE *)(v40 + 8) = v102;
    *(_QWORD *)(v40 + 16) = v110;
    *(_QWORD *)(v40 + 24) = v26;
    *(_QWORD *)(v40 + 32) = v37;
    *(_QWORD *)(v40 + 40) = v105;
    *(_QWORD *)(v40 + 48) = v30;
    *(_QWORD *)(v40 + 56) = v29;
    *(_BYTE *)(v40 + 64) = v101;
    *(_BYTE *)(v40 + 65) = v100;
    *(_QWORD *)(v40 + 72) = v89;
    *(_QWORD *)(v40 + 80) = v99;
    *(_QWORD *)(v40 + 88) = v98;
    *(_BYTE *)(v40 + 96) = v97;
    v41 = swift_task_alloc(32);
    *(_QWORD *)(v41 + 16) = v80;
    *(_BYTE *)(v41 + 24) = v93;
    swift_retain();
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v105);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v81);
    v42 = sub_10008BC44((uint64_t)sub_1005CCFA8, v41, v81);
    swift_task_dealloc(v41);
    sub_100004048(v80, (uint64_t *)&unk_1011002D0);
    v43 = *(_QWORD *)(v86 + 16);
    swift_bridgeObjectRelease();
    if (v43 || *(_QWORD *)(v42 + 16))
      break;
    v0 = v75;
    sub_100004048(v75[16], (uint64_t *)&unk_1011002D0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v5 = v76;
    v6 = v77;
    v85 = v38;
    if (v76)
      goto LABEL_5;
LABEL_6:
    v11 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return;
    }
    v12 = (unint64_t)((1 << *((_BYTE *)v0 + 194)) + 63) >> 6;
    v10 = v0[5];
    if (v11 >= v12)
      goto LABEL_28;
    v13 = v10 + 64;
    v14 = *(_QWORD *)(v10 + 64 + 8 * v11);
    ++v6;
    if (!v14)
    {
      v6 = v11 + 1;
      if (v11 + 1 >= v12)
        goto LABEL_28;
      v14 = *(_QWORD *)(v13 + 8 * v6);
      if (!v14)
      {
        v6 = v11 + 2;
        if (v11 + 2 >= v12)
          goto LABEL_28;
        v14 = *(_QWORD *)(v13 + 8 * v6);
        if (!v14)
        {
          v15 = v11 + 3;
          if (v15 >= v12)
          {
LABEL_28:
            v69 = v0[16];
            v68 = v0[17];
            v71 = v0[14];
            v70 = v0[15];
            v73 = v0[12];
            v72 = v0[13];
            swift_release();
            swift_task_dealloc(v68);
            swift_task_dealloc(v69);
            swift_task_dealloc(v70);
            swift_task_dealloc(v71);
            swift_task_dealloc(v72);
            swift_task_dealloc(v73);
            ((void (*)(void))v0[1])();
            return;
          }
          v14 = *(_QWORD *)(v13 + 8 * v15);
          if (!v14)
          {
            while (1)
            {
              v6 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_30;
              if (v6 >= v12)
                goto LABEL_28;
              v14 = *(_QWORD *)(v13 + 8 * v6);
              ++v15;
              if (v14)
                goto LABEL_19;
            }
          }
          v6 = v15;
        }
      }
    }
LABEL_19:
    v8 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v6 << 6);
  }
  v44 = v75[13];
  v91 = v75[16];
  v94 = v75[12];
  v82 = v75[9];
  v87 = v38;
  v45 = v75[8];
  v46 = v44 + *(int *)(v82 + 48);
  ((void (*)(uint64_t))v103)(v44);
  *(_QWORD *)v46 = v109;
  *(_BYTE *)(v46 + 8) = v102;
  *(_QWORD *)(v46 + 16) = v110;
  *(_QWORD *)(v46 + 24) = v108;
  *(_QWORD *)(v46 + 32) = v37;
  *(_QWORD *)(v46 + 40) = v105;
  *(_QWORD *)(v46 + 48) = v30;
  *(_QWORD *)(v46 + 56) = v39;
  *(_BYTE *)(v46 + 64) = v101;
  *(_BYTE *)(v46 + 65) = v100;
  *(_QWORD *)(v46 + 72) = v89;
  *(_QWORD *)(v46 + 80) = v99;
  *(_QWORD *)(v46 + 88) = v98;
  *(_BYTE *)(v46 + 96) = v97;
  v47 = swift_task_alloc(32);
  *(_QWORD *)(v47 + 16) = v44;
  swift_retain();
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v89);
  v107 = sub_1008E1214(v45, (uint64_t (*)(char *, uint64_t, _QWORD, _QWORD))sub_1008E120C, v47);
  swift_task_dealloc(v47);
  sub_100004048(v44, (uint64_t *)&unk_1011002D0);
  v48 = v94 + *(int *)(v82 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v94, v91, v104);
  *(_QWORD *)v48 = v109;
  *(_BYTE *)(v48 + 8) = v102;
  *(_QWORD *)(v48 + 16) = v110;
  *(_QWORD *)(v48 + 24) = v108;
  *(_QWORD *)(v48 + 32) = v37;
  *(_QWORD *)(v48 + 40) = v105;
  *(_QWORD *)(v48 + 48) = v30;
  *(_QWORD *)(v48 + 56) = v39;
  *(_BYTE *)(v48 + 64) = v101;
  *(_BYTE *)(v48 + 65) = v100;
  *(_QWORD *)(v48 + 72) = v89;
  *(_QWORD *)(v48 + 80) = v99;
  *(_QWORD *)(v48 + 88) = v98;
  *(_BYTE *)(v48 + 96) = v97;
  v49 = swift_task_alloc(32);
  *(_QWORD *)(v49 + 16) = v94;
  swift_retain();
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v89);
  v50 = sub_1008E13B4(v42, (uint64_t (*)(char *, _QWORD *, _QWORD, _QWORD))sub_1008E13AC, v49);
  swift_task_dealloc(v49);
  sub_100004048(v94, (uint64_t *)&unk_1011002D0);
  swift_bridgeObjectRelease();
  sub_100304A5C((uint64_t)v50);
  v51 = v107[2];
  if (v51)
  {
    sub_10001A9A8(&qword_10110C6F0);
    v52 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v51);
  }
  else
  {
    v52 = _swiftEmptyDictionarySingleton;
  }
  v75[4] = v52;
  swift_bridgeObjectRetain(v107);
  sub_1008DFD2C(v53, 1, v74);
  v75[20] = v87;
  v88 = v75[16];
  v54 = v75[13];
  v92 = v75[10];
  v95 = v75[11];
  v83 = v75[9];
  swift_bridgeObjectRelease();
  v55 = objc_allocWithZone((Class)SPDeviceEventFetchResult);
  sub_1008E1508();
  sub_10001AA68(&qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  v57 = objc_msgSend(v55, "initWithResults:", isa);
  v75[21] = v57;

  v58 = *(int *)(v83 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v54, v88, v104);
  v59 = *(unsigned __int8 *)(v92 + 80);
  v60 = (v59 + 16) & ~v59;
  v61 = v54 + v58;
  *(_QWORD *)v61 = v109;
  *(_BYTE *)(v61 + 8) = v102;
  *(_QWORD *)(v61 + 16) = v110;
  *(_QWORD *)(v61 + 24) = v108;
  *(_QWORD *)(v61 + 32) = v96;
  *(_QWORD *)(v61 + 40) = v105;
  *(_QWORD *)(v61 + 48) = v30;
  *(_QWORD *)(v61 + 56) = v84;
  *(_BYTE *)(v61 + 64) = v101;
  *(_BYTE *)(v61 + 65) = v100;
  *(_QWORD *)(v61 + 72) = v89;
  *(_QWORD *)(v61 + 80) = v99;
  *(_QWORD *)(v61 + 88) = v98;
  *(_BYTE *)(v61 + 96) = v97;
  v62 = (v95 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = swift_allocObject(&unk_10109AA78, v62 + 8, v59 | 7);
  v75[22] = v63;
  sub_100005CF0(v54, v63 + v60, (uint64_t *)&unk_1011002D0);
  *(_QWORD *)(v63 + v62) = v57;
  v64 = async function pointer to unsafeBlocking<A>(_:)[1];
  v65 = v57;
  v66 = (_QWORD *)swift_task_alloc(v64);
  v75[23] = v66;
  v67 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v66 = v75;
  v66[1] = sub_1008DE578;
  unsafeBlocking<A>(_:)(v75 + 24, sub_1008E1618, v63, v67);
}

uint64_t sub_1008DE578()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_task_switch(sub_1008DE5D4, 0, 0);
}

uint64_t sub_1008DE5D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  Class isa;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  char v99;
  void (*v100)(void);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v74 = v0 + 4;
  v73 = v0 + 24;
  v1 = v0[16];

  result = sub_100004048(v1, (uint64_t *)&unk_1011002D0);
  v3 = v0[19];
  v4 = v0[18];
  v75 = v0;
  v84 = v0[20];
  if (!v3)
    goto LABEL_3;
LABEL_2:
  v5 = __clz(__rbit64(v3));
  v6 = (v3 - 1) & v3;
  v7 = v5 | (v4 << 6);
  v8 = v0[5];
  while (1)
  {
    v76 = v6;
    v77 = v4;
    v0[18] = v4;
    v0[19] = v6;
    v14 = v0[17];
    v102 = v0[16];
    v86 = v0[15];
    v15 = v0[9];
    v89 = *((_BYTE *)v0 + 193);
    v81 = v0[14];
    v82 = v0[7];
    v80 = v0[6];
    v16 = *(_QWORD *)(v8 + 48);
    v17 = type metadata accessor for UUID(0);
    v18 = *(_QWORD *)(v17 - 8);
    v100 = *(void (**)(void))(v18 + 16);
    v101 = v17;
    ((void (*)(uint64_t, unint64_t, uint64_t))v100)(v14, v16 + *(_QWORD *)(v18 + 72) * v7, v17);
    v19 = *(_QWORD *)(v8 + 56);
    v20 = v15;
    v21 = (uint64_t *)(v19 + 104 * v7);
    v22 = v14 + *(int *)(v15 + 48);
    v106 = *v21;
    v23 = *((_BYTE *)v21 + 8);
    v24 = v21[3];
    v107 = v21[2];
    v25 = v21[4];
    v26 = v21[5];
    v28 = v21[6];
    v27 = v21[7];
    v97 = *((_BYTE *)v21 + 64);
    v29 = *((_BYTE *)v21 + 65);
    v96 = v29;
    v30 = v21[9];
    v94 = v21[11];
    v95 = v21[10];
    v93 = *((_BYTE *)v21 + 96);
    *(_QWORD *)v22 = *v21;
    *(_BYTE *)(v22 + 8) = v23;
    v31 = v23;
    v99 = v23;
    *(_QWORD *)(v22 + 16) = v107;
    *(_QWORD *)(v22 + 24) = v24;
    *(_QWORD *)(v22 + 32) = v25;
    *(_QWORD *)(v22 + 40) = v26;
    v32 = v25;
    v92 = v25;
    *(_QWORD *)(v22 + 48) = v28;
    *(_QWORD *)(v22 + 56) = v27;
    v33 = v28;
    v98 = v28;
    v34 = v27;
    v78 = v27;
    v79 = v30;
    *(_BYTE *)(v22 + 64) = v97;
    *(_BYTE *)(v22 + 65) = v29;
    *(_QWORD *)(v22 + 72) = v30;
    *(_QWORD *)(v22 + 80) = v95;
    *(_QWORD *)(v22 + 88) = v94;
    *(_BYTE *)(v22 + 96) = v93;
    v35 = v102 + *(int *)(v20 + 48);
    (*(void (**)(void))(v18 + 32))();
    *(_QWORD *)v35 = v106;
    *(_BYTE *)(v35 + 8) = v31;
    *(_QWORD *)(v35 + 16) = v107;
    *(_QWORD *)(v35 + 24) = v24;
    *(_QWORD *)(v35 + 32) = v32;
    *(_QWORD *)(v35 + 40) = v26;
    *(_QWORD *)(v35 + 48) = v33;
    *(_QWORD *)(v35 + 56) = v34;
    *(_BYTE *)(v35 + 64) = v97;
    *(_BYTE *)(v35 + 65) = v96;
    *(_QWORD *)(v35 + 72) = v30;
    *(_QWORD *)(v35 + 80) = v95;
    *(_QWORD *)(v35 + 88) = v94;
    *(_BYTE *)(v35 + 96) = v93;
    v36 = v86 + *(int *)(v20 + 48);
    v100();
    *(_QWORD *)v36 = v106;
    *(_BYTE *)(v36 + 8) = v99;
    *(_QWORD *)(v36 + 16) = v107;
    *(_QWORD *)(v36 + 24) = v24;
    *(_QWORD *)(v36 + 32) = v92;
    *(_QWORD *)(v36 + 40) = v26;
    *(_QWORD *)(v36 + 48) = v98;
    *(_QWORD *)(v36 + 56) = v78;
    *(_BYTE *)(v36 + 64) = v97;
    *(_BYTE *)(v36 + 65) = v96;
    *(_QWORD *)(v36 + 72) = v79;
    *(_QWORD *)(v36 + 80) = v95;
    *(_QWORD *)(v36 + 88) = v94;
    *(_BYTE *)(v36 + 96) = v93;
    v37 = swift_task_alloc(32);
    *(_QWORD *)(v37 + 16) = v86;
    *(_BYTE *)(v37 + 24) = v89;
    swift_bridgeObjectRetain_n(v78, 3);
    swift_bridgeObjectRetain_n(v79, 3);
    swift_retain_n(v106, 3);
    swift_bridgeObjectRetain_n(v107, 3);
    swift_bridgeObjectRetain_n(v24, 3);
    swift_bridgeObjectRetain_n(v92, 3);
    swift_bridgeObjectRetain_n(v26, 3);
    swift_bridgeObjectRetain(v80);
    v38 = v84;
    v85 = sub_10008BA38((uint64_t (*)(char *))sub_1005CCF88, v37, v80);
    swift_task_dealloc(v37);
    sub_100004048(v86, (uint64_t *)&unk_1011002D0);
    v39 = v81 + *(int *)(v20 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v100)(v81, v102, v101);
    *(_QWORD *)v39 = v106;
    *(_BYTE *)(v39 + 8) = v99;
    *(_QWORD *)(v39 + 16) = v107;
    *(_QWORD *)(v39 + 24) = v24;
    *(_QWORD *)(v39 + 32) = v92;
    *(_QWORD *)(v39 + 40) = v26;
    *(_QWORD *)(v39 + 48) = v98;
    *(_QWORD *)(v39 + 56) = v78;
    *(_BYTE *)(v39 + 64) = v97;
    *(_BYTE *)(v39 + 65) = v96;
    *(_QWORD *)(v39 + 72) = v79;
    *(_QWORD *)(v39 + 80) = v95;
    *(_QWORD *)(v39 + 88) = v94;
    *(_BYTE *)(v39 + 96) = v93;
    v40 = swift_task_alloc(32);
    *(_QWORD *)(v40 + 16) = v81;
    *(_BYTE *)(v40 + 24) = v89;
    swift_retain();
    swift_bridgeObjectRetain(v107);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v82);
    v41 = sub_10008BC44((uint64_t)sub_1005CCFA8, v40, v82);
    swift_task_dealloc(v40);
    sub_100004048(v81, (uint64_t *)&unk_1011002D0);
    v42 = *(_QWORD *)(v85 + 16);
    swift_bridgeObjectRelease();
    if (v42 || *(_QWORD *)(v41 + 16))
      break;
    v0 = v75;
    sub_100004048(v75[16], (uint64_t *)&unk_1011002D0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
    v3 = v76;
    v4 = v77;
    v84 = v38;
    if (v76)
      goto LABEL_2;
LABEL_3:
    v9 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    v10 = (unint64_t)((1 << *((_BYTE *)v0 + 194)) + 63) >> 6;
    v8 = v0[5];
    if (v9 >= v10)
      goto LABEL_27;
    v11 = v8 + 64;
    v12 = *(_QWORD *)(v8 + 64 + 8 * v9);
    ++v4;
    if (!v12)
    {
      v4 = v9 + 1;
      if (v9 + 1 >= v10)
        goto LABEL_27;
      v12 = *(_QWORD *)(v11 + 8 * v4);
      if (!v12)
      {
        v4 = v9 + 2;
        if (v9 + 2 >= v10)
          goto LABEL_27;
        v12 = *(_QWORD *)(v11 + 8 * v4);
        if (!v12)
        {
          v13 = v9 + 3;
          if (v13 >= v10)
          {
LABEL_27:
            v68 = v0[16];
            v67 = v0[17];
            v70 = v0[14];
            v69 = v0[15];
            v72 = v0[12];
            v71 = v0[13];
            swift_release();
            swift_task_dealloc(v67);
            swift_task_dealloc(v68);
            swift_task_dealloc(v69);
            swift_task_dealloc(v70);
            swift_task_dealloc(v71);
            swift_task_dealloc(v72);
            return ((uint64_t (*)(void))v0[1])();
          }
          v12 = *(_QWORD *)(v11 + 8 * v13);
          if (!v12)
          {
            while (1)
            {
              v4 = v13 + 1;
              if (__OFADD__(v13, 1))
                goto LABEL_29;
              if (v4 >= v10)
                goto LABEL_27;
              v12 = *(_QWORD *)(v11 + 8 * v4);
              ++v13;
              if (v12)
                goto LABEL_16;
            }
          }
          v4 = v13;
        }
      }
    }
LABEL_16:
    v6 = (v12 - 1) & v12;
    v7 = __clz(__rbit64(v12)) + (v4 << 6);
  }
  v43 = v75[13];
  v87 = v75[16];
  v90 = v75[12];
  v83 = v75[9];
  v103 = v75[8];
  v44 = v43 + *(int *)(v83 + 48);
  ((void (*)(uint64_t))v100)(v43);
  *(_QWORD *)v44 = v106;
  *(_BYTE *)(v44 + 8) = v99;
  *(_QWORD *)(v44 + 16) = v107;
  *(_QWORD *)(v44 + 24) = v24;
  *(_QWORD *)(v44 + 32) = v92;
  *(_QWORD *)(v44 + 40) = v26;
  *(_QWORD *)(v44 + 48) = v98;
  *(_QWORD *)(v44 + 56) = v78;
  *(_BYTE *)(v44 + 64) = v97;
  *(_BYTE *)(v44 + 65) = v96;
  *(_QWORD *)(v44 + 72) = v79;
  *(_QWORD *)(v44 + 80) = v95;
  *(_QWORD *)(v44 + 88) = v94;
  *(_BYTE *)(v44 + 96) = v93;
  v45 = swift_task_alloc(32);
  *(_QWORD *)(v45 + 16) = v43;
  swift_retain();
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  v104 = sub_1008E1214(v103, (uint64_t (*)(char *, uint64_t, _QWORD, _QWORD))sub_1008E120C, v45);
  swift_task_dealloc(v45);
  sub_100004048(v43, (uint64_t *)&unk_1011002D0);
  v46 = v90 + *(int *)(v83 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v100)(v90, v87, v101);
  *(_QWORD *)v46 = v106;
  *(_BYTE *)(v46 + 8) = v99;
  *(_QWORD *)(v46 + 16) = v107;
  *(_QWORD *)(v46 + 24) = v24;
  *(_QWORD *)(v46 + 32) = v92;
  *(_QWORD *)(v46 + 40) = v26;
  *(_QWORD *)(v46 + 48) = v98;
  *(_QWORD *)(v46 + 56) = v78;
  *(_BYTE *)(v46 + 64) = v97;
  *(_BYTE *)(v46 + 65) = v96;
  *(_QWORD *)(v46 + 72) = v79;
  *(_QWORD *)(v46 + 80) = v95;
  *(_QWORD *)(v46 + 88) = v94;
  *(_BYTE *)(v46 + 96) = v93;
  v47 = swift_task_alloc(32);
  *(_QWORD *)(v47 + 16) = v90;
  swift_retain();
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  v48 = sub_1008E13B4(v41, (uint64_t (*)(char *, _QWORD *, _QWORD, _QWORD))sub_1008E13AC, v47);
  swift_task_dealloc(v47);
  sub_100004048(v90, (uint64_t *)&unk_1011002D0);
  swift_bridgeObjectRelease();
  sub_100304A5C((uint64_t)v48);
  v49 = v104[2];
  if (v49)
  {
    sub_10001A9A8(&qword_10110C6F0);
    v50 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v49);
  }
  else
  {
    v50 = _swiftEmptyDictionarySingleton;
  }
  v75[4] = v50;
  swift_bridgeObjectRetain(v104);
  sub_1008DFD2C(v51, 1, v74);
  v75[20] = v38;
  if (v38)
    return swift_unexpectedError(v38, "Swift/Dictionary.swift", 22, 1, 489);
  v88 = v75[16];
  v52 = v75[13];
  v105 = v75[11];
  v53 = v75[9];
  v91 = v75[10];
  swift_bridgeObjectRelease();
  v54 = objc_allocWithZone((Class)SPDeviceEventFetchResult);
  sub_1008E1508();
  sub_10001AA68(&qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  v56 = objc_msgSend(v54, "initWithResults:", isa);
  v75[21] = v56;

  v57 = *(int *)(v53 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v100)(v52, v88, v101);
  v58 = *(unsigned __int8 *)(v91 + 80);
  v59 = (v58 + 16) & ~v58;
  v60 = v52 + v57;
  *(_QWORD *)v60 = v106;
  *(_BYTE *)(v60 + 8) = v99;
  *(_QWORD *)(v60 + 16) = v107;
  *(_QWORD *)(v60 + 24) = v24;
  *(_QWORD *)(v60 + 32) = v92;
  *(_QWORD *)(v60 + 40) = v26;
  *(_QWORD *)(v60 + 48) = v98;
  *(_QWORD *)(v60 + 56) = v78;
  *(_BYTE *)(v60 + 64) = v97;
  *(_BYTE *)(v60 + 65) = v96;
  *(_QWORD *)(v60 + 72) = v79;
  *(_QWORD *)(v60 + 80) = v95;
  *(_QWORD *)(v60 + 88) = v94;
  *(_BYTE *)(v60 + 96) = v93;
  v61 = (v105 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  v62 = swift_allocObject(&unk_10109AA78, v61 + 8, v58 | 7);
  v75[22] = v62;
  sub_100005CF0(v52, v62 + v59, (uint64_t *)&unk_1011002D0);
  *(_QWORD *)(v62 + v61) = v56;
  v63 = async function pointer to unsafeBlocking<A>(_:)[1];
  v64 = v56;
  v65 = (_QWORD *)swift_task_alloc(v63);
  v75[23] = v65;
  v66 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v65 = v75;
  v65[1] = sub_1008DE578;
  return unsafeBlocking<A>(_:)(v73, sub_1008E1618, v62, v66);
}

id sub_1008DF010(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  void (*v64)(char *, char **, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(_QWORD, _QWORD);
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  os_log_t v83;
  uint64_t v84;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  os_log_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  id v99;
  void (*v100)(char *, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  char **v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[2];

  v98 = a1;
  v99 = a4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v87 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011002D0);
  v12 = __chkstk_darwin(v11);
  v86 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v104 = (uint64_t)&v86 - v15;
  v16 = __chkstk_darwin(v14);
  v103 = (char **)((char *)&v86 - v17);
  __chkstk_darwin(v16);
  v19 = (char *)&v86 - v18;
  v20 = sub_10001A9A8((uint64_t *)&unk_10110C6B0);
  v21 = __chkstk_darwin(v20);
  v97 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v102 = (uint64_t)&v86 - v24;
  v25 = __chkstk_darwin(v23);
  v101 = (uint64_t)&v86 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v86 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v86 - v31;
  v94 = v30;
  v95 = v9;
  v33 = *(int *)(v30 + 48);
  v34 = a2;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v35((char *)&v86 - v31, v34, v8);
  v96 = v33;
  *(_QWORD *)&v32[v33] = a3;
  v36 = qword_1010E9D20;
  v93 = a3;
  if (v36 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v37 = type metadata accessor for Logger(0);
  v92 = sub_10001A9E8(v37, (uint64_t)qword_1011B71C8);
  v38 = *(int *)(v11 + 48);
  v39 = &v19[v38];
  v40 = a5 + v38;
  v35(v19, a5, v8);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v41 = *(_BYTE *)(v40 + 8);
  v42 = *(_QWORD *)(v40 + 24);
  v88 = *(_QWORD *)(v40 + 16);
  v43 = v88;
  v89 = v42;
  v44 = *(_QWORD *)(v40 + 40);
  v90 = *(os_log_t *)(v40 + 32);
  v45 = v90;
  v91 = v44;
  v46 = *(_QWORD *)(v40 + 48);
  v47 = *(_QWORD *)(v40 + 56);
  v48 = *(_BYTE *)(v40 + 64);
  v49 = *(_BYTE *)(v40 + 65);
  v50 = (void (*)(char *, char *, uint64_t))v35;
  v100 = v35;
  v51 = *(_QWORD *)(v40 + 72);
  v52 = *(_BYTE *)(v40 + 96);
  v39[8] = v41;
  *((_QWORD *)v39 + 2) = v43;
  *((_QWORD *)v39 + 3) = v42;
  *((_QWORD *)v39 + 4) = v45;
  *((_QWORD *)v39 + 5) = v44;
  *((_QWORD *)v39 + 6) = v46;
  *((_QWORD *)v39 + 7) = v47;
  v39[64] = v48;
  v39[65] = v49;
  *((_QWORD *)v39 + 9) = v51;
  *((_OWORD *)v39 + 5) = *(_OWORD *)(v40 + 80);
  v39[96] = v52;
  sub_10000F9B8((uint64_t)v19, (uint64_t)v103, (uint64_t *)&unk_1011002D0);
  sub_100005CF0((uint64_t)v19, v104, (uint64_t *)&unk_1011002D0);
  v53 = *(int *)(v94 + 48);
  v94 = v8;
  v50(v29, v32, v8);
  v54 = v93;
  *(_QWORD *)&v29[v53] = v93;
  v55 = v101;
  sub_10000F9B8((uint64_t)v29, v101, (uint64_t *)&unk_10110C6B0);
  v56 = v102;
  sub_100005CF0((uint64_t)v29, v102, (uint64_t *)&unk_10110C6B0);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v51);
  v57 = v54;
  swift_retain();
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v91);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.default.getter(v59);
  v61 = v60;
  v62 = os_log_type_enabled(v59, v60);
  v63 = v56;
  v64 = (void (*)(char *, char **, uint64_t))v100;
  if (v62)
  {
    v65 = swift_slowAlloc(42, -1);
    v93 = v32;
    v66 = v65;
    v67 = swift_slowAlloc(64, -1);
    v92 = v67;
    *(_DWORD *)v66 = 141558787;
    v105 = 1752392040;
    v106[0] = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v66 + 4, v66 + 12);
    *(_WORD *)(v66 + 12) = 2081;
    LODWORD(v91) = v61;
    v68 = v86;
    v69 = (void (*)(_QWORD, _QWORD))v103;
    v90 = v59;
    v70 = v94;
    v64(v86, v103, v94);
    v71 = v95;
    v72 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
    v73 = v87;
    v72(v87, v68, v70);
    sub_100004048((uint64_t)v69, (uint64_t *)&unk_1011002D0);
    v74 = sub_10001AA68((unint64_t *)&qword_1010EDAE0, (uint64_t)&protocol conformance descriptor for UUID);
    v75 = dispatch thunk of CustomStringConvertible.description.getter(v70, v74);
    v77 = v76;
    v103 = *(char ***)(v71 + 8);
    ((void (*)(char *, uint64_t))v103)(v73, v70);
    v105 = sub_100016940(v75, v77, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v66 + 14, v66 + 22);
    swift_bridgeObjectRelease();
    sub_100004048(v104, (uint64_t *)&unk_1011002D0);
    *(_WORD *)(v66 + 22) = 2160;
    v105 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v66 + 24, v66 + 32);
    *(_WORD *)(v66 + 32) = 2081;
    v78 = v97;
    v79 = v101;
    v100(v97, v101, v70);
    v72(v73, v78, v70);
    v80 = dispatch thunk of CustomStringConvertible.description.getter(v70, v74);
    v82 = v81;
    ((void (*)(char *, uint64_t))v103)(v73, v70);
    v105 = sub_100016940(v80, v82, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v66 + 34, v66 + 42);
    swift_bridgeObjectRelease();
    sub_100004048(v102, (uint64_t *)&unk_10110C6B0);
    sub_100004048(v79, (uint64_t *)&unk_10110C6B0);
    v83 = v90;
    _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v91, "Received device event update for subscription: %{private,mask.hash}s, beaconID: %{private,mask.hash}s.", (uint8_t *)v66, 0x2Au);
    v84 = v92;
    swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    v32 = v93;
    swift_slowDealloc(v66, -1, -1);

  }
  else
  {
    sub_100004048((uint64_t)v103, (uint64_t *)&unk_1011002D0);
    sub_100004048(v104, (uint64_t *)&unk_1011002D0);
    sub_100004048(v63, (uint64_t *)&unk_10110C6B0);
    sub_100004048(v55, (uint64_t *)&unk_10110C6B0);

    v70 = v94;
    v72 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
    v78 = v97;
  }
  v72(v78, v32, v70);

  v72(v98, v78, v70);
  return v99;
}

id sub_1008DF6B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  os_log_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  _QWORD *v72;
  os_log_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;
  uint64_t v78;

  v71 = a4;
  v72 = (_QWORD *)a2;
  v70 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v67 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1011002D0);
  v10 = __chkstk_darwin(v9);
  v65 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v69 = (uint64_t)&v63 - v13;
  v14 = __chkstk_darwin(v12);
  v73 = (os_log_t)((char *)&v63 - v15);
  __chkstk_darwin(v14);
  v17 = (char *)&v63 - v16;
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v18 = type metadata accessor for Logger(0);
  v68 = sub_10001A9E8(v18, (uint64_t)qword_1011B71C8);
  v19 = *(int *)(v9 + 48);
  v20 = &v17[v19];
  v21 = a5 + v19;
  v63 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v63(v17, a5, v6);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = *(_BYTE *)(v21 + 8);
  v24 = *(_QWORD *)(v21 + 16);
  v23 = *(_QWORD *)(v21 + 24);
  v26 = *(_QWORD *)(v21 + 32);
  v25 = *(_QWORD *)(v21 + 40);
  v64 = v7;
  v27 = *(_QWORD *)(v21 + 48);
  v28 = *(_QWORD *)(v21 + 56);
  v29 = *(_BYTE *)(v21 + 64);
  v30 = *(_BYTE *)(v21 + 65);
  v66 = v6;
  v31 = *(_QWORD *)(v21 + 72);
  v32 = *(_BYTE *)(v21 + 96);
  v20[8] = v22;
  *((_QWORD *)v20 + 2) = v24;
  *((_QWORD *)v20 + 3) = v23;
  *((_QWORD *)v20 + 4) = v26;
  *((_QWORD *)v20 + 5) = v25;
  *((_QWORD *)v20 + 6) = v27;
  *((_QWORD *)v20 + 7) = v28;
  v20[64] = v29;
  v20[65] = v30;
  *((_QWORD *)v20 + 9) = v31;
  *((_OWORD *)v20 + 5) = *(_OWORD *)(v21 + 80);
  v20[96] = v32;
  sub_10000F9B8((uint64_t)v17, (uint64_t)v73, (uint64_t *)&unk_1011002D0);
  v33 = v69;
  sub_100005CF0((uint64_t)v17, v69, (uint64_t *)&unk_1011002D0);
  v34 = (uint64_t)v72;
  sub_100030784((uint64_t)v72, (uint64_t)v76);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  swift_retain();
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v25);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter(v36);
  v38 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    v39 = swift_slowAlloc(42, -1);
    v40 = swift_slowAlloc(64, -1);
    v68 = v40;
    *(_DWORD *)v39 = 141558787;
    v74 = 1752392040;
    v75 = v40;
    v41 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v39 + 4, v39 + 12);
    *(_WORD *)(v39 + 12) = 2081;
    v42 = v65;
    v43 = v66;
    v44 = v73;
    v63(v65, (uint64_t)v73, v66);
    v45 = v64;
    v46 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
    LODWORD(v63) = v38;
    v47 = v67;
    v46(v67, v42, v43);
    sub_100004048((uint64_t)v44, (uint64_t *)&unk_1011002D0);
    v48 = sub_10001AA68((unint64_t *)&qword_1010EDAE0, (uint64_t)&protocol conformance descriptor for UUID);
    v73 = v36;
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v43, v48);
    v51 = v50;
    v52 = *(void (**)(char *, uint64_t))(v45 + 8);
    v52(v47, v43);
    v74 = sub_100016940(v49, v51, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease();
    sub_100004048(v41, (uint64_t *)&unk_1011002D0);
    *(_WORD *)(v39 + 22) = 2160;
    v74 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v39 + 24, v39 + 32);
    *(_WORD *)(v39 + 32) = 2081;
    v53 = v77;
    v54 = v78;
    sub_10001AA44(v76, v77);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
    v55 = dispatch thunk of CustomStringConvertible.description.getter(v43, v48);
    v57 = v56;
    v52(v47, v43);
    v58 = v72;
    v74 = sub_100016940(v55, v57, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v39 + 34, v39 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v76);
    v36 = v73;
    _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v63, "Received device event update for subscription: %{private,mask.hash}s, beaconGroupID: %{private,mask.hash}s.", (uint8_t *)v39, 0x2Au);
    v59 = v68;
    swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {
    v58 = (_QWORD *)v34;
    sub_100004048((uint64_t)v73, (uint64_t *)&unk_1011002D0);
    sub_100004048(v33, (uint64_t *)&unk_1011002D0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v76);
  }

  v60 = v58[3];
  v61 = v58[4];
  sub_10001AA44(v58, v60);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v61);
  return v71;
}

BOOL sub_1008DFBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  id v18;
  uint64_t v20;
  id v21;

  v4 = sub_10001A9A8((uint64_t *)&unk_1011002D0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(v5 + 48);
  v9 = &v7[v8];
  v10 = a1 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v13 = *(_BYTE *)(v10 + 64);
  v14 = *(_BYTE *)(v10 + 65);
  v15 = *(_QWORD *)(v10 + 72);
  v16 = *(_BYTE *)(v10 + 96);
  v9[8] = *(_BYTE *)(v10 + 8);
  v17 = *(_OWORD *)(v10 + 32);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(v10 + 16);
  *((_OWORD *)v9 + 2) = v17;
  *((_OWORD *)v9 + 3) = *(_OWORD *)(v10 + 48);
  v9[64] = v13;
  v9[65] = v14;
  *((_QWORD *)v9 + 9) = v15;
  *((_OWORD *)v9 + 5) = *(_OWORD *)(v10 + 80);
  v9[96] = v16;
  swift_retain();
  XPCSession.proxy.getter(&v21);
  swift_release();
  v18 = v21;
  if (v21)
  {
    objc_msgSend(v21, "receivedUpdatedDeviceEvents:", a2);
    swift_unknownObjectRelease(v18);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v11);
  return v18 == 0;
}

uint64_t sub_1008DFD2C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(unint64_t, char *, uint64_t);
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1011093C0);
  v12 = __chkstk_darwin(v11);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return swift_bridgeObjectRelease();
  LODWORD(v58) = a2;
  v55 = v3;
  v17 = *(int *)(v12 + 48);
  v54 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v54;
  v60 = *(_QWORD *)(v13 + 72);
  v57 = a1;
  swift_bridgeObjectRetain(a1);
  sub_10000F9B8(v18, (uint64_t)v15, &qword_1011093C0);
  v56 = v8;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v61 = v7;
  v62 = v19;
  v19((unint64_t)v10, v15, v7);
  v59 = v17;
  v20 = *(void **)&v15[v17];
  v21 = (_QWORD *)*a3;
  v23 = sub_100003FB0((uint64_t)v10);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_24;
  v8 = v22;
  if (v21[3] >= v26)
  {
    if ((v58 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_100A9F3EC();
      if ((v8 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v33 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v34 = v33[6];
    v58 = *(_QWORD *)(v56 + 72);
    v8 = v61;
    v62(v34 + v58 * v23, v10, v61);
    *(_QWORD *)(v33[7] + 8 * v23) = v20;
    v35 = v33[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v33[2] = v37;
    v38 = v16 - 1;
    if (v16 == 1)
      return swift_bridgeObjectRelease_n(v57, 2);
    v39 = v57 + v60 + v54;
    while (1)
    {
      sub_10000F9B8(v39, (uint64_t)v15, &qword_1011093C0);
      v62((unint64_t)v10, v15, v8);
      v20 = *(void **)&v15[v59];
      v40 = (_QWORD *)*a3;
      v42 = sub_100003FB0((uint64_t)v10);
      v43 = v40[2];
      v44 = (v41 & 1) == 0;
      v45 = v43 + v44;
      if (__OFADD__(v43, v44))
        break;
      v8 = v41;
      if (v40[3] < v45)
      {
        sub_100A8FFAC(v45, 1);
        v46 = sub_100003FB0((uint64_t)v10);
        if ((v8 & 1) != (v47 & 1))
          goto LABEL_26;
        v42 = v46;
      }
      if ((v8 & 1) != 0)
        goto LABEL_10;
      v48 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v42 >> 6) + 64) |= 1 << v42;
      v8 = v61;
      v62(v48[6] + v58 * v42, v10, v61);
      *(_QWORD *)(v48[7] + 8 * v42) = v20;
      v49 = v48[2];
      v36 = __OFADD__(v49, 1);
      v50 = v49 + 1;
      if (v36)
        goto LABEL_25;
      v48[2] = v50;
      v39 += v60;
      if (!--v38)
        return swift_bridgeObjectRelease_n(v57, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_100A8FFAC(v26, v58 & 1);
  v27 = sub_100003FB0((uint64_t)v10);
  if ((v8 & 1) == (v28 & 1))
  {
    v23 = v27;
    if ((v8 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v30 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v30);
    v65 = v30;
    swift_errorRetain(v30);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v32 = swift_dynamicCast(v31, &v65, v31, &type metadata for _MergeError, 0);
    v8 = v61;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v8);
      swift_bridgeObjectRelease();
      return swift_errorRelease(v65);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v61);
  __break(1u);
LABEL_27:
  v63 = 0;
  v64 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v51._object = (void *)0x8000000100EDC680;
  v51._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v51);
  _print_unlocked<A, B>(_:_:)(v10, &v63, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v52._countAndFlagsBits = 39;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v63, v64, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_1008E01C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *(_QWORD *)(v6 + 184) = a5;
  *(_QWORD *)(v6 + 192) = a6;
  *(_BYTE *)(v6 + 296) = a3;
  *(_QWORD *)(v6 + 168) = a1;
  *(_QWORD *)(v6 + 176) = a4;
  v11 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v6 + 200) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 208) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 216) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v6 + 224) = v14;
  *(_QWORD *)(v6 + 232) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  v15 = sub_100018F08((_QWORD *)(v6 + 16));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v15, a2, a5);
  v16 = (_QWORD *)swift_task_alloc(dword_10110C694);
  *(_QWORD *)(v6 + 240) = v16;
  *v16 = v6;
  v16[1] = sub_1008E02BC;
  return sub_1008E0CBC((uint64_t)v15, a4, a5, a6);
}

uint64_t sub_1008E02BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008E0318, 0, 0);
}

uint64_t sub_1008E0318()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *log;
  id v60;
  uint64_t v61;
  os_log_type_t type;
  void *typea;
  char v64;
  uint64_t v65;

  v1 = (_QWORD *)(v0 + 16);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v2 = *(void **)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B71C8);
  sub_100030784(v0 + 16, v0 + 56);
  v5 = v2;
  swift_bridgeObjectRetain_n(v3, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 248);
  if (v8)
  {
    type = v7;
    v10 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 208);
    v58 = *(_QWORD *)(v0 + 216);
    log = v6;
    v12 = *(_QWORD *)(v0 + 192);
    v57 = *(_QWORD *)(v0 + 184);
    v60 = *(id *)(v0 + 168);
    v13 = swift_slowAlloc(42, -1);
    v61 = swift_slowAlloc(32, -1);
    v65 = v61;
    *(_DWORD *)v13 = 141558787;
    *(_QWORD *)(v0 + 136) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) + 32))(v57);
    v14 = sub_10001AA68((unint64_t *)&qword_1010EDAE0, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v10, v11);
    *(_QWORD *)(v0 + 144) = sub_100016940(v15, v17, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    *(_WORD *)(v13 + 22) = 2050;
    v18 = objc_msgSend(v60, "source");

    *(_QWORD *)(v0 + 152) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v13 + 24, v13 + 32);

    *(_WORD *)(v13 + 32) = 2048;
    v19 = *(_QWORD *)(v9 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 160) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v13 + 34, v13 + 42);
    swift_bridgeObjectRelease();
    v6 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "Update device event for beacon: %{private,mask.hash}s, source: %{public}ld,\nclientBeaconIdentifiers %ld].", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    v20 = v13;
    v1 = (_QWORD *)(v0 + 16);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v21 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease();

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    swift_bridgeObjectRelease();
  }

  v22 = sub_10001B664(*(_QWORD *)(v0 + 248));
  *(_QWORD *)(v0 + 256) = v22;
  swift_bridgeObjectRelease();
  v23 = *(_BYTE *)(v22 + 32);
  *(_BYTE *)(v0 + 297) = v23;
  v24 = -1;
  v25 = -1 << v23;
  if (-v25 < 64)
    v24 = ~(-1 << -(char)v25);
  v26 = v24 & *(_QWORD *)(v22 + 56);
  if (v26)
  {
    v27 = 0;
    v28 = __clz(__rbit64(v26));
    v29 = (v26 - 1) & v26;
    v30 = *(_QWORD **)(v0 + 256);
    goto LABEL_10;
  }
  v50 = 63 - v25;
  v30 = *(_QWORD **)(v0 + 256);
  if ((unint64_t)(63 - v25) <= 0x7F)
    goto LABEL_37;
  v51 = v30[8];
  if (!v51)
  {
    if (v50 >= 0xC0)
    {
      v51 = v30[9];
      if (v51)
      {
        v27 = 2;
        goto LABEL_15;
      }
      if (v50 >= 0x100)
      {
        v51 = v30[10];
        if (v51)
        {
          v27 = 3;
          goto LABEL_15;
        }
        if (v50 >= 0x140)
        {
          v51 = v30[11];
          if (v51)
          {
            v27 = 4;
            goto LABEL_15;
          }
          if (v50 >= 0x180)
          {
            v51 = v30[12];
            if (v51)
            {
              v27 = 5;
              goto LABEL_15;
            }
            if (v50 >= 0x1C0)
            {
              v51 = v30[13];
              if (v51)
              {
                v27 = 6;
                goto LABEL_15;
              }
              v52 = 0;
              v53 = v50 >> 6;
              if (v50 >> 6 <= 7)
                v53 = 7;
              v54 = v53 - 7;
              while (v54 != v52)
              {
                v51 = v30[v52++ + 14];
                if (v51)
                {
                  v27 = v52 + 6;
                  goto LABEL_15;
                }
              }
            }
          }
        }
      }
    }
LABEL_37:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 56))(*(_QWORD *)(v0 + 200), 1, 1, *(_QWORD *)(v0 + 208));
    goto LABEL_38;
  }
  v27 = 1;
LABEL_15:
  v29 = (v51 - 1) & v51;
  v28 = __clz(__rbit64(v51)) + (v27 << 6);
LABEL_10:
  *(_QWORD *)(v0 + 264) = v27;
  *(_QWORD *)(v0 + 272) = v29;
  v31 = *(_QWORD *)(v0 + 208);
  v32 = *(_QWORD *)(v0 + 216);
  v33 = *(_QWORD *)(v0 + 200);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16))(v33, v30[6] + *(_QWORD *)(v32 + 72) * v28, v31);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31) != 1)
  {
    v35 = *(_QWORD *)(v0 + 224);
    v34 = *(_QWORD *)(v0 + 232);
    v36 = *(_QWORD *)(v0 + 208);
    v37 = *(_QWORD *)(v0 + 216);
    v64 = *(_BYTE *)(v0 + 296);
    v38 = *(_QWORD *)(v0 + 176);
    typea = *(void **)(v0 + 168);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32);
    v39(v34, *(_QWORD *)(v0 + 200), v36);
    sub_100030784((uint64_t)v1, v0 + 96);
    v40 = *(unsigned __int8 *)(v37 + 80);
    v41 = (v40 + 24) & ~v40;
    v42 = (v35 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = (v42 + 47) & 0xFFFFFFFFFFFFFFF8;
    v44 = swift_allocObject(&unk_10109AA00, v43 + 9, v40 | 7);
    *(_QWORD *)(v0 + 280) = v44;
    *(_QWORD *)(v44 + 16) = v38;
    v39(v44 + v41, v34, v36);
    sub_10000F9FC((__int128 *)(v0 + 96), v44 + v42);
    v45 = v44 + v43;
    *(_QWORD *)v45 = typea;
    *(_BYTE *)(v45 + 8) = v64;
    v46 = async function pointer to unsafeBlocking<A>(_:)[1];
    v47 = typea;
    swift_retain();
    v48 = (_QWORD *)swift_task_alloc(v46);
    *(_QWORD *)(v0 + 288) = v48;
    *v48 = v0;
    v48[1] = sub_1008E0958;
    return unsafeBlocking<A>(_:)(v48, sub_1008E1034, v44, &type metadata for () + 1);
  }
LABEL_38:
  swift_release();
  v55 = *(_QWORD *)(v0 + 232);
  v56 = *(_QWORD *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008E0958()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 288));
  swift_release();
  return swift_task_switch(sub_1008E09B4, 0, 0);
}

void sub_1008E09B4()
{
  uint64_t v0;
  int64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 272);
  if (v2)
  {
    v3 = (v2 - 1) & v2;
    v4 = __clz(__rbit64(v2)) | (v1 << 6);
    v5 = *(_QWORD *)(v0 + 256);
    goto LABEL_3;
  }
  v24 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    v25 = (unint64_t)((1 << *(_BYTE *)(v0 + 297)) + 63) >> 6;
    v5 = *(_QWORD *)(v0 + 256);
    if (v24 >= v25)
      goto LABEL_23;
    v26 = v5 + 56;
    v27 = *(_QWORD *)(v5 + 56 + 8 * v24);
    ++v1;
    if (v27)
    {
LABEL_8:
      v3 = (v27 - 1) & v27;
      v4 = __clz(__rbit64(v27)) + (v1 << 6);
LABEL_3:
      *(_QWORD *)(v0 + 264) = v1;
      *(_QWORD *)(v0 + 272) = v3;
      v6 = *(_QWORD *)(v0 + 208);
      v7 = *(_QWORD *)(v0 + 216);
      v8 = *(_QWORD *)(v0 + 200);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v8, *(_QWORD *)(v5 + 48) + *(_QWORD *)(v7 + 72) * v4, v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v8, 0, 1, v6);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) != 1)
      {
        v10 = *(_QWORD *)(v0 + 224);
        v9 = *(_QWORD *)(v0 + 232);
        v11 = *(_QWORD *)(v0 + 208);
        v12 = *(_QWORD *)(v0 + 216);
        v32 = *(_BYTE *)(v0 + 296);
        v13 = *(_QWORD *)(v0 + 176);
        v31 = *(void **)(v0 + 168);
        v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
        v14(v9, *(_QWORD *)(v0 + 200), v11);
        sub_100030784(v0 + 16, v0 + 96);
        v15 = *(unsigned __int8 *)(v12 + 80);
        v16 = (v15 + 24) & ~v15;
        v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
        v18 = (v17 + 47) & 0xFFFFFFFFFFFFFFF8;
        v19 = swift_allocObject(&unk_10109AA00, v18 + 9, v15 | 7);
        *(_QWORD *)(v0 + 280) = v19;
        *(_QWORD *)(v19 + 16) = v13;
        v14(v19 + v16, v9, v11);
        sub_10000F9FC((__int128 *)(v0 + 96), v19 + v17);
        v20 = v19 + v18;
        *(_QWORD *)v20 = v31;
        *(_BYTE *)(v20 + 8) = v32;
        v21 = async function pointer to unsafeBlocking<A>(_:)[1];
        v22 = v31;
        swift_retain();
        v23 = (_QWORD *)swift_task_alloc(v21);
        *(_QWORD *)(v0 + 288) = v23;
        *v23 = v0;
        v23[1] = sub_1008E0958;
        unsafeBlocking<A>(_:)(v23, sub_1008E1034, v19, &type metadata for () + 1);
        return;
      }
      goto LABEL_24;
    }
    v1 = v24 + 1;
    if (v24 + 1 >= v25)
      goto LABEL_23;
    v27 = *(_QWORD *)(v26 + 8 * v1);
    if (v27)
      goto LABEL_8;
    v1 = v24 + 2;
    if (v24 + 2 >= v25)
      goto LABEL_23;
    v27 = *(_QWORD *)(v26 + 8 * v1);
    if (v27)
      goto LABEL_8;
    v1 = v24 + 3;
    if (v24 + 3 >= v25)
      goto LABEL_23;
    v27 = *(_QWORD *)(v26 + 8 * v1);
    if (v27)
      goto LABEL_8;
    v1 = v24 + 4;
    if (v24 + 4 >= v25)
      goto LABEL_23;
    v27 = *(_QWORD *)(v26 + 8 * v1);
    if (v27)
      goto LABEL_8;
    v28 = v24 + 5;
    if (v28 >= v25)
    {
LABEL_23:
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 56))(*(_QWORD *)(v0 + 200), 1, 1, *(_QWORD *)(v0 + 208));
LABEL_24:
      swift_release();
      v29 = *(_QWORD *)(v0 + 232);
      v30 = *(_QWORD *)(v0 + 200);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v27 = *(_QWORD *)(v26 + 8 * v28);
    if (v27)
    {
      v1 = v28;
      goto LABEL_8;
    }
    while (1)
    {
      v1 = v28 + 1;
      if (__OFADD__(v28, 1))
        break;
      if (v1 >= v25)
        goto LABEL_23;
      v27 = *(_QWORD *)(v26 + 8 * v1);
      ++v28;
      if (v27)
        goto LABEL_8;
    }
  }
  __break(1u);
}

uint64_t sub_1008E0CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;

  v4[8] = a3;
  v4[9] = a4;
  v4[7] = a2;
  v7 = type metadata accessor for UUID(0);
  v4[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[11] = v8;
  v4[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[5] = a3;
  v4[6] = a4;
  v4[13] = sub_100018F08(v4 + 2);
  (*(void (**)(void))(*(_QWORD *)(a3 - 8) + 16))();
  return swift_task_switch(sub_1008E0D5C, 0, 0);
}

uint64_t sub_1008E0D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  char *v11;

  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = sub_10001A9A8(&qword_1011003C0);
  v5 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v0 + 112) = v5;
  v6 = *(_DWORD *)(v1 + 80);
  *(_DWORD *)(v0 + 136) = v6;
  v7 = swift_allocObject(v4, ((v6 + 32) & ~(unint64_t)v6) + v5, v6 | 7);
  *(_QWORD *)(v0 + 120) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 32))(v3);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v3, v2) & 1) != 0)
  {
    v11 = (char *)&dword_1011003C8 + dword_1011003C8;
    v8 = (_QWORD *)swift_task_alloc(unk_1011003CC);
    *(_QWORD *)(v0 + 128) = v8;
    *v8 = v0;
    v8[1] = sub_1008E0E94;
    return ((uint64_t (*)(_QWORD, uint64_t))v11)(*(_QWORD *)(v0 + 96), v0 + 16);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 96);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
}

uint64_t sub_1008E0E94()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_1008E0EE8, 0, 0);
}

uint64_t sub_1008E0EE8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  if (v3 >= v2 >> 1)
    v1 = sub_1007C84F8(v2 > 1, v3 + 1, 1, *(_QWORD *)(v0 + 120));
  v4 = *(unsigned __int8 *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v1 + 16) = v3 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v1 + ((v4 + 32) & ~v4) + v5 * v3, v6, v8);
  v9 = *(_QWORD *)(v0 + 96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1008E0F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v6));

  return swift_deallocObject(v0, v7 + 9, v5);
}

uint64_t sub_1008E1034()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1008DD73C(*(_QWORD *)(v0 + 16), v0 + v2, (_QWORD *)(v0 + v3), *(void **)(v0 + ((v3 + 47) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v0 + ((v3 + 47) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1008E109C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1008E10E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_BYTE *)(v0 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_10110C6C4);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_100004C28;
  return sub_1008DD91C(v2, v3, v4, v7, v5, v6);
}

uint64_t sub_1008E115C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1008E1198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_BYTE *)(v0 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_10110C6D4);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004C28;
  return sub_1008DDA74(v2, v3, v6, v4, v5);
}

id sub_1008E120C(char *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;

  return sub_1008DF010(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

_QWORD *sub_1008E1214(uint64_t a1, uint64_t (*a2)(char *, uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, _QWORD, _QWORD);
  uint64_t v22;
  _QWORD *v23;

  v21 = a2;
  v22 = a3;
  v20 = sub_10001A9A8(&qword_1011093C0);
  v5 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v18[1] = v3;
    v23 = _swiftEmptyArrayStorage;
    sub_10009B208(0, v8, 0);
    v9 = v23;
    v19 = sub_10001A9A8(&qword_10110C6A8);
    v10 = *(_QWORD *)(v19 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    do
    {
      v13 = sub_10001A9A8((uint64_t *)&unk_10110C6B0);
      v14 = *(int *)(v20 + 48);
      *(_QWORD *)&v7[v14] = v21(v7, v11, *(_QWORD *)(v11 + *(int *)(v13 + 48)), *(_QWORD *)(v11 + *(int *)(v19 + 48)));
      v23 = v9;
      v16 = v9[2];
      v15 = v9[3];
      if (v16 >= v15 >> 1)
      {
        sub_10009B208(v15 > 1, v16 + 1, 1);
        v9 = v23;
      }
      v9[2] = v16 + 1;
      sub_100005CF0((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v16, &qword_1011093C0);
      v11 += v12;
      --v8;
    }
    while (v8);
  }
  return v9;
}

id sub_1008E13AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;

  return sub_1008DF6B8(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

_QWORD *sub_1008E13B4(uint64_t a1, uint64_t (*a2)(char *, _QWORD *, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t (*v17)(char *, _QWORD *, _QWORD, _QWORD);
  uint64_t v18;
  _QWORD *v19;

  v17 = a2;
  v18 = a3;
  v5 = sub_10001A9A8(&qword_1011093C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v16[1] = v3;
    v19 = _swiftEmptyArrayStorage;
    sub_10009B208(0, v9, 0);
    v10 = v19;
    v11 = (_QWORD *)(a1 + 80);
    do
    {
      v12 = *(int *)(v5 + 48);
      *(_QWORD *)&v8[v12] = v17(v8, v11 - 6, *(v11 - 1), *v11);
      v19 = v10;
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009B208(v13 > 1, v14 + 1, 1);
        v10 = v19;
      }
      v10[2] = v14 + 1;
      sub_100005CF0((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, &qword_1011093C0);
      v11 += 7;
      --v9;
    }
    while (v9);
  }
  return v10;
}

unint64_t sub_1008E1508()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101100478;
  if (!qword_101100478)
  {
    v1 = objc_opt_self(SPDeviceEvent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101100478);
  }
  return result;
}

uint64_t sub_1008E1544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1011002D0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v5 + 8, v4);
}

BOOL sub_1008E1618@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  _BOOL8 result;

  v3 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1011002D0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = sub_1008DFBE4(v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
  *a1 = result;
  return result;
}

uint64_t sub_1008E1674(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t i;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t result;
  _BYTE v72[16];
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  _OWORD *v79;
  _OWORD *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  _BYTE *v93;
  _QWORD *v94;

  v84 = a2;
  v83 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v75 = *(_QWORD *)(v83 - 8);
  v3 = __chkstk_darwin(v83);
  v93 = &v72[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v82 = &v72[-v5];
  v81 = sub_10001A9A8(&qword_1010EBFF8);
  v6 = __chkstk_darwin(v81);
  v80 = &v72[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v6);
  v79 = &v72[-v9];
  v10 = __chkstk_darwin(v8);
  v78 = (uint64_t *)&v72[-v11];
  v12 = __chkstk_darwin(v10);
  v77 = (uint64_t *)&v72[-v13];
  v14 = __chkstk_darwin(v12);
  v92 = (uint64_t *)&v72[-v15];
  __chkstk_darwin(v14);
  v76 = (uint64_t *)&v72[-v16];
  v17 = *(_QWORD *)(a1 + 64);
  v73 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v74 = (unint64_t)(v18 + 63) >> 6;
  v85 = a1;
  swift_bridgeObjectRetain(a1);
  for (i = 0; ; i = v88)
  {
    if (v20)
    {
      v87 = (v20 - 1) & v20;
      v88 = i;
      v22 = __clz(__rbit64(v20)) | (i << 6);
    }
    else
    {
      v23 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_38;
      if (v23 >= v74)
        return swift_release(v85);
      v24 = *(_QWORD *)(v73 + 8 * v23);
      v25 = i + 1;
      if (!v24)
      {
        v25 = i + 2;
        if (i + 2 >= v74)
          return swift_release(v85);
        v24 = *(_QWORD *)(v73 + 8 * v25);
        if (!v24)
        {
          v25 = i + 3;
          if (i + 3 >= v74)
            return swift_release(v85);
          v24 = *(_QWORD *)(v73 + 8 * v25);
          if (!v24)
          {
            v25 = i + 4;
            if (i + 4 >= v74)
              return swift_release(v85);
            v24 = *(_QWORD *)(v73 + 8 * v25);
            if (!v24)
            {
              v26 = i + 5;
              if (i + 5 >= v74)
                return swift_release(v85);
              v24 = *(_QWORD *)(v73 + 8 * v26);
              if (!v24)
              {
                while (1)
                {
                  v25 = v26 + 1;
                  if (__OFADD__(v26, 1))
                    goto LABEL_39;
                  if (v25 >= v74)
                    return swift_release(v85);
                  v24 = *(_QWORD *)(v73 + 8 * v25);
                  ++v26;
                  if (v24)
                    goto LABEL_23;
                }
              }
              v25 = i + 5;
            }
          }
        }
      }
LABEL_23:
      v87 = (v24 - 1) & v24;
      v88 = v25;
      v22 = __clz(__rbit64(v24)) + (v25 << 6);
    }
    v27 = *(_QWORD *)(v85 + 56);
    v28 = (uint64_t *)(*(_QWORD *)(v85 + 48) + 16 * v22);
    v29 = v28[1];
    v89 = *v28;
    v30 = v89;
    v90 = v29;
    v31 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    v32 = *(_QWORD *)(v31 - 8);
    v91 = v31;
    v33 = v27 + *(_QWORD *)(v32 + 72) * v22;
    v34 = v81;
    v35 = v76;
    sub_10005972C(v33, (uint64_t)v76 + *(int *)(v81 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
    *v35 = v30;
    v35[1] = v29;
    v36 = v92;
    sub_100005CF0((uint64_t)v35, (uint64_t)v92, &qword_1010EBFF8);
    v37 = *(int *)(v34 + 48);
    v38 = v77;
    v39 = (uint64_t)v77 + v37;
    v40 = (uint64_t)v36 + v37;
    v42 = *v36;
    v41 = v36[1];
    *v77 = *v36;
    v38[1] = v41;
    v86 = (uint64_t)v38 + v37;
    sub_10005972C((uint64_t)v36 + v37, v39, type metadata accessor for MultipartAccessoryPairingInfo);
    v43 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
    v44 = (uint64_t)v82;
    v45 = &v82[*(int *)(v43 + 48)];
    v46 = *(int *)(v34 + 48);
    v47 = v78;
    v48 = (uint64_t)v78 + v46;
    *v78 = v42;
    v47[1] = v41;
    sub_10005972C(v40, (uint64_t)v47 + v46, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_10000F9B8(v48 + *(int *)(v31 + 24), v44, (uint64_t *)&unk_1010F9890);
    sub_10001BBBC(v89, v90);
    sub_10001BBBC(v42, v41);
    sub_1000126B0(v48, type metadata accessor for MultipartAccessoryPairingInfo);
    v49 = *(int *)(v34 + 48);
    v50 = v79;
    v51 = (unsigned __int8 *)v79 + v49;
    *v79 = *(_OWORD *)v36;
    sub_10005972C(v40, (uint64_t)v50 + v49, type metadata accessor for MultipartAccessoryPairingInfo);
    LODWORD(v90) = *v51;
    sub_1000126B0((uint64_t)v51, type metadata accessor for MultipartAccessoryPairingInfo);
    v52 = *(int *)(v34 + 48);
    v53 = v80;
    v54 = (uint64_t)v80 + v52;
    *v80 = *(_OWORD *)v36;
    sub_10005972C(v40, (uint64_t)v53 + v52, type metadata accessor for MultipartAccessoryPairingInfo);
    LOBYTE(v34) = *(_BYTE *)(v54 + *(int *)(v91 + 28));
    sub_1000126B0(v54, type metadata accessor for MultipartAccessoryPairingInfo);
    *(_WORD *)v45 = v90;
    v45[2] = v34;
    swift_storeEnumTagMultiPayload(v44, v83, 0);
    sub_1000126EC(v44, (uint64_t)v93, type metadata accessor for OwnedBeaconGroup.PairingState);
    v55 = v84;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v84);
    v94 = (_QWORD *)*v55;
    v57 = v94;
    *v55 = 0x8000000000000000;
    v59 = sub_100518E4C(v42, v41);
    v60 = v57[2];
    v61 = (v58 & 1) == 0;
    v62 = v60 + v61;
    if (__OFADD__(v60, v61))
      break;
    v63 = v58;
    if (v57[3] >= v62)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v66 = v94;
        if ((v58 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100A99F50();
        v66 = v94;
        if ((v63 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100A850F8(v62, isUniquelyReferenced_nonNull_native);
      v64 = sub_100518E4C(v42, v41);
      if ((v63 & 1) != (v65 & 1))
        goto LABEL_40;
      v59 = v64;
      v66 = v94;
      if ((v63 & 1) != 0)
      {
LABEL_4:
        sub_1000596D0((uint64_t)v93, v66[7] + *(_QWORD *)(v75 + 72) * v59);
        goto LABEL_5;
      }
    }
    v66[(v59 >> 6) + 8] |= 1 << v59;
    v67 = (uint64_t *)(v66[6] + 16 * v59);
    *v67 = v42;
    v67[1] = v41;
    sub_1000126EC((uint64_t)v93, v66[7] + *(_QWORD *)(v75 + 72) * v59, type metadata accessor for OwnedBeaconGroup.PairingState);
    v68 = v66[2];
    v69 = __OFADD__(v68, 1);
    v70 = v68 + 1;
    if (v69)
      goto LABEL_37;
    v66[2] = v70;
    sub_10001BBBC(v42, v41);
LABEL_5:
    *v55 = v66;
    swift_bridgeObjectRelease();
    sub_10001BC14(v42, v41);
    sub_1000126B0(v86, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_100004048((uint64_t)v92, &qword_1010EBFF8);
    v20 = v87;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

uint64_t sub_1008E1CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;

  v58 = sub_10001A9A8(&qword_1010EBFF8);
  v3 = __chkstk_darwin(v58);
  v57 = (uint64_t *)((char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v56 = (char *)&v47 - v6;
  v7 = __chkstk_darwin(v5);
  v55 = (uint64_t *)((char *)&v47 - v8);
  v9 = __chkstk_darwin(v7);
  v54 = (uint64_t *)((char *)&v47 - v10);
  __chkstk_darwin(v9);
  v53 = (uint64_t *)((char *)&v47 - v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (!v12)
    return (uint64_t)v13;
  v47 = v1;
  v61 = _swiftEmptyArrayStorage;
  sub_10009A364(0, v12, 0);
  result = sub_10001D6A8(a1);
  v16 = result;
  v17 = 0;
  v18 = a1 + 64;
  v48 = a1 + 80;
  v49 = v12;
  v51 = a1 + 64;
  v52 = a1;
  v50 = v15;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(a1 + 32))
  {
    v21 = (unint64_t)v16 >> 6;
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
      goto LABEL_26;
    v59 = v17;
    v60 = 1 << v16;
    v22 = v58;
    v23 = (uint64_t)v53;
    v24 = (uint64_t)v53 + *(int *)(v58 + 48);
    v25 = *(_QWORD *)(a1 + 48);
    v26 = *(_QWORD *)(a1 + 56);
    v27 = (uint64_t *)(v25 + 16 * v16);
    v28 = *v27;
    v29 = v27[1];
    *v53 = *v27;
    *(_QWORD *)(v23 + 8) = v29;
    v30 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    sub_10005972C(v26 + *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72) * v16, v24, type metadata accessor for MultipartAccessoryPairingInfo);
    v31 = (uint64_t)v54;
    *v54 = v28;
    *(_QWORD *)(v31 + 8) = v29;
    sub_10005972C(v24, v31 + *(int *)(v22 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
    v32 = v55;
    sub_100005CF0(v31, (uint64_t)v55, &qword_1010EBFF8);
    sub_10001BBBC(v28, v29);
    sub_10001BBBC(v28, v29);
    sub_100004048(v23, &qword_1010EBFF8);
    v33 = *(int *)(v22 + 48);
    v34 = (uint64_t)&v56[v33];
    v35 = *v32;
    v36 = v32[1];
    sub_10005972C((uint64_t)v32 + v33, (uint64_t)&v56[v33], type metadata accessor for MultipartAccessoryPairingInfo);
    v37 = (uint64_t)v57;
    v38 = (uint64_t)v57 + *(int *)(v22 + 48);
    *v57 = v35;
    *(_QWORD *)(v37 + 8) = v36;
    sub_1000126EC(v34, v38, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_10001BBBC(v35, v36);
    sub_10001BBBC(v35, v36);
    sub_100004048(v37, &qword_1010EBFF8);
    sub_100004048((uint64_t)v32, &qword_1010EBFF8);
    v13 = v61;
    result = swift_isUniquelyReferenced_nonNull_native(v61);
    if ((result & 1) == 0)
    {
      result = sub_10009A364(0, v13[2] + 1, 1);
      v13 = v61;
    }
    v40 = v13[2];
    v39 = v13[3];
    if (v40 >= v39 >> 1)
    {
      result = sub_10009A364(v39 > 1, v40 + 1, 1);
      v13 = v61;
    }
    v13[2] = v40 + 1;
    v41 = &v13[2 * v40];
    v41[4] = v35;
    v41[5] = v36;
    a1 = v52;
    v19 = 1 << *(_BYTE *)(v52 + 32);
    if (v16 >= v19)
      goto LABEL_27;
    v18 = v51;
    v42 = *(_QWORD *)(v51 + 8 * v21);
    if ((v42 & v60) == 0)
      goto LABEL_28;
    LODWORD(v15) = v50;
    if (*(_DWORD *)(v52 + 36) != (_DWORD)v50)
      goto LABEL_29;
    v43 = v42 & (-2 << (v16 & 0x3F));
    if (v43)
    {
      v19 = __clz(__rbit64(v43)) | v16 & 0xFFFFFFFFFFFFFFC0;
      v20 = v49;
    }
    else
    {
      v44 = v21 + 1;
      v45 = (unint64_t)(v19 + 63) >> 6;
      v20 = v49;
      if (v21 + 1 < v45)
      {
        v46 = *(_QWORD *)(v51 + 8 * v44);
        if (v46)
        {
LABEL_22:
          v19 = __clz(__rbit64(v46)) + (v44 << 6);
        }
        else
        {
          while (v45 - 2 != v21)
          {
            v46 = *(_QWORD *)(v48 + 8 * v21++);
            if (v46)
            {
              v44 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v17 = v59 + 1;
    v16 = v19;
    if (v59 + 1 == v20)
      return (uint64_t)v13;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1008E20AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  uint8_t *v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  _BYTE *v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  unint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  _BYTE v132[16];
  uint64_t v133[4];
  uint64_t v134;
  uint64_t v135;

  v125 = a7;
  v8 = v7;
  v116 = a6;
  v115 = a5;
  v117 = a3;
  v118 = a4;
  v11 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v11);
  v119 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v13);
  v15 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for AccessoryProductInfo(0);
  v16 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v121 = (uint64_t)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v18);
  v20 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OwnedBeaconGroup(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v122 = (uint64_t)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v126 = (uint64_t)&v114 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v114 - v28;
  __chkstk_darwin(v27);
  v128 = (uint64_t)&v114 - v30;
  v129 = a1;
  v127 = a2;
  v123 = v8;
  sub_10081F138(a1, a2, (uint64_t)v20);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v130 = (int *)v21;
  v32 = v31(v20, 1, v21);
  if (v32 != 1)
  {
    sub_1000126EC((uint64_t)v20, (uint64_t)v29, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_10001A9E8(v45, (uint64_t)qword_1011B7DF8);
    v47 = v126;
    v48 = sub_10005972C((uint64_t)v29, v126, type metadata accessor for OwnedBeaconGroup);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    v51 = os_log_type_enabled(v49, v50);
    v52 = v129;
    if (v51)
    {
      v53 = swift_slowAlloc(22, -1);
      v125 = (uint64_t)v29;
      v54 = v53;
      v121 = swift_slowAlloc(32, -1);
      v133[0] = v121;
      *(_DWORD *)v54 = 141558275;
      v131 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v54 + 4, v54 + 12);
      *(_WORD *)(v54 + 12) = 2081;
      v120 = v54 + 14;
      v55 = v46;
      v56 = v47;
      v57 = type metadata accessor for UUID(0);
      v58 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v57, v58);
      v131 = sub_100016940(v59, v60, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v120, v54 + 22);
      swift_bridgeObjectRelease();
      v61 = v56;
      v46 = v55;
      v52 = v129;
      sub_1000126B0(v61, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Found existing OwnedBeaconGroup %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
      v62 = v121;
      swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      v63 = v54;
      v29 = (char *)v125;
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {
      sub_1000126B0(v47, type metadata accessor for OwnedBeaconGroup);
    }

    v64 = v127;
    sub_100367170(v46);
    v65 = v128;
    sub_1000126EC((uint64_t)v29, v128, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_21;
  }
  LODWORD(v126) = 1;
  sub_100004048((uint64_t)v20, (uint64_t *)&unk_1010FF7F0);
  v33 = *(_QWORD *)(v125 + 112);
  if (v33 >> 60 != 15)
  {
    v34 = *(_QWORD *)(v125 + 104);
    v35 = v125 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
    swift_beginAccess(v125 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, v133, 0, 0);
    sub_10000F9B8(v35, (uint64_t)v15, (uint64_t *)&unk_10111C0A0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v120) == 1)
    {
      sub_100004048((uint64_t)v15, (uint64_t *)&unk_10111C0A0);
      goto LABEL_5;
    }
    v66 = v121;
    sub_1000126EC((uint64_t)v15, v121, type metadata accessor for AccessoryProductInfo);
    sub_10001BD08(v34, v33);
    v125 = sub_1008EC664(v34, v33, v66);
    v68 = v67;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v69 = type metadata accessor for Logger(0);
    v70 = sub_10001A9E8(v69, (uint64_t)qword_1011B7DF8);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.info.getter(v71);
    v73 = os_log_type_enabled(v71, v72);
    v64 = v127;
    v52 = v129;
    if (v73)
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Creating new OwnedBeaconGroup.", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

    v75 = v130;
    v76 = v128;
    v77 = v128 + v130[7];
    v78 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v77, v115, v78);
    v79 = v116;
    swift_bridgeObjectRetain(v116);
    v80 = v118;
    swift_bridgeObjectRetain(v118);
    UUID.init()(v81);
    *(_OWORD *)v76 = xmmword_100E22FC0;
    v82 = v124;
    *(_QWORD *)(v76 + 16) = v125;
    *(_BYTE *)(v76 + 24) = v68 & 1;
    v131 = (uint64_t)&_swiftEmptyDictionarySingleton;
    sub_1008E1674(v79, &v131);
    v124 = v82;
    swift_bridgeObjectRelease();
    v83 = v34;
    v65 = v76;
    sub_10001EF3C(v83, v33);
    *(_BYTE *)(v76 + v75[8]) = 1;
    v84 = (_QWORD *)(v76 + v75[9]);
    *v84 = v117;
    v84[1] = v80;
    *(_QWORD *)(v76 + v75[10]) = v131;
    sub_1000126B0(v121, type metadata accessor for AccessoryProductInfo);
    v32 = v126;
LABEL_21:
    v85 = swift_allocBox(v130);
    v87 = v86;
    sub_10005972C(v65, v86, type metadata accessor for OwnedBeaconGroup);
    if (sub_100371B30(v52, v64))
    {
      v88 = v85;
      v89 = dispatch_group_create();
      v85 = swift_allocObject(&unk_10109AB68, 17, 7);
      *(_BYTE *)(v85 + 16) = 0;
      v90 = (_BYTE *)(v85 + 16);
      dispatch_group_enter(v89);
      if (v32 == 1)
      {
        v91 = v122;
        sub_10005972C(v87, v122, type metadata accessor for OwnedBeaconGroup);
        v92 = v89;
        swift_retain();
        sub_100860D90(v91, 0, v123, v92, v85);

        v93 = v85;
      }
      else
      {
        v91 = v122;
        sub_10005972C(v65, v122, type metadata accessor for OwnedBeaconGroup);
        v106 = swift_allocObject(&unk_10109AB90, 32, 7);
        *(_QWORD *)(v106 + 16) = v89;
        *(_QWORD *)(v106 + 24) = v85;
        swift_retain();
        v107 = v89;
        swift_retain();
        sub_1007A0418(v91, 0, (void (*)(uint64_t))sub_1008EC98C, v88, sub_1008ECD44, (void (*)(uint64_t))v106);
        swift_release(v88);
        v93 = v106;
      }
      swift_release(v93);
      sub_1000126B0(v91, type metadata accessor for OwnedBeaconGroup);
      OS_dispatch_group.wait()();
      swift_beginAccess(v90, &v131, 0, 0);
      if ((*v90 & 1) == 0)
      {
        sub_1000126B0(v65, type metadata accessor for OwnedBeaconGroup);
        swift_release(v88);

        return swift_release(v85);
      }
      v108 = sub_10008806C();
      v109 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v108, 0, 0);
      *v110 = 15;
      swift_willThrow(v109);

      sub_1000126B0(v65, type metadata accessor for OwnedBeaconGroup);
      swift_release(v88);
    }
    else
    {
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v94 = type metadata accessor for Logger(0);
      sub_10001A9E8(v94, (uint64_t)qword_1011B7DF8);
      sub_10001BBBC(v52, v64);
      v95 = sub_10001BBBC(v52, v64);
      v96 = Logger.logObject.getter(v95);
      v97 = static os_log_type_t.error.getter(v96);
      if (os_log_type_enabled(v96, v97))
      {
        v130 = (int *)v85;
        v98 = (uint8_t *)swift_slowAlloc(12, -1);
        v128 = swift_slowAlloc(32, -1);
        v131 = v128;
        *(_DWORD *)v98 = 136315138;
        v99 = sub_10001BBBC(v52, v64);
        v100 = v119;
        static String.Encoding.utf8.getter(v99);
        v101 = String.init(data:encoding:)(v52, v64, v100);
        if (!v102)
          v101 = Data.hexString.getter(v52, v64);
        v103 = v101;
        v104 = v102;
        sub_10001BC14(v52, v64);
        v134 = sub_100016940(v103, v104, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v98 + 4, v98 + 12);
        swift_bridgeObjectRelease();
        sub_10001BC14(v52, v64);
        sub_10001BC14(v52, v64);
        _os_log_impl((void *)&_mh_execute_header, v96, v97, "Unable to set pairing locked state for %s", v98, 0xCu);
        v105 = v128;
        swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1, -1);
        swift_slowDealloc(v98, -1, -1);

        v85 = (uint64_t)v130;
      }
      else
      {
        sub_10001BC14(v52, v64);
        sub_10001BC14(v52, v64);

      }
      v111 = sub_10008806C();
      v112 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v111, 0, 0);
      *v113 = 2;
      swift_willThrow(v112);
      sub_1000126B0(v65, type metadata accessor for OwnedBeaconGroup);
    }
    return swift_release(v85);
  }
LABEL_5:
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_10001A9E8(v36, (uint64_t)qword_1011B7DF8);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.error.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Missing product info to handle pairing lock error.", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }

  v41 = sub_10008806C();
  v42 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v41, 0, 0);
  *v43 = 5;
  return swift_willThrow(v42);
}

uint64_t sub_1008E2C44(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4, uint64_t a5, void (*a6)(_QWORD, _QWORD, _QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  unint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  unint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  _BOOL4 v135;
  os_log_type_t v136;
  uint64_t v137;
  uint64_t v138;
  uint8_t *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  os_log_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint8_t *v153;
  unint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unsigned int (*v160)(uint64_t, uint64_t, uint64_t);
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  os_log_type_t v171;
  _BOOL4 v172;
  uint64_t v173;
  uint8_t *v174;
  int *v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(_QWORD, _QWORD, _QWORD);
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  NSObject *v185;
  os_log_type_t v186;
  _BOOL4 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  NSObject *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  int *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(_QWORD, _QWORD, _QWORD);
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  int v232;
  int *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t *v237;
  char *v238;
  uint64_t *v239;
  uint64_t v240;
  void (*v241)(char *, char *, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int *v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int *v257;
  _OWORD *v258;
  char *v259;
  __int128 *v260;
  __int128 v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  _QWORD *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  NSObject *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  NSObject *v289;
  uint64_t v290;
  char *v291;
  char *v292;
  void (*v293)(char *, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  NSObject *v297;
  os_log_type_t v298;
  _BOOL4 v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint8_t *v303;
  unint64_t v304;
  uint64_t v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  _BYTE *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  NSObject *v331;
  os_log_type_t v332;
  _BOOL4 v333;
  uint64_t v334;
  uint64_t v335;
  uint8_t *v336;
  unint64_t v337;
  uint64_t v338;
  _BYTE *v339;
  NSObject *v340;
  os_log_type_t v341;
  uint8_t *v342;
  unint64_t v343;
  uint64_t v344;
  _BYTE *v345;
  uint64_t v346;
  uint64_t v347;
  NSObject *v348;
  os_log_type_t v349;
  uint8_t *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  os_log_type_t v358;
  uint64_t v359;
  uint8_t *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  _BYTE *v365;
  unsigned __int8 *v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  char v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  NSObject *v374;
  uint64_t v375;
  uint64_t v376;
  NSObject *v377;
  uint64_t v378;
  NSObject *v379;
  uint64_t v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  NSObject *v386;
  os_log_type_t v387;
  uint8_t *v388;
  unint64_t v389;
  uint64_t v390;
  char *v391;
  char v392;
  uint64_t v393;
  uint64_t v394;
  NSObject *v395;
  os_log_type_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  NSObject *v417;
  os_log_type_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unsigned int (*v429)(uint64_t, uint64_t, uint64_t);
  uint64_t v430;
  os_log_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t (*v444)(uint64_t, uint64_t, uint64_t);
  char *v445;
  unint64_t v446;
  uint64_t v447;
  char *v448;
  uint64_t v449;
  unsigned __int8 *v450;
  uint64_t v451;
  _OWORD *v452;
  char *v453;
  char *v454;
  _QWORD *v455;
  unint64_t v456;
  uint64_t v457;
  char *v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  void (*v482)(char *, char *, uint64_t);
  uint64_t v483;
  __int128 *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  char *v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  char *v494;
  uint64_t v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t isa;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  char v506[8];
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  unint64_t v511;
  char v512[8];
  __int128 v513;
  __int128 v514;
  uint64_t v515;
  uint64_t v516;
  __int128 v517;
  NSObject *v518;
  uint64_t v519;

  v492 = a8;
  v480 = a7;
  v482 = a6;
  v481 = a5;
  v484 = a3;
  v464 = a2;
  v463 = a1;
  v461 = type metadata accessor for BeaconObservation(0);
  v462 = *(_QWORD *)(v461 - 8);
  __chkstk_darwin(v461);
  v467 = (uint64_t)&v429 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EC008);
  __chkstk_darwin(v10);
  v472 = (uint64_t)&v429 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v473 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v471 = *(_QWORD *)(v473 - 8);
  __chkstk_darwin(v473);
  v13 = (unsigned __int8 *)&v429 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v486 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v486);
  v477 = (uint64_t)&v429 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v491 = type metadata accessor for DispatchTime(0);
  v487 = *(_QWORD *)(v491 - 8);
  v15 = __chkstk_darwin(v491);
  v489 = (char *)&v429 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v490 = (char *)&v429 - v17;
  v485 = type metadata accessor for PairingConfig(0);
  __chkstk_darwin(v485);
  v498 = (uint64_t)&v429 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v499 = type metadata accessor for OwnedBeaconRecord(0);
  v488 = *(_QWORD *)(v499 - 8);
  v19 = __chkstk_darwin(v499);
  v465 = (uint64_t)&v429 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v468 = (uint64_t)&v429 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v429 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v429 - v26;
  v483 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v483);
  v29 = (char *)&v429 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v30);
  v494 = (char *)&v429 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v469 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v32 = __chkstk_darwin(v469);
  v470 = (uint64_t)&v429 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v493 = (uint64_t)&v429 - v34;
  v502 = type metadata accessor for OwnedBeaconGroup(0);
  v495 = *(_QWORD *)(v502 - 8);
  v35 = __chkstk_darwin(v502);
  v466 = (uint64_t)&v429 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v475 = (uint64_t)&v429 - v38;
  v39 = __chkstk_darwin(v37);
  v476 = (uint64_t)&v429 - v40;
  v41 = __chkstk_darwin(v39);
  v479 = (uint64_t)&v429 - v42;
  v43 = __chkstk_darwin(v41);
  v478 = (uint64_t)&v429 - v44;
  v45 = __chkstk_darwin(v43);
  v500 = (uint64_t)&v429 - v46;
  __chkstk_darwin(v45);
  v48 = (char *)&v429 - v47;
  v49 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v49);
  v51 = (char *)&v429 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v518 = type metadata accessor for AccessoryProductInfo(0);
  isa = (uint64_t)v518[-1].isa;
  __chkstk_darwin(v518);
  v53 = (char *)&v429 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v54);
  v496 = (char *)&v429 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_10001A9A8(&qword_1010ED860);
  v57 = __chkstk_darwin(v56);
  v474 = (uint64_t)&v429 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57);
  v60 = (char *)&v429 - v59;
  v61 = type metadata accessor for UUID(0);
  v62 = __chkstk_darwin(v61);
  v65 = &qword_1010EA000;
  if (!a4[12])
    goto LABEL_12;
  v66 = a4[14];
  if (v66 >> 60 == 15)
    goto LABEL_12;
  v67 = *(_QWORD *)((char *)a4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
  if (v67 >> 60 == 15)
    goto LABEL_12;
  v457 = a4[12];
  v450 = v13;
  v459 = v66;
  v452 = v27;
  v456 = v67;
  v454 = v53;
  v453 = v48;
  v458 = (char *)&v429 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v451 = a4[11];
  v68 = a4[13];
  v69 = *(_QWORD *)((char *)a4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v460 = v64;
  v455 = a4;
  v70 = (char *)a4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  v71 = v62;
  swift_beginAccess((char *)a4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, v512, 0, 0);
  v72 = (uint64_t)v70;
  v73 = v460;
  sub_10000F9B8(v72, (uint64_t)v60, &qword_1010ED860);
  v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
  if (v74(v60, 1, v71) == 1)
  {
    sub_100004048((uint64_t)v60, &qword_1010ED860);
LABEL_11:
    v65 = &qword_1010EA000;
LABEL_12:
    if (v65[99] != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v84 = type metadata accessor for Logger(0);
    v85 = sub_10001A9E8(v84, (uint64_t)qword_1011B7DF8);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.error.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "generateOwnedBeaconRecordGroup: could not get basic device info from the session.", v88, 2u);
      swift_slowDealloc(v88, -1, -1);
    }

    v89 = sub_10008806C();
    v90 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v89, 0, 0);
    *v91 = 5;
    return swift_willThrow(v90);
  }
  v444 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v74;
  v445 = v25;
  v448 = v29;
  v75 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
  v76 = v458;
  v75(v458, v60, v71);
  v77 = v456;
  v510 = v69;
  v511 = v456;
  sub_10001BD08(v69, v456);
  sub_10001BD08(v69, v77);
  swift_bridgeObjectRetain(v457);
  v78 = v68;
  v79 = v68;
  v80 = v459;
  sub_10001BD08(v78, v459);
  v446 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v446) & 1) != 0)
  {
    sub_10001EF3C(v69, v77);
    (*(void (**)(char *, uint64_t))(v460 + 8))(v76, v71);
    sub_10001EF3C(v79, v80);
    sub_10001EF3C(v69, v77);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v449 = v79;
  v447 = v71;
  v81 = Data.trimmed.getter(v69, v77);
  v83 = v82;
  sub_10001EF3C(v69, v77);
  if (*((_BYTE *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v460 + 8))(v458, v447);
    sub_10001EF3C(v449, v459);
    sub_10001EF3C(v69, v77);
    sub_10001BC14(v81, v83);
    goto LABEL_10;
  }
  v443 = v81;
  v442 = v69;
  v93 = (_QWORD *)((char *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
  v94 = *(_QWORD *)((char *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8);
  v95 = v460;
  v96 = v449;
  v436 = *((unsigned __int8 *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
  if (v94 >> 60 == 15)
  {
    v434 = 0;
    v440 = 0;
    v435 = 0;
    v439 = 0;
    v97 = v442;
  }
  else
  {
    v98 = *(_QWORD *)((char *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8);
    v97 = v442;
    v99 = v443;
    if (v98 >> 60 == 15)
    {
      v434 = 0;
      v440 = 0;
      v435 = 0;
      v439 = 0;
      goto LABEL_33;
    }
    v100 = v442;
    v101 = *(_QWORD *)((char *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
    v102 = *v93;
    sub_10001BD08(*v93, v94);
    sub_10001BD08(v101, v98);
    v103 = v101;
    v104 = Data.hexString.getter(v101, v98);
    v106 = HIBYTE(v105) & 0xF;
    if ((v105 & 0x2000000000000000) == 0)
      v106 = v104 & 0xFFFFFFFFFFFFLL;
    if (v106)
    {
      v435 = v104;
      v439 = v105;
    }
    else
    {
      swift_bridgeObjectRelease();
      v435 = 0;
      v439 = 0;
    }
    v107 = Data.hexString.getter(v102, v94);
    v109 = HIBYTE(v108) & 0xF;
    if ((v108 & 0x2000000000000000) == 0)
      v109 = v107 & 0xFFFFFFFFFFFFLL;
    v97 = v100;
    if (v109)
    {
      v434 = v107;
      v440 = v108;
    }
    else
    {
      swift_bridgeObjectRelease();
      v434 = 0;
      v440 = 0;
    }
    v96 = v449;
    sub_10001EF3C(v102, v94);
    sub_10001EF3C(v103, v98);
    v95 = v460;
  }
  v99 = v443;
LABEL_33:
  v510 = v99;
  v511 = v83;
  v110 = sub_1008EB834();
  v111 = RawRepresentable<>.hexString.getter(&type metadata for OwnedBeaconGroup.SerialNumber, v110);
  v113 = HIBYTE(v112) & 0xF;
  if ((v112 & 0x2000000000000000) == 0)
    v113 = v111 & 0xFFFFFFFFFFFFLL;
  v441 = v83;
  if (v113)
  {
    v114 = *(_QWORD *)((char *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8);
    v438 = v112;
    v433 = v111;
    if (v114 >> 60 == 15)
    {
      v432 = 0;
      v115 = 0;
      v116 = v95;
      goto LABEL_52;
    }
    v510 = *(_QWORD *)((char *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
    v511 = v114;
    v125 = v510;
    sub_10001BBBC(v510, v114);
    if ((DataProtocol.isNull.getter(&type metadata for Data, v446) & 1) != 0)
    {
      sub_10001EF3C(v125, v114);
    }
    else
    {
      v437 = Data.trimmed.getter(v125, v114);
      v510 = v437;
      v511 = v126;
      v446 = v126;
      v127 = RawRepresentable<>.hexString.getter(&type metadata for OwnedBeaconGroup.SerialNumber, v110);
      v115 = v128;
      v129 = HIBYTE(v128) & 0xF;
      v432 = v127;
      if ((v128 & 0x2000000000000000) == 0)
        v129 = v127 & 0xFFFFFFFFFFFFLL;
      if (v129)
      {
        sub_10001EF3C(v125, v114);
        sub_10001BC14(v437, v446);
LABEL_51:
        v116 = v95;
        v99 = v443;
LABEL_52:
        v437 = v115;
        if (qword_1010EA318 != -1)
          swift_once(&qword_1010EA318, sub_100B5E330);
        v130 = type metadata accessor for Logger(0);
        v131 = sub_10001A9E8(v130, (uint64_t)qword_1011B7DF8);
        sub_10001BBBC(v99, v83);
        v132 = sub_10001BBBC(v99, v83);
        v133 = Logger.logObject.getter(v132);
        v134 = static os_log_type_t.default.getter(v133);
        v135 = os_log_type_enabled(v133, v134);
        v446 = v131;
        if (v135)
        {
          v136 = v134;
          v431 = v133;
          v137 = swift_slowAlloc(22, -1);
          v138 = swift_slowAlloc(32, -1);
          v510 = v138;
          *(_DWORD *)v137 = 141558275;
          v508 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v508, &v509, v137 + 4, v137 + 12);
          v139 = (uint8_t *)v137;
          *(_WORD *)(v137 + 12) = 2081;
          v140 = sub_10001BBBC(v99, v83);
          v141 = v496;
          static String.Encoding.utf8.getter(v140);
          v142 = String.init(data:encoding:)(v99, v83, v141);
          if (v143)
          {
            v144 = v143;
            v145 = v142;
          }
          else
          {
            v145 = Data.hexString.getter(v99, v83);
            v144 = v146;
          }
          sub_10001BC14(v99, v83);
          v508 = sub_100016940(v145, v144, &v510);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v508, &v509, v139 + 14, v139 + 22);
          swift_bridgeObjectRelease();
          sub_10001BC14(v99, v83);
          sub_10001BC14(v99, v83);
          v147 = v431;
          _os_log_impl((void *)&_mh_execute_header, v431, v136, "Removing any existing beacon record for %{private,mask.hash}s", v139, 0x16u);
          swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v138, -1, -1);
          swift_slowDealloc(v139, -1, -1);

          v96 = v449;
          v116 = v460;
          v131 = v446;
        }
        else
        {
          sub_10001BC14(v99, v83);
          sub_10001BC14(v99, v83);

        }
        v148 = v503;
        sub_1008E8BEC(v99, v83);
        v149 = (uint64_t)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
        swift_beginAccess((char *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, &v510, 0, 0);
        sub_10000F9B8(v149, (uint64_t)v51, (uint64_t *)&unk_10111C0A0);
        if ((*(unsigned int (**)(char *, uint64_t, NSObject *))(isa + 48))(v51, 1, v518) == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v150 = sub_100004048((uint64_t)v51, (uint64_t *)&unk_10111C0A0);
          v151 = Logger.logObject.getter(v150);
          v152 = static os_log_type_t.error.getter(v151);
          if (os_log_type_enabled(v151, v152))
          {
            v153 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v153 = 0;
            _os_log_impl((void *)&_mh_execute_header, v151, v152, "Missing product info to create beacon.", v153, 2u);
            swift_slowDealloc(v153, -1, -1);
          }

          v154 = sub_10008806C();
          v155 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v154, 0, 0);
          *v156 = 5;
          swift_willThrow(v155);
          sub_10001EF3C(v96, v459);
          sub_10001BC14(v99, v441);
          sub_10001EF3C(v442, v456);
          return (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v458, v447);
        }
        v157 = (uint64_t)v454;
        sub_1000126EC((uint64_t)v51, (uint64_t)v454, type metadata accessor for AccessoryProductInfo);
        v430 = sub_1008EC664(v96, v459, v157);
        LODWORD(v431) = v158;
        v159 = v493;
        sub_10081F138(v99, v83, v493);
        v160 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v495 + 48);
        v161 = v160(v159, 1, v502);
        v429 = v160;
        if (v161 == 1)
        {
          sub_100004048(v159, (uint64_t *)&unk_1010FF7F0);
          v162 = v492;
          v163 = v497;
          v164 = v83;
          v165 = sub_1008E1CA0(v492);
          sub_10001BBBC(v99, v164);
          v166 = sub_1008EBFB4(v165);
          sub_10001BC14(v99, v164);
          swift_bridgeObjectRelease();
          v167 = sub_100CA7E28((uint64_t)v166);
          swift_bridgeObjectRelease();
          v508 = (uint64_t)&_swiftEmptySetSingleton;
          swift_retain();
          sub_1008EB878(v167, v148, (uint64_t)&v508);
          swift_bridgeObjectRelease();
          swift_release(v148);
          v168 = v508;
          swift_retain();
          sub_1008EBB8C(v168, v148);
          swift_bridgeObjectRelease();
          v169 = swift_release(v148);
          v170 = Logger.logObject.getter(v169);
          v171 = static os_log_type_t.default.getter(v170);
          v172 = os_log_type_enabled(v170, v171);
          v173 = (uint64_t)v453;
          if (v172)
          {
            v174 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v174 = 0;
            _os_log_impl((void *)&_mh_execute_header, v170, v171, "Creating new OwnedBeaconGroup.", v174, 2u);
            swift_slowDealloc(v174, -1, -1);
          }

          v175 = (int *)v502;
          v176 = v173 + *(int *)(v502 + 28);
          v177 = type metadata accessor for MACAddress(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v177 - 8) + 16))(v176, v480, v177);
          swift_bridgeObjectRetain(v162);
          v178 = v482;
          swift_bridgeObjectRetain((void (*)(char *, char *, uint64_t))v482);
          UUID.init()(v179);
          *(_OWORD *)v173 = xmmword_100E22FC0;
          *(_QWORD *)(v173 + 16) = v430;
          *(_BYTE *)(v173 + 24) = v431 & 1;
          v508 = (uint64_t)&_swiftEmptyDictionarySingleton;
          sub_1008E1674(v162, &v508);
          v497 = v163;
          swift_bridgeObjectRelease();
          LODWORD(v493) = 0;
          *(_BYTE *)(v173 + v175[8]) = 1;
          v180 = (_QWORD *)(v173 + v175[9]);
          *v180 = v481;
          v180[1] = v178;
          *(_QWORD *)(v173 + v175[10]) = v508;
          goto LABEL_83;
        }
        v181 = v500;
        sub_1000126EC(v159, v500, type metadata accessor for OwnedBeaconGroup);
        v182 = v181;
        v183 = v478;
        v184 = sub_10005972C(v182, v478, type metadata accessor for OwnedBeaconGroup);
        v185 = Logger.logObject.getter(v184);
        v186 = static os_log_type_t.default.getter(v185);
        v187 = os_log_type_enabled(v185, v186);
        v173 = (uint64_t)v453;
        if (v187)
        {
          v188 = swift_slowAlloc(22, -1);
          v189 = swift_slowAlloc(32, -1);
          v508 = v189;
          *(_DWORD *)v188 = 141558275;
          v505 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v505, v506, v188 + 4, v188 + 12);
          *(_WORD *)(v188 + 12) = 2081;
          v493 = v188 + 14;
          v190 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v191 = dispatch thunk of CustomStringConvertible.description.getter(v447, v190);
          v505 = sub_100016940(v191, v192, &v508);
          v131 = v446;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v505, v506, v493, v188 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v183, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl((void *)&_mh_execute_header, v185, v186, "Found existing OwnedBeaconGroup %{private,mask.hash}s", (uint8_t *)v188, 0x16u);
          swift_arrayDestroy(v189, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v189, -1, -1);
          swift_slowDealloc(v188, -1, -1);
        }
        else
        {
          sub_1000126B0(v183, type metadata accessor for OwnedBeaconGroup);
        }

        v193 = v500;
        sub_100367170(v131);
        v194 = *((_BYTE *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair);
        v195 = v479;
        sub_10005972C(v193, v479, type metadata accessor for OwnedBeaconGroup);
        if ((v194 & 1) != 0)
        {
          sub_1000126B0(v195, type metadata accessor for OwnedBeaconGroup);
LABEL_73:
          sub_1000126EC(v500, v173, type metadata accessor for OwnedBeaconGroup);
          LODWORD(v493) = 1;
          goto LABEL_83;
        }
        v196 = sub_1003690A8();
        v197 = v476;
        sub_10005972C(v195, v476, type metadata accessor for OwnedBeaconGroup);
        if ((v196 & 1) != 0)
        {
          sub_1000126B0(v197, type metadata accessor for OwnedBeaconGroup);
          sub_1000126B0(v195, type metadata accessor for OwnedBeaconGroup);
        }
        else
        {
          v198 = v474;
          sub_10036A9C8(v99, v441, v474);
          sub_1000126B0(v197, type metadata accessor for OwnedBeaconGroup);
          sub_1000126B0(v195, type metadata accessor for OwnedBeaconGroup);
          v199 = v444(v198, 1, v447);
          sub_100004048(v198, &qword_1010ED860);
          if (v199 == 1)
            goto LABEL_73;
        }
        v200 = v99;
        v201 = v99;
        v202 = v441;
        sub_10001BBBC(v200, v441);
        v203 = sub_10001BBBC(v201, v202);
        v204 = Logger.logObject.getter(v203);
        v205 = static os_log_type_t.default.getter(v204);
        if (os_log_type_enabled(v204, (os_log_type_t)v205))
        {
          LODWORD(v493) = v205;
          v206 = swift_slowAlloc(22, -1);
          v207 = swift_slowAlloc(32, -1);
          v508 = v207;
          *(_DWORD *)v206 = 141558275;
          v505 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v505, v506, v206 + 4, v206 + 12);
          *(_WORD *)(v206 + 12) = 2081;
          v208 = sub_10001BBBC(v201, v202);
          v209 = v496;
          static String.Encoding.utf8.getter(v208);
          v210 = String.init(data:encoding:)(v201, v202, v209);
          if (!v211)
            v210 = Data.hexString.getter(v201, v202);
          v212 = v210;
          v213 = v211;
          sub_10001BC14(v201, v202);
          v505 = sub_100016940(v212, v213, &v508);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v505, v506, v206 + 14, v206 + 22);
          swift_bridgeObjectRelease();
          sub_10001BC14(v201, v202);
          sub_10001BC14(v201, v202);
          _os_log_impl((void *)&_mh_execute_header, v204, (os_log_type_t)v493, "%{private,mask.hash}s is already paired. Need to clean up for possible bud replacement", (uint8_t *)v206, 0x16u);
          swift_arrayDestroy(v207, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v207, -1, -1);
          swift_slowDealloc(v206, -1, -1);

          v173 = (uint64_t)v453;
        }
        else
        {
          sub_10001BC14(v201, v202);
          sub_10001BC14(v201, v202);

        }
        v214 = v500;
        sub_1008E7B10(v500);
        v215 = (int *)v502;
        v216 = v475;
        v217 = v475 + *(int *)(v502 + 28);
        v218 = type metadata accessor for MACAddress(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v217, v480, v218);
        v219 = v492;
        swift_bridgeObjectRetain(v492);
        v220 = v482;
        swift_bridgeObjectRetain((void (*)(char *, char *, uint64_t))v482);
        UUID.init()(v221);
        *(_OWORD *)v216 = xmmword_100E22FC0;
        *(_QWORD *)(v216 + 16) = v430;
        *(_BYTE *)(v216 + 24) = v431 & 1;
        v508 = (uint64_t)&_swiftEmptyDictionarySingleton;
        v222 = v497;
        sub_1008E1674(v219, &v508);
        v497 = v222;
        swift_bridgeObjectRelease();
        *(_BYTE *)(v216 + v215[8]) = 1;
        v223 = (_QWORD *)(v216 + v215[9]);
        *v223 = v481;
        v223[1] = v220;
        *(_QWORD *)(v216 + v215[10]) = v508;
        sub_1000126B0(v214, type metadata accessor for OwnedBeaconGroup);
        sub_1000126EC(v216, v173, type metadata accessor for OwnedBeaconGroup);
        LODWORD(v493) = 0;
        v99 = v443;
LABEL_83:
        v224 = v449;
        v225 = v459;
        sub_1001EDA78(v449, v459);
        v500 = v226;
        v227 = sub_1001EDBAC(v224, v225);
        v229 = v228;
        v230 = v494;
        static Endianness.current.getter(v227);
        sub_10007D5A4();
        FixedWidthInteger.init(data:ofEndianness:)(&v508, v227, v229, v230);
        if (BYTE4(v508))
          v231 = 0;
        else
          v231 = (char *)(int)v508;
        v232 = v454[SHIDWORD(v518[4].isa)];
        if (v232 == 2)
        {
          if (!sub_100A08A54(v224, v225))
          {
LABEL_88:
            v494 = v231;
            v233 = (int *)sub_10001A9A8(&qword_101106F40);
            v234 = (uint64_t)v448;
            v235 = (uint64_t *)&v448[v233[12]];
            v236 = (uint64_t *)&v448[v233[16]];
            v237 = (uint64_t *)&v448[v233[20]];
            v238 = &v448[v233[24]];
            v239 = (uint64_t *)&v448[v233[28]];
            v240 = v460;
            v241 = *(void (**)(char *, char *, uint64_t))(v460 + 16);
            v242 = v447;
            v241(v448, v458, v447);
            v243 = v439;
            *v235 = v435;
            v235[1] = v243;
            v244 = v440;
            *v236 = v434;
            v236[1] = v244;
            v245 = v438;
            *v237 = v433;
            v237[1] = v245;
            *v238 = v436;
            v238[1] = 0;
            v246 = 2;
            v247 = v437;
            *v239 = v432;
            v239[1] = v247;
            goto LABEL_93;
          }
        }
        else if ((v232 & 1) == 0)
        {
          goto LABEL_88;
        }
        swift_bridgeObjectRelease();
        if (!v439 || !v440)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v330 = swift_bridgeObjectRelease();
          v331 = Logger.logObject.getter(v330);
          v332 = static os_log_type_t.error.getter(v331);
          v333 = os_log_type_enabled(v331, v332);
          v334 = v460;
          v335 = v449;
          if (v333)
          {
            v336 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v336 = 0;
            _os_log_impl((void *)&_mh_execute_header, v331, v332, "generateOwnedBeaconRecord: ECID and ChipID are required for HELE accessory", v336, 2u);
            swift_slowDealloc(v336, -1, -1);
          }

          v337 = sub_10008806C();
          v338 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v337, 0, 0);
          *v339 = 5;
          swift_willThrow(v338);
          sub_10001EF3C(v335, v459);
          sub_10001BC14(v99, v441);
          sub_10001EF3C(v442, v456);
          sub_1000126B0((uint64_t)v454, type metadata accessor for AccessoryProductInfo);
          (*(void (**)(char *, uint64_t))(v334 + 8))(v458, v447);
          v316 = v173;
          return sub_1000126B0(v316, type metadata accessor for OwnedBeaconGroup);
        }
        v494 = v231;
        v248 = v439;
        v249 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        v234 = (uint64_t)v448;
        v250 = (uint64_t *)&v448[v249[12]];
        v251 = (uint64_t *)&v448[v249[16]];
        v252 = (uint64_t *)&v448[v249[20]];
        v253 = v249[24];
        v240 = v460;
        v241 = *(void (**)(char *, char *, uint64_t))(v460 + 16);
        v242 = v447;
        v241(v448, v458, v447);
        *v250 = v435;
        v250[1] = v248;
        v254 = v440;
        *v251 = v434;
        v251[1] = v254;
        v246 = 3;
        v255 = v438;
        *v252 = v433;
        v252[1] = v255;
        *(_BYTE *)(v234 + v253) = v436;
LABEL_93:
        v256 = swift_storeEnumTagMultiPayload(v234, v483, v246);
        v257 = (int *)v499;
        v258 = v452;
        v483 = (uint64_t)v452 + *(int *)(v499 + 20);
        UUID.init()(v256);
        sub_10005972C(v234, (uint64_t)v258 + v257[6], type metadata accessor for StableIdentifier);
        v259 = (char *)v258 + v257[7];
        v241(v259, &v453[*(int *)(v502 + 24)], v242);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v240 + 56))(v259, 0, 1, v242);
        sub_1007EEC58((uint64_t)v258 + v257[8]);
        v260 = v484;
        v517 = v484[2];
        sub_100005CF0((uint64_t)(v484 + 3), (uint64_t)&v516, &qword_1010ECB38);
        sub_100005CF0((uint64_t)(v260 + 4), (uint64_t)&v515, &qword_1010ECB38);
        v261 = v260[1];
        v514 = *v260;
        v513 = v261;
        v262 = &v454[SLODWORD(v518[6].isa)];
        v263 = *(_QWORD *)v262;
        v264 = *((_QWORD *)v262 + 1);
        *v258 = xmmword_100E22FC0;
        *(_OWORD *)((char *)v258 + v257[9]) = v517;
        sub_100005CF0((uint64_t)&v516, (uint64_t)v258 + v257[10], &qword_1010ECB38);
        sub_100005CF0((uint64_t)&v515, (uint64_t)v258 + v257[11], &qword_1010ECB38);
        *(_OWORD *)((char *)v258 + v257[12]) = v514;
        *(_OWORD *)((char *)v258 + v257[13]) = v513;
        v265 = (_QWORD *)((char *)v258 + v257[14]);
        *v265 = v263;
        v265[1] = v264;
        v266 = (_QWORD *)((char *)v258 + v257[15]);
        v267 = v457;
        *v266 = v451;
        v266[1] = v267;
        *(_QWORD *)((char *)v258 + v257[16]) = v500;
        *(_QWORD *)((char *)v258 + v257[17]) = v494;
        *((_BYTE *)v258 + v257[18]) = 3;
        *((_BYTE *)v258 + v257[19]) = 0;
        *((_BYTE *)v258 + v257[20]) = 0;
        v268 = *(_QWORD *)((char *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryDisplayName + 8);
        v482 = (void (*)(_QWORD, _QWORD, _QWORD))v241;
        if (v268)
        {
          v269 = *(_QWORD *)((char *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryDisplayName);
          sub_100059DE8((uint64_t)&v517);
          sub_10007D62C(&v516);
          sub_10007D62C(&v515);
          sub_100059DE8((uint64_t)&v514);
          sub_100059DE8((uint64_t)&v513);
          swift_bridgeObjectRetain(v264);
          v270 = v268;
          v271 = v488;
          v272 = v486;
          v273 = v485;
        }
        else
        {
          v508 = 0;
          v509 = 0xE000000000000000;
          sub_100059DE8((uint64_t)&v517);
          sub_10007D62C(&v516);
          sub_10007D62C(&v515);
          sub_100059DE8((uint64_t)&v514);
          sub_100059DE8((uint64_t)&v513);
          swift_bridgeObjectRetain(v264);
          v274 = v496;
          static String.Encoding.utf8.getter(v275);
          v276 = v443;
          v277 = v441;
          v278 = String.init(data:encoding:)(v443, v441, v274);
          v271 = v488;
          v272 = v486;
          v273 = v485;
          if (!v279)
            v278 = Data.hexString.getter(v276, v277);
          String.append(_:)(*(Swift::String *)&v278);
          swift_bridgeObjectRelease();
          v268 = 0;
          v269 = v508;
          v270 = v509;
        }
        v280 = *(int *)(v273 + 28);
        v281 = v498;
        v282 = v498 + v280;
        sub_10005972C((uint64_t)v454, v498 + v280, type metadata accessor for AccessoryProductInfo);
        (*(void (**)(uint64_t, _QWORD, uint64_t, NSObject *))(isa + 56))(v282, 0, 1, v518);
        *(_QWORD *)v281 = v269;
        *(_QWORD *)(v281 + 8) = v270;
        *(_OWORD *)(v281 + 16) = xmmword_100E544C0;
        *(_QWORD *)(v281 + 32) = 0xA400000000000000;
        swift_bridgeObjectRetain(v268);
        v283 = dispatch_group_create();
        v284 = swift_allocBox(v272);
        v286 = v285;
        v287 = v499;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v271 + 56))(v285, 1, 1, v499);
        dispatch_group_enter(v283);
        v288 = swift_allocObject(&unk_10109AAA0, 32, 7);
        *(_QWORD *)(v288 + 16) = v283;
        *(_QWORD *)(v288 + 24) = v284;
        v289 = v283;
        isa = v284;
        swift_retain();
        sub_1007F1214((uint64_t)v258, (_QWORD *)v281, (uint64_t)sub_1008EC984, v288);
        v290 = swift_release(v288);
        v291 = v489;
        static DispatchTime.now()(v290);
        v292 = v490;
        + infix(_:_:)(v291, 60.0);
        v293 = *(void (**)(char *, uint64_t))(v487 + 8);
        v294 = v491;
        v293(v291, v491);
        v518 = v289;
        v295 = OS_dispatch_group.wait(timeout:)(v292) & 1;
        v293(v292, v294);
        v296 = static DispatchTimeoutResult.== infix(_:_:)(v295, 1);
        if ((v296 & 1) != 0)
        {
          v297 = Logger.logObject.getter(v296);
          v298 = static os_log_type_t.error.getter(v297);
          v299 = os_log_type_enabled(v297, v298);
          v300 = v449;
          v301 = (uint64_t)v448;
          v302 = v442;
          if (v299)
          {
            v303 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v303 = 0;
            _os_log_impl((void *)&_mh_execute_header, v297, v298, "Timed out creating new beacon record", v303, 2u);
            swift_slowDealloc(v303, -1, -1);
          }

          v304 = sub_10008806C();
          v305 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v304, 0, 0);
          *v306 = 13;
          swift_willThrow(v305);
          sub_10001EF3C(v300, v459);

          sub_10001BC14(v443, v441);
          sub_10001EF3C(v302, v456);
          sub_1000126B0(v498, type metadata accessor for PairingConfig);
          sub_1000126B0((uint64_t)v258, type metadata accessor for OwnedBeaconRecord);
          v307 = v301;
          goto LABEL_104;
        }
        swift_beginAccess(v286, &v508, 0, 0);
        v308 = v477;
        sub_10000F9B8(v286, v477, (uint64_t *)&unk_1010F47C0);
        v309 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v271 + 48))(v308, 1, v287);
        v310 = v449;
        if (v309 == 1)
        {
          sub_100004048(v308, (uint64_t *)&unk_1010F47C0);
          v311 = sub_10008806C();
          v312 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v311, 0, 0);
          *v313 = 13;
          swift_willThrow(v312);
          sub_10001EF3C(v310, v459);

          sub_10001BC14(v443, v441);
          sub_10001EF3C(v442, v456);
          sub_1000126B0(v498, type metadata accessor for PairingConfig);
          sub_1000126B0((uint64_t)v258, type metadata accessor for OwnedBeaconRecord);
          v307 = (uint64_t)v448;
LABEL_104:
          sub_1000126B0(v307, type metadata accessor for StableIdentifier);
          sub_1000126B0((uint64_t)v454, type metadata accessor for AccessoryProductInfo);
          (*(void (**)(char *, uint64_t))(v460 + 8))(v458, v447);
          v314 = (char *)&v519;
LABEL_105:
          v315 = *((_QWORD *)v314 - 32);
LABEL_106:
          swift_release(v315);
          v316 = (uint64_t)v453;
          return sub_1000126B0(v316, type metadata accessor for OwnedBeaconGroup);
        }
        sub_1000126EC(v308, (uint64_t)v445, type metadata accessor for OwnedBeaconRecord);
        v317 = swift_allocBox(v502);
        v319 = v318;
        v320 = sub_10005972C((uint64_t)v453, v318, type metadata accessor for OwnedBeaconGroup);
        if ((uint64_t)v455[4] < 1)
        {
          v340 = Logger.logObject.getter(v320);
          v341 = static os_log_type_t.error.getter(v340);
          if (os_log_type_enabled(v340, v341))
          {
            v342 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v342 = 0;
            _os_log_impl((void *)&_mh_execute_header, v340, v341, "Expected non-zero pairingEpoch", v342, 2u);
            swift_slowDealloc(v342, -1, -1);
          }

          v343 = sub_10008806C();
          v344 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v343, 0, 0);
          *v345 = 2;
          swift_willThrow(v344);
          sub_10001EF3C(v310, v459);

          sub_10001BC14(v443, v441);
          sub_10001EF3C(v442, v456);
          sub_1000126B0((uint64_t)v445, type metadata accessor for OwnedBeaconRecord);
          sub_1000126B0(v498, type metadata accessor for PairingConfig);
          sub_1000126B0((uint64_t)v452, type metadata accessor for OwnedBeaconRecord);
          sub_1000126B0((uint64_t)v448, type metadata accessor for StableIdentifier);
          sub_1000126B0((uint64_t)v454, type metadata accessor for AccessoryProductInfo);
          (*(void (**)(char *, uint64_t))(v460 + 8))(v458, v447);
          swift_release(isa);
          v315 = v317;
          goto LABEL_106;
        }
        v321 = v492;
        if (*(_QWORD *)(v492 + 16))
        {
          v322 = v443;
          v323 = v441;
          sub_10001BBBC(v443, v441);
          v324 = sub_100518E4C(v322, v323);
          if ((v325 & 1) != 0)
          {
            v326 = v471;
            v327 = *(_QWORD *)(v321 + 56) + *(_QWORD *)(v471 + 72) * v324;
            v328 = v472;
            sub_10005972C(v327, v472, type metadata accessor for MultipartAccessoryPairingInfo);
            v329 = 0;
          }
          else
          {
            v329 = 1;
            v328 = v472;
            v326 = v471;
          }
          v346 = v473;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v326 + 56))(v328, v329, 1, v473);
          sub_10001BC14(v443, v441);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v326 + 48))(v328, 1, v346) != 1)
          {
            v500 = v317;
            v366 = v450;
            sub_1000126EC(v328, (uint64_t)v450, type metadata accessor for MultipartAccessoryPairingInfo);
            v367 = v455[2];
            v368 = v455[3];
            v369 = v455[4];
            v370 = *((_BYTE *)v455 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair);
            sub_10001BBBC(v367, v368);
            LOBYTE(v369) = sub_100371478(v483, v443, v441, v366, v367, v368, v369, v370);
            sub_10001BC14(v367, v368);
            if ((v369 & 1) != 0)
            {
              v371 = swift_allocBox(v469);
              v373 = v372;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v495 + 56))(v372, 1, 1, v502);
              v374 = v518;
              dispatch_group_enter(v518);
              v496 = (char *)v371;
              v375 = v475;
              if ((_DWORD)v493)
              {
                sub_10005972C((uint64_t)v453, v475, type metadata accessor for OwnedBeaconGroup);
                v376 = swift_allocObject(&unk_10109AAC8, 32, 7);
                *(_QWORD *)(v376 + 16) = v374;
                *(_QWORD *)(v376 + 24) = v371;
                v377 = v374;
                v378 = v500;
                swift_retain();
                swift_retain();
                sub_1007A0418(v375, 0, (void (*)(uint64_t))sub_1008EC98C, v378, sub_1008EC9A8, (void (*)(uint64_t))v376);
                swift_release(v378);
              }
              else
              {
                sub_10005972C(v319, v475, type metadata accessor for OwnedBeaconGroup);
                v379 = v374;
                swift_retain();
                sub_1008614AC(v375, 0, v503, v379, v371);

                v376 = v371;
              }
              swift_release(v376);
              v380 = sub_1000126B0(v375, type metadata accessor for OwnedBeaconGroup);
              v381 = v489;
              static DispatchTime.now()(v380);
              v382 = v490;
              + infix(_:_:)(v381, 60.0);
              v383 = v491;
              v293(v381, v491);
              v384 = OS_dispatch_group.wait(timeout:)(v382) & 1;
              v293(v382, v383);
              v385 = static DispatchTimeoutResult.== infix(_:_:)(v384, 1);
              if ((v385 & 1) != 0)
              {
                v386 = Logger.logObject.getter(v385);
                v387 = static os_log_type_t.error.getter(v386);
                if (os_log_type_enabled(v386, v387))
                {
                  v388 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v388 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v386, v387, "Timed out saving beacon group", v388, 2u);
                  swift_slowDealloc(v388, -1, -1);
                }

                v389 = sub_10008806C();
                v390 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v389, 0, 0);
                v392 = 13;
              }
              else
              {
                swift_beginAccess(v373, &v505, 0, 0);
                v393 = v470;
                sub_10000F9B8(v373, v470, (uint64_t *)&unk_1010FF7F0);
                if (v429(v393, 1, v502) != 1)
                {
                  v403 = v466;
                  sub_1000126EC(v470, v466, type metadata accessor for OwnedBeaconGroup);
                  v404 = v403 + *(int *)(v502 + 24);
                  v405 = v467;
                  v482(v467, v404, v447);
                  v406 = v461;
                  static Date.trustedNow.getter(v405 + *(int *)(v461 + 20));
                  *(_BYTE *)(v405 + *(int *)(v406 + 24)) = 37;
                  if (qword_1010E9CF0 != -1)
                    swift_once(&qword_1010E9CF0, sub_10058CADC);
                  v407 = qword_1011B7160;
                  v408 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
                  v409 = *(unsigned __int8 *)(v462 + 80);
                  v410 = (v409 + 32) & ~v409;
                  v411 = swift_allocObject(v408, v410 + *(_QWORD *)(v462 + 72), v409 | 7);
                  *(_OWORD *)(v411 + 16) = xmmword_100E22B00;
                  v412 = v467;
                  sub_10005972C(v467, v411 + v410, type metadata accessor for BeaconObservation);
                  v413 = type metadata accessor for Transaction(0);
                  __chkstk_darwin(v413);
                  *(&v429 - 4) = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v407;
                  *(&v429 - 3) = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v411;
                  *(&v429 - 2) = 0;
                  *(&v429 - 1) = 0;
                  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v429 - 6, (char *)&type metadata for () + 8);
                  swift_bridgeObjectRelease();
                  sub_10001EF3C(v449, v459);

                  sub_10001BC14(v443, v441);
                  sub_10001EF3C(v442, v456);
                  sub_1000126B0(v412, type metadata accessor for BeaconObservation);
                  sub_1000126B0((uint64_t)v450, type metadata accessor for MultipartAccessoryPairingInfo);
                  sub_1000126B0(v498, type metadata accessor for PairingConfig);
                  sub_1000126B0((uint64_t)v452, type metadata accessor for OwnedBeaconRecord);
                  sub_1000126B0((uint64_t)v448, type metadata accessor for StableIdentifier);
                  sub_1000126B0((uint64_t)v454, type metadata accessor for AccessoryProductInfo);
                  (*(void (**)(char *, uint64_t))(v460 + 8))(v458, v447);
                  sub_1000126EC((uint64_t)v445, v463, type metadata accessor for OwnedBeaconRecord);
                  sub_1000126EC(v466, v464, type metadata accessor for OwnedBeaconGroup);
                  swift_release(isa);
                  swift_release(v500);
                  swift_release(v496);
                  v316 = (uint64_t)v453;
                  return sub_1000126B0(v316, type metadata accessor for OwnedBeaconGroup);
                }
                sub_100004048(v470, (uint64_t *)&unk_1010FF7F0);
                v394 = sub_10005972C((uint64_t)v445, v468, type metadata accessor for OwnedBeaconRecord);
                v395 = Logger.logObject.getter(v394);
                v396 = static os_log_type_t.error.getter(v395);
                if (os_log_type_enabled(v395, v396))
                {
                  v397 = swift_slowAlloc(22, -1);
                  v398 = swift_slowAlloc(32, -1);
                  v507 = v398;
                  *(_DWORD *)v397 = 141558275;
                  v504 = 1752392040;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v504, &v505, v397 + 4, v397 + 12);
                  *(_WORD *)(v397 + 12) = 2081;
                  v399 = v468;
                  v400 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                  v401 = dispatch thunk of CustomStringConvertible.description.getter(v447, v400);
                  v504 = sub_100016940(v401, v402, &v507);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v504, &v505, v397 + 14, v397 + 22);
                  swift_bridgeObjectRelease();
                  sub_1000126B0(v399, type metadata accessor for OwnedBeaconRecord);
                  _os_log_impl((void *)&_mh_execute_header, v395, v396, "Failed to create/modify beacon group. Unpairing beacon: %{private,mask.hash}s", (uint8_t *)v397, 0x16u);
                  swift_arrayDestroy(v398, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v398, -1, -1);
                  swift_slowDealloc(v397, -1, -1);
                }
                else
                {
                  sub_1000126B0(v468, type metadata accessor for OwnedBeaconRecord);
                }

                v414 = sub_1009FCEE0((uint64_t)v445, 0, 0);
                if (v414)
                {
                  v415 = v414;
                  sub_10005972C((uint64_t)v445, v465, type metadata accessor for OwnedBeaconRecord);
                  swift_errorRetain(v415);
                  v416 = swift_errorRetain(v415);
                  v417 = Logger.logObject.getter(v416);
                  v418 = static os_log_type_t.error.getter(v417);
                  if (os_log_type_enabled(v417, v418))
                  {
                    v419 = swift_slowAlloc(32, -1);
                    v420 = swift_slowAlloc(64, -1);
                    v507 = v420;
                    *(_DWORD *)v419 = 141558531;
                    v504 = 1752392040;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v504, &v505, v419 + 4, v419 + 12);
                    *(_WORD *)(v419 + 12) = 2081;
                    v421 = v465;
                    v422 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                    v423 = dispatch thunk of CustomStringConvertible.description.getter(v447, v422);
                    v504 = sub_100016940(v423, v424, &v507);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v504, &v505, v419 + 14, v419 + 22);
                    swift_bridgeObjectRelease();
                    sub_1000126B0(v421, type metadata accessor for OwnedBeaconRecord);
                    *(_WORD *)(v419 + 22) = 2082;
                    v504 = v415;
                    swift_errorRetain(v415);
                    v425 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
                    v426 = String.init<A>(describing:)(&v504, v425);
                    v504 = sub_100016940(v426, v427, &v507);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v504, &v505, v419 + 24, v419 + 32);
                    swift_bridgeObjectRelease();
                    swift_errorRelease(v415);
                    swift_errorRelease(v415);
                    _os_log_impl((void *)&_mh_execute_header, v417, v418, "Unable to clean up orphaned beacon record %{private,mask.hash}s.\nError %{public}s", (uint8_t *)v419, 0x20u);
                    swift_arrayDestroy(v420, 2, (char *)&type metadata for Any + 8);
                    swift_slowDealloc(v420, -1, -1);
                    swift_slowDealloc(v419, -1, -1);

                    swift_errorRelease(v415);
                  }
                  else
                  {
                    swift_errorRelease(v415);
                    sub_1000126B0(v465, type metadata accessor for OwnedBeaconRecord);
                    swift_errorRelease(v415);
                    swift_errorRelease(v415);

                  }
                }
                v428 = sub_10008806C();
                v390 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v428, 0, 0);
                v392 = 15;
              }
              *v391 = v392;
              swift_willThrow(v390);
              sub_10001EF3C(v449, v459);

              sub_10001BC14(v443, v441);
              sub_10001EF3C(v442, v456);
              sub_1000126B0((uint64_t)v450, type metadata accessor for MultipartAccessoryPairingInfo);
              sub_1000126B0((uint64_t)v445, type metadata accessor for OwnedBeaconRecord);
              sub_1000126B0(v498, type metadata accessor for PairingConfig);
              sub_1000126B0((uint64_t)v452, type metadata accessor for OwnedBeaconRecord);
              sub_1000126B0((uint64_t)v448, type metadata accessor for StableIdentifier);
              sub_1000126B0((uint64_t)v454, type metadata accessor for AccessoryProductInfo);
              (*(void (**)(char *, uint64_t))(v460 + 8))(v458, v447);
              swift_release(isa);
              swift_release(v500);
              v314 = (char *)&v517 + 8;
              goto LABEL_105;
            }
            v347 = sub_1000126B0((uint64_t)v450, type metadata accessor for MultipartAccessoryPairingInfo);
            v310 = v449;
            v317 = v500;
LABEL_122:
            v348 = Logger.logObject.getter(v347);
            v349 = static os_log_type_t.error.getter(v348);
            if (os_log_type_enabled(v348, v349))
            {
              v350 = (uint8_t *)swift_slowAlloc(12, -1);
              v351 = swift_slowAlloc(32, -1);
              v507 = v351;
              *(_DWORD *)v350 = 136315138;
              v352 = (uint64_t)v453;
              swift_beginAccess(v453, &v505, 0, 0);
              v353 = sub_10036F350();
              v504 = sub_100016940(v353, v354, &v507);
              v355 = v317;
              v356 = (uint64_t)v448;
              v357 = v442;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v504, &v505, v350 + 4, v350 + 12);
              swift_bridgeObjectRelease();
              v358 = v349;
              v359 = v355;
              _os_log_impl((void *)&_mh_execute_header, v348, v358, "Unable to pair new beacon with its group %s", v350, 0xCu);
              swift_arrayDestroy(v351, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v351, -1, -1);
              v360 = v350;
              v310 = v449;
              swift_slowDealloc(v360, -1, -1);

              v361 = (uint64_t)v452;
              v362 = v443;
            }
            else
            {

              v352 = (uint64_t)v453;
              v361 = (uint64_t)v452;
              v362 = v443;
              v356 = (uint64_t)v448;
              v359 = v317;
              v357 = v442;
            }
            v363 = sub_10008806C();
            v364 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v363, 0, 0);
            *v365 = 2;
            swift_willThrow(v364);
            sub_10001EF3C(v310, v459);

            sub_10001BC14(v362, v441);
            sub_10001EF3C(v357, v456);
            sub_1000126B0((uint64_t)v445, type metadata accessor for OwnedBeaconRecord);
            sub_1000126B0(v498, type metadata accessor for PairingConfig);
            sub_1000126B0(v361, type metadata accessor for OwnedBeaconRecord);
            sub_1000126B0(v356, type metadata accessor for StableIdentifier);
            sub_1000126B0((uint64_t)v454, type metadata accessor for AccessoryProductInfo);
            (*(void (**)(char *, uint64_t))(v460 + 8))(v458, v447);
            swift_release(isa);
            swift_release(v359);
            v316 = v352;
            return sub_1000126B0(v316, type metadata accessor for OwnedBeaconGroup);
          }
        }
        else
        {
          v328 = v472;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v471 + 56))(v472, 1, 1, v473);
        }
        v347 = sub_100004048(v328, &qword_1010EC008);
        goto LABEL_122;
      }
      swift_bridgeObjectRelease();
      sub_10001EF3C(v125, v114);
      sub_10001BC14(v437, v446);
    }
    v432 = 0;
    v115 = 0;
    goto LABEL_51;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v117 = type metadata accessor for Logger(0);
  v118 = sub_10001A9E8(v117, (uint64_t)qword_1011B7DF8);
  v119 = Logger.logObject.getter(v118);
  v120 = static os_log_type_t.error.getter(v119);
  if (os_log_type_enabled(v119, v120))
  {
    v121 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v121 = 0;
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "generateOwnedBeaconRecord: invalid parameters for StableIdentifier.", v121, 2u);
    swift_slowDealloc(v121, -1, -1);
  }

  v122 = sub_10008806C();
  v123 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v122, 0, 0);
  *v124 = 5;
  swift_willThrow(v123);
  sub_10001EF3C(v96, v459);
  sub_10001BC14(v99, v441);
  sub_10001EF3C(v97, v456);
  return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v458, v447);
}

uint64_t sub_1008E6368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v8[29] = a7;
  v8[30] = v7;
  v8[27] = a5;
  v8[28] = a6;
  v8[25] = a3;
  v8[26] = a4;
  v8[23] = a1;
  v8[24] = a2;
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[31] = swift_task_alloc(v9);
  v8[32] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EF358);
  v8[33] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[34] = v11;
  v8[35] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Table(0);
  v8[36] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[37] = v13;
  v8[38] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v8[39] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[40] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v8[41] = v16;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[42] = swift_task_alloc(v17);
  v8[43] = swift_task_alloc(v17);
  v18 = type metadata accessor for StandaloneBeacon(0);
  v8[44] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v8[45] = v19;
  v20 = *(_QWORD *)(v19 + 64);
  v8[46] = v20;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[47] = swift_task_alloc(v21);
  v8[48] = swift_task_alloc(v21);
  v22 = type metadata accessor for String.Encoding(0);
  v8[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008E64CC, 0, 0);
}

uint64_t sub_1008E64CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v0 + 400) = v2;
  v3 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v0 + 408) = v3;
  if (v3 >> 60 == 15)
    goto LABEL_13;
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v5 = *v4;
  *(_QWORD *)(v0 + 416) = *v4;
  v6 = v4[1];
  *(_QWORD *)(v0 + 424) = v6;
  if (v6 >> 60 == 15)
    goto LABEL_13;
  v7 = *(_QWORD *)(v0 + 392);
  sub_10001BD08(v2, v3);
  v8 = sub_10001BD08(v5, v6);
  static String.Encoding.utf8.getter(v8);
  v9 = String.init(data:encoding:)(v5, v6, v7);
  *(_QWORD *)(v0 + 432) = v9;
  *(_QWORD *)(v0 + 440) = v10;
  if (!v10)
  {
LABEL_12:
    sub_10001EF3C(v5, v6);
    sub_10001EF3C(v2, v3);
LABEL_13:
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7DF8);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "generateStandaloneBeacon: could not get basic device info from the session.", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = sub_10008806C();
    v22 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v21, 0, 0);
    *v23 = 5;
    swift_willThrow(v22);
    v24 = *(_QWORD *)(v0 + 384);
    v25 = *(_QWORD *)(v0 + 376);
    v27 = *(_QWORD *)(v0 + 336);
    v26 = *(_QWORD *)(v0 + 344);
    v28 = *(_QWORD *)(v0 + 304);
    v29 = *(_QWORD *)(v0 + 280);
    v31 = *(_QWORD *)(v0 + 248);
    v30 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 392));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v9 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v12 = qword_1010EA5B0;
  swift_retain();
  if (v12 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 128, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v32 = (uint64_t (*)(void))((char *)&dword_1010EBC70 + dword_1010EBC70);
    v14 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 448) = v14;
    *v14 = v0;
    v14[1] = sub_1008E67E0;
    v15 = v32;
    return v15();
  }
  __break(1u);
  return result;
}

uint64_t sub_1008E67E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008E683C, 0, 0);
}

uint64_t sub_1008E683C()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(v0 + 456))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    return swift_task_switch(sub_1008E6A30, *(_QWORD *)(v0 + 456), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7DF8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing StandaloneBeaconService!", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 416);
    v7 = *(_QWORD *)(v0 + 424);
    v10 = *(_QWORD *)(v0 + 400);
    v9 = *(_QWORD *)(v0 + 408);

    v11 = sub_10008806C();
    v12 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v11, 0, 0);
    *v13 = 17;
    swift_willThrow(v12);
    sub_10001EF3C(v8, v7);
    sub_10001EF3C(v10, v9);
    v14 = *(_QWORD *)(v0 + 384);
    v15 = *(_QWORD *)(v0 + 376);
    v17 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 344);
    v18 = *(_QWORD *)(v0 + 304);
    v19 = *(_QWORD *)(v0 + 280);
    v21 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 392));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1008E6A30()
{
  uint64_t *v0;

  sub_100B8ACF4(v0[54], v0[55], *(_QWORD *)(v0[57] + 128));
  v0[58] = 0;
  v0[59] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  return swift_task_switch(sub_1008E6B80, 0, 0);
}

uint64_t sub_1008E6AB0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  swift_release(*(_QWORD *)(v0 + 456));
  sub_10001EF3C(v1, v2);
  sub_10001EF3C(v4, v3);
  v5 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 280);
  v12 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008E6B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t (*v24)();
  int *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 440);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7DF8);
  swift_retain_n(v1, 2);
  v4 = swift_bridgeObjectRetain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 440);
  if (v7)
  {
    v53 = *(_QWORD *)(v0 + 432);
    v10 = swift_slowAlloc(32, -1);
    v11 = swift_slowAlloc(32, -1);
    v55 = v11;
    *(_DWORD *)v10 = 134218499;
    v12 = *(_QWORD *)(v8 + 16);
    swift_release(v8);
    *(_QWORD *)(v0 + 160) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v10 + 4, v10 + 12);
    swift_release(v8);
    *(_WORD *)(v10 + 12) = 2160;
    *(_QWORD *)(v0 + 168) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2081;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 176) = sub_100016940(v53, v9, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Removing %ld existing beacons matching %{private,mask.hash}s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 472), 2);

    swift_bridgeObjectRelease_n(v9, 2);
  }
  v13 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v0 + 480) = v14;
  if (v14)
  {
    v15 = *(_QWORD *)(v0 + 360);
    v16 = *(_DWORD *)(v15 + 80);
    *(_DWORD *)(v0 + 600) = v16;
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v0 + 496) = *(_QWORD *)(v0 + 464);
    *(_QWORD *)(v0 + 504) = 0;
    *(_QWORD *)(v0 + 488) = v17;
    v18 = *(_QWORD *)(v0 + 384);
    v19 = *(_QWORD *)(v0 + 344);
    v20 = *(_QWORD *)(v0 + 312);
    v21 = *(_QWORD *)(v0 + 320);
    sub_10005972C(v13 + ((v16 + 32) & ~(unint64_t)v16), v18, type metadata accessor for StandaloneBeacon);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    *(_QWORD *)(v0 + 512) = v22;
    v22(v19, v18, v20);
    sub_1000126B0(v18, type metadata accessor for StandaloneBeacon);
    v23 = *(_QWORD *)(v0 + 456);
    v24 = sub_1008E6FD4;
  }
  else
  {
    swift_release(v13);
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 464);
    v50 = *(_QWORD *)(v0 + 440);
    v51 = *(_QWORD *)(v0 + 408);
    v48 = *(_QWORD *)(v0 + 432);
    v49 = *(_QWORD *)(v0 + 400);
    v25 = *(int **)(v0 + 352);
    v52 = *(_QWORD *)(v0 + 224);
    v54 = *(_QWORD *)(v0 + 232);
    v47 = *(_QWORD *)(v0 + 216);
    v26 = *(_QWORD *)(v0 + 208);
    v28 = *(_QWORD *)(v0 + 184);
    v27 = *(uint64_t **)(v0 + 192);
    v29 = v27[2];
    *(_QWORD *)(v0 + 544) = v29;
    v30 = v27[3];
    *(_QWORD *)(v0 + 552) = v30;
    v31 = *v27;
    *(_QWORD *)(v0 + 560) = *v27;
    v46 = v31;
    v32 = v27[1];
    *(_QWORD *)(v0 + 568) = v32;
    v33 = v27[4];
    *(_QWORD *)(v0 + 576) = v33;
    v44 = v26;
    v45 = v33;
    v34 = v27[5];
    *(_QWORD *)(v0 + 584) = v34;
    sub_10001BBBC(v29, v30);
    sub_10001BBBC(v31, v32);
    v35 = sub_10001BBBC(v33, v34);
    UUID.init()(v35);
    v36 = v28 + v25[5];
    v37 = type metadata accessor for MACAddress(0);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
    v38(v36, v44, v37);
    v38(v28 + v25[6], v47, v37);
    sub_1007EEC58(v28 + v25[8]);
    v39 = (_QWORD *)(v28 + v25[7]);
    *v39 = v48;
    v39[1] = v50;
    v40 = (uint64_t *)(v28 + v25[9]);
    *v40 = v49;
    v40[1] = v51;
    v41 = (uint64_t *)(v28 + v25[10]);
    *v41 = v29;
    v41[1] = v30;
    v41[2] = v46;
    v41[3] = v32;
    v41[4] = v45;
    v41[5] = v34;
    v42 = (uint64_t *)(v28 + v25[11]);
    *v42 = v52;
    v42[1] = v54;
    sub_10001BD08(v49, v51);
    sub_10001BBBC(v29, v30);
    sub_10001BBBC(v46, v32);
    sub_10001BBBC(v45, v34);
    sub_10001BBBC(v52, v54);
    v23 = *(_QWORD *)(v0 + 456);
    v24 = sub_1008E7774;
  }
  return swift_task_switch(v24, v23, 0);
}

uint64_t sub_1008E6FD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v1 = v0[62];
  v2 = *(_QWORD *)(v0[57] + 128);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1008ECD4C, v2, v3, (char *)&type metadata for () + 8, v4);
  v5 = v0[19];
  if (!v5)
  {
    v23 = v0[40];
    v24 = sub_10012C434();
    v22 = swift_allocError(&type metadata for DatabaseError, v24, 0, 0);
    *(_DWORD *)v25 = 2;
    *(_BYTE *)(v25 + 4) = 1;
    swift_willThrow(v22);
    swift_bridgeObjectRelease();
    v21 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    goto LABEL_7;
  }
  v59 = v1;
  v6 = *(_QWORD *)(v5 + 24);
  swift_retain();
  swift_release(v5);
  if (qword_1010E9D78 != -1)
    swift_once(&qword_1010E9D78, sub_1006163A0);
  v8 = v0[42];
  v7 = v0[43];
  v9 = v0[39];
  v10 = v0[38];
  v12 = v0[35];
  v11 = v0[36];
  v13 = v0[34];
  v56 = v0[33];
  v57 = v0[40];
  v14 = sub_10001A9A8(&qword_1010EF3B8);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7278);
  == infix<A>(_:_:)(v15, v7, v9, &protocol witness table for UUID, &protocol witness table for String);
  QueryType.filter(_:)(v12, v11, &protocol witness table for Table);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v56);
  v16 = swift_task_alloc(32);
  *(_QWORD *)(v16 + 16) = v6;
  *(_QWORD *)(v16 + 24) = v10;
  v17 = UUID.init()(v16);
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  v21 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v21(v8, v9);
  Connection.savepoint(_:block:)(v18, v20, sub_10047A994, v16);
  v0[65] = v59;
  if (v59)
  {
    v22 = v59;
    (*(void (**)(_QWORD, _QWORD))(v0[37] + 8))(v0[38], v0[36]);
    swift_bridgeObjectRelease();
    swift_release(v6);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v16);
LABEL_7:
    v0[66] = v22;
    v26 = v0[59];
    v21(v0[43], v0[39]);
    swift_release(v26);
    v27 = sub_1008E744C;
    return swift_task_switch(v27, 0, 0);
  }
  v28 = v0[57];
  v29 = v0[42];
  v54 = v0[43];
  v55 = (void (*)(uint64_t, uint64_t, uint64_t))v0[64];
  v53 = v29;
  v30 = v0[39];
  v58 = v0[40];
  v60 = v0[41];
  v31 = v0[32];
  (*(void (**)(_QWORD, _QWORD))(v0[37] + 8))(v0[38], v0[36]);
  swift_bridgeObjectRelease();
  swift_release(v6);
  swift_task_dealloc(v16);
  v32 = type metadata accessor for TaskPriority(0);
  v33 = *(_QWORD *)(v32 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v31, 1, 1, v32);
  v55(v29, v54, v30);
  v34 = sub_100006204(&qword_10110C730, (uint64_t (*)(uint64_t))type metadata accessor for StandaloneBeaconService, (uint64_t)&unk_100E553E0);
  v35 = *(unsigned __int8 *)(v58 + 80);
  v36 = (v35 + 40) & ~v35;
  v37 = (char *)swift_allocObject(&unk_10109ABB8, v36 + v60, v35 | 7);
  *((_QWORD *)v37 + 2) = v28;
  *((_QWORD *)v37 + 3) = v34;
  *((_QWORD *)v37 + 4) = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(&v37[v36], v53, v30);
  LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32);
  v38 = swift_retain_n(v28, 2);
  v39 = v0[32];
  if ((_DWORD)v34 == 1)
  {
    sub_100004048(v0[32], &qword_1010F46C0);
    v40 = 7168;
  }
  else
  {
    v41 = TaskPriority.rawValue.getter(v38);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v39, v32);
    v40 = v41 | 0x1C00;
  }
  v42 = *((_QWORD *)v37 + 2);
  if (v42
    && (v43 = *((_QWORD *)v37 + 3),
        ObjectType = swift_getObjectType(*((_QWORD *)v37 + 2)),
        swift_unknownObjectRetain(v42),
        v45 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v43),
        v47 = v46,
        swift_unknownObjectRelease(v42),
        v47 | v45))
  {
    v48 = v0 + 12;
    v0[12] = 0;
    v0[13] = 0;
    v0[14] = v45;
    v0[15] = v47;
  }
  else
  {
    v48 = 0;
  }
  v49 = v0[43];
  v50 = v0[39];
  v51 = swift_task_create(v40, v48, (char *)&type metadata for () + 8, &unk_10110C748, v37);
  swift_release(v51);
  v21(v49, v50);
  v27 = sub_1008E7518;
  return swift_task_switch(v27, 0, 0);
}

uint64_t sub_1008E744C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  sub_10001EF3C(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
  sub_10001EF3C(v3, v2);
  swift_release(v1);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008E7518()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v1 = *(_QWORD *)(v0 + 504) + 1;
  if (v1 == *(_QWORD *)(v0 + 480))
  {
    swift_release(*(_QWORD *)(v0 + 472));
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 520);
    v34 = *(_QWORD *)(v0 + 440);
    v35 = *(_QWORD *)(v0 + 408);
    v32 = *(_QWORD *)(v0 + 432);
    v33 = *(_QWORD *)(v0 + 400);
    v2 = *(int **)(v0 + 352);
    v36 = *(_QWORD *)(v0 + 224);
    v37 = *(_QWORD *)(v0 + 232);
    v31 = *(_QWORD *)(v0 + 216);
    v3 = *(_QWORD *)(v0 + 208);
    v5 = *(_QWORD *)(v0 + 184);
    v4 = *(uint64_t **)(v0 + 192);
    v6 = v4[2];
    *(_QWORD *)(v0 + 544) = v6;
    v7 = v4[3];
    *(_QWORD *)(v0 + 552) = v7;
    v8 = *v4;
    *(_QWORD *)(v0 + 560) = *v4;
    v30 = v8;
    v9 = v4[1];
    *(_QWORD *)(v0 + 568) = v9;
    v10 = v4[4];
    *(_QWORD *)(v0 + 576) = v10;
    v28 = v3;
    v29 = v10;
    v11 = v4[5];
    *(_QWORD *)(v0 + 584) = v11;
    sub_10001BBBC(v6, v7);
    sub_10001BBBC(v8, v9);
    v12 = sub_10001BBBC(v10, v11);
    UUID.init()(v12);
    v13 = v5 + v2[5];
    v14 = type metadata accessor for MACAddress(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v13, v28, v14);
    v15(v5 + v2[6], v31, v14);
    sub_1007EEC58(v5 + v2[8]);
    v16 = (_QWORD *)(v5 + v2[7]);
    *v16 = v32;
    v16[1] = v34;
    v17 = (uint64_t *)(v5 + v2[9]);
    *v17 = v33;
    v17[1] = v35;
    v18 = (uint64_t *)(v5 + v2[10]);
    *v18 = v6;
    v18[1] = v7;
    v18[2] = v30;
    v18[3] = v9;
    v18[4] = v29;
    v18[5] = v11;
    v19 = (uint64_t *)(v5 + v2[11]);
    *v19 = v36;
    v19[1] = v37;
    sub_10001BD08(v33, v35);
    sub_10001BBBC(v6, v7);
    sub_10001BBBC(v30, v9);
    sub_10001BBBC(v29, v11);
    sub_10001BBBC(v36, v37);
    v20 = *(_QWORD *)(v0 + 456);
    v21 = sub_1008E7774;
  }
  else
  {
    *(_QWORD *)(v0 + 496) = *(_QWORD *)(v0 + 520);
    *(_QWORD *)(v0 + 504) = v1;
    v22 = *(_QWORD *)(v0 + 384);
    v23 = *(_QWORD *)(v0 + 344);
    v24 = *(_QWORD *)(v0 + 312);
    v25 = *(_QWORD *)(v0 + 320);
    sub_10005972C(*(_QWORD *)(v0 + 472)+ ((*(unsigned __int8 *)(v0 + 600) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 600))+ *(_QWORD *)(v0 + 488) * v1, v22, type metadata accessor for StandaloneBeacon);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
    *(_QWORD *)(v0 + 512) = v26;
    v26(v23, v22, v24);
    sub_1000126B0(v22, type metadata accessor for StandaloneBeacon);
    v20 = *(_QWORD *)(v0 + 456);
    v21 = sub_1008E6FD4;
  }
  return swift_task_switch(v21, v20, 0);
}

uint64_t sub_1008E7774()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = v0[67];
  sub_100B8A67C(v0[23], *(_QWORD *)(v0[57] + 128));
  v0[74] = v1;
  if (v1)
  {
    v2 = sub_1008E79F0;
  }
  else
  {
    v3 = v0[57];
    v5 = v0[46];
    v4 = v0[47];
    v6 = v0[45];
    v7 = v0[31];
    v8 = v0[23];
    v9 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
    sub_10005972C(v8, v4, type metadata accessor for StandaloneBeacon);
    v10 = sub_100006204(&qword_10110C730, (uint64_t (*)(uint64_t))type metadata accessor for StandaloneBeaconService, (uint64_t)&unk_100E553E0);
    v11 = *(unsigned __int8 *)(v6 + 80);
    v12 = (v11 + 40) & ~v11;
    v13 = (_QWORD *)swift_allocObject(&unk_10109ABE0, v12 + v5, v11 | 7);
    v13[2] = v3;
    v13[3] = v10;
    v13[4] = v3;
    sub_1000126EC(v4, (uint64_t)v13 + v12, type metadata accessor for StandaloneBeacon);
    swift_retain_n(v3, 2);
    v14 = sub_100626BC4(v7, (uint64_t)&unk_10110C750, (uint64_t)v13);
    swift_release(v14);
    v2 = sub_1008E78B8;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1008E78B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 544);
  v11 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 576);
  v6 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 584);
  v15 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 344);
  v17 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 304);
  v19 = *(_QWORD *)(v0 + 280);
  v20 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 248);
  sub_10085A268();
  sub_10001EF3C(v7, v8);
  sub_10001EF3C(v6, v5);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  sub_10001BC14(v12, v14);
  swift_release(v11);
  swift_task_dealloc(v9);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008E79F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;

  v19 = *(_QWORD *)(v0 + 584);
  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 456);
  v8 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 184);
  sub_10001EF3C(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424));
  swift_release(v6);
  sub_10001BC14(v5, v4);
  sub_10001BC14(v3, v2);
  sub_10001BC14(v1, v19);
  sub_10001EF3C(v8, v7);
  sub_1000126B0(v9, type metadata accessor for StandaloneBeacon);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 376);
  v13 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008E7B10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77[2];

  v2 = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v4);
  v75 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v73 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v69 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v69 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v69 - v16;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7DF8);
  v74 = a1;
  v20 = sub_10005972C(a1, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
  v72 = v19;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v70 = v9;
  v71 = v6;
  if (v23)
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v77[0] = v25;
    *(_DWORD *)v24 = 136315138;
    v69 = v12;
    v26 = sub_10036F350();
    v76 = sub_100016940(v26, v27, v77);
    v12 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Clean up existing beacon group %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v28 = v25;
    v6 = v71;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
  }

  v29 = v74;
  sub_10036AC6C();
  v31 = v30;
  swift_retain();
  sub_10028B45C(v31);
  v33 = v32;
  swift_bridgeObjectRelease();
  swift_release(v2);
  v34 = *(_QWORD *)(v33 + 16);
  if (v34)
  {
    v35 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
    v36 = v33 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v37 = *(_QWORD *)(v35 + 72);
    swift_bridgeObjectRetain(v33);
    do
    {
      v38 = sub_1009FCEE0(v36, 1, 0);
      swift_errorRelease(v38);
      v36 += v37;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease_n(v33, 2);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v39 = (uint64_t)v75;
  sub_10081EDA8(v29 + *(int *)(v6 + 24), (uint64_t)v75);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v39, 1, v6) == 1)
    return sub_100004048(v39, (uint64_t *)&unk_1010FF7F0);
  sub_1000126EC(v39, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
  v41 = sub_10005972C((uint64_t)v15, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = swift_slowAlloc(22, -1);
    v45 = swift_slowAlloc(32, -1);
    v75 = v15;
    v46 = v45;
    *(_DWORD *)v44 = 141558275;
    v76 = 1752392040;
    v77[0] = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v44 + 4, v44 + 12);
    *(_WORD *)(v44 + 12) = 2081;
    v47 = type metadata accessor for UUID(0);
    v48 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
    v76 = sub_100016940(v49, v50, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Group %{private,mask.hash}s still exists. Need to clean up", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    v51 = v46;
    v15 = v75;
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  }

  v52 = (uint64_t)v70;
  v53 = sub_100A3E400((uint64_t)v15);
  if (v53)
  {
    v54 = v53;
    sub_10005972C((uint64_t)v15, v52, type metadata accessor for OwnedBeaconGroup);
    swift_errorRetain(v54);
    v55 = swift_errorRetain(v54);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = swift_slowAlloc(32, -1);
      v59 = swift_slowAlloc(64, -1);
      v75 = (char *)v59;
      *(_DWORD *)v58 = 141558531;
      v76 = 1752392040;
      v77[0] = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v58 + 4, v58 + 12);
      *(_WORD *)(v58 + 12) = 2081;
      v60 = type metadata accessor for UUID(0);
      v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v60, v61);
      v76 = sub_100016940(v62, v63, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v52, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v58 + 22) = 2082;
      v76 = v54;
      swift_errorRetain(v54);
      v64 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v65 = String.init<A>(describing:)(&v76, v64);
      v76 = sub_100016940(v65, v66, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v58 + 24, v58 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v54);
      swift_errorRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unable to remove %{private,mask.hash}s due to %{public}s)", (uint8_t *)v58, 0x20u);
      v67 = (uint64_t)v75;
      swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v58, -1, -1);

    }
    else
    {

      swift_errorRelease(v54);
      swift_errorRelease(v54);
      sub_1000126B0(v52, type metadata accessor for OwnedBeaconGroup);
    }
    swift_errorRelease(v54);
    v68 = (uint64_t)v15;
  }
  else
  {
    v68 = (uint64_t)v15;
  }
  return sub_1000126B0(v68, type metadata accessor for OwnedBeaconGroup);
}

void sub_1008E82BC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42[3];

  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v39 - v10;
  v12 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v14, &qword_1010EEC50);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    v15 = *v14;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v16 = (_BYTE *)(a3 + 16);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(v15);
    v18 = swift_errorRetain(v15);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v41 = v15;
      v42[0] = v22;
      *(_DWORD *)v21 = 136315138;
      swift_errorRetain(v15);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v24 = String.init<A>(describing:)(&v41, v23);
      v41 = sub_100016940(v24, v25, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to modify existing group. Error %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      swift_errorRelease(v15);
    }
    else
    {
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      swift_errorRelease(v15);

    }
    swift_beginAccess(v16, v42, 1, 0);
    *v16 = 1;
  }
  else
  {
    sub_1000126EC((uint64_t)v14, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B7DF8);
    v28 = sub_10005972C((uint64_t)v11, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(32, -1);
      v40 = a2;
      v33 = v32;
      *(_DWORD *)v31 = 141558275;
      v41 = 1752392040;
      v42[0] = v32;
      v39 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2081;
      v34 = type metadata accessor for UUID(0);
      v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
      v41 = sub_100016940(v36, v37, v42);
      v27 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully modified existing group %{private,mask.hash}s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      v38 = v33;
      a2 = v40;
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    }

    sub_100367170(v27);
    sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  }
  dispatch_group_leave(a2);
}

void sub_1008E8788(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37[3];

  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v34 - v10;
  v12 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v14, &qword_1010EEC50);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    v15 = *v14;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v35 = a2;
    v16 = (_BYTE *)(a3 + 16);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(v15);
    v18 = swift_errorRetain(v15);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v36 = v15;
      v37[0] = v22;
      *(_DWORD *)v21 = 136315138;
      swift_errorRetain(v15);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v24 = String.init<A>(describing:)(&v36, v23);
      v36 = sub_100016940(v24, v25, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to save new group. Error %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      swift_errorRelease(v15);
    }
    else
    {
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      swift_errorRelease(v15);

    }
    swift_beginAccess(v16, v37, 1, 0);
    *v16 = 1;
    a2 = v35;
  }
  else
  {
    sub_1000126EC((uint64_t)v14, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v26 = type metadata accessor for Logger(0);
    sub_10001A9E8(v26, (uint64_t)qword_1011B7DF8);
    v27 = sub_10005972C((uint64_t)v11, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v37[0] = v31;
      *(_DWORD *)v30 = 136315138;
      v32 = sub_10036F350();
      v36 = sub_100016940(v32, v33, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully saved new group %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    }
    sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  }
  dispatch_group_leave(a2);
}

void sub_1008E8BEC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  char *v55;
  uint64_t v56;
  uint64_t v57[2];

  v3 = v2;
  v6 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v6);
  v8 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(a1, a2);
  v11 = sub_10001BBBC(a1, a2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v54[1] = v10;
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    *(_DWORD *)v14 = 141558275;
    v56 = 1752392040;
    v57[0] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v16 = sub_10001BBBC(a1, a2);
    static String.Encoding.utf8.getter(v16);
    v55 = v8;
    v17 = String.init(data:encoding:)(a1, a2, v8);
    if (!v18)
      v17 = Data.hexString.getter(a1, a2);
    v19 = v17;
    v20 = v18;
    sub_10001BC14(a1, a2);
    v56 = sub_100016940(v19, v20, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "unpairAllBeaconRecords for serial number: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v8 = v55;
  }
  else
  {
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);

  }
  v21 = sub_10080BC6C(a1, a2);
  v22 = v21[2];
  if (v22)
  {
    v23 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
    v24 = (uint64_t)v21 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    v25 = *(_QWORD *)(v23 + 72);
    do
    {
      sub_1008E92C4(v24, a1, a2, v3);
      v24 += v25;
      --v22;
    }
    while (v22);
  }
  v26 = swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter(v26);
  v27 = String.init(data:encoding:)(a1, a2, v8);
  if (!v28)
    v27 = Data.hexString.getter(a1, a2);
  v29 = v27;
  v30 = v28;
  v31 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0)
    v31 = v27 & 0xFFFFFFFFFFFFLL;
  if (v31)
  {
    sub_10001BBBC(a1, a2);
    v32 = sub_10001BBBC(a1, a2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(22, -1);
      v36 = swift_slowAlloc(32, -1);
      *(_DWORD *)v35 = 141558275;
      v56 = 1752392040;
      v57[0] = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v35 + 4, v35 + 12);
      *(_WORD *)(v35 + 12) = 2081;
      v37 = sub_10001BBBC(a1, a2);
      static String.Encoding.utf8.getter(v37);
      v38 = String.init(data:encoding:)(a1, a2, v8);
      v55 = (char *)v36;
      if (!v39)
        v38 = Data.hexString.getter(a1, a2);
      v40 = v38;
      v41 = v39;
      sub_10001BC14(a1, a2);
      v56 = sub_100016940(v40, v41, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Removing standalone beacons for serial number: %{private,mask.hash}s", (uint8_t *)v35, 0x16u);
      v42 = v55;
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
    }

    type metadata accessor for Transaction(0);
    v53 = swift_allocObject(&unk_10109AAF0, 32, 7);
    *(_QWORD *)(v53 + 16) = v29;
    *(_QWORD *)(v53 + 24) = v30;
    static Transaction.asyncTask(name:block:)("unpairAllBeaconRecords.removeStandaloneBeacons", 46, 2, &unk_10110C708, v53);
    swift_release(v53);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001BBBC(a1, a2);
    v43 = sub_10001BBBC(a1, a2);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc(22, -1);
      v47 = swift_slowAlloc(32, -1);
      *(_DWORD *)v46 = 141558275;
      v56 = 1752392040;
      v57[0] = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2081;
      v48 = sub_10001BBBC(a1, a2);
      static String.Encoding.utf8.getter(v48);
      v49 = String.init(data:encoding:)(a1, a2, v8);
      if (!v50)
        v49 = Data.hexString.getter(a1, a2);
      v51 = v49;
      v52 = v50;
      sub_10001BC14(a1, a2);
      v56 = sub_100016940(v51, v52, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v46 + 14, v46 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Invalid serial number %{private,mask.hash}s. Cannot look up standalone beacons!", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
    }

  }
}

void sub_1008E92C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  os_log_type_t v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = v4;
  v59 = a4;
  v9 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v51 - v16;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7DF8);
  sub_10005972C(a1, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
  sub_10001BBBC(a2, a3);
  v20 = sub_10001BBBC(a2, a3);
  v58 = v19;
  v21 = Logger.logObject.getter(v20);
  v56 = static os_log_type_t.default.getter(v21);
  v22 = os_log_type_enabled(v21, (os_log_type_t)v56);
  v55 = v12;
  if (v22)
  {
    v52 = v21;
    v53 = a1;
    v54 = v15;
    v57 = v4;
    v23 = swift_slowAlloc(42, -1);
    v51 = swift_slowAlloc(64, -1);
    v62 = v51;
    *(_DWORD *)v23 = 141558787;
    v60 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2081;
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
    v60 = sub_100016940(v26, v27, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v23 + 22) = 2160;
    v60 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v23 + 24, v23 + 32);
    *(_WORD *)(v23 + 32) = 2081;
    v28 = sub_10001BBBC(a2, a3);
    static String.Encoding.utf8.getter(v28);
    v29 = String.init(data:encoding:)(a2, a3, v11);
    if (!v30)
      v29 = Data.hexString.getter(a2, a3);
    v31 = v29;
    v32 = v30;
    sub_10001BC14(a2, a3);
    v33 = v56;
    v60 = sub_100016940(v31, v32, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v23 + 34, v23 + 42);
    swift_bridgeObjectRelease();
    sub_10001BC14(a2, a3);
    sub_10001BC14(a2, a3);
    v34 = v52;
    _os_log_impl((void *)&_mh_execute_header, v52, v33, "Unpairing beacon record %{private,mask.hash}s matching %{private,mask.hash}s", (uint8_t *)v23, 0x2Au);
    v35 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v5 = v57;
    a1 = v53;
    v15 = v54;
  }
  else
  {
    sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    sub_10001BC14(a2, a3);
    sub_10001BC14(a2, a3);

  }
  v36 = sub_1009FCEE0(a1, 0, 0);
  if (v36)
  {
    v37 = v36;
    sub_10005972C(a1, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    swift_errorRetain(v37);
    v38 = swift_errorRetain(v37);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(32, -1);
      v57 = v5;
      v42 = v41;
      v59 = swift_slowAlloc(64, -1);
      v60 = v37;
      v62 = v59;
      *(_DWORD *)v42 = 136446723;
      swift_errorRetain(v37);
      v43 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v44 = String.init<A>(describing:)(&v60, v43);
      v60 = sub_100016940(v44, v45, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v37);
      swift_errorRelease(v37);
      *(_WORD *)(v42 + 12) = 2160;
      v60 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v42 + 14, v42 + 22);
      *(_WORD *)(v42 + 22) = 2081;
      v46 = type metadata accessor for UUID(0);
      v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v46, v47);
      v60 = sub_100016940(v48, v49, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v42 + 24, v42 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Error %{public}s deleting %{private,mask.hash}s", (uint8_t *)v42, 0x20u);
      v50 = v59;
      swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      swift_errorRelease(v37);
    }
    else
    {
      swift_errorRelease(v37);
      swift_errorRelease(v37);
      swift_errorRelease(v37);
      sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);

    }
  }
}

uint64_t sub_1008E98E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  return swift_task_switch(sub_1008E98F8, 0, 0);
}

uint64_t sub_1008E98F8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC70 + dword_1010EBC70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 152) = v2;
    *v2 = v0;
    v2[1] = sub_1008E99E4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1008E99E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008E9A40, 0, 0);
}

uint64_t sub_1008E9A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v1 = *(_QWORD *)(v0 + 160);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1008E9B50, *(_QWORD *)(v0 + 160), 0);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7DF8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing StandaloneBeaconService!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008E9B50()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = sub_100B8ACF4(v0[17], v0[18], *(_QWORD *)(v0[20] + 128));
  v0[21] = 0;
  v0[22] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v1);
  swift_release();
  return swift_task_switch(sub_1008E9BC8, 0, 0);
}

uint64_t sub_1008E9BC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[22];
  v2 = v0[20];
  v3 = swift_task_alloc(32);
  v0[23] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[24] = v4;
  *v4 = v0;
  v4[1] = sub_1008E9C60;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1008E9C60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1008E9CC8, 0, 0);
}

uint64_t sub_1008E9CC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008E9CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = *(_QWORD *)(v0 + 168);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7DF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 168);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 120) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 120, v10);
    *(_QWORD *)(v0 + 128) = sub_100016940(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to remove standalone beacons due to %{public}s.", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release();

    swift_errorRelease(v7);
  }
  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008E9EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  v5 = *(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8);
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v4[13] = v6;
  v4[14] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[15] = swift_task_alloc(v7);
  v4[16] = swift_task_alloc(v7);
  return swift_task_switch(sub_1008E9F94, 0, 0);
}

uint64_t sub_1008E9F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(unsigned __int8 *)(v3 + 80);
    v5 = (v4 + 32) & ~v4;
    v6 = v1 + v5;
    v35 = *(_QWORD *)(v3 + 72);
    v36 = v5;
    v33 = (*(_QWORD *)(v0 + 104) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
    v34 = v4 | 7;
    v7 = type metadata accessor for TaskPriority(0);
    v32 = *(_QWORD *)(v7 - 8);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v32 + 56);
    v8 = swift_bridgeObjectRetain(v1);
    do
    {
      v37 = v2;
      v11 = *(_QWORD *)(v0 + 120);
      v10 = *(_QWORD *)(v0 + 128);
      v12 = *(_QWORD *)(v0 + 112);
      v13 = *(_QWORD *)(v0 + 88);
      v31(v10, 1, 1, v7, v8);
      sub_10005972C(v6, v12, type metadata accessor for StandaloneBeacon);
      v14 = swift_allocObject(&unk_10109AB18, v33 + 8, v34);
      *(_QWORD *)(v14 + 16) = 0;
      v15 = (_QWORD *)(v14 + 16);
      *(_QWORD *)(v14 + 24) = 0;
      sub_1000126EC(v12, v14 + v36, type metadata accessor for StandaloneBeacon);
      *(_QWORD *)(v14 + v33) = v13;
      sub_10000F9B8(v10, v11, &qword_1010F46C0);
      LODWORD(v11) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v11, 1, v7);
      v16 = swift_retain();
      v17 = *(_QWORD *)(v0 + 120);
      if ((_DWORD)v11 == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 120), &qword_1010F46C0);
        v18 = 0;
      }
      else
      {
        v19 = TaskPriority.rawValue.getter(v16);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v17, v7);
        v18 = v19;
      }
      v20 = *v15;
      if (*v15)
      {
        v21 = *(_QWORD *)(v14 + 24);
        ObjectType = swift_getObjectType(*v15);
        swift_unknownObjectRetain(v20);
        v23 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v21);
        v25 = v24;
        swift_unknownObjectRelease(v20);
      }
      else
      {
        v23 = 0;
        v25 = 0;
      }
      v26 = **(_QWORD **)(v0 + 72);
      v27 = v25 | v23;
      if (v25 | v23)
      {
        v27 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v23;
        *(_QWORD *)(v0 + 40) = v25;
      }
      v9 = *(_QWORD *)(v0 + 128);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v27;
      *(_QWORD *)(v0 + 64) = v26;
      swift_task_create(v18 | 0x3100, v0 + 48, &type metadata for () + 1, &unk_10110C728, v14);
      swift_release();
      sub_100004048(v9, &qword_1010F46C0);
      v6 += v35;
      v2 = v37 - 1;
    }
    while (v37 != 1);
    swift_bridgeObjectRelease();
  }
  v28 = *(_QWORD *)(v0 + 120);
  v29 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008EA25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5[4] = a4;
  v5[5] = a5;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  v5[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v5[9] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[10] = swift_task_alloc(v10);
  v5[11] = swift_task_alloc(v10);
  v11 = type metadata accessor for StandaloneBeacon(0);
  v5[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008EA314, 0, 0);
}

uint64_t sub_1008EA314()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = v0[4];
  v2 = v0[12];
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7DF8);
  v4 = sub_10005972C(v1, v2, type metadata accessor for StandaloneBeacon);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[12];
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v19 = v10;
    *(_DWORD *)v9 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_1008F1B70();
    v0[3] = sub_100016940(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for StandaloneBeacon);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Removing standalone beacon %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[12], type metadata accessor for StandaloneBeacon);
  }

  v13 = v0[11];
  v14 = v0[7];
  v15 = v0[4];
  v16 = v0[5];
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[8] + 16);
  v0[13] = v17;
  v17(v13, v15, v14);
  return swift_task_switch(sub_1008EA520, v16, 0);
}

uint64_t sub_1008EA520()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  sub_100B8A81C(*(_QWORD **)(v0 + 88), *(_QWORD *)(*(_QWORD *)(v0 + 40) + 128));
  *(_QWORD *)(v0 + 112) = 0;
  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 104);
  v15 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
  v1(v2, v3, v7);
  v10 = sub_100006204(&qword_10110C730, (uint64_t (*)(uint64_t))type metadata accessor for StandaloneBeaconService, (uint64_t)&unk_100E553E0);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (char *)swift_allocObject(&unk_10109AB40, v12 + v4, v11 | 7);
  *((_QWORD *)v13 + 2) = v8;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(&v13[v12], v2, v7);
  swift_retain_n(v8, 2);
  sub_100626BC4(v6, (uint64_t)&unk_10110C738, (uint64_t)v13);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v7);
  swift_task_dealloc(v15);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008EA6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1008EA724(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];

  v7 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  v49 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v44 - v14;
  v16 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = swift_projectBox(a4);
  sub_10000F9B8(a1, (uint64_t)v18, (uint64_t *)&unk_101108050);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    v20 = *v18;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(v20);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = a3;
      v27 = swift_slowAlloc(32, -1);
      v50 = v20;
      v51[0] = v27;
      *(_DWORD *)v25 = 136446210;
      swift_errorRetain(v20);
      v28 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v29 = String.init<A>(describing:)(&v50, v28);
      v50 = sub_100016940(v29, v30, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to save beacon record %{public}s", v25, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      v31 = v27;
      a3 = v26;
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      swift_errorRelease(v20);
    }
    else
    {
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      swift_errorRelease(v20);

    }
  }
  else
  {
    v48 = v19;
    sub_1000126EC((uint64_t)v18, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v32 = type metadata accessor for Logger(0);
    sub_10001A9E8(v32, (uint64_t)qword_1011B7DF8);
    v33 = sub_10005972C((uint64_t)v15, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(22, -1);
      v37 = swift_slowAlloc(32, -1);
      v46 = v37;
      *(_DWORD *)v36 = 141558275;
      v50 = 1752392040;
      v51[0] = v37;
      v47 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2081;
      v45 = v36 + 14;
      v38 = type metadata accessor for UUID(0);
      v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
      v50 = sub_100016940(v40, v41, v51);
      a3 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v45, v36 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "New beacon record has been created. %{private,mask.hash}s", (uint8_t *)v36, 0x16u);
      v42 = v46;
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    }

    v43 = v48;
    sub_1000126EC((uint64_t)v15, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v9, 0, 1, v10);
    swift_beginAccess(v43, v51, 1, 0);
    sub_100004084((uint64_t)v9, v43, (uint64_t *)&unk_1010F47C0);
  }
  dispatch_group_leave(a3);
}

void sub_1008EAC60(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];
  uint64_t v55;
  uint64_t v56;

  v6 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconGroup(0);
  v53 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v48 - v13;
  v15 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = swift_projectBox(a3);
  sub_10000F9B8(a1, (uint64_t)v17, &qword_1010EEC50);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v19 = *v17;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(v19);
    v21 = swift_errorRetain(v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v54[0] = v25;
      *(_DWORD *)v24 = 136446210;
      v55 = v19;
      swift_errorRetain(v19);
      v26 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v27 = String.init<A>(describing:)(&v55, v26);
      v55 = sub_100016940(v27, v28, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unable to modify existing group. Error %{public}s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      swift_errorRelease(v19);
    }
    else
    {
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      swift_errorRelease(v19);

    }
  }
  else
  {
    v52 = v18;
    sub_1000126EC((uint64_t)v17, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B7DF8);
    v31 = sub_10005972C((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc(22, -1);
      v51 = a2;
      v36 = v35;
      v50 = swift_slowAlloc(32, -1);
      v54[0] = v50;
      *(_DWORD *)v36 = 141558275;
      v55 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2081;
      v48 = v36 + 14;
      v37 = type metadata accessor for UUID(0);
      v49 = v34;
      v38 = v9;
      v39 = v30;
      v40 = v37;
      v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v42 = v40;
      v30 = v39;
      v9 = v38;
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v42, v41);
      v55 = sub_100016940(v43, v44, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v48, v36 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v49, "Successfully modified existing group %{private,mask.hash}s", (uint8_t *)v36, 0x16u);
      v45 = v50;
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      v46 = v36;
      a2 = v51;
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    }

    sub_100367170(v30);
    sub_1000126EC((uint64_t)v14, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v8, 0, 1, v9);
    v47 = v52;
    swift_beginAccess(v52, v54, 1, 0);
    sub_100004084((uint64_t)v8, v47, (uint64_t *)&unk_1010FF7F0);
  }
  dispatch_group_leave(a2);
}

void sub_1008EB1C0(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[3];
  uint64_t v62;
  uint64_t v63;

  v6 = type metadata accessor for BeaconObservation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  v60 = v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconGroup(0);
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v54 - v17;
  v19 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = swift_projectBox(a3);
  sub_10000F9B8(a1, (uint64_t)v21, &qword_1010EEC50);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    v23 = *v21;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(v23);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v61[0] = v29;
      *(_DWORD *)v28 = 136446210;
      v62 = v23;
      swift_errorRetain(v23);
      v30 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v31 = String.init<A>(describing:)(&v62, v30);
      v62 = sub_100016940(v31, v32, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to save new group. Error %{public}s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      swift_errorRelease(v23);

    }
  }
  else
  {
    v56 = v22;
    sub_1000126EC((uint64_t)v21, (uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B7DF8);
    v34 = sub_10005972C((uint64_t)v18, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(12, -1);
      v55 = a2;
      v38 = (uint8_t *)v37;
      v39 = swift_slowAlloc(32, -1);
      v61[0] = v39;
      *(_DWORD *)v38 = 136315138;
      v54 = v9;
      v40 = sub_10036F350();
      v62 = sub_100016940(v40, v41, v61);
      v9 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Successfully saved new group %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      v42 = v38;
      a2 = v55;
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    }

    sub_10005972C((uint64_t)v18, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    v43 = v58;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v12, 0, 1, v58);
    v44 = v56;
    swift_beginAccess(v56, v61, 1, 0);
    sub_100004084((uint64_t)v12, v44, (uint64_t *)&unk_1010FF7F0);
    v45 = &v18[*(int *)(v43 + 24)];
    v46 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v9, v45, v46);
    v47 = v59;
    static Date.trustedNow.getter((uint64_t)&v9[*(int *)(v59 + 20)]);
    v9[*(int *)(v47 + 24)] = 37;
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v48 = qword_1011B7160;
    v49 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v50 = *(unsigned __int8 *)(v60 + 80);
    v51 = (v50 + 32) & ~v50;
    v52 = swift_allocObject(v49, v51 + *(_QWORD *)(v60 + 72), v50 | 7);
    *(_OWORD *)(v52 + 16) = xmmword_100E22B00;
    sub_10005972C((uint64_t)v9, v52 + v51, type metadata accessor for BeaconObservation);
    v53 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v53);
    *(&v54 - 4) = (char *)v48;
    *(&v54 - 3) = (char *)v52;
    *(&v54 - 2) = 0;
    *(&v54 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v54 - 6, (char *)&type metadata for () + 8);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconObservation);
    sub_1000126B0((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
  }
  dispatch_group_leave(a2);
}

unint64_t sub_1008EB834()
{
  unint64_t result;

  result = qword_10110C6F8;
  if (!qword_10110C6F8)
  {
    result = swift_getWitnessTable(byte_100E3AA98, &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, &qword_10110C6F8);
  }
  return result;
}

void sub_1008EB878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v32 = a3;
  v37 = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedBeaconGroup(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  v8 = __chkstk_darwin(v7);
  v31 = (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v30 = (char *)&v29 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - v12;
  v14 = *(_QWORD *)(a1 + 56);
  v33 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v34 = (unint64_t)(v15 + 63) >> 6;
  v38 = a1;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  v19 = (uint64_t)v30;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v34)
      goto LABEL_26;
    v23 = *(_QWORD *)(v33 + 8 * v22);
    ++v18;
    if (!v23)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v34)
        goto LABEL_26;
      v23 = *(_QWORD *)(v33 + 8 * v18);
      if (!v23)
      {
        v18 = v22 + 2;
        if (v22 + 2 >= v34)
          goto LABEL_26;
        v23 = *(_QWORD *)(v33 + 8 * v18);
        if (!v23)
        {
          v18 = v22 + 3;
          if (v22 + 3 >= v34)
            goto LABEL_26;
          v23 = *(_QWORD *)(v33 + 8 * v18);
          if (!v23)
            break;
        }
      }
    }
LABEL_23:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_24:
    v25 = (uint64_t *)(*(_QWORD *)(v38 + 48) + 16 * v21);
    v27 = *v25;
    v26 = v25[1];
    sub_10001BBBC(*v25, v26);
    sub_10081F138(v27, v26, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v6, 1, v36) == 1)
    {
      sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010FF7F0);
    }
    else
    {
      sub_1000126EC((uint64_t)v6, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      v28 = v31;
      sub_10005972C((uint64_t)v13, v31, type metadata accessor for OwnedBeaconGroup);
      sub_100A0EFDC(v19, v28);
      sub_1000126B0(v19, type metadata accessor for OwnedBeaconGroup);
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    }
    sub_10001BC14(v27, v26);
  }
  v24 = v22 + 4;
  if (v24 >= v34)
  {
LABEL_26:
    swift_release(v38);
    return;
  }
  v23 = *(_QWORD *)(v33 + 8 * v24);
  if (v23)
  {
    v18 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v18 >= v34)
      goto LABEL_26;
    v23 = *(_QWORD *)(v33 + 8 * v18);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

void sub_1008EBB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  int64_t v17;
  uint64_t (*v18)(uint64_t);
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t (*v30)(uint64_t);
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;

  v47 = type metadata accessor for OwnedBeaconGroup(0);
  v4 = *(_QWORD *)(v47 - 8);
  v5 = __chkstk_darwin(v47);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v42 - v9;
  __chkstk_darwin(v8);
  v51 = (uint64_t)&v42 - v11;
  v12 = *(_QWORD *)(a1 + 56);
  v49 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v50 = (unint64_t)(v13 + 63) >> 6;
  v16 = swift_bridgeObjectRetain(a1);
  v17 = 0;
  v18 = type metadata accessor for OwnedBeaconGroup;
  v16.n128_u64[0] = 141558275;
  v44 = v16;
  v43 = (char *)&type metadata for Any + 8;
  v48 = a2;
  v45 = a1;
  v46 = v4;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v20 = (v15 - 1) & v15;
      v53 = v17;
      v21 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v50)
      goto LABEL_28;
    v23 = *(_QWORD *)(v49 + 8 * v22);
    v24 = v17 + 1;
    if (!v23)
    {
      v24 = v17 + 2;
      if (v17 + 2 >= v50)
        goto LABEL_28;
      v23 = *(_QWORD *)(v49 + 8 * v24);
      if (!v23)
      {
        v24 = v17 + 3;
        if (v17 + 3 >= v50)
          goto LABEL_28;
        v23 = *(_QWORD *)(v49 + 8 * v24);
        if (!v23)
        {
          v24 = v17 + 4;
          if (v17 + 4 >= v50)
            goto LABEL_28;
          v23 = *(_QWORD *)(v49 + 8 * v24);
          if (!v23)
            break;
        }
      }
    }
LABEL_23:
    v20 = (v23 - 1) & v23;
    v53 = v24;
    v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_24:
    v52 = v20;
    v26 = v51;
    sub_10005972C(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * v21, v51, v18);
    sub_1000126EC(v26, (uint64_t)v10, v18);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v27 = type metadata accessor for Logger(0);
    sub_10001A9E8(v27, (uint64_t)qword_1011B7DF8);
    v28 = sub_10005972C((uint64_t)v10, (uint64_t)v7, v18);
    v29 = Logger.logObject.getter(v28);
    v30 = v18;
    v31 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(32, -1);
      v54 = v33;
      *(_DWORD *)v32 = v44.n128_u32[0];
      *(_QWORD *)(v32 + 4) = 1752392040;
      *(_WORD *)(v32 + 12) = 2081;
      v34 = v10;
      v35 = v7;
      v36 = type metadata accessor for UUID(0);
      v37 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v38 = v36;
      v7 = v35;
      v10 = v34;
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v38, v37);
      *(_QWORD *)(v32 + 14) = sub_100016940(v39, v40, &v54);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v7, v30);
      _os_log_impl((void *)&_mh_execute_header, v29, v31, "Clean up existing group %{private,mask.hash}s for other serial numbers", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v33, 1, v43);
      v41 = v33;
      a1 = v45;
      v4 = v46;
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v7, v30);
    }

    v18 = v30;
    v15 = v52;
    v17 = v53;
    sub_1008E7B10((uint64_t)v10);
    sub_1000126B0((uint64_t)v10, v18);
  }
  v25 = v17 + 5;
  if (v17 + 5 >= v50)
  {
LABEL_28:
    swift_release(a1);
    return;
  }
  v23 = *(_QWORD *)(v49 + 8 * v25);
  if (v23)
  {
    v24 = v17 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v50)
      goto LABEL_28;
    v23 = *(_QWORD *)(v49 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_23;
  }
LABEL_30:
  __break(1u);
}

_QWORD *sub_1008EBFB4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X8 }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1008EC664(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for AccessoryProductInfo(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100A08A3C(a1, a2))
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7DF8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Setting AlphaWasp beacon group version to 1", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return 1;
  }
  else
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7DF8);
    v16 = sub_10005972C(a3, (uint64_t)v8, type metadata accessor for AccessoryProductInfo);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v29 = v20;
      *(_DWORD *)v19 = 136446210;
      if ((v8[8] & 1) != 0)
      {
        v21 = 0xE700000000000000;
        v22 = 0x79636167656C2ELL;
      }
      else
      {
        v23 = *(_QWORD *)v8;
        v27 = 0x6E6F69737265762ELL;
        v28 = 0xEB00000000286465;
        v26 = v23;
        v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._countAndFlagsBits = 41;
        v25._object = (void *)0xE100000000000000;
        String.append(_:)(v25);
        v22 = v27;
        v21 = v28;
      }
      v27 = sub_100016940(v22, v21, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v8, type metadata accessor for AccessoryProductInfo);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Getting beacon group version from product info: %{public}s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v8, type metadata accessor for AccessoryProductInfo);
    }

    return *(_QWORD *)a3;
  }
}

void sub_1008EC984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1008EA724(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1008EC98C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F43E0(a1, v1);
}

void sub_1008EC9A8(uint64_t a1)
{
  uint64_t v1;

  sub_1008EAC60(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1008EC9B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008EC9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10110C704);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004C28;
  v4[17] = v2;
  v4[18] = v3;
  return swift_task_switch(sub_1008E98F8, 0, 0);
}

uint64_t sub_1008ECA34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_10110C714);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004C28;
  return sub_1008E9EFC(a1, a2, v7, v6);
}

uint64_t sub_1008ECAA0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for StandaloneBeacon(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + v1[5];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v7 + v1[6], v10);
  swift_bridgeObjectRelease();
  v12 = v7 + v1[8];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v14 = v7 + v1[10];
  sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
  sub_10001BC14(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24));
  sub_10001BC14(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
  sub_10001BC14(*(_QWORD *)(v7 + v1[11]), *(_QWORD *)(v7 + v1[11] + 8));
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1008ECBF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10110C724);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004A74;
  return sub_1008EA25C(a1, v6, v7, v8, v9);
}

uint64_t sub_1008ECC9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10110D0AC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_1009029A4(a1, v5, v6, v7, v8);
}

uint64_t sub_1008ECD30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1008ECD44(uint64_t a1)
{
  uint64_t v1;

  sub_1008E82BC(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1008ECD4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100616384(v1, a1);
}

uint64_t sub_1008ECD68()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for StandaloneBeacon(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + v1[5];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v7 + v1[6], v10);
  swift_bridgeObjectRelease();
  v12 = v7 + v1[8];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v14 = v7 + v1[10];
  sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
  sub_10001BC14(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24));
  sub_10001BC14(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
  sub_10001BC14(*(_QWORD *)(v7 + v1[11]), *(_QWORD *)(v7 + v1[11] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008ECEA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10110D0EC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_1009027F0(a1, v5, v6, v7, v8);
}

ValueMetadata *type metadata accessor for AccessoryModelNameResponsePayload()
{
  return &type metadata for AccessoryModelNameResponsePayload;
}

unint64_t sub_1008ECF4C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1008ECF78();
  result = sub_1003ECDF4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008ECF78()
{
  unint64_t result;

  result = qword_10110C758;
  if (!qword_10110C758)
  {
    result = swift_getWitnessTable(byte_100E544F4, &type metadata for AccessoryModelNameResponsePayload);
    atomic_store(result, (unint64_t *)&qword_10110C758);
  }
  return result;
}

_QWORD *sub_1008ECFBC(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_10009A310(0, v1, 0);
  result = (_QWORD *)sub_10001D6A8(a1);
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = a1 + 64;
  v20 = v1;
  v21 = v4;
  v22 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    v10 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v4)
      goto LABEL_24;
    v23 = v6;
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v5);
    v11 = _swiftEmptyArrayStorage[2];
    v12 = _swiftEmptyArrayStorage[3];
    result = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v5);
    v13 = result;
    if (v11 >= v12 >> 1)
      result = (_QWORD *)sub_10009A310(v12 > 1, v11 + 1, 1);
    _swiftEmptyArrayStorage[2] = v11 + 1;
    v14 = &_swiftEmptyArrayStorage[2 * v11];
    v14[4] = v24;
    v14[5] = v13;
    v8 = 1 << *(_BYTE *)(a1 + 32);
    if (v5 >= v8)
      goto LABEL_25;
    v7 = a1 + 64;
    v15 = *(_QWORD *)(v22 + 8 * v10);
    if ((v15 & (1 << v5)) == 0)
      goto LABEL_26;
    v4 = v21;
    if (*(_DWORD *)(a1 + 36) != v21)
      goto LABEL_27;
    v16 = v15 & (-2 << (v5 & 0x3F));
    if (v16)
    {
      v8 = __clz(__rbit64(v16)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v9 = v20;
    }
    else
    {
      v17 = v10 + 1;
      v18 = (unint64_t)(v8 + 63) >> 6;
      v9 = v20;
      if (v10 + 1 < v18)
      {
        v19 = *(_QWORD *)(v22 + 8 * v17);
        if (v19)
        {
LABEL_20:
          v8 = __clz(__rbit64(v19)) + (v17 << 6);
        }
        else
        {
          while (v18 - 2 != v10)
          {
            v19 = *(_QWORD *)(a1 + 80 + 8 * v10++);
            if (v19)
            {
              v17 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v6 = v23 + 1;
    v5 = v8;
    if (v23 + 1 == v9)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_1008ED1D0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    sub_10009ACB8(0, v1, 0);
    v3 = _swiftEmptyArrayStorage;
    v5 = sub_10001D6A8(v2);
    v6 = 0;
    v7 = v2 + 64;
    v26 = v2 + 80;
    v29 = v2 + 64;
    v27 = v1;
    v28 = v4;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v2 + 32))
    {
      v10 = (unint64_t)v5 >> 6;
      if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(v2 + 36) != v4)
        goto LABEL_24;
      v11 = *(id *)(*(_QWORD *)(v2 + 56) + 8 * v5);
      v12 = v3;
      v13 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v30 = v14;
      v31 = v13;
      v15 = objc_msgSend(v11, "dictionaryRepresentation");
      v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      v3 = v12;
      v32 = v12;
      v17 = v2;
      v19 = v3[2];
      v18 = v3[3];
      if (v19 >= v18 >> 1)
      {
        sub_10009ACB8(v18 > 1, v19 + 1, 1);
        v3 = v32;
      }
      v3[2] = v19 + 1;
      v20 = &v3[3 * v19];
      v20[4] = v31;
      v20[5] = v30;
      v20[6] = v16;
      v8 = 1 << *(_BYTE *)(v17 + 32);
      if (v5 >= v8)
        goto LABEL_25;
      v7 = v29;
      v21 = *(_QWORD *)(v29 + 8 * v10);
      if ((v21 & (1 << v5)) == 0)
        goto LABEL_26;
      v2 = v17;
      v4 = v28;
      if (*(_DWORD *)(v17 + 36) != v28)
        goto LABEL_27;
      v22 = v21 & (-2 << (v5 & 0x3F));
      if (v22)
      {
        v8 = __clz(__rbit64(v22)) | v5 & 0xFFFFFFFFFFFFFFC0;
        v9 = v27;
      }
      else
      {
        v23 = v10 + 1;
        v24 = (unint64_t)(v8 + 63) >> 6;
        v9 = v27;
        if (v10 + 1 < v24)
        {
          v25 = *(_QWORD *)(v29 + 8 * v23);
          if (v25)
          {
LABEL_20:
            v8 = __clz(__rbit64(v25)) + (v23 << 6);
          }
          else
          {
            while (v24 - 2 != v10)
            {
              v25 = *(_QWORD *)(v26 + 8 * v10++);
              if (v25)
              {
                v23 = v10 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v6;
      v5 = v8;
      if (v6 == v9)
        return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

unint64_t sub_1008ED464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v23;
  char v24[320];

  v1 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v1, v24);
  *(_OWORD *)(inited + 16) = xmmword_100E26E10;
  *(_QWORD *)(inited + 32) = 108;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 48) = UUID.data.getter(inited);
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 72) = &type metadata for Data;
  *(_QWORD *)(inited + 80) = 98;
  *(_QWORD *)(inited + 88) = 0xE100000000000000;
  v4 = (int *)type metadata accessor for OfflineFindingInfo(0);
  v5 = v0 + v4[5];
  v6 = type metadata accessor for Date(0);
  *(_QWORD *)(inited + 120) = v6;
  v7 = sub_100018F08((_QWORD *)(inited + 96));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v5, v6);
  *(_QWORD *)(inited + 128) = 105;
  *(_QWORD *)(inited + 136) = 0xE100000000000000;
  *(_QWORD *)(inited + 144) = *(_QWORD *)(v0 + v4[6]);
  *(_QWORD *)(inited + 168) = &type metadata for UInt64;
  *(_QWORD *)(inited + 176) = 112;
  *(_QWORD *)(inited + 184) = 0xE100000000000000;
  v8 = (uint64_t *)(v0 + v4[7]);
  v9 = *v8;
  v10 = v8[1];
  *(_QWORD *)(inited + 192) = *v8;
  *(_QWORD *)(inited + 200) = v10;
  *(_QWORD *)(inited + 216) = &type metadata for Data;
  *(_QWORD *)(inited + 224) = 115;
  *(_QWORD *)(inited + 232) = 0xE100000000000000;
  v11 = (uint64_t *)(v0 + v4[8]);
  v12 = *v11;
  v13 = v11[1];
  *(_QWORD *)(inited + 240) = *v11;
  *(_QWORD *)(inited + 248) = v13;
  *(_QWORD *)(inited + 264) = &type metadata for Data;
  *(_QWORD *)(inited + 272) = 118;
  *(_QWORD *)(inited + 280) = 0xE100000000000000;
  v14 = *(_QWORD *)(v0 + v4[9]);
  sub_10001BBBC(v9, v10);
  sub_10001BBBC(v12, v13);
  swift_bridgeObjectRetain(v14);
  sub_1008ED1D0(v15);
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    sub_10001A9A8((uint64_t *)&unk_1011118C0);
    v19 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v18);
  }
  else
  {
    v19 = _swiftEmptyDictionarySingleton;
  }
  v23 = v19;
  swift_bridgeObjectRetain(v17);
  sub_1008EE9D8(v20, 1, &v23);
  swift_bridgeObjectRelease();
  v21 = v23;
  *(_QWORD *)(inited + 312) = sub_10001A9A8(&qword_10110C770);
  *(_QWORD *)(inited + 288) = v21;
  return sub_1006B8B10(inited);
}

uint64_t sub_1008ED660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  id v74;
  __n128 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  id v82;
  __n128 v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  void (*v96)(char *, char *, uint64_t);
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v6 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v101 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v103 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for OfflineFindingInfo(0);
  v16 = *((_QWORD *)v15 - 1);
  __chkstk_darwin(v15);
  v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16)
    || (v104 = a2, v19 = sub_100518DA0(108, 0xE100000000000000), a2 = v104, (v20 & 1) == 0)
    || (sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v19, (uint64_t)&v106),
        (swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v99 = v7;
  v100 = v16;
  v21 = v105;
  v106 = v105;
  v22 = sub_100035530();
  v23 = DataProtocol.bytes.getter(&type metadata for Data, v22);
  UUID.init(bytes:)(v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    v97 = v21;
    v98 = v13;
    v26 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v26(v103, v11, v12);
    if (*(_QWORD *)(a1 + 16) && (v27 = sub_100518DA0(98, 0xE100000000000000), (v28 & 1) != 0))
    {
      sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v27, (uint64_t)&v106);
      v29 = v102;
      v30 = swift_dynamicCast(v6, &v106, (char *)&type metadata for Any + 8, v102, 6);
      v31 = v99;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v6, v30 ^ 1u, 1, v29);
      v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v6, 1, v29);
      a2 = v104;
      v16 = v100;
      if (v32 != 1)
      {
        v95 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
        v96 = v26;
        v95(v101, v6, v29);
        v33 = v29;
        v34 = v98;
        if (!*(_QWORD *)(a1 + 16))
        {
          swift_bridgeObjectRelease();
          v44 = *((_QWORD *)&v97 + 1);
          v43 = v97;
LABEL_25:
          sub_10001BC14(v43, v44);
          goto LABEL_26;
        }
        v35 = sub_100518DA0(105, 0xE100000000000000);
        v36 = *((_QWORD *)&v97 + 1);
        if ((v37 & 1) != 0)
        {
          sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v35, (uint64_t)&v106);
          v38 = swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6);
          a2 = v104;
          if ((v38 & 1) == 0 || !*(_QWORD *)(a1 + 16))
          {
LABEL_24:
            swift_bridgeObjectRelease();
            v43 = v97;
            v44 = v36;
            goto LABEL_25;
          }
          v94 = v105;
          v39 = sub_100518DA0(112, 0xE100000000000000);
          if ((v40 & 1) != 0)
          {
            sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v39, (uint64_t)&v106);
            v41 = swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
            a2 = v104;
            if ((v41 & 1) != 0)
            {
              v42 = *((_QWORD *)&v105 + 1);
              v93 = v105;
              sub_10001BBBC(v105, *((unint64_t *)&v105 + 1));
              v92 = v42;
              v45 = sub_1002FB6C8(v93, v42);
              v47 = v46;
              v48 = v93;
              if (!*(_QWORD *)(a1 + 16) || (v49 = sub_100518DA0(115, 0xE100000000000000), (v50 & 1) == 0))
              {
                swift_bridgeObjectRelease();
                sub_10001BC14(v45, v47);
                sub_10001BC14(v48, v92);
                v52 = v97;
                v53 = v36;
LABEL_34:
                sub_10001BC14(v52, v53);
LABEL_35:
                (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v102);
                (*(void (**)(char *, uint64_t))(v98 + 8))(v103, v12);
                goto LABEL_6;
              }
              sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v49, (uint64_t)&v106);
              if ((swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
              {
                swift_bridgeObjectRelease();
                v54 = v45;
                v55 = v47;
LABEL_33:
                sub_10001BC14(v54, v55);
                sub_10001BC14(v48, v92);
                v53 = *((_QWORD *)&v97 + 1);
                v52 = v97;
                goto LABEL_34;
              }
              v51 = v105;
              sub_10001BBBC(v105, *((unint64_t *)&v105 + 1));
              v91 = v51;
              sub_1002F702C(v51, *((uint64_t *)&v51 + 1));
              v90 = v106;
              if (*(_QWORD *)(a1 + 16) && (v56 = sub_100518DA0(118, 0xE100000000000000), (v57 & 1) != 0))
              {
                sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v56, (uint64_t)&v106);
              }
              else
              {
                v106 = 0u;
                v107 = 0u;
              }
              swift_bridgeObjectRelease();
              if (!*((_QWORD *)&v107 + 1))
              {
                sub_10001BC14(v45, v47);
                sub_10001BC14(v90, *((unint64_t *)&v90 + 1));
                sub_10001BC14(v91, *((unint64_t *)&v51 + 1));
                sub_10001BC14(v48, v92);
                sub_10001BC14(v97, *((unint64_t *)&v97 + 1));
                sub_100004048((uint64_t)&v106, (uint64_t *)&unk_1010F6390);
                goto LABEL_35;
              }
              v58 = sub_10001A9A8(&qword_101108AE0);
              if ((swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, v58, 6) & 1) == 0)
              {
                sub_10001BC14(v45, v47);
                sub_10001BC14(v90, *((unint64_t *)&v90 + 1));
LABEL_57:
                v54 = v91;
                v55 = *((_QWORD *)&v51 + 1);
                goto LABEL_33;
              }
              v59 = v105;
              if (*(_QWORD *)(v105 + 16) == 2)
              {
                *(_QWORD *)&v106 = 1;
                v60 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
                if (*(_QWORD *)(v59 + 16))
                {
                  v62 = sub_100518DA0(v60, v61);
                  if ((v63 & 1) != 0)
                  {
                    v89 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v62);
                    swift_bridgeObjectRetain(v89);
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v106 = 2;
                    v64 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
                    if (*(_QWORD *)(v59 + 16))
                    {
                      v66 = sub_100518DA0(v64, v65);
                      if ((v67 & 1) != 0)
                      {
                        v88 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v66);
                        swift_bridgeObjectRetain(v88);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        *(_QWORD *)&v106 = _swiftEmptyDictionarySingleton;
                        if (*(_QWORD *)(v89 + 16)
                          && (v68 = sub_100518DA0(115, 0xE100000000000000), (v69 & 1) != 0)
                          && *(_QWORD *)(v89 + 16)
                          && (v70 = *(_QWORD *)(*(_QWORD *)(v89 + 56) + 8 * v68),
                              v71 = sub_100518DA0(108, 0xE100000000000000),
                              (v72 & 1) != 0))
                        {
                          v73 = *(_QWORD *)(*(_QWORD *)(v89 + 56) + 8 * v71);
                          swift_bridgeObjectRelease();
                          v74 = objc_msgSend(objc_allocWithZone((Class)SPOfflineAdvertisingConfiguration), "initWithShortIntervalCount:longIntervalCount:", v70, v73);
                          sub_1000FF640((uint64_t)v74, 1, v75);
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                        }
                        if (*(_QWORD *)(v88 + 16) && (v76 = sub_100518DA0(115, 0xE100000000000000), (v77 & 1) != 0))
                        {
                          if (*(_QWORD *)(v88 + 16)
                            && (v78 = *(_QWORD *)(*(_QWORD *)(v88 + 56) + 8 * v76),
                                v79 = sub_100518DA0(108, 0xE100000000000000),
                                (v80 & 1) != 0))
                          {
                            v81 = *(_QWORD *)(*(_QWORD *)(v88 + 56) + 8 * v79);
                            swift_bridgeObjectRelease();
                            v82 = objc_msgSend(objc_allocWithZone((Class)SPOfflineAdvertisingConfiguration), "initWithShortIntervalCount:longIntervalCount:", v78, v81);
                            sub_1000FF640((uint64_t)v82, 2, v83);
                          }
                          else
                          {
                            swift_bridgeObjectRelease();
                          }
                          sub_10001BC14(v97, *((unint64_t *)&v97 + 1));
                          sub_10001BC14(v48, v92);
                          sub_10001BC14(v91, *((unint64_t *)&v51 + 1));
                        }
                        else
                        {
                          sub_10001BC14(v97, *((unint64_t *)&v97 + 1));
                          sub_10001BC14(v48, v92);
                          sub_10001BC14(v91, *((unint64_t *)&v51 + 1));
                          swift_bridgeObjectRelease();
                        }
                        v84 = v106;
                        if (*(_QWORD *)(v106 + 16) == 2)
                        {
                          v96(v18, v103, v12);
                          v95(&v18[v15[5]], v101, v102);
                          *(_QWORD *)&v18[v15[6]] = v94;
                          v85 = (uint64_t *)&v18[v15[7]];
                          *v85 = v45;
                          v85[1] = v47;
                          v86 = &v18[v15[8]];
                          v87 = *((_QWORD *)&v90 + 1);
                          *(_QWORD *)v86 = v90;
                          *((_QWORD *)v86 + 1) = v87;
                          *(_QWORD *)&v18[v15[9]] = v84;
                          a2 = v104;
                          sub_1008EED68((uint64_t)v18, v104);
                          v24 = 0;
                          v16 = v100;
                          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))(a2, v24, 1, v15);
                        }
                        sub_10001BC14(v45, v47);
                        sub_10001BC14(v90, *((unint64_t *)&v90 + 1));
                        swift_bridgeObjectRelease();
                        goto LABEL_35;
                      }
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_10001BC14(v45, v47);
                    sub_10001BC14(v90, *((unint64_t *)&v90 + 1));
                    goto LABEL_56;
                  }
                }
                swift_bridgeObjectRelease();
              }
              sub_10001BC14(v45, v47);
              sub_10001BC14(v90, *((unint64_t *)&v90 + 1));
LABEL_56:
              swift_bridgeObjectRelease();
              goto LABEL_57;
            }
            goto LABEL_24;
          }
        }
        swift_bridgeObjectRelease();
        sub_10001BC14(v97, v36);
        a2 = v104;
LABEL_26:
        (*(void (**)(char *, uint64_t))(v31 + 8))(v101, v33);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v103, v12);
        goto LABEL_8;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v6, 1, 1, v102);
      a2 = v104;
      v16 = v100;
    }
    swift_bridgeObjectRelease();
    sub_10001BC14(v97, *((unint64_t *)&v97 + 1));
    (*(void (**)(char *, uint64_t))(v98 + 8))(v103, v12);
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010EA690);
LABEL_8:
    v24 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))(a2, v24, 1, v15);
  }
  sub_10001BC14(v21, *((unint64_t *)&v21 + 1));
  swift_bridgeObjectRelease();
  sub_100004048((uint64_t)v11, &qword_1010ED860);
LABEL_6:
  v24 = 1;
  a2 = v104;
  v16 = v100;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))(a2, v24, 1, v15);
}

void sub_1008EE19C()
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  _StringGuts.grow(_:)(88);
  v1 = type metadata accessor for OfflineFindingInfo(0);
  v2 = sub_100006204(&qword_10110C760, type metadata accessor for OfflineFindingInfo, (uint64_t)&unk_100E54560);
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6669746E65646928;
  v4._object = (void *)0xED0000203A726569;
  String.append(_:)(v4);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x676E697269617020;
  v8._object = (void *)0xEE00203A65746144;
  String.append(_:)(v8);
  v9 = type metadata accessor for Date(0);
  v10 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v9, v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x203A7865646E6920;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x3C203A4B5020;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  __asm { BR              X13 }
}

uint64_t sub_1008EE3A0()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x203E736574796220;
  v4._object = (void *)0xED00003C203A5353;
  String.append(_:)(v4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1008EE43C
                                                                     + dword_1008EE5EC[*(_QWORD *)(v0
                                                                                                 + *(int *)(v1 + 32)
                                                                                                 + 8) >> 62]))(v5, v6, v7, v8);
}

uint64_t sub_1008EE44C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD v15[9];

  v15[0] = BYTE6(v0);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x8000000100EEAB00;
  v4._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v4);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(v2 + 36)));
  v6 = sub_1008ECFBC(v5);
  swift_bridgeObjectRelease();
  v7 = v6[2];
  if (v7)
  {
    sub_10001A9A8((uint64_t *)&unk_101111710);
    v8 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v7);
  }
  else
  {
    v8 = _swiftEmptyDictionarySingleton;
  }
  v15[0] = v8;
  swift_bridgeObjectRetain(v6);
  sub_1008EE63C(v9, 1, v15);
  swift_bridgeObjectRelease();
  v10 = v15[0];
  v11 = sub_1008EE99C();
  v12._countAndFlagsBits = Dictionary.description.getter(v10, &type metadata for Int, v11, &protocol witness table for Int);
  String.append(_:)(v12);
  swift_release();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v15[1];
}

uint64_t type metadata accessor for OfflineFindingInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_10110C7D0;
  if (!qword_10110C7D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OfflineFindingInfo);
  return result;
}

uint64_t sub_1008EE63C(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void **i;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = a1[2];
  if (!v3)
    return swift_bridgeObjectRelease();
  v7 = a1[4];
  v6 = (void *)a1[5];
  swift_bridgeObjectRetain(a1);
  v53 = v7;
  v8 = (_QWORD *)*a3;
  v9 = sub_100518D38(v7);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    goto LABEL_24;
  v14 = v9;
  v15 = v10;
  v16 = v8[3];
  v17 = v6;
  if (v16 >= v13)
  {
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_100A9941C();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v14 >> 6) + 64) |= 1 << v14;
    v24 = 8 * v14;
    *(_QWORD *)(v23[6] + v24) = v7;
    *(_QWORD *)(v23[7] + v24) = v17;
    v25 = v23[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v23[2] = v27;
    v28 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = (void **)(a1 + 7); ; i += 2)
    {
      v31 = (uint64_t)*(i - 1);
      v30 = *i;
      v53 = v31;
      v32 = (_QWORD *)*a3;
      v33 = sub_100518D38(v31);
      v35 = v32[2];
      v36 = (v34 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        break;
      v38 = v33;
      v39 = v34;
      v40 = v32[3];
      v17 = v30;
      if (v40 < v37)
      {
        sub_100A83CF8(v37, 1);
        v41 = sub_100518D38(v31);
        if ((v39 & 1) != (v42 & 1))
          goto LABEL_26;
        v38 = v41;
      }
      if ((v39 & 1) != 0)
        goto LABEL_10;
      v43 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v38 >> 6) + 64) |= 1 << v38;
      v44 = 8 * v38;
      *(_QWORD *)(v43[6] + v44) = v31;
      *(_QWORD *)(v43[7] + v44) = v17;
      v45 = v43[2];
      v26 = __OFADD__(v45, 1);
      v46 = v45 + 1;
      if (v26)
        goto LABEL_25;
      v43[2] = v46;
      if (!--v28)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_100A83CF8(v13, a2 & 1);
  v18 = sub_100518D38(v7);
  if ((v15 & 1) == (v19 & 1))
  {
    v14 = v18;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v21 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v21);
    v52 = v21;
    swift_errorRetain(v21);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if ((swift_dynamicCast(v22, &v52, v22, &type metadata for _MergeError, 0) & 1) == 0)
    {

      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v52);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
LABEL_27:
  v50 = 0;
  v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v47._object = (void *)0x8000000100EDC680;
  v47._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v47);
  _print_unlocked<A, B>(_:_:)(&v53, &v50, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v48._countAndFlagsBits = 39;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v50, v51, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

unint64_t sub_1008EE99C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10110C768;
  if (!qword_10110C768)
  {
    v1 = objc_opt_self(SPOfflineAdvertisingConfiguration);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10110C768);
  }
  return result;
}

uint64_t sub_1008EE9D8(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (!a1[2])
    return swift_bridgeObjectRelease();
  v45 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  swift_bridgeObjectRetain(a1);
  v48 = v7;
  v49 = v6;
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v11 = sub_100518DA0(v7, v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_100A9BB34();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v22 = (uint64_t *)(v21[6] + 16 * v11);
    *v22 = v7;
    v22[1] = v6;
    *(_QWORD *)(v21[7] + 8 * v11) = v8;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v45 - 1;
    if (v45 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = a1 + 9; ; i += 3)
    {
      v28 = *(i - 1);
      v30 = *i;
      v48 = *(i - 2);
      v29 = v48;
      v49 = v28;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v30);
      v32 = sub_100518DA0(v48, v28);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_100A89238(v36, 1);
        v32 = sub_100518DA0(v48, v28);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v28;
      *(_QWORD *)(v39[7] + 8 * v32) = v30;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      if (!--v26)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100A89238(v14, a2 & 1);
  v16 = sub_100518DA0(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v19);
    v50 = v19;
    swift_errorRetain(v19);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if ((swift_dynamicCast(v20, &v50, v20, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v50);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x8000000100EDC680;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)(&v48, &v46, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v46, v47, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_1008EED68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OfflineFindingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1008EEDAC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = *(uint64_t *)((char *)a2 + v12);
    v15 = *(uint64_t *)((char *)a2 + v12 + 8);
    sub_10001BBBC(v14, v15);
    *v13 = v14;
    v13[1] = v15;
    v16 = a3[8];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    v20 = v18[1];
    sub_10001BBBC(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
    v21 = a3[9];
    v22 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v22;
    swift_bridgeObjectRetain(v22);
  }
  return a1;
}

uint64_t sub_1008EEEB4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_10001BC14(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  sub_10001BC14(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t sub_1008EEF44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = (uint64_t *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  sub_10001BBBC(v13, v14);
  *v12 = v13;
  v12[1] = v14;
  v15 = a3[8];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  v19 = v17[1];
  sub_10001BBBC(*v17, v19);
  *v16 = v18;
  v16[1] = v19;
  v20 = a3[9];
  v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_1008EF020(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_10001BBBC(*v13, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  sub_10001BC14(v16, v17);
  v18 = a3[8];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_10001BBBC(*v20, v22);
  v23 = *v19;
  v24 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  sub_10001BC14(v23, v24);
  v25 = a3[9];
  v26 = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(a1 + v25) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1008EF11C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_1008EF1C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  sub_10001BC14(v12, v13);
  v14 = a3[8];
  v15 = *(_QWORD *)(a1 + v14);
  v16 = *(_QWORD *)(a1 + v14 + 8);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  sub_10001BC14(v15, v16);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1008EF298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008EF2A4);
}

uint64_t sub_1008EF2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1008EF34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008EF358);
}

uint64_t sub_1008EF358(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t sub_1008EF3FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[3] = &unk_100E545A8;
      v5[4] = &unk_100E545A8;
      v5[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckStatus()
{
  return &type metadata for SecureLocationsPushAckStatus;
}

uint64_t sub_1008EF4B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(_BYTE *, _QWORD);
  Swift::String v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v34 = a1;
  v1 = sub_10001A9A8(&qword_1010F2C10);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for URLComponents(0);
  v4 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v17 = &qword_1010FBA40;
    v18 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0);
    v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1, v33) != 1)
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v28 = v32;
      v27(v32, v3, v19);
      v29 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 7037793;
      v30._object = (void *)0xE300000000000000;
      String.append(_:)(v30);
      v29(v35, 0);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v17 = &qword_1010F2C10;
    v18 = (uint64_t)v3;
  }
  sub_100004048(v18, v17);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

uint64_t sub_1008EF85C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  _OWORD v23[7];
  uint64_t v24;
  char v25;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110C8D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1008F0E1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsPushAckRequestBody.CodingKeys, &type metadata for SecureLocationsPushAckRequestBody.CodingKeys, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v23[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v23, v5);
  if (!v2)
  {
    v13 = v3[1];
    LOBYTE(v23[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v23, v5);
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v23[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v23, v5);
    *(_QWORD *)&v23[0] = v3[4];
    v25 = 3;
    v16 = sub_10001A9A8(&qword_1010FEEA0);
    v17 = sub_1008F0E60();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v25, v5, v16, v17);
    v18 = *(_OWORD *)(v3 + 15);
    v23[4] = *(_OWORD *)(v3 + 13);
    v23[5] = v18;
    v23[6] = *(_OWORD *)(v3 + 17);
    v24 = v3[19];
    v19 = *(_OWORD *)(v3 + 7);
    v23[0] = *(_OWORD *)(v3 + 5);
    v23[1] = v19;
    v20 = *(_OWORD *)(v3 + 11);
    v23[2] = *(_OWORD *)(v3 + 9);
    v23[3] = v20;
    v25 = 4;
    v21 = sub_100365518();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v25, v5, &type metadata for SecureLocationsClientContext, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1008EFA50(char *a1)
{
  sub_100510F90(*a1);
}

void sub_1008EFA5C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1008EFAAC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 29556, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_1008EFB2C()
{
  __asm { BR              X10 }
}

uint64_t sub_1008EFB6C(uint64_t a1)
{
  String.hash(into:)(a1, 29556, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

void sub_1008EFBD8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1008EFC24()
{
  uint64_t v1;

  String.hash(into:)(&v1, 29556, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1008EFCA4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1008F0CFC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1008EFCD0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1008EFD04 + 4 * byte_100E545CF[*v0]))();
}

void sub_1008EFD04(_QWORD *a1@<X8>)
{
  *a1 = 29556;
  a1[1] = 0xE200000000000000;
}

void sub_1008EFD14(_QWORD *a1@<X8>)
{
  *a1 = 0x6449646D63;
  a1[1] = 0xE500000000000000;
}

void sub_1008EFD2C(_QWORD *a1@<X8>)
{
  *a1 = 0x737574617473;
  a1[1] = 0xE600000000000000;
}

void sub_1008EFD44(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "clientContext");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1008EFD6C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1008EFDA0 + 4 * byte_100E545D4[*v0]))(0x54646E6553706174, 0xE900000000000053);
}

uint64_t sub_1008EFDA0()
{
  return 29556;
}

uint64_t sub_1008EFDAC()
{
  return 0x6449646D63;
}

uint64_t sub_1008EFDC0()
{
  return 0x737574617473;
}

uint64_t sub_1008EFDD4()
{
  return 0x6F43746E65696C63;
}

unint64_t sub_1008EFDF8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1008F0CFC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1008EFE1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008F0E1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008EFE44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008F0E1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008EFE6C(_QWORD *a1)
{
  return sub_1008EF85C(a1);
}

uint64_t sub_1008EFE80(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_10001A9A8(&qword_10110C818);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_1008F008C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsPushAckStatus.CodingKeys, &type metadata for SecureLocationsPushAckStatus.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_10001A9A8(&qword_1010F9F48);
    v16 = sub_1008F00D0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1008EFFCC()
{
  _BYTE *v0;

  if (*v0)
    return 0x73726F727265;
  else
    return 1682533734;
}

uint64_t sub_1008EFFFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008F0D44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008F0020(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008F008C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008F0048(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008F008C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008F0070(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1008EFE80(a1, *v1, v1[1], v1[2]);
}

unint64_t sub_1008F008C()
{
  unint64_t result;

  result = qword_10110C820;
  if (!qword_10110C820)
  {
    result = swift_getWitnessTable("5h$", &type metadata for SecureLocationsPushAckStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C820);
  }
  return result;
}

unint64_t sub_1008F00D0()
{
  unint64_t result;
  uint64_t v1;
  void *v2;

  result = qword_1010FDED8;
  if (!qword_1010FDED8)
  {
    v1 = sub_10001F784(&qword_1010F9F48);
    v2 = &protocol witness table for String;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> Set<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FDED8);
  }
  return result;
}

id sub_1008F012C(uint64_t a1)
{
  unint64_t v2;
  id result;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  char v11;
  uint64_t v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  _OWORD v20[11];
  unint64_t v21;

  v2 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  v21 = v2;
  result = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "serverFriendlyDescription");

    if (v5)
    {
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
      *(_QWORD *)&v20[0] = v2;
      v21 = 0x8000000000000000;
      sub_100109D28(v6, v8, 0xD000000000000011, 0x8000000100ECA2C0, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100102BE0(0xD000000000000011, 0x8000000100ECA2C0);
      swift_bridgeObjectRelease();
      v2 = v21;
    }
    v10 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_100109D28(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v10);
    swift_bridgeObjectRelease();
    v11 = swift_isUniquelyReferenced_nonNull_native(v2);
    *(_QWORD *)&v20[0] = v2;
    sub_100109D28(0xD000000000000010, 0x8000000100ECC390, 0x2D746E65746E6F43, 0xEC00000065707954, v11);
    v21 = v2;
    swift_bridgeObjectRelease();
    v12 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    JSONEncoder.init()(v13);
    v14 = *(_OWORD *)(a1 + 144);
    v20[8] = *(_OWORD *)(a1 + 128);
    v20[9] = v14;
    v20[10] = *(_OWORD *)(a1 + 160);
    v15 = *(_OWORD *)(a1 + 80);
    v20[4] = *(_OWORD *)(a1 + 64);
    v20[5] = v15;
    v16 = *(_OWORD *)(a1 + 112);
    v20[6] = *(_OWORD *)(a1 + 96);
    v20[7] = v16;
    v17 = *(_OWORD *)(a1 + 16);
    v20[0] = *(_OWORD *)a1;
    v20[1] = v17;
    v18 = *(_OWORD *)(a1 + 48);
    v20[2] = *(_OWORD *)(a1 + 32);
    v20[3] = v18;
    v19 = sub_1008F047C();
    dispatch thunk of JSONEncoder.encode<A>(_:)(v20, &type metadata for SecureLocationsPushAckRequestBody, v19);
    swift_release();
    sub_1008F04C0((_QWORD *)a1);
    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1008F047C()
{
  unint64_t result;

  result = qword_10110C828;
  if (!qword_10110C828)
  {
    result = swift_getWitnessTable(byte_100E547A4, &type metadata for SecureLocationsPushAckRequestBody);
    atomic_store(result, (unint64_t *)&qword_10110C828);
  }
  return result;
}

_QWORD *sub_1008F04C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[16];
  v9 = a1[19];
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t destroy for SecureLocationsPushAckRequestBody(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[19]);
  return swift_bridgeObjectRelease(a1[21]);
}

uint64_t initializeWithCopy for SecureLocationsPushAckRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v9 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v8;
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v13 = *(_QWORD *)(a2 + 128);
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 136) = v12;
  v15 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v15;
  *(_QWORD *)(a1 + 160) = v14;
  v16 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v16;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsPushAckRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v16;
  LOBYTE(v16) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = v16;
  v17 = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v19;
  v20 = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v22 = *(_QWORD *)(a2 + 168);
  v23 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

__n128 initializeWithTake for SecureLocationsPushAckRequestBody(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for SecureLocationsPushAckRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  v9 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v10 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v11 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 168);
  v13 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsPushAckRequestBody(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPushAckRequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckRequestBody()
{
  return &type metadata for SecureLocationsPushAckRequestBody;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckRequest()
{
  return &type metadata for SecureLocationsPushAckRequest;
}

uint64_t sub_1008F0A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008F0A20);
}

uint64_t sub_1008F0A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for URLComponents(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1008F0A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008F0AA0);
}

uint64_t sub_1008F0AA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for URLComponents(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecureLocationsPushAckEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_10110C888;
  if (!qword_10110C888)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsPushAckEndpoint);
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPushAckStatus.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1008F0BA4 + 4 * byte_100E545DE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1008F0BD8 + 4 * byte_100E545D9[v4]))();
}

uint64_t sub_1008F0BD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F0BE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008F0BE8);
  return result;
}

uint64_t sub_1008F0BF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008F0BFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1008F0C00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F0C08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckStatus.CodingKeys()
{
  return &type metadata for SecureLocationsPushAckStatus.CodingKeys;
}

unint64_t sub_1008F0C28()
{
  unint64_t result;

  result = qword_10110C8C0;
  if (!qword_10110C8C0)
  {
    result = swift_getWitnessTable(byte_100E5474C, &type metadata for SecureLocationsPushAckStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C8C0);
  }
  return result;
}

unint64_t sub_1008F0C70()
{
  unint64_t result;

  result = qword_10110C8C8;
  if (!qword_10110C8C8)
  {
    result = swift_getWitnessTable(byte_100E546BC, &type metadata for SecureLocationsPushAckStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C8C8);
  }
  return result;
}

unint64_t sub_1008F0CB8()
{
  unint64_t result;

  result = qword_10110C8D0;
  if (!qword_10110C8D0)
  {
    result = swift_getWitnessTable(byte_100E546E4, &type metadata for SecureLocationsPushAckStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C8D0);
  }
  return result;
}

unint64_t sub_1008F0CFC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D7F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_1008F0D44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1682533734 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1682533734, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x73726F727265 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73726F727265, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1008F0E1C()
{
  unint64_t result;

  result = qword_10110C8E0;
  if (!qword_10110C8E0)
  {
    result = swift_getWitnessTable(byte_100E54964, &type metadata for SecureLocationsPushAckRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C8E0);
  }
  return result;
}

unint64_t sub_1008F0E60()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_10110C8E8;
  if (!qword_10110C8E8)
  {
    v1 = sub_10001F784(&qword_1010FEEA0);
    v2 = sub_1008F0EC4();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_10110C8E8);
  }
  return result;
}

unint64_t sub_1008F0EC4()
{
  unint64_t result;

  result = qword_10110C8F0;
  if (!qword_10110C8F0)
  {
    result = swift_getWitnessTable(byte_100E54610, &type metadata for SecureLocationsPushAckStatus);
    atomic_store(result, (unint64_t *)&qword_10110C8F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPushAckRequestBody.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1008F0F54 + 4 * byte_100E545E8[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1008F0F88 + 4 * byte_100E545E3[v4]))();
}

uint64_t sub_1008F0F88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F0F90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008F0F98);
  return result;
}

uint64_t sub_1008F0FA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008F0FACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1008F0FB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F0FB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckRequestBody.CodingKeys()
{
  return &type metadata for SecureLocationsPushAckRequestBody.CodingKeys;
}

unint64_t sub_1008F0FD8()
{
  unint64_t result;

  result = qword_10110C8F8;
  if (!qword_10110C8F8)
  {
    result = swift_getWitnessTable(byte_100E5493C, &type metadata for SecureLocationsPushAckRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C8F8);
  }
  return result;
}

unint64_t sub_1008F1020()
{
  unint64_t result;

  result = qword_10110C900;
  if (!qword_10110C900)
  {
    result = swift_getWitnessTable("5g$", &type metadata for SecureLocationsPushAckRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C900);
  }
  return result;
}

unint64_t sub_1008F1068()
{
  unint64_t result;

  result = qword_10110C908;
  if (!qword_10110C908)
  {
    result = swift_getWitnessTable(byte_100E5489C, &type metadata for SecureLocationsPushAckRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C908);
  }
  return result;
}

char *sub_1008F10AC(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v42 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v42 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for MACAddress(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v12(&a1[a3[6]], &a2[a3[6]], v11);
    v13 = a3[7];
    v14 = a3[8];
    v15 = &a1[v13];
    v16 = &a2[v13];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = &a1[v14];
    v19 = &a2[v14];
    v20 = type metadata accessor for Date(0);
    v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
    v22 = swift_bridgeObjectRetain(v17);
    v21(v18, v19, v20, v22);
    v23 = a3[9];
    v24 = (uint64_t *)&a1[v23];
    v25 = (uint64_t *)&a2[v23];
    v26 = *v25;
    v27 = v25[1];
    sub_10001BBBC(*v25, v27);
    *v24 = v26;
    v24[1] = v27;
    v28 = a3[10];
    v29 = (uint64_t *)&a1[v28];
    v30 = &a2[v28];
    v31 = *(_QWORD *)&a2[v28];
    v32 = *(_QWORD *)&a2[v28 + 8];
    sub_10001BBBC(v31, v32);
    *v29 = v31;
    v29[1] = v32;
    v33 = *((_QWORD *)v30 + 2);
    v34 = *((_QWORD *)v30 + 3);
    sub_10001BBBC(v33, v34);
    v29[2] = v33;
    v29[3] = v34;
    v35 = *((_QWORD *)v30 + 4);
    v36 = *((_QWORD *)v30 + 5);
    sub_10001BBBC(v35, v36);
    v29[4] = v35;
    v29[5] = v36;
    v37 = a3[11];
    v38 = (uint64_t *)&a1[v37];
    v39 = (uint64_t *)&a2[v37];
    v40 = *v39;
    v41 = v39[1];
    sub_10001BBBC(*v39, v41);
    *v38 = v40;
    v38[1] = v41;
  }
  return a1;
}

uint64_t sub_1008F124C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for MACAddress(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + a2[6], v6);
  swift_bridgeObjectRelease();
  v8 = a1 + a2[8];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  sub_10001BC14(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
  v10 = a1 + a2[10];
  sub_10001BC14(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
  sub_10001BC14(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
  sub_10001BC14(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40));
  return sub_10001BC14(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
}

uint64_t sub_1008F1340(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v11(a1 + a3[6], a2 + a3[6], v10);
  v12 = a3[7];
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a1 + v13;
  v18 = a2 + v13;
  v19 = type metadata accessor for Date(0);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
  v21 = swift_bridgeObjectRetain(v16);
  v20(v17, v18, v19, v21);
  v22 = a3[9];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_10001BBBC(*v24, v26);
  *v23 = v25;
  v23[1] = v26;
  v27 = a3[10];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = *(_QWORD *)(a2 + v27);
  v31 = *(_QWORD *)(a2 + v27 + 8);
  sub_10001BBBC(v30, v31);
  *v28 = v30;
  v28[1] = v31;
  v32 = v29[2];
  v33 = v29[3];
  sub_10001BBBC(v32, v33);
  v28[2] = v32;
  v28[3] = v33;
  v34 = v29[4];
  v35 = v29[5];
  sub_10001BBBC(v34, v35);
  v28[4] = v34;
  v28[5] = v35;
  v36 = a3[11];
  v37 = (uint64_t *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v39 = *v38;
  v40 = v38[1];
  sub_10001BBBC(*v38, v40);
  *v37 = v39;
  v37[1] = v40;
  return a1;
}

uint64_t sub_1008F14B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  v11(a1 + a3[6], a2 + a3[6], v10);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[9];
  v21 = (uint64_t *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  v24 = v22[1];
  sub_10001BBBC(*v22, v24);
  v25 = *v21;
  v26 = v21[1];
  *v21 = v23;
  v21[1] = v24;
  sub_10001BC14(v25, v26);
  v27 = a3[10];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = *(_QWORD *)(a2 + v27);
  v31 = *(_QWORD *)(a2 + v27 + 8);
  sub_10001BBBC(v30, v31);
  v32 = *v28;
  v33 = v28[1];
  *v28 = v30;
  v28[1] = v31;
  sub_10001BC14(v32, v33);
  v34 = v29[2];
  v35 = v29[3];
  sub_10001BBBC(v34, v35);
  v36 = v28[2];
  v37 = v28[3];
  v28[2] = v34;
  v28[3] = v35;
  sub_10001BC14(v36, v37);
  v38 = v29[4];
  v39 = v29[5];
  sub_10001BBBC(v38, v39);
  v40 = v28[4];
  v41 = v28[5];
  v28[4] = v38;
  v28[5] = v39;
  sub_10001BC14(v40, v41);
  v42 = a3[11];
  v43 = (uint64_t *)(a1 + v42);
  v44 = (uint64_t *)(a2 + v42);
  v45 = *v44;
  v46 = v44[1];
  sub_10001BBBC(*v44, v46);
  v47 = *v43;
  v48 = v43[1];
  *v43 = v45;
  v43[1] = v46;
  sub_10001BC14(v47, v48);
  return a1;
}

uint64_t sub_1008F1660(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(a1 + a3[6], a2 + a3[6], v10);
  v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v17 = (_OWORD *)(a1 + v16);
  v18 = (__int128 *)(a2 + v16);
  v19 = v18[2];
  v20 = *v18;
  v17[1] = v18[1];
  v17[2] = v19;
  *v17 = v20;
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1008F1768(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v11(a1 + a3[6], a2 + a3[6], v10);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = a3[9];
  v22 = *(_QWORD *)(a1 + v21);
  v23 = *(_QWORD *)(a1 + v21 + 8);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  sub_10001BC14(v22, v23);
  v24 = a3[10];
  v25 = (_QWORD *)(a1 + v24);
  v26 = a2 + v24;
  v27 = *(_QWORD *)(a1 + v24);
  v28 = *(_QWORD *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  sub_10001BC14(v27, v28);
  v29 = v25[2];
  v30 = v25[3];
  *((_OWORD *)v25 + 1) = *(_OWORD *)(v26 + 16);
  sub_10001BC14(v29, v30);
  v31 = v25[4];
  v32 = v25[5];
  *((_OWORD *)v25 + 2) = *(_OWORD *)(v26 + 32);
  sub_10001BC14(v31, v32);
  v33 = a3[11];
  v34 = *(_QWORD *)(a1 + v33);
  v35 = *(_QWORD *)(a1 + v33 + 8);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  sub_10001BC14(v34, v35);
  return a1;
}

uint64_t sub_1008F18C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008F18CC);
}

uint64_t sub_1008F18CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for MACAddress(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[8];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[7] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1008F199C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008F19A8);
}

uint64_t sub_1008F19A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for MACAddress(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[7] + 8) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for Date(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for StandaloneBeacon(uint64_t a1)
{
  uint64_t result;

  result = qword_10110C968;
  if (!qword_10110C968)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StandaloneBeacon);
  return result;
}

uint64_t sub_1008F1AB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for MACAddress(319);
    if (v4 <= 0x3F)
    {
      v7 = *(_QWORD *)(result - 8) + 64;
      v8 = v7;
      v9 = &unk_100E549F8;
      result = type metadata accessor for Date(319);
      if (v5 <= 0x3F)
      {
        v10 = *(_QWORD *)(result - 8) + 64;
        v11 = &unk_100E54A10;
        v12 = &unk_100E54A28;
        v13 = &unk_100E54A10;
        swift_initStructMetadata(a1, 256, 8, &v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1008F1B70()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;

  _StringGuts.grow(_:)(75);
  v1._countAndFlagsBits = 0x203A64693CLL;
  v1._object = (void *)0xE500000000000000;
  String.append(_:)(v1);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x7373657264646120;
  v5._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  v6 = type metadata accessor for StandaloneBeacon(0);
  v7 = type metadata accessor for MACAddress(0);
  v8 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000100EEAB40;
  v10._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x203A4E5320;
  v12._object = (void *)0xE500000000000000;
  String.append(_:)(v12);
  v13 = (uint64_t *)(v0 + *(int *)(v6 + 28));
  v14 = *v13;
  v15 = (void *)v13[1];
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x746375646F727020;
  v17._object = (void *)0xEE00203A61746144;
  String.append(_:)(v17);
  v18 = (uint64_t *)(v0 + *(int *)(v6 + 36));
  v19 = *v18;
  v20 = v18[1];
  sub_10001BBBC(*v18, v20);
  v21._countAndFlagsBits = sub_1001EDC48(v19, v20);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  sub_10001BC14(v19, v20);
  v22._countAndFlagsBits = 0x7461447269617020;
  v22._object = (void *)0xEB00000000203A65;
  String.append(_:)(v22);
  v23 = type metadata accessor for Date(0);
  v24 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 62;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  return 0;
}

uint64_t sub_1008F1E2C()
{
  return sub_100006204(&qword_10110C9B8, type metadata accessor for StandaloneBeacon, (uint64_t)&unk_100E54A40);
}

uint64_t sub_1008F1E58()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B78C8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B78C8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x4C64656863746566, 0xEF6E6F697461636FLL);
}

uint64_t sub_1008F1ED8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  char v21;

  v19 = a4;
  v8 = sub_10001A9A8(&qword_10110C9D8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_1008F2AA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchedLocation.CodingKeys, &type metadata for FetchedLocation.CodingKeys, v14, v12, v13);
  v20[0] = a2;
  v20[1] = a3;
  v21 = 0;
  v15 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v8, &type metadata for Data, v15);
  if (!v4)
  {
    BYTE4(v20[0]) = BYTE4(v19);
    LODWORD(v20[0]) = v19;
    v21 = 1;
    v16 = sub_1008F2B28();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v21, v8, &type metadata for AdvInfo, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1008F2030()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F666E49766461;
  else
    return 0x6E6F697461636F6CLL;
}

uint64_t sub_1008F2074@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1008F27D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1008F2098(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008F2AA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1008F20C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1008F2AA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1008F20E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1008F28DC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 20) = BYTE4(v6);
  }
  return result;
}

uint64_t sub_1008F211C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1008F1ED8(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32));
}

_QWORD *sub_1008F2140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v30;
  uint64_t v31;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a1 + 16);
    if (v4 == v5)
    {
      if (!v4)
        return _swiftEmptyArrayStorage;
      v6 = (uint64_t *)(a2 + 32);
      v7 = (unint64_t *)(a1 + 40);
      v8 = _swiftEmptyArrayStorage;
      do
      {
        v10 = *(v7 - 1);
        v9 = *v7;
        v11 = *v6;
        v12 = *(_QWORD *)(*v6 + 16);
        sub_10001BBBC(v10, *v7);
        sub_10001BBBC(v10, v9);
        if (v12)
        {
          sub_10001BBBC(v10, v9);
          swift_bridgeObjectRetain(v11);
          v14 = sub_100ACE41C(v13);
          sub_10001BC14(v10, v9);
        }
        else
        {
          v14 = 3;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
          v8 = sub_1007CA69C(0, v8[2] + 1, 1, v8);
        v16 = v8[2];
        v15 = v8[3];
        if (v16 >= v15 >> 1)
          v8 = sub_1007CA69C((_QWORD *)(v15 > 1), v16 + 1, 1, v8);
        v7 += 2;
        v8[2] = v16 + 1;
        v17 = &v8[3 * v16];
        v17[4] = v10;
        v17[5] = v9;
        *((_BYTE *)v17 + 52) = BYTE4(v14);
        *((_DWORD *)v17 + 12) = v14;
        sub_10001BC14(v10, v9);
        ++v6;
        --v4;
      }
      while (v4);
      return v8;
    }
    if (qword_1010EA028 != -1)
      swift_once(&qword_1010EA028, sub_1008F1E58);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_1011B78C8);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      *(_DWORD *)v22 = 134349312;
      v30 = (_QWORD *)v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2050;
      v30 = *(_QWORD **)(a2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Ambiguous hint response from server!\npayload %{public}ld != tlvPackets %{public}ld", (uint8_t *)v22, 0x16u);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
  }
  v8 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v30 = _swiftEmptyArrayStorage;
    sub_10009B4CC(0, v5, 0);
    v8 = v30;
    v23 = (unint64_t *)(a1 + 40);
    do
    {
      v24 = *(v23 - 1);
      v25 = *v23;
      sub_10001BBBC(v24, *v23);
      v30 = v8;
      v27 = v8[2];
      v26 = v8[3];
      if (v27 >= v26 >> 1)
      {
        sub_10009B4CC(v26 > 1, v27 + 1, 1);
        v8 = v30;
      }
      v23 += 2;
      v8[2] = v27 + 1;
      v28 = &v8[3 * v27];
      v28[4] = v24;
      v28[5] = v25;
      *((_BYTE *)v28 + 52) = 0;
      *((_DWORD *)v28 + 12) = 3;
      --v5;
    }
    while (v5);
  }
  return v8;
}

uint64_t sub_1008F2610(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t assignWithCopy for FetchedLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v8;
  return a1;
}

__n128 initializeWithTake for FetchedLocation(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FetchedLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchedLocation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchedLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchedLocation()
{
  return &type metadata for FetchedLocation;
}

uint64_t sub_1008F27D4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000061746144)
  {
    v5 = 0xEC00000061746144;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F666E49766461 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E49766461, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1008F28DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;

  v3 = sub_10001A9A8(&qword_10110C9C0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1008F2AA0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FetchedLocation.CodingKeys, &type metadata for FetchedLocation.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v15 = 0;
    v10 = sub_100036994();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Data, &v15, v3, &type metadata for Data, v10);
    v7 = v16;
    v12 = v17;
    v15 = 1;
    sub_10001BBBC(v16, v17);
    v13 = sub_1008F2AE4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for AdvInfo, &v15, v3, &type metadata for AdvInfo, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    sub_10001BC14(v7, v12);
  }
  return v7;
}

unint64_t sub_1008F2AA0()
{
  unint64_t result;

  result = qword_10110C9C8;
  if (!qword_10110C9C8)
  {
    result = swift_getWitnessTable(byte_100E54C08, &type metadata for FetchedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C9C8);
  }
  return result;
}

unint64_t sub_1008F2AE4()
{
  unint64_t result;

  result = qword_10110C9D0;
  if (!qword_10110C9D0)
  {
    result = swift_getWitnessTable(byte_100E2CCAC, &type metadata for AdvInfo);
    atomic_store(result, (unint64_t *)&qword_10110C9D0);
  }
  return result;
}

unint64_t sub_1008F2B28()
{
  unint64_t result;

  result = qword_10110C9E0;
  if (!qword_10110C9E0)
  {
    result = swift_getWitnessTable(byte_100E2CC84, &type metadata for AdvInfo);
    atomic_store(result, (unint64_t *)&qword_10110C9E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchedLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1008F2BB8 + 4 * byte_100E54ADD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1008F2BEC + 4 * byte_100E54AD8[v4]))();
}

uint64_t sub_1008F2BEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F2BF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008F2BFCLL);
  return result;
}

uint64_t sub_1008F2C08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008F2C10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1008F2C14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F2C1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchedLocation.CodingKeys()
{
  return &type metadata for FetchedLocation.CodingKeys;
}

unint64_t sub_1008F2C3C()
{
  unint64_t result;

  result = qword_10110C9E8;
  if (!qword_10110C9E8)
  {
    result = swift_getWitnessTable(byte_100E54BE0, &type metadata for FetchedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C9E8);
  }
  return result;
}

unint64_t sub_1008F2C84()
{
  unint64_t result;

  result = qword_10110C9F0;
  if (!qword_10110C9F0)
  {
    result = swift_getWitnessTable(byte_100E54B50, &type metadata for FetchedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C9F0);
  }
  return result;
}

unint64_t sub_1008F2CCC()
{
  unint64_t result;

  result = qword_10110C9F8;
  if (!qword_10110C9F8)
  {
    result = swift_getWitnessTable(byte_100E54B78, &type metadata for FetchedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110C9F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryBatteryLevelResponsePayload()
{
  return &type metadata for AccessoryBatteryLevelResponsePayload;
}

unint64_t sub_1008F2D20(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1008F2D4C();
  result = sub_1003ECC18();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1008F2D4C()
{
  unint64_t result;

  result = qword_10110CA00;
  if (!qword_10110CA00)
  {
    result = swift_getWitnessTable(byte_100E54C88, &type metadata for AccessoryBatteryLevelResponsePayload);
    atomic_store(result, &qword_10110CA00);
  }
  return result;
}

unint64_t sub_1008F2D90(char a1)
{
  Swift::String v1;
  void *object;
  Swift::String v3;
  unint64_t v5;

  if (a1)
  {
    if (a1 == 1)
    {
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease(0xE000000000000000);
      v5 = 0xD000000000000014;
    }
    else
    {
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease(0xE000000000000000);
      v5 = 0xD000000000000021;
    }
  }
  else
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease(0xE000000000000000);
    v5 = 0xD00000000000001ELL;
  }
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v5;
}

BOOL sub_1008F2ECC(char *a1, char *a2)
{
  return qword_100E54F90[*a1] == qword_100E54F90[*a2];
}

Swift::Int sub_1008F2EF0()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E54F90[v1]);
  return Hasher._finalize()();
}

void sub_1008F2F3C()
{
  char *v0;

  Hasher._combine(_:)(qword_100E54F90[*v0]);
}

Swift::Int sub_1008F2F70()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E54F90[v1]);
  return Hasher._finalize()();
}

uint64_t *sub_1008F2FB8@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;

  v2 = *result;
  if (*result == 200)
    v3 = 0;
  else
    v3 = 3;
  if (v2 == 204)
    v4 = 1;
  else
    v4 = v3;
  if (v2 == 409)
    v5 = 2;
  else
    v5 = v4;
  *a2 = v5;
  return result;
}

void sub_1008F2FE8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100E54F90[*v1];
}

unint64_t sub_1008F3000()
{
  char *v0;

  return sub_1008F2D90(*v0);
}

void sub_1008F3008(char a1)
{
  __asm { BR              X10 }
}

unint64_t sub_1008F3034()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0xD000000000000012;
}

BOOL sub_1008F321C(char *a1, char *a2)
{
  return qword_100E54FA8[*a1] == qword_100E54FA8[*a2];
}

Swift::Int sub_1008F3240()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E54FA8[v1]);
  return Hasher._finalize()();
}

void sub_1008F328C()
{
  char *v0;

  Hasher._combine(_:)(qword_100E54FA8[*v0]);
}

Swift::Int sub_1008F32C0()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E54FA8[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1008F3308@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1008F44F4(*a1);
  *a2 = result;
  return result;
}

void sub_1008F3330(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100E54FA8[*v1];
}

void sub_1008F3348()
{
  char *v0;

  sub_1008F3008(*v0);
}

uint64_t sub_1008F3350(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[10] = a1;
  v2[11] = v1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for AccountCheckEndpoint(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v4);
  v2[14] = swift_task_alloc(v4);
  return swift_task_switch(sub_1008F33DC, 0, 0);
}

uint64_t sub_1008F33DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 120) = sub_10001A9E8(v2, (uint64_t)qword_1011B7DF8);
  sub_100059DE8(v1);
  v3 = sub_100059DE8(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(__int128 **)(v0 + 80);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v31 = v29;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 64) = sub_100016940(0xD000000000000013, 0x8000000100EEAC60, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v9 = *v7;
    v10 = v7[1];
    *(_OWORD *)(v0 + 41) = *(__int128 *)((char *)v7 + 25);
    *(_OWORD *)(v0 + 16) = v9;
    *(_OWORD *)(v0 + 32) = v10;
    sub_100059DE8((uint64_t)v7);
    v11 = String.init<A>(describing:)(v0 + 16, &type metadata for AccountCheckData);
    *(_QWORD *)(v0 + 72) = sub_100016940(v11, v12, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    sub_1000ADA04((uint64_t)v7);
    sub_1000ADA04((uint64_t)v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    sub_1000ADA04(*(_QWORD *)(v0 + 80));
    sub_1000ADA04((uint64_t)v7);
  }

  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 80);
  v18 = enum case for FMNAccountType.w2Accessory(_:);
  v19 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v14, v18, v19);
  v20 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v15, 1, 1, v21);
  v22 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v15);
  v23 = type metadata accessor for ServerInteractionController(0);
  v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  sub_1008F44B0(v14, v13);
  *(_QWORD *)(v0 + 128) = sub_10041D9B4(v13, v22, v24);
  v25 = *(_QWORD *)(v16 + 16);
  sub_100059DE8(v17);
  v26 = unk_10111A504;
  v30 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111A500 + dword_10111A500);
  swift_retain();
  v27 = (_QWORD *)swift_task_alloc(v26);
  *(_QWORD *)(v0 + 136) = v27;
  *v27 = v0;
  v27[1] = sub_1008F371C;
  return v30(*(_QWORD *)(v0 + 80), v25);
}

uint64_t sub_1008F371C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 136);
  v4[18] = a1;
  v4[19] = a2;
  v4[20] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1008F377C, 0, 0);
}

uint64_t sub_1008F377C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(v1 + 144);
  if (v2)
  {
    v4 = *(_QWORD *)(v1 + 152);
    v3 = *(_QWORD *)(v1 + 160);
    v5 = *(_QWORD *)(v1 + 128);
    v6 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v1 + 168) = v6;
    v6[2] = v5;
    v6[3] = v2;
    v6[4] = v4;
    v6[5] = v3;
    v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v1 + 176) = v7;
    *v7 = v1;
    v7[1] = sub_1008F3938;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 57, 0, 0, 0xD000000000000013, 0x8000000100EEAC60, sub_1008F45D8, v6, &type metadata for AccountCheckResult.ServerStatus);
  }
  else
  {
    v9 = Logger.logObject.getter(a1);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Could not create pairing lock request", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
    v12 = *(_QWORD *)(v1 + 112);

    v13 = sub_1008F4558();
    v14 = swift_allocError(&type metadata for AccessoryPairingValidator.Error, v13, 0, 0);
    *v15 = 2;
    swift_willThrow(v14);
    swift_release();
    sub_1008F459C(v12);
    v16 = *(_QWORD *)(v1 + 104);
    v17 = *(_QWORD *)(v1 + 96);
    swift_task_dealloc(*(_QWORD *)(v1 + 112));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1008F3938()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(*(_QWORD *)(v2 + 168));
  if (v0)
    v4 = sub_1008F3A30;
  else
    v4 = sub_1008F39A4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1008F39A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  swift_release();
  sub_100153D94(v3, v1, v2);
  sub_1008F459C(v4);
  v7 = *(unsigned __int8 *)(v0 + 57);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_1008F3A30()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  swift_release();
  sub_100153D94(v3, v1, v2);
  sub_1008F459C(v4);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008F3AAC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v10 = sub_10001A9A8(&qword_10110CA18);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a3);
  sub_10001BBBC(a4, a5);
  sub_10034F600(a3, a4, a5, 0, a2);
  swift_bridgeObjectRelease();
  sub_10001BC14(a4, a5);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v14(v13, a1, v10);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = v15 | 7;
  v18 = swift_allocObject(&unk_10109B358, v16 + v12, v15 | 7);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v19(v18 + v16, v13, v10);
  Future.addFailure(block:)(sub_1008F45E8, v18);
  swift_release();
  swift_release();
  v14(v13, v23, v10);
  v20 = swift_allocObject(&unk_10109B380, v16 + v12, v17);
  v19(v20 + v16, v13, v10);
  Future.addSuccess(block:)(sub_1008F462C, v20);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1008F3C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7DF8);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(a1);
    v8 = _swift_stdlib_bridgeErrorToNSError(a1);
    v15 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error in verify pairing request. %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v10 = sub_1008F4558();
  v11 = swift_allocError(&type metadata for AccessoryPairingValidator.Error, v10, 0, 0);
  *v12 = 1;
  v15 = v11;
  v13 = sub_10001A9A8(&qword_10110CA18);
  return CheckedContinuation.resume(throwing:)(&v15, v13);
}

uint64_t sub_1008F3E50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v69 = a2;
  v3 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v68 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v64 - v10;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7DF8);
  v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14 = v67(v11, a1, v6);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(12, -1);
    v66 = a1;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v64 = v5;
    v20 = v19;
    v71 = v19;
    v65 = (void (*)(char *, uint64_t))v13;
    *(_DWORD *)v18 = 136446210;
    v21 = sub_1008F466C();
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v6, v21);
    v70 = sub_100016940(v22, v23, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v11, v6);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Account check response: %{public}s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v25 = v20;
    v5 = v64;
    swift_slowDealloc(v25, -1, -1);
    v26 = v18;
    a1 = v66;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v11, v6);
  }

  v28 = FMNServerInteractionController.FMNResponseFields.data.getter(v27);
  v30 = v29;
  static String.Encoding.utf8.getter(v28);
  v31 = String.init(data:encoding:)(v28, v30, v5);
  v33 = v32;
  v34 = sub_10001BC14(v28, v30);
  if (v33)
  {
    swift_bridgeObjectRetain(v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.info.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v66 = v6;
      v40 = v39;
      v71 = v39;
      v65 = v24;
      *(_DWORD *)v38 = 136315138;
      swift_bridgeObjectRetain(v33);
      v70 = sub_100016940(v31, v33, &v71);
      v24 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease_n(v33, 3);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Account check response data: %s", v38, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      v41 = v40;
      v6 = v66;
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

      v34 = swift_bridgeObjectRelease_n(v33, 2);
    }
  }
  v42 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v34);
  switch(v42)
  {
    case 200:
      v43 = 0;
      goto LABEL_16;
    case 409:
      v43 = 2;
      goto LABEL_16;
    case 204:
      v43 = 1;
LABEL_16:
      v44 = Logger.logObject.getter(v42);
      v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v71 = v47;
        *(_DWORD *)v46 = 136446210;
        v48 = sub_1008F2D90(v43);
        v70 = sub_100016940(v48, v49, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v46 + 4, v46 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "AccountCheckResult: %{public}s", v46, 0xCu);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);
      }

      LOBYTE(v71) = v43;
      v50 = sub_10001A9A8(&qword_10110CA18);
      return CheckedContinuation.resume(returning:)(&v71, v50);
  }
  v52 = v68;
  v53 = v67(v68, a1, v6);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.error.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = v24;
    v57 = v6;
    v58 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v58 = 134217984;
    v59 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v58);
    v56(v52, v57);
    v71 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v58 + 4, v58 + 12);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Invalid AccountCheckResult %ld!", v58, 0xCu);
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    v24(v52, v6);
  }

  v60 = sub_1008F4558();
  v61 = swift_allocError(&type metadata for AccessoryPairingValidator.Error, v60, 0, 0);
  *v62 = 2;
  v71 = v61;
  v63 = sub_10001A9A8(&qword_10110CA18);
  return CheckedContinuation.resume(throwing:)(&v71, v63);
}

uint64_t sub_1008F44B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccountCheckEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1008F44F4(uint64_t result)
{
  if (result > 199)
  {
    switch(result)
    {
      case 200:
        return 3;
      case 204:
        return 4;
      case 409:
        return 5;
    }
    return 6;
  }
  if (result == -1)
    return 0;
  if (result != 1 && result != 2)
    return 6;
  return result;
}

unint64_t sub_1008F4558()
{
  unint64_t result;

  result = qword_10110CA10;
  if (!qword_10110CA10)
  {
    result = swift_getWitnessTable(byte_100E30150, &type metadata for AccessoryPairingValidator.Error);
    atomic_store(result, (unint64_t *)&qword_10110CA10);
  }
  return result;
}

uint64_t sub_1008F459C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccountCheckEndpoint(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1008F45D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1008F3AAC(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1008F45E8(uint64_t a1)
{
  sub_10001A9A8(&qword_10110CA18);
  return sub_1008F3C60(a1);
}

uint64_t sub_1008F462C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_10110CA18) - 8) + 80);
  return sub_1008F3E50(a1, v1 + ((v3 + 16) & ~v3));
}

unint64_t sub_1008F466C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010FBA30;
  if (!qword_1010FBA30)
  {
    v1 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields, v1);
    atomic_store(result, (unint64_t *)&qword_1010FBA30);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LocalAccountCheckResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1008F4700 + 4 * byte_100E54D0B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1008F4734 + 4 * byte_100E54D06[v4]))();
}

uint64_t sub_1008F4734(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F473C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008F4744);
  return result;
}

uint64_t sub_1008F4750(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008F4758);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1008F475C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F4764(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalAccountCheckResult()
{
  return &type metadata for LocalAccountCheckResult;
}

uint64_t storeEnumTagSinglePayload for AccountCheckResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1008F47CC + 4 * byte_100E54D15[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1008F4800 + 4 * byte_100E54D10[v4]))();
}

uint64_t sub_1008F4800(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F4808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008F4810);
  return result;
}

uint64_t sub_1008F481C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008F4824);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1008F4828(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F4830(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountCheckResult()
{
  return &type metadata for AccountCheckResult;
}

uint64_t initializeWithCopy for AccountCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AccountCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  return a1;
}

uint64_t assignWithTake for AccountCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountCheckData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccountCheckData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountCheckData()
{
  return &type metadata for AccountCheckData;
}

uint64_t storeEnumTagSinglePayload for AccountCheckResult.ServerStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1008F4A78 + 4 * byte_100E54D1F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1008F4AAC + 4 * byte_100E54D1A[v4]))();
}

uint64_t sub_1008F4AAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F4AB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008F4ABCLL);
  return result;
}

uint64_t sub_1008F4AC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008F4AD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1008F4AD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008F4ADC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccountCheckResult.ServerStatus()
{
  return &type metadata for AccountCheckResult.ServerStatus;
}

unint64_t sub_1008F4AFC()
{
  unint64_t result;

  result = qword_10110CA20;
  if (!qword_10110CA20)
  {
    result = swift_getWitnessTable(byte_100E54E30, &type metadata for AccountCheckResult.ServerStatus);
    atomic_store(result, (unint64_t *)&qword_10110CA20);
  }
  return result;
}

unint64_t sub_1008F4B44()
{
  unint64_t result;

  result = qword_10110CA28;
  if (!qword_10110CA28)
  {
    result = swift_getWitnessTable("1g$", &type metadata for AccountCheckResult);
    atomic_store(result, (unint64_t *)&qword_10110CA28);
  }
  return result;
}

unint64_t sub_1008F4B8C()
{
  unint64_t result;

  result = qword_10110CA30;
  if (!qword_10110CA30)
  {
    result = swift_getWitnessTable(byte_100E54F60, &type metadata for LocalAccountCheckResult);
    atomic_store(result, (unint64_t *)&qword_10110CA30);
  }
  return result;
}

uint64_t sub_1008F4BD0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B78E0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B78E0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000015, 0x8000000100EEAD40);
}

uint64_t sub_1008F4C50()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  *(_QWORD *)(v1 + 56) = *v0;
  return swift_task_switch(sub_1008F4C70, v0, 0);
}

uint64_t sub_1008F4C70()
{
  uint64_t v0;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  *(_QWORD *)(v0 + 64) = qword_1011B71A8;
  return swift_task_switch(sub_1008F4CD8, 0, 0);
}

uint64_t sub_1008F4CD8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = sub_1008F4D4C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, *(_QWORD *)(v0 + 64), &type metadata for Configuration);
}

uint64_t sub_1008F4D4C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_release();
  return swift_task_switch(sub_1008F4DA8, 0, 0);
}

uint64_t sub_1008F4DA8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[6];
  v0[10] = v0[2];
  return swift_task_switch(sub_1008F4DC4, v1, 0);
}

uint64_t sub_1008F4DC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  if (qword_1010EA030 != -1)
    swift_once(&qword_1010EA030, sub_1008F4BD0);
  v1 = v0[10];
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B78E0);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[10];
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    *(_DWORD *)v8 = 134218240;
    sub_100C1BB3C(v7);
    v0[4] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2048;
    sub_100C1BB48(v7);
    v0[5] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Startup with interval = %f, minimum delay = %f", (uint8_t *)v8, 0x16u);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[10], 2);
  }

  v11 = v0[6];
  v12 = *(_QWORD *)(v11 + 144);
  v0[11] = v12;
  if (v12)
  {
    v13 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain_n(v12, 2);
    v14 = (_QWORD *)swift_task_alloc(v13);
    v0[12] = v14;
    *v14 = v0;
    v14[1] = sub_1008F5014;
    v15 = &type metadata for () + 1;
    v16 = sub_10050DA08;
    v17 = v12;
  }
  else
  {
    v18 = v0[7];
    v19 = swift_allocObject(&unk_10109B6B8, 32, 7);
    v0[13] = v19;
    *(_QWORD *)(v19 + 16) = v11;
    *(_QWORD *)(v19 + 24) = v18;
    v20 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v21 = (_QWORD *)swift_task_alloc(v20);
    v0[14] = v21;
    v15 = (_QWORD *)type metadata accessor for XPCActivity();
    *v21 = v0;
    v21[1] = sub_1008F50A4;
    v16 = sub_1008F8064;
    v14 = v0 + 3;
    v17 = v19;
  }
  return unsafeBlocking<A>(_:)(v14, v16, v17, v15);
}

uint64_t sub_1008F5014()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_1008F5074, v1, 0);
}

uint64_t sub_1008F5074()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008F50A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_release();
  return swift_task_switch(sub_1008F5104, v1, 0);
}

uint64_t sub_1008F5104()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v0[15] = v1;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[16] = v3;
  *v3 = v0;
  v3[1] = sub_1008F5178;
  return unsafeBlocking<A>(_:)(v3, sub_10050DA08, v1, &type metadata for () + 1);
}

uint64_t sub_1008F5178()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_release();
  return swift_task_switch(sub_1008F51D8, v1, 0);
}

uint64_t sub_1008F51D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(v0 + 120);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008F5214@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = type metadata accessor for DispatchQoS(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.default.getter(v5);
  v8 = swift_allocObject(&unk_10109B6E0, 24, 7);
  swift_weakInit(v8 + 16, a1);
  v9 = type metadata accessor for XPCActivity();
  swift_allocObject(v9, 112, 7);
  v10 = sub_100734F68(0xD000000000000041, (void *)0x8000000100EEACF0, (uint64_t)v7, (uint64_t)sub_1008F9EA8, 0, (uint64_t)sub_1008FA0BC, v8);
  result = swift_release();
  *a2 = v10;
  return result;
}

uint64_t sub_1008F5300(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v6 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1007329F0();
    }
    else if (a3 == 2)
    {
      v9 = swift_allocObject(&unk_10109B708, 32, 7);
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = a2;
      swift_retain();
      swift_retain();
      unsafeFromAsyncTask<A>(_:)(&type metadata for (), &unk_10110CB40, v9, &type metadata for () + 1);
      swift_release();
      sub_100732A0C();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1008F53E0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110CB5C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  return sub_1008F5428();
}

uint64_t sub_1008F5428()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v1[34] = v0;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  v1[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SubmitUTInfoEndpoint(0);
  v1[36] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[37] = swift_task_alloc(v4);
  v1[38] = swift_task_alloc(v4);
  v5 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v1[39] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[40] = v6;
  v1[41] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HashAlgorithm(0);
  v1[42] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[43] = v8;
  v1[44] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_10110CB60);
  v1[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UTInfoPublishRequestBody.State(0);
  v1[46] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[47] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[48] = swift_task_alloc(v12);
  v1[49] = swift_task_alloc(v12);
  v13 = sub_10001A9A8(&qword_1010F7AB8);
  v1[50] = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[51] = swift_task_alloc(v14);
  v1[52] = swift_task_alloc(v14);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[53] = swift_task_alloc(v15);
  v1[54] = swift_task_alloc(v15);
  v1[55] = swift_task_alloc(v15);
  v16 = type metadata accessor for WildModeAssociationRecord(0);
  v1[56] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v1[57] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[58] = swift_task_alloc(v18);
  v1[59] = swift_task_alloc(v18);
  v1[60] = swift_task_alloc(v18);
  v19 = type metadata accessor for Date(0);
  v1[61] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v1[62] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[63] = swift_task_alloc(v21);
  v1[64] = swift_task_alloc(v21);
  v1[65] = swift_task_alloc(v21);
  v1[66] = swift_task_alloc(v21);
  return swift_task_switch(sub_1008F5670, v0, 0);
}

uint64_t sub_1008F5670()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 536) = v2;
    *v2 = v0;
    v2[1] = sub_1008F575C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1008F575C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 544) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008F57BC, v3, 0);
}

uint64_t sub_1008F57BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 544))
  {
    v2 = *(_QWORD *)(v0 + 528);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    static Date.trustedNow.getter(v2);
    return swift_task_switch(sub_1008F598C, *(_QWORD *)(v0 + 544), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v25 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v5 = 0xD000000000000010;
    v5[1] = 0x8000000100EC6470;
    swift_willThrow(v25);
    v6 = *(_QWORD *)(v0 + 520);
    v8 = *(_QWORD *)(v0 + 504);
    v7 = *(_QWORD *)(v0 + 512);
    v10 = *(_QWORD *)(v0 + 472);
    v9 = *(_QWORD *)(v0 + 480);
    v11 = *(_QWORD *)(v0 + 464);
    v13 = *(_QWORD *)(v0 + 432);
    v12 = *(_QWORD *)(v0 + 440);
    v14 = *(_QWORD *)(v0 + 424);
    v15 = *(_QWORD *)(v0 + 416);
    v16 = *(_QWORD *)(v0 + 408);
    v17 = *(_QWORD *)(v0 + 392);
    v18 = *(_QWORD *)(v0 + 384);
    v19 = *(_QWORD *)(v0 + 360);
    v20 = *(_QWORD *)(v0 + 352);
    v21 = *(_QWORD *)(v0 + 328);
    v22 = *(_QWORD *)(v0 + 304);
    v23 = *(_QWORD *)(v0 + 296);
    v24 = *(_QWORD *)(v0 + 280);
    swift_task_dealloc(*(_QWORD *)(v0 + 528));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1008F598C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 552) = v3;
  v4 = sub_10001A9A8(&qword_1010EE100);
  *v3 = v0;
  v3[1] = sub_1008F5A14;
  return unsafeBlocking<A>(_:)(v0 + 216, sub_100068004, v1, v4);
}

uint64_t sub_1008F5A14()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 552));
  swift_release();
  return swift_task_switch(sub_1008F5A70, *(_QWORD *)(v1 + 544), 0);
}

uint64_t sub_1008F5A70()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[34];
  v0[70] = v0[27];
  return swift_task_switch(sub_1008F5A8C, v1, 0);
}

uint64_t sub_1008F5A8C()
{
  _QWORD *v0;

  v0[71] = *(_QWORD *)(v0[70] + 16);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1008F5AD0, v0[68], 0);
}

uint64_t sub_1008F5AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 576) = v3;
  v4 = sub_10001A9A8(&qword_1010EC840);
  *v3 = v0;
  v3[1] = sub_1008F5B58;
  return unsafeBlocking<A>(_:)(v0 + 200, sub_10001ED30, v1, v4);
}

uint64_t sub_1008F5B58()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 576));
  swift_release();
  return swift_task_switch(sub_1008F5BB4, *(_QWORD *)(v1 + 544), 0);
}

uint64_t sub_1008F5BB4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[34];
  v0[73] = v0[25];
  return swift_task_switch(sub_1008F5BD0, v1, 0);
}

uint64_t sub_1008F5BD0()
{
  _QWORD *v0;

  v0[74] = *(_QWORD *)(v0[73] + 16);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1008F5C14, v0[68], 0);
}

uint64_t sub_1008F5C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 600) = v3;
  v4 = sub_10001A9A8(qword_101103E20);
  *v3 = v0;
  v3[1] = sub_1008F5C9C;
  return unsafeBlocking<A>(_:)(v0 + 208, sub_1008FA5C8, v1, v4);
}

uint64_t sub_1008F5C9C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 600));
  swift_release();
  return swift_task_switch(sub_1008F5CF8, *(_QWORD *)(v1 + 544), 0);
}

uint64_t sub_1008F5CF8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[34];
  v0[76] = v0[26];
  return swift_task_switch(sub_1008F5D14, v1, 0);
}

uint64_t sub_1008F5D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __n128 v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  char v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void (*v67)(uint64_t, _QWORD, uint64_t);
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  char v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  int64_t v122;
  _QWORD *v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  int64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;

  v1 = *(_QWORD *)(v0 + 608);
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  v125 = v3;
  if (!v2)
  {
    v123 = _swiftEmptyArrayStorage;
LABEL_19:
    v7 = v123;
    *(_QWORD *)(v0 + 616) = v123;
    swift_bridgeObjectRelease();
    v28 = v123[2];
    v122 = v28;
    if (!v28)
    {
      v7 = _swiftEmptyArrayStorage;
      goto LABEL_68;
    }
    v29 = *(_QWORD *)(v0 + 496);
    v30 = *(_QWORD *)(v0 + 456);
    v149 = *(int **)(v0 + 448);
    v142 = *(_QWORD *)(v0 + 400);
    v139 = *(_QWORD *)(v0 + 376);
    v119 = *(_QWORD *)(v0 + 344);
    sub_10009B514(0, v28, 0);
    v31 = 0;
    v121 = (char *)v123 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    v120 = *(_QWORD *)(v30 + 72);
    v124 = enum case for HashAlgorithm.sha256(_:);
    v129 = v29;
LABEL_21:
    v32 = *(_QWORD *)(v0 + 464);
    v127 = v31;
    sub_10005972C((uint64_t)&v121[v31 * v120], v32, type metadata accessor for WildModeAssociationRecord);
    v33 = *(_QWORD *)(v32 + v149[17]);
    v131 = v33 + 64;
    v34 = -1 << *(_BYTE *)(v33 + 32);
    if (-v34 < 64)
      v35 = ~(-1 << -(char)v34);
    else
      v35 = -1;
    v36 = v35 & *(_QWORD *)(v33 + 64);
    v134 = (unint64_t)(63 - v34) >> 6;
    v145 = v33;
    v37 = swift_bridgeObjectRetain_n(v33, 2);
    v38 = 0;
    v128 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v36)
      {
        v152 = (v36 - 1) & v36;
        v156 = v38;
        v40 = __clz(__rbit64(v36)) | (v38 << 6);
      }
      else
      {
        v41 = v38 + 1;
        if (__OFADD__(v38, 1))
        {
          __break(1u);
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
        if (v41 >= v134)
          goto LABEL_56;
        v42 = *(_QWORD *)(v131 + 8 * v41);
        v43 = v38 + 1;
        if (!v42)
        {
          v43 = v38 + 2;
          if (v38 + 2 >= v134)
            goto LABEL_56;
          v42 = *(_QWORD *)(v131 + 8 * v43);
          if (!v42)
          {
            v43 = v38 + 3;
            if (v38 + 3 >= v134)
              goto LABEL_56;
            v42 = *(_QWORD *)(v131 + 8 * v43);
            if (!v42)
            {
              v43 = v38 + 4;
              if (v38 + 4 >= v134)
                goto LABEL_56;
              v42 = *(_QWORD *)(v131 + 8 * v43);
              if (!v42)
              {
                v44 = v38 + 5;
                if (v38 + 5 >= v134)
                {
LABEL_56:
                  v58 = *(_QWORD *)(v0 + 464);
                  v59 = *(_QWORD *)(v0 + 352);
                  v60 = *(_QWORD *)(v0 + 336);
                  swift_release();
                  v61 = swift_bridgeObjectRelease();
                  v157 = *(unsigned __int8 *)(v58 + v149[13]);
                  v62 = (unsigned __int8 *)(v58 + v149[22]);
                  v63 = *v62;
                  v153 = v62[1];
                  v64 = MACAddress.data.getter(v61);
                  v66 = v65;
                  v67 = *(void (**)(uint64_t, _QWORD, uint64_t))(v119 + 104);
                  v67(v59, v124, v60);
                  v146 = Data.hash(algorithm:)(v59, v64, v66);
                  v135 = v68;
                  sub_10001BC14(v64, v66);
                  v69 = *(uint64_t (**)(uint64_t, uint64_t))(v119 + 8);
                  v70 = v69(v59, v60);
                  v71 = *(_BYTE *)(v58 + v149[21]);
                  v72 = (uint64_t *)(v58 + v149[20]);
                  v73 = v72[1];
                  if (((v73 >> 60) | 4) == 0xF)
                  {
                    v132 = 0;
                    v126 = 0;
                  }
                  else
                  {
                    v74 = *(_QWORD *)(v0 + 352);
                    v75 = *(_QWORD *)(v0 + 336);
                    v76 = *v72;
                    v67(v74, v124, v75);
                    sub_10001BBBC(v76, v73);
                    v77 = Data.hash(algorithm:)(v74, v76, v73);
                    v79 = v78;
                    v69(v74, v75);
                    sub_1001DAFB8(v76, v73);
                    *(_QWORD *)(v0 + 184) = v77;
                    *(_QWORD *)(v0 + 192) = v79;
                    v80 = sub_100153D50();
                    v132 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for HashedAdvertisement, v80);
                    v126 = v81;
                    v70 = sub_10001BC14(v77, v79);
                  }
                  v82 = *(_QWORD *)(v0 + 464);
                  v83 = UUID.uuidString.getter(v70);
                  v85 = v84;
                  sub_1000126B0(v82, type metadata accessor for WildModeAssociationRecord);
                  v7 = _swiftEmptyArrayStorage;
                  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
                  {
                    sub_10009B514(0, _swiftEmptyArrayStorage[2] + 1, 1);
                    v7 = _swiftEmptyArrayStorage;
                  }
                  v86 = v127;
                  v88 = _swiftEmptyArrayStorage[2];
                  v87 = _swiftEmptyArrayStorage[3];
                  if (v88 >= v87 >> 1)
                  {
                    sub_10009B514(v87 > 1, v88 + 1, 1);
                    v86 = v127;
                    v7 = _swiftEmptyArrayStorage;
                  }
                  v31 = v86 + 1;
                  _swiftEmptyArrayStorage[2] = v88 + 1;
                  v89 = &_swiftEmptyArrayStorage[9 * v88];
                  v89[4] = v132;
                  v89[5] = v126;
                  v90 = 0x10000000000;
                  if (!v153)
                    v90 = 0;
                  v29 = v129;
                  v89[6] = v128;
                  v89[7] = v83;
                  v89[8] = v85;
                  v89[9] = (v63 << 32) | (v157 << 24) | v90 | 0x40202;
                  v89[10] = v146;
                  v89[11] = v135;
                  *((_BYTE *)v89 + 96) = v71;
                  if (v31 == v122)
                  {
LABEL_68:
                    if (qword_1010EA030 == -1)
                      goto LABEL_69;
                    goto LABEL_81;
                  }
                  goto LABEL_21;
                }
                v42 = *(_QWORD *)(v131 + 8 * v44);
                if (!v42)
                {
                  while (1)
                  {
                    v43 = v44 + 1;
                    if (__OFADD__(v44, 1))
                      goto LABEL_79;
                    if (v43 >= v134)
                      goto LABEL_56;
                    v42 = *(_QWORD *)(v131 + 8 * v43);
                    ++v44;
                    if (v42)
                      goto LABEL_45;
                  }
                }
                v43 = v38 + 5;
              }
            }
          }
        }
LABEL_45:
        v152 = (v42 - 1) & v42;
        v156 = v43;
        v40 = __clz(__rbit64(v42)) + (v43 << 6);
      }
      v45 = *(_QWORD *)(v0 + 488);
      v46 = *(_QWORD *)(v0 + 464);
      v47 = *(_BYTE **)(v0 + 416);
      v48 = *(_QWORD *)(v0 + 424);
      v49 = *(_BYTE *)(*(_QWORD *)(v145 + 48) + v40);
      v50 = *(unsigned __int8 **)(v0 + 408);
      (*(void (**)(_BYTE *, unint64_t, uint64_t, __n128))(v29 + 16))(&v47[*(int *)(v142 + 48)], *(_QWORD *)(v145 + 56) + *(_QWORD *)(v29 + 72) * v40, v45, v37);
      *v47 = v49;
      sub_100005CF0((uint64_t)v47, (uint64_t)v50, &qword_1010F7AB8);
      v51 = *v50;
      v52 = &v50[*(int *)(v142 + 48)];
      sub_10000F9B8(v46 + v149[19], v48, (uint64_t *)&unk_1010EA690);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v48, 1, v45) == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 424), (uint64_t *)&unk_1010EA690);
        __asm { BR              X8 }
      }
      v53 = *(_QWORD *)(v0 + 504);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v29 + 32))(v53, *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 488));
      if ((static Date.< infix(_:_:)(v53, v52) & 1) != 0)
        __asm { BR              X8 }
      (*(void (**)(_QWORD, _QWORD))(v29 + 8))(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 488));
      (*(void (**)(void))(v139 + 56))();
      v7 = *(_QWORD **)(v0 + 360);
      v39 = *(_QWORD *)(v0 + 368);
      sub_100004048(*(_QWORD *)(v0 + 408), &qword_1010F7AB8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v139 + 48))(v7, 1, v39) == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 360), &qword_10110CB60);
      }
      else
      {
        v7 = *(_QWORD **)(v0 + 384);
        v54 = *(_QWORD *)(v0 + 392);
        sub_1000126EC(*(_QWORD *)(v0 + 360), v54, type metadata accessor for UTInfoPublishRequestBody.State);
        sub_1000126EC(v54, (uint64_t)v7, type metadata accessor for UTInfoPublishRequestBody.State);
        if ((swift_isUniquelyReferenced_nonNull_native(v128) & 1) == 0)
          v128 = (_QWORD *)sub_1007CA7E4(0, v128[2] + 1, 1, (unint64_t)v128);
        v56 = v128[2];
        v55 = v128[3];
        if (v56 >= v55 >> 1)
          v128 = (_QWORD *)sub_1007CA7E4(v55 > 1, v56 + 1, 1, (unint64_t)v128);
        v57 = *(_QWORD *)(v0 + 384);
        v128[2] = v56 + 1;
        sub_1000126EC(v57, (uint64_t)v128+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(_QWORD *)(v139 + 72) * v56, type metadata accessor for UTInfoPublishRequestBody.State);
      }
      v36 = v152;
      v38 = v156;
    }
  }
  v4 = 0;
  v5 = *(_QWORD *)(v0 + 496);
  v6 = *(_QWORD *)(v0 + 448);
  v148 = *(_QWORD *)(v0 + 456);
  v123 = _swiftEmptyArrayStorage;
  v7 = &unk_1010EA690;
  v141 = v2;
  v144 = v6;
  while (v4 < *(_QWORD *)(v3 + 16))
  {
    v8 = *(_QWORD *)(v0 + 480);
    v9 = *(_QWORD *)(v0 + 488);
    v10 = *(_QWORD *)(v0 + 440);
    v151 = *(_QWORD *)(v148 + 72);
    v155 = (*(unsigned __int8 *)(v148 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80);
    sub_10005972C(*(_QWORD *)(v0 + 608) + v155 + v151 * v4, v8, type metadata accessor for WildModeAssociationRecord);
    sub_10000F9B8(v8 + *(int *)(v6 + 72), v10, (uint64_t *)&unk_1010EA690);
    v11 = v6;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v12(v10, 1, v9) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 440), (uint64_t *)&unk_1010EA690);
    }
    else
    {
      v14 = *(_QWORD *)(v0 + 480);
      v13 = *(_QWORD *)(v0 + 488);
      v15 = *(_QWORD *)(v0 + 432);
      v16 = *(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 32);
      v16(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 440), v13);
      sub_10000F9B8(v14 + *(int *)(v11 + 76), v15, (uint64_t *)&unk_1010EA690);
      v17 = v12(v15, 1, v13);
      v18 = *(_QWORD *)(v0 + 520);
      if (v17 == 1)
      {
        v19 = *(_QWORD *)(v0 + 488);
        sub_100004048(*(_QWORD *)(v0 + 432), (uint64_t *)&unk_1010EA690);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v18, v19);
        v2 = v141;
LABEL_11:
        sub_1000126EC(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 472), type metadata accessor for WildModeAssociationRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) != 0)
        {
          v24 = v123;
        }
        else
        {
          sub_10009AEA4(0, v123[2] + 1, 1);
          v24 = _swiftEmptyArrayStorage;
        }
        v26 = v24[2];
        v25 = v24[3];
        v6 = v144;
        if (v26 >= v25 >> 1)
        {
          sub_10009AEA4(v25 > 1, v26 + 1, 1);
          v24 = _swiftEmptyArrayStorage;
        }
        v27 = *(_QWORD *)(v0 + 472);
        v24[2] = v26 + 1;
        v123 = v24;
        sub_1000126EC(v27, (uint64_t)v24 + v155 + v26 * v151, type metadata accessor for WildModeAssociationRecord);
        goto LABEL_5;
      }
      v20 = *(_QWORD *)(v0 + 512);
      v21 = *(_QWORD *)(v0 + 488);
      v16(v20, *(_QWORD *)(v0 + 432), v21);
      v22 = static Date.< infix(_:_:)(v20, v18);
      v23 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v23(v20, v21);
      v23(v18, v21);
      v2 = v141;
      if ((v22 & 1) != 0)
        goto LABEL_11;
    }
    sub_1000126B0(*(_QWORD *)(v0 + 480), type metadata accessor for WildModeAssociationRecord);
    v6 = v144;
LABEL_5:
    ++v4;
    v3 = v125;
    if (v2 == v4)
      goto LABEL_19;
  }
LABEL_80:
  __break(1u);
LABEL_81:
  swift_once(&qword_1010EA030, sub_1008F4BD0);
LABEL_69:
  v91 = *(_QWORD *)(v0 + 608);
  v92 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 624) = sub_10001A9E8(v92, (uint64_t)qword_1011B78E0);
  swift_retain_n(v123, 2);
  swift_bridgeObjectRetain(v91);
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.default.getter(v94);
  v96 = os_log_type_enabled(v94, v95);
  v97 = *(_QWORD *)(v0 + 608);
  if (v96)
  {
    v98 = swift_slowAlloc(22, -1);
    *(_DWORD *)v98 = 134218240;
    v99 = *(_QWORD *)(v125 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 248) = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v98 + 4, v98 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v98 + 12) = 2048;
    swift_release();
    *(_QWORD *)(v0 + 256) = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v98 + 14, v98 + 22);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "Count of wild records is %ld, count of records to publish is %ld", (uint8_t *)v98, 0x16u);
    swift_slowDealloc(v98, -1, -1);
  }
  else
  {
    swift_release_n(v123, 2);
    swift_bridgeObjectRelease_n(v97, 2);
  }

  if (v7[2])
  {
    v100 = *(_QWORD *)(v0 + 592);
    v101 = *(_QWORD *)(v0 + 568);
    v102 = *(_QWORD *)(*(_QWORD *)(v0 + 272) + 128);
    v103 = unk_1010FF884;
    v158 = (char *)&dword_1010FF880 + dword_1010FF880;
    swift_retain();
    v104 = (_QWORD *)swift_task_alloc(v103);
    *(_QWORD *)(v0 + 632) = v104;
    *v104 = v0;
    v104[1] = sub_1008F6C70;
    return ((uint64_t (*)(BOOL, _QWORD *, uint64_t))v158)((v101 | v100) != 0, v7, v102);
  }
  else
  {
    swift_release();
    v106 = swift_bridgeObjectRelease();
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.default.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "No records to publish, skip publishing.", v109, 2u);
      swift_slowDealloc(v109, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v110 = *(_QWORD *)(v0 + 528);
    v111 = *(_QWORD *)(v0 + 520);
    v113 = *(_QWORD *)(v0 + 504);
    v112 = *(_QWORD *)(v0 + 512);
    v115 = *(_QWORD *)(v0 + 472);
    v114 = *(_QWORD *)(v0 + 480);
    v116 = *(_QWORD *)(v0 + 464);
    v118 = *(_QWORD *)(v0 + 432);
    v117 = *(_QWORD *)(v0 + 440);
    v130 = *(_QWORD *)(v0 + 424);
    v133 = *(_QWORD *)(v0 + 416);
    v136 = *(_QWORD *)(v0 + 408);
    v137 = *(_QWORD *)(v0 + 392);
    v138 = *(_QWORD *)(v0 + 384);
    v140 = *(_QWORD *)(v0 + 360);
    v143 = *(_QWORD *)(v0 + 352);
    v147 = *(_QWORD *)(v0 + 328);
    v150 = *(_QWORD *)(v0 + 304);
    v154 = *(_QWORD *)(v0 + 296);
    v159 = *(_QWORD *)(v0 + 280);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 496) + 8))(v110, *(_QWORD *)(v0 + 488));
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v130);
    swift_task_dealloc(v133);
    swift_task_dealloc(v136);
    swift_task_dealloc(v137);
    swift_task_dealloc(v138);
    swift_task_dealloc(v140);
    swift_task_dealloc(v143);
    swift_task_dealloc(v147);
    swift_task_dealloc(v150);
    swift_task_dealloc(v154);
    swift_task_dealloc(v159);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1008F6C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 632);
  v5[80] = a1;
  v5[81] = a2;
  v5[82] = a3;
  v5[83] = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    v7 = v5[34];
    swift_release();
    v8 = sub_1008F6F34;
    v9 = v7;
  }
  else
  {
    v9 = v5[34];
    v8 = sub_1008F6CF8;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_1008F6CF8()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0[82];
  v2 = v0[81];
  v3 = v0[80];
  v5 = v0[37];
  v4 = (uint64_t *)v0[38];
  v6 = v0[35];
  v7 = v0[36];
  v8 = type metadata accessor for AnonymousCrowdSourceNetworkURLComponents();
  swift_allocObject(v8, 56, 7);
  *v4 = sub_10015DA08();
  v9 = (char *)v4 + *(int *)(v7 + 20);
  v10 = enum case for FMNAccountType.none(_:);
  v11 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
  v12 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
  v14 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v6);
  v15 = type metadata accessor for ServerInteractionController(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  sub_10005972C((uint64_t)v4, v5, type metadata accessor for SubmitUTInfoEndpoint);
  v0[84] = sub_10041D9D0(v5, v14, v16);
  sub_1000126B0((uint64_t)v4, type metadata accessor for SubmitUTInfoEndpoint);
  v0[15] = &type metadata for SubmitUTInfo;
  v0[16] = sub_1008FA5D0();
  v0[12] = v3;
  v0[13] = v2;
  v0[14] = v1;
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v2, v1);
  v17 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
  v0[85] = v17;
  *v17 = v0;
  v17[1] = sub_1008F6EA0;
  return sub_100338A60(v0[41], (uint64_t)(v0 + 12));
}

uint64_t sub_1008F6EA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 680);
  *(_QWORD *)(*v1 + 688) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 272);
    swift_release();
    swift_release();
    v5 = sub_1008F794C;
  }
  else
  {
    v6 = (_QWORD *)(v2 + 96);
    v4 = *(_QWORD *)(v2 + 272);
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    v5 = sub_1008F7098;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1008F6F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 496);
  swift_release(*(_QWORD *)(v0 + 544));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 520);
  v6 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 512);
  v8 = *(_QWORD *)(v0 + 472);
  v7 = *(_QWORD *)(v0 + 480);
  v9 = *(_QWORD *)(v0 + 464);
  v11 = *(_QWORD *)(v0 + 432);
  v10 = *(_QWORD *)(v0 + 440);
  v12 = *(_QWORD *)(v0 + 424);
  v14 = *(_QWORD *)(v0 + 416);
  v15 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 384);
  v18 = *(_QWORD *)(v0 + 360);
  v19 = *(_QWORD *)(v0 + 352);
  v20 = *(_QWORD *)(v0 + 328);
  v21 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 528));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008F7098(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if ((unint64_t)(FMNServerInteractionController.FMNResponseFields.statusCode.getter(a1) - 300) >= 0xFFFFFFFFFFFFFF9CLL)
  {
    v23 = type metadata accessor for JSONDecoder(0);
    v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    *(_QWORD *)(v1 + 696) = JSONDecoder.init()(v24);
    v25 = (_QWORD *)swift_task_alloc(dword_10110CB74);
    *(_QWORD *)(v1 + 704) = v25;
    *v25 = v1;
    v25[1] = sub_1008F7364;
    return sub_1008F9670(*(_QWORD *)(v1 + 616), *(_QWORD *)(v1 + 528));
  }
  else
  {
    v2 = swift_release();
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to publish wild associated records.", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(_QWORD *)(v1 + 656);
    v7 = *(_QWORD *)(v1 + 648);
    v33 = *(_QWORD *)(v1 + 496);
    v35 = *(_QWORD *)(v1 + 488);
    v37 = *(_QWORD *)(v1 + 528);
    v8 = *(_QWORD *)(v1 + 320);
    v9 = *(_QWORD *)(v1 + 328);
    v10 = *(_QWORD *)(v1 + 312);

    v11 = sub_1008FA614();
    v39 = swift_allocError(&type metadata for WildModeAssociationRecordsPublisherError, v11, 0, 0);
    *v12 = 0;
    swift_willThrow(v39);
    swift_release();
    swift_bridgeObjectRelease();
    sub_10001BC14(v7, v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v37, v35);
    v13 = *(_QWORD *)(v1 + 520);
    v14 = *(_QWORD *)(v1 + 504);
    v15 = *(_QWORD *)(v1 + 512);
    v17 = *(_QWORD *)(v1 + 472);
    v16 = *(_QWORD *)(v1 + 480);
    v18 = *(_QWORD *)(v1 + 464);
    v20 = *(_QWORD *)(v1 + 432);
    v19 = *(_QWORD *)(v1 + 440);
    v21 = *(_QWORD *)(v1 + 424);
    v26 = *(_QWORD *)(v1 + 416);
    v27 = *(_QWORD *)(v1 + 408);
    v28 = *(_QWORD *)(v1 + 392);
    v29 = *(_QWORD *)(v1 + 384);
    v30 = *(_QWORD *)(v1 + 360);
    v31 = *(_QWORD *)(v1 + 352);
    v32 = *(_QWORD *)(v1 + 328);
    v34 = *(_QWORD *)(v1 + 304);
    v36 = *(_QWORD *)(v1 + 296);
    v38 = *(_QWORD *)(v1 + 280);
    swift_task_dealloc(*(_QWORD *)(v1 + 528));
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1008F7364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 704);
  v3 = *(_QWORD **)v1;
  v3[89] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[34];
    swift_release();
    return swift_task_switch(sub_1008F7ADC, v4, 0);
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_10110CB84);
    v3[90] = v6;
    *v6 = v3;
    v6[1] = sub_1008F7404;
    return sub_1008F8134(v3[77]);
  }
}

uint64_t sub_1008F7404()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 720));
  swift_release();
  return swift_task_switch(sub_1008F7468, v1, 0);
}

uint64_t sub_1008F7468(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[2];

  v2 = v1;
  v3 = v1[89];
  v4 = FMNServerInteractionController.FMNResponseFields.data.getter(a1);
  v6 = v5;
  v7 = sub_1008FA658();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for UTInfoPublishResponse, v4, v6, &type metadata for UTInfoPublishResponse, v7);
  if (v3)
  {
    v8 = v1[82];
    v9 = v1[81];
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10001BC14(v9, v8);
    swift_errorRelease(v3);
    sub_10001BC14(v4, v6);
  }
  else
  {
    sub_10001BC14(v4, v6);
    v10 = v1[29];
    swift_bridgeObjectRetain(v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v14 = 134217984;
      v1[30] = *(_QWORD *)(v10 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 30, v1 + 31, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Got %ld records in response.", v14, 0xCu);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    v15 = *(_QWORD *)(v10 + 16);
    if (v15)
    {
      v16 = (unsigned __int8 *)(v10 + 64);
      v53 = v1;
      do
      {
        v17 = *((_QWORD *)v16 - 4);
        v18 = *((_QWORD *)v16 - 3);
        v19 = *((_QWORD *)v16 - 1);
        v20 = *v16;
        swift_bridgeObjectRetain_n(v18, 4);
        swift_bridgeObjectRetain_n(v19, 4);
        v22 = Logger.logObject.getter(v21);
        v23 = static os_log_type_t.default.getter(v22);
        if (os_log_type_enabled(v22, v23))
        {
          v24 = swift_slowAlloc(32, -1);
          v25 = swift_slowAlloc(64, -1);
          v56[0] = v25;
          *(_DWORD *)v24 = 141558531;
          *(_QWORD *)(v24 + 4) = 1752392040;
          *(_WORD *)(v24 + 12) = 2081;
          swift_bridgeObjectRetain(v18);
          *(_QWORD *)(v24 + 14) = sub_100016940(v17, v18, v56);
          swift_bridgeObjectRelease_n(v18, 3);
          swift_bridgeObjectRelease_n(v19, 2);
          *(_WORD *)(v24 + 22) = 2080;
          if (v20)
            v26 = 0x657669746361;
          else
            v26 = 0x7472656E69;
          if (v20)
            v27 = 0xE600000000000000;
          else
            v27 = 0xE500000000000000;
          *(_QWORD *)(v24 + 24) = sub_100016940(v26, v27, v56);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v18, 2);
          swift_bridgeObjectRelease_n(v19, 2);
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Subscription %{private,mask.hash}s, result = %s.", (uint8_t *)v24, 0x20u);
          swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v25, -1, -1);
          v28 = v24;
          v2 = v53;
          swift_slowDealloc(v28, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v18, 4);
          swift_bridgeObjectRelease_n(v19, 4);
        }

        v16 += 40;
        --v15;
      }
      while (v15);
    }
    v29 = v2[82];
    v30 = v2[81];
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_10001BC14(v30, v29);
    swift_bridgeObjectRelease();
  }
  (*(void (**)(_QWORD, _QWORD))(v2[40] + 8))(v2[41], v2[39]);
  v31 = v2[66];
  v32 = v2[65];
  v34 = v2[63];
  v33 = v2[64];
  v35 = v2[61];
  v36 = v2[62];
  v38 = v2[59];
  v37 = v2[60];
  v39 = v2[58];
  v40 = v2;
  v41 = v2[55];
  v42 = v40[54];
  v44 = v40[53];
  v45 = v40[52];
  v46 = v40[51];
  v47 = v40[49];
  v48 = v40[48];
  v49 = v40[45];
  v50 = v40[44];
  v51 = v40[41];
  v52 = v40[38];
  v54 = v40[37];
  v55 = v40[35];
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v31, v35);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return ((uint64_t (*)(void))v40[1])();
}

uint64_t sub_1008F794C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 656);
  v2 = *(_QWORD *)(v0 + 648);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 496);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  v6 = *(_QWORD *)(v0 + 520);
  v8 = *(_QWORD *)(v0 + 504);
  v7 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 464);
  v13 = *(_QWORD *)(v0 + 432);
  v12 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 424);
  v16 = *(_QWORD *)(v0 + 416);
  v17 = *(_QWORD *)(v0 + 408);
  v18 = *(_QWORD *)(v0 + 392);
  v19 = *(_QWORD *)(v0 + 384);
  v20 = *(_QWORD *)(v0 + 360);
  v21 = *(_QWORD *)(v0 + 352);
  v22 = *(_QWORD *)(v0 + 328);
  v23 = *(_QWORD *)(v0 + 304);
  v24 = *(_QWORD *)(v0 + 296);
  v25 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 528));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008F7ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 712);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 712);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v43 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v5, v0 + 264, v0 + 160);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
    *(_QWORD *)(v0 + 224) = sub_100016940(v8, v9, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to decode wild associated records %s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 712);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  v11 = *(_QWORD *)(v0 + 712);
  v12 = *(_QWORD *)(v0 + 648);
  v34 = *(_QWORD *)(v0 + 656);
  v36 = *(_QWORD *)(v0 + 496);
  v38 = *(_QWORD *)(v0 + 488);
  v40 = *(_QWORD *)(v0 + 528);
  v13 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 312);
  v16 = sub_1008FA614();
  v42 = swift_allocError(&type metadata for WildModeAssociationRecordsPublisherError, v16, 0, 0);
  *v17 = 1;
  swift_willThrow(v42);
  swift_release();
  swift_release();
  swift_errorRelease(v11);
  swift_bridgeObjectRelease();
  sub_10001BC14(v12, v34);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v40, v38);
  v18 = *(_QWORD *)(v0 + 520);
  v19 = *(_QWORD *)(v0 + 504);
  v20 = *(_QWORD *)(v0 + 512);
  v22 = *(_QWORD *)(v0 + 472);
  v21 = *(_QWORD *)(v0 + 480);
  v23 = *(_QWORD *)(v0 + 464);
  v25 = *(_QWORD *)(v0 + 432);
  v24 = *(_QWORD *)(v0 + 440);
  v26 = *(_QWORD *)(v0 + 424);
  v28 = *(_QWORD *)(v0 + 416);
  v29 = *(_QWORD *)(v0 + 408);
  v30 = *(_QWORD *)(v0 + 392);
  v31 = *(_QWORD *)(v0 + 384);
  v32 = *(_QWORD *)(v0 + 360);
  v33 = *(_QWORD *)(v0 + 352);
  v35 = *(_QWORD *)(v0 + 328);
  v37 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 296);
  v41 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 528));
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008F7E1C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for WildModeAssociationRecordsPublisher()
{
  return objc_opt_self(_TtC12searchpartyd35WildModeAssociationRecordsPublisher);
}

_QWORD *sub_1008F7E78()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  v1[14] = 0xD000000000000023;
  v1[15] = 0x8000000100E55010;
  v5 = type metadata accessor for DeviceIdentityUtility(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  swift_defaultActor_initialize(v6);
  v7 = v6 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 4;
  v1[16] = v6;
  v9 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v9);
  v1[17] = WorkItemQueue.__allocating_init(identifier:)(v4);
  v1[18] = 0;
  return v1;
}

uint64_t sub_1008F7FA0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110CA64);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[6] = v0;
  v2[7] = *v0;
  return swift_task_switch(sub_1008F4C70, v0, 0);
}

uint64_t sub_1008F8004(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_10110CB30, a2, (uint64_t (*)(uint64_t))type metadata accessor for WildModeAssociationRecordsPublisher, (uint64_t)&unk_100E55080);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1008F8040()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008F8064@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1008F5214(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1008F806C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110CB4C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  v4[7] = a2;
  return swift_task_switch(sub_1008FA188, a2, 0);
}

uint64_t sub_1008F80CC@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  v2 = result;
  if (result)
    result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, result, *(_QWORD *)(result + 40), &type metadata for () + 1, &type metadata for () + 1);
  *a2 = v2 == 0;
  return result;
}

uint64_t sub_1008F8134(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[20] = a1;
  v2[21] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[22] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[23] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[24] = v5;
  v2[25] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WildModeAssociationRecord(0);
  v2[26] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[27] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[28] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[29] = swift_task_alloc(v9);
  v2[30] = swift_task_alloc(v9);
  v2[31] = swift_task_alloc(v9);
  v2[32] = swift_task_alloc(v9);
  return swift_task_switch(sub_1008F81EC, v1, 0);
}

uint64_t sub_1008F81EC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 264) = v2;
    *v2 = v0;
    v2[1] = sub_1008F82D8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1008F82D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008F8338, v3, 0);
}

void sub_1008F8338()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 272))
  {
    v2 = *(_QWORD *)(v0 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 280) = v3;
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 216);
      v5 = *(_QWORD *)(v0 + 160);
      *(_DWORD *)(v0 + 352) = *(_DWORD *)(v4 + 80);
      *(_QWORD *)(v0 + 288) = *(_QWORD *)(v4 + 72);
      swift_bridgeObjectRetain(v5);
      *(_QWORD *)(v0 + 296) = 0;
      *(_QWORD *)(v0 + 304) = 0;
      v6 = *(_QWORD *)(v0 + 256);
      v7 = *(_QWORD *)(v0 + 208);
      sub_10005972C(*(_QWORD *)(v0 + 160)+ ((*(unsigned __int8 *)(v0 + 352) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 352)), v6, type metadata accessor for WildModeAssociationRecord);
      __asm { BR              X9 }
    }
    if (qword_1010EA030 != -1)
      swift_once(&qword_1010EA030, sub_1008F4BD0);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B78E0);
    v10 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.default.getter(v10);
    if (!os_log_type_enabled(v10, v15))
    {

      swift_release();
LABEL_14:
      v17 = *(_QWORD *)(v0 + 248);
      v19 = *(_QWORD *)(v0 + 232);
      v18 = *(_QWORD *)(v0 + 240);
      v20 = *(_QWORD *)(v0 + 200);
      swift_task_dealloc(*(_QWORD *)(v0 + 256));
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      __asm { BR              X0 }
    }
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v16 = 134349056;
    *(_QWORD *)(v0 + 144) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v15, "Removed %{public}ld unstaged records.", v16, 0xCu);
    swift_slowDealloc(v16, -1, -1);
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA030 != -1)
      swift_once(&qword_1010EA030, sub_1008F4BD0);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B78E0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cleanup unstaged records failure: Missing BeaconStoreActor!", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

  goto LABEL_14;
}

uint64_t sub_1008F86F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[34];
  v3 = v0[24];
  v2 = v0[25];
  v4 = v0[22];
  v5 = v0[23];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[32], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109B758, v7 + v3, v6 | 7);
  v0[39] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[40] = v10;
  *v10 = v0;
  v10[1] = sub_1008F87D0;
  return unsafeBlocking<A>(_:)(v0[31], sub_1000DA468, v8, v0[26]);
}

uint64_t sub_1008F87D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 320);
  *(_QWORD *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 272);
    v5 = sub_1008F90F8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 168);
    swift_release();
    v5 = sub_1008F8844;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

void sub_1008F8844()
{
  __asm { BR              X11 }
}

uint64_t sub_1008F88A4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646567617473, 0xE600000000000000, 0x6465676174736E75, 0xE800000000000000, 0);
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
    return swift_task_switch(sub_1008F8C68, *(_QWORD *)(v1 + 272), 0);
  v3 = *(_QWORD *)(v1 + 256);
  sub_1000126B0(*(_QWORD *)(v1 + 248), type metadata accessor for WildModeAssociationRecord);
  sub_1000126B0(v3, type metadata accessor for WildModeAssociationRecord);
  v4 = *(_QWORD *)(v1 + 296);
  v5 = *(_QWORD *)(v1 + 304) + 1;
  if (v5 != *(_QWORD *)(v1 + 280))
  {
    *(_QWORD *)(v1 + 296) = v4;
    *(_QWORD *)(v1 + 304) = v5;
    v11 = *(_QWORD *)(v1 + 256);
    v12 = *(_QWORD *)(v1 + 208);
    sub_10005972C(*(_QWORD *)(v1 + 160)+ ((*(unsigned __int8 *)(v1 + 352) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 352))+ *(_QWORD *)(v1 + 288) * v5, v11, type metadata accessor for WildModeAssociationRecord);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  if (qword_1010EA030 != -1)
    swift_once(&qword_1010EA030, sub_1008F4BD0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B78E0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134349056;
    *(_QWORD *)(v1 + 144) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v1 + 152, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Removed %{public}ld unstaged records.", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
  }
  v13 = *(_QWORD *)(v1 + 248);
  v15 = *(_QWORD *)(v1 + 232);
  v14 = *(_QWORD *)(v1 + 240);
  v16 = *(_QWORD *)(v1 + 200);
  swift_task_dealloc(*(_QWORD *)(v1 + 256));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1008F8C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(unsigned __int8 *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = (v1 + 24) & ~v1;
  v5 = v4 + *(_QWORD *)(v0 + 224);
  v6 = v1 | 7;
  sub_10005972C(*(_QWORD *)(v0 + 256), v3, type metadata accessor for WildModeAssociationRecord);
  v7 = swift_allocObject(&unk_10109B780, v5, v6);
  *(_QWORD *)(v0 + 336) = v7;
  *(_QWORD *)(v7 + 16) = v2;
  sub_1000126EC(v3, v7 + v4, type metadata accessor for WildModeAssociationRecord);
  v8 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 344) = v9;
  *v9 = v0;
  v9[1] = sub_1008F8D4C;
  return unsafeBlocking<A>(_:)(v9, sub_1008FACFC, v7, &type metadata for () + 1);
}

uint64_t sub_1008F8D4C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 344));
  swift_release();
  return swift_task_switch(sub_1008F8DA4, *(_QWORD *)(v1 + 272), 0);
}

uint64_t sub_1008F8DA4()
{
  uint64_t v0;

  return swift_task_switch(sub_1008F8DB8, *(_QWORD *)(v0 + 168), 0);
}

void sub_1008F8DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 256);
  sub_1000126B0(*(_QWORD *)(v0 + 248), type metadata accessor for WildModeAssociationRecord);
  sub_1000126B0(v2, type metadata accessor for WildModeAssociationRecord);
  v3 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 304) + 1;
    if (v4 != *(_QWORD *)(v0 + 280))
    {
      *(_QWORD *)(v0 + 296) = v3;
      *(_QWORD *)(v0 + 304) = v4;
      v10 = *(_QWORD *)(v0 + 256);
      v11 = *(_QWORD *)(v0 + 208);
      sub_10005972C(*(_QWORD *)(v0 + 160)+ ((*(unsigned __int8 *)(v0 + 352) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 352))+ *(_QWORD *)(v0 + 288) * v4, v10, type metadata accessor for WildModeAssociationRecord);
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    if (qword_1010EA030 == -1)
    {
LABEL_4:
      v5 = type metadata accessor for Logger(0);
      v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B78E0);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter(v7);
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v9 = 134349056;
        *(_QWORD *)(v0 + 144) = v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v9 + 4, v9 + 12);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Removed %{public}ld unstaged records.", v9, 0xCu);
        swift_slowDealloc(v9, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
      v12 = *(_QWORD *)(v0 + 248);
      v14 = *(_QWORD *)(v0 + 232);
      v13 = *(_QWORD *)(v0 + 240);
      v15 = *(_QWORD *)(v0 + 200);
      swift_task_dealloc(*(_QWORD *)(v0 + 256));
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      __asm { BR              X0 }
    }
  }
  swift_once(&qword_1010EA030, sub_1008F4BD0);
  goto LABEL_4;
}

uint64_t sub_1008F90F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release();
  return swift_task_switch(sub_1008F9138, v1, 0);
}

void sub_1008F9138()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[12];

  v36 = v0 + 152;
  v1 = &qword_1010EA000;
  if (qword_1010EA030 != -1)
    swift_once(&qword_1010EA030, sub_1008F4BD0);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B78E0);
  sub_10005972C(v3, v4, type metadata accessor for WildModeAssociationRecord);
  swift_errorRetain(v2);
  v6 = swift_errorRetain(v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 232);
  if (v9)
  {
    v13 = *(_QWORD *)(v0 + 176);
    v14 = swift_slowAlloc(32, -1);
    v35 = v5;
    v15 = swift_slowAlloc(64, -1);
    v37[0] = v15;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v14 + 4) = 1752392040;
    *(_WORD *)(v14 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    *(_QWORD *)(v14 + 14) = sub_100016940(v17, v18, v37);
    swift_bridgeObjectRelease();
    sub_1000126B0(v12, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v14 + 22) = 2082;
    swift_getErrorValue(v10, v36, v0 + 120);
    v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    *(_QWORD *)(v14 + 24) = sub_100016940(v19, v20, v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "    Failed to get wild mode beacon for identifier %{private,mask.hash}s\n    Error: %{public}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    v21 = v15;
    v5 = v35;
    swift_slowDealloc(v21, -1, -1);
    v22 = v14;
    v1 = &qword_1010EA000;
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_errorRelease(v10);
    swift_errorRelease(v10);
    sub_1000126B0(v12, type metadata accessor for WildModeAssociationRecord);
  }
  swift_errorRelease(v10);
  sub_1000126B0(v11, type metadata accessor for WildModeAssociationRecord);
  v23 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 304) + 1;
  if (v24 == *(_QWORD *)(v0 + 280))
  {
    swift_bridgeObjectRelease();
    if (v1[6] != -1)
      swift_once(&qword_1010EA030, sub_1008F4BD0);
    v25 = sub_10001A9E8(v5, (uint64_t)qword_1011B78E0);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v28 = 134349056;
      *(_QWORD *)(v0 + 144) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v36, v28 + 4, v28 + 12);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Removed %{public}ld unstaged records.", v28, 0xCu);
      swift_slowDealloc(v28, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v31 = *(_QWORD *)(v0 + 248);
    v33 = *(_QWORD *)(v0 + 232);
    v32 = *(_QWORD *)(v0 + 240);
    v34 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 256));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    __asm { BR              X0 }
  }
  *(_QWORD *)(v0 + 296) = v23;
  *(_QWORD *)(v0 + 304) = v24;
  v29 = *(_QWORD *)(v0 + 256);
  v30 = *(_QWORD *)(v0 + 208);
  sub_10005972C(*(_QWORD *)(v0 + 160)+ ((*(unsigned __int8 *)(v0 + 352) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 352))+ *(_QWORD *)(v0 + 288) * v24, v29, type metadata accessor for WildModeAssociationRecord);
  __asm { BR              X9 }
}

uint64_t sub_1008F9670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v4 = type metadata accessor for Date(0);
  v3[18] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[19] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[20] = v6;
  v3[21] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  v3[22] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[23] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[24] = swift_task_alloc(v9);
  v3[25] = swift_task_alloc(v9);
  return swift_task_switch(sub_1008F9710, v2, 0);
}

uint64_t sub_1008F9710()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 208) = v2;
    *v2 = v0;
    v2[1] = sub_1008F97FC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1008F97FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008F985C, v3, 0);
}

uint64_t sub_1008F985C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 216))
  {
    v2 = *(_QWORD *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 224) = v3;
    if (v3)
    {
      v5 = *(_QWORD *)(v0 + 168);
      v4 = *(_QWORD *)(v0 + 176);
      v6 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)(v0 + 272) = v6;
      *(_QWORD *)(v0 + 232) = *(_QWORD *)(v4 + 72);
      *(_QWORD *)(v0 + 240) = 0;
      v7 = *(_QWORD *)(v0 + 200);
      v9 = *(_QWORD *)(v0 + 152);
      v8 = *(_QWORD *)(v0 + 160);
      v10 = *(_QWORD *)(v0 + 144);
      v11 = *(_QWORD *)(v0 + 120);
      v12 = *(_QWORD *)(v0 + 128);
      v13 = v11 + ((v6 + 32) & ~(unint64_t)v6);
      swift_bridgeObjectRetain(v11);
      sub_10005972C(v13, v7, type metadata accessor for WildModeAssociationRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v5, v12, v10);
      v14 = *(unsigned __int8 *)(v9 + 80);
      v15 = (v14 + 16) & ~v14;
      v16 = swift_allocObject(&unk_10109B7A8, v15 + v8, v14 | 7);
      *(_QWORD *)(v0 + 248) = v16;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v16 + v15, v5, v10);
      return swift_task_switch(sub_1008F9A1C, *(_QWORD *)(v0 + 216), 0);
    }
    swift_release();
    v25 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    v24 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 192);
    v19 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v21 = sub_100033220();
    v22 = swift_allocError(&type metadata for DaemonError, v21, 0, 0);
    *v23 = 0xD000000000000010;
    v23[1] = 0x8000000100EC6470;
    swift_willThrow(v22);
    swift_task_dealloc(v19);
    swift_task_dealloc(v18);
    swift_task_dealloc(v20);
    v24 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v24();
}

uint64_t sub_1008F9A1C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(uint64_t);
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 248);
  v2 = *(unsigned __int8 *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = (v2 + 24) & ~v2;
  v6 = (*(_QWORD *)(v0 + 184) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = v2 | 7;
  sub_10005972C(*(_QWORD *)(v0 + 200), v4, type metadata accessor for WildModeAssociationRecord);
  v9 = swift_allocObject(&unk_10109B7D0, v7 + 16, v8);
  *(_QWORD *)(v0 + 256) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  sub_1000126EC(v4, v9 + v5, type metadata accessor for WildModeAssociationRecord);
  v10 = (uint64_t (**)(uint64_t))(v9 + v6);
  *v10 = sub_1008FAD9C;
  v10[1] = v1;
  v11 = (_QWORD *)(v9 + v7);
  *v11 = SharingCircleWildAdvertisementKey.init(key:);
  v11[1] = 0;
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 264) = v13;
  *v13 = v0;
  v13[1] = sub_1008F9B4C;
  return unsafeBlocking<A>(_:)(v13, sub_1008FB3F8, v9, &type metadata for () + 1);
}

uint64_t sub_1008F9B4C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 264));
  swift_release();
  return swift_task_switch(sub_1008F9BA4, *(_QWORD *)(v1 + 216), 0);
}

uint64_t sub_1008F9BA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release();
  return swift_task_switch(sub_1008F9BE4, v1, 0);
}

uint64_t sub_1008F9BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 240) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 200), type metadata accessor for WildModeAssociationRecord);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v3 = *(_QWORD *)(v0 + 192);
    v4 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 232);
    v7 = *(_QWORD *)(v0 + 240) + 1;
    *(_QWORD *)(v0 + 240) = v7;
    v9 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 128);
    sub_10005972C(*(_QWORD *)(v0 + 120)+ ((*(unsigned __int8 *)(v0 + 272) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 272))+ v6 * v7, *(_QWORD *)(v0 + 200), type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v12, v10);
    v13 = *(unsigned __int8 *)(v11 + 80);
    v14 = (v13 + 16) & ~v13;
    v15 = swift_allocObject(&unk_10109B7A8, v14 + v9, v13 | 7);
    *(_QWORD *)(v0 + 248) = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15 + v14, v8, v10);
    return swift_task_switch(sub_1008F9A1C, *(_QWORD *)(v0 + 216), 0);
  }
}

uint64_t sub_1008F9D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v18;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v18 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v18 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a2, v13);
  v15 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
  v15(v12, 0, 1, v13);
  sub_10000F9B8((uint64_t)v12, (uint64_t)v7, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) == 1)
  {
    static Date.trustedNow.getter((uint64_t)v10);
    sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v10, v7, v13);
  }
  v15(v10, 0, 1, v13);
  v16 = type metadata accessor for WildModeAssociationRecord(0);
  sub_1008FB460((uint64_t)v10, a1 + *(int *)(v16 + 76));
  return sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010EA690);
}

uint64_t sub_1008F9EA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  _QWORD v17[5];
  _BYTE v18[40];

  sub_100005CF0(a1, (uint64_t)v17, &qword_101106350);
  v5 = v17[0];
  v4 = v17[1];
  v6 = v17[2];
  v7 = v17[3];
  v8 = v17[4];
  result = sub_100005CF0(a1, (uint64_t)v18, &qword_101106350);
  if (v18[0] != 2)
    goto LABEL_14;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  result = sub_100C1BB48(v16);
  v11 = v10;
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = sub_100C1BB3C(v16);
  v13 = v12 * 0.5;
  if ((~COERCE__INT64(v12 * 0.5) & 0x7FF0000000000000) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  sub_100C1BB3C(v16);
  v15 = v14;
  result = swift_bridgeObjectRelease();
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v15 < 9.22337204e18)
  {
    v4 = (uint64_t)v11;
    v6 = (uint64_t)v13;
    v8 = 707;
    v5 = 256;
    v7 = (uint64_t)v15;
LABEL_14:
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    a2[3] = v7;
    a2[4] = v8;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1008FA098()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008FA0BC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1008F5300(a1, a2, a3, v3);
}

uint64_t sub_1008FA0C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1008FA0F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10110CB3C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004C28;
  v4 = (_QWORD *)swift_task_alloc(dword_10110CB4C);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100004A74;
  v4[7] = v2;
  return swift_task_switch(sub_1008FA188, v2, 0);
}

uint64_t sub_1008FA170()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_1008FA188, v0, 0);
}

uint64_t sub_1008FA188()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0[7] + 144);
  v0[8] = v1;
  v2 = swift_allocObject(&unk_10109B730, 24, 7);
  v0[9] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain_n(v1, 2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[10] = v4;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v4 = v0;
  v4[1] = sub_1008FA23C;
  return unsafeBlocking<A>(_:)(v0 + 13, sub_1008FA5C0, v2, v5);
}

uint64_t sub_1008FA23C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release();
  return swift_task_switch(sub_1008FA29C, v1, 0);
}

uint64_t sub_1008FA29C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
     + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_1008FA318;
  return ((uint64_t (*)(void *, _QWORD))v4)(&unk_1010FD180, *(_QWORD *)(v0 + 56));
}

uint64_t sub_1008FA318()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 56);
  if (v0)
  {
    v5 = sub_1008FA388;
  }
  else
  {
    swift_release();
    v5 = sub_1000BF2F4;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1008FA388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  swift_release();
  if (qword_1010EA030 != -1)
    swift_once(&qword_1010EA030, sub_1008F4BD0);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B78E0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 48) = sub_100016940(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Records Publish error: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008FA59C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1008FA5C0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_1008F80CC(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_1008FA5C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_100A82E78(a1);
}

unint64_t sub_1008FA5D0()
{
  unint64_t result;

  result = qword_10110CB68;
  if (!qword_10110CB68)
  {
    result = swift_getWitnessTable(asc_100E43CF0, &type metadata for SubmitUTInfo);
    atomic_store(result, &qword_10110CB68);
  }
  return result;
}

unint64_t sub_1008FA614()
{
  unint64_t result;

  result = qword_10110CB78;
  if (!qword_10110CB78)
  {
    result = swift_getWitnessTable("]g$", &type metadata for WildModeAssociationRecordsPublisherError);
    atomic_store(result, &qword_10110CB78);
  }
  return result;
}

unint64_t sub_1008FA658()
{
  unint64_t result;

  result = qword_10110CB88;
  if (!qword_10110CB88)
  {
    result = swift_getWitnessTable(asc_100E43CC8, &type metadata for UTInfoPublishResponse);
    atomic_store(result, (unint64_t *)&qword_10110CB88);
  }
  return result;
}

uint64_t sub_1008FA69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008FA710()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v46 = *(_QWORD *)(v3 + 64);
  swift_release();
  v47 = (v4 + 24) & ~v4;
  v5 = v0 + v47;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v1 + v47, v6);
  v9 = v5 + v2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6))
    v8(v9, v6);
  v10 = v5 + v2[7];
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  v12 = v5 + v2[10];
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v16 = v5 + v2[11];
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v44(v16, 1, v13))
    v15(v16, v13);
  v45 = v15;
  swift_bridgeObjectRelease();
  v17 = v5 + v2[14];
  v18 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
  {
    v8(v17, v6);
    sub_10001BC14(*(_QWORD *)(v17 + *(int *)(v18 + 20)), *(_QWORD *)(v17 + *(int *)(v18 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v19 = v5 + v2[15];
  v20 = (int *)type metadata accessor for AccessoryProductInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v20 - 1) + 48))(v19, 1, v20))
  {
    v21 = v19 + v20[5];
    v22 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v19 + v20[16];
    v24 = type metadata accessor for URL(0);
    v43 = *(_QWORD *)(v24 - 8);
    v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    if (!v25(v23, 1, v24))
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v23, v24);
    v42 = v4;
    v26 = v19 + v20[17];
    if (!v25(v26, 1, v24))
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v26, v24);
    swift_bridgeObjectRelease();
    v27 = v19 + v20[20];
    v28 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28))
    {
      v41 = v1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v27 + *(int *)(v28 + 40);
      if (!v25(v29, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v29, v24);
      v30 = v27 + *(int *)(v28 + 44);
      if (!v25(v30, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v30, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v1 = v41;
    }
    swift_bridgeObjectRelease();
    v31 = (uint64_t *)(v19 + v20[23]);
    v32 = v31[1];
    v4 = v42;
    if (v32 >> 60 != 15)
      sub_10001BC14(*v31, v32);
    v33 = (uint64_t *)(v19 + v20[24]);
    v34 = v33[1];
    if (v34 >> 60 != 15)
      sub_10001BC14(*v33, v34);
    v35 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v35(v19 + v20[25], v24);
    v35(v19 + v20[26], v24);
    v35(v19 + v20[27], v24);
    v35(v19 + v20[28], v24);
    v35(v19 + v20[29], v24);
    v35(v19 + v20[30], v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35(v19 + v20[37], v24);
    v35(v19 + v20[38], v24);
    v35(v19 + v20[39], v24);
    v35(v19 + v20[40], v24);
    v35(v19 + v20[41], v24);
    v35(v19 + v20[42], v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v36 = v5 + v2[18];
  if (!v44(v36, 1, v13))
    v45(v36, v13);
  v37 = v5 + v2[19];
  if (!v44(v37, 1, v13))
    v45(v37, v13);
  v38 = (uint64_t *)(v5 + v2[20]);
  v39 = v38[1];
  if (((v39 >> 60) | 4) != 0xF)
    sub_10001BC14(*v38, v39);
  return swift_deallocObject(v1, v47 + v46, v4 | 7);
}

uint64_t sub_1008FACFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WildModeAssociationRecord(0) - 8) + 80);
  return sub_100A82EF0(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1008FAD3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1008FAD9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_1008F9D24(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1008FADD8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v44 = *(_QWORD *)(v2 + 64);
  swift_release();
  v5 = v0 + v4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v4, v6);
  v9 = v0 + v4 + v1[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6))
    v8(v9, v6);
  v10 = v5 + v1[7];
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  v12 = v5 + v1[10];
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v45 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v45(v12, v13);
  v15 = v5 + v1[11];
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v43(v15, 1, v13))
    v45(v15, v13);
  swift_bridgeObjectRelease();
  v16 = v5 + v1[14];
  v17 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v8(v16, v6);
    sub_10001BC14(*(_QWORD *)(v16 + *(int *)(v17 + 20)), *(_QWORD *)(v16 + *(int *)(v17 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v18 = v5 + v1[15];
  v19 = (int *)type metadata accessor for AccessoryProductInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v19 - 1) + 48))(v18, 1, v19))
  {
    v40 = (v3 + 24) & ~v3;
    v20 = v18 + v19[5];
    v21 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v18 + v19[16];
    v23 = type metadata accessor for URL(0);
    v42 = *(_QWORD *)(v23 - 8);
    v24 = *(unsigned int (**)(void))(v42 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v22, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v22, v23);
    v41 = v3;
    v25 = v18 + v19[17];
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v25, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v25, v23);
    swift_bridgeObjectRelease();
    v26 = v18 + v19[20];
    v27 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = v26 + *(int *)(v27 + 40);
      if (!v24())
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v23);
      v39 = v26 + *(int *)(v27 + 44);
      if (!v24())
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v39, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v28 = (uint64_t *)(v18 + v19[23]);
    v29 = v28[1];
    v3 = v41;
    if (v29 >> 60 != 15)
      sub_10001BC14(*v28, v29);
    v30 = (uint64_t *)(v18 + v19[24]);
    v31 = v30[1];
    v4 = v40;
    if (v31 >> 60 != 15)
      sub_10001BC14(*v30, v31);
    v32 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v32(v18 + v19[25], v23);
    v32(v18 + v19[26], v23);
    v32(v18 + v19[27], v23);
    v32(v18 + v19[28], v23);
    v32(v18 + v19[29], v23);
    v32(v18 + v19[30], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32(v18 + v19[37], v23);
    v32(v18 + v19[38], v23);
    v32(v18 + v19[39], v23);
    v32(v18 + v19[40], v23);
    v32(v18 + v19[41], v23);
    v32(v18 + v19[42], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v33 = v5 + v1[18];
  if (!v43(v33, 1, v13))
    v45(v33, v13);
  v34 = v5 + v1[19];
  if (!v43(v34, 1, v13))
    v45(v34, v13);
  v35 = (uint64_t *)(v5 + v1[20]);
  v36 = v35[1];
  if (((v36 >> 60) | 4) != 0xF)
    sub_10001BC14(*v35, v36);
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v44 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1008FB3F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100C75018(v0 + v2, *(void (**)(char *))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(void (**)(char *))(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1008FB460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for WildModeAssociationRecordsPublisherError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1008FB4F4 + 4 * byte_100E55009[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1008FB528 + 4 * byte_100E55004[v4]))();
}

uint64_t sub_1008FB528(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008FB530(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1008FB538);
  return result;
}

uint64_t sub_1008FB544(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1008FB54CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1008FB550(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1008FB558(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeAssociationRecordsPublisherError()
{
  return &type metadata for WildModeAssociationRecordsPublisherError;
}

unint64_t sub_1008FB578()
{
  unint64_t result;

  result = qword_10110CB90;
  if (!qword_10110CB90)
  {
    result = swift_getWitnessTable(byte_100E5511C, &type metadata for WildModeAssociationRecordsPublisherError);
    atomic_store(result, (unint64_t *)&qword_10110CB90);
  }
  return result;
}

uint64_t sub_1008FB5BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void **v31;
  id v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v57 = sub_10001A9A8(&qword_10110CE10);
  v3 = __chkstk_darwin(v57);
  v56 = (void **)((char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v55 = (_QWORD *)((char *)v45 - v6);
  __chkstk_darwin(v5);
  v54 = (char *)v45 - v7;
  v8 = type metadata accessor for CloudKitCoordinator.Deletion(0);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (!v11)
    return (uint64_t)v12;
  v45[1] = v1;
  v60 = _swiftEmptyArrayStorage;
  sub_10009B530(0, v11, 0);
  result = sub_10001D6A8(a1);
  v15 = result;
  v16 = 0;
  v17 = a1 + 64;
  v46 = a1 + 80;
  v47 = v11;
  v50 = v10;
  v51 = a1;
  v48 = v14;
  v49 = a1 + 64;
  v18 = v54;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(_BYTE *)(a1 + 32))
  {
    v21 = (unint64_t)v15 >> 6;
    if ((*(_QWORD *)(v17 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v14)
      goto LABEL_26;
    v58 = v16;
    v59 = 1 << v15;
    v22 = v57;
    v23 = (char *)v18 + *(int *)(v57 + 48);
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v15);
    v26 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = v24 + *(_QWORD *)(v27 + 72) * v15;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v29(v23, v28, v26);
    *v18 = v25;
    v30 = (uint64_t)v55;
    *v55 = v25;
    v29((char *)(v30 + *(int *)(v22 + 48)), (uint64_t)v23, v26);
    v31 = v56;
    sub_100005CF0(v30, (uint64_t)v56, &qword_10110CE10);
    v32 = v25;
    v33 = sub_100004048((uint64_t)v18, &qword_10110CE10);
    v34 = *v31;
    v35 = v50;
    v36 = CloudKitChangeSet.TombstoneInfo.recordType.getter(v33);
    CloudKitCoordinator.Deletion.init(recordType:recordID:)(v36, v37, v34);
    sub_100004048((uint64_t)v31, &qword_10110CE10);
    v12 = v60;
    if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
    {
      sub_10009B530(0, v12[2] + 1, 1);
      v12 = v60;
    }
    v39 = v12[2];
    v38 = v12[3];
    a1 = v51;
    if (v39 >= v38 >> 1)
    {
      sub_10009B530(v38 > 1, v39 + 1, 1);
      v12 = v60;
    }
    v12[2] = v39 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v52 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v39, v35, v53);
    v60 = v12;
    v19 = 1 << *(_BYTE *)(a1 + 32);
    if (v15 >= v19)
      goto LABEL_27;
    v17 = v49;
    v40 = *(_QWORD *)(v49 + 8 * v21);
    if ((v40 & v59) == 0)
      goto LABEL_28;
    LODWORD(v14) = v48;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v48)
      goto LABEL_29;
    v41 = v40 & (-2 << (v15 & 0x3F));
    if (v41)
    {
      v19 = __clz(__rbit64(v41)) | v15 & 0xFFFFFFFFFFFFFFC0;
      v20 = v47;
    }
    else
    {
      v42 = v21 + 1;
      v43 = (unint64_t)(v19 + 63) >> 6;
      v20 = v47;
      if (v21 + 1 < v43)
      {
        v44 = *(_QWORD *)(v49 + 8 * v42);
        if (v44)
        {
LABEL_22:
          v19 = __clz(__rbit64(v44)) + (v42 << 6);
        }
        else
        {
          while (v43 - 2 != v21)
          {
            v44 = *(_QWORD *)(v46 + 8 * v21++);
            if (v44)
            {
              v42 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v16 = v58 + 1;
    v15 = v19;
    if (v58 + 1 == v20)
      return (uint64_t)v12;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_1008FB994(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    v26 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    result = (_QWORD *)sub_10001D6A8(a1);
    v4 = (uint64_t)result;
    v6 = v5;
    v7 = 0;
    v8 = a1 + 64;
    v23 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v11 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_24;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_25;
      v12 = *(_QWORD *)(a1 + 56) + 16 * v4;
      v13 = *(void **)v12;
      if ((*(_BYTE *)(v12 + 8) & 1) != 0)
      {
        v25 = *(void **)v12;
        sub_1009022B8(v13, 1);
        v22 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        swift_willThrowTypedImpl(&v25, v22, &protocol self-conformance witness table for Error);
        return (_QWORD *)swift_release();
      }
      v24 = v7;
      v14 = sub_1009022B8(v13, 0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v15 = v26[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v16);
      v9 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v9)
        goto LABEL_26;
      v17 = *(_QWORD *)(v8 + 8 * v11);
      if ((v17 & (1 << v4)) == 0)
        goto LABEL_27;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_28;
      v18 = v17 & (-2 << (v4 & 0x3F));
      if (v18)
      {
        v9 = __clz(__rbit64(v18)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v10 = v23;
      }
      else
      {
        v19 = v11 + 1;
        v20 = (unint64_t)(v9 + 63) >> 6;
        v10 = v23;
        if (v11 + 1 < v20)
        {
          v21 = *(_QWORD *)(v8 + 8 * v19);
          if (v21)
          {
LABEL_19:
            v9 = __clz(__rbit64(v21)) + (v19 << 6);
          }
          else
          {
            while (v20 - 2 != v11)
            {
              v21 = *(_QWORD *)(a1 + 80 + 8 * v11++);
              if (v21)
              {
                v19 = v11 + 1;
                goto LABEL_19;
              }
            }
          }
        }
      }
      v7 = v24 + 1;
      v4 = v9;
      if (v24 + 1 == v10)
        return v26;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  return result;
}

uint64_t sub_1008FBBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = sub_10001A9A8(&qword_1010EF358);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Table(0);
  v3[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[14] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v8);
  v3[16] = swift_task_alloc(v8);
  return swift_task_switch(sub_1008FBC68, v2, 0);
}

uint64_t sub_1008FBC68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 112);
  *(_QWORD *)(v0 + 136) = v1;
  return swift_task_switch(sub_1008FBC84, v1, 0);
}

uint64_t sub_1008FBC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 144) = type metadata accessor for CloudStorageDatabase(0);
  *(_QWORD *)(v0 + 152) = sub_100006204(&qword_1010FE8B0, type metadata accessor for CloudStorageDatabase, (uint64_t)&unk_100E42748);
  Database.startup()();
  *(_QWORD *)(v0 + 160) = v1;
  if (!v1)
    return swift_task_switch(sub_1008FBD44, *(_QWORD *)(v0 + 136), 0);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008FBD44()
{
  _QWORD *v0;

  v0[21] = Database.readConnection.getter(v0[18], v0[19]);
  return swift_task_switch(sub_1008FBD88, 0, 0);
}

uint64_t sub_1008FBD88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  _QWORD *v33;

  if (v0[21])
  {
    v33 = v0 + 2;
    if (qword_1010E9C68 != -1)
      swift_once(&qword_1010E9C68, sub_10050DFF4);
    v2 = v0[14];
    v1 = v0[15];
    v3 = v0[13];
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6FD0);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    v32(v1, v4, v3);
    if (qword_1010E9C70 != -1)
      swift_once(&qword_1010E9C70, sub_10050F610);
    v31 = v0[20];
    v5 = v0[15];
    v6 = v0[16];
    v8 = v0[13];
    v7 = v0[14];
    v9 = v0[11];
    v10 = v0[12];
    v11 = v0[10];
    v12 = v0[8];
    v13 = sub_10001A9A8(&qword_1010EF3B8);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B6FE8);
    v15 = type metadata accessor for UUID(0);
    == infix<A>(_:_:)(v14, v12, v15, &protocol witness table for UUID, &protocol witness table for String);
    QueryType.filter(_:)(v10, v8, &protocol witness table for Table);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    v16 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v16(v5, v8);
    v0[5] = v8;
    v0[6] = &protocol witness table for Table;
    v17 = sub_100018F08(v33);
    v32((uint64_t)v17, v6, v8);
    sub_100017A84((uint64_t)v33);
    v18 = v0[16];
    if (!v31)
    {
      v25 = v0[15];
      v27 = v0[12];
      v26 = v0[13];
      v28 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
      dispatch thunk of _AnySequenceBox._makeIterator()(v28);
      v29 = swift_release();
      dispatch thunk of _AnyIteratorBoxBase.next()(v29);
      swift_release();
      swift_release();
      v16(v18, v26);
      swift_task_dealloc(v18);
      swift_task_dealloc(v25);
      swift_task_dealloc(v27);
      v24 = (uint64_t (*)(void))v0[1];
      return v24();
    }
    v16(v0[16], v0[13]);
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  }
  else
  {
    v19 = sub_10012C434();
    v20 = swift_allocError(&type metadata for DatabaseError, v19, 0, 0);
    *(_DWORD *)v21 = 2;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow(v20);
  }
  v22 = v0[15];
  v23 = v0[12];
  swift_task_dealloc(v0[16]);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_1008FC02C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v4 = sub_10001A9A8(&qword_1010EF358);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v3[14] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Table(0);
  v3[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[16] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v8);
  v3[18] = swift_task_alloc(v8);
  return swift_task_switch(sub_1008FC0CC, v2, 0);
}

uint64_t sub_1008FC0CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 112);
  *(_QWORD *)(v0 + 152) = v1;
  return swift_task_switch(sub_1008FC0E8, v1, 0);
}

uint64_t sub_1008FC0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 160) = type metadata accessor for CloudStorageDatabase(0);
  *(_QWORD *)(v0 + 168) = sub_100006204(&qword_1010FE8B0, type metadata accessor for CloudStorageDatabase, (uint64_t)asc_100E42748);
  Database.startup()();
  *(_QWORD *)(v0 + 176) = v1;
  if (!v1)
    return swift_task_switch(sub_1008FC1A8, *(_QWORD *)(v0 + 152), 0);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008FC1A8()
{
  _QWORD *v0;

  v0[23] = Database.readConnection.getter(v0[20], v0[21]);
  return swift_task_switch(sub_1008FC1EC, 0, 0);
}

uint64_t sub_1008FC1EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  _QWORD *v34;

  if (!*(_QWORD *)(v0 + 184))
  {
    v19 = sub_10012C434();
    v20 = swift_allocError(&type metadata for DatabaseError, v19, 0, 0);
    *(_DWORD *)v21 = 2;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow(v20);
    goto LABEL_9;
  }
  if (qword_1010E9C68 != -1)
    swift_once(&qword_1010E9C68, sub_10050DFF4);
  v34 = (_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6FD0);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v33(v2, v4, v3);
  if (qword_1010E9C88 != -1)
    swift_once(&qword_1010E9C88, sub_10050F7BC);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 120);
  v31 = *(_QWORD *)(v0 + 128);
  v32 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = sub_10001A9A8(&qword_1010EF408);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7030);
  *(_QWORD *)(v0 + 56) = v11;
  *(_QWORD *)(v0 + 64) = v12;
  v15 = sub_100006204((unint64_t *)&qword_1010EF410, (uint64_t (*)(uint64_t))&type metadata accessor for Blob, (uint64_t)&protocol conformance descriptor for Blob);
  == infix<A>(_:_:)(v14, v0 + 56, &type metadata for Data, &protocol witness table for Data, v15);
  QueryType.filter(_:)(v9, v7, &protocol witness table for Table);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  v16 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v16(v6, v7);
  *(_QWORD *)(v0 + 40) = v7;
  *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
  v17 = sub_100018F08(v34);
  v33((uint64_t)v17, v5, v7);
  sub_100017A84((uint64_t)v34);
  v18 = *(_QWORD *)(v0 + 144);
  if (v32)
  {
    v16(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
LABEL_9:
    v22 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v25 = *(_QWORD *)(v0 + 136);
  v27 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v0 + 120);
  v28 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
  v29 = dispatch thunk of _AnySequenceBox._makeIterator()(v28);
  swift_release();
  v30 = sub_100890B00(v29);
  swift_release();
  swift_release();
  v16(v18, v26);
  swift_task_dealloc(v18);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(size_t))(v0 + 8))(v30);
}

uint64_t sub_1008FC4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B78F8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B78F8);
  if (qword_1010E9CD0 != -1)
    swift_once(&qword_1010E9CD0, sub_10050FCEC);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7108);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1008FC564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  Swift::String v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  _QWORD v18[2];
  unint64_t v19;
  unint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CloudStorageStore.State(0);
  __chkstk_darwin(v6);
  v8 = (__int128 *)((char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1009021E8(v1, (uint64_t)v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, __int128 *, uint64_t))(v3 + 32))(v5, v8, v2);
      v19 = 0;
      v20 = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      v19 = 0xD00000000000002ELL;
      v20 = 0x8000000100EEADE0;
      v10 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v10);
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12 = v19;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      return 0x6E776F6E6B6E752ELL;
    }
  }
  else
  {
    sub_10000F9FC(v8, (uint64_t)&v19);
    v18[0] = 0;
    v18[1] = 0xE000000000000000;
    v13._countAndFlagsBits = 0x65696669646F6D2ELL;
    v13._object = (void *)0xEA00000000002864;
    String.append(_:)(v13);
    v14 = sub_10001A9A8(&qword_101100440);
    _print_unlocked<A, B>(_:_:)(&v19, v18, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v15._countAndFlagsBits = 41;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v12 = v18[0];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v19);
  }
  return v12;
}

uint64_t sub_1008FC770()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_1000126B0(v0 + OBJC_IVAR____TtC12searchpartyd17CloudStorageStore_state, type metadata accessor for CloudStorageStore.State);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1008FC7C4()
{
  return type metadata accessor for CloudStorageStore(0);
}

uint64_t type metadata accessor for CloudStorageStore(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110CBD0, (uint64_t)&nominal type descriptor for CloudStorageStore);
}

uint64_t sub_1008FC7E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_100E551E0;
  result = type metadata accessor for CloudStorageStore.State(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CloudStorageStore.State(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110CD18, (uint64_t)&nominal type descriptor for CloudStorageStore.State);
}

uint64_t *sub_1008FC890(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = v9;
      (**(void (***)(uint64_t *, uint64_t *))(v9 - 8))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1008FC97C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    v4 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else if (!(_DWORD)result)
  {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return result;
}

uint64_t sub_1008FC9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_QWORD *sub_1008FCAA0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for CloudStorageStore.State);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = a2[3];
      a1[3] = v7;
      a1[4] = a2[4];
      (**(void (***)(_QWORD *, _QWORD *))(v7 - 8))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void *sub_1008FCB80(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for CloudStorageStore.State);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1008FCC24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  v5[0] = "(";
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, (char *)&value witness table for () + 64, *(_QWORD *)(result - 8) + 64);
    v5[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
    return 0;
  }
  return result;
}

uint64_t sub_1008FCCAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[24];

  v40 = a1;
  v3 = sub_10001A9A8(&qword_101111940);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v41 = v5;
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v42 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - v14;
  a2 += 16;
  swift_beginAccess(a2, v43, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v17 = result;
    UUID.init()(result);
    v37 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v37(v13, v15, v9);
    v18 = v3;
    v19 = *(unsigned __int8 *)(v10 + 80);
    v35 = v6;
    v20 = (v19 + 24) & ~v19;
    v36 = v19 | 7;
    v21 = swift_allocObject(&unk_10109B988, v20 + v11, v19 | 7);
    v22 = v10;
    v39 = v10;
    v23 = v4;
    v24 = v21;
    *(_QWORD *)(v21 + 16) = v17;
    v38 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
    v38(v21 + v20, v13, v9);
    swift_retain();
    v25 = v24;
    v26 = v18;
    v34 = v18;
    v27 = v40;
    AsyncStream.Continuation.onTermination.setter(sub_100902338, v25, v18);
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v42, 1, 1, v28);
    v29 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v35, v27, v26);
    v37(v13, v15, v9);
    v30 = *(unsigned __int8 *)(v23 + 80);
    v31 = (v30 + 40) & ~v30;
    v32 = (v41 + v19 + v31) & ~v19;
    v33 = (char *)swift_allocObject(&unk_10109B9B0, v32 + v11, v36 | v30);
    *((_QWORD *)v33 + 2) = 0;
    *((_QWORD *)v33 + 3) = 0;
    *((_QWORD *)v33 + 4) = v17;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v33[v31], v29, v34);
    v38((uint64_t)&v33[v32], v13, v9);
    swift_retain();
    sub_100691AC0(v42, (uint64_t)&unk_10110CE40, (uint64_t)v33);
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v15, v9);
  }
  return result;
}

uint64_t sub_1008FCF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v5);
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = (v12 + 40) & ~v12;
  v14 = (char *)swift_allocObject(&unk_10109B9D8, v13 + v7, v12 | 7);
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_retain();
  sub_100691AC0((uint64_t)v10, (uint64_t)&unk_10110CE50, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_1008FD0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1008FD0E4, a4, 0);
}

uint64_t sub_1008FD0E4()
{
  uint64_t v0;

  sub_1008FD114(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008FD114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36[3];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010EF1B8);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v29 - v12;
  if (qword_1010EA038 != -1)
    swift_once(&qword_1010EA038, sub_1008FC4D4);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B78F8);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15 = v34(v13, a1, v7);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v31 = v11;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v33 = v1;
    v21 = v20;
    v36[0] = v20;
    v30 = a1;
    *(_DWORD *)v19 = 136446210;
    v32 = v6;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    v35 = sub_100016940(v23, v24, v36);
    v6 = v32;
    a1 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removing stateContinuation for %{public}s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v25 = v21;
    v2 = v33;
    swift_slowDealloc(v25, -1, -1);
    v26 = v19;
    v11 = v31;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }

  v34(v11, a1, v7);
  v27 = sub_10001A9A8(&qword_101111940);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v6, 1, 1, v27);
  swift_beginAccess(v2 + OBJC_IVAR____TtC12searchpartyd17CloudStorageStore_stateContinuations, v36, 33, 0);
  sub_1001003A0((uint64_t)v6, (uint64_t)v11);
  return swift_endAccess(v36);
}

uint64_t sub_1008FD40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v8 = sub_10001A9A8(&qword_10110CDF8);
  v6[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[9] = v9;
  v6[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CloudStorageStore.State(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[11] = swift_task_alloc(v10);
  v6[12] = swift_task_alloc(v10);
  return swift_task_switch(sub_1008FD4A8, a4, 0);
}

uint64_t sub_1008FD4A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[12];
  v2 = v0[5];
  sub_1008FD5CC(v0[6], v0[7]);
  v3 = v2 + OBJC_IVAR____TtC12searchpartyd17CloudStorageStore_state;
  swift_beginAccess(v3, v0 + 2, 0, 0);
  sub_1009021E8(v3, v1);
  return swift_task_switch(sub_1008FD524, 0, 0);
}

uint64_t sub_1008FD524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  sub_1009021E8(v1, v2);
  v6 = sub_10001A9A8(&qword_101111940);
  AsyncStream.Continuation.yield(_:)(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1000126B0(v1, type metadata accessor for CloudStorageStore.State);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008FD5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[3];

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF1B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  if (qword_1010EA038 != -1)
    swift_once(&qword_1010EA038, sub_1008FC4D4);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B78F8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v37 = a2;
  v17 = v36(v15, a2, v9);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(12, -1);
    v34 = a1;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v35 = v2;
    v23 = v22;
    v39[0] = v22;
    v33 = v13;
    *(_DWORD *)v21 = 136446210;
    v32 = v21 + 4;
    v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v9, v24);
    v38 = sub_100016940(v25, v26, v39);
    v13 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v32, v21 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Storing stateContinuation for %{public}s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v27 = v23;
    v3 = v35;
    swift_slowDealloc(v27, -1, -1);
    v28 = v21;
    a1 = v34;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }

  v36(v13, v37, v9);
  v29 = sub_10001A9A8(&qword_101111940);
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v8, a1, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v8, 0, 1, v29);
  swift_beginAccess(v3 + OBJC_IVAR____TtC12searchpartyd17CloudStorageStore_stateContinuations, v39, 33, 0);
  sub_1001003A0((uint64_t)v8, (uint64_t)v13);
  return swift_endAccess(v39);
}

uint64_t sub_1008FD8D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2[14] = a1;
  v2[15] = v1;
  v3 = sub_10001A9A8(&qword_10110CDF8);
  v2[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[17] = v4;
  v2[18] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101111940);
  v2[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[20] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v7);
  v2[22] = swift_task_alloc(v7);
  v8 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CloudStorageStore.State(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v8);
  v2[24] = swift_task_alloc(v8);
  return swift_task_switch(sub_1008FD9A4, v1, 0);
}

uint64_t sub_1008FD9A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  NSObject *log;
  uint64_t v51;
  os_log_type_t typea;
  os_log_type_t type[8];
  int64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;

  v1 = v0 + 14;
  v2 = v0[14];
  v3 = v0[24];
  v4 = v0[15] + OBJC_IVAR____TtC12searchpartyd17CloudStorageStore_state;
  swift_beginAccess(v4, v0 + 2, 0, 0);
  sub_1009021E8(v4, v3);
  LOBYTE(v2) = sub_100901D04(v3, v2);
  sub_1000126B0(v3, type metadata accessor for CloudStorageStore.State);
  if ((v2 & 1) == 0)
  {
    v5 = (uint64_t)(v0 + 5);
    v6 = v0 + 8;
    v56 = v0 + 12;
    if (qword_1010EA038 != -1)
LABEL_36:
      swift_once(&qword_1010EA038, sub_1008FC4D4);
    v7 = v0[23];
    v9 = v0[14];
    v8 = v0[15];
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B78F8);
    sub_1009021E8(v9, v7);
    v11 = swift_retain_n(v8, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      typea = v13;
      v14 = v0[24];
      v48 = v0[15];
      v49 = v0[23];
      log = v12;
      v15 = swift_slowAlloc(22, -1);
      v51 = swift_slowAlloc(64, -1);
      *(_DWORD *)v15 = 136315394;
      v58 = v51;
      sub_1009021E8(v4, v14);
      v16 = sub_1008FC564();
      v18 = v17;
      sub_1000126B0(v14, type metadata accessor for CloudStorageStore.State);
      v0[12] = sub_100016940(v16, v18, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v1 - 1, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease();
      swift_release_n(v48, 2);
      *(_WORD *)(v15 + 12) = 2080;
      v19 = sub_1008FC564();
      v0[13] = sub_100016940(v19, v20, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 1, v1, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v49, type metadata accessor for CloudStorageStore.State);
      _os_log_impl((void *)&_mh_execute_header, log, typea, "State: %s -> %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {
      v21 = v0[23];
      swift_release_n(v0[15], 2);
      sub_1000126B0(v21, type metadata accessor for CloudStorageStore.State);

    }
    v22 = v0;
    v23 = v0[15];
    v57 = v22;
    v24 = v22[14];
    swift_beginAccess(v4, v5, 33, 0);
    sub_10090222C(v24, v4);
    swift_endAccess(v5);
    v25 = (uint64_t *)(v23 + OBJC_IVAR____TtC12searchpartyd17CloudStorageStore_stateContinuations);
    swift_beginAccess(v23 + OBJC_IVAR____TtC12searchpartyd17CloudStorageStore_stateContinuations, v6, 0, 0);
    v26 = *v25;
    v27 = *(_QWORD *)(*v25 + 16);
    if (v27)
    {
      v28 = Logger.logObject.getter(v26);
      v29 = static os_log_type_t.default.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v30 = 134217984;
        *(v1 - 3) = v27;
        v1 -= 3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v56, v30 + 4, v30 + 12);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Publishing State change event to %ld subscribers", v30, 0xCu);
        swift_slowDealloc(v30, -1, -1);
      }

      v26 = *v25;
    }
    v0 = (_QWORD *)v57[20];
    *(_QWORD *)type = v26 + 64;
    v55 = v57[17];
    v56 = (_QWORD *)v26;
    v31 = -1;
    v32 = -1 << *(_BYTE *)(v26 + 32);
    if (-v32 < 64)
      v31 = ~(-1 << -(char)v32);
    v33 = v31 & *(_QWORD *)(v26 + 64);
    v54 = (unint64_t)(63 - v32) >> 6;
    swift_bridgeObjectRetain(v26);
    v4 = 0;
    while (1)
    {
      if (v33)
      {
        v34 = __clz(__rbit64(v33));
        v33 &= v33 - 1;
        v35 = v34 | (v4 << 6);
      }
      else
      {
        v40 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        if (v40 >= v54)
          goto LABEL_32;
        v41 = *(_QWORD *)(*(_QWORD *)type + 8 * v40);
        ++v4;
        if (!v41)
        {
          v4 = v40 + 1;
          if (v40 + 1 >= v54)
            goto LABEL_32;
          v41 = *(_QWORD *)(*(_QWORD *)type + 8 * v4);
          if (!v41)
          {
            v4 = v40 + 2;
            if (v40 + 2 >= v54)
              goto LABEL_32;
            v41 = *(_QWORD *)(*(_QWORD *)type + 8 * v4);
            if (!v41)
            {
              v4 = v40 + 3;
              if (v40 + 3 >= v54)
                goto LABEL_32;
              v41 = *(_QWORD *)(*(_QWORD *)type + 8 * v4);
              if (!v41)
              {
                v42 = v40 + 4;
                if (v42 >= v54)
                {
LABEL_32:
                  swift_release();
                  v0 = v57;
                  break;
                }
                v41 = *(_QWORD *)(*(_QWORD *)type + 8 * v42);
                if (!v41)
                {
                  while (1)
                  {
                    v4 = v42 + 1;
                    if (__OFADD__(v42, 1))
                      goto LABEL_35;
                    if (v4 >= v54)
                      goto LABEL_32;
                    v41 = *(_QWORD *)(*(_QWORD *)type + 8 * v4);
                    ++v42;
                    if (v41)
                      goto LABEL_31;
                  }
                }
                v4 = v42;
              }
            }
          }
        }
LABEL_31:
        v33 = (v41 - 1) & v41;
        v35 = __clz(__rbit64(v41)) + (v4 << 6);
      }
      v36 = v57[24];
      v37 = v57[21];
      v1 = (_QWORD *)v57[22];
      v39 = v57[18];
      v38 = v57[19];
      v6 = (_QWORD *)v57[16];
      v5 = v57[14];
      ((void (*)(_QWORD *, unint64_t, uint64_t))v0[2])(v1, v56[7] + v0[9] * v35, v38);
      ((void (*)(uint64_t, _QWORD *, uint64_t))v0[4])(v37, v1, v38);
      sub_1009021E8(v5, v36);
      AsyncStream.Continuation.yield(_:)(v36, v38);
      (*(void (**)(uint64_t, _QWORD *))(v55 + 8))(v39, v6);
      ((void (*)(uint64_t, uint64_t))v0[1])(v37, v38);
    }
  }
  v43 = v0[23];
  v45 = v0[21];
  v44 = v0[22];
  v46 = v0[18];
  swift_task_dealloc(v0[24]);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1008FDFA0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;

  v4 = type metadata accessor for SymmetricKey256(0);
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  __chkstk_darwin(v4);
  v69 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for P256PrivateKey(0);
  v71 = *(_QWORD *)(v6 - 8);
  v72 = v6;
  __chkstk_darwin(v6);
  v70 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for PeripheralConnectionMaterial(0);
  __chkstk_darwin(v73);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9C70 != -1)
    swift_once(&qword_1010E9C70, sub_10050F610);
  v10 = sub_10001A9A8(&qword_1010EF3B8);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6FE8);
  v12 = type metadata accessor for UUID(0);
  Row.subscript.getter(a2, v11, v12, &protocol witness table for UUID);
  if (qword_1010E9C98 != -1)
    swift_once(&qword_1010E9C98, sub_10050F8E4);
  v13 = sub_10001A9E8(v10, (uint64_t)qword_1011B7060);
  v14 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v81 = &a2[v14[9]];
  v76 = v12;
  Row.subscript.getter(v81, v13, v12, &protocol witness table for UUID);
  if (qword_1010E9C88 != -1)
    swift_once(&qword_1010E9C88, sub_10050F7BC);
  v75 = sub_10001A9A8(&qword_1010EF408);
  v15 = sub_10001A9E8(v75, (uint64_t)qword_1011B7030);
  Row.subscript.getter(&v79, v15, &type metadata for Data, &protocol witness table for Data);
  v16 = v79;
  v17 = v80;
  v77 = v79;
  v78 = v80;
  v18 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v18) & 1) != 0)
  {
    sub_10001BC14(v16, v17);
    v19 = sub_100902014();
    v20 = swift_allocError(&type metadata for CloudStorageStore.Error, v19, 0, 0);
    *v21 = 0;
    v21[1] = 0;
    swift_willThrow(v20);
    v22 = type metadata accessor for Row(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
    v23 = v76;
    v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v76 - 8) + 8);
    v24(a2, v76);
    return ((uint64_t (*)(char *, uint64_t))v24)(v81, v23);
  }
  else
  {
    v26 = Data.trimmed.getter(v16, v17);
    v28 = v27;
    sub_10001BC14(v16, v17);
    v29 = (uint64_t *)&a2[v14[7]];
    *v29 = v26;
    v29[1] = v28;
    v65 = v26;
    v66 = v28;
    sub_10001BBBC(v26, v28);
    if (qword_1010E9C90 != -1)
      swift_once(&qword_1010E9C90, sub_10050F850);
    v30 = sub_10001A9A8(&qword_1010FE898);
    v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B7048);
    Row.subscript.getter(&v79, v31, &type metadata for Data, &protocol witness table for Data);
    v32 = v80;
    if (v80 >> 60 == 15)
    {
      v33 = 0;
      v34 = 0xF000000000000000;
    }
    else
    {
      v35 = v79;
      if ((DataProtocol.isNull.getter(&type metadata for Data, v18) & 1) != 0)
      {
        v33 = 0;
        v34 = 0xF000000000000000;
      }
      else
      {
        v33 = Data.trimmed.getter(v35, v32);
        v34 = v36;
      }
      sub_10001EF3C(v35, v32);
    }
    v37 = (uint64_t *)&a2[v14[8]];
    *v37 = v33;
    v37[1] = v34;
    if (qword_1010E9C78 != -1)
      swift_once(&qword_1010E9C78, sub_10050F694);
    v38 = sub_10001A9A8(&qword_1010F2E50);
    v39 = sub_10001A9E8(v38, (uint64_t)qword_1011B7000);
    Row.subscript.getter(&v79, v39, &type metadata for String, &protocol witness table for String);
    v40 = v80;
    v41 = (uint64_t *)&a2[v14[5]];
    *v41 = v79;
    v41[1] = v40;
    if (qword_1010E9C80 != -1)
      swift_once(&qword_1010E9C80, sub_10050F720);
    v42 = sub_10001A9E8(v38, (uint64_t)qword_1011B7018);
    Row.subscript.getter(&v79, v42, &type metadata for String, &protocol witness table for String);
    v43 = v80;
    v44 = (uint64_t *)&a2[v14[6]];
    *v44 = v79;
    v44[1] = v43;
    if (qword_1010E9CA8 != -1)
      swift_once(&qword_1010E9CA8, sub_10050FA04);
    v45 = sub_10001A9A8(&qword_1010EF370);
    v46 = sub_10001A9E8(v45, (uint64_t)qword_1011B7090);
    Row.subscript.getter(&v79, v46, &type metadata for Int64, &protocol witness table for Int64);
    *(_QWORD *)&a2[v14[10]] = v79;
    if (qword_1010E9CA0 != -1)
      swift_once(&qword_1010E9CA0, sub_10050F970);
    v47 = sub_10001A9E8(v45, (uint64_t)qword_1011B7078);
    Row.subscript.getter(&v79, v47, &type metadata for Int64, &protocol witness table for Int64);
    *(_QWORD *)&a2[v14[11]] = v79;
    if (qword_1010E9CB0 != -1)
      swift_once(&qword_1010E9CB0, sub_10050FA94);
    v48 = sub_10001A9E8(v45, (uint64_t)qword_1011B70A8);
    Row.subscript.getter(&v79, v48, &type metadata for Int64, &protocol witness table for Int64);
    *(_QWORD *)&a2[v14[12]] = v79;
    v49 = type metadata accessor for PropertyListDecoder(0);
    v50 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
    PropertyListDecoder.init()(v50);
    if (qword_1010E9CB8 != -1)
      swift_once(&qword_1010E9CB8, sub_10050FB2C);
    v51 = sub_10001A9E8(v75, (uint64_t)qword_1011B70C0);
    Row.subscript.getter(&v79, v51, &type metadata for Data, &protocol witness table for Data);
    v52 = v79;
    v53 = v80;
    v54 = sub_100006204(&qword_1010EDAA0, type metadata accessor for PeripheralConnectionMaterial, (uint64_t)&unk_100E29008);
    v55 = v74;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v73, v52, v53, v73, v54);
    if (v55)
    {
      v56 = type metadata accessor for Row(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(a1, v56);
      sub_10001BC14(v65, v66);
      sub_10001BC14(v52, v53);
      swift_release();
      v62 = v76;
      v63 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v76 - 8) + 8);
      v63(a2, v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(*(_QWORD *)&a2[v14[7]], *(_QWORD *)&a2[v14[7] + 8]);
      sub_10001EF3C(*(_QWORD *)&a2[v14[8]], *(_QWORD *)&a2[v14[8] + 8]);
      return ((uint64_t (*)(char *, uint64_t))v63)(v81, v62);
    }
    else
    {
      swift_release();
      sub_10001BC14(v52, v53);
      sub_1000126EC((uint64_t)v9, (uint64_t)&a2[v14[13]], type metadata accessor for PeripheralConnectionMaterial);
      if (qword_1010E9CC0 != -1)
        swift_once(&qword_1010E9CC0, sub_10050FBC0);
      v57 = v75;
      v58 = sub_10001A9E8(v75, (uint64_t)qword_1011B70D8);
      Row.subscript.getter(&v79, v58, &type metadata for Data, &protocol witness table for Data);
      v59 = v70;
      P256PrivateKey.init(data:)(v79, v80);
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(&a2[v14[14]], v59, v72);
      if (qword_1010E9CC8 != -1)
        swift_once(&qword_1010E9CC8, sub_10050FC54);
      v60 = sub_10001A9E8(v57, (uint64_t)qword_1011B70F0);
      Row.subscript.getter(&v79, v60, &type metadata for Data, &protocol witness table for Data);
      v61 = v69;
      SymmetricKey256.init(data:)(v79, v80);
      v64 = type metadata accessor for Row(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(a1, v64);
      sub_10001BC14(v65, v66);
      return (*(uint64_t (**)(char *, char *, uint64_t))(v67 + 32))(&a2[v14[15]], v61, v68);
    }
  }
}

uint64_t sub_1008FE8E4()
{
  uint64_t v0;

  return swift_task_switch(sub_1008FE8F8, v0, 0);
}

uint64_t sub_1008FE8F8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  sub_10009A2F4(0, 1, 0);
  v2 = _swiftEmptyArrayStorage[2];
  v1 = _swiftEmptyArrayStorage[3];
  if (v2 >= v1 >> 1)
    sub_10009A2F4(v1 > 1, v2 + 1, 1);
  _swiftEmptyArrayStorage[2] = v2 + 1;
  v3 = &_swiftEmptyArrayStorage[2 * v2];
  v3[4] = 0xD000000000000016;
  v3[5] = 0x8000000100EC76A0;
  v4 = sub_100CA7D78((uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  v5 = sub_100509860(v4);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v5);
}

uint64_t sub_1008FE9CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for CloudKitCoordinator.Deletion(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for CloudKitStateChange(0);
  v2[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[10] = v7;
  v2[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008FEA64, v1, 0);
}

uint64_t sub_1008FEA64()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t (*v43)(uint64_t, unint64_t, uint64_t);
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;

  if (qword_1010EA038 != -1)
    swift_once(&qword_1010EA038, sub_1008FC4D4);
  v1 = v0 + 3;
  v2 = v0[3];
  v4 = v0[10];
  v3 = v0[11];
  v5 = v0[9];
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B78F8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = v0[10];
  v11 = v0[11];
  v13 = v0[9];
  v46 = v0;
  if (v10)
  {
    v44 = v0 + 2;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (char *)swift_slowAlloc(32, -1);
    v47 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_100006204(&qword_10110CE20, (uint64_t (*)(uint64_t))&type metadata accessor for CloudKitStateChange, (uint64_t)&protocol conformance descriptor for CloudKitStateChange);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    *v44 = sub_100016940(v17, v18, (uint64_t *)&v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, v1, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "ingest:stateChange %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  v19 = CloudKitStateChange.deleted.getter();
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v21 = v46;
    v22 = v46[6];
    v47 = (char *)_swiftEmptyArrayStorage;
    sub_10009B530(0, v20, 0);
    v45 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v23 = v19 + v45;
    v24 = *(_QWORD *)(v22 + 72);
    v43 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v22 + 16);
    v25 = v47;
    do
    {
      v26 = v21[7];
      v27 = v21[5];
      v28 = v43(v26, v23, v27);
      v29 = v22;
      v30 = CloudKitCoordinator.Deletion.recordType.getter(v28);
      v32 = v31;
      v33 = CloudKitCoordinator.Deletion.recordID.getter(v30);
      v34 = v30;
      v22 = v29;
      CloudKitCoordinator.Deletion.init(recordType:recordID:)(v34, v32, v33);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v26, v27);
      if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
      {
        sub_10009B530(0, *((_QWORD *)v25 + 2) + 1, 1);
        v25 = v47;
      }
      v36 = *((_QWORD *)v25 + 2);
      v35 = *((_QWORD *)v25 + 3);
      v21 = v46;
      if (v36 >= v35 >> 1)
      {
        sub_10009B530(v35 > 1, v36 + 1, 1);
        v25 = v47;
      }
      v37 = v46[8];
      v38 = v46[5];
      *((_QWORD *)v25 + 2) = v36 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(&v25[v45 + v36 * v24], v37, v38);
      v47 = v25;
      v23 += v24;
      --v20;
    }
    while (v20);
    v39 = swift_bridgeObjectRelease();
  }
  else
  {
    v39 = swift_bridgeObjectRelease();
    v25 = (char *)_swiftEmptyArrayStorage;
    v21 = v46;
  }
  v21[12] = v25;
  v40 = CloudKitStateChange.modified.getter(v39);
  v21[13] = v40;
  v41 = (_QWORD *)swift_task_alloc(dword_10110CDBC);
  v21[14] = v41;
  *v41 = v21;
  v41[1] = sub_1008FEE04;
  return sub_1008FEF30((uint64_t)v25, v40);
}

uint64_t sub_1008FEE04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1008FEECC;
  else
    v4 = sub_1008FEE68;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_1008FEE68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008FEECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008FEF30(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  v4 = type metadata accessor for UUID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1008FEF9C, v2, 0);
}

uint64_t sub_1008FEF9C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 112);
  *(_QWORD *)(v0 + 72) = v1;
  return swift_task_switch(sub_1008FEFB8, v1, 0);
}

uint64_t sub_1008FEFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for CloudStorageDatabase(0);
  v3 = sub_100006204(&qword_1010FE8B0, type metadata accessor for CloudStorageDatabase, (uint64_t)asc_100E42748);
  *(_QWORD *)(v0 + 80) = Database.writeConnection.getter(v2, v3);
  return swift_task_switch(sub_1008FF034, v1, 0);
}

uint64_t sub_1008FF034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 40);
    v18 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)(v0 + 32);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = sub_100CA7D78((uint64_t)&off_10104DD88);
    swift_arrayDestroy(&unk_10104DDA8, 1, &type metadata for String);
    v9 = (_QWORD *)swift_task_alloc(64);
    v9[2] = v7;
    v9[3] = v5;
    v9[4] = v8;
    v9[5] = v1;
    v9[6] = v6;
    v9[7] = v4;
    v10 = UUID.init()(v9);
    v11 = UUID.uuidString.getter(v10);
    v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v18);
    Connection.savepoint(_:block:)(v11, v13, sub_100902058, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc(v9);
  }
  else
  {
    v14 = sub_10012C434();
    v15 = swift_allocError(&type metadata for DatabaseError, v14, 0, 0);
    *(_DWORD *)v16 = 2;
    *(_BYTE *)(v16 + 4) = 1;
    swift_willThrow(v15);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1008FF184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  void *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  void (*v118)(unint64_t, uint64_t);
  uint64_t v119;
  uint64_t ObjectType;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  void *v132;
  uint64_t (*v133)(const char *, unint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  id v156;
  NSObject *v157;
  os_log_type_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  unint64_t v167;
  void (*v168)(unint64_t, uint64_t);
  uint64_t v169;
  uint64_t *v170;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  __n128 v177;
  const char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  void (*v196)(unint64_t, uint64_t);
  void (*v197)(char *, uint64_t, uint64_t);
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  unint64_t v204;
  char *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  __n128 v214;
  unint64_t v215;
  uint64_t (*v216)(const char *, unint64_t, uint64_t);
  uint64_t v217;
  unint64_t v218;
  const char *v219;
  _QWORD v220[4];
  uint64_t v221;

  v189 = a6;
  v200 = a4;
  v201 = a3;
  v207 = a2;
  v192 = type metadata accessor for Insert(0);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v193 = (uint64_t)&v173 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F46C0);
  v10 = __chkstk_darwin(v9);
  v188 = (char *)&v173 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v181 = (char *)&v173 - v12;
  v187 = sub_10001A9A8(&qword_1010EF358);
  v186 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v185 = (char *)&v173 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = type metadata accessor for Delete(0);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v205 = (char *)&v173 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v15);
  v199 = (char *)&v173 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v211 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v179 = (char *)&v173 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v173 - v20;
  v22 = sub_10001A9A8(&qword_10110CDC0);
  __chkstk_darwin(v22);
  v212 = (char *)&v173 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Table(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v194 = (char *)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v208 = (uint64_t)&v173 - v29;
  v30 = __chkstk_darwin(v28);
  v184 = (char *)&v173 - v31;
  __chkstk_darwin(v30);
  v214.n128_u64[0] = (unint64_t)&v173 - v32;
  v190 = type metadata accessor for CloudKitCoordinator.Deletion(0);
  v33 = __chkstk_darwin(v190);
  v34 = __chkstk_darwin(v33);
  v195 = (char *)&v173 - v35;
  __chkstk_darwin(v34);
  v219 = (char *)&v173 - v38;
  v39 = *(_QWORD *)(a1 + 16);
  v174 = a5;
  v217 = v24;
  v213 = v25;
  if (!v39)
    goto LABEL_45;
  v40 = v39;
  v178 = v37;
  v41 = a1 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  v209 = *(_QWORD *)(v36 + 72);
  v210 = v36;
  v216 = *(uint64_t (**)(const char *, unint64_t, uint64_t))(v36 + 16);
  v173 = a1;
  v42 = swift_bridgeObjectRetain(a1);
  v206 = (unint64_t)"stateContinuations";
  v204 = 0x8000000100EEADC0;
  v42.n128_u64[0] = 136315138;
  v177 = v42;
  v175 = (char *)&type metadata for Any + 8;
  v176 = &type metadata for () + 1;
  v198 = v17;
  v203 = v21;
  v43 = v190;
  v44 = v219;
  do
  {
    v218 = v41;
    v52 = v43;
    v53 = v216(v44, v41, v43);
    v55 = CloudKitCoordinator.Deletion.recordType.getter(v53);
    if (v55 == 0xD00000000000001CLL && v54 == v204
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, v206 | 0x8000000000000000, v55, v54, 0) & 1) != 0)
    {
      v56 = (uint64_t)v212;
      v57 = v217;
      if (qword_1010E9C68 != -1)
        swift_once(&qword_1010E9C68, sub_10050DFF4);
      v58 = sub_10001A9E8(v57, (uint64_t)qword_1011B6FD0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v56, v58, v57);
      v59 = 0;
    }
    else
    {
      v59 = 1;
      v56 = (uint64_t)v212;
      v57 = v217;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v56, v59, 1, v57);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v56, 1, v57) == 1)
    {
      v60 = sub_100004048(v56, &qword_10110CDC0);
      v44 = v219;
      v61 = CloudKitCoordinator.Deletion.recordType.getter(v60);
      v63 = sub_100A06590(v61, v62, v201);
      swift_bridgeObjectRelease();
      if ((v63 & 1) != 0)
      {
        v43 = v52;
        (*(void (**)(const char *, uint64_t))(v210 + 8))(v44, v52);
        goto LABEL_5;
      }
      v215 = v40;
      if (qword_1010EA038 != -1)
        swift_once(&qword_1010EA038, sub_1008FC4D4);
      v86 = type metadata accessor for Logger(0);
      sub_10001A9E8(v86, (uint64_t)qword_1011B78F8);
      v87 = v178;
      v44 = v219;
      v88 = v216(v178, (unint64_t)v219, v52);
      v89 = Logger.logObject.getter(v88);
      v43 = v52;
      v90 = static os_log_type_t.error.getter(v89);
      if (!os_log_type_enabled(v89, v90))
      {

        v91 = *(void (**)(uint64_t, uint64_t))(v210 + 8);
        v91((uint64_t)v87, v52);
LABEL_35:
        v91((uint64_t)v44, v43);
        goto LABEL_4;
      }
      v45 = swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v221 = v46;
      *(_DWORD *)v45 = v177.n128_u32[0];
      v47 = CloudKitCoordinator.Deletion.recordType.getter(v46);
      *(_QWORD *)(v45 + 4) = sub_100016940(v47, v48, &v221);
      swift_bridgeObjectRelease();
      v49 = *(void (**)(uint64_t, uint64_t))(v210 + 8);
      v49((uint64_t)v87, v43);
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "Unable to find table for %s", (uint8_t *)v45, 0xCu);
      swift_arrayDestroy(v46, 1, v175);
      v50 = v46;
      v17 = v198;
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      v49((uint64_t)v44, v43);
      goto LABEL_4;
    }
    v64 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v25 + 32))(v214.n128_u64[0], v56, v57);
    v65 = (void *)CloudKitCoordinator.Deletion.recordID.getter(v64);
    v66 = objc_msgSend(v65, "recordName");

    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v69 = v68;

    v70 = (uint64_t)v199;
    UUID.init(uuidString:)(v67, v69);
    swift_bridgeObjectRelease();
    v71 = v211;
    v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v211 + 48))(v70, 1, v17);
    v215 = v40;
    if (v72 == 1)
    {
      sub_100004048(v70, &qword_1010ED860);
      v73 = v195;
      if (qword_1010EA038 != -1)
        swift_once(&qword_1010EA038, sub_1008FC4D4);
      v74 = type metadata accessor for Logger(0);
      sub_10001A9E8(v74, (uint64_t)qword_1011B78F8);
      v44 = v219;
      v43 = v52;
      v75 = v216(v73, (unint64_t)v219, v52);
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.error.getter(v76);
      if (!os_log_type_enabled(v76, v77))
      {

        v91 = *(void (**)(uint64_t, uint64_t))(v210 + 8);
        v91((uint64_t)v73, v52);
        v25 = v213;
        (*(void (**)(unint64_t, uint64_t))(v213 + 8))(v214.n128_u64[0], v217);
        goto LABEL_35;
      }
      v78 = swift_slowAlloc(12, -1);
      v79 = swift_slowAlloc(32, -1);
      v221 = v79;
      *(_DWORD *)v78 = v177.n128_u32[0];
      v80 = (void *)CloudKitCoordinator.Deletion.recordID.getter(v79);
      v81 = objc_msgSend(v80, "recordName");

      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

      v17 = v198;
      *(_QWORD *)(v78 + 4) = sub_100016940(v82, v84, &v221);
      swift_bridgeObjectRelease();
      v85 = *(void (**)(char *, uint64_t))(v210 + 8);
      v85(v195, v43);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Record name is not a UUID: %s", (uint8_t *)v78, 0xCu);
      swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v78, -1, -1);

      v25 = v213;
      (*(void (**)(unint64_t, uint64_t))(v213 + 8))(v214.n128_u64[0], v217);
      v85((char *)v44, v43);
LABEL_4:
      v21 = v203;
      v40 = v215;
LABEL_5:
      v51 = v218;
      goto LABEL_6;
    }
    v197 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 32);
    v197(v21, v70, v17);
    if (qword_1010E9C70 != -1)
      swift_once(&qword_1010E9C70, sub_10050F610);
    v92 = sub_10001A9A8(&qword_1010EF3B8);
    v93 = sub_10001A9E8(v92, (uint64_t)qword_1011B6FE8);
    v94 = v185;
    == infix<A>(_:_:)(v93, v21, v17, &protocol witness table for UUID, &protocol witness table for String);
    v95 = v184;
    QueryType.filter(_:)(v94, v57, &protocol witness table for Table);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v94, v187);
    QueryType.delete()(v57, &protocol witness table for Table);
    v96 = *(uint64_t (**)(char *, uint64_t))(v213 + 8);
    v97 = v96(v95, v57);
    v99 = CloudKitCoordinator.Deletion.recordType.getter(v97);
    v100 = v98;
    if ((v99 != 0xD00000000000001CLL || v98 != (v206 | 0x8000000000000000))
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, v206 | 0x8000000000000000, v99, v98, 0) & 1) == 0)
    {
      v167 = sub_100902014();
      v168 = (void (*)(unint64_t, uint64_t))v96;
      v169 = swift_allocError(&type metadata for CloudStorageStore.Error, v167, 0, 0);
      *v170 = v99;
      v170[1] = v100;
      swift_willThrow(v169);
      (*(void (**)(char *, uint64_t))(v182 + 8))(v205, v183);
      (*(void (**)(char *, uint64_t))(v211 + 8))(v21, v17);
      v168(v214.n128_u64[0], v57);
      (*(void (**)(const char *, uint64_t))(v210 + 8))(v219, v52);
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v101 = v202;
    Connection.run(_:)(v205);
    v202 = v101;
    if (v101)
    {
      (*(void (**)(char *, uint64_t))(v182 + 8))(v205, v183);
      (*(void (**)(char *, uint64_t))(v211 + 8))(v21, v17);
      v96((char *)v214.n128_u64[0], v57);
      (*(void (**)(const char *, uint64_t))(v210 + 8))(v219, v52);
      return swift_bridgeObjectRelease();
    }
    v196 = (void (*)(unint64_t, uint64_t))v96;
    v102 = type metadata accessor for TaskPriority(0);
    v103 = *(_QWORD *)(v102 - 8);
    v104 = v211;
    v105 = v17;
    v106 = (uint64_t)v181;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56))(v181, 1, 1, v102);
    v107 = v179;
    (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v179, v21, v105);
    v108 = sub_100006204(&qword_10110CDD0, type metadata accessor for CloudStorageStore, (uint64_t)&unk_100E552C8);
    v109 = *(unsigned __int8 *)(v104 + 80);
    v110 = (v109 + 40) & ~v109;
    v111 = (char *)swift_allocObject(&unk_10109B938, v110 + v180, v109 | 7);
    v112 = v207;
    *((_QWORD *)v111 + 2) = v207;
    *((_QWORD *)v111 + 3) = v108;
    *((_QWORD *)v111 + 4) = v112;
    v197(&v111[v110], (uint64_t)v107, v105);
    v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v106, 1, v102);
    v114 = swift_retain_n(v112, 2);
    if (v113 == 1)
    {
      sub_100004048(v106, &qword_1010F46C0);
      v115 = 0;
    }
    else
    {
      v116 = TaskPriority.rawValue.getter(v114);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v106, v102);
      v115 = v116;
    }
    v40 = v215;
    v117 = *((_QWORD *)v111 + 2);
    v43 = v190;
    v118 = v196;
    if (v117)
    {
      v119 = *((_QWORD *)v111 + 3);
      ObjectType = swift_getObjectType(*((_QWORD *)v111 + 2));
      swift_unknownObjectRetain(v117);
      v121 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v119);
      v123 = v122;
      swift_unknownObjectRelease(v117);
    }
    else
    {
      v121 = 0;
      v123 = 0;
    }
    v25 = v213;
    v124 = swift_allocObject(&unk_10109B960, 32, 7);
    *(_QWORD *)(v124 + 16) = &unk_10110CDE8;
    *(_QWORD *)(v124 + 24) = v111;
    if (v123 | v121)
    {
      v220[0] = 0;
      v220[1] = 0;
      v125 = v220;
      v220[2] = v121;
      v220[3] = v123;
    }
    else
    {
      v125 = 0;
    }
    v21 = v203;
    v51 = v218;
    swift_task_create(v115 | 0x1C00, v125, v176, &unk_1010EE4A0, v124);
    swift_release();
    (*(void (**)(char *, uint64_t))(v182 + 8))(v205, v183);
    v17 = v198;
    (*(void (**)(char *, uint64_t))(v211 + 8))(v21, v198);
    v118(v214.n128_u64[0], v217);
    v44 = v219;
    (*(void (**)(const char *, uint64_t))(v210 + 8))(v219, v43);
LABEL_6:
    v41 = v51 + v209;
    --v40;
  }
  while (v40);
  swift_bridgeObjectRelease();
  a5 = v174;
  v24 = v217;
LABEL_45:
  v126 = v202;
  if ((unint64_t)a5 >> 62)
    goto LABEL_80;
  v127 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
  v128 = swift_bridgeObjectRetain(a5);
LABEL_47:
  if (v127)
  {
    v129 = 4;
    v218 = a5 & 0xC000000000000001;
    v219 = "stateContinuations";
    v215 = 0x8000000100EEADC0;
    v128.n128_u64[0] = 136315138;
    v214 = v128;
    v212 = (char *)&type metadata for Any + 8;
    v216 = (uint64_t (*)(const char *, unint64_t, uint64_t))v127;
    do
    {
      v130 = a5;
      if (v218)
        v131 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v129 - 4, a5);
      else
        v131 = *(id *)(a5 + 8 * v129);
      v132 = v131;
      v133 = (uint64_t (*)(const char *, unint64_t, uint64_t))(v129 - 3);
      if (__OFADD__(v129 - 4, 1))
      {
        __break(1u);
LABEL_80:
        if (a5 < 0)
          v172 = a5;
        else
          v172 = a5 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a5);
        v127 = _CocoaArrayWrapper.endIndex.getter(v172);
        goto LABEL_47;
      }
      v135 = CKRecord.recordType.getter(v131);
      if (v135 == 0xD00000000000001CLL && v134 == v215)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v136 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, (unint64_t)v219 | 0x8000000000000000, v135, v134, 0);
        v137 = swift_bridgeObjectRelease();
        if ((v136 & 1) == 0)
        {
          v152 = CKRecord.recordType.getter(v137);
          v154 = sub_100A06590(v152, v153, v201);
          swift_bridgeObjectRelease();
          if ((v154 & 1) != 0)
          {

          }
          else
          {
            v202 = v126;
            if (qword_1010EA038 != -1)
              swift_once(&qword_1010EA038, sub_1008FC4D4);
            v155 = type metadata accessor for Logger(0);
            sub_10001A9E8(v155, (uint64_t)qword_1011B78F8);
            v156 = v132;
            v157 = Logger.logObject.getter(v156);
            v158 = static os_log_type_t.error.getter(v157);
            if (os_log_type_enabled(v157, v158))
            {
              v159 = swift_slowAlloc(12, -1);
              v160 = swift_slowAlloc(32, -1);
              v221 = v160;
              *(_DWORD *)v159 = v214.n128_u32[0];
              v161 = CKRecord.recordType.getter(v160);
              *(_QWORD *)(v159 + 4) = sub_100016940(v161, v162, &v221);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v157, v158, "Unable to find table for %s", (uint8_t *)v159, 0xCu);
              swift_arrayDestroy(v160, 1, v212);
              v163 = v160;
              v24 = v217;
              v130 = v174;
              swift_slowDealloc(v163, -1, -1);
              swift_slowDealloc(v159, -1, -1);

            }
            else
            {

            }
            v126 = v202;
          }
          goto LABEL_50;
        }
      }
      if (qword_1010E9C68 != -1)
        swift_once(&qword_1010E9C68, sub_10050DFF4);
      v138 = sub_10001A9E8(v24, (uint64_t)qword_1011B6FD0);
      v139 = v194;
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v194, v138, v24);
      v140 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v208, v139, v24);
      v142 = CKRecord.recordType.getter(v140);
      v143 = v141;
      if ((v142 != 0xD00000000000001CLL || v141 != ((unint64_t)v219 | 0x8000000000000000))
        && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, (unint64_t)v219 | 0x8000000000000000, v142, v141, 0) & 1) == 0)
      {
        v164 = sub_100902014();
        v165 = swift_allocError(&type metadata for CloudStorageStore.Error, v164, 0, 0);
        *v166 = v142;
        v166[1] = v143;
        swift_willThrow(v165);

        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v208, v24);
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v144 = v193;
      sub_1009006D4(v208, v132, v193);
      if (v126)
      {

        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v208, v217);
        return swift_bridgeObjectRelease();
      }
      Connection.run(_:)(v144);
      v126 = 0;
      v145 = type metadata accessor for TaskPriority(0);
      v146 = v188;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 56))(v188, 1, 1, v145);
      v147 = sub_100006204(&qword_10110CDD0, type metadata accessor for CloudStorageStore, (uint64_t)&unk_100E552C8);
      v148 = (_QWORD *)swift_allocObject(&unk_10109B910, 56, 7);
      v149 = v207;
      v148[2] = v207;
      v148[3] = v147;
      v148[4] = v132;
      v148[5] = v149;
      v148[6] = v189;
      swift_retain_n(v149, 2);
      v150 = v132;
      v151 = (uint64_t)v146;
      v25 = v213;
      sub_100626BC4(v151, (uint64_t)&unk_10110CDD8, (uint64_t)v148);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v144, v192);
      v24 = v217;
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v208, v217);
LABEL_50:
      ++v129;
      a5 = v130;
    }
    while (v133 != v216);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100900584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v7 = type metadata accessor for CloudStorageStore.State(0);
  v5[4] = v7;
  v5[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009005E4, a4, 0);
}

uint64_t sub_1009005E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[4];
  v2 = v0[5];
  v3 = v0[3];
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v2, v3, v4);
  swift_storeEnumTagMultiPayload(v2, v1, 1);
  v5 = (_QWORD *)swift_task_alloc(dword_10110CDF4);
  v0[6] = v5;
  *v5 = v0;
  v5[1] = sub_100900674;
  return sub_1008FD8D4(v0[5]);
}

uint64_t sub_100900674()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  sub_1000126B0(v1, type metadata accessor for CloudStorageStore.State);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1009006D4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;

  v7 = type metadata accessor for OnConflict(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A94FC(a2, v13);
  if (!v3)
  {
    v71 = a3;
    v73 = a1;
    v14 = type metadata accessor for PropertyListEncoder(0);
    v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    PropertyListEncoder.init()(v15);
    v16 = &v13[v11[13]];
    v17 = type metadata accessor for PeripheralConnectionMaterial(0);
    v18 = sub_100006204((unint64_t *)&unk_1010EDA60, type metadata accessor for PeripheralConnectionMaterial, (uint64_t)&unk_100E28FE0);
    *(_QWORD *)&v70 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v16, v17, v18);
    *((_QWORD *)&v70 + 1) = v19;
    v66 = 0;
    swift_release();
    v20 = (uint64_t *)&v13[v11[8]];
    v22 = *v20;
    v21 = v20[1];
    if (v21 >> 60 == 15)
      v23 = 0;
    else
      v23 = *v20;
    v24 = 0xF000000000000000;
    if (v21 >> 60 != 15)
      v24 = v21;
    v61 = v24;
    v62 = v23;
    v67 = v10;
    v68 = v8;
    v25 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
    v69 = v7;
    v25(v10, enum case for OnConflict.replace(_:), v7);
    v26 = sub_10001A9A8(&qword_1010EF388);
    v27 = type metadata accessor for Setter(0);
    v28 = swift_allocObject(v26, ((*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80))+ 12 * *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) | 7);
    *(_OWORD *)(v28 + 16) = xmmword_100E55190;
    v63 = v28;
    v64 = v21;
    v65 = v22;
    sub_10001BD08(v22, v21);
    if (qword_1010E9C70 != -1)
      swift_once(&qword_1010E9C70, sub_10050F610);
    v29 = sub_10001A9A8(&qword_1010EF3B8);
    v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B6FE8);
    v31 = type metadata accessor for UUID(0);
    <- infix<A>(_:_:)(v30, v13, v31, &protocol witness table for UUID);
    if (qword_1010E9C78 != -1)
      swift_once(&qword_1010E9C78, sub_10050F694);
    v32 = sub_10001A9A8(&qword_1010F2E50);
    v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B7000);
    v34 = &v13[v11[5]];
    v36 = *(_QWORD *)v34;
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)&v72 = v36;
    *((_QWORD *)&v72 + 1) = v35;
    <- infix<A>(_:_:)(v33, &v72, &type metadata for String, &protocol witness table for String);
    if (qword_1010E9C80 != -1)
      swift_once(&qword_1010E9C80, sub_10050F720);
    v37 = sub_10001A9E8(v32, (uint64_t)qword_1011B7018);
    v38 = &v13[v11[6]];
    v40 = *(_QWORD *)v38;
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)&v72 = v40;
    *((_QWORD *)&v72 + 1) = v39;
    <- infix<A>(_:_:)(v37, &v72, &type metadata for String, &protocol witness table for String);
    if (qword_1010E9C88 != -1)
      swift_once(&qword_1010E9C88, sub_10050F7BC);
    v41 = sub_10001A9A8(&qword_1010EF408);
    v42 = sub_10001A9E8(v41, (uint64_t)qword_1011B7030);
    v72 = *(_OWORD *)&v13[v11[7]];
    <- infix<A>(_:_:)(v42, &v72, &type metadata for Data, &protocol witness table for Data);
    if (qword_1010E9C90 != -1)
      swift_once(&qword_1010E9C90, sub_10050F850);
    v43 = sub_10001A9A8(&qword_1010FE898);
    v44 = sub_10001A9E8(v43, (uint64_t)qword_1011B7048);
    *(_QWORD *)&v72 = v62;
    *((_QWORD *)&v72 + 1) = v61;
    <- infix<A>(_:_:)(v44, &v72, &type metadata for Data, &protocol witness table for Data);
    if (qword_1010E9C98 != -1)
      swift_once(&qword_1010E9C98, sub_10050F8E4);
    v45 = sub_10001A9E8(v29, (uint64_t)qword_1011B7060);
    <- infix<A>(_:_:)(v45, &v13[v11[9]], v31, &protocol witness table for UUID);
    if (qword_1010E9CA8 != -1)
      swift_once(&qword_1010E9CA8, sub_10050FA04);
    v46 = sub_10001A9A8(&qword_1010EF370);
    v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B7090);
    *(_QWORD *)&v72 = *(_QWORD *)&v13[v11[10]];
    <- infix<A>(_:_:)(v47, &v72, &type metadata for Int64, &protocol witness table for Int64);
    if (qword_1010E9CA0 != -1)
      swift_once(&qword_1010E9CA0, sub_10050F970);
    v48 = sub_10001A9E8(v46, (uint64_t)qword_1011B7078);
    *(_QWORD *)&v72 = *(_QWORD *)&v13[v11[11]];
    <- infix<A>(_:_:)(v48, &v72, &type metadata for Int64, &protocol witness table for Int64);
    if (qword_1010E9CB0 != -1)
      swift_once(&qword_1010E9CB0, sub_10050FA94);
    v49 = sub_10001A9E8(v46, (uint64_t)qword_1011B70A8);
    *(_QWORD *)&v72 = *(_QWORD *)&v13[v11[12]];
    <- infix<A>(_:_:)(v49, &v72, &type metadata for Int64, &protocol witness table for Int64);
    if (qword_1010E9CB8 != -1)
      swift_once(&qword_1010E9CB8, sub_10050FB2C);
    v50 = sub_10001A9E8(v41, (uint64_t)qword_1011B70C0);
    v72 = v70;
    <- infix<A>(_:_:)(v50, &v72, &type metadata for Data, &protocol witness table for Data);
    if (qword_1010E9CC0 != -1)
      swift_once(&qword_1010E9CC0, sub_10050FBC0);
    v51 = sub_10001A9E8(v41, (uint64_t)qword_1011B70D8);
    v52 = P256PrivateKey.data.getter(v51);
    v54 = v53;
    *(_QWORD *)&v72 = v52;
    *((_QWORD *)&v72 + 1) = v53;
    <- infix<A>(_:_:)(v51, &v72, &type metadata for Data, &protocol witness table for Data);
    sub_10001BC14(v52, v54);
    if (qword_1010E9CC8 != -1)
      swift_once(&qword_1010E9CC8, sub_10050FC54);
    v55 = sub_10001A9E8(v41, (uint64_t)qword_1011B70F0);
    v56 = SymmetricKey256.data.getter(v55);
    v58 = v57;
    *(_QWORD *)&v72 = v56;
    *((_QWORD *)&v72 + 1) = v57;
    <- infix<A>(_:_:)(v55, &v72, &type metadata for Data, &protocol witness table for Data);
    sub_10001BC14(v56, v58);
    v59 = type metadata accessor for Table(0);
    v60 = v67;
    QueryType.insert(or:_:)(v67, v63, v59, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v65, v64);
    sub_10001BC14(v70, *((unint64_t *)&v70 + 1));
    (*(void (**)(char *, uint64_t))(v68 + 8))(v60, v69);
    sub_1000126B0((uint64_t)v13, type metadata accessor for LocalFindableAccessoryRecord);
  }
}

uint64_t sub_100900EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[23] = a4;
  v5[24] = a5;
  v7 = type metadata accessor for CloudStorageStore.State(0);
  v5[25] = v7;
  v5[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v5[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v5[28] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[29] = v10;
  v5[30] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100900F58, a5, 0);
}

uint64_t sub_100900F58()
{
  uint64_t v0;
  _QWORD *v1;

  sub_1000A94FC(*(id *)(v0 + 184), *(char **)(v0 + 240));
  v1 = (_QWORD *)swift_task_alloc(dword_10110CD9C);
  *(_QWORD *)(v0 + 248) = v1;
  *v1 = v0;
  v1[1] = sub_100901008;
  return sub_1008FBBC8(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
}

uint64_t sub_100901008()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100901450;
  else
    v4 = sub_10090106C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 192), 0);
}

uint64_t sub_10090106C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 232) + 48))(v2, 1, v1);
  v4 = *(_QWORD *)(v0 + 240);
  if (v3 == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 240), type metadata accessor for LocalFindableAccessoryRecord);
    sub_100004048(v2, (uint64_t *)&unk_1010EDC50);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_QWORD *)(v0 + 88) = 0;
  }
  else
  {
    *(_QWORD *)(v0 + 80) = v1;
    *(_QWORD *)(v0 + 88) = sub_100006204(&qword_10110CDA8, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E26158);
    v5 = sub_100018F08((_QWORD *)(v0 + 56));
    sub_1000126EC(v2, (uint64_t)v5, type metadata accessor for LocalFindableAccessoryRecord);
    sub_1000126B0(v4, type metadata accessor for LocalFindableAccessoryRecord);
  }
  sub_100005CF0(v0 + 56, v0 + 16, &qword_10110CE08);
  sub_100902270(v0 + 16, v0 + 136);
  if (*(_QWORD *)(v0 + 160))
  {
    v7 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 208);
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
    sub_100030784(v0 + 96, v6);
    swift_storeEnumTagMultiPayload(v6, v7, 0);
    v8 = (_QWORD *)swift_task_alloc(dword_10110CDF4);
    *(_QWORD *)(v0 + 264) = v8;
    *v8 = v0;
    v8[1] = sub_100901380;
    return sub_1008FD8D4(*(_QWORD *)(v0 + 208));
  }
  else
  {
    sub_100004048(v0 + 136, &qword_10110CE08);
    if (qword_1010EA038 != -1)
      swift_once(&qword_1010EA038, sub_1008FC4D4);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B78F8);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v18 = v15;
      *(_DWORD *)v14 = 136315138;
      *(_QWORD *)(v0 + 176) = sub_100016940(0xD000000000000019, 0x8000000100EE52C0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v14 + 4, v14 + 12);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to convert %s to CloudBacked!", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }

    sub_100004048(v0 + 16, &qword_10110CE08);
    v16 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v17);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100901380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  sub_1000126B0(v1, type metadata accessor for CloudStorageStore.State);
  return swift_task_switch(sub_1009013EC, v2, 0);
}

uint64_t sub_1009013EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  sub_100004048(v0 + 16, &qword_10110CE08);
  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100901450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000126B0(*(_QWORD *)(v0 + 240), type metadata accessor for LocalFindableAccessoryRecord);
  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009014B0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1009014C8, v0, 0);
}

uint64_t sub_1009014C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1010EA038 != -1)
    swift_once(&qword_1010EA038, sub_1008FC4D4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B78F8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Purging DB", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  v7 = *(_QWORD *)(v6 + 112);
  *(_QWORD *)(v0 + 24) = v7;
  return swift_task_switch(sub_1009015B8, v7, 0);
}

uint64_t sub_1009015B8()
{
  uint64_t v0;

  type metadata accessor for CloudStorageDatabase(0);
  sub_100006204(&qword_1010FE8B0, type metadata accessor for CloudStorageDatabase, (uint64_t)asc_100E42748);
  Database.purge()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100901634(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE v20[40];
  uint64_t v21;

  v5 = CKRecord.recordType.getter(a1);
  v7 = v6;
  v8 = sub_10001A9A8(&qword_10110CDA0);
  *(_OWORD *)(swift_initStackObject(v8, v20) + 16) = xmmword_100E22B00;
  if (v5 == 0xD00000000000001CLL && v7 == 0x8000000100EEADC0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_5;
  }
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EEADC0, v5, v7, 0);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v9 & 1) != 0)
  {
LABEL_5:
    *(_QWORD *)(a2 + 24) = type metadata accessor for LocalFindableAccessoryRecord(0);
    *(_QWORD *)(a2 + 32) = sub_100006204(&qword_10110CDA8, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E26158);
    v10 = (char *)sub_100018F08((_QWORD *)a2);
    sub_1000A94FC(a1, v10);
    if (v2)
      sub_1000583A4((_QWORD *)a2);
    return;
  }
  if (qword_1010EA038 != -1)
    swift_once(&qword_1010EA038, sub_1008FC4D4);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B78F8);
  v12 = a1;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v21 = v16;
    *(_DWORD *)v15 = 136446210;
    v17 = CKRecord.recordType.getter(v16);
    v19 = sub_100016940(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v15 + 4, v15 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unexpected recordType: %{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
}

uint64_t sub_1009018EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110CE2C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000D9CC0;
  return swift_task_switch(sub_1008FE8F8, v0, 0);
}

uint64_t sub_100901944()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
  return v1;
}

uint64_t sub_100901970(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10110CE1C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return sub_1008FE9CC(a1);
}

uint64_t sub_1009019BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_1009019D8, v2, 0);
}

uint64_t sub_1009019D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[4];
  v2 = CloudKitChangeSet.recordIDsToDelete.getter();
  v3 = sub_1008FB5BC(v2);
  v0[6] = v3;
  swift_bridgeObjectRelease();
  v4 = sub_1008FB994(v1);
  v0[7] = v4;
  v5 = (uint64_t)v4;
  v6 = (_QWORD *)swift_task_alloc(dword_10110CDBC);
  v0[8] = v6;
  *v6 = v0;
  v6[1] = sub_100901AAC;
  return sub_1008FEF30(v3, v5);
}

uint64_t sub_100901AAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100901B4C;
  else
    v4 = sub_100901B10;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), 0);
}

uint64_t sub_100901B10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100901B4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100901B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10110CDBC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return sub_1008FEF30(a1, a2);
}

uint64_t sub_100901BE4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100901BFC, v0, 0);
}

uint64_t sub_100901BFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  *(_QWORD *)(v0 + 24) = v1;
  return swift_task_switch(sub_100901C18, v1, 0);
}

uint64_t sub_100901C18()
{
  uint64_t v0;

  type metadata accessor for CloudStorageDatabase(0);
  sub_100006204(&qword_1010FE8B0, type metadata accessor for CloudStorageDatabase, (uint64_t)asc_100E42748);
  Database.startup()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100901C94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110CDB4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004C28;
  v2[2] = v0;
  return swift_task_switch(sub_1009014C8, v0, 0);
}

void sub_100901CF0(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100901634(a1, a2);
}

uint64_t sub_100901D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 *v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v32 - v8;
  v10 = type metadata accessor for CloudStorageStore.State(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (__int128 *)((char *)&v32 - v14);
  v16 = sub_10001A9A8(&qword_10110CE00);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (__int128 *)&v19[*(int *)(v17 + 48)];
  sub_1009021E8(a1, (uint64_t)v19);
  sub_1009021E8(a2, (uint64_t)v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v10);
  if (!EnumCaseMultiPayload)
  {
    sub_1009021E8((uint64_t)v19, (uint64_t)v15);
    if (!swift_getEnumCaseMultiPayload(v20, v10))
    {
      sub_10000F9FC(v15, (uint64_t)v37);
      sub_10000F9FC(v20, (uint64_t)v34);
      v26 = v38;
      v27 = v39;
      sub_10001AA44(v37, v38);
      dispatch thunk of CloudBacked.id.getter(v26, v27);
      v28 = v35;
      v29 = v36;
      sub_10001AA44(v34, v35);
      dispatch thunk of CloudBacked.id.getter(v28, v29);
      v24 = static UUID.== infix(_:_:)(v9, v7);
      v30 = *(void (**)(char *, uint64_t))(v33 + 8);
      v30(v7, v4);
      v30(v9, v4);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
      goto LABEL_12;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_1009021E8((uint64_t)v19, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload(v20, v10) == 1)
    {
      v22 = v33;
      v23 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v23(v9, v13, v4);
      v23(v7, (char *)v20, v4);
      v24 = static UUID.== infix(_:_:)(v9, v7);
      v25 = *(void (**)(char *, uint64_t))(v22 + 8);
      v25(v7, v4);
      v25(v9, v4);
LABEL_12:
      sub_1000126B0((uint64_t)v19, type metadata accessor for CloudStorageStore.State);
      return v24 & 1;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v4);
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload(v20, v10) != 2)
  {
LABEL_10:
    sub_100004048((uint64_t)v19, &qword_10110CE00);
    v24 = 0;
    return v24 & 1;
  }
  sub_1000126B0((uint64_t)v19, type metadata accessor for CloudStorageStore.State);
  v24 = 1;
  return v24 & 1;
}

unint64_t sub_100902014()
{
  unint64_t result;

  result = qword_10110CD90;
  if (!qword_10110CD90)
  {
    result = swift_getWitnessTable("\th$", &type metadata for CloudStorageStore.Error);
    atomic_store(result, &qword_10110CD90);
  }
  return result;
}

uint64_t sub_100902058()
{
  uint64_t *v0;

  return sub_1008FF184(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_100902078()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1009020AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10110CDCC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004C28;
  return sub_100900EAC(a1, v4, v5, v6, v7);
}

uint64_t sub_100902130(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10110CDE4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_100900584(a1, v5, v6, v7, v8);
}

uint64_t sub_1009021C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009021E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudStorageStore.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10090222C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudStorageStore.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100902270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_10110CE08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_1009022B8(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

uint64_t sub_1009022C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100902338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1008FCF88(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_100902378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_10001A9A8(&qword_101111940);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100902440(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_101111940) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc(dword_10110CE3C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  return sub_1008FD40C(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_100902504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_10110CE4C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004C28;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_1008FD0E4, v3, 0);
}

uint64_t getEnumTagSinglePayload for CloudStorageStore.Error(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CloudStorageStore.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageStore.Error()
{
  return &type metadata for CloudStorageStore.Error;
}

uint64_t sub_100902634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7910);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7910);
  if (qword_1010EA048 != -1)
    swift_once(&qword_1010EA048, sub_1009063C4);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7928);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_1009026C4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  swift_defaultActor_initialize(v2);
  v2[14] = 0xD000000000000017;
  v2[15] = 0x8000000100E55360;
  v2[17] = 0;
  v2[18] = 0;
  v2[19] = _swiftEmptyArrayStorage;
  if (!a1)
  {
    v4 = type metadata accessor for StandaloneBeaconDatabase(0);
    a1 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    *(_DWORD *)(a1 + 16) = 1;
    v5 = sub_10001A9A8(&qword_1010FAAF0);
    v6 = swift_allocObject(v5, 20, 7);
    *(_DWORD *)(v6 + 16) = 0;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 40) = 0;
    Table.init(_:database:)(0xD000000000000010, 0x8000000100EDD1F0, 0, 0);
    *(_WORD *)(a1 + 32) = 256;
    if (qword_1010E9D70 != -1)
      swift_once(&qword_1010E9D70, sub_1006162F4);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1011014E8);
    sub_1001F6078(v8);
  }
  v2[16] = a1;
  return v2;
}

uint64_t sub_1009027F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for StandaloneBeaconService.BeaconStreamChange(0);
  v5[4] = v6;
  v5[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_10110CE8C);
  v5[6] = v7;
  *v7 = v5;
  v7[1] = sub_100902860;
  return sub_100903754();
}

uint64_t sub_100902860()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_1009028D4, *(_QWORD *)(v3 + 16), 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1009028D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 16);
  sub_10005972C(*(_QWORD *)(v0 + 24), v1, type metadata accessor for StandaloneBeacon);
  swift_storeEnumTagMultiPayload(v1, v2, 0);
  type metadata accessor for Transaction(0);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v1;
  static Transaction.named<A>(_:with:)("StandaloneBeaconService.BeaconStreamChange", 42, 2, sub_100906824, v4, &type metadata for () + 1);
  swift_task_dealloc(v4);
  sub_1000126B0(v1, type metadata accessor for StandaloneBeaconService.BeaconStreamChange);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009029A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for StandaloneBeaconService.BeaconStreamChange(0);
  v5[4] = v6;
  v5[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_10110CE8C);
  v5[6] = v7;
  *v7 = v5;
  v7[1] = sub_100902A14;
  return sub_100903754();
}

uint64_t sub_100902A14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_100902A88, *(_QWORD *)(v3 + 16), 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100902A88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v1, v3, v5);
  swift_storeEnumTagMultiPayload(v1, v2, 1);
  type metadata accessor for Transaction(0);
  v6 = swift_task_alloc(32);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v1;
  static Transaction.named<A>(_:with:)("StandaloneBeaconService.BeaconStreamChange", 42, 2, sub_1009064BC, v6, &type metadata for () + 1);
  swift_task_dealloc(v6);
  sub_1000126B0(v1, type metadata accessor for StandaloneBeaconService.BeaconStreamChange);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100902B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for StandaloneBeaconService.BeaconStreamChange(0);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_10110D0B0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_10110D0B8);
  v26 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = *(_QWORD *)(a2 + 152);
  v17 = *(_QWORD *)(result + 16);
  if (v17)
  {
    v18 = *(unsigned __int8 *)(v26 + 80);
    v25 = v10;
    v19 = result + ((v18 + 32) & ~v18);
    v20 = *(_QWORD *)(v26 + 72);
    v23[1] = v3;
    v24 = v20;
    v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v26 + 16);
    v23[0] = result;
    v22 = swift_bridgeObjectRetain(result);
    do
    {
      v21(v15, v19, v13, v22);
      sub_10005972C(a3, (uint64_t)v8, type metadata accessor for StandaloneBeaconService.BeaconStreamChange);
      AsyncStream.Continuation.yield(_:)(v8, v13);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v9);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
      v19 += v24;
      --v17;
    }
    while (v17);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100902D18()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  *(_QWORD *)(v1 + 144) = *v0;
  return swift_task_switch(sub_100902D38, v0, 0);
}

uint64_t sub_100902D38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t (__cdecl *v5)();

  v1 = swift_allocObject(&unk_10109BBD0, 32, 7);
  *(_QWORD *)(v0 + 152) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 136);
  v2 = qword_1010EA5B0;
  swift_retain();
  if (v2 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v5 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC40 + dword_1010EBC40);
    v4 = (_QWORD *)swift_task_alloc(unk_1010EBC44);
    *(_QWORD *)(v0 + 160) = v4;
    *v4 = v0;
    v4[1] = sub_100902E44;
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100902E44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100902EA4, v3, 0);
}

uint64_t sub_100902EA4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 152);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = (_QWORD *)swift_allocObject(&unk_10109BBF8, 40, 7);
    *(_QWORD *)(v0 + 176) = v4;
    v4[2] = v2;
    v4[3] = sub_100906604;
    v4[4] = v3;
    v5 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    swift_retain();
    v6 = (_QWORD *)swift_task_alloc(v5);
    *(_QWORD *)(v0 + 184) = v6;
    *v6 = v0;
    v6[1] = sub_100903044;
    return unsafeBlocking<A>(_:)(v6, sub_100906618, v4, &type metadata for () + 1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA040 != -1)
      swift_once(&qword_1010EA040, sub_100902634);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7910);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing BeaconStore!", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100903044()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_task_switch(sub_1009030A4, v1, 0);
}

uint64_t sub_1009030A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 120) = sub_10001EDD0();
  v4 = swift_allocObject(&unk_10109BC20, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_100906604;
  *(_QWORD *)(v4 + 24) = v2;
  swift_retain();
  v5 = sub_10001A9A8(&qword_1010EE3E0);
  v6 = sub_1000193A4(&qword_1010EE3E8, &qword_1010EE3E0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v7 = Publisher<>.sink(receiveValue:)(sub_100906680, v4, v5, v6);
  swift_release();
  swift_release();
  *(_QWORD *)(v3 + 136) = v7;
  swift_release();
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
  v8 = swift_allocObject(&unk_10109BC48, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_100906604;
  *(_QWORD *)(v8 + 24) = v2;
  swift_retain();
  swift_retain();
  v9 = sub_10001A9A8((uint64_t *)&unk_101105980);
  v10 = sub_1000193A4(&qword_1010F5FB8, (uint64_t *)&unk_101105980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v11 = Publisher<>.sink(receiveValue:)(sub_1009066A8, v8, v9, v10);
  swift_release();
  swift_release();
  *(_QWORD *)(v3 + 144) = v11;
  swift_release();
  sub_100903260(v3, v13);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100903260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Transaction(0);
  v4 = swift_allocObject(&unk_10109BC70, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_retain(a1);
  static Transaction.asyncTask(name:block:)("PublishBeaconsToDaemon", 22, 2, &unk_10110D0E0, v4);
  return swift_release(v4);
}

uint64_t sub_1009032E0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110CE8C);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_100903328;
  return sub_100903754();
}

uint64_t sub_100903328()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100903394, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100903394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  if (qword_1010EA040 != -1)
    swift_once(&qword_1010EA040, sub_100902634);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7910);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 64);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 48) = sub_100016940(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to publish beacons to key store: %{public}s.", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 64));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100903584(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t *a4, void (*a5)(_QWORD *, _BYTE *))
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v18[40];
  _QWORD v19[5];

  v9 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v9);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v12);
  v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100030784(a1, (uint64_t)v19);
  v15 = sub_10001A9A8(a4);
  if (swift_dynamicCast(v14, v19, v15, v12, 6))
  {
    sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    sub_100030784(a1, (uint64_t)v19);
    v16 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
  }
  else
  {
    sub_100030784(a1, (uint64_t)v19);
    a5(v19, v18);
    result = swift_dynamicCast(v11, v18, v15, v9, 6);
    if (!(_DWORD)result)
      return result;
    v16 = sub_1000126B0((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
  }
  return a2(v16);
}

uint64_t sub_1009036EC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10110CE84);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_100004A74;
  v6[17] = a4;
  v6[18] = *a4;
  return swift_task_switch(sub_100902D38, a4, 0);
}

uint64_t sub_100903754()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[46] = v0;
  v1[47] = *v0;
  v2 = type metadata accessor for UUID(0);
  v1[48] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[49] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[50] = swift_task_alloc(v4);
  v1[51] = swift_task_alloc(v4);
  v5 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v1[52] = v5;
  v1[53] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v1[54] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[55] = v7;
  v1[56] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100903818, v0, 0);
}

uint64_t sub_100903818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t (*v8)(void);

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 280) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 288) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 624), v0 + 280, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 624) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 424);
    v3 = *(_QWORD *)(v0 + 400);
    v2 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 448));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  *(_QWORD *)(v0 + 320) = _swiftEmptyArrayStorage;
  v5 = qword_1010EA5B0;
  swift_retain();
  if (v5 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 256, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 216);
  if (*(_QWORD *)(v0 + 240))
  {
    sub_10000F9FC((__int128 *)(v0 + 216), v0 + 136);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v8 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v7 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 456) = v7;
    *v7 = v0;
    v7[1] = sub_1009039D4;
    v4 = v8;
    return v4();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009039D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100903A34, v3, 0);
}

uint64_t sub_100903A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(v0 + 464))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v1 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 472) = v1;
    v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7598);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Flushing beacon cache on beacon added/removed.", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    return swift_task_switch(sub_100903C38, *(_QWORD *)(v0 + 464), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
    if (qword_1010EA040 != -1)
      swift_once(&qword_1010EA040, sub_100902634);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B7910);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing BeaconStoreActor!", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = *(_QWORD *)(v0 + 424);
    v14 = *(_QWORD *)(v0 + 400);
    v13 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 448));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100903C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 480) = v3;
  *v3 = v0;
  v3[1] = sub_100903CA8;
  return unsafeBlocking<A>(_:)(v3, sub_100142ACC, v1, &type metadata for () + 1);
}

uint64_t sub_100903CA8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 480));
  swift_release();
  return swift_task_switch(sub_100903D04, *(_QWORD *)(v1 + 464), 0);
}

uint64_t sub_100903D04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[58];
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[61] = v3;
  v4 = sub_10001A9A8(&qword_1010EE190);
  v0[62] = v4;
  *v3 = v0;
  v3[1] = sub_100903D90;
  return unsafeBlocking<A>(_:)(v0 + 39, sub_10001ED38, v1, v4);
}

uint64_t sub_100903D90()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 488));
  swift_release();
  return swift_task_switch(sub_100903DEC, *(_QWORD *)(v1 + 464), 0);
}

uint64_t sub_100903DEC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[46];
  v0[63] = v0[39];
  return swift_task_switch(sub_100903E08, v1, 0);
}

uint64_t sub_100903E08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[47];
  v0[37] = v0[63];
  v2 = swift_task_alloc(32);
  v0[64] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v0[65] = v3;
  v4 = sub_1000193A4((unint64_t *)&unk_1010F48D8, &qword_1010EE190, (const char *)&protocol conformance descriptor for [A]);
  *v3 = v0;
  v3[1] = sub_100903EB4;
  return Sequence.asyncMap<A>(_:)(&unk_10110D0C8, v2, v0[62], v0[54], v4);
}

uint64_t sub_100903EB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 520);
  v5 = *(_QWORD *)(*v2 + 512);
  v6 = *(_QWORD *)(*v2 + 368);
  *(_QWORD *)(v3 + 528) = a1;
  *(_QWORD *)(v3 + 536) = v1;
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100903F34, v6, 0);
}

uint64_t sub_100903F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t My;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t (*v23)(void);

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 368);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 528));
  sub_10030576C(v3);
  v4 = *(_QWORD *)(v2 + 128);
  v5 = v4 + OBJC_IVAR____TtC12searchpartyd24StandaloneBeaconDatabase_standaloneBeacon;
  v6 = type metadata accessor for Table(0);
  *(_QWORD *)(v0 + 200) = v6;
  *(_QWORD *)(v0 + 208) = &protocol witness table for Table;
  v7 = sub_100018F08((_QWORD *)(v0 + 176));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v5, v6);
  sub_100B8B834(v0 + 176, v4);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v0 + 424);
    v10 = *(_QWORD *)(v0 + 400);
    v9 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 448));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  v13 = *(_QWORD *)(v0 + 432);
  v14 = *(_QWORD *)(v0 + 376);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
  v15 = swift_task_alloc(32);
  *(_QWORD *)(v15 + 16) = v14;
  v16 = swift_task_alloc(32);
  *(_QWORD *)(v16 + 16) = sub_10090653C;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_100906558, v16, v13);
  *(_QWORD *)(v0 + 544) = v17;
  *(_QWORD *)(v0 + 552) = 0;
  v18 = v17;
  swift_release();
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_bridgeObjectRetain(v18);
  sub_10030576C(v19);
  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 80) = My;
  *(_QWORD *)(v0 + 88) = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v21 = sub_100018F08((_QWORD *)(v0 + 56));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v21, enum case for Feature.FindMy.itemSharing(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 56);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if ((My & 1) != 0)
    return swift_task_switch(sub_100904244, *(_QWORD *)(v0 + 464), 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 16);
  if (*(_QWORD *)(v0 + 40))
  {
    sub_10000F9FC((__int128 *)(v0 + 16), v0 + 96);
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v23 = (uint64_t (*)(void))((char *)&dword_1010EBC58 + dword_1010EBC58);
    v22 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 576) = v22;
    *v22 = v0;
    v22[1] = sub_100904660;
    v11 = v23;
    return v11();
  }
  __break(1u);
  return result;
}

uint64_t sub_100904244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 560) = v3;
  v4 = sub_10001A9A8(&qword_1010ECA48);
  *v3 = v0;
  v3[1] = sub_1009042CC;
  return unsafeBlocking<A>(_:)(v0 + 304, sub_10007C3B8, v1, v4);
}

uint64_t sub_1009042CC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 560));
  swift_release();
  return swift_task_switch(sub_100904328, *(_QWORD *)(v1 + 464), 0);
}

uint64_t sub_100904328()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[46];
  v0[71] = v0[38];
  return swift_task_switch(sub_100904344, v1, 0);
}

uint64_t sub_100904344()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (__cdecl *v26)();

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v25 = *(_QWORD *)(v0 + 440);
    v3 = *(_QWORD *)(v0 + 416);
    sub_10009AAF4(0, v2, 0);
    v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v5 = *(_QWORD *)(v3 + 72);
    v6 = *(_QWORD *)(v0 + 552);
    v7 = *(_QWORD *)(v0 + 448);
    v8 = *(_QWORD *)(v0 + 424);
    sub_10005972C(v1 + v4, v8, type metadata accessor for SharedBeaconRecord);
    sub_100905434(v8, v7);
    sub_1000126B0(v8, type metadata accessor for SharedBeaconRecord);
    if (v6)
      return swift_release();
    v10 = v5;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      sub_10009AAF4(0, _swiftEmptyArrayStorage[2] + 1, 1);
    v11 = v4;
    v13 = _swiftEmptyArrayStorage[2];
    v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1)
    {
      sub_10009AAF4(v12 > 1, v13 + 1, 1);
      v11 = v4;
    }
    v14 = *(_QWORD *)(v0 + 448);
    _swiftEmptyArrayStorage[2] = v13 + 1;
    v15 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    v16 = *(_QWORD *)(v25 + 72);
    sub_1000126EC(v14, (uint64_t)_swiftEmptyArrayStorage + v15 + v16 * v13, type metadata accessor for KeyGenerationBeaconInfo);
    v17 = v2 - 1;
    if (v2 != 1)
    {
      v19 = v1 + v10 + v11;
      do
      {
        v20 = *(_QWORD *)(v0 + 448);
        v21 = *(_QWORD *)(v0 + 424);
        sub_10005972C(v19, v21, type metadata accessor for SharedBeaconRecord);
        sub_100905434(v21, v20);
        sub_1000126B0(v21, type metadata accessor for SharedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009AAF4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v23 = _swiftEmptyArrayStorage[2];
        v22 = _swiftEmptyArrayStorage[3];
        if (v23 >= v22 >> 1)
          sub_10009AAF4(v22 > 1, v23 + 1, 1);
        v24 = *(_QWORD *)(v0 + 448);
        _swiftEmptyArrayStorage[2] = v23 + 1;
        sub_1000126EC(v24, (uint64_t)_swiftEmptyArrayStorage + v15 + v23 * v16, type metadata accessor for KeyGenerationBeaconInfo);
        v19 += v10;
        --v17;
      }
      while (v17);
    }
  }
  swift_bridgeObjectRelease();
  sub_10030576C((uint64_t)_swiftEmptyArrayStorage);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 16);
  if (*(_QWORD *)(v0 + 40))
  {
    sub_10000F9FC((__int128 *)(v0 + 16), v0 + 96);
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v26 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v18 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 576) = v18;
    *v18 = v0;
    v18[1] = sub_100904660;
    return v26();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100904660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 576);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  *(_QWORD *)(*(_QWORD *)v1 + 584) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009046C0, v3, 0);
}

uint64_t sub_1009046C0()
{
  uint64_t v0;
  uid_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(v0 + 584))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
    v1 = getuid();
    sub_100A06500(v1);
    v2 = *(_QWORD *)(v0 + 320);
    *(_QWORD *)(v0 + 592) = v2;
    v3 = (_QWORD *)swift_task_alloc(dword_101105F0C);
    *(_QWORD *)(v0 + 600) = v3;
    *v3 = v0;
    v3[1] = sub_1009047EC;
    return sub_10072E9C4(*(_QWORD *)(v0 + 408), v2);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
    v5 = sub_10090659C();
    v6 = swift_allocError(&type metadata for StandaloneBeaconService.StandaloneBeaconServiceError, v5, 0, 0);
    swift_willThrow(v6);
    swift_release();
    v7 = *(_QWORD *)(v0 + 424);
    v9 = *(_QWORD *)(v0 + 400);
    v8 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 448));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009047EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  *(_QWORD *)(*(_QWORD *)v1 + 608) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[51];
    v5 = v2[48];
    v6 = v2[49];
    v7 = v2[46];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = sub_100904C18;
    v9 = v7;
  }
  else
  {
    v10 = v2[51];
    v11 = v2[48];
    v12 = v2[46];
    v13 = *(void (**)(uint64_t, uint64_t))(v2[49] + 8);
    v2[77] = v13;
    v13(v10, v11);
    swift_bridgeObjectRelease();
    v8 = sub_1009048B4;
    v9 = v12;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_1009048B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uid_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  os_log_type_t type;
  uint64_t v29;

  if (qword_1010EA040 != -1)
    swift_once(&qword_1010EA040, sub_100902634);
  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 528);
  sub_10001A9E8(*(_QWORD *)(v0 + 472), (uint64_t)qword_1011B7910);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 544);
    v7 = *(_QWORD *)(v0 + 528);
    type = v5;
    v8 = *(_QWORD *)(v0 + 400);
    v25 = *(_QWORD *)(v0 + 384);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 616);
    v9 = swift_slowAlloc(42, -1);
    v27 = swift_slowAlloc(32, -1);
    v29 = v27;
    *(_DWORD *)v9 = 134218755;
    v10 = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 336) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2048;
    v11 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 344) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2160;
    *(_QWORD *)(v0 + 352) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v9 + 24, v9 + 32);
    *(_WORD *)(v9 + 32) = 2081;
    v12 = getuid();
    sub_100A06500(v12);
    v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v25, v13);
    v16 = v15;
    v26(v8, v25);
    *(_QWORD *)(v0 + 360) = sub_100016940(v14, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v9 + 34, v9 + 42);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, type, "Added %ld owned and %ld standalone beacon to key store for user: %{private,mask.hash}s.", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 528);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 544), 2);
    swift_bridgeObjectRelease_n(v17, 2);
  }

  v18 = *(_QWORD *)(v0 + 608);
  v19 = (void *)SPManagedCBPeripheralChangedNotification;
  v20 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  DarwinNotificationHelper.init(notificationName:rateLimit:)(v19, 0.0);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  if (v18)
    swift_errorRelease(v18);
  swift_release();
  swift_release();
  swift_release();
  v21 = *(_QWORD *)(v0 + 424);
  v23 = *(_QWORD *)(v0 + 400);
  v22 = *(_QWORD *)(v0 + 408);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100904C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 464);
  swift_release(*(_QWORD *)(v0 + 584));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100904C88(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for Date(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BeaconIdentifier(0);
  v2[9] = v5;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnedBeaconRecord(0);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100904D30, 0, 0);
}

uint64_t sub_100904D30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  if (qword_1010EA040 != -1)
    swift_once(&qword_1010EA040, sub_100902634);
  v1 = v0[12];
  v2 = v0[5];
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7910);
  v4 = sub_10005972C(v2, v1, type metadata accessor for OwnedBeaconRecord);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[12];
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    v0[3] = sub_100016940(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Adding owned beacon to key store: %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[12], type metadata accessor for OwnedBeaconRecord);
  }

  v15 = (_QWORD *)swift_task_alloc(dword_10110EEA4);
  v0[13] = v15;
  *v15 = v0;
  v15[1] = sub_100904F74;
  return sub_1009A1F44();
}

uint64_t sub_100904F74(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_BYTE *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100904FD0, 0, 0);
}

uint64_t sub_100904FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uid_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int *v14;
  _OWORD *v15;
  int v17;
  uint64_t v18;

  v17 = *(unsigned __int8 *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = getuid();
  sub_100A06500(v9);
  v10 = v7 + *(int *)(v1 + 20);
  v11 = v2 + *(int *)(v3 + 20);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v11, v10, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7 + *(int *)(v1 + 32), v6);
  if (v17)
    v13 = 2;
  else
    v13 = 0;
  sub_1000126EC(v2, v8, type metadata accessor for BeaconIdentifier);
  v14 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v14[5], v4, v6);
  v15 = (_OWORD *)(v8 + v14[6]);
  *v15 = xmmword_100E22B20;
  v15[1] = 0u;
  v15[2] = 0u;
  *(_BYTE *)(v8 + v14[7]) = v13;
  swift_task_dealloc(v18);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100905114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uid_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = type metadata accessor for StandaloneBeacon(0);
  __chkstk_darwin(v37);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA040 != -1)
    swift_once(&qword_1010EA040, sub_100902634);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7910);
  v8 = sub_10005972C(a1, (uint64_t)v6, type metadata accessor for StandaloneBeacon);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v36 = v2;
    v12 = v11;
    v35 = swift_slowAlloc(32, -1);
    v40 = v35;
    *(_DWORD *)v12 = 141558275;
    v38 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v34 = v12 + 14;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    v38 = sub_100016940(v15, v16, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v34, v12 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v6, type metadata accessor for StandaloneBeacon);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Adding standalone beacon to key store: %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
    v17 = v35;
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v6, type metadata accessor for StandaloneBeacon);
  }

  v18 = getuid();
  sub_100A06500(v18);
  v19 = a2 + *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, a1, v20);
  v21 = v37;
  v22 = a1 + *(int *)(v37 + 32);
  v23 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0);
  v24 = a2 + v23[5];
  v25 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, v22, v25);
  v26 = (_QWORD *)(a1 + *(int *)(v21 + 40));
  v27 = v26[2];
  v28 = v26[3];
  v29 = v26[4];
  v30 = v26[5];
  v31 = a2 + v23[6];
  *(_QWORD *)v31 = v27;
  *(_QWORD *)(v31 + 8) = v28;
  *(_QWORD *)(v31 + 16) = v29;
  *(_QWORD *)(v31 + 24) = v30;
  *(_OWORD *)(v31 + 32) = xmmword_100E22B20;
  *(_BYTE *)(a2 + v23[7]) = 1;
  sub_10001BBBC(v27, v28);
  return sub_10001BBBC(v29, v30);
}

double sub_100905434@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uid_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  int *v36;
  _OWORD *v37;
  double result;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for BeaconIdentifier(0);
  __chkstk_darwin(v46);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA040 != -1)
    swift_once(&qword_1010EA040, sub_100902634);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B7910);
  v14 = sub_10005972C(a1, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  v45 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v44 = v4;
    v18 = v17;
    v43 = swift_slowAlloc(32, -1);
    v49 = v43;
    *(_DWORD *)v18 = 141558275;
    v47 = 1752392040;
    v41 = &v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2081;
    v39 = v18 + 14;
    v40 = v10;
    v42 = v15;
    v19 = v9;
    v20 = a1;
    v21 = v7;
    v22 = v5;
    v23 = a2;
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = v24;
    a2 = v23;
    v5 = v22;
    v7 = v21;
    a1 = v20;
    v9 = v19;
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v26, v25);
    v47 = sub_100016940(v27, v28, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v41, v39, v18 + 22);
    v10 = v40;
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    v15 = v42;
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v45, "Adding shared beacon to key store: %{private,mask.hash}s.", (uint8_t *)v18, 0x16u);
    v29 = v43;
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v18;
    v4 = v44;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
  }

  v31 = getuid();
  sub_100A06500(v31);
  v32 = a1 + *(int *)(v10 + 20);
  v33 = &v9[*(int *)(v46 + 20)];
  v34 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v33, v32, v34);
  sub_100D3A990((uint64_t)v7);
  if (sub_100D3AB50())
    v35 = 2;
  else
    v35 = 0;
  sub_1000126EC((uint64_t)v9, a2, type metadata accessor for BeaconIdentifier);
  v36 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + v36[5], v7, v4);
  v37 = (_OWORD *)(a2 + v36[6]);
  result = 0.0;
  *v37 = xmmword_100E22B20;
  v37[1] = 0u;
  v37[2] = 0u;
  *(_BYTE *)(a2 + v36[7]) = v35;
  return result;
}

uint64_t sub_1009057F0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for StandaloneBeaconService()
{
  return objc_opt_self(_TtC12searchpartyd23StandaloneBeaconService);
}

_QWORD *sub_100905854(_QWORD *a1, char *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      v13 = (int *)type metadata accessor for StandaloneBeacon(0);
      v14 = v13[5];
      v15 = (char *)a1 + v14;
      v16 = &a2[v14];
      v17 = type metadata accessor for MACAddress(0);
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      v18(v15, v16, v17);
      v18((char *)a1 + v13[6], &a2[v13[6]], v17);
      v19 = v13[7];
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = &a2[v19];
      v22 = *((_QWORD *)v21 + 1);
      *v20 = *(_QWORD *)v21;
      v20[1] = v22;
      v23 = v13[8];
      v24 = (char *)a1 + v23;
      v25 = &a2[v23];
      v26 = type metadata accessor for Date(0);
      v27 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 16);
      v28 = swift_bridgeObjectRetain(v22);
      v27(v24, v25, v26, v28);
      v29 = v13[9];
      v30 = (_QWORD *)((char *)a1 + v29);
      v31 = (uint64_t *)&a2[v29];
      v32 = *v31;
      v33 = v31[1];
      sub_10001BBBC(*v31, v33);
      *v30 = v32;
      v30[1] = v33;
      v34 = v13[10];
      v35 = (_QWORD *)((char *)a1 + v34);
      v36 = &a2[v34];
      v37 = *(_QWORD *)&a2[v34];
      v38 = *(_QWORD *)&a2[v34 + 8];
      sub_10001BBBC(v37, v38);
      *v35 = v37;
      v35[1] = v38;
      v39 = *((_QWORD *)v36 + 2);
      v40 = *((_QWORD *)v36 + 3);
      sub_10001BBBC(v39, v40);
      v35[2] = v39;
      v35[3] = v40;
      v41 = *((_QWORD *)v36 + 4);
      v42 = *((_QWORD *)v36 + 5);
      sub_10001BBBC(v41, v42);
      v35[4] = v41;
      v35[5] = v42;
      v43 = v13[11];
      v44 = (_QWORD *)((char *)a1 + v43);
      v45 = (uint64_t *)&a2[v43];
      v46 = *v45;
      v47 = v45[1];
      sub_10001BBBC(*v45, v47);
      *v44 = v46;
      v44[1] = v47;
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_100905A44(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t result;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  v4 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  if (EnumCaseMultiPayload != 1)
  {
    v6 = (int *)type metadata accessor for StandaloneBeacon(0);
    v7 = a1 + v6[5];
    v8 = type metadata accessor for MACAddress(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7, v8);
    v9(a1 + v6[6], v8);
    swift_bridgeObjectRelease();
    v10 = a1 + v6[8];
    v11 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    sub_10001BC14(*(_QWORD *)(a1 + v6[9]), *(_QWORD *)(a1 + v6[9] + 8));
    v12 = a1 + v6[10];
    sub_10001BC14(*(_QWORD *)v12, *(_QWORD *)(v12 + 8));
    sub_10001BC14(*(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24));
    sub_10001BC14(*(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40));
    return sub_10001BC14(*(_QWORD *)(a1 + v6[11]), *(_QWORD *)(a1 + v6[11] + 8));
  }
  return result;
}

uint64_t sub_100905B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = 1;
  }
  else
  {
    v9 = (int *)type metadata accessor for StandaloneBeacon(0);
    v10 = v9[5];
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for MACAddress(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v14(a1 + v9[6], a2 + v9[6], v13);
    v15 = v9[7];
    v16 = (_QWORD *)(a1 + v15);
    v17 = (_QWORD *)(a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v9[8];
    v20 = a1 + v19;
    v21 = a2 + v19;
    v22 = type metadata accessor for Date(0);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v22 - 8) + 16);
    v24 = swift_bridgeObjectRetain(v18);
    v23(v20, v21, v22, v24);
    v25 = v9[9];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    v28 = *v27;
    v29 = v27[1];
    sub_10001BBBC(*v27, v29);
    *v26 = v28;
    v26[1] = v29;
    v30 = v9[10];
    v31 = (uint64_t *)(a1 + v30);
    v32 = (_QWORD *)(a2 + v30);
    v33 = *(_QWORD *)(a2 + v30);
    v34 = *(_QWORD *)(a2 + v30 + 8);
    sub_10001BBBC(v33, v34);
    *v31 = v33;
    v31[1] = v34;
    v35 = v32[2];
    v36 = v32[3];
    sub_10001BBBC(v35, v36);
    v31[2] = v35;
    v31[3] = v36;
    v37 = v32[4];
    v38 = v32[5];
    sub_10001BBBC(v37, v38);
    v31[4] = v37;
    v31[5] = v38;
    v39 = v9[11];
    v40 = (uint64_t *)(a1 + v39);
    v41 = (uint64_t *)(a2 + v39);
    v42 = *v41;
    v43 = v41[1];
    sub_10001BBBC(*v41, v43);
    v8 = 0;
    *v40 = v42;
    v40[1] = v43;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_100905D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;

  if (a1 != a2)
  {
    sub_1000126B0(a1, type metadata accessor for StandaloneBeaconService.BeaconStreamChange);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = 1;
    }
    else
    {
      v9 = (int *)type metadata accessor for StandaloneBeacon(0);
      v10 = v9[5];
      v11 = a1 + v10;
      v12 = a2 + v10;
      v13 = type metadata accessor for MACAddress(0);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      v14(v11, v12, v13);
      v14(a1 + v9[6], a2 + v9[6], v13);
      v15 = v9[7];
      v16 = (_QWORD *)(a1 + v15);
      v17 = (_QWORD *)(a2 + v15);
      *v16 = *v17;
      v18 = v17[1];
      v16[1] = v18;
      v19 = v9[8];
      v20 = a1 + v19;
      v21 = a2 + v19;
      v22 = type metadata accessor for Date(0);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v22 - 8) + 16);
      v24 = swift_bridgeObjectRetain(v18);
      v23(v20, v21, v22, v24);
      v25 = v9[9];
      v26 = (uint64_t *)(a1 + v25);
      v27 = (uint64_t *)(a2 + v25);
      v28 = *v27;
      v29 = v27[1];
      sub_10001BBBC(*v27, v29);
      *v26 = v28;
      v26[1] = v29;
      v30 = v9[10];
      v31 = (uint64_t *)(a1 + v30);
      v32 = (_QWORD *)(a2 + v30);
      v33 = *(_QWORD *)(a2 + v30);
      v34 = *(_QWORD *)(a2 + v30 + 8);
      sub_10001BBBC(v33, v34);
      *v31 = v33;
      v31[1] = v34;
      v35 = v32[2];
      v36 = v32[3];
      sub_10001BBBC(v35, v36);
      v31[2] = v35;
      v31[3] = v36;
      v37 = v32[4];
      v38 = v32[5];
      sub_10001BBBC(v37, v38);
      v31[4] = v37;
      v31[5] = v38;
      v39 = v9[11];
      v40 = (uint64_t *)(a1 + v39);
      v41 = (uint64_t *)(a2 + v39);
      v42 = *v41;
      v43 = v41[1];
      sub_10001BBBC(*v41, v43);
      v8 = 0;
      *v40 = v42;
      v40[1] = v43;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }
  return a1;
}

uint64_t type metadata accessor for StandaloneBeaconService.BeaconStreamChange(uint64_t a1)
{
  uint64_t result;

  result = qword_10110D058;
  if (!qword_10110D058)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StandaloneBeaconService.BeaconStreamChange);
  return result;
}

uint64_t sub_100905F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = 1;
  }
  else
  {
    v9 = (int *)type metadata accessor for StandaloneBeacon(0);
    v10 = v9[5];
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for MACAddress(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v11, v12, v13);
    v14(a1 + v9[6], a2 + v9[6], v13);
    *(_OWORD *)(a1 + v9[7]) = *(_OWORD *)(a2 + v9[7]);
    v15 = v9[8];
    v16 = a1 + v15;
    v17 = a2 + v15;
    v18 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    v8 = 0;
    *(_OWORD *)(a1 + v9[9]) = *(_OWORD *)(a2 + v9[9]);
    v19 = v9[10];
    v20 = (_OWORD *)(a1 + v19);
    v21 = (_OWORD *)(a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v20[2] = v21[2];
    *(_OWORD *)(a1 + v9[11]) = *(_OWORD *)(a2 + v9[11]);
  }
  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_100906084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;

  if (a1 != a2)
  {
    sub_1000126B0(a1, type metadata accessor for StandaloneBeaconService.BeaconStreamChange);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = 1;
    }
    else
    {
      v9 = (int *)type metadata accessor for StandaloneBeacon(0);
      v10 = v9[5];
      v11 = a1 + v10;
      v12 = a2 + v10;
      v13 = type metadata accessor for MACAddress(0);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      v14(a1 + v9[6], a2 + v9[6], v13);
      *(_OWORD *)(a1 + v9[7]) = *(_OWORD *)(a2 + v9[7]);
      v15 = v9[8];
      v16 = a1 + v15;
      v17 = a2 + v15;
      v18 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      v8 = 0;
      *(_OWORD *)(a1 + v9[9]) = *(_OWORD *)(a2 + v9[9]);
      v19 = v9[10];
      v20 = (_OWORD *)(a1 + v19);
      v21 = (_OWORD *)(a2 + v19);
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      v20[2] = v21[2];
      *(_OWORD *)(a1 + v9[11]) = *(_OWORD *)(a2 + v9[11]);
    }
    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }
  return a1;
}

uint64_t sub_1009061E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for StandaloneBeacon(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100906268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009062C4, v0, 0);
}

uint64_t sub_1009062C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v5 = sub_100006C64(&qword_10110C730, v4, (uint64_t (*)(uint64_t))type metadata accessor for StandaloneBeaconService, (uint64_t)&unk_100E553E0);
  v6 = (_QWORD *)swift_allocObject(&unk_10109BBA8, 40, 7);
  v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  swift_retain_n(v1, 2);
  sub_100691AC0(v2, (uint64_t)&unk_10110D0A0, (uint64_t)v6);
  swift_release();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100906388(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_10110C730, a2, (uint64_t (*)(uint64_t))type metadata accessor for StandaloneBeaconService, (uint64_t)&unk_100E553E0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1009063C4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7928);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7928);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000017, 0x8000000100E55360);
}

uint64_t sub_100906444()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_100906450(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (_QWORD *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110D09C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1009036EC(a1, v4, v5, v6);
}

uint64_t sub_1009064BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100902B68(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1009064D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10110D0C4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return sub_100904C88(a1, a2);
}

uint64_t sub_10090653C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100905114(a1, a2);
}

uint64_t sub_100906558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v0 + 16))();
  if (v1)
    return swift_allocError(&type metadata for Never, &protocol witness table for Never, 0, 0);
  return result;
}

unint64_t sub_10090659C()
{
  unint64_t result;

  result = qword_10110D0D0;
  if (!qword_10110D0D0)
  {
    result = swift_getWitnessTable(byte_100E55498, &type metadata for StandaloneBeaconService.StandaloneBeaconServiceError);
    atomic_store(result, &qword_10110D0D0);
  }
  return result;
}

uint64_t sub_1009065E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100906604()
{
  uint64_t v0;

  return sub_100903260(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10090660C()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100906618()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = v0[2];
  v2 = (void (*)(uint64_t))v0[3];
  v3 = v0[4];
  swift_retain();
  sub_100877F88(v1, v2, v3);
  return swift_release();
}

uint64_t sub_10090665C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100906680(uint64_t a1)
{
  uint64_t v1;

  return sub_100903584(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1010EE3A8, (void (*)(_QWORD *, _BYTE *))sub_10000F9FC);
}

uint64_t sub_1009066A8(uint64_t a1)
{
  uint64_t v1;

  return sub_100903584(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)&unk_101105A10, (void (*)(_QWORD *, _BYTE *))sub_10000F9FC);
}

uint64_t sub_1009066D0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110D0DC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  v2 = (_QWORD *)swift_task_alloc(dword_10110CE8C);
  v1[7] = v2;
  *v2 = v1;
  v2[1] = sub_100903328;
  return sub_100903754();
}

uint64_t storeEnumTagSinglePayload for StandaloneBeaconService.StandaloneBeaconServiceError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100906778 + 4 * byte_100E55340[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100906798 + 4 * byte_100E55345[v4]))();
}

_BYTE *sub_100906778(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100906798(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1009067A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1009067A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1009067B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1009067B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StandaloneBeaconService.StandaloneBeaconServiceError()
{
  return &type metadata for StandaloneBeaconService.StandaloneBeaconServiceError;
}

unint64_t sub_1009067D8()
{
  unint64_t result;

  result = qword_10110D0F0;
  if (!qword_10110D0F0)
  {
    result = swift_getWitnessTable(byte_100E55470, &type metadata for StandaloneBeaconService.StandaloneBeaconServiceError);
    atomic_store(result, (unint64_t *)&qword_10110D0F0);
  }
  return result;
}

uint64_t sub_100906824(uint64_t a1)
{
  return sub_1009064BC(a1);
}

_QWORD *sub_100906838(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_10009A2F4(0, v1, 0);
  result = (_QWORD *)sub_1003B2D14(a1);
  v4 = (uint64_t)result;
  v6 = v5;
  v8 = v7 & 1;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v6)
      goto LABEL_14;
    v17 = v8;
    v9 = sub_100D79CA8(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v4));
    v11 = v10;
    v13 = _swiftEmptyArrayStorage[2];
    v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1)
      sub_10009A2F4(v12 > 1, v13 + 1, 1);
    _swiftEmptyArrayStorage[2] = v13 + 1;
    v14 = &_swiftEmptyArrayStorage[2 * v13];
    v14[4] = v9;
    v14[5] = v11;
    result = (_QWORD *)sub_1003B2DB8(v4, v6, v17 & 1, a1);
    v4 = (uint64_t)result;
    v6 = v15;
    v8 = v16 & 1;
    if (!--v1)
    {
      sub_1000FE2A4((uint64_t)result, v15, v8);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1009069AC(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_1007C80E4(0, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v5 >= v4 >> 1)
    v3 = sub_1007C80E4(v4 > 1, v5 + 1, 1, v3);
  *(_QWORD *)(v3 + 16) = v5 + 1;
  v6 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  result = sub_1000126EC(a1, v3+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v5, type metadata accessor for KeyDropInterface.KeyPackage);
  *v1 = v3;
  return result;
}

Swift::Int sub_100906A74(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t *a3, void (*a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11[2];

  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v8 = a2(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v11[0] = v8 + 32;
  v11[1] = v9;
  result = sub_10095B5D8(v11, a3, a4);
  *a1 = v8;
  return result;
}

void sub_100906AF8()
{
  uint64_t v0;
  void *v1;

  v1 = objc_autoreleasePoolPush();
  sub_100774704(v0);
  objc_autoreleasePoolPop(v1);
}

uint64_t sub_100906B40()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7940);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7940);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000017, 0x8000000100EC67D0);
}

uint64_t sub_100906BC0()
{
  uint64_t v0;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v0 = type metadata accessor for Logger(0);
  return sub_10001A9E8(v0, (uint64_t)qword_1011B7940);
}

uint64_t sub_100906C08@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_10095CB14(a1, a2);
  v5 = sub_100646458(v4);
  v7 = v6;
  result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  return result;
}

uint64_t sub_100906C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  _QWORD *v25;
  _QWORD v26[2];

  v1 = v0;
  v2 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v3 = *(_QWORD *)(v0 + *(int *)(v2 + 32));
  if (*(_QWORD *)(v3 + 16) < 4uLL)
  {
    swift_bridgeObjectRetain(v3);
    v8 = sub_100906838(v7);
    swift_bridgeObjectRelease();
    v25 = v8;
    v9 = sub_10001A9A8(&qword_1011063B0);
    v10 = sub_1000193A4((unint64_t *)&qword_1010F1AD8, &qword_1011063B0, (const char *)&protocol conformance descriptor for [A]);
    v11 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v9, v10);
    v13 = v12;
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 93;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v4 = 91;
    v6 = (void *)0xE100000000000000;
  }
  else
  {
    v26[0] = *(_QWORD *)(v3 + 16);
    v4 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v6 = v5;
  }
  v26[0] = 0;
  v26[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  v16._object = (void *)0x8000000100EEAF20;
  v16._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v16);
  v17 = type metadata accessor for UUID(0);
  v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x3A7365707974202CLL;
  v20._object = (void *)0xE900000000000020;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v4;
  v21._object = v6;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x69726F697270202CLL;
  v22._object = (void *)0xEC000000203A7974;
  String.append(_:)(v22);
  LOBYTE(v25) = *(_BYTE *)(v1 + *(int *)(v2 + 40));
  _print_unlocked<A, B>(_:_:)(&v25, v26, &type metadata for SharingCircleKeyManager.TaskPriority, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v23._countAndFlagsBits = 93;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  return v26[0];
}

uint64_t sub_100906EB0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch(sub_100906EC8, 0, 0);
}

uint64_t sub_100906EC8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[4];
  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) + 40)) == 1)
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v2 = v0 + 3;
    v3 = qword_1011B71A8;
    v0[5] = qword_1011B71A8;
    v4 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc(v4);
    v0[6] = v5;
    *v5 = v0;
    v5[1] = sub_100907000;
  }
  else
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v2 = v0 + 2;
    v3 = qword_1011B71A8;
    v0[7] = qword_1011B71A8;
    v6 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc(v6);
    v0[8] = v7;
    *v7 = v0;
    v7[1] = sub_1009070B0;
  }
  return unsafeBlocking<A>(_:)(v2, sub_100033264, v3, &type metadata for Configuration);
}

uint64_t sub_100907000()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_release();
  return swift_task_switch(sub_10090705C, 0, 0);
}

uint64_t sub_10090705C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100C1BAA0(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(double))(v0 + 8))((double)(unint64_t)v1 * 86400.0);
}

uint64_t sub_1009070B0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_release();
  return swift_task_switch(sub_10090710C, 0, 0);
}

uint64_t sub_10090710C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100C1BA8C(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(double))(v0 + 8))((double)(unint64_t)v1 * 86400.0);
}

uint64_t sub_100907160()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110D494);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1009071BC;
  v2[4] = v0;
  return swift_task_switch(sub_100906EC8, 0, 0);
}

uint64_t sub_1009071BC(double a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(double *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100907210, 0, 0);
}

uint64_t sub_100907210()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;
  double v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v1 = sub_100C1AE40(*(_QWORD *)(v0 + 16));
  result = swift_bridgeObjectRelease();
  if ((v1 & 0x8000000000000000) != 0)
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  if (!is_mul_ok(v1, 0x3CuLL))
  {
    __break(1u);
    goto LABEL_11;
  }
  v3 = *(double *)(v0 + 32) / (double)(60 * v1);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v3 > -1.0)
  {
    if (v3 < 1.84467441e19)
      return (*(uint64_t (**)(unint64_t))(v0 + 8))((unint64_t)v3);
    goto LABEL_13;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10090736C()
{
  return swift_task_switch(sub_100907380, 0, 0);
}

uint64_t sub_100907380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 24) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_100907430;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100907430()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  swift_release();
  return swift_task_switch(sub_10090748C, 0, 0);
}

uint64_t sub_10090748C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100C1BAB4(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(double))(v0 + 8))((double)(unint64_t)v1 * 86400.0);
}

uint64_t sub_1009074E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for Date(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100907540, 0, 0);
}

uint64_t sub_100907540()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[6];
  v1 = v0[7];
  v4 = v0[4];
  v3 = v0[5];
  v5 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + *(int *)(v5 + 48), v3);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v6 = qword_1011B71A8;
  v0[8] = qword_1011B71A8;
  v7 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[9] = v8;
  *v8 = v0;
  v8[1] = sub_100907618;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_100033264, v6, &type metadata for Configuration);
}

uint64_t sub_100907618()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_release();
  return swift_task_switch(sub_100907674, 0, 0);
}

uint64_t sub_100907674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = sub_100C1BAC8(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  DateInterval.init(start:duration:)(v1, (double)(unint64_t)v2 * 86400.0);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1009076EC()
{
  return 0xD000000000000011;
}

uint64_t sub_100907708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100963180(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100907730(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100962FC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100907758(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100962FC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100907780@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v5 = sub_10001A9A8(&qword_10110D7A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100962FC8();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys, &type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_1009078A4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_10001A9A8(&qword_10110D790);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100962FC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys, &type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys, v11, v9, v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100907990(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 132) = a2;
  *(_QWORD *)(v4 + 16) = a1;
  v5 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 40) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 48) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 56) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 64) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 72) = swift_task_alloc(v7);
  v8 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  *(_QWORD *)(v4 + 80) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 88) = v9;
  *(_QWORD *)(v4 + 96) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100907A3C, v3, 0);
}

uint64_t sub_100907A3C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _UNKNOWN **v4;
  _UNKNOWN **v5;
  _UNKNOWN **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v34;
  char v35;
  void *v36;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v3 = v2[7];
  if (*(_BYTE *)(v1 + v3))
  {
    if (*(_BYTE *)(v1 + v3) == 1)
    {
      v4 = &off_101048510;
      v5 = &off_1010484E8;
    }
    else
    {
      v4 = &off_101048568;
      v5 = &off_101048538;
    }
    if (*(_BYTE *)(v0 + 132))
      v6 = v5;
    else
      v6 = v4;
  }
  else
  {
    v6 = &off_1010484C0;
  }
  v8 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  v36 = sub_1003B98CC((uint64_t)v6);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v11(v7, v1 + v2[5], v9);
  v11(v8, v1 + v2[6], v9);
  if (qword_1010E9A08 != -1)
    swift_once(&qword_1010E9A08, sub_1001EB1EC);
  v12 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 40);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B6A78);
  v11(v12, v14, v13);
  v16 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v17 = 0x201u >> (8 * *(_BYTE *)(v1 + v3));
  v19 = *(_QWORD *)(v0 + 72);
  v18 = *(int **)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 56);
  v20 = *(_QWORD *)(v0 + 64);
  v22 = *(_QWORD *)(v0 + 40);
  v23 = *(_QWORD *)(v0 + 48);
  v24 = *(_QWORD *)(v0 + 24);
  v34 = *(_BYTE *)(v0 + 132);
  v35 = v17;
  swift_bridgeObjectRetain(v24);
  UUID.init()(v25);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
  v26(v15 + v18[5], v19, v22);
  v26(v15 + v18[6], v20, v22);
  v26(v15 + v18[7], v21, v22);
  *(_QWORD *)(v15 + v18[8]) = v36;
  *(_BYTE *)(v15 + v18[9]) = v35;
  *(_BYTE *)(v15 + v18[10]) = v34;
  *(_QWORD *)(v15 + v18[11]) = v24;
  static Date.trustedNow.getter(v15 + v18[12]);
  v27 = sub_10001A9A8(&qword_10110D5A0);
  v28 = *(_QWORD *)(v16 + 72);
  LODWORD(v29) = *(_DWORD *)(v16 + 80);
  *(_DWORD *)(v0 + 128) = v29;
  v29 = v29;
  v30 = (v29 + 32) & ~v29;
  v31 = swift_allocObject(v27, v30 + v28, v29 | 7);
  *(_QWORD *)(v0 + 104) = v31;
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  sub_10005972C(v15, v31 + v30, type metadata accessor for SharingCircleKeyManager.Instruction);
  v32 = (_QWORD *)swift_task_alloc(dword_10110D16C);
  *(_QWORD *)(v0 + 112) = v32;
  *v32 = v0;
  v32[1] = sub_100907CA4;
  return sub_10090CA54(v31);
}

uint64_t sub_100907CA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 104);
  v3 = *(_QWORD *)(*v1 + 112);
  v5 = *(_QWORD *)(*v1 + 80);
  v6 = v4 + ((*(unsigned __int8 *)(v2 + 128) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 128));
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc(v3);
  swift_setDeallocating(v4);
  swift_arrayDestroy(v6, *(_QWORD *)(v4 + 16), v5);
  swift_deallocClassInstance(v4, 32, 7);
  if (v0)
    v7 = sub_100907DC8;
  else
    v7 = sub_100907D58;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_100907D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  sub_1000126B0(v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100907DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  sub_1000126B0(v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100907E38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MemberSharingCircle(0);
  v2[12] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v6);
  v2[14] = swift_task_alloc(v6);
  v2[15] = swift_task_alloc(v6);
  return swift_task_switch(sub_100907ED8, v1, 0);
}

uint64_t sub_100907ED8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = v0[7];
  v2 = v0[15];
  v3 = type metadata accessor for Logger(0);
  v0[16] = sub_10001A9E8(v3, (uint64_t)qword_1011B7940);
  v4 = sub_10005972C(v1, v2, type metadata accessor for MemberSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[15];
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    v0[6] = sub_100016940(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Restore member sharing circle keys: share-id: %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[15], type metadata accessor for MemberSharingCircle);
  }

  v15 = (_QWORD *)swift_task_alloc(dword_10110D1CC);
  v0[17] = v15;
  *v15 = v0;
  v15[1] = sub_100908128;
  return sub_100923B74(v0[7]);
}

uint64_t sub_100908128(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_BYTE *)(*(_QWORD *)v1 + 196) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100908188, v3, 0);
}

uint64_t sub_100908188()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(v0 + 196) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_10110D1BC);
    *(_QWORD *)(v0 + 144) = v1;
    *v1 = v0;
    v1[1] = sub_100908554;
    return sub_100922E38(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56), 0);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 56);
    sub_10005972C(v4, *(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
    v5 = sub_10005972C(v4, v3, type metadata accessor for MemberSharingCircle);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 112);
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 96);
      v11 = (_DWORD *)swift_slowAlloc(32, -1);
      swift_slowAlloc(64, -1);
      *v11 = 136446723;
      __asm { BR              X10 }
    }
    v12 = *(_QWORD *)(v0 + 104);
    sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v12, type metadata accessor for MemberSharingCircle);

    v13 = sub_1000D94EC();
    v14 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v13, 0, 0);
    *v15 = 19;
    swift_willThrow(v14);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100908554()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10090885C;
  else
    v4 = sub_1009085B8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_1009085B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = sub_10001A9A8(&qword_10110D5A0);
  v4 = *(_QWORD *)(v1 + 72);
  LODWORD(v5) = *(_DWORD *)(v1 + 80);
  *(_DWORD *)(v0 + 192) = v5;
  v5 = v5;
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v3, v6 + v4, v5 | 7);
  *(_QWORD *)(v0 + 160) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  sub_10005972C(v2, v7 + v6, type metadata accessor for SharingCircleKeyManager.Instruction);
  v8 = (_QWORD *)swift_task_alloc(dword_10110D17C);
  *(_QWORD *)(v0 + 168) = v8;
  *v8 = v0;
  v8[1] = sub_100908668;
  return sub_10090EE88(v7);
}

uint64_t sub_100908668(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = v1;
  swift_task_dealloc(v4);
  v5 = *(_QWORD *)(v3 + 160);
  v6 = *(unsigned __int8 *)(v3 + 192);
  v9 = v3 + 64;
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v9 + 8);
  v10 = v5 + ((v6 + 32) & ~v6);
  swift_setDeallocating(v5);
  swift_arrayDestroy(v10, *(_QWORD *)(v5 + 16), v8);
  swift_deallocClassInstance(v5, 32, 7);
  if (v1)
    v11 = sub_1009088B8;
  else
    v11 = sub_100908724;
  return swift_task_switch(v11, v7, 0);
}

uint64_t sub_100908724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 176);
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v0 + 112);
    v2 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRelease();
    sub_1000126B0(v5, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease();
    v9 = sub_1000D94EC();
    v10 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v9, 0, 0);
    *v11 = 16;
    swift_willThrow(v10);
    sub_1000126B0(v8, type metadata accessor for SharingCircleKeyManager.Instruction);
    v12 = *(_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10090885C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009088B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000126B0(*(_QWORD *)(v0 + 88), type metadata accessor for SharingCircleKeyManager.Instruction);
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100908924(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MemberSharingCircle(0);
  v2[12] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v6);
  v2[14] = swift_task_alloc(v6);
  v2[15] = swift_task_alloc(v6);
  return swift_task_switch(sub_1009089C4, v1, 0);
}

uint64_t sub_1009089C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = v0[7];
  v2 = v0[15];
  v3 = type metadata accessor for Logger(0);
  v0[16] = sub_10001A9E8(v3, (uint64_t)qword_1011B7940);
  v4 = sub_10005972C(v1, v2, type metadata accessor for MemberSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[15];
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    v0[6] = sub_100016940(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Download keys: share-id: %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[15], type metadata accessor for MemberSharingCircle);
  }

  v15 = (_QWORD *)swift_task_alloc(dword_10110D1CC);
  v0[17] = v15;
  *v15 = v0;
  v15[1] = sub_100908C14;
  return sub_100923B74(v0[7]);
}

uint64_t sub_100908C14(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_BYTE *)(*(_QWORD *)v1 + 196) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100908C74, v3, 0);
}

uint64_t sub_100908C74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(v0 + 196) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_10110D1BC);
    *(_QWORD *)(v0 + 144) = v1;
    *v1 = v0;
    v1[1] = sub_100909040;
    return sub_100922E38(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56), 1);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 56);
    sub_10005972C(v4, *(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
    v5 = sub_10005972C(v4, v3, type metadata accessor for MemberSharingCircle);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 112);
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 96);
      v11 = (_DWORD *)swift_slowAlloc(32, -1);
      swift_slowAlloc(64, -1);
      *v11 = 136446723;
      __asm { BR              X10 }
    }
    v12 = *(_QWORD *)(v0 + 104);
    sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v12, type metadata accessor for MemberSharingCircle);

    v13 = sub_1000D94EC();
    v14 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v13, 0, 0);
    *v15 = 19;
    swift_willThrow(v14);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100909040()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100963210;
  else
    v4 = sub_1009090A4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_1009090A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = sub_10001A9A8(&qword_10110D5A0);
  v4 = *(_QWORD *)(v1 + 72);
  LODWORD(v5) = *(_DWORD *)(v1 + 80);
  *(_DWORD *)(v0 + 192) = v5;
  v5 = v5;
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v3, v6 + v4, v5 | 7);
  *(_QWORD *)(v0 + 160) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  sub_10005972C(v2, v7 + v6, type metadata accessor for SharingCircleKeyManager.Instruction);
  v8 = (_QWORD *)swift_task_alloc(dword_10110D17C);
  *(_QWORD *)(v0 + 168) = v8;
  *v8 = v0;
  v8[1] = sub_100909154;
  return sub_10090EE88(v7);
}

uint64_t sub_100909154(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = v1;
  swift_task_dealloc(v4);
  v5 = *(_QWORD *)(v3 + 160);
  v6 = *(unsigned __int8 *)(v3 + 192);
  v9 = v3 + 64;
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v9 + 8);
  v10 = v5 + ((v6 + 32) & ~v6);
  swift_setDeallocating(v5);
  swift_arrayDestroy(v10, *(_QWORD *)(v5 + 16), v8);
  swift_deallocClassInstance(v5, 32, 7);
  if (v1)
    v11 = sub_100963398;
  else
    v11 = sub_100963394;
  return swift_task_switch(v11, v7, 0);
}

uint64_t sub_100909210(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[6] = swift_task_alloc(v5);
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009092B0, v1, 0);
}

uint64_t sub_1009092B0()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  _QWORD *v22;
  void *v24;

  v1 = v0[2];
  v2 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v3 = v2[7];
  v5 = v0[7];
  v4 = v0[8];
  v6 = v0[4];
  v7 = v0[5];
  v24 = sub_1003B98CC((uint64_t)off_10109E4A0[*(char *)(v1 + v3)]);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(v4, v1 + v2[5], v6);
  v8(v5, v1 + v2[6], v6);
  if (qword_1010E9A08 != -1)
    swift_once(&qword_1010E9A08, sub_1001EB1EC);
  v9 = v0[6];
  v10 = v0[4];
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6A78);
  v8(v9, v11, v10);
  v12 = 0x201u >> (8 * *(_BYTE *)(v1 + v3));
  v14 = (int *)v0[9];
  v13 = v0[10];
  v16 = v0[7];
  v15 = v0[8];
  v17 = v0[5];
  v18 = v0[6];
  v19 = v0[4];
  v20 = sub_1006B8EE4((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()(v20);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v21(v13 + v14[5], v15, v19);
  v21(v13 + v14[6], v16, v19);
  v21(v13 + v14[7], v18, v19);
  *(_QWORD *)(v13 + v14[8]) = v24;
  *(_BYTE *)(v13 + v14[9]) = v12;
  *(_BYTE *)(v13 + v14[10]) = 1;
  *(_QWORD *)(v13 + v14[11]) = v20;
  static Date.trustedNow.getter(v13 + v14[12]);
  v22 = (_QWORD *)swift_task_alloc(dword_10110D1D4);
  v0[11] = v22;
  *v22 = v0;
  v22[1] = sub_10090947C;
  return sub_100924450(v0[10]);
}

uint64_t sub_10090947C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 24);
  if (v1)
  {
    v7 = sub_100909564;
  }
  else
  {
    *(_QWORD *)(v4 + 104) = a1;
    v7 = sub_1009094F0;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009094F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  sub_1000126B0(v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104));
}

uint64_t sub_100909564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  sub_1000126B0(v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009095D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[11] = a1;
  v2[12] = v1;
  v4 = type metadata accessor for OwnerSharingCircle(0);
  v2[13] = v4;
  v5 = a1 + *(int *)(v4 + 20);
  v6 = (_QWORD *)swift_task_alloc(dword_10110D164);
  v2[14] = v6;
  *v6 = v2;
  v6[1] = sub_10090964C;
  return sub_10090C6D8((uint64_t)(v2 + 2), v5);
}

uint64_t sub_10090964C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_1009096B4, *(_QWORD *)(v2 + 96), 0);
}

uint64_t sub_1009096B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0[11] + *(int *)(v0[13] + 32));
  v0[10] = v1;
  v2 = async function pointer to Sequence.asyncCompactMap<A>(_:)[1];
  swift_bridgeObjectRetain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[15] = v3;
  v4 = sub_10001A9A8(&qword_10110D590);
  v5 = type metadata accessor for OwnerPeerTrust(0);
  v6 = sub_1000193A4(&qword_10110D598, &qword_10110D590, (const char *)&protocol conformance descriptor for [A : B].Keys);
  *v3 = v0;
  v3[1] = sub_100909780;
  return Sequence.asyncCompactMap<A>(_:)(&unk_10110D588, v0[12], v4, v5, v6);
}

uint64_t sub_100909780(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 120);
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1009097F0, v5, 0);
}

uint64_t sub_1009097F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = (_QWORD *)swift_task_alloc(48);
  v5[2] = v3;
  v5[3] = v0 + 16;
  v5[4] = v4;
  v6 = sub_100A75FC4((void (*)(_QWORD, __n128))sub_100961D24, (uint64_t)v5, v1);
  sub_1000D9530((uint64_t *)(v0 + 16));
  swift_bridgeObjectRelease();
  v7 = swift_task_dealloc(v5);
  if (!v2)
    v7 = (uint64_t)v6;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_100909898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100909900, 0, 0);
}

uint64_t sub_100909900()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 120);
  *(_QWORD *)(v0 + 72) = v1;
  return swift_task_switch(sub_10090991C, v1, 0);
}

uint64_t sub_10090991C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0[8];
  v2 = v0[9];
  v4 = v0[6];
  v3 = v0[7];
  v5 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109E230, v7 + v3, v6 | 7);
  v0[10] = v8;
  *(_QWORD *)(v8 + 16) = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[11] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *v10 = v0;
  v10[1] = sub_100899CE8;
  return unsafeBlocking<A>(_:)(v0[2], sub_10007CC14, v8, v11);
}

uint64_t sub_100909A04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v9 = type metadata accessor for OwnerSharingCircle(0);
  result = sub_10091E994(a1, a2, a3 + *(int *)(v9 + 20), a4);
  if (!v4)
  {
    v11 = type metadata accessor for KeyDropCreateRequest.Member(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a4, 0, 1, v11);
  }
  return result;
}

uint64_t sub_100909A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(v6 + 136) = a4;
  *(_QWORD *)(v6 + 144) = v5;
  *(_BYTE *)(v6 + 308) = a5;
  *(_QWORD *)(v6 + 120) = a2;
  *(_QWORD *)(v6 + 128) = a3;
  *(_QWORD *)(v6 + 112) = a1;
  v7 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  *(_QWORD *)(v6 + 152) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 160) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 168) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 184) = swift_task_alloc(v9);
  v10 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  *(_QWORD *)(v6 + 192) = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 200) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 208) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 216) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 224) = swift_task_alloc(v11);
  return swift_task_switch(sub_100909B70, v5, 0);
}

uint64_t sub_100909B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = type metadata accessor for PropertyListDecoder(0);
  v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  PropertyListDecoder.init()(v4);
  v5 = sub_10001A9A8(&qword_1010F1DC8);
  v6 = sub_100961C44();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v5, v1, v2, v5, v6);
  v7 = *(_QWORD *)(v0 + 224);
  v8 = *(int **)(v0 + 192);
  v43 = *(_BYTE *)(v0 + 308);
  v9 = *(_QWORD *)(v0 + 128);
  v44 = *(_QWORD *)(v0 + 136);
  swift_release();
  v10 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 232) = v10;
  v42 = sub_100CA82A0((uint64_t)&off_1010497F0);
  v11 = (int *)type metadata accessor for MemberSharingCircle(0);
  v12 = v9 + v11[7];
  v13 = v7 + v8[5];
  v14 = type metadata accessor for UUID(0);
  *(_QWORD *)(v0 + 240) = v14;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v15(v13, v12, v14);
  v15(v7 + v8[6], v9 + v11[6], v14);
  v15(v7 + v8[7], v9 + v11[8], v14);
  v16 = sub_1006B8EE4((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()(v16);
  *(_QWORD *)(v7 + v8[8]) = v42;
  *(_BYTE *)(v7 + v8[9]) = v43;
  *(_BYTE *)(v7 + v8[10]) = 1;
  *(_QWORD *)(v7 + v8[11]) = v16;
  static Date.trustedNow.getter(v7 + v8[12]);
  v17 = (_QWORD *)(v44 + *(int *)(type metadata accessor for MemberPeerTrust(0) + 36));
  *(_QWORD *)(v0 + 248) = *v17;
  *(_QWORD *)(v0 + 256) = v17[1];
  v18 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v0 + 264) = v18;
  if (v18)
  {
    v19 = *(_QWORD *)(v0 + 160);
    *(_DWORD *)(v0 + 304) = *(_DWORD *)(v19 + 80);
    *(_QWORD *)(v0 + 272) = *(_QWORD *)(v19 + 72);
    *(_QWORD *)(v0 + 280) = 0;
    v21 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 256);
    v22 = *(_QWORD *)(v0 + 184);
    v23 = *(_QWORD *)(v0 + 152);
    sub_10005972C(*(_QWORD *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 304) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 304)), v22, type metadata accessor for KeyDropInterface.KeyPackage);
    v24 = *(_QWORD *)(v22 + *(int *)(v23 + 24));
    swift_retain();
    sub_10001BBBC(v21, v20);
    swift_bridgeObjectRetain(v24);
    v26 = sub_10095D688(v25, v21, v20);
    v28 = *(_QWORD *)(v0 + 248);
    v27 = *(_QWORD *)(v0 + 256);
    v29 = v26;
    v31 = *(_BYTE **)(v0 + 176);
    v30 = *(_BYTE **)(v0 + 184);
    v32 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease();
    swift_release();
    LOBYTE(v24) = *v30;
    sub_10005972C((uint64_t)&v30[*(int *)(v32 + 20)], (uint64_t)&v31[*(int *)(v32 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_10001BC14(v28, v27);
    *v31 = v24;
    *(_QWORD *)&v31[*(int *)(v32 + 24)] = v29;
    v33 = (_QWORD *)swift_task_alloc(dword_10110D184);
    *(_QWORD *)(v0 + 288) = v33;
    *v33 = v0;
    v33[1] = sub_10090A438;
    return sub_1009142D4(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 224));
  }
  else
  {
    swift_bridgeObjectRelease();
    v35 = *(_QWORD *)(v0 + 216);
    v36 = *(_QWORD *)(v0 + 224);
    v38 = *(_QWORD *)(v0 + 200);
    v37 = *(_QWORD *)(v0 + 208);
    v40 = *(_QWORD *)(v0 + 176);
    v39 = *(_QWORD *)(v0 + 184);
    v41 = *(_QWORD *)(v0 + 168);
    sub_1000126B0(v36, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_task_dealloc(v36);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10090A438()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10090AB88;
  else
    v4 = sub_10090A49C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 144), 0);
}

uint64_t sub_10090A49C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  _BYTE *v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68[3];

  v1 = *(_QWORD *)(v0 + 184);
  sub_1000126B0(*(_QWORD *)(v0 + 176), type metadata accessor for KeyDropInterface.KeyPackage);
  sub_1000126B0(v1, type metadata accessor for KeyDropInterface.KeyPackage);
  v2 = *(_QWORD *)(v0 + 280) + 1;
  if (v2 == *(_QWORD *)(v0 + 264))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 200);
    v5 = *(_QWORD *)(v0 + 208);
    v8 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 168);
    sub_1000126B0(v4, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_task_dealloc(v4);
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v59 = v0 + 56;
    v60 = v0 + 48;
    v57 = v0 + 72;
    v58 = v0 + 64;
    v55 = v0 + 88;
    v56 = v0 + 80;
    v11 = *(_QWORD *)(v0 + 296);
    while (1)
    {
      *(_QWORD *)(v0 + 280) = v2;
      v26 = *(_QWORD *)(v0 + 248);
      v25 = *(_QWORD *)(v0 + 256);
      v27 = *(_QWORD *)(v0 + 184);
      v28 = *(_QWORD *)(v0 + 152);
      sub_10005972C(*(_QWORD *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 304) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 304))+ *(_QWORD *)(v0 + 272) * v2, v27, type metadata accessor for KeyDropInterface.KeyPackage);
      v29 = *(_QWORD *)(v27 + *(int *)(v28 + 24));
      swift_retain();
      sub_10001BBBC(v26, v25);
      swift_bridgeObjectRetain(v29);
      v31 = sub_10095D688(v30, v26, v25);
      v33 = *(_QWORD *)(v0 + 248);
      v32 = *(_QWORD *)(v0 + 256);
      if (!v11)
        break;
      swift_bridgeObjectRelease();
      swift_release();
      sub_10001BC14(v33, v32);
      if (qword_1010EA050 != -1)
        swift_once(&qword_1010EA050, sub_100906B40);
      v34 = *(_QWORD *)(v0 + 216);
      v35 = *(_QWORD *)(v0 + 224);
      v37 = *(_QWORD *)(v0 + 200);
      v36 = *(_QWORD *)(v0 + 208);
      v38 = *(_QWORD *)(v0 + 184);
      v39 = *(_QWORD *)(v0 + 168);
      v40 = type metadata accessor for Logger(0);
      sub_10001A9E8(v40, (uint64_t)qword_1011B7940);
      sub_10005972C(v35, v34, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_10005972C(v35, v36, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_10005972C(v35, v37, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_10005972C(v38, v39, type metadata accessor for KeyDropInterface.KeyPackage);
      swift_errorRetain(v11);
      v41 = swift_errorRetain(v11);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v62 = *(_QWORD *)(v0 + 240);
        v66 = v43;
        v12 = *(_QWORD *)(v0 + 216);
        v61 = *(_QWORD *)(v0 + 208);
        v63 = *(_QWORD *)(v0 + 200);
        v67 = *(_QWORD *)(v0 + 184);
        v64 = *(unsigned __int8 **)(v0 + 168);
        v13 = swift_slowAlloc(72, -1);
        v65 = swift_slowAlloc(160, -1);
        v68[0] = v65;
        *(_DWORD *)v13 = 136447747;
        v14 = sub_100906C5C();
        *(_QWORD *)(v0 + 40) = sub_100016940(v14, v15, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v60, v13 + 4, v13 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v12, type metadata accessor for SharingCircleKeyManager.Instruction);
        *(_WORD *)(v13 + 12) = 2160;
        *(_QWORD *)(v0 + 48) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v59, v13 + 14, v13 + 22);
        *(_WORD *)(v13 + 22) = 2081;
        v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v17 = dispatch thunk of CustomStringConvertible.description.getter(v62, v16);
        *(_QWORD *)(v0 + 56) = sub_100016940(v17, v18, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v58, v13 + 24, v13 + 32);
        swift_bridgeObjectRelease();
        sub_1000126B0(v61, type metadata accessor for SharingCircleKeyManager.Instruction);
        *(_WORD *)(v13 + 32) = 2160;
        *(_QWORD *)(v0 + 64) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, v57, v13 + 34, v13 + 42);
        *(_WORD *)(v13 + 42) = 2081;
        v19 = dispatch thunk of CustomStringConvertible.description.getter(v62, v16);
        *(_QWORD *)(v0 + 72) = sub_100016940(v19, v20, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v56, v13 + 44, v13 + 52);
        swift_bridgeObjectRelease();
        sub_1000126B0(v63, type metadata accessor for SharingCircleKeyManager.Instruction);
        *(_WORD *)(v13 + 52) = 2080;
        v21 = sub_100D79CA8(*v64);
        *(_QWORD *)(v0 + 80) = sub_100016940(v21, v22, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v55, v13 + 54, v13 + 62);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v64, type metadata accessor for KeyDropInterface.KeyPackage);
        *(_WORD *)(v13 + 62) = 2082;
        swift_getErrorValue(v11, v55, v0 + 16);
        v23 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
        *(_QWORD *)(v0 + 104) = sub_100016940(v23, v24, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v13 + 64, v13 + 72);
        swift_bridgeObjectRelease();
        swift_errorRelease(v11);
        swift_errorRelease(v11);
        _os_log_impl((void *)&_mh_execute_header, v42, v66, "Failed to save key initial key package %{public}s,\nsharing-id: %{private,mask.hash}s,\n beacon-id: %{private,mask.hash}s,\n packageType: %s, error: %{public}s.", (uint8_t *)v13, 0x48u);
        swift_arrayDestroy(v65, 5, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v13, -1, -1);

        swift_errorRelease(v11);
        sub_1000126B0(v67, type metadata accessor for KeyDropInterface.KeyPackage);
      }
      else
      {
        v44 = *(_QWORD *)(v0 + 208);
        v45 = *(_QWORD *)(v0 + 216);
        v46 = *(_QWORD *)(v0 + 200);
        v47 = *(_QWORD *)(v0 + 184);
        v48 = *(_QWORD *)(v0 + 168);

        swift_errorRelease(v11);
        swift_errorRelease(v11);
        sub_1000126B0(v48, type metadata accessor for KeyDropInterface.KeyPackage);
        sub_1000126B0(v46, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_1000126B0(v44, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_1000126B0(v45, type metadata accessor for SharingCircleKeyManager.Instruction);
        swift_errorRelease(v11);
        sub_1000126B0(v47, type metadata accessor for KeyDropInterface.KeyPackage);
      }
      v11 = 0;
      v2 = *(_QWORD *)(v0 + 280) + 1;
      if (v2 == *(_QWORD *)(v0 + 264))
        goto LABEL_2;
    }
    v49 = v31;
    v51 = *(_BYTE **)(v0 + 176);
    v50 = *(char **)(v0 + 184);
    v52 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease();
    swift_release();
    v53 = *v50;
    sub_10005972C((uint64_t)&v50[*(int *)(v52 + 20)], (uint64_t)&v51[*(int *)(v52 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_10001BC14(v33, v32);
    *v51 = v53;
    *(_QWORD *)&v51[*(int *)(v52 + 24)] = v49;
    v54 = (_QWORD *)swift_task_alloc(dword_10110D184);
    *(_QWORD *)(v0 + 288) = v54;
    *v54 = v0;
    v54[1] = sub_10090A438;
    return sub_1009142D4(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 224));
  }
}

uint64_t sub_10090AB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *log;
  unsigned __int8 *v64;
  uint64_t v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[3];

  v60 = v0 + 56;
  v61 = v0 + 48;
  v58 = v0 + 72;
  v59 = v0 + 64;
  v56 = v0 + 88;
  v57 = v0 + 80;
  sub_1000126B0(*(_QWORD *)(v0 + 176), type metadata accessor for KeyDropInterface.KeyPackage);
  v1 = *(_QWORD *)(v0 + 296);
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 168);
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_1011B7940);
  sub_10005972C(v3, v2, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v3, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v3, v5, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v6, v7, type metadata accessor for KeyDropInterface.KeyPackage);
  v9 = v1;
  swift_errorRetain(v1);
  v10 = swift_errorRetain(v1);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    log = v11;
    v68 = *(_QWORD *)(v0 + 240);
    v66 = v12;
    v14 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 216);
    v62 = *(_QWORD *)(v0 + 200);
    v67 = *(_QWORD *)(v0 + 184);
    v64 = *(unsigned __int8 **)(v0 + 168);
    v15 = swift_slowAlloc(72, -1);
    v65 = swift_slowAlloc(160, -1);
    v69[0] = v65;
    *(_DWORD *)v15 = 136447747;
    v16 = sub_100906C5C();
    *(_QWORD *)(v0 + 40) = sub_100016940(v16, v17, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v61, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v13, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v15 + 12) = 2160;
    *(_QWORD *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v61, v60, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v68, v18);
    *(_QWORD *)(v0 + 56) = sub_100016940(v19, v20, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v59, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v14, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v15 + 32) = 2160;
    *(_QWORD *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v58, v15 + 34, v15 + 42);
    *(_WORD *)(v15 + 42) = 2081;
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v68, v18);
    *(_QWORD *)(v0 + 72) = sub_100016940(v21, v22, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, v57, v15 + 44, v15 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v62, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v15 + 52) = 2080;
    v23 = sub_100D79CA8(*v64);
    *(_QWORD *)(v0 + 80) = sub_100016940(v23, v24, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v56, v15 + 54, v15 + 62);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v64, type metadata accessor for KeyDropInterface.KeyPackage);
    *(_WORD *)(v15 + 62) = 2082;
    swift_getErrorValue(v9, v56, v0 + 16);
    v25 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 104) = sub_100016940(v25, v26, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v15 + 64, v15 + 72);
    swift_bridgeObjectRelease();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, log, v66, "Failed to save key initial key package %{public}s,\nsharing-id: %{private,mask.hash}s,\n beacon-id: %{private,mask.hash}s,\n packageType: %s, error: %{public}s.", (uint8_t *)v15, 0x48u);
    swift_arrayDestroy(v65, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v9);
    v27 = v67;
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 216);
    v30 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 184);
    v32 = *(_QWORD *)(v0 + 168);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    sub_1000126B0(v32, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v30, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v28, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v29, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_errorRelease(v1);
    v27 = v31;
  }
  sub_1000126B0(v27, type metadata accessor for KeyDropInterface.KeyPackage);
  v33 = *(_QWORD *)(v0 + 280) + 1;
  if (v33 == *(_QWORD *)(v0 + 264))
  {
    swift_bridgeObjectRelease();
    v43 = *(_QWORD *)(v0 + 216);
    v44 = *(_QWORD *)(v0 + 224);
    v46 = *(_QWORD *)(v0 + 200);
    v45 = *(_QWORD *)(v0 + 208);
    v48 = *(_QWORD *)(v0 + 176);
    v47 = *(_QWORD *)(v0 + 184);
    v49 = *(_QWORD *)(v0 + 168);
    sub_1000126B0(v44, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_task_dealloc(v44);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 280) = v33;
    v35 = *(_QWORD *)(v0 + 248);
    v34 = *(_QWORD *)(v0 + 256);
    v36 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 152);
    sub_10005972C(*(_QWORD *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 304) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 304))+ *(_QWORD *)(v0 + 272) * v33, v36, type metadata accessor for KeyDropInterface.KeyPackage);
    v38 = *(_QWORD *)(v36 + *(int *)(v37 + 24));
    swift_retain();
    sub_10001BBBC(v35, v34);
    swift_bridgeObjectRetain(v38);
    v40 = sub_10095D688(v39, v35, v34);
    v42 = *(_QWORD *)(v0 + 248);
    v41 = *(_QWORD *)(v0 + 256);
    v50 = v40;
    v52 = *(_BYTE **)(v0 + 176);
    v51 = *(_BYTE **)(v0 + 184);
    v53 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease();
    swift_release();
    LOBYTE(v38) = *v51;
    sub_10005972C((uint64_t)&v51[*(int *)(v53 + 20)], (uint64_t)&v52[*(int *)(v53 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_10001BC14(v42, v41);
    *v52 = v38;
    *(_QWORD *)&v52[*(int *)(v53 + 24)] = v50;
    v54 = (_QWORD *)swift_task_alloc(dword_10110D184);
    *(_QWORD *)(v0 + 288) = v54;
    *v54 = v0;
    v54[1] = sub_10090A438;
    return sub_1009142D4(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 224));
  }
}

uint64_t sub_10090B244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v4[12] = a2;
  v4[13] = v3;
  v4[11] = a1;
  v4[14] = *v3;
  v6 = sub_10001A9A8(&qword_1010F1980);
  v4[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeyDropJoinToken(0);
  v4[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[17] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v9);
  v4[19] = swift_task_alloc(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_10110D164);
  v4[20] = v10;
  *v10 = v4;
  v10[1] = sub_10090B310;
  return sub_10090C6D8((uint64_t)(v4 + 2), a3);
}

uint64_t sub_10090B310()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10090B5B0;
  else
    v4 = sub_10090B374;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 104), 0);
}

uint64_t sub_10090B374()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;

  v1 = v0[6];
  v0[10] = v1;
  swift_bridgeObjectRetain(v1);
  sub_1000D9530(v0 + 2);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[17];
    v4 = v0[12];
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = v4 + *(int *)(type metadata accessor for OwnerPeerTrust(0) + 20);
    v7 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v8 = v0[18];
      sub_10005972C(v5, v8, type metadata accessor for KeyDropJoinToken);
      v9 = static UUID.== infix(_:_:)(v8, v6);
      v10 = v0[18];
      if ((v9 & 1) != 0)
        break;
      sub_1000126B0(v0[18], type metadata accessor for KeyDropJoinToken);
      v5 += v7;
      if (!--v2)
      {
        sub_1001AE6D8(v0 + 10);
        goto LABEL_6;
      }
    }
    v12 = v0[15];
    sub_1001AE6D8(v0 + 10);
    sub_1000126EC(v10, v12, type metadata accessor for KeyDropJoinToken);
    v11 = 0;
  }
  else
  {
LABEL_6:
    v11 = 1;
  }
  v13 = v0[16];
  v14 = v0[17];
  v15 = v0[15];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, v11, 1, v13);
  sub_1001AE6D8(v0 + 10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
  {
    sub_100004048(v0[15], &qword_1010F1980);
    v16 = sub_1000D94EC();
    v17 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v16, 0, 0);
    *v18 = 13;
    swift_willThrow(v17);
  }
  else
  {
    v19 = v0[21];
    v20 = v0[19];
    sub_1000126EC(v0[15], v20, type metadata accessor for KeyDropJoinToken);
    sub_10090B600(v20);
    v21 = v0[19];
    if (!v19)
    {
      v25 = v0[18];
      v26 = v0[15];
      sub_1000126B0(v0[19], type metadata accessor for KeyDropJoinToken);
      swift_task_dealloc(v21);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      v24 = (uint64_t (*)(void))v0[1];
      return v24();
    }
    sub_1000126B0(v0[19], type metadata accessor for KeyDropJoinToken);
  }
  v22 = v0[18];
  v23 = v0[15];
  swift_task_dealloc(v0[19]);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_10090B5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10090B600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v3 = type metadata accessor for P256.Signing.PublicKey(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for P256.Signing.PrivateKey(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20));
  v12 = v11[1];
  v22 = *v11;
  v23 = v12;
  sub_10001BBBC(v22, v12);
  result = P256.Signing.PrivateKey.init<A>(rawRepresentation:)(&v22, &type metadata for Data, &protocol witness table for Data);
  if (!v1)
  {
    P256.Signing.PrivateKey.publicKey.getter(result);
    v14 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v15 = P256.Signing.PublicKey.compactRepresentation.getter(v14);
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v17 >> 60 == 15)
    {
      v18 = sub_1000D94EC();
      v19 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v18, 0, 0);
      *v20 = 18;
      return swift_willThrow(v19);
    }
    else
    {
      v22 = v15;
      v23 = v17;
      v21 = sub_100035530();
      DataProtocol.stableUUID.getter(&type metadata for Data, v21);
      return sub_10001EF3C(v15, v17);
    }
  }
  return result;
}

uint64_t sub_10090B7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3[60] = a2;
  v3[61] = v2;
  v3[59] = a1;
  v5 = sub_10001A9A8(&qword_1010F1980);
  v3[62] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for KeyDropJoinToken(0);
  v3[63] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[64] = v7;
  v3[65] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerSharingCircle(0);
  v3[66] = v8;
  v3[67] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v3[68] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[69] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[70] = swift_task_alloc(v11);
  v3[71] = swift_task_alloc(v11);
  v3[72] = swift_task_alloc(v11);
  v3[73] = swift_task_alloc(v11);
  v12 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v3[74] = v12;
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[75] = swift_task_alloc(v13);
  v3[76] = swift_task_alloc(v13);
  v14 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v3[77] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[78] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[79] = swift_task_alloc(v16);
  v3[80] = swift_task_alloc(v16);
  v17 = sub_10001A9A8(&qword_10110D468);
  v3[81] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1 + *(int *)(v8 + 20);
  v19 = (_QWORD *)swift_task_alloc(dword_10110D164);
  v3[82] = v19;
  *v19 = v3;
  v19[1] = sub_10090B978;
  return sub_10090C6D8((uint64_t)(v3 + 46), v18);
}

uint64_t sub_10090B978()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(*v1 + 656);
  v3 = *v1;
  *(_QWORD *)(v3 + 664) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_10090BAA8, *(_QWORD *)(v3 + 488), 0);
  v4 = *(_QWORD *)(v3 + 640);
  v5 = *(_QWORD *)(v3 + 632);
  v6 = *(_QWORD *)(v3 + 608);
  v7 = *(_QWORD *)(v3 + 600);
  v8 = *(_QWORD *)(v3 + 584);
  v9 = *(_QWORD *)(v3 + 576);
  v10 = *(_QWORD *)(v3 + 568);
  v13 = *(_QWORD *)(v3 + 560);
  v14 = *(_QWORD *)(v3 + 536);
  v15 = *(_QWORD *)(v3 + 520);
  v11 = *(_QWORD *)(v3 + 496);
  swift_task_dealloc(*(_QWORD *)(v3 + 648));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_10090BAA8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(_QWORD);
  NSObject *v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t);
  uint64_t *v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  os_log_t log;
  os_log_t loga;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136[3];

  v1 = *(_QWORD *)(v0 + 376);
  if (v1 >> 60 == 15)
  {
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 15;
    swift_willThrow(v3);
    sub_1000D9530((uint64_t *)(v0 + 368));
LABEL_5:
    v12 = *(_QWORD *)(v0 + 640);
    v13 = *(_QWORD *)(v0 + 632);
    v14 = *(_QWORD *)(v0 + 608);
    v15 = *(_QWORD *)(v0 + 600);
    v16 = *(_QWORD *)(v0 + 584);
    v17 = *(_QWORD *)(v0 + 576);
    v18 = *(_QWORD *)(v0 + 568);
    v19 = *(_QWORD *)(v0 + 560);
    v20 = *(_QWORD *)(v0 + 536);
    v130 = *(_QWORD *)(v0 + 520);
    v132 = *(_QWORD *)(v0 + 496);
    swift_task_dealloc(*(_QWORD *)(v0 + 648));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v130);
    swift_task_dealloc(v132);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = sub_10001BBBC(v5, v1);
  PropertyListEncoder.init()(v8);
  *(_QWORD *)(v0 + 432) = v5;
  *(_QWORD *)(v0 + 440) = v1;
  v9 = sub_1001EC4B8();
  v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 432, &type metadata for SharedSecretKey, v9);
  if (v6)
  {
    swift_release();
    sub_1000D9530((uint64_t *)(v0 + 368));
    sub_10001EF3C(v5, v1);
    goto LABEL_5;
  }
  v21 = v11;
  v131 = v1;
  v126 = v7;
  v128 = v5;
  v129 = (uint64_t *)(v0 + 368);
  v22 = *(_QWORD *)(v0 + 648);
  v134 = *(_QWORD *)(v0 + 480);
  v23 = v10;
  swift_release();
  v124 = sub_10001A9A8(&qword_101109250);
  inited = swift_initStackObject(v124, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v25 = type metadata accessor for EncryptedData(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v22, 1, 1, v25);
  sub_10001BBBC(v23, v21);
  sub_100D7CD98(0, v23, v21, v22, (_QWORD *)(v0 + 296));
  *(_OWORD *)(inited + 32) = *(_OWORD *)(v0 + 296);
  v27 = *(_OWORD *)(v0 + 312);
  v28 = *(_OWORD *)(v0 + 328);
  v29 = *(_OWORD *)(v0 + 344);
  *(_QWORD *)(inited + 96) = *(_QWORD *)(v0 + 360);
  *(_OWORD *)(inited + 64) = v28;
  *(_OWORD *)(inited + 80) = v29;
  *(_OWORD *)(inited + 48) = v27;
  v30 = (uint64_t *)(v134 + *(int *)(type metadata accessor for OwnerPeerTrust(0) + 36));
  v31 = v21;
  v33 = *v30;
  v32 = v30[1];
  sub_10001BBBC(*v30, v32);
  v119 = v23;
  log = (os_log_t)sub_10095FD50(inited, v33, v32);
  v113 = v30;
  v115 = v26;
  v117 = v25;
  v122 = v31;
  v34 = *(_QWORD *)(v0 + 472);
  sub_10001BC14(v33, v32);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for KeyDropInterface.KeyPackage.Key);
  v35 = objc_autoreleasePoolPush();
  sub_10084EE10(v34);
  objc_autoreleasePoolPop(v35);
  v36 = *(_QWORD *)(v0 + 472);
  v37 = objc_autoreleasePoolPush();
  sub_10084EE10(v36);
  objc_autoreleasePoolPop(v37);
  v38 = *(_BYTE **)(v0 + 640);
  v39 = *(_QWORD *)(v0 + 616);
  v40 = *(_QWORD *)(v0 + 608);
  v41 = *(_QWORD *)(v0 + 592);
  v42 = *(_QWORD *)(v0 + 576);
  v43 = *(_QWORD *)(v0 + 544);
  v44 = *(_QWORD *)(v0 + 480);
  v45 = *(void (**)(_QWORD))(*(_QWORD *)(v0 + 552) + 32);
  ((void (*)(uint64_t, _QWORD, uint64_t))v45)(v40, *(_QWORD *)(v0 + 584), v43);
  *(_QWORD *)(v40 + *(int *)(v41 + 20)) = 0;
  v133 = v41;
  v112 = v45;
  ((void (*)(uint64_t, uint64_t, uint64_t))v45)(v40 + *(int *)(v41 + 24), v42, v43);
  v46 = v39;
  *v38 = 7;
  sub_1000126EC(v40, (uint64_t)&v38[*(int *)(v39 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
  *(_QWORD *)&v38[*(int *)(v39 + 24)] = log;
  v47 = *(_QWORD *)(v0 + 400);
  v48 = (unint64_t *)swift_task_alloc(32);
  v48[2] = v44;
  swift_bridgeObjectRetain(v47);
  v49 = sub_10008B508((uint64_t (*)(char *))sub_100961BF8, v48, v47);
  swift_task_dealloc(v48);
  v50 = *(_QWORD *)(v49 + 16);
  if (v50 < 2)
  {
    v67 = v122;
    v51 = v131;
  }
  else
  {
    v51 = v131;
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v52 = *(_QWORD *)(v0 + 536);
    v53 = *(_QWORD *)(v0 + 472);
    v54 = type metadata accessor for Logger(0);
    sub_10001A9E8(v54, (uint64_t)qword_1011B7940);
    sub_10005972C(v53, v52, type metadata accessor for OwnerSharingCircle);
    swift_bridgeObjectRetain_n(v49, 2);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = os_log_type_enabled(v56, v57);
    v59 = *(_QWORD *)(v0 + 536);
    if (v58)
    {
      v60 = v49;
      v61 = swift_slowAlloc(32, -1);
      v110 = swift_slowAlloc(32, -1);
      v136[0] = v110;
      *(_DWORD *)v61 = 141558531;
      *(_QWORD *)(v0 + 448) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v61 + 4, v61 + 12);
      *(_WORD *)(v61 + 12) = 2081;
      v62 = type metadata accessor for UUID(0);
      v63 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v64 = v62;
      v49 = v60;
      v51 = v131;
      v65 = dispatch thunk of CustomStringConvertible.description.getter(v64, v63);
      *(_QWORD *)(v0 + 456) = sub_100016940(v65, v66, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v61 + 14, v61 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v59, type metadata accessor for OwnerSharingCircle);
      *(_WORD *)(v61 + 22) = 2048;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 464) = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v61 + 24, v61 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Multiple join tokens found for ownerCircle: %{private,mask.hash}s, count: %ld.", (uint8_t *)v61, 0x20u);
      swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1000126B0(v59, type metadata accessor for OwnerSharingCircle);

      swift_bridgeObjectRelease();
    }
    v50 = *(_QWORD *)(v49 + 16);
    v67 = v122;
  }
  if (v50)
  {
    v68 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 512) + 80);
    sub_10005972C(v49 + ((v68 + 32) & ~v68), *(_QWORD *)(v0 + 496), type metadata accessor for KeyDropJoinToken);
    v69 = 0;
  }
  else
  {
    v69 = 1;
  }
  v70 = *(_QWORD *)(v0 + 504);
  v71 = *(_QWORD *)(v0 + 512);
  v72 = *(_QWORD *)(v0 + 496);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v72, v69, 1, v70);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v72, 1, v70) == 1)
  {
    v73 = *(_QWORD *)(v0 + 640);
    sub_100004048(*(_QWORD *)(v0 + 496), &qword_1010F1980);
    v74 = sub_1000D94EC();
    v75 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v74, 0, 0);
    *v76 = 13;
    swift_willThrow(v75);
    sub_10001EF3C(v128, v51);
    sub_1000D9530(v129);
    sub_10001BC14(v119, v67);
    sub_1000126B0(v73, type metadata accessor for KeyDropInterface.KeyPackage);
    goto LABEL_5;
  }
  loga = v46;
  v77 = *(_QWORD *)(v0 + 520);
  v78 = *(_QWORD *)(v0 + 504);
  sub_1000126EC(*(_QWORD *)(v0 + 496), v77, type metadata accessor for KeyDropJoinToken);
  v79 = swift_allocObject(v126, *(unsigned int *)(v126 + 48), *(unsigned __int16 *)(v126 + 52));
  PropertyListEncoder.init()(v79);
  v80 = sub_100006204(&qword_1010EC908, type metadata accessor for KeyDropJoinToken, (uint64_t)&unk_100E69140);
  v81 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v77, v78, v80);
  v83 = v82;
  v84 = *(_QWORD *)(v0 + 648);
  swift_release();
  v85 = swift_initStackObject(v124, v0 + 120);
  *(_OWORD *)(v85 + 16) = xmmword_100E22B00;
  v115(v84, 1, 1, v117);
  sub_10001BBBC(v81, v83);
  sub_100D7CD98(0, v81, v83, v84, (_QWORD *)(v0 + 224));
  *(_OWORD *)(v85 + 32) = *(_OWORD *)(v0 + 224);
  v86 = *(_OWORD *)(v0 + 240);
  v87 = *(_OWORD *)(v0 + 256);
  v88 = *(_OWORD *)(v0 + 272);
  *(_QWORD *)(v85 + 96) = *(_QWORD *)(v0 + 288);
  *(_OWORD *)(v85 + 64) = v87;
  *(_OWORD *)(v85 + 80) = v88;
  *(_OWORD *)(v85 + 48) = v86;
  v90 = *v113;
  v89 = v113[1];
  sub_10001BBBC(*v113, v89);
  v91 = sub_10095FD50(v85, v90, v89);
  v127 = v83;
  v92 = *(_QWORD *)(v0 + 472);
  sub_10001BC14(v90, v89);
  swift_setDeallocating(v85);
  swift_arrayDestroy(v85 + 32, 1, &type metadata for KeyDropInterface.KeyPackage.Key);
  v93 = objc_autoreleasePoolPush();
  sub_10084EE10(v92);
  objc_autoreleasePoolPop(v93);
  v94 = *(_QWORD *)(v0 + 472);
  v95 = objc_autoreleasePoolPush();
  sub_10084EE10(v94);
  objc_autoreleasePoolPop(v95);
  v96 = *(_QWORD *)(v0 + 640);
  v97 = *(_BYTE **)(v0 + 632);
  v98 = *(_QWORD *)(v0 + 624);
  v99 = *(_QWORD *)(v0 + 600);
  v118 = *(_QWORD *)(v0 + 584);
  v123 = *(_QWORD *)(v0 + 576);
  v114 = *(_QWORD *)(v0 + 608);
  v116 = *(_QWORD *)(v0 + 568);
  v100 = *(_QWORD *)(v0 + 560);
  v109 = *(_QWORD *)(v0 + 648);
  v111 = v100;
  v101 = *(_QWORD *)(v0 + 544);
  v125 = *(_QWORD *)(v0 + 536);
  v108 = *(_QWORD *)(v0 + 520);
  v135 = *(_QWORD *)(v0 + 496);
  v112(v99);
  *(_QWORD *)(v99 + *(int *)(v133 + 20)) = 0;
  ((void (*)(uint64_t, uint64_t, uint64_t))v112)(v99 + *(int *)(v133 + 24), v100, v101);
  *v97 = 11;
  sub_1000126EC(v99, (uint64_t)&v97[SHIDWORD(loga[2].isa)], type metadata accessor for KeyDropInterface.KeyAlignment);
  *(_QWORD *)&v97[SLODWORD(loga[3].isa)] = v91;
  v102 = sub_10001A9A8(&qword_101109258);
  v103 = *(_QWORD *)(v98 + 72);
  v104 = *(unsigned __int8 *)(v98 + 80);
  v105 = (v104 + 32) & ~v104;
  v106 = swift_allocObject(v102, v105 + 2 * v103, v104 | 7);
  *(_OWORD *)(v106 + 16) = xmmword_100E22B10;
  v107 = v106 + v105;
  sub_10005972C(v96, v107, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_1000126EC((uint64_t)v97, v107 + v103, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_10001EF3C(v128, v131);
  sub_1000D9530(v129);
  sub_10001BC14(v81, v127);
  sub_10001BC14(v119, v122);
  sub_1000126B0(v108, type metadata accessor for KeyDropJoinToken);
  sub_1000126B0(v96, type metadata accessor for KeyDropInterface.KeyPackage);
  swift_task_dealloc(v109);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v114);
  swift_task_dealloc(v99);
  swift_task_dealloc(v118);
  swift_task_dealloc(v123);
  swift_task_dealloc(v116);
  swift_task_dealloc(v111);
  swift_task_dealloc(v125);
  swift_task_dealloc(v108);
  swift_task_dealloc(v135);
  (*(void (**)(uint64_t))(v0 + 8))(v106);
}

uint64_t sub_10090C6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[16] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[17] = v6;
  v3[18] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10090C740, 0, 0);
}

uint64_t sub_10090C740()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 120);
  *(_QWORD *)(v0 + 152) = v1;
  return swift_task_switch(sub_10090C75C, v1, 0);
}

uint64_t sub_10090C75C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[18];
  v1 = v0[19];
  v4 = v0[16];
  v3 = v0[17];
  v5 = v0[15];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[13], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109E208, v7 + v3, v6 | 7);
  v0[20] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[21] = v10;
  v11 = sub_10001A9A8(&qword_1010F1960);
  *v10 = v0;
  v10[1] = sub_10090C850;
  return unsafeBlocking<A>(_:)(v0 + 10, sub_1001AE6B8, v8, v11);
}

uint64_t sub_10090C850()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_release();
  return swift_task_switch(sub_10090C8B0, v1, 0);
}

uint64_t sub_10090C8B0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v0 + 80);
  return swift_task_switch(sub_10090C8CC, 0, 0);
}

uint64_t sub_10090C8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = *(_QWORD *)(v0 + 176);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7940);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 176);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)(v0 + 88) = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Got %ld keys in the sharing circle secrets keychain.", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  sub_10095CF6C(*(_QWORD *)(v0 + 176), (_QWORD *)(v0 + 16));
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_OWORD **)(v0 + 96);
  v11 = *(_OWORD *)(v0 + 16);
  v12 = *(_OWORD *)(v0 + 32);
  v13 = *(_OWORD *)(v0 + 64);
  v10[2] = *(_OWORD *)(v0 + 48);
  v10[3] = v13;
  *v10 = v11;
  v10[1] = v12;
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10090CA54(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[19] = swift_task_alloc(v5);
  v2[20] = swift_task_alloc(v5);
  v2[21] = swift_task_alloc(v5);
  v2[22] = swift_task_alloc(v5);
  v2[23] = swift_task_alloc(v5);
  v2[24] = swift_task_alloc(v5);
  v2[25] = swift_task_alloc(v5);
  v2[26] = swift_task_alloc(v5);
  return swift_task_switch(sub_10090CB0C, v1, 0);
}

uint64_t sub_10090CB0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 216) = v2;
  if (v2)
  {
    v3 = *(_DWORD *)(*(_QWORD *)(v0 + 144) + 80);
    *(_DWORD *)(v0 + 288) = v3;
    *(_BYTE *)(v0 + 292) = 0;
    *(_QWORD *)(v0 + 224) = v2;
    *(_QWORD *)(v0 + 232) = 0;
    v4 = *(_QWORD *)(v0 + 208);
    v5 = v1 + ((v3 + 32) & ~(unint64_t)v3);
    swift_bridgeObjectRetain(v1);
    sub_10005972C(v5, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v7 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 208);
    v9 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 192);
    v10 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 240) = sub_10001A9E8(v10, (uint64_t)qword_1011B7940);
    sub_10005972C(v6, v7, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_10005972C(v6, v8, type metadata accessor for SharingCircleKeyManager.Instruction);
    v11 = sub_10005972C(v6, v9, type metadata accessor for SharingCircleKeyManager.Instruction);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 184);
    if (v14)
    {
      v18 = swift_slowAlloc(52, -1);
      v40 = swift_slowAlloc(96, -1);
      v41[0] = v40;
      *(_DWORD *)v18 = 136447235;
      v19 = sub_100906C5C();
      v39 = v17;
      *(_QWORD *)(v0 + 80) = sub_100016940(v19, v20, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v15, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v18 + 12) = 2160;
      *(_QWORD *)(v0 + 88) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v18 + 14, v18 + 22);
      *(_WORD *)(v18 + 22) = 2081;
      v21 = type metadata accessor for UUID(0);
      v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
      *(_QWORD *)(v0 + 96) = sub_100016940(v23, v24, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v18 + 24, v18 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v16, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v18 + 32) = 2160;
      *(_QWORD *)(v0 + 104) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v18 + 34, v18 + 42);
      *(_WORD *)(v18 + 42) = 2081;
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
      *(_QWORD *)(v0 + 112) = sub_100016940(v25, v26, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v18 + 44, v18 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0(v39, type metadata accessor for SharingCircleKeyManager.Instruction);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Upload keys: %{public}s, share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v18, 0x34u);
      swift_arrayDestroy(v40, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 200), type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v16, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v17, type metadata accessor for SharingCircleKeyManager.Instruction);

    }
    v38 = (_QWORD *)swift_task_alloc(dword_10110D1D4);
    *(_QWORD *)(v0 + 248) = v38;
    *v38 = v0;
    v38[1] = sub_10090CF9C;
    return sub_100924450(*(_QWORD *)(v0 + 208));
  }
  else
  {
    v27 = sub_1000D94EC();
    v28 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v27, 0, 0);
    *v29 = 20;
    swift_willThrow(v28);
    v30 = *(_QWORD *)(v0 + 200);
    v32 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 192);
    v34 = *(_QWORD *)(v0 + 168);
    v33 = *(_QWORD *)(v0 + 176);
    v36 = *(_QWORD *)(v0 + 152);
    v35 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10090CF9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 248);
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc(v4);
  v5 = v3[16];
  if (v1)
  {
    swift_bridgeObjectRelease();
    v6 = sub_10090DFB8;
  }
  else
  {
    v6 = sub_10090D01C;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10090D01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t type;
  uint64_t v70;
  uint64_t v71[2];

  if (*(_QWORD *)(*(_QWORD *)(v0 + 256) + 16))
  {
    v1 = *(_QWORD *)(v0 + 208);
    v2 = *(_QWORD *)(v0 + 136);
    v3 = v1 + *(int *)(v2 + 20);
    v4 = *(_BYTE *)(v1 + *(int *)(v2 + 36));
    v5 = (_QWORD *)swift_task_alloc(dword_101119654);
    *(_QWORD *)(v0 + 272) = v5;
    *v5 = v0;
    v5[1] = sub_10090D81C;
    return sub_100C11224(v3, v4, *(_QWORD *)(v0 + 256));
  }
  v70 = v0 + 80;
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRelease();
  sub_10005972C(v7, v8, type metadata accessor for SharingCircleKeyManager.Instruction);
  v10 = sub_10005972C(v7, v9, type metadata accessor for SharingCircleKeyManager.Instruction);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 160);
  if (v13)
  {
    v17 = swift_slowAlloc(42, -1);
    v68 = swift_slowAlloc(64, -1);
    v71[0] = v68;
    *(_DWORD *)v17 = 141558787;
    *(_QWORD *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2081;
    v66 = v15;
    v67 = v14;
    v18 = type metadata accessor for UUID(0);
    v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
    *(_QWORD *)(v0 + 56) = sub_100016940(v20, v21, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v16, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v17 + 22) = 2160;
    *(_QWORD *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v17 + 24, v17 + 32);
    *(_WORD *)(v17 + 32) = 2081;
    v15 = v17 + 34;
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
    *(_QWORD *)(v0 + 72) = sub_100016940(v22, v23, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v70, v17 + 34, v17 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v66, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "No keys to upload for share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v17, 0x2Au);
    swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v24 = v67;
  }
  else
  {

    sub_1000126B0(v15, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v16, type metadata accessor for SharingCircleKeyManager.Instruction);
    v24 = v14;
  }
  sub_1000126B0(v24, type metadata accessor for SharingCircleKeyManager.Instruction);
  v25 = *(_QWORD *)(v0 + 232) + 1;
  if (v25 == *(_QWORD *)(v0 + 216))
  {
    v26 = *(_BYTE *)(v0 + 292);
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
    {
      v27 = *(_QWORD *)(v0 + 200);
      v29 = *(_QWORD *)(v0 + 184);
      v28 = *(_QWORD *)(v0 + 192);
      v31 = *(_QWORD *)(v0 + 168);
      v30 = *(_QWORD *)(v0 + 176);
      v33 = *(_QWORD *)(v0 + 152);
      v32 = *(_QWORD *)(v0 + 160);
      swift_task_dealloc(*(_QWORD *)(v0 + 208));
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
    }
    else
    {
      v55 = sub_1000D94EC();
      v56 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v55, 0, 0);
      *v57 = 20;
      swift_willThrow(v56);
      v58 = *(_QWORD *)(v0 + 200);
      v60 = *(_QWORD *)(v0 + 184);
      v59 = *(_QWORD *)(v0 + 192);
      v62 = *(_QWORD *)(v0 + 168);
      v61 = *(_QWORD *)(v0 + 176);
      v64 = *(_QWORD *)(v0 + 152);
      v63 = *(_QWORD *)(v0 + 160);
      swift_task_dealloc(*(_QWORD *)(v0 + 208));
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 232) = v25;
  if (v25 == *(_QWORD *)(v0 + 224))
  {
    __break(1u);
    goto LABEL_18;
  }
  v15 = v0 + 120;
  sub_10005972C(*(_QWORD *)(v0 + 120)+ ((*(unsigned __int8 *)(v0 + 288) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 288))+ *(_QWORD *)(*(_QWORD *)(v0 + 144) + 72) * v25, *(_QWORD *)(v0 + 208), type metadata accessor for SharingCircleKeyManager.Instruction);
  if (qword_1010EA050 != -1)
LABEL_18:
    swift_once(&qword_1010EA050, sub_100906B40);
  v34 = *(_QWORD *)(v0 + 200);
  v35 = *(_QWORD *)(v0 + 208);
  v37 = *(_QWORD *)(v0 + 184);
  v36 = *(_QWORD *)(v0 + 192);
  v38 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 240) = sub_10001A9E8(v38, (uint64_t)qword_1011B7940);
  sub_10005972C(v35, v34, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v35, v36, type metadata accessor for SharingCircleKeyManager.Instruction);
  v39 = sub_10005972C(v35, v37, type metadata accessor for SharingCircleKeyManager.Instruction);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter(v40);
  v42 = os_log_type_enabled(v40, v41);
  v43 = *(_QWORD *)(v0 + 192);
  v44 = *(_QWORD *)(v0 + 200);
  v45 = *(_QWORD *)(v0 + 184);
  if (v42)
  {
    v46 = swift_slowAlloc(52, -1);
    type = swift_slowAlloc(96, -1);
    v71[0] = type;
    *(_DWORD *)v46 = 136447235;
    v47 = sub_100906C5C();
    *(_QWORD *)(v0 + 80) = sub_100016940(v47, v48, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v70, v0 + 88, v46 + 4, v46 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v44, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v46 + 12) = 2160;
    *(_QWORD *)(v0 + 88) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v46 + 14, v46 + 22);
    *(_WORD *)(v46 + 22) = 2081;
    v49 = type metadata accessor for UUID(0);
    v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
    *(_QWORD *)(v0 + 96) = sub_100016940(v51, v52, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v46 + 24, v46 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v43, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v46 + 32) = 2160;
    *(_QWORD *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v46 + 34, v46 + 42);
    *(_WORD *)(v46 + 42) = 2081;
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
    *(_QWORD *)(v0 + 112) = sub_100016940(v53, v54, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v15, v46 + 44, v46 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v45, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Upload keys: %{public}s, share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v46, 0x34u);
    swift_arrayDestroy(type, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(type, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 200), type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v43, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v45, type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  v65 = (_QWORD *)swift_task_alloc(dword_10110D1D4);
  *(_QWORD *)(v0 + 248) = v65;
  *v65 = v0;
  v65[1] = sub_10090CF9C;
  return sub_100924450(*(_QWORD *)(v0 + 208));
}

uint64_t sub_10090D81C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    v5 = sub_10090E058;
  }
  else
  {
    v5 = sub_10090D8A4;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10090D8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  os_log_t log;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 168);
  sub_10005972C(v1, *(_QWORD *)(v0 + 176), type metadata accessor for SharingCircleKeyManager.Instruction);
  v3 = sub_10005972C(v1, v2, type metadata accessor for SharingCircleKeyManager.Instruction);
  v4 = (uint64_t (*)(uint64_t))Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled((os_log_t)v4, v5))
  {
    v54 = *(_QWORD *)(v0 + 208);
    log = *(os_log_t *)(v0 + 168);
    v50 = *(_QWORD *)(v0 + 176);
    v6 = swift_slowAlloc(42, -1);
    v53 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v0 + 16) = 1752392040;
    v56 = v53;
    *(_DWORD *)v6 = 141558787;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    v7 = type metadata accessor for UUID(0);
    v8 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
    *(_QWORD *)(v0 + 24) = sub_100016940(v9, v10, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v50, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v6 + 22) = 2160;
    *(_QWORD *)(v0 + 32) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 24, v6 + 32);
    *(_WORD *)(v6 + 32) = 2081;
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
    *(_QWORD *)(v0 + 40) = sub_100016940(v11, v12, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 34, v6 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)log, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v4, v5, "Received key upload result for circle %{private,mask.hash}s beacon: %{private,mask.hash}s.", (uint8_t *)v6, 0x2Au);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v13 = v54;
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 208);
    v16 = *(_QWORD *)(v0 + 168);
    v15 = *(_QWORD *)(v0 + 176);

    v4 = type metadata accessor for SharingCircleKeyManager.Instruction;
    sub_1000126B0(v16, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v15, type metadata accessor for SharingCircleKeyManager.Instruction);
    v13 = v14;
  }
  sub_1000126B0(v13, type metadata accessor for SharingCircleKeyManager.Instruction);
  v17 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 232) + 1;
  v19 = v18 >= v17;
  if (v18 == v17)
  {
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(v0 + 200);
    v22 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 192);
    v24 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 176);
    v26 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_BYTE *)(v0 + 292) = 1;
  if (v18 > v17)
    v17 = v18;
  *(_QWORD *)(v0 + 224) = v17;
  *(_QWORD *)(v0 + 232) = v18;
  if (v19)
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = (uint64_t (*)(uint64_t))(v0 + 120);
  sub_10005972C(*(_QWORD *)(v0 + 120)+ ((*(unsigned __int8 *)(v0 + 288) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 288))+ *(_QWORD *)(*(_QWORD *)(v0 + 144) + 72) * v18, *(_QWORD *)(v0 + 208), type metadata accessor for SharingCircleKeyManager.Instruction);
  if (qword_1010EA050 != -1)
LABEL_15:
    swift_once(&qword_1010EA050, sub_100906B40);
  v29 = *(_QWORD *)(v0 + 200);
  v28 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 192);
  v32 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 240) = sub_10001A9E8(v32, (uint64_t)qword_1011B7940);
  sub_10005972C(v28, v29, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v28, v30, type metadata accessor for SharingCircleKeyManager.Instruction);
  v33 = sub_10005972C(v28, v31, type metadata accessor for SharingCircleKeyManager.Instruction);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v36 = os_log_type_enabled(v34, v35);
  v38 = *(_QWORD *)(v0 + 192);
  v37 = *(_QWORD *)(v0 + 200);
  v39 = *(_QWORD *)(v0 + 184);
  if (v36)
  {
    v40 = swift_slowAlloc(52, -1);
    v55 = swift_slowAlloc(96, -1);
    v56 = v55;
    *(_DWORD *)v40 = 136447235;
    v41 = sub_100906C5C();
    v51 = v39;
    *(_QWORD *)(v0 + 80) = sub_100016940(v41, v42, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v37, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v40 + 12) = 2160;
    *(_QWORD *)(v0 + 88) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v40 + 14, v40 + 22);
    *(_WORD *)(v40 + 22) = 2081;
    v43 = type metadata accessor for UUID(0);
    v44 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    *(_QWORD *)(v0 + 96) = sub_100016940(v45, v46, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v40 + 24, v40 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v38, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v40 + 32) = 2160;
    *(_QWORD *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v40 + 34, v40 + 42);
    *(_WORD *)(v40 + 42) = 2081;
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    *(_QWORD *)(v0 + 112) = sub_100016940(v47, v48, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v4, v40 + 44, v40 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v51, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Upload keys: %{public}s, share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v40, 0x34u);
    swift_arrayDestroy(v55, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 200), type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v38, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v39, type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  v49 = (_QWORD *)swift_task_alloc(dword_10110D1D4);
  *(_QWORD *)(v0 + 248) = v49;
  *v49 = v0;
  v49[1] = sub_10090CF9C;
  return sub_100924450(*(_QWORD *)(v0 + 208));
}

uint64_t sub_10090DFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000126B0(*(_QWORD *)(v0 + 208), type metadata accessor for SharingCircleKeyManager.Instruction);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10090E058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000126B0(*(_QWORD *)(v0 + 208), type metadata accessor for SharingCircleKeyManager.Instruction);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10090E0F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2[10] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v4);
  v2[12] = swift_task_alloc(v4);
  v2[13] = swift_task_alloc(v4);
  return swift_task_switch(sub_10090E170, v1, 0);
}

uint64_t sub_10090E170()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = v0[8];
  v3 = v0[12];
  v2 = v0[13];
  v4 = v0[11];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7940);
  sub_10005972C(v1, v2, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v1, v3, type metadata accessor for SharingCircleKeyManager.Instruction);
  v6 = sub_10005972C(v1, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = v0[12];
  v10 = v0[13];
  v12 = v0[11];
  if (v9)
  {
    v13 = swift_slowAlloc(52, -1);
    v24 = swift_slowAlloc(96, -1);
    v25 = v24;
    *(_DWORD *)v13 = 136447235;
    v14 = sub_100906C5C();
    v23 = v12;
    v0[3] = sub_100016940(v14, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v13 + 12) = 2160;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    v0[5] = sub_100016940(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v13 + 32) = 2160;
    v0[6] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v13 + 34, v13 + 42);
    *(_WORD *)(v13 + 42) = 2081;
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    v0[7] = sub_100016940(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v13 + 44, v13 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v23, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Generate package requests: %{public}s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v13, 0x34u);
    swift_arrayDestroy(v24, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[13], type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v12, type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v0[14] = qword_1011B71A8;
  return swift_task_switch(sub_10090E524, 0, 0);
}

uint64_t sub_10090E524()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 120) = v2;
  *v2 = v0;
  v2[1] = sub_10090E598;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, *(_QWORD *)(v0 + 112), &type metadata for Configuration);
}

uint64_t sub_10090E598()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_10090E5F4, 0, 0);
}

uint64_t sub_10090E5F4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[9];
  v0[16] = v0[2];
  return swift_task_switch(sub_10090E610, v1, 0);
}

uint64_t sub_10090E610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = sub_100C1BADC(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v5 + *(int *)(v4 + 44));
  v8 = *(_QWORD *)(v5 + *(int *)(v4 + 32));
  v9 = (_QWORD *)swift_task_alloc(48);
  v9[2] = v7;
  v9[3] = v5;
  v9[4] = v6;
  swift_bridgeObjectRetain(v8);
  sub_100A75D54((void (*)(_QWORD *__return_ptr, _QWORD, __n128))sub_100961BD8, (uint64_t)v9, v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  swift_task_dealloc(v9);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

void sub_10090E6F0(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v58 = a4;
  v57 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v10 = __chkstk_darwin(v57);
  v12 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v56 - v13;
  v15 = type metadata accessor for BookmarkMetaData(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  v20 = *(_QWORD *)(a2 + 16);
  v59 = a5;
  if (v20 && (v21 = sub_100518EE0(v19), (v22 & 1) != 0))
  {
    sub_10005972C(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v16 + 72) * v21, (uint64_t)v18, type metadata accessor for BookmarkMetaData);
    v23 = *((_QWORD *)v18 + 1);
    sub_1000126B0((uint64_t)v18, type metadata accessor for BookmarkMetaData);
    if (v19 <= 0xD && ((1 << v19) & 0x3D80) != 0 && v23)
    {
      if (qword_1010EA050 != -1)
        swift_once(&qword_1010EA050, sub_100906B40);
      v24 = type metadata accessor for Logger(0);
      sub_10001A9E8(v24, (uint64_t)qword_1011B7940);
      v25 = sub_10005972C(a3, (uint64_t)v12, type metadata accessor for SharingCircleKeyManager.Instruction);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = swift_slowAlloc(32, -1);
        v58 = swift_slowAlloc(64, -1);
        v62 = v58;
        *(_DWORD *)v28 = 136315651;
        v29 = sub_100D79CA8(v19);
        v60 = sub_100016940(v29, v30, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v28 + 4, v28 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12) = 2160;
        v60 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v28 + 14, v28 + 22);
        *(_WORD *)(v28 + 22) = 2081;
        v31 = type metadata accessor for UUID(0);
        v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
        v60 = sub_100016940(v33, v34, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v28 + 24, v28 + 32);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v12, type metadata accessor for SharingCircleKeyManager.Instruction);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Already downloaded key type %s (Skipped),\nnot including in request for circle %{private,mask.hash}s.", (uint8_t *)v28, 0x20u);
        v35 = v58;
        swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v28, -1, -1);
      }
      else
      {
        sub_1000126B0((uint64_t)v12, type metadata accessor for SharingCircleKeyManager.Instruction);
      }

      v55 = 0;
      v54 = v59;
      *v59 = 0;
      v54[1] = 0;
      v54[2] = 2;
      goto LABEL_20;
    }
  }
  else
  {
    v23 = 0;
  }
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v36 = type metadata accessor for Logger(0);
  sub_10001A9E8(v36, (uint64_t)qword_1011B7940);
  v37 = sub_10005972C(a3, (uint64_t)v14, type metadata accessor for SharingCircleKeyManager.Instruction);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = v39;
  if (!os_log_type_enabled(v38, v39))
    goto LABEL_17;
  v41 = swift_slowAlloc(42, -1);
  v56[0] = swift_slowAlloc(64, -1);
  v62 = v56[0];
  *(_DWORD *)v41 = 136315907;
  v42 = sub_100D79CA8(v19);
  v60 = sub_100016940(v42, v43, &v62);
  v56[1] = v5;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v41 + 4, v41 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v41 + 12) = 2048;
  v60 = v23;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v41 + 14, v41 + 22);
  *(_WORD *)(v41 + 22) = 2160;
  v60 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v41 + 24, v41 + 32);
  *(_WORD *)(v41 + 32) = 2081;
  v44 = type metadata accessor for UUID(0);
  LODWORD(v57) = v40;
  v45 = v23;
  v46 = v19;
  v47 = v44;
  v48 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v49 = v47;
  v19 = v46;
  v23 = v45;
  v50 = dispatch thunk of CustomStringConvertible.description.getter(v49, v48);
  v60 = sub_100016940(v50, v51, &v62);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v41 + 34, v41 + 42);
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v14, type metadata accessor for SharingCircleKeyManager.Instruction);
  _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v57, "Downloading key type %s starting from last downloaded index %llu,\nfor circle %{private,mask.hash}s.", (uint8_t *)v41, 0x2Au);
  v52 = v56[0];
  swift_arrayDestroy(v56[0], 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v52, -1, -1);
  swift_slowDealloc(v41, -1, -1);

  if (v23)
  {
    while (1)
    {
      v53 = v23 + 1;
      if (v23 != -1)
        break;
      __break(1u);
LABEL_17:
      sub_1000126B0((uint64_t)v14, type metadata accessor for SharingCircleKeyManager.Instruction);

      if (!v23)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    v53 = 0;
  }
  v55 = v58;
  v54 = v59;
  *v59 = v19;
  v54[1] = v53;
  v54[2] = 0;
LABEL_20:
  v54[3] = v55;
}

uint64_t sub_10090ECE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10090ED14 + 4 * byte_100E5550C[a1]))(0x7972616D697270, 0xE700000000000000);
}

uint64_t sub_10090ED14()
{
  return 0x7261646E6F636573;
}

unint64_t sub_10090ED34()
{
  return 0xD000000000000019;
}

uint64_t sub_10090EE88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2[47] = a1;
  v2[48] = v1;
  v3 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v2[49] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[50] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[51] = swift_task_alloc(v5);
  v2[52] = swift_task_alloc(v5);
  v2[53] = swift_task_alloc(v5);
  v2[54] = swift_task_alloc(v5);
  v6 = type metadata accessor for KeyDropDownloadResponse(0);
  v2[55] = v6;
  v2[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F1980);
  v2[57] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeyDropJoinToken(0);
  v2[58] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[59] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[60] = swift_task_alloc(v10);
  v2[61] = swift_task_alloc(v10);
  v11 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2[62] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[63] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[64] = swift_task_alloc(v13);
  v2[65] = swift_task_alloc(v13);
  v2[66] = swift_task_alloc(v13);
  v2[67] = swift_task_alloc(v13);
  v2[68] = swift_task_alloc(v13);
  v2[69] = swift_task_alloc(v13);
  v2[70] = swift_task_alloc(v13);
  v2[71] = swift_task_alloc(v13);
  v2[72] = swift_task_alloc(v13);
  v2[73] = swift_task_alloc(v13);
  v2[74] = swift_task_alloc(v13);
  v2[75] = swift_task_alloc(v13);
  v2[76] = swift_task_alloc(v13);
  v2[77] = swift_task_alloc(v13);
  return swift_task_switch(sub_10090F058, v1, 0);
}

uint64_t sub_10090F058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_type_t type[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 624) = v2;
  if (v2)
  {
    v3 = v0 + 16;
    v4 = *(_QWORD *)(v0 + 504);
    v5 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 776) = v5;
    *(_QWORD *)(v0 + 632) = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 648) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 640) = 0;
    v6 = *(_QWORD *)(v0 + 616);
    v7 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    swift_bridgeObjectRetain(v1);
    sub_10005972C(v7, v6, type metadata accessor for SharingCircleKeyManager.Instruction);
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v8 = *(_QWORD *)(v0 + 616);
    v9 = *(_QWORD *)(v0 + 608);
    v10 = *(_QWORD *)(v0 + 600);
    v11 = *(_QWORD *)(v0 + 592);
    v12 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 656) = sub_10001A9E8(v12, (uint64_t)qword_1011B7940);
    sub_10005972C(v8, v9, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_10005972C(v8, v10, type metadata accessor for SharingCircleKeyManager.Instruction);
    v13 = sub_10005972C(v8, v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(_QWORD *)(v0 + 608);
    v18 = *(_QWORD *)(v0 + 600);
    v19 = *(_QWORD *)(v0 + 592);
    if (v16)
    {
      v20 = swift_slowAlloc(52, -1);
      v54 = swift_slowAlloc(96, -1);
      v57 = v54;
      *(_DWORD *)v20 = 136447235;
      v21 = sub_100906C5C();
      *(_QWORD *)(v0 + 336) = sub_100016940(v21, v22, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v17, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v20 + 12) = 2160;
      *(_QWORD *)(v0 + 344) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v20 + 14, v20 + 22);
      *(_WORD *)(v20 + 22) = 2081;
      v23 = type metadata accessor for UUID(0);
      v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      *(_QWORD *)(v0 + 352) = sub_100016940(v25, v26, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v20 + 24, v20 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v18, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v20 + 32) = 2160;
      *(_QWORD *)(v0 + 360) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v20 + 34, v20 + 42);
      *(_WORD *)(v20 + 42) = 2081;
      v27 = v24;
      v3 = v0 + 16;
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v23, v27);
      *(_QWORD *)(v0 + 368) = sub_100016940(v28, v29, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v20 + 44, v20 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0(v19, type metadata accessor for SharingCircleKeyManager.Instruction);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Download keys: %{public}s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v20, 0x34u);
      swift_arrayDestroy(v54, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 608), type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v18, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v19, type metadata accessor for SharingCircleKeyManager.Instruction);
    }

    v40 = *(_QWORD *)(v0 + 616);
    v41 = *(int *)(*(_QWORD *)(v0 + 496) + 20);
    *(_DWORD *)(v0 + 780) = v41;
    v42 = v40 + v41;
    v43 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 664) = v43;
    *v43 = v0;
    v43[1] = sub_10090F5CC;
    return sub_10090C6D8(v3, v42);
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 608);
    v31 = *(_QWORD *)(v0 + 600);
    v32 = *(_QWORD *)(v0 + 592);
    v33 = *(_QWORD *)(v0 + 584);
    v34 = *(_QWORD *)(v0 + 576);
    v35 = *(_QWORD *)(v0 + 568);
    v36 = *(_QWORD *)(v0 + 560);
    v37 = *(_QWORD *)(v0 + 552);
    v38 = *(_QWORD *)(v0 + 544);
    v44 = *(_QWORD *)(v0 + 536);
    v45 = *(_QWORD *)(v0 + 528);
    v46 = *(_QWORD *)(v0 + 520);
    v47 = *(_QWORD *)(v0 + 512);
    v48 = *(_QWORD *)(v0 + 488);
    v49 = *(_QWORD *)(v0 + 480);
    v50 = *(_QWORD *)(v0 + 456);
    v51 = *(_QWORD *)(v0 + 448);
    *(_QWORD *)type = *(_QWORD *)(v0 + 432);
    v53 = *(_QWORD *)(v0 + 424);
    v55 = *(_QWORD *)(v0 + 416);
    v56 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(*(_QWORD *)type);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10090F5CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 664);
  *(_QWORD *)(*v1 + 672) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100912638;
  else
    v4 = sub_10090F630;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 384), 0);
}

uint64_t sub_10090F630()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  os_log_type_t v95[8];
  uint64_t v96;
  uint64_t v97;
  os_log_type_t type[8];
  uint64_t typea;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v1 = (uint64_t *)(v0 + 16);
  sub_100005CF0(v0 + 16, v0 + 144, &qword_1010ECB38);
  sub_100005CF0(v0 + 144, v0 + 128, &qword_1010ECB38);
  v2 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 680) = v2;
  if (v2 >> 60 == 15)
  {
    v3 = sub_10005972C(*(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 584), type metadata accessor for SharingCircleKeyManager.Instruction);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 584);
    if (!v6)
    {
      sub_1000126B0(*(_QWORD *)(v0 + 584), type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000D9530((uint64_t *)(v0 + 16));

      goto LABEL_19;
    }
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v102 = v9;
    *(_DWORD *)v8 = 141558275;
    *(_QWORD *)(v8 + 4) = 1752392040;
    *(_WORD *)(v8 + 12) = 2081;
    v10 = type metadata accessor for UUID(0);
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    *(_QWORD *)(v8 + 14) = sub_100016940(v12, v13, &v102);
    swift_bridgeObjectRelease();
    sub_1000126B0(v7, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "No circleSharedSecret found for shareId: %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    goto LABEL_16;
  }
  *(_QWORD *)(v0 + 688) = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 312) = v14;
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(v0 + 472);
    v17 = v14 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v18 = *(_QWORD *)(v0 + 616) + *(int *)(*(_QWORD *)(v0 + 496) + 28);
    sub_10007D62C((_QWORD *)(v0 + 144));
    sub_10007D62C((_QWORD *)(v0 + 144));
    sub_100004F74((_QWORD *)(v0 + 312));
    v19 = *(_QWORD *)(v16 + 72);
    while (1)
    {
      v20 = *(_QWORD *)(v0 + 480);
      sub_10005972C(v17, v20, type metadata accessor for KeyDropJoinToken);
      v21 = static UUID.== infix(_:_:)(v20, v18);
      v22 = *(_QWORD *)(v0 + 480);
      if ((v21 & 1) != 0)
        break;
      sub_1000126B0(v22, type metadata accessor for KeyDropJoinToken);
      v17 += v19;
      if (!--v15)
        goto LABEL_11;
    }
    sub_1000126EC(v22, *(_QWORD *)(v0 + 456), type metadata accessor for KeyDropJoinToken);
    v23 = 0;
  }
  else
  {
    sub_10007D62C((_QWORD *)(v0 + 144));
    sub_10007D62C((_QWORD *)(v0 + 144));
    sub_100004F74((_QWORD *)(v0 + 312));
LABEL_11:
    v23 = 1;
  }
  v24 = *(_QWORD *)(v0 + 464);
  v25 = *(_QWORD *)(v0 + 472);
  v26 = *(_QWORD *)(v0 + 456);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v26, v23, 1, v24);
  sub_1001AE6D8((_QWORD *)(v0 + 312));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) != 1)
  {
    v45 = *(_QWORD *)(v0 + 488);
    v46 = *(_QWORD *)(v0 + 456);
    sub_1000D9530((uint64_t *)(v0 + 16));
    sub_1000126EC(v46, v45, type metadata accessor for KeyDropJoinToken);
    v47 = (_QWORD *)swift_task_alloc(dword_10110D174);
    *(_QWORD *)(v0 + 696) = v47;
    *v47 = v0;
    v47[1] = sub_1009101A8;
    return sub_10090E0F8(*(_QWORD *)(v0 + 616));
  }
  v27 = *(_QWORD *)(v0 + 616);
  v28 = *(_QWORD *)(v0 + 568);
  v29 = *(_QWORD *)(v0 + 560);
  v30 = *(_QWORD *)(v0 + 456);
  sub_1002B1E4C(v0 + 144);
  sub_100004048(v30, &qword_1010F1980);
  sub_10005972C(v27, v28, type metadata accessor for SharingCircleKeyManager.Instruction);
  v31 = sub_10005972C(v27, v29, type metadata accessor for SharingCircleKeyManager.Instruction);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter(v32);
  v34 = os_log_type_enabled(v32, v33);
  v35 = *(_QWORD *)(v0 + 568);
  v36 = *(_QWORD *)(v0 + 560);
  if (v34)
  {
    v93 = *(_QWORD *)(v0 + 560);
    v37 = swift_slowAlloc(42, -1);
    v96 = swift_slowAlloc(64, -1);
    v102 = v96;
    *(_DWORD *)v37 = 141558787;
    *(_QWORD *)(v0 + 232) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v37 + 4, v37 + 12);
    *(_WORD *)(v37 + 12) = 2081;
    v38 = type metadata accessor for UUID(0);
    v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
    *(_QWORD *)(v0 + 160) = sub_100016940(v40, v41, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v35, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v37 + 22) = 2160;
    *(_QWORD *)(v0 + 168) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v37 + 24, v37 + 32);
    *(_WORD *)(v37 + 32) = 2081;
    v42 = v38;
    v1 = (uint64_t *)(v0 + 16);
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v42, v39);
    *(_QWORD *)(v0 + 176) = sub_100016940(v43, v44, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v37 + 34, v37 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v93, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "No joinTokens found for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s.", (uint8_t *)v37, 0x2Au);
    swift_arrayDestroy(v96, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1, -1);
    swift_slowDealloc(v37, -1, -1);
    sub_1002B1E4C(v0 + 144);

LABEL_16:
    sub_1000D9530(v1);
    goto LABEL_19;
  }
  sub_1000D9530((uint64_t *)(v0 + 16));
  sub_1002B1E4C(v0 + 144);
  sub_1000126B0(v35, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_1000126B0(v36, type metadata accessor for SharingCircleKeyManager.Instruction);

LABEL_19:
  sub_1000126B0(*(_QWORD *)(v0 + 616), type metadata accessor for SharingCircleKeyManager.Instruction);
  v49 = *(_QWORD *)(v0 + 640) + 1;
  if (v49 == *(_QWORD *)(v0 + 624))
  {
    v100 = *(_QWORD *)(v0 + 648);
    swift_bridgeObjectRelease();
    v50 = *(_QWORD *)(v0 + 608);
    v51 = *(_QWORD *)(v0 + 600);
    v52 = *(_QWORD *)(v0 + 592);
    v53 = *(_QWORD *)(v0 + 584);
    v54 = *(_QWORD *)(v0 + 576);
    v55 = *(_QWORD *)(v0 + 568);
    v56 = *(_QWORD *)(v0 + 560);
    v57 = *(_QWORD *)(v0 + 552);
    v58 = *(_QWORD *)(v0 + 544);
    v84 = *(_QWORD *)(v0 + 536);
    v85 = *(_QWORD *)(v0 + 528);
    v86 = *(_QWORD *)(v0 + 520);
    v87 = *(_QWORD *)(v0 + 512);
    v88 = *(_QWORD *)(v0 + 488);
    v89 = *(_QWORD *)(v0 + 480);
    v90 = *(_QWORD *)(v0 + 456);
    v92 = *(_QWORD *)(v0 + 448);
    v94 = *(_QWORD *)(v0 + 432);
    *(_QWORD *)v95 = *(_QWORD *)(v0 + 424);
    v97 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)type = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(*(_QWORD *)v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(*(_QWORD *)type);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v100);
  }
  else
  {
    v101 = (uint64_t)v1;
    *(_QWORD *)(v0 + 640) = v49;
    sub_10005972C(*(_QWORD *)(v0 + 376)+ ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))+ *(_QWORD *)(v0 + 632) * v49, *(_QWORD *)(v0 + 616), type metadata accessor for SharingCircleKeyManager.Instruction);
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v59 = *(_QWORD *)(v0 + 616);
    v60 = *(_QWORD *)(v0 + 608);
    v61 = *(_QWORD *)(v0 + 600);
    v62 = *(_QWORD *)(v0 + 592);
    v63 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 656) = sub_10001A9E8(v63, (uint64_t)qword_1011B7940);
    sub_10005972C(v59, v60, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_10005972C(v59, v61, type metadata accessor for SharingCircleKeyManager.Instruction);
    v64 = sub_10005972C(v59, v62, type metadata accessor for SharingCircleKeyManager.Instruction);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.default.getter(v65);
    v67 = os_log_type_enabled(v65, v66);
    v68 = *(_QWORD *)(v0 + 608);
    v69 = *(_QWORD *)(v0 + 600);
    v70 = *(_QWORD *)(v0 + 592);
    if (v67)
    {
      v71 = swift_slowAlloc(52, -1);
      typea = swift_slowAlloc(96, -1);
      v102 = typea;
      *(_DWORD *)v71 = 136447235;
      v72 = sub_100906C5C();
      v91 = v70;
      *(_QWORD *)(v0 + 336) = sub_100016940(v72, v73, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v71 + 4, v71 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v68, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v71 + 12) = 2160;
      *(_QWORD *)(v0 + 344) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v71 + 14, v71 + 22);
      *(_WORD *)(v71 + 22) = 2081;
      v74 = type metadata accessor for UUID(0);
      v75 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v74, v75);
      *(_QWORD *)(v0 + 352) = sub_100016940(v76, v77, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v71 + 24, v71 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v69, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v71 + 32) = 2160;
      *(_QWORD *)(v0 + 360) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v71 + 34, v71 + 42);
      *(_WORD *)(v71 + 42) = 2081;
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v74, v75);
      *(_QWORD *)(v0 + 368) = sub_100016940(v78, v79, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v71 + 44, v71 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0(v91, type metadata accessor for SharingCircleKeyManager.Instruction);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Download keys: %{public}s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v71, 0x34u);
      swift_arrayDestroy(typea, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typea, -1, -1);
      swift_slowDealloc(v71, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 608), type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v69, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v70, type metadata accessor for SharingCircleKeyManager.Instruction);
    }

    v80 = *(_QWORD *)(v0 + 616);
    v81 = *(int *)(*(_QWORD *)(v0 + 496) + 20);
    *(_DWORD *)(v0 + 780) = v81;
    v82 = v80 + v81;
    v83 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 664) = v83;
    *v83 = v0;
    v83[1] = sub_10090F5CC;
    return sub_10090C6D8(v101, v82);
  }
}

uint64_t sub_1009101A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 696);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 704) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100910208, v3, 0);
}

uint64_t sub_100910208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  v1 = *(int *)(v0 + 780);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 496);
  v4 = v2 + *(int *)(v3 + 28);
  v5 = *(_BYTE *)(v2 + *(int *)(v3 + 36));
  v6 = (_QWORD *)swift_task_alloc(dword_10111E0A4);
  *(_QWORD *)(v0 + 712) = v6;
  *v6 = v0;
  v6[1] = sub_10091029C;
  return sub_100D22D80(*(_QWORD *)(v0 + 448), v2 + v1, v4, v5, *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 704));
}

uint64_t sub_10091029C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 712);
  *(_QWORD *)(*v1 + 720) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 384);
    swift_bridgeObjectRelease();
    sub_1002B1E4C(v2 + 144);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_100912CC8;
    v6 = v4;
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 384);
    swift_bridgeObjectRelease();
    v5 = sub_100910344;
    v6 = v7;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_100910344()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139[3];

  v1 = (_QWORD *)(v0 + 144);
  v121 = v0 + 336;
  v3 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v2 + *(int *)(v3 + 28));
  *(_QWORD *)(v0 + 728) = v4;
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v0 + 736) = v5;
  if (v5)
  {
    v116 = v0 + 272;
    v117 = v0 + 264;
    v114 = v0 + 288;
    v115 = v0 + 280;
    v112 = v0 + 304;
    v113 = v0 + 296;
    v111 = v0 + 328;
    v6 = *(_QWORD *)(v0 + 400);
    *(_DWORD *)(v0 + 784) = *(_DWORD *)(*(_QWORD *)(v0 + 496) + 32);
    *(_DWORD *)(v0 + 788) = *(_DWORD *)(v6 + 80);
    *(_QWORD *)(v0 + 744) = *(_QWORD *)(v6 + 72);
    v7 = *(_QWORD *)(v0 + 720);
    swift_bridgeObjectRetain(v4);
    v8 = 0;
    while (1)
    {
      *(_QWORD *)(v0 + 752) = v8;
      v12 = *(int *)(v0 + 784);
      v13 = *(_QWORD *)(v0 + 616);
      v14 = *(unsigned __int8 **)(v0 + 432);
      sub_10005972C(*(_QWORD *)(v0 + 728)+ ((*(unsigned __int8 *)(v0 + 788) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 788))+ *(_QWORD *)(v0 + 744) * v8, (uint64_t)v14, type metadata accessor for KeyDropInterface.KeyPackage);
      v15 = *(_QWORD *)(v13 + v12);
      v16 = *v14;
      swift_bridgeObjectRetain(v15);
      LOBYTE(v13) = sub_100A070EC(v16, v15);
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
      {
        v17 = *(_QWORD *)(v0 + 688);
        v18 = *(_QWORD *)(v0 + 680);
        v19 = *(_QWORD *)(*(_QWORD *)(v0 + 432) + *(int *)(*(_QWORD *)(v0 + 392) + 24));
        sub_10007D62C(v1);
        swift_retain();
        swift_bridgeObjectRetain(v19);
        v21 = sub_10095D688(v20, v17, v18);
        if (!v7)
        {
          v102 = v21;
          v104 = *(unsigned __int8 **)(v0 + 424);
          v103 = *(_QWORD *)(v0 + 432);
          v105 = *(_QWORD *)(v0 + 392);
          swift_bridgeObjectRelease();
          swift_release();
          sub_10005972C(v103 + *(int *)(v105 + 20), (uint64_t)&v104[*(int *)(v105 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
          sub_1002B1E4C((uint64_t)v1);
          *v104 = v16;
          *(_QWORD *)&v104[*(int *)(v105 + 24)] = v102;
          v106 = (_QWORD *)swift_task_alloc(dword_10110D184);
          *(_QWORD *)(v0 + 760) = v106;
          *v106 = v0;
          v106[1] = sub_100911498;
          return sub_1009142D4(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 616));
        }
        swift_bridgeObjectRelease();
        swift_release();
        sub_1002B1E4C((uint64_t)v1);
        v22 = *(_QWORD *)(v0 + 616);
        v23 = *(_QWORD *)(v0 + 520);
        v24 = *(_QWORD *)(v0 + 512);
        v25 = *(_QWORD *)(v0 + 432);
        v26 = *(_QWORD *)(v0 + 408);
        sub_10005972C(v22, *(_QWORD *)(v0 + 528), type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_10005972C(v22, v23, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_10005972C(v22, v24, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_10005972C(v25, v26, type metadata accessor for KeyDropInterface.KeyPackage);
        swift_errorRetain(v7);
        swift_errorRetain(v7);
        swift_errorRetain(v7);
        v27 = swift_errorRetain(v7);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.error.getter(v28);
        v30 = os_log_type_enabled(v28, v29);
        v31 = *(_QWORD *)(v0 + 528);
        v32 = *(_QWORD *)(v0 + 520);
        v137 = *(_QWORD *)(v0 + 512);
        if (v30)
        {
          v133 = *(_QWORD *)(v0 + 432);
          v124 = *(unsigned __int8 **)(v0 + 408);
          v33 = swift_slowAlloc(82, -1);
          v129 = (uint64_t *)swift_slowAlloc(8, -1);
          v131 = swift_slowAlloc(160, -1);
          v139[0] = v131;
          *(_DWORD *)v33 = 136448003;
          v34 = sub_100906C5C();
          v127 = v29;
          *(_QWORD *)(v0 + 256) = sub_100016940(v34, v35, v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v117, v33 + 4, v33 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v31, type metadata accessor for SharingCircleKeyManager.Instruction);
          *(_WORD *)(v33 + 12) = 2160;
          *(_QWORD *)(v0 + 264) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v116, v33 + 14, v33 + 22);
          *(_WORD *)(v33 + 22) = 2081;
          v36 = type metadata accessor for UUID(0);
          v37 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
          *(_QWORD *)(v0 + 272) = sub_100016940(v38, v39, v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, v115, v33 + 24, v33 + 32);
          swift_bridgeObjectRelease();
          sub_1000126B0(v32, type metadata accessor for SharingCircleKeyManager.Instruction);
          *(_WORD *)(v33 + 32) = 2160;
          *(_QWORD *)(v0 + 280) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v115, v114, v33 + 34, v33 + 42);
          *(_WORD *)(v33 + 42) = 2081;
          v40 = v36;
          v1 = (_QWORD *)(v0 + 144);
          v41 = dispatch thunk of CustomStringConvertible.description.getter(v40, v37);
          *(_QWORD *)(v0 + 288) = sub_100016940(v41, v42, v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v114, v113, v33 + 44, v33 + 52);
          swift_bridgeObjectRelease();
          sub_1000126B0(v137, type metadata accessor for SharingCircleKeyManager.Instruction);
          *(_WORD *)(v33 + 52) = 2080;
          v43 = sub_100D79CA8(*v124);
          *(_QWORD *)(v0 + 296) = sub_100016940(v43, v44, v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v113, v112, v33 + 54, v33 + 62);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v124, type metadata accessor for KeyDropInterface.KeyPackage);
          *(_WORD *)(v33 + 62) = 2082;
          swift_getErrorValue(v7, v112, v0 + 80);
          v45 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
          *(_QWORD *)(v0 + 320) = sub_100016940(v45, v46, v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v111, v33 + 64, v33 + 72);
          swift_bridgeObjectRelease();
          swift_errorRelease(v7);
          swift_errorRelease(v7);
          *(_WORD *)(v33 + 72) = 2112;
          swift_errorRetain(v7);
          v47 = _swift_stdlib_bridgeErrorToNSError(v7);
          *(_QWORD *)(v0 + 328) = v47;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v111, v121, v33 + 74, v33 + 82);
          *v129 = v47;
          swift_errorRelease(v7);
          swift_errorRelease(v7);
          _os_log_impl((void *)&_mh_execute_header, v28, v127, "Failed to save key package %{public}s,\nsharing-id: %{private,mask.hash}s,\n beacon-id: %{private,mask.hash}s,\npackageType: %s, error: %{public}s. %@.", (uint8_t *)v33, 0x52u);
          v48 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v129, 1, v48);
          swift_slowDealloc(v129, -1, -1);
          swift_arrayDestroy(v131, 5, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v131, -1, -1);
          swift_slowDealloc(v33, -1, -1);

          swift_errorRelease(v7);
          sub_1000126B0(v133, type metadata accessor for KeyDropInterface.KeyPackage);
          v7 = 0;
        }
        else
        {
          v56 = *(_QWORD *)(v0 + 432);
          v57 = *(_QWORD *)(v0 + 408);

          swift_errorRelease(v7);
          swift_errorRelease(v7);
          swift_errorRelease(v7);
          swift_errorRelease(v7);
          sub_1000126B0(v57, type metadata accessor for KeyDropInterface.KeyPackage);
          sub_1000126B0(v137, type metadata accessor for SharingCircleKeyManager.Instruction);
          sub_1000126B0(v32, type metadata accessor for SharingCircleKeyManager.Instruction);
          sub_1000126B0(v31, type metadata accessor for SharingCircleKeyManager.Instruction);
          swift_errorRelease(v7);
          sub_1000126B0(v56, type metadata accessor for KeyDropInterface.KeyPackage);
          v7 = 0;
          v1 = (_QWORD *)(v0 + 144);
        }
      }
      else
      {
        v49 = *(_QWORD *)(v0 + 616);
        v50 = *(_QWORD *)(v0 + 576);
        sub_10005972C(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 416), type metadata accessor for KeyDropInterface.KeyPackage);
        v51 = sub_10005972C(v49, v50, type metadata accessor for SharingCircleKeyManager.Instruction);
        v52 = Logger.logObject.getter(v51);
        v53 = static os_log_type_t.error.getter(v52);
        if (os_log_type_enabled(v52, v53))
        {
          v54 = *(_QWORD *)(v0 + 416);
          v55 = (_DWORD *)swift_slowAlloc(32, -1);
          *(_QWORD *)(v0 + 248) = swift_slowAlloc(64, -1);
          *v55 = 136446723;
          __asm { BR              X9 }
        }
        v9 = *(_QWORD *)(v0 + 576);
        v10 = *(_QWORD *)(v0 + 432);
        v11 = *(_QWORD *)(v0 + 416);

        sub_1000126B0(v9, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_1000126B0(v11, type metadata accessor for KeyDropInterface.KeyPackage);
        sub_1000126B0(v10, type metadata accessor for KeyDropInterface.KeyPackage);
      }
      v8 = *(_QWORD *)(v0 + 752) + 1;
      if (v8 == *(_QWORD *)(v0 + 736))
      {
        swift_bridgeObjectRelease();
        v3 = *(_QWORD *)(v0 + 440);
        v2 = *(_QWORD *)(v0 + 448);
        break;
      }
    }
  }
  v58 = *(_QWORD *)(v0 + 688);
  v59 = *(_QWORD *)(v0 + 680);
  v60 = *(_QWORD *)(v0 + 648);
  v61 = *(_QWORD *)(v0 + 616);
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + *(int *)(v3 + 24)));
  v63 = sub_10095EE0C(v62, v58, v59, v61);
  sub_1002B1E4C((uint64_t)v1);
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
  v65 = *(_QWORD **)(v0 + 648);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v65 = sub_1007C7C48(0, v65[2] + 1, 1, *(_QWORD **)(v0 + 648));
  v67 = v65[2];
  v66 = v65[3];
  if (v67 >= v66 >> 1)
    v65 = sub_1007C7C48((_QWORD *)(v66 > 1), v67 + 1, 1, v65);
  v68 = *(_QWORD *)(v0 + 616);
  v69 = *(_QWORD *)(v0 + 488);
  v70 = *(_QWORD *)(v0 + 448);
  v65[2] = v67 + 1;
  v65[v67 + 4] = v63;
  sub_1002B1E4C((uint64_t)v1);
  sub_1000126B0(v70, type metadata accessor for KeyDropDownloadResponse);
  sub_1000126B0(v69, type metadata accessor for KeyDropJoinToken);
  sub_1000126B0(v68, type metadata accessor for SharingCircleKeyManager.Instruction);
  v71 = *(_QWORD *)(v0 + 640) + 1;
  if (v71 == *(_QWORD *)(v0 + 624))
  {
    swift_bridgeObjectRelease();
    v72 = *(_QWORD *)(v0 + 608);
    v73 = *(_QWORD *)(v0 + 600);
    v74 = *(_QWORD *)(v0 + 592);
    v75 = *(_QWORD *)(v0 + 584);
    v76 = *(_QWORD *)(v0 + 576);
    v77 = *(_QWORD *)(v0 + 568);
    v78 = *(_QWORD *)(v0 + 560);
    v79 = *(_QWORD *)(v0 + 552);
    v118 = *(_QWORD *)(v0 + 544);
    v119 = *(_QWORD *)(v0 + 536);
    v120 = *(_QWORD *)(v0 + 528);
    v122 = *(_QWORD *)(v0 + 520);
    v123 = *(_QWORD *)(v0 + 512);
    v125 = *(_QWORD *)(v0 + 488);
    v126 = *(_QWORD *)(v0 + 480);
    v128 = *(_QWORD *)(v0 + 456);
    v130 = *(_QWORD *)(v0 + 448);
    v132 = *(_QWORD *)(v0 + 432);
    v134 = *(_QWORD *)(v0 + 424);
    v135 = *(_QWORD *)(v0 + 416);
    v138 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v130);
    swift_task_dealloc(v132);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v138);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v65);
  }
  else
  {
    *(_QWORD *)(v0 + 648) = v65;
    *(_QWORD *)(v0 + 640) = v71;
    sub_10005972C(*(_QWORD *)(v0 + 376)+ ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))+ *(_QWORD *)(v0 + 632) * v71, *(_QWORD *)(v0 + 616), type metadata accessor for SharingCircleKeyManager.Instruction);
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v81 = *(_QWORD *)(v0 + 616);
    v82 = *(_QWORD *)(v0 + 608);
    v83 = *(_QWORD *)(v0 + 600);
    v84 = *(_QWORD *)(v0 + 592);
    v85 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 656) = sub_10001A9E8(v85, (uint64_t)qword_1011B7940);
    sub_10005972C(v81, v82, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_10005972C(v81, v83, type metadata accessor for SharingCircleKeyManager.Instruction);
    v86 = sub_10005972C(v81, v84, type metadata accessor for SharingCircleKeyManager.Instruction);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.default.getter(v87);
    v89 = os_log_type_enabled(v87, v88);
    v90 = *(_QWORD *)(v0 + 608);
    v91 = *(_QWORD *)(v0 + 600);
    v92 = *(_QWORD *)(v0 + 592);
    if (v89)
    {
      v93 = swift_slowAlloc(52, -1);
      v136 = swift_slowAlloc(96, -1);
      v139[0] = v136;
      *(_DWORD *)v93 = 136447235;
      v94 = sub_100906C5C();
      *(_QWORD *)(v0 + 336) = sub_100016940(v94, v95, v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v0 + 344, v93 + 4, v93 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v90, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v93 + 12) = 2160;
      *(_QWORD *)(v0 + 344) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v93 + 14, v93 + 22);
      *(_WORD *)(v93 + 22) = 2081;
      v96 = type metadata accessor for UUID(0);
      v97 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v98 = dispatch thunk of CustomStringConvertible.description.getter(v96, v97);
      *(_QWORD *)(v0 + 352) = sub_100016940(v98, v99, v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v93 + 24, v93 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v91, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v93 + 32) = 2160;
      *(_QWORD *)(v0 + 360) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v93 + 34, v93 + 42);
      *(_WORD *)(v93 + 42) = 2081;
      v100 = dispatch thunk of CustomStringConvertible.description.getter(v96, v97);
      *(_QWORD *)(v0 + 368) = sub_100016940(v100, v101, v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v93 + 44, v93 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0(v92, type metadata accessor for SharingCircleKeyManager.Instruction);
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Download keys: %{public}s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v93, 0x34u);
      swift_arrayDestroy(v136, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1, -1);
      swift_slowDealloc(v93, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 608), type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v91, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v92, type metadata accessor for SharingCircleKeyManager.Instruction);
    }

    v107 = *(_QWORD *)(v0 + 616);
    v108 = *(int *)(*(_QWORD *)(v0 + 496) + 20);
    *(_DWORD *)(v0 + 780) = v108;
    v109 = v107 + v108;
    v110 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 664) = v110;
    *v110 = v0;
    v110[1] = sub_10090F5CC;
    return sub_10090C6D8(v0 + 16, v109);
  }
}

uint64_t sub_100911498()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 760);
  *(_QWORD *)(*v1 + 768) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009131F8;
  else
    v4 = sub_1009114FC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 384), 0);
}

uint64_t sub_1009114FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unsigned __int8 *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134[3];

  v123 = v0 + 336;
  v125 = (_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 432);
  sub_1000126B0(*(_QWORD *)(v0 + 424), type metadata accessor for KeyDropInterface.KeyPackage);
  sub_1000126B0(v1, type metadata accessor for KeyDropInterface.KeyPackage);
  v2 = *(_QWORD *)(v0 + 752) + 1;
  if (v2 != *(_QWORD *)(v0 + 736))
  {
    v114 = v0 + 264;
    v112 = v0 + 280;
    v113 = v0 + 272;
    v110 = v0 + 296;
    v111 = v0 + 288;
    v109 = v0 + 304;
    v108 = v0 + 328;
    v122 = *(_QWORD *)(v0 + 768);
    do
    {
      *(_QWORD *)(v0 + 752) = v2;
      v26 = *(int *)(v0 + 784);
      v27 = *(_QWORD *)(v0 + 616);
      v28 = *(unsigned __int8 **)(v0 + 432);
      sub_10005972C(*(_QWORD *)(v0 + 728)+ ((*(unsigned __int8 *)(v0 + 788) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 788))+ *(_QWORD *)(v0 + 744) * v2, (uint64_t)v28, type metadata accessor for KeyDropInterface.KeyPackage);
      v29 = *(_QWORD *)(v27 + v26);
      v30 = *v28;
      swift_bridgeObjectRetain(v29);
      LOBYTE(v27) = sub_100A070EC(v30, v29);
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
      {
        v41 = *(_QWORD *)(v0 + 688);
        v42 = *(_QWORD *)(v0 + 680);
        v43 = *(_QWORD *)(*(_QWORD *)(v0 + 432) + *(int *)(*(_QWORD *)(v0 + 392) + 24));
        sub_10007D62C(v125);
        swift_retain();
        swift_bridgeObjectRetain(v43);
        v45 = sub_10095D688(v44, v41, v42);
        if (!v122)
        {
          v100 = v45;
          v102 = *(unsigned __int8 **)(v0 + 424);
          v101 = *(_QWORD *)(v0 + 432);
          v103 = *(_QWORD *)(v0 + 392);
          swift_bridgeObjectRelease();
          swift_release();
          sub_10005972C(v101 + *(int *)(v103 + 20), (uint64_t)&v102[*(int *)(v103 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
          sub_1002B1E4C((uint64_t)v125);
          *v102 = v30;
          *(_QWORD *)&v102[*(int *)(v103 + 24)] = v100;
          v104 = (_QWORD *)swift_task_alloc(dword_10110D184);
          *(_QWORD *)(v0 + 760) = v104;
          *v104 = v0;
          v104[1] = sub_100911498;
          return sub_1009142D4(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 616));
        }
        swift_bridgeObjectRelease();
        swift_release();
        sub_1002B1E4C((uint64_t)v125);
        v46 = *(_QWORD *)(v0 + 616);
        v47 = *(_QWORD *)(v0 + 520);
        v48 = *(_QWORD *)(v0 + 512);
        v49 = *(_QWORD *)(v0 + 432);
        v50 = *(_QWORD *)(v0 + 408);
        sub_10005972C(v46, *(_QWORD *)(v0 + 528), type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_10005972C(v46, v47, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_10005972C(v46, v48, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_10005972C(v49, v50, type metadata accessor for KeyDropInterface.KeyPackage);
        swift_errorRetain(v122);
        swift_errorRetain(v122);
        swift_errorRetain(v122);
        v51 = swift_errorRetain(v122);
        v52 = Logger.logObject.getter(v51);
        v53 = static os_log_type_t.error.getter(v52);
        v54 = os_log_type_enabled(v52, v53);
        v55 = *(_QWORD *)(v0 + 528);
        v56 = *(_QWORD *)(v0 + 520);
        v57 = *(_QWORD *)(v0 + 512);
        if (v54)
        {
          v105 = *(_QWORD *)(v0 + 512);
          v133 = *(_QWORD *)(v0 + 432);
          v106 = *(unsigned __int8 **)(v0 + 408);
          v58 = swift_slowAlloc(82, -1);
          v107 = (uint64_t *)swift_slowAlloc(8, -1);
          v130 = swift_slowAlloc(160, -1);
          v134[0] = v130;
          *(_DWORD *)v58 = 136448003;
          v59 = sub_100906C5C();
          *(_QWORD *)(v0 + 256) = sub_100016940(v59, v60, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v114, v58 + 4, v58 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v55, type metadata accessor for SharingCircleKeyManager.Instruction);
          *(_WORD *)(v58 + 12) = 2160;
          *(_QWORD *)(v0 + 264) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v114, v113, v58 + 14, v58 + 22);
          *(_WORD *)(v58 + 22) = 2081;
          v61 = type metadata accessor for UUID(0);
          v62 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v63 = dispatch thunk of CustomStringConvertible.description.getter(v61, v62);
          *(_QWORD *)(v0 + 272) = sub_100016940(v63, v64, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v113, v112, v58 + 24, v58 + 32);
          swift_bridgeObjectRelease();
          sub_1000126B0(v56, type metadata accessor for SharingCircleKeyManager.Instruction);
          *(_WORD *)(v58 + 32) = 2160;
          *(_QWORD *)(v0 + 280) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, v111, v58 + 34, v58 + 42);
          *(_WORD *)(v58 + 42) = 2081;
          v65 = dispatch thunk of CustomStringConvertible.description.getter(v61, v62);
          *(_QWORD *)(v0 + 288) = sub_100016940(v65, v66, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v111, v110, v58 + 44, v58 + 52);
          swift_bridgeObjectRelease();
          sub_1000126B0(v105, type metadata accessor for SharingCircleKeyManager.Instruction);
          *(_WORD *)(v58 + 52) = 2080;
          v67 = sub_100D79CA8(*v106);
          *(_QWORD *)(v0 + 296) = sub_100016940(v67, v68, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, v109, v58 + 54, v58 + 62);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v106, type metadata accessor for KeyDropInterface.KeyPackage);
          *(_WORD *)(v58 + 62) = 2082;
          swift_getErrorValue(v122, v109, v0 + 80);
          v69 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
          *(_QWORD *)(v0 + 320) = sub_100016940(v69, v70, v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v108, v58 + 64, v58 + 72);
          swift_bridgeObjectRelease();
          swift_errorRelease(v122);
          swift_errorRelease(v122);
          *(_WORD *)(v58 + 72) = 2112;
          swift_errorRetain(v122);
          v71 = _swift_stdlib_bridgeErrorToNSError(v122);
          *(_QWORD *)(v0 + 328) = v71;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v108, v123, v58 + 74, v58 + 82);
          *v107 = v71;
          swift_errorRelease(v122);
          swift_errorRelease(v122);
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Failed to save key package %{public}s,\nsharing-id: %{private,mask.hash}s,\n beacon-id: %{private,mask.hash}s,\npackageType: %s, error: %{public}s. %@.", (uint8_t *)v58, 0x52u);
          v72 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v107, 1, v72);
          swift_slowDealloc(v107, -1, -1);
          swift_arrayDestroy(v130, 5, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v130, -1, -1);
          swift_slowDealloc(v58, -1, -1);

          swift_errorRelease(v122);
          sub_1000126B0(v133, type metadata accessor for KeyDropInterface.KeyPackage);
        }
        else
        {
          v73 = *(_QWORD *)(v0 + 432);
          v74 = *(_QWORD *)(v0 + 408);

          swift_errorRelease(v122);
          swift_errorRelease(v122);
          swift_errorRelease(v122);
          swift_errorRelease(v122);
          sub_1000126B0(v74, type metadata accessor for KeyDropInterface.KeyPackage);
          sub_1000126B0(v57, type metadata accessor for SharingCircleKeyManager.Instruction);
          sub_1000126B0(v56, type metadata accessor for SharingCircleKeyManager.Instruction);
          sub_1000126B0(v55, type metadata accessor for SharingCircleKeyManager.Instruction);
          swift_errorRelease(v122);
          sub_1000126B0(v73, type metadata accessor for KeyDropInterface.KeyPackage);
        }
        v122 = 0;
      }
      else
      {
        v31 = *(_QWORD *)(v0 + 616);
        v32 = *(_QWORD *)(v0 + 576);
        sub_10005972C(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 416), type metadata accessor for KeyDropInterface.KeyPackage);
        v33 = sub_10005972C(v31, v32, type metadata accessor for SharingCircleKeyManager.Instruction);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.error.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          v36 = *(_QWORD *)(v0 + 416);
          v37 = (_DWORD *)swift_slowAlloc(32, -1);
          *(_QWORD *)(v0 + 248) = swift_slowAlloc(64, -1);
          *v37 = 136446723;
          __asm { BR              X9 }
        }
        v38 = *(_QWORD *)(v0 + 576);
        v39 = *(_QWORD *)(v0 + 432);
        v40 = *(_QWORD *)(v0 + 416);

        sub_1000126B0(v38, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_1000126B0(v40, type metadata accessor for KeyDropInterface.KeyPackage);
        sub_1000126B0(v39, type metadata accessor for KeyDropInterface.KeyPackage);
      }
      v2 = *(_QWORD *)(v0 + 752) + 1;
    }
    while (v2 != *(_QWORD *)(v0 + 736));
  }
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 648);
  v6 = *(_QWORD *)(v0 + 616);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 448) + *(int *)(*(_QWORD *)(v0 + 440) + 24)));
  v8 = sub_10095EE0C(v7, v3, v4, v6);
  sub_1002B1E4C((uint64_t)v125);
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
  v10 = *(_QWORD **)(v0 + 648);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v10 = sub_1007C7C48(0, v10[2] + 1, 1, *(_QWORD **)(v0 + 648));
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_1007C7C48((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v13 = *(_QWORD *)(v0 + 616);
  v14 = *(_QWORD *)(v0 + 488);
  v15 = *(_QWORD *)(v0 + 448);
  v10[2] = v12 + 1;
  v10[v12 + 4] = v8;
  sub_1002B1E4C((uint64_t)v125);
  sub_1000126B0(v15, type metadata accessor for KeyDropDownloadResponse);
  sub_1000126B0(v14, type metadata accessor for KeyDropJoinToken);
  sub_1000126B0(v13, type metadata accessor for SharingCircleKeyManager.Instruction);
  v16 = *(_QWORD *)(v0 + 640) + 1;
  if (v16 == *(_QWORD *)(v0 + 624))
  {
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v0 + 608);
    v18 = *(_QWORD *)(v0 + 600);
    v19 = *(_QWORD *)(v0 + 592);
    v20 = *(_QWORD *)(v0 + 584);
    v21 = *(_QWORD *)(v0 + 576);
    v22 = *(_QWORD *)(v0 + 568);
    v23 = *(_QWORD *)(v0 + 560);
    v24 = *(_QWORD *)(v0 + 552);
    v115 = *(_QWORD *)(v0 + 544);
    v116 = *(_QWORD *)(v0 + 536);
    v117 = *(_QWORD *)(v0 + 528);
    v118 = *(_QWORD *)(v0 + 520);
    v119 = *(_QWORD *)(v0 + 512);
    v120 = *(_QWORD *)(v0 + 488);
    v121 = *(_QWORD *)(v0 + 480);
    v124 = *(_QWORD *)(v0 + 456);
    v126 = *(_QWORD *)(v0 + 448);
    v127 = *(_QWORD *)(v0 + 432);
    v128 = *(_QWORD *)(v0 + 424);
    v129 = *(_QWORD *)(v0 + 416);
    v132 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v10);
  }
  else
  {
    *(_QWORD *)(v0 + 648) = v10;
    *(_QWORD *)(v0 + 640) = v16;
    sub_10005972C(*(_QWORD *)(v0 + 376)+ ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))+ *(_QWORD *)(v0 + 632) * v16, *(_QWORD *)(v0 + 616), type metadata accessor for SharingCircleKeyManager.Instruction);
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v75 = *(_QWORD *)(v0 + 616);
    v76 = *(_QWORD *)(v0 + 608);
    v77 = *(_QWORD *)(v0 + 600);
    v78 = *(_QWORD *)(v0 + 592);
    v79 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 656) = sub_10001A9E8(v79, (uint64_t)qword_1011B7940);
    sub_10005972C(v75, v76, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_10005972C(v75, v77, type metadata accessor for SharingCircleKeyManager.Instruction);
    v80 = sub_10005972C(v75, v78, type metadata accessor for SharingCircleKeyManager.Instruction);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.default.getter(v81);
    v83 = os_log_type_enabled(v81, v82);
    v84 = *(_QWORD *)(v0 + 608);
    v85 = *(_QWORD *)(v0 + 600);
    v86 = *(_QWORD *)(v0 + 592);
    if (v83)
    {
      v87 = swift_slowAlloc(52, -1);
      v131 = swift_slowAlloc(96, -1);
      v134[0] = v131;
      *(_DWORD *)v87 = 136447235;
      v88 = sub_100906C5C();
      *(_QWORD *)(v0 + 336) = sub_100016940(v88, v89, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v123, v0 + 344, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v84, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v87 + 12) = 2160;
      *(_QWORD *)(v0 + 344) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v87 + 14, v87 + 22);
      *(_WORD *)(v87 + 22) = 2081;
      v90 = type metadata accessor for UUID(0);
      v91 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v90, v91);
      *(_QWORD *)(v0 + 352) = sub_100016940(v92, v93, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v87 + 24, v87 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v85, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v87 + 32) = 2160;
      *(_QWORD *)(v0 + 360) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v87 + 34, v87 + 42);
      *(_WORD *)(v87 + 42) = 2081;
      v94 = dispatch thunk of CustomStringConvertible.description.getter(v90, v91);
      *(_QWORD *)(v0 + 368) = sub_100016940(v94, v95, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v87 + 44, v87 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0(v86, type metadata accessor for SharingCircleKeyManager.Instruction);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Download keys: %{public}s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v87, 0x34u);
      swift_arrayDestroy(v131, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v131, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 608), type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v85, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v86, type metadata accessor for SharingCircleKeyManager.Instruction);
    }

    v96 = *(_QWORD *)(v0 + 616);
    v97 = *(int *)(*(_QWORD *)(v0 + 496) + 20);
    *(_DWORD *)(v0 + 780) = v97;
    v98 = v96 + v97;
    v99 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 664) = v99;
    *v99 = v0;
    v99[1] = sub_10090F5CC;
    return sub_10090C6D8(v0 + 16, v98);
  }
}

uint64_t sub_100912638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t type[8];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = *(_QWORD *)(v0 + 672);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 672);
  if (v5)
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v7 + 4) = v9;
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to read circleSharedSecret %@.", (uint8_t *)v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 672));
    swift_errorRelease(v6);
    swift_errorRelease(v6);

  }
  sub_1000126B0(*(_QWORD *)(v0 + 616), type metadata accessor for SharingCircleKeyManager.Instruction);
  v11 = *(_QWORD *)(v0 + 640) + 1;
  if (v11 == *(_QWORD *)(v0 + 624))
  {
    v62 = *(_QWORD *)(v0 + 648);
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v0 + 608);
    v13 = *(_QWORD *)(v0 + 600);
    v14 = *(_QWORD *)(v0 + 592);
    v15 = *(_QWORD *)(v0 + 584);
    v16 = *(_QWORD *)(v0 + 576);
    v17 = *(_QWORD *)(v0 + 568);
    v18 = *(_QWORD *)(v0 + 560);
    v19 = *(_QWORD *)(v0 + 552);
    v20 = *(_QWORD *)(v0 + 544);
    v49 = *(_QWORD *)(v0 + 536);
    v50 = *(_QWORD *)(v0 + 528);
    v51 = *(_QWORD *)(v0 + 520);
    v52 = *(_QWORD *)(v0 + 512);
    v53 = *(_QWORD *)(v0 + 488);
    v54 = *(_QWORD *)(v0 + 480);
    v55 = *(_QWORD *)(v0 + 456);
    v56 = *(_QWORD *)(v0 + 448);
    v57 = *(_QWORD *)(v0 + 432);
    *(_QWORD *)type = *(_QWORD *)(v0 + 424);
    v59 = *(_QWORD *)(v0 + 416);
    v60 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(*(_QWORD *)type);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v62);
  }
  else
  {
    v22 = v0 + 16;
    *(_QWORD *)(v0 + 640) = v11;
    sub_10005972C(*(_QWORD *)(v0 + 376)+ ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))+ *(_QWORD *)(v0 + 632) * v11, *(_QWORD *)(v0 + 616), type metadata accessor for SharingCircleKeyManager.Instruction);
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v23 = *(_QWORD *)(v0 + 616);
    v24 = *(_QWORD *)(v0 + 608);
    v25 = *(_QWORD *)(v0 + 600);
    v26 = *(_QWORD *)(v0 + 592);
    v27 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 656) = sub_10001A9E8(v27, (uint64_t)qword_1011B7940);
    sub_10005972C(v23, v24, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_10005972C(v23, v25, type metadata accessor for SharingCircleKeyManager.Instruction);
    v28 = sub_10005972C(v23, v26, type metadata accessor for SharingCircleKeyManager.Instruction);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v32 = *(_QWORD *)(v0 + 608);
    v33 = *(_QWORD *)(v0 + 600);
    v34 = *(_QWORD *)(v0 + 592);
    if (v31)
    {
      v35 = swift_slowAlloc(52, -1);
      v61 = swift_slowAlloc(96, -1);
      v63 = v61;
      *(_DWORD *)v35 = 136447235;
      v36 = sub_100906C5C();
      *(_QWORD *)(v0 + 336) = sub_100016940(v36, v37, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v32, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v35 + 12) = 2160;
      *(_QWORD *)(v0 + 344) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v35 + 14, v35 + 22);
      *(_WORD *)(v35 + 22) = 2081;
      v38 = type metadata accessor for UUID(0);
      v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
      *(_QWORD *)(v0 + 352) = sub_100016940(v40, v41, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v35 + 24, v35 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v33, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v35 + 32) = 2160;
      *(_QWORD *)(v0 + 360) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v35 + 34, v35 + 42);
      *(_WORD *)(v35 + 42) = 2081;
      v42 = v39;
      v22 = v0 + 16;
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v38, v42);
      *(_QWORD *)(v0 + 368) = sub_100016940(v43, v44, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v35 + 44, v35 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0(v34, type metadata accessor for SharingCircleKeyManager.Instruction);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Download keys: %{public}s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v35, 0x34u);
      swift_arrayDestroy(v61, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 608), type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v33, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v34, type metadata accessor for SharingCircleKeyManager.Instruction);
    }

    v45 = *(_QWORD *)(v0 + 616);
    v46 = *(int *)(*(_QWORD *)(v0 + 496) + 20);
    *(_DWORD *)(v0 + 780) = v46;
    v47 = v45 + v46;
    v48 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 664) = v48;
    *v48 = v0;
    v48[1] = sub_10090F5CC;
    return sub_10090C6D8(v22, v47);
  }
}

uint64_t sub_100912CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];

  v1 = *(_QWORD *)(v0 + 720);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 544);
  v4 = *(_QWORD *)(v0 + 536);
  sub_10005972C(v2, *(_QWORD *)(v0 + 552), type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v2, v3, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v2, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v47 = *(_QWORD *)(v0 + 720);
    type = v7;
    v8 = *(_QWORD *)(v0 + 552);
    v9 = *(_QWORD *)(v0 + 544);
    v44 = *(_QWORD *)(v0 + 536);
    v10 = swift_slowAlloc(62, -1);
    v50 = swift_slowAlloc(128, -1);
    v52[0] = v50;
    *(_DWORD *)v10 = 136447491;
    v11 = sub_100906C5C();
    *(_QWORD *)(v0 + 184) = sub_100016940(v11, v12, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v10 + 12) = 2160;
    *(_QWORD *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2081;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    *(_QWORD *)(v0 + 200) = sub_100016940(v15, v16, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v10 + 32) = 2160;
    *(_QWORD *)(v0 + 208) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v10 + 34, v10 + 42);
    *(_WORD *)(v10 + 42) = 2081;
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    *(_QWORD *)(v0 + 216) = sub_100016940(v17, v18, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v10 + 44, v10 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v44, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v10 + 52) = 2082;
    swift_getErrorValue(v47, v0 + 224, v0 + 104);
    v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
    *(_QWORD *)(v0 + 240) = sub_100016940(v19, v20, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v10 + 54, v10 + 62);
    swift_bridgeObjectRelease();
    swift_errorRelease(v47);
    swift_errorRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Failed to process downloaded keys %{public}s,\nsharing-id: %{private,mask.hash}s,\n beacon-id: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v10, 0x3Eu);
    swift_arrayDestroy(v50, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 720);
    v22 = *(_QWORD *)(v0 + 544);
    v23 = *(_QWORD *)(v0 + 536);
    sub_1000126B0(*(_QWORD *)(v0 + 552), type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v22, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v23, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_errorRelease(v21);
    swift_errorRelease(v21);
  }

  v24 = *(_QWORD *)(v0 + 616);
  v25 = *(_QWORD *)(v0 + 608);
  v26 = *(_QWORD *)(v0 + 600);
  v27 = *(_QWORD *)(v0 + 592);
  v28 = *(_QWORD *)(v0 + 584);
  v29 = *(_QWORD *)(v0 + 576);
  v33 = *(_QWORD *)(v0 + 568);
  v34 = *(_QWORD *)(v0 + 560);
  v35 = *(_QWORD *)(v0 + 552);
  v36 = *(_QWORD *)(v0 + 544);
  v37 = *(_QWORD *)(v0 + 536);
  v38 = *(_QWORD *)(v0 + 528);
  v39 = *(_QWORD *)(v0 + 520);
  v40 = *(_QWORD *)(v0 + 512);
  v30 = *(_QWORD *)(v0 + 488);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 480);
  v43 = *(_QWORD *)(v0 + 456);
  v45 = *(_QWORD *)(v0 + 448);
  v46 = *(_QWORD *)(v0 + 432);
  v48 = *(_QWORD *)(v0 + 424);
  v49 = *(_QWORD *)(v0 + 416);
  v51 = *(_QWORD *)(v0 + 408);
  swift_willThrow(v31);
  sub_1002B1E4C(v0 + 144);
  sub_1000126B0(v30, type metadata accessor for KeyDropJoinToken);
  sub_1000126B0(v24, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v30);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009131F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  NSObject *log;
  uint64_t *v114;
  os_log_type_t type;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141[3];

  v134 = (_QWORD *)(v0 + 144);
  v123 = v0 + 264;
  v121 = v0 + 280;
  v122 = v0 + 272;
  v119 = v0 + 296;
  v120 = v0 + 288;
  v118 = v0 + 304;
  v117 = v0 + 328;
  v132 = v0 + 336;
  v106 = v0 + 344;
  v107 = v0 + 352;
  v108 = v0 + 360;
  v109 = v0 + 368;
  sub_1000126B0(*(_QWORD *)(v0 + 424), type metadata accessor for KeyDropInterface.KeyPackage);
  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 520);
  v4 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 408);
  sub_10005972C(v2, *(_QWORD *)(v0 + 528), type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v2, v3, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v2, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v5, v6, type metadata accessor for KeyDropInterface.KeyPackage);
  swift_errorRetain(v1);
  swift_errorRetain(v1);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 528);
  v12 = *(_QWORD *)(v0 + 520);
  v13 = *(_QWORD *)(v0 + 512);
  if (v10)
  {
    v110 = *(_QWORD *)(v0 + 520);
    v138 = *(_QWORD *)(v0 + 432);
    v112 = *(unsigned __int8 **)(v0 + 408);
    v111 = *(_QWORD *)(v0 + 512);
    v14 = swift_slowAlloc(82, -1);
    v114 = (uint64_t *)swift_slowAlloc(8, -1);
    v116 = swift_slowAlloc(160, -1);
    v141[0] = v116;
    *(_DWORD *)v14 = 136448003;
    type = v9;
    v15 = sub_100906C5C();
    *(_QWORD *)(v0 + 256) = sub_100016940(v15, v16, v141);
    log = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v123, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v14 + 12) = 2160;
    *(_QWORD *)(v0 + 264) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v123, v122, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 2081;
    v17 = type metadata accessor for UUID(0);
    v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    *(_QWORD *)(v0 + 272) = sub_100016940(v19, v20, v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, v121, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v110, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v14 + 32) = 2160;
    *(_QWORD *)(v0 + 280) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v120, v14 + 34, v14 + 42);
    *(_WORD *)(v14 + 42) = 2081;
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    *(_QWORD *)(v0 + 288) = sub_100016940(v21, v22, v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v120, v119, v14 + 44, v14 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v111, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v14 + 52) = 2080;
    v23 = sub_100D79CA8(*v112);
    *(_QWORD *)(v0 + 296) = sub_100016940(v23, v24, v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, v118, v14 + 54, v14 + 62);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v112, type metadata accessor for KeyDropInterface.KeyPackage);
    *(_WORD *)(v14 + 62) = 2082;
    swift_getErrorValue(v1, v118, v0 + 80);
    v25 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    *(_QWORD *)(v0 + 320) = sub_100016940(v25, v26, v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v117, v14 + 64, v14 + 72);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v14 + 72) = 2112;
    swift_errorRetain(v1);
    v27 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 328) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v132, v14 + 74, v14 + 82);
    *v114 = v27;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to save key package %{public}s,\nsharing-id: %{private,mask.hash}s,\n beacon-id: %{private,mask.hash}s,\npackageType: %s, error: %{public}s. %@.", (uint8_t *)v14, 0x52u);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v114, 1, v28);
    swift_slowDealloc(v114, -1, -1);
    swift_arrayDestroy(v116, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v1);
    v48 = v138;
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 432);
    v30 = *(_QWORD *)(v0 + 408);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    sub_1000126B0(v30, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v13, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v12, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_errorRelease(v1);
    v48 = v29;
  }
  while (1)
  {
    sub_1000126B0(v48, type metadata accessor for KeyDropInterface.KeyPackage);
    v31 = *(_QWORD *)(v0 + 752) + 1;
    if (v31 == *(_QWORD *)(v0 + 736))
      break;
    *(_QWORD *)(v0 + 752) = v31;
    v32 = *(int *)(v0 + 784);
    v33 = *(_QWORD *)(v0 + 616);
    v34 = *(unsigned __int8 **)(v0 + 432);
    sub_10005972C(*(_QWORD *)(v0 + 728)+ ((*(unsigned __int8 *)(v0 + 788) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 788))+ *(_QWORD *)(v0 + 744) * v31, (uint64_t)v34, type metadata accessor for KeyDropInterface.KeyPackage);
    v35 = *(_QWORD *)(v33 + v32);
    v36 = *v34;
    swift_bridgeObjectRetain(v35);
    v37 = sub_100A070EC(v36, v35);
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0)
    {
      v49 = *(_QWORD *)(v0 + 688);
      v50 = *(_QWORD *)(v0 + 680);
      v51 = *(_QWORD *)(*(_QWORD *)(v0 + 432) + *(int *)(*(_QWORD *)(v0 + 392) + 24));
      sub_10007D62C(v134);
      swift_retain();
      swift_bridgeObjectRetain(v51);
      v100 = sub_10095D688(v52, v49, v50);
      v102 = *(unsigned __int8 **)(v0 + 424);
      v101 = *(_QWORD *)(v0 + 432);
      v103 = *(_QWORD *)(v0 + 392);
      swift_bridgeObjectRelease();
      swift_release();
      sub_10005972C(v101 + *(int *)(v103 + 20), (uint64_t)&v102[*(int *)(v103 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
      sub_1002B1E4C((uint64_t)v134);
      *v102 = v36;
      *(_QWORD *)&v102[*(int *)(v103 + 24)] = v100;
      v104 = (_QWORD *)swift_task_alloc(dword_10110D184);
      *(_QWORD *)(v0 + 760) = v104;
      *v104 = v0;
      v104[1] = sub_100911498;
      return sub_1009142D4(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 616));
    }
    v38 = *(_QWORD *)(v0 + 616);
    v39 = *(_QWORD *)(v0 + 576);
    sub_10005972C(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 416), type metadata accessor for KeyDropInterface.KeyPackage);
    v40 = sub_10005972C(v38, v39, type metadata accessor for SharingCircleKeyManager.Instruction);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v46 = *(_QWORD *)(v0 + 416);
      v47 = (_DWORD *)swift_slowAlloc(32, -1);
      *(_QWORD *)(v0 + 248) = swift_slowAlloc(64, -1);
      *v47 = 136446723;
      __asm { BR              X9 }
    }
    v43 = *(_QWORD *)(v0 + 576);
    v44 = *(_QWORD *)(v0 + 432);
    v45 = *(_QWORD *)(v0 + 416);

    sub_1000126B0(v43, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v45, type metadata accessor for KeyDropInterface.KeyPackage);
    v48 = v44;
  }
  swift_bridgeObjectRelease();
  v53 = *(_QWORD *)(v0 + 688);
  v54 = *(_QWORD *)(v0 + 680);
  v55 = *(_QWORD *)(v0 + 648);
  v56 = *(_QWORD *)(v0 + 616);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 448) + *(int *)(*(_QWORD *)(v0 + 440) + 24)));
  v58 = sub_10095EE0C(v57, v53, v54, v56);
  sub_1002B1E4C((uint64_t)v134);
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
  v60 = *(_QWORD **)(v0 + 648);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v60 = sub_1007C7C48(0, v60[2] + 1, 1, *(_QWORD **)(v0 + 648));
  v62 = v60[2];
  v61 = v60[3];
  if (v62 >= v61 >> 1)
    v60 = sub_1007C7C48((_QWORD *)(v61 > 1), v62 + 1, 1, v60);
  v63 = *(_QWORD *)(v0 + 616);
  v64 = *(_QWORD *)(v0 + 488);
  v65 = *(_QWORD *)(v0 + 448);
  v60[2] = v62 + 1;
  v60[v62 + 4] = v58;
  sub_1002B1E4C((uint64_t)v134);
  sub_1000126B0(v65, type metadata accessor for KeyDropDownloadResponse);
  sub_1000126B0(v64, type metadata accessor for KeyDropJoinToken);
  sub_1000126B0(v63, type metadata accessor for SharingCircleKeyManager.Instruction);
  v66 = *(_QWORD *)(v0 + 640) + 1;
  if (v66 == *(_QWORD *)(v0 + 624))
  {
    swift_bridgeObjectRelease();
    v67 = *(_QWORD *)(v0 + 608);
    v68 = *(_QWORD *)(v0 + 600);
    v69 = *(_QWORD *)(v0 + 592);
    v70 = *(_QWORD *)(v0 + 584);
    v71 = *(_QWORD *)(v0 + 576);
    v72 = *(_QWORD *)(v0 + 568);
    v73 = *(_QWORD *)(v0 + 560);
    v74 = *(_QWORD *)(v0 + 552);
    v124 = *(_QWORD *)(v0 + 544);
    v125 = *(_QWORD *)(v0 + 536);
    v126 = *(_QWORD *)(v0 + 528);
    v127 = *(_QWORD *)(v0 + 520);
    v128 = *(_QWORD *)(v0 + 512);
    v129 = *(_QWORD *)(v0 + 488);
    v130 = *(_QWORD *)(v0 + 480);
    v131 = *(_QWORD *)(v0 + 456);
    v133 = *(_QWORD *)(v0 + 448);
    v135 = *(_QWORD *)(v0 + 432);
    v136 = *(_QWORD *)(v0 + 424);
    v137 = *(_QWORD *)(v0 + 416);
    v139 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v133);
    swift_task_dealloc(v135);
    swift_task_dealloc(v136);
    swift_task_dealloc(v137);
    swift_task_dealloc(v139);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v60);
  }
  else
  {
    *(_QWORD *)(v0 + 648) = v60;
    *(_QWORD *)(v0 + 640) = v66;
    sub_10005972C(*(_QWORD *)(v0 + 376)+ ((*(unsigned __int8 *)(v0 + 776) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 776))+ *(_QWORD *)(v0 + 632) * v66, *(_QWORD *)(v0 + 616), type metadata accessor for SharingCircleKeyManager.Instruction);
    if (qword_1010EA050 != -1)
      swift_once(&qword_1010EA050, sub_100906B40);
    v75 = *(_QWORD *)(v0 + 616);
    v76 = *(_QWORD *)(v0 + 608);
    v77 = *(_QWORD *)(v0 + 600);
    v78 = *(_QWORD *)(v0 + 592);
    v79 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 656) = sub_10001A9E8(v79, (uint64_t)qword_1011B7940);
    sub_10005972C(v75, v76, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_10005972C(v75, v77, type metadata accessor for SharingCircleKeyManager.Instruction);
    v80 = sub_10005972C(v75, v78, type metadata accessor for SharingCircleKeyManager.Instruction);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.default.getter(v81);
    v83 = os_log_type_enabled(v81, v82);
    v84 = *(_QWORD *)(v0 + 608);
    v85 = *(_QWORD *)(v0 + 600);
    v86 = *(_QWORD *)(v0 + 592);
    if (v83)
    {
      v87 = swift_slowAlloc(52, -1);
      v140 = swift_slowAlloc(96, -1);
      v141[0] = v140;
      *(_DWORD *)v87 = 136447235;
      v88 = sub_100906C5C();
      *(_QWORD *)(v0 + 336) = sub_100016940(v88, v89, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v132, v106, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v84, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v87 + 12) = 2160;
      *(_QWORD *)(v0 + 344) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, v107, v87 + 14, v87 + 22);
      *(_WORD *)(v87 + 22) = 2081;
      v90 = type metadata accessor for UUID(0);
      v91 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v90, v91);
      *(_QWORD *)(v0 + 352) = sub_100016940(v92, v93, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v107, v108, v87 + 24, v87 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v85, type metadata accessor for SharingCircleKeyManager.Instruction);
      *(_WORD *)(v87 + 32) = 2160;
      *(_QWORD *)(v0 + 360) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v108, v109, v87 + 34, v87 + 42);
      *(_WORD *)(v87 + 42) = 2081;
      v94 = dispatch thunk of CustomStringConvertible.description.getter(v90, v91);
      *(_QWORD *)(v0 + 368) = sub_100016940(v94, v95, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v109, v0 + 376, v87 + 44, v87 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0(v86, type metadata accessor for SharingCircleKeyManager.Instruction);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Download keys: %{public}s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v87, 0x34u);
      swift_arrayDestroy(v140, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v140, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 608), type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v85, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v86, type metadata accessor for SharingCircleKeyManager.Instruction);
    }

    v96 = *(_QWORD *)(v0 + 616);
    v97 = *(int *)(*(_QWORD *)(v0 + 496) + 20);
    *(_DWORD *)(v0 + 780) = v97;
    v98 = v96 + v97;
    v99 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 664) = v99;
    *v99 = v0;
    v99[1] = sub_10090F5CC;
    return sub_10090C6D8(v0 + 16, v98);
  }
}

uint64_t sub_1009142D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v3[46] = a2;
  v3[47] = v2;
  v3[45] = a1;
  v4 = type metadata accessor for KeyDropBeaconGroupAttributes(0);
  v3[48] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[49] = swift_task_alloc(v5);
  v3[50] = swift_task_alloc(v5);
  v3[51] = swift_task_alloc(v5);
  v6 = type metadata accessor for KeyDropJoinToken(0);
  v3[52] = v6;
  v3[53] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F7AE0);
  v3[54] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[55] = swift_task_alloc(v8);
  v3[56] = swift_task_alloc(v8);
  v9 = type metadata accessor for KeySyncRecord(0);
  v3[57] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[58] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[59] = swift_task_alloc(v11);
  v3[60] = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  v3[61] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[62] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v3[63] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[64] = swift_task_alloc(v15);
  v3[65] = swift_task_alloc(v15);
  v3[66] = swift_task_alloc(v15);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v3[67] = v16;
  v17 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[68] = swift_task_alloc(v17);
  v3[69] = swift_task_alloc(v17);
  v3[70] = swift_task_alloc(v17);
  v18 = type metadata accessor for SharedBeaconRecord(0);
  v3[71] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v3[72] = v19;
  v20 = *(_QWORD *)(v19 + 64);
  v3[73] = v20;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[74] = swift_task_alloc(v21);
  v3[75] = swift_task_alloc(v21);
  v3[76] = swift_task_alloc(v21);
  v3[77] = swift_task_alloc(v21);
  v3[78] = swift_task_alloc(v21);
  v3[79] = swift_task_alloc(v21);
  v22 = type metadata accessor for SharingCircleSecretValue(0);
  v3[80] = v22;
  v23 = (*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[81] = swift_task_alloc(v23);
  v3[82] = swift_task_alloc(v23);
  v3[83] = swift_task_alloc(v23);
  v3[84] = swift_task_alloc(v23);
  v24 = type metadata accessor for Date(0);
  v3[85] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v3[86] = v25;
  v3[87] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v3[88] = v26;
  v27 = (*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[89] = swift_task_alloc(v27);
  v3[90] = swift_task_alloc(v27);
  v3[91] = swift_task_alloc(v27);
  v28 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v3[92] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v3[93] = v29;
  v30 = *(_QWORD *)(v29 + 64);
  v3[94] = v30;
  v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[95] = swift_task_alloc(v31);
  v3[96] = swift_task_alloc(v31);
  v3[97] = swift_task_alloc(v31);
  v3[98] = swift_task_alloc(v31);
  v3[99] = swift_task_alloc(v31);
  v3[100] = swift_task_alloc(v31);
  v3[101] = swift_task_alloc(v31);
  return swift_task_switch(sub_100914608, v2, 0);
}

uint64_t sub_100914608()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  os_log_type_t type;
  uint64_t v33;
  uint64_t v34;
  NSObject *log;
  uint64_t v36;
  uint64_t v37;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = v0[101];
  v2 = v0[100];
  v3 = v0[99];
  v4 = v0[91];
  v5 = v0[90];
  v7 = v0[45];
  v6 = v0[46];
  v8 = type metadata accessor for Logger(0);
  v0[102] = sub_10001A9E8(v8, (uint64_t)qword_1011B7940);
  sub_10005972C(v6, v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v7, v4, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_10005972C(v6, v2, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v6, v3, type metadata accessor for SharingCircleKeyManager.Instruction);
  v9 = sub_10005972C(v7, v5, type metadata accessor for KeyDropInterface.KeyPackage);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = v0[101];
  v14 = v0[100];
  v15 = v0[99];
  if (v12)
  {
    v16 = (unsigned __int8 *)v0[91];
    v33 = v0[88];
    v34 = v0[90];
    v31 = v0[61];
    log = v10;
    v17 = swift_slowAlloc(72, -1);
    v36 = swift_slowAlloc(128, -1);
    v37 = v36;
    *(_DWORD *)v17 = 136447747;
    v18 = sub_100906C5C();
    type = v11;
    v0[39] = sub_100016940(v18, v19, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 39, v0 + 40, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v13, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v17 + 12) = 2080;
    v20 = sub_100D79CA8(*v16);
    v0[40] = sub_100016940(v20, v21, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 41, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v16, type metadata accessor for KeyDropInterface.KeyPackage);
    *(_WORD *)(v17 + 22) = 2160;
    v0[41] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 41, v0 + 42, v17 + 24, v17 + 32);
    *(_WORD *)(v17 + 32) = 2081;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v31, v22);
    v0[42] = sub_100016940(v23, v24, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 42, v0 + 43, v17 + 34, v17 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v14, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v17 + 42) = 2160;
    v0[43] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 43, v0 + 44, v17 + 44, v17 + 52);
    *(_WORD *)(v17 + 52) = 2081;
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v31, v22);
    v0[44] = sub_100016940(v25, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 44, v0 + 45, v17 + 54, v17 + 62);
    swift_bridgeObjectRelease();
    sub_1000126B0(v15, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v17 + 62) = 2048;
    v27 = *(_QWORD *)(*(_QWORD *)(v34 + *(int *)(v33 + 24)) + 16);
    sub_1000126B0(v34, type metadata accessor for KeyDropInterface.KeyPackage);
    v0[37] = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 37, v0 + 38, v17 + 64, v17 + 72);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Save key package: %{public}s,\ntype: %s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s\nkeys: %ld.", (uint8_t *)v17, 0x48u);
    swift_arrayDestroy(v36, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    v28 = v0[91];
    sub_1000126B0(v0[90], type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v13, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v28, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v14, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v15, type metadata accessor for SharingCircleKeyManager.Instruction);

  }
  v29 = *(_QWORD *)(v0[47] + 120);
  v0[103] = v29;
  return swift_task_switch(sub_100914AA8, v29, 0);
}

uint64_t sub_100914AA8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[104] = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  v0[105] = v3;
  *v2 = v0;
  v2[1] = sub_100914B24;
  return unsafeBlocking<A>(_:)(v0 + 34, sub_10007C6FC, v0[103], v3);
}

uint64_t sub_100914B24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 824);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 832));
  swift_release();
  return swift_task_switch(sub_100914B84, v1, 0);
}

uint64_t sub_100914B84()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[47];
  v0[106] = v0[34];
  return swift_task_switch(sub_100914BA0, v1, 0);
}

void sub_100914BA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_log_type_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t type,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[16];

  v51 = v50[88];
  v52 = v50[45];
  v53 = *(_QWORD **)(v52 + *(int *)(v51 + 24));
  if (v53[2])
  {
    v54 = v50[87];
    v55 = v50[86];
    v56 = v50[85];
    v50[107] = v53[5];
    v50[108] = v53[6];
    v50[109] = v53[7];
    v50[110] = v53[8];
    v50[111] = v53[9];
    v50[112] = v53[10];
    v50[113] = v53[11];
    v50[114] = v53[12];
    v57 = v52 + *(int *)(v51 + 20);
    v58 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    v50[115] = *(_QWORD *)(v57 + *(int *)(v58 + 20));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v54, v57 + *(int *)(v58 + 24), v56);
    __asm { BR              X10 }
  }
  v59 = v50[95];
  v60 = v50[46];
  sub_10005972C(v50[45], v50[89], type metadata accessor for KeyDropInterface.KeyPackage);
  v61 = sub_10005972C(v60, v59, type metadata accessor for SharingCircleKeyManager.Instruction);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.error.getter(v62);
  v64 = os_log_type_enabled(v62, v63);
  v65 = v50[95];
  v66 = v50[89];
  if (v64)
  {
    v67 = swift_slowAlloc(22, -1);
    v68 = swift_slowAlloc(64, -1);
    v107[0] = v68;
    *(_DWORD *)v67 = 136315394;
    v69 = sub_100D7AD7C();
    v50[36] = sub_100016940(v69, v70, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50 + 36, v50 + 37, v67 + 4, v67 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v66, type metadata accessor for KeyDropInterface.KeyPackage);
    *(_WORD *)(v67 + 12) = 2080;
    v71 = sub_100906C5C();
    v50[38] = sub_100016940(v71, v72, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50 + 38, v50 + 39, v67 + 14, v67 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v65, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "There are no keys to save in the package: %s, instruction: %s.", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v67, -1, -1);
    swift_release();
  }
  else
  {
    swift_release();
    sub_1000126B0(v66, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v65, type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  v73 = v50[100];
  v74 = v50[99];
  v75 = v50[98];
  v76 = v50[97];
  v77 = v50[96];
  v78 = v50[95];
  v79 = v50[91];
  v80 = v50[90];
  v81 = v50[89];
  v82 = v50[87];
  v83 = v50[84];
  v84 = v50[83];
  v85 = v50[82];
  v86 = v50[81];
  v87 = v50[79];
  v88 = v50[78];
  v89 = v50[77];
  v90 = v50[76];
  v91 = v50[75];
  v92 = v50[74];
  v93 = v50[70];
  v94 = v50[69];
  v95 = v50[68];
  v96 = v50[66];
  v97 = v50[65];
  v98 = v50[64];
  v99 = v50[60];
  v100 = v50[59];
  v101 = v50[56];
  v102 = v50[55];
  v103 = v50[53];
  v104 = v50[51];
  v105 = v50[50];
  v106 = v50[49];
  swift_task_dealloc(v50[101]);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  __asm { BR              X0 }
}

uint64_t sub_1009162FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 952);
  *(_QWORD *)(*v1 + 960) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100919B38;
  else
    v4 = sub_100916360;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 376), 0);
}

uint64_t sub_100916360()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 872);
  v7 = *(_QWORD *)(v0 + 864);
  v8 = *(_QWORD *)(v0 + 856);
  v42 = *(_QWORD *)(v0 + 688);
  v44 = *(_QWORD *)(v0 + 944);
  v46 = *(_QWORD *)(v0 + 680);
  v48 = *(_QWORD *)(v0 + 696);
  v38 = *(_QWORD *)(v0 + 672);
  v40 = *(_QWORD *)(v0 + 936);
  swift_release();
  sub_10001BC14(v8, v7);
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001BC14(v40, v44);
  swift_release();
  sub_1000126B0(v38, type metadata accessor for SharingCircleSecretValue);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v48, v46);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v39 = *(_QWORD *)(v0 + 448);
  v41 = *(_QWORD *)(v0 + 440);
  v43 = *(_QWORD *)(v0 + 424);
  v45 = *(_QWORD *)(v0 + 408);
  v47 = *(_QWORD *)(v0 + 400);
  v49 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100916634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 824);
  v2 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 368) + *(int *)(v0 + 1304);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 968) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1308) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10109E168, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 976) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 984) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 992) = v13;
  *v13 = v0;
  v13[1] = sub_10091672C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 560), sub_100067DF8, v10, *(_QWORD *)(v0 + 536));
}

uint64_t sub_10091672C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 992));
  swift_release();
  return swift_task_switch(sub_100916790, v1, 0);
}

uint64_t sub_100916790()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v1 = *(_QWORD *)(v0 + 560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 576) + 48))(v1, 1, *(_QWORD *)(v0 + 568)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 896);
    v3 = *(_QWORD *)(v0 + 888);
    v4 = *(_QWORD *)(v0 + 880);
    v5 = *(_QWORD *)(v0 + 872);
    v6 = *(_QWORD *)(v0 + 864);
    v7 = *(_QWORD *)(v0 + 856);
    v70 = *(_QWORD *)(v0 + 696);
    v72 = *(_QWORD *)(v0 + 912);
    v61 = *(_QWORD *)(v0 + 688);
    v64 = *(_QWORD *)(v0 + 904);
    v67 = *(_QWORD *)(v0 + 680);
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
    v8 = sub_1000D94EC();
    v9 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v8, 0, 0);
    *v10 = 0;
    swift_willThrow(v9);
    sub_10001BC14(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v3, v2);
    sub_10001EF3C(v64, v72);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v70, v67);
    v12 = *(_QWORD *)(v0 + 800);
    v13 = *(_QWORD *)(v0 + 792);
    v14 = *(_QWORD *)(v0 + 784);
    v15 = *(_QWORD *)(v0 + 776);
    v16 = *(_QWORD *)(v0 + 768);
    v17 = *(_QWORD *)(v0 + 760);
    v18 = *(_QWORD *)(v0 + 728);
    v19 = *(_QWORD *)(v0 + 720);
    v20 = *(_QWORD *)(v0 + 712);
    v40 = *(_QWORD *)(v0 + 696);
    v41 = *(_QWORD *)(v0 + 672);
    v42 = *(_QWORD *)(v0 + 664);
    v43 = *(_QWORD *)(v0 + 656);
    v44 = *(_QWORD *)(v0 + 648);
    v45 = *(_QWORD *)(v0 + 632);
    v46 = *(_QWORD *)(v0 + 624);
    v47 = *(_QWORD *)(v0 + 616);
    v48 = *(_QWORD *)(v0 + 608);
    v49 = *(_QWORD *)(v0 + 600);
    v50 = *(_QWORD *)(v0 + 592);
    v51 = *(_QWORD *)(v0 + 560);
    v52 = *(_QWORD *)(v0 + 552);
    v53 = *(_QWORD *)(v0 + 544);
    v54 = *(_QWORD *)(v0 + 528);
    v55 = *(_QWORD *)(v0 + 520);
    v56 = *(_QWORD *)(v0 + 512);
    v57 = *(_QWORD *)(v0 + 480);
    v58 = *(_QWORD *)(v0 + 472);
    v59 = *(_QWORD *)(v0 + 448);
    v62 = *(_QWORD *)(v0 + 440);
    v65 = *(_QWORD *)(v0 + 424);
    v68 = *(_QWORD *)(v0 + 408);
    v71 = *(_QWORD *)(v0 + 400);
    v73 = *(_QWORD *)(v0 + 392);
    swift_task_dealloc(*(_QWORD *)(v0 + 808));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v62);
    swift_task_dealloc(v65);
    swift_task_dealloc(v68);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 360);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 632), type metadata accessor for SharedBeaconRecord);
    v22 = sub_10095DBE4(v11);
    v24 = v23;
    v26 = v25;
    v27 = *(_QWORD *)(v0 + 784);
    v66 = v27;
    v69 = *(_QWORD *)(v0 + 848);
    v60 = *(_QWORD *)(v0 + 744);
    v63 = *(_QWORD *)(v0 + 752);
    v28 = *(_QWORD *)(v0 + 632);
    v29 = *(_QWORD *)(v0 + 624);
    v30 = *(_QWORD *)(v0 + 584);
    v31 = *(_QWORD *)(v0 + 576);
    v74 = *(_QWORD *)(v0 + 568);
    v75 = *(_QWORD *)(v0 + 824);
    v32 = *(_QWORD *)(v0 + 368);
    type metadata accessor for Transaction(0);
    sub_10005972C(v28, v29, type metadata accessor for SharedBeaconRecord);
    sub_10005972C(v32, v27, type metadata accessor for SharingCircleKeyManager.Instruction);
    v33 = *(unsigned __int8 *)(v31 + 80);
    v34 = (v33 + 24) & ~v33;
    v35 = (v30 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = *(unsigned __int8 *)(v60 + 80);
    v37 = (v36 + v35 + 24) & ~v36;
    v38 = swift_allocObject(&unk_10109E190, v37 + v63, v33 | v36 | 7);
    *(_QWORD *)(v38 + 16) = v69;
    sub_1000126EC(v29, v38 + v34, type metadata accessor for SharedBeaconRecord);
    v39 = (unint64_t *)(v38 + v35);
    *v39 = v22;
    v39[1] = v24;
    v39[2] = v26;
    sub_1000126EC(v66, v38 + v37, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_retain();
    static Transaction.asyncTask(name:block:)("SharingCircleKeyManager.saveKeyPackage", 38, 2, &unk_10110D560, v38);
    swift_release();
    *(_DWORD *)(v0 + 1312) = *(_DWORD *)(v74 + 20);
    return swift_task_switch(sub_100916CB0, v75, 0);
  }
}

uint64_t sub_100916CB0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 984);
  v2 = *(unsigned __int8 *)(v0 + 1308);
  v3 = *(_QWORD *)(v0 + 824);
  v4 = *(_QWORD *)(v0 + 528);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 504) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 968))(v4, *(_QWORD *)(v0 + 632) + *(int *)(v0 + 1312), v5);
  v9 = swift_allocObject(&unk_10109E1B8, v7, v8);
  *(_QWORD *)(v0 + 1000) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1008) = v11;
  *v11 = v0;
  v11[1] = sub_100916DA8;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 448), sub_10007CAF0, v9, *(_QWORD *)(v0 + 432));
}

uint64_t sub_100916DA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1008));
  swift_release();
  return swift_task_switch(sub_100916E0C, v1, 0);
}

uint64_t sub_100916E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 448);
  sub_10005972C(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 616), type metadata accessor for SharedBeaconRecord);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 616);
    v5 = *(_QWORD *)(v0 + 480);
    v6 = *(_QWORD *)(v0 + 448);
    v7 = *(int **)(v0 + 456);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v0 + 968))(v5, v4 + *(int *)(*(_QWORD *)(v0 + 568) + 20), *(_QWORD *)(v0 + 488));
    static Date.distantPast.getter(v8);
    v9 = v5 + v7[6];
    v10 = v5 + v7[8];
    v11 = v5 + v7[9];
    v12 = v5 + v7[11];
    *(_QWORD *)(v5 + v7[5]) = 0;
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(v9 + 8) = 1;
    *(_QWORD *)v10 = 1;
    *(_BYTE *)(v10 + 8) = 0;
    *(_QWORD *)v11 = 96;
    *(_BYTE *)(v11 + 8) = 0;
    *(_QWORD *)(v5 + v7[10]) = 1;
    *(_QWORD *)v12 = 0;
    *(_BYTE *)(v12 + 8) = 1;
    sub_1000126B0(v4, type metadata accessor for SharedBeaconRecord);
    sub_100004048(v6, &qword_1010F7AE0);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 480);
    v14 = *(_QWORD *)(v0 + 448);
    sub_1000126B0(*(_QWORD *)(v0 + 616), type metadata accessor for SharedBeaconRecord);
    sub_1000126EC(v14, v13, type metadata accessor for KeySyncRecord);
  }
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10110D550 + dword_10110D550);
  v15 = (_QWORD *)swift_task_alloc(unk_10110D554);
  *(_QWORD *)(v0 + 1016) = v15;
  *v15 = v0;
  v15[1] = sub_100916F90;
  return v17(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 824));
}

uint64_t sub_100916F90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1016));
  return swift_task_switch(sub_100916FE8, v1, 0);
}

uint64_t sub_100916FE8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 872);
  v41 = *(_QWORD *)(v0 + 688);
  v43 = *(_QWORD *)(v0 + 680);
  v45 = *(_QWORD *)(v0 + 696);
  v7 = *(_QWORD *)(v0 + 632);
  v8 = *(_QWORD *)(v0 + 480);
  sub_10001BC14(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  swift_release();
  sub_1000126B0(v8, type metadata accessor for KeySyncRecord);
  sub_1000126B0(v7, type metadata accessor for SharedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v43);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v39 = *(_QWORD *)(v0 + 440);
  v40 = *(_QWORD *)(v0 + 424);
  v42 = *(_QWORD *)(v0 + 408);
  v44 = *(_QWORD *)(v0 + 400);
  v46 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009172A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 824);
  v2 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 368) + *(int *)(v0 + 1316);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 1024) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1320) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10109E0F0, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 1032) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 1040) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 1048) = v13;
  *v13 = v0;
  v13[1] = sub_1009173A0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 552), sub_100067DF8, v10, *(_QWORD *)(v0 + 536));
}

uint64_t sub_1009173A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1048));
  swift_release();
  return swift_task_switch(sub_100917404, v1, 0);
}

uint64_t sub_100917404()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v1 = *(_QWORD *)(v0 + 552);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 576) + 48))(v1, 1, *(_QWORD *)(v0 + 568)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 896);
    v3 = *(_QWORD *)(v0 + 888);
    v4 = *(_QWORD *)(v0 + 880);
    v5 = *(_QWORD *)(v0 + 872);
    v6 = *(_QWORD *)(v0 + 864);
    v7 = *(_QWORD *)(v0 + 856);
    v70 = *(_QWORD *)(v0 + 696);
    v72 = *(_QWORD *)(v0 + 912);
    v61 = *(_QWORD *)(v0 + 688);
    v64 = *(_QWORD *)(v0 + 904);
    v67 = *(_QWORD *)(v0 + 680);
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
    v8 = sub_1000D94EC();
    v9 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v8, 0, 0);
    *v10 = 0;
    swift_willThrow(v9);
    sub_10001BC14(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v3, v2);
    sub_10001EF3C(v64, v72);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v70, v67);
    v12 = *(_QWORD *)(v0 + 800);
    v13 = *(_QWORD *)(v0 + 792);
    v14 = *(_QWORD *)(v0 + 784);
    v15 = *(_QWORD *)(v0 + 776);
    v16 = *(_QWORD *)(v0 + 768);
    v17 = *(_QWORD *)(v0 + 760);
    v18 = *(_QWORD *)(v0 + 728);
    v19 = *(_QWORD *)(v0 + 720);
    v20 = *(_QWORD *)(v0 + 712);
    v40 = *(_QWORD *)(v0 + 696);
    v41 = *(_QWORD *)(v0 + 672);
    v42 = *(_QWORD *)(v0 + 664);
    v43 = *(_QWORD *)(v0 + 656);
    v44 = *(_QWORD *)(v0 + 648);
    v45 = *(_QWORD *)(v0 + 632);
    v46 = *(_QWORD *)(v0 + 624);
    v47 = *(_QWORD *)(v0 + 616);
    v48 = *(_QWORD *)(v0 + 608);
    v49 = *(_QWORD *)(v0 + 600);
    v50 = *(_QWORD *)(v0 + 592);
    v51 = *(_QWORD *)(v0 + 560);
    v52 = *(_QWORD *)(v0 + 552);
    v53 = *(_QWORD *)(v0 + 544);
    v54 = *(_QWORD *)(v0 + 528);
    v55 = *(_QWORD *)(v0 + 520);
    v56 = *(_QWORD *)(v0 + 512);
    v57 = *(_QWORD *)(v0 + 480);
    v58 = *(_QWORD *)(v0 + 472);
    v59 = *(_QWORD *)(v0 + 448);
    v62 = *(_QWORD *)(v0 + 440);
    v65 = *(_QWORD *)(v0 + 424);
    v68 = *(_QWORD *)(v0 + 408);
    v71 = *(_QWORD *)(v0 + 400);
    v73 = *(_QWORD *)(v0 + 392);
    swift_task_dealloc(*(_QWORD *)(v0 + 808));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v62);
    swift_task_dealloc(v65);
    swift_task_dealloc(v68);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 360);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 608), type metadata accessor for SharedBeaconRecord);
    v22 = sub_10095DBE4(v11);
    v24 = v23;
    v26 = v25;
    v27 = *(_QWORD *)(v0 + 784);
    v66 = v27;
    v69 = *(_QWORD *)(v0 + 848);
    v60 = *(_QWORD *)(v0 + 744);
    v63 = *(_QWORD *)(v0 + 752);
    v28 = *(_QWORD *)(v0 + 624);
    v29 = *(_QWORD *)(v0 + 608);
    v30 = *(_QWORD *)(v0 + 584);
    v31 = *(_QWORD *)(v0 + 576);
    v74 = *(_QWORD *)(v0 + 568);
    v75 = *(_QWORD *)(v0 + 824);
    v32 = *(_QWORD *)(v0 + 368);
    type metadata accessor for Transaction(0);
    sub_10005972C(v29, v28, type metadata accessor for SharedBeaconRecord);
    sub_10005972C(v32, v27, type metadata accessor for SharingCircleKeyManager.Instruction);
    v33 = *(unsigned __int8 *)(v31 + 80);
    v34 = (v33 + 24) & ~v33;
    v35 = (v30 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = *(unsigned __int8 *)(v60 + 80);
    v37 = (v36 + v35 + 24) & ~v36;
    v38 = swift_allocObject(&unk_10109E118, v37 + v63, v33 | v36 | 7);
    *(_QWORD *)(v38 + 16) = v69;
    sub_1000126EC(v28, v38 + v34, type metadata accessor for SharedBeaconRecord);
    v39 = (unint64_t *)(v38 + v35);
    *v39 = v22;
    v39[1] = v24;
    v39[2] = v26;
    sub_1000126EC(v66, v38 + v37, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_retain();
    static Transaction.asyncTask(name:block:)("SharingCircleKeyManager.saveKeyPackage", 38, 2, &unk_10110D548, v38);
    swift_release();
    *(_DWORD *)(v0 + 1324) = *(_DWORD *)(v74 + 20);
    return swift_task_switch(sub_100917924, v75, 0);
  }
}

uint64_t sub_100917924()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1040);
  v2 = *(unsigned __int8 *)(v0 + 1320);
  v3 = *(_QWORD *)(v0 + 824);
  v4 = *(_QWORD *)(v0 + 528);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 504) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1024))(v4, *(_QWORD *)(v0 + 608) + *(int *)(v0 + 1324), v5);
  v9 = swift_allocObject(&unk_10109E140, v7, v8);
  *(_QWORD *)(v0 + 1056) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1064) = v11;
  *v11 = v0;
  v11[1] = sub_100917A18;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 440), sub_10007CAF0, v9, *(_QWORD *)(v0 + 432));
}

uint64_t sub_100917A18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1064));
  swift_release();
  return swift_task_switch(sub_100917A7C, v1, 0);
}

uint64_t sub_100917A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 440);
  sub_10005972C(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 600), type metadata accessor for SharedBeaconRecord);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 600);
    v5 = *(_QWORD *)(v0 + 472);
    v6 = *(int **)(v0 + 456);
    v7 = *(_QWORD *)(v0 + 440);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v0 + 1024))(v5, v4 + *(int *)(*(_QWORD *)(v0 + 568) + 20), *(_QWORD *)(v0 + 488));
    static Date.distantPast.getter(v8);
    v9 = v5 + v6[6];
    v10 = v5 + v6[8];
    v11 = v5 + v6[9];
    v12 = v5 + v6[11];
    *(_QWORD *)(v5 + v6[5]) = 0;
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(v9 + 8) = 1;
    *(_QWORD *)v10 = 1;
    *(_BYTE *)(v10 + 8) = 0;
    *(_QWORD *)v11 = 96;
    *(_BYTE *)(v11 + 8) = 0;
    *(_QWORD *)(v5 + v6[10]) = 1;
    *(_QWORD *)v12 = 0;
    *(_BYTE *)(v12 + 8) = 1;
    sub_1000126B0(v4, type metadata accessor for SharedBeaconRecord);
    sub_100004048(v7, &qword_1010F7AE0);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 472);
    v14 = *(_QWORD *)(v0 + 440);
    sub_1000126B0(*(_QWORD *)(v0 + 600), type metadata accessor for SharedBeaconRecord);
    sub_1000126EC(v14, v13, type metadata accessor for KeySyncRecord);
  }
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10110D550 + dword_10110D550);
  v15 = (_QWORD *)swift_task_alloc(unk_10110D554);
  *(_QWORD *)(v0 + 1072) = v15;
  *v15 = v0;
  v15[1] = sub_100917C08;
  return v17(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 824));
}

uint64_t sub_100917C08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1072));
  return swift_task_switch(sub_100917C60, v1, 0);
}

uint64_t sub_100917C60()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 872);
  v41 = *(_QWORD *)(v0 + 688);
  v43 = *(_QWORD *)(v0 + 680);
  v45 = *(_QWORD *)(v0 + 696);
  v7 = *(_QWORD *)(v0 + 608);
  v8 = *(_QWORD *)(v0 + 472);
  sub_10001BC14(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  swift_release();
  sub_1000126B0(v8, type metadata accessor for KeySyncRecord);
  sub_1000126B0(v7, type metadata accessor for SharedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v43);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v39 = *(_QWORD *)(v0 + 440);
  v40 = *(_QWORD *)(v0 + 424);
  v42 = *(_QWORD *)(v0 + 408);
  v44 = *(_QWORD *)(v0 + 400);
  v46 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100917F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 824);
  v2 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 488);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, *(_QWORD *)(v0 + 368) + *(int *)(v0 + 1328), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109E0A0, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 1080) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 1088) = v10;
  *v10 = v0;
  v10[1] = sub_100918008;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 544), sub_100067DF8, v8, *(_QWORD *)(v0 + 536));
}

uint64_t sub_100918008()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1088));
  swift_release();
  return swift_task_switch(sub_10091806C, v1, 0);
}

uint64_t sub_10091806C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v1 = *(_QWORD *)(v0 + 544);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 576) + 48))(v1, 1, *(_QWORD *)(v0 + 568)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 896);
    v3 = *(_QWORD *)(v0 + 888);
    v4 = *(_QWORD *)(v0 + 880);
    v5 = *(_QWORD *)(v0 + 872);
    v6 = *(_QWORD *)(v0 + 864);
    v7 = *(_QWORD *)(v0 + 856);
    v110 = *(_QWORD *)(v0 + 696);
    v114 = *(_QWORD *)(v0 + 912);
    v98 = *(_QWORD *)(v0 + 688);
    v102 = *(_QWORD *)(v0 + 904);
    v106 = *(_QWORD *)(v0 + 680);
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
    v8 = sub_1000D94EC();
    v9 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v8, 0, 0);
    *v10 = 0;
    swift_willThrow(v9);
    sub_10001BC14(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v3, v2);
    sub_10001EF3C(v102, v114);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v110, v106);
    v16 = *(_QWORD *)(v0 + 800);
    v17 = *(_QWORD *)(v0 + 792);
    v18 = *(_QWORD *)(v0 + 784);
    v19 = *(_QWORD *)(v0 + 776);
    v20 = *(_QWORD *)(v0 + 768);
    v21 = *(_QWORD *)(v0 + 760);
    v22 = *(_QWORD *)(v0 + 728);
    v23 = *(_QWORD *)(v0 + 720);
    v24 = *(_QWORD *)(v0 + 712);
    v50 = *(_QWORD *)(v0 + 696);
    v51 = *(_QWORD *)(v0 + 672);
    v53 = *(_QWORD *)(v0 + 664);
    v55 = *(_QWORD *)(v0 + 656);
    v57 = *(_QWORD *)(v0 + 648);
    v59 = *(_QWORD *)(v0 + 632);
    v61 = *(_QWORD *)(v0 + 624);
    v63 = *(_QWORD *)(v0 + 616);
    v65 = *(_QWORD *)(v0 + 608);
    v67 = *(_QWORD *)(v0 + 600);
    v69 = *(_QWORD *)(v0 + 592);
    v72 = *(_QWORD *)(v0 + 560);
    v75 = *(_QWORD *)(v0 + 552);
    v78 = *(_QWORD *)(v0 + 544);
    v81 = *(_QWORD *)(v0 + 528);
    v84 = *(_QWORD *)(v0 + 520);
    v88 = *(_QWORD *)(v0 + 512);
    v90 = *(_QWORD *)(v0 + 480);
    v93 = *(_QWORD *)(v0 + 472);
    v95 = *(_QWORD *)(v0 + 448);
    v99 = *(_QWORD *)(v0 + 440);
    v104 = *(_QWORD *)(v0 + 424);
    v108 = *(_QWORD *)(v0 + 408);
    v112 = *(_QWORD *)(v0 + 400);
    v116 = *(_QWORD *)(v0 + 392);
    swift_task_dealloc(*(_QWORD *)(v0 + 808));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v72);
    swift_task_dealloc(v75);
    swift_task_dealloc(v78);
    swift_task_dealloc(v81);
    swift_task_dealloc(v84);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v99);
    swift_task_dealloc(v104);
    swift_task_dealloc(v108);
    swift_task_dealloc(v112);
    swift_task_dealloc(v116);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 360);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 592), type metadata accessor for SharedBeaconRecord);
    v12 = sub_10095E7A0(v11);
    v13 = *(_QWORD *)(v0 + 912);
    v111 = *(_QWORD *)(v0 + 896);
    v115 = *(_QWORD *)(v0 + 904);
    v103 = *(_QWORD *)(v0 + 880);
    v107 = *(_QWORD *)(v0 + 888);
    v14 = *(_QWORD *)(v0 + 856);
    v15 = *(_QWORD *)(v0 + 848);
    v25 = *(_QWORD *)(v0 + 784);
    v70 = *(_QWORD *)(v0 + 752);
    v82 = *(_QWORD *)(v0 + 864);
    v85 = *(_QWORD *)(v0 + 744);
    v118 = *(_QWORD *)(v0 + 696);
    v96 = *(_QWORD *)(v0 + 688);
    v100 = *(_QWORD *)(v0 + 680);
    v26 = *(_QWORD *)(v0 + 624);
    v91 = *(_QWORD *)(v0 + 872);
    v27 = *(_QWORD *)(v0 + 592);
    v28 = *(_QWORD *)(v0 + 584);
    v29 = *(_QWORD *)(v0 + 576);
    v30 = *(_QWORD *)(v0 + 368);
    v73 = v31;
    v76 = v12;
    v79 = v32;
    type metadata accessor for Transaction(0);
    sub_10005972C(v27, v26, type metadata accessor for SharedBeaconRecord);
    sub_10005972C(v30, v25, type metadata accessor for SharingCircleKeyManager.Instruction);
    v33 = *(unsigned __int8 *)(v29 + 80);
    v34 = (v33 + 24) & ~v33;
    v35 = (v28 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = *(unsigned __int8 *)(v85 + 80);
    v86 = v13;
    v37 = (v36 + v35 + 24) & ~v36;
    v38 = swift_allocObject(&unk_10109E0C8, v37 + v70, v33 | v36 | 7);
    *(_QWORD *)(v38 + 16) = v15;
    sub_1000126EC(v26, v38 + v34, type metadata accessor for SharedBeaconRecord);
    v39 = (unint64_t *)(v38 + v35);
    *v39 = v76;
    v39[1] = v73;
    v39[2] = v79;
    sub_1000126EC(v25, v38 + v37, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_retain();
    static Transaction.asyncTask(name:block:)("SharingCircleKeyManager.saveKeyPackage.connectionKey", 52, 2, &unk_10110D538, v38);
    swift_release();
    sub_10001BC14(v14, v82);
    sub_10001EF3C(v91, v103);
    sub_10001EF3C(v107, v111);
    sub_10001EF3C(v115, v86);
    swift_release();
    sub_1000126B0(v27, type metadata accessor for SharedBeaconRecord);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v118, v100);
    v40 = *(_QWORD *)(v0 + 800);
    v41 = *(_QWORD *)(v0 + 792);
    v42 = *(_QWORD *)(v0 + 784);
    v43 = *(_QWORD *)(v0 + 776);
    v44 = *(_QWORD *)(v0 + 768);
    v45 = *(_QWORD *)(v0 + 760);
    v46 = *(_QWORD *)(v0 + 728);
    v47 = *(_QWORD *)(v0 + 720);
    v48 = *(_QWORD *)(v0 + 712);
    v52 = *(_QWORD *)(v0 + 696);
    v54 = *(_QWORD *)(v0 + 672);
    v56 = *(_QWORD *)(v0 + 664);
    v58 = *(_QWORD *)(v0 + 656);
    v60 = *(_QWORD *)(v0 + 648);
    v62 = *(_QWORD *)(v0 + 632);
    v64 = *(_QWORD *)(v0 + 624);
    v66 = *(_QWORD *)(v0 + 616);
    v68 = *(_QWORD *)(v0 + 608);
    v71 = *(_QWORD *)(v0 + 600);
    v74 = *(_QWORD *)(v0 + 592);
    v77 = *(_QWORD *)(v0 + 560);
    v80 = *(_QWORD *)(v0 + 552);
    v83 = *(_QWORD *)(v0 + 544);
    v87 = *(_QWORD *)(v0 + 528);
    v89 = *(_QWORD *)(v0 + 520);
    v92 = *(_QWORD *)(v0 + 512);
    v94 = *(_QWORD *)(v0 + 480);
    v97 = *(_QWORD *)(v0 + 472);
    v101 = *(_QWORD *)(v0 + 448);
    v105 = *(_QWORD *)(v0 + 440);
    v109 = *(_QWORD *)(v0 + 424);
    v113 = *(_QWORD *)(v0 + 408);
    v117 = *(_QWORD *)(v0 + 400);
    v119 = *(_QWORD *)(v0 + 392);
    swift_task_dealloc(*(_QWORD *)(v0 + 808));
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v71);
    swift_task_dealloc(v74);
    swift_task_dealloc(v77);
    swift_task_dealloc(v80);
    swift_task_dealloc(v83);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v97);
    swift_task_dealloc(v101);
    swift_task_dealloc(v105);
    swift_task_dealloc(v109);
    swift_task_dealloc(v113);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009187AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1112);
  *(_QWORD *)(*v1 + 1120) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100919E14;
  else
    v4 = sub_100918810;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 376), 0);
}

uint64_t sub_100918810()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 872);
  v44 = *(_QWORD *)(v0 + 696);
  v46 = *(_QWORD *)(v0 + 1104);
  v7 = *(_QWORD *)(v0 + 688);
  v40 = *(_QWORD *)(v0 + 1096);
  v42 = *(_QWORD *)(v0 + 680);
  v8 = *(_QWORD *)(v0 + 664);
  sub_10001BC14(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  swift_release();
  sub_10001BC14(v40, v46);
  sub_1000126B0(v8, type metadata accessor for SharingCircleSecretValue);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v44, v42);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v39 = *(_QWORD *)(v0 + 440);
  v41 = *(_QWORD *)(v0 + 424);
  v43 = *(_QWORD *)(v0 + 408);
  v45 = *(_QWORD *)(v0 + 400);
  v47 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100918ACC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1152);
  *(_QWORD *)(*v1 + 1160) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10091A0D8;
  else
    v4 = sub_100918B30;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 376), 0);
}

uint64_t sub_100918B30()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 872);
  v7 = *(_QWORD *)(v0 + 864);
  v8 = *(_QWORD *)(v0 + 856);
  v46 = *(_QWORD *)(v0 + 696);
  v48 = *(_QWORD *)(v0 + 1144);
  v42 = *(_QWORD *)(v0 + 680);
  v44 = *(_QWORD *)(v0 + 1136);
  v38 = *(_QWORD *)(v0 + 656);
  v40 = *(_QWORD *)(v0 + 688);
  swift_release();
  sub_10001BC14(v8, v7);
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  swift_release();
  sub_10001BC14(v44, v48);
  sub_1000126B0(v38, type metadata accessor for SharingCircleSecretValue);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v46, v42);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v39 = *(_QWORD *)(v0 + 448);
  v41 = *(_QWORD *)(v0 + 440);
  v43 = *(_QWORD *)(v0 + 424);
  v45 = *(_QWORD *)(v0 + 408);
  v47 = *(_QWORD *)(v0 + 400);
  v49 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100918E04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1176);
  *(_QWORD *)(*v1 + 1184) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10091A3B4;
  else
    v4 = sub_100918E68;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 376), 0);
}

uint64_t sub_100918E68()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(_QWORD *)(v0 + 896);
  v3 = *(_QWORD *)(v0 + 888);
  v4 = *(_QWORD *)(v0 + 880);
  v5 = *(_QWORD *)(v0 + 872);
  v6 = *(_QWORD *)(v0 + 864);
  v7 = *(_QWORD *)(v0 + 856);
  v43 = *(_QWORD *)(v0 + 688);
  v45 = *(_QWORD *)(v0 + 680);
  v47 = *(_QWORD *)(v0 + 696);
  v8 = *(_QWORD *)(v0 + 648);
  v39 = *(_QWORD *)(v0 + 912);
  v41 = *(_QWORD *)(v0 + 424);
  swift_release();
  sub_10001BC14(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v39);
  swift_release();
  sub_1000126B0(v8, type metadata accessor for SharingCircleSecretValue);
  sub_1000126B0(v41, type metadata accessor for KeyDropJoinToken);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v47, v45);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v40 = *(_QWORD *)(v0 + 440);
  v42 = *(_QWORD *)(v0 + 424);
  v44 = *(_QWORD *)(v0 + 408);
  v46 = *(_QWORD *)(v0 + 400);
  v48 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091913C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[155] = v2;
  *v2 = v0;
  v2[1] = sub_1009191AC;
  return unsafeBlocking<A>(_:)(v0 + 33, sub_10007C6FC, v0[103], v0[105]);
}

uint64_t sub_1009191AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 824);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1240));
  swift_release();
  return swift_task_switch(sub_10091920C, v1, 0);
}

uint64_t sub_10091920C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[47];
  v0[156] = v0[33];
  return swift_task_switch(sub_100919228, v1, 0);
}

uint64_t sub_100919228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uid_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 1216);
  v2 = *(int *)(v0 + 1332);
  v3 = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v0 + 1256) = *(_QWORD *)(*(_QWORD *)(v0 + 1248) + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  swift_retain();
  swift_release();
  *(_QWORD *)(v0 + 184) = &type metadata for SecondaryIndex;
  *(_QWORD *)(v0 + 192) = sub_100336B24();
  *(_QWORD *)(v0 + 160) = v1;
  v4 = getuid();
  sub_100A06500(v4);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FCE7C);
  *(_QWORD *)(v0 + 1264) = v5;
  *v5 = v0;
  v5[1] = sub_1009192F8;
  return sub_1004731C8(*(_QWORD *)(v0 + 520), v3 + v2, v0 + 160, *(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1232));
}

uint64_t sub_1009192F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 1264));
  if (v0)
  {
    v3 = v2[65];
    v4 = v2[61];
    v5 = v2[62];
    v6 = v2[47];
    swift_release();
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    v7 = sub_10091A690;
  }
  else
  {
    v8 = v2 + 20;
    v9 = v2[65];
    v10 = v2[61];
    v11 = v2[62];
    v6 = v2[47];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
    v7 = sub_1009193C4;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009193C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_10001BC14(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1232));
  v1 = *(_QWORD *)(v0 + 1208) + 1;
  if (v1 == *(_QWORD *)(v0 + 1200))
  {
    v2 = *(_QWORD *)(v0 + 912);
    v3 = *(_QWORD *)(v0 + 904);
    v4 = *(_QWORD *)(v0 + 896);
    v5 = *(_QWORD *)(v0 + 888);
    v6 = *(_QWORD *)(v0 + 880);
    v7 = *(_QWORD *)(v0 + 872);
    v47 = *(_QWORD *)(v0 + 696);
    v8 = *(_QWORD *)(v0 + 688);
    v9 = *(_QWORD *)(v0 + 680);
    sub_10001BC14(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
    sub_10001EF3C(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v3, v2);
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v47, v9);
    v10 = *(_QWORD *)(v0 + 800);
    v11 = *(_QWORD *)(v0 + 792);
    v12 = *(_QWORD *)(v0 + 784);
    v13 = *(_QWORD *)(v0 + 776);
    v14 = *(_QWORD *)(v0 + 768);
    v15 = *(_QWORD *)(v0 + 760);
    v16 = *(_QWORD *)(v0 + 728);
    v17 = *(_QWORD *)(v0 + 720);
    v18 = *(_QWORD *)(v0 + 712);
    v24 = *(_QWORD *)(v0 + 696);
    v25 = *(_QWORD *)(v0 + 672);
    v26 = *(_QWORD *)(v0 + 664);
    v27 = *(_QWORD *)(v0 + 656);
    v28 = *(_QWORD *)(v0 + 648);
    v29 = *(_QWORD *)(v0 + 632);
    v30 = *(_QWORD *)(v0 + 624);
    v31 = *(_QWORD *)(v0 + 616);
    v32 = *(_QWORD *)(v0 + 608);
    v33 = *(_QWORD *)(v0 + 600);
    v34 = *(_QWORD *)(v0 + 592);
    v35 = *(_QWORD *)(v0 + 560);
    v36 = *(_QWORD *)(v0 + 552);
    v37 = *(_QWORD *)(v0 + 544);
    v38 = *(_QWORD *)(v0 + 528);
    v39 = *(_QWORD *)(v0 + 520);
    v40 = *(_QWORD *)(v0 + 512);
    v41 = *(_QWORD *)(v0 + 480);
    v42 = *(_QWORD *)(v0 + 472);
    v43 = *(_QWORD *)(v0 + 448);
    v44 = *(_QWORD *)(v0 + 440);
    v45 = *(_QWORD *)(v0 + 424);
    v46 = *(_QWORD *)(v0 + 408);
    v48 = *(_QWORD *)(v0 + 400);
    v49 = *(_QWORD *)(v0 + 392);
    swift_task_dealloc(*(_QWORD *)(v0 + 808));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 1208) = v1;
    v20 = *(_QWORD *)(v0 + 824);
    v21 = (_QWORD *)(*(_QWORD *)(v0 + 1192) + 24 * v1);
    *(_QWORD *)(v0 + 1216) = v21[4];
    v22 = v21[5];
    *(_QWORD *)(v0 + 1224) = v22;
    v23 = v21[6];
    *(_QWORD *)(v0 + 1232) = v23;
    sub_10001BBBC(v22, v23);
    return swift_task_switch(sub_10091913C, v20, 0);
  }
}

uint64_t sub_1009196E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1272);
  *(_QWORD *)(*(_QWORD *)v1 + 1280) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[47];
    (*(void (**)(_QWORD, _QWORD))(v2[62] + 8))(v2[64], v2[61]);
    sub_1009614A8(v2 + 2);
    v5 = sub_10091A9BC;
  }
  else
  {
    v4 = v2[103];
    (*(void (**)(_QWORD, _QWORD))(v2[62] + 8))(v2[64], v2[61]);
    sub_1009614A8(v2 + 2);
    v5 = sub_10091978C;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10091978C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[103];
  v2 = swift_allocObject(&unk_10109E078, 25, 7);
  v0[161] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 15;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[162] = v4;
  *v4 = v0;
  v4[1] = sub_10091982C;
  return unsafeBlocking<A>(_:)(v4, sub_1000D9274, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10091982C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 824);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1296));
  swift_release();
  return swift_task_switch(sub_100919890, v1, 0);
}

uint64_t sub_100919890()
{
  uint64_t v0;

  return swift_task_switch(sub_1009198A4, *(_QWORD *)(v0 + 376), 0);
}

uint64_t sub_1009198A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v43 = *(_QWORD *)(v0 + 912);
  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(_QWORD *)(v0 + 896);
  v3 = *(_QWORD *)(v0 + 888);
  v4 = *(_QWORD *)(v0 + 880);
  v5 = *(_QWORD *)(v0 + 872);
  v6 = *(_QWORD *)(v0 + 696);
  v7 = *(_QWORD *)(v0 + 688);
  v8 = *(_QWORD *)(v0 + 680);
  sub_10001BC14(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v43);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v39 = *(_QWORD *)(v0 + 440);
  v40 = *(_QWORD *)(v0 + 424);
  v41 = *(_QWORD *)(v0 + 408);
  v42 = *(_QWORD *)(v0 + 400);
  v44 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100919B38()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 872);
  v7 = *(_QWORD *)(v0 + 864);
  v8 = *(_QWORD *)(v0 + 856);
  v43 = *(_QWORD *)(v0 + 688);
  v45 = *(_QWORD *)(v0 + 944);
  v47 = *(_QWORD *)(v0 + 680);
  v49 = *(_QWORD *)(v0 + 696);
  v39 = *(_QWORD *)(v0 + 672);
  v41 = *(_QWORD *)(v0 + 936);
  swift_release();
  sub_10001BC14(v8, v7);
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001BC14(v41, v45);
  swift_release();
  sub_1000126B0(v39, type metadata accessor for SharingCircleSecretValue);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v49, v47);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v40 = *(_QWORD *)(v0 + 440);
  v42 = *(_QWORD *)(v0 + 424);
  v44 = *(_QWORD *)(v0 + 408);
  v46 = *(_QWORD *)(v0 + 400);
  v48 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100919E14()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 872);
  v45 = *(_QWORD *)(v0 + 696);
  v47 = *(_QWORD *)(v0 + 1104);
  v7 = *(_QWORD *)(v0 + 688);
  v41 = *(_QWORD *)(v0 + 1096);
  v43 = *(_QWORD *)(v0 + 680);
  v8 = *(_QWORD *)(v0 + 664);
  sub_10001BC14(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  swift_release();
  sub_10001BC14(v41, v47);
  sub_1000126B0(v8, type metadata accessor for SharingCircleSecretValue);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v45, v43);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v39 = *(_QWORD *)(v0 + 440);
  v40 = *(_QWORD *)(v0 + 424);
  v42 = *(_QWORD *)(v0 + 408);
  v44 = *(_QWORD *)(v0 + 400);
  v46 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091A0D8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 904);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = *(_QWORD *)(v0 + 880);
  v6 = *(_QWORD *)(v0 + 872);
  v7 = *(_QWORD *)(v0 + 864);
  v8 = *(_QWORD *)(v0 + 856);
  v47 = *(_QWORD *)(v0 + 696);
  v49 = *(_QWORD *)(v0 + 1144);
  v43 = *(_QWORD *)(v0 + 680);
  v45 = *(_QWORD *)(v0 + 1136);
  v39 = *(_QWORD *)(v0 + 656);
  v41 = *(_QWORD *)(v0 + 688);
  swift_release();
  sub_10001BC14(v8, v7);
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  swift_release();
  sub_10001BC14(v45, v49);
  sub_1000126B0(v39, type metadata accessor for SharingCircleSecretValue);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v47, v43);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v40 = *(_QWORD *)(v0 + 440);
  v42 = *(_QWORD *)(v0 + 424);
  v44 = *(_QWORD *)(v0 + 408);
  v46 = *(_QWORD *)(v0 + 400);
  v48 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091A3B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(_QWORD *)(v0 + 896);
  v3 = *(_QWORD *)(v0 + 888);
  v4 = *(_QWORD *)(v0 + 880);
  v5 = *(_QWORD *)(v0 + 872);
  v6 = *(_QWORD *)(v0 + 864);
  v7 = *(_QWORD *)(v0 + 856);
  v44 = *(_QWORD *)(v0 + 688);
  v46 = *(_QWORD *)(v0 + 680);
  v48 = *(_QWORD *)(v0 + 696);
  v8 = *(_QWORD *)(v0 + 648);
  v40 = *(_QWORD *)(v0 + 912);
  v42 = *(_QWORD *)(v0 + 424);
  swift_release();
  sub_10001BC14(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v40);
  swift_release();
  sub_1000126B0(v8, type metadata accessor for SharingCircleSecretValue);
  sub_1000126B0(v42, type metadata accessor for KeyDropJoinToken);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v48, v46);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v39 = *(_QWORD *)(v0 + 440);
  v41 = *(_QWORD *)(v0 + 424);
  v43 = *(_QWORD *)(v0 + 408);
  v45 = *(_QWORD *)(v0 + 400);
  v47 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091A690()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  sub_10001BC14(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1232));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 160));
  v1 = *(_QWORD *)(v0 + 1208) + 1;
  if (v1 == *(_QWORD *)(v0 + 1200))
  {
    v2 = *(_QWORD *)(v0 + 912);
    v3 = *(_QWORD *)(v0 + 904);
    v4 = *(_QWORD *)(v0 + 896);
    v5 = *(_QWORD *)(v0 + 888);
    v6 = *(_QWORD *)(v0 + 880);
    v7 = *(_QWORD *)(v0 + 872);
    v47 = *(_QWORD *)(v0 + 696);
    v8 = *(_QWORD *)(v0 + 688);
    v9 = *(_QWORD *)(v0 + 680);
    sub_10001BC14(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
    sub_10001EF3C(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v3, v2);
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v47, v9);
    v10 = *(_QWORD *)(v0 + 800);
    v11 = *(_QWORD *)(v0 + 792);
    v12 = *(_QWORD *)(v0 + 784);
    v13 = *(_QWORD *)(v0 + 776);
    v14 = *(_QWORD *)(v0 + 768);
    v15 = *(_QWORD *)(v0 + 760);
    v16 = *(_QWORD *)(v0 + 728);
    v17 = *(_QWORD *)(v0 + 720);
    v18 = *(_QWORD *)(v0 + 712);
    v24 = *(_QWORD *)(v0 + 696);
    v25 = *(_QWORD *)(v0 + 672);
    v26 = *(_QWORD *)(v0 + 664);
    v27 = *(_QWORD *)(v0 + 656);
    v28 = *(_QWORD *)(v0 + 648);
    v29 = *(_QWORD *)(v0 + 632);
    v30 = *(_QWORD *)(v0 + 624);
    v31 = *(_QWORD *)(v0 + 616);
    v32 = *(_QWORD *)(v0 + 608);
    v33 = *(_QWORD *)(v0 + 600);
    v34 = *(_QWORD *)(v0 + 592);
    v35 = *(_QWORD *)(v0 + 560);
    v36 = *(_QWORD *)(v0 + 552);
    v37 = *(_QWORD *)(v0 + 544);
    v38 = *(_QWORD *)(v0 + 528);
    v39 = *(_QWORD *)(v0 + 520);
    v40 = *(_QWORD *)(v0 + 512);
    v41 = *(_QWORD *)(v0 + 480);
    v42 = *(_QWORD *)(v0 + 472);
    v43 = *(_QWORD *)(v0 + 448);
    v44 = *(_QWORD *)(v0 + 440);
    v45 = *(_QWORD *)(v0 + 424);
    v46 = *(_QWORD *)(v0 + 408);
    v48 = *(_QWORD *)(v0 + 400);
    v49 = *(_QWORD *)(v0 + 392);
    swift_task_dealloc(*(_QWORD *)(v0 + 808));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 1208) = v1;
    v20 = *(_QWORD *)(v0 + 824);
    v21 = (_QWORD *)(*(_QWORD *)(v0 + 1192) + 24 * v1);
    *(_QWORD *)(v0 + 1216) = v21[4];
    v22 = v21[5];
    *(_QWORD *)(v0 + 1224) = v22;
    v23 = v21[6];
    *(_QWORD *)(v0 + 1232) = v23;
    sub_10001BBBC(v22, v23);
    return swift_task_switch(sub_10091913C, v20, 0);
  }
}

uint64_t sub_10091A9BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v44 = *(_QWORD *)(v0 + 912);
  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(_QWORD *)(v0 + 896);
  v3 = *(_QWORD *)(v0 + 888);
  v4 = *(_QWORD *)(v0 + 880);
  v5 = *(_QWORD *)(v0 + 872);
  v6 = *(_QWORD *)(v0 + 696);
  v7 = *(_QWORD *)(v0 + 688);
  v8 = *(_QWORD *)(v0 + 680);
  sub_10001BC14(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864));
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v44);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  v13 = *(_QWORD *)(v0 + 768);
  v14 = *(_QWORD *)(v0 + 760);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 720);
  v17 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 696);
  v20 = *(_QWORD *)(v0 + 672);
  v21 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  v24 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 560);
  v31 = *(_QWORD *)(v0 + 552);
  v32 = *(_QWORD *)(v0 + 544);
  v33 = *(_QWORD *)(v0 + 528);
  v34 = *(_QWORD *)(v0 + 520);
  v35 = *(_QWORD *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 480);
  v37 = *(_QWORD *)(v0 + 472);
  v38 = *(_QWORD *)(v0 + 448);
  v39 = *(_QWORD *)(v0 + 440);
  v40 = *(_QWORD *)(v0 + 424);
  v41 = *(_QWORD *)(v0 + 408);
  v42 = *(_QWORD *)(v0 + 400);
  v43 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc(*(_QWORD *)(v0 + 808));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091AC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v6[10] = a6;
  v11 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v6[11] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[12] = swift_task_alloc(v12);
  v6[13] = swift_task_alloc(v12);
  v13 = (_QWORD *)swift_task_alloc(dword_101120824);
  v6[14] = v13;
  *v13 = v6;
  v13[1] = sub_10091AD18;
  return sub_100DCCCD4(a2, a3, a4, a5, 0, 0, 0);
}

uint64_t sub_10091AD18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 112);
  v3 = *v1;
  *(_QWORD *)(v3 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10091AD94, 0, 0);
  v5 = *(_QWORD *)(v3 + 96);
  swift_task_dealloc(*(_QWORD *)(v3 + 104));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10091AD94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *log;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7940);
  sub_10005972C(v1, v3, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v1, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_errorRetain(v2);
  v6 = swift_errorRetain(v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 104);
  if (v9)
  {
    v13 = swift_slowAlloc(42, -1);
    v25 = swift_slowAlloc(96, -1);
    v26 = v25;
    *(_DWORD *)v13 = 136446979;
    log = v7;
    v14 = sub_100906C5C();
    *(_QWORD *)(v0 + 40) = sub_100016940(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v13 + 12) = 2160;
    *(_QWORD *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    *(_QWORD *)(v0 + 56) = sub_100016940(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v12, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v13 + 32) = 2082;
    swift_getErrorValue(v10, v0 + 64, v0 + 16);
    v20 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 72) = sub_100016940(v20, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v13 + 34, v13 + 42);
    swift_bridgeObjectRelease();
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, log, v8, "Failed to save primaryAddress keys %{public}s,\nbeacon-id: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v25, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    sub_1000126B0(v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v12, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v22 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091B10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v6[10] = a6;
  v11 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v6[11] = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[12] = swift_task_alloc(v12);
  v6[13] = swift_task_alloc(v12);
  v13 = (_QWORD *)swift_task_alloc(dword_101120824);
  v6[14] = v13;
  *v13 = v6;
  v13[1] = sub_10091B1CC;
  return sub_100DCCCD4(a2, 0, 0, 0, a3, a4, a5);
}

uint64_t sub_10091B1CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 112);
  v3 = *v1;
  *(_QWORD *)(v3 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10091B248, 0, 0);
  v5 = *(_QWORD *)(v3 + 96);
  swift_task_dealloc(*(_QWORD *)(v3 + 104));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10091B248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *log;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7940);
  sub_10005972C(v1, v3, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v1, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_errorRetain(v2);
  v6 = swift_errorRetain(v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 104);
  if (v9)
  {
    v13 = swift_slowAlloc(42, -1);
    v25 = swift_slowAlloc(96, -1);
    v26 = v25;
    *(_DWORD *)v13 = 136446979;
    log = v7;
    v14 = sub_100906C5C();
    *(_QWORD *)(v0 + 40) = sub_100016940(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v13 + 12) = 2160;
    *(_QWORD *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    *(_QWORD *)(v0 + 56) = sub_100016940(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v12, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v13 + 32) = 2082;
    swift_getErrorValue(v10, v0 + 64, v0 + 16);
    v20 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 72) = sub_100016940(v20, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v13 + 34, v13 + 42);
    swift_bridgeObjectRelease();
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, log, v8, "Failed to save secondaryAddress keys %{public}s,\n                                         beacon-id: %{private,mask.hash}s,\n                                         error: %{public}s.", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v25, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    sub_1000126B0(v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v12, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v22 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091B5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  v7 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v6[16] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[17] = swift_task_alloc(v8);
  v6[18] = swift_task_alloc(v8);
  v9 = type metadata accessor for UUID(0);
  v6[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[20] = v10;
  v6[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10091B65C, 0, 0);
}

uint64_t sub_10091B65C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uid_t v3;
  _QWORD *v4;

  v1 = v0[11];
  v2 = v1 + *(int *)(type metadata accessor for SharedBeaconRecord(0) + 20);
  v3 = getuid();
  sub_100A06500(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FCE84);
  v0[22] = v4;
  *v4 = v0;
  v4[1] = sub_10091B6F0;
  return sub_100473878(v0[21], v2, v0[12], v0[13], v0[14]);
}

uint64_t sub_10091B6F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(*v1 + 168);
  v2 = *(_QWORD *)(*v1 + 176);
  v4 = *(_QWORD *)(*v1 + 152);
  v5 = *(_QWORD *)(*v1 + 160);
  v6 = *v1;
  *(_QWORD *)(v6 + 184) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_10091B7A4, 0, 0);
  v8 = *(_QWORD *)(v6 + 136);
  v9 = *(_QWORD *)(v6 + 144);
  swift_task_dealloc(*(_QWORD *)(v6 + 168));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10091B7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7940);
  sub_10005972C(v4, v2, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v4, v3, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 184);
  if (v9)
  {
    v11 = *(_QWORD *)(v0 + 144);
    v26 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 136);
    v12 = swift_slowAlloc(42, -1);
    v27 = swift_slowAlloc(96, -1);
    v28 = v27;
    *(_DWORD *)v12 = 136446979;
    v13 = sub_100906C5C();
    *(_QWORD *)(v0 + 40) = sub_100016940(v13, v14, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v12 + 12) = 2160;
    *(_QWORD *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2081;
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v26, v15);
    *(_QWORD *)(v0 + 56) = sub_100016940(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v25, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v12 + 32) = 2082;
    swift_getErrorValue(v10, v0 + 64, v0 + 16);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 72) = sub_100016940(v18, v19, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v12 + 34, v12 + 42);
    swift_bridgeObjectRelease();
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to save connectionKeys %{public}s,\nbeacon-id: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v12, 0x2Au);
    swift_arrayDestroy(v27, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 136);
    v20 = *(_QWORD *)(v0 + 144);
    swift_errorRelease(*(_QWORD *)(v0 + 184));
    sub_1000126B0(v20, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v21, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v22 = *(_QWORD *)(v0 + 136);
  v23 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091BB18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  v4 = sub_10001A9A8(&qword_1010EC870);
  v3[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for KeyDropJoinToken(0);
  v3[38] = v5;
  v3[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_10110F130);
  v3[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v3[41] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[42] = swift_task_alloc(v8);
  v3[43] = swift_task_alloc(v8);
  v3[44] = swift_task_alloc(v8);
  v3[45] = swift_task_alloc(v8);
  v3[46] = swift_task_alloc(v8);
  v3[47] = swift_task_alloc(v8);
  v3[48] = swift_task_alloc(v8);
  v3[49] = swift_task_alloc(v8);
  v3[50] = swift_task_alloc(v8);
  v3[51] = swift_task_alloc(v8);
  v3[52] = swift_task_alloc(v8);
  v3[53] = swift_task_alloc(v8);
  v9 = type metadata accessor for SharingCircleSecret(0);
  v3[54] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[55] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[56] = swift_task_alloc(v11);
  v3[57] = swift_task_alloc(v11);
  v3[58] = swift_task_alloc(v11);
  v3[59] = swift_task_alloc(v11);
  v3[60] = swift_task_alloc(v11);
  v12 = type metadata accessor for SharingCircleSecretValue(0);
  v3[61] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[62] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[63] = swift_task_alloc(v14);
  v3[64] = swift_task_alloc(v14);
  v3[65] = swift_task_alloc(v14);
  v3[66] = swift_task_alloc(v14);
  v3[67] = swift_task_alloc(v14);
  v3[68] = swift_task_alloc(v14);
  v3[69] = swift_task_alloc(v14);
  v3[70] = swift_task_alloc(v14);
  v15 = sub_10001A9A8((uint64_t *)&unk_101111620);
  v3[71] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v3[72] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v3[73] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v3[74] = v18;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[75] = swift_task_alloc(v19);
  v3[76] = swift_task_alloc(v19);
  v3[77] = swift_task_alloc(v19);
  v3[78] = swift_task_alloc(v19);
  return swift_task_switch(sub_10091BDC0, v2, 0);
}

uint64_t sub_10091BDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char *v21;
  void (*v22)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v64;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 584);
  v3 = *(_QWORD *)(v0 + 576);
  v57 = v2;
  v59 = *(_QWORD *)(v0 + 568);
  v54 = *(char **)(v0 + 608);
  v55 = *(_QWORD *)(v0 + 560);
  v4 = *(char **)(v0 + 480);
  v60 = *(_QWORD *)(v0 + 440);
  *(_QWORD *)type = *(_QWORD *)(v0 + 616);
  v56 = *(int **)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 328);
  v51 = *(_QWORD *)(v0 + 280);
  v52 = *(_QWORD *)(v0 + 272);
  sub_100DFDE64();
  v7 = v6;
  v9 = v8;
  *(_QWORD *)(v0 + 16) = v6;
  *(_QWORD *)(v0 + 24) = v8;
  v10 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v10);
  sub_10001BC14(v7, v9);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v0 + 632) = v11;
  v11(*(char **)type, v1, v3);
  v12 = *(int *)(v5 + 20);
  *(_DWORD *)(v0 + 728) = v12;
  v11(v54, v51 + v12, v3);
  sub_10005972C(v52, v55, type metadata accessor for SharingCircleSecretValue);
  *(_OWORD *)v4 = xmmword_100E22FC0;
  v11(&v4[v56[5]], *(_QWORD *)type, v3);
  v11(&v4[v56[6]], (uint64_t)v54, v3);
  sub_100DFDE64();
  v13 = &v4[v56[8]];
  *(_QWORD *)v13 = v14;
  *((_QWORD *)v13 + 1) = v15;
  sub_100DFDD20();
  v17 = v16;
  v19 = v18;
  sub_1000126B0(v55, type metadata accessor for SharingCircleSecretValue);
  v20 = *(void (**)(char *, uint64_t))(v57 + 8);
  *(_QWORD *)(v0 + 640) = v20;
  v20(v54, v3);
  v20(*(char **)type, v3);
  v21 = &v4[v56[7]];
  *(_QWORD *)v21 = v17;
  *((_QWORD *)v21 + 1) = v19;
  sub_1000126EC((uint64_t)v4, v59, type metadata accessor for SharingCircleSecret);
  v22 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v60 + 56);
  *(_QWORD *)(v0 + 648) = v22;
  v22(v59, 0, 1, v56);
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v23 = *(_QWORD *)(v0 + 552);
  v25 = *(_QWORD *)(v0 + 416);
  v24 = *(_QWORD *)(v0 + 424);
  v26 = *(_QWORD *)(v0 + 408);
  v28 = *(_QWORD *)(v0 + 272);
  v27 = *(_QWORD *)(v0 + 280);
  v29 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 656) = sub_10001A9E8(v29, (uint64_t)qword_1011B7940);
  sub_10005972C(v27, v24, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v28, v23, type metadata accessor for SharingCircleSecretValue);
  sub_10005972C(v27, v25, type metadata accessor for SharingCircleKeyManager.Instruction);
  v30 = sub_10005972C(v27, v26, type metadata accessor for SharingCircleKeyManager.Instruction);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v53 = *(_QWORD *)(v0 + 576);
    v33 = *(_QWORD *)(v0 + 552);
    typea = v32;
    v34 = *(_QWORD *)(v0 + 424);
    v50 = *(_QWORD *)(v0 + 416);
    v58 = *(_QWORD *)(v0 + 408);
    v35 = swift_slowAlloc(62, -1);
    v61 = swift_slowAlloc(128, -1);
    v64 = v61;
    *(_DWORD *)v35 = 136447491;
    v36 = sub_100906C5C();
    *(_QWORD *)(v0 + 224) = sub_100016940(v36, v37, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v34, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v35 + 12) = 2080;
    sub_100DFDD20();
    *(_QWORD *)(v0 + 232) = sub_100016940(v38, v39, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v33, type metadata accessor for SharingCircleSecretValue);
    *(_WORD *)(v35 + 22) = 2160;
    *(_QWORD *)(v0 + 240) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v35 + 24, v35 + 32);
    *(_WORD *)(v35 + 32) = 2081;
    v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v53, v40);
    *(_QWORD *)(v0 + 248) = sub_100016940(v41, v42, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v35 + 34, v35 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v50, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v35 + 42) = 2160;
    *(_QWORD *)(v0 + 256) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v35 + 44, v35 + 52);
    *(_WORD *)(v35 + 52) = 2081;
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v53, v40);
    *(_QWORD *)(v0 + 264) = sub_100016940(v43, v44, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v35 + 54, v35 + 62);
    swift_bridgeObjectRelease();
    sub_1000126B0(v58, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v31, typea, "Save secret value: %{public}s,\ntype: %s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v35, 0x3Eu);
    swift_arrayDestroy(v61, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 552);
    v46 = *(_QWORD *)(v0 + 416);
    v47 = *(_QWORD *)(v0 + 408);
    sub_1000126B0(*(_QWORD *)(v0 + 424), type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v45, type metadata accessor for SharingCircleSecretValue);
    sub_1000126B0(v46, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v47, type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  v48 = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 120);
  *(_QWORD *)(v0 + 664) = v48;
  return swift_task_switch(sub_10091C380, v48, 0);
}

uint64_t sub_10091C380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 592);
  v4 = *(_QWORD *)(v0 + 584);
  v5 = *(_QWORD *)(v0 + 576);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 632))(v2, *(_QWORD *)(v0 + 280) + *(int *)(v0 + 728), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109E050, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 672) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 680) = v10;
  v11 = sub_10001A9A8(&qword_1010EC8C8);
  *v10 = v0;
  v10[1] = sub_10091C484;
  return unsafeBlocking<A>(_:)(v0 + 216, sub_10007CB00, v8, v11);
}

uint64_t sub_10091C484()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 664);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 680));
  swift_release();
  return swift_task_switch(sub_10091C4E8, v1, 0);
}

uint64_t sub_10091C4E8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[36];
  v0[86] = v0[27];
  return swift_task_switch(sub_10091C504, v1, 0);
}

uint64_t sub_10091C504()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v0[6] = _swiftEmptyArrayStorage;
  v1 = v0[86];
  if (*(_QWORD *)(v1 + 16))
  {
    v46 = v0[62];
    v44 = v0[68];
    v45 = v0[40];
    v2 = v0[59];
    v3 = v0[54];
    sub_10005972C(v1 + ((*(unsigned __int8 *)(v0[55] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[55] + 80)), v2, type metadata accessor for SharingCircleSecret);
    v4 = (uint64_t *)(v2 + *(int *)(v3 + 32));
    v6 = *v4;
    v5 = v4[1];
    v7 = (uint64_t *)(v2 + *(int *)(v3 + 28));
    v9 = *v7;
    v8 = (void *)v7[1];
    sub_10001BBBC(v6, v5);
    swift_bridgeObjectRetain(v8);
    v10._countAndFlagsBits = v9;
    v10._object = v8;
    v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101048400, v10);
    swift_bridgeObjectRelease();
    v12 = v5 >> 62;
    switch(v11)
    {
      case 1:
        __asm { BR              X10 }
        return result;
      case 2:
        __asm { BR              X10 }
        return result;
      case 3:
        v16 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
        PropertyListDecoder.init()();
        v17 = sub_10007CB0C();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&type metadata for PrivateKey, v6, v5, &type metadata for PrivateKey, v17);
        v18 = v0[61];
        v19 = (_QWORD *)v0[40];
        sub_10001BC14(v6, v5);
        swift_release();
        v20 = v0[5];
        *v19 = v0[4];
        *(_QWORD *)(v45 + 8) = v20;
        v14 = v19;
        v13 = v18;
        v15 = 3;
        break;
      case 4:
        v21 = v0[38];
        v22 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
        PropertyListDecoder.init()();
        v23 = sub_100006204(&qword_1010ECB10, type metadata accessor for KeyDropJoinToken, (uint64_t)&unk_100E69168);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v21, v6, v5, v21, v23);
        v24 = v0[61];
        v26 = v0[39];
        v25 = v0[40];
        sub_10001BC14(v6, v5);
        swift_release();
        sub_1000126EC(v26, v25, type metadata accessor for KeyDropJoinToken);
        v14 = (_QWORD *)v25;
        v13 = v24;
        v15 = 4;
        break;
      default:
        v13 = v0[61];
        v14 = (_QWORD *)v0[40];
        *v14 = v6;
        *(_QWORD *)(v45 + 8) = v5;
        v15 = 0;
        break;
    }
    swift_storeEnumTagMultiPayload(v14, v13, v15);
    v27 = v0[61];
    v29 = v0[58];
    v28 = v0[59];
    v30 = v0[40];
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v30, 0, 1, v27);
    sub_10005972C(v28, v29, type metadata accessor for SharingCircleSecret);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v30, 1, v27);
    v32 = (uint64_t *)v0[68];
    if (v31 == 1)
    {
      v33 = v0[61];
      v34 = v0[58];
      v35 = v0[40];
      v36 = (uint64_t *)(v34 + *(int *)(v0[54] + 32));
      v37 = *v36;
      v38 = v36[1];
      sub_10001BBBC(*v36, v38);
      sub_1000126B0(v34, type metadata accessor for SharingCircleSecret);
      *v32 = v37;
      *(_QWORD *)(v44 + 8) = v38;
      swift_storeEnumTagMultiPayload(v32, v33, 0);
      sub_100004048(v35, &qword_10110F130);
    }
    else
    {
      v39 = v0[40];
      sub_1000126B0(v0[58], type metadata accessor for SharingCircleSecret);
      sub_1000126EC(v39, (uint64_t)v32, type metadata accessor for SharingCircleSecretValue);
    }
    v40 = v0[67];
    v41 = v0[61];
    sub_10005972C(v0[68], v40, type metadata accessor for SharingCircleSecretValue);
    v42 = (char *)&loc_10091CABC + *((int *)qword_10091DA50 + swift_getEnumCaseMultiPayload(v40, v41));
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  sub_100ADA070(v0[71], v0 + 6, v0[37]);
  return swift_task_switch(sub_10091DAA0, v0[83], 0);
}

uint64_t sub_10091DAA0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 696) = *(_QWORD *)(*(_QWORD *)(v0 + 664) + 128);
  return swift_task_switch(sub_10091DAC0, 0, 0);
}

uint64_t sub_10091DAC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[87];
  v2 = v0[37];
  v3 = swift_task_alloc(32);
  v0[88] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[89] = v4;
  *v4 = v0;
  v4[1] = sub_10091DB64;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10091DB64()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 712);
  *(_QWORD *)(*v1 + 720) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10091DBD0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 704));
    v4 = sub_10091DE60;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10091DBD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 704));
  return swift_task_switch(sub_10091DC10, v1, 0);
}

uint64_t sub_10091DC10()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 576);
  sub_100004048(*(_QWORD *)(v0 + 296), &qword_1010EC870);
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 616);
  v6 = *(_QWORD *)(v0 + 608);
  v7 = *(_QWORD *)(v0 + 600);
  v8 = *(_QWORD *)(v0 + 568);
  v9 = *(_QWORD *)(v0 + 560);
  v10 = *(_QWORD *)(v0 + 552);
  v11 = *(_QWORD *)(v0 + 544);
  v12 = *(_QWORD *)(v0 + 536);
  v14 = *(_QWORD *)(v0 + 528);
  v15 = *(_QWORD *)(v0 + 520);
  v16 = *(_QWORD *)(v0 + 512);
  v17 = *(_QWORD *)(v0 + 504);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 472);
  v20 = *(_QWORD *)(v0 + 464);
  v21 = *(_QWORD *)(v0 + 456);
  v22 = *(_QWORD *)(v0 + 448);
  v23 = *(_QWORD *)(v0 + 424);
  v24 = *(_QWORD *)(v0 + 416);
  v25 = *(_QWORD *)(v0 + 408);
  v26 = *(_QWORD *)(v0 + 400);
  v27 = *(_QWORD *)(v0 + 392);
  v28 = *(_QWORD *)(v0 + 384);
  v29 = *(_QWORD *)(v0 + 376);
  v30 = *(_QWORD *)(v0 + 368);
  v31 = *(_QWORD *)(v0 + 360);
  v32 = *(_QWORD *)(v0 + 352);
  v33 = *(_QWORD *)(v0 + 344);
  v34 = *(_QWORD *)(v0 + 336);
  v35 = *(_QWORD *)(v0 + 320);
  v36 = *(_QWORD *)(v0 + 312);
  v37 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRelease();
  sub_100004048(v8, (uint64_t *)&unk_101111620);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091DE60()
{
  uint64_t v0;

  return swift_task_switch(sub_10091DE74, *(_QWORD *)(v0 + 288), 0);
}

uint64_t sub_10091DE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_t log;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71[2];

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  sub_10005972C(v4, *(_QWORD *)(v0 + 352), type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_10005972C(v5, v1, type metadata accessor for SharingCircleSecretValue);
  sub_10005972C(v4, v2, type metadata accessor for SharingCircleKeyManager.Instruction);
  v6 = sub_10005972C(v4, v3, type metadata accessor for SharingCircleKeyManager.Instruction);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v67 = *(_QWORD *)(v0 + 624);
    v69 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
    v56 = *(_QWORD *)(v0 + 576);
    v9 = *(_QWORD *)(v0 + 504);
    v59 = v8;
    v10 = *(_QWORD *)(v0 + 352);
    v53 = *(_QWORD *)(v0 + 344);
    v61 = *(_QWORD *)(v0 + 336);
    v65 = *(_QWORD *)(v0 + 296);
    v11 = swift_slowAlloc(42, -1);
    v63 = swift_slowAlloc(128, -1);
    v71[0] = v63;
    *(_DWORD *)v11 = 136446978;
    v12 = sub_100906C5C();
    *(_QWORD *)(v0 + 56) = sub_100016940(v12, v13, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v11 + 12) = 2080;
    sub_100DFDD20();
    *(_QWORD *)(v0 + 64) = sub_100016940(v14, v15, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for SharingCircleSecretValue);
    *(_WORD *)(v11 + 22) = 2080;
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v56, v16);
    *(_QWORD *)(v0 + 72) = sub_100016940(v17, v18, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v53, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v11 + 32) = 2080;
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v56, v16);
    *(_QWORD *)(v0 + 80) = sub_100016940(v19, v20, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v11 + 34, v11 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v61, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v7, v59, "Saved key : %{public}s, type: %s,\nshare-id: %s, beacon-id: %s.", (uint8_t *)v11, 0x2Au);
    swift_arrayDestroy(v63, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    sub_100004048(v65, &qword_1010EC870);
    v69(v67, v56);
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
    v22 = *(_QWORD *)(v0 + 624);
    v23 = *(_QWORD *)(v0 + 576);
    v24 = *(_QWORD *)(v0 + 504);
    v26 = *(_QWORD *)(v0 + 344);
    v25 = *(_QWORD *)(v0 + 352);
    v27 = *(_QWORD *)(v0 + 336);
    v28 = *(_QWORD *)(v0 + 296);

    sub_1000126B0(v27, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v26, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v24, type metadata accessor for SharingCircleSecretValue);
    sub_1000126B0(v25, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_100004048(v28, &qword_1010EC870);
    v21(v22, v23);
  }
  v29 = *(_QWORD *)(v0 + 624);
  v30 = *(_QWORD *)(v0 + 616);
  v31 = *(_QWORD *)(v0 + 608);
  v32 = *(_QWORD *)(v0 + 600);
  v33 = *(_QWORD *)(v0 + 568);
  v34 = *(_QWORD *)(v0 + 560);
  v35 = *(_QWORD *)(v0 + 552);
  v36 = *(_QWORD *)(v0 + 544);
  v37 = *(_QWORD *)(v0 + 536);
  v39 = *(_QWORD *)(v0 + 528);
  v40 = *(_QWORD *)(v0 + 520);
  v41 = *(_QWORD *)(v0 + 512);
  v42 = *(_QWORD *)(v0 + 504);
  v43 = *(_QWORD *)(v0 + 480);
  v44 = *(_QWORD *)(v0 + 472);
  v45 = *(_QWORD *)(v0 + 464);
  v46 = *(_QWORD *)(v0 + 456);
  v47 = *(_QWORD *)(v0 + 448);
  v48 = *(_QWORD *)(v0 + 424);
  v49 = *(_QWORD *)(v0 + 416);
  v50 = *(_QWORD *)(v0 + 408);
  v51 = *(_QWORD *)(v0 + 400);
  v52 = *(_QWORD *)(v0 + 392);
  v54 = *(_QWORD *)(v0 + 384);
  v55 = *(_QWORD *)(v0 + 376);
  v57 = *(_QWORD *)(v0 + 368);
  log = *(os_log_t *)(v0 + 360);
  v60 = *(_QWORD *)(v0 + 352);
  v62 = *(_QWORD *)(v0 + 344);
  v64 = *(_QWORD *)(v0 + 336);
  v66 = *(_QWORD *)(v0 + 320);
  v68 = *(_QWORD *)(v0 + 312);
  v70 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRelease();
  sub_100004048(v33, (uint64_t *)&unk_101111620);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(log);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091E404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v7 = sub_10001A9A8((uint64_t *)&unk_101111620);
  __chkstk_darwin(v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SharingCircleSecret(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a3, (uint64_t)v9, (uint64_t *)&unk_101111620);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    result = sub_100004048((uint64_t)v9, (uint64_t *)&unk_101111620);
  }
  else
  {
    sub_1000126EC((uint64_t)v9, (uint64_t)v13, type metadata accessor for SharingCircleSecret);
    sub_100ADC800((uint64_t)v13);
    result = sub_1000126B0((uint64_t)v13, type metadata accessor for SharingCircleSecret);
    if (v4)
      return result;
  }
  v15 = *a4;
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v17 = v15 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v18 = *(_QWORD *)(v11 + 72);
    swift_bridgeObjectRetain(v15);
    do
    {
      sub_100ADECF8(v17);
      if (v4)
        break;
      v17 += v18;
      --v16;
    }
    while (v16);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10091E590(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[2];

  SymmetricKey.withUnsafeBytes<A>(_:)(v12, sub_100906C08, 0, &type metadata for Data);
  v3 = v12[0];
  v4 = v12[1];
  v5 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  JSONEncoder.init()();
  v12[0] = a1;
  v6 = sub_10096141C();
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(v12, &type metadata for KeyDropInterface.KeyBundle, v6);
  if (!v1)
  {
    v9 = v7;
    v10 = v8;
    Data.spEncrypt(key:ivLength:)(v3, v4, 12, v7, v8);
    sub_10001BC14(v9, v10);
  }
  swift_release();
  return sub_10001BC14(v3, v4);
}

uint64_t sub_10091E694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4[11] = a2;
  v4[12] = v3;
  v4[10] = a1;
  v6 = type metadata accessor for EncryptedData(0);
  v4[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[14] = v7;
  v4[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_10110D164);
  v4[16] = v8;
  *v8 = v4;
  v8[1] = sub_10091E724;
  return sub_10090C6D8((uint64_t)(v4 + 2), a3);
}

uint64_t sub_10091E724()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 128);
  v3 = *v1;
  *(_QWORD *)(v3 + 136) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_10091E798, *(_QWORD *)(v3 + 96), 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 120));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10091E798()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 == 15)
  {
    v3 = sub_1000D94EC();
    v4 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v3, 0, 0);
    *v5 = 9;
    swift_willThrow(v4);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 88);
    v9 = type metadata accessor for PropertyListDecoder(0);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    sub_10001BBBC(v2, v1);
    v10 = sub_10001BBBC(v2, v1);
    PropertyListDecoder.init()(v10);
    v11 = sub_100006204(&qword_1010F1950, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedData, (uint64_t)&protocol conformance descriptor for EncryptedData);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, v8, v7, v6, v11);
    if (!v18)
    {
      v12 = EncryptedData.decrypt(key:)(v2, v1);
      v14 = v13;
      v15 = *(_QWORD *)(v0 + 120);
      v16 = v12;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(v15, *(_QWORD *)(v0 + 104));
      swift_release();
      sub_10001EF3C(v2, v1);
      sub_10001EF3C(v2, v1);
      sub_1000D9530((uint64_t *)(v0 + 16));
      swift_task_dealloc(v15);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v16, v14);
    }
    swift_release();
    sub_10001EF3C(v2, v1);
    sub_10001EF3C(v2, v1);
  }
  sub_1000D9530((uint64_t *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10091E994@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(NSObject *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(NSObject *, uint64_t);
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  NSObject *v66;
  uint64_t v67;
  unint64_t v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t *v77;
  uint64_t v78;
  os_log_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v85 = a1;
  v72 = a3;
  v74 = a4;
  v5 = type metadata accessor for OwnerPeerTrust(0);
  __chkstk_darwin(v5);
  v75 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for UUID(0);
  v78 = *(_QWORD *)(v81 - 8);
  v7 = __chkstk_darwin(v81);
  v76 = ((char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin(v7);
  v11 = ((char *)&v72 - v10);
  __chkstk_darwin(v9);
  v13 = (char *)&v72 - v12;
  v14 = sub_10001A9A8(&qword_1010F1980);
  __chkstk_darwin(v14);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for KeyDropJoinToken(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v73 = (uint64_t)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v72 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v72 - v24;
  v77 = a2;
  v26 = a2[4];
  v88 = v26;
  v27 = *(_QWORD *)(v26 + 16);
  if (v27)
  {
    v79 = v11;
    v80 = v13;
    v82 = v5;
    v83 = (char *)&v72 - v24;
    v28 = v26 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    v29 = v85 + *(int *)(v5 + 20);
    v30 = *(_QWORD *)(v18 + 72);
    swift_bridgeObjectRetain(v26);
    while (1)
    {
      sub_10005972C(v28, (uint64_t)v23, type metadata accessor for KeyDropJoinToken);
      if ((static UUID.== infix(_:_:)(v23, v29) & 1) != 0)
        break;
      sub_1000126B0((uint64_t)v23, type metadata accessor for KeyDropJoinToken);
      v28 += v30;
      if (!--v27)
      {
        v32 = 1;
        goto LABEL_8;
      }
    }
    sub_1000126EC((uint64_t)v23, (uint64_t)v16, type metadata accessor for KeyDropJoinToken);
    v32 = 0;
LABEL_8:
    v11 = v79;
    v13 = v80;
    v5 = v82;
    v25 = v83;
  }
  else
  {
    v31 = swift_bridgeObjectRetain(v26);
    v32 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v18 + 56))(v16, v32, 1, v17, v31);
  sub_1001AE6D8(&v88);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_100004048((uint64_t)v16, &qword_1010F1980);
    v33 = sub_1000D94EC();
    v34 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v33, 0, 0);
    *v35 = 13;
    return swift_willThrow(v34);
  }
  else
  {
    sub_1000126EC((uint64_t)v16, (uint64_t)v25, type metadata accessor for KeyDropJoinToken);
    v37 = v84;
    sub_10090B600((uint64_t)v25);
    if (!v37)
    {
      v38 = v85;
      v39 = (uint64_t *)(v85 + *(int *)(v5 + 32));
      v40 = v5;
      v42 = *v39;
      v41 = v39[1];
      swift_bridgeObjectRetain(v41);
      v43 = sub_100960294(v42, v41, v77);
      v80 = (char *)v44;
      v83 = v25;
      v84 = v43;
      v82 = v40;
      swift_bridgeObjectRelease();
      v45 = v81;
      v46 = v78;
      if (qword_1010EA050 != -1)
        swift_once(&qword_1010EA050, sub_100906B40);
      v47 = type metadata accessor for Logger(0);
      sub_10001A9E8(v47, (uint64_t)qword_1011B7940);
      v48 = *(void (**)(NSObject *, char *, uint64_t))(v46 + 16);
      v48(v11, v13, v45);
      v49 = v38;
      v50 = v75;
      sub_10005972C(v49, v75, type metadata accessor for OwnerPeerTrust);
      v51 = v76;
      v52 = ((uint64_t (*)(NSObject *, uint64_t, uint64_t))v48)(v76, v72, v45);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v53);
      v55 = v54;
      if (os_log_type_enabled(v53, v54))
      {
        v56 = swift_slowAlloc(52, -1);
        v79 = v53;
        v57 = v56;
        v58 = swift_slowAlloc(96, -1);
        v85 = v58;
        *(_DWORD *)v57 = 141559043;
        v86 = 1752392040;
        v87 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v57 + 4, v57 + 12);
        *(_WORD *)(v57 + 12) = 2081;
        v72 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LODWORD(v77) = v55;
        v59 = dispatch thunk of CustomStringConvertible.description.getter(v81, v72);
        v86 = sub_100016940(v59, v60, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v57 + 14, v57 + 22);
        swift_bridgeObjectRelease();
        v61 = *(void (**)(NSObject *, uint64_t))(v46 + 8);
        v61(v11, v81);
        *(_WORD *)(v57 + 22) = 2080;
        v62 = v75;
        v63 = (uint64_t *)(v75 + *(int *)(v82 + 32));
        v64 = *v63;
        v65 = v63[1];
        swift_bridgeObjectRetain(v65);
        v86 = sub_100016940(v64, v65, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v57 + 24, v57 + 32);
        swift_bridgeObjectRelease();
        sub_1000126B0(v62, type metadata accessor for OwnerPeerTrust);
        *(_WORD *)(v57 + 32) = 2160;
        v86 = 1752392040;
        v45 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v57 + 34, v57 + 42);
        *(_WORD *)(v57 + 42) = 2081;
        v66 = v76;
        v67 = dispatch thunk of CustomStringConvertible.description.getter(v45, v72);
        v86 = sub_100016940(v67, v68, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v57 + 44, v57 + 52);
        swift_bridgeObjectRelease();
        v61(v66, v45);
        v69 = v79;
        _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v77, "New Member Created: memberId: %{private,mask.hash}s,\ndisplayIdentifier: %s for\nownerSharingCircleIdentifier: %{private,mask.hash}s.", (uint8_t *)v57, 0x34u);
        v70 = v85;
        swift_arrayDestroy(v85, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v57, -1, -1);

      }
      else
      {
        v61 = *(void (**)(NSObject *, uint64_t))(v46 + 8);
        v61(v11, v45);
        sub_1000126B0(v50, type metadata accessor for OwnerPeerTrust);
        v61(v51, v45);

      }
      v25 = v83;
      v71 = v73;
      sub_10005972C((uint64_t)v83, v73, type metadata accessor for KeyDropJoinToken);
      sub_10091F074(0, v71, v84, (unint64_t)v80, v74);
      v61(v13, v45);
    }
    return sub_1000126B0((uint64_t)v25, type metadata accessor for KeyDropJoinToken);
  }
}

uint64_t sub_10091F074@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51[2];
  uint64_t v52;

  v49 = a3;
  v50 = a4;
  LODWORD(v46) = a1;
  v48 = a5;
  v6 = type metadata accessor for P256.Signing.PublicKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for P256.Signing.PrivateKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v47 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SharingCircleKeyManager();
  v16 = v52;
  sub_10090B600(a2);
  if (v16)
  {
    sub_10001BC14(v49, v50);
    return sub_1000126B0(a2, type metadata accessor for KeyDropJoinToken);
  }
  else
  {
    v41 = v11;
    v42 = v10;
    v43 = v9;
    v44 = v7;
    v52 = v6;
    v18 = v48;
    v19 = v15;
    v20 = v45;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v48, v19, v45);
    v21 = (int *)type metadata accessor for KeyDropCreateRequest.Member(0);
    *(_BYTE *)(v18 + v21[5]) = v46 & 1;
    v22 = (uint64_t *)(a2 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20));
    v23 = v22[1];
    v51[0] = *v22;
    v51[1] = v23;
    sub_10001BBBC(v51[0], v23);
    v24 = v47;
    v25 = P256.Signing.PrivateKey.init<A>(rawRepresentation:)(v51, &type metadata for Data, &protocol witness table for Data);
    v26 = a2;
    v46 = v13;
    v27 = v20;
    v28 = v43;
    P256.Signing.PrivateKey.publicKey.getter(v25);
    v29 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v24, v42);
    v30 = P256.Signing.PublicKey.compactRepresentation.getter(v29);
    v32 = v31;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v52);
    v34 = v49;
    v33 = v50;
    if (v32 >> 60 == 15)
    {
      v35 = sub_1000D94EC();
      v36 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v35, 0, 0);
      *v37 = 18;
      swift_willThrow(v36);
      sub_10001BC14(v34, v33);
      v38 = v46;
      sub_1000126B0(v26, type metadata accessor for KeyDropJoinToken);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v18, v27);
    }
    else
    {
      result = sub_1000126B0(a2, type metadata accessor for KeyDropJoinToken);
      v39 = (uint64_t *)(v18 + v21[6]);
      *v39 = v30;
      v39[1] = v32;
      v40 = (uint64_t *)(v18 + v21[7]);
      *v40 = v34;
      v40[1] = v33;
    }
  }
  return result;
}

uint64_t sub_10091F338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[11] = a1;
  v3[12] = v2;
  v5 = sub_10001A9A8(&qword_1010F1980);
  v3[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for KeyDropJoinToken(0);
  v3[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[15] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v8);
  v3[17] = swift_task_alloc(v8);
  v3[18] = swift_task_alloc(v8);
  v9 = a2 + *(int *)(type metadata accessor for OwnerSharingCircle(0) + 20);
  v10 = (_QWORD *)swift_task_alloc(dword_10110D164);
  v3[19] = v10;
  *v10 = v3;
  v10[1] = sub_10091F414;
  return sub_10090C6D8((uint64_t)(v3 + 2), v9);
}

uint64_t sub_10091F414()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_10091F4B4, *(_QWORD *)(v3 + 96), 0);
  v4 = *(_QWORD *)(v3 + 136);
  v5 = *(_QWORD *)(v3 + 128);
  v6 = *(_QWORD *)(v3 + 104);
  swift_task_dealloc(*(_QWORD *)(v3 + 144));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10091F4B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);

  v1 = v0[6];
  v0[10] = v1;
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[15];
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      sub_10005972C(v4, v0[17], type metadata accessor for KeyDropJoinToken);
      if (qword_1010E9A08 != -1)
        swift_once(&qword_1010E9A08, sub_1001EB1EC);
      v6 = v0[17];
      v7 = type metadata accessor for UUID(0);
      v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6A78);
      v9 = static UUID.== infix(_:_:)(v6, v8);
      v10 = v0[17];
      if ((v9 & 1) != 0)
        break;
      sub_1000126B0(v10, type metadata accessor for KeyDropJoinToken);
      v4 += v5;
      if (!--v2)
        goto LABEL_9;
    }
    sub_1000126EC(v10, v0[13], type metadata accessor for KeyDropJoinToken);
    v12 = 0;
  }
  else
  {
    v11 = swift_bridgeObjectRetain(v1);
LABEL_9:
    v12 = 1;
  }
  v13 = v0[14];
  v14 = v0[15];
  v15 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(v15, v12, 1, v13, v11);
  sub_1001AE6D8(v0 + 10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
  {
    sub_100004048(v0[13], &qword_1010F1980);
    v16 = sub_1000D94EC();
    v17 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v16, 0, 0);
    *v18 = 13;
    swift_willThrow(v17);
LABEL_18:
    sub_1000D9530(v0 + 2);
    v31 = v0[17];
    v32 = v0[16];
    v33 = v0[13];
    swift_task_dealloc(v0[18]);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    v38 = (uint64_t (*)(void))v0[1];
    return v38();
  }
  sub_1000126EC(v0[13], v0[18], type metadata accessor for KeyDropJoinToken);
  if (qword_1010E9A00 != -1)
    swift_once(&qword_1010E9A00, sub_1001EB16C);
  v19 = v0[20];
  v20 = qword_1011B6A68;
  v21 = qword_1011B6A70;
  swift_bridgeObjectRetain(qword_1011B6A70);
  v22 = sub_100960294(v20, v21, v0 + 2);
  v24 = v19;
  v25 = v0[18];
  if (v24)
  {
    sub_1000126B0(v0[18], type metadata accessor for KeyDropJoinToken);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v26 = v22;
  v27 = v23;
  v28 = v0[16];
  v29 = v0[11];
  swift_bridgeObjectRelease();
  sub_10005972C(v25, v28, type metadata accessor for KeyDropJoinToken);
  sub_10091F074(1, v28, v26, v27, v29);
  v30 = v0[18];
  v36 = v0[16];
  v35 = v0[17];
  v37 = v0[13];
  sub_1000126B0(v30, type metadata accessor for KeyDropJoinToken);
  sub_1000D9530(v0 + 2);
  swift_task_dealloc(v30);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  v38 = (uint64_t (*)(void))v0[1];
  return v38();
}

uint64_t sub_10091F7D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  *(_QWORD *)(v5 + 168) = a4;
  *(_QWORD *)(v5 + 176) = v4;
  *(_BYTE *)(v5 + 89) = a3;
  *(_QWORD *)(v5 + 152) = a1;
  *(_QWORD *)(v5 + 160) = a2;
  v7 = type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData(0);
  *(_QWORD *)(v5 + 184) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 192) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 208) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 216) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 224) = swift_task_alloc(v9);
  v10 = type metadata accessor for KeyDropShareMetaDataResponse(0);
  *(_QWORD *)(v5 + 232) = v10;
  *(_QWORD *)(v5 + 240) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 248) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 256) = v12;
  *(_QWORD *)(v5 + 264) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F1980);
  *(_QWORD *)(v5 + 272) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for KeyDropJoinToken(0);
  *(_QWORD *)(v5 + 280) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v5 + 288) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 296) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 304) = swift_task_alloc(v16);
  v17 = (_QWORD *)swift_task_alloc(dword_10110D164);
  *(_QWORD *)(v5 + 312) = v17;
  *v17 = v5;
  v17[1] = sub_10091F934;
  return sub_10090C6D8(v5 + 16, a2);
}

uint64_t sub_10091F934()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(*v1 + 312);
  v3 = *v1;
  *(_QWORD *)(v3 + 320) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_10091FA28, *(_QWORD *)(v3 + 176), 0);
  v4 = *(_QWORD *)(v3 + 296);
  v6 = *(_QWORD *)(v3 + 264);
  v5 = *(_QWORD *)(v3 + 272);
  v7 = *(_QWORD *)(v3 + 240);
  v9 = *(_QWORD *)(v3 + 216);
  v8 = *(_QWORD *)(v3 + 224);
  v11 = *(_QWORD *)(v3 + 200);
  v10 = *(_QWORD *)(v3 + 208);
  swift_task_dealloc(*(_QWORD *)(v3 + 304));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10091FA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  v1 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 112) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 288);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      sub_10005972C(v4, *(_QWORD *)(v0 + 296), type metadata accessor for KeyDropJoinToken);
      if (qword_1010E9A08 != -1)
        swift_once(&qword_1010E9A08, sub_1001EB1EC);
      v6 = *(_QWORD *)(v0 + 296);
      v7 = sub_10001A9E8(*(_QWORD *)(v0 + 248), (uint64_t)qword_1011B6A78);
      v8 = static UUID.== infix(_:_:)(v6, v7);
      v9 = *(_QWORD *)(v0 + 296);
      if ((v8 & 1) != 0)
        break;
      sub_1000126B0(v9, type metadata accessor for KeyDropJoinToken);
      v4 += v5;
      if (!--v2)
        goto LABEL_9;
    }
    sub_1000126EC(v9, *(_QWORD *)(v0 + 272), type metadata accessor for KeyDropJoinToken);
    v11 = 0;
  }
  else
  {
    v10 = swift_bridgeObjectRetain(v1);
LABEL_9:
    v11 = 1;
  }
  v12 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 272);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))(v14, v11, 1, v12, v10);
  sub_1001AE6D8((_QWORD *)(v0 + 112));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 272), &qword_1010F1980);
    v15 = sub_1000D94EC();
    v16 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v15, 0, 0);
    *v17 = 13;
    swift_willThrow(v16);
LABEL_15:
    sub_1000D9530((uint64_t *)(v0 + 16));
    v20 = *(_QWORD *)(v0 + 296);
    v22 = *(_QWORD *)(v0 + 264);
    v21 = *(_QWORD *)(v0 + 272);
    v23 = *(_QWORD *)(v0 + 240);
    v25 = *(_QWORD *)(v0 + 216);
    v24 = *(_QWORD *)(v0 + 224);
    v27 = *(_QWORD *)(v0 + 200);
    v26 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v18 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 304);
  sub_1000126EC(*(_QWORD *)(v0 + 272), v19, type metadata accessor for KeyDropJoinToken);
  type metadata accessor for SharingCircleKeyManager();
  sub_10090B600(v19);
  if (v18)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for KeyDropJoinToken);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 168));
  v30 = sub_100508CA8(v29);
  *(_QWORD *)(v0 + 328) = v30;
  swift_bridgeObjectRelease();
  v31 = (_QWORD *)swift_task_alloc(dword_10111963C);
  *(_QWORD *)(v0 + 336) = v31;
  *v31 = v0;
  v31[1] = sub_10091FCF0;
  return sub_100C11AC4(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 264), *(_BYTE *)(v0 + 89), *(_QWORD *)(v0 + 304), (uint64_t)v30);
}

uint64_t sub_10091FCF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 336);
  *(_QWORD *)(*v1 + 344) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 176);
  swift_release();
  if (v0)
    v5 = sub_10092035C;
  else
    v5 = sub_10091FD60;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10091FD60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v57 = v0 + 136;
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v52 = (uint64_t *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7940);
  v4 = sub_10005972C(v1, v2, type metadata accessor for KeyDropShareMetaDataResponse);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 248);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v62 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 136) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v0 + 144, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v8, v11);
    *(_QWORD *)(v0 + 144) = sub_100016940(v12, v13, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v7, type metadata accessor for KeyDropShareMetaDataResponse);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Got existing metadata info for %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 240), type metadata accessor for KeyDropShareMetaDataResponse);
  }

  v14 = *(_QWORD *)(v0 + 152);
  v15 = *(int *)(*(_QWORD *)(v0 + 232) + 24);
  v16 = *(_QWORD *)(v14 + v15);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v56 = v0 + 104;
    v18 = *(_QWORD *)(v0 + 192);
    v54 = *(_QWORD *)(v0 + 184);
    v55 = v0 + 128;
    v19 = v16 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    v20 = *(_QWORD *)(v18 + 72);
    swift_bridgeObjectRetain(v16);
    v53 = v20;
    do
    {
      v21 = *(_QWORD *)(v0 + 216);
      v23 = *(_QWORD *)(v0 + 200);
      v22 = *(_QWORD *)(v0 + 208);
      sub_10005972C(v19, *(_QWORD *)(v0 + 224), type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
      sub_10005972C(v19, v21, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
      sub_10005972C(v19, v22, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
      v24 = sub_10005972C(v19, v23, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter(v25);
      v27 = os_log_type_enabled(v25, v26);
      v29 = *(_QWORD *)(v0 + 216);
      v28 = *(unsigned __int8 **)(v0 + 224);
      v30 = *(_QWORD *)(v0 + 208);
      if (v27)
      {
        v60 = *(_QWORD *)(v0 + 200);
        v58 = *(_QWORD *)(v0 + 208);
        v31 = swift_slowAlloc(42, -1);
        v61 = swift_slowAlloc(96, -1);
        v62 = v61;
        *(_DWORD *)v31 = 136446978;
        v32 = sub_100D79CA8(*v28);
        v59 = v25;
        *(_QWORD *)(v0 + 96) = sub_100016940(v32, v33, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v56, v31 + 4, v31 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v28, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
        *(_WORD *)(v31 + 12) = 2082;
        v34 = sub_100D7A250();
        *(_QWORD *)(v0 + 104) = sub_100016940(v34, v35, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v0 + 112, v31 + 14, v31 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v29, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
        *(_WORD *)(v31 + 22) = 2082;
        v36 = v58 + *(int *)(v54 + 24);
        v37 = *(_QWORD *)v36;
        LOBYTE(v36) = *(_BYTE *)(v36 + 8);
        *(_QWORD *)(v0 + 80) = v37;
        *(_BYTE *)(v0 + 88) = v36;
        v38 = sub_10001A9A8(&qword_1010EF8D0);
        v39 = String.init<A>(describing:)(v0 + 80, v38);
        *(_QWORD *)(v0 + 120) = sub_100016940(v39, v40, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v55, v31 + 24, v31 + 32);
        swift_bridgeObjectRelease();
        sub_1000126B0(v58, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
        *(_WORD *)(v31 + 32) = 2050;
        v20 = v53;
        v41 = *(_QWORD *)(v60 + *(int *)(v54 + 28));
        sub_1000126B0(v60, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
        *(_QWORD *)(v0 + 128) = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v57, v31 + 34, v31 + 42);
        _os_log_impl((void *)&_mh_execute_header, v59, v26, "Package of %{public}s type,\nalignment: %{public}s,\nrange: %{public}s...%{public}llu", (uint8_t *)v31, 0x2Au);
        swift_arrayDestroy(v61, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v0 + 200), type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);

        sub_1000126B0(v30, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
        sub_1000126B0(v29, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
        sub_1000126B0((uint64_t)v28, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
      }
      v19 += v20;
      --v17;
    }
    while (v17);
    sub_1000D9530(v52);
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v14 + v15));
    sub_1000D9530(v52);
  }
  swift_bridgeObjectRelease();
  v42 = *(_QWORD *)(v0 + 296);
  v43 = *(_QWORD *)(v0 + 304);
  v45 = *(_QWORD *)(v0 + 264);
  v44 = *(_QWORD *)(v0 + 272);
  v46 = *(_QWORD *)(v0 + 240);
  v48 = *(_QWORD *)(v0 + 216);
  v47 = *(_QWORD *)(v0 + 224);
  v50 = *(_QWORD *)(v0 + 200);
  v49 = *(_QWORD *)(v0 + 208);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(v45, *(_QWORD *)(v0 + 248));
  sub_1000126B0(v43, type metadata accessor for KeyDropJoinToken);
  swift_task_dealloc(v43);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10092035C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 248);
  sub_1000D9530((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1000126B0(v1, type metadata accessor for KeyDropJoinToken);
  v5 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100920434(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v3[11] = a1;
  v3[12] = v2;
  v3[13] = *v2;
  v5 = *(_QWORD *)(type metadata accessor for KeyDropJoinToken(0) - 8);
  v3[14] = v5;
  v3[15] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v3[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v3[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[18] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v9);
  v3[20] = swift_task_alloc(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_10110D164);
  v3[21] = v10;
  *v10 = v3;
  v10[1] = sub_100920520;
  return sub_10090C6D8((uint64_t)(v3 + 2), a2);
}

uint64_t sub_100920520()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*v1 + 168);
  v3 = *v1;
  *(_QWORD *)(v3 + 176) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_1009205BC, *(_QWORD *)(v3 + 96), 0);
  v4 = *(_QWORD *)(v3 + 152);
  v6 = *(_QWORD *)(v3 + 120);
  v5 = *(_QWORD *)(v3 + 128);
  swift_task_dealloc(*(_QWORD *)(v3 + 160));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

_QWORD *sub_1009205BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, unint64_t, uint64_t);
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  uint64_t (*v41)(unint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, unint64_t, uint64_t);
  uint64_t v59;
  _QWORD *v60;
  BOOL v61;
  _QWORD v62[2];

  v1 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 80) = v1;
  v2 = (_QWORD *)(v0 + 80);
  v3 = _swiftEmptyDictionarySingleton;
  v62[0] = _swiftEmptyDictionarySingleton;
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v0 + 112);
    v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v7 = *(_QWORD *)(v5 + 72);
    v8 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRetain_n(v1, 2);
    sub_10005972C(v1 + v6, v9, type metadata accessor for KeyDropJoinToken);
    sub_100920A44((uint64_t)v62, v9);
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 120);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for KeyDropJoinToken);
      return sub_1001AE6D8(v2);
    }
    sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for KeyDropJoinToken);
    v12 = v4 - 1;
    if (v4 != 1)
    {
      v13 = v1 + v7 + v6;
      do
      {
        v14 = *(_QWORD *)(v0 + 120);
        sub_10005972C(v13, v14, type metadata accessor for KeyDropJoinToken);
        sub_100920A44((uint64_t)v62, v14);
        sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for KeyDropJoinToken);
        v13 += v7;
        --v12;
      }
      while (v12);
    }
    sub_1001AE6D8((_QWORD *)(v0 + 80));
    sub_1001AE6D8((_QWORD *)(v0 + 80));
    v3 = (_QWORD *)v62[0];
  }
  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
  {
    v51 = _swiftEmptyDictionarySingleton;
LABEL_29:
    v53 = *(_QWORD *)(v0 + 152);
    v52 = *(_QWORD *)(v0 + 160);
    v55 = *(_QWORD *)(v0 + 120);
    v54 = *(_QWORD *)(v0 + 128);
    sub_1000D9530((uint64_t *)(v0 + 16));
    swift_bridgeObjectRelease();
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(v0 + 8))(v51);
  }
  v17 = *(_QWORD *)(v0 + 144);
  v57 = type metadata accessor for KeyDropShareMetaDataResponse.Member(0);
  v18 = *(_QWORD *)(v57 - 8);
  v19 = v15 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  v20 = *(_QWORD *)(v18 + 72);
  swift_bridgeObjectRetain(v15);
  v60 = _swiftEmptyDictionarySingleton;
  v56 = v20;
  while (1)
  {
    if (v3[2])
    {
      v21 = sub_100003FB0(v19);
      if ((v22 & 1) != 0)
        break;
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v17 + 56))(*(_QWORD *)(v0 + 128), 1, 1, *(_QWORD *)(v0 + 136));
LABEL_11:
    sub_100004048(*(_QWORD *)(v0 + 128), &qword_1010ED860);
LABEL_12:
    v19 += v20;
    if (!--v16)
    {
      swift_bridgeObjectRelease();
      v51 = v60;
      goto LABEL_29;
    }
  }
  v24 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 136);
  v59 = *(_QWORD *)(v17 + 72);
  v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
  v25(v24, v3[7] + v59 * v21, v23);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v24, 0, 1, v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v24, 1, v23) == 1)
    goto LABEL_11;
  v27 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 160);
  v28 = *(_QWORD *)(v0 + 136);
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v17 + 32))(v26, *(_QWORD *)(v0 + 128), v28);
  v58 = v25;
  v25(v27, v26, v28);
  v29 = *(_QWORD *)(v19 + *(int *)(v57 + 24) + 8) >> 60 != 15;
  v30 = v60;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
  v62[0] = v60;
  v33 = sub_100003FB0(v27);
  v34 = v60[2];
  v35 = (v32 & 1) == 0;
  result = (_QWORD *)(v34 + v35);
  if (!__OFADD__(v34, v35))
  {
    v36 = v32;
    if (v60[3] >= (uint64_t)result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100A9A608();
        v30 = (_QWORD *)v62[0];
      }
      v41 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))v58;
      v60 = v30;
      if ((v36 & 1) == 0)
        goto LABEL_20;
    }
    else
    {
      v61 = v29;
      v37 = *(_QWORD *)(v0 + 152);
      sub_100A862AC((uint64_t)result, isUniquelyReferenced_nonNull_native);
      v38 = (_QWORD *)v62[0];
      v39 = sub_100003FB0(v37);
      if ((v36 & 1) != (v40 & 1))
        return (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 136));
      v33 = v39;
      v41 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))v58;
      v30 = v38;
      v29 = v61;
      v60 = v30;
      if ((v36 & 1) == 0)
      {
LABEL_20:
        v42 = *(_QWORD *)(v0 + 152);
        v43 = *(_QWORD *)(v0 + 136);
        v30[(v33 >> 6) + 8] |= 1 << v33;
        result = (_QWORD *)v41(v60[6] + v33 * v59, v42, v43);
        *(_BYTE *)(v60[7] + v33) = v29;
        v44 = v60[2];
        v45 = __OFADD__(v44, 1);
        v46 = v44 + 1;
        if (v45)
          goto LABEL_32;
        v60[2] = v46;
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v30[7] + v33) = v29;
LABEL_26:
    v48 = *(_QWORD *)(v0 + 152);
    v47 = *(_QWORD *)(v0 + 160);
    v49 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease();
    v50 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v50(v48, v49);
    v50(v47, v49);
    v20 = v56;
    goto LABEL_12;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100920A44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;

  v5 = sub_10001A9A8(&qword_1010ED860);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v24 - v9;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v24 - v16;
  sub_10090B600(a2);
  if (v2)
  {
    swift_errorRelease(v2);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    return sub_100004048((uint64_t)v10, &qword_1010ED860);
  }
  v26 = a1;
  v18 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
  v18(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_100004048((uint64_t)v10, &qword_1010ED860);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v25(v15, a2, v11);
  if (qword_1010E9A08 != -1)
    swift_once(&qword_1010E9A08, sub_1001EB1EC);
  v20 = sub_10001A9E8(v11, (uint64_t)qword_1011B6A78);
  v21 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(v20) = dispatch thunk of static Equatable.== infix(_:_:)(v15, v20, v11, v21);
  v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v15, v11);
  if ((v20 & 1) == 0)
  {
    v23 = v25;
    v25(v15, (uint64_t)v17, v11);
    v23(v8, a2, v11);
    v18(v8, 0, 1, v11);
    sub_1000FEB64((uint64_t)v8, (uint64_t)v15);
  }
  return ((uint64_t (*)(char *, uint64_t))v22)(v17, v11);
}

uint64_t sub_100920CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4[27] = a3;
  v4[28] = v3;
  v4[25] = a1;
  v4[26] = a2;
  v5 = type metadata accessor for BookmarkMetaData(0);
  v4[29] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[30] = swift_task_alloc(v6);
  v4[31] = swift_task_alloc(v6);
  v4[32] = swift_task_alloc(v6);
  v7 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v4[33] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[34] = v8;
  v4[35] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F7AE0);
  v4[36] = v9;
  v4[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KeySyncRecord(0);
  v4[38] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[39] = v11;
  v4[40] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v4[41] = v12;
  v4[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SharedBeaconRecord(0);
  v4[43] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[44] = v14;
  v4[45] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v4[46] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[47] = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v4[48] = v17;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[49] = swift_task_alloc(v18);
  v4[50] = swift_task_alloc(v18);
  v4[51] = swift_task_alloc(v18);
  v4[52] = swift_task_alloc(v18);
  v4[53] = swift_task_alloc(v18);
  v4[54] = swift_task_alloc(v18);
  v4[55] = swift_task_alloc(v18);
  return swift_task_switch(sub_100920E8C, v3, 0);
}

uint64_t sub_100920E8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *log;
  uint64_t v30;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = v0[25];
  v3 = v0[54];
  v2 = v0[55];
  v4 = v0[46];
  v5 = v0[47];
  v6 = v0[26];
  v7 = type metadata accessor for Logger(0);
  v0[56] = sub_10001A9E8(v7, (uint64_t)qword_1011B7940);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[57] = v8;
  v8(v2, v6, v4);
  v9 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v3, v1, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v14 = v0[54];
  v13 = v0[55];
  v15 = v0[46];
  if (v12)
  {
    log = v10;
    v26 = v0[47];
    v27 = v0[54];
    v16 = swift_slowAlloc(42, -1);
    v28 = swift_slowAlloc(64, -1);
    v30 = v28;
    *(_DWORD *)v16 = 141558787;
    v0[21] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v0[22] = sub_100016940(v18, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    v20 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v20(v13, v15);
    *(_WORD *)(v16 + 22) = 2160;
    v0[23] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v16 + 24, v16 + 32);
    *(_WORD *)(v16 + 32) = 2081;
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v0[24] = sub_100016940(v21, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v16 + 34, v16 + 42);
    swift_bridgeObjectRelease();
    v20(v27, v15);
    _os_log_impl((void *)&_mh_execute_header, log, v11, "Downloaded key instructions for share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v0[47] + 8);
    v23(v0[55], v0[46]);
    v23(v14, v15);

  }
  v24 = *(_QWORD *)(v0[28] + 120);
  v0[58] = v24;
  return swift_task_switch(sub_100921190, v24, 0);
}

uint64_t sub_100921190()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 472) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_100921208;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_10007C6FC, *(_QWORD *)(v0 + 464), v3);
}

uint64_t sub_100921208()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 464);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));
  swift_release();
  return swift_task_switch(sub_100921264, v1, 0);
}

uint64_t sub_100921264()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[58];
  v0[60] = v0[15];
  return swift_task_switch(sub_100921280, v1, 0);
}

uint64_t sub_100921280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 368);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 456))(v2, *(_QWORD *)(v0 + 200), v5);
  LODWORD(v6) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 672) = v6;
  v6 = v6;
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109E000, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 488) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 496) = v9;
  v9(v8 + v7, v2, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 504) = v11;
  *v11 = v0;
  v11[1] = sub_100921364;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 336), sub_100067DF8, v8, *(_QWORD *)(v0 + 328));
}

uint64_t sub_100921364()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 224);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 504));
  swift_release();
  return swift_task_switch(sub_1009213C8, v1, 0);
}

void sub_1009213C8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  int v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v1 = *(_QWORD *)(v0 + 336);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 352) + 48))(v1, 1, *(_QWORD *)(v0 + 344)) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
    v2 = sub_1000D94EC();
    v36 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v3 = 0;
    swift_willThrow(v36);
    swift_release();
    v4 = *(_QWORD *)(v0 + 432);
    v6 = *(_QWORD *)(v0 + 416);
    v5 = *(_QWORD *)(v0 + 424);
    v8 = *(_QWORD *)(v0 + 400);
    v7 = *(_QWORD *)(v0 + 408);
    v9 = *(_QWORD *)(v0 + 392);
    v10 = *(_QWORD *)(v0 + 360);
    v11 = *(_QWORD *)(v0 + 336);
    v12 = *(_QWORD *)(v0 + 320);
    v31 = *(_QWORD *)(v0 + 296);
    v32 = *(_QWORD *)(v0 + 280);
    v33 = *(_QWORD *)(v0 + 256);
    v34 = *(_QWORD *)(v0 + 248);
    v35 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 440));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v13 = *(_QWORD *)(v0 + 216);
  sub_1000126EC(v1, *(_QWORD *)(v0 + 360), type metadata accessor for SharedBeaconRecord);
  v14 = *(_BYTE *)(v13 + 32);
  *(_BYTE *)(v0 + 684) = v14;
  v15 = 1 << v14;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v13 + 56);
  *(_QWORD *)(v0 + 512) = OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore;
  v18 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain(v13);
  v19 = 0;
  while (1)
  {
    *(_QWORD *)(v0 + 528) = _swiftEmptyDictionarySingleton;
    *(_QWORD *)(v0 + 520) = 0;
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
      v22 = *(_QWORD *)(v0 + 216);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    v22 = *(_QWORD *)(v0 + 216);
    if (v23 >= v18)
      goto LABEL_25;
    v24 = v22 + 56;
    v25 = *(_QWORD *)(v22 + 56 + 8 * v23);
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v18)
        goto LABEL_25;
      v25 = *(_QWORD *)(v24 + 8 * v19);
      if (!v25)
      {
        v19 = v23 + 2;
        if (v23 + 2 >= v18)
          goto LABEL_25;
        v25 = *(_QWORD *)(v24 + 8 * v19);
        if (!v25)
          break;
      }
    }
LABEL_21:
    v17 = (v25 - 1) & v25;
    v21 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    *(_QWORD *)(v0 + 544) = v17;
    *(_QWORD *)(v0 + 536) = v19;
    v27 = *(unsigned __int8 *)(*(_QWORD *)(v22 + 48) + v21);
    *(_BYTE *)(v0 + 685) = v27;
    if ((v27 - 7) >= 7 && ((1 << v27) & 0x1C) == 0)
    {
      *(_BYTE *)(v0 + 686) = ((1 << v27) & 0x21) == 0;
      swift_task_switch(sub_1009217AC, *(_QWORD *)(v0 + 464), 0);
      return;
    }
  }
  v26 = v23 + 3;
  if (v26 >= v18)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
    v37 = _swiftEmptyDictionarySingleton;
    sub_10095C020((uint64_t)_swiftEmptyDictionarySingleton, (uint64_t)sub_10095BFB8, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v37);
    *(_QWORD *)(v0 + 608) = v37;
    swift_bridgeObjectRelease();
    v30 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 616) = v30;
    *v30 = v0;
    v30[1] = sub_100922550;
    sub_10090C6D8(v0 + 16, *(_QWORD *)(v0 + 208));
    return;
  }
  v25 = *(_QWORD *)(v24 + 8 * v26);
  if (v25)
  {
    v19 = v26;
    goto LABEL_21;
  }
  while (1)
  {
    v19 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v19 >= v18)
      goto LABEL_25;
    v25 = *(_QWORD *)(v24 + 8 * v19);
    ++v26;
    if (v25)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1009217AC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  v2 = *(unsigned __int8 *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 384);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 456))(v4, *(_QWORD *)(v0 + 200), v5);
  v9 = swift_allocObject(&unk_10109E028, v7, v8);
  *(_QWORD *)(v0 + 552) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 560) = v11;
  *v11 = v0;
  v11[1] = sub_100921894;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 296), sub_10007CAF0, v9, *(_QWORD *)(v0 + 288));
}

uint64_t sub_100921894()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 224);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 560));
  swift_release();
  return swift_task_switch(sub_1009218F8, v1, 0);
}

uint64_t sub_1009218F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)();
  _QWORD *v20;

  v1 = *(_QWORD *)(v0 + 296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 312) + 48))(v1, 1, *(_QWORD *)(v0 + 304)) == 1)
  {
    result = sub_100004048(v1, &qword_1010F7AE0);
    v3 = *(_QWORD *)(v0 + 528);
    v4 = *(_QWORD *)(v0 + 520);
    v5 = *(_QWORD *)(v0 + 544);
    v6 = *(_QWORD *)(v0 + 536);
    while (1)
    {
      *(_QWORD *)(v0 + 528) = v3;
      *(_QWORD *)(v0 + 520) = v4;
      if (v5)
      {
        v7 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v8 = v7 | (v6 << 6);
        result = *(_QWORD *)(v0 + 216);
      }
      else
      {
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          return result;
        }
        v10 = (unint64_t)((1 << *(_BYTE *)(v0 + 684)) + 63) >> 6;
        result = *(_QWORD *)(v0 + 216);
        if (v9 >= v10)
          goto LABEL_23;
        v11 = result + 56;
        v12 = *(_QWORD *)(result + 56 + 8 * v9);
        ++v6;
        if (!v12)
        {
          v6 = v9 + 1;
          if (v9 + 1 >= v10)
            goto LABEL_23;
          v12 = *(_QWORD *)(v11 + 8 * v6);
          if (!v12)
          {
            v6 = v9 + 2;
            if (v9 + 2 >= v10)
              goto LABEL_23;
            v12 = *(_QWORD *)(v11 + 8 * v6);
            if (!v12)
            {
              v13 = v9 + 3;
              if (v13 >= v10)
              {
LABEL_23:
                swift_release();
                swift_bridgeObjectRetain(v3);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
                v20 = _swiftEmptyDictionarySingleton;
                sub_10095C020(v3, (uint64_t)sub_10095BFB8, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v20);
                if (v4)
                  return swift_bridgeObjectRelease();
                *(_QWORD *)(v0 + 608) = v20;
                swift_bridgeObjectRelease();
                v17 = (_QWORD *)swift_task_alloc(dword_10110D164);
                *(_QWORD *)(v0 + 616) = v17;
                *v17 = v0;
                v17[1] = sub_100922550;
                return sub_10090C6D8(v0 + 16, *(_QWORD *)(v0 + 208));
              }
              v12 = *(_QWORD *)(v11 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v6 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_28;
                  if (v6 >= v10)
                    goto LABEL_23;
                  v12 = *(_QWORD *)(v11 + 8 * v6);
                  ++v13;
                  if (v12)
                    goto LABEL_18;
                }
              }
              v6 = v13;
            }
          }
        }
LABEL_18:
        v5 = (v12 - 1) & v12;
        v8 = __clz(__rbit64(v12)) + (v6 << 6);
      }
      *(_QWORD *)(v0 + 544) = v5;
      *(_QWORD *)(v0 + 536) = v6;
      v14 = *(unsigned __int8 *)(*(_QWORD *)(result + 48) + v8);
      *(_BYTE *)(v0 + 685) = v14;
      if ((v14 - 7) >= 7 && ((1 << v14) & 0x1C) == 0)
      {
        *(_BYTE *)(v0 + 686) = ((1 << v14) & 0x21) == 0;
        v18 = *(_QWORD *)(v0 + 464);
        v19 = sub_1009217AC;
        return swift_task_switch(v19, v18, 0);
      }
    }
  }
  v15 = *(_QWORD *)(v0 + 344);
  sub_1000126EC(v1, *(_QWORD *)(v0 + 320), type metadata accessor for KeySyncRecord);
  *(_DWORD *)(v0 + 676) = *(_DWORD *)(v15 + 20);
  v19 = sub_100921B80;
  v18 = 0;
  return swift_task_switch(v19, v18, 0);
}

uint64_t sub_100921B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uid_t v3;
  _QWORD *v4;

  v1 = *(int *)(v0 + 676);
  v2 = *(_QWORD *)(v0 + 360);
  v3 = getuid();
  sub_100A06500(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FCEA4);
  *(_QWORD *)(v0 + 568) = v4;
  *v4 = v0;
  v4[1] = sub_100921C00;
  return sub_100476038(*(_QWORD *)(v0 + 416), v2 + v1, *(_BYTE *)(v0 + 686));
}

uint64_t sub_100921C00(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 568);
  *(_QWORD *)(v6 + 576) = a1;
  *(_QWORD *)(v6 + 584) = a2;
  *(_QWORD *)(v6 + 592) = v3;
  swift_task_dealloc(v7);
  v8 = *(_QWORD *)(v6 + 416);
  v9 = *(_QWORD *)(v6 + 368);
  v10 = *(_QWORD *)(v6 + 376);
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v11 = sub_1009223C8;
    v12 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v6 + 224);
    *(_BYTE *)(v6 + 687) = a3;
    v14 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    *(_QWORD *)(v6 + 600) = v14;
    v14(v8, v9);
    v11 = sub_100921CA8;
    v12 = v13;
  }
  return swift_task_switch(v11, v12, 0);
}

uint64_t sub_100921CA8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  int v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *log;
  os_log_t loga;
  os_log_type_t type[8];
  uint64_t v62[2];

  if ((*(_BYTE *)(v0 + 687) & 1) != 0)
  {
    result = sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for KeySyncRecord);
    v23 = *(_QWORD *)(v0 + 528);
  }
  else
  {
    v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
    v2 = *(_QWORD *)(v0 + 400);
    v3 = *(_QWORD *)(v0 + 368);
    v4 = *(_QWORD *)(v0 + 200);
    v1(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 208), v3);
    v5 = v1(v2, v4, v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 584);
      log = v6;
      v11 = *(_QWORD *)(v0 + 576);
      v52 = *(_QWORD *)(v0 + 408);
      v54 = *(_QWORD *)(v0 + 400);
      v51 = *(_QWORD *)(v0 + 368);
      v12 = *(_BYTE *)(v0 + 685);
      v13 = swift_slowAlloc(62, -1);
      v57 = swift_slowAlloc(128, -1);
      v62[0] = v57;
      *(_DWORD *)v13 = 136447491;
      v14 = sub_100D79CA8(v12);
      *(_QWORD *)(v0 + 96) = sub_100016940(v14, v15, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2082;
      *(_QWORD *)(v0 + 104) = v11;
      *(_QWORD *)(v0 + 112) = v10;
      *(_QWORD *)(v0 + 80) = 0;
      *(_QWORD *)(v0 + 88) = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)(v0 + 104, v0 + 80, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v16._countAndFlagsBits = 3026478;
      v16._object = (void *)0xE300000000000000;
      String.append(_:)(v16);
      _print_unlocked<A, B>(_:_:)(v0 + 112, v0 + 80, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      *(_QWORD *)(v0 + 128) = sub_100016940(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 22) = 2160;
      *(_QWORD *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 24, v13 + 32);
      *(_WORD *)(v13 + 32) = 2081;
      v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v51, v17);
      *(_QWORD *)(v0 + 144) = sub_100016940(v18, v19, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v13 + 34, v13 + 42);
      swift_bridgeObjectRelease();
      v9(v52, v51);
      *(_WORD *)(v13 + 42) = 2160;
      *(_QWORD *)(v0 + 152) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v13 + 44, v13 + 52);
      *(_WORD *)(v13 + 52) = 2081;
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v51, v17);
      *(_QWORD *)(v0 + 160) = sub_100016940(v20, v21, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v13 + 54, v13 + 62);
      swift_bridgeObjectRelease();
      v9(v54, v51);
      _os_log_impl((void *)&_mh_execute_header, log, v7, "Downloaded keys of type: %{public}s,\nfound %{public}s.\nShare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v13, 0x3Eu);
      swift_arrayDestroy(v57, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {
      v24 = *(_QWORD *)(v0 + 400);
      v25 = *(_QWORD *)(v0 + 368);
      v9(*(_QWORD *)(v0 + 408), v25);
      v9(v24, v25);

    }
    v58 = *(_QWORD *)(v0 + 576);
    loga = *(os_log_t *)(v0 + 584);
    *(_QWORD *)type = *(_QWORD *)(v0 + 528);
    v26 = *(_QWORD *)(v0 + 320);
    v27 = *(_QWORD *)(v0 + 304);
    v28 = *(_QWORD *)(v0 + 280);
    v53 = *(_QWORD *)(v0 + 272);
    v30 = *(_QWORD **)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 264);
    v56 = *(_QWORD *)(v0 + 248);
    v31 = *(_QWORD *)(v0 + 232);
    v32 = v26 + *(int *)(v27 + 28);
    v55 = *(unsigned __int8 *)(v0 + 685);
    v33 = type metadata accessor for Date(0);
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
    v34(v28, v32, v33);
    v35 = *(_QWORD *)(v26 + *(int *)(v27 + 20));
    v34(v28 + *(int *)(v29 + 24), v32, v33);
    *(_QWORD *)(v28 + *(int *)(v29 + 20)) = v35;
    v36 = (uint64_t)v30 + *(int *)(v31 + 20);
    sub_10005972C(v28, v36, type metadata accessor for KeyDropInterface.KeyAlignment);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v36, 0, 1, v29);
    *v30 = v58;
    v30[1] = loga;
    *((_BYTE *)v30 + *(int *)(v31 + 24)) = v55;
    sub_1000126EC((uint64_t)v30, v56, type metadata accessor for BookmarkMetaData);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)type);
    v62[0] = *(_QWORD *)type;
    sub_100109FD4(v56, v55, isUniquelyReferenced_nonNull_native);
    v23 = v62[0];
    swift_bridgeObjectRelease();
    sub_1000126B0(v28, type metadata accessor for KeyDropInterface.KeyAlignment);
    result = sub_1000126B0(v26, type metadata accessor for KeySyncRecord);
  }
  v38 = *(_QWORD *)(v0 + 592);
  v39 = *(_QWORD *)(v0 + 544);
  v40 = *(_QWORD *)(v0 + 536);
  while (1)
  {
    *(_QWORD *)(v0 + 528) = v23;
    *(_QWORD *)(v0 + 520) = v38;
    if (v39)
    {
      v41 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      v42 = v41 | (v40 << 6);
      result = *(_QWORD *)(v0 + 216);
      goto LABEL_24;
    }
    v43 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return result;
    }
    v44 = (unint64_t)((1 << *(_BYTE *)(v0 + 684)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 216);
    if (v43 >= v44)
      goto LABEL_27;
    v45 = result + 56;
    v46 = *(_QWORD *)(result + 56 + 8 * v43);
    ++v40;
    if (!v46)
    {
      v40 = v43 + 1;
      if (v43 + 1 >= v44)
        goto LABEL_27;
      v46 = *(_QWORD *)(v45 + 8 * v40);
      if (!v46)
      {
        v40 = v43 + 2;
        if (v43 + 2 >= v44)
          goto LABEL_27;
        v46 = *(_QWORD *)(v45 + 8 * v40);
        if (!v46)
          break;
      }
    }
LABEL_23:
    v39 = (v46 - 1) & v46;
    v42 = __clz(__rbit64(v46)) + (v40 << 6);
LABEL_24:
    *(_QWORD *)(v0 + 544) = v39;
    *(_QWORD *)(v0 + 536) = v40;
    v48 = *(unsigned __int8 *)(*(_QWORD *)(result + 48) + v42);
    *(_BYTE *)(v0 + 685) = v48;
    if ((v48 - 7) >= 7 && ((1 << v48) & 0x1C) == 0)
    {
      *(_BYTE *)(v0 + 686) = ((1 << v48) & 0x21) == 0;
      return swift_task_switch(sub_1009217AC, *(_QWORD *)(v0 + 464), 0);
    }
  }
  v47 = v43 + 3;
  if (v47 < v44)
  {
    v46 = *(_QWORD *)(v45 + 8 * v47);
    if (!v46)
    {
      while (1)
      {
        v40 = v47 + 1;
        if (__OFADD__(v47, 1))
          goto LABEL_31;
        if (v40 >= v44)
          goto LABEL_27;
        v46 = *(_QWORD *)(v45 + 8 * v40);
        ++v47;
        if (v46)
          goto LABEL_23;
      }
    }
    v40 = v47;
    goto LABEL_23;
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRetain(v23);
  v49 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v62[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  sub_10095C020(v23, (uint64_t)sub_10095BFB8, 0, v49, v62);
  if (v38)
    return swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 608) = v62[0];
  swift_bridgeObjectRelease();
  v50 = (_QWORD *)swift_task_alloc(dword_10110D164);
  *(_QWORD *)(v0 + 616) = v50;
  *v50 = v0;
  v50[1] = sub_100922550;
  return sub_10090C6D8(v0 + 16, *(_QWORD *)(v0 + 208));
}

uint64_t sub_1009223C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100922414, v1, 0);
}

uint64_t sub_100922414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 320);
  swift_release();
  sub_1000126B0(v2, type metadata accessor for KeySyncRecord);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
  v3 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 392);
  v9 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100922550()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 616);
  *(_QWORD *)(*v1 + 624) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 224);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_100922D1C;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 224);
    v5 = sub_1009225D0;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_1009225D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v5 = sub_10095CBC4(_swiftEmptyDictionarySingleton, v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  v25 = v2;
  sub_10095C020(v5, (uint64_t)sub_10095BFB8, 0, isUniquelyReferenced_nonNull_native, &v25);
  if (v1)
    return swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v0 + 216);
  v9 = v25;
  *(_QWORD *)(v0 + 632) = v25;
  swift_bridgeObjectRelease();
  if ((sub_100A070EC(9u, v8) & 1) != 0)
  {
    *(_DWORD *)(v0 + 680) = *(_DWORD *)(*(_QWORD *)(v0 + 344) + 20);
    return swift_task_switch(sub_1009227FC, 0, 0);
  }
  else
  {
    swift_release();
    sub_1000D9530((uint64_t *)(v0 + 16));
    v11 = *(_QWORD *)(v0 + 432);
    v10 = *(_QWORD *)(v0 + 440);
    v13 = *(_QWORD *)(v0 + 416);
    v12 = *(_QWORD *)(v0 + 424);
    v15 = *(_QWORD *)(v0 + 400);
    v14 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 392);
    v17 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD *)(v0 + 336);
    v19 = *(_QWORD *)(v0 + 320);
    v20 = *(_QWORD *)(v0 + 296);
    v21 = *(_QWORD *)(v0 + 280);
    v22 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 248);
    v24 = *(_QWORD *)(v0 + 240);
    swift_bridgeObjectRelease();
    sub_1000126B0(v17, type metadata accessor for SharedBeaconRecord);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
  }
}

uint64_t sub_1009227FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uid_t v3;
  _QWORD *v4;

  v1 = *(int *)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 360);
  v3 = getuid();
  sub_100A06500(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FCED4);
  *(_QWORD *)(v0 + 640) = v4;
  *v4 = v0;
  v4[1] = sub_100922878;
  return sub_100478384(*(_QWORD *)(v0 + 392), v2 + v1);
}

uint64_t sub_100922878(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 640);
  *(_QWORD *)(v6 + 648) = a1;
  *(_QWORD *)(v6 + 656) = a2;
  *(_QWORD *)(v6 + 664) = v3;
  swift_task_dealloc(v7);
  v8 = *(_QWORD *)(v6 + 392);
  v9 = *(_QWORD *)(v6 + 368);
  v10 = *(_QWORD *)(v6 + 376);
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v11 = sub_100922BA8;
    v12 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v6 + 224);
    *(_BYTE *)(v6 + 688) = a3;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v11 = sub_10092291C;
    v12 = v13;
  }
  return swift_task_switch(v11, v12, 0);
}

uint64_t sub_10092291C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if ((*(_BYTE *)(v0 + 688) & 1) != 0)
  {
    swift_release();
    sub_1000D9530((uint64_t *)(v0 + 16));
    v34 = *(_QWORD *)(v0 + 632);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 664);
    v2 = *(_QWORD *)(v0 + 656);
    v3 = *(_QWORD *)(v0 + 648);
    v4 = *(_QWORD *)(v0 + 632);
    v6 = *(_QWORD *)(v0 + 232);
    v5 = *(char **)(v0 + 240);
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 272) + 56))(&v5[*(int *)(v6 + 20)], 1, 1, *(_QWORD *)(v0 + 264));
    *(_QWORD *)v5 = v3;
    *((_QWORD *)v5 + 1) = v2;
    v5[*(int *)(v6 + 24)] = 9;
    v7 = sub_10001A9A8(&qword_10110D4F8);
    v8 = sub_10001A9A8(&qword_101104210);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(_QWORD *)(v9 + 72);
    v11 = *(unsigned __int8 *)(v9 + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = swift_allocObject(v7, v12 + v10, v11 | 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    v14 = v13 + v12 + *(int *)(v8 + 48);
    *(_BYTE *)(v13 + v12) = 9;
    sub_10005972C((uint64_t)v5, v14, type metadata accessor for BookmarkMetaData);
    v15 = sub_1006B8EE4(v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    v35 = v4;
    sub_10095C020(v15, (uint64_t)sub_10095BFB8, 0, isUniquelyReferenced_nonNull_native, &v35);
    if (v1)
      return swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v0 + 240);
    v34 = v35;
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000D9530((uint64_t *)(v0 + 16));
    sub_1000126B0(v18, type metadata accessor for BookmarkMetaData);
  }
  v20 = *(_QWORD *)(v0 + 432);
  v19 = *(_QWORD *)(v0 + 440);
  v22 = *(_QWORD *)(v0 + 416);
  v21 = *(_QWORD *)(v0 + 424);
  v24 = *(_QWORD *)(v0 + 400);
  v23 = *(_QWORD *)(v0 + 408);
  v25 = *(_QWORD *)(v0 + 392);
  v26 = *(_QWORD *)(v0 + 360);
  v27 = *(_QWORD *)(v0 + 336);
  v28 = *(_QWORD *)(v0 + 320);
  v29 = *(_QWORD *)(v0 + 296);
  v30 = *(_QWORD *)(v0 + 280);
  v31 = *(_QWORD *)(v0 + 256);
  v32 = *(_QWORD *)(v0 + 248);
  v33 = *(_QWORD *)(v0 + 240);
  swift_bridgeObjectRelease();
  sub_1000126B0(v26, type metadata accessor for SharedBeaconRecord);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v34);
}

uint64_t sub_100922BA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100922BF4, v1, 0);
}

uint64_t sub_100922BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 360);
  swift_release();
  sub_1000D9530((uint64_t *)(v0 + 16));
  sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
  v2 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 408);
  v7 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100922D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 360);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
  v2 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 408);
  v7 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100922E38(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 80) = v3;
  *(_BYTE *)(v4 + 148) = a3;
  *(_QWORD *)(v4 + 64) = a1;
  v6 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v4 + 88) = v6;
  *(_QWORD *)(v4 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(v6 + 24);
  *(_DWORD *)(v4 + 144) = v7;
  v8 = a2 + v7;
  v9 = (_QWORD *)swift_task_alloc(dword_10110D1C4);
  *(_QWORD *)(v4 + 104) = v9;
  *v9 = v4;
  v9[1] = sub_100922ECC;
  return sub_100923680(v8);
}

uint64_t sub_100922ECC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  *(_QWORD *)(v3 + 32) = v1;
  *(_BYTE *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(v3 + 104));
  if (!v1)
    return swift_task_switch(sub_100922F48, *(_QWORD *)(v3 + 80), 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 96));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100922F48()
{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;

  v1 = *(unsigned __int8 *)(v0 + 148);
  v2 = sub_1003B98CC((uint64_t)&off_1010483D8);
  *(_QWORD *)(v0 + 112) = v2;
  if (v1 == 1)
  {
    v3 = (uint64_t)v2;
    v4 = *(int *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = v5 + *(int *)(*(_QWORD *)(v0 + 88) + 28);
    v7 = (_QWORD *)swift_task_alloc(dword_10110D1B4);
    *(_QWORD *)(v0 + 120) = v7;
    *v7 = v0;
    v7[1] = sub_100923104;
    return sub_100920CD0(v5 + v4, v6, v3);
  }
  else
  {
    v9 = sub_1006B8EE4((uint64_t)_swiftEmptyArrayStorage);
    v20 = *(_QWORD *)(v0 + 112);
    v21 = *(_BYTE *)(v0 + 24);
    v10 = *(_QWORD *)(v0 + 88);
    v22 = v9;
    v23 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    v13 = v11 + *(int *)(v0 + 144);
    v14 = v11 + *(int *)(v10 + 28);
    v15 = (int *)type metadata accessor for SharingCircleKeyManager.Instruction(0);
    v16 = v12 + v15[5];
    v17 = type metadata accessor for UUID(0);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v16, v14, v17);
    v18(v12 + v15[6], v13, v17);
    v19 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v12 + v15[7], v11 + *(int *)(v10 + 32), v17);
    UUID.init()(v19);
    *(_QWORD *)(v12 + v15[8]) = v20;
    *(_BYTE *)(v12 + v15[9]) = v21;
    *(_BYTE *)(v12 + v15[10]) = 1;
    *(_QWORD *)(v12 + v15[11]) = v22;
    static Date.trustedNow.getter(v12 + v15[12]);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100923104(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 80);
  if (v1)
  {
    v7 = sub_1009232A4;
  }
  else
  {
    *(_QWORD *)(v4 + 136) = a1;
    v7 = sub_100923178;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100923178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v12 = *(_QWORD *)(v0 + 112);
  v13 = *(_BYTE *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = v3 + *(int *)(v0 + 144);
  v5 = v3 + *(int *)(v1 + 28);
  v6 = (int *)type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v7 = v2 + v6[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v9(v7, v5, v8);
  v9(v2 + v6[6], v4, v8);
  v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v2 + v6[7], v3 + *(int *)(v1 + 32), v8);
  UUID.init()(v10);
  *(_QWORD *)(v2 + v6[8]) = v12;
  *(_BYTE *)(v2 + v6[9]) = v13;
  *(_BYTE *)(v2 + v6[10]) = 1;
  *(_QWORD *)(v2 + v6[11]) = v14;
  static Date.trustedNow.getter(v2 + v6[12]);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009232A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7940);
  sub_10005972C(v3, v2, type metadata accessor for MemberSharingCircle);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 96);
  if (v8)
  {
    v11 = swift_slowAlloc(32, -1);
    v32 = (uint64_t *)swift_slowAlloc(8, -1);
    v34 = swift_slowAlloc(32, -1);
    v36 = v34;
    *(_DWORD *)v11 = 141558531;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    v12 = type metadata accessor for UUID(0);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
    *(_QWORD *)(v0 + 48) = sub_100016940(v14, v15, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v11 + 22) = 2112;
    swift_errorRetain(v9);
    v16 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 56) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v11 + 24, v11 + 32);
    *v32 = v16;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to retrieve existing keys for circle %{private,mask.hash}s, error: %@.", (uint8_t *)v11, 0x20u);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v32, 1, v17);
    swift_slowDealloc(v32, -1, -1);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 96), type metadata accessor for MemberSharingCircle);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }

  v18 = *(_QWORD *)(v0 + 128);
  v35 = sub_1006B8EE4((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v18);
  v30 = *(_QWORD *)(v0 + 112);
  v31 = *(_BYTE *)(v0 + 24);
  v19 = *(_QWORD *)(v0 + 88);
  v33 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 64);
  v20 = *(_QWORD *)(v0 + 72);
  v22 = v20 + *(int *)(v0 + 144);
  v23 = v20 + *(int *)(v19 + 28);
  v24 = (int *)type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v25 = v21 + v24[5];
  v26 = type metadata accessor for UUID(0);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
  v27(v25, v23, v26);
  v27(v21 + v24[6], v22, v26);
  v28 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v27)(v21 + v24[7], v20 + *(int *)(v19 + 32), v26);
  UUID.init()(v28);
  *(_QWORD *)(v21 + v24[8]) = v30;
  *(_BYTE *)(v21 + v24[9]) = v31;
  *(_BYTE *)(v21 + v24[10]) = 1;
  *(_QWORD *)(v21 + v24[11]) = v35;
  static Date.trustedNow.getter(v21 + v24[12]);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100923680(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for SharedBeaconRecord(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[9] = v7;
  v2[10] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[11] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v9);
  v2[13] = swift_task_alloc(v9);
  v2[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_100923750, v1, 0);
}

uint64_t sub_100923750()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 120);
  *(_QWORD *)(v0 + 120) = v1;
  return swift_task_switch(sub_10092376C, v1, 0);
}

uint64_t sub_10092376C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[15];
  v3 = v0[9];
  v2 = v0[10];
  v4 = v0[7];
  v5 = v0[8];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[2], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109DFD8, v7 + v3, v6 | 7);
  v0[16] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[17] = v10;
  *v10 = v0;
  v10[1] = sub_100923848;
  return unsafeBlocking<A>(_:)(v0[14], sub_100067DF8, v8, v0[11]);
}

uint64_t sub_100923848()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release();
  return swift_task_switch(sub_1009238A8, v1, 0);
}

uint64_t sub_1009238A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  sub_10000F9B8(*(_QWORD *)(v0 + 112), v1, (uint64_t *)&unk_1010EE180);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 104);
  if (v4 != 1)
  {
    v15 = *(unsigned __int8 *)(v5 + *(int *)(*(_QWORD *)(v0 + 32) + 64));
    sub_1000126B0(v5, type metadata accessor for SharedBeaconRecord);
    __asm { BR              X9 }
  }
  sub_100004048(v5, (uint64_t *)&unk_1010EE180);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = sub_1000D94EC();
  v12 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v11, 0, 0);
  *v13 = 17;
  swift_willThrow(v12);
  sub_100004048(v7, (uint64_t *)&unk_1010EE180);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009239DC()
{
  unsigned int (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_QWORD *)(v1 + 32);
  sub_10000F9B8(*(_QWORD *)(v1 + 112), v2, (uint64_t *)&unk_1010EE180);
  if (v0(v2, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v1 + 96);
    sub_100004048(*(_QWORD *)(v1 + 112), (uint64_t *)&unk_1010EE180);
    sub_100004048(v4, (uint64_t *)&unk_1010EE180);
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 96);
    v6 = *(_QWORD *)(v5 + *(int *)(*(_QWORD *)(v1 + 32) + 44));
    sub_10005972C(v5, *(_QWORD *)(v1 + 48), type metadata accessor for SharedBeaconRecord);
    v7 = *(_QWORD *)(v1 + 112);
    v8 = *(_QWORD *)(v1 + 96);
    v9 = *(_QWORD *)(v1 + 48);
    if (v6 == -1)
    {
      v10 = *(_QWORD *)(v9 + *(int *)(*(_QWORD *)(v1 + 32) + 48));
      sub_1000126B0(v9, type metadata accessor for SharedBeaconRecord);
      sub_100004048(v7, (uint64_t *)&unk_1010EE180);
      sub_1000126B0(v8, type metadata accessor for SharedBeaconRecord);
      if (v10 == -1)
      {
        v11 = 2;
        goto LABEL_7;
      }
    }
    else
    {
      sub_1000126B0(v9, type metadata accessor for SharedBeaconRecord);
      sub_100004048(v7, (uint64_t *)&unk_1010EE180);
      sub_1000126B0(v8, type metadata accessor for SharedBeaconRecord);
    }
  }
  v11 = 1;
LABEL_7:
  v12 = *(_QWORD *)(v1 + 104);
  v13 = *(_QWORD *)(v1 + 96);
  v14 = *(_QWORD *)(v1 + 80);
  v15 = *(_QWORD *)(v1 + 48);
  swift_task_dealloc(*(_QWORD *)(v1 + 112));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v11);
}

uint64_t sub_100923B74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[7] = a1;
  v2[8] = v1;
  v3 = type metadata accessor for MemberSharingCircle(0);
  v2[9] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v4);
  v2[11] = swift_task_alloc(v4);
  v2[12] = swift_task_alloc(v4);
  v2[13] = swift_task_alloc(v4);
  v2[14] = swift_task_alloc(v4);
  v5 = type metadata accessor for UUID(0);
  v2[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[16] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[17] = v7;
  v2[18] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[19] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v9);
  v2[21] = swift_task_alloc(v9);
  v2[22] = swift_task_alloc(v9);
  return swift_task_switch(sub_100923C74, v1, 0);
}

uint64_t sub_100923C74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 120);
  *(_QWORD *)(v0 + 184) = v2;
  *(_DWORD *)(v0 + 208) = *(_DWORD *)(v1 + 24);
  return swift_task_switch(sub_100923C98, v2, 0);
}

uint64_t sub_100923C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 56) + *(int *)(v0 + 208), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10109DFB0, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 192) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 200) = v10;
  *v10 = v0;
  v10[1] = sub_100923D7C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 176), sub_100067DF8, v8, *(_QWORD *)(v0 + 152));
}

uint64_t sub_100923D7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_100923DDC, v1, 0);
}

uint64_t sub_100923DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = sub_1001C0B1C(*(unsigned __int8 *)(v1 + *(int *)(v5 + 40)), (uint64_t)&off_1010483B0);
  sub_10000F9B8(v2, v3, (uint64_t *)&unk_1010EE180);
  sub_10005972C(v1, v4, type metadata accessor for MemberSharingCircle);
  v7 = *(_QWORD *)(v0 + 168);
  if (v6)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
    sub_100004048(v7, (uint64_t *)&unk_1010EE180);
LABEL_3:
    sub_100004048(*(_QWORD *)(v0 + 176), (uint64_t *)&unk_1010EE180);
    v8 = 1;
    goto LABEL_15;
  }
  v9 = *(_QWORD *)(v0 + 160);
  sub_10000F9B8(*(_QWORD *)(v0 + 168), v9, (uint64_t *)&unk_1010EE180);
  v10 = type metadata accessor for SharedBeaconRecord(0);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  v12 = *(_QWORD *)(v0 + 160);
  v14 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 112);
  if (v11 == 1)
  {
    sub_100004048(v12, (uint64_t *)&unk_1010EE180);
    sub_10005972C(v13, v14, type metadata accessor for MemberSharingCircle);
LABEL_9:
    v20 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 112);
    sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v21, type metadata accessor for MemberSharingCircle);
    sub_100004048(v20, (uint64_t *)&unk_1010EE180);
    goto LABEL_10;
  }
  v15 = *(unsigned __int8 *)(v12 + *(int *)(v10 + 64));
  sub_1000126B0(v12, type metadata accessor for SharedBeaconRecord);
  sub_10005972C(v13, v14, type metadata accessor for MemberSharingCircle);
  if (v15 != 4)
    goto LABEL_9;
  v16 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 112);
  v19 = *(unsigned __int8 *)(v17 + *(int *)(v5 + 40));
  sub_1000126B0(v17, type metadata accessor for MemberSharingCircle);
  sub_1000126B0(v18, type metadata accessor for MemberSharingCircle);
  sub_100004048(v16, (uint64_t *)&unk_1010EE180);
  if (v19 == 4)
    goto LABEL_3;
LABEL_10:
  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v23 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 56);
  v26 = type metadata accessor for Logger(0);
  sub_10001A9E8(v26, (uint64_t)qword_1011B7940);
  sub_10005972C(v25, v22, type metadata accessor for MemberSharingCircle);
  sub_10005972C(v25, v23, type metadata accessor for MemberSharingCircle);
  v27 = sub_10005972C(v25, v24, type metadata accessor for MemberSharingCircle);
  v28 = Logger.logObject.getter(v27);
  LOBYTE(v22) = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, (os_log_type_t)v22))
  {
    v29 = *(_QWORD *)(v0 + 120);
    v30 = *(_QWORD *)(v0 + 96);
    v47 = *(_QWORD *)(v0 + 88);
    v31 = swift_slowAlloc(52, -1);
    v49 = swift_slowAlloc(96, -1);
    *(_DWORD *)v31 = 141559043;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    v48 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v29, v48);
    *(_QWORD *)(v0 + 24) = sub_100016940(v32, v33, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v30, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v31 + 22) = 2082;
    __asm { BR              X10 }
  }
  v34 = *(_QWORD *)(v0 + 176);
  v36 = *(_QWORD *)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 96);
  v37 = *(_QWORD *)(v0 + 80);

  sub_1000126B0(v37, type metadata accessor for MemberSharingCircle);
  sub_1000126B0(v36, type metadata accessor for MemberSharingCircle);
  sub_1000126B0(v35, type metadata accessor for MemberSharingCircle);
  sub_100004048(v34, (uint64_t *)&unk_1010EE180);
  v8 = 0;
LABEL_15:
  v38 = *(_QWORD *)(v0 + 168);
  v39 = *(_QWORD *)(v0 + 160);
  v40 = *(_QWORD *)(v0 + 144);
  v42 = *(_QWORD *)(v0 + 104);
  v41 = *(_QWORD *)(v0 + 112);
  v44 = *(_QWORD *)(v0 + 88);
  v43 = *(_QWORD *)(v0 + 96);
  v45 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_100924450(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v2[133] = v1;
  v2[132] = a1;
  v3 = sub_10001A9A8(&qword_10110D4B0);
  v2[134] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for KeyDropBeaconGroupAttributes(0);
  v2[135] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[136] = v5;
  v2[137] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[138] = swift_task_alloc(v6);
  v2[139] = swift_task_alloc(v6);
  v7 = sub_10001A9A8(&qword_10110D4B8);
  v2[140] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_10110D4C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[141] = swift_task_alloc(v8);
  v2[142] = swift_task_alloc(v8);
  v2[143] = swift_task_alloc(v8);
  v2[144] = swift_task_alloc(v8);
  v9 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v2[145] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[146] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v2[147] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[148] = swift_task_alloc(v12);
  v2[149] = swift_task_alloc(v12);
  v2[150] = swift_task_alloc(v12);
  v2[151] = swift_task_alloc(v12);
  v2[152] = swift_task_alloc(v12);
  v2[153] = swift_task_alloc(v12);
  v2[154] = swift_task_alloc(v12);
  v2[155] = swift_task_alloc(v12);
  v2[156] = swift_task_alloc(v12);
  v13 = sub_10001A9A8(&qword_10110D468);
  v2[157] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F7AE0);
  v2[158] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for KeySyncRecord(0);
  v2[159] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[160] = v16;
  v2[161] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  v2[162] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FD398) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[163] = swift_task_alloc(v18);
  v2[164] = swift_task_alloc(v18);
  v2[165] = swift_task_alloc(v18);
  v19 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1011063B8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[166] = swift_task_alloc(v19);
  v2[167] = swift_task_alloc(v19);
  v2[168] = swift_task_alloc(v19);
  v2[169] = swift_task_alloc(v19);
  v2[170] = swift_task_alloc(v19);
  v2[171] = swift_task_alloc(v19);
  v2[172] = swift_task_alloc(v19);
  v2[173] = swift_task_alloc(v19);
  v2[174] = swift_task_alloc(v19);
  v20 = type metadata accessor for Date(0);
  v2[175] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v2[176] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[177] = swift_task_alloc(v22);
  v2[178] = swift_task_alloc(v22);
  v2[179] = swift_task_alloc(v22);
  v2[180] = swift_task_alloc(v22);
  v2[181] = swift_task_alloc(v22);
  v23 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v2[182] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v2[183] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[184] = swift_task_alloc(v25);
  v2[185] = swift_task_alloc(v25);
  v2[186] = swift_task_alloc(v25);
  v2[187] = swift_task_alloc(v25);
  v2[188] = swift_task_alloc(v25);
  v2[189] = swift_task_alloc(v25);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v2[190] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for OwnedBeaconRecord(0);
  v2[191] = v27;
  v28 = *(_QWORD *)(v27 - 8);
  v2[192] = v28;
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[193] = swift_task_alloc(v29);
  v2[194] = swift_task_alloc(v29);
  v30 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2[195] = v30;
  v31 = *(_QWORD *)(v30 - 8);
  v2[196] = v31;
  v32 = *(_QWORD *)(v31 + 64);
  v2[197] = v32;
  v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[198] = swift_task_alloc(v33);
  v2[199] = swift_task_alloc(v33);
  v34 = type metadata accessor for Logger(0);
  v2[200] = v34;
  v35 = *(_QWORD *)(v34 - 8);
  v2[201] = v35;
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[202] = swift_task_alloc(v36);
  v2[203] = swift_task_alloc(v36);
  v2[204] = swift_task_alloc(v36);
  v2[205] = swift_task_alloc(v36);
  v2[206] = swift_task_alloc(v36);
  v2[207] = swift_task_alloc(v36);
  v2[208] = swift_task_alloc(v36);
  v2[209] = swift_task_alloc(v36);
  v2[210] = swift_task_alloc(v36);
  v2[211] = swift_task_alloc(v36);
  v2[212] = swift_task_alloc(v36);
  v2[213] = swift_task_alloc(v36);
  return swift_task_switch(sub_100924974, v1, 0);
}

uint64_t sub_100924974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint8_t *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *oslog;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _WORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)();
  uint64_t v70;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = *(_QWORD *)(v0 + 1704);
  v2 = *(_QWORD *)(v0 + 1608);
  v3 = *(_QWORD *)(v0 + 1600);
  v4 = *(_QWORD *)(v0 + 1592);
  v5 = *(_QWORD *)(v0 + 1576);
  v6 = *(_QWORD *)(v0 + 1568);
  v7 = *(_QWORD *)(v0 + 1056);
  v8 = sub_10001A9E8(v3, (uint64_t)qword_1011B7940);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v0 + 1712) = v9;
  v9(v1, v8, v3);
  sub_10005972C(v7, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
  LODWORD(v10) = *(_DWORD *)(v6 + 80);
  *(_DWORD *)(v0 + 2024) = v10;
  v10 = v10;
  v11 = (v10 + 16) & ~v10;
  v12 = v11 + v5;
  v64 = v0;
  v13 = v10 | 7;
  v14 = swift_allocObject(&unk_10109BFA8, v11 + v5, v13);
  sub_1000126EC(v4, v14 + v11, type metadata accessor for SharingCircleKeyManager.Instruction);
  v15 = swift_allocObject(&unk_10109BFD0, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100960968;
  *(_QWORD *)(v15 + 24) = v14;
  sub_10005972C(v7, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
  v16 = swift_allocObject(&unk_10109BFF8, v12, v13);
  sub_1000126EC(v4, v16 + v11, type metadata accessor for SharingCircleKeyManager.Instruction);
  v17 = swift_allocObject(&unk_10109C020, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_100960A74;
  *(_QWORD *)(v17 + 24) = v16;
  sub_10005972C(v7, v4, type metadata accessor for SharingCircleKeyManager.Instruction);
  v18 = swift_allocObject(&unk_10109C048, v12, v13);
  sub_1000126EC(v4, v18 + v11, type metadata accessor for SharingCircleKeyManager.Instruction);
  v19 = swift_allocObject(&unk_10109C070, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_100960A7C;
  *(_QWORD *)(v19 + 24) = v18;
  oslog = Logger.logObject.getter(v19);
  v53 = static os_log_type_t.default.getter(oslog);
  v63 = swift_allocObject(&unk_10109C098, 17, 7);
  *(_BYTE *)(v63 + 16) = 34;
  v60 = swift_allocObject(&unk_10109C0C0, 17, 7);
  *(_BYTE *)(v60 + 16) = 8;
  v20 = swift_allocObject(&unk_10109C0E8, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100960974;
  *(_QWORD *)(v20 + 24) = v15;
  v21 = swift_allocObject(&unk_10109C110, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10001D850;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = v21;
  v23 = swift_allocObject(&unk_10109C138, 17, 7);
  *(_BYTE *)(v23 + 16) = 112;
  v24 = v23;
  v59 = swift_allocObject(&unk_10109C160, 17, 7);
  *(_BYTE *)(v59 + 16) = 8;
  v25 = swift_allocObject(&unk_10109C188, 24, 7);
  *(_QWORD *)(v25 + 16) = 1752392040;
  v56 = swift_allocObject(&unk_10109C1B0, 32, 7);
  *(_QWORD *)(v56 + 16) = sub_1000588B4;
  *(_QWORD *)(v56 + 24) = v25;
  v58 = swift_allocObject(&unk_10109C1D8, 17, 7);
  *(_BYTE *)(v58 + 16) = 33;
  v65 = swift_allocObject(&unk_10109C200, 17, 7);
  *(_BYTE *)(v65 + 16) = 8;
  v26 = swift_allocObject(&unk_10109C228, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_10005885C;
  *(_QWORD *)(v26 + 24) = v17;
  v27 = swift_allocObject(&unk_10109C250, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_10005CBA4;
  *(_QWORD *)(v27 + 24) = v26;
  v61 = swift_allocObject(&unk_10109C278, 17, 7);
  *(_BYTE *)(v61 + 16) = 112;
  v62 = swift_allocObject(&unk_10109C2A0, 17, 7);
  *(_BYTE *)(v62 + 16) = 8;
  v28 = swift_allocObject(&unk_10109C2C8, 24, 7);
  *(_QWORD *)(v28 + 16) = 1752392040;
  v29 = swift_allocObject(&unk_10109C2F0, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_10005CBC0;
  *(_QWORD *)(v29 + 24) = v28;
  v30 = v29;
  v51 = swift_allocObject(&unk_10109C318, 17, 7);
  *(_BYTE *)(v51 + 16) = 33;
  v55 = swift_allocObject(&unk_10109C340, 17, 7);
  *(_BYTE *)(v55 + 16) = 8;
  v31 = swift_allocObject(&unk_10109C368, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_10005CBAC;
  *(_QWORD *)(v31 + 24) = v19;
  v32 = swift_allocObject(&unk_10109C390, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_10005CBA4;
  *(_QWORD *)(v32 + 24) = v31;
  v33 = sub_10001A9A8(&qword_1010EC538);
  *(_QWORD *)(v64 + 1720) = v33;
  v34 = swift_allocObject(v33, 272, 7);
  sub_100882D28(v34, 15);
  *v35 = sub_100057E50;
  v35[1] = v63;
  v35[2] = sub_10005CBC4;
  v35[3] = v60;
  v35[4] = sub_100057E68;
  v35[5] = v22;
  v35[6] = sub_10005CBC4;
  v35[7] = v24;
  v35[8] = sub_10005CBC4;
  v35[9] = v59;
  v35[10] = sub_1000584E4;
  v35[11] = v56;
  v35[12] = sub_10005CBC4;
  v35[13] = v58;
  v35[14] = sub_10005CBC4;
  v35[15] = v65;
  v35[16] = sub_10005CBB4;
  v35[17] = v27;
  v35[18] = sub_10005CBC4;
  v35[19] = v61;
  v35[20] = sub_10005CBC4;
  v35[21] = v62;
  v35[22] = sub_10005CBB8;
  v35[23] = v30;
  v36 = v30;
  v35[24] = sub_10005CBC4;
  v35[25] = v51;
  v35[26] = sub_10005CBC4;
  v35[27] = v55;
  v35[28] = sub_10005CBB4;
  v35[29] = v32;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v53))
  {
    v37 = (uint8_t *)swift_slowAlloc(52, -1);
    v67 = 0;
    v68 = swift_slowAlloc(96, -1);
    v50 = v68;
    v38 = v37;
    *(_WORD *)v37 = 1283;
    v66 = v37 + 2;
    v69 = (uint64_t (*)())sub_100057E50;
    v70 = v63;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBC4;
    v70 = v60;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = (uint64_t (*)())sub_100057E68;
    v70 = v22;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBC4;
    v70 = v24;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBC4;
    v70 = v59;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = (uint64_t (*)())sub_1000584E4;
    v70 = v56;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBC4;
    v70 = v58;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBC4;
    v70 = v65;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBB4;
    v70 = v27;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBC4;
    v70 = v61;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBC4;
    v70 = v62;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = (uint64_t (*)())sub_10005CBB8;
    v70 = v36;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBC4;
    v70 = v51;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBC4;
    v70 = v55;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    swift_release();
    v69 = sub_10005CBB4;
    v70 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    v46 = *(_QWORD *)(v64 + 1704);
    v47 = *(_QWORD *)(v64 + 1608);
    v48 = *(_QWORD *)(v64 + 1600);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v53, "Keys to upload: %{public}s,\nshare-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s.", v38, 0x34u);
    swift_arrayDestroy(v50, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    sub_100694894((uint64_t)v38);

    v49 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v49(v46, v48);
  }
  else
  {
    v39 = *(_QWORD *)(v64 + 1608);
    v52 = *(_QWORD *)(v64 + 1600);
    v54 = *(_QWORD *)(v64 + 1704);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v49 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v49(v54, v52);
  }
  *(_QWORD *)(v64 + 1728) = v49;
  v40 = *(_QWORD *)(v64 + 1560);
  v41 = *(_QWORD *)(v64 + 1056);
  *(_QWORD *)(v64 + 1736) = *(_QWORD *)(*(_QWORD *)(v64 + 1064) + 120);
  v42 = *(int *)(v40 + 24);
  *(_DWORD *)(v64 + 2028) = v42;
  v43 = v41 + v42;
  v44 = (_QWORD *)swift_task_alloc(dword_1011110FC);
  *(_QWORD *)(v64 + 1744) = v44;
  *v44 = v64;
  v44[1] = sub_10092545C;
  return sub_100A82784(*(_QWORD *)(v64 + 1520), v43);
}

uint64_t sub_10092545C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1744));
  return swift_task_switch(sub_1009254B4, v1, 0);
}

uint64_t sub_1009254B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = *(_QWORD *)(v0 + 1520);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1536) + 48))(v1, 1, *(_QWORD *)(v0 + 1528)) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010F47C0);
    v2 = sub_1000D94EC();
    v70 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v3 = 1;
    swift_willThrow(v70);
    v4 = *(_QWORD *)(v0 + 1696);
    v5 = *(_QWORD *)(v0 + 1688);
    v6 = *(_QWORD *)(v0 + 1680);
    v7 = *(_QWORD *)(v0 + 1672);
    v8 = *(_QWORD *)(v0 + 1664);
    v9 = *(_QWORD *)(v0 + 1656);
    v10 = *(_QWORD *)(v0 + 1648);
    v11 = *(_QWORD *)(v0 + 1640);
    v12 = *(_QWORD *)(v0 + 1632);
    v18 = *(_QWORD *)(v0 + 1624);
    v19 = *(_QWORD *)(v0 + 1616);
    v20 = *(_QWORD *)(v0 + 1592);
    v21 = *(_QWORD *)(v0 + 1584);
    v22 = *(_QWORD *)(v0 + 1552);
    v23 = *(_QWORD *)(v0 + 1544);
    v24 = *(_QWORD *)(v0 + 1520);
    v25 = *(_QWORD *)(v0 + 1512);
    v26 = *(_QWORD *)(v0 + 1504);
    v27 = *(_QWORD *)(v0 + 1496);
    v28 = *(_QWORD *)(v0 + 1488);
    v29 = *(_QWORD *)(v0 + 1480);
    v30 = *(_QWORD *)(v0 + 1472);
    v31 = *(_QWORD *)(v0 + 1448);
    v32 = *(_QWORD *)(v0 + 1440);
    v33 = *(_QWORD *)(v0 + 1432);
    v34 = *(_QWORD *)(v0 + 1424);
    v35 = *(_QWORD *)(v0 + 1416);
    v36 = *(_QWORD *)(v0 + 1392);
    v37 = *(_QWORD *)(v0 + 1384);
    v38 = *(_QWORD *)(v0 + 1376);
    v39 = *(_QWORD *)(v0 + 1368);
    v40 = *(_QWORD *)(v0 + 1360);
    v41 = *(_QWORD *)(v0 + 1352);
    v42 = *(_QWORD *)(v0 + 1344);
    v43 = *(_QWORD *)(v0 + 1336);
    v44 = *(_QWORD *)(v0 + 1328);
    v45 = *(_QWORD *)(v0 + 1320);
    v46 = *(_QWORD *)(v0 + 1312);
    v47 = *(_QWORD *)(v0 + 1304);
    v48 = *(_QWORD *)(v0 + 1296);
    v49 = *(_QWORD *)(v0 + 1288);
    v50 = *(_QWORD *)(v0 + 1264);
    v51 = *(_QWORD *)(v0 + 1256);
    v52 = *(_QWORD *)(v0 + 1248);
    v53 = *(_QWORD *)(v0 + 1240);
    v54 = *(_QWORD *)(v0 + 1232);
    v55 = *(_QWORD *)(v0 + 1224);
    v56 = *(_QWORD *)(v0 + 1216);
    v57 = *(_QWORD *)(v0 + 1208);
    v58 = *(_QWORD *)(v0 + 1200);
    v59 = *(_QWORD *)(v0 + 1192);
    v60 = *(_QWORD *)(v0 + 1184);
    v61 = *(_QWORD *)(v0 + 1152);
    v62 = *(_QWORD *)(v0 + 1144);
    v63 = *(_QWORD *)(v0 + 1136);
    v64 = *(_QWORD *)(v0 + 1128);
    v65 = *(_QWORD *)(v0 + 1120);
    v66 = *(_QWORD *)(v0 + 1112);
    v67 = *(_QWORD *)(v0 + 1104);
    v68 = *(_QWORD *)(v0 + 1096);
    v69 = *(_QWORD *)(v0 + 1072);
    swift_task_dealloc(*(_QWORD *)(v0 + 1704));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 1560);
    v15 = *(_QWORD *)(v0 + 1056);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 1552), type metadata accessor for OwnedBeaconRecord);
    v16 = v15 + *(int *)(v14 + 20);
    v17 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 1752) = v17;
    *v17 = v0;
    v17[1] = sub_100925938;
    return sub_10090C6D8(v0 + 448, v16);
  }
}

uint64_t sub_100925938()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1752);
  *(_QWORD *)(*v1 + 1760) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10094615C;
  else
    v4 = sub_10092599C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1064), 0);
}

void sub_10092599C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 456);
  *(_QWORD *)(v0 + 1768) = v1;
  *(_QWORD *)(v0 + 1776) = v2;
  if (v2 >> 60 == 15)
  {
    v3 = *(_QWORD *)(v0 + 1552);
    v4 = sub_1000D94EC();
    v155 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v4, 0, 0);
    *v5 = 9;
    swift_willThrow(v155);
    sub_1000D9530((uint64_t *)(v0 + 448));
    sub_1000126B0(v3, type metadata accessor for OwnedBeaconRecord);
    v6 = *(_QWORD *)(v0 + 1696);
    v7 = *(_QWORD *)(v0 + 1688);
    v8 = *(_QWORD *)(v0 + 1680);
    v9 = *(_QWORD *)(v0 + 1672);
    v10 = *(_QWORD *)(v0 + 1664);
    v11 = *(_QWORD *)(v0 + 1656);
    v12 = *(_QWORD *)(v0 + 1648);
    v13 = *(_QWORD *)(v0 + 1640);
    v14 = *(_QWORD *)(v0 + 1632);
    v48 = *(_QWORD *)(v0 + 1624);
    v50 = *(_QWORD *)(v0 + 1616);
    v52 = *(_QWORD *)(v0 + 1592);
    v54 = *(_QWORD *)(v0 + 1584);
    v56 = *(_QWORD *)(v0 + 1552);
    v58 = *(_QWORD *)(v0 + 1544);
    v60 = *(_QWORD *)(v0 + 1520);
    v62 = *(_QWORD *)(v0 + 1512);
    v64 = *(_QWORD *)(v0 + 1504);
    v66 = *(_QWORD *)(v0 + 1496);
    v68 = *(_QWORD *)(v0 + 1488);
    v70 = *(_QWORD *)(v0 + 1480);
    v72 = *(_QWORD *)(v0 + 1472);
    v74 = *(_QWORD *)(v0 + 1448);
    v76 = *(_QWORD *)(v0 + 1440);
    v78 = *(_QWORD *)(v0 + 1432);
    v80 = *(_QWORD *)(v0 + 1424);
    v82 = *(_QWORD *)(v0 + 1416);
    v84 = *(_QWORD *)(v0 + 1392);
    v86 = *(_QWORD *)(v0 + 1384);
    v88 = *(_QWORD *)(v0 + 1376);
    v89 = *(_QWORD *)(v0 + 1368);
    v91 = *(_QWORD *)(v0 + 1360);
    v93 = *(_QWORD *)(v0 + 1352);
    v95 = *(_QWORD *)(v0 + 1344);
    v97 = *(_QWORD *)(v0 + 1336);
    v98 = *(_QWORD *)(v0 + 1328);
    v100 = *(_QWORD *)(v0 + 1320);
    v102 = *(_QWORD *)(v0 + 1312);
    v104 = *(_QWORD *)(v0 + 1304);
    v106 = *(_QWORD *)(v0 + 1296);
    v108 = *(_QWORD *)(v0 + 1288);
    v110 = *(_QWORD *)(v0 + 1264);
    v112 = *(_QWORD *)(v0 + 1256);
    v114 = *(_QWORD *)(v0 + 1248);
    v116 = *(_QWORD *)(v0 + 1240);
    v118 = *(_QWORD *)(v0 + 1232);
    v120 = *(_QWORD *)(v0 + 1224);
    v122 = *(_QWORD *)(v0 + 1216);
    v124 = *(_QWORD *)(v0 + 1208);
    v126 = *(_QWORD *)(v0 + 1200);
    v128 = *(_QWORD *)(v0 + 1192);
    v130 = *(_QWORD *)(v0 + 1184);
    v132 = *(_QWORD *)(v0 + 1152);
    v134 = *(_QWORD *)(v0 + 1144);
    v136 = *(_QWORD *)(v0 + 1136);
    v138 = *(_QWORD *)(v0 + 1128);
    v141 = *(_QWORD *)(v0 + 1120);
    v144 = *(_QWORD *)(v0 + 1112);
    v147 = *(_QWORD *)(v0 + 1104);
    v150 = *(_QWORD *)(v0 + 1096);
    v153 = *(_QWORD *)(v0 + 1072);
    swift_task_dealloc(*(_QWORD *)(v0 + 1704));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v130);
    swift_task_dealloc(v132);
    swift_task_dealloc(v134);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    swift_task_dealloc(v141);
    swift_task_dealloc(v144);
    swift_task_dealloc(v147);
    swift_task_dealloc(v150);
    swift_task_dealloc(v153);
    __asm { BR              X0 }
  }
  v148 = *(_QWORD *)(v0 + 1584);
  v151 = *(_QWORD *)(v0 + 1560);
  v145 = *(_QWORD *)(v0 + 1552);
  v142 = *(_QWORD *)(v0 + 1544);
  v15 = *(_QWORD *)(v0 + 1512);
  v16 = *(_QWORD *)(v0 + 1464);
  v17 = *(_QWORD *)(v0 + 1456);
  v18 = *(_QWORD *)(v0 + 1448);
  v19 = *(_QWORD *)(v0 + 1440);
  v20 = *(_QWORD *)(v0 + 1392);
  v139 = *(_QWORD *)(v0 + 1064);
  v21 = *(_QWORD *)(v0 + 1056);
  sub_10001BBBC(v1, v2);
  static Date.trustedNow.getter(v18);
  static Date.trustedNow.getter(v19);
  sub_100D79E50(v18, 1, v19, v15);
  v22 = v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v20, 1, 1, v17);
  swift_weakInit(v0 + 824, v139);
  sub_10005972C(v145, v142, type metadata accessor for OwnedBeaconRecord);
  sub_10005972C(v21, v148, type metadata accessor for SharingCircleKeyManager.Instruction);
  *(_QWORD *)(v0 + 832) = _swiftEmptyArrayStorage;
  v23 = *(_QWORD *)(v21 + *(int *)(v151 + 32));
  *(_QWORD *)(v0 + 1784) = v23;
  v24 = *(_BYTE *)(v23 + 32);
  *(_BYTE *)(v0 + 2036) = v24;
  v25 = 1 << v24;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  else
    v26 = -1;
  v27 = v26 & *(_QWORD *)(v23 + 56);
  swift_bridgeObjectRetain(v23);
  swift_beginAccess(v22, v0 + 560, 0, 0);
  v28 = 0;
  v29 = *(_QWORD *)(v0 + 1760);
  v30 = *(_QWORD *)(v0 + 1728);
  *(_QWORD *)(v0 + 1808) = v30;
  *(_QWORD *)(v0 + 1800) = v30;
  *(_QWORD *)(v0 + 1792) = v29;
  if (v27)
  {
    v31 = __clz(__rbit64(v27));
    v32 = (v27 - 1) & v27;
    v33 = *(_QWORD **)(v0 + 1784);
    goto LABEL_18;
  }
  v28 = 1;
  v33 = *(_QWORD **)(v0 + 1784);
  if ((unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6 > 1)
  {
    v34 = v33[8];
    if (v34)
    {
LABEL_17:
      v32 = (v34 - 1) & v34;
      v31 = __clz(__rbit64(v34)) + (v28 << 6);
LABEL_18:
      *(_QWORD *)(v0 + 1824) = v32;
      *(_QWORD *)(v0 + 1816) = v28;
      v36 = *(unsigned __int8 *)(v33[6] + v31);
      *(_BYTE *)(v0 + 2037) = v36;
      __asm { BR              X8 }
    }
    v35 = 2;
    if ((unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6 > 2)
    {
      v34 = v33[9];
      if (v34)
        goto LABEL_16;
      v35 = 3;
      if ((unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6 <= 3)
        goto LABEL_23;
      v34 = v33[10];
      if (v34)
      {
LABEL_16:
        v28 = v35;
        goto LABEL_17;
      }
      v35 = 4;
      if ((unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6 > 4)
      {
        v34 = v33[11];
        if (v34)
          goto LABEL_16;
        while (1)
        {
          v28 = v35 + 1;
          if (__OFADD__(v35, 1))
          {
            __break(1u);
            JUMPOUT(0x100927F44);
          }
          if (v28 >= (uint64_t)((unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6))
            break;
          v34 = v33[v28 + 7];
          ++v35;
          if (v34)
            goto LABEL_17;
        }
      }
    }
  }
LABEL_23:
  v37 = *(_QWORD *)(v0 + 1704);
  v38 = *(_QWORD *)(v0 + 1696);
  v39 = *(_QWORD *)(v0 + 1688);
  v45 = *(_QWORD *)(v0 + 1680);
  v46 = *(_QWORD *)(v0 + 1672);
  v47 = *(_QWORD *)(v0 + 1664);
  v49 = *(_QWORD *)(v0 + 1656);
  v51 = *(_QWORD *)(v0 + 1648);
  v53 = *(_QWORD *)(v0 + 1640);
  v55 = *(_QWORD *)(v0 + 1632);
  v57 = *(_QWORD *)(v0 + 1624);
  v59 = *(_QWORD *)(v0 + 1616);
  v61 = *(_QWORD *)(v0 + 1592);
  v40 = *(_QWORD *)(v0 + 1584);
  v41 = *(_QWORD *)(v0 + 1552);
  v42 = *(_QWORD *)(v0 + 1544);
  v43 = *(_QWORD *)(v0 + 1512);
  v63 = *(_QWORD *)(v0 + 1520);
  v65 = *(_QWORD *)(v0 + 1504);
  v67 = *(_QWORD *)(v0 + 1496);
  v69 = *(_QWORD *)(v0 + 1488);
  v71 = *(_QWORD *)(v0 + 1480);
  v73 = *(_QWORD *)(v0 + 1472);
  v75 = *(_QWORD *)(v0 + 1448);
  v77 = *(_QWORD *)(v0 + 1440);
  v79 = *(_QWORD *)(v0 + 1432);
  v81 = *(_QWORD *)(v0 + 1424);
  v44 = *(_QWORD *)(v0 + 1392);
  v83 = *(_QWORD *)(v0 + 1416);
  v85 = *(_QWORD *)(v0 + 1384);
  v87 = *(_QWORD *)(v0 + 1376);
  v90 = *(_QWORD *)(v0 + 1368);
  v92 = *(_QWORD *)(v0 + 1360);
  v94 = *(_QWORD *)(v0 + 1352);
  v96 = *(_QWORD *)(v0 + 1344);
  v99 = *(_QWORD *)(v0 + 1336);
  v101 = *(_QWORD *)(v0 + 1328);
  v103 = *(_QWORD *)(v0 + 1320);
  v105 = *(_QWORD *)(v0 + 1312);
  v107 = *(_QWORD *)(v0 + 1304);
  v109 = *(_QWORD *)(v0 + 1296);
  v111 = *(_QWORD *)(v0 + 1288);
  v113 = *(_QWORD *)(v0 + 1264);
  v115 = *(_QWORD *)(v0 + 1256);
  v117 = *(_QWORD *)(v0 + 1248);
  v119 = *(_QWORD *)(v0 + 1240);
  v121 = *(_QWORD *)(v0 + 1232);
  v123 = *(_QWORD *)(v0 + 1224);
  v125 = *(_QWORD *)(v0 + 1216);
  v127 = *(_QWORD *)(v0 + 1208);
  v129 = *(_QWORD *)(v0 + 1200);
  v131 = *(_QWORD *)(v0 + 1192);
  v133 = *(_QWORD *)(v0 + 1184);
  v135 = *(_QWORD *)(v0 + 1152);
  v137 = *(_QWORD *)(v0 + 1144);
  v140 = *(_QWORD *)(v0 + 1136);
  v143 = *(_QWORD *)(v0 + 1128);
  v146 = *(_QWORD *)(v0 + 1120);
  v149 = *(_QWORD *)(v0 + 1112);
  v152 = *(_QWORD *)(v0 + 1104);
  v154 = *(_QWORD *)(v0 + 1096);
  v156 = *(_QWORD *)(v0 + 1072);
  sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
  sub_1000D9530((uint64_t *)(v0 + 448));
  swift_release();
  sub_1000126B0(v40, type metadata accessor for SharingCircleKeyManager.Instruction);
  sub_1000126B0(v42, type metadata accessor for OwnedBeaconRecord);
  swift_weakDestroy(v0 + 824);
  sub_100004048(v44, &qword_1011063B8);
  sub_1000126B0(v43, type metadata accessor for KeyDropInterface.KeyAlignment);
  sub_1000126B0(v41, type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v63);
  swift_task_dealloc(v43);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v79);
  swift_task_dealloc(v81);
  swift_task_dealloc(v83);
  swift_task_dealloc(v44);
  swift_task_dealloc(v85);
  swift_task_dealloc(v87);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v96);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  swift_task_dealloc(v107);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  swift_task_dealloc(v117);
  swift_task_dealloc(v119);
  swift_task_dealloc(v121);
  swift_task_dealloc(v123);
  swift_task_dealloc(v125);
  swift_task_dealloc(v127);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  swift_task_dealloc(v133);
  swift_task_dealloc(v135);
  swift_task_dealloc(v137);
  swift_task_dealloc(v140);
  swift_task_dealloc(v143);
  swift_task_dealloc(v146);
  swift_task_dealloc(v149);
  swift_task_dealloc(v152);
  swift_task_dealloc(v154);
  swift_task_dealloc(v156);
  __asm { BR              X1 }
}

uint64_t sub_100927F7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1840));
  return swift_task_switch(sub_100927FD4, v1, 0);
}

uint64_t sub_100927FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  os_log_type_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v1 = *(_QWORD *)(v0 + 1296);
  v2 = type metadata accessor for TimeBasedKey(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    v119 = *(_QWORD *)(v0 + 1720);
    v3 = *(unsigned __int8 *)(v0 + 2024);
    v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
    v5 = *(_QWORD *)(v0 + 1680);
    v6 = *(_QWORD *)(v0 + 1600);
    v7 = *(_QWORD *)(v0 + 1592);
    v8 = *(_QWORD *)(v0 + 1056);
    v9 = (v3 + 16) & ~v3;
    v10 = *(_QWORD *)(v0 + 1576) + v9;
    v11 = v3 | 7;
    sub_100004048(v1, (uint64_t *)&unk_1010F0EE0);
    v12 = sub_100906BC0();
    v4(v5, v12, v6);
    sub_10005972C(v8, v7, type metadata accessor for SharingCircleKeyManager.Instruction);
    v13 = swift_allocObject(&unk_10109DA38, v10, v11);
    sub_1000126EC(v7, v13 + v9, type metadata accessor for SharingCircleKeyManager.Instruction);
    v14 = swift_allocObject(&unk_10109DA60, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_100960968;
    *(_QWORD *)(v14 + 24) = v13;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    v17 = swift_allocObject(&unk_10109DA88, 17, 7);
    *(_BYTE *)(v17 + 16) = 34;
    v18 = swift_allocObject(&unk_10109DAB0, 17, 7);
    *(_BYTE *)(v18 + 16) = 8;
    v19 = swift_allocObject(&unk_10109DAD8, 32, 7);
    *(_QWORD *)(v19 + 16) = sub_100963204;
    *(_QWORD *)(v19 + 24) = v14;
    v20 = swift_allocObject(&unk_10109DB00, 32, 7);
    *(_QWORD *)(v20 + 16) = sub_10005CBA4;
    *(_QWORD *)(v20 + 24) = v19;
    v21 = swift_allocObject(v119, 80, 7);
    sub_100882D28(v21, 3);
    *v22 = sub_10005CBC4;
    v22[1] = v17;
    v22[2] = sub_10005CBC4;
    v22[3] = v18;
    v22[4] = sub_10005CBB4;
    v22[5] = v20;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(v15, v16))
    {
      v36 = *(void (**)(uint64_t, uint64_t))(v0 + 1808);
      v37 = *(_QWORD *)(v0 + 1680);
      v38 = *(_QWORD *)(v0 + 1600);

      swift_release();
      swift_release();
      swift_release();
      v36(v37, v38);
      v39 = *(_QWORD *)(v0 + 1808);
      v40 = *(_QWORD *)(v0 + 1800);
      v56 = *(_QWORD *)(v0 + 1792);
      goto LABEL_10;
    }
    v116 = v16;
    v23 = *(_QWORD *)(v0 + 1792);
    v24 = (uint8_t *)sub_1006948A0(12);
    v25 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 968) = 0;
    v113 = v25;
    *(_QWORD *)(v0 + 976) = v25;
    *(_WORD *)v24 = 258;
    *(_QWORD *)(v0 + 960) = v24 + 2;
    *(_QWORD *)(v0 + 616) = sub_10005CBC4;
    *(_QWORD *)(v0 + 624) = v17;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 616), v0 + 960, v0 + 968, v0 + 976);
    if (!v23)
    {
      swift_release();
      *(_QWORD *)(v0 + 616) = sub_10005CBC4;
      *(_QWORD *)(v0 + 624) = v18;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 616), v0 + 960, v0 + 968, v0 + 976);
      swift_release();
      *(_QWORD *)(v0 + 616) = sub_10005CBB4;
      *(_QWORD *)(v0 + 624) = v20;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 616), v0 + 960, v0 + 968, v0 + 976);
      v41 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
      v42 = *(_QWORD *)(v0 + 1680);
      v43 = *(_QWORD *)(v0 + 1600);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v15, v116, "No secondary key avaialble for %{public}s.", v24, 0xCu);
      swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v113, -1, -1);
      sub_100694894((uint64_t)v24);

      v41(v42, v43);
      v56 = 0;
      v40 = *(_QWORD *)(v0 + 1800);
      v39 = v40;
LABEL_10:
      v44 = *(_QWORD *)(v0 + 1824);
      v45 = *(_QWORD *)(v0 + 1816);
      *(_QWORD *)(v0 + 1808) = v39;
      *(_QWORD *)(v0 + 1800) = v40;
      *(_QWORD *)(v0 + 1792) = v56;
      if (v44)
      {
        v46 = __clz(__rbit64(v44));
        v47 = (v44 - 1) & v44;
        v48 = v46 | (v45 << 6);
        v49 = *(_QWORD *)(v0 + 1784);
        goto LABEL_23;
      }
      if (__OFADD__(v45++, 1))
      {
        __break(1u);
        goto LABEL_30;
      }
      v51 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
      v49 = *(_QWORD *)(v0 + 1784);
      if (v45 < v51)
      {
        v52 = v49 + 56;
        v53 = *(_QWORD *)(v49 + 56 + 8 * v45);
        if (v53)
        {
LABEL_22:
          v47 = (v53 - 1) & v53;
          v48 = __clz(__rbit64(v53)) + (v45 << 6);
LABEL_23:
          *(_QWORD *)(v0 + 1824) = v47;
          *(_QWORD *)(v0 + 1816) = v45;
          v55 = *(unsigned __int8 *)(*(_QWORD *)(v49 + 48) + v48);
          *(_BYTE *)(v0 + 2037) = v55;
          __asm { BR              X9 }
        }
        v54 = v45 + 1;
        if (v45 + 1 < v51)
        {
          v53 = *(_QWORD *)(v52 + 8 * v54);
          if (v53)
            goto LABEL_21;
          v54 = v45 + 2;
          if (v45 + 2 >= v51)
            goto LABEL_28;
          v53 = *(_QWORD *)(v52 + 8 * v54);
          if (v53)
          {
LABEL_21:
            v45 = v54;
            goto LABEL_22;
          }
          v54 = v45 + 3;
          if (v45 + 3 < v51)
          {
            v53 = *(_QWORD *)(v52 + 8 * v54);
            if (v53)
              goto LABEL_21;
            while (1)
            {
              v45 = v54 + 1;
              if (__OFADD__(v54, 1))
                break;
              if (v45 >= v51)
                goto LABEL_28;
              v53 = *(_QWORD *)(v52 + 8 * v45);
              ++v54;
              if (v53)
                goto LABEL_22;
            }
LABEL_30:
            __break(1u);
            JUMPOUT(0x10092A4CCLL);
          }
        }
      }
LABEL_28:
      v57 = *(_QWORD *)(v0 + 1704);
      v58 = *(_QWORD *)(v0 + 1696);
      v59 = *(_QWORD *)(v0 + 1688);
      v65 = *(_QWORD *)(v0 + 1680);
      v66 = *(_QWORD *)(v0 + 1672);
      v67 = *(_QWORD *)(v0 + 1664);
      v68 = *(_QWORD *)(v0 + 1656);
      v69 = *(_QWORD *)(v0 + 1648);
      v70 = *(_QWORD *)(v0 + 1640);
      v71 = *(_QWORD *)(v0 + 1632);
      v72 = *(_QWORD *)(v0 + 1624);
      v73 = *(_QWORD *)(v0 + 1616);
      v74 = *(_QWORD *)(v0 + 1592);
      v60 = *(_QWORD *)(v0 + 1584);
      v61 = *(_QWORD *)(v0 + 1552);
      v62 = *(_QWORD *)(v0 + 1544);
      v63 = *(_QWORD *)(v0 + 1512);
      v75 = *(_QWORD *)(v0 + 1520);
      v76 = *(_QWORD *)(v0 + 1504);
      v77 = *(_QWORD *)(v0 + 1496);
      v78 = *(_QWORD *)(v0 + 1488);
      v79 = *(_QWORD *)(v0 + 1480);
      v80 = *(_QWORD *)(v0 + 1472);
      v81 = *(_QWORD *)(v0 + 1448);
      v82 = *(_QWORD *)(v0 + 1440);
      v83 = *(_QWORD *)(v0 + 1432);
      v84 = *(_QWORD *)(v0 + 1424);
      v64 = *(_QWORD *)(v0 + 1392);
      v85 = *(_QWORD *)(v0 + 1416);
      v86 = *(_QWORD *)(v0 + 1384);
      v87 = *(_QWORD *)(v0 + 1376);
      v88 = *(_QWORD *)(v0 + 1368);
      v89 = *(_QWORD *)(v0 + 1360);
      v90 = *(_QWORD *)(v0 + 1352);
      v91 = *(_QWORD *)(v0 + 1344);
      v92 = *(_QWORD *)(v0 + 1336);
      v93 = *(_QWORD *)(v0 + 1328);
      v94 = *(_QWORD *)(v0 + 1320);
      v95 = *(_QWORD *)(v0 + 1312);
      v96 = *(_QWORD *)(v0 + 1304);
      v97 = *(_QWORD *)(v0 + 1296);
      v98 = *(_QWORD *)(v0 + 1288);
      v99 = *(_QWORD *)(v0 + 1264);
      v100 = *(_QWORD *)(v0 + 1256);
      v101 = *(_QWORD *)(v0 + 1248);
      v102 = *(_QWORD *)(v0 + 1240);
      v103 = *(_QWORD *)(v0 + 1232);
      v104 = *(_QWORD *)(v0 + 1224);
      v105 = *(_QWORD *)(v0 + 1216);
      v106 = *(_QWORD *)(v0 + 1208);
      v107 = *(_QWORD *)(v0 + 1200);
      v108 = *(_QWORD *)(v0 + 1192);
      v109 = *(_QWORD *)(v0 + 1184);
      v110 = *(_QWORD *)(v0 + 1152);
      v111 = *(_QWORD *)(v0 + 1144);
      v112 = *(_QWORD *)(v0 + 1136);
      v114 = *(_QWORD *)(v0 + 1128);
      v115 = *(_QWORD *)(v0 + 1120);
      v117 = *(_QWORD *)(v0 + 1112);
      v118 = *(_QWORD *)(v0 + 1104);
      v120 = *(_QWORD *)(v0 + 1096);
      v121 = *(_QWORD *)(v0 + 1072);
      sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
      sub_1000D9530((uint64_t *)(v0 + 448));
      swift_release();
      sub_1000126B0(v60, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
      swift_weakDestroy(v0 + 824);
      sub_100004048(v64, &qword_1011063B8);
      sub_1000126B0(v63, type metadata accessor for KeyDropInterface.KeyAlignment);
      sub_1000126B0(v61, type metadata accessor for OwnedBeaconRecord);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v75);
      swift_task_dealloc(v63);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(v82);
      swift_task_dealloc(v83);
      swift_task_dealloc(v84);
      swift_task_dealloc(v85);
      swift_task_dealloc(v64);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v91);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v99);
      swift_task_dealloc(v100);
      swift_task_dealloc(v101);
      swift_task_dealloc(v102);
      swift_task_dealloc(v103);
      swift_task_dealloc(v104);
      swift_task_dealloc(v105);
      swift_task_dealloc(v106);
      swift_task_dealloc(v107);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v110);
      swift_task_dealloc(v111);
      swift_task_dealloc(v112);
      swift_task_dealloc(v114);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      __asm { BR              X1 }
    }
    v26 = *(_QWORD *)(v0 + 1584);
    v27 = *(_QWORD *)(v0 + 1544);
    swift_errorRelease(v23);
    sub_1000126B0(v26, type metadata accessor for SharingCircleKeyManager.Instruction);
    return sub_1000126B0(v27, type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
    v29 = *(int *)(v0 + 2028);
    v30 = *(_QWORD *)(v0 + 1056);
    v31 = (_OWORD *)(v1 + *(int *)(v2 + 24));
    v33 = v31[1];
    v32 = v31[2];
    *(_OWORD *)(v0 + 512) = *v31;
    *(_OWORD *)(v0 + 528) = v33;
    *(_OWORD *)(v0 + 544) = v32;
    sub_1004D4410((_QWORD *)(v0 + 512), (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    sub_1000126B0(v1, type metadata accessor for TimeBasedKey);
    *(_QWORD *)(v0 + 1848) = sub_1007DFD44();
    *(_QWORD *)(v0 + 1856) = v34;
    sub_1004D4410((_QWORD *)(v0 + 512), (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    v35 = (_QWORD *)swift_task_alloc(dword_101111104);
    *(_QWORD *)(v0 + 1864) = v35;
    *v35 = v0;
    v35[1] = sub_10092A504;
    return sub_100A82964(*(_QWORD *)(v0 + 1264), v30 + v29);
  }
}

uint64_t sub_10092A504()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1864));
  return swift_task_switch(sub_10092A55C, v1, 0);
}

uint64_t sub_10092A55C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _WORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v112;
  uint64_t v113;
  unint64_t v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  os_log_type_t v153;
  uint64_t v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint8_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (**v177)(uint64_t, uint64_t, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(uint64_t, uint64_t, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  NSObject *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;

  v1 = *(_QWORD *)(v0 + 1272);
  v2 = *(_QWORD *)(v0 + 1264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1280) + 48))(v2, 1, v1) == 1)
  {
    v224 = *(_QWORD *)(v0 + 1856);
    v216 = *(_QWORD *)(v0 + 1848);
    v177 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
    v3 = *(_QWORD *)(v0 + 1552);
    v4 = *(_QWORD *)(v0 + 1528);
    v5 = *(_QWORD *)(v0 + 1504);
    v6 = *(_QWORD *)(v0 + 1448);
    v173 = v0 + 984;
    v175 = v0 + 952;
    v171 = v0 + 1016;
    v7 = *(_QWORD *)(v0 + 1440);
    v8 = *(_QWORD *)(v0 + 1408);
    v9 = *(_QWORD *)(v0 + 1400);
    v10 = *(_QWORD *)(v0 + 1256);
    sub_100004048(v2, &qword_1010F7AE0);
    v11 = v3 + *(int *)(v4 + 32);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v12(v6, v11, v9);
    v12(v7, v11, v9);
    sub_100D79E50(v6, 1, v7, v5);
    v221 = type metadata accessor for EncryptedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v221 - 8) + 56))(v10, 1, 1);
    sub_10001BBBC(v216, v224);
    sub_100D7CD98(1, v216, v224, v10, (_QWORD *)(v0 + 16));
    v212 = *(_QWORD *)(v0 + 1776);
    v217 = *(NSObject **)(v0 + 1792);
    v206 = *(_QWORD *)(v0 + 1768);
    v14 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 80);
    v229 = v13;
    v225 = v14;
    v15 = *(_QWORD *)(v0 + 56);
    v16 = *(_QWORD *)(v0 + 64);
    v18 = *(_QWORD *)(v0 + 40);
    v17 = *(_QWORD *)(v0 + 48);
    v20 = *(_QWORD *)(v0 + 24);
    v19 = *(_QWORD *)(v0 + 32);
    v21 = *(_QWORD *)(v0 + 16);
    v22 = sub_10001A9A8(&qword_101109250);
    v23 = swift_allocObject(v22, 104, 7);
    v24 = sub_10084F488(v23, 1);
    *v25 = v21;
    v25[1] = v20;
    v25[2] = v19;
    v25[3] = v18;
    v25[4] = v17;
    v25[5] = v15;
    v25[6] = v16;
    v25[7] = v14;
    v25[8] = v13;
    v26 = SharingCircleWildAdvertisementKey.init(key:)(v24);
    sub_10001BD08(v206, v212);
    v196 = v20;
    v198 = v19;
    sub_10001BBBC(v20, v19);
    v200 = v18;
    v202 = v17;
    sub_10001BD08(v18, v17);
    v204 = v15;
    sub_10001BD08(v15, v16);
    sub_10001BD08(v14, v229);
    v27 = sub_10095FD50(v26, v206, v212);
    if (v217)
    {
      v28 = *(_QWORD *)(v0 + 1856);
      v29 = *(_QWORD *)(v0 + 1848);
      v30 = *(_QWORD *)(v0 + 1504);
      sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
      swift_bridgeObjectRelease();
      sub_10001BC14(v29, v28);
      sub_10001BC14(v196, v198);
      sub_10001EF3C(v18, v17);
      sub_10001EF3C(v15, v16);
      sub_10001EF3C(v225, v229);
      sub_1000126B0(v30, type metadata accessor for KeyDropInterface.KeyAlignment);
      v213 = *(_BYTE *)(v0 + 2037);
      v161 = *(_QWORD *)(v0 + 1720);
      v31 = *(unsigned __int8 *)(v0 + 2024);
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
      v33 = *(_QWORD *)(v0 + 1616);
      v34 = *(_QWORD *)(v0 + 1600);
      v35 = *(_QWORD *)(v0 + 1592);
      v36 = *(_QWORD *)(v0 + 1056);
      v37 = (v31 + 16) & ~v31;
      v38 = *(_QWORD *)(v0 + 1576) + v37;
      v39 = v31 | 7;
      v40 = sub_100906BC0();
      v32(v33, v40, v34);
      sub_10005972C(v36, v35, type metadata accessor for SharingCircleKeyManager.Instruction);
      v41 = swift_allocObject(&unk_10109C3B8, v38, v39);
      sub_1000126EC(v35, v41 + v37, type metadata accessor for SharingCircleKeyManager.Instruction);
      v42 = swift_allocObject(&unk_10109C3E0, 32, 7);
      *(_QWORD *)(v42 + 16) = sub_100960968;
      *(_QWORD *)(v42 + 24) = v41;
      v230 = swift_allocObject(&unk_10109C408, 17, 7);
      *(_BYTE *)(v230 + 16) = v213;
      sub_10005972C(v36, v35, type metadata accessor for SharingCircleKeyManager.Instruction);
      v43 = swift_allocObject(&unk_10109C430, v38, v39);
      sub_1000126EC(v35, v43 + v37, type metadata accessor for SharingCircleKeyManager.Instruction);
      v44 = swift_allocObject(&unk_10109C458, 32, 7);
      *(_QWORD *)(v44 + 16) = sub_100960A74;
      *(_QWORD *)(v44 + 24) = v43;
      sub_10005972C(v36, v35, type metadata accessor for SharingCircleKeyManager.Instruction);
      v45 = swift_allocObject(&unk_10109C480, v38, v39);
      sub_1000126EC(v35, v45 + v37, type metadata accessor for SharingCircleKeyManager.Instruction);
      v46 = swift_allocObject(&unk_10109C4A8, 32, 7);
      *(_QWORD *)(v46 + 16) = sub_100960A7C;
      *(_QWORD *)(v46 + 24) = v45;
      v47 = swift_allocObject(&unk_10109C4D0, 24, 7);
      *(_QWORD *)(v47 + 16) = v217;
      v48 = swift_errorRetain(v217);
      v155 = Logger.logObject.getter(v48);
      v153 = static os_log_type_t.error.getter(v155);
      v151 = swift_allocObject(&unk_10109C4F8, 17, 7);
      *(_BYTE *)(v151 + 16) = 34;
      v149 = swift_allocObject(&unk_10109C520, 17, 7);
      *(_BYTE *)(v149 + 16) = 8;
      v49 = swift_allocObject(&unk_10109C548, 32, 7);
      *(_QWORD *)(v49 + 16) = sub_100963204;
      *(_QWORD *)(v49 + 24) = v42;
      v50 = swift_allocObject(&unk_10109C570, 32, 7);
      *(_QWORD *)(v50 + 16) = sub_10005CBA4;
      *(_QWORD *)(v50 + 24) = v49;
      v51 = v50;
      v147 = v50;
      v204 = swift_allocObject(&unk_10109C598, 17, 7);
      *(_BYTE *)(v204 + 16) = 34;
      v200 = swift_allocObject(&unk_10109C5C0, 17, 7);
      *(_BYTE *)(v200 + 16) = 8;
      v52 = swift_allocObject(&unk_10109C5E8, 32, 7);
      *(_QWORD *)(v52 + 16) = sub_100960B78;
      *(_QWORD *)(v52 + 24) = v230;
      v192 = swift_allocObject(&unk_10109C610, 32, 7);
      *(_QWORD *)(v192 + 16) = sub_10005CBA4;
      *(_QWORD *)(v192 + 24) = v52;
      v183 = swift_allocObject(&unk_10109C638, 17, 7);
      *(_BYTE *)(v183 + 16) = 112;
      v166 = swift_allocObject(&unk_10109C660, 17, 7);
      *(_BYTE *)(v166 + 16) = 8;
      v53 = swift_allocObject(&unk_10109C688, 24, 7);
      *(_QWORD *)(v53 + 16) = 1752392040;
      v164 = swift_allocObject(&unk_10109C6B0, 32, 7);
      *(_QWORD *)(v164 + 16) = sub_10005CBC0;
      *(_QWORD *)(v164 + 24) = v53;
      v229 = swift_allocObject(&unk_10109C6D8, 17, 7);
      *(_BYTE *)(v229 + 16) = 33;
      v225 = swift_allocObject(&unk_10109C700, 17, 7);
      *(_BYTE *)(v225 + 16) = 8;
      v54 = swift_allocObject(&unk_10109C728, 32, 7);
      *(_QWORD *)(v54 + 16) = sub_10005CBAC;
      *(_QWORD *)(v54 + 24) = v44;
      v214 = swift_allocObject(&unk_10109C750, 32, 7);
      *(_QWORD *)(v214 + 16) = sub_10005CBA4;
      *(_QWORD *)(v214 + 24) = v54;
      v207 = swift_allocObject(&unk_10109C778, 17, 7);
      *(_BYTE *)(v207 + 16) = 112;
      v202 = swift_allocObject(&unk_10109C7A0, 17, 7);
      *(_BYTE *)(v202 + 16) = 8;
      v55 = swift_allocObject(&unk_10109C7C8, 24, 7);
      *(_QWORD *)(v55 + 16) = 1752392040;
      v198 = swift_allocObject(&unk_10109C7F0, 32, 7);
      *(_QWORD *)(v198 + 16) = sub_10005CBC0;
      *(_QWORD *)(v198 + 24) = v55;
      v196 = swift_allocObject(&unk_10109C818, 17, 7);
      *(_BYTE *)(v196 + 16) = 33;
      v188 = swift_allocObject(&unk_10109C840, 17, 7);
      *(_BYTE *)(v188 + 16) = 8;
      v56 = swift_allocObject(&unk_10109C868, 32, 7);
      *(_QWORD *)(v56 + 16) = sub_10005CBAC;
      *(_QWORD *)(v56 + 24) = v46;
      v169 = swift_allocObject(&unk_10109C890, 32, 7);
      *(_QWORD *)(v169 + 16) = sub_10005CBA4;
      *(_QWORD *)(v169 + 24) = v56;
      v157 = swift_allocObject(&unk_10109C8B8, 17, 7);
      *(_BYTE *)(v157 + 16) = 34;
      v57 = swift_allocObject(&unk_10109C8E0, 17, 7);
      *(_BYTE *)(v57 + 16) = 8;
      v58 = swift_allocObject(&unk_10109C908, 32, 7);
      *(_QWORD *)(v58 + 16) = sub_100960C64;
      *(_QWORD *)(v58 + 24) = v47;
      v59 = swift_allocObject(&unk_10109C930, 32, 7);
      *(_QWORD *)(v59 + 16) = sub_10005CBA4;
      *(_QWORD *)(v59 + 24) = v58;
      v60 = swift_allocObject(v161, 368, 7);
      sub_100882D28(v60, 21);
      *v61 = sub_10005CBC4;
      v61[1] = v151;
      v61[2] = sub_10005CBC4;
      v61[3] = v149;
      v61[4] = sub_10005CBB4;
      v61[5] = v51;
      v61[6] = sub_10005CBC4;
      v61[7] = v204;
      v61[8] = sub_10005CBC4;
      v61[9] = v200;
      v61[10] = sub_10005CBB4;
      v61[11] = v192;
      v61[12] = sub_10005CBC4;
      v61[13] = v183;
      v61[14] = sub_10005CBC4;
      v61[15] = v166;
      v61[16] = sub_10005CBB8;
      v61[17] = v164;
      v61[18] = sub_10005CBC4;
      v61[19] = v229;
      v61[20] = sub_10005CBC4;
      v61[21] = v225;
      v61[22] = sub_10005CBB4;
      v61[23] = v214;
      v61[24] = sub_10005CBC4;
      v61[25] = v207;
      v61[26] = sub_10005CBC4;
      v61[27] = v202;
      v61[28] = sub_10005CBB8;
      v61[29] = v198;
      v61[30] = sub_10005CBC4;
      v61[31] = v196;
      v61[32] = sub_10005CBC4;
      v61[33] = v188;
      v61[34] = sub_10005CBB4;
      v61[35] = v169;
      v61[36] = sub_10005CBC4;
      v61[37] = v157;
      v61[38] = sub_10005CBC4;
      v61[39] = v57;
      v61[40] = sub_10005CBB4;
      v61[41] = v59;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v155, v153))
      {
        v62 = (uint8_t *)sub_1006948A0(72);
        v63 = swift_slowAlloc(160, -1);
        *(_QWORD *)(v0 + 984) = 0;
        *(_QWORD *)(v0 + 952) = v63;
        v159 = v62;
        *(_WORD *)v62 = 1795;
        *(_QWORD *)(v0 + 1016) = v62 + 2;
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v151;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v149;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBB4;
        *(_QWORD *)(v0 + 656) = v147;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v204;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v200;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBB4;
        *(_QWORD *)(v0 + 656) = v192;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v183;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v166;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBB8;
        *(_QWORD *)(v0 + 656) = v164;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v229;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v225;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBB4;
        *(_QWORD *)(v0 + 656) = v214;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v207;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v202;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBB8;
        *(_QWORD *)(v0 + 656) = v198;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v196;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v188;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBB4;
        *(_QWORD *)(v0 + 656) = v169;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v157;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBC4;
        *(_QWORD *)(v0 + 656) = v57;
        sub_1006948A8(v177, v171, v173, v175);
        swift_release();
        *(_QWORD *)(v0 + 648) = sub_10005CBB4;
        *(_QWORD *)(v0 + 656) = v59;
        sub_1006948A8(v177, v171, v173, v175);
        v64 = *(_QWORD *)(v0 + 1616);
        v65 = *(_QWORD *)(v0 + 1608);
        v66 = *(_QWORD *)(v0 + 1600);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v155, v153, "Keys to upload: %{public}s,\nfailed to add type: %{public}s,\nfor share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s\nerror: %{public}s.", v159, 0x48u);
        swift_arrayDestroy(v63, 5, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v63, -1, -1);
        sub_100694894((uint64_t)v159);

        swift_errorRelease(v217);
        v67 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
        v67(v64, v66);
      }
      else
      {
        v100 = *(_QWORD *)(v0 + 1616);
        v101 = *(_QWORD *)(v0 + 1608);
        v102 = *(_QWORD *)(v0 + 1600);
        swift_errorRelease(v217);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v67 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
        v67(v100, v102);
      }
    }
    else
    {
      v72 = (uint64_t)v27;
      v164 = v16;
      v214 = *(_QWORD *)(v0 + 1720);
      v73 = *(unsigned __int8 *)(v0 + 2024);
      v193 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
      v167 = *(_QWORD *)(v0 + 1688);
      v169 = *(_QWORD *)(v0 + 1600);
      v74 = *(_QWORD *)(v0 + 1592);
      v75 = *(_QWORD *)(v0 + 1504);
      v76 = *(_QWORD *)(v0 + 1496);
      v77 = *(_BYTE **)(v0 + 1248);
      v78 = *(_QWORD *)(v0 + 1240);
      v218 = *(_QWORD *)(v0 + 1176);
      v208 = *(_QWORD *)(v0 + 1168);
      v79 = (v73 + 16) & ~v73;
      v184 = v73 | 7;
      v189 = *(_QWORD *)(v0 + 1576) + v79;
      v80 = *(_QWORD *)(v0 + 1056);
      sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
      swift_bridgeObjectRelease();
      sub_10005972C(v75, v76, type metadata accessor for KeyDropInterface.KeyAlignment);
      sub_100D79EE0(1, v76, v72, v77);
      sub_10005972C((uint64_t)v77, v78, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_1009069AC(v78);
      v81 = sub_100906BC0();
      v193(v167, v81, v169);
      sub_10005972C(v80, v74, type metadata accessor for SharingCircleKeyManager.Instruction);
      v82 = swift_allocObject(&unk_10109DB28, v189, v184);
      sub_1000126EC(v74, v82 + v79, type metadata accessor for SharingCircleKeyManager.Instruction);
      v83 = swift_allocObject(&unk_10109DB50, 32, 7);
      *(_QWORD *)(v83 + 16) = sub_100960968;
      *(_QWORD *)(v83 + 24) = v82;
      sub_10005972C((uint64_t)v77, v78, type metadata accessor for KeyDropInterface.KeyPackage);
      v84 = *(unsigned __int8 *)(v208 + 80);
      v85 = (v84 + 16) & ~v84;
      v86 = swift_allocObject(&unk_10109DB78, v85 + v218, v84 | 7);
      sub_1000126EC(v78, v86 + v85, type metadata accessor for KeyDropInterface.KeyPackage);
      v87 = swift_allocObject(&unk_10109DBA0, 32, 7);
      *(_QWORD *)(v87 + 16) = sub_100960DF0;
      *(_QWORD *)(v87 + 24) = v86;
      v217 = Logger.logObject.getter(v87);
      LOBYTE(v76) = static os_log_type_t.default.getter(v217);
      v88 = swift_allocObject(&unk_10109DBC8, 17, 7);
      *(_BYTE *)(v88 + 16) = 34;
      v89 = swift_allocObject(&unk_10109DBF0, 17, 7);
      *(_BYTE *)(v89 + 16) = 8;
      v90 = swift_allocObject(&unk_10109DC18, 32, 7);
      *(_QWORD *)(v90 + 16) = sub_100963204;
      *(_QWORD *)(v90 + 24) = v83;
      v91 = swift_allocObject(&unk_10109DC40, 32, 7);
      *(_QWORD *)(v91 + 16) = sub_10005CBA4;
      *(_QWORD *)(v91 + 24) = v90;
      v92 = swift_allocObject(&unk_10109DC68, 17, 7);
      *(_BYTE *)(v92 + 16) = 34;
      v93 = swift_allocObject(&unk_10109DC90, 17, 7);
      *(_BYTE *)(v93 + 16) = 8;
      v94 = swift_allocObject(&unk_10109DCB8, 32, 7);
      *(_QWORD *)(v94 + 16) = sub_100963208;
      *(_QWORD *)(v94 + 24) = v87;
      v95 = swift_allocObject(&unk_10109DCE0, 32, 7);
      *(_QWORD *)(v95 + 16) = sub_10005CBA4;
      *(_QWORD *)(v95 + 24) = v94;
      v96 = swift_allocObject(v214, 128, 7);
      sub_100882D28(v96, 6);
      *v97 = sub_10005CBC4;
      v97[1] = v88;
      v97[2] = sub_10005CBC4;
      v97[3] = v89;
      v97[4] = sub_10005CBB4;
      v97[5] = v91;
      v97[6] = sub_10005CBC4;
      v97[7] = v92;
      v97[8] = sub_10005CBC4;
      v97[9] = v93;
      v97[10] = sub_10005CBB4;
      v97[11] = v95;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LOBYTE(v214) = v76;
      if (os_log_type_enabled(v217, (os_log_type_t)v76))
      {
        v98 = (_WORD *)sub_1006948A0(22);
        v99 = swift_slowAlloc(64, -1);
        *(_QWORD *)(v0 + 1000) = 0;
        v185 = (char *)v99;
        *(_QWORD *)(v0 + 1008) = v99;
        v169 = (uint64_t)v98;
        *v98 = 514;
        *(_QWORD *)(v0 + 992) = v98 + 1;
        *(_QWORD *)(v0 + 600) = sub_10005CBC4;
        *(_QWORD *)(v0 + 608) = v88;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBC4;
        *(_QWORD *)(v0 + 608) = v89;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBB4;
        *(_QWORD *)(v0 + 608) = v91;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBC4;
        *(_QWORD *)(v0 + 608) = v92;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBC4;
        *(_QWORD *)(v0 + 608) = v93;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBB4;
        *(_QWORD *)(v0 + 608) = v95;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        goto LABEL_30;
      }
      v103 = *(_QWORD *)(v0 + 1856);
      v104 = *(_QWORD *)(v0 + 1848);
      v186 = *(_QWORD *)(v0 + 1608);
      v190 = *(_QWORD *)(v0 + 1600);
      v194 = *(_QWORD *)(v0 + 1688);
      v209 = *(_QWORD *)(v0 + 1248);
      v214 = *(_QWORD *)(v0 + 1504);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      sub_10001BC14(v104, v103);
      sub_10001BC14(v196, v198);
      sub_10001EF3C(v200, v202);
      sub_10001EF3C(v204, v164);
      sub_10001EF3C(v225, v229);
      v67 = *(void (**)(uint64_t, uint64_t))(v186 + 8);
      v67(v194, v190);
      sub_1000126B0(v209, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_1000126B0(v214, type metadata accessor for KeyDropInterface.KeyAlignment);
    }
    while (1)
    {
      v185 = (char *)&type metadata for Any + 8;
      v105 = *(_QWORD *)(v0 + 1824);
      v106 = *(_QWORD *)(v0 + 1816);
      *(int64x2_t *)(v0 + 1800) = vdupq_n_s64((unint64_t)v67);
      *(_QWORD *)(v0 + 1792) = 0;
      if (v105)
        break;
      if (!__OFADD__(v106++, 1))
      {
        v112 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
        v110 = *(_QWORD *)(v0 + 1784);
        if (v106 < v112)
        {
          v113 = v110 + 56;
          v114 = *(_QWORD *)(v110 + 56 + 8 * v106);
          if (v114)
            goto LABEL_22;
          v115 = v106 + 1;
          if (v106 + 1 < v112)
          {
            v114 = *(_QWORD *)(v113 + 8 * v115);
            if (v114)
              goto LABEL_21;
            v115 = v106 + 2;
            if (v106 + 2 < v112)
            {
              v114 = *(_QWORD *)(v113 + 8 * v115);
              if (v114)
                goto LABEL_21;
              v115 = v106 + 3;
              if (v106 + 3 < v112)
              {
                v114 = *(_QWORD *)(v113 + 8 * v115);
                if (v114)
                {
LABEL_21:
                  v106 = v115;
LABEL_22:
                  v108 = (v114 - 1) & v114;
                  v109 = __clz(__rbit64(v114)) + (v106 << 6);
LABEL_23:
                  *(_QWORD *)(v0 + 1824) = v108;
                  *(_QWORD *)(v0 + 1816) = v106;
                  v116 = *(unsigned __int8 *)(*(_QWORD *)(v110 + 48) + v109);
                  *(_BYTE *)(v0 + 2037) = v116;
                  __asm { BR              X8 }
                }
                while (1)
                {
                  v106 = v115 + 1;
                  if (__OFADD__(v115, 1))
                  {
                    __break(1u);
                    JUMPOUT(0x10092CF44);
                  }
                  if (v106 >= v112)
                    break;
                  v114 = *(_QWORD *)(v113 + 8 * v106);
                  ++v115;
                  if (v114)
                    goto LABEL_22;
                }
              }
            }
          }
        }
        v117 = *(_QWORD *)(v0 + 1704);
        v118 = *(_QWORD *)(v0 + 1696);
        v119 = *(_QWORD *)(v0 + 1688);
        v131 = *(_QWORD *)(v0 + 1680);
        v132 = *(_QWORD *)(v0 + 1672);
        v133 = *(_QWORD *)(v0 + 1664);
        v134 = *(_QWORD *)(v0 + 1656);
        v135 = *(_QWORD *)(v0 + 1648);
        v136 = *(_QWORD *)(v0 + 1640);
        v137 = *(_QWORD *)(v0 + 1632);
        v138 = *(_QWORD *)(v0 + 1624);
        v139 = *(_QWORD *)(v0 + 1616);
        v140 = *(_QWORD *)(v0 + 1592);
        v120 = *(_QWORD *)(v0 + 1584);
        v121 = *(_QWORD *)(v0 + 1552);
        v122 = *(_QWORD *)(v0 + 1544);
        v123 = *(_QWORD *)(v0 + 1512);
        v141 = *(_QWORD *)(v0 + 1520);
        v142 = *(_QWORD *)(v0 + 1504);
        v143 = *(_QWORD *)(v0 + 1496);
        v144 = *(_QWORD *)(v0 + 1488);
        v145 = *(_QWORD *)(v0 + 1480);
        v146 = *(_QWORD *)(v0 + 1472);
        v148 = *(_QWORD *)(v0 + 1448);
        v150 = *(_QWORD *)(v0 + 1440);
        v152 = *(_QWORD *)(v0 + 1432);
        v154 = *(_QWORD *)(v0 + 1424);
        v124 = *(_QWORD *)(v0 + 1392);
        v156 = *(_QWORD *)(v0 + 1416);
        v158 = *(_QWORD *)(v0 + 1384);
        v160 = *(_QWORD *)(v0 + 1376);
        v162 = *(_QWORD *)(v0 + 1368);
        v163 = *(_QWORD *)(v0 + 1360);
        v165 = *(_QWORD *)(v0 + 1352);
        v168 = *(_QWORD *)(v0 + 1344);
        v170 = *(_QWORD *)(v0 + 1336);
        v172 = *(_QWORD *)(v0 + 1328);
        v174 = *(_QWORD *)(v0 + 1320);
        v176 = *(_QWORD *)(v0 + 1312);
        v178 = *(_QWORD *)(v0 + 1304);
        v179 = *(_QWORD *)(v0 + 1296);
        v180 = *(_QWORD *)(v0 + 1288);
        v181 = *(_QWORD *)(v0 + 1264);
        v182 = *(_QWORD *)(v0 + 1256);
        v187 = *(_QWORD *)(v0 + 1248);
        v191 = *(_QWORD *)(v0 + 1240);
        v195 = *(_QWORD *)(v0 + 1232);
        v197 = *(_QWORD *)(v0 + 1224);
        v199 = *(_QWORD *)(v0 + 1216);
        v201 = *(_QWORD *)(v0 + 1208);
        v203 = *(_QWORD *)(v0 + 1200);
        v205 = *(_QWORD *)(v0 + 1192);
        v210 = *(_QWORD *)(v0 + 1184);
        v215 = *(_QWORD *)(v0 + 1152);
        v219 = *(_QWORD *)(v0 + 1144);
        v220 = *(_QWORD *)(v0 + 1136);
        v222 = *(_QWORD *)(v0 + 1128);
        v223 = *(_QWORD *)(v0 + 1120);
        v226 = *(_QWORD *)(v0 + 1112);
        v227 = *(_QWORD *)(v0 + 1104);
        v228 = *(_QWORD *)(v0 + 1096);
        v231 = *(_QWORD *)(v0 + 1072);
        sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
        sub_1000D9530((uint64_t *)(v0 + 448));
        swift_release();
        sub_1000126B0(v120, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_1000126B0(v122, type metadata accessor for OwnedBeaconRecord);
        swift_weakDestroy(v0 + 824);
        sub_100004048(v124, &qword_1011063B8);
        sub_1000126B0(v123, type metadata accessor for KeyDropInterface.KeyAlignment);
        sub_1000126B0(v121, type metadata accessor for OwnedBeaconRecord);
        swift_task_dealloc(v117);
        swift_task_dealloc(v118);
        swift_task_dealloc(v119);
        swift_task_dealloc(v131);
        swift_task_dealloc(v132);
        swift_task_dealloc(v133);
        swift_task_dealloc(v134);
        swift_task_dealloc(v135);
        swift_task_dealloc(v136);
        swift_task_dealloc(v137);
        swift_task_dealloc(v138);
        swift_task_dealloc(v139);
        swift_task_dealloc(v140);
        swift_task_dealloc(v120);
        swift_task_dealloc(v121);
        swift_task_dealloc(v122);
        swift_task_dealloc(v141);
        swift_task_dealloc(v123);
        swift_task_dealloc(v142);
        swift_task_dealloc(v143);
        swift_task_dealloc(v144);
        swift_task_dealloc(v145);
        swift_task_dealloc(v146);
        swift_task_dealloc(v148);
        swift_task_dealloc(v150);
        swift_task_dealloc(v152);
        swift_task_dealloc(v154);
        swift_task_dealloc(v156);
        swift_task_dealloc(v124);
        swift_task_dealloc(v158);
        swift_task_dealloc(v160);
        swift_task_dealloc(v162);
        swift_task_dealloc(v163);
        swift_task_dealloc(v165);
        swift_task_dealloc(v168);
        swift_task_dealloc(v170);
        swift_task_dealloc(v172);
        swift_task_dealloc(v174);
        swift_task_dealloc(v176);
        swift_task_dealloc(v178);
        swift_task_dealloc(v179);
        swift_task_dealloc(v180);
        swift_task_dealloc(v181);
        swift_task_dealloc(v182);
        swift_task_dealloc(v187);
        swift_task_dealloc(v191);
        swift_task_dealloc(v195);
        swift_task_dealloc(v197);
        swift_task_dealloc(v199);
        swift_task_dealloc(v201);
        swift_task_dealloc(v203);
        swift_task_dealloc(v205);
        swift_task_dealloc(v210);
        swift_task_dealloc(v215);
        swift_task_dealloc(v219);
        swift_task_dealloc(v220);
        swift_task_dealloc(v222);
        swift_task_dealloc(v223);
        swift_task_dealloc(v226);
        swift_task_dealloc(v227);
        swift_task_dealloc(v228);
        swift_task_dealloc(v231);
        __asm { BR              X1 }
      }
      __break(1u);
LABEL_30:
      v125 = *(_QWORD *)(v0 + 1856);
      v126 = *(_QWORD *)(v0 + 1848);
      v127 = *(_QWORD *)(v0 + 1688);
      v128 = *(_QWORD *)(v0 + 1608);
      v129 = *(_QWORD *)(v0 + 1600);
      v211 = *(_QWORD *)(v0 + 1504);
      v130 = *(_QWORD *)(v0 + 1248);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v217, (os_log_type_t)v214, "Keys to upload: %{public}s,\nadded: %{public}s.", (uint8_t *)v169, 0x16u);
      swift_arrayDestroy(v185, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v185, -1, -1);
      sub_100694894(v169);

      sub_10001BC14(v126, v125);
      sub_10001BC14(v196, v198);
      sub_10001EF3C(v200, v202);
      sub_10001EF3C(v204, v164);
      sub_10001EF3C(v225, v229);
      v67 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
      v67(v127, v129);
      sub_1000126B0(v130, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_1000126B0(v211, type metadata accessor for KeyDropInterface.KeyAlignment);
    }
    v107 = __clz(__rbit64(v105));
    v108 = (v105 - 1) & v105;
    v109 = v107 | (v106 << 6);
    v110 = *(_QWORD *)(v0 + 1784);
    goto LABEL_23;
  }
  v68 = *(_QWORD *)(v0 + 1288);
  sub_1000126EC(v2, v68, type metadata accessor for KeySyncRecord);
  v69 = *(int *)(v1 + 20);
  *(_DWORD *)(v0 + 2032) = v69;
  *(_QWORD *)(v0 + 1872) = sub_1007DFE68(*(_QWORD *)(v68 + v69));
  v70 = (_QWORD *)swift_task_alloc(dword_10110D4A4);
  *(_QWORD *)(v0 + 1880) = v70;
  *v70 = v0;
  v70[1] = sub_10092CF7C;
  return swift_task_switch(sub_100907380, 0, 0);
}

uint64_t sub_10092CF7C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1880);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1064);
  *(double *)(*(_QWORD *)v1 + 1888) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10092CFD4, v3, 0);
}

uint64_t sub_10092CFD4()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int64_t v128;
  uint64_t v129;
  unint64_t v130;
  int64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint8_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  os_log_type_t v205;
  uint64_t v206;
  NSObject *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint8_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint8_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t (**v228)(uint64_t, uint64_t, uint64_t);
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void (*v239)(uint64_t, uint64_t, uint8_t *);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  NSObject *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;

  v1 = *(double *)(v0 + 1888);
  v2 = *(_QWORD *)(v0 + 1872);
  v3 = *(_QWORD *)(v0 + 1832);
  v4 = sub_100DC79F0(1);
  v5 = SharingCircleWildAdvertisementKey.init(key:)(0);
  v6 = *(_QWORD *)(v0 + 1832);
  if (v5 < v3)
  {
    if ((uint64_t)(v6 - v5) >= 0)
    {
      v7 = v5 - v6;
      goto LABEL_5;
    }
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v7 = v5 - v6;
  if ((uint64_t)(v5 - v6) < 0)
    goto LABEL_56;
LABEL_5:
  v228 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  v226 = v0 + 952;
  v8 = *(_QWORD *)(v0 + 1872);
  v224 = v0 + 984;
  v222 = v0 + 1016;
  if (!v7)
  {
LABEL_11:
    v10 = *(int *)(v0 + 2032);
    v261 = *(_QWORD *)(v0 + 1848);
    v268 = *(_QWORD *)(v0 + 1856);
    v271 = *(_QWORD *)(v0 + 1872);
    v11 = *(_QWORD *)(v0 + 1504);
    v12 = *(_QWORD *)(v0 + 1448);
    v13 = *(_QWORD *)(v0 + 1440);
    v14 = *(_QWORD *)(v0 + 1400);
    v15 = *(_QWORD *)(v0 + 1288);
    v16 = *(_QWORD *)(v0 + 1272);
    v17 = *(_QWORD *)(v0 + 1256);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1408) + 16);
    v18(v12, *(_QWORD *)(v0 + 1552) + *(int *)(*(_QWORD *)(v0 + 1528) + 32), v14);
    v19 = *(_QWORD *)(v15 + v10);
    v18(v13, v15 + *(int *)(v16 + 28), v14);
    sub_100D79E50(v12, v19, v13, v11);
    v20 = type metadata accessor for EncryptedData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 1, 1, v20);
    sub_10001BBBC(v261, v268);
    sub_100D7CD98(v271, v261, v268, v17, (_QWORD *)(v0 + 376));
    sub_1000126B0(v15, type metadata accessor for KeySyncRecord);
    v262 = *(_QWORD *)(v0 + 1776);
    v267 = *(NSObject **)(v0 + 1792);
    v254 = *(_QWORD *)(v0 + 1768);
    v21 = *(_QWORD *)(v0 + 432);
    v22 = *(_QWORD *)(v0 + 440);
    v277 = v22;
    v272 = v21;
    v23 = *(_QWORD *)(v0 + 416);
    v24 = *(_QWORD *)(v0 + 424);
    v25 = *(_QWORD *)(v0 + 400);
    v26 = *(_QWORD *)(v0 + 408);
    v27 = *(_QWORD *)(v0 + 384);
    v28 = *(_QWORD *)(v0 + 392);
    v29 = *(_QWORD *)(v0 + 376);
    v30 = sub_10001A9A8(&qword_101109250);
    v31 = swift_allocObject(v30, 104, 7);
    v32 = sub_10084F488(v31, 1);
    *v33 = v29;
    v33[1] = v27;
    v33[2] = v28;
    v33[3] = v25;
    v33[4] = v26;
    v33[5] = v23;
    v33[6] = v24;
    v33[7] = v21;
    v33[8] = v22;
    v34 = SharingCircleWildAdvertisementKey.init(key:)(v32);
    sub_10001BD08(v254, v262);
    v242 = v27;
    v244 = v28;
    sub_10001BBBC(v27, v28);
    v246 = v25;
    v248 = v26;
    sub_10001BD08(v25, v26);
    v250 = v23;
    v252 = v24;
    sub_10001BD08(v23, v24);
    sub_10001BD08(v21, v277);
    v35 = sub_10095FD50(v34, v254, v262);
    if (!v267)
    {
      v133 = (uint64_t)v35;
      v264 = *(_QWORD *)(v0 + 1720);
      v134 = *(unsigned __int8 *)(v0 + 2024);
      v239 = *(void (**)(uint64_t, uint64_t, uint8_t *))(v0 + 1712);
      v216 = *(_QWORD *)(v0 + 1688);
      v218 = *(uint8_t **)(v0 + 1600);
      v135 = *(_QWORD *)(v0 + 1592);
      v136 = *(_QWORD *)(v0 + 1504);
      v137 = *(_QWORD *)(v0 + 1496);
      v138 = *(_BYTE **)(v0 + 1248);
      v139 = *(_QWORD *)(v0 + 1240);
      v269 = *(_QWORD *)(v0 + 1176);
      v257 = *(_QWORD *)(v0 + 1168);
      v140 = (v134 + 16) & ~v134;
      v231 = *(_QWORD *)(v0 + 1576) + v140;
      v220 = v134 | 7;
      v141 = *(_QWORD *)(v0 + 1056);
      sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
      swift_bridgeObjectRelease();
      sub_10005972C(v136, v137, type metadata accessor for KeyDropInterface.KeyAlignment);
      sub_100D79EE0(1, v137, v133, v138);
      sub_10005972C((uint64_t)v138, v139, type metadata accessor for KeyDropInterface.KeyPackage);
      sub_1009069AC(v139);
      v142 = sub_100906BC0();
      v239(v216, v142, v218);
      sub_10005972C(v141, v135, type metadata accessor for SharingCircleKeyManager.Instruction);
      v143 = swift_allocObject(&unk_10109DB28, v231, v220);
      sub_1000126EC(v135, v143 + v140, type metadata accessor for SharingCircleKeyManager.Instruction);
      v144 = swift_allocObject(&unk_10109DB50, 32, 7);
      *(_QWORD *)(v144 + 16) = sub_100960968;
      *(_QWORD *)(v144 + 24) = v143;
      sub_10005972C((uint64_t)v138, v139, type metadata accessor for KeyDropInterface.KeyPackage);
      v145 = *(unsigned __int8 *)(v257 + 80);
      v146 = (v145 + 16) & ~v145;
      v147 = swift_allocObject(&unk_10109DB78, v146 + v269, v145 | 7);
      sub_1000126EC(v139, v147 + v146, type metadata accessor for KeyDropInterface.KeyPackage);
      v148 = swift_allocObject(&unk_10109DBA0, 32, 7);
      *(_QWORD *)(v148 + 16) = sub_100960DF0;
      *(_QWORD *)(v148 + 24) = v147;
      v267 = Logger.logObject.getter(v148);
      LOBYTE(v137) = static os_log_type_t.default.getter(v267);
      v149 = swift_allocObject(&unk_10109DBC8, 17, 7);
      *(_BYTE *)(v149 + 16) = 34;
      v150 = swift_allocObject(&unk_10109DBF0, 17, 7);
      *(_BYTE *)(v150 + 16) = 8;
      v151 = swift_allocObject(&unk_10109DC18, 32, 7);
      *(_QWORD *)(v151 + 16) = sub_100963204;
      *(_QWORD *)(v151 + 24) = v144;
      v152 = swift_allocObject(&unk_10109DC40, 32, 7);
      *(_QWORD *)(v152 + 16) = sub_10005CBA4;
      *(_QWORD *)(v152 + 24) = v151;
      v153 = swift_allocObject(&unk_10109DC68, 17, 7);
      *(_BYTE *)(v153 + 16) = 34;
      v154 = swift_allocObject(&unk_10109DC90, 17, 7);
      *(_BYTE *)(v154 + 16) = 8;
      v155 = swift_allocObject(&unk_10109DCB8, 32, 7);
      *(_QWORD *)(v155 + 16) = sub_100963208;
      *(_QWORD *)(v155 + 24) = v148;
      v156 = swift_allocObject(&unk_10109DCE0, 32, 7);
      *(_QWORD *)(v156 + 16) = sub_10005CBA4;
      *(_QWORD *)(v156 + 24) = v155;
      v157 = swift_allocObject(v264, 128, 7);
      sub_100882D28(v157, 6);
      *v158 = sub_10005CBC4;
      v158[1] = v149;
      v158[2] = sub_10005CBC4;
      v158[3] = v150;
      v158[4] = sub_10005CBB4;
      v158[5] = v152;
      v158[6] = sub_10005CBC4;
      v158[7] = v153;
      v158[8] = sub_10005CBC4;
      v158[9] = v154;
      v158[10] = sub_10005CBB4;
      v158[11] = v156;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LOBYTE(v264) = v137;
      if (os_log_type_enabled(v267, (os_log_type_t)v137))
      {
        v159 = (uint8_t *)sub_1006948A0(22);
        v160 = swift_slowAlloc(64, -1);
        *(_QWORD *)(v0 + 1000) = 0;
        v218 = v159;
        v220 = v160;
        *(_QWORD *)(v0 + 1008) = v160;
        *(_WORD *)v159 = 514;
        *(_QWORD *)(v0 + 992) = v159 + 2;
        *(_QWORD *)(v0 + 600) = sub_10005CBC4;
        *(_QWORD *)(v0 + 608) = v149;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBC4;
        *(_QWORD *)(v0 + 608) = v150;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBB4;
        *(_QWORD *)(v0 + 608) = v152;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBC4;
        *(_QWORD *)(v0 + 608) = v153;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBC4;
        *(_QWORD *)(v0 + 608) = v154;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        swift_release();
        *(_QWORD *)(v0 + 600) = sub_10005CBB4;
        *(_QWORD *)(v0 + 608) = v156;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 600), v0 + 992, v0 + 1000, v0 + 1008);
        goto LABEL_54;
      }
      v172 = *(_QWORD *)(v0 + 1856);
      v173 = *(_QWORD *)(v0 + 1848);
      v259 = *(_QWORD *)(v0 + 1688);
      v233 = *(_QWORD *)(v0 + 1608);
      v241 = *(_QWORD *)(v0 + 1600);
      v174 = *(_QWORD *)(v0 + 1504);
      v264 = *(_QWORD *)(v0 + 1248);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      sub_10001BC14(v173, v172);
      sub_10001BC14(v242, v244);
      sub_10001EF3C(v246, v248);
      sub_10001EF3C(v250, v252);
      sub_10001EF3C(v272, v277);
      v75 = *(void (**)(uint64_t, uint64_t))(v233 + 8);
      v75(v259, v241);
      sub_1000126B0(v264, type metadata accessor for KeyDropInterface.KeyPackage);
      v114 = type metadata accessor for KeyDropInterface.KeyAlignment;
      v115 = v174;
      goto LABEL_51;
    }
    v36 = *(_QWORD *)(v0 + 1856);
    v37 = *(_QWORD *)(v0 + 1848);
    v38 = *(_QWORD *)(v0 + 1504);
    sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
    swift_bridgeObjectRelease();
    sub_10001BC14(v37, v36);
    sub_10001BC14(v242, v28);
    sub_10001EF3C(v25, v26);
    sub_10001EF3C(v250, v24);
    sub_10001EF3C(v272, v277);
    sub_1000126B0(v38, type metadata accessor for KeyDropInterface.KeyAlignment);
    v263 = *(_BYTE *)(v0 + 2037);
    v215 = *(_QWORD *)(v0 + 1720);
    v39 = *(unsigned __int8 *)(v0 + 2024);
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
    v41 = *(_QWORD *)(v0 + 1616);
    v42 = *(_QWORD *)(v0 + 1600);
    v43 = *(_QWORD *)(v0 + 1592);
    v44 = *(_QWORD *)(v0 + 1056);
    v45 = (v39 + 16) & ~v39;
    v46 = *(_QWORD *)(v0 + 1576) + v45;
    v47 = v39 | 7;
    v48 = sub_100906BC0();
    v40(v41, v48, v42);
    sub_10005972C(v44, v43, type metadata accessor for SharingCircleKeyManager.Instruction);
    v49 = swift_allocObject(&unk_10109C3B8, v46, v47);
    sub_1000126EC(v43, v49 + v45, type metadata accessor for SharingCircleKeyManager.Instruction);
    v50 = swift_allocObject(&unk_10109C3E0, 32, 7);
    *(_QWORD *)(v50 + 16) = sub_100960968;
    *(_QWORD *)(v50 + 24) = v49;
    v278 = swift_allocObject(&unk_10109C408, 17, 7);
    *(_BYTE *)(v278 + 16) = v263;
    sub_10005972C(v44, v43, type metadata accessor for SharingCircleKeyManager.Instruction);
    v51 = swift_allocObject(&unk_10109C430, v46, v47);
    sub_1000126EC(v43, v51 + v45, type metadata accessor for SharingCircleKeyManager.Instruction);
    v52 = swift_allocObject(&unk_10109C458, 32, 7);
    *(_QWORD *)(v52 + 16) = sub_100960A74;
    *(_QWORD *)(v52 + 24) = v51;
    sub_10005972C(v44, v43, type metadata accessor for SharingCircleKeyManager.Instruction);
    v53 = swift_allocObject(&unk_10109C480, v46, v47);
    sub_1000126EC(v43, v53 + v45, type metadata accessor for SharingCircleKeyManager.Instruction);
    v54 = swift_allocObject(&unk_10109C4A8, 32, 7);
    *(_QWORD *)(v54 + 16) = sub_100960A7C;
    *(_QWORD *)(v54 + 24) = v53;
    v55 = swift_allocObject(&unk_10109C4D0, 24, 7);
    *(_QWORD *)(v55 + 16) = v267;
    v56 = swift_errorRetain(v267);
    v207 = Logger.logObject.getter(v56);
    v205 = static os_log_type_t.error.getter(v207);
    v203 = swift_allocObject(&unk_10109C4F8, 17, 7);
    *(_BYTE *)(v203 + 16) = 34;
    v201 = swift_allocObject(&unk_10109C520, 17, 7);
    *(_BYTE *)(v201 + 16) = 8;
    v57 = swift_allocObject(&unk_10109C548, 32, 7);
    *(_QWORD *)(v57 + 16) = sub_100963204;
    *(_QWORD *)(v57 + 24) = v50;
    v199 = swift_allocObject(&unk_10109C570, 32, 7);
    *(_QWORD *)(v199 + 16) = sub_10005CBA4;
    *(_QWORD *)(v199 + 24) = v57;
    v58 = swift_allocObject(&unk_10109C598, 17, 7);
    *(_BYTE *)(v58 + 16) = 34;
    v59 = v58;
    v248 = swift_allocObject(&unk_10109C5C0, 17, 7);
    *(_BYTE *)(v248 + 16) = 8;
    v60 = swift_allocObject(&unk_10109C5E8, 32, 7);
    *(_QWORD *)(v60 + 16) = sub_100960B78;
    *(_QWORD *)(v60 + 24) = v278;
    v242 = swift_allocObject(&unk_10109C610, 32, 7);
    *(_QWORD *)(v242 + 16) = sub_10005CBA4;
    *(_QWORD *)(v242 + 24) = v60;
    v230 = swift_allocObject(&unk_10109C638, 17, 7);
    *(_BYTE *)(v230 + 16) = 112;
    v218 = (uint8_t *)swift_allocObject(&unk_10109C660, 17, 7);
    v218[16] = 8;
    v61 = swift_allocObject(&unk_10109C688, 24, 7);
    *(_QWORD *)(v61 + 16) = 1752392040;
    v277 = swift_allocObject(&unk_10109C6B0, 32, 7);
    *(_QWORD *)(v277 + 16) = sub_10005CBC0;
    *(_QWORD *)(v277 + 24) = v61;
    v272 = swift_allocObject(&unk_10109C6D8, 17, 7);
    *(_BYTE *)(v272 + 16) = 33;
    v264 = swift_allocObject(&unk_10109C700, 17, 7);
    *(_BYTE *)(v264 + 16) = 8;
    v62 = swift_allocObject(&unk_10109C728, 32, 7);
    *(_QWORD *)(v62 + 16) = sub_10005CBAC;
    *(_QWORD *)(v62 + 24) = v52;
    v255 = swift_allocObject(&unk_10109C750, 32, 7);
    *(_QWORD *)(v255 + 16) = sub_10005CBA4;
    *(_QWORD *)(v255 + 24) = v62;
    v252 = swift_allocObject(&unk_10109C778, 17, 7);
    *(_BYTE *)(v252 + 16) = 112;
    v250 = swift_allocObject(&unk_10109C7A0, 17, 7);
    *(_BYTE *)(v250 + 16) = 8;
    v63 = swift_allocObject(&unk_10109C7C8, 24, 7);
    *(_QWORD *)(v63 + 16) = 1752392040;
    v246 = swift_allocObject(&unk_10109C7F0, 32, 7);
    *(_QWORD *)(v246 + 16) = sub_10005CBC0;
    *(_QWORD *)(v246 + 24) = v63;
    v244 = swift_allocObject(&unk_10109C818, 17, 7);
    *(_BYTE *)(v244 + 16) = 33;
    v238 = swift_allocObject(&unk_10109C840, 17, 7);
    *(_BYTE *)(v238 + 16) = 8;
    v64 = swift_allocObject(&unk_10109C868, 32, 7);
    *(_QWORD *)(v64 + 16) = sub_10005CBAC;
    *(_QWORD *)(v64 + 24) = v54;
    v220 = swift_allocObject(&unk_10109C890, 32, 7);
    *(_QWORD *)(v220 + 16) = sub_10005CBA4;
    *(_QWORD *)(v220 + 24) = v64;
    v209 = swift_allocObject(&unk_10109C8B8, 17, 7);
    *(_BYTE *)(v209 + 16) = 34;
    v65 = swift_allocObject(&unk_10109C8E0, 17, 7);
    *(_BYTE *)(v65 + 16) = 8;
    v66 = swift_allocObject(&unk_10109C908, 32, 7);
    *(_QWORD *)(v66 + 16) = sub_100960C64;
    *(_QWORD *)(v66 + 24) = v55;
    v67 = swift_allocObject(&unk_10109C930, 32, 7);
    *(_QWORD *)(v67 + 16) = sub_10005CBA4;
    *(_QWORD *)(v67 + 24) = v66;
    v68 = swift_allocObject(v215, 368, 7);
    sub_100882D28(v68, 21);
    *v69 = sub_10005CBC4;
    v69[1] = v203;
    v69[2] = sub_10005CBC4;
    v69[3] = v201;
    v69[4] = sub_10005CBB4;
    v69[5] = v199;
    v69[6] = sub_10005CBC4;
    v69[7] = v59;
    v69[8] = sub_10005CBC4;
    v69[9] = v248;
    v69[10] = sub_10005CBB4;
    v69[11] = v242;
    v69[12] = sub_10005CBC4;
    v69[13] = v230;
    v69[14] = sub_10005CBC4;
    v69[15] = v218;
    v69[16] = sub_10005CBB8;
    v69[17] = v277;
    v69[18] = sub_10005CBC4;
    v69[19] = v272;
    v69[20] = sub_10005CBC4;
    v69[21] = v264;
    v69[22] = sub_10005CBB4;
    v69[23] = v255;
    v69[24] = sub_10005CBC4;
    v69[25] = v252;
    v69[26] = sub_10005CBC4;
    v69[27] = v250;
    v69[28] = sub_10005CBB8;
    v69[29] = v246;
    v69[30] = sub_10005CBC4;
    v69[31] = v244;
    v69[32] = sub_10005CBC4;
    v69[33] = v238;
    v69[34] = sub_10005CBB4;
    v69[35] = v220;
    v69[36] = sub_10005CBC4;
    v69[37] = v209;
    v69[38] = sub_10005CBC4;
    v69[39] = v65;
    v69[40] = sub_10005CBB4;
    v69[41] = v67;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v207, v205))
    {
      v70 = (uint8_t *)sub_1006948A0(72);
      v71 = swift_slowAlloc(160, -1);
      *(_QWORD *)(v0 + 984) = 0;
      *(_QWORD *)(v0 + 952) = v71;
      v211 = v70;
      *(_WORD *)v70 = 1795;
      *(_QWORD *)(v0 + 1016) = v70 + 2;
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v203;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v201;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBB4;
      *(_QWORD *)(v0 + 656) = v199;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v59;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v248;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBB4;
      *(_QWORD *)(v0 + 656) = v242;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v230;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v218;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBB8;
      *(_QWORD *)(v0 + 656) = v277;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v272;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v264;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBB4;
      *(_QWORD *)(v0 + 656) = v255;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v252;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v250;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBB8;
      *(_QWORD *)(v0 + 656) = v246;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v244;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v238;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBB4;
      *(_QWORD *)(v0 + 656) = v220;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v209;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBC4;
      *(_QWORD *)(v0 + 656) = v65;
      sub_1006948A8(v228, v222, v224, v226);
      swift_release();
      *(_QWORD *)(v0 + 648) = sub_10005CBB4;
      *(_QWORD *)(v0 + 656) = v67;
      sub_1006948A8(v228, v222, v224, v226);
      v72 = *(_QWORD *)(v0 + 1616);
      v73 = *(_QWORD *)(v0 + 1608);
      v74 = *(_QWORD *)(v0 + 1600);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v207, v205, "Keys to upload: %{public}s,\nfailed to add type: %{public}s,\nfor share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s\nerror: %{public}s.", v211, 0x48u);
      swift_arrayDestroy(v71, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      sub_100694894((uint64_t)v211);

      swift_errorRelease(v267);
      v75 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v75(v72, v74);
    }
    else
    {
      v116 = *(_QWORD *)(v0 + 1616);
      v117 = *(_QWORD *)(v0 + 1608);
      v118 = *(_QWORD *)(v0 + 1600);
      swift_errorRelease(v267);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v75 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
      v75(v116, v118);
    }
    while (1)
    {
      v119 = 0;
LABEL_28:
      v121 = *(_QWORD *)(v0 + 1824);
      v122 = *(_QWORD *)(v0 + 1816);
      *(int64x2_t *)(v0 + 1800) = vdupq_n_s64((unint64_t)v75);
      *(_QWORD *)(v0 + 1792) = v119;
      if (v121)
        break;
      if (__OFADD__(v122++, 1))
      {
        __break(1u);
      }
      else
      {
        v128 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
        v126 = *(_QWORD *)(v0 + 1784);
        if (v122 >= v128)
          goto LABEL_49;
        v129 = v126 + 56;
        v130 = *(_QWORD *)(v126 + 56 + 8 * v122);
        if (v130)
          goto LABEL_40;
        v131 = v122 + 1;
        if (v122 + 1 >= v128)
          goto LABEL_49;
        v130 = *(_QWORD *)(v129 + 8 * v131);
        if (v130)
          goto LABEL_39;
        v131 = v122 + 2;
        if (v122 + 2 >= v128)
          goto LABEL_49;
        v130 = *(_QWORD *)(v129 + 8 * v131);
        if (v130)
          goto LABEL_39;
        v131 = v122 + 3;
        if (v122 + 3 >= v128)
        {
LABEL_49:
          v164 = *(_QWORD *)(v0 + 1704);
          v165 = *(_QWORD *)(v0 + 1696);
          v166 = *(_QWORD *)(v0 + 1688);
          v181 = *(_QWORD *)(v0 + 1680);
          v182 = *(_QWORD *)(v0 + 1672);
          v183 = *(_QWORD *)(v0 + 1664);
          v184 = *(_QWORD *)(v0 + 1656);
          v185 = *(_QWORD *)(v0 + 1648);
          v186 = *(_QWORD *)(v0 + 1640);
          v187 = *(_QWORD *)(v0 + 1632);
          v188 = *(_QWORD *)(v0 + 1624);
          v189 = *(_QWORD *)(v0 + 1616);
          v190 = *(_QWORD *)(v0 + 1592);
          v167 = *(_QWORD *)(v0 + 1584);
          v168 = *(_QWORD *)(v0 + 1552);
          v169 = *(_QWORD *)(v0 + 1544);
          v170 = *(_QWORD *)(v0 + 1512);
          v191 = *(_QWORD *)(v0 + 1520);
          v192 = *(_QWORD *)(v0 + 1504);
          v193 = *(_QWORD *)(v0 + 1496);
          v194 = *(_QWORD *)(v0 + 1488);
          v195 = *(_QWORD *)(v0 + 1480);
          v196 = *(_QWORD *)(v0 + 1472);
          v197 = *(_QWORD *)(v0 + 1448);
          v198 = *(_QWORD *)(v0 + 1440);
          v200 = *(_QWORD *)(v0 + 1432);
          v202 = *(_QWORD *)(v0 + 1424);
          v171 = *(_QWORD *)(v0 + 1392);
          v204 = *(_QWORD *)(v0 + 1416);
          v206 = *(_QWORD *)(v0 + 1384);
          v208 = *(_QWORD *)(v0 + 1376);
          v210 = *(_QWORD *)(v0 + 1368);
          v212 = *(_QWORD *)(v0 + 1360);
          v213 = *(_QWORD *)(v0 + 1352);
          v214 = *(_QWORD *)(v0 + 1344);
          v217 = *(_QWORD *)(v0 + 1336);
          v219 = *(_QWORD *)(v0 + 1328);
          v221 = *(_QWORD *)(v0 + 1320);
          v223 = *(_QWORD *)(v0 + 1312);
          v225 = *(_QWORD *)(v0 + 1304);
          v227 = *(_QWORD *)(v0 + 1296);
          v229 = *(_QWORD *)(v0 + 1288);
          v232 = *(_QWORD *)(v0 + 1264);
          v234 = *(_QWORD *)(v0 + 1256);
          v235 = *(_QWORD *)(v0 + 1248);
          v236 = *(_QWORD *)(v0 + 1240);
          v237 = *(_QWORD *)(v0 + 1232);
          v240 = *(_QWORD *)(v0 + 1224);
          v243 = *(_QWORD *)(v0 + 1216);
          v245 = *(_QWORD *)(v0 + 1208);
          v247 = *(_QWORD *)(v0 + 1200);
          v249 = *(_QWORD *)(v0 + 1192);
          v251 = *(_QWORD *)(v0 + 1184);
          v253 = *(_QWORD *)(v0 + 1152);
          v258 = *(_QWORD *)(v0 + 1144);
          v266 = *(_QWORD *)(v0 + 1136);
          v270 = *(_QWORD *)(v0 + 1128);
          v273 = *(_QWORD *)(v0 + 1120);
          v274 = *(_QWORD *)(v0 + 1112);
          v275 = *(_QWORD *)(v0 + 1104);
          v276 = *(_QWORD *)(v0 + 1096);
          v279 = *(_QWORD *)(v0 + 1072);
          sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
          sub_1000D9530((uint64_t *)(v0 + 448));
          swift_release();
          sub_1000126B0(v167, type metadata accessor for SharingCircleKeyManager.Instruction);
          sub_1000126B0(v169, type metadata accessor for OwnedBeaconRecord);
          swift_weakDestroy(v0 + 824);
          sub_100004048(v171, &qword_1011063B8);
          sub_1000126B0(v170, type metadata accessor for KeyDropInterface.KeyAlignment);
          sub_1000126B0(v168, type metadata accessor for OwnedBeaconRecord);
          swift_task_dealloc(v164);
          swift_task_dealloc(v165);
          swift_task_dealloc(v166);
          swift_task_dealloc(v181);
          swift_task_dealloc(v182);
          swift_task_dealloc(v183);
          swift_task_dealloc(v184);
          swift_task_dealloc(v185);
          swift_task_dealloc(v186);
          swift_task_dealloc(v187);
          swift_task_dealloc(v188);
          swift_task_dealloc(v189);
          swift_task_dealloc(v190);
          swift_task_dealloc(v167);
          swift_task_dealloc(v168);
          swift_task_dealloc(v169);
          swift_task_dealloc(v191);
          swift_task_dealloc(v170);
          swift_task_dealloc(v192);
          swift_task_dealloc(v193);
          swift_task_dealloc(v194);
          swift_task_dealloc(v195);
          swift_task_dealloc(v196);
          swift_task_dealloc(v197);
          swift_task_dealloc(v198);
          swift_task_dealloc(v200);
          swift_task_dealloc(v202);
          swift_task_dealloc(v204);
          swift_task_dealloc(v171);
          swift_task_dealloc(v206);
          swift_task_dealloc(v208);
          swift_task_dealloc(v210);
          swift_task_dealloc(v212);
          swift_task_dealloc(v213);
          swift_task_dealloc(v214);
          swift_task_dealloc(v217);
          swift_task_dealloc(v219);
          swift_task_dealloc(v221);
          swift_task_dealloc(v223);
          swift_task_dealloc(v225);
          swift_task_dealloc(v227);
          swift_task_dealloc(v229);
          swift_task_dealloc(v232);
          swift_task_dealloc(v234);
          swift_task_dealloc(v235);
          swift_task_dealloc(v236);
          swift_task_dealloc(v237);
          swift_task_dealloc(v240);
          swift_task_dealloc(v243);
          swift_task_dealloc(v245);
          swift_task_dealloc(v247);
          swift_task_dealloc(v249);
          swift_task_dealloc(v251);
          swift_task_dealloc(v253);
          swift_task_dealloc(v258);
          swift_task_dealloc(v266);
          swift_task_dealloc(v270);
          swift_task_dealloc(v273);
          swift_task_dealloc(v274);
          swift_task_dealloc(v275);
          swift_task_dealloc(v276);
          swift_task_dealloc(v279);
          __asm { BR              X1 }
        }
        v130 = *(_QWORD *)(v129 + 8 * v131);
        if (v130)
        {
LABEL_39:
          v122 = v131;
LABEL_40:
          v124 = (v130 - 1) & v130;
          v125 = __clz(__rbit64(v130)) + (v122 << 6);
LABEL_41:
          *(_QWORD *)(v0 + 1824) = v124;
          *(_QWORD *)(v0 + 1816) = v122;
          v132 = *(unsigned __int8 *)(*(_QWORD *)(v126 + 48) + v125);
          *(_BYTE *)(v0 + 2037) = v132;
          __asm { BR              X8 }
        }
        while (1)
        {
          v122 = v131 + 1;
          if (__OFADD__(v131, 1))
            break;
          if (v122 >= v128)
            goto LABEL_49;
          v130 = *(_QWORD *)(v129 + 8 * v122);
          ++v131;
          if (v130)
            goto LABEL_40;
        }
      }
      __break(1u);
LABEL_54:
      v175 = *(_QWORD *)(v0 + 1856);
      v176 = *(_QWORD *)(v0 + 1848);
      v177 = *(_QWORD *)(v0 + 1688);
      v178 = *(_QWORD *)(v0 + 1608);
      v179 = *(_QWORD *)(v0 + 1600);
      v260 = *(_QWORD *)(v0 + 1504);
      v180 = *(_QWORD *)(v0 + 1248);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v267, (os_log_type_t)v264, "Keys to upload: %{public}s,\nadded: %{public}s.", v218, 0x16u);
      swift_arrayDestroy(v220, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v220, -1, -1);
      sub_100694894((uint64_t)v218);

      sub_10001BC14(v176, v175);
      sub_10001BC14(v242, v244);
      sub_10001EF3C(v246, v248);
      sub_10001EF3C(v250, v252);
      sub_10001EF3C(v272, v277);
      v75 = *(void (**)(uint64_t, uint64_t))(v178 + 8);
      v75(v177, v179);
      sub_1000126B0(v180, type metadata accessor for KeyDropInterface.KeyPackage);
      v114 = type metadata accessor for KeyDropInterface.KeyAlignment;
      v115 = v260;
LABEL_51:
      sub_1000126B0(v115, v114);
    }
    v123 = __clz(__rbit64(v121));
    v124 = (v121 - 1) & v121;
    v125 = v123 | (v122 << 6);
    v126 = *(_QWORD *)(v0 + 1784);
    goto LABEL_41;
  }
  v9 = v1 / ((double)(unint64_t)v4 * 60.0);
  if (v3 < v2)
  {
    if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
    {
      if (v9 > -1.0)
      {
        if (v9 < 1.84467441e19)
        {
          if (v8 - v6 > (unint64_t)v9)
            goto LABEL_11;
          goto LABEL_14;
        }
LABEL_59:
        __break(1u);
        JUMPOUT(0x1009300D0);
      }
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
LABEL_14:
  v265 = *(_QWORD *)(v0 + 1720);
  v76 = *(unsigned __int8 *)(v0 + 2024);
  v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
  v78 = *(_QWORD *)(v0 + 1696);
  v79 = *(_QWORD *)(v0 + 1600);
  v80 = *(_QWORD *)(v0 + 1592);
  v81 = *(_QWORD *)(v0 + 1056);
  v82 = (v76 + 16) & ~v76;
  v83 = *(_QWORD *)(v0 + 1576) + v82;
  v84 = v76 | 7;
  v85 = sub_100906BC0();
  v77(v78, v85, v79);
  v86 = swift_allocObject(&unk_10109DD08, 24, 7);
  *(_QWORD *)(v86 + 16) = v8;
  v87 = swift_allocObject(&unk_10109DD30, 32, 7);
  v88 = v8;
  v89 = v87;
  *(double *)(v87 + 16) = v9;
  *(_QWORD *)(v87 + 24) = v88;
  sub_10005972C(v81, v80, type metadata accessor for SharingCircleKeyManager.Instruction);
  v90 = swift_allocObject(&unk_10109DD58, v83, v84);
  sub_1000126EC(v80, v90 + v82, type metadata accessor for SharingCircleKeyManager.Instruction);
  v91 = swift_allocObject(&unk_10109DD80, 32, 7);
  *(_QWORD *)(v91 + 16) = sub_100960968;
  *(_QWORD *)(v91 + 24) = v90;
  v272 = Logger.logObject.getter(v91);
  LODWORD(v267) = static os_log_type_t.default.getter(v272);
  v277 = swift_allocObject(&unk_10109DDA8, 17, 7);
  *(_BYTE *)(v277 + 16) = 0;
  v92 = swift_allocObject(&unk_10109DDD0, 17, 7);
  *(_BYTE *)(v92 + 16) = 8;
  v93 = swift_allocObject(&unk_10109DDF8, 32, 7);
  *(_QWORD *)(v93 + 16) = sub_100243D00;
  *(_QWORD *)(v93 + 24) = v86;
  v94 = swift_allocObject(&unk_10109DE20, 32, 7);
  *(_QWORD *)(v94 + 16) = sub_1000584DC;
  *(_QWORD *)(v94 + 24) = v93;
  v95 = swift_allocObject(&unk_10109DE48, 17, 7);
  *(_BYTE *)(v95 + 16) = 0;
  v96 = swift_allocObject(&unk_10109DE70, 17, 7);
  *(_BYTE *)(v96 + 16) = 8;
  v97 = swift_allocObject(&unk_10109DE98, 32, 7);
  *(_QWORD *)(v97 + 16) = sub_100961254;
  *(_QWORD *)(v97 + 24) = v89;
  v98 = swift_allocObject(&unk_10109DEC0, 32, 7);
  *(_QWORD *)(v98 + 16) = sub_10005CD4C;
  *(_QWORD *)(v98 + 24) = v97;
  v99 = swift_allocObject(&unk_10109DEE8, 17, 7);
  *(_BYTE *)(v99 + 16) = 34;
  v100 = swift_allocObject(&unk_10109DF10, 17, 7);
  *(_BYTE *)(v100 + 16) = 8;
  v101 = swift_allocObject(&unk_10109DF38, 32, 7);
  *(_QWORD *)(v101 + 16) = sub_100963204;
  *(_QWORD *)(v101 + 24) = v91;
  v102 = swift_allocObject(&unk_10109DF60, 32, 7);
  *(_QWORD *)(v102 + 16) = sub_10005CBA4;
  *(_QWORD *)(v102 + 24) = v101;
  v103 = swift_allocObject(v265, 176, 7);
  sub_100882D28(v103, 9);
  *v104 = sub_10005CBC4;
  v104[1] = v277;
  v104[2] = sub_10005CBC4;
  v104[3] = v92;
  v104[4] = sub_10005CBB8;
  v104[5] = v94;
  v104[6] = sub_10005CBC4;
  v104[7] = v95;
  v104[8] = sub_10005CBC4;
  v104[9] = v96;
  v104[10] = sub_10005CBB8;
  v104[11] = v98;
  v104[12] = sub_10005CBC4;
  v104[13] = v99;
  v104[14] = sub_10005CBC4;
  v104[15] = v100;
  v104[16] = sub_10005CBB4;
  v104[17] = v102;
  swift_retain();
  v264 = v92;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled((os_log_t)v272, (os_log_type_t)v267))
  {
    v120 = *(_QWORD *)(v0 + 1848);
    v248 = *(_QWORD *)(v0 + 1608);
    v250 = *(_QWORD *)(v0 + 1856);
    v252 = *(_QWORD *)(v0 + 1600);
    v256 = *(_QWORD *)(v0 + 1696);
    v267 = *(NSObject **)(v0 + 1288);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    sub_10001BC14(v120, v250);
    v75 = *(void (**)(uint64_t, uint64_t))(v248 + 8);
    v75(v256, v252);
    sub_1000126B0((uint64_t)v267, type metadata accessor for KeySyncRecord);
    v119 = *(_QWORD *)(v0 + 1792);
    goto LABEL_28;
  }
  v252 = v98;
  v246 = v102;
  v248 = v100;
  v250 = v99;
  v105 = *(_QWORD *)(v0 + 1792);
  v106 = (uint8_t *)sub_1006948A0(32);
  v107 = swift_slowAlloc(32, -1);
  *(_QWORD *)(v0 + 1032) = 0;
  v242 = v107;
  v244 = (unint64_t)v106;
  *(_QWORD *)(v0 + 1040) = v107;
  *(_WORD *)v106 = 770;
  *(_QWORD *)(v0 + 1024) = v106 + 2;
  *(_QWORD *)(v0 + 584) = sub_10005CBC4;
  *(_QWORD *)(v0 + 592) = v277;
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584), v0 + 1024, v0 + 1032, v0 + 1040);
  if (!v105)
  {
    swift_release();
    *(_QWORD *)(v0 + 584) = sub_10005CBC4;
    *(_QWORD *)(v0 + 592) = v264;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584), v0 + 1024, v0 + 1032, v0 + 1040);
    swift_release();
    *(_QWORD *)(v0 + 584) = sub_10005CBB8;
    *(_QWORD *)(v0 + 592) = v94;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584), v0 + 1024, v0 + 1032, v0 + 1040);
    swift_release();
    *(_QWORD *)(v0 + 584) = sub_10005CBC4;
    *(_QWORD *)(v0 + 592) = v95;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584), v0 + 1024, v0 + 1032, v0 + 1040);
    swift_release();
    *(_QWORD *)(v0 + 584) = sub_10005CBC4;
    *(_QWORD *)(v0 + 592) = v96;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584), v0 + 1024, v0 + 1032, v0 + 1040);
    swift_release();
    *(_QWORD *)(v0 + 584) = sub_10005CBB8;
    *(_QWORD *)(v0 + 592) = v98;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584), v0 + 1024, v0 + 1032, v0 + 1040);
    swift_release();
    *(_QWORD *)(v0 + 584) = sub_10005CBC4;
    *(_QWORD *)(v0 + 592) = v99;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584), v0 + 1024, v0 + 1032, v0 + 1040);
    swift_release();
    *(_QWORD *)(v0 + 584) = sub_10005CBC4;
    *(_QWORD *)(v0 + 592) = v100;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584), v0 + 1024, v0 + 1032, v0 + 1040);
    swift_release();
    *(_QWORD *)(v0 + 584) = sub_10005CBB4;
    *(_QWORD *)(v0 + 592) = v102;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584), v0 + 1024, v0 + 1032, v0 + 1040);
    v108 = *(_QWORD *)(v0 + 1856);
    v109 = *(_QWORD *)(v0 + 1848);
    v110 = *(_QWORD *)(v0 + 1696);
    v111 = *(_QWORD *)(v0 + 1608);
    v112 = *(_QWORD *)(v0 + 1600);
    v113 = *(_QWORD *)(v0 + 1288);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v272, (os_log_type_t)v267, "Secondary key %llu is not beyond low water %llu for %{public}s.", v106, 0x20u);
    swift_arrayDestroy(v242, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v242, -1, -1);
    sub_100694894((uint64_t)v106);

    sub_10001BC14(v109, v108);
    v75 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
    v75(v110, v112);
    v114 = type metadata accessor for KeySyncRecord;
    v115 = v113;
    goto LABEL_51;
  }
  v161 = *(_QWORD *)(v0 + 1584);
  v162 = *(_QWORD *)(v0 + 1544);
  swift_errorRelease(v105);
  sub_1000126B0(v161, type metadata accessor for SharingCircleKeyManager.Instruction);
  return sub_1000126B0(v162, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100930108()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1896);
  *(_QWORD *)(*v1 + 1904) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100946514;
  else
    v4 = sub_10093016C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1064), 0);
}

uint64_t sub_10093016C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  os_log_type_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (**v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v1 = *(_QWORD *)(v0 + 1168);
  v2 = *(_QWORD *)(v0 + 1152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1 + 48))(v2, 1, *(_QWORD *)(v0 + 1160)) == 1)
  {
    sub_100004048(v2, &qword_10110D4C0);
    v3 = *(_QWORD *)(v0 + 1904);
    v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1808);
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
    goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(v0 + 2024);
  v7 = *(_QWORD *)(v0 + 1672);
  v116 = *(_QWORD *)(v0 + 1600);
  v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1240);
  v10 = *(_QWORD *)(v0 + 1232);
  v128 = *(_QWORD *)(v0 + 1720);
  v132 = *(_QWORD *)(v0 + 1176);
  v11 = *(_QWORD *)(v0 + 1056);
  v12 = (v6 + 16) & ~v6;
  v121 = v6 | 7;
  v124 = *(_QWORD *)(v0 + 1576) + v12;
  sub_1000126EC(v2, v10, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_1009069AC(v9);
  v13 = sub_100906BC0();
  v118(v7, v13, v116);
  sub_10005972C(v11, v8, type metadata accessor for SharingCircleKeyManager.Instruction);
  v14 = swift_allocObject(&unk_10109D768, v124, v121);
  sub_1000126EC(v8, v14 + v12, type metadata accessor for SharingCircleKeyManager.Instruction);
  v15 = swift_allocObject(&unk_10109D790, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100960968;
  *(_QWORD *)(v15 + 24) = v14;
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  v16 = *(unsigned __int8 *)(v1 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = v16 | 7;
  v19 = swift_allocObject(&unk_10109D7B8, v17 + v132, v16 | 7);
  sub_1000126EC(v9, v19 + v17, type metadata accessor for KeyDropInterface.KeyPackage);
  v20 = swift_allocObject(&unk_10109D7E0, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100960DF0;
  *(_QWORD *)(v20 + 24) = v19;
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  v21 = swift_allocObject(&unk_10109D808, v17 + v132, v18);
  sub_1000126EC(v9, v21 + v17, type metadata accessor for KeyDropInterface.KeyPackage);
  v122 = swift_allocObject(&unk_10109D830, 32, 7);
  *(_QWORD *)(v122 + 16) = sub_100960F24;
  *(_QWORD *)(v122 + 24) = v21;
  v133 = Logger.logObject.getter(v122);
  v125 = static os_log_type_t.default.getter(v133);
  v135 = swift_allocObject(&unk_10109D858, 17, 7);
  *(_BYTE *)(v135 + 16) = 34;
  v22 = swift_allocObject(&unk_10109D880, 17, 7);
  *(_BYTE *)(v22 + 16) = 8;
  v23 = swift_allocObject(&unk_10109D8A8, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_100963204;
  *(_QWORD *)(v23 + 24) = v15;
  v24 = swift_allocObject(&unk_10109D8D0, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10005CBA4;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = swift_allocObject(&unk_10109D8F8, 17, 7);
  *(_BYTE *)(v25 + 16) = 34;
  v26 = swift_allocObject(&unk_10109D920, 17, 7);
  *(_BYTE *)(v26 + 16) = 8;
  v27 = swift_allocObject(&unk_10109D948, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_100963208;
  *(_QWORD *)(v27 + 24) = v20;
  v28 = swift_allocObject(&unk_10109D970, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10005CBA4;
  *(_QWORD *)(v28 + 24) = v27;
  v29 = swift_allocObject(&unk_10109D998, 17, 7);
  *(_BYTE *)(v29 + 16) = 34;
  v30 = v28;
  v31 = swift_allocObject(&unk_10109D9C0, 17, 7);
  *(_BYTE *)(v31 + 16) = 8;
  v32 = swift_allocObject(&unk_10109D9E8, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_10096320C;
  *(_QWORD *)(v32 + 24) = v122;
  v33 = swift_allocObject(&unk_10109DA10, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_10005CBA4;
  *(_QWORD *)(v33 + 24) = v32;
  v34 = swift_allocObject(v128, 176, 7);
  sub_100882D28(v34, 9);
  *v35 = sub_10005CBC4;
  v35[1] = v135;
  v35[2] = sub_10005CBC4;
  v35[3] = v22;
  v35[4] = sub_10005CBB4;
  v35[5] = v24;
  v35[6] = sub_10005CBC4;
  v35[7] = v25;
  v35[8] = sub_10005CBC4;
  v35[9] = v26;
  v35[10] = sub_10005CBB4;
  v35[11] = v30;
  v35[12] = sub_10005CBC4;
  v35[13] = v29;
  v35[14] = sub_10005CBC4;
  v35[15] = v31;
  v35[16] = sub_10005CBB4;
  v35[17] = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v119 = v30;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v133, v125))
  {
    v43 = *(_QWORD *)(v0 + 1608);
    v44 = *(_QWORD *)(v0 + 1600);
    v126 = *(_QWORD *)(v0 + 1672);
    v130 = *(_QWORD *)(v0 + 1232);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v5 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v5(v126, v44);
    sub_1000126B0(v130, type metadata accessor for KeyDropInterface.KeyPackage);
    v3 = *(_QWORD *)(v0 + 1904);
    v4 = v5;
LABEL_7:
    v45 = *(_QWORD *)(v0 + 1824);
    v46 = *(_QWORD *)(v0 + 1816);
    *(_QWORD *)(v0 + 1808) = v4;
    *(_QWORD *)(v0 + 1800) = v5;
    *(_QWORD *)(v0 + 1792) = v3;
    if (v45)
    {
      v47 = __clz(__rbit64(v45));
      v48 = (v45 - 1) & v45;
      v49 = v47 | (v46 << 6);
      v50 = *(_QWORD *)(v0 + 1784);
      goto LABEL_20;
    }
    if (__OFADD__(v46++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v52 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
    v50 = *(_QWORD *)(v0 + 1784);
    if (v46 < v52)
    {
      v53 = v50 + 56;
      v54 = *(_QWORD *)(v50 + 56 + 8 * v46);
      if (v54)
      {
LABEL_19:
        v48 = (v54 - 1) & v54;
        v49 = __clz(__rbit64(v54)) + (v46 << 6);
LABEL_20:
        *(_QWORD *)(v0 + 1824) = v48;
        *(_QWORD *)(v0 + 1816) = v46;
        v56 = *(unsigned __int8 *)(*(_QWORD *)(v50 + 48) + v49);
        *(_BYTE *)(v0 + 2037) = v56;
        __asm { BR              X9 }
      }
      v55 = v46 + 1;
      if (v46 + 1 < v52)
      {
        v54 = *(_QWORD *)(v53 + 8 * v55);
        if (v54)
          goto LABEL_18;
        v55 = v46 + 2;
        if (v46 + 2 >= v52)
          goto LABEL_25;
        v54 = *(_QWORD *)(v53 + 8 * v55);
        if (v54)
        {
LABEL_18:
          v46 = v55;
          goto LABEL_19;
        }
        v55 = v46 + 3;
        if (v46 + 3 < v52)
        {
          v54 = *(_QWORD *)(v53 + 8 * v55);
          if (v54)
            goto LABEL_18;
          while (1)
          {
            v46 = v55 + 1;
            if (__OFADD__(v55, 1))
              break;
            if (v46 >= v52)
              goto LABEL_25;
            v54 = *(_QWORD *)(v53 + 8 * v46);
            ++v55;
            if (v54)
              goto LABEL_19;
          }
LABEL_28:
          __break(1u);
          JUMPOUT(0x1009329E8);
        }
      }
    }
LABEL_25:
    v57 = *(_QWORD *)(v0 + 1704);
    v58 = *(_QWORD *)(v0 + 1696);
    v59 = *(_QWORD *)(v0 + 1688);
    v68 = *(_QWORD *)(v0 + 1680);
    v69 = *(_QWORD *)(v0 + 1672);
    v70 = *(_QWORD *)(v0 + 1664);
    v71 = *(_QWORD *)(v0 + 1656);
    v72 = *(_QWORD *)(v0 + 1648);
    v73 = *(_QWORD *)(v0 + 1640);
    v74 = *(_QWORD *)(v0 + 1632);
    v75 = *(_QWORD *)(v0 + 1624);
    v76 = *(_QWORD *)(v0 + 1616);
    v77 = *(_QWORD *)(v0 + 1592);
    v60 = *(_QWORD *)(v0 + 1584);
    v61 = *(_QWORD *)(v0 + 1552);
    v62 = *(_QWORD *)(v0 + 1544);
    v63 = *(_QWORD *)(v0 + 1512);
    v78 = *(_QWORD *)(v0 + 1520);
    v79 = *(_QWORD *)(v0 + 1504);
    v80 = *(_QWORD *)(v0 + 1496);
    v81 = *(_QWORD *)(v0 + 1488);
    v82 = *(_QWORD *)(v0 + 1480);
    v83 = *(_QWORD *)(v0 + 1472);
    v84 = *(_QWORD *)(v0 + 1448);
    v85 = *(_QWORD *)(v0 + 1440);
    v86 = *(_QWORD *)(v0 + 1432);
    v87 = *(_QWORD *)(v0 + 1424);
    v64 = *(_QWORD *)(v0 + 1392);
    v88 = *(_QWORD *)(v0 + 1416);
    v89 = *(_QWORD *)(v0 + 1384);
    v90 = *(_QWORD *)(v0 + 1376);
    v91 = *(_QWORD *)(v0 + 1368);
    v92 = *(_QWORD *)(v0 + 1360);
    v93 = *(_QWORD *)(v0 + 1352);
    v94 = *(_QWORD *)(v0 + 1344);
    v95 = *(_QWORD *)(v0 + 1336);
    v96 = *(_QWORD *)(v0 + 1328);
    v97 = *(_QWORD *)(v0 + 1320);
    v98 = *(_QWORD *)(v0 + 1312);
    v99 = *(_QWORD *)(v0 + 1304);
    v100 = *(_QWORD *)(v0 + 1296);
    v101 = *(_QWORD *)(v0 + 1288);
    v102 = *(_QWORD *)(v0 + 1264);
    v103 = *(_QWORD *)(v0 + 1256);
    v104 = *(_QWORD *)(v0 + 1248);
    v105 = *(_QWORD *)(v0 + 1240);
    v106 = *(_QWORD *)(v0 + 1232);
    v107 = *(_QWORD *)(v0 + 1224);
    v108 = *(_QWORD *)(v0 + 1216);
    v110 = *(_QWORD *)(v0 + 1208);
    v111 = *(_QWORD *)(v0 + 1200);
    v112 = *(_QWORD *)(v0 + 1192);
    v113 = *(_QWORD *)(v0 + 1184);
    v114 = *(_QWORD *)(v0 + 1152);
    v115 = *(_QWORD *)(v0 + 1144);
    v117 = *(_QWORD *)(v0 + 1136);
    v120 = *(_QWORD *)(v0 + 1128);
    v123 = *(_QWORD *)(v0 + 1120);
    v127 = *(_QWORD *)(v0 + 1112);
    v131 = *(_QWORD *)(v0 + 1104);
    v134 = *(_QWORD *)(v0 + 1096);
    v136 = *(_QWORD *)(v0 + 1072);
    sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
    sub_1000D9530((uint64_t *)(v0 + 448));
    swift_release();
    sub_1000126B0(v60, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
    swift_weakDestroy(v0 + 824);
    sub_100004048(v64, &qword_1011063B8);
    sub_1000126B0(v63, type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_1000126B0(v61, type metadata accessor for OwnedBeaconRecord);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v78);
    swift_task_dealloc(v63);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v64);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v127);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v136);
    __asm { BR              X1 }
  }
  v36 = *(_QWORD *)(v0 + 1904);
  v37 = (uint8_t *)sub_1006948A0(32);
  v38 = swift_slowAlloc(96, -1);
  *(_QWORD *)(v0 + 936) = 0;
  v109 = v38;
  *(_QWORD *)(v0 + 944) = v38;
  *(_WORD *)v37 = 770;
  *(_QWORD *)(v0 + 928) = v37 + 2;
  *(_QWORD *)(v0 + 632) = sub_10005CBC4;
  *(_QWORD *)(v0 + 640) = v135;
  v129 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 632);
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 632), v0 + 928, v0 + 936, v0 + 944);
  if (!v36)
  {
    swift_release();
    *(_QWORD *)(v0 + 632) = sub_10005CBC4;
    *(_QWORD *)(v0 + 640) = v22;
    sub_1006948A8(v129, v0 + 928, v0 + 936, v0 + 944);
    swift_release();
    *(_QWORD *)(v0 + 632) = sub_10005CBB4;
    *(_QWORD *)(v0 + 640) = v24;
    sub_1006948A8(v129, v0 + 928, v0 + 936, v0 + 944);
    swift_release();
    *(_QWORD *)(v0 + 632) = sub_10005CBC4;
    *(_QWORD *)(v0 + 640) = v25;
    sub_1006948A8(v129, v0 + 928, v0 + 936, v0 + 944);
    swift_release();
    *(_QWORD *)(v0 + 632) = sub_10005CBC4;
    *(_QWORD *)(v0 + 640) = v26;
    sub_1006948A8(v129, v0 + 928, v0 + 936, v0 + 944);
    swift_release();
    *(_QWORD *)(v0 + 632) = sub_10005CBB4;
    *(_QWORD *)(v0 + 640) = v119;
    sub_1006948A8(v129, v0 + 928, v0 + 936, v0 + 944);
    swift_release();
    *(_QWORD *)(v0 + 632) = sub_10005CBC4;
    *(_QWORD *)(v0 + 640) = v29;
    sub_1006948A8(v129, v0 + 928, v0 + 936, v0 + 944);
    swift_release();
    *(_QWORD *)(v0 + 632) = sub_10005CBC4;
    *(_QWORD *)(v0 + 640) = v31;
    sub_1006948A8(v129, v0 + 928, v0 + 936, v0 + 944);
    swift_release();
    *(_QWORD *)(v0 + 632) = sub_10005CBB4;
    *(_QWORD *)(v0 + 640) = v33;
    sub_1006948A8(v129, v0 + 928, v0 + 936, v0 + 944);
    v39 = *(_QWORD *)(v0 + 1672);
    v40 = *(_QWORD *)(v0 + 1608);
    v41 = *(_QWORD *)(v0 + 1600);
    v42 = *(_QWORD *)(v0 + 1232);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v133, v125, "Keys to upload: %{public}s,\nadded: %{public}s,\nkey indexes: %{public}s.", v37, 0x20u);
    swift_arrayDestroy(v109, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v109, -1, -1);
    sub_100694894((uint64_t)v37);

    v5 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v5(v39, v41);
    sub_1000126B0(v42, type metadata accessor for KeyDropInterface.KeyPackage);
    v3 = 0;
    v4 = v5;
    goto LABEL_7;
  }
  v65 = *(_QWORD *)(v0 + 1584);
  v66 = *(_QWORD *)(v0 + 1544);
  swift_errorRelease(v36);
  sub_1000126B0(v65, type metadata accessor for SharingCircleKeyManager.Instruction);
  return sub_1000126B0(v66, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100932A20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1920));
  return swift_task_switch(sub_100932A78, v1, 0);
}

uint64_t sub_100932A78()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1912);
  v2 = *(_QWORD *)(v0 + 1456);
  v3 = *(_QWORD *)(v0 + 1376);
  sub_10000F9B8(*(_QWORD *)(v0 + 1392), v3, &qword_1011063B8);
  if (v1(v3, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 1376), &qword_1011063B8);
    v4 = *(_QWORD *)(v0 + 1800);
    v5 = *(_QWORD *)(v0 + 1792);
    v6 = *(_QWORD *)(v0 + 1824);
    v7 = *(_QWORD *)(v0 + 1816);
    *(_QWORD *)(v0 + 1808) = *(_QWORD *)(v0 + 1808);
    *(_QWORD *)(v0 + 1800) = v4;
    *(_QWORD *)(v0 + 1792) = v5;
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v9 = (v6 - 1) & v6;
      v10 = v8 | (v7 << 6);
      v11 = *(_QWORD *)(v0 + 1784);
      goto LABEL_15;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    v13 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
    v11 = *(_QWORD *)(v0 + 1784);
    if (v7 < v13)
    {
      v14 = v11 + 56;
      v15 = *(_QWORD *)(v11 + 56 + 8 * v7);
      if (v15)
      {
LABEL_14:
        v9 = (v15 - 1) & v15;
        v10 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_15:
        *(_QWORD *)(v0 + 1824) = v9;
        *(_QWORD *)(v0 + 1816) = v7;
        v17 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 48) + v10);
        *(_BYTE *)(v0 + 2037) = v17;
        __asm { BR              X8 }
      }
      v16 = v7 + 1;
      if (v7 + 1 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
          goto LABEL_13;
        v16 = v7 + 2;
        if (v7 + 2 >= v13)
          goto LABEL_20;
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_13:
          v7 = v16;
          goto LABEL_14;
        }
        v16 = v7 + 3;
        if (v7 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * v16);
          if (v15)
            goto LABEL_13;
          while (1)
          {
            v7 = v16 + 1;
            if (__OFADD__(v16, 1))
              break;
            if (v7 >= v13)
              goto LABEL_20;
            v15 = *(_QWORD *)(v14 + 8 * v7);
            ++v16;
            if (v15)
              goto LABEL_14;
          }
LABEL_23:
          __break(1u);
          JUMPOUT(0x100934AECLL);
        }
      }
    }
LABEL_20:
    v18 = *(_QWORD *)(v0 + 1704);
    v19 = *(_QWORD *)(v0 + 1696);
    v20 = *(_QWORD *)(v0 + 1688);
    v28 = *(_QWORD *)(v0 + 1680);
    v29 = *(_QWORD *)(v0 + 1672);
    v30 = *(_QWORD *)(v0 + 1664);
    v31 = *(_QWORD *)(v0 + 1656);
    v32 = *(_QWORD *)(v0 + 1648);
    v33 = *(_QWORD *)(v0 + 1640);
    v34 = *(_QWORD *)(v0 + 1632);
    v35 = *(_QWORD *)(v0 + 1624);
    v36 = *(_QWORD *)(v0 + 1616);
    v37 = *(_QWORD *)(v0 + 1592);
    v21 = *(_QWORD *)(v0 + 1584);
    v22 = *(_QWORD *)(v0 + 1552);
    v23 = *(_QWORD *)(v0 + 1544);
    v24 = *(_QWORD *)(v0 + 1512);
    v38 = *(_QWORD *)(v0 + 1520);
    v39 = *(_QWORD *)(v0 + 1504);
    v40 = *(_QWORD *)(v0 + 1496);
    v41 = *(_QWORD *)(v0 + 1488);
    v42 = *(_QWORD *)(v0 + 1480);
    v43 = *(_QWORD *)(v0 + 1472);
    v44 = *(_QWORD *)(v0 + 1448);
    v45 = *(_QWORD *)(v0 + 1440);
    v46 = *(_QWORD *)(v0 + 1432);
    v47 = *(_QWORD *)(v0 + 1424);
    v25 = *(_QWORD *)(v0 + 1392);
    v48 = *(_QWORD *)(v0 + 1416);
    v49 = *(_QWORD *)(v0 + 1384);
    v50 = *(_QWORD *)(v0 + 1376);
    v51 = *(_QWORD *)(v0 + 1368);
    v52 = *(_QWORD *)(v0 + 1360);
    v53 = *(_QWORD *)(v0 + 1352);
    v54 = *(_QWORD *)(v0 + 1344);
    v55 = *(_QWORD *)(v0 + 1336);
    v56 = *(_QWORD *)(v0 + 1328);
    v57 = *(_QWORD *)(v0 + 1320);
    v58 = *(_QWORD *)(v0 + 1312);
    v59 = *(_QWORD *)(v0 + 1304);
    v60 = *(_QWORD *)(v0 + 1296);
    v61 = *(_QWORD *)(v0 + 1288);
    v62 = *(_QWORD *)(v0 + 1264);
    v63 = *(_QWORD *)(v0 + 1256);
    v64 = *(_QWORD *)(v0 + 1248);
    v65 = *(_QWORD *)(v0 + 1240);
    v66 = *(_QWORD *)(v0 + 1232);
    v67 = *(_QWORD *)(v0 + 1224);
    v68 = *(_QWORD *)(v0 + 1216);
    v69 = *(_QWORD *)(v0 + 1208);
    v70 = *(_QWORD *)(v0 + 1200);
    v71 = *(_QWORD *)(v0 + 1192);
    v72 = *(_QWORD *)(v0 + 1184);
    v73 = *(_QWORD *)(v0 + 1152);
    v74 = *(_QWORD *)(v0 + 1144);
    v75 = *(_QWORD *)(v0 + 1136);
    v76 = *(_QWORD *)(v0 + 1128);
    v77 = *(_QWORD *)(v0 + 1120);
    v78 = *(_QWORD *)(v0 + 1112);
    v79 = *(_QWORD *)(v0 + 1104);
    v80 = *(_QWORD *)(v0 + 1096);
    v81 = *(_QWORD *)(v0 + 1072);
    sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
    sub_1000D9530((uint64_t *)(v0 + 448));
    swift_release();
    sub_1000126B0(v21, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v23, type metadata accessor for OwnedBeaconRecord);
    swift_weakDestroy(v0 + 824);
    sub_100004048(v25, &qword_1011063B8);
    sub_1000126B0(v24, type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_1000126B0(v22, type metadata accessor for OwnedBeaconRecord);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v38);
    swift_task_dealloc(v24);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v25);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    __asm { BR              X1 }
  }
  sub_1000126EC(*(_QWORD *)(v0 + 1376), *(_QWORD *)(v0 + 1488), type metadata accessor for KeyDropInterface.KeyAlignment);
  v26 = (_QWORD *)swift_task_alloc(dword_10110D4EC);
  *(_QWORD *)(v0 + 1928) = v26;
  *v26 = v0;
  v26[1] = sub_100934B24;
  return sub_10094FB6C(*(_QWORD *)(v0 + 1144), *(_QWORD *)(v0 + 1056), *(_QWORD *)(v0 + 1552), *(_QWORD *)(v0 + 1488), 0, *(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
}

uint64_t sub_100934B24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1928);
  *(_QWORD *)(*v1 + 1936) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009485B0;
  else
    v4 = sub_100934B88;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1064), 0);
}

uint64_t sub_100934B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (**v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v1 = *(_QWORD *)(v0 + 1168);
  v2 = *(_QWORD *)(v0 + 1144);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1 + 48))(v2, 1, *(_QWORD *)(v0 + 1160)) == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 1488), type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_100004048(v2, &qword_10110D4C0);
    v3 = *(_QWORD *)(v0 + 1936);
    v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1808);
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
    goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(v0 + 2024);
  v7 = *(_QWORD *)(v0 + 1664);
  v117 = *(_QWORD *)(v0 + 1600);
  v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1240);
  v10 = *(_QWORD *)(v0 + 1224);
  v130 = *(_QWORD *)(v0 + 1720);
  v134 = *(_QWORD *)(v0 + 1176);
  v11 = *(_QWORD *)(v0 + 1056);
  v12 = (v6 + 16) & ~v6;
  v123 = v6 | 7;
  v126 = *(_QWORD *)(v0 + 1576) + v12;
  sub_1000126EC(v2, v10, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_1009069AC(v9);
  v13 = sub_100906BC0();
  v120(v7, v13, v117);
  sub_10005972C(v11, v8, type metadata accessor for SharingCircleKeyManager.Instruction);
  v14 = swift_allocObject(&unk_10109D498, v126, v123);
  sub_1000126EC(v8, v14 + v12, type metadata accessor for SharingCircleKeyManager.Instruction);
  v15 = swift_allocObject(&unk_10109D4C0, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100960968;
  *(_QWORD *)(v15 + 24) = v14;
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  v16 = *(unsigned __int8 *)(v1 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = v16 | 7;
  v19 = swift_allocObject(&unk_10109D4E8, v17 + v134, v16 | 7);
  sub_1000126EC(v9, v19 + v17, type metadata accessor for KeyDropInterface.KeyPackage);
  v20 = swift_allocObject(&unk_10109D510, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100960DF0;
  *(_QWORD *)(v20 + 24) = v19;
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  v21 = swift_allocObject(&unk_10109D538, v17 + v134, v18);
  sub_1000126EC(v9, v21 + v17, type metadata accessor for KeyDropInterface.KeyPackage);
  v124 = swift_allocObject(&unk_10109D560, 32, 7);
  *(_QWORD *)(v124 + 16) = sub_100960F24;
  *(_QWORD *)(v124 + 24) = v21;
  v135 = Logger.logObject.getter(v124);
  v127 = static os_log_type_t.default.getter(v135);
  v137 = swift_allocObject(&unk_10109D588, 17, 7);
  *(_BYTE *)(v137 + 16) = 34;
  v22 = swift_allocObject(&unk_10109D5B0, 17, 7);
  *(_BYTE *)(v22 + 16) = 8;
  v23 = swift_allocObject(&unk_10109D5D8, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_100963204;
  *(_QWORD *)(v23 + 24) = v15;
  v24 = swift_allocObject(&unk_10109D600, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10005CBA4;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = swift_allocObject(&unk_10109D628, 17, 7);
  *(_BYTE *)(v25 + 16) = 34;
  v26 = swift_allocObject(&unk_10109D650, 17, 7);
  *(_BYTE *)(v26 + 16) = 8;
  v27 = swift_allocObject(&unk_10109D678, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_100963208;
  *(_QWORD *)(v27 + 24) = v20;
  v28 = swift_allocObject(&unk_10109D6A0, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10005CBA4;
  *(_QWORD *)(v28 + 24) = v27;
  v29 = swift_allocObject(&unk_10109D6C8, 17, 7);
  *(_BYTE *)(v29 + 16) = 34;
  v30 = v28;
  v31 = swift_allocObject(&unk_10109D6F0, 17, 7);
  *(_BYTE *)(v31 + 16) = 8;
  v32 = swift_allocObject(&unk_10109D718, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_10096320C;
  *(_QWORD *)(v32 + 24) = v124;
  v33 = swift_allocObject(&unk_10109D740, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_10005CBA4;
  *(_QWORD *)(v33 + 24) = v32;
  v34 = swift_allocObject(v130, 176, 7);
  sub_100882D28(v34, 9);
  *v35 = sub_10005CBC4;
  v35[1] = v137;
  v35[2] = sub_10005CBC4;
  v35[3] = v22;
  v35[4] = sub_10005CBB4;
  v35[5] = v24;
  v35[6] = sub_10005CBC4;
  v35[7] = v25;
  v35[8] = sub_10005CBC4;
  v35[9] = v26;
  v35[10] = sub_10005CBB4;
  v35[11] = v30;
  v35[12] = sub_10005CBC4;
  v35[13] = v29;
  v35[14] = sub_10005CBC4;
  v35[15] = v31;
  v35[16] = sub_10005CBB4;
  v35[17] = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v121 = v30;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v135, v127))
  {
    v118 = *(_QWORD *)(v0 + 1664);
    v44 = *(_QWORD *)(v0 + 1608);
    v45 = *(_QWORD *)(v0 + 1600);
    v128 = *(_QWORD *)(v0 + 1224);
    v132 = *(_QWORD *)(v0 + 1488);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v5 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v5(v118, v45);
    sub_1000126B0(v128, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v132, type metadata accessor for KeyDropInterface.KeyAlignment);
    v3 = *(_QWORD *)(v0 + 1936);
    v4 = v5;
LABEL_7:
    v46 = *(_QWORD *)(v0 + 1824);
    v47 = *(_QWORD *)(v0 + 1816);
    *(_QWORD *)(v0 + 1808) = v4;
    *(_QWORD *)(v0 + 1800) = v5;
    *(_QWORD *)(v0 + 1792) = v3;
    if (v46)
    {
      v48 = __clz(__rbit64(v46));
      v49 = (v46 - 1) & v46;
      v50 = v48 | (v47 << 6);
      v51 = *(_QWORD *)(v0 + 1784);
      goto LABEL_20;
    }
    if (__OFADD__(v47++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v53 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
    v51 = *(_QWORD *)(v0 + 1784);
    if (v47 < v53)
    {
      v54 = v51 + 56;
      v55 = *(_QWORD *)(v51 + 56 + 8 * v47);
      if (v55)
      {
LABEL_19:
        v49 = (v55 - 1) & v55;
        v50 = __clz(__rbit64(v55)) + (v47 << 6);
LABEL_20:
        *(_QWORD *)(v0 + 1824) = v49;
        *(_QWORD *)(v0 + 1816) = v47;
        v57 = *(unsigned __int8 *)(*(_QWORD *)(v51 + 48) + v50);
        *(_BYTE *)(v0 + 2037) = v57;
        __asm { BR              X9 }
      }
      v56 = v47 + 1;
      if (v47 + 1 < v53)
      {
        v55 = *(_QWORD *)(v54 + 8 * v56);
        if (v55)
          goto LABEL_18;
        v56 = v47 + 2;
        if (v47 + 2 >= v53)
          goto LABEL_25;
        v55 = *(_QWORD *)(v54 + 8 * v56);
        if (v55)
        {
LABEL_18:
          v47 = v56;
          goto LABEL_19;
        }
        v56 = v47 + 3;
        if (v47 + 3 < v53)
        {
          v55 = *(_QWORD *)(v54 + 8 * v56);
          if (v55)
            goto LABEL_18;
          while (1)
          {
            v47 = v56 + 1;
            if (__OFADD__(v56, 1))
              break;
            if (v47 >= v53)
              goto LABEL_25;
            v55 = *(_QWORD *)(v54 + 8 * v47);
            ++v56;
            if (v55)
              goto LABEL_19;
          }
LABEL_28:
          __break(1u);
          JUMPOUT(0x100937440);
        }
      }
    }
LABEL_25:
    v58 = *(_QWORD *)(v0 + 1704);
    v59 = *(_QWORD *)(v0 + 1696);
    v60 = *(_QWORD *)(v0 + 1688);
    v69 = *(_QWORD *)(v0 + 1680);
    v70 = *(_QWORD *)(v0 + 1672);
    v71 = *(_QWORD *)(v0 + 1664);
    v72 = *(_QWORD *)(v0 + 1656);
    v73 = *(_QWORD *)(v0 + 1648);
    v74 = *(_QWORD *)(v0 + 1640);
    v75 = *(_QWORD *)(v0 + 1632);
    v76 = *(_QWORD *)(v0 + 1624);
    v77 = *(_QWORD *)(v0 + 1616);
    v78 = *(_QWORD *)(v0 + 1592);
    v61 = *(_QWORD *)(v0 + 1584);
    v62 = *(_QWORD *)(v0 + 1552);
    v63 = *(_QWORD *)(v0 + 1544);
    v64 = *(_QWORD *)(v0 + 1512);
    v79 = *(_QWORD *)(v0 + 1520);
    v80 = *(_QWORD *)(v0 + 1504);
    v81 = *(_QWORD *)(v0 + 1496);
    v82 = *(_QWORD *)(v0 + 1488);
    v83 = *(_QWORD *)(v0 + 1480);
    v84 = *(_QWORD *)(v0 + 1472);
    v85 = *(_QWORD *)(v0 + 1448);
    v86 = *(_QWORD *)(v0 + 1440);
    v87 = *(_QWORD *)(v0 + 1432);
    v88 = *(_QWORD *)(v0 + 1424);
    v65 = *(_QWORD *)(v0 + 1392);
    v89 = *(_QWORD *)(v0 + 1416);
    v90 = *(_QWORD *)(v0 + 1384);
    v91 = *(_QWORD *)(v0 + 1376);
    v92 = *(_QWORD *)(v0 + 1368);
    v93 = *(_QWORD *)(v0 + 1360);
    v94 = *(_QWORD *)(v0 + 1352);
    v95 = *(_QWORD *)(v0 + 1344);
    v96 = *(_QWORD *)(v0 + 1336);
    v97 = *(_QWORD *)(v0 + 1328);
    v98 = *(_QWORD *)(v0 + 1320);
    v99 = *(_QWORD *)(v0 + 1312);
    v100 = *(_QWORD *)(v0 + 1304);
    v101 = *(_QWORD *)(v0 + 1296);
    v102 = *(_QWORD *)(v0 + 1288);
    v103 = *(_QWORD *)(v0 + 1264);
    v104 = *(_QWORD *)(v0 + 1256);
    v105 = *(_QWORD *)(v0 + 1248);
    v106 = *(_QWORD *)(v0 + 1240);
    v107 = *(_QWORD *)(v0 + 1232);
    v108 = *(_QWORD *)(v0 + 1224);
    v109 = *(_QWORD *)(v0 + 1216);
    v111 = *(_QWORD *)(v0 + 1208);
    v112 = *(_QWORD *)(v0 + 1200);
    v113 = *(_QWORD *)(v0 + 1192);
    v114 = *(_QWORD *)(v0 + 1184);
    v115 = *(_QWORD *)(v0 + 1152);
    v116 = *(_QWORD *)(v0 + 1144);
    v119 = *(_QWORD *)(v0 + 1136);
    v122 = *(_QWORD *)(v0 + 1128);
    v125 = *(_QWORD *)(v0 + 1120);
    v129 = *(_QWORD *)(v0 + 1112);
    v133 = *(_QWORD *)(v0 + 1104);
    v136 = *(_QWORD *)(v0 + 1096);
    v138 = *(_QWORD *)(v0 + 1072);
    sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
    sub_1000D9530((uint64_t *)(v0 + 448));
    swift_release();
    sub_1000126B0(v61, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v63, type metadata accessor for OwnedBeaconRecord);
    swift_weakDestroy(v0 + 824);
    sub_100004048(v65, &qword_1011063B8);
    sub_1000126B0(v64, type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v79);
    swift_task_dealloc(v64);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v65);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v119);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v129);
    swift_task_dealloc(v133);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    __asm { BR              X1 }
  }
  v36 = *(_QWORD *)(v0 + 1936);
  v37 = (uint8_t *)sub_1006948A0(32);
  v38 = swift_slowAlloc(96, -1);
  *(_QWORD *)(v0 + 904) = 0;
  v110 = v38;
  *(_QWORD *)(v0 + 912) = v38;
  *(_WORD *)v37 = 770;
  *(_QWORD *)(v0 + 896) = v37 + 2;
  *(_QWORD *)(v0 + 664) = sub_10005CBC4;
  *(_QWORD *)(v0 + 672) = v137;
  v131 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 664);
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 664), v0 + 896, v0 + 904, v0 + 912);
  if (!v36)
  {
    swift_release();
    *(_QWORD *)(v0 + 664) = sub_10005CBC4;
    *(_QWORD *)(v0 + 672) = v22;
    sub_1006948A8(v131, v0 + 896, v0 + 904, v0 + 912);
    swift_release();
    *(_QWORD *)(v0 + 664) = sub_10005CBB4;
    *(_QWORD *)(v0 + 672) = v24;
    sub_1006948A8(v131, v0 + 896, v0 + 904, v0 + 912);
    swift_release();
    *(_QWORD *)(v0 + 664) = sub_10005CBC4;
    *(_QWORD *)(v0 + 672) = v25;
    sub_1006948A8(v131, v0 + 896, v0 + 904, v0 + 912);
    swift_release();
    *(_QWORD *)(v0 + 664) = sub_10005CBC4;
    *(_QWORD *)(v0 + 672) = v26;
    sub_1006948A8(v131, v0 + 896, v0 + 904, v0 + 912);
    swift_release();
    *(_QWORD *)(v0 + 664) = sub_10005CBB4;
    *(_QWORD *)(v0 + 672) = v121;
    sub_1006948A8(v131, v0 + 896, v0 + 904, v0 + 912);
    swift_release();
    *(_QWORD *)(v0 + 664) = sub_10005CBC4;
    *(_QWORD *)(v0 + 672) = v29;
    sub_1006948A8(v131, v0 + 896, v0 + 904, v0 + 912);
    swift_release();
    *(_QWORD *)(v0 + 664) = sub_10005CBC4;
    *(_QWORD *)(v0 + 672) = v31;
    sub_1006948A8(v131, v0 + 896, v0 + 904, v0 + 912);
    swift_release();
    *(_QWORD *)(v0 + 664) = sub_10005CBB4;
    *(_QWORD *)(v0 + 672) = v33;
    sub_1006948A8(v131, v0 + 896, v0 + 904, v0 + 912);
    v39 = *(_QWORD *)(v0 + 1664);
    v40 = *(_QWORD *)(v0 + 1608);
    v41 = *(_QWORD *)(v0 + 1600);
    v42 = *(_QWORD *)(v0 + 1488);
    v43 = *(_QWORD *)(v0 + 1224);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v135, v127, "Keys to upload: %{public}s,\nadded primaryAddressPackage: %{public}s,\nkey indexes: %{public}s.", v37, 0x20u);
    swift_arrayDestroy(v110, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v110, -1, -1);
    sub_100694894((uint64_t)v37);

    v5 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v5(v39, v41);
    sub_1000126B0(v43, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v42, type metadata accessor for KeyDropInterface.KeyAlignment);
    v3 = 0;
    v4 = v5;
    goto LABEL_7;
  }
  v66 = *(_QWORD *)(v0 + 1584);
  v67 = *(_QWORD *)(v0 + 1544);
  swift_errorRelease(v36);
  sub_1000126B0(v66, type metadata accessor for SharingCircleKeyManager.Instruction);
  return sub_1000126B0(v67, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100937478()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1952));
  return swift_task_switch(sub_1009374D0, v1, 0);
}

uint64_t sub_1009374D0()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1944);
  v2 = *(_QWORD *)(v0 + 1456);
  v3 = *(_QWORD *)(v0 + 1360);
  sub_10000F9B8(*(_QWORD *)(v0 + 1392), v3, &qword_1011063B8);
  if (v1(v3, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 1360), &qword_1011063B8);
    v4 = *(_QWORD *)(v0 + 1800);
    v5 = *(_QWORD *)(v0 + 1792);
    v6 = *(_QWORD *)(v0 + 1824);
    v7 = *(_QWORD *)(v0 + 1816);
    *(_QWORD *)(v0 + 1808) = *(_QWORD *)(v0 + 1808);
    *(_QWORD *)(v0 + 1800) = v4;
    *(_QWORD *)(v0 + 1792) = v5;
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v9 = (v6 - 1) & v6;
      v10 = v8 | (v7 << 6);
      v11 = *(_QWORD *)(v0 + 1784);
      goto LABEL_15;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    v13 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
    v11 = *(_QWORD *)(v0 + 1784);
    if (v7 < v13)
    {
      v14 = v11 + 56;
      v15 = *(_QWORD *)(v11 + 56 + 8 * v7);
      if (v15)
      {
LABEL_14:
        v9 = (v15 - 1) & v15;
        v10 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_15:
        *(_QWORD *)(v0 + 1824) = v9;
        *(_QWORD *)(v0 + 1816) = v7;
        v17 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 48) + v10);
        *(_BYTE *)(v0 + 2037) = v17;
        __asm { BR              X8 }
      }
      v16 = v7 + 1;
      if (v7 + 1 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
          goto LABEL_13;
        v16 = v7 + 2;
        if (v7 + 2 >= v13)
          goto LABEL_20;
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_13:
          v7 = v16;
          goto LABEL_14;
        }
        v16 = v7 + 3;
        if (v7 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * v16);
          if (v15)
            goto LABEL_13;
          while (1)
          {
            v7 = v16 + 1;
            if (__OFADD__(v16, 1))
              break;
            if (v7 >= v13)
              goto LABEL_20;
            v15 = *(_QWORD *)(v14 + 8 * v7);
            ++v16;
            if (v15)
              goto LABEL_14;
          }
LABEL_23:
          __break(1u);
          JUMPOUT(0x100939544);
        }
      }
    }
LABEL_20:
    v18 = *(_QWORD *)(v0 + 1704);
    v19 = *(_QWORD *)(v0 + 1696);
    v20 = *(_QWORD *)(v0 + 1688);
    v28 = *(_QWORD *)(v0 + 1680);
    v29 = *(_QWORD *)(v0 + 1672);
    v30 = *(_QWORD *)(v0 + 1664);
    v31 = *(_QWORD *)(v0 + 1656);
    v32 = *(_QWORD *)(v0 + 1648);
    v33 = *(_QWORD *)(v0 + 1640);
    v34 = *(_QWORD *)(v0 + 1632);
    v35 = *(_QWORD *)(v0 + 1624);
    v36 = *(_QWORD *)(v0 + 1616);
    v37 = *(_QWORD *)(v0 + 1592);
    v21 = *(_QWORD *)(v0 + 1584);
    v22 = *(_QWORD *)(v0 + 1552);
    v23 = *(_QWORD *)(v0 + 1544);
    v24 = *(_QWORD *)(v0 + 1512);
    v38 = *(_QWORD *)(v0 + 1520);
    v39 = *(_QWORD *)(v0 + 1504);
    v40 = *(_QWORD *)(v0 + 1496);
    v41 = *(_QWORD *)(v0 + 1488);
    v42 = *(_QWORD *)(v0 + 1480);
    v43 = *(_QWORD *)(v0 + 1472);
    v44 = *(_QWORD *)(v0 + 1448);
    v45 = *(_QWORD *)(v0 + 1440);
    v46 = *(_QWORD *)(v0 + 1432);
    v47 = *(_QWORD *)(v0 + 1424);
    v25 = *(_QWORD *)(v0 + 1392);
    v48 = *(_QWORD *)(v0 + 1416);
    v49 = *(_QWORD *)(v0 + 1384);
    v50 = *(_QWORD *)(v0 + 1376);
    v51 = *(_QWORD *)(v0 + 1368);
    v52 = *(_QWORD *)(v0 + 1360);
    v53 = *(_QWORD *)(v0 + 1352);
    v54 = *(_QWORD *)(v0 + 1344);
    v55 = *(_QWORD *)(v0 + 1336);
    v56 = *(_QWORD *)(v0 + 1328);
    v57 = *(_QWORD *)(v0 + 1320);
    v58 = *(_QWORD *)(v0 + 1312);
    v59 = *(_QWORD *)(v0 + 1304);
    v60 = *(_QWORD *)(v0 + 1296);
    v61 = *(_QWORD *)(v0 + 1288);
    v62 = *(_QWORD *)(v0 + 1264);
    v63 = *(_QWORD *)(v0 + 1256);
    v64 = *(_QWORD *)(v0 + 1248);
    v65 = *(_QWORD *)(v0 + 1240);
    v66 = *(_QWORD *)(v0 + 1232);
    v67 = *(_QWORD *)(v0 + 1224);
    v68 = *(_QWORD *)(v0 + 1216);
    v69 = *(_QWORD *)(v0 + 1208);
    v70 = *(_QWORD *)(v0 + 1200);
    v71 = *(_QWORD *)(v0 + 1192);
    v72 = *(_QWORD *)(v0 + 1184);
    v73 = *(_QWORD *)(v0 + 1152);
    v74 = *(_QWORD *)(v0 + 1144);
    v75 = *(_QWORD *)(v0 + 1136);
    v76 = *(_QWORD *)(v0 + 1128);
    v77 = *(_QWORD *)(v0 + 1120);
    v78 = *(_QWORD *)(v0 + 1112);
    v79 = *(_QWORD *)(v0 + 1104);
    v80 = *(_QWORD *)(v0 + 1096);
    v81 = *(_QWORD *)(v0 + 1072);
    sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
    sub_1000D9530((uint64_t *)(v0 + 448));
    swift_release();
    sub_1000126B0(v21, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v23, type metadata accessor for OwnedBeaconRecord);
    swift_weakDestroy(v0 + 824);
    sub_100004048(v25, &qword_1011063B8);
    sub_1000126B0(v24, type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_1000126B0(v22, type metadata accessor for OwnedBeaconRecord);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v38);
    swift_task_dealloc(v24);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v25);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    __asm { BR              X1 }
  }
  sub_1000126EC(*(_QWORD *)(v0 + 1360), *(_QWORD *)(v0 + 1480), type metadata accessor for KeyDropInterface.KeyAlignment);
  v26 = (_QWORD *)swift_task_alloc(dword_10110D4EC);
  *(_QWORD *)(v0 + 1960) = v26;
  *v26 = v0;
  v26[1] = sub_10093957C;
  return sub_10094FB6C(*(_QWORD *)(v0 + 1136), *(_QWORD *)(v0 + 1056), *(_QWORD *)(v0 + 1552), *(_QWORD *)(v0 + 1480), 1, *(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
}

uint64_t sub_10093957C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1960);
  *(_QWORD *)(*v1 + 1968) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10094A65C;
  else
    v4 = sub_1009395E0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1064), 0);
}

uint64_t sub_1009395E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (**v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v1 = *(_QWORD *)(v0 + 1168);
  v2 = *(_QWORD *)(v0 + 1136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1 + 48))(v2, 1, *(_QWORD *)(v0 + 1160)) == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 1480), type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_100004048(v2, &qword_10110D4C0);
    v3 = *(_QWORD *)(v0 + 1968);
    v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1808);
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
    goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(v0 + 2024);
  v7 = *(_QWORD *)(v0 + 1656);
  v117 = *(_QWORD *)(v0 + 1600);
  v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1240);
  v10 = *(_QWORD *)(v0 + 1216);
  v130 = *(_QWORD *)(v0 + 1720);
  v134 = *(_QWORD *)(v0 + 1176);
  v11 = *(_QWORD *)(v0 + 1056);
  v12 = (v6 + 16) & ~v6;
  v123 = v6 | 7;
  v126 = *(_QWORD *)(v0 + 1576) + v12;
  sub_1000126EC(v2, v10, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_1009069AC(v9);
  v13 = sub_100906BC0();
  v120(v7, v13, v117);
  sub_10005972C(v11, v8, type metadata accessor for SharingCircleKeyManager.Instruction);
  v14 = swift_allocObject(&unk_10109D1C8, v126, v123);
  sub_1000126EC(v8, v14 + v12, type metadata accessor for SharingCircleKeyManager.Instruction);
  v15 = swift_allocObject(&unk_10109D1F0, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100960968;
  *(_QWORD *)(v15 + 24) = v14;
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  v16 = *(unsigned __int8 *)(v1 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = v16 | 7;
  v19 = swift_allocObject(&unk_10109D218, v17 + v134, v16 | 7);
  sub_1000126EC(v9, v19 + v17, type metadata accessor for KeyDropInterface.KeyPackage);
  v20 = swift_allocObject(&unk_10109D240, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100960DF0;
  *(_QWORD *)(v20 + 24) = v19;
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  v21 = swift_allocObject(&unk_10109D268, v17 + v134, v18);
  sub_1000126EC(v9, v21 + v17, type metadata accessor for KeyDropInterface.KeyPackage);
  v124 = swift_allocObject(&unk_10109D290, 32, 7);
  *(_QWORD *)(v124 + 16) = sub_100960F24;
  *(_QWORD *)(v124 + 24) = v21;
  v135 = Logger.logObject.getter(v124);
  v127 = static os_log_type_t.default.getter(v135);
  v137 = swift_allocObject(&unk_10109D2B8, 17, 7);
  *(_BYTE *)(v137 + 16) = 34;
  v22 = swift_allocObject(&unk_10109D2E0, 17, 7);
  *(_BYTE *)(v22 + 16) = 8;
  v23 = swift_allocObject(&unk_10109D308, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_100963204;
  *(_QWORD *)(v23 + 24) = v15;
  v24 = swift_allocObject(&unk_10109D330, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10005CBA4;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = swift_allocObject(&unk_10109D358, 17, 7);
  *(_BYTE *)(v25 + 16) = 34;
  v26 = swift_allocObject(&unk_10109D380, 17, 7);
  *(_BYTE *)(v26 + 16) = 8;
  v27 = swift_allocObject(&unk_10109D3A8, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_100963208;
  *(_QWORD *)(v27 + 24) = v20;
  v28 = swift_allocObject(&unk_10109D3D0, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10005CBA4;
  *(_QWORD *)(v28 + 24) = v27;
  v29 = swift_allocObject(&unk_10109D3F8, 17, 7);
  *(_BYTE *)(v29 + 16) = 34;
  v30 = v28;
  v31 = swift_allocObject(&unk_10109D420, 17, 7);
  *(_BYTE *)(v31 + 16) = 8;
  v32 = swift_allocObject(&unk_10109D448, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_10096320C;
  *(_QWORD *)(v32 + 24) = v124;
  v33 = swift_allocObject(&unk_10109D470, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_10005CBA4;
  *(_QWORD *)(v33 + 24) = v32;
  v34 = swift_allocObject(v130, 176, 7);
  sub_100882D28(v34, 9);
  *v35 = sub_10005CBC4;
  v35[1] = v137;
  v35[2] = sub_10005CBC4;
  v35[3] = v22;
  v35[4] = sub_10005CBB4;
  v35[5] = v24;
  v35[6] = sub_10005CBC4;
  v35[7] = v25;
  v35[8] = sub_10005CBC4;
  v35[9] = v26;
  v35[10] = sub_10005CBB4;
  v35[11] = v30;
  v35[12] = sub_10005CBC4;
  v35[13] = v29;
  v35[14] = sub_10005CBC4;
  v35[15] = v31;
  v35[16] = sub_10005CBB4;
  v35[17] = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v121 = v30;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v135, v127))
  {
    v118 = *(_QWORD *)(v0 + 1656);
    v44 = *(_QWORD *)(v0 + 1608);
    v45 = *(_QWORD *)(v0 + 1600);
    v128 = *(_QWORD *)(v0 + 1216);
    v132 = *(_QWORD *)(v0 + 1480);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v5 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v5(v118, v45);
    sub_1000126B0(v128, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v132, type metadata accessor for KeyDropInterface.KeyAlignment);
    v3 = *(_QWORD *)(v0 + 1968);
    v4 = v5;
LABEL_7:
    v46 = *(_QWORD *)(v0 + 1824);
    v47 = *(_QWORD *)(v0 + 1816);
    *(_QWORD *)(v0 + 1808) = v4;
    *(_QWORD *)(v0 + 1800) = v5;
    *(_QWORD *)(v0 + 1792) = v3;
    if (v46)
    {
      v48 = __clz(__rbit64(v46));
      v49 = (v46 - 1) & v46;
      v50 = v48 | (v47 << 6);
      v51 = *(_QWORD *)(v0 + 1784);
      goto LABEL_20;
    }
    if (__OFADD__(v47++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v53 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
    v51 = *(_QWORD *)(v0 + 1784);
    if (v47 < v53)
    {
      v54 = v51 + 56;
      v55 = *(_QWORD *)(v51 + 56 + 8 * v47);
      if (v55)
      {
LABEL_19:
        v49 = (v55 - 1) & v55;
        v50 = __clz(__rbit64(v55)) + (v47 << 6);
LABEL_20:
        *(_QWORD *)(v0 + 1824) = v49;
        *(_QWORD *)(v0 + 1816) = v47;
        v57 = *(unsigned __int8 *)(*(_QWORD *)(v51 + 48) + v50);
        *(_BYTE *)(v0 + 2037) = v57;
        __asm { BR              X9 }
      }
      v56 = v47 + 1;
      if (v47 + 1 < v53)
      {
        v55 = *(_QWORD *)(v54 + 8 * v56);
        if (v55)
          goto LABEL_18;
        v56 = v47 + 2;
        if (v47 + 2 >= v53)
          goto LABEL_25;
        v55 = *(_QWORD *)(v54 + 8 * v56);
        if (v55)
        {
LABEL_18:
          v47 = v56;
          goto LABEL_19;
        }
        v56 = v47 + 3;
        if (v47 + 3 < v53)
        {
          v55 = *(_QWORD *)(v54 + 8 * v56);
          if (v55)
            goto LABEL_18;
          while (1)
          {
            v47 = v56 + 1;
            if (__OFADD__(v56, 1))
              break;
            if (v47 >= v53)
              goto LABEL_25;
            v55 = *(_QWORD *)(v54 + 8 * v47);
            ++v56;
            if (v55)
              goto LABEL_19;
          }
LABEL_28:
          __break(1u);
          JUMPOUT(0x10093BE98);
        }
      }
    }
LABEL_25:
    v58 = *(_QWORD *)(v0 + 1704);
    v59 = *(_QWORD *)(v0 + 1696);
    v60 = *(_QWORD *)(v0 + 1688);
    v69 = *(_QWORD *)(v0 + 1680);
    v70 = *(_QWORD *)(v0 + 1672);
    v71 = *(_QWORD *)(v0 + 1664);
    v72 = *(_QWORD *)(v0 + 1656);
    v73 = *(_QWORD *)(v0 + 1648);
    v74 = *(_QWORD *)(v0 + 1640);
    v75 = *(_QWORD *)(v0 + 1632);
    v76 = *(_QWORD *)(v0 + 1624);
    v77 = *(_QWORD *)(v0 + 1616);
    v78 = *(_QWORD *)(v0 + 1592);
    v61 = *(_QWORD *)(v0 + 1584);
    v62 = *(_QWORD *)(v0 + 1552);
    v63 = *(_QWORD *)(v0 + 1544);
    v64 = *(_QWORD *)(v0 + 1512);
    v79 = *(_QWORD *)(v0 + 1520);
    v80 = *(_QWORD *)(v0 + 1504);
    v81 = *(_QWORD *)(v0 + 1496);
    v82 = *(_QWORD *)(v0 + 1488);
    v83 = *(_QWORD *)(v0 + 1480);
    v84 = *(_QWORD *)(v0 + 1472);
    v85 = *(_QWORD *)(v0 + 1448);
    v86 = *(_QWORD *)(v0 + 1440);
    v87 = *(_QWORD *)(v0 + 1432);
    v88 = *(_QWORD *)(v0 + 1424);
    v65 = *(_QWORD *)(v0 + 1392);
    v89 = *(_QWORD *)(v0 + 1416);
    v90 = *(_QWORD *)(v0 + 1384);
    v91 = *(_QWORD *)(v0 + 1376);
    v92 = *(_QWORD *)(v0 + 1368);
    v93 = *(_QWORD *)(v0 + 1360);
    v94 = *(_QWORD *)(v0 + 1352);
    v95 = *(_QWORD *)(v0 + 1344);
    v96 = *(_QWORD *)(v0 + 1336);
    v97 = *(_QWORD *)(v0 + 1328);
    v98 = *(_QWORD *)(v0 + 1320);
    v99 = *(_QWORD *)(v0 + 1312);
    v100 = *(_QWORD *)(v0 + 1304);
    v101 = *(_QWORD *)(v0 + 1296);
    v102 = *(_QWORD *)(v0 + 1288);
    v103 = *(_QWORD *)(v0 + 1264);
    v104 = *(_QWORD *)(v0 + 1256);
    v105 = *(_QWORD *)(v0 + 1248);
    v106 = *(_QWORD *)(v0 + 1240);
    v107 = *(_QWORD *)(v0 + 1232);
    v108 = *(_QWORD *)(v0 + 1224);
    v109 = *(_QWORD *)(v0 + 1216);
    v111 = *(_QWORD *)(v0 + 1208);
    v112 = *(_QWORD *)(v0 + 1200);
    v113 = *(_QWORD *)(v0 + 1192);
    v114 = *(_QWORD *)(v0 + 1184);
    v115 = *(_QWORD *)(v0 + 1152);
    v116 = *(_QWORD *)(v0 + 1144);
    v119 = *(_QWORD *)(v0 + 1136);
    v122 = *(_QWORD *)(v0 + 1128);
    v125 = *(_QWORD *)(v0 + 1120);
    v129 = *(_QWORD *)(v0 + 1112);
    v133 = *(_QWORD *)(v0 + 1104);
    v136 = *(_QWORD *)(v0 + 1096);
    v138 = *(_QWORD *)(v0 + 1072);
    sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
    sub_1000D9530((uint64_t *)(v0 + 448));
    swift_release();
    sub_1000126B0(v61, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v63, type metadata accessor for OwnedBeaconRecord);
    swift_weakDestroy(v0 + 824);
    sub_100004048(v65, &qword_1011063B8);
    sub_1000126B0(v64, type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v79);
    swift_task_dealloc(v64);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v65);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v119);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v129);
    swift_task_dealloc(v133);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    __asm { BR              X1 }
  }
  v36 = *(_QWORD *)(v0 + 1968);
  v37 = (uint8_t *)sub_1006948A0(32);
  v38 = swift_slowAlloc(96, -1);
  *(_QWORD *)(v0 + 872) = 0;
  v110 = v38;
  *(_QWORD *)(v0 + 880) = v38;
  *(_WORD *)v37 = 770;
  *(_QWORD *)(v0 + 864) = v37 + 2;
  *(_QWORD *)(v0 + 680) = sub_10005CBC4;
  *(_QWORD *)(v0 + 688) = v137;
  v131 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 680);
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 680), v0 + 864, v0 + 872, v0 + 880);
  if (!v36)
  {
    swift_release();
    *(_QWORD *)(v0 + 680) = sub_10005CBC4;
    *(_QWORD *)(v0 + 688) = v22;
    sub_1006948A8(v131, v0 + 864, v0 + 872, v0 + 880);
    swift_release();
    *(_QWORD *)(v0 + 680) = sub_10005CBB4;
    *(_QWORD *)(v0 + 688) = v24;
    sub_1006948A8(v131, v0 + 864, v0 + 872, v0 + 880);
    swift_release();
    *(_QWORD *)(v0 + 680) = sub_10005CBC4;
    *(_QWORD *)(v0 + 688) = v25;
    sub_1006948A8(v131, v0 + 864, v0 + 872, v0 + 880);
    swift_release();
    *(_QWORD *)(v0 + 680) = sub_10005CBC4;
    *(_QWORD *)(v0 + 688) = v26;
    sub_1006948A8(v131, v0 + 864, v0 + 872, v0 + 880);
    swift_release();
    *(_QWORD *)(v0 + 680) = sub_10005CBB4;
    *(_QWORD *)(v0 + 688) = v121;
    sub_1006948A8(v131, v0 + 864, v0 + 872, v0 + 880);
    swift_release();
    *(_QWORD *)(v0 + 680) = sub_10005CBC4;
    *(_QWORD *)(v0 + 688) = v29;
    sub_1006948A8(v131, v0 + 864, v0 + 872, v0 + 880);
    swift_release();
    *(_QWORD *)(v0 + 680) = sub_10005CBC4;
    *(_QWORD *)(v0 + 688) = v31;
    sub_1006948A8(v131, v0 + 864, v0 + 872, v0 + 880);
    swift_release();
    *(_QWORD *)(v0 + 680) = sub_10005CBB4;
    *(_QWORD *)(v0 + 688) = v33;
    sub_1006948A8(v131, v0 + 864, v0 + 872, v0 + 880);
    v39 = *(_QWORD *)(v0 + 1656);
    v40 = *(_QWORD *)(v0 + 1608);
    v41 = *(_QWORD *)(v0 + 1600);
    v42 = *(_QWORD *)(v0 + 1480);
    v43 = *(_QWORD *)(v0 + 1216);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v135, v127, "Keys to upload: %{public}s,\nadded secondaryAddressPackage: %{public}s,\nkey indexes: %{public}s.", v37, 0x20u);
    swift_arrayDestroy(v110, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v110, -1, -1);
    sub_100694894((uint64_t)v37);

    v5 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v5(v39, v41);
    sub_1000126B0(v43, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v42, type metadata accessor for KeyDropInterface.KeyAlignment);
    v3 = 0;
    v4 = v5;
    goto LABEL_7;
  }
  v66 = *(_QWORD *)(v0 + 1584);
  v67 = *(_QWORD *)(v0 + 1544);
  swift_errorRelease(v36);
  sub_1000126B0(v66, type metadata accessor for SharingCircleKeyManager.Instruction);
  return sub_1000126B0(v67, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_10093BED0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1984));
  return swift_task_switch(sub_10093BF28, v1, 0);
}

uint64_t sub_10093BF28()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1976);
  v2 = *(_QWORD *)(v0 + 1456);
  v3 = *(_QWORD *)(v0 + 1344);
  sub_10000F9B8(*(_QWORD *)(v0 + 1392), v3, &qword_1011063B8);
  if (v1(v3, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 1344), &qword_1011063B8);
    v4 = *(_QWORD *)(v0 + 1800);
    v5 = *(_QWORD *)(v0 + 1792);
    v6 = *(_QWORD *)(v0 + 1824);
    v7 = *(_QWORD *)(v0 + 1816);
    *(_QWORD *)(v0 + 1808) = *(_QWORD *)(v0 + 1808);
    *(_QWORD *)(v0 + 1800) = v4;
    *(_QWORD *)(v0 + 1792) = v5;
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v9 = (v6 - 1) & v6;
      v10 = v8 | (v7 << 6);
      v11 = *(_QWORD *)(v0 + 1784);
      goto LABEL_15;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    v13 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
    v11 = *(_QWORD *)(v0 + 1784);
    if (v7 < v13)
    {
      v14 = v11 + 56;
      v15 = *(_QWORD *)(v11 + 56 + 8 * v7);
      if (v15)
      {
LABEL_14:
        v9 = (v15 - 1) & v15;
        v10 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_15:
        *(_QWORD *)(v0 + 1824) = v9;
        *(_QWORD *)(v0 + 1816) = v7;
        v17 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 48) + v10);
        *(_BYTE *)(v0 + 2037) = v17;
        __asm { BR              X8 }
      }
      v16 = v7 + 1;
      if (v7 + 1 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
          goto LABEL_13;
        v16 = v7 + 2;
        if (v7 + 2 >= v13)
          goto LABEL_20;
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_13:
          v7 = v16;
          goto LABEL_14;
        }
        v16 = v7 + 3;
        if (v7 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * v16);
          if (v15)
            goto LABEL_13;
          while (1)
          {
            v7 = v16 + 1;
            if (__OFADD__(v16, 1))
              break;
            if (v7 >= v13)
              goto LABEL_20;
            v15 = *(_QWORD *)(v14 + 8 * v7);
            ++v16;
            if (v15)
              goto LABEL_14;
          }
LABEL_23:
          __break(1u);
          JUMPOUT(0x10093DF9CLL);
        }
      }
    }
LABEL_20:
    v18 = *(_QWORD *)(v0 + 1704);
    v19 = *(_QWORD *)(v0 + 1696);
    v20 = *(_QWORD *)(v0 + 1688);
    v28 = *(_QWORD *)(v0 + 1680);
    v29 = *(_QWORD *)(v0 + 1672);
    v30 = *(_QWORD *)(v0 + 1664);
    v31 = *(_QWORD *)(v0 + 1656);
    v32 = *(_QWORD *)(v0 + 1648);
    v33 = *(_QWORD *)(v0 + 1640);
    v34 = *(_QWORD *)(v0 + 1632);
    v35 = *(_QWORD *)(v0 + 1624);
    v36 = *(_QWORD *)(v0 + 1616);
    v37 = *(_QWORD *)(v0 + 1592);
    v21 = *(_QWORD *)(v0 + 1584);
    v22 = *(_QWORD *)(v0 + 1552);
    v23 = *(_QWORD *)(v0 + 1544);
    v24 = *(_QWORD *)(v0 + 1512);
    v38 = *(_QWORD *)(v0 + 1520);
    v39 = *(_QWORD *)(v0 + 1504);
    v40 = *(_QWORD *)(v0 + 1496);
    v41 = *(_QWORD *)(v0 + 1488);
    v42 = *(_QWORD *)(v0 + 1480);
    v43 = *(_QWORD *)(v0 + 1472);
    v44 = *(_QWORD *)(v0 + 1448);
    v45 = *(_QWORD *)(v0 + 1440);
    v46 = *(_QWORD *)(v0 + 1432);
    v47 = *(_QWORD *)(v0 + 1424);
    v25 = *(_QWORD *)(v0 + 1392);
    v48 = *(_QWORD *)(v0 + 1416);
    v49 = *(_QWORD *)(v0 + 1384);
    v50 = *(_QWORD *)(v0 + 1376);
    v51 = *(_QWORD *)(v0 + 1368);
    v52 = *(_QWORD *)(v0 + 1360);
    v53 = *(_QWORD *)(v0 + 1352);
    v54 = *(_QWORD *)(v0 + 1344);
    v55 = *(_QWORD *)(v0 + 1336);
    v56 = *(_QWORD *)(v0 + 1328);
    v57 = *(_QWORD *)(v0 + 1320);
    v58 = *(_QWORD *)(v0 + 1312);
    v59 = *(_QWORD *)(v0 + 1304);
    v60 = *(_QWORD *)(v0 + 1296);
    v61 = *(_QWORD *)(v0 + 1288);
    v62 = *(_QWORD *)(v0 + 1264);
    v63 = *(_QWORD *)(v0 + 1256);
    v64 = *(_QWORD *)(v0 + 1248);
    v65 = *(_QWORD *)(v0 + 1240);
    v66 = *(_QWORD *)(v0 + 1232);
    v67 = *(_QWORD *)(v0 + 1224);
    v68 = *(_QWORD *)(v0 + 1216);
    v69 = *(_QWORD *)(v0 + 1208);
    v70 = *(_QWORD *)(v0 + 1200);
    v71 = *(_QWORD *)(v0 + 1192);
    v72 = *(_QWORD *)(v0 + 1184);
    v73 = *(_QWORD *)(v0 + 1152);
    v74 = *(_QWORD *)(v0 + 1144);
    v75 = *(_QWORD *)(v0 + 1136);
    v76 = *(_QWORD *)(v0 + 1128);
    v77 = *(_QWORD *)(v0 + 1120);
    v78 = *(_QWORD *)(v0 + 1112);
    v79 = *(_QWORD *)(v0 + 1104);
    v80 = *(_QWORD *)(v0 + 1096);
    v81 = *(_QWORD *)(v0 + 1072);
    sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
    sub_1000D9530((uint64_t *)(v0 + 448));
    swift_release();
    sub_1000126B0(v21, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v23, type metadata accessor for OwnedBeaconRecord);
    swift_weakDestroy(v0 + 824);
    sub_100004048(v25, &qword_1011063B8);
    sub_1000126B0(v24, type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_1000126B0(v22, type metadata accessor for OwnedBeaconRecord);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v38);
    swift_task_dealloc(v24);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v25);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    __asm { BR              X1 }
  }
  sub_1000126EC(*(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1472), type metadata accessor for KeyDropInterface.KeyAlignment);
  v26 = (_QWORD *)swift_task_alloc(dword_10110D4E4);
  *(_QWORD *)(v0 + 1992) = v26;
  *v26 = v0;
  v26[1] = sub_10093DFD4;
  return sub_100950CF8(*(_QWORD *)(v0 + 1128), *(_QWORD *)(v0 + 1056), *(_QWORD *)(v0 + 1552), *(_QWORD *)(v0 + 1472), *(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
}

uint64_t sub_10093DFD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1992);
  *(_QWORD *)(*v1 + 2000) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10094C708;
  else
    v4 = sub_10093E038;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 1064), 0);
}

uint64_t sub_10093E038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (**v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v1 = *(_QWORD *)(v0 + 1168);
  v2 = *(_QWORD *)(v0 + 1128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1 + 48))(v2, 1, *(_QWORD *)(v0 + 1160)) == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 1472), type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_100004048(v2, &qword_10110D4C0);
    v3 = *(_QWORD *)(v0 + 2000);
    v4 = *(void (**)(uint64_t, uint64_t))(v0 + 1808);
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
    goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(v0 + 2024);
  v7 = *(_QWORD *)(v0 + 1648);
  v117 = *(_QWORD *)(v0 + 1600);
  v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1240);
  v10 = *(_QWORD *)(v0 + 1208);
  v130 = *(_QWORD *)(v0 + 1720);
  v134 = *(_QWORD *)(v0 + 1176);
  v11 = *(_QWORD *)(v0 + 1056);
  v12 = (v6 + 16) & ~v6;
  v123 = v6 | 7;
  v126 = *(_QWORD *)(v0 + 1576) + v12;
  sub_1000126EC(v2, v10, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  sub_1009069AC(v9);
  v13 = sub_100906BC0();
  v120(v7, v13, v117);
  sub_10005972C(v11, v8, type metadata accessor for SharingCircleKeyManager.Instruction);
  v14 = swift_allocObject(&unk_10109CEF8, v126, v123);
  sub_1000126EC(v8, v14 + v12, type metadata accessor for SharingCircleKeyManager.Instruction);
  v15 = swift_allocObject(&unk_10109CF20, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100960968;
  *(_QWORD *)(v15 + 24) = v14;
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  v16 = *(unsigned __int8 *)(v1 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = v16 | 7;
  v19 = swift_allocObject(&unk_10109CF48, v17 + v134, v16 | 7);
  sub_1000126EC(v9, v19 + v17, type metadata accessor for KeyDropInterface.KeyPackage);
  v20 = swift_allocObject(&unk_10109CF70, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100960DF0;
  *(_QWORD *)(v20 + 24) = v19;
  sub_10005972C(v10, v9, type metadata accessor for KeyDropInterface.KeyPackage);
  v21 = swift_allocObject(&unk_10109CF98, v17 + v134, v18);
  sub_1000126EC(v9, v21 + v17, type metadata accessor for KeyDropInterface.KeyPackage);
  v124 = swift_allocObject(&unk_10109CFC0, 32, 7);
  *(_QWORD *)(v124 + 16) = sub_100960F24;
  *(_QWORD *)(v124 + 24) = v21;
  v135 = Logger.logObject.getter(v124);
  v127 = static os_log_type_t.default.getter(v135);
  v137 = swift_allocObject(&unk_10109CFE8, 17, 7);
  *(_BYTE *)(v137 + 16) = 34;
  v22 = swift_allocObject(&unk_10109D010, 17, 7);
  *(_BYTE *)(v22 + 16) = 8;
  v23 = swift_allocObject(&unk_10109D038, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_100963204;
  *(_QWORD *)(v23 + 24) = v15;
  v24 = swift_allocObject(&unk_10109D060, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10005CBA4;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = swift_allocObject(&unk_10109D088, 17, 7);
  *(_BYTE *)(v25 + 16) = 34;
  v26 = swift_allocObject(&unk_10109D0B0, 17, 7);
  *(_BYTE *)(v26 + 16) = 8;
  v27 = swift_allocObject(&unk_10109D0D8, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_100963208;
  *(_QWORD *)(v27 + 24) = v20;
  v28 = swift_allocObject(&unk_10109D100, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10005CBA4;
  *(_QWORD *)(v28 + 24) = v27;
  v29 = swift_allocObject(&unk_10109D128, 17, 7);
  *(_BYTE *)(v29 + 16) = 34;
  v30 = v28;
  v31 = swift_allocObject(&unk_10109D150, 17, 7);
  *(_BYTE *)(v31 + 16) = 8;
  v32 = swift_allocObject(&unk_10109D178, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_100960F28;
  *(_QWORD *)(v32 + 24) = v124;
  v33 = swift_allocObject(&unk_10109D1A0, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_10005CBA4;
  *(_QWORD *)(v33 + 24) = v32;
  v34 = swift_allocObject(v130, 176, 7);
  sub_100882D28(v34, 9);
  *v35 = sub_10005CBC4;
  v35[1] = v137;
  v35[2] = sub_10005CBC4;
  v35[3] = v22;
  v35[4] = sub_10005CBB4;
  v35[5] = v24;
  v35[6] = sub_10005CBC4;
  v35[7] = v25;
  v35[8] = sub_10005CBC4;
  v35[9] = v26;
  v35[10] = sub_10005CBB4;
  v35[11] = v30;
  v35[12] = sub_10005CBC4;
  v35[13] = v29;
  v35[14] = sub_10005CBC4;
  v35[15] = v31;
  v35[16] = sub_10005CBB4;
  v35[17] = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v121 = v30;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v135, v127))
  {
    v118 = *(_QWORD *)(v0 + 1648);
    v44 = *(_QWORD *)(v0 + 1608);
    v45 = *(_QWORD *)(v0 + 1600);
    v128 = *(_QWORD *)(v0 + 1208);
    v132 = *(_QWORD *)(v0 + 1472);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v5 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v5(v118, v45);
    sub_1000126B0(v128, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v132, type metadata accessor for KeyDropInterface.KeyAlignment);
    v3 = *(_QWORD *)(v0 + 2000);
    v4 = v5;
LABEL_7:
    v46 = *(_QWORD *)(v0 + 1824);
    v47 = *(_QWORD *)(v0 + 1816);
    *(_QWORD *)(v0 + 1808) = v4;
    *(_QWORD *)(v0 + 1800) = v5;
    *(_QWORD *)(v0 + 1792) = v3;
    if (v46)
    {
      v48 = __clz(__rbit64(v46));
      v49 = (v46 - 1) & v46;
      v50 = v48 | (v47 << 6);
      v51 = *(_QWORD *)(v0 + 1784);
      goto LABEL_20;
    }
    if (__OFADD__(v47++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    v53 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
    v51 = *(_QWORD *)(v0 + 1784);
    if (v47 < v53)
    {
      v54 = v51 + 56;
      v55 = *(_QWORD *)(v51 + 56 + 8 * v47);
      if (v55)
      {
LABEL_19:
        v49 = (v55 - 1) & v55;
        v50 = __clz(__rbit64(v55)) + (v47 << 6);
LABEL_20:
        *(_QWORD *)(v0 + 1824) = v49;
        *(_QWORD *)(v0 + 1816) = v47;
        v57 = *(unsigned __int8 *)(*(_QWORD *)(v51 + 48) + v50);
        *(_BYTE *)(v0 + 2037) = v57;
        __asm { BR              X9 }
      }
      v56 = v47 + 1;
      if (v47 + 1 < v53)
      {
        v55 = *(_QWORD *)(v54 + 8 * v56);
        if (v55)
          goto LABEL_18;
        v56 = v47 + 2;
        if (v47 + 2 >= v53)
          goto LABEL_25;
        v55 = *(_QWORD *)(v54 + 8 * v56);
        if (v55)
        {
LABEL_18:
          v47 = v56;
          goto LABEL_19;
        }
        v56 = v47 + 3;
        if (v47 + 3 < v53)
        {
          v55 = *(_QWORD *)(v54 + 8 * v56);
          if (v55)
            goto LABEL_18;
          while (1)
          {
            v47 = v56 + 1;
            if (__OFADD__(v56, 1))
              break;
            if (v47 >= v53)
              goto LABEL_25;
            v55 = *(_QWORD *)(v54 + 8 * v47);
            ++v56;
            if (v55)
              goto LABEL_19;
          }
LABEL_28:
          __break(1u);
          JUMPOUT(0x1009408F0);
        }
      }
    }
LABEL_25:
    v58 = *(_QWORD *)(v0 + 1704);
    v59 = *(_QWORD *)(v0 + 1696);
    v60 = *(_QWORD *)(v0 + 1688);
    v69 = *(_QWORD *)(v0 + 1680);
    v70 = *(_QWORD *)(v0 + 1672);
    v71 = *(_QWORD *)(v0 + 1664);
    v72 = *(_QWORD *)(v0 + 1656);
    v73 = *(_QWORD *)(v0 + 1648);
    v74 = *(_QWORD *)(v0 + 1640);
    v75 = *(_QWORD *)(v0 + 1632);
    v76 = *(_QWORD *)(v0 + 1624);
    v77 = *(_QWORD *)(v0 + 1616);
    v78 = *(_QWORD *)(v0 + 1592);
    v61 = *(_QWORD *)(v0 + 1584);
    v62 = *(_QWORD *)(v0 + 1552);
    v63 = *(_QWORD *)(v0 + 1544);
    v64 = *(_QWORD *)(v0 + 1512);
    v79 = *(_QWORD *)(v0 + 1520);
    v80 = *(_QWORD *)(v0 + 1504);
    v81 = *(_QWORD *)(v0 + 1496);
    v82 = *(_QWORD *)(v0 + 1488);
    v83 = *(_QWORD *)(v0 + 1480);
    v84 = *(_QWORD *)(v0 + 1472);
    v85 = *(_QWORD *)(v0 + 1448);
    v86 = *(_QWORD *)(v0 + 1440);
    v87 = *(_QWORD *)(v0 + 1432);
    v88 = *(_QWORD *)(v0 + 1424);
    v65 = *(_QWORD *)(v0 + 1392);
    v89 = *(_QWORD *)(v0 + 1416);
    v90 = *(_QWORD *)(v0 + 1384);
    v91 = *(_QWORD *)(v0 + 1376);
    v92 = *(_QWORD *)(v0 + 1368);
    v93 = *(_QWORD *)(v0 + 1360);
    v94 = *(_QWORD *)(v0 + 1352);
    v95 = *(_QWORD *)(v0 + 1344);
    v96 = *(_QWORD *)(v0 + 1336);
    v97 = *(_QWORD *)(v0 + 1328);
    v98 = *(_QWORD *)(v0 + 1320);
    v99 = *(_QWORD *)(v0 + 1312);
    v100 = *(_QWORD *)(v0 + 1304);
    v101 = *(_QWORD *)(v0 + 1296);
    v102 = *(_QWORD *)(v0 + 1288);
    v103 = *(_QWORD *)(v0 + 1264);
    v104 = *(_QWORD *)(v0 + 1256);
    v105 = *(_QWORD *)(v0 + 1248);
    v106 = *(_QWORD *)(v0 + 1240);
    v107 = *(_QWORD *)(v0 + 1232);
    v108 = *(_QWORD *)(v0 + 1224);
    v109 = *(_QWORD *)(v0 + 1216);
    v111 = *(_QWORD *)(v0 + 1208);
    v112 = *(_QWORD *)(v0 + 1200);
    v113 = *(_QWORD *)(v0 + 1192);
    v114 = *(_QWORD *)(v0 + 1184);
    v115 = *(_QWORD *)(v0 + 1152);
    v116 = *(_QWORD *)(v0 + 1144);
    v119 = *(_QWORD *)(v0 + 1136);
    v122 = *(_QWORD *)(v0 + 1128);
    v125 = *(_QWORD *)(v0 + 1120);
    v129 = *(_QWORD *)(v0 + 1112);
    v133 = *(_QWORD *)(v0 + 1104);
    v136 = *(_QWORD *)(v0 + 1096);
    v138 = *(_QWORD *)(v0 + 1072);
    sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
    sub_1000D9530((uint64_t *)(v0 + 448));
    swift_release();
    sub_1000126B0(v61, type metadata accessor for SharingCircleKeyManager.Instruction);
    sub_1000126B0(v63, type metadata accessor for OwnedBeaconRecord);
    swift_weakDestroy(v0 + 824);
    sub_100004048(v65, &qword_1011063B8);
    sub_1000126B0(v64, type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v79);
    swift_task_dealloc(v64);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v65);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v119);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v129);
    swift_task_dealloc(v133);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    __asm { BR              X1 }
  }
  v36 = *(_QWORD *)(v0 + 2000);
  v37 = (uint8_t *)sub_1006948A0(32);
  v38 = swift_slowAlloc(96, -1);
  *(_QWORD *)(v0 + 840) = 0;
  v110 = v38;
  *(_QWORD *)(v0 + 848) = v38;
  *(_WORD *)v37 = 770;
  *(_QWORD *)(v0 + 1048) = v37 + 2;
  *(_QWORD *)(v0 + 696) = sub_10005CBC4;
  *(_QWORD *)(v0 + 704) = v137;
  v131 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 696);
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 696), v0 + 1048, v0 + 840, v0 + 848);
  if (!v36)
  {
    swift_release();
    *(_QWORD *)(v0 + 696) = sub_10005CBC4;
    *(_QWORD *)(v0 + 704) = v22;
    sub_1006948A8(v131, v0 + 1048, v0 + 840, v0 + 848);
    swift_release();
    *(_QWORD *)(v0 + 696) = sub_10005CBB4;
    *(_QWORD *)(v0 + 704) = v24;
    sub_1006948A8(v131, v0 + 1048, v0 + 840, v0 + 848);
    swift_release();
    *(_QWORD *)(v0 + 696) = sub_10005CBC4;
    *(_QWORD *)(v0 + 704) = v25;
    sub_1006948A8(v131, v0 + 1048, v0 + 840, v0 + 848);
    swift_release();
    *(_QWORD *)(v0 + 696) = sub_10005CBC4;
    *(_QWORD *)(v0 + 704) = v26;
    sub_1006948A8(v131, v0 + 1048, v0 + 840, v0 + 848);
    swift_release();
    *(_QWORD *)(v0 + 696) = sub_10005CBB4;
    *(_QWORD *)(v0 + 704) = v121;
    sub_1006948A8(v131, v0 + 1048, v0 + 840, v0 + 848);
    swift_release();
    *(_QWORD *)(v0 + 696) = sub_10005CBC4;
    *(_QWORD *)(v0 + 704) = v29;
    sub_1006948A8(v131, v0 + 1048, v0 + 840, v0 + 848);
    swift_release();
    *(_QWORD *)(v0 + 696) = sub_10005CBC4;
    *(_QWORD *)(v0 + 704) = v31;
    sub_1006948A8(v131, v0 + 1048, v0 + 840, v0 + 848);
    swift_release();
    *(_QWORD *)(v0 + 696) = sub_10005CBB4;
    *(_QWORD *)(v0 + 704) = v33;
    sub_1006948A8(v131, v0 + 1048, v0 + 840, v0 + 848);
    v39 = *(_QWORD *)(v0 + 1648);
    v40 = *(_QWORD *)(v0 + 1608);
    v41 = *(_QWORD *)(v0 + 1600);
    v42 = *(_QWORD *)(v0 + 1472);
    v43 = *(_QWORD *)(v0 + 1208);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v135, v127, "Keys to upload: %{public}s,\nadded connectionKeyPackage: %{public}s,\nkey indexes: %{public}s.", v37, 0x20u);
    swift_arrayDestroy(v110, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v110, -1, -1);
    sub_100694894((uint64_t)v37);

    v5 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v5(v39, v41);
    sub_1000126B0(v43, type metadata accessor for KeyDropInterface.KeyPackage);
    sub_1000126B0(v42, type metadata accessor for KeyDropInterface.KeyAlignment);
    v3 = 0;
    v4 = v5;
    goto LABEL_7;
  }
  v66 = *(_QWORD *)(v0 + 1584);
  v67 = *(_QWORD *)(v0 + 1544);
  swift_errorRelease(v36);
  sub_1000126B0(v66, type metadata accessor for SharingCircleKeyManager.Instruction);
  return sub_1000126B0(v67, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100940928()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2008));
  return swift_task_switch(sub_100940980, v1, 0);
}

void sub_100940980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD, uint64_t, _QWORD);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  unint64_t v95;
  int64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int64_t v102;
  uint64_t v103;
  unint64_t v104;
  int64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  os_log_type_t v179;
  uint64_t v180;
  NSObject *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t (**v206)(uint64_t, uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  os_log_type_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  NSObject *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;

  v206 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  v202 = v0 + 984;
  v204 = v0 + 952;
  v1 = *(_QWORD *)(v0 + 1120);
  v200 = v0 + 1016;
  v2 = sub_10001A9A8(&qword_10110D4A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_10110D4B8);
    goto LABEL_36;
  }
  v3 = *(_QWORD *)(v0 + 1560);
  v4 = *(_QWORD *)(v0 + 1312);
  v5 = *(_QWORD *)(v0 + 1056);
  v6 = (uint64_t *)(v1 + *(int *)(v2 + 48));
  v7 = v6[1];
  v255 = v6[2];
  v262 = *v6;
  v8 = v6[4];
  v9 = v6[6];
  v240 = v6[5];
  v247 = v6[3];
  v10 = v6[8];
  v235 = v6[7];
  v11 = *(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1408) + 32);
  v11(*(_QWORD *)(v0 + 1432), v1, *(_QWORD *)(v0 + 1400));
  sub_100BBE27C(12, *(_QWORD *)(v5 + *(int *)(v3 + 44)), v4);
  v12 = type metadata accessor for BookmarkMetaData(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v4, 1, v12) == 1)
  {
    v13 = (uint64_t *)(v0 + 1312);
    v14 = (uint64_t *)&unk_1010FD398;
  }
  else
  {
    v230 = v9;
    v15 = *(_QWORD *)(v0 + 1464);
    v16 = *(_QWORD *)(v0 + 1456);
    v17 = *(_QWORD *)(v0 + 1336);
    v18 = *(_QWORD *)(v0 + 1312);
    v19 = v18 + *(int *)(v12 + 20);
    v14 = &qword_1011063B8;
    sub_10000F9B8(v19, v17, &qword_1011063B8);
    sub_1000126B0(v18, type metadata accessor for BookmarkMetaData);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v17, 1, v16) != 1)
    {
      v39 = *(_QWORD *)(v0 + 1408);
      v40 = *(_QWORD *)(v0 + 1400);
      v41 = *(_QWORD *)(v0 + 1336);
      v42 = *(_QWORD *)(v0 + 1112);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v42, v41 + *(int *)(*(_QWORD *)(v0 + 1456) + 24), v40);
      sub_1000126B0(v41, type metadata accessor for KeyDropInterface.KeyAlignment);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v42, 0, 1, v40);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v42, 1, v40);
      v9 = v230;
      if ((_DWORD)v20 != 1)
      {
        v11(*(_QWORD *)(v0 + 1424), *(_QWORD *)(v0 + 1112), *(_QWORD *)(v0 + 1400));
        goto LABEL_9;
      }
LABEL_8:
      v21 = *(_QWORD *)(v0 + 1112);
      static Date.distantPast.getter(v20);
      sub_100004048(v21, (uint64_t *)&unk_1010EA690);
LABEL_9:
      if (sub_1007EF5EC(*(_QWORD *)(v0 + 1432), *(_QWORD *)(v0 + 1424)))
      {
        v22 = *(_QWORD *)(v0 + 1792);
        v23 = type metadata accessor for PropertyListEncoder(0);
        v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
        PropertyListEncoder.init()(v24);
        *(_QWORD *)(v0 + 304) = v262;
        *(_QWORD *)(v0 + 312) = v7;
        *(_QWORD *)(v0 + 320) = v255;
        *(_QWORD *)(v0 + 328) = v247;
        *(_QWORD *)(v0 + 336) = v8;
        *(_QWORD *)(v0 + 344) = v240;
        *(_QWORD *)(v0 + 352) = v9;
        *(_QWORD *)(v0 + 360) = v235;
        *(_QWORD *)(v0 + 368) = v10;
        v25 = sub_100960E44();
        v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 304, &type metadata for KeyDropBeaconAttributes, v25);
        if (v22)
        {
          v28 = v22;
          v29 = *(_QWORD *)(v0 + 1432);
          v30 = *(_QWORD *)(v0 + 1424);
          v31 = *(_QWORD *)(v0 + 1408);
          v32 = *(_QWORD *)(v0 + 1400);
          swift_release();
          v33 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
          v33(v30, v32);
          v33(v29, v32);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v252 = *(_BYTE *)(v0 + 2037);
          v188 = *(_QWORD *)(v0 + 1720);
          v117 = *(unsigned __int8 *)(v0 + 2024);
          v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
          v119 = *(_QWORD *)(v0 + 1616);
          v120 = *(_QWORD *)(v0 + 1600);
          v121 = *(_QWORD *)(v0 + 1592);
          v122 = *(_QWORD *)(v0 + 1056);
          v123 = (v117 + 16) & ~v117;
          v124 = *(_QWORD *)(v0 + 1576) + v123;
          v125 = v117 | 7;
          v126 = sub_100906BC0();
          v118(v119, v126, v120);
          sub_10005972C(v122, v121, type metadata accessor for SharingCircleKeyManager.Instruction);
          v127 = swift_allocObject(&unk_10109C3B8, v124, v125);
          sub_1000126EC(v121, v127 + v123, type metadata accessor for SharingCircleKeyManager.Instruction);
          v128 = swift_allocObject(&unk_10109C3E0, 32, 7);
          *(_QWORD *)(v128 + 16) = sub_100960968;
          *(_QWORD *)(v128 + 24) = v127;
          v266 = swift_allocObject(&unk_10109C408, 17, 7);
          *(_BYTE *)(v266 + 16) = v252;
          sub_10005972C(v122, v121, type metadata accessor for SharingCircleKeyManager.Instruction);
          v129 = swift_allocObject(&unk_10109C430, v124, v125);
          sub_1000126EC(v121, v129 + v123, type metadata accessor for SharingCircleKeyManager.Instruction);
          v245 = swift_allocObject(&unk_10109C458, 32, 7);
          *(_QWORD *)(v245 + 16) = sub_100960A74;
          *(_QWORD *)(v245 + 24) = v129;
          sub_10005972C(v122, v121, type metadata accessor for SharingCircleKeyManager.Instruction);
          v130 = swift_allocObject(&unk_10109C480, v124, v125);
          sub_1000126EC(v121, v130 + v123, type metadata accessor for SharingCircleKeyManager.Instruction);
          v131 = swift_allocObject(&unk_10109C4A8, 32, 7);
          *(_QWORD *)(v131 + 16) = sub_100960A7C;
          *(_QWORD *)(v131 + 24) = v130;
          v186 = swift_allocObject(&unk_10109C4D0, 24, 7);
          *(_QWORD *)(v186 + 16) = v28;
          v132 = swift_errorRetain(v28);
          v181 = Logger.logObject.getter(v132);
          v179 = static os_log_type_t.error.getter(v181);
          v177 = swift_allocObject(&unk_10109C4F8, 17, 7);
          *(_BYTE *)(v177 + 16) = 34;
          v175 = swift_allocObject(&unk_10109C520, 17, 7);
          *(_BYTE *)(v175 + 16) = 8;
          v133 = swift_allocObject(&unk_10109C548, 32, 7);
          *(_QWORD *)(v133 + 16) = sub_100963204;
          *(_QWORD *)(v133 + 24) = v128;
          v134 = swift_allocObject(&unk_10109C570, 32, 7);
          *(_QWORD *)(v134 + 16) = sub_10005CBA4;
          *(_QWORD *)(v134 + 24) = v133;
          v135 = swift_allocObject(&unk_10109C598, 17, 7);
          *(_BYTE *)(v135 + 16) = 34;
          v136 = v135;
          v229 = swift_allocObject(&unk_10109C5C0, 17, 7);
          *(_BYTE *)(v229 + 16) = 8;
          v137 = swift_allocObject(&unk_10109C5E8, 32, 7);
          *(_QWORD *)(v137 + 16) = sub_100960B78;
          *(_QWORD *)(v137 + 24) = v266;
          v218 = swift_allocObject(&unk_10109C610, 32, 7);
          *(_QWORD *)(v218 + 16) = sub_10005CBA4;
          *(_QWORD *)(v218 + 24) = v137;
          v199 = swift_allocObject(&unk_10109C638, 17, 7);
          *(_BYTE *)(v199 + 16) = 112;
          v192 = swift_allocObject(&unk_10109C660, 17, 7);
          *(_BYTE *)(v192 + 16) = 8;
          v138 = swift_allocObject(&unk_10109C688, 24, 7);
          *(_QWORD *)(v138 + 16) = 1752392040;
          v267 = swift_allocObject(&unk_10109C6B0, 32, 7);
          *(_QWORD *)(v267 + 16) = sub_10005CBC0;
          *(_QWORD *)(v267 + 24) = v138;
          v261 = swift_allocObject(&unk_10109C6D8, 17, 7);
          *(_BYTE *)(v261 + 16) = 33;
          v253 = swift_allocObject(&unk_10109C700, 17, 7);
          *(_BYTE *)(v253 + 16) = 8;
          v139 = swift_allocObject(&unk_10109C728, 32, 7);
          *(_QWORD *)(v139 + 16) = sub_10005CBAC;
          *(_QWORD *)(v139 + 24) = v245;
          v246 = swift_allocObject(&unk_10109C750, 32, 7);
          *(_QWORD *)(v246 + 16) = sub_10005CBA4;
          *(_QWORD *)(v246 + 24) = v139;
          v239 = swift_allocObject(&unk_10109C778, 17, 7);
          *(_BYTE *)(v239 + 16) = 112;
          v234 = swift_allocObject(&unk_10109C7A0, 17, 7);
          *(_BYTE *)(v234 + 16) = 8;
          v140 = swift_allocObject(&unk_10109C7C8, 24, 7);
          *(_QWORD *)(v140 + 16) = 1752392040;
          v224 = swift_allocObject(&unk_10109C7F0, 32, 7);
          *(_QWORD *)(v224 + 16) = sub_10005CBC0;
          *(_QWORD *)(v224 + 24) = v140;
          v221 = swift_allocObject(&unk_10109C818, 17, 7);
          *(_BYTE *)(v221 + 16) = 33;
          v215 = swift_allocObject(&unk_10109C840, 17, 7);
          *(_BYTE *)(v215 + 16) = 8;
          v141 = swift_allocObject(&unk_10109C868, 32, 7);
          *(_QWORD *)(v141 + 16) = sub_10005CBAC;
          *(_QWORD *)(v141 + 24) = v131;
          v196 = swift_allocObject(&unk_10109C890, 32, 7);
          *(_QWORD *)(v196 + 16) = sub_10005CBA4;
          *(_QWORD *)(v196 + 24) = v141;
          v194 = swift_allocObject(&unk_10109C8B8, 17, 7);
          *(_BYTE *)(v194 + 16) = 34;
          v190 = swift_allocObject(&unk_10109C8E0, 17, 7);
          *(_BYTE *)(v190 + 16) = 8;
          v142 = swift_allocObject(&unk_10109C908, 32, 7);
          *(_QWORD *)(v142 + 16) = sub_100960C64;
          *(_QWORD *)(v142 + 24) = v186;
          v143 = swift_allocObject(&unk_10109C930, 32, 7);
          *(_QWORD *)(v143 + 16) = sub_10005CBA4;
          *(_QWORD *)(v143 + 24) = v142;
          v144 = swift_allocObject(v188, 368, 7);
          sub_100882D28(v144, 21);
          *v145 = sub_10005CBC4;
          v145[1] = v177;
          v145[2] = sub_10005CBC4;
          v145[3] = v175;
          v145[4] = sub_10005CBB4;
          v145[5] = v134;
          v145[6] = sub_10005CBC4;
          v145[7] = v136;
          v145[8] = sub_10005CBC4;
          v145[9] = v229;
          v145[10] = sub_10005CBB4;
          v145[11] = v218;
          v145[12] = sub_10005CBC4;
          v145[13] = v199;
          v145[14] = sub_10005CBC4;
          v145[15] = v192;
          v145[16] = sub_10005CBB8;
          v145[17] = v267;
          v145[18] = sub_10005CBC4;
          v145[19] = v261;
          v145[20] = sub_10005CBC4;
          v145[21] = v253;
          v145[22] = sub_10005CBB4;
          v145[23] = v246;
          v145[24] = sub_10005CBC4;
          v145[25] = v239;
          v145[26] = sub_10005CBC4;
          v145[27] = v234;
          v145[28] = sub_10005CBB8;
          v145[29] = v224;
          v145[30] = sub_10005CBC4;
          v145[31] = v221;
          v145[32] = sub_10005CBC4;
          v145[33] = v215;
          v145[34] = sub_10005CBB4;
          v145[35] = v196;
          v145[36] = sub_10005CBC4;
          v145[37] = v194;
          v145[38] = sub_10005CBC4;
          v145[39] = v190;
          v145[40] = sub_10005CBB4;
          v145[41] = v143;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v181, v179))
          {
            v147 = (uint8_t *)sub_1006948A0(72);
            v148 = swift_slowAlloc(160, -1);
            *(_QWORD *)(v0 + 984) = 0;
            v183 = v148;
            *(_QWORD *)(v0 + 952) = v148;
            *(_WORD *)v147 = 1795;
            *(_QWORD *)(v0 + 1016) = v147 + 2;
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v177;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v175;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v134;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v136;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v229;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v218;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v199;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v192;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB8;
            *(_QWORD *)(v0 + 656) = v267;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v261;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v253;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v246;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v239;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v234;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB8;
            *(_QWORD *)(v0 + 656) = v224;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v221;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v215;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v196;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v194;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBC4;
            *(_QWORD *)(v0 + 656) = v190;
            sub_1006948A8(v206, v200, v202, v204);
            swift_release();
            *(_QWORD *)(v0 + 648) = sub_10005CBB4;
            *(_QWORD *)(v0 + 656) = v143;
            sub_1006948A8(v206, v200, v202, v204);
            v149 = *(_QWORD *)(v0 + 1616);
            v150 = *(_QWORD *)(v0 + 1608);
            v151 = *(_QWORD *)(v0 + 1600);
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v181, v179, "Keys to upload: %{public}s,\nfailed to add type: %{public}s,\nfor share-id: %{private,mask.hash}s,\nbeacon-id: %{private,mask.hash}s\nerror: %{public}s.", v147, 0x48u);
            swift_arrayDestroy(v183, 5, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v183, -1, -1);
            sub_100694894((uint64_t)v147);

            swift_errorRelease(v28);
            v90 = *(void (**)(uint64_t, uint64_t))(v150 + 8);
            v90(v149, v151);
          }
          else
          {
            v152 = *(_QWORD *)(v0 + 1616);
            v153 = *(_QWORD *)(v0 + 1608);
            v154 = *(_QWORD *)(v0 + 1600);
            swift_errorRelease(v28);

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v90 = *(void (**)(uint64_t, uint64_t))(v153 + 8);
            v90(v152, v154);
          }
        }
        else
        {
          v43 = v26;
          v44 = v27;
          v256 = *(_QWORD *)(v0 + 1776);
          v45 = *(_QWORD *)(v0 + 1768);
          v46 = *(_QWORD *)(v0 + 1256);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v47 = type metadata accessor for EncryptedData(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 1, 1, v47);
          sub_10001BBBC(v43, v44);
          v48 = v43;
          sub_100D7CD98(1, v43, v44, v46, (_QWORD *)(v0 + 160));
          v49 = sub_10001A9A8(&qword_101109250);
          v50 = swift_allocObject(v49, 104, 7);
          v51 = sub_10084F488(v50, 1);
          *(_OWORD *)v52 = *(_OWORD *)(v0 + 160);
          v54 = *(_OWORD *)(v0 + 192);
          v53 = *(_OWORD *)(v0 + 208);
          v55 = *(_OWORD *)(v0 + 176);
          *(_QWORD *)(v52 + 64) = *(_QWORD *)(v0 + 224);
          *(_OWORD *)(v52 + 32) = v54;
          *(_OWORD *)(v52 + 48) = v53;
          *(_OWORD *)(v52 + 16) = v55;
          v56 = SharingCircleWildAdvertisementKey.init(key:)(v51);
          sub_10001BD08(v45, v256);
          sub_100960D6C((_QWORD *)(v0 + 160), (void (*)(_QWORD, _QWORD))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
          v57 = sub_10095FD50(v56, v45, v256);
          v197 = (_QWORD *)(v0 + 160);
          v213 = v48;
          v216 = v44;
          v58 = *(unsigned __int8 *)(v0 + 2024);
          v241 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1712);
          v248 = *(_QWORD *)(v0 + 1720);
          v222 = *(_QWORD *)(v0 + 1632);
          v225 = *(_QWORD *)(v0 + 1600);
          v59 = *(_QWORD *)(v0 + 1592);
          v60 = *(_QWORD *)(v0 + 1512);
          v61 = *(_QWORD *)(v0 + 1496);
          v62 = *(_QWORD *)(v0 + 1240);
          v63 = *(_BYTE **)(v0 + 1192);
          v257 = *(_QWORD *)(v0 + 1168);
          v263 = *(_QWORD *)(v0 + 1176);
          v219 = *(_QWORD *)(v0 + 1056);
          v64 = (v58 + 16) & ~v58;
          v231 = v58 | 7;
          v236 = *(_QWORD *)(v0 + 1576) + v64;
          sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
          swift_bridgeObjectRelease();
          sub_10005972C(v60, v61, type metadata accessor for KeyDropInterface.KeyAlignment);
          sub_100D79EE0(12, v61, (uint64_t)v57, v63);
          sub_10005972C((uint64_t)v63, v62, type metadata accessor for KeyDropInterface.KeyPackage);
          sub_1009069AC(v62);
          v65 = sub_100906BC0();
          v241(v222, v65, v225);
          sub_10005972C(v219, v59, type metadata accessor for SharingCircleKeyManager.Instruction);
          v66 = swift_allocObject(&unk_10109CB38, v236, v231);
          sub_1000126EC(v59, v66 + v64, type metadata accessor for SharingCircleKeyManager.Instruction);
          v67 = swift_allocObject(&unk_10109CB60, 32, 7);
          *(_QWORD *)(v67 + 16) = sub_100960968;
          *(_QWORD *)(v67 + 24) = v66;
          sub_10005972C((uint64_t)v63, v62, type metadata accessor for KeyDropInterface.KeyPackage);
          v68 = *(unsigned __int8 *)(v257 + 80);
          v69 = (v68 + 16) & ~v68;
          v70 = swift_allocObject(&unk_10109CB88, v69 + v263, v68 | 7);
          sub_1000126EC(v62, v70 + v69, type metadata accessor for KeyDropInterface.KeyPackage);
          v71 = swift_allocObject(&unk_10109CBB0, 32, 7);
          *(_QWORD *)(v71 + 16) = sub_100960DF0;
          *(_QWORD *)(v71 + 24) = v70;
          v264 = Logger.logObject.getter(v71);
          v258 = static os_log_type_t.default.getter(v264);
          v72 = swift_allocObject(&unk_10109CBD8, 17, 7);
          *(_BYTE *)(v72 + 16) = 34;
          v73 = swift_allocObject(&unk_10109CC00, 17, 7);
          *(_BYTE *)(v73 + 16) = 8;
          v74 = swift_allocObject(&unk_10109CC28, 32, 7);
          *(_QWORD *)(v74 + 16) = sub_100963204;
          *(_QWORD *)(v74 + 24) = v67;
          v75 = swift_allocObject(&unk_10109CC50, 32, 7);
          *(_QWORD *)(v75 + 16) = sub_10005CBA4;
          *(_QWORD *)(v75 + 24) = v74;
          v76 = swift_allocObject(&unk_10109CC78, 17, 7);
          *(_BYTE *)(v76 + 16) = 34;
          v77 = swift_allocObject(&unk_10109CCA0, 17, 7);
          *(_BYTE *)(v77 + 16) = 8;
          v78 = swift_allocObject(&unk_10109CCC8, 32, 7);
          *(_QWORD *)(v78 + 16) = sub_100963208;
          *(_QWORD *)(v78 + 24) = v71;
          v79 = swift_allocObject(&unk_10109CCF0, 32, 7);
          *(_QWORD *)(v79 + 16) = sub_10005CBA4;
          *(_QWORD *)(v79 + 24) = v78;
          v80 = swift_allocObject(v248, 128, 7);
          sub_100882D28(v80, 6);
          *v81 = sub_10005CBC4;
          v81[1] = v72;
          v81[2] = sub_10005CBC4;
          v81[3] = v73;
          v81[4] = sub_10005CBB4;
          v81[5] = v75;
          v81[6] = sub_10005CBC4;
          v81[7] = v76;
          v81[8] = sub_10005CBC4;
          v81[9] = v77;
          v81[10] = sub_10005CBB4;
          v81[11] = v79;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v264, v258))
          {
            v82 = (uint8_t *)sub_1006948A0(22);
            v83 = swift_slowAlloc(64, -1);
            *(_QWORD *)(v0 + 784) = 0;
            v226 = v83;
            *(_QWORD *)(v0 + 776) = v83;
            *(_WORD *)v82 = 514;
            *(_QWORD *)(v0 + 792) = v82 + 2;
            *(_QWORD *)(v0 + 760) = sub_10005CBC4;
            *(_QWORD *)(v0 + 768) = v72;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 760), v0 + 792, v0 + 784, v0 + 776);
            swift_release();
            *(_QWORD *)(v0 + 760) = sub_10005CBC4;
            *(_QWORD *)(v0 + 768) = v73;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 760), v0 + 792, v0 + 784, v0 + 776);
            swift_release();
            *(_QWORD *)(v0 + 760) = sub_10005CBB4;
            *(_QWORD *)(v0 + 768) = v75;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 760), v0 + 792, v0 + 784, v0 + 776);
            swift_release();
            *(_QWORD *)(v0 + 760) = sub_10005CBC4;
            *(_QWORD *)(v0 + 768) = v76;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 760), v0 + 792, v0 + 784, v0 + 776);
            swift_release();
            *(_QWORD *)(v0 + 760) = sub_10005CBC4;
            *(_QWORD *)(v0 + 768) = v77;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 760), v0 + 792, v0 + 784, v0 + 776);
            swift_release();
            *(_QWORD *)(v0 + 760) = sub_10005CBB4;
            *(_QWORD *)(v0 + 768) = v79;
            sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 760), v0 + 792, v0 + 784, v0 + 776);
            v84 = *(_QWORD *)(v0 + 1632);
            v85 = *(_QWORD *)(v0 + 1608);
            v86 = *(_QWORD *)(v0 + 1600);
            v242 = *(_QWORD *)(v0 + 1424);
            v249 = *(_QWORD *)(v0 + 1432);
            v87 = *(_QWORD *)(v0 + 1408);
            v88 = *(_QWORD *)(v0 + 1400);
            v89 = *(_QWORD *)(v0 + 1192);
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v264, v258, "Keys to upload: %{public}s,\nadded: %{public}s.", v82, 0x16u);
            swift_arrayDestroy(v226, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v226, -1, -1);
            sub_100694894((uint64_t)v82);

            sub_100960D6C(v197, (void (*)(_QWORD, _QWORD))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
            sub_10001BC14(v213, v216);
            v90 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
            v90(v84, v86);
            sub_1000126B0(v89, type metadata accessor for KeyDropInterface.KeyPackage);
            v91 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
            v91(v242, v88);
            v91(v249, v88);
          }
          else
          {
            v92 = *(_QWORD *)(v0 + 1608);
            v232 = *(_QWORD *)(v0 + 1600);
            v237 = *(_QWORD *)(v0 + 1632);
            v259 = *(_QWORD *)(v0 + 1432);
            v243 = *(_QWORD *)(v0 + 1408);
            v250 = *(_QWORD *)(v0 + 1424);
            v93 = *(_QWORD *)(v0 + 1400);
            v227 = *(_QWORD *)(v0 + 1192);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();

            sub_100960D6C(v197, (void (*)(_QWORD, _QWORD))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
            sub_10001BC14(v213, v216);
            v90 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
            v90(v237, v232);
            sub_1000126B0(v227, type metadata accessor for KeyDropInterface.KeyPackage);
            v94 = *(void (**)(uint64_t, uint64_t))(v243 + 8);
            v94(v250, v93);
            v94(v259, v93);
          }
        }
        v108 = 0;
        v107 = v90;
LABEL_18:
        v95 = *(_QWORD *)(v0 + 1824);
        v96 = *(_QWORD *)(v0 + 1816);
        *(_QWORD *)(v0 + 1808) = v107;
        *(_QWORD *)(v0 + 1800) = v90;
        *(_QWORD *)(v0 + 1792) = v108;
        if (v95)
        {
          v97 = __clz(__rbit64(v95));
          v98 = (v95 - 1) & v95;
          v99 = v97 | (v96 << 6);
          v100 = *(_QWORD *)(v0 + 1784);
          goto LABEL_31;
        }
        if (__OFADD__(v96++, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        v102 = (unint64_t)((1 << *(_BYTE *)(v0 + 2036)) + 63) >> 6;
        v100 = *(_QWORD *)(v0 + 1784);
        if (v96 < v102)
        {
          v103 = v100 + 56;
          v104 = *(_QWORD *)(v100 + 56 + 8 * v96);
          if (v104)
          {
LABEL_30:
            v98 = (v104 - 1) & v104;
            v99 = __clz(__rbit64(v104)) + (v96 << 6);
LABEL_31:
            *(_QWORD *)(v0 + 1824) = v98;
            *(_QWORD *)(v0 + 1816) = v96;
            v106 = *(unsigned __int8 *)(*(_QWORD *)(v100 + 48) + v99);
            *(_BYTE *)(v0 + 2037) = v106;
            __asm { BR              X9 }
          }
          v105 = v96 + 1;
          if (v96 + 1 < v102)
          {
            v104 = *(_QWORD *)(v103 + 8 * v105);
            if (v104)
              goto LABEL_29;
            v105 = v96 + 2;
            if (v96 + 2 >= v102)
              goto LABEL_37;
            v104 = *(_QWORD *)(v103 + 8 * v105);
            if (v104)
            {
LABEL_29:
              v96 = v105;
              goto LABEL_30;
            }
            v105 = v96 + 3;
            if (v96 + 3 < v102)
            {
              v104 = *(_QWORD *)(v103 + 8 * v105);
              if (v104)
                goto LABEL_29;
              while (1)
              {
                v96 = v105 + 1;
                if (__OFADD__(v105, 1))
                  break;
                if (v96 >= v102)
                  goto LABEL_37;
                v104 = *(_QWORD *)(v103 + 8 * v96);
                ++v105;
                if (v104)
                  goto LABEL_30;
              }
LABEL_43:
              __break(1u);
              JUMPOUT(0x10094354CLL);
            }
          }
        }
LABEL_37:
        v109 = *(_QWORD *)(v0 + 1704);
        v110 = *(_QWORD *)(v0 + 1696);
        v111 = *(_QWORD *)(v0 + 1688);
        v155 = *(_QWORD *)(v0 + 1680);
        v156 = *(_QWORD *)(v0 + 1672);
        v157 = *(_QWORD *)(v0 + 1664);
        v158 = *(_QWORD *)(v0 + 1656);
        v159 = *(_QWORD *)(v0 + 1648);
        v160 = *(_QWORD *)(v0 + 1640);
        v161 = *(_QWORD *)(v0 + 1632);
        v162 = *(_QWORD *)(v0 + 1624);
        v163 = *(_QWORD *)(v0 + 1616);
        v164 = *(_QWORD *)(v0 + 1592);
        v112 = *(_QWORD *)(v0 + 1584);
        v113 = *(_QWORD *)(v0 + 1552);
        v114 = *(_QWORD *)(v0 + 1544);
        v115 = *(_QWORD *)(v0 + 1512);
        v165 = *(_QWORD *)(v0 + 1520);
        v166 = *(_QWORD *)(v0 + 1504);
        v167 = *(_QWORD *)(v0 + 1496);
        v168 = *(_QWORD *)(v0 + 1488);
        v169 = *(_QWORD *)(v0 + 1480);
        v170 = *(_QWORD *)(v0 + 1472);
        v171 = *(_QWORD *)(v0 + 1448);
        v172 = *(_QWORD *)(v0 + 1440);
        v173 = *(_QWORD *)(v0 + 1432);
        v174 = *(_QWORD *)(v0 + 1424);
        v116 = *(_QWORD *)(v0 + 1392);
        v176 = *(_QWORD *)(v0 + 1416);
        v178 = *(_QWORD *)(v0 + 1384);
        v180 = *(_QWORD *)(v0 + 1376);
        v182 = *(_QWORD *)(v0 + 1368);
        v184 = *(_QWORD *)(v0 + 1360);
        v185 = *(_QWORD *)(v0 + 1352);
        v187 = *(_QWORD *)(v0 + 1344);
        v189 = *(_QWORD *)(v0 + 1336);
        v191 = *(_QWORD *)(v0 + 1328);
        v193 = *(_QWORD *)(v0 + 1320);
        v195 = *(_QWORD *)(v0 + 1312);
        v198 = *(_QWORD *)(v0 + 1304);
        v201 = *(_QWORD *)(v0 + 1296);
        v203 = *(_QWORD *)(v0 + 1288);
        v205 = *(_QWORD *)(v0 + 1264);
        v207 = *(_QWORD *)(v0 + 1256);
        v208 = *(_QWORD *)(v0 + 1248);
        v209 = *(_QWORD *)(v0 + 1240);
        v210 = *(_QWORD *)(v0 + 1232);
        v211 = *(_QWORD *)(v0 + 1224);
        v212 = *(_QWORD *)(v0 + 1216);
        v214 = *(_QWORD *)(v0 + 1208);
        v217 = *(_QWORD *)(v0 + 1200);
        v220 = *(_QWORD *)(v0 + 1192);
        v223 = *(_QWORD *)(v0 + 1184);
        v228 = *(_QWORD *)(v0 + 1152);
        v233 = *(_QWORD *)(v0 + 1144);
        v238 = *(_QWORD *)(v0 + 1136);
        v244 = *(_QWORD *)(v0 + 1128);
        v251 = *(_QWORD *)(v0 + 1120);
        v254 = *(_QWORD *)(v0 + 1112);
        v260 = *(_QWORD *)(v0 + 1104);
        v265 = *(_QWORD *)(v0 + 1096);
        v268 = *(_QWORD *)(v0 + 1072);
        sub_10001EF3C(*(_QWORD *)(v0 + 1768), *(_QWORD *)(v0 + 1776));
        sub_1000D9530((uint64_t *)(v0 + 448));
        swift_release();
        sub_1000126B0(v112, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_1000126B0(v114, type metadata accessor for OwnedBeaconRecord);
        swift_weakDestroy(v0 + 824);
        sub_100004048(v116, &qword_1011063B8);
        sub_1000126B0(v115, type metadata accessor for KeyDropInterface.KeyAlignment);
        sub_1000126B0(v113, type metadata accessor for OwnedBeaconRecord);
        swift_task_dealloc(v109);
        swift_task_dealloc(v110);
        swift_task_dealloc(v111);
        swift_task_dealloc(v155);
        swift_task_dealloc(v156);
        swift_task_dealloc(v157);
        swift_task_dealloc(v158);
        swift_task_dealloc(v159);
        swift_task_dealloc(v160);
        swift_task_dealloc(v161);
        swift_task_dealloc(v162);
        swift_task_dealloc(v163);
        swift_task_dealloc(v164);
        swift_task_dealloc(v112);
        swift_task_dealloc(v113);
        swift_task_dealloc(v114);
        swift_task_dealloc(v165);
        swift_task_dealloc(v115);
        swift_task_dealloc(v166);
        swift_task_dealloc(v167);
        swift_task_dealloc(v168);
        swift_task_dealloc(v169);
        swift_task_dealloc(v170);
        swift_task_dealloc(v171);
        swift_task_dealloc(v172);
        swift_task_dealloc(v173);
        swift_task_dealloc(v174);
        swift_task_dealloc(v176);
        swift_task_dealloc(v116);
        swift_task_dealloc(v178);
        swift_task_dealloc(v180);
        swift_task_dealloc(v182);
        swift_task_dealloc(v184);
        swift_task_dealloc(v185);
        swift_task_dealloc(v187);
        swift_task_dealloc(v189);
        swift_task_dealloc(v191);
        swift_task_dealloc(v193);
        swift_task_dealloc(v195);
        swift_task_dealloc(v198);
        swift_task_dealloc(v201);
        swift_task_dealloc(v203);
        swift_task_dealloc(v205);
        swift_task_dealloc(v207);
        swift_task_dealloc(v208);
        swift_task_dealloc(v209);
        swift_task_dealloc(v210);
        swift_task_dealloc(v211);
        swift_task_dealloc(v212);
        swift_task_dealloc(v214);
        swift_task_dealloc(v217);
        swift_task_dealloc(v220);
        swift_task_dealloc(v223);
        swift_task_dealloc(v228);
        swift_task_dealloc(v233);
        swift_task_dealloc(v238);
        swift_task_dealloc(v244);
        swift_task_dealloc(v251);
        swift_task_dealloc(v254);
        swift_task_dealloc(v260);
        swift_task_dealloc(v265);
        swift_task_dealloc(v268);
        __asm { BR              X1 }
      }
      v34 = *(_QWORD *)(v0 + 1432);
      v35 = *(_QWORD *)(v0 + 1424);
      v36 = *(_QWORD *)(v0 + 1408);
      v37 = *(_QWORD *)(v0 + 1400);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v38(v35, v37);
      v38(v34, v37);
LABEL_36:
      v107 = *(void (**)(uint64_t, uint64_t))(v0 + 1808);
      v90 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
      v108 = *(_QWORD *)(v0 + 1792);
      goto LABEL_18;
    }
    v13 = (uint64_t *)(v0 + 1336);
    v9 = v230;
  }
  sub_100004048(*v13, v14);
  v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1408) + 56))(*(_QWORD *)(v0 + 1112), 1, 1, *(_QWORD *)(v0 + 1400));
  goto LABEL_8;
}

