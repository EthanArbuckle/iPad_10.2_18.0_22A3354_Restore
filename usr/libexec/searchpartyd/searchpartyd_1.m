uint64_t sub_1000921E8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _BYTE v7[24];

  v2 = (_QWORD *)(a1 + 16);
  result = swift_beginAccess(a1 + 16, v7, 1, 0);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v5)
    __break(1u);
  else
    *v2 = v6;
  return result;
}

double sub_100092238@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  double result;
  __int128 v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E25160);
  sub_1000123D4(KeyPath, v3, &v6);
  swift_release();
  result = *(double *)&v6;
  *a2 = v6;
  return result;
}

uint64_t sub_100092294@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E25110);
  v5 = sub_100C1BED0(KeyPath, v3);
  v7 = v6;
  result = swift_release(KeyPath);
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v7 & 1;
  return result;
}

uint64_t sub_1000922F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;

  v4 = *a1;
  KeyPath = swift_getKeyPath(a2);
  sub_100C1C8BC(KeyPath, v4, a3);
  return swift_release();
}

__n128 sub_100092334@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[3];
  uint64_t v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E250C0);
  sub_100B9513C(KeyPath, v3, (uint64_t)v12);
  swift_release();
  v5 = v13;
  v6 = v17;
  result = v14;
  v8 = v15;
  v9 = v16;
  v10 = v12[1];
  v11 = v12[2];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 48) = v5;
  *(__n128 *)(a2 + 56) = result;
  *(_OWORD *)(a2 + 72) = v8;
  *(_OWORD *)(a2 + 88) = v9;
  *(_QWORD *)(a2 + 104) = v6;
  return result;
}

uint64_t sub_1000923C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED640);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053F68, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A1534;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053F80;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100092960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED638);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053F18, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A1440;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053F30;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100092F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED630);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053EC8, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A1428;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053EE0;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_1000934A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED628);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053E78, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A1410;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053E90;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100093A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED620);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053E28, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A13F8;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053E40;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100093FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED618);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053DD8, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A13E0;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053DF0;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100094580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED610);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053D88, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A13C8;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053DA0;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100094B20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED600);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053D38, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A13B0;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053D50;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_1000950C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED5F0);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053CE8, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A1398;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053D00;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100095660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED5E8);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053C98, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A1344;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053CB0;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100095C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED5D8);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053C48, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A132C;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053C60;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_1000961A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED5D0);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053BF8, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A1314;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053C10;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100096740(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED5C8);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053BA8, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A12B4;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053BC0;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100096CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED5B8);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053B58, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A124C;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053B70;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100097280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED5B0);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053B08, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A11E8;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053B20;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100097820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED5A8);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053AB8, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A11D0;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053AD0;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100097DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED598);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053A68, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A11B8;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053A80;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100098360(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED588);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_101053A18, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A1130;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101053A30;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100098900(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[5];
  uint64_t v81;

  v66 = a1;
  v68 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v75 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FAA80);
  v74 = *(_QWORD *)(v78 - 8);
  v9 = *(_QWORD *)(v74 + 64);
  v10 = __chkstk_darwin(v78);
  v69 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v77 = (char *)&v54 - v11;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v12 = sub_10001A9A8(&qword_1010ED578);
  v13 = OS_dispatch_queue.sync<A>(execute:)(sub_1000A1100, v2, v12);
  v14 = aBlock[0];
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v16 = qword_1011B7DB0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  aBlock[0] = a2;
  swift_retain(a2);
  v19 = sub_10001A9A8(&qword_1010ED580);
  v20 = String.init<A>(describing:)(aBlock, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "ConfigurationCoordinator config value changed for %{public}@", 60, 2, v18);
  swift_bridgeObjectRelease(v18);
  v23 = *(_QWORD *)(v14 + 16);
  if (v23)
  {
    v64 = sub_10001F6FC();
    v24 = v74;
    v25 = *(unsigned __int8 *)(v74 + 80);
    v54 = v14;
    v26 = (char *)(v14 + ((v25 + 32) & ~v25));
    v63 = *(_QWORD *)(v74 + 72);
    v61 = v25 | 7;
    v59 = v5;
    v60 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v62 = (v25 + 16) & ~v25;
    v58 = enum case for DispatchQoS.QoSClass.default(_:);
    v57 = (v9 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = v56 + 8;
    v28 = v77;
    v27 = v78;
    do
    {
      v76 = v23;
      v29 = v60;
      v60(v28, v26, v27);
      v30 = v70;
      v31 = v71;
      v32 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, v58, v72);
      v33 = (void *)static OS_dispatch_queue.global(qos:)(v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      v34 = v69;
      v29(v69, v77, v78);
      v35 = swift_allocObject(&unk_1010539C8, v55, v61);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v35 + v62, v34, v78);
      v36 = v66;
      *(_QWORD *)(v35 + v57) = v66;
      *(_QWORD *)(v35 + v56) = a2;
      aBlock[4] = sub_1000A1118;
      v81 = v35;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_1010539E0;
      v37 = _Block_copy(aBlock);
      swift_retain(a2);
      v38 = swift_bridgeObjectRetain(v36);
      static DispatchQoS.unspecified.getter(v38);
      v79 = &_swiftEmptyArrayStorage;
      v39 = a2;
      v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v43 = v59;
      v44 = v68;
      v45 = v40;
      a2 = v39;
      v46 = v75;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v41, v42, v68, v45);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v43, v37);
      v27 = v78;
      v47 = v37;
      v48 = v67;
      v49 = v65;
      v24 = v74;
      _Block_release(v47);

      v50 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51 = v76;
      v28 = v77;
      v50(v43, v44);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v28, v27);
      swift_release(v81);
      v26 += v63;
      v23 = v51 - 1;
    }
    while (v23);
    v52 = v54;
  }
  else
  {
    v52 = v14;
  }
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100098EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = sub_10001A9A8(&qword_1010FAA80);
  Subscription.subscriber.getter(v11, v5);
  v6 = v12;
  v7 = v13;
  sub_10001AA44(v11, v12);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8);
  type metadata accessor for SPServiceState(0);
  v8(a2, a3, v9, v6, v7);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
}

uint64_t sub_100098F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v7 = sub_10001A9A8(&qword_1010FAA80);
  Subscription.subscriber.getter(v13, v7);
  v8 = v14;
  v9 = v15;
  sub_10001AA44(v13, v14);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
  v11 = sub_10001A9A8(a4);
  v10(a2, a3, v11, v8, v9);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
}

uint64_t sub_100098FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v7 = sub_10001A9A8(&qword_1010FAA80);
  Subscription.subscriber.getter(v11, v7);
  v8 = v12;
  v9 = v13;
  sub_10001AA44(v11, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a2, a3, a4, v8, v9);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
}

uint64_t sub_100099058(char a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD aBlock[5];
  uint64_t v56;
  _QWORD *v57;

  v47 = a5;
  v48 = a6;
  v45 = a4;
  v43 = a3;
  v46 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  __chkstk_darwin(v7);
  v52 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  __chkstk_darwin(v9);
  v49 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DefaultConfigurationLayer(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static os_log_type_t.default.getter(v15);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v19 = qword_1011B7DB0;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  LOBYTE(aBlock[0]) = a1;
  v22 = String.init<A>(describing:)(aBlock, &type metadata for ConfigurationCoordinator.ConfigurationSource);
  v24 = v23;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = sub_10001AA00();
  *(_QWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = v24;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "ConfigurationCoordinator new config from %{public}@", 51, 2, v21);
  swift_bridgeObjectRelease(v21);
  v25 = *(_QWORD *)(v46 + 56);
  sub_100030784(v43, (uint64_t)aBlock);
  swift_bridgeObjectRetain(v25);
  sub_1006BCA4C(aBlock, a1, (uint64_t)v17);
  v26 = sub_100C1ABE8((uint64_t)v17, v25);
  swift_bridgeObjectRelease(v25);
  sub_1000126B0((uint64_t)v17, type metadata accessor for DefaultConfigurationLayer);
  sub_10008D874((uint64_t)v26, v45 & 1);
  swift_bridgeObjectRelease(v26);
  sub_10001F6FC();
  v27 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v44);
  v28 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
  v29 = swift_allocObject(&unk_101053950, 32, 7);
  v31 = v47;
  v30 = v48;
  *(_QWORD *)(v29 + 16) = v47;
  *(_QWORD *)(v29 + 24) = v30;
  aBlock[4] = sub_10009F714;
  v56 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101053968;
  v32 = _Block_copy(aBlock);
  v33 = sub_10001D898(v31, v30);
  v34 = v49;
  static DispatchQoS.unspecified.getter(v33);
  v57 = _swiftEmptyArrayStorage;
  v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v37 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v38 = v52;
  v39 = v36;
  v40 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v39, v37, v54, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v38, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v40);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v51);
  return swift_release(v56);
}

uint64_t sub_100099458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  v1 = v0 + OBJC_IVAR____TtC12searchpartyd24ConfigurationCoordinator_rootURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000994E4()
{
  uint64_t v0;

  sub_100099458();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100099508()
{
  return type metadata accessor for ConfigurationCoordinator(0);
}

uint64_t type metadata accessor for ConfigurationCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_1010ECFC0;
  if (!qword_1010ECFC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConfigurationCoordinator);
  return result;
}

uint64_t sub_10009954C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = "\b";
  v4[7] = "\b";
  v4[8] = "\b";
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000995F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v20;

  v5 = sub_10001A9A8(&qword_1010FAA80);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_100030784(a1, (uint64_t)aBlock);
  v8 = swift_allocObject(&unk_101053810, 24, 7);
  swift_weakInit(v8 + 16, v2);
  v9 = sub_10001A9A8(&qword_1010ED178);
  Subscription.init(subscriber:unsubscribeBlock:)(aBlock, sub_10009A070, v8, v9);
  v10 = *(NSObject **)(v2 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 24) & ~v11;
  v13 = swift_allocObject(&unk_101053838, v12 + v7, v11 | 7);
  *(_QWORD *)(v13 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v14 = swift_allocObject(&unk_101053860, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_10009A08C;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_10001D858;
  v20 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_101053878;
  v15 = _Block_copy(aBlock);
  v16 = v20;
  swift_retain();
  swift_retain();
  swift_release(v16);
  dispatch_sync(v10, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 117, 1143, 32, 1);
  swift_release(v13);
  result = swift_release(v14);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000997F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10009986C(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10009986C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v16;

  v3 = sub_10001A9A8(&qword_1010FAA80);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = *(NSObject **)(v1 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_1010538B0, v8 + v5, v7 | 7);
  *(_QWORD *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v10 = swift_allocObject(&unk_1010538D8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10009A278;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_1000A18BC;
  v16 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_1010538F0;
  v11 = _Block_copy(aBlock);
  v12 = v16;
  swift_retain();
  swift_retain();
  swift_release(v12);
  dispatch_sync(v6, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 117, 1152, 32, 1);
  swift_release(v9);
  result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100099A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  _BYTE v21[24];

  v4 = sub_10001A9A8(&qword_1010FAA80);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 33, 0);
  v9 = *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(_QWORD *)(a1 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_1007C86D8(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
    *(_QWORD *)v8 = v9;
  }
  v12 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    v9 = sub_1007C86D8(v11 > 1, v12 + 1, 1, v9);
    *(_QWORD *)v8 = v9;
  }
  *(_QWORD *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v12, v7, v4);
  v13 = swift_endAccess(v21);
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v15 = qword_1011B7DB0;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v18 = *(_QWORD *)(*(_QWORD *)v8 + 16);
  *(_QWORD *)(v17 + 56) = &type metadata for Int;
  *(_QWORD *)(v17 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v17 + 32) = v18;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "ConfigurationCoordinator client subscribed. Count is %i", v20);
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_100099C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v15[4];
  uint64_t v16;
  _BYTE v17[24];

  v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 1, 0);
  v5 = *(_QWORD *)(a1 + 16);
  v16 = a2;
  swift_bridgeObjectRetain(v5);
  v6 = sub_10008C1E0((uint64_t (*)(char *))sub_10009A2D8, (uint64_t)v15, v5, &qword_1010FAA80, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A88C);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v8 = swift_bridgeObjectRelease(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v10 = qword_1011B7DB0;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  v13 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  *(_QWORD *)(v12 + 56) = &type metadata for Int;
  *(_QWORD *)(v12 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v12 + 32) = v13;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "ConfigurationCoordinator client unsubscribed. Count is %i", v15[0]);
  return swift_bridgeObjectRelease(v12);
}

BOOL sub_100099D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10001A9A8(&qword_1010FAA80);
  v5 = sub_1000193A4(&qword_1010ED188, &qword_1010FAA80, (const char *)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_100099DD8()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *v0;
  swift_beginAccess(*v0 + 16, v3, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + 16));
}

uint64_t sub_100099E18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1;
  swift_beginAccess(v3 + 16, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_100099E60(uint64_t a1)
{
  _QWORD *v1;

  swift_beginAccess(*v1 + 16, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100099EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000995F8(a1, a2);
}

uint64_t sub_100099EC4(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  v1 = a1;
  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v3 = qword_1011B7DB0;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v5 + 56) = &type metadata for Bool;
  *(_QWORD *)(v5 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v5 + 32) = v1 & 1;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "FMIP State changed to %i", v8);
  result = swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
  {
    v7 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7DB0, "ConfigurationCoordinator asking ServiceStateProvider to reset.", 62, 2, _swiftEmptyArrayStorage);
    sub_100013B60();
    sub_100B04AF0();
    return swift_release();
  }
  return result;
}

uint64_t sub_100099FF0(uint64_t a1)
{
  return sub_100099EC4(a1);
}

uint64_t sub_10009A010(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1010ED170, type metadata accessor for ConfigurationCoordinator, (uint64_t)&unk_100E23568);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009A04C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009A070(uint64_t a1)
{
  uint64_t v1;

  return sub_1000997F4(a1, v1);
}

uint64_t sub_10009A08C()
{
  return sub_10009A284(sub_100099A1C);
}

uint64_t sub_10009A098()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

Class sub_10009A0A8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

uint64_t sub_10009A11C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 456))(v1, v2);
}

uint64_t sub_10009A164@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 464))(v3, v4);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_10009A1B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 472))(v1, v2);
}

uint64_t sub_10009A200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010FAA80);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009A278()
{
  return sub_10009A284(sub_100099C14);
}

uint64_t sub_10009A284(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FAA80) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_10009A2C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

BOOL sub_10009A2D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100099D54(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10009A2F4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009B68C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A310(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009B7F4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10009A32C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009B97C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A348(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009BAEC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A364(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009BC54(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A380(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED2C0, (uint64_t *)&unk_101115F50);
  *v3 = result;
  return result;
}

uint64_t sub_10009A3AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009BDBC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A3C8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009CD5C(a1, a2, a3, *v3, &qword_1010ED420);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A3F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009BF6C(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED428, &qword_1010ED430);
  *v3 = result;
  return result;
}

uint64_t sub_10009A420(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009CD5C(a1, a2, a3, *v3, &qword_1010ED438);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A44C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009BF6C(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED440, &qword_1010ED448);
  *v3 = result;
  return result;
}

uint64_t sub_10009A478(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009BF6C(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED450, &qword_1010ED458);
  *v3 = result;
  return result;
}

uint64_t sub_10009A4A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED4D0, &qword_1010ED4D8);
  *v3 = result;
  return result;
}

uint64_t sub_10009A4D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_101108F20, type metadata accessor for MemberSharingCircle);
  *v3 = result;
  return result;
}

uint64_t sub_10009A4FC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009E964(a1, a2, a3, *v3, &qword_1010ED358);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A520(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010EE360, type metadata accessor for OwnerSharingCircle);
  *v3 = result;
  return result;
}

uint64_t sub_10009A54C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101108ED0, type metadata accessor for TimeBasedKey);
  *v3 = result;
  return result;
}

uint64_t sub_10009A578(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1011003C0, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
  *v3 = result;
  return result;
}

uint64_t sub_10009A5A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED248, type metadata accessor for KeyDropJoinToken);
  *v3 = result;
  return result;
}

uint64_t sub_10009A5D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_101108E70, type metadata accessor for BeaconEstimatedLocation);
  *v3 = result;
  return result;
}

uint64_t sub_10009A5FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED4A0, &qword_1011093A0);
  *v3 = result;
  return result;
}

uint64_t sub_10009A628(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010F7A80, (uint64_t *)&unk_1010F7720);
  *v3 = result;
  return result;
}

uint64_t sub_10009A654(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101109100, type metadata accessor for SharedBeaconRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10009A680(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_101108E30, type metadata accessor for OwnedBeaconRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10009A6AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009C150(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A6C8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED4A8, type metadata accessor for OwnSubmitLocationInfo);
  *v3 = result;
  return result;
}

uint64_t sub_10009A6F4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED350, type metadata accessor for SharingCircleSecret);
  *v3 = result;
  return result;
}

uint64_t sub_10009A720(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED658, &qword_101109410);
  *v3 = result;
  return result;
}

uint64_t sub_10009A74C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED660, &qword_1010ECA58);
  *v3 = result;
  return result;
}

uint64_t sub_10009A778(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED668, type metadata accessor for BeaconNamingRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10009A7A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1011092E0, type metadata accessor for KeySyncRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10009A7D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_101109110, type metadata accessor for MemberPeerTrust);
  *v3 = result;
  return result;
}

uint64_t sub_10009A7FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED308, type metadata accessor for OwnerPeerTrust);
  *v3 = result;
  return result;
}

uint64_t sub_10009A828(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009C2D8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A844(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009C458(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A860(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101108E60, type metadata accessor for DefaultConfigurationLayer);
  *v3 = result;
  return result;
}

uint64_t sub_10009A88C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED180, &qword_1010FAA80);
  *v3 = result;
  return result;
}

uint64_t sub_10009A8B8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED368, (uint64_t *)&unk_101105A10);
  *v3 = result;
  return result;
}

uint64_t sub_10009A8E4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED410, type metadata accessor for PeerCommunicationIdentifier);
  *v3 = result;
  return result;
}

uint64_t sub_10009A910(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009C5EC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A92C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009C744(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A948(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED4E8, &qword_1010ED4F0);
  *v3 = result;
  return result;
}

uint64_t sub_10009A974(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED388, &qword_1010ED390);
  *v3 = result;
  return result;
}

uint64_t sub_10009A9A0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009C8AC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A9BC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009CA10(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009A9D8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009CB90(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10009A9F4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009E964(a1, a2, a3, *v3, &qword_1010ED318);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009AA18(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED238, type metadata accessor for ObservedAdvertisement);
  *v3 = result;
  return result;
}

uint64_t sub_10009AA44(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED320, type metadata accessor for ObservedAdvertisement.Location);
  *v3 = result;
  return result;
}

uint64_t sub_10009AA70(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED310, type metadata accessor for KeySyncMetadata);
  *v3 = result;
  return result;
}

uint64_t sub_10009AA9C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED558, &qword_1010ED560);
  *v3 = result;
  return result;
}

uint64_t sub_10009AAC8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1010F78F0, type metadata accessor for BeaconObservation);
  *v3 = result;
  return result;
}

uint64_t sub_10009AAF4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED1B8, type metadata accessor for KeyGenerationBeaconInfo);
  *v3 = result;
  return result;
}

uint64_t sub_10009AB20(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED538, &qword_1010ED540);
  *v3 = result;
  return result;
}

uint64_t sub_10009AB4C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED548, type metadata accessor for SPCachedAdvertisement);
  *v3 = result;
  return result;
}

uint64_t sub_10009AB78(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED1D8, type metadata accessor for BeaconIdentifier);
  *v3 = result;
  return result;
}

uint64_t sub_10009ABA4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009CD5C(a1, a2, a3, *v3, &qword_1010ED250);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009ABD0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009CEC8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009ABEC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101108E20, &qword_1010ED1A0);
  *v3 = result;
  return result;
}

uint64_t sub_10009AC18(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_101109230, type metadata accessor for SafeLocation);
  *v3 = result;
  return result;
}

uint64_t sub_10009AC44(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1010ED710, &qword_1010ED468);
  *v3 = result;
  return result;
}

uint64_t sub_10009AC70(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1011090B0, &qword_1010ED360);
  *v3 = result;
  return result;
}

uint64_t sub_10009AC9C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009D070(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10009ACB8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009D1F8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10009ACD4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009D39C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009ACF0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009D520(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009AD0C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1011092A0, type metadata accessor for OwnedBeaconGroup);
  *v3 = result;
  return result;
}

uint64_t sub_10009AD38(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED520, &qword_1010ED528);
  *v3 = result;
  return result;
}

uint64_t sub_10009AD64(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009E1F4(a1, a2, a3, *v3, &qword_1010ED518);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009AD90(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009D6CC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009ADAC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED230, &qword_101100360);
  *v3 = result;
  return result;
}

uint64_t sub_10009ADD8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED288, &qword_101108FB0);
  *v3 = result;
  return result;
}

uint64_t sub_10009AE04(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED3C0, &qword_1010ED3C8);
  *v3 = result;
  return result;
}

uint64_t sub_10009AE30(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009D85C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10009AE4C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1011091C0, &qword_1011118F0);
  *v3 = result;
  return result;
}

uint64_t sub_10009AE78(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101108EE0, _s18ConnectionKeyGroupVMa);
  *v3 = result;
  return result;
}

uint64_t sub_10009AEA4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED210, type metadata accessor for WildModeAssociationRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10009AED0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_101109150, type metadata accessor for WildModeTrackingLocation);
  *v3 = result;
  return result;
}

uint64_t sub_10009AEFC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009D9F4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009AF18(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101109430, &qword_1010ED508);
  *v3 = result;
  return result;
}

uint64_t sub_10009AF44(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009DB50(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009AF60(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED200, type metadata accessor for FamilyCryptoKeysV2);
  *v3 = result;
  return result;
}

uint64_t sub_10009AF8C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED1F8, type metadata accessor for FamilyCryptoKeysV1);
  *v3 = result;
  return result;
}

uint64_t sub_10009AFB8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED1E8, type metadata accessor for ShareRecord);
  *v3 = result;
  return result;
}

uint64_t sub_10009AFE4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED218, type metadata accessor for CryptoKeys);
  *v3 = result;
  return result;
}

uint64_t sub_10009B010(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED3A0, &qword_1010ED3A8);
  *v3 = result;
  return result;
}

uint64_t sub_10009B03C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED3B0, &qword_1010ED3B8);
  *v3 = result;
  return result;
}

uint64_t sub_10009B068(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED278, &qword_1010ED280);
  *v3 = result;
  return result;
}

uint64_t sub_10009B094(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101108F60, type metadata accessor for FetchRequestBeacon);
  *v3 = result;
  return result;
}

uint64_t sub_10009B0C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED268, type metadata accessor for FetchResponse.SearchResult);
  *v3 = result;
  return result;
}

uint64_t sub_10009B0EC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009E044(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10009B108(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED220, type metadata accessor for RawSearchResult);
  *v3 = result;
  return result;
}

uint64_t sub_10009B134(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED380, &qword_1010FB7F0);
  *v3 = result;
  return result;
}

uint64_t sub_10009B160(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED490, type metadata accessor for SecureLocation);
  *v3 = result;
  return result;
}

uint64_t sub_10009B18C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED3F0, &qword_1010ED3F8);
  *v3 = result;
  return result;
}

uint64_t sub_10009B1B8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED1A8, &qword_101108020);
  *v3 = result;
  return result;
}

uint64_t sub_10009B1E4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009E964(a1, a2, a3, *v3, &qword_101109360);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009B208(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED4B8, &qword_1011093C0);
  *v3 = result;
  return result;
}

uint64_t sub_10009B234(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009E4E0(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED4C8, &qword_1010ED4C0);
  *v3 = result;
  return result;
}

uint64_t sub_10009B260(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED2A8, (uint64_t *)&unk_10110C6B0);
  *v3 = result;
  return result;
}

uint64_t sub_10009B28C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED290, &qword_101108FE0);
  *v3 = result;
  return result;
}

uint64_t sub_10009B2B8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009E4E0(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED2A0, &qword_1010ED298);
  *v3 = result;
  return result;
}

uint64_t sub_10009B2E4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED4B0, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
  *v3 = result;
  return result;
}

uint64_t sub_10009B310(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED1C8, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
  *v3 = result;
  return result;
}

uint64_t sub_10009B33C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009E6A0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009B358(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED398, &qword_1011091A0);
  *v3 = result;
  return result;
}

uint64_t sub_10009B384(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED4F8, type metadata accessor for ShareState);
  *v3 = result;
  return result;
}

uint64_t sub_10009B3B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101109140, &qword_1010ED378);
  *v3 = result;
  return result;
}

uint64_t sub_10009B3DC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED2D0, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  *v3 = result;
  return result;
}

uint64_t sub_10009B408(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009E808(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009B424(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009E964(a1, a2, a3, *v3, &qword_1010ED408);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009B448(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED370, &qword_101109130);
  *v3 = result;
  return result;
}

uint64_t sub_10009B474(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED478, &qword_101106F70);
  *v3 = result;
  return result;
}

uint64_t sub_10009B4A0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101108EC0, type metadata accessor for LocationProvider);
  *v3 = result;
  return result;
}

uint64_t sub_10009B4CC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009EC48(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009B4E8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_101109020, (uint64_t *)&unk_1010F7A10);
  *v3 = result;
  return result;
}

uint64_t sub_10009B514(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009EDC0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009B530(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED2F0, (uint64_t (*)(_QWORD))&type metadata accessor for CloudKitCoordinator.Deletion);
  *v3 = result;
  return result;
}

uint64_t sub_10009B55C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009EF3C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10009B578(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009F3B4(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED2F8, &qword_1010ED300);
  *v3 = result;
  return result;
}

uint64_t sub_10009B5A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009F0C4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009B5C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10009DCE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED670, &qword_1010ED678);
  *v3 = result;
  return result;
}

uint64_t sub_10009B5EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10009F21C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10009B608(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101108E10, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
  *v3 = result;
  return result;
}

uint64_t sub_10009B634(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED340, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
  *v3 = result;
  return result;
}

uint64_t sub_10009B660(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_101109070, type metadata accessor for BeaconKeyManager.KeyMapInfo);
  *v3 = result;
  return result;
}

uint64_t sub_10009B68C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_101106C20);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009B7F4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED2E0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_10001A9A8(&qword_1010ED2E8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009B97C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED228);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009BAD8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1011003C0, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_10009BAEC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED2B8);
    v11 = (char *)swift_allocObject(v10, (v9 << 7) | 0x20, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 95;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 7);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[128 * v8])
      memmove(v14, v15, v8 << 7);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[128 * v8] || v14 >= &v15[128 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009BC54(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED2D8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009BDBC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_101109250);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[72 * v8])
      memmove(v13, v14, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[72 * v8] || v13 >= &v14[72 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009BF44(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10009BF6C(a1, a2, a3, a4, &qword_1010ED428, &qword_1010ED430);
}

uint64_t sub_10009BF58(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10009BF6C(a1, a2, a3, a4, &qword_1010ED440, &qword_1010ED448);
}

uint64_t sub_10009BF6C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10001A9A8(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 24 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 24 * v11)
      memmove(v14 + 4, a4 + 4, 24 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 24 * v11 || v16 >= v17 + 24 * v11)
  {
    sub_10001A9A8(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009C114(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_101108E70, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_10009C128(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10009DCE8(a1, a2, a3, a4, &qword_1010F7A80, (uint64_t *)&unk_1010F7720);
}

uint64_t sub_10009C13C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_101108E30, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_10009C150(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_101109380);
    v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v8])
      memmove(v13, v14, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[56 * v8] || v13 >= &v14[56 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009C2D8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED1F0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009C444(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, (uint64_t *)&unk_1010F78F0, type metadata accessor for BeaconObservation);
}

uint64_t sub_10009C458(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED1E0);
    v11 = (char *)swift_allocObject(v10, 160 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 160);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[160 * v8])
      memmove(v13, v14, 160 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[160 * v8] || v13 >= &v14[160 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009C5D8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, (uint64_t *)&unk_101108E60, type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_10009C5EC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED418);
    v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009C744(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010F4A30);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009C8AC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED470);
    v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = v8 << 6;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009CA10(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8((uint64_t *)&unk_101108E00);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009CB90(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED330);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_10001A9A8(&qword_1010ED338);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009CD34(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1010ED568, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_10009CD48(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1010ED550, type metadata accessor for UpdateDeviceState);
}

uint64_t sub_10009CD5C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_10001A9A8(a5);
    v12 = (char *)swift_allocObject(v11, 16 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v9])
      memmove(v15, v16, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v9] || v15 >= &v16[16 * v9])
  {
    swift_arrayInitWithCopy(v15);
LABEL_30:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009CEC8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED240);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009D048(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1010ED348, type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_10009D05C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_10009E1F4(a1, a2, a3, a4, &qword_1010ED518);
}

uint64_t sub_10009D070(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED400);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009D1F8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED3E0);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_10001A9A8(&qword_1010ED3E8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009D39C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010EE2B0);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009D520(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED1C0);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009D6A4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, (uint64_t *)&unk_1011092A0, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_10009D6B8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1010ED530, type metadata accessor for StandaloneBeacon);
}

uint64_t sub_10009D6CC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED510);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009D834(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10009DCE8(a1, a2, a3, a4, &qword_1010ED230, &qword_101100360);
}

uint64_t sub_10009D848(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1010ED3D0, type metadata accessor for BeaconStatus);
}

uint64_t sub_10009D85C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED3D8);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    type metadata accessor for SPBeaconTaskName(0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009D9E0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_101109150, type metadata accessor for WildModeTrackingLocation);
}

uint64_t sub_10009D9F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_101109300);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009DB50(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_101109090);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8])
      memmove(v13, v14, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[48 * v8] || v13 >= &v14[48 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009DCD4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1010ED1E8, type metadata accessor for ShareRecord);
}

uint64_t sub_10009DCE8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10001A9A8(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_10001A9A8(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009DE8C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8((uint64_t *)&unk_101108F80);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_10001A9A8(&qword_1010ED270);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009E030(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, (uint64_t *)&unk_101108F60, type metadata accessor for FetchRequestBeacon);
}

uint64_t sub_10009E044(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED260);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8)
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_10001A9A8(&qword_101108F70);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009E1CC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1010ED220, type metadata accessor for RawSearchResult);
}

uint64_t sub_10009E1E0(char a1, int64_t a2, char a3, char *a4)
{
  return sub_10009E1F4(a1, a2, a3, a4, &qword_1010ED4E0);
}

uint64_t sub_10009E1F4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_10001A9A8(a5);
    v12 = (char *)swift_allocObject(v11, 32 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 1;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 5);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  v17 = 32 * v9;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[v17])
      memmove(v15, v16, v17);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[v17] || v15 >= &v16[v17])
  {
    swift_arrayInitWithCopy(v15);
LABEL_30:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009E35C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED488);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8])
      memmove(v13, v14, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[88 * v8] || v13 >= &v14[88 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009E4E0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10001A9A8(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 56 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 56);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 56 * v11)
      memmove(v14 + 4, a4 + 4, 56 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 56 * v11 || v16 >= v17 + 56 * v11)
  {
    sub_10001A9A8(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009E68C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1010ED1C8, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

uint64_t sub_10009E6A0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED1D0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009E7FC(char a1, int64_t a2, char a3, char *a4)
{
  return sub_10009E964(a1, a2, a3, a4, &qword_1010ED500);
}

uint64_t sub_10009E808(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED2C8);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009E964(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_10001A9A8(a5);
    v12 = (char *)swift_allocObject(v11, v10 + 32, 7);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v9])
      memmove(v14, v15, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[v9] || v14 >= &v15[v9])
  {
    memcpy(v14, v15, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009EAAC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10009F3B4(a1, a2, a3, a4, &qword_1010ED478, &qword_101106F70);
}

uint64_t sub_10009EAC0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED190);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8)
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_10001A9A8(&qword_1010ED198);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009EC48(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8((uint64_t *)&unk_1011094B0);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009EDC0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED460);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 72 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009EF3C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED208);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_10001A9A8((uint64_t *)&unk_101109190);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009F0C4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED258);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009F21C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED480);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009F3A0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10009F3B4(a1, a2, a3, a4, &qword_1010ED328, &qword_101109050);
}

uint64_t sub_10009F3B4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10001A9A8(a5);
  v14 = *(_QWORD *)(sub_10001A9A8(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_10001A9A8(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10009F594(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, (uint64_t *)&unk_101109080, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
}

uint64_t sub_10009F5A8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, &qword_1010ED340, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
}

uint64_t sub_10009F5BC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100017FE8(a1, a2, a3, a4, (uint64_t *)&unk_101109070, type metadata accessor for BeaconKeyManager.KeyMapInfo);
}

uint64_t sub_10009F5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10009F5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_10110C6B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009F640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  _QWORD v12[5];

  v12[3] = a7;
  v12[4] = a8;
  v10 = sub_100018F08(v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v10, a1, a7);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10009F6FC);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_10009F6FC()
{
  return sub_1000A1604();
}

uint64_t sub_10009F718()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009F72C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1ADA8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F754@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1A83C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10009F77C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1ADBC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10009F7A4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1ADC8(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10009F7D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1ADD4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F7FC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1ADF4(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_10009F828@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE14(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10009F858@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE2C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F880@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1A848(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F8A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE40(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F8D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE54(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F8F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE68(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F920@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1AE7C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10009F948@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE88(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F970@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE9C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F998@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AEB0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009F9C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1AEC4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10009F9E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AED0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FA10@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AEE4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FA38@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AEF8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FA60@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AF0C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FA88@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AF20(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10009FAB4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AF2C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FADC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AF40(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FB04@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AF54(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FB2C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AF68(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FB54@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AF7C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FB7C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AF90(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FBA4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AFA4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FBCC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AFB8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FBF4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AFCC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FC1C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AFE0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FC44@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AFF4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FC6C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B008(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10009FC98@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B014(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FCC0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B028(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FCE8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B03C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FD10@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B050(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FD38@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B064(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FD60@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B078(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FD88@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B08C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FDB0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B0A0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10009FDD8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B0AC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10009FE08@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B1C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FE30@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B1D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FE58@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B1E8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FE80@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B1FC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FEA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B210(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FED0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B224(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_10009FF00@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000922F0(a1, (uint64_t)&unk_100E25138, a2);
}

uint64_t sub_10009FF20@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000922F0(a1, (uint64_t)&unk_100E250E8, a2);
}

uint64_t sub_10009FF3C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B318(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FF64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B32C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10009FF8C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B340(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10009FFB4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B34C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10009FFDC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B358(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0004@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B364(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A002C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1000A0064@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B3FC(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0090@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B408(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A00BC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B414(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A00E8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B420(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0110@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B42C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0138@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B438(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0160@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B444(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0188@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_10001ED68(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A01B0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B450(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A01D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B45C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0200@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B468(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A022C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B474(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0254@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B488(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A027C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B494(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000A02A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B4A0(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000A02CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B4AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A02F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B4C0(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000A031C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B4CC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0344@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B4E0(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000A036C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B5EC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0394@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B5F8(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A03C0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B604(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A03EC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B610(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0418@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B61C(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A044C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B650(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0474@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B664(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A049C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B678(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A04C4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B68C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A04EC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B698(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0514@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B6A4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A053C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1A870(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0564@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B6B0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A058C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B6C4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A05B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B6D8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A05DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B6EC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0604@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B6F8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A062C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B704(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0654@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B718(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A067C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B72C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A06A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B740(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A06CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B754(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A06F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B768(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A071C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B77C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0744@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B790(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A076C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B7A4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0794@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B7B0(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A07C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B7BC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A07E8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B7C8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0810@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B7D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0838@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B7E8(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0864@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B7F4(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0890@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B800(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A08BC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B80C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A08E4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B820(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A090C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B82C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0934@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B838(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A095C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B84C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0984@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B860(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A09AC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B874(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A09D4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B888(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A09FC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B894(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0A28@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B8A0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0A50@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B8AC(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0A78@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B8B8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0AA0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B8CC(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0ACC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B8D8(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0AF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B8E4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0B20@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_10001ED74(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0B48@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1B9F0(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0B70@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B9FC(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0B9C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BA08(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0BC8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_10001ED80(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0BF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BA14(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0C18@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BA28(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0C40@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BA3C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0C68@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1A85C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0C90@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BA50(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0CB8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BA64(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0CE0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BA78(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0D08@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BA8C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0D30@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BAA0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0D58@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BAB4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0D80@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BAC8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0DA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BADC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0DD0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BAF0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0DF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BB04(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0E20@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BB18(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0E48@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BB24(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0E70@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BB30(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0E9C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BB3C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0EC4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BB48(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0EEC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BB54(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0F18@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BB60(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A0F44@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BB6C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0F6C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BC60(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A0F94@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BD6C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0FBC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BD78(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A0FE4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BD84(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A100C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BD90(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A1034@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BD9C(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A105C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BDA8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A1084@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1BDB4(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000A10B0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BEB8(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A10D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_100C1BEC4(*a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A1100@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000A1454(a1);
}

uint64_t sub_1000A1118()
{
  return sub_1000A1144((uint64_t)&type metadata for UInt32, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098FCC);
}

uint64_t sub_1000A1130()
{
  return sub_1000A1144((uint64_t)&unk_1010ED590, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098F30);
}

uint64_t sub_1000A1144(uint64_t a1, uint64_t (*a2)(unint64_t, _QWORD, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(sub_10001A9A8(&qword_1010FAA80) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a2(v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_1000A11B8()
{
  return sub_1000A1144((uint64_t)&unk_1010ED5A0, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098F30);
}

uint64_t sub_1000A11D0()
{
  return sub_1000A1144((uint64_t)&type metadata for UInt64, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098FCC);
}

uint64_t sub_1000A11E8()
{
  return sub_1000A1144((uint64_t)&type metadata for AllMacBeaconConfigs, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098FCC);
}

uint64_t sub_1000A1200(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 472))(v1, v2);
}

uint64_t sub_1000A124C()
{
  return sub_1000A1144((uint64_t)&unk_1010ED5C0, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098F30);
}

uint64_t sub_1000A1260@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 464))(v3, v4);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1000A12B4()
{
  return sub_1000A1144((uint64_t)&unk_1010EA690, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098F30);
}

uint64_t sub_1000A12C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 456))(v1, v2);
}

uint64_t sub_1000A1314()
{
  return sub_1000A1144((uint64_t)&qword_1010ED860, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098F30);
}

uint64_t sub_1000A132C()
{
  return sub_1000A1144((uint64_t)&unk_1010ED5E0, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098F30);
}

uint64_t sub_1000A1344()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010FAA80) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100098EA0(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000A1398()
{
  return sub_1000A1144((uint64_t)&unk_1010ED5F8, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098F30);
}

uint64_t sub_1000A13B0()
{
  return sub_1000A1144((uint64_t)&unk_1010ED608, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098F30);
}

uint64_t sub_1000A13C8()
{
  return sub_1000A1144((uint64_t)&type metadata for Int, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098FCC);
}

uint64_t sub_1000A13E0()
{
  return sub_1000A1144((uint64_t)&type metadata for String, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098FCC);
}

uint64_t sub_1000A13F8()
{
  return sub_1000A1144((uint64_t)&unk_1011063B0, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098F30);
}

uint64_t sub_1000A1410()
{
  return sub_1000A1144((uint64_t)&type metadata for Bool, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098FCC);
}

uint64_t sub_1000A1428()
{
  return sub_1000A1144((uint64_t)&type metadata for Double, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098FCC);
}

uint64_t sub_1000A1440()
{
  return sub_1000A1144((uint64_t)&type metadata for UInt, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098FCC);
}

uint64_t sub_1000A1454@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 0, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_1000A14A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_1010FAA80);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000A1534()
{
  return sub_1000A1144((uint64_t)&type metadata for Data, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t))sub_100098FCC);
}

uint64_t sub_1000A154C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000A1570()
{
  uint64_t v0;

  return sub_10008DCD8(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

unint64_t sub_1000A157C()
{
  unint64_t result;

  result = qword_1010ED648;
  if (!qword_1010ED648)
  {
    result = swift_getWitnessTable(&unk_100E66514, &type metadata for Configuration);
    atomic_store(result, (unint64_t *)&qword_1010ED648);
  }
  return result;
}

unint64_t sub_1000A15C0()
{
  unint64_t result;

  result = qword_1010ED650;
  if (!qword_1010ED650)
  {
    result = swift_getWitnessTable(&unk_100E664EC, &type metadata for Configuration);
    atomic_store(result, (unint64_t *)&qword_1010ED650);
  }
  return result;
}

uint64_t sub_1000A1604()
{
  uint64_t v0;

  return sub_100099058(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1000A162C()
{
  uint64_t v0;

  return sub_10008D548(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A1638()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A1664()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t getEnumTagSinglePayload for MessagingDestination.DestinationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfigurationCoordinator.ConfigurationSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000A1768 + 4 * byte_100E234C9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000A179C + 4 * byte_100E234C4[v4]))();
}

uint64_t sub_1000A179C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A17A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A17ACLL);
  return result;
}

uint64_t sub_1000A17B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A17C0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000A17C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A17CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationCoordinator.ConfigurationSource()
{
  return &type metadata for ConfigurationCoordinator.ConfigurationSource;
}

unint64_t sub_1000A17EC()
{
  unint64_t result;

  result = qword_1010ED680;
  if (!qword_1010ED680)
  {
    result = swift_getWitnessTable(&unk_100E2526C, &type metadata for ConfigurationCoordinator.ConfigurationSource);
    atomic_store(result, (unint64_t *)&qword_1010ED680);
  }
  return result;
}

unint64_t sub_1000A1830(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101048C80, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_1000A1878()
{
  unint64_t result;

  result = qword_1010ED688;
  if (!qword_1010ED688)
  {
    result = swift_getWitnessTable(&unk_100E25234, &type metadata for ConfigurationCoordinator.ConfigurationSource);
    atomic_store(result, (unint64_t *)&qword_1010ED688);
  }
  return result;
}

void sub_1000A1988(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  void (*v34)(void);
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  id v43;
  NSString v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  void (*v52)(char *, uint64_t);
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  char *v57;
  unint64_t v58;
  _BYTE *v59;
  void *v60;
  char *v61;
  NSString v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  NSString v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;

  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v5);
  v92 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for Date(0);
  v91 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v90 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v83 - v12;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD **)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v94 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v95 = (char *)&v83 - v19;
  v20 = CKRecord.recordType.getter(v18);
  v22 = v21;
  if (v20 == 0xD000000000000012 && v21 == 0x8000000100E25330)
  {
    swift_bridgeObjectRelease(0x8000000100E25330);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, 0xD000000000000012, 0x8000000100E25330, 0);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) == 0)
    {
      v58 = sub_1000A3864();
      v32 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v58, 0, 0);
      *v59 = 0;
      goto LABEL_14;
    }
  }
  v89 = v2;
  v24 = objc_msgSend(a1, "recordID");
  v25 = objc_msgSend(v24, "recordName");

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v96 = v15;
  v28 = v27;

  UUID.init(uuidString:)(v26, v28);
  v29 = v96;
  swift_bridgeObjectRelease(v28);
  v30 = (unsigned int (*)(char *, uint64_t, uint64_t))v29[6];
  if (v30(v13, 1, v14) == 1)
  {
    sub_100004048((uint64_t)v13, &qword_1010ED860);
    v31 = sub_1000A3864();
    v32 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v31, 0, 0);
    *v33 = 2;
LABEL_14:
    swift_willThrow(v32);

    return;
  }
  v86 = (void (*)(char *, char *, uint64_t))v29[4];
  v86(v95, v13, v14);
  v85 = type metadata accessor for KeyAlignmentRecord(0);
  v34 = (void (*)(void))v29[2];
  v87 = (char *)a2 + *(int *)(v85 + 20);
  v88 = v14;
  v34();
  v35 = objc_autoreleasePoolPush();
  v36 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v36);
  objc_msgSend(v36, "finishEncoding");
  v37 = objc_msgSend(v36, "encodedData");
  v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v39 = a2;
  v41 = v40;

  objc_autoreleasePoolPop(v35);
  *v39 = v38;
  v39[1] = v41;
  v42 = v39;
  v43 = objc_msgSend(a1, "encryptedValues");
  v44 = String._bridgeToObjectiveC()();
  v45 = objc_msgSend(v43, "objectForKeyedSubscript:", v44);

  if (!v45
    || (v99 = (uint64_t)v45,
        v46 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        (swift_dynamicCast(&v97, &v99, v46, &type metadata for String, 6) & 1) == 0))
  {
    v54 = sub_1000A3864();
    v55 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v54, 0, 0);
    *v56 = 3;
    swift_willThrow(v55);
    swift_unknownObjectRelease(v43);

    v52 = (void (*)(char *, uint64_t))v96[1];
    v53 = v42;
    v48 = v88;
    goto LABEL_12;
  }
  v47 = v98;
  UUID.init(uuidString:)(v97, v98);
  swift_bridgeObjectRelease(v47);
  v48 = v88;
  if (v30(v11, 1, v88) == 1)
  {
    sub_100004048((uint64_t)v11, &qword_1010ED860);
    v49 = sub_1000A3864();
    v50 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v49, 0, 0);
    *v51 = 4;
    swift_willThrow(v50);
    swift_unknownObjectRelease(v43);

    v52 = (void (*)(char *, uint64_t))v96[1];
    v53 = v42;
LABEL_12:
    v57 = v87;
    v52(v95, v48);
    sub_10001BC14(*v53, v53[1]);
    v52(v57, v48);
    return;
  }
  v60 = v43;
  v61 = v94;
  v86(v94, v11, v48);
  v62 = String._bridgeToObjectiveC()();
  v84 = v60;
  v63 = objc_msgSend(v60, "objectForKeyedSubscript:", v62);

  if (!v63 || (v97 = v63, v64 = swift_dynamicCast(&v99, &v97, v46, &type metadata for UInt64, 6), (v64 & 1) == 0))
  {
LABEL_22:
    v75 = static os_log_type_t.error.getter(v64);
    v76 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v77 = swift_allocObject(v76, 72, 7);
    *(_OWORD *)(v77 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v77 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v77 + 64) = sub_100088600();
    *(_QWORD *)(v77 + 32) = a1;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v78 = a1;
    v79 = (void *)static OS_os_log.default.getter(v78);
    os_log(_:dso:log:_:_:)(v75, &_mh_execute_header, v79, "Invalid KeyAlignmentRecord - %@", 31, 2, v77);
    swift_bridgeObjectRelease(v77);

    v80 = sub_1000A3864();
    v81 = swift_allocError(&type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError, v80, 0, 0);
    *v82 = 5;
    swift_willThrow(v81);
    swift_unknownObjectRelease(v84);

    v52 = (void (*)(char *, uint64_t))v96[1];
    v52(v61, v48);
    v53 = v42;
    goto LABEL_12;
  }
  v65 = v99;
  v66 = String._bridgeToObjectiveC()();
  v67 = objc_msgSend(v84, "objectForKeyedSubscript:", v66);

  if (!v67)
  {
    v69 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v91 + 56))(v92, 1, 1, v93);
    goto LABEL_21;
  }
  v97 = v67;
  v69 = (uint64_t)v92;
  v68 = v93;
  v70 = swift_dynamicCast(v92, &v97, v46, v93, 6);
  v71 = v91;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56))(v69, v70 ^ 1u, 1, v68);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v69, 1, v68) == 1)
  {
LABEL_21:
    v64 = sub_100004048(v69, (uint64_t *)&unk_1010EA690);
    goto LABEL_22;
  }
  swift_unknownObjectRelease(v84);

  ((void (*)(char *, uint64_t))v96[1])(v95, v48);
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 32);
  v73 = v90;
  v72(v90, v69, v68);
  v74 = v85;
  v86((char *)v42 + *(int *)(v85 + 24), v61, v48);
  *(uint64_t *)((char *)v42 + *(int *)(v74 + 28)) = v65;
  v72((char *)v42 + *(int *)(v74 + 32), (uint64_t)v73, v68);
}

uint64_t sub_1000A21BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6700);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6700);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x8000000100EC75A0, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1000A228C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000A22C4 + 4 * byte_100E252A0[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_1000A22C4()
{
  return 0x696669746E656469;
}

uint64_t sub_1000A231C()
{
  unsigned __int8 *v0;

  return sub_1000A228C(*v0);
}

uint64_t sub_1000A2324@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A2F88(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A2348(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000A2354(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A3820();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A237C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A3820();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000A23A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  Data.hash(into:)(v8, *v1, v1[1]);
  v3 = type metadata accessor for UUID(0);
  v4 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  Hasher._combine(_:)(*(_QWORD *)((char *)v1 + *(int *)(a1 + 28)));
  v5 = type metadata accessor for Date(0);
  v6 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v8, v5, v6);
  return Hasher._finalize()();
}

uint64_t sub_1000A24A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  Data.hash(into:)(a1, *v2, v2[1]);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  Hasher._combine(_:)(*(_QWORD *)((char *)v2 + *(int *)(a2 + 28)));
  v7 = type metadata accessor for Date(0);
  v8 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
}

Swift::Int sub_1000A2590(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  Data.hash(into:)(v9, *v2, v2[1]);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  Hasher._combine(_:)(*(_QWORD *)((char *)v2 + *(int *)(a2 + 28)));
  v6 = type metadata accessor for Date(0);
  v7 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_1000A2694(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  char v24;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010ED6D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1000A3820();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyAlignmentRecord.CodingKeys, &type metadata for KeyAlignmentRecord.CodingKeys, v11, v9, v10);
  v23 = *v3;
  v24 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for KeyAlignmentRecord(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v23) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v23, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v23, v5, v15, v16);
    v18 = *(_QWORD *)((char *)v3 + v13[7]);
    LOBYTE(v23) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v23, v5);
    v19 = (char *)v3 + v13[8];
    LOBYTE(v23) = 4;
    v20 = type metadata accessor for Date(0);
    v21 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v23, v5, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A28D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD *, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  __int128 v43;
  char v44;

  v34 = a2;
  v35 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v36 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v38 - 8);
  v4 = __chkstk_darwin(v38);
  v37 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v31 - v6);
  v39 = sub_10001A9A8(&qword_1010ED6B0);
  v8 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_10001AA44(a1, v14);
  v16 = sub_1000A3820();
  v41 = v10;
  v17 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyAlignmentRecord.CodingKeys, &type metadata for KeyAlignmentRecord.CodingKeys, v16, v14, v15);
  if (v17)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v32 = v8;
  v42 = a1;
  v18 = v13;
  v19 = v40;
  v20 = v38;
  v44 = 0;
  v21 = sub_100036994();
  v22 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v39, &type metadata for Data, v21);
  *(_OWORD *)v18 = v43;
  LOBYTE(v43) = 1;
  v31 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v20, &v43, v22, v20, v31);
  v23 = *(void (**)(char *, _QWORD *, uint64_t))(v19 + 32);
  v23(&v18[v11[5]], v7, v20);
  LOBYTE(v43) = 2;
  v24 = v37;
  v25 = v31;
  v31 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v20, &v43, v22, v20, v25);
  ((void (*)(char *, _QWORD *))v23)(&v18[v11[6]], v24);
  LOBYTE(v43) = 3;
  *(_QWORD *)&v18[v11[7]] = KeyedDecodingContainer.decode(_:forKey:)(&v43, v22);
  LOBYTE(v43) = 4;
  v26 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v27 = v22;
  v28 = v35;
  v29 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v35, &v43, v27, v35, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v39);
  (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 32))(&v18[v11[8]], v29, v28);
  sub_1000A37A0((uint64_t)v18, v34);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  return sub_1000A37E4((uint64_t)v18);
}

void sub_1000A2D4C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_autoreleasePoolPush();
  if (qword_1010E9920 != -1)
    swift_once(&qword_1010E9920, sub_1000A21BC);
  v1 = type metadata accessor for URL(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6700);
  v3 = UUID.uuidString.getter(v2);
  URL.appendingPathComponent(_:)(v3, v4);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1000A2DE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A28D0(a1, a2);
}

uint64_t sub_1000A2DFC(_QWORD *a1)
{
  return sub_1000A2694(a1);
}

uint64_t sub_1000A2E10(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_1010ED690, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_100E252E4);
  result = sub_100006204(&qword_1010ED698, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_100E252BC);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for KeyAlignmentRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1010ED788;
  if (!qword_1010ED788)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeyAlignmentRecord);
  return result;
}

uint64_t sub_1000A2EA8(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204((unint64_t *)&unk_1010ED6A0, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_100E2530C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A2EE4(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) != 0
    && (v5 = (int *)type metadata accessor for KeyAlignmentRecord(0),
        (static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) != 0)
    && (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) != 0
    && *(uint64_t *)((char *)a1 + v5[7]) == *(_QWORD *)(a2 + v5[7]))
  {
    return static Date.== infix(_:_:)((char *)a1 + v5[8], a2 + v5[8]);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000A2F88(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100EC7560)
  {
    v8 = 0x8000000100EC7560;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EC7560, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100EC7580)
  {
    swift_bridgeObjectRelease(0x8000000100EC7580);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EC7580, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000A318C(uint64_t a1, id *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, void *);
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, void *);
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;

  v4 = type metadata accessor for Date(0);
  v61 = *(_QWORD *)(v4 - 8);
  v62 = (void *)v4;
  __chkstk_darwin(v4);
  v54 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_10001A9A8(&qword_1010ED570);
  __chkstk_darwin(v56);
  v59 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v8 = __chkstk_darwin(v7);
  v55 = (uint64_t)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v57 = (char **)((char *)&v53 - v11);
  __chkstk_darwin(v10);
  v58 = (uint64_t)&v53 - v12;
  v13 = type metadata accessor for KeyAlignmentRecord(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(*a2, "encryptedValues");
  ObjectType = swift_getObjectType(v16);
  v60 = v13;
  v63 = a1;
  v18 = UUID.uuidString.getter(ObjectType);
  v20 = v19;
  CKRecordKeyValueSetting.subscript.getter(&v64, 0xD000000000000010, 0x8000000100EC28D0, ObjectType, &type metadata for String);
  v21 = v65;
  if (!v65)
  {
    v22 = swift_bridgeObjectRelease(v20);
LABEL_7:
    v24 = UUID.uuidString.getter(v22);
    v66 = &type metadata for String;
    v67 = &protocol witness table for String;
    v64 = v24;
    v65 = v25;
    CKRecordKeyValueSetting.subscript.setter(&v64, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
    goto LABEL_8;
  }
  if (v18 == v64 && v65 == v20)
  {
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v21);
    goto LABEL_8;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v64, v65, 0);
  swift_bridgeObjectRelease(v20);
  v22 = swift_bridgeObjectRelease(v21);
  if ((v23 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  v26 = v60;
  v27 = *(int *)(v60 + 28);
  v28 = v63;
  v29 = *(_QWORD *)(v63 + v27);
  v30 = "ot save config %{public}@";
  CKRecordKeyValueSetting.subscript.getter(&v64, 0xD000000000000011, 0x8000000100EC7560, ObjectType, &type metadata for UInt64);
  if ((v65 & 1) != 0)
  {
    sub_1000A37A0(v28, (uint64_t)v15);
LABEL_14:
    sub_1000A37E4((uint64_t)v15);
LABEL_15:
    v40 = v63;
    v41 = *(_QWORD *)(v63 + v27);
    v67 = &protocol witness table for UInt64;
    v66 = &type metadata for UInt64;
    v64 = v41;
    CKRecordKeyValueSetting.subscript.setter(&v64, 0xD000000000000011, (unint64_t)v30 | 0x8000000000000000, ObjectType);
    v42 = v40 + *(int *)(v26 + 32);
    v43 = v62;
    v66 = v62;
    v67 = &protocol witness table for Date;
    v44 = sub_100018F08(&v64);
    (*(void (**)(_QWORD *, uint64_t, void *))(v61 + 16))(v44, v42, v43);
    CKRecordKeyValueSetting.subscript.setter(&v64, 0xD000000000000018, 0x8000000100EC7580, ObjectType);
    return swift_unknownObjectRelease(v16);
  }
  v31 = v64;
  sub_1000A37A0(v28, (uint64_t)v15);
  if (v29 != v31)
    goto LABEL_14;
  v53 = "ot save config %{public}@";
  v33 = v61;
  v32 = v62;
  v34 = v58;
  (*(void (**)(uint64_t, char *, void *))(v61 + 16))(v58, &v15[*(int *)(v26 + 32)], v62);
  (*(void (**)(uint64_t, _QWORD, uint64_t, void *))(v33 + 56))(v34, 0, 1, v32);
  v35 = v57;
  CKRecordKeyValueSetting.subscript.getter(v57, 0xD000000000000018, 0x8000000100EC7580, ObjectType, v32);
  v36 = v59;
  v37 = v59 + *(int *)(v56 + 48);
  sub_10001F674(v34, v59);
  v56 = v37;
  sub_10001F674((uint64_t)v35, v37);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v33 + 48);
  if (v38(v36, 1, v32) != 1)
  {
    v46 = v59;
    v47 = v55;
    sub_10001F674(v59, v55);
    v48 = v56;
    v49 = v38(v56, 1, v32);
    v30 = v53;
    if (v49 != 1)
    {
      v50 = v54;
      (*(void (**)(char *, uint64_t, void *))(v61 + 32))(v54, v48, v32);
      v51 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      LODWORD(v56) = dispatch thunk of static Equatable.== infix(_:_:)(v47, v50, v32, v51);
      v52 = *(void (**)(char *, void *))(v61 + 8);
      v52(v50, v32);
      sub_100004048((uint64_t)v57, (uint64_t *)&unk_1010EA690);
      sub_100004048(v58, (uint64_t *)&unk_1010EA690);
      sub_1000A37E4((uint64_t)v15);
      v52((char *)v47, v32);
      sub_100004048(v46, (uint64_t *)&unk_1010EA690);
      v26 = v60;
      if ((v56 & 1) != 0)
        return swift_unknownObjectRelease(v16);
      goto LABEL_15;
    }
    sub_100004048((uint64_t)v57, (uint64_t *)&unk_1010EA690);
    sub_100004048(v58, (uint64_t *)&unk_1010EA690);
    sub_1000A37E4((uint64_t)v15);
    (*(void (**)(uint64_t, void *))(v61 + 8))(v47, v62);
    goto LABEL_19;
  }
  sub_100004048((uint64_t)v35, (uint64_t *)&unk_1010EA690);
  sub_100004048(v34, (uint64_t *)&unk_1010EA690);
  sub_1000A37E4((uint64_t)v15);
  v39 = v38(v56, 1, v62);
  v30 = v53;
  if (v39 != 1)
  {
LABEL_19:
    sub_100004048(v59, &qword_1010ED570);
    v26 = v60;
    goto LABEL_15;
  }
  sub_100004048(v59, (uint64_t *)&unk_1010EA690);
  return swift_unknownObjectRelease(v16);
}

uint64_t sub_1000A37A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyAlignmentRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A37E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeyAlignmentRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000A3820()
{
  unint64_t result;

  result = qword_1010ED6B8;
  if (!qword_1010ED6B8)
  {
    result = swift_getWitnessTable(&unk_100E25580, &type metadata for KeyAlignmentRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010ED6B8);
  }
  return result;
}

unint64_t sub_1000A3864()
{
  unint64_t result;

  result = qword_1010ED700;
  if (!qword_1010ED700)
  {
    result = swift_getWitnessTable(&unk_100E25540, &type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1010ED700);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for KeyAlignmentRecord.KeyAlignmentRecordConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000A38F4 + 4 * byte_100E252AA[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000A3928 + 4 * byte_100E252A5[v4]))();
}

uint64_t sub_1000A3928(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A3930(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A3938);
  return result;
}

uint64_t sub_1000A3944(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A394CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000A3950(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A3958(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyAlignmentRecord.KeyAlignmentRecordConversionError()
{
  return &type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError;
}

uint64_t storeEnumTagSinglePayload for KeyAlignmentRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000A39C0 + 4 * byte_100E252B4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000A39F4 + 4 * byte_100E252AF[v4]))();
}

uint64_t sub_1000A39F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A39FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A3A04);
  return result;
}

uint64_t sub_1000A3A10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A3A18);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000A3A1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A3A24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyAlignmentRecord.CodingKeys()
{
  return &type metadata for KeyAlignmentRecord.CodingKeys;
}

uint64_t *sub_1000A3A40(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_1000A3B38(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  v7 = a1 + a2[8];
  v8 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t *sub_1000A3BCC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

uint64_t *sub_1000A3C98(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  v15 = a3[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

char *sub_1000A3D70(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t *sub_1000A3E30(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(_QWORD *)&a2[a3[7]];
  v14 = (char *)a1 + v13;
  v15 = &a2[v13];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_1000A3EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A3F08);
}

uint64_t sub_1000A3F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000A3FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A3FC0);
}

char *sub_1000A3FC0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_1000A4064(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v5 = &unk_100E253A0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(result - 8) + 64;
    v7 = v6;
    v8 = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v9 = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, &v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000A4104()
{
  return sub_100006204(&qword_1010ED7D0, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_100E25518);
}

unint64_t sub_1000A4134()
{
  unint64_t result;

  result = qword_1010ED7D8;
  if (!qword_1010ED7D8)
  {
    result = swift_getWitnessTable(&unk_100E25488, &type metadata for KeyAlignmentRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010ED7D8);
  }
  return result;
}

unint64_t sub_1000A417C()
{
  unint64_t result;

  result = qword_1010ED7E0;
  if (!qword_1010ED7E0)
  {
    result = swift_getWitnessTable(&unk_100E254F0, &type metadata for KeyAlignmentRecord.KeyAlignmentRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1010ED7E0);
  }
  return result;
}

unint64_t sub_1000A41C4()
{
  unint64_t result;

  result = qword_1010ED7E8;
  if (!qword_1010ED7E8)
  {
    result = swift_getWitnessTable(&unk_100E253F8, &type metadata for KeyAlignmentRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010ED7E8);
  }
  return result;
}

unint64_t sub_1000A420C()
{
  unint64_t result;

  result = qword_1010ED7F0;
  if (!qword_1010ED7F0)
  {
    result = swift_getWitnessTable(&unk_100E25420, &type metadata for KeyAlignmentRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010ED7F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes()
{
  return &type metadata for OwnSubmitPayloadTypes;
}

uint64_t getEnumTagSinglePayload for OwnSubmitPayloadTypes.ShareType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnSubmitPayloadTypes.ShareType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000A434C + 4 * byte_100E255D5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000A4380 + 4 * byte_100E255D0[v4]))();
}

uint64_t sub_1000A4380(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4388(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A4390);
  return result;
}

uint64_t sub_1000A439C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A43A4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000A43A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A43B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes.ShareType()
{
  return &type metadata for OwnSubmitPayloadTypes.ShareType;
}

unint64_t sub_1000A43D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010ED810;
  if (!qword_1010ED810)
  {
    v1 = sub_10001F784(&qword_1010ED818);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1010ED810);
  }
  return result;
}

uint64_t sub_1000A441C(char *a1, char *a2)
{
  return sub_100513534(*a1, *a2);
}

Swift::Int sub_1000A4428()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x646572616873;
  else
    v2 = 0x72656E776FLL;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000A44A0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x646572616873;
  else
    v2 = 0x72656E776FLL;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000A44F4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x646572616873;
  else
    v2 = 0x72656E776FLL;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000A4568@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101048D18, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1000A45C4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x72656E776FLL;
  if (*v1)
    v2 = 0x646572616873;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000A45FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A4ED4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A4658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A4ED4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_1000A46A4()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000A46E8()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000A4710()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned __int8 *sub_1000A4750@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1000A4768(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1000A4774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A4E90();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A47D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A4E90();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000A481C(char *a1)
{
  sub_1005133E0(*a1);
}

void sub_1000A4828()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000A486C()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 1936094325, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_1000A48E0()
{
  __asm { BR              X10 }
}

uint64_t sub_1000A4914(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 1936094325, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1000A4974()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000A49B4()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 1936094325, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

unint64_t sub_1000A4A28@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000A4BDC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A4A54()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000A4A7C + 4 * byte_100E255E6[*v0]))();
}

void sub_1000A4A7C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1936094325;
  a1[1] = v1;
}

void sub_1000A4A8C(_QWORD *a1@<X8>)
{
  *a1 = 0x63616542666C6573;
  a1[1] = 0xEA00000000006E6FLL;
}

void sub_1000A4AAC(_QWORD *a1@<X8>)
{
  *a1 = 0x6F4C657275636573;
  a1[1] = 0xEF736E6F69746163;
}

uint64_t sub_1000A4AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A4C24();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000A4B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A4C24();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000A4B7C(_QWORD *a1@<X8>)
{
  *a1 = &off_101048DE8;
}

unint64_t sub_1000A4B90()
{
  unint64_t result;

  result = qword_1010ED820;
  if (!qword_1010ED820)
  {
    result = swift_getWitnessTable(&unk_100E25790, &type metadata for OwnSubmitPayloadTypes.ShareType);
    atomic_store(result, (unint64_t *)&qword_1010ED820);
  }
  return result;
}

uint64_t sub_1000A4BD4()
{
  return 4;
}

unint64_t sub_1000A4BDC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101048D68, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_1000A4C24()
{
  unint64_t result;

  result = qword_1010ED828;
  if (!qword_1010ED828)
  {
    result = swift_getWitnessTable(&unk_100E25718, &type metadata for OwnSubmitPayloadTypes.ShareType);
    atomic_store(result, (unint64_t *)&qword_1010ED828);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OwnSubmitPayloadTypes.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000A4CB4 + 4 * byte_100E255EF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000A4CE8 + 4 * byte_100E255EA[v4]))();
}

uint64_t sub_1000A4CE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4CF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A4CF8);
  return result;
}

uint64_t sub_1000A4D04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A4D0CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000A4D10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4D18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes.Mode()
{
  return &type metadata for OwnSubmitPayloadTypes.Mode;
}

uint64_t storeEnumTagSinglePayload for OwnSubmitPayloadTypes.KeyType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000A4D80 + 4 * byte_100E255F9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000A4DB4 + 4 * byte_100E255F4[v4]))();
}

uint64_t sub_1000A4DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A4DC4);
  return result;
}

uint64_t sub_1000A4DD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A4DD8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000A4DDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4DE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayloadTypes.KeyType()
{
  return &type metadata for OwnSubmitPayloadTypes.KeyType;
}

unint64_t sub_1000A4E04()
{
  unint64_t result;

  result = qword_1010ED830;
  if (!qword_1010ED830)
  {
    result = swift_getWitnessTable(&unk_100E25840, &type metadata for OwnSubmitPayloadTypes.KeyType);
    atomic_store(result, (unint64_t *)&qword_1010ED830);
  }
  return result;
}

unint64_t sub_1000A4E4C()
{
  unint64_t result;

  result = qword_1010ED838;
  if (!qword_1010ED838)
  {
    result = swift_getWitnessTable(&unk_100E258E0, &type metadata for OwnSubmitPayloadTypes.Mode);
    atomic_store(result, (unint64_t *)&qword_1010ED838);
  }
  return result;
}

unint64_t sub_1000A4E90()
{
  unint64_t result;

  result = qword_1010ED840;
  if (!qword_1010ED840)
  {
    result = swift_getWitnessTable(&unk_100E257C8, &type metadata for OwnSubmitPayloadTypes.KeyType);
    atomic_store(result, (unint64_t *)&qword_1010ED840);
  }
  return result;
}

unint64_t sub_1000A4ED4()
{
  unint64_t result;

  result = qword_1010ED848;
  if (!qword_1010ED848)
  {
    result = swift_getWitnessTable(&unk_100E25868, &type metadata for OwnSubmitPayloadTypes.Mode);
    atomic_store(result, (unint64_t *)&qword_1010ED848);
  }
  return result;
}

void sub_1000A4F18(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  id v41;
  NSString v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  void *v55;
  char *v56;
  NSString v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSString v63;
  id v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  NSString v70;
  id v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  void *v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  NSString v98;
  id v99;
  NSString v100;
  id v101;
  id v102;
  int v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  char v109;
  char v110;
  void *v111;
  id v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  int *v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  char *v124;
  void (*v125)(char *, char *, uint64_t);
  uint64_t v126;
  void (*v127)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint64_t ObjectType;
  void (*v132)(char *, char *, uint64_t);
  char *v133;
  uint64_t *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;

  v134 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010ED850);
  __chkstk_darwin(v3);
  v139 = (char *)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v137 = *(_QWORD *)(v5 - 8);
  v138 = v5;
  v6 = __chkstk_darwin(v5);
  v135 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v136 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v125 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v141 = v12;
  v142 = v13;
  __chkstk_darwin(v12);
  v140 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010ED860);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v125 - v19;
  v144 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v144 - 8);
  v22 = __chkstk_darwin(v144);
  v24 = (char *)&v125 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v143 = (char *)&v125 - v26;
  v145 = a1;
  v27 = CKRecord.recordType.getter(v25);
  if (v27 == 0x6365526572616853 && v28 == 0xEB0000000064726FLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, 0x6365526572616853, 0xEB0000000064726FLL, 0);
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      v52 = sub_1000A6F1C();
      v53 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v52, 0, 0);
      *v54 = 0;
      swift_willThrow(v53);

      return;
    }
  }
  v133 = v24;
  v30 = v145;
  v31 = objc_msgSend(v145, "recordID");
  v32 = objc_msgSend(v31, "recordName");

  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  UUID.init(uuidString:)(v33, v35);
  swift_bridgeObjectRelease();
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v37 = v144;
  if (v36(v20, 1, v144) == 1)
  {
    sub_100004048((uint64_t)v20, &qword_1010ED860);
    v38 = sub_1000A6F1C();
    v39 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v38, 0, 0);
    *v40 = 2;
    swift_willThrow(v39);

    return;
  }
  v132 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v132(v143, v20, v37);
  v41 = objc_msgSend(v30, "encryptedValues");
  ObjectType = swift_getObjectType(v41);
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v41, "objectForKeyedSubscript:", v42);

  if (!v43
    || (v148 = (uint64_t)v43,
        v44 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        (swift_dynamicCast(&v146, &v148, v44, &type metadata for String, 6) & 1) == 0))
  {
    v49 = sub_1000A6F1C();
    v50 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v49, 0, 0);
    *v51 = 3;
    swift_willThrow(v50);
    swift_unknownObjectRelease(v41);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v143, v144);
    return;
  }
  UUID.init(uuidString:)(v146, v147);
  swift_bridgeObjectRelease();
  v45 = v144;
  if (v36(v18, 1, v144) == 1)
  {
    sub_100004048((uint64_t)v18, &qword_1010ED860);
    v46 = sub_1000A6F1C();
    v47 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v46, 0, 0);
    *v48 = 4;
    swift_willThrow(v47);
    swift_unknownObjectRelease(v41);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v143, v45);
    return;
  }
  v55 = v41;
  v56 = v133;
  v132(v133, v18, v45);
  v57 = String._bridgeToObjectiveC()();
  v130 = v55;
  v58 = objc_msgSend(v55, "objectForKeyedSubscript:", v57);

  if (!v58
    || (v148 = (uint64_t)v58, (swift_dynamicCast(&v146, &v148, v44, &type metadata for String, 6) & 1) == 0)
    || (v59 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v146, (uint64_t)v147), !v61))
  {
    v80 = sub_1000A6F1C();
    v81 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v80, 0, 0);
    *v82 = 5;
    swift_willThrow(v81);
    swift_unknownObjectRelease(v130);

LABEL_23:
    v83 = *(void (**)(char *, uint64_t))(v21 + 8);
    v84 = v144;
    v83(v56, v144);
    v83(v143, v84);
    return;
  }
  v62 = v59;
  v128 = v60;
  v129 = v61;
  v63 = String._bridgeToObjectiveC()();
  v64 = objc_msgSend(v130, "objectForKeyedSubscript:", v63);

  if (!v64)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v142 + 56))(v11, 1, 1, v141);
    goto LABEL_25;
  }
  v126 = v62;
  v146 = (uint64_t)v64;
  v65 = v141;
  v66 = swift_dynamicCast(v11, &v146, v44, v141, 6);
  v67 = v142;
  v127 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v142 + 56);
  v127(v11, v66 ^ 1u, 1, v65);
  v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  if (v68(v11, 1, v65) == 1)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    v85 = (uint64_t *)&unk_1010EA690;
    v86 = (uint64_t)v11;
LABEL_26:
    v87 = sub_100004048(v86, v85);
LABEL_27:
    v88 = static os_log_type_t.error.getter(v87);
    v89 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v90 = swift_allocObject(v89, 72, 7);
    *(_OWORD *)(v90 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v90 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v90 + 64) = sub_100088600();
    v91 = v145;
    *(_QWORD *)(v90 + 32) = v145;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v92 = v91;
    v93 = (void *)static OS_os_log.default.getter(v92);
    os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v93, "Invalid Share Record - %@", 25, 2, v90);
    swift_bridgeObjectRelease();

    v94 = sub_1000A6F1C();
    v95 = swift_allocError(&type metadata for ShareRecord.ShareRecordConversionError, v94, 0, 0);
    *v96 = 6;
    swift_willThrow(v95);
    swift_unknownObjectRelease(v130);

    goto LABEL_23;
  }
  v125 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
  v125(v140, v11, v65);
  v69 = v65;
  v70 = String._bridgeToObjectiveC()();
  v71 = objc_msgSend(v130, "objectForKeyedSubscript:", v70);

  if (!v71)
  {
    v79 = (uint64_t)v139;
    v127(v139, 1, 1, v69);
    goto LABEL_29;
  }
  v146 = (uint64_t)v71;
  v72 = v135;
  v73 = v69;
  if ((swift_dynamicCast(v135, &v146, v44, v69, 6) & 1) == 0)
  {
    v127(v72, 1, 1, v69);
    v77 = (uint64_t)v72;
    v78 = v142;
    goto LABEL_36;
  }
  v74 = v69;
  v75 = v127;
  v127(v72, 0, 1, v74);
  v76 = v68(v72, 1, v73);
  v77 = (uint64_t)v72;
  v78 = v142;
  if (v76 == 1)
  {
LABEL_36:
    sub_100004048(v77, (uint64_t *)&unk_1010EA690);
    v107 = v139;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56))(v139, 1, 1, v138);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v140, v73);
    v85 = (uint64_t *)&unk_1010ED850;
    v86 = (uint64_t)v107;
    goto LABEL_26;
  }
  v79 = (uint64_t)v139;
  v125(v139, (char *)v77, v73);
  v75((char *)v79, 0, 1, v73);
LABEL_29:
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v137 + 56))(v79, 0, 1, v138);
  v97 = v136;
  sub_1000A7378(v79, v136);
  v98 = String._bridgeToObjectiveC()();
  v99 = objc_msgSend(v130, "objectForKeyedSubscript:", v98);

  if (!v99 || (v148 = (uint64_t)v99, (swift_dynamicCast(&v146, &v148, v44, &type metadata for String, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v106 = v141;
    sub_100004048(v97, (uint64_t *)&unk_1010EA690);
    v87 = (*(uint64_t (**)(char *, uint64_t))(v142 + 8))(v140, v106);
    goto LABEL_27;
  }
  v142 = v146;
  v139 = v147;
  v100 = String._bridgeToObjectiveC()();
  v101 = v130;
  v102 = objc_msgSend(v130, "objectForKeyedSubscript:", v100);

  if (v102)
  {
    v146 = (uint64_t)v102;
    v103 = swift_dynamicCast(&v148, &v146, v44, &type metadata for UInt64, 6);
    v104 = v145;
    v105 = ObjectType;
    if (v103)
      v138 = v148;
    else
      v138 = 0;
  }
  else
  {
    v138 = 0;
    v104 = v145;
    v105 = ObjectType;
  }
  CKRecordKeyValueSetting.subscript.getter(&v146, 0x7079546572616873, 0xE900000000000065, v105, &type metadata for Int);
  if ((_BYTE)v147)
    v108 = 1;
  else
    v108 = v146;
  v109 = _s12searchpartyd20MessagingDestinationV0C4TypeO8rawValueAESgSi_tcfC_0(v108);
  if (v109 == 5)
    v110 = 1;
  else
    v110 = v109;
  v111 = objc_autoreleasePoolPush();
  v112 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(v104, "encodeSystemFieldsWithCoder:", v112);
  objc_msgSend(v112, "finishEncoding");
  v113 = objc_msgSend(v112, "encodedData");
  v114 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v113);
  v116 = v115;

  objc_autoreleasePoolPop(v111);
  swift_unknownObjectRelease(v101);

  v117 = v134;
  *v134 = v114;
  v117[1] = v116;
  v118 = (int *)type metadata accessor for ShareRecord(0);
  v119 = v144;
  v120 = v132;
  v132((char *)v117 + v118[5], v143, v144);
  v120((char *)v117 + v118[6], v133, v119);
  v125((char *)v117 + v118[7], v140, v141);
  sub_1000A7378(v136, (uint64_t)v117 + v118[8]);
  v121 = (char *)v117 + v118[9];
  *v121 = v126;
  v122 = v129;
  *((_QWORD *)v121 + 1) = v128;
  *((_QWORD *)v121 + 2) = v122;
  v123 = (uint64_t *)((char *)v117 + v118[10]);
  v124 = v139;
  *v123 = v142;
  v123[1] = (uint64_t)v124;
  *(uint64_t *)((char *)v117 + v118[11]) = v138;
  *((_BYTE *)v117 + v118[12]) = v110;
}

uint64_t sub_1000A5B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6718);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6718);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x6365526572616853, 0xEB0000000064726FLL, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_1000A5C64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v24 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v11 = v2[1];
  sub_10001BBBC(v10, v11);
  Data.hash(into:)(a1, v10, v11);
  sub_10001BC14(v10, v11);
  v12 = (int *)type metadata accessor for ShareRecord(0);
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
  dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
  v15 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v15);
  sub_10001F674((uint64_t)v2 + v12[8], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v16 = v24;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v24, v9, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
  }
  v17 = (unsigned __int8 *)v2 + v12[9];
  v18 = *((_QWORD *)v17 + 1);
  v19 = *((_QWORD *)v17 + 2);
  Hasher._combine(_:)(*v17);
  swift_bridgeObjectRetain(v19);
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease();
  v20 = (uint64_t *)((char *)v2 + v12[10]);
  v21 = *v20;
  v22 = v20[1];
  swift_bridgeObjectRetain(v22);
  String.hash(into:)(a1, v21, v22);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(uint64_t *)((char *)v2 + v12[11]));
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v12[12]));
}

uint64_t sub_1000A5EF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000A5F30 + 4 * byte_100E259B0[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_1000A5F30()
{
  return 0x696669746E656469;
}

uint64_t sub_1000A5FF0(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v33;
  uint64_t v34;
  char v35;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010ED9E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1000A829C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ShareRecord.CodingKeys, &type metadata for ShareRecord.CodingKeys, v11, v9, v10);
  v33 = *v3;
  v35 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v35, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for ShareRecord(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v33) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v33, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v33) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v33, v5, v15, v16);
    v18 = (char *)v3 + v13[7];
    LOBYTE(v33) = 3;
    v19 = type metadata accessor for Date(0);
    v20 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v33, v5, v19, v20);
    v21 = (char *)v3 + v13[8];
    LOBYTE(v33) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v33, v5, v19, v20);
    v22 = (char *)v3 + v13[9];
    v23 = *v22;
    v25 = *((_QWORD *)v22 + 1);
    v24 = *((_QWORD *)v22 + 2);
    LOBYTE(v33) = v23;
    *((_QWORD *)&v33 + 1) = v25;
    v34 = v24;
    v35 = 5;
    v26 = sub_1000A82E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v35, v5, &type metadata for MessagingDestination, v26);
    v27 = (uint64_t *)((char *)v3 + v13[10]);
    v28 = *v27;
    v29 = v27[1];
    LOBYTE(v33) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v33, v5);
    v30 = *(_QWORD *)((char *)v3 + v13[11]);
    LOBYTE(v33) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v33, v5);
    LOBYTE(v33) = *((_BYTE *)v3 + v13[12]);
    v35 = 8;
    v31 = sub_1000A8324();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v35, v5, &type metadata for ShareType, v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A6328@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  void (*v45)(uint64_t, char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  uint64_t v58;
  char v59;

  v46 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v47 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  __chkstk_darwin(v5);
  v7 = (void (**)(uint64_t, char *, uint64_t))((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v54 - 8);
  v8 = __chkstk_darwin(v54);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v45 - v11;
  v52 = sub_10001A9A8((uint64_t *)&unk_1010ED9F8);
  v13 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for ShareRecord(0);
  __chkstk_darwin(v55);
  v17 = (_OWORD *)((char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = a1[3];
  v18 = a1[4];
  v53 = a1;
  sub_10001AA44(a1, v19);
  v20 = sub_1000A829C();
  v51 = v15;
  v21 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShareRecord.CodingKeys, &type metadata for ShareRecord.CodingKeys, v20, v19, v18);
  if (v21)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v53);
  v56 = v7;
  v59 = 0;
  v22 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v57, &type metadata for Data, &v59, v52, &type metadata for Data, v22);
  v23 = (uint64_t)v17;
  *v17 = v57;
  LOBYTE(v57) = 1;
  v24 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v25 = v12;
  v26 = v12;
  v27 = v54;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v54, &v57, v52, v54, v24);
  v28 = v24;
  v29 = (int *)v55;
  v30 = v23 + *(int *)(v55 + 20);
  v45 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 32);
  v45(v30, v25, v27);
  LOBYTE(v57) = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v10, v27, &v57, v52, v27, v28);
  v45(v23 + v29[6], v10, v27);
  LOBYTE(v57) = 3;
  v31 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v32 = v56;
  v33 = v49;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v56, v49, &v57, v52, v49, v31);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v48 + 32))(v23 + v29[7], v32, v33);
  LOBYTE(v57) = 4;
  v34 = (uint64_t)v47;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &v57, v52, v33, v31);
  v35 = v53;
  sub_1000A7378(v34, v23 + v29[8]);
  v59 = 5;
  v36 = sub_1000A8368();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v57, &type metadata for MessagingDestination, &v59, v52, &type metadata for MessagingDestination, v36);
  v37 = *((_QWORD *)&v57 + 1);
  v38 = v58;
  v39 = v23 + v29[9];
  *(_BYTE *)v39 = v57;
  *(_QWORD *)(v39 + 8) = v37;
  *(_QWORD *)(v39 + 16) = v38;
  LOBYTE(v57) = 6;
  v40 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v52);
  v41 = (uint64_t *)(v23 + v29[10]);
  *v41 = v40;
  v41[1] = v42;
  LOBYTE(v57) = 7;
  *(_QWORD *)(v23 + v29[11]) = KeyedDecodingContainer.decode(_:forKey:)(&v57, v52);
  v59 = 8;
  v43 = sub_1000A83AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v57, &type metadata for ShareType, &v59, v52, &type metadata for ShareType, v43);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v51, v52);
  *(_BYTE *)(v23 + v29[12]) = v57;
  sub_1000A83F0(v23, v46);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  return sub_1000A8434(v23);
}

uint64_t sub_1000A69BC()
{
  unsigned __int8 *v0;

  return sub_1000A5EF8(*v0);
}

uint64_t sub_1000A69C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000A86A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A69E8(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1000A69F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A829C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A6A1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000A829C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A6A44(void **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  __int128 v38;
  void *v39;

  v2 = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = objc_msgSend(v7, "encryptedValues");
  ObjectType = swift_getObjectType(v8);
  v10 = static os_log_type_t.debug.getter(ObjectType);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  v13 = v7;
  v14 = objc_msgSend(v13, "description");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v17;
  v18 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v19 = (void *)static OS_os_log.default.getter(v18);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v19, "Updating share record: %@", 25, 2, v12);
  swift_bridgeObjectRelease();

  v20 = (int *)type metadata accessor for ShareRecord(0);
  v21 = UUID.uuidString.getter(v20);
  *((_QWORD *)&v38 + 1) = &type metadata for String;
  v39 = &protocol witness table for String;
  *(_QWORD *)&v37 = v21;
  *((_QWORD *)&v37 + 1) = v22;
  CKRecordKeyValueSetting.subscript.setter(&v37, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
  v23 = v2 + v20[7];
  v24 = type metadata accessor for Date(0);
  *((_QWORD *)&v38 + 1) = v24;
  v39 = &protocol witness table for Date;
  v25 = sub_100018F08(&v37);
  v26 = *(_QWORD *)(v24 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v26 + 16))(v25, v23, v24);
  CKRecordKeyValueSetting.subscript.setter(&v37, 0x7461446572616873, 0xE900000000000065, ObjectType);
  sub_10001F674(v2 + v20[8], (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v6, 1, v24) == 1)
  {
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010EA690);
    v37 = 0u;
    v38 = 0u;
    v39 = 0;
  }
  else
  {
    *((_QWORD *)&v38 + 1) = v24;
    v39 = &protocol witness table for Date;
    v27 = sub_100018F08(&v37);
    (*(void (**)(_QWORD *, char *, uint64_t))(v26 + 32))(v27, v6, v24);
  }
  CKRecordKeyValueSetting.subscript.setter(&v37, 0x6974617269707865, 0xEA00000000006E6FLL, ObjectType);
  v28 = v2 + v20[9];
  v30 = *(_QWORD *)(v28 + 8);
  v29 = *(_QWORD *)(v28 + 16);
  *((_QWORD *)&v38 + 1) = &type metadata for String;
  v39 = &protocol witness table for String;
  *(_QWORD *)&v37 = v30;
  *((_QWORD *)&v37 + 1) = v29;
  swift_bridgeObjectRetain(v29);
  CKRecordKeyValueSetting.subscript.setter(&v37, 0x6148656572616873, 0xEC000000656C646ELL, ObjectType);
  v31 = (uint64_t *)(v2 + v20[10]);
  v33 = *v31;
  v32 = v31[1];
  *((_QWORD *)&v38 + 1) = &type metadata for String;
  v39 = &protocol witness table for String;
  *(_QWORD *)&v37 = v33;
  *((_QWORD *)&v37 + 1) = v32;
  swift_bridgeObjectRetain(v32);
  CKRecordKeyValueSetting.subscript.setter(&v37, 0xD000000000000015, 0x8000000100EC2AE0, ObjectType);
  v34 = *(_QWORD *)(v2 + v20[11]);
  *((_QWORD *)&v38 + 1) = &type metadata for UInt64;
  v39 = &protocol witness table for UInt64;
  *(_QWORD *)&v37 = v34;
  CKRecordKeyValueSetting.subscript.setter(&v37, 0xD000000000000011, 0x8000000100EC7600, ObjectType);
  v35 = *(unsigned __int8 *)(v2 + v20[12]);
  *((_QWORD *)&v38 + 1) = &type metadata for Int;
  v39 = &protocol witness table for Int;
  *(_QWORD *)&v37 = v35;
  CKRecordKeyValueSetting.subscript.setter(&v37, 0x7079546572616873, 0xE900000000000065, ObjectType);
  return swift_unknownObjectRelease(v8);
}

Swift::Int sub_1000A6E18()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1000A5C64((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000A6E58()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1000A5C64((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1000A6E90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1010E9928 != -1)
    swift_once(&qword_1010E9928, sub_1000A5B90);
  v0 = type metadata accessor for URL(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6718);
  v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1);
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000A6F1C()
{
  unint64_t result;

  result = qword_1010ED868;
  if (!qword_1010ED868)
  {
    result = swift_getWitnessTable(&unk_100E25B70, &type metadata for ShareRecord.ShareRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1010ED868);
  }
  return result;
}

uint64_t sub_1000A6F64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A6328(a1, a2);
}

uint64_t sub_1000A6F78(_QWORD *a1)
{
  return sub_1000A5FF0(a1);
}

BOOL sub_1000A6F8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  int *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  int *v28;
  uint64_t v29;
  char *v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BOOL8 result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED570);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v45 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v45 - v18;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v20 & 1) == 0)
    return 0;
  v48 = v4;
  v21 = (int *)type metadata accessor for ShareRecord(0);
  if ((static UUID.== infix(_:_:)((char *)a1 + v21[5], a2 + v21[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v21[6], a2 + v21[6]) & 1) == 0
    || (static Date.== infix(_:_:)((char *)a1 + v21[7], a2 + v21[7]) & 1) == 0)
  {
    return 0;
  }
  sub_10001F674((uint64_t)a1 + v21[8], (uint64_t)v19);
  v46 = v21;
  sub_10001F674(a2 + v21[8], (uint64_t)v17);
  v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001F674((uint64_t)v19, (uint64_t)v10);
  v47 = v22;
  sub_10001F674((uint64_t)v17, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v24 = v48;
  if (v23((uint64_t)v10, 1, v48) == 1)
  {
    sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
    if (v23(v47, 1, v24) == 1)
    {
      sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010EA690);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  sub_10001F674((uint64_t)v10, (uint64_t)v14);
  if (v23(v47, 1, v24) == 1)
  {
    sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v24);
LABEL_10:
    sub_100004048((uint64_t)v10, &qword_1010ED570);
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v47, v24);
  v25 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v24, v25);
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v7, v24);
  sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
  sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
  v27(v14, v24);
  sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010EA690);
  if ((v26 & 1) == 0)
    return 0;
LABEL_12:
  v28 = v46;
  v29 = v46[9];
  v30 = (char *)a1 + v29;
  v31 = *((unsigned __int8 *)a1 + v29);
  v32 = (unsigned __int8 *)(a2 + v29);
  if (v31 != *v32)
    return 0;
  v33 = *((_QWORD *)v30 + 1);
  v34 = *((_QWORD *)v30 + 2);
  v35 = *((_QWORD *)v32 + 1);
  v36 = *((_QWORD *)v32 + 2);
  if (v33 == v35 && v34 == v36
    || (v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v35, v36, 0), result = 0, (v37 & 1) != 0))
  {
    if ((v39 = v28[10],
          v40 = *(uint64_t *)((char *)a1 + v39),
          v41 = *(uint64_t *)((char *)a1 + v39 + 8),
          v42 = (_QWORD *)(a2 + v39),
          v43 = v42[1],
          v40 == *v42)
      && v41 == v43
      || (v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *v42, v43, 0), result = 0, (v44 & 1) != 0))
    {
      if (*(uint64_t *)((char *)a1 + v28[11]) == *(_QWORD *)(a2 + v28[11]))
        return *((unsigned __int8 *)a1 + v28[12]) == *(unsigned __int8 *)(a2 + v28[12]);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000A7378(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ShareRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1010ED958;
  if (!qword_1010ED958)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShareRecord);
  return result;
}

uint64_t getEnumTagSinglePayload for BatteryLevel(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareRecord.ShareRecordConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000A74D8 + 4 * byte_100E259C5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000A750C + 4 * byte_100E259C0[v4]))();
}

uint64_t sub_1000A750C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A7514(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A751CLL);
  return result;
}

uint64_t sub_1000A7528(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A7530);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000A7534(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A753C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareRecord.ShareRecordConversionError()
{
  return &type metadata for ShareRecord.ShareRecordConversionError;
}

uint64_t *sub_1000A7558(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v19(v15, v16, v17);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))((char *)a2 + v20, 1, v17))
    {
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v19(v21, v22, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
    }
    v25 = a3[9];
    v26 = a3[10];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *v27 = *v28;
    v29 = *((_QWORD *)v28 + 2);
    *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
    *((_QWORD *)v27 + 2) = v29;
    v30 = (uint64_t *)((char *)a1 + v26);
    v31 = (uint64_t *)((char *)a2 + v26);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = a3[12];
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *((_BYTE *)a1 + v33) = *((_BYTE *)a2 + v33);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v32);
  }
  return a1;
}

uint64_t sub_1000A7708(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = a1 + a2[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
    v10(v11, v8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1000A77EC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v18(v14, v15, v16);
  v19 = a3[8];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))((char *)a2 + v19, 1, v16))
  {
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v18(v20, v21, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
  }
  v23 = a3[9];
  v24 = a3[10];
  v25 = (char *)a1 + v23;
  v26 = (char *)a2 + v23;
  *v25 = *v26;
  v27 = *((_QWORD *)v26 + 2);
  *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
  *((_QWORD *)v25 + 2) = v27;
  v28 = (uint64_t *)((char *)a1 + v24);
  v29 = (uint64_t *)((char *)a2 + v24);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = a3[12];
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t *sub_1000A7970(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(char *, char *, uint64_t))(v19 + 24);
  v20(v16, v17, v18);
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v14) = v24((char *)a1 + v21, 1, v18);
  v25 = v24(v23, 1, v18);
  if (!(_DWORD)v14)
  {
    if (!v25)
    {
      v20(v22, v23, v18);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v26 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
LABEL_7:
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *v28 = *v29;
  *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
  v30 = *((_QWORD *)v29 + 2);
  *((_QWORD *)v28 + 2) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  v31 = a3[10];
  v32 = (uint64_t *)((char *)a1 + v31);
  v33 = (uint64_t *)((char *)a2 + v31);
  *v32 = *v33;
  v34 = v33[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  return a1;
}

char *sub_1000A7B74(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v16(v12, v13, v14);
  v17 = a3[8];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(&a2[v17], 1, v14))
  {
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v16(v18, v19, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
  }
  v21 = a3[9];
  v22 = a3[10];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v25 = *(_OWORD *)v24;
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  *(_OWORD *)v23 = v25;
  *(_OWORD *)&a1[v22] = *(_OWORD *)&a2[v22];
  v26 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  a1[v26] = a2[v26];
  return a1;
}

uint64_t *sub_1000A7CD8(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = &a2[v13];
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(char *, char *, uint64_t))(v17 + 40);
  v18(v14, v15, v16);
  v19 = a3[8];
  v20 = (char *)a1 + v19;
  v21 = &a2[v19];
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v12) = v22((char *)a1 + v19, 1, v16);
  v23 = v22(v21, 1, v16);
  if (!(_DWORD)v12)
  {
    if (!v23)
    {
      v18(v20, v21, v16);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v24 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v21, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
LABEL_7:
  v25 = a3[9];
  v26 = (char *)a1 + v25;
  v27 = &a2[v25];
  *v26 = *v27;
  v29 = *((_QWORD *)v27 + 1);
  v28 = *((_QWORD *)v27 + 2);
  *((_QWORD *)v26 + 1) = v29;
  *((_QWORD *)v26 + 2) = v28;
  swift_bridgeObjectRelease();
  v30 = a3[10];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)&a2[v30];
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = a3[12];
  *(uint64_t *)((char *)a1 + a3[11]) = *(_QWORD *)&a2[a3[11]];
  *((_BYTE *)a1 + v35) = a2[v35];
  return a1;
}

uint64_t sub_1000A7EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A7EBC);
}

uint64_t sub_1000A7EBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(_QWORD *)(a1 + a3[9] + 16);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

uint64_t sub_1000A7F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A7F98);
}

uint64_t sub_1000A7F98(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[9] + 16) = (a2 - 1);
  return result;
}

void sub_1000A8064(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  void *v16;

  v8 = &unk_100E25A18;
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v9 = *(_QWORD *)(v2 - 8) + 64;
    v10 = v9;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v11 = *(_QWORD *)(v4 - 8) + 64;
      sub_1000A813C(319);
      if (v7 <= 0x3F)
      {
        v12 = *(_QWORD *)(v6 - 8) + 64;
        v13 = &unk_100E25A30;
        v14 = &unk_100E25A48;
        v15 = (char *)&value witness table for Builtin.Int64 + 64;
        v16 = &unk_100E25A60;
        swift_initStructMetadata(a1, 256, 9, &v8, a1 + 16);
      }
    }
  }
}

void sub_1000A813C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10110D930)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10110D930);
  }
}

uint64_t sub_1000A8190()
{
  return sub_100006204(&qword_1010ED9B8, type metadata accessor for ShareRecord, (uint64_t)&unk_100E25A78);
}

unint64_t sub_1000A81C0()
{
  unint64_t result;

  result = qword_1010ED9C0;
  if (!qword_1010ED9C0)
  {
    result = swift_getWitnessTable(&unk_100E25B20, &type metadata for ShareRecord.ShareRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1010ED9C0);
  }
  return result;
}

uint64_t sub_1000A8204(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_1010ED9C8, type metadata accessor for ShareRecord, (uint64_t)&unk_100E25B48);
  result = sub_100006204((unint64_t *)&unk_1010ED9D0, type metadata accessor for ShareRecord, (uint64_t)&unk_100E25BCC);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000A8260(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1011080E0, type metadata accessor for ShareRecord, (uint64_t)&unk_100E25BB0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000A829C()
{
  unint64_t result;

  result = qword_1010ED9E8;
  if (!qword_1010ED9E8)
  {
    result = swift_getWitnessTable(&unk_100E25CD4, &type metadata for ShareRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010ED9E8);
  }
  return result;
}

unint64_t sub_1000A82E0()
{
  unint64_t result;

  result = qword_10111E8C0;
  if (!qword_10111E8C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MessagingDestination, &type metadata for MessagingDestination);
    atomic_store(result, (unint64_t *)&qword_10111E8C0);
  }
  return result;
}

unint64_t sub_1000A8324()
{
  unint64_t result;

  result = qword_1010ED9F0;
  if (!qword_1010ED9F0)
  {
    result = swift_getWitnessTable(&unk_100E47EE8, &type metadata for ShareType);
    atomic_store(result, (unint64_t *)&qword_1010ED9F0);
  }
  return result;
}

unint64_t sub_1000A8368()
{
  unint64_t result;

  result = qword_1010EDA08;
  if (!qword_1010EDA08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MessagingDestination, &type metadata for MessagingDestination);
    atomic_store(result, (unint64_t *)&qword_1010EDA08);
  }
  return result;
}

unint64_t sub_1000A83AC()
{
  unint64_t result;

  result = qword_1010EDA10;
  if (!qword_1010EDA10)
  {
    result = swift_getWitnessTable(&unk_100E47F10, &type metadata for ShareType);
    atomic_store(result, (unint64_t *)&qword_1010EDA10);
  }
  return result;
}

uint64_t sub_1000A83F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShareRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A8434(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShareRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for PublishingPolicy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000A854C + 4 * byte_100E259CF[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000A8580 + 4 * byte_100E259CA[v4]))();
}

uint64_t sub_1000A8580(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A8588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000A8590);
  return result;
}

uint64_t sub_1000A859C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000A85A4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000A85A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A85B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareRecord.CodingKeys()
{
  return &type metadata for ShareRecord.CodingKeys;
}

unint64_t sub_1000A85D0()
{
  unint64_t result;

  result = qword_1010EDA28;
  if (!qword_1010EDA28)
  {
    result = swift_getWitnessTable(&unk_100E25CAC, &type metadata for ShareRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDA28);
  }
  return result;
}

unint64_t sub_1000A8618()
{
  unint64_t result;

  result = qword_1010EDA30;
  if (!qword_1010EDA30)
  {
    result = swift_getWitnessTable(&unk_100E25C1C, &type metadata for ShareRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDA30);
  }
  return result;
}

unint64_t sub_1000A8660()
{
  unint64_t result;

  result = qword_1010EDA38;
  if (!qword_1010EDA38)
  {
    result = swift_getWitnessTable(&unk_100E25C44, &type metadata for ShareRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDA38);
  }
  return result;
}

uint64_t sub_1000A86A4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x7461446572616873 && a2 == 0xE900000000000065)
  {
    v8 = 0xE900000000000065;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446572616873, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL)
  {
    v9 = 0xEA00000000006E6FLL;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974617269707865, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x6148656572616873 && a2 == 0xEC000000656C646ELL)
  {
    v10 = 0xEC000000656C646ELL;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6148656572616873, 0xEC000000656C646ELL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EC2AE0)
  {
    v11 = 0x8000000100EC2AE0;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC2AE0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100EC7600)
  {
    v12 = 0x8000000100EC7600;
LABEL_46:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EC7600, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_46;
  }
  if (a1 == 0x7079546572616873 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 8;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7079546572616873, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_1000A8A64(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_10001A9A8((uint64_t *)&unk_1010EDC40);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_1000AE850();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys, &type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys, v12, v10, v11);
  v16[0] = a2;
  v16[1] = a3;
  v13 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000A8B68()
{
  return 0x65756C6156776172;
}

uint64_t sub_1000A8B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6156776172, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

void sub_1000A8C14(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000A8C20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AE850();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A8C48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AE850();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A8C70@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v5) & 1) != 0)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v6 = Data.trimmed.getter(v3, v4);
    v7 = v8;
  }
  result = sub_10001BC14(v3, v4);
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t sub_1000A8CF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_10001BBBC(v2, v3);
}

_QWORD *sub_1000A8D04@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1000AE22C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1000A8D2C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1000A8A64(a1, *v1, v1[1]);
}

Swift::Int sub_1000A8D44()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  sub_10001BBBC(v1, v2);
  Data.hash(into:)(v4, v1, v2);
  sub_10001BC14(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000A8DA4(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  sub_10001BBBC(v4, v3);
  Data.hash(into:)(a1, v4, v3);
  return sub_10001BC14(v4, v3);
}

Swift::Int sub_1000A8DF0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  sub_10001BBBC(v1, v2);
  Data.hash(into:)(v4, v1, v2);
  sub_10001BC14(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000A8E4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for String.Encoding(0);
  v1 = __chkstk_darwin();
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  v5 = v0[1];
  static String.Encoding.utf8.getter(v1);
  result = String.init(data:encoding:)(v4, v5, v3);
  if (!v7)
    return Data.hexString.getter(v4, v5);
  return result;
}

uint64_t sub_1000A8ED0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a1, v3);
  sub_10001BBBC(v4, v5);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v2, v3);
  v7 = v6;
  sub_10001BC14(v4, v5);
  sub_10001BC14(v2, v3);
  return v7 & 1;
}

uint64_t sub_1000A8F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  __int128 v20;
  _QWORD v21[2];

  v1 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v21[-2] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  v4._countAndFlagsBits = 0x203A64693CLL;
  v4._object = (void *)0xE500000000000000;
  String.append(_:)(v4);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x203A4E5320;
  v8._object = (void *)0xE500000000000000;
  String.append(_:)(v8);
  v9 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v10 = (uint64_t *)(v0 + *(int *)(v9 + 28));
  v11 = *v10;
  v12 = v10[1];
  v13 = sub_10001BBBC(*v10, v12);
  static String.Encoding.utf8.getter(v13);
  v14 = String.init(data:encoding:)(v11, v12, v3);
  if (!v15)
    v14 = Data.hexString.getter(v11, v12);
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  sub_10001BC14(v11, v12);
  v16._countAndFlagsBits = 0x203A4E53746C4120;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v20 = *(_OWORD *)(v0 + *(int *)(v9 + 32));
  v17 = sub_10001A9A8(&qword_1010EDAE8);
  _print_unlocked<A, B>(_:_:)(&v20, v21, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v18._countAndFlagsBits = 62;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return v21[0];
}

uint64_t sub_1000A910C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A9134 + 4 * byte_100E25D30[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_1000A9134()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_1000A9148()
{
  return 0x65566D6574737973;
}

unint64_t sub_1000A916C()
{
  return 0xD000000000000015;
}

uint64_t sub_1000A9194()
{
  return 0x64496E6D66;
}

uint64_t sub_1000A91A8()
{
  return 0x6449726F646E6576;
}

uint64_t sub_1000A91C0()
{
  return 0x49746375646F7270;
}

uint64_t sub_1000A91DC()
{
  return 0x45676E6972696170;
}

unint64_t sub_1000A91FC()
{
  return 0xD000000000000012;
}

uint64_t sub_1000A921C()
{
  return 0x4B65746176697270;
}

uint64_t sub_1000A9238()
{
  return 0x697274656D6D7973;
}

uint64_t sub_1000A9258()
{
  unsigned __int8 *v0;

  return sub_1000A910C(*v0);
}

uint64_t sub_1000A9260@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000AE350(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000A9284(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1000A9290(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ACE0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A92B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000ACE0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000A92E4()
{
  return 0xD00000000000001CLL;
}

unint64_t sub_1000A9300()
{
  return 0xD000000000000016;
}

uint64_t sub_1000A9324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(async function pointer to CloudBacked.creationDate(store:)[1]);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_100004C28;
  return CloudBacked.creationDate(store:)(a1, a2, a3, a4);
}

uint64_t sub_1000A93A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(async function pointer to CloudBacked.modificationDate(store:)[1]);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_100004A74;
  return CloudBacked.modificationDate(store:)(a1, a2, a3, a4);
}

uint64_t sub_1000A941C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to CloudBacked.recordChangeTag(store:)[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000A9484;
  return CloudBacked.recordChangeTag(store:)(a1, a2, a3);
}

uint64_t sub_1000A9484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *v3;
  v8 = swift_task_dealloc(v6);
  if (!v2)
  {
    v8 = a1;
    v9 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
}

void sub_1000A94E8(void *a1@<X0>, char *a2@<X8>)
{
  sub_1000A94FC(a1, a2);
}

void sub_1000A94FC(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  NSString v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  NSString v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  int v57;
  int v58;
  int v59;
  void (*v60)(char *, uint64_t);
  int v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  void (*v70)(char *, uint64_t);
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  int *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  NSString v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  NSString v89;
  id v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  NSString v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  unint64_t v103;
  int *v104;
  NSString v105;
  void (*v106)(char *, char *, uint64_t);
  unint64_t v107;
  NSString v108;
  void (*v109)(char *, char *, uint64_t);
  NSString v110;
  id v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  NSString v132;
  id v133;
  unint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  NSString v146;
  id v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  void (*v157)(char *, uint64_t);
  char *v158;
  void (*v159)(char *, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  int *v167;
  uint64_t v168;
  unint64_t v169;
  void (*v170)(uint64_t, char *, uint64_t);
  void (*v171)(char *, char *, uint64_t);
  id v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  void (*v186)(char *, char *, uint64_t);
  unint64_t v187;
  id v188;

  v4 = sub_10001A9A8(&qword_1010EDAF0);
  __chkstk_darwin(v4);
  v176 = (uint64_t)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SymmetricKey256(0);
  v174 = *(_QWORD *)(v6 - 8);
  v175 = v6;
  __chkstk_darwin(v6);
  v173 = (char *)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EDAF8);
  __chkstk_darwin(v8);
  v178 = (uint64_t)&v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for P256PrivateKey(0);
  v182 = *(_QWORD *)(v10 - 8);
  v183 = v10;
  __chkstk_darwin(v10);
  v177 = (char *)&v161 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PeripheralConnectionMaterial(0);
  __chkstk_darwin(v12);
  v180 = (uint64_t)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010ED860);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v161 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v161 - v18;
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD **)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v181 = (char *)&v161 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v185 = (char *)&v161 - v25;
  v26 = CKRecord.recordType.getter(v24);
  if (v26 == 0xD00000000000001CLL && v27 == 0x8000000100E25DE0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0xD00000000000001CLL, 0x8000000100E25DE0, 0);
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      v65 = sub_1000ACED8();
      v36 = swift_allocError(&type metadata for ConversionError, v65, 0, 0);
      *v66 = 0;
      goto LABEL_17;
    }
  }
  v184 = a2;
  v29 = objc_msgSend(a1, "recordID");
  v30 = objc_msgSend(v29, "recordName");

  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  UUID.init(uuidString:)(v31, v33);
  swift_bridgeObjectRelease();
  v34 = (unsigned int (*)(char *, uint64_t, uint64_t))v21[6];
  if (v34(v19, 1, v20) == 1)
  {
    sub_100004048((uint64_t)v19, &qword_1010ED860);
    v35 = sub_1000ACED8();
    v36 = swift_allocError(&type metadata for ConversionError, v35, 0, 0);
    *v37 = 1;
LABEL_17:
    swift_willThrow(v36);

    return;
  }
  v38 = v185;
  v171 = (void (*)(char *, char *, uint64_t))v21[4];
  v171(v185, v19, v20);
  v39 = objc_msgSend(a1, "encryptedValues");
  v170 = (void (*)(uint64_t, char *, uint64_t))v21[2];
  v170((uint64_t)v184, v38, v20);
  v40 = String._bridgeToObjectiveC()();
  v172 = v39;
  v41 = objc_msgSend(v39, "objectForKeyedSubscript:", v40);

  if (!v41
    || (v188 = v41,
        v42 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        (swift_dynamicCast(&v186, &v188, v42, &type metadata for Data, 6) & 1) == 0))
  {
    v62 = sub_1000ACED8();
    v63 = swift_allocError(&type metadata for ConversionError, v62, 0, 0);
    *v64 = 0;
    swift_willThrow(v63);
    swift_unknownObjectRelease(v172);

LABEL_19:
    v70 = (void (*)(char *, uint64_t))v21[1];
    v70(v185, v20);
    v70(v184, v20);
    return;
  }
  v168 = (uint64_t)v186;
  v169 = v187;
  v43 = String._bridgeToObjectiveC()();
  v44 = objc_msgSend(v172, "objectForKeyedSubscript:", v43);

  if (!v44 || (v188 = v44, (swift_dynamicCast(&v186, &v188, v42, &type metadata for String, 6) & 1) == 0))
  {
    v67 = sub_1000ACED8();
    v68 = swift_allocError(&type metadata for ConversionError, v67, 0, 0);
    *v69 = 0;
    swift_willThrow(v68);
    swift_unknownObjectRelease(v172);

    sub_10001BC14(v168, v169);
    goto LABEL_19;
  }
  v45 = (uint64_t)v186;
  v46 = v187;
  v167 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v47 = (uint64_t *)&v184[v167[5]];
  *v47 = v45;
  v47[1] = v46;
  v48 = String._bridgeToObjectiveC()();
  v49 = objc_msgSend(v172, "objectForKeyedSubscript:", v48);

  if (!v49 || (v188 = v49, (swift_dynamicCast(&v186, &v188, v42, &type metadata for String, 6) & 1) == 0))
  {
    v71 = sub_1000ACED8();
    v72 = swift_allocError(&type metadata for ConversionError, v71, 0, 0);
    *v73 = 0;
    swift_willThrow(v72);
    swift_unknownObjectRelease(v172);

    sub_10001BC14(v168, v169);
    v61 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    LODWORD(v181) = 0;
    v60 = (void (*)(char *, uint64_t))v21[1];
    v60(v185, v20);
    goto LABEL_23;
  }
  v50 = v187;
  v51 = v168;
  v52 = &v184[v167[6]];
  *(_QWORD *)v52 = v186;
  *((_QWORD *)v52 + 1) = v50;
  v186 = (void (*)(char *, char *, uint64_t))v51;
  v187 = v169;
  sub_10001BBBC(v51, v169);
  v165 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v165) & 1) != 0)
  {
    v53 = v169;
    sub_10001BC14(v51, v169);
    v54 = sub_1000ACED8();
    v55 = swift_allocError(&type metadata for ConversionError, v54, 0, 0);
    *v56 = 0;
    swift_willThrow(v55);
    swift_unknownObjectRelease(v172);

    sub_10001BC14(v51, v53);
    v57 = 0;
    v58 = 0;
    v59 = 0;
    LODWORD(v181) = 0;
    v60 = (void (*)(char *, uint64_t))v21[1];
    v61 = 1;
    v60(v185, v20);
    goto LABEL_23;
  }
  v166 = v42;
  v77 = v169;
  v78 = Data.trimmed.getter(v51, v169);
  v79 = v51;
  v81 = v80;
  sub_10001BC14(v79, v77);
  v82 = (uint64_t *)&v184[v167[7]];
  *v82 = v78;
  v82[1] = v81;
  v163 = v78;
  v164 = v81;
  sub_10001BBBC(v78, v81);
  v83 = String._bridgeToObjectiveC()();
  v84 = objc_msgSend(v172, "objectForKeyedSubscript:", v83);

  if (v84)
  {
    v188 = v84;
    if ((swift_dynamicCast(&v186, &v188, v166, &type metadata for Data, 6) & 1) != 0)
    {
      v85 = (uint64_t)v186;
      v86 = v187;
      if ((DataProtocol.isNull.getter(&type metadata for Data, v165) & 1) == 0)
      {
        v84 = (id)Data.trimmed.getter(v85, v86);
        v96 = v85;
        v87 = v97;
        sub_10001BC14(v96, v86);
        goto LABEL_40;
      }
      sub_10001BC14(v85, v86);
    }
    v84 = 0;
  }
  v87 = 0xF000000000000000;
LABEL_40:
  v88 = &v184[v167[8]];
  *(_QWORD *)v88 = v84;
  *((_QWORD *)v88 + 1) = v87;
  v89 = String._bridgeToObjectiveC()();
  v90 = objc_msgSend(v172, "objectForKeyedSubscript:", v89);

  if (!v90)
    goto LABEL_44;
  v188 = v90;
  if ((swift_dynamicCast(&v186, &v188, v166, &type metadata for Data, 6) & 1) == 0)
    goto LABEL_44;
  v92 = (uint64_t)v186;
  v91 = v187;
  sub_10001BBBC((uint64_t)v186, v187);
  UUID.init(data:)(v92, v91);
  if (v34(v17, 1, v20) == 1)
  {
    sub_10001BC14(v92, v91);
    sub_100004048((uint64_t)v17, &qword_1010ED860);
LABEL_44:
    v93 = sub_1000ACED8();
    v94 = swift_allocError(&type metadata for ConversionError, v93, 0, 0);
    *v95 = 0;
    swift_willThrow(v94);
    swift_unknownObjectRelease(v172);

    sub_10001BC14(v163, v164);
    sub_10001BC14(v168, v169);
    v58 = 0;
    v59 = 0;
    LODWORD(v181) = 0;
    v60 = (void (*)(char *, uint64_t))v21[1];
    v61 = 1;
    v57 = 1;
    v60(v185, v20);
    goto LABEL_23;
  }
  v165 = v92;
  v162 = v91;
  v98 = v181;
  v171(v181, v17, v20);
  v99 = v184;
  v170((uint64_t)&v184[v167[9]], v98, v20);
  v100 = String._bridgeToObjectiveC()();
  v101 = (void (*)(char *, char *, uint64_t))objc_msgSend(v172, "objectForKeyedSubscript:", v100);

  v102 = v168;
  v103 = v169;
  if (!v101 || (v186 = v101, (swift_dynamicCast(&v188, &v186, v166, &type metadata for UInt16, 6) & 1) == 0))
  {
    v117 = sub_1000ACED8();
    v118 = swift_allocError(&type metadata for ConversionError, v117, 0, 0);
    *v119 = 0;
    swift_willThrow(v118);
    swift_unknownObjectRelease(v172);

    sub_10001BC14(v165, v162);
    sub_10001BC14(v163, v164);
    v120 = v102;
LABEL_61:
    v128 = v103;
LABEL_62:
    sub_10001BC14(v120, v128);
    v60 = (void (*)(char *, uint64_t))v21[1];
    v60(v181, v20);
    v59 = 0;
    LODWORD(v181) = 0;
    v61 = 1;
    v57 = 1;
    v58 = 1;
    v60(v185, v20);
    goto LABEL_23;
  }
  v104 = v167;
  *(_QWORD *)&v99[v167[10]] = (unsigned __int16)v188;
  v105 = String._bridgeToObjectiveC()();
  v106 = (void (*)(char *, char *, uint64_t))objc_msgSend(v172, "objectForKeyedSubscript:", v105);

  v107 = v165;
  if (!v106 || (v186 = v106, (swift_dynamicCast(&v188, &v186, v166, &type metadata for Int64, 6) & 1) == 0))
  {
    v121 = sub_1000ACED8();
    v122 = swift_allocError(&type metadata for ConversionError, v121, 0, 0);
    *v123 = 0;
    swift_willThrow(v122);
    swift_unknownObjectRelease(v172);

    v124 = v107;
LABEL_60:
    sub_10001BC14(v124, v162);
    sub_10001BC14(v163, v164);
    v120 = v168;
    goto LABEL_61;
  }
  *(_QWORD *)&v99[v104[12]] = v188;
  v108 = String._bridgeToObjectiveC()();
  v109 = (void (*)(char *, char *, uint64_t))objc_msgSend(v172, "objectForKeyedSubscript:", v108);

  if (!v109)
  {
LABEL_59:
    v125 = sub_1000ACED8();
    v126 = swift_allocError(&type metadata for ConversionError, v125, 0, 0);
    *v127 = 0;
    swift_willThrow(v126);
    swift_unknownObjectRelease(v172);

    v124 = v165;
    goto LABEL_60;
  }
  v186 = v109;
  if ((swift_dynamicCast(&v188, &v186, v166, &type metadata for UInt16, 6) & 1) == 0)
  {
    v103 = v169;
    goto LABEL_59;
  }
  *(_QWORD *)&v184[v167[11]] = (unsigned __int16)v188;
  v110 = String._bridgeToObjectiveC()();
  v111 = objc_msgSend(v172, "objectForKeyedSubscript:", v110);

  if (!v111 || (v188 = v111, (swift_dynamicCast(&v186, &v188, v166, &type metadata for Data, 6) & 1) == 0))
  {
    v129 = sub_1000ACED8();
    v130 = swift_allocError(&type metadata for ConversionError, v129, 0, 0);
    *v131 = 0;
    swift_willThrow(v130);
    goto LABEL_64;
  }
  v112 = (uint64_t)v186;
  v113 = v187;
  v114 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v114, *(unsigned int *)(v114 + 48), *(unsigned __int16 *)(v114 + 52));
  PropertyListDecoder.init()();
  v115 = sub_100006204(&qword_1010EDAA0, type metadata accessor for PeripheralConnectionMaterial, (uint64_t)&unk_100E29008);
  v116 = v179;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v12, v112, v113, v12, v115);
  if (v116)
  {
    swift_release();
    sub_10001BC14(v112, v113);
LABEL_64:
    swift_unknownObjectRelease(v172);

    sub_10001BC14(v165, v162);
    sub_10001BC14(v163, v164);
    v120 = v168;
    v128 = v169;
    goto LABEL_62;
  }
  swift_release();
  sub_10005972C(v180, (uint64_t)&v184[v167[13]], type metadata accessor for PeripheralConnectionMaterial);
  v132 = String._bridgeToObjectiveC()();
  v133 = objc_msgSend(v172, "objectForKeyedSubscript:", v132);

  if (!v133)
    goto LABEL_69;
  v188 = v133;
  if ((swift_dynamicCast(&v186, &v188, v166, &type metadata for Data, 6) & 1) == 0)
    goto LABEL_69;
  v135 = v186;
  v134 = v187;
  sub_10001BBBC((uint64_t)v186, v187);
  v136 = sub_100006204(&qword_1010EDA70, (uint64_t (*)(uint64_t))&type metadata accessor for P256PrivateKey, (uint64_t)&protocol conformance descriptor for P256PrivateKey);
  v137 = v178;
  v171 = v135;
  v179 = v134;
  v138 = v134;
  v139 = v183;
  KeyRepresenting.init(rawValue:)(v135, v138, v183, v136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48))(v137, 1, v139) == 1)
  {
    sub_10001BC14((uint64_t)v171, v179);
    sub_100004048(v178, (uint64_t *)&unk_1010EDAF8);
LABEL_69:
    v140 = sub_1000ACED8();
    v141 = swift_allocError(&type metadata for ConversionError, v140, 0, 0);
    *v142 = 0;
    swift_willThrow(v141);
    sub_10001BC14(v112, v113);
    swift_unknownObjectRelease(v172);

    sub_10001BC14(v165, v162);
    sub_10001BC14(v163, v164);
    sub_10001BC14(v168, v169);
    sub_1000126B0(v180, type metadata accessor for PeripheralConnectionMaterial);
    v60 = (void (*)(char *, uint64_t))v21[1];
    v60(v181, v20);
    LODWORD(v181) = 0;
    v61 = 1;
    v57 = 1;
    v58 = 1;
    v59 = 1;
    v60(v185, v20);
    goto LABEL_23;
  }
  v144 = v182;
  v143 = v183;
  v145 = v177;
  (*(void (**)(char *, uint64_t, uint64_t))(v182 + 32))(v177, v178, v183);
  (*(void (**)(char *, char *, uint64_t))(v144 + 16))(&v184[v167[14]], v145, v143);
  v146 = String._bridgeToObjectiveC()();
  v147 = objc_msgSend(v172, "objectForKeyedSubscript:", v146);

  if (v147)
  {
    v188 = v147;
    if ((swift_dynamicCast(&v186, &v188, v166, &type metadata for Data, 6) & 1) != 0)
    {
      v148 = (uint64_t)v186;
      v149 = v187;
      v150 = sub_100006204(&qword_1010EDA78, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey256, (uint64_t)&protocol conformance descriptor for SymmetricKey256);
      v151 = v176;
      v152 = v148;
      v153 = v175;
      KeyRepresenting.init(rawValue:)(v152, v149, v175, v150);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v174 + 48))(v151, 1, v153) != 1)
      {
        sub_10001BC14(v112, v113);
        swift_unknownObjectRelease(v172);

        sub_10001BC14((uint64_t)v171, v179);
        sub_10001BC14(v165, v162);
        sub_10001BC14(v163, v164);
        sub_10001BC14(v168, v169);
        (*(void (**)(char *, uint64_t))(v182 + 8))(v177, v183);
        sub_1000126B0(v180, type metadata accessor for PeripheralConnectionMaterial);
        v157 = (void (*)(char *, uint64_t))v21[1];
        v157(v181, v20);
        v157(v185, v20);
        v158 = v173;
        v159 = *(void (**)(char *, uint64_t, uint64_t))(v174 + 32);
        v160 = v175;
        v159(v173, v176, v175);
        v159(&v184[v167[15]], (uint64_t)v158, v160);
        return;
      }
      sub_100004048(v176, &qword_1010EDAF0);
    }
  }
  v154 = sub_1000ACED8();
  v155 = swift_allocError(&type metadata for ConversionError, v154, 0, 0);
  *v156 = 0;
  swift_willThrow(v155);
  sub_10001BC14(v112, v113);
  swift_unknownObjectRelease(v172);

  sub_10001BC14((uint64_t)v171, v179);
  sub_10001BC14(v165, v162);
  sub_10001BC14(v163, v164);
  sub_10001BC14(v168, v169);
  (*(void (**)(char *, uint64_t))(v182 + 8))(v177, v183);
  sub_1000126B0(v180, type metadata accessor for PeripheralConnectionMaterial);
  v60 = (void (*)(char *, uint64_t))v21[1];
  v60(v181, v20);
  v61 = 1;
  v57 = 1;
  v58 = 1;
  v59 = 1;
  LODWORD(v181) = 1;
  v60(v185, v20);
LABEL_23:
  v60(v184, v20);
  swift_bridgeObjectRelease();
  if (v61)
  {
    swift_bridgeObjectRelease();
    if ((v57 & 1) == 0)
      goto LABEL_25;
  }
  else if (!v57)
  {
LABEL_25:
    v74 = v167;
    if (v58)
      goto LABEL_26;
    goto LABEL_31;
  }
  v74 = v167;
  v76 = v184;
  sub_10001BC14(*(_QWORD *)&v184[v167[7]], *(_QWORD *)&v184[v167[7] + 8]);
  sub_10001EF3C(*(_QWORD *)&v76[v74[8]], *(_QWORD *)&v76[v74[8] + 8]);
  if ((v58 & 1) != 0)
  {
LABEL_26:
    v60(&v184[v74[9]], v20);
    if ((v59 & 1) == 0)
      goto LABEL_27;
    goto LABEL_32;
  }
LABEL_31:
  if (!v59)
  {
LABEL_27:
    v75 = v184;
    if ((_DWORD)v181)
      goto LABEL_33;
    return;
  }
LABEL_32:
  v75 = v184;
  sub_1000126B0((uint64_t)&v184[v74[13]], type metadata accessor for PeripheralConnectionMaterial);
  if ((v181 & 1) != 0)
LABEL_33:
    (*(void (**)(char *, uint64_t))(v182 + 8))(&v75[v74[14]], v183);
}

uint64_t sub_1000AA844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to CloudBacked.ckRecord(store:)[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000AA8AC;
  return CloudBacked.ckRecord(store:)(a1, a2, a3);
}

uint64_t sub_1000AA8AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000AA904(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  int *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v3);
  v5 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v6 = (uint64_t *)(v1 + v5[5]);
  v8 = *v6;
  v7 = v6[1];
  v44 = &type metadata for String;
  v45 = &protocol witness table for String;
  v42 = v8;
  v43 = v7;
  swift_bridgeObjectRetain(v7);
  CKRecordKeyValueSetting.subscript.setter(&v42, 0x6C65646F6DLL, 0xE500000000000000, ObjectType);
  v9 = (uint64_t *)(v1 + v5[6]);
  v11 = *v9;
  v10 = v9[1];
  v44 = &type metadata for String;
  v45 = &protocol witness table for String;
  v42 = v11;
  v43 = v10;
  swift_bridgeObjectRetain(v10);
  CKRecordKeyValueSetting.subscript.setter(&v42, 0x65566D6574737973, 0xED00006E6F697372, ObjectType);
  v12 = (uint64_t *)(v1 + v5[7]);
  v13 = *v12;
  v14 = v12[1];
  v44 = &type metadata for Data;
  v45 = &protocol witness table for Data;
  v42 = v13;
  v43 = v14;
  sub_10001BBBC(v13, v14);
  CKRecordKeyValueSetting.subscript.setter(&v42, 0xD000000000000015, 0x8000000100EC7640, ObjectType);
  v15 = (uint64_t *)(v1 + v5[8]);
  v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", 0, v17);

  }
  else
  {
    v19 = *v15;
    v44 = &type metadata for Data;
    v45 = &protocol witness table for Data;
    v42 = v19;
    v43 = v16;
    sub_10001BBBC(v19, v16);
    sub_10001BBBC(v19, v16);
    CKRecordKeyValueSetting.subscript.setter(&v42, 0xD000000000000015, 0x8000000100EC7660, ObjectType);
    v18 = sub_10001EF3C(v19, v16);
  }
  v20 = UUID.data.getter(v18);
  v44 = &type metadata for Data;
  v45 = &protocol witness table for Data;
  v42 = v20;
  v43 = v21;
  CKRecordKeyValueSetting.subscript.setter(&v42, 0x64496E6D66, 0xE500000000000000, ObjectType);
  v22 = *(_QWORD *)(v2 + v5[10]);
  v44 = &type metadata for Int;
  v45 = &protocol witness table for Int;
  v42 = v22;
  CKRecordKeyValueSetting.subscript.setter(&v42, 0x6449726F646E6576, 0xE800000000000000, ObjectType);
  v23 = *(_QWORD *)(v2 + v5[11]);
  v44 = &type metadata for Int;
  v45 = &protocol witness table for Int;
  v42 = v23;
  CKRecordKeyValueSetting.subscript.setter(&v42, 0x49746375646F7270, 0xE900000000000064, ObjectType);
  v24 = *(_QWORD *)(v2 + v5[12]);
  v44 = &type metadata for Int64;
  v45 = &protocol witness table for Int64;
  v42 = v24;
  CKRecordKeyValueSetting.subscript.setter(&v42, 0x45676E6972696170, 0xEC00000068636F70, ObjectType);
  v25 = type metadata accessor for PropertyListEncoder(0);
  v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  PropertyListEncoder.init()(v26);
  v27 = v2 + v5[13];
  v28 = type metadata accessor for PeripheralConnectionMaterial(0);
  v29 = sub_100006204((unint64_t *)&unk_1010EDA60, type metadata accessor for PeripheralConnectionMaterial, (uint64_t)&unk_100E28FE0);
  v30 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v27, v28, v29);
  v32 = v31;
  swift_release();
  v44 = &type metadata for Data;
  v45 = &protocol witness table for Data;
  v42 = v30;
  v43 = v32;
  CKRecordKeyValueSetting.subscript.setter(&v42, 0xD000000000000012, 0x8000000100EC7680, ObjectType);
  v33 = type metadata accessor for P256PrivateKey(0);
  v34 = sub_100006204(&qword_1010EDA70, (uint64_t (*)(uint64_t))&type metadata accessor for P256PrivateKey, (uint64_t)&protocol conformance descriptor for P256PrivateKey);
  v35 = KeyRepresenting.rawValue.getter(v33, v34);
  v44 = &type metadata for Data;
  v45 = &protocol witness table for Data;
  v42 = v35;
  v43 = v36;
  CKRecordKeyValueSetting.subscript.setter(&v42, 0x4B65746176697270, 0xEA00000000007965, ObjectType);
  v37 = type metadata accessor for SymmetricKey256(0);
  v38 = sub_100006204(&qword_1010EDA78, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey256, (uint64_t)&protocol conformance descriptor for SymmetricKey256);
  v39 = KeyRepresenting.rawValue.getter(v37, v38);
  v44 = &type metadata for Data;
  v45 = &protocol witness table for Data;
  v42 = v39;
  v43 = v40;
  CKRecordKeyValueSetting.subscript.setter(&v42, 0x697274656D6D7973, 0xEC00000079654B63, ObjectType);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1000AAF34(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  void (*v26)(char *, uint64_t, uint64_t, int *);
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  id v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  id *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t result;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id *ObjectType;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  void *v128;

  v4 = v3;
  ObjectType = a1;
  v7 = type metadata accessor for SymmetricKey256(0);
  v121 = *(_QWORD *)(v7 - 8);
  v122 = v7;
  __chkstk_darwin(v7);
  v120 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for P256PrivateKey(0);
  v118 = *(_QWORD *)(v9 - 8);
  v119 = v9;
  __chkstk_darwin(v9);
  v117 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for PeripheralConnectionMaterial(0);
  __chkstk_darwin(v116);
  v115 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v114 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v113 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v15);
  v20 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v22 = *((_QWORD *)v21 - 1);
  __chkstk_darwin(v21);
  v24 = (char *)&v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a2, a3);
  v25 = swift_dynamicCast(v17, v20, a3, v21, 6);
  v26 = *(void (**)(char *, uint64_t, uint64_t, int *))(v22 + 56);
  if (!v25)
  {
    v26(v17, 1, 1, v21);
    sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EDC50);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003ALL, 0x8000000100EC7700, "searchpartyd/LocalFindableAccessoryRecord.swift", 47, 2, 113, 0);
    __break(1u);
    return result;
  }
  v26(v17, 0, 1, v21);
  sub_1000126EC((uint64_t)v17, (uint64_t)v24, type metadata accessor for LocalFindableAccessoryRecord);
  v27 = objc_msgSend(*ObjectType, "encryptedValues");
  ObjectType = (id *)swift_getObjectType(v27);
  v28 = v21[5];
  v29 = *(_QWORD *)&v24[v28];
  v30 = *(_QWORD *)&v24[v28 + 8];
  v31 = (uint64_t *)(v4 + v28);
  v33 = *v31;
  v32 = v31[1];
  if ((v29 != *v31 || v30 != v32)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, *v31, v31[1], 0) & 1) == 0)
  {
    v127 = &type metadata for String;
    v128 = &protocol witness table for String;
    v125 = v33;
    v126 = v32;
    swift_bridgeObjectRetain(v32);
    CKRecordKeyValueSetting.subscript.setter(&v125, 0x6C65646F6DLL, 0xE500000000000000, ObjectType);
  }
  v34 = v21[6];
  v35 = *(_QWORD *)&v24[v34];
  v36 = *(_QWORD *)&v24[v34 + 8];
  v37 = (uint64_t *)(v4 + v34);
  v39 = *v37;
  v38 = v37[1];
  if ((v35 != *v37 || v36 != v38)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, *v37, v37[1], 0) & 1) == 0)
  {
    v127 = &type metadata for String;
    v128 = &protocol witness table for String;
    v125 = v39;
    v126 = v38;
    swift_bridgeObjectRetain(v38);
    CKRecordKeyValueSetting.subscript.setter(&v125, 0x65566D6574737973, 0xED00006E6F697372, ObjectType);
  }
  v123 = v27;
  v40 = v21[7];
  v41 = *(_QWORD *)&v24[v40];
  v42 = *(_QWORD *)&v24[v40 + 8];
  v43 = (uint64_t *)(v4 + v40);
  v44 = *v43;
  v45 = v43[1];
  sub_10001BBBC(v41, v42);
  sub_10001BBBC(v44, v45);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v41, v42);
  v47 = v46;
  sub_10001BC14(v44, v45);
  sub_10001BC14(v41, v42);
  if ((v47 & 1) == 0)
  {
    v127 = &type metadata for Data;
    v128 = &protocol witness table for Data;
    v125 = v44;
    v126 = v45;
    sub_10001BBBC(v44, v45);
    CKRecordKeyValueSetting.subscript.setter(&v125, 0xD000000000000015, 0x8000000100EC7640, ObjectType);
  }
  v48 = v21[8];
  v49 = (uint64_t *)&v24[v48];
  v50 = *(_QWORD *)&v24[v48 + 8];
  v51 = v4 + v48;
  if (v50 >> 60 == 15)
  {
    v52 = *(_QWORD *)(v51 + 8);
    v53 = v123;
    if (v52 >> 60 != 15)
    {
      v54 = *(_QWORD *)v51;
      v127 = &type metadata for Data;
      v128 = &protocol witness table for Data;
      v125 = v54;
      v126 = v52;
      sub_10001BBBC(v54, v52);
      sub_10001BBBC(v54, v52);
      CKRecordKeyValueSetting.subscript.setter(&v125, 0xD000000000000015, 0x8000000100EC7660, ObjectType);
      v55 = v54;
LABEL_20:
      v58 = v52;
      goto LABEL_21;
    }
  }
  else
  {
    v56 = *v49;
    v52 = *(_QWORD *)(v51 + 8);
    if (v52 >> 60 == 15)
    {
      sub_10001BBBC(v56, v50);
      v57 = String._bridgeToObjectiveC()();
      v53 = v123;
      objc_msgSend(v123, "setObject:forKeyedSubscript:", 0, v57);

      v55 = v56;
      v58 = v50;
LABEL_21:
      sub_10001EF3C(v55, v58);
      goto LABEL_22;
    }
    v59 = *(_QWORD *)v51;
    sub_10001BD08(*(_QWORD *)v51, *(_QWORD *)(v51 + 8));
    sub_10001BD08(v59, v52);
    sub_10001BD08(v56, v50);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v56, v50);
    v61 = v60;
    sub_10001EF3C(v59, v52);
    if ((v61 & 1) == 0)
    {
      v127 = &type metadata for Data;
      v128 = &protocol witness table for Data;
      v125 = v59;
      v126 = v52;
      sub_10001BBBC(v59, v52);
      v62 = v123;
      CKRecordKeyValueSetting.subscript.setter(&v125, 0xD000000000000015, 0x8000000100EC7660, ObjectType);
      sub_10001EF3C(v56, v50);
      v55 = v59;
      v53 = v62;
      goto LABEL_20;
    }
    sub_10001EF3C(v56, v50);
    sub_10001EF3C(v59, v52);
    v53 = v123;
  }
LABEL_22:
  v63 = v21[9];
  v64 = &v24[v63];
  v66 = v113;
  v65 = v114;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v113, v4 + v63, v12);
  v67 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(v64) = dispatch thunk of static Equatable.== infix(_:_:)(v64, v66, v12, v67);
  v68 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v66, v12);
  v69 = ObjectType;
  v71 = (uint64_t)v115;
  v70 = v116;
  if ((v64 & 1) == 0)
  {
    v72 = UUID.data.getter(v68);
    v127 = &type metadata for Data;
    v128 = &protocol witness table for Data;
    v125 = v72;
    v126 = v73;
    CKRecordKeyValueSetting.subscript.setter(&v125, 0x64496E6D66, 0xE500000000000000, v69);
  }
  v74 = v21[10];
  v75 = *(_QWORD *)&v24[v74];
  v76 = *(_QWORD *)(v4 + v74);
  if (v75 != v76)
  {
    v127 = &type metadata for Int;
    v128 = &protocol witness table for Int;
    v125 = v76;
    CKRecordKeyValueSetting.subscript.setter(&v125, 0x6449726F646E6576, 0xE800000000000000, v69);
  }
  v77 = v21[11];
  v78 = *(_QWORD *)&v24[v77];
  v79 = *(_QWORD *)(v4 + v77);
  if (v78 != v79)
  {
    v127 = &type metadata for Int;
    v128 = &protocol witness table for Int;
    v125 = v79;
    CKRecordKeyValueSetting.subscript.setter(&v125, 0x49746375646F7270, 0xE900000000000064, v69);
  }
  v80 = v21[12];
  v81 = *(_QWORD *)&v24[v80];
  v82 = *(_QWORD *)(v4 + v80);
  if (v81 != v82)
  {
    v127 = &type metadata for Int64;
    v128 = &protocol witness table for Int64;
    v125 = v82;
    CKRecordKeyValueSetting.subscript.setter(&v125, 0x45676E6972696170, 0xEC00000068636F70, v69);
  }
  v83 = v21[13];
  v84 = &v24[v83];
  v85 = v4 + v83;
  sub_10005972C(v4 + v83, v71, type metadata accessor for PeripheralConnectionMaterial);
  if ((static MACAddress.== infix(_:_:)(v84, v71) & 1) != 0
    && (_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)&v84[*(int *)(v70 + 20)], *(_QWORD *)&v84[*(int *)(v70 + 20) + 8]), (v86 & 1) != 0))
  {
    sub_1000126B0(v71, type metadata accessor for PeripheralConnectionMaterial);
  }
  else
  {
    sub_1000126B0(v71, type metadata accessor for PeripheralConnectionMaterial);
    v87 = type metadata accessor for PropertyListEncoder(0);
    v88 = swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
    PropertyListEncoder.init()(v88);
    v89 = sub_100006204((unint64_t *)&unk_1010EDA60, type metadata accessor for PeripheralConnectionMaterial, (uint64_t)&unk_100E28FE0);
    v90 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v85, v70, v89);
    v92 = v91;
    swift_release();
    v127 = &type metadata for Data;
    v128 = &protocol witness table for Data;
    v125 = v90;
    v126 = v92;
    CKRecordKeyValueSetting.subscript.setter(&v125, 0xD000000000000012, 0x8000000100EC7680, v69);
  }
  v93 = v21[14];
  v94 = &v24[v93];
  v96 = v117;
  v95 = v118;
  v97 = v119;
  (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v117, v4 + v93, v119);
  v98 = sub_100006204(&qword_1010EDC60, (uint64_t (*)(uint64_t))&type metadata accessor for P256PrivateKey, (uint64_t)&protocol conformance descriptor for P256PrivateKey);
  LOBYTE(v94) = dispatch thunk of static Equatable.== infix(_:_:)(v94, v96, v97, v98);
  v99 = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v96, v97);
  if ((v94 & 1) == 0)
  {
    v100 = P256PrivateKey.data.getter(v99);
    v127 = &type metadata for Data;
    v128 = &protocol witness table for Data;
    v125 = v100;
    v126 = v101;
    CKRecordKeyValueSetting.subscript.setter(&v125, 0x4B65746176697270, 0xEA00000000007965, v69);
  }
  v102 = v21[15];
  v103 = &v24[v102];
  v104 = v4 + v102;
  v106 = v120;
  v105 = v121;
  v107 = v122;
  (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v120, v104, v122);
  v108 = sub_100006204(&qword_1010EDC68, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey256, (uint64_t)&protocol conformance descriptor for SymmetricKey256);
  LOBYTE(v103) = dispatch thunk of static Equatable.== infix(_:_:)(v103, v106, v107, v108);
  v109 = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v106, v107);
  if ((v103 & 1) != 0)
  {
    sub_1000126B0((uint64_t)v24, type metadata accessor for LocalFindableAccessoryRecord);
    return swift_unknownObjectRelease(v53);
  }
  else
  {
    v111 = SymmetricKey256.data.getter(v109);
    v127 = &type metadata for Data;
    v128 = &protocol witness table for Data;
    v125 = v111;
    v126 = v112;
    CKRecordKeyValueSetting.subscript.setter(&v125, 0x697274656D6D7973, 0xEC00000079654B63, v69);
    swift_unknownObjectRelease(v53);
    return sub_1000126B0((uint64_t)v24, type metadata accessor for LocalFindableAccessoryRecord);
  }
}

uint64_t LocationProvider.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1000ABBD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  char v38;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010EDAB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1000ACE0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LocalFindableAccessoryRecord.CodingKeys, &type metadata for LocalFindableAccessoryRecord.CodingKeys, v11, v9, v10);
  LOBYTE(v37) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v37, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    LOBYTE(v37) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v37, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v37) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v37, v5);
    v37 = *(_OWORD *)(v3 + v14[7]);
    v38 = 3;
    v36 = sub_1000ACE94();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, &type metadata for LocalFindableAccessoryRecord.SerialNumber, v36);
    v37 = *(_OWORD *)(v3 + v14[8]);
    v38 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v37, &v38, v5, &type metadata for LocalFindableAccessoryRecord.SerialNumber, v36);
    v21 = v3 + v14[9];
    LOBYTE(v37) = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v37, v5, v12, v13);
    v22 = *(_QWORD *)(v3 + v14[10]);
    LOBYTE(v37) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v37, v5);
    v23 = *(_QWORD *)(v3 + v14[11]);
    LOBYTE(v37) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v37, v5);
    v24 = *(_QWORD *)(v3 + v14[12]);
    LOBYTE(v37) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v37, v5);
    v25 = v3 + v14[13];
    LOBYTE(v37) = 9;
    v26 = type metadata accessor for PeripheralConnectionMaterial(0);
    v27 = sub_100006204((unint64_t *)&unk_1010EDA60, type metadata accessor for PeripheralConnectionMaterial, (uint64_t)&unk_100E28FE0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v37, v5, v26, v27);
    v28 = v3 + v14[14];
    LOBYTE(v37) = 10;
    v29 = type metadata accessor for P256PrivateKey(0);
    v30 = sub_100006204(&qword_1010EDAD0, (uint64_t (*)(uint64_t))&type metadata accessor for P256PrivateKey, (uint64_t)&protocol conformance descriptor for P256PrivateKey);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v37, v5, v29, v30);
    v31 = v3 + v14[15];
    LOBYTE(v37) = 11;
    v32 = type metadata accessor for SymmetricKey256(0);
    v33 = sub_100006204(&qword_1010EDAD8, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey256, (uint64_t)&protocol conformance descriptor for SymmetricKey256);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v37, v5, v32, v33);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000ABFC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD *, uint64_t);
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  char v64;

  v48 = a2;
  v50 = type metadata accessor for SymmetricKey256(0);
  v47 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (uint64_t *)((char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for P256PrivateKey(0);
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  __chkstk_darwin(v4);
  v51 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = type metadata accessor for PeripheralConnectionMaterial(0);
  __chkstk_darwin(v52);
  v7 = (uint64_t *)((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for UUID(0);
  v62 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v45 - v12);
  v53 = sub_10001A9A8(&qword_1010EDA80);
  v14 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v60);
  v59 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v19 = a1[4];
  v57 = a1;
  sub_10001AA44(a1, v18);
  v20 = sub_1000ACE0C();
  v56 = v16;
  v21 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocalFindableAccessoryRecord.CodingKeys, &type metadata for LocalFindableAccessoryRecord.CodingKeys, v20, v18, v19);
  v61 = v8;
  if (v21)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
  v22 = v11;
  v58 = v7;
  v23 = v14;
  LOBYTE(v63) = 0;
  v24 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v25 = v53;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v13, v8, &v63, v53, v8, v24);
  v46 = v24;
  v26 = *(void (**)(char *, _QWORD *, uint64_t))(v62 + 32);
  v27 = v59;
  v26(v59, v13, v8);
  LOBYTE(v63) = 1;
  v28 = KeyedDecodingContainer.decode(_:forKey:)(&v63, v25);
  v29 = v60;
  v30 = (uint64_t *)&v27[v60[5]];
  *v30 = v28;
  v30[1] = v31;
  LOBYTE(v63) = 2;
  v32 = KeyedDecodingContainer.decode(_:forKey:)(&v63, v25);
  v33 = (uint64_t *)&v27[v29[6]];
  *v33 = v32;
  v33[1] = v34;
  v64 = 3;
  v35 = sub_1000ACE50();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v63, &type metadata for LocalFindableAccessoryRecord.SerialNumber, &v64, v25, &type metadata for LocalFindableAccessoryRecord.SerialNumber, v35);
  *(_OWORD *)&v27[v29[7]] = v63;
  v64 = 4;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for LocalFindableAccessoryRecord.SerialNumber, &v64, v25, &type metadata for LocalFindableAccessoryRecord.SerialNumber, v35);
  *(_OWORD *)&v27[v29[8]] = v63;
  LOBYTE(v63) = 5;
  v36 = v22;
  v37 = v22;
  v38 = v29;
  v39 = v61;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v61, &v63, v25, v61, v46);
  v26(&v27[v38[9]], v36, v39);
  LOBYTE(v63) = 6;
  *(_QWORD *)&v27[v38[10]] = KeyedDecodingContainer.decode(_:forKey:)(&v63, v25);
  LOBYTE(v63) = 7;
  *(_QWORD *)&v27[v38[11]] = KeyedDecodingContainer.decode(_:forKey:)(&v63, v25);
  LOBYTE(v63) = 8;
  *(_QWORD *)&v27[v38[12]] = KeyedDecodingContainer.decode(_:forKey:)(&v63, v25);
  LOBYTE(v63) = 9;
  v40 = sub_100006204(&qword_1010EDAA0, type metadata accessor for PeripheralConnectionMaterial, (uint64_t)&unk_100E29008);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v58, v52, &v63, v25, v52, v40);
  sub_1000126EC((uint64_t)v58, (uint64_t)&v59[v60[13]], type metadata accessor for PeripheralConnectionMaterial);
  LOBYTE(v63) = 10;
  v41 = sub_100006204(&qword_1010EDAA8, (uint64_t (*)(uint64_t))&type metadata accessor for P256PrivateKey, (uint64_t)&protocol conformance descriptor for P256PrivateKey);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v51, v55, &v63, v53, v55, v41);
  (*(void (**)(char *, _QWORD *, uint64_t))(v54 + 32))(&v59[v60[14]], v51, v55);
  LOBYTE(v63) = 11;
  v42 = sub_100006204(&qword_1010EDAB0, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey256, (uint64_t)&protocol conformance descriptor for SymmetricKey256);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v49, v50, &v63, v53, v50, v42);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v56, v53);
  v43 = (uint64_t)v59;
  (*(void (**)(char *, _QWORD *, uint64_t))(v47 + 32))(&v59[v60[15]], v49, v50);
  sub_10005972C(v43, v48, type metadata accessor for LocalFindableAccessoryRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
  return sub_1000126B0(v43, type metadata accessor for LocalFindableAccessoryRecord);
}

uint64_t sub_1000AC850(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 20));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1000AC884(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1000AC8B8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 40));
}

uint64_t sub_1000AC8C4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t sub_1000AC8D0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001EE37C(*(_QWORD *)(v1 + *(int *)(a1 + 40)), *(_QWORD *)(v1 + *(int *)(a1 + 44)));
}

id sub_1000AC8E0()
{
  return SPBeaconTypeLocalFindable;
}

uint64_t sub_1000AC8F0(uint64_t a1)
{
  uint64_t v1;

  return Date.init(timeIntervalSince1970:)((double)*(uint64_t *)(v1 + *(int *)(a1 + 48)) / 1000.0);
}

uint64_t sub_1000AC910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_1000AC94C()
{
  return 0;
}

uint64_t sub_1000AC958@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000ABFC4(a1, a2);
}

uint64_t sub_1000AC96C(_QWORD *a1)
{
  return sub_1000ABBD0(a1);
}

uint64_t sub_1000AC980(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_1010EDA40, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25D84);
  result = sub_100006204(&qword_1010EDA48, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25D5C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000AC9DC(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1010EDA50, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DAC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000ACA18(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1010EDA58, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DC8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000ACA54(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t sub_1000ACA74(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    goto LABEL_27;
  v4 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v5 = v4[5];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  v10 = v6 == *v8 && v7 == v9;
  if (v10 || (v11 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0) & 1) != 0))
  {
    v12 = v4[6];
    v13 = *(_QWORD *)(a1 + v12);
    v14 = *(_QWORD *)(a1 + v12 + 8);
    v15 = (_QWORD *)(a2 + v12);
    v16 = v15[1];
    v17 = v13 == *v15 && v14 == v16;
    if (v17 || (v11 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, *v15, v16, 0) & 1) != 0))
    {
      v18 = v4[7];
      v19 = *(_QWORD *)(a1 + v18);
      v20 = *(_QWORD *)(a1 + v18 + 8);
      v21 = (uint64_t *)(a2 + v18);
      v22 = *v21;
      v23 = v21[1];
      sub_10001BBBC(v19, v20);
      sub_10001BBBC(v22, v23);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v19, v20);
      v25 = v24;
      sub_10001BC14(v22, v23);
      sub_10001BC14(v19, v20);
      if ((v25 & 1) == 0)
        goto LABEL_27;
      v26 = v4[8];
      v27 = *(_QWORD *)(a1 + v26);
      v28 = *(_QWORD *)(a1 + v26 + 8);
      v29 = (uint64_t *)(a2 + v26);
      v30 = *v29;
      v31 = v29[1];
      if (v28 >> 60 == 15)
      {
        if (v31 >> 60 == 15)
        {
LABEL_19:
          if ((static UUID.== infix(_:_:)(a1 + v4[9], a2 + v4[9]) & 1) != 0
            && *(_QWORD *)(a1 + v4[10]) == *(_QWORD *)(a2 + v4[10])
            && *(_QWORD *)(a1 + v4[11]) == *(_QWORD *)(a2 + v4[11])
            && *(_QWORD *)(a1 + v4[12]) == *(_QWORD *)(a2 + v4[12]))
          {
            v34 = v4[13];
            v35 = a1 + v34;
            if ((static MACAddress.== infix(_:_:)(a1 + v34, a2 + v34) & 1) != 0)
            {
              v36 = type metadata accessor for PeripheralConnectionMaterial(0);
              _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)(v35 + *(int *)(v36 + 20)), *(_QWORD *)(v35 + *(int *)(v36 + 20) + 8));
              if ((v37 & 1) != 0)
              {
                v38 = type metadata accessor for P256PrivateKey(0);
                v39 = sub_100006204(&qword_1010EDC70, (uint64_t (*)(uint64_t))&type metadata accessor for P256PrivateKey, (uint64_t)&protocol conformance descriptor for P256PrivateKey);
                dispatch thunk of RawRepresentable.rawValue.getter(&v56, v38, v39);
                dispatch thunk of RawRepresentable.rawValue.getter(&v54, v38, v39);
                v40 = v56;
                v41 = v57;
                v42 = v54;
                v43 = v55;
                _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v56, v57);
                v45 = v44;
                sub_10001BC14(v42, v43);
                sub_10001BC14(v40, v41);
                if ((v45 & 1) != 0)
                {
                  v46 = type metadata accessor for SymmetricKey256(0);
                  v47 = sub_100006204(&qword_1010EDC78, (uint64_t (*)(uint64_t))&type metadata accessor for SymmetricKey256, (uint64_t)&protocol conformance descriptor for SymmetricKey256);
                  dispatch thunk of RawRepresentable.rawValue.getter(&v56, v46, v47);
                  dispatch thunk of RawRepresentable.rawValue.getter(&v54, v46, v47);
                  v48 = v56;
                  v49 = v57;
                  v50 = v54;
                  v51 = v55;
                  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v56, v57);
                  v11 = v52;
                  sub_10001BC14(v50, v51);
                  sub_10001BC14(v48, v49);
                  return v11 & 1;
                }
              }
            }
          }
LABEL_27:
          v11 = 0;
          return v11 & 1;
        }
      }
      else if (v31 >> 60 != 15)
      {
        sub_10001BD08(v27, v28);
        sub_10001BD08(v30, v31);
        _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v27, v28);
        v33 = v32;
        sub_10001EF3C(v30, v31);
        sub_10001EF3C(v27, v28);
        if ((v33 & 1) == 0)
          goto LABEL_27;
        goto LABEL_19;
      }
      sub_10001BD08(v27, v28);
      sub_10001BD08(v30, v31);
      sub_10001EF3C(v27, v28);
      sub_10001EF3C(v30, v31);
      goto LABEL_27;
    }
  }
  return v11 & 1;
}

unint64_t sub_1000ACE0C()
{
  unint64_t result;

  result = qword_1010EDA88;
  if (!qword_1010EDA88)
  {
    result = swift_getWitnessTable(&unk_100E26230, &type metadata for LocalFindableAccessoryRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDA88);
  }
  return result;
}

unint64_t sub_1000ACE50()
{
  unint64_t result;

  result = qword_1010EDA98;
  if (!qword_1010EDA98)
  {
    result = swift_getWitnessTable(&unk_100E26208, &type metadata for LocalFindableAccessoryRecord.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1010EDA98);
  }
  return result;
}

unint64_t sub_1000ACE94()
{
  unint64_t result;

  result = qword_1010EDAC8;
  if (!qword_1010EDAC8)
  {
    result = swift_getWitnessTable(&unk_100E261E0, &type metadata for LocalFindableAccessoryRecord.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1010EDAC8);
  }
  return result;
}

unint64_t sub_1000ACED8()
{
  unint64_t result;

  result = qword_1010EDB08;
  if (!qword_1010EDB08)
  {
    result = swift_getWitnessTable(&unk_100E260E0, &type metadata for ConversionError);
    atomic_store(result, (unint64_t *)&qword_1010EDB08);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000ACF68 + 4 * byte_100E25D41[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000ACF9C + 4 * byte_100E25D3C[v4]))();
}

uint64_t sub_1000ACF9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ACFA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000ACFACLL);
  return result;
}

uint64_t sub_1000ACFB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000ACFC0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000ACFC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ACFCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversionError()
{
  return &type metadata for ConversionError;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessoryProductData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_10001BBBC(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for AccessoryProductData(uint64_t a1)
{
  return sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for AccessoryProductData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_10001BBBC(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10001BC14(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AccessoryProductData(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryProductData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryProductData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryRecord.SerialNumber()
{
  return &type metadata for LocalFindableAccessoryRecord.SerialNumber;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingCoordinator.PairingState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalFindableAccessoryRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1000AD238 + 4 * byte_100E25D4B[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1000AD26C + 4 * byte_100E25D46[v4]))();
}

uint64_t sub_1000AD26C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AD274(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AD27CLL);
  return result;
}

uint64_t sub_1000AD288(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AD290);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1000AD294(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AD29C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryRecord.CodingKeys()
{
  return &type metadata for LocalFindableAccessoryRecord.CodingKeys;
}

uint64_t *sub_1000AD2B8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (uint64_t *)((char *)a1 + v10);
    v15 = (uint64_t *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = a3[7];
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = *v19;
    v21 = v19[1];
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    sub_10001BBBC(v20, v21);
    *v18 = v20;
    v18[1] = v21;
    v22 = a3[8];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = *((_QWORD *)v24 + 1);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v27 = *(_QWORD *)v24;
      sub_10001BBBC(*(_QWORD *)v24, *((_QWORD *)v24 + 1));
      *(_QWORD *)v23 = v27;
      *((_QWORD *)v23 + 1) = v25;
    }
    v8((uint64_t *)((char *)a1 + a3[9]), (uint64_t *)((char *)a2 + a3[9]), v7);
    v28 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(uint64_t *)((char *)a1 + v28) = *(uint64_t *)((char *)a2 + v28);
    v29 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for MACAddress(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20);
    v34 = (uint64_t *)&v30[v33];
    v35 = (uint64_t *)&v31[v33];
    v36 = *v35;
    v37 = v35[1];
    sub_10001BBBC(*v35, v37);
    *v34 = v36;
    v34[1] = v37;
    v38 = a3[14];
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    v41 = type metadata accessor for P256PrivateKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
    v42 = a3[15];
    v43 = (char *)a1 + v42;
    v44 = (char *)a2 + v42;
    v45 = type metadata accessor for SymmetricKey256(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
  }
  return a1;
}

uint64_t sub_1000AD4B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  v6 = (uint64_t *)(a1 + a2[8]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    sub_10001BC14(*v6, v7);
  v5(a1 + a2[9], v4);
  v8 = a1 + a2[13];
  v9 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = type metadata accessor for PeripheralConnectionMaterial(0);
  sub_10001BC14(*(_QWORD *)(v8 + *(int *)(v10 + 20)), *(_QWORD *)(v8 + *(int *)(v10 + 20) + 8));
  v11 = a1 + a2[14];
  v12 = type metadata accessor for P256PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[15];
  v14 = type metadata accessor for SymmetricKey256(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t sub_1000AD5E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[7];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  sub_10001BBBC(v19, v20);
  *v17 = v19;
  v17[1] = v20;
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = (uint64_t *)(a2 + v21);
  v24 = v23[1];
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
  }
  else
  {
    v25 = *v23;
    sub_10001BBBC(*v23, v23[1]);
    *(_QWORD *)v22 = v25;
    *(_QWORD *)(v22 + 8) = v24;
  }
  v7(a1 + a3[9], a2 + a3[9], v6);
  v26 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v26) = *(_QWORD *)(a2 + v26);
  v27 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20);
  v32 = (uint64_t *)(v28 + v31);
  v33 = (uint64_t *)(v29 + v31);
  v34 = *v33;
  v35 = v33[1];
  sub_10001BBBC(*v33, v35);
  *v32 = v34;
  v32[1] = v35;
  v36 = a3[14];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = type metadata accessor for P256PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  v40 = a3[15];
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = type metadata accessor for SymmetricKey256(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  return a1;
}

uint64_t sub_1000AD7B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v16 = a3[7];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = *v18;
  v20 = v18[1];
  sub_10001BBBC(*v18, v20);
  v21 = *v17;
  v22 = v17[1];
  *v17 = v19;
  v17[1] = v20;
  sub_10001BC14(v21, v22);
  v23 = a3[8];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  if (*(_QWORD *)(a1 + v23 + 8) >> 60 != 15)
  {
    if (v26 >> 60 != 15)
    {
      v28 = *v25;
      sub_10001BBBC(v28, v26);
      v29 = *v24;
      v30 = v24[1];
      *v24 = v28;
      v24[1] = v26;
      sub_10001BC14(v29, v30);
      goto LABEL_8;
    }
    sub_1000ADA04((uint64_t)v24);
    goto LABEL_6;
  }
  if (v26 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_8;
  }
  v27 = *v25;
  sub_10001BBBC(v27, v26);
  *v24 = v27;
  v24[1] = v26;
LABEL_8:
  v7(a1 + a3[9], a2 + a3[9], v6);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v31 = a3[13];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20);
  v36 = (uint64_t *)(v32 + v35);
  v37 = (uint64_t *)(v33 + v35);
  v38 = *v37;
  v39 = v37[1];
  sub_10001BBBC(*v37, v39);
  v40 = *v36;
  v41 = v36[1];
  *v36 = v38;
  v36[1] = v39;
  sub_10001BC14(v40, v41);
  v42 = a3[14];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = type metadata accessor for P256PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  v46 = a3[15];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = type metadata accessor for SymmetricKey256(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 24))(v47, v48, v49);
  return a1;
}

uint64_t sub_1000ADA04(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000ADA30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v10 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v11 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = type metadata accessor for PeripheralConnectionMaterial(0);
  *(_OWORD *)(v12 + *(int *)(v15 + 20)) = *(_OWORD *)(v13 + *(int *)(v15 + 20));
  v16 = a3[14];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for P256PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[15];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for SymmetricKey256(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

uint64_t sub_1000ADB7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = *(_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  sub_10001BC14(v19, v20);
  v21 = a3[8];
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = *(_QWORD *)(a1 + v21 + 8);
  if (v24 >> 60 != 15)
  {
    v25 = v23[1];
    if (v25 >> 60 != 15)
    {
      v26 = *v22;
      *v22 = *v23;
      v22[1] = v25;
      sub_10001BC14(v26, v24);
      goto LABEL_6;
    }
    sub_1000ADA04((uint64_t)v22);
  }
  *(_OWORD *)v22 = *(_OWORD *)v23;
LABEL_6:
  v7(a1 + a3[9], a2 + a3[9], v6);
  v27 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  v28 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  v32 = *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20);
  v33 = *(_QWORD *)(v29 + v32);
  v34 = *(_QWORD *)(v29 + v32 + 8);
  *(_OWORD *)(v29 + v32) = *(_OWORD *)(v30 + v32);
  sub_10001BC14(v33, v34);
  v35 = a3[14];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = type metadata accessor for P256PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = a3[15];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = type metadata accessor for SymmetricKey256(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t sub_1000ADD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000ADD60);
}

uint64_t sub_1000ADD60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for PeripheralConnectionMaterial(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[13];
    }
    else
    {
      v16 = type metadata accessor for P256PrivateKey(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[14];
      }
      else
      {
        v8 = type metadata accessor for SymmetricKey256(0);
        v14 = *(_QWORD *)(v8 - 8);
        v15 = a3[15];
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000ADE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000ADE60);
}

uint64_t sub_1000ADE60(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for PeripheralConnectionMaterial(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[13];
    }
    else
    {
      v16 = type metadata accessor for P256PrivateKey(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[14];
      }
      else
      {
        v10 = type metadata accessor for SymmetricKey256(0);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[15];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000ADF50(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[12];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = &unk_100E25E60;
    v7[2] = &unk_100E25E60;
    v7[3] = &unk_100E25E78;
    v7[4] = &unk_100E25E90;
    v7[5] = v7[0];
    v7[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v7[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v7[8] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for PeripheralConnectionMaterial(319);
    if (v4 <= 0x3F)
    {
      v7[9] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for P256PrivateKey(319);
      if (v5 <= 0x3F)
      {
        v7[10] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for SymmetricKey256(319);
        if (v6 <= 0x3F)
        {
          v7[11] = *(_QWORD *)(result - 8) + 64;
          swift_initStructMetadata(a1, 256, 12, v7, a1 + 16);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000AE040()
{
  return sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_1000AE070()
{
  unint64_t result;

  result = qword_1010EDBD0;
  if (!qword_1010EDBD0)
  {
    result = swift_getWitnessTable(&unk_100E25FC0, &type metadata for LocalFindableAccessoryRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDBD0);
  }
  return result;
}

unint64_t sub_1000AE0B8()
{
  unint64_t result;

  result = qword_1010EDBD8;
  if (!qword_1010EDBD8)
  {
    result = swift_getWitnessTable(&unk_100E25FE8, &type metadata for LocalFindableAccessoryRecord.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1010EDBD8);
  }
  return result;
}

unint64_t sub_1000AE100()
{
  unint64_t result;

  result = qword_1010EDBE0;
  if (!qword_1010EDBE0)
  {
    result = swift_getWitnessTable(&unk_100E260B8, &type metadata for ConversionError);
    atomic_store(result, (unint64_t *)&qword_1010EDBE0);
  }
  return result;
}

uint64_t sub_1000AE144()
{
  return sub_100006204(&qword_1010EDBE8, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25F08);
}

uint64_t sub_1000AE170()
{
  return sub_100006204(qword_1010EDBF0, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25EA8);
}

unint64_t sub_1000AE1A0()
{
  unint64_t result;

  result = qword_1010EDC18;
  if (!qword_1010EDC18)
  {
    result = swift_getWitnessTable(&unk_100E25F30, &type metadata for LocalFindableAccessoryRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDC18);
  }
  return result;
}

unint64_t sub_1000AE1E8()
{
  unint64_t result;

  result = qword_1010EDC20;
  if (!qword_1010EDC20)
  {
    result = swift_getWitnessTable(&unk_100E25F58, &type metadata for LocalFindableAccessoryRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDC20);
  }
  return result;
}

_QWORD *sub_1000AE22C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_10001A9A8(&qword_1010EDC28);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_1000AE850();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys, &type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_100036994();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

uint64_t sub_1000AE350(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372)
  {
    v8 = 0xED00006E6F697372;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65566D6574737973, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000015)
  {
    v9 = 0x8000000100EC7640;
    if (a2 == 0x8000000100EC7640)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC7640, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000015)
  {
    v10 = 0x8000000100EC7660;
    if (a2 == 0x8000000100EC7660)
      goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC7660, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x64496E6D66 && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496E6D66, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v13 = 0xE900000000000064;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x45676E6972696170 && a2 == 0xEC00000068636F70)
  {
    v14 = 0xEC00000068636F70;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x45676E6972696170, 0xEC00000068636F70, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100EC7680)
  {
    v15 = 0x8000000100EC7680;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC7680, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_60;
  }
  if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965)
  {
    v16 = 0xEA00000000007965;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270, 0xEA00000000007965, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_66;
  }
  if (a1 == 0x697274656D6D7973 && a2 == 0xEC00000079654B63)
  {
    swift_bridgeObjectRelease(0xEC00000079654B63);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x697274656D6D7973, 0xEC00000079654B63, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

unint64_t sub_1000AE850()
{
  unint64_t result;

  result = qword_1010EDC30;
  if (!qword_1010EDC30)
  {
    result = swift_getWitnessTable(&unk_100E26338, &type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDC30);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LocalFindableAccessoryRecord.SerialNumber.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000AE8D4 + 4 * byte_100E25D50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000AE8F4 + 4 * byte_100E25D55[v4]))();
}

_BYTE *sub_1000AE8D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000AE8F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000AE8FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000AE904(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000AE90C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000AE914(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryRecord.SerialNumber.CodingKeys()
{
  return &type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys;
}

unint64_t sub_1000AE934()
{
  unint64_t result;

  result = qword_1010EDC80;
  if (!qword_1010EDC80)
  {
    result = swift_getWitnessTable(&unk_100E26310, &type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDC80);
  }
  return result;
}

unint64_t sub_1000AE97C()
{
  unint64_t result;

  result = qword_1010EDC88;
  if (!qword_1010EDC88)
  {
    result = swift_getWitnessTable(&unk_100E26280, &type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDC88);
  }
  return result;
}

unint64_t sub_1000AE9C4()
{
  unint64_t result;

  result = qword_1010EDC90;
  if (!qword_1010EDC90)
  {
    result = swift_getWitnessTable(&unk_100E262A8, &type metadata for LocalFindableAccessoryRecord.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EDC90);
  }
  return result;
}

uint64_t sub_1000AEA0C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6730);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6730);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x5379726574746162, 0xED00007375746174);
}

uint64_t sub_1000AEA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AF9E0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000AEAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AF9E0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000AEB3C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000AF814(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AEB64()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000AEB90 + 4 * byte_100E26388[*v0]))(0x656C707061, 0xE500000000000000);
}

uint64_t sub_1000AEB90()
{
  return 0x6E6169727564;
}

uint64_t sub_1000AEBA4()
{
  return 0x6579656B776168;
}

uint64_t sub_1000AEBBC()
{
  return 1701602664;
}

uint64_t sub_1000AEBCC(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  void *v6;
  uint64_t v8;

  v1 = HIWORD(a1) & 1;
  v2 = HIBYTE(a1) & 1;
  Bool.intValue.getter((a1 >> 8) & 1);
  v8 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  Bool.intValue.getter(v1);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  Bool.intValue.getter(v2);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  return v8;
}

uint64_t sub_1000AEC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AFB60();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000AECF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AFB60();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000AED44@<X0>(unsigned __int8 *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = sub_1000AF25C(*a1);
  *a2 = result & 0x10101FF;
  return result;
}

uint64_t sub_1000AED78()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  int v3;

  if (v0[3])
    v1 = 0x1000000;
  else
    v1 = 0;
  if (v0[2])
    v2 = 0x10000;
  else
    v2 = 0;
  if (v0[1])
    v3 = 256;
  else
    v3 = 0;
  return sub_1000AEBCC(v3 | *v0 | v2 | v1);
}

uint64_t sub_1000AEDBC(unsigned __int8 a1)
{
  return a1 >> 6;
}

uint64_t sub_1000AEDC4(unsigned int a1)
{
  Swift::String v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  int v27;
  Swift::String v28;
  Swift::String v29;

  _StringGuts.grow(_:)(53);
  v2._countAndFlagsBits = 0x203A657079747BLL;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  v3 = (a1 >> 4) & 3;
  v4 = 0x6579656B776168;
  v5 = 0xE400000000000000;
  v6 = 1701602664;
  if (v3 != 3)
  {
    v6 = 0x656C707061;
    v5 = 0xE500000000000000;
  }
  if (v3 == 2)
    v5 = 0xE700000000000000;
  else
    v4 = v6;
  if (v3 == 1)
    v7 = 0x6E6169727564;
  else
    v7 = v4;
  if (v3 == 1)
    v8 = 0xE600000000000000;
  else
    v8 = v5;
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x726574746162202CLL;
  v10._object = (void *)0xEB00000000203A79;
  String.append(_:)(v10);
  v11 = a1 >> 6;
  v12 = 0xE300000000000000;
  v13 = 7827308;
  v14 = 0xE800000000000000;
  v15 = 0x6C61636974697263;
  if (v11 == 1)
  {
    v15 = 0x6D756964656DLL;
    v14 = 0xE600000000000000;
  }
  if (v11 != 2)
  {
    v13 = v15;
    v12 = v14;
  }
  if (a1 >> 6)
    v16 = v13;
  else
    v16 = 1751607656;
  if (a1 >> 6)
    v17 = v12;
  else
    v17 = 0xE400000000000000;
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x61746E69616D202CLL;
  v19._object = (void *)0xEE00203A64656E69;
  String.append(_:)(v19);
  v20 = sub_100059570();
  v21 = FixedWidthInteger.BOOLValue.getter(&type metadata for UInt8, v20);
  v22 = (v21 & 1) == 0;
  if ((v21 & 1) != 0)
    v23 = 1702195828;
  else
    v23 = 0x65736C6166;
  if (v22)
    v24 = 0xE500000000000000;
  else
    v24 = 0xE400000000000000;
  v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x617069746C756D20;
  v26._object = (void *)0xEC000000203A7472;
  String.append(_:)(v26);
  v27 = sub_1000AF25C(a1 & 0xB);
  v28._countAndFlagsBits = sub_1000AEBCC(v27 & 0x10101FF);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 125;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  return 0;
}

unsigned __int8 *sub_1000AF02C@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000AF03C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AFA24();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000AF098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AFA24();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000AF0E4()
{
  unsigned __int8 *v0;

  return sub_1000AEDC4(*v0);
}

uint64_t SPBeaconGroupStatus.description.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x6574617261706573;
  switch(a1)
  {
    case 1:
    case 4:
      return result;
    case 2:
      result = 0x646570756F7267;
      break;
    case 3:
      result = 0x49646570756F7267;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_1000AF190()
{
  _QWORD *v0;
  uint64_t result;

  result = 0x6574617261706573;
  switch(*v0)
  {
    case 1:
    case 4:
      return result;
    case 2:
      result = 0x646570756F7267;
      break;
    case 3:
      result = 0x49646570756F7267;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_1000AF234@<X0>(uint64_t (*a1)(void)@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1000AF25C(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(_QWORD);
  unint64_t v14;
  int v15;
  void (*v16)(_BYTE *, uint64_t);
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BYTE v22[4];
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  void (*v28)(_BYTE *, unint64_t, uint64_t);
  void (*v29)(_BYTE *, _QWORD, uint64_t);
  uint64_t v30;

  v2 = type metadata accessor for Bit(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v22[-v7];
  BYTE6(v30) = a1;
  v9 = sub_100059570();
  result = FixedWidthInteger.bits()(&type metadata for UInt8, v9);
  if (!*(_QWORD *)(result + 16))
  {
    __break(1u);
    goto LABEL_6;
  }
  v11 = result;
  v12 = result + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v28 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v3 + 16);
  v28(v8, v12, v2);
  v13 = *(void (**)(_QWORD))(v3 + 104);
  v27 = enum case for Bit.one(_:);
  v29 = (void (*)(_BYTE *, _QWORD, uint64_t))v13;
  v13(v6);
  v14 = sub_1000AF7CC();
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 5), v2, v14);
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 4), v2, v14);
  v15 = BYTE5(v30);
  v26 = BYTE4(v30);
  v16 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v16(v6, v2);
  result = ((uint64_t (*)(_BYTE *, uint64_t))v16)(v8, v2);
  if (*(_QWORD *)(v11 + 16) < 2uLL)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v24 = v15;
  v25 = a1;
  v17 = *(_QWORD *)(v3 + 72);
  v28(v8, v12 + v17, v2);
  v29(v6, v27, v2);
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 3), v2, v14);
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 2), v2, v14);
  v18 = BYTE3(v30);
  v19 = BYTE2(v30);
  v16(v6, v2);
  result = ((uint64_t (*)(_BYTE *, uint64_t))v16)(v8, v2);
  if (*(_QWORD *)(v11 + 16) >= 4uLL)
  {
    v23 = v18 == v19;
    v20 = v24 == v26;
    v28(v8, v12 + 3 * v17, v2);
    swift_bridgeObjectRelease();
    v29(v6, v27, v2);
    dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v30 + 1), v2, v14);
    dispatch thunk of RawRepresentable.rawValue.getter(&v30, v2, v14);
    v21 = BYTE1(v30) == v30;
    v16(v6, v2);
    v16(v8, v2);
    return v25 & 0xB | (v20 << 8) | (v23 << 16) | (v21 << 24);
  }
LABEL_7:
  __break(1u);
  return result;
}

void *sub_1000AF518(unsigned __int8 a1, char a2, char a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *result;
  uint64_t v13;
  unsigned __int8 v14;
  void *v15;

  v15 = &_swiftEmptySetSingleton;
  if (a1 > 3u)
  {
    if (qword_1010E9930 != -1)
      swift_once(&qword_1010E9930, sub_1000AEA0C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6730);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(5, -1);
      *(_DWORD *)v11 = 16777472;
      v14 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v11 + 4, v11 + 5);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "illegal selfPart: %hhu!", v11, 5u);
      swift_slowDealloc(v11, -1, -1);
    }

    return &_swiftEmptySetSingleton;
  }
  else
  {
    switch(a1)
    {
      case 0u:
        if ((a2 & 1) != 0)
        {
          sub_100A0A208(&v14, 1);
          if ((a3 & 1) == 0)
          {
LABEL_5:
            if ((a4 & 1) == 0)
              goto LABEL_37;
LABEL_29:
            v13 = 3;
            goto LABEL_36;
          }
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_5;
        }
        sub_100A0A208(&v14, 2);
        if ((a4 & 1) == 0)
          goto LABEL_37;
        goto LABEL_29;
      case 1u:
        if ((a2 & 1) != 0)
        {
          sub_100A0A208(&v14, 2);
          if ((a3 & 1) == 0)
          {
LABEL_22:
            if ((a4 & 1) == 0)
              goto LABEL_37;
            goto LABEL_35;
          }
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_22;
        }
        sub_100A0A208(&v14, 3);
        if ((a4 & 1) == 0)
          goto LABEL_37;
LABEL_35:
        v13 = 0;
        goto LABEL_36;
      case 2u:
        if ((a2 & 1) != 0)
        {
          sub_100A0A208(&v14, 3);
          if ((a3 & 1) == 0)
          {
LABEL_14:
            if ((a4 & 1) == 0)
              goto LABEL_37;
            goto LABEL_26;
          }
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_14;
        }
        sub_100A0A208(&v14, 0);
        if ((a4 & 1) == 0)
          goto LABEL_37;
LABEL_26:
        v13 = 1;
        goto LABEL_36;
      case 3u:
        if ((a2 & 1) != 0)
        {
          sub_100A0A208(&v14, 0);
          if ((a3 & 1) == 0)
          {
LABEL_18:
            if ((a4 & 1) == 0)
              goto LABEL_37;
            goto LABEL_32;
          }
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_18;
        }
        sub_100A0A208(&v14, 1);
        if ((a4 & 1) == 0)
          goto LABEL_37;
LABEL_32:
        v13 = 2;
LABEL_36:
        sub_100A0A208(&v14, v13);
LABEL_37:
        result = v15;
        break;
      default:
        result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "searchpartyd/Type18Status.swift", 31, 2, 251, 0);
        __break(1u);
        return result;
    }
  }
  return result;
}

unint64_t sub_1000AF7CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EDCA0;
  if (!qword_1010EDCA0)
  {
    v1 = type metadata accessor for Bit(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Bit, v1);
    atomic_store(result, (unint64_t *)&qword_1010EDCA0);
  }
  return result;
}

uint64_t sub_1000AF814(uint64_t result)
{
  if ((result & 0xFC) != 0)
    return 4;
  else
    return result;
}

uint64_t sub_1000AF828(char a1, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 2;
  if ((a1 & 1) != 0)
    v4 = 3;
  v5 = 4;
  if ((a1 & 1) == 0)
    v5 = 1;
  if ((a3 & 1) == 0)
    v4 = v5;
  v6 = 2;
  if ((a2 & 1) != 0)
    v6 = 3;
  v7 = 4;
  if ((a2 & 1) == 0)
    v7 = 1;
  if ((a1 & 1) == 0)
    v6 = v7;
  if (a4)
    v6 = 0;
  if (a4 == 1)
    return v4;
  else
    return v6;
}

uint64_t storeEnumTagSinglePayload for Type18Status.DeviceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000AF8C0 + 4 * byte_100E2639F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000AF8F4 + 4 * byte_100E2639A[v4]))();
}

uint64_t sub_1000AF8F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AF8FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000AF904);
  return result;
}

uint64_t sub_1000AF910(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000AF918);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000AF91C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AF924(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Type18Status.DeviceType()
{
  return &type metadata for Type18Status.DeviceType;
}

ValueMetadata *type metadata accessor for Type18Status()
{
  return &type metadata for Type18Status;
}

unint64_t sub_1000AF954()
{
  unint64_t result;

  result = qword_1010EDCA8;
  if (!qword_1010EDCA8)
  {
    result = swift_getWitnessTable(&unk_100E263F8, &type metadata for Type18Status);
    atomic_store(result, (unint64_t *)&qword_1010EDCA8);
  }
  return result;
}

unint64_t sub_1000AF99C()
{
  unint64_t result;

  result = qword_1010EDCB0;
  if (!qword_1010EDCB0)
  {
    result = swift_getWitnessTable(&unk_100E26560, &type metadata for Type18Status.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1010EDCB0);
  }
  return result;
}

unint64_t sub_1000AF9E0()
{
  unint64_t result;

  result = qword_1010EDCB8;
  if (!qword_1010EDCB8)
  {
    result = swift_getWitnessTable(&unk_100E264E8, &type metadata for Type18Status.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1010EDCB8);
  }
  return result;
}

unint64_t sub_1000AFA24()
{
  unint64_t result;

  result = qword_1010EDCC0;
  if (!qword_1010EDCC0)
  {
    result = swift_getWitnessTable(&unk_100E26488, &type metadata for Type18Status);
    atomic_store(result, (unint64_t *)&qword_1010EDCC0);
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for Type18Status.Multipart(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Type18Status.Multipart(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Type18Status.Multipart(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Type18Status.Multipart()
{
  return &type metadata for Type18Status.Multipart;
}

unint64_t sub_1000AFB1C()
{
  unint64_t result;

  result = qword_1010EDCC8;
  if (!qword_1010EDCC8)
  {
    result = swift_getWitnessTable(&unk_100E26628, &type metadata for Type18Status.Multipart);
    atomic_store(result, (unint64_t *)&qword_1010EDCC8);
  }
  return result;
}

unint64_t sub_1000AFB60()
{
  unint64_t result;

  result = qword_1010EDCD0;
  if (!qword_1010EDCD0)
  {
    result = swift_getWitnessTable(&unk_100E266B8, &type metadata for Type18Status.Multipart);
    atomic_store(result, (unint64_t *)&qword_1010EDCD0);
  }
  return result;
}

uint64_t sub_1000AFBB0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6748);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6748);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x68536E6F63616562, 0xED0000676E697261);
}

uint64_t sub_1000AFC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[9] = a8;
  v8[10] = v12;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v9 = type metadata accessor for UUID(0);
  v8[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[12] = v10;
  v8[13] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000AFC9C, 0, 0);
}

uint64_t sub_1000AFC9C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  os_log_type_t type;
  uint64_t v31;
  NSObject *log;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 == 2)
  {
    sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
    v4 = (_QWORD *)swift_task_alloc(dword_1010EE6D4);
    *(_QWORD *)(v0 + 128) = v4;
    *v4 = v0;
    v4[1] = sub_1000B04D8;
    return sub_1000C15E0(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  }
  else if (v1 == 1)
  {
    sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
    v2 = (_QWORD *)swift_task_alloc(dword_1010EE264);
    *(_QWORD *)(v0 + 112) = v2;
    *v2 = v0;
    v2[1] = sub_1000B00E8;
    return sub_1000C0DE8(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  }
  else
  {
    v5 = sub_10006808C();
    v6 = swift_allocError(&type metadata for BeaconServiceError, v5, 0, 0);
    *v7 = 2;
    swift_willThrow(v6);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v9 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 56);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B6748);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
    swift_errorRetain(v6);
    v13 = swift_errorRetain(v6);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    v16 = os_log_type_enabled(v14, v15);
    v18 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 88);
    if (v16)
    {
      log = v14;
      type = v15;
      v20 = swift_slowAlloc(32, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      v31 = swift_slowAlloc(32, -1);
      v33 = v31;
      *(_DWORD *)v20 = 141558531;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2081;
      v21 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v19, v21);
      *(_QWORD *)(v0 + 24) = sub_100016940(v22, v23, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      *(_WORD *)(v20 + 22) = 2114;
      swift_errorRetain(v6);
      v24 = _swift_stdlib_bridgeErrorToNSError(v6);
      *(_QWORD *)(v0 + 32) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v20 + 24, v20 + 32);
      *v29 = v24;
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to share beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v20, 0x20u);
      v25 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v29, 1, v25);
      swift_slowDealloc(v29, -1, -1);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v18 + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
    v26 = *(void (**)(_QWORD, uint64_t))(v0 + 72);
    v27 = *(_QWORD *)(v0 + 64);
    swift_errorRetain(v6);
    v28 = sub_1000D793C(_swiftEmptyDictionarySingleton, v27, v6);
    swift_errorRelease(v6);
    v26(0, v28);
    swift_bridgeObjectRelease();
    swift_errorRelease(v6);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B00E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B01AC;
  else
    v3 = sub_1000B014C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B014C()
{
  uint64_t v0;
  void (*v1)(uint64_t, unint64_t);
  unint64_t v2;

  v1 = *(void (**)(uint64_t, unint64_t))(v0 + 72);
  v2 = sub_1006B933C((uint64_t)_swiftEmptyArrayStorage);
  v1(1, v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B01AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  os_log_type_t type;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 120);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 88);
  if (v10)
  {
    type = v9;
    v14 = swift_slowAlloc(32, -1);
    v25 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 24) = sub_100016940(v16, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(_WORD *)(v14 + 22) = 2114;
    swift_errorRetain(v1);
    v18 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 32) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 24, v14 + 32);
    *v25 = v18;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Failed to share beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v14, 0x20u);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v25, 1, v19);
    swift_slowDealloc(v25, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v20 = *(void (**)(_QWORD, uint64_t))(v0 + 72);
  v21 = *(_QWORD *)(v0 + 64);
  swift_errorRetain(v1);
  v22 = sub_1000D793C(_swiftEmptyDictionarySingleton, v21, v1);
  swift_errorRelease(v1);
  v20(0, v22);
  swift_bridgeObjectRelease();
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B04D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B053C;
  else
    v3 = sub_1000DB62C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B053C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  os_log_type_t type;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 136);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 88);
  if (v10)
  {
    type = v9;
    v14 = swift_slowAlloc(32, -1);
    v25 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 24) = sub_100016940(v16, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(_WORD *)(v14 + 22) = 2114;
    swift_errorRetain(v1);
    v18 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 32) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 24, v14 + 32);
    *v25 = v18;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Failed to share beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v14, 0x20u);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v25, 1, v19);
    swift_slowDealloc(v25, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v20 = *(void (**)(_QWORD, uint64_t))(v0 + 72);
  v21 = *(_QWORD *)(v0 + 64);
  swift_errorRetain(v1);
  v22 = sub_1000D793C(_swiftEmptyDictionarySingleton, v21, v1);
  swift_errorRelease(v1);
  v20(0, v22);
  swift_bridgeObjectRelease();
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B0AD4(char a1, uint64_t a2, uint64_t a3)
{
  Class isa;

  sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
  sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  sub_1000170AC(&qword_1010EE6B0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, _QWORD, Class))(a3 + 16))(a3, a1 & 1, isa);

}

uint64_t sub_1000B0B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B0BF4, 0, 0);
}

uint64_t sub_1000B0BF4()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE284);
  v0[12] = v1;
  *v1 = v0;
  v1[1] = sub_1000B0C5C;
  return sub_1000C56D8(v0[6]);
}

uint64_t sub_1000B0C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B0CC0;
  else
    v3 = sub_1000DB6DC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B0CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  uint64_t *v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    log = v8;
    v15 = swift_slowAlloc(32, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 24) = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 32) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    *v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "Failed to remove share: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v24, 1, v20);
    swift_slowDealloc(v24, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v21);
  v22(0, v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B11B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[14] = v9;
  v7[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B121C, 0, 0);
}

uint64_t sub_1000B121C()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[9] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE694);
  v0[16] = v1;
  *v1 = v0;
  v1[1] = sub_1000B1284;
  return sub_1000C5E48(v0[10]);
}

uint64_t sub_1000B1284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B1328;
  else
    v3 = sub_1000B12E8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B12E8()
{
  uint64_t v0;

  (*(void (**)(uint64_t, _QWORD))(v0 + 88))(1, 0);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B1328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  os_log_type_t type;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 104);
  if (v10)
  {
    type = v9;
    v15 = swift_slowAlloc(32, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 48) = sub_100016940(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 22) = 2082;
    swift_getErrorValue(v11, v0 + 56, v0 + 16);
    v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 64) = sub_100016940(v19, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Failed to revoke share: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  v21 = *(_QWORD *)(v0 + 136);
  v22 = *(void (**)(_QWORD, uint64_t))(v0 + 88);
  swift_errorRetain(v21);
  v22(0, v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B17FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B1860, 0, 0);
}

uint64_t sub_1000B1860()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v2 = (_QWORD *)swift_task_alloc(dword_1010EE674);
  v0[12] = v2;
  *v2 = v0;
  v2[1] = sub_1000B18DC;
  v2[7] = v0[6];
  v2[8] = v1;
  return swift_task_switch(sub_1000C8E60, v1, 0);
}

uint64_t sub_1000B18DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B1940;
  else
    v3 = sub_1000DB6DC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B1940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  uint64_t *v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    log = v8;
    v15 = swift_slowAlloc(32, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 24) = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 32) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    *v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "Failed to accept share: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v24, 1, v20);
    swift_slowDealloc(v24, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v21);
  v22(0, v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B1E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B1E9C, 0, 0);
}

uint64_t sub_1000B1E9C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, char);

  v0[12] = *sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v3 = (uint64_t (*)(uint64_t, char))((char *)&dword_1010F4018 + dword_1010F4018);
  v1 = (_QWORD *)swift_task_alloc(unk_1010F401C);
  v0[13] = v1;
  *v1 = v0;
  v1[1] = sub_1000B1F20;
  return v3(v0[6], 0);
}

uint64_t sub_1000B1F20()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[13];
  v3 = *v1;
  v3[14] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000B20F4, 0, 0);
  v5 = (uint64_t **)swift_task_alloc(dword_1010EDEE4);
  v3[15] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_1000B1FB4;
  return sub_1000BE960(v3[6]);
}

uint64_t sub_1000B1FB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_task_switch(sub_1000B200C, v1, 0);
}

uint64_t sub_1000B200C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  type metadata accessor for Transaction(0);
  v2 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v2 + 16, v1);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE658, v2);
  swift_release_n(v2, 2);
  return swift_task_switch(sub_1000B20B4, 0, 0);
}

uint64_t sub_1000B20B4()
{
  uint64_t v0;

  (*(void (**)(uint64_t, _QWORD))(v0 + 56))(1, 0);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B20F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  uint64_t *v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    log = v8;
    v15 = swift_slowAlloc(32, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 24) = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 32) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    *v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "Failed to decline share: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v24, 1, v20);
    swift_slowDealloc(v24, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = *(_QWORD *)(v0 + 112);
  v22 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v21);
  v22(0, v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B25EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B2650, 0, 0);
}

uint64_t sub_1000B2650()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE634);
  v0[12] = v1;
  *v1 = v0;
  v1[1] = sub_1000B26B8;
  return sub_1000C9E8C(v0[6]);
}

uint64_t sub_1000B26B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B271C;
  else
    v3 = sub_1000B20B4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B271C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  uint64_t *v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    log = v8;
    v15 = swift_slowAlloc(32, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 24) = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 32) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    *v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "Failed to Stop share with beaconIdentifier: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v24, 1, v20);
    swift_slowDealloc(v24, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v21);
  v22(0, v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B2C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return swift_task_switch(sub_1000B2C30, 0, 0);
}

uint64_t sub_1000B2C30()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE60C);
  v0[9] = v1;
  *v1 = v0;
  v1[1] = sub_1000B2C98;
  return sub_1000CB2D4(v0[6]);
}

uint64_t sub_1000B2C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B2D34;
  else
    v3 = sub_1000B2CFC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B2CFC()
{
  uint64_t v0;

  (*(void (**)(uint64_t, _QWORD))(v0 + 56))(1, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B2D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t);
  uint64_t v20;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 48);
    v9 = swift_slowAlloc(22, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v11 = swift_slowAlloc(32, -1);
    v20 = v11;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 16) = v8;
    type metadata accessor for SPShareType(0);
    v13 = String.init<A>(describing:)(v0 + 16, v12);
    *(_QWORD *)(v0 + 24) = sub_100016940(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2114;
    swift_errorRetain(v7);
    v15 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 32) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    *v10 = v15;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to force break all shares of types: %{public}s, error: %{public}@.", (uint8_t *)v9, 0x16u);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v10, 1, v16);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v7);
  }

  v17 = *(_QWORD *)(v0 + 80);
  v18 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v17);
  v18(0, v17);
  swift_errorRelease(v17);
  swift_errorRelease(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B30CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return swift_task_switch(sub_1000B30E8, 0, 0);
}

uint64_t sub_1000B30E8()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE5E4);
  v0[9] = v1;
  *v1 = v0;
  v1[1] = sub_1000B3150;
  return sub_1000CD20C(v0[6]);
}

uint64_t sub_1000B3150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B31B4;
  else
    v3 = sub_1000B2CFC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B31B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, uint64_t);
  os_log_type_t type;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(void **)(v0 + 48);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = v2;
  swift_errorRetain(v1);
  v5 = v4;
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 80);
  v11 = *(void **)(v0 + 48);
  if (v9)
  {
    type = v8;
    v12 = swift_slowAlloc(32, -1);
    v23 = (uint64_t *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v25 = v24;
    *(_DWORD *)v12 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v13 = objc_msgSend(v11, "destination");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    *(_QWORD *)(v0 + 24) = sub_100016940(v14, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain(v10);
    v17 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 32) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v12 + 24, v12 + 32);
    *v23 = v17;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Failed to force break all shares with user: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v12, 0x20u);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v23, 1, v18);
    swift_slowDealloc(v23, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {

    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  v19 = *(_QWORD *)(v0 + 80);
  v20 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v19);
  v20(0, v19);
  swift_errorRelease(v19);
  swift_errorRelease(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B35CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B3630, 0, 0);
}

uint64_t sub_1000B3630()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE5C4);
  v0[12] = v1;
  *v1 = v0;
  v1[1] = sub_1000B3698;
  return sub_1000CFBAC(v0[6]);
}

uint64_t sub_1000B3698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B36FC;
  else
    v3 = sub_1000DB6DC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B36FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  uint64_t *v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    log = v8;
    v15 = swift_slowAlloc(32, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 24) = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 32) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    *v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "Failed to force decline shareIdentifier: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v24, 1, v20);
    swift_slowDealloc(v24, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v21);
  v22(0, v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B3BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  return swift_task_switch(sub_1000B3C10, 0, 0);
}

uint64_t sub_1000B3C10()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  return swift_task_switch(sub_1000B3C5C, *v1, 0);
}

uint64_t sub_1000B3C5C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t (__cdecl *v6)();

  v1 = v0[5];
  if (v1 == 1)
  {
    v6 = (uint64_t (__cdecl *)())((char *)&dword_1010F4198 + dword_1010F4198);
    v2 = (_QWORD *)swift_task_alloc(unk_1010F419C);
    v0[9] = v2;
    v3 = sub_1000B3D80;
    goto LABEL_5;
  }
  if (!v1)
  {
    v6 = (uint64_t (__cdecl *)())((char *)&dword_1010F4190 + dword_1010F4190);
    v2 = (_QWORD *)swift_task_alloc(unk_1010F4194);
    v0[8] = v2;
    v3 = sub_1000B3D1C;
LABEL_5:
    *v2 = v0;
    v2[1] = v3;
    return v6();
  }
  type metadata accessor for SPRecordsTypeToDelete(0);
  v0[2] = v1;
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v5, v0 + 2, v5, &type metadata for UInt);
}

uint64_t sub_1000B3D1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 64));
  if (v0)
  {
    *(_QWORD *)(v2 + 80) = v0;
    v3 = sub_1000B3E1C;
  }
  else
  {
    v3 = sub_1000B3DE4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B3D80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 72));
  if (v0)
  {
    *(_QWORD *)(v2 + 80) = v0;
    v3 = sub_1000B3E1C;
  }
  else
  {
    v3 = sub_1000B3DE4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B3DE4()
{
  uint64_t v0;

  (*(void (**)(uint64_t, _QWORD))(v0 + 48))(1, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B3E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, uint64_t);

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to cleanupAll(recordsType:completion:), error: %{public}@.", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v7);
  }

  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(void (**)(_QWORD, uint64_t))(v0 + 48);
  swift_errorRetain(v12);
  v13(0, v12);
  swift_errorRelease(v12);
  swift_errorRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B4120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B4184, 0, 0);
}

uint64_t sub_1000B4184()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE58C);
  v0[12] = v1;
  *v1 = v0;
  v1[1] = sub_1000B41EC;
  return sub_1000CFF5C(v0[6]);
}

uint64_t sub_1000B41EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B4250;
  else
    v3 = sub_1000DB6DC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B4250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  uint64_t *v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    log = v8;
    v15 = swift_slowAlloc(32, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 24) = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 32) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    *v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "                        Failed to force stop sharing beaconIdentifier: %{private,mask.hash}s,\n                        error: %{public}@.", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v24, 1, v20);
    swift_slowDealloc(v24, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v21);
  v22(0, v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B4748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_1000B4764, 0, 0);
}

uint64_t sub_1000B4764()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE134);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_1000B47C8;
  return sub_100013024(0);
}

uint64_t sub_1000B47C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000DB628, 0, 0);
}

uint64_t sub_1000B4824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_1000B4840, 0, 0);
}

uint64_t sub_1000B4840()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE134);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_1000B48A4;
  return sub_100013024(1);
}

uint64_t sub_1000B48A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000B4900, 0, 0);
}

uint64_t sub_1000B4900()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B4A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B4AC4, 0, 0);
}

uint64_t sub_1000B4AC4()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE53C);
  v0[12] = v1;
  *v1 = v0;
  v1[1] = sub_1000B4B2C;
  return sub_1000C7FD4(v0[6]);
}

uint64_t sub_1000B4B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B4B90;
  else
    v3 = sub_1000DB6DC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B4B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  uint64_t *v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    log = v8;
    v15 = swift_slowAlloc(32, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 24) = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 32) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    *v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "Failed to request unknown beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v24, 1, v20);
    swift_slowDealloc(v24, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v21);
  v22(0, v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B5088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return swift_task_switch(sub_1000B50A4, 0, 0);
}

uint64_t sub_1000B50A4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *sub_10001AA44((_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v2 = (_QWORD *)swift_task_alloc(dword_1010EE514);
  v0[9] = v2;
  *v2 = v0;
  v2[1] = sub_1000B5120;
  v2[16] = v0[6];
  v2[17] = v1;
  return swift_task_switch(sub_1000D6044, 0, 0);
}

uint64_t sub_1000B5120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B5184;
  else
    v3 = sub_1000DB6EC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B5184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 48);
  if (v7)
  {
    v10 = swift_slowAlloc(32, -1);
    v21 = (uint64_t *)swift_slowAlloc(8, -1);
    v22 = swift_slowAlloc(32, -1);
    v23 = v22;
    *(_DWORD *)v10 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    swift_bridgeObjectRetain(v9);
    v13 = Array.description.getter(v12, v11);
    v15 = v14;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 24) = sub_100016940(v13, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v9, 2);
    *(_WORD *)(v10 + 22) = 2114;
    swift_errorRetain(v8);
    v16 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 32) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v10 + 24, v10 + 32);
    *v21 = v16;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to update circle identifiers: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v10, 0x20u);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v21, 1, v17);
    swift_slowDealloc(v21, -1, -1);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 48), 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
  }

  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v18);
  v19(0, v18);
  swift_errorRelease(v18);
  swift_errorRelease(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B55BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 80) = a7;
  *(_QWORD *)(v8 + 88) = a8;
  *(_BYTE *)(v8 + 137) = a6;
  *(_QWORD *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 72) = a5;
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 96) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 104) = v10;
  *(_QWORD *)(v8 + 112) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B5624, 0, 0);
}

uint64_t sub_1000B5624()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(*(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE4FC);
  *(_QWORD *)(v0 + 120) = v1;
  *v1 = v0;
  v1[1] = sub_1000B5690;
  return sub_1000C268C(*(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 137));
}

uint64_t sub_1000B5690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B5734;
  else
    v3 = sub_1000B56F4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B56F4()
{
  uint64_t v0;

  (*(void (**)(uint64_t, _QWORD))(v0 + 80))(1, 0);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B5734()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(_QWORD, uint64_t);
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = (uint64_t *)(v0 + 32);
  v39 = (char *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v2);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 96);
  if (v11)
  {
    v16 = swift_slowAlloc(32, -1);
    v37 = (uint64_t *)swift_slowAlloc(8, -1);
    v38 = swift_slowAlloc(32, -1);
    v40 = v38;
    *(_DWORD *)v16 = 141558531;
    *(_QWORD *)(v0 + 48) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    v17 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    *(_QWORD *)(v0 + 56) = sub_100016940(v18, v19, &v40);
    v1 = (uint64_t *)(v0 + 32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    *(_WORD *)(v16 + 22) = 2114;
    swift_errorRetain(v12);
    v20 = _swift_stdlib_bridgeErrorToNSError(v12);
    *(_QWORD *)(v0 + 24) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v16 + 24, v16 + 32);
    *v37 = v20;
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to upload keys for circle identifier: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v16, 0x20u);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v37, 1, v21);
    swift_slowDealloc(v37, -1, -1);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v22 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 16) = v22;
  swift_errorRetain(v22);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v24 = swift_dynamicCast(v39, v0 + 16, v23, &type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, 6);
  v25 = *(_QWORD *)(v0 + 128);
  v26 = *(void (**)(_QWORD, uint64_t))(v0 + 80);
  if ((v24 & 1) != 0)
  {
    v27 = *v39;
    v28 = sub_1000D94EC();
    v29 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v28, 0, 0);
    *v30 = v27;
    v26(0, v29);
    swift_errorRelease(v25);
    swift_errorRelease(v29);
  }
  else
  {
    type metadata accessor for SPBeaconSharingError(0);
    v32 = v31;
    *(_QWORD *)(v0 + 40) = 3;
    v33 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v34 = sub_100006C64((unint64_t *)&qword_1010EB490, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    _BridgedStoredNSError.init(_:userInfo:)(v1, v0 + 40, v33, v32, v34);
    v35 = (void *)*v1;
    v26(0, *v1);
    swift_errorRelease(v25);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B5D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = a8;
  *(_BYTE *)(v8 + 112) = a6;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 72) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 80) = v10;
  *(_QWORD *)(v8 + 88) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B5DA8, 0, 0);
}

uint64_t sub_1000B5DA8()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_1010EE234);
  *(_QWORD *)(v0 + 96) = v1;
  *v1 = v0;
  v1[1] = sub_1000B5E14;
  return sub_1000C2F10(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 112));
}

uint64_t sub_1000B5E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000B5E78;
  else
    v3 = sub_1000B20B4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B5E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  uint64_t *v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    log = v8;
    v15 = swift_slowAlloc(32, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 24) = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 32) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    *v24 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "Failed to download keys for circle identifier: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v24, 1, v20);
    swift_slowDealloc(v24, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(void (**)(_QWORD, uint64_t))(v0 + 56);
  swift_errorRetain(v21);
  v22(0, v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[3] = a6;
  v7[4] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)&dword_1010F4170 + dword_1010F4170);
  v9 = (_QWORD *)swift_task_alloc(unk_1010F4174);
  v7[5] = v9;
  *v9 = v7;
  v9[1] = sub_1000B63E4;
  return v11(a5);
}

uint64_t sub_1000B63E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(*v2 + 48) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000B64B0;
  }
  else
  {
    *(_QWORD *)(v4 + 56) = a1;
    v6 = sub_1000B6458;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000B6458()
{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, void *, _QWORD);
  id v3;

  v1 = *(void **)(v0 + 56);
  v2 = *(void (**)(uint64_t, void *, _QWORD))(v0 + 24);
  v3 = v1;
  v2(1, v1, 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B64B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, uint64_t);

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 48);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to check data integrity, error: %{public}@.", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 48));
    swift_errorRelease(v7);
  }

  v12 = *(_QWORD *)(v0 + 48);
  v13 = *(void (**)(_QWORD, _QWORD, uint64_t))(v0 + 24);
  swift_errorRetain(v12);
  v13(0, 0, v12);
  swift_errorRelease(v12);
  swift_errorRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000B68C0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;

  if (a3)
    v7 = _convertErrorToNSError(_:)(a3);
  else
    v7 = 0;
  v8 = (id)v7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a4, a1 & 1, a2);

}

uint64_t sub_1000B6928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v6[3] = a5;
  v6[4] = a6;
  v7 = type metadata accessor for CheckDataIntegrityUseCase();
  swift_allocObject(v7, 128, 15);
  v8 = (_QWORD *)swift_task_alloc(dword_1010ECA2C);
  v6[5] = v8;
  *v8 = v6;
  v8[1] = sub_1000B6988;
  return sub_100068460();
}

uint64_t sub_1000B6988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v5 = *(_QWORD **)v2;
  v5[6] = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5[10] = v1;
    return swift_task_switch(sub_1000B6B2C, 0, 0);
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc(dword_1010EC96C);
    v5[7] = v7;
    *v7 = v5;
    v7[1] = sub_1000B6A28;
    return sub_10006E88C();
  }
}

uint64_t sub_1000B6A28(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 56);
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000B6AE8;
  }
  else
  {
    swift_release();
    *(_QWORD *)(v4 + 72) = a1;
    v6 = sub_1000B6AA4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000B6AA4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 72);
  (*(void (**)(uint64_t, void *, _QWORD))(v0 + 24))(1, v1, 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6AE8()
{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 64);
  return swift_task_switch(sub_1000B6B2C, 0, 0);
}

uint64_t sub_1000B6B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, id, uint64_t);
  id v14;
  Class isa;
  id v16;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to look for orphaned records, error: %{public}@.", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v7);
  }

  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(void (**)(_QWORD, id, uint64_t))(v0 + 24);
  v14 = objc_allocWithZone((Class)SPOrphanedRecordsResult);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v14, "initWithRecordsInfo:", isa);

  swift_errorRetain(v12);
  v13(0, v16, v12);
  swift_errorRelease(v12);

  swift_errorRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_1000B6E90, 0, 0);
}

uint64_t sub_1000B6E90()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v2 = (_QWORD *)swift_task_alloc(dword_1010EE43C);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_1000B6F08;
  v2[8] = v1;
  return swift_task_switch(sub_1000BAE64, v1, 0);
}

uint64_t sub_1000B6F08()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_1000B6F5C, 0, 0);
}

uint64_t sub_1000B6F5C()
{
  uint64_t v0;

  (*(void (**)(uint64_t, _QWORD))(v0 + 24))(1, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B70A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch(sub_1000B70C0, 0, 0);
}

uint64_t sub_1000B70C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 40) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_1000B7170;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_1000B7170()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_release();
  return swift_task_switch(sub_1000B71CC, 0, 0);
}

uint64_t sub_1000B71CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void (*v3)(void);
  id v4;

  v1 = sub_10001ED80(*(_QWORD *)(v0 + 16));
  result = swift_bridgeObjectRelease();
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(void (**)(void))(v0 + 24);
    v4 = objc_msgSend(objc_allocWithZone((Class)SPBeaconSharingLimits), "initWithMaxCircleMembers:", v1);
    v3();

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

id sub_1000B7274()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BeaconSharingTrampoline()
{
  return objc_opt_self(_TtC12searchpartyd23BeaconSharingTrampoline);
}

Swift::Int sub_1000B72D8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000032, 0x8000000100EC2B40);
  return Hasher._finalize()();
}

uint64_t sub_1000B732C(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000032, 0x8000000100EC2B40);
}

Swift::Int sub_1000B7348()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000032, 0x8000000100EC2B40);
  return Hasher._finalize()();
}

uint64_t sub_1000B7398@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101048EC8, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1000B73E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for BeaconSharingServiceConnections(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EDDA0;
  if (!qword_1010EDDA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconSharingServiceConnections);
  return result;
}

uint64_t sub_1000B7458(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 216);
}

uint64_t sub_1000B748C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6760);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6760);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6748);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000B751C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[2] = a1;
  v2[3] = a2;
  v4 = type metadata accessor for UUID(0);
  v2[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[5] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[6] = v6;
  v2[7] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EE0E0);
  v2[8] = v7;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerSharingCircle(0);
  v2[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[11] = v9;
  v2[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B75D4, a2, 0);
}

uint64_t sub_1000B75D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[4];
  v4 = v0[5];
  v5 = v0[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[2], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101055580, v7 + v2, v6 | 7);
  v0[13] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[14] = v10;
  *v10 = v0;
  v10[1] = sub_1000B76A8;
  return unsafeBlocking<A>(_:)(v0[9], sub_10007CC00, v8, v0[8]);
}

uint64_t sub_1000B76A8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_release();
  return swift_task_switch(sub_1000B7704, 0, 0);
}

uint64_t sub_1000B7704()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);

  v1 = v0[11];
  v2 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1 + 48))(v2, 1, v0[10]) == 1)
  {
    sub_100004048(v2, &qword_1010EE0E0);
    v13 = (uint64_t (*)(uint64_t))((char *)&dword_1010F4120 + dword_1010F4120);
    v3 = (_QWORD *)swift_task_alloc(unk_1010F4124);
    v0[15] = v3;
    *v3 = v0;
    v3[1] = sub_1000B7840;
    v4 = v0[2];
  }
  else
  {
    v5 = v0[12];
    sub_1000126EC(v2, v5, type metadata accessor for OwnerSharingCircle);
    v6 = sub_10001A9A8(&qword_1010EE360);
    v7 = *(_QWORD *)(v1 + 72);
    v8 = *(unsigned __int8 *)(v1 + 80);
    v9 = (v8 + 32) & ~v8;
    v10 = swift_allocObject(v6, v9 + v7, v8 | 7);
    v0[16] = v10;
    *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
    sub_10005972C(v5, v10 + v9, type metadata accessor for OwnerSharingCircle);
    v13 = (uint64_t (*)(uint64_t))((char *)&dword_1010F4108 + dword_1010F4108);
    v11 = (_QWORD *)swift_task_alloc(unk_1010F410C);
    v0[17] = v11;
    *v11 = v0;
    v11[1] = sub_1000B78AC;
    v4 = v10;
  }
  return v13(v4);
}

uint64_t sub_1000B7840()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = *(_QWORD **)v0;
  v6 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  v2 = v1[12];
  v3 = v1[9];
  v4 = v1[7];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return ((uint64_t (*)(void))v6[1])();
}

uint64_t sub_1000B78AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
    v3 = sub_1000B7974;
  else
    v3 = sub_1000B7918;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B7918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000126B0(*(_QWORD *)(v0 + 96), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B7974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000126B0(*(_QWORD *)(v0 + 96), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B79D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[3] = v0;
  v2 = sub_10001A9A8(&qword_1010EE3C8);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010F46C0);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B7A60, v0, 0);
}

uint64_t sub_1000B7A60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BeaconSharingService: Starting up.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[7];
  v7 = v0[3];

  sub_1000BEC40();
  v8 = *(_QWORD *)(v7 + 192);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
  v11 = sub_100006C64(&qword_1010EE0D0, v10, (uint64_t (*)(uint64_t))type metadata accessor for BeaconSharingService, (uint64_t)&unk_100E26928);
  v12 = (_QWORD *)swift_allocObject(&unk_101055648, 48, 7);
  v12[2] = v7;
  v12[3] = v11;
  v12[4] = v8;
  v12[5] = v7;
  swift_retain_n(v7, 2);
  swift_retain();
  sub_100691AC0(v6, (uint64_t)&unk_1010EE3D8, (uint64_t)v12);
  swift_release();
  v13 = *(_QWORD *)(v7 + 136);
  v0[8] = v13;
  return swift_task_switch(sub_1000B7BF4, v13, 0);
}

uint64_t sub_1000B7BF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 72) = sub_10001EDD0();
  return swift_task_switch(sub_1000B7C3C, v1, 0);
}

uint64_t sub_1000B7C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 72);
  v6 = sub_10001A9A8(&qword_1010EE3E0);
  v7 = sub_1000193A4(&qword_1010EE3E8, &qword_1010EE3E0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_1000B7D68, 0, v6, v7);
  swift_release();
  v8 = sub_1000193A4(&qword_1010EE3F0, &qword_1010EE3C8, (const char *)&protocol conformance descriptor for Publishers.Filter<A>);
  swift_retain();
  v9 = Publisher<>.sink(receiveValue:)(sub_1000D9AB4, v5, v3, v8);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  *(_QWORD *)(v5 + 224) = v9;
  swift_release();
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B7D68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[40];
  __int128 v16[2];
  __int128 v17[2];

  v2 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v2);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for SharingCircleSecret(0);
  __chkstk_darwin(v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v8);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100030784(a1, (uint64_t)v17);
  v11 = sub_10001A9A8(&qword_1010EE3A8);
  if (swift_dynamicCast(v10, v17, v11, v8, 6))
  {
    sub_1000126B0((uint64_t)v10, type metadata accessor for MemberSharingCircle);
    sub_100030784(a1, (uint64_t)v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
LABEL_5:
    sub_100030784(a1, (uint64_t)v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
    return 1;
  }
  sub_100030784(a1, (uint64_t)v17);
  sub_10000F9FC(v17, (uint64_t)v16);
  if (swift_dynamicCast(v7, v16, v11, v5, 6))
  {
    sub_1000126B0((uint64_t)v7, type metadata accessor for SharingCircleSecret);
    goto LABEL_5;
  }
  sub_100030784(a1, (uint64_t)v16);
  sub_10000F9FC(v16, (uint64_t)v15);
  v12 = swift_dynamicCast(v4, v15, v11, v2, 6);
  if ((v12 & 1) != 0)
    sub_1000126B0((uint64_t)v4, type metadata accessor for SharedBeaconRecord);
  return v12;
}

uint64_t sub_1000B7F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6[2];

  type metadata accessor for Transaction(0);
  sub_100030784(a1, (uint64_t)v6);
  v4 = swift_allocObject(&unk_101055670, 64, 7);
  *(_QWORD *)(v4 + 16) = a2;
  sub_10000F9FC(v6, v4 + 24);
  swift_retain();
  static Transaction.asyncTask(name:block:)("CloudKitRecordsChanged", 22, 2, &unk_1010EE400, v4);
  return swift_release();
}

uint64_t sub_1000B7FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010EDED4);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_1000B8050(a2);
}

uint64_t sub_1000B8050(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2[21] = a1;
  v2[22] = v1;
  v3 = type metadata accessor for SharedBeaconRecord(0);
  v2[23] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[24] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[25] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v6);
  v2[27] = swift_task_alloc(v6);
  v2[28] = swift_task_alloc(v6);
  v7 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[29] = v7;
  v2[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SharingCircleSecret(0);
  v2[31] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[32] = swift_task_alloc(v9);
  v2[33] = swift_task_alloc(v9);
  v10 = type metadata accessor for UUID(0);
  v2[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[35] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v2[36] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[37] = swift_task_alloc(v13);
  v2[38] = swift_task_alloc(v13);
  v14 = type metadata accessor for MemberSharingCircle(0);
  v2[39] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[40] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[41] = swift_task_alloc(v16);
  v2[42] = swift_task_alloc(v16);
  v2[43] = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[44] = swift_task_alloc(v17);
  v2[45] = swift_task_alloc(v17);
  v2[46] = swift_task_alloc(v17);
  return swift_task_switch(sub_1000B81EC, v1, 0);
}

uint64_t sub_1000B81EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (__cdecl *v24)();
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 312);
  sub_100030784(*(_QWORD *)(v0 + 168), v0 + 16);
  v3 = sub_10001A9A8(&qword_1010EE3A8);
  if (swift_dynamicCast(v1, v0 + 16, v3, v2, 0))
  {
    v4 = *(_QWORD *)(v0 + 312);
    v5 = *(_QWORD *)(v0 + 176);
    sub_1000126EC(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 336), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 488) = *(_DWORD *)(v4 + 28);
    v6 = *(_QWORD *)(v5 + 136);
    *(_QWORD *)(v0 + 376) = v6;
    v7 = sub_1000B84C8;
    return swift_task_switch(v7, v6, 0);
  }
  if (swift_dynamicCast(*(_QWORD *)(v0 + 264), v0 + 16, v3, *(_QWORD *)(v0 + 248), 0))
  {
    v8 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 176);
    sub_1000126EC(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 256), type metadata accessor for SharingCircleSecret);
    *(_DWORD *)(v0 + 492) = *(_DWORD *)(v8 + 24);
    v6 = *(_QWORD *)(v9 + 136);
    *(_QWORD *)(v0 + 416) = v6;
    v7 = sub_1000B88D8;
    return swift_task_switch(v7, v6, 0);
  }
  if (swift_dynamicCast(*(_QWORD *)(v0 + 224), v0 + 16, v3, *(_QWORD *)(v0 + 184), 0))
  {
    sub_1000126EC(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 216), type metadata accessor for SharedBeaconRecord);
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 120))
    {
      sub_10000F9FC((__int128 *)(v0 + 96), v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v24 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
      v11 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
      *(_QWORD *)(v0 + 448) = v11;
      *v11 = v0;
      v11[1] = sub_1000B8C94;
      return v24();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    v12 = *(_QWORD *)(v0 + 360);
    v14 = *(_QWORD *)(v0 + 344);
    v13 = *(_QWORD *)(v0 + 352);
    v16 = *(_QWORD *)(v0 + 328);
    v15 = *(_QWORD *)(v0 + 336);
    v18 = *(_QWORD *)(v0 + 296);
    v17 = *(_QWORD *)(v0 + 304);
    v20 = *(_QWORD *)(v0 + 256);
    v19 = *(_QWORD *)(v0 + 264);
    v21 = *(_QWORD *)(v0 + 240);
    v22 = *(_QWORD *)(v0 + 224);
    v23 = *(_QWORD *)(v0 + 216);
    v25 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1000B84C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 336) + *(int *)(v0 + 488);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 384) = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101055620, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 392) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v5);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 400) = v12;
  v13 = sub_10001A9A8(&qword_1010EC8C8);
  *v12 = v0;
  v12[1] = sub_1000B85CC;
  return unsafeBlocking<A>(_:)(v0 + 160, sub_10007CB00, v10, v13);
}

uint64_t sub_1000B85CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 400));
  swift_release();
  return swift_task_switch(sub_1000B862C, v1, 0);
}

uint64_t sub_1000B862C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[22];
  v0[51] = v0[20];
  return swift_task_switch(sub_1000B8648, v1, 0);
}

uint64_t sub_1000B8648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 408) + 16);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for MemberSharingCircle);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384))(v2, v3 + *(int *)(*(_QWORD *)(v0 + 312) + 24), v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  type metadata accessor for Transaction(0);
  v7 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v7 + 16, v6);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE3C0, v7);
  swift_release_n(v7, 2);
  sub_1000126B0(v3, type metadata accessor for MemberSharingCircle);
  v8 = *(_QWORD *)(v0 + 368);
  v9 = *(_QWORD *)(v0 + 352);
  v10 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  sub_10000F9B8(v8, v9, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    v12 = *(_QWORD *)(v0 + 352);
    sub_100004048(*(_QWORD *)(v0 + 368), &qword_1010ED860);
    sub_100004048(v12, &qword_1010ED860);
LABEL_5:
    v13 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 344);
    v14 = *(_QWORD *)(v0 + 352);
    v17 = *(_QWORD *)(v0 + 328);
    v16 = *(_QWORD *)(v0 + 336);
    v19 = *(_QWORD *)(v0 + 296);
    v18 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 240);
    v25 = *(_QWORD *)(v0 + 224);
    v26 = *(_QWORD *)(v0 + 216);
    v27 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 272));
  v23 = (_QWORD *)swift_task_alloc(dword_1010EDEDC);
  *(_QWORD *)(v0 + 480) = v23;
  *v23 = v0;
  v23[1] = sub_1000B9038;
  return sub_1000B9A94(*(_QWORD *)(v0 + 296));
}

uint64_t sub_1000B88D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 256) + *(int *)(v0 + 492);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 424) = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010555F8, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 432) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v5);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 440) = v12;
  *v12 = v0;
  v12[1] = sub_1000B89C0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 240), sub_10007CC24, v10, *(_QWORD *)(v0 + 232));
}

uint64_t sub_1000B89C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 440));
  swift_release();
  return swift_task_switch(sub_1000B8A20, v1, 0);
}

uint64_t sub_1000B8A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 240);
  sub_1000126B0(*(_QWORD *)(v0 + 256), type metadata accessor for SharingCircleSecret);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 240), (uint64_t *)&unk_101111440);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
LABEL_5:
    v16 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 352);
    v20 = *(_QWORD *)(v0 + 328);
    v19 = *(_QWORD *)(v0 + 336);
    v22 = *(_QWORD *)(v0 + 296);
    v21 = *(_QWORD *)(v0 + 304);
    v24 = *(_QWORD *)(v0 + 256);
    v23 = *(_QWORD *)(v0 + 264);
    v27 = *(_QWORD *)(v0 + 240);
    v28 = *(_QWORD *)(v0 + 224);
    v29 = *(_QWORD *)(v0 + 216);
    v30 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  v6 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 272);
  v10 = *(_QWORD *)(v0 + 280);
  sub_1000126EC(*(_QWORD *)(v0 + 240), v7, type metadata accessor for MemberSharingCircle);
  v4(v6, v7 + *(int *)(v8 + 24), v9);
  sub_1000126B0(v7, type metadata accessor for MemberSharingCircle);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  sub_100005CF0(v6, v5, &qword_1010ED860);
  v11 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 352);
  v13 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  sub_10000F9B8(v11, v12, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v15 = *(_QWORD *)(v0 + 352);
    sub_100004048(*(_QWORD *)(v0 + 368), &qword_1010ED860);
    sub_100004048(v15, &qword_1010ED860);
    goto LABEL_5;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 272));
  v26 = (_QWORD *)swift_task_alloc(dword_1010EDEDC);
  *(_QWORD *)(v0 + 480) = v26;
  *v26 = v0;
  v26[1] = sub_1000B9038;
  return sub_1000B9A94(*(_QWORD *)(v0 + 296));
}

uint64_t sub_1000B8C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000B8CF4, v3, 0);
}

uint64_t sub_1000B8CF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0[57];
  v3 = v0[26];
  v2 = v0[27];
  v5 = v0[24];
  v4 = v0[25];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7);
  sub_10005972C(v2, v3, type metadata accessor for SharedBeaconRecord);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010555D0, v7 + v4, v6 | 7);
  v0[58] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  sub_1000126EC(v3, v8 + v7, type metadata accessor for SharedBeaconRecord);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[59] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v10 = v0;
  v10[1] = sub_1000B8DF0;
  return unsafeBlocking<A>(_:)(v0 + 62, sub_1000D99D4, v8, v11);
}

uint64_t sub_1000B8DF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));
  swift_release();
  return swift_task_switch(sub_1000B8E50, v1, 0);
}

uint64_t sub_1000B8E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 216);
  swift_release();
  sub_1000126B0(v4, type metadata accessor for SharedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v1, 1, 1, v2);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  sub_10000F9B8(v5, v6, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v9 = *(_QWORD *)(v0 + 352);
    sub_100004048(*(_QWORD *)(v0 + 368), &qword_1010ED860);
    sub_100004048(v9, &qword_1010ED860);
    v10 = *(_QWORD *)(v0 + 360);
    v12 = *(_QWORD *)(v0 + 344);
    v11 = *(_QWORD *)(v0 + 352);
    v14 = *(_QWORD *)(v0 + 328);
    v13 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 296);
    v15 = *(_QWORD *)(v0 + 304);
    v18 = *(_QWORD *)(v0 + 256);
    v17 = *(_QWORD *)(v0 + 264);
    v21 = *(_QWORD *)(v0 + 240);
    v22 = *(_QWORD *)(v0 + 224);
    v23 = *(_QWORD *)(v0 + 216);
    v24 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 272));
    v20 = (_QWORD *)swift_task_alloc(dword_1010EDEDC);
    *(_QWORD *)(v0 + 480) = v20;
    *v20 = v0;
    v20[1] = sub_1000B9038;
    return sub_1000B9A94(*(_QWORD *)(v0 + 296));
  }
}

uint64_t sub_1000B9038()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 480));
  v3 = *(_QWORD *)(v2 + 176);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_1000DB6E0;
  }
  else
  {
    v4 = sub_1000B90A4;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000B90A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 368);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
  sub_100004048(v1, &qword_1010ED860);
  v2 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 256);
  v9 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 240);
  v13 = *(_QWORD *)(v0 + 224);
  v14 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B91A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v7 = sub_10001A9A8(&qword_1010F46C0);
  v5[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B9208, a4, 0);
}

uint64_t sub_1000B9208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_1010EE408, v2);
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch(sub_1000B9280, v1, 0);
}

uint64_t sub_1000B9280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = (_QWORD *)swift_allocObject(&unk_101055698, 48, 7);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v3;
  v5[5] = v1;
  swift_retain();
  swift_retain();
  sub_100028774(v2, (uint64_t)&unk_1010EE418, (uint64_t)v5);
  swift_release();
  sub_100004048(v2, &qword_1010F46C0);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B933C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[5] = a4;
  v5[6] = a5;
  v7 = sub_10001A9A8(&qword_1010EE420);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[9] = swift_task_alloc(v9);
  v5[10] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EE428);
  v5[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[12] = v11;
  v5[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EE430);
  v5[14] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[15] = v13;
  v5[16] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000B940C, a4, 0);
}

uint64_t sub_1000B940C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v5 = v0[5];
  v6 = type metadata accessor for Transaction(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  AsyncStream.init(_:bufferingPolicy:_:)(v6, v2, sub_1000D9C5C, v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return swift_task_switch(sub_1000B94D4, 0, 0);
}

uint64_t sub_1000B94D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[11];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[17] = v4;
  *v4 = v0;
  v4[1] = sub_1000B9564;
  return AsyncStream.Iterator.next(isolation:)(v0 + 4, 0, 0, v0[14]);
}

uint64_t sub_1000B9564()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_1000B95B8, 0, 0);
}

uint64_t sub_1000B95B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 144) = v1;
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1010EE43C);
    *(_QWORD *)(v0 + 152) = v2;
    *v2 = v0;
    v2[1] = sub_1000B9678;
    v3 = *(_QWORD *)(v0 + 48);
    v2[8] = v3;
    return swift_task_switch(sub_1000BAE64, v3, 0);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v5, *(_QWORD *)(v0 + 112));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000B9678()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  v1 = *v0;
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  v2 = (_QWORD *)swift_task_alloc(dword_1010EE444);
  *(_QWORD *)(v1 + 160) = v2;
  *v2 = v6;
  v2[1] = sub_1000B9718;
  v2[3] = *(_QWORD *)(v1 + 48);
  v5 = (uint64_t (*)(void))((char *)&dword_1010F4138 + dword_1010F4138);
  v3 = (_QWORD *)swift_task_alloc(unk_1010F413C);
  v2[4] = v3;
  *v3 = v2;
  v3[1] = sub_1000BB2F8;
  return v5();
}

uint64_t sub_1000B9718()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 160));
  v2 = (_QWORD *)swift_task_alloc(dword_1010EE44C);
  *(_QWORD *)(v1 + 168) = v2;
  *v2 = v5;
  v2[1] = sub_1000B9790;
  v3 = *(_QWORD *)(v1 + 48);
  v2[3] = v3;
  return swift_task_switch(sub_1000BB548, v3, 0);
}

uint64_t sub_1000B9790()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));
  v2 = (_QWORD *)swift_task_alloc(dword_1010EE454);
  *(_QWORD *)(v1 + 176) = v2;
  *v2 = v4;
  v2[1] = sub_1000B97F4;
  return sub_1000BB9E0();
}

uint64_t sub_1000B97F4()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  v2 = (_QWORD *)swift_task_alloc(dword_1010EE45C);
  *(_QWORD *)(v1 + 184) = v2;
  *v2 = v4;
  v2[1] = sub_1000B9858;
  return sub_1000BDC6C();
}

uint64_t sub_1000B9858()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  return swift_task_switch(sub_1000B98B0, v1, 0);
}

uint64_t sub_1000B98B0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD *)v0[6];
  v0[24] = v1[32];
  v2 = v1[15];
  v0[2] = v1[14];
  v0[3] = v2;
  v3 = swift_allocObject(&unk_101055260, 24, 7);
  v0[25] = v3;
  swift_weakInit(v3 + 16, v1);
  swift_bridgeObjectRetain(v2);
  swift_retain();
  v4 = sub_10001A9A8(&qword_1010EE320);
  v5 = sub_1000193A4(&qword_1010EE470, &qword_1010EE320, (const char *)&protocol conformance descriptor for AsyncKeyedThrottle<A>);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, v5);
  return swift_task_switch(sub_1000B9978, v6, v7);
}

uint64_t sub_1000B9978()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)(v0 + 16, &unk_1010EE468, *(_QWORD *)(v0 + 200));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000B99EC, v1, 0);
}

uint64_t sub_1000B99EC()
{
  Transaction.capture()();
  return swift_task_switch(sub_1000B9A28, 0, 0);
}

uint64_t sub_1000B9A28()
{
  uint64_t v0;
  _QWORD *v1;

  swift_release();
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_1000B9564;
  return AsyncStream.Iterator.next(isolation:)(v0 + 32, 0, 0, *(_QWORD *)(v0 + 112));
}

uint64_t sub_1000B9A94(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[47] = a1;
  v2[48] = v1;
  v3 = type metadata accessor for MemberSharingCircle(0);
  v2[49] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[50] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[51] = swift_task_alloc(v5);
  v2[52] = swift_task_alloc(v5);
  v2[53] = swift_task_alloc(v5);
  v6 = type metadata accessor for UUID(0);
  v2[54] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[55] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[56] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[57] = swift_task_alloc(v9);
  v2[58] = swift_task_alloc(v9);
  v2[59] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000B9B58, v1, 0);
}

uint64_t sub_1000B9B58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 384) + 136);
  *(_QWORD *)(v0 + 480) = v1;
  return swift_task_switch(sub_1000B9B74, v1, 0);
}

uint64_t sub_1000B9B74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = v0[59];
  v1 = v0[60];
  v4 = v0[55];
  v3 = v0[56];
  v5 = v0[54];
  v6 = v0[47];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[61] = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010555A8, v9 + v3, v8 | 7);
  v0[62] = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v5);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[63] = v12;
  v13 = sub_10001A9A8(&qword_1010EC840);
  *v12 = v0;
  v12[1] = sub_1000B9C6C;
  return unsafeBlocking<A>(_:)(v0 + 45, sub_1000D9288, v10, v13);
}

uint64_t sub_1000B9C6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 480);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 504));
  swift_release();
  return swift_task_switch(sub_1000B9CCC, v1, 0);
}

uint64_t sub_1000B9CCC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[48];
  v0[64] = v0[45];
  return swift_task_switch(sub_1000B9CE8, v1, 0);
}

uint64_t sub_1000B9CE8()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  result = *(_QWORD *)(v0 + 512);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(v0 + 520) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 400);
    v4 = *(_QWORD *)(*(_QWORD *)(v0 + 384) + 200);
    *(_QWORD *)(v0 + 528) = v4;
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 608) = v5;
    *(_BYTE *)(v0 + 613) = 0;
    *(_QWORD *)(v0 + 536) = 0;
    if (*(_QWORD *)(result + 16))
    {
      sub_10005972C(result + ((v5 + 32) & ~(unint64_t)v5), *(_QWORD *)(v0 + 424), type metadata accessor for MemberSharingCircle);
      v6 = type metadata accessor for MemberCircleRevokeManager();
      *(_QWORD *)(v0 + 544) = v6;
      *(_QWORD *)(v0 + 80) = v6;
      *(_QWORD *)(v0 + 88) = &off_1010B7198;
      *(_QWORD *)(v0 + 56) = v4;
      swift_retain();
      return swift_task_switch(sub_1000B9E58, 0, 0);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 464);
    v8 = *(_QWORD *)(v0 + 472);
    v9 = *(_QWORD *)(v0 + 456);
    v11 = *(_QWORD *)(v0 + 416);
    v10 = *(_QWORD *)(v0 + 424);
    v12 = *(_QWORD *)(v0 + 408);
    swift_bridgeObjectRelease();
    v13 = sub_1000D9414();
    v14 = swift_allocError(&type metadata for BeaconSharingService.BeaconSharingServiceError, v13, 0, 0);
    *v15 = 3;
    swift_willThrow(v14);
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1000B9E58()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 336, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 176, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 200))
  {
    sub_10000F9FC((__int128 *)(v0 + 176), v0 + 96);
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 552) = v2;
    *v2 = v0;
    v2[1] = sub_1000B9F44;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B9F44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000B9FA0, 0, 0);
}

uint64_t sub_1000B9FA0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v1 = (_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 560);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 544);
    v32 = v3;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = type metadata accessor for SharingCircleKeyManager();
    v5 = swift_allocObject(v4, 128, 15);
    *(_QWORD *)(v0 + 568) = v5;
    swift_retain();
    swift_defaultActor_initialize(v5);
    v6 = type metadata accessor for KeyDropInterface();
    v7 = swift_allocObject(v6, 128, 15);
    swift_defaultActor_initialize(v7);
    *(_QWORD *)(v7 + 112) = 0;
    *(_QWORD *)(v7 + 120) = 0;
    *(_QWORD *)(v5 + 112) = v7;
    *(_QWORD *)(v5 + 120) = v2;
    sub_100030784(v0 + 56, v0 + 296);
    v8 = *(_QWORD *)(v0 + 320);
    sub_10009F5D0(v0 + 296, v8);
    v9 = *(_QWORD *)(v8 - 8);
    v33 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(void))(v9 + 16))();
    v10 = *v33;
    *(_QWORD *)(v0 + 136) = v5;
    *(_QWORD *)(v0 + 160) = v4;
    *(_QWORD *)(v0 + 168) = &off_10109BDA0;
    *(_QWORD *)(v0 + 280) = v3;
    *(_QWORD *)(v0 + 288) = &off_1010B7198;
    *(_QWORD *)(v0 + 256) = v10;
    v11 = type metadata accessor for ShareKeysDownloadUseCase();
    v12 = swift_allocObject(v11, 200, 15);
    *(_QWORD *)(v0 + 576) = v12;
    v31 = v2;
    v13 = sub_10009F5D0(v0 + 136, v4);
    v14 = *(_QWORD *)(v4 - 8);
    v15 = (_QWORD *)swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v14 + 16))(v15, v13, v4);
    v16 = *(_QWORD *)(v0 + 280);
    v17 = sub_10009F5D0(v0 + 256, v16);
    v18 = *(_QWORD *)(v16 - 8);
    v19 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v19, v17, v16);
    v20 = *v19;
    *(_QWORD *)(v0 + 216) = *v15;
    *(_QWORD *)(v0 + 240) = v4;
    *(_QWORD *)(v0 + 248) = &off_10109BDA0;
    *(_QWORD *)(v0 + 40) = v32;
    *(_QWORD *)(v0 + 48) = &off_1010B7198;
    *(_QWORD *)(v0 + 16) = v20;
    swift_retain();
    swift_retain();
    swift_defaultActor_initialize(v12);
    sub_10000F9FC((__int128 *)(v0 + 216), v12 + 112);
    *(_QWORD *)(v12 + 152) = v31;
    sub_10000F9FC((__int128 *)(v0 + 16), v12 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 256));
    swift_task_dealloc(v19);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
    swift_task_dealloc(v15);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 296));
    swift_task_dealloc(v33);
    v21 = (_QWORD *)swift_task_alloc(dword_1010FFC54);
    *(_QWORD *)(v0 + 584) = v21;
    *v21 = v0;
    v21[1] = sub_1000BA360;
    return sub_1005A0300(*(_QWORD *)(v0 + 424));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B6748);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No BeaconStoreActor available!", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    v28 = sub_100033220();
    v29 = swift_allocError(&type metadata for DaemonError, v28, 0, 0);
    *v30 = 0xD000000000000010;
    v30[1] = 0x8000000100EC6470;
    swift_willThrow(v29);
    *(_QWORD *)(v0 + 600) = v29;
    return swift_task_switch(sub_1000BA640, *(_QWORD *)(v0 + 384), 0);
  }
}

uint64_t sub_1000BA360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 584);
  *(_QWORD *)(*(_QWORD *)v1 + 592) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000BA5E4;
  else
    v3 = sub_1000BA3C4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BA3C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 384);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  return swift_task_switch(sub_1000BA430, v1, 0);
}

uint64_t sub_1000BA430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 536) + 1;
  result = sub_1000126B0(*(_QWORD *)(v0 + 424), type metadata accessor for MemberSharingCircle);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v0 + 384);
    type metadata accessor for Transaction(0);
    v5 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v5 + 16, v4);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE398, v5);
    swift_release_n(v5, 2);
    v6 = *(_QWORD *)(v0 + 464);
    v7 = *(_QWORD *)(v0 + 456);
    v9 = *(_QWORD *)(v0 + 416);
    v8 = *(_QWORD *)(v0 + 424);
    v10 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 472));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 536) + 1;
    *(_BYTE *)(v0 + 613) = 1;
    *(_QWORD *)(v0 + 536) = v11;
    v12 = *(_QWORD *)(v0 + 512);
    if (v11 >= *(_QWORD *)(v12 + 16))
    {
      __break(1u);
    }
    else
    {
      v13 = *(_QWORD *)(v0 + 528);
      sub_10005972C(v12+ ((*(unsigned __int8 *)(v0 + 608) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 608))+ *(_QWORD *)(*(_QWORD *)(v0 + 400) + 72) * v11, *(_QWORD *)(v0 + 424), type metadata accessor for MemberSharingCircle);
      v14 = type metadata accessor for MemberCircleRevokeManager();
      *(_QWORD *)(v0 + 544) = v14;
      *(_QWORD *)(v0 + 80) = v14;
      *(_QWORD *)(v0 + 88) = &off_1010B7198;
      *(_QWORD *)(v0 + 56) = v13;
      swift_retain();
      return swift_task_switch(sub_1000B9E58, 0, 0);
    }
  }
  return result;
}

uint64_t sub_1000BA5E4()
{
  _QWORD *v0;

  swift_release();
  swift_release();
  swift_release();
  v0[75] = v0[74];
  return swift_task_switch(sub_1000BA640, v0[48], 0);
}

uint64_t sub_1000BA640()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  os_log_type_t type;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;

  v1 = (_BYTE *)(v0 + 612);
  v2 = *(_QWORD *)(v0 + 600);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  *(_QWORD *)(v0 + 368) = v2;
  swift_errorRetain(v2);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v0 + 612, v0 + 368, v3, &type metadata for ShareKeysDownloadUseCase.Error, 6) & 1) != 0
    && (*v1 & 1) == 0)
  {
    v78 = (_BYTE *)(v0 + 612);
    if (qword_1010E9938 == -1)
      goto LABEL_10;
    goto LABEL_21;
  }
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v4 = *(_QWORD *)(v0 + 600);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  v6 = *(_QWORD *)(v0 + 456);
  v8 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 408);
  v10 = *(_QWORD *)(v0 + 376);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B6748);
  v5(v6, v10, v7);
  sub_10005972C(v8, v9, type metadata accessor for MemberSharingCircle);
  swift_errorRetain(v4);
  v12 = swift_errorRetain(v4);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter(v13);
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 600);
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 432);
  v19 = *(_QWORD *)(v0 + 440);
  v20 = *(_QWORD *)(v0 + 424);
  v21 = *(_QWORD *)(v0 + 408);
  if (v15)
  {
    v78 = *(_BYTE **)(v0 + 424);
    v22 = swift_slowAlloc(52, -1);
    v74 = (uint64_t *)swift_slowAlloc(8, -1);
    v76 = swift_slowAlloc(64, -1);
    v79 = v76;
    *(_DWORD *)v22 = 141559043;
    *(_QWORD *)(v22 + 4) = 1752392040;
    *(_WORD *)(v22 + 12) = 2081;
    type = v14;
    v23 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v18, v23);
    *(_QWORD *)(v22 + 14) = sub_100016940(v24, v25, &v79);
    v1 = (_BYTE *)(v0 + 612);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    *(_WORD *)(v22 + 22) = 2160;
    *(_QWORD *)(v22 + 24) = 1752392040;
    *(_WORD *)(v22 + 32) = 2081;
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v18, v23);
    *(_QWORD *)(v22 + 34) = sub_100016940(v26, v27, &v79);
    swift_bridgeObjectRelease();
    sub_1000126B0(v21, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v22 + 42) = 2112;
    swift_errorRetain(v16);
    v28 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(_QWORD *)(v22 + 44) = v28;
    *v74 = v28;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v13, type, "Failed to download keys for beaconIdentifier %{private,mask.hash}s,\nshare-id: %{private,mask.hash}s, error: %@.", (uint8_t *)v22, 0x34u);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v74, 1, v29);
    swift_slowDealloc(v74, -1, -1);
    swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    swift_errorRelease(v16);
    v30 = (uint64_t)v78;
  }
  else
  {

    swift_errorRelease(v16);
    swift_errorRelease(v16);
    sub_1000126B0(v21, type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    swift_errorRelease(v16);
    v30 = v20;
  }
  sub_1000126B0(v30, type metadata accessor for MemberSharingCircle);
  while (1)
  {
    v59 = *(_QWORD *)(v0 + 536) + 1;
    if (v59 == *(_QWORD *)(v0 + 520))
      break;
    *(_QWORD *)(v0 + 536) = v59;
    v69 = *(_QWORD *)(v0 + 512);
    if (v59 < *(_QWORD *)(v69 + 16))
    {
      v70 = *(_QWORD *)(v0 + 528);
      sub_10005972C(v69+ ((*(unsigned __int8 *)(v0 + 608) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 608))+ *(_QWORD *)(*(_QWORD *)(v0 + 400) + 72) * v59, *(_QWORD *)(v0 + 424), type metadata accessor for MemberSharingCircle);
      v71 = type metadata accessor for MemberCircleRevokeManager();
      *(_QWORD *)(v0 + 544) = v71;
      *(_QWORD *)(v0 + 80) = v71;
      *(_QWORD *)(v0 + 88) = &off_1010B7198;
      *(_QWORD *)(v0 + 56) = v70;
      swift_retain();
      return swift_task_switch(sub_1000B9E58, 0, 0);
    }
    __break(1u);
LABEL_21:
    swift_once(&qword_1010E9938, sub_1000AFBB0);
LABEL_10:
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
    v32 = *(_QWORD *)(v0 + 464);
    v34 = *(_QWORD *)(v0 + 424);
    v33 = *(_QWORD *)(v0 + 432);
    v35 = *(_QWORD *)(v0 + 416);
    v36 = *(_QWORD *)(v0 + 376);
    v37 = type metadata accessor for Logger(0);
    sub_10001A9E8(v37, (uint64_t)qword_1011B6748);
    v31(v32, v36, v33);
    v38 = sub_10005972C(v34, v35, type metadata accessor for MemberSharingCircle);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter(v39);
    v41 = os_log_type_enabled(v39, v40);
    v42 = *(_QWORD *)(v0 + 600);
    v43 = *(_QWORD *)(v0 + 464);
    v44 = *(_QWORD *)(v0 + 432);
    v45 = *(_QWORD *)(v0 + 440);
    v46 = *(_QWORD *)(v0 + 416);
    v47 = *(_QWORD *)(v0 + 424);
    if (v41)
    {
      v77 = *(_QWORD *)(v0 + 600);
      v48 = swift_slowAlloc(52, -1);
      v72 = (uint64_t *)swift_slowAlloc(8, -1);
      v75 = swift_slowAlloc(64, -1);
      v79 = v75;
      *(_DWORD *)v48 = 141559043;
      *(_QWORD *)(v48 + 4) = 1752392040;
      *(_WORD *)(v48 + 12) = 2081;
      v49 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v44, v49);
      *(_QWORD *)(v48 + 14) = sub_100016940(v50, v51, &v79);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
      *(_WORD *)(v48 + 22) = 2160;
      *(_QWORD *)(v48 + 24) = 1752392040;
      *(_WORD *)(v48 + 32) = 2081;
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v44, v49);
      *(_QWORD *)(v48 + 34) = sub_100016940(v52, v53, &v79);
      swift_bridgeObjectRelease();
      sub_1000126B0(v46, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v48 + 42) = 2112;
      v54 = sub_1000D97F8();
      v55 = swift_allocError(&type metadata for ShareKeysDownloadUseCase.Error, v54, 0, 0);
      *v56 = 0;
      v57 = _swift_stdlib_bridgeErrorToNSError(v55);
      *(_QWORD *)(v48 + 44) = v57;
      *v72 = v57;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Throttled key download for beaconIdentifier %{private,mask.hash}s,\nshare-id: %{private,mask.hash}s, error: %@.", (uint8_t *)v48, 0x34u);
      v58 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v72, 1, v58);
      swift_slowDealloc(v72, -1, -1);
      swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      swift_errorRelease(v77);
    }
    else
    {

      sub_1000126B0(v46, type metadata accessor for MemberSharingCircle);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
      swift_errorRelease(v42);
    }
    sub_1000126B0(v47, type metadata accessor for MemberSharingCircle);
    v1 = v78;
  }
  v60 = v1[1];
  swift_bridgeObjectRelease();
  if (v60 == 1)
  {
    v61 = *(_QWORD *)(v0 + 384);
    type metadata accessor for Transaction(0);
    v62 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v62 + 16, v61);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE398, v62);
    swift_release_n(v62, 2);
  }
  v63 = *(_QWORD *)(v0 + 464);
  v64 = *(_QWORD *)(v0 + 456);
  v66 = *(_QWORD *)(v0 + 416);
  v65 = *(_QWORD *)(v0 + 424);
  v67 = *(_QWORD *)(v0 + 408);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BAE4C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  return swift_task_switch(sub_1000BAE64, v0, 0);
}

uint64_t sub_1000BAE64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v0[9] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Looking for expired records...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[8];

  v7 = *(_QWORD *)(v6 + 200);
  v0[5] = type metadata accessor for MemberCircleRevokeManager();
  v0[6] = &off_1010B7198;
  v0[2] = v7;
  v8 = dword_1010F4154;
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[10] = v9;
  *v9 = v0;
  v9[1] = sub_1000BAF94;
  return sub_100254600((uint64_t)(v0 + 2));
}

uint64_t sub_1000BAF94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 64);
    v5 = sub_1000BB0A4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 64);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_1000BB008;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000BB008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  type metadata accessor for Transaction(0);
  v2 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v2 + 16, v1);
  swift_retain(v2);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE488, v2);
  swift_release_n(v2, 2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BB0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 88);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 88);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 56) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Expired share cleanup filed due to error: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 88);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v11 = *(_QWORD *)(v0 + 64);
  type metadata accessor for Transaction(0);
  v12 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v12 + 16, v11);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE488, v12);
  swift_release_n(v12, 2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BB29C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 24) = v0;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_1010F4138 + dword_1010F4138);
  v2 = (_QWORD *)swift_task_alloc(unk_1010F413C);
  *(_QWORD *)(v1 + 32) = v2;
  *v2 = v1;
  v2[1] = sub_1000BB2F8;
  return v4();
}

uint64_t sub_1000BB2F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000BB364, *(_QWORD *)(v3 + 24), 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000BB364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Orphaned sharing circles cleanup failed due to error: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 40));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BB530()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_1000BB548, v0, 0);
}

uint64_t sub_1000BB548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  *(_QWORD *)(v0 + 32) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Looking for orphaned sharing circle secrets...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = type metadata accessor for CheckDataIntegrityUseCase();
  swift_allocObject(v6, 128, 15);
  v7 = (_QWORD *)swift_task_alloc(dword_1010ECA2C);
  *(_QWORD *)(v0 + 40) = v7;
  *v7 = v0;
  v7[1] = sub_1000BB65C;
  return sub_100068460();
}

uint64_t sub_1000BB65C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(*v2 + 48) = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    *(_QWORD *)(v3 + 72) = v1;
    v5 = *(_QWORD *)(v3 + 24);
    v6 = sub_1000BB85C;
  }
  else
  {
    v6 = sub_1000BB6D0;
    v5 = 0;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000BB6D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v1 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
     + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_1000BB778;
  return ((uint64_t (*)(void *, _QWORD))v4)(&unk_1010EE480, *(_QWORD *)(v0 + 48));
}

uint64_t sub_1000BB778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_1000BB814;
  }
  else
  {
    swift_release();
    v3 = sub_1000BB7E4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BB7E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BB814()
{
  _QWORD *v0;

  swift_release_n(v0[6], 2);
  v0[9] = v0[8];
  return swift_task_switch(sub_1000BB85C, v0[3], 0);
}

uint64_t sub_1000BB85C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 72);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 72);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Orphaned sharing circle secrets cleanup failed due to error: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 72);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BB9E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[90] = v0;
  v2 = type metadata accessor for MemberSharingCircle(0);
  v1[91] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[92] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[93] = swift_task_alloc(v4);
  v1[94] = swift_task_alloc(v4);
  v1[95] = swift_task_alloc(v4);
  v1[96] = swift_task_alloc(v4);
  v1[97] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000BBA74, v0, 0);
}

uint64_t sub_1000BBA74()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  id v3;
  NSString v4;
  id v5;
  BOOL v6;
  uint64_t v7;

  v1 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v2 = objc_msgSend(v1, "isInternalBuild");

  if (v2)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "integerForKey:", v4);

    v6 = v5 != (id)2;
  }
  else
  {
    v6 = 0;
  }
  *(_BYTE *)(v0 + 957) = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(v0 + 720) + 136);
  *(_QWORD *)(v0 + 784) = v7;
  return swift_task_switch(sub_1000BBB6C, v7, 0);
}

uint64_t sub_1000BBB6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 792) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_1000BBBE8;
  return unsafeBlocking<A>(_:)(v0 + 712, sub_10001ED30, *(_QWORD *)(v0 + 784), v3);
}

uint64_t sub_1000BBBE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 784);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 792));
  swift_release();
  return swift_task_switch(sub_1000BBC48, v1, 0);
}

uint64_t sub_1000BBC48()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[90];
  v0[100] = v0[89];
  return swift_task_switch(sub_1000BBC64, v1, 0);
}

uint64_t sub_1000BBC64()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  id v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (_BYTE *)(v0 + 957);
  result = *(_QWORD *)(v0 + 800);
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)(v0 + 808) = v3;
  if (v3)
  {
    v4 = *v1;
    v5 = *(_DWORD *)(*(_QWORD *)(v0 + 736) + 80);
    *(_DWORD *)(v0 + 952) = v5;
    *(_BYTE *)(v0 + 958) = 0;
    *(_QWORD *)(v0 + 816) = 0;
    if (*(_QWORD *)(result + 16))
    {
      sub_10005972C(result + ((v5 + 32) & ~(unint64_t)v5), *(_QWORD *)(v0 + 776), type metadata accessor for MemberSharingCircle);
      v6 = *(_QWORD *)(v0 + 720);
      if (v4)
      {
        v7 = *(_QWORD *)(v6 + 200);
        v8 = type metadata accessor for MemberCircleRevokeManager();
        *(_QWORD *)(v0 + 824) = v8;
        *(_QWORD *)(v0 + 520) = v8;
        *(_QWORD *)(v0 + 528) = &off_1010B7198;
        *(_QWORD *)(v0 + 496) = v7;
        swift_retain();
        v9 = sub_1000BBE20;
      }
      else
      {
        v16 = *(_QWORD *)(v6 + 200);
        v17 = type metadata accessor for MemberCircleRevokeManager();
        *(_QWORD *)(v0 + 888) = v17;
        *(_QWORD *)(v0 + 80) = v17;
        *(_QWORD *)(v0 + 88) = &off_1010B7198;
        *(_QWORD *)(v0 + 56) = v16;
        swift_retain();
        v9 = sub_1000BCE78;
      }
      return swift_task_switch(v9, 0, 0);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((*v1 & 1) != 0)
    {
      v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v11 = String._bridgeToObjectiveC()();
      objc_msgSend(v10, "setInteger:forKey:", 2, v11);

    }
    v12 = *(_QWORD *)(v0 + 768);
    v13 = *(_QWORD *)(v0 + 760);
    v14 = *(_QWORD *)(v0 + 752);
    v15 = *(_QWORD *)(v0 + 744);
    swift_task_dealloc(*(_QWORD *)(v0 + 776));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1000BBE20()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 656, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 616, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 640))
  {
    sub_10000F9FC((__int128 *)(v0 + 616), v0 + 536);
    sub_10001AA44((_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 560));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 832) = v2;
    *v2 = v0;
    v2[1] = sub_1000BBF0C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BBF0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 832);
  *(_QWORD *)(*(_QWORD *)v1 + 840) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000BBF68, 0, 0);
}

uint64_t sub_1000BBF68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;

  v1 = (_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 840);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 824);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = type metadata accessor for SharingCircleKeyManager();
    v5 = swift_allocObject(v4, 128, 15);
    *(_QWORD *)(v0 + 848) = v5;
    swift_retain();
    swift_defaultActor_initialize(v5);
    v6 = type metadata accessor for KeyDropInterface();
    v7 = swift_allocObject(v6, 128, 15);
    swift_defaultActor_initialize(v7);
    *(_QWORD *)(v7 + 112) = 0;
    *(_QWORD *)(v7 + 120) = 0;
    *(_QWORD *)(v5 + 112) = v7;
    *(_QWORD *)(v5 + 120) = v2;
    sub_100030784(v0 + 496, v0 + 576);
    v8 = *(_QWORD *)(v0 + 600);
    sub_10009F5D0(v0 + 576, v8);
    v9 = *(_QWORD *)(v8 - 8);
    v33 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(void))(v9 + 16))();
    v10 = *v33;
    *(_QWORD *)(v0 + 280) = v4;
    *(_QWORD *)(v0 + 288) = &off_10109BDA0;
    *(_QWORD *)(v0 + 248) = &off_1010B7198;
    *(_QWORD *)(v0 + 256) = v5;
    *(_QWORD *)(v0 + 240) = v3;
    *(_QWORD *)(v0 + 216) = v10;
    v11 = type metadata accessor for ShareKeysDownloadUseCase();
    v12 = swift_allocObject(v11, 200, 15);
    *(_QWORD *)(v0 + 856) = v12;
    v13 = sub_10009F5D0(v0 + 256, v4);
    v14 = *(_QWORD *)(v4 - 8);
    v32 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v32, v13, v4);
    v15 = *(_QWORD *)(v0 + 240);
    v16 = sub_10009F5D0(v0 + 216, v15);
    v17 = v2;
    v18 = *(_QWORD *)(v15 - 8);
    v19 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v19, v16, v15);
    v20 = *v32;
    v21 = *v19;
    *(_QWORD *)(v0 + 160) = v4;
    *(_QWORD *)(v0 + 168) = &off_10109BDA0;
    *(_QWORD *)(v0 + 136) = v20;
    *(_QWORD *)(v0 + 440) = v3;
    *(_QWORD *)(v0 + 448) = &off_1010B7198;
    *(_QWORD *)(v0 + 416) = v21;
    swift_retain();
    swift_retain();
    swift_defaultActor_initialize(v12);
    sub_10000F9FC((__int128 *)(v0 + 136), v12 + 112);
    *(_QWORD *)(v12 + 152) = v17;
    sub_10000F9FC((__int128 *)(v0 + 416), v12 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 216));
    swift_task_dealloc(v19);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 256));
    swift_task_dealloc(v32);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 576));
    swift_task_dealloc(v33);
    v22 = (_QWORD *)swift_task_alloc(dword_1010FFC6C);
    *(_QWORD *)(v0 + 864) = v22;
    *v22 = v0;
    v22[1] = sub_1000BC32C;
    return sub_1005A8B28(*(_QWORD *)(v0 + 776));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6748);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No BeaconStoreActor available!", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = sub_100033220();
    v30 = swift_allocError(&type metadata for DaemonError, v29, 0, 0);
    *v31 = 0xD000000000000010;
    v31[1] = 0x8000000100EC6470;
    swift_willThrow(v30);
    *(_QWORD *)(v0 + 880) = v30;
    return swift_task_switch(sub_1000BC6B4, *(_QWORD *)(v0 + 720), 0);
  }
}

uint64_t sub_1000BC32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 864);
  *(_QWORD *)(*(_QWORD *)v1 + 872) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000BC658;
  else
    v3 = sub_1000BC390;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BC390()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 720);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 496));
  return swift_task_switch(sub_1000BC3FC, v1, 0);
}

uint64_t sub_1000BC3FC()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;

  v1 = (_BYTE *)(v0 + 957);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 816) + 1;
  result = sub_1000126B0(*(_QWORD *)(v0 + 776), type metadata accessor for MemberSharingCircle);
  if (v3 == v2)
  {
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v0 + 720);
    type metadata accessor for Transaction(0);
    v6 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v6 + 16, v5);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE478, v6);
    swift_release_n(v6, 2);
    if (*v1 == 1)
    {
      v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v8 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setInteger:forKey:", 2, v8);

    }
    v9 = *(_QWORD *)(v0 + 768);
    v10 = *(_QWORD *)(v0 + 760);
    v11 = *(_QWORD *)(v0 + 752);
    v12 = *(_QWORD *)(v0 + 744);
    swift_task_dealloc(*(_QWORD *)(v0 + 776));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 816) + 1;
    *(_BYTE *)(v0 + 958) = 1;
    *(_QWORD *)(v0 + 816) = v13;
    v14 = *(_QWORD *)(v0 + 800);
    if (v13 >= *(_QWORD *)(v14 + 16))
    {
      __break(1u);
    }
    else
    {
      v15 = *v1;
      sub_10005972C(v14+ ((*(unsigned __int8 *)(v0 + 952) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 952))+ *(_QWORD *)(*(_QWORD *)(v0 + 736) + 72) * v13, *(_QWORD *)(v0 + 776), type metadata accessor for MemberSharingCircle);
      v16 = *(_QWORD *)(v0 + 720);
      if (v15 == 1)
      {
        v17 = *(_QWORD *)(v16 + 200);
        v18 = type metadata accessor for MemberCircleRevokeManager();
        *(_QWORD *)(v0 + 824) = v18;
        *(_QWORD *)(v0 + 520) = v18;
        *(_QWORD *)(v0 + 528) = &off_1010B7198;
        *(_QWORD *)(v0 + 496) = v17;
        swift_retain();
        v19 = sub_1000BBE20;
      }
      else
      {
        v20 = *(_QWORD *)(v16 + 200);
        v21 = type metadata accessor for MemberCircleRevokeManager();
        *(_QWORD *)(v0 + 888) = v21;
        *(_QWORD *)(v0 + 80) = v21;
        *(_QWORD *)(v0 + 88) = &off_1010B7198;
        *(_QWORD *)(v0 + 56) = v20;
        swift_retain();
        v19 = sub_1000BCE78;
      }
      return swift_task_switch(v19, 0, 0);
    }
  }
  return result;
}

uint64_t sub_1000BC658()
{
  _QWORD *v0;

  swift_release();
  swift_release();
  swift_release();
  v0[110] = v0[109];
  return swift_task_switch(sub_1000BC6B4, v0[90], 0);
}

uint64_t sub_1000BC6B4()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  NSString v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)();
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;

  v1 = (_BYTE *)(v0 + 956);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 496));
  v2 = *(_QWORD *)(v0 + 880);
  *(_QWORD *)(v0 + 704) = v2;
  swift_errorRetain(v2);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v0 + 956, v0 + 704, v3, &type metadata for ShareKeysDownloadUseCase.Error, 6) & 1) != 0
    && (*v1 & 1) == 0)
  {
    if (qword_1010E9938 != -1)
      goto LABEL_25;
    goto LABEL_9;
  }
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v4 = *(_QWORD *)(v0 + 776);
  v5 = *(_QWORD *)(v0 + 752);
  v6 = *(_QWORD *)(v0 + 744);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B6748);
  sub_10005972C(v4, v5, type metadata accessor for MemberSharingCircle);
  v8 = sub_10005972C(v4, v6, type metadata accessor for MemberSharingCircle);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (!os_log_type_enabled(v9, v10))
  {
    v22 = *(_QWORD *)(v0 + 776);
    v23 = *(_QWORD *)(v0 + 752);
    v24 = *(_QWORD *)(v0 + 744);

    v25 = v24;
    goto LABEL_12;
  }
  v63 = *(unsigned __int8 *)(v0 + 957);
  v65 = *(_QWORD *)(v0 + 776);
  v67 = v2;
  v11 = *(_QWORD *)(v0 + 752);
  v61 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 728);
  v12 = swift_slowAlloc(48, -1);
  v70 = swift_slowAlloc(64, -1);
  v13 = v70;
  *(_DWORD *)v12 = 141559043;
  *(_QWORD *)(v12 + 4) = 1752392040;
  *(_WORD *)(v12 + 12) = 2081;
  v14 = type metadata accessor for UUID(0);
  v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  *(_QWORD *)(v12 + 14) = sub_100016940(v16, v17, &v70);
  swift_bridgeObjectRelease();
  sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
  *(_WORD *)(v12 + 22) = 2160;
  *(_QWORD *)(v12 + 24) = 1752392040;
  *(_WORD *)(v12 + 32) = 2081;
  v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  *(_QWORD *)(v12 + 34) = sub_100016940(v18, v19, &v70);
  swift_bridgeObjectRelease();
  sub_1000126B0(v61, type metadata accessor for MemberSharingCircle);
  *(_WORD *)(v12 + 42) = 1024;
  *(_DWORD *)(v12 + 44) = v63;
  _os_log_impl((void *)&_mh_execute_header, v9, v10, "\"Failed to download keys on schedule for\nmemberCircle: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s,\nrestoreAllKeys: %{BOOL}d.", (uint8_t *)v12, 0x30u);
  swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
  v20 = v13;
  v1 = (_BYTE *)(v0 + 956);
  swift_slowDealloc(v20, -1, -1);
  swift_slowDealloc(v12, -1, -1);

  swift_errorRelease(v67);
  v21 = v65;
  while (1)
  {
    sub_1000126B0(v21, type metadata accessor for MemberSharingCircle);
    v43 = *(_QWORD *)(v0 + 816) + 1;
    if (v43 == *(_QWORD *)(v0 + 808))
      break;
    *(_QWORD *)(v0 + 816) = v43;
    v54 = *(_QWORD *)(v0 + 800);
    if (v43 < *(_QWORD *)(v54 + 16))
    {
      v55 = v1[1];
      sub_10005972C(v54+ ((*(unsigned __int8 *)(v0 + 952) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 952))+ *(_QWORD *)(*(_QWORD *)(v0 + 736) + 72) * v43, *(_QWORD *)(v0 + 776), type metadata accessor for MemberSharingCircle);
      if (v55 == 1)
      {
        v56 = *(_QWORD *)(*(_QWORD *)(v0 + 720) + 200);
        v57 = type metadata accessor for MemberCircleRevokeManager();
        *(_QWORD *)(v0 + 824) = v57;
        *(_QWORD *)(v0 + 520) = v57;
        *(_QWORD *)(v0 + 528) = &off_1010B7198;
        *(_QWORD *)(v0 + 496) = v56;
        swift_retain();
        v58 = sub_1000BBE20;
      }
      else
      {
        v59 = *(_QWORD *)(*(_QWORD *)(v0 + 720) + 200);
        v60 = type metadata accessor for MemberCircleRevokeManager();
        *(_QWORD *)(v0 + 888) = v60;
        *(_QWORD *)(v0 + 80) = v60;
        *(_QWORD *)(v0 + 88) = &off_1010B7198;
        *(_QWORD *)(v0 + 56) = v59;
        swift_retain();
        v58 = sub_1000BCE78;
      }
      return swift_task_switch(v58, 0, 0);
    }
    __break(1u);
LABEL_25:
    swift_once(&qword_1010E9938, sub_1000AFBB0);
LABEL_9:
    v26 = *(_QWORD *)(v0 + 776);
    v27 = *(_QWORD *)(v0 + 768);
    v28 = *(_QWORD *)(v0 + 760);
    v29 = type metadata accessor for Logger(0);
    sub_10001A9E8(v29, (uint64_t)qword_1011B6748);
    sub_10005972C(v26, v27, type metadata accessor for MemberSharingCircle);
    v30 = sub_10005972C(v26, v28, type metadata accessor for MemberSharingCircle);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v64 = v1[1];
      v66 = *(_QWORD *)(v0 + 776);
      v33 = *(_QWORD *)(v0 + 768);
      v62 = *(_QWORD *)(v0 + 760);
      v34 = swift_slowAlloc(48, -1);
      v69 = v1;
      v70 = swift_slowAlloc(64, -1);
      v35 = v70;
      *(_DWORD *)v34 = 141559043;
      *(_QWORD *)(v34 + 4) = 1752392040;
      *(_WORD *)(v34 + 12) = 2081;
      v36 = type metadata accessor for UUID(0);
      v68 = v2;
      v2 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v36, v2);
      *(_QWORD *)(v34 + 14) = sub_100016940(v37, v38, &v70);
      swift_bridgeObjectRelease();
      sub_1000126B0(v33, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v34 + 22) = 2160;
      *(_QWORD *)(v34 + 24) = 1752392040;
      *(_WORD *)(v34 + 32) = 2081;
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v36, v2);
      *(_QWORD *)(v34 + 34) = sub_100016940(v39, v40, &v70);
      swift_bridgeObjectRelease();
      sub_1000126B0(v62, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v34 + 42) = 1024;
      *(_DWORD *)(v34 + 44) = v64;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "\"Throttled key download on schedule for\nmemberCircle: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s,\nrestoreAllKeys: %{BOOL}d.", (uint8_t *)v34, 0x30u);
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      v41 = v35;
      v1 = v69;
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      swift_errorRelease(v68);
      v21 = v66;
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 776);
      v23 = *(_QWORD *)(v0 + 768);
      v42 = *(_QWORD *)(v0 + 760);

      v25 = v42;
LABEL_12:
      sub_1000126B0(v25, type metadata accessor for MemberSharingCircle);
      sub_1000126B0(v23, type metadata accessor for MemberSharingCircle);
      swift_errorRelease(v2);
      v21 = v22;
    }
  }
  v44 = v1[2];
  swift_bridgeObjectRelease();
  if (v44 == 1)
  {
    v45 = *(_QWORD *)(v0 + 720);
    type metadata accessor for Transaction(0);
    v46 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v46 + 16, v45);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE478, v46);
    swift_release_n(v46, 2);
  }
  if (v1[1] == 1)
  {
    v47 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v48 = String._bridgeToObjectiveC()();
    objc_msgSend(v47, "setInteger:forKey:", 2, v48);

  }
  v49 = *(_QWORD *)(v0 + 768);
  v50 = *(_QWORD *)(v0 + 760);
  v51 = *(_QWORD *)(v0 + 752);
  v52 = *(_QWORD *)(v0 + 744);
  swift_task_dealloc(*(_QWORD *)(v0 + 776));
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BCE78()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 680, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 176, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 200))
  {
    sub_10000F9FC((__int128 *)(v0 + 176), v0 + 96);
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 896) = v2;
    *v2 = v0;
    v2[1] = sub_1000BCF64;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BCF64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 896);
  *(_QWORD *)(*(_QWORD *)v1 + 904) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000BCFC0, 0, 0);
}

uint64_t sub_1000BCFC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;

  v1 = (_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 904);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 888);
    v32 = v3;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = type metadata accessor for SharingCircleKeyManager();
    v5 = swift_allocObject(v4, 128, 15);
    *(_QWORD *)(v0 + 912) = v5;
    swift_retain();
    swift_defaultActor_initialize(v5);
    v6 = type metadata accessor for KeyDropInterface();
    v7 = swift_allocObject(v6, 128, 15);
    swift_defaultActor_initialize(v7);
    *(_QWORD *)(v7 + 112) = 0;
    *(_QWORD *)(v7 + 120) = 0;
    *(_QWORD *)(v5 + 112) = v7;
    *(_QWORD *)(v5 + 120) = v2;
    sub_100030784(v0 + 56, v0 + 296);
    v8 = *(_QWORD *)(v0 + 320);
    sub_10009F5D0(v0 + 296, v8);
    v9 = *(_QWORD *)(v8 - 8);
    v33 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(void))(v9 + 16))();
    v10 = *v33;
    *(_QWORD *)(v0 + 360) = v4;
    *(_QWORD *)(v0 + 368) = &off_10109BDA0;
    *(_QWORD *)(v0 + 336) = v5;
    *(_QWORD *)(v0 + 400) = v3;
    *(_QWORD *)(v0 + 408) = &off_1010B7198;
    *(_QWORD *)(v0 + 376) = v10;
    v11 = type metadata accessor for ShareKeysDownloadUseCase();
    v12 = swift_allocObject(v11, 200, 15);
    *(_QWORD *)(v0 + 920) = v12;
    v13 = sub_10009F5D0(v0 + 336, v4);
    v14 = *(_QWORD *)(v4 - 8);
    v15 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v15, v13, v4);
    v16 = *(_QWORD *)(v0 + 400);
    v17 = sub_10009F5D0(v0 + 376, v16);
    v18 = *(_QWORD *)(v16 - 8);
    v19 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v19, v17, v16);
    v20 = *v15;
    v21 = *v19;
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = &off_10109BDA0;
    *(_QWORD *)(v0 + 16) = v20;
    *(_QWORD *)(v0 + 480) = v32;
    *(_QWORD *)(v0 + 488) = &off_1010B7198;
    *(_QWORD *)(v0 + 456) = v21;
    swift_retain();
    swift_retain();
    swift_defaultActor_initialize(v12);
    sub_10000F9FC((__int128 *)(v0 + 16), v12 + 112);
    *(_QWORD *)(v12 + 152) = v2;
    sub_10000F9FC((__int128 *)(v0 + 456), v12 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 376));
    swift_task_dealloc(v19);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 336));
    swift_task_dealloc(v15);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 296));
    swift_task_dealloc(v33);
    v22 = (_QWORD *)swift_task_alloc(dword_1010FFC54);
    *(_QWORD *)(v0 + 928) = v22;
    *v22 = v0;
    v22[1] = sub_1000BD37C;
    return sub_1005A0300(*(_QWORD *)(v0 + 776));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6748);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No BeaconStoreActor available!", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = sub_100033220();
    v30 = swift_allocError(&type metadata for DaemonError, v29, 0, 0);
    *v31 = 0xD000000000000010;
    v31[1] = 0x8000000100EC6470;
    swift_willThrow(v30);
    *(_QWORD *)(v0 + 944) = v30;
    return swift_task_switch(sub_1000BD4A8, *(_QWORD *)(v0 + 720), 0);
  }
}

uint64_t sub_1000BD37C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 928);
  *(_QWORD *)(*(_QWORD *)v1 + 936) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000BD44C;
  else
    v3 = sub_1000BD3E0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BD3E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 720);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  return swift_task_switch(sub_1000DB6E4, v1, 0);
}

uint64_t sub_1000BD44C()
{
  _QWORD *v0;

  swift_release();
  swift_release();
  swift_release();
  v0[118] = v0[117];
  return swift_task_switch(sub_1000BD4A8, v0[90], 0);
}

uint64_t sub_1000BD4A8()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  NSString v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)();
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;

  v1 = (_BYTE *)(v0 + 956);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  v2 = *(_QWORD *)(v0 + 944);
  *(_QWORD *)(v0 + 704) = v2;
  swift_errorRetain(v2);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v0 + 956, v0 + 704, v3, &type metadata for ShareKeysDownloadUseCase.Error, 6) & 1) != 0
    && (*v1 & 1) == 0)
  {
    if (qword_1010E9938 != -1)
      goto LABEL_25;
    goto LABEL_9;
  }
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v4 = *(_QWORD *)(v0 + 776);
  v5 = *(_QWORD *)(v0 + 752);
  v6 = *(_QWORD *)(v0 + 744);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B6748);
  sub_10005972C(v4, v5, type metadata accessor for MemberSharingCircle);
  v8 = sub_10005972C(v4, v6, type metadata accessor for MemberSharingCircle);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (!os_log_type_enabled(v9, v10))
  {
    v22 = *(_QWORD *)(v0 + 776);
    v23 = *(_QWORD *)(v0 + 752);
    v24 = *(_QWORD *)(v0 + 744);

    v25 = v24;
    goto LABEL_12;
  }
  v63 = *(unsigned __int8 *)(v0 + 957);
  v65 = *(_QWORD *)(v0 + 776);
  v67 = v2;
  v11 = *(_QWORD *)(v0 + 752);
  v61 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 728);
  v12 = swift_slowAlloc(48, -1);
  v70 = swift_slowAlloc(64, -1);
  v13 = v70;
  *(_DWORD *)v12 = 141559043;
  *(_QWORD *)(v12 + 4) = 1752392040;
  *(_WORD *)(v12 + 12) = 2081;
  v14 = type metadata accessor for UUID(0);
  v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  *(_QWORD *)(v12 + 14) = sub_100016940(v16, v17, &v70);
  swift_bridgeObjectRelease();
  sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
  *(_WORD *)(v12 + 22) = 2160;
  *(_QWORD *)(v12 + 24) = 1752392040;
  *(_WORD *)(v12 + 32) = 2081;
  v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  *(_QWORD *)(v12 + 34) = sub_100016940(v18, v19, &v70);
  swift_bridgeObjectRelease();
  sub_1000126B0(v61, type metadata accessor for MemberSharingCircle);
  *(_WORD *)(v12 + 42) = 1024;
  *(_DWORD *)(v12 + 44) = v63;
  _os_log_impl((void *)&_mh_execute_header, v9, v10, "\"Failed to download keys on schedule for\nmemberCircle: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s,\nrestoreAllKeys: %{BOOL}d.", (uint8_t *)v12, 0x30u);
  swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
  v20 = v13;
  v1 = (_BYTE *)(v0 + 956);
  swift_slowDealloc(v20, -1, -1);
  swift_slowDealloc(v12, -1, -1);

  swift_errorRelease(v67);
  v21 = v65;
  while (1)
  {
    sub_1000126B0(v21, type metadata accessor for MemberSharingCircle);
    v43 = *(_QWORD *)(v0 + 816) + 1;
    if (v43 == *(_QWORD *)(v0 + 808))
      break;
    *(_QWORD *)(v0 + 816) = v43;
    v54 = *(_QWORD *)(v0 + 800);
    if (v43 < *(_QWORD *)(v54 + 16))
    {
      v55 = v1[1];
      sub_10005972C(v54+ ((*(unsigned __int8 *)(v0 + 952) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 952))+ *(_QWORD *)(*(_QWORD *)(v0 + 736) + 72) * v43, *(_QWORD *)(v0 + 776), type metadata accessor for MemberSharingCircle);
      if (v55 == 1)
      {
        v56 = *(_QWORD *)(*(_QWORD *)(v0 + 720) + 200);
        v57 = type metadata accessor for MemberCircleRevokeManager();
        *(_QWORD *)(v0 + 824) = v57;
        *(_QWORD *)(v0 + 520) = v57;
        *(_QWORD *)(v0 + 528) = &off_1010B7198;
        *(_QWORD *)(v0 + 496) = v56;
        swift_retain();
        v58 = sub_1000BBE20;
      }
      else
      {
        v59 = *(_QWORD *)(*(_QWORD *)(v0 + 720) + 200);
        v60 = type metadata accessor for MemberCircleRevokeManager();
        *(_QWORD *)(v0 + 888) = v60;
        *(_QWORD *)(v0 + 80) = v60;
        *(_QWORD *)(v0 + 88) = &off_1010B7198;
        *(_QWORD *)(v0 + 56) = v59;
        swift_retain();
        v58 = sub_1000BCE78;
      }
      return swift_task_switch(v58, 0, 0);
    }
    __break(1u);
LABEL_25:
    swift_once(&qword_1010E9938, sub_1000AFBB0);
LABEL_9:
    v26 = *(_QWORD *)(v0 + 776);
    v27 = *(_QWORD *)(v0 + 768);
    v28 = *(_QWORD *)(v0 + 760);
    v29 = type metadata accessor for Logger(0);
    sub_10001A9E8(v29, (uint64_t)qword_1011B6748);
    sub_10005972C(v26, v27, type metadata accessor for MemberSharingCircle);
    v30 = sub_10005972C(v26, v28, type metadata accessor for MemberSharingCircle);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v64 = v1[1];
      v66 = *(_QWORD *)(v0 + 776);
      v33 = *(_QWORD *)(v0 + 768);
      v62 = *(_QWORD *)(v0 + 760);
      v34 = swift_slowAlloc(48, -1);
      v69 = v1;
      v70 = swift_slowAlloc(64, -1);
      v35 = v70;
      *(_DWORD *)v34 = 141559043;
      *(_QWORD *)(v34 + 4) = 1752392040;
      *(_WORD *)(v34 + 12) = 2081;
      v36 = type metadata accessor for UUID(0);
      v68 = v2;
      v2 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v36, v2);
      *(_QWORD *)(v34 + 14) = sub_100016940(v37, v38, &v70);
      swift_bridgeObjectRelease();
      sub_1000126B0(v33, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v34 + 22) = 2160;
      *(_QWORD *)(v34 + 24) = 1752392040;
      *(_WORD *)(v34 + 32) = 2081;
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v36, v2);
      *(_QWORD *)(v34 + 34) = sub_100016940(v39, v40, &v70);
      swift_bridgeObjectRelease();
      sub_1000126B0(v62, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v34 + 42) = 1024;
      *(_DWORD *)(v34 + 44) = v64;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "\"Throttled key download on schedule for\nmemberCircle: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s,\nrestoreAllKeys: %{BOOL}d.", (uint8_t *)v34, 0x30u);
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      v41 = v35;
      v1 = v69;
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      swift_errorRelease(v68);
      v21 = v66;
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 776);
      v23 = *(_QWORD *)(v0 + 768);
      v42 = *(_QWORD *)(v0 + 760);

      v25 = v42;
LABEL_12:
      sub_1000126B0(v25, type metadata accessor for MemberSharingCircle);
      sub_1000126B0(v23, type metadata accessor for MemberSharingCircle);
      swift_errorRelease(v2);
      v21 = v22;
    }
  }
  v44 = v1[2];
  swift_bridgeObjectRelease();
  if (v44 == 1)
  {
    v45 = *(_QWORD *)(v0 + 720);
    type metadata accessor for Transaction(0);
    v46 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v46 + 16, v45);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE478, v46);
    swift_release_n(v46, 2);
  }
  if (v1[1] == 1)
  {
    v47 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v48 = String._bridgeToObjectiveC()();
    objc_msgSend(v47, "setInteger:forKey:", 2, v48);

  }
  v49 = *(_QWORD *)(v0 + 768);
  v50 = *(_QWORD *)(v0 + 760);
  v51 = *(_QWORD *)(v0 + 752);
  v52 = *(_QWORD *)(v0 + 744);
  swift_task_dealloc(*(_QWORD *)(v0 + 776));
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BDC6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[8] = v0;
  v2 = type metadata accessor for OwnerSharingCircle(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  v1[13] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000BDCE8, v0, 0);
}

uint64_t sub_1000BDCE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 136);
  *(_QWORD *)(v0 + 112) = v1;
  return swift_task_switch(sub_1000BDD04, v1, 0);
}

uint64_t sub_1000BDD04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 120) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_1000BDD80;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100068004, *(_QWORD *)(v0 + 112), v3);
}

uint64_t sub_1000BDD80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_1000BDDDC, v1, 0);
}

uint64_t sub_1000BDDDC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[16] = v0[2];
  return swift_task_switch(sub_1000BDDF8, v1, 0);
}

uint64_t sub_1000BDDF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 16);
  *(_QWORD *)(v0 + 136) = v1;
  if (v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(v0 + 80);
    *(_DWORD *)(v0 + 176) = *(_DWORD *)(v3 + 80);
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v3 + 72);
    while (1)
    {
      *(_QWORD *)(v0 + 152) = v2;
      v4 = *(_QWORD *)(v0 + 104);
      v5 = *(_QWORD *)(v0 + 72);
      sub_10005972C(*(_QWORD *)(v0 + 128)+ ((*(unsigned __int8 *)(v0 + 176) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 176))+ *(_QWORD *)(v0 + 144) * v2, v4, type metadata accessor for OwnerSharingCircle);
      if (*(_BYTE *)(v4 + *(int *)(v5 + 36)) == 1)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for OwnerSharingCircle);
      v2 = *(_QWORD *)(v0 + 152) + 1;
      if (v2 == *(_QWORD *)(v0 + 136))
        goto LABEL_5;
    }
    v9 = (_QWORD *)swift_task_alloc(dword_1010EE2BC);
    *(_QWORD *)(v0 + 160) = v9;
    *v9 = v0;
    v9[1] = sub_1000BDF24;
    return sub_1000C2B20(*(_QWORD *)(v0 + 104), 0);
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000BDF24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000BE0B0;
  else
    v4 = sub_1000BDF88;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_1000BDF88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 152) + 1;
  if (v1 == *(_QWORD *)(v0 + 136))
  {
LABEL_4:
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 152) = v1;
      v2 = *(_QWORD *)(v0 + 104);
      v3 = *(_QWORD *)(v0 + 72);
      sub_10005972C(*(_QWORD *)(v0 + 128)+ ((*(unsigned __int8 *)(v0 + 176) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 176))+ *(_QWORD *)(v0 + 144) * v1, v2, type metadata accessor for OwnerSharingCircle);
      if (*(_BYTE *)(v2 + *(int *)(v3 + 36)) == 1)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for OwnerSharingCircle);
      v1 = *(_QWORD *)(v0 + 152) + 1;
      if (v1 == *(_QWORD *)(v0 + 136))
        goto LABEL_4;
    }
    v7 = (_QWORD *)swift_task_alloc(dword_1010EE2BC);
    *(_QWORD *)(v0 + 160) = v7;
    *v7 = v0;
    v7[1] = sub_1000BDF24;
    return sub_1000C2B20(*(_QWORD *)(v0 + 104), 0);
  }
}

uint64_t sub_1000BE0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  sub_10005972C(v2, v3, type metadata accessor for OwnerSharingCircle);
  sub_10005972C(v2, v4, type metadata accessor for OwnerSharingCircle);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 88);
  if (v9)
  {
    type = v8;
    v14 = swift_slowAlloc(52, -1);
    v31 = (uint64_t *)swift_slowAlloc(8, -1);
    v34 = swift_slowAlloc(64, -1);
    v35 = v34;
    *(_DWORD *)v14 = 141559043;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = type metadata accessor for UUID(0);
    v32 = v12;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    *(_QWORD *)(v0 + 32) = sub_100016940(v17, v18, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v14 + 22) = 2160;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 24, v14 + 32);
    *(_WORD *)(v14 + 32) = 2081;
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    *(_QWORD *)(v0 + 48) = sub_100016940(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v14 + 34, v14 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v13, type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v14 + 42) = 2114;
    swift_errorRetain(v10);
    v21 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 56) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v14 + 44, v14 + 52);
    *v31 = v21;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Failed to upload keys for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s error: %{public}@.", (uint8_t *)v14, 0x34u);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v31, 1, v22);
    swift_slowDealloc(v31, -1, -1);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v10);
    v23 = v32;
  }
  else
  {

    swift_errorRelease(v10);
    swift_errorRelease(v10);
    sub_1000126B0(v13, type metadata accessor for OwnerSharingCircle);
    sub_1000126B0(v11, type metadata accessor for OwnerSharingCircle);
    swift_errorRelease(v10);
    v23 = v12;
  }
  sub_1000126B0(v23, type metadata accessor for OwnerSharingCircle);
  v24 = *(_QWORD *)(v0 + 152) + 1;
  if (v24 == *(_QWORD *)(v0 + 136))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v0 + 96);
    v28 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 152) = v24;
      v25 = *(_QWORD *)(v0 + 104);
      v26 = *(_QWORD *)(v0 + 72);
      sub_10005972C(*(_QWORD *)(v0 + 128)+ ((*(unsigned __int8 *)(v0 + 176) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 176))+ *(_QWORD *)(v0 + 144) * v24, v25, type metadata accessor for OwnerSharingCircle);
      if (*(_BYTE *)(v25 + *(int *)(v26 + 36)) == 1)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for OwnerSharingCircle);
      v24 = *(_QWORD *)(v0 + 152) + 1;
      if (v24 == *(_QWORD *)(v0 + 136))
        goto LABEL_9;
    }
    v30 = (_QWORD *)swift_task_alloc(dword_1010EE2BC);
    *(_QWORD *)(v0 + 160) = v30;
    *v30 = v0;
    v30[1] = sub_1000BDF24;
    return sub_1000C2B20(*(_QWORD *)(v0 + 104), 0);
  }
}

uint64_t sub_1000BE59C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  return swift_task_switch(sub_1000BE5B4, 0, 0);
}

uint64_t sub_1000BE5B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 64) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = *(_QWORD *)(Strong + 136);
  *(_QWORD *)(v0 + 72) = v3;
  return swift_task_switch(sub_1000BE62C, v3, 0);
}

uint64_t sub_1000BE62C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 80) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_1000BE6A8;
  return unsafeBlocking<A>(_:)(v0 + 40, sub_100068004, *(_QWORD *)(v0 + 72), v3);
}

uint64_t sub_1000BE6A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release();
  return swift_task_switch(sub_1000BE704, v1, 0);
}

uint64_t sub_1000BE704()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 40);
  return swift_task_switch(sub_1000BE720, 0, 0);
}

uint64_t sub_1000BE720()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[8];
  v0[12] = *(_QWORD *)(v0[11] + 16);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 136);
  v0[13] = v2;
  return swift_task_switch(sub_1000BE76C, v2, 0);
}

uint64_t sub_1000BE76C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 112) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_1000BE7E8;
  return unsafeBlocking<A>(_:)(v0 + 48, sub_10001ED30, *(_QWORD *)(v0 + 104), v3);
}

uint64_t sub_1000BE7E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_release();
  return swift_task_switch(sub_1000BE844, v1, 0);
}

uint64_t sub_1000BE844()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 48);
  return swift_task_switch(sub_1000BE860, 0, 0);
}

uint64_t sub_1000BE860()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0[15] + 16);
  swift_bridgeObjectRelease();
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1011135D0 + dword_1011135D0);
  v2 = (_QWORD *)swift_task_alloc(unk_1011135D4);
  v0[16] = v2;
  *v2 = v0;
  v2[1] = sub_1000BE8D0;
  return v4(v0[12], v1);
}

uint64_t sub_1000BE8D0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_1000BE924, 0, 0);
}

uint64_t sub_1000BE924()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 64) != 0);
}

uint64_t sub_1000BE960(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_10001A9A8(&qword_1010EE390);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000BE9BC, v1, 0);
}

uint64_t sub_1000BE9BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[11];
  v2 = v0[9];
  swift_beginAccess(v0[10] + 232, v0 + 2, 33, 0);
  v3 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1, v2, v3);
  sub_100775CA0(0, 0, v1);
  swift_endAccess(v0 + 2);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v0[12] = qword_1011B71A8;
  return swift_task_switch(sub_1000BEA8C, 0, 0);
}

uint64_t sub_1000BEA8C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 104) = v2;
  *v2 = v0;
  v2[1] = sub_1000BEB00;
  return unsafeBlocking<A>(_:)(v0 + 64, sub_100033264, *(_QWORD *)(v0 + 96), &type metadata for Configuration);
}

uint64_t sub_1000BEB00()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release();
  return swift_task_switch(sub_1000BEB5C, 0, 0);
}

uint64_t sub_1000BEB5C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[10];
  v0[14] = v0[8];
  return swift_task_switch(sub_1000BEB78, v1, 0);
}

uint64_t sub_1000BEB78()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = sub_100C1BA78(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 232) + 16);
  if (v3)
    v4 = v3 > v2;
  else
    v4 = 0;
  if (v4)
  {
    v5 = v3 - v2;
    swift_beginAccess(*(_QWORD *)(v0 + 80) + 232, v0 + 40, 33, 0);
    sub_1000BEC18(v5);
    swift_endAccess(v0 + 40);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000BEC18(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return sub_1007793D0(result, v2);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BEC40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  objc_super v40;
  _QWORD v41[5];
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;

  v1 = type metadata accessor for XPCServiceDescription(0);
  v38 = *(_QWORD *)(v1 - 8);
  v39 = v1;
  __chkstk_darwin(v1);
  v36 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MachServiceName(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  MachServiceName.init(_:)(0xD000000000000032, 0x8000000100EC7B90);
  v10 = type metadata accessor for BeaconSharingService();
  v43 = v10;
  v44 = &off_101055078;
  v42[0] = v0;
  v11 = (objc_class *)type metadata accessor for BeaconSharingTrampoline();
  v12 = objc_allocWithZone(v11);
  v13 = sub_10009F5D0((uint64_t)v42, v43);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = v3;
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v18 = *v15;
  v41[3] = v10;
  v41[4] = &off_101055078;
  v41[0] = v18;
  sub_100030784((uint64_t)v41, (uint64_t)v12 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation);
  v40.receiver = v12;
  v40.super_class = v11;
  swift_retain();
  v19 = objc_msgSendSuper2(&v40, "init");
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  v20 = *(void **)(v0 + 176);
  *(_QWORD *)(v0 + 176) = v19;
  v21 = v19;

  v22 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v37 = v9;
  v22(v7, v9, v17);
  v23 = qword_1010E9948;
  v24 = v21;
  if (v23 != -1)
    swift_once(&qword_1010E9948, sub_1000BEFCC);
  v25 = (void *)qword_1010EDCE0;
  v26 = (void *)objc_opt_self(NSXPCInterface);
  v27 = v25;
  v28 = objc_msgSend(v26, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPBeaconSharingClientXPCProtocol);
  swift_retain();
  v29 = v36;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v7, 0, v24, v27, v28, sub_10001E674, v0, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v29);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B6748);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "BeaconSharingService: Successfully registered XPC services.", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v37, v17);
}

id sub_1000BEFCC()
{
  id result;

  result = sub_1000BEFE8();
  qword_1010EDCE0 = (uint64_t)result;
  return result;
}

id sub_1000BEFE8()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPBeaconSharingXPCProtocol);
  v1 = sub_1007B6904();
  v2 = swift_allocObject(v1, ((*(unsigned int *)(v1 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v1 + 52) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v2 + 32) = sub_10000F4A0(0, (unint64_t *)&unk_1010EE370, NSSet_ptr);
  *(_QWORD *)(v2 + 40) = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, "share:recipients:shareType:completion:", 1, 0);
  swift_bridgeObjectRelease();
  v3 = sub_1007B6904();
  v4 = swift_allocObject(v3, ((*(unsigned int *)(v3 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v3 + 52) | 7);
  *(_OWORD *)(v4 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v4 + 32) = sub_10000F4A0(0, &qword_1010EE380, NSArray_ptr);
  *(_QWORD *)(v4 + 40) = sub_10000F4A0(0, (unint64_t *)&qword_1010EE388, NSUUID_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v4, "updatedCircleIdentifiers:completion:", 0, 0);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000BF14C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  return swift_task_switch(sub_1000BF164, 0, 0);
}

uint64_t sub_1000BF164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;

  v1 = *(_QWORD *)(v0 + 56) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 64) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = Strong;
  *(_QWORD *)(v0 + 40) = 0x6470556572616853;
  *(_QWORD *)(v0 + 48) = 0xEB00000000657461;
  v4 = *((unsigned int *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
       + 1);
  v7 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 72) = v5;
  *v5 = v0;
  v5[1] = sub_1000BF268;
  return ((uint64_t (*)(uint64_t, void *, uint64_t, uint64_t (*)(_QWORD), _QWORD))v7)(v0 + 40, &unk_1010EE120, v3, SharingCircleWildAdvertisementKey.init(key:), 0);
}

uint64_t sub_1000BF268()
{
  uint64_t v0;
  uint64_t v1;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 72));
  if (v0)
  {
    swift_release();
    swift_errorRelease(v0);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_task_switch(sub_1000BF2F4, 0, 0);
}

uint64_t sub_1000BF2F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BF324(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = a1;
  return swift_task_switch(sub_1000BF33C, 0, 0);
}

uint64_t sub_1000BF33C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 192);
  *(_QWORD *)(v0 + 112) = v1;
  return swift_task_switch(sub_1000BF358, v1, 0);
}

uint64_t sub_1000BF358()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_retain();
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_1010EE128, v1);
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch(sub_1000BF3D8, 0, 0);
}

uint64_t sub_1000BF3D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 184);
  swift_beginAccess(v1 + 32, v0 + 56, 0, 0);
  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v0 + 120) = v2;
  if ((v2 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v3 = v2;
    else
      v3 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    if (__CocoaSet.count.getter(v3))
      goto LABEL_6;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRetain(v2);
    if (v6)
    {
LABEL_6:
      v4 = (_QWORD *)swift_task_alloc(dword_1010EE134);
      *(_QWORD *)(v0 + 128) = v4;
      *v4 = v0;
      v4[1] = sub_1000BF560;
      return sub_100013024(0);
    }
  }
  swift_bridgeObjectRelease();
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6748);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "BeaconSharingService: no sessions to notify for share updates.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1000BF560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000BF5BC, 0, 0);
}

uint64_t sub_1000BF5BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BeaconSharingService: Forwarding share updates to listeners.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 104);

  v7 = *(_QWORD *)(v6 + 136);
  *(_QWORD *)(v0 + 144) = v7;
  return swift_task_switch(sub_1000BF6AC, v7, 0);
}

uint64_t sub_1000BF6AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[18];
  v2 = swift_allocObject(&unk_101055288, 25, 7);
  v0[19] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 7;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[20] = v4;
  *v4 = v0;
  v4[1] = sub_1000BF74C;
  return unsafeBlocking<A>(_:)(v4, sub_1000D9274, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_1000BF74C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  swift_release();
  return swift_task_switch(sub_1000BF7AC, v1, 0);
}

uint64_t sub_1000BF7AC()
{
  return swift_task_switch(sub_1000BF7C0, 0, 0);
}

void sub_1000BF7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 120);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 120);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10001A9A8((uint64_t *)&unk_1010F7B10);
    v5 = sub_1000193A4((unint64_t *)&unk_1010EE140, (uint64_t *)&unk_1010F7B10, (const char *)&protocol conformance descriptor for XPCSession<A>);
    v6 = Set.Iterator.init(_cocoa:)((_QWORD *)(v0 + 16), v3, v4, v5);
    v1 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 176) = v7;
    *(_QWORD *)(v0 + 184) = v8;
    *(_QWORD *)(v0 + 168) = v1;
    if (v1 < 0)
    {
      v25 = __CocoaSet.Iterator.next()(v6);
      if (v25)
      {
        v26 = v25;
        *(_QWORD *)(v0 + 96) = v25;
        swift_unknownObjectRetain(v25);
        v27 = sub_10001A9A8((uint64_t *)&unk_1010F7B10);
        swift_dynamicCast(v0 + 88, v0 + 96, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
        v14 = *(_QWORD *)(v0 + 88);
        swift_unknownObjectRelease(v26);
        v13 = v9;
        v11 = v10;
LABEL_9:
        *(_QWORD *)(v0 + 200) = v13;
        *(_QWORD *)(v0 + 208) = v11;
        *(_QWORD *)(v0 + 192) = v14;
        if (v14)
        {
          v15 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
          *(_QWORD *)(v0 + 216) = v15;
          *v15 = v0;
          v15[1] = sub_1000BFA68;
          XPCSession.proxy(errorHandler:)(v0 + 80, sub_1000BFD78, 0);
          return;
        }
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (v10)
    {
LABEL_7:
      v11 = (v10 - 1) & v10;
      v12 = __clz(__rbit64(v10)) | (v9 << 6);
      v13 = v9;
LABEL_8:
      v14 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
      swift_retain();
      goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
    v16 = -1;
    v17 = -1 << *(_BYTE *)(v1 + 32);
    v8 = ~v17;
    v7 = v1 + 56;
    v18 = *(_QWORD *)(v1 + 56);
    v19 = -v17;
    v20 = v19 < 64;
    v21 = -1 << v19;
    *(_QWORD *)(v0 + 176) = v1 + 56;
    *(_QWORD *)(v0 + 184) = v8;
    if (v20)
      v16 = ~v21;
    v10 = v16 & v18;
    *(_QWORD *)(v0 + 168) = v1;
    if ((v16 & v18) != 0)
      goto LABEL_7;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    v23 = (unint64_t)(v8 + 64) >> 6;
    if (v22 < v23)
    {
      v24 = *(_QWORD *)(v7 + 8 * v22);
      v13 = v9 + 1;
      if (v24)
      {
LABEL_18:
        v11 = (v24 - 1) & v24;
        v12 = __clz(__rbit64(v24)) + (v13 << 6);
        goto LABEL_8;
      }
      v13 = v9 + 2;
      if (v9 + 2 < v23)
      {
        v24 = *(_QWORD *)(v7 + 8 * v13);
        if (v24)
          goto LABEL_18;
        v13 = v9 + 3;
        if (v9 + 3 < v23)
        {
          v24 = *(_QWORD *)(v7 + 8 * v13);
          if (v24)
            goto LABEL_18;
          v13 = v9 + 4;
          if (v9 + 4 < v23)
          {
            v24 = *(_QWORD *)(v7 + 8 * v13);
            if (v24)
              goto LABEL_18;
            v28 = v9 + 5;
            while (v23 != v28)
            {
              v24 = *(_QWORD *)(v7 + 8 * v28++);
              if (v24)
              {
                v13 = v28 - 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
LABEL_31:
    sub_10007CC38(*(_QWORD *)(v0 + 168));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(v0 + 8))(1);
    return;
  }
  __break(1u);
}

uint64_t sub_1000BFA68()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  return swift_task_switch(sub_1000BFABC, 0, 0);
}

void sub_1000BFABC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Class isa;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 136);
    sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    sub_1000170AC((unint64_t *)&unk_1010EE150, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    swift_unknownObjectRetain(v1);
    swift_bridgeObjectRetain(v2);
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, "receivedUpdatedShares:", isa);
    swift_unknownObjectRelease_n(v1, 2);
    swift_release();

  }
  else
  {
    v4 = swift_release();
  }
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 168);
  if (v7 < 0)
  {
    v12 = __CocoaSet.Iterator.next()(v4);
    if (v12)
    {
      v13 = v12;
      *(_QWORD *)(v0 + 96) = v12;
      swift_unknownObjectRetain(v12);
      v14 = sub_10001A9A8((uint64_t *)&unk_1010F7B10);
      swift_dynamicCast(v0 + 88, v0 + 96, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      v11 = *(_QWORD *)(v0 + 88);
      swift_unknownObjectRelease(v13);
      v10 = v5;
      v8 = v6;
LABEL_10:
      *(_QWORD *)(v0 + 200) = v10;
      *(_QWORD *)(v0 + 208) = v8;
      *(_QWORD *)(v0 + 192) = v11;
      if (v11)
      {
        v15 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
        *(_QWORD *)(v0 + 216) = v15;
        *v15 = v0;
        v15[1] = sub_1000BFA68;
        XPCSession.proxy(errorHandler:)(v0 + 80, sub_1000BFD78, 0);
        return;
      }
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  if (v6)
  {
    v8 = (v6 - 1) & v6;
    v9 = __clz(__rbit64(v6)) | (v5 << 6);
    v10 = *(_QWORD *)(v0 + 200);
LABEL_7:
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v9);
    swift_retain();
    goto LABEL_10;
  }
  v16 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v17 = (unint64_t)(*(_QWORD *)(v0 + 184) + 64) >> 6;
    if (v16 < v17)
    {
      v18 = *(_QWORD *)(v0 + 176);
      v19 = *(_QWORD *)(v18 + 8 * v16);
      v10 = v5 + 1;
      if (v19)
      {
LABEL_15:
        v8 = (v19 - 1) & v19;
        v9 = __clz(__rbit64(v19)) + (v10 << 6);
        goto LABEL_7;
      }
      v10 = v5 + 2;
      if (v5 + 2 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v10);
        if (v19)
          goto LABEL_15;
        v10 = v5 + 3;
        if (v5 + 3 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * v10);
          if (v19)
            goto LABEL_15;
          v10 = v5 + 4;
          if (v5 + 4 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v10);
            if (v19)
              goto LABEL_15;
            v20 = v5 + 5;
            while (v17 != v20)
            {
              v19 = *(_QWORD *)(v18 + 8 * v20++);
              if (v19)
              {
                v10 = v20 - 1;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
LABEL_26:
    sub_10007CC38(*(_QWORD *)(v0 + 168));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(v0 + 8))(1);
    return;
  }
  __break(1u);
}

void sub_1000BFD78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    swift_errorRetain(a1);
    v7 = _swift_stdlib_bridgeErrorToNSError(a1);
    v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "BeaconSharingService: failed to create reverse-proxy to forward shares %@.", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

uint64_t sub_1000BFF38()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));

  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(*(_QWORD *)(v0 + 192));
  swift_release(*(_QWORD *)(v0 + 200));
  swift_release(*(_QWORD *)(v0 + 208));
  swift_release(*(_QWORD *)(v0 + 216));
  swift_release(*(_QWORD *)(v0 + 224));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
  swift_release(*(_QWORD *)(v0 + 248));
  swift_release(*(_QWORD *)(v0 + 256));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000BFFDC()
{
  uint64_t v0;

  sub_1000BFF38();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BeaconSharingService()
{
  return objc_opt_self(_TtC12searchpartyd20BeaconSharingService);
}

uint64_t sub_1000C0014()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010EDECC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_1000B79D8();
}

uint64_t sub_1000C0058(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 176) = a3;
  *(_QWORD *)(v4 + 184) = v3;
  *(_QWORD *)(v4 + 168) = a2;
  *(_BYTE *)(v4 + 256) = a1;
  return swift_task_switch(sub_1000C0078, v3, 0);
}

uint64_t sub_1000C0078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_BYTE *)(v0 + 256);
  v4 = sub_10001A9A8(&qword_1010EE2B0);
  *(_QWORD *)(v0 + 192) = v4;
  inited = swift_initStackObject(v4, v0 + 16);
  *(_QWORD *)(v0 + 200) = inited;
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_BYTE *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v1;
  v6 = dword_10111FCE4;
  swift_bridgeObjectRetain(v1);
  v7 = (_QWORD *)swift_task_alloc(v6);
  *(_QWORD *)(v0 + 208) = v7;
  *v7 = v0;
  v7[1] = sub_1000C0124;
  return sub_100D8B8F0(inited);
}

uint64_t sub_1000C0124(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *v2;
  v5 = *(_QWORD *)(*v2 + 200);
  v4 = *(_QWORD *)(*v2 + 208);
  *(_QWORD *)(*v2 + 216) = a1;
  swift_task_dealloc(v4);
  swift_setDeallocating(v5);
  swift_arrayDestroy(v5 + 32, 1, &type metadata for MessagingDestination);
  v6 = *(_QWORD *)(v3 + 184);
  if (v1)
  {
    swift_errorRelease(v1);
    v7 = sub_1000C09DC;
  }
  else
  {
    v7 = sub_1000C01C4;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000C01C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t inited;
  uint64_t v25;
  _QWORD *v26;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 216) + 16))
    goto LABEL_15;
  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_BYTE *)(v0 + 256);
  swift_bridgeObjectRetain(v1);
  v4 = sub_100519120(v3, v2, v1);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    v19 = &_swiftEmptySetSingleton;
LABEL_21:
    *(_QWORD *)(v0 + 224) = v19;
    v22 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 176);
    v23 = *(_BYTE *)(v0 + 256);
    inited = swift_initStackObject(*(_QWORD *)(v0 + 192), v0 + 72);
    *(_QWORD *)(v0 + 232) = inited;
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v23;
    *(_QWORD *)(inited + 40) = v22;
    *(_QWORD *)(inited + 48) = v21;
    v25 = dword_10111FCE4;
    swift_bridgeObjectRetain(v21);
    v26 = (_QWORD *)swift_task_alloc(v25);
    *(_QWORD *)(v0 + 240) = v26;
    *v26 = v0;
    v26[1] = sub_1000C0428;
    return sub_100D8B8F0(inited);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 216) + 56) + 8 * v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_5;
LABEL_20:
    swift_bridgeObjectRelease();
    v19 = (void *)sub_100CA7F80((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (v6 < 0)
    v20 = v6;
  else
    v20 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v7 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_20;
LABEL_5:
  result = sub_10009A92C(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v9 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
      else
        v10 = *(id *)(v6 + 8 * v9 + 32);
      v11 = v10;
      v12 = objc_msgSend(v10, "pushToken", _swiftEmptyArrayStorage);
      v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1)
        sub_10009A92C(v16 > 1, v17 + 1, 1);
      ++v9;
      _swiftEmptyArrayStorage[2] = v17 + 1;
      v18 = &_swiftEmptyArrayStorage[2 * v17];
      v18[4] = v13;
      v18[5] = v15;
    }
    while (v7 != v9);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C0428(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *v2;
  v5 = *(_QWORD *)(*v2 + 232);
  v4 = *(_QWORD *)(*v2 + 240);
  *(_QWORD *)(*v2 + 248) = a1;
  swift_task_dealloc(v4);
  swift_setDeallocating(v5);
  swift_arrayDestroy(v5 + 32, 1, &type metadata for MessagingDestination);
  v6 = *(_QWORD *)(v3 + 184);
  if (v1)
  {
    swift_errorRelease(v1);
    v7 = sub_1000C0A80;
  }
  else
  {
    v7 = sub_1000C04C8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000C04C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 248) + 16))
  {
    v2 = *(_QWORD *)(v0 + 168);
    v1 = *(_QWORD *)(v0 + 176);
    v3 = *(_BYTE *)(v0 + 256);
    swift_bridgeObjectRetain(v1);
    v4 = sub_100519120(v3, v2, v1);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 248) + 56) + 8 * v4);
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((unint64_t)v6 >> 62)
      {
        if (v6 < 0)
          v21 = v6;
        else
          v21 = v6 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v6);
        v7 = _CocoaArrayWrapper.endIndex.getter(v21);
        swift_bridgeObjectRelease();
        if (v7)
          goto LABEL_5;
      }
      else
      {
        v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v7)
        {
LABEL_5:
          v45 = _swiftEmptyArrayStorage;
          result = sub_10009A92C(0, v7 & ~(v7 >> 63), 0);
          if (v7 < 0)
          {
            __break(1u);
            return result;
          }
          v9 = 0;
          v10 = v45;
          do
          {
            if ((v6 & 0xC000000000000001) != 0)
              v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
            else
              v11 = *(id *)(v6 + 8 * v9 + 32);
            v12 = v11;
            v13 = objc_msgSend(v11, "pushToken");
            v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
            v16 = v15;

            v45 = v10;
            v18 = v10[2];
            v17 = v10[3];
            if (v18 >= v17 >> 1)
            {
              sub_10009A92C(v17 > 1, v18 + 1, 1);
              v10 = v45;
            }
            ++v9;
            v10[2] = v18 + 1;
            v19 = &v10[2 * v18];
            v19[4] = v14;
            v19[5] = v16;
          }
          while (v7 != v9);
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
      swift_bridgeObjectRelease();
      v10 = _swiftEmptyArrayStorage;
LABEL_21:
      v20 = (_QWORD *)sub_100CA7F80((uint64_t)v10);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v20 = &_swiftEmptySetSingleton;
LABEL_22:
  v22 = *(_QWORD *)(v0 + 224);
  if (v20[2] <= *(_QWORD *)(v22 + 16) >> 3)
  {
    v45 = *(_QWORD **)(v0 + 224);
    swift_bridgeObjectRetain(v22);
    sub_10063AE08((uint64_t)v20);
    v23 = v45;
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 224));
    v23 = sub_10063C9F4((uint64_t)v20, v22);
  }
  v24 = v23[2];
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v25 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 176);
  v27 = type metadata accessor for Logger(0);
  sub_10001A9E8(v27, (uint64_t)qword_1011B6748);
  swift_bridgeObjectRetain_n(v26, 2);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  v31 = os_log_type_enabled(v29, v30);
  v32 = *(_QWORD *)(v0 + 224);
  v33 = *(_QWORD *)(v0 + 176);
  if (v31)
  {
    v42 = v24;
    v34 = v0 + 168;
    v43 = *(_QWORD *)(v0 + 168);
    v35 = swift_slowAlloc(52, -1);
    v41 = (_QWORD *)swift_slowAlloc(32, -1);
    v45 = v41;
    *(_DWORD *)v35 = 141559043;
    *(_QWORD *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v35 + 4, v35 + 12);
    *(_WORD *)(v35 + 12) = 2081;
    swift_bridgeObjectRetain(v33);
    *(_QWORD *)(v0 + 136) = sub_100016940(v43, v33, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease_n(v33, 3);
    v44 = v0;
    *(_WORD *)(v35 + 22) = 2048;
    v36 = *(_QWORD *)(v22 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 144) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v35 + 24, v35 + 32);
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 32) = 2048;
    v37 = v20[2];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 152) = v37;
    v38 = v0 + 160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v35 + 34, v35 + 42);
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 42) = 2048;
    v39 = v23[2];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v34 - 8) = v39;
    v40 = v34;
    v24 = v42;
    v0 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v40, v35 + 44, v35 + 52);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "                Destination: %{private,mask.hash}s reported legacy endpoints: %ld, endpoints: %ld, remaining Legacy Endpoints: %ld.", (uint8_t *)v35, 0x34u);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v23, 2);
    swift_bridgeObjectRelease_n(v20, 2);
    swift_bridgeObjectRelease_n(v32, 2);
    swift_bridgeObjectRelease_n(v33, 2);
  }

  return (*(uint64_t (**)(BOOL))(v0 + 8))(v24 != 0);
}

uint64_t sub_1000C09DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t inited;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v0 + 224) = &_swiftEmptySetSingleton;
  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_BYTE *)(v0 + 256);
  inited = swift_initStackObject(*(_QWORD *)(v0 + 192), v0 + 72);
  *(_QWORD *)(v0 + 232) = inited;
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_BYTE *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = v1;
  v5 = dword_10111FCE4;
  swift_bridgeObjectRetain(v1);
  v6 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 240) = v6;
  *v6 = v0;
  v6[1] = sub_1000C0428;
  return sub_100D8B8F0(inited);
}

uint64_t sub_1000C0A80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t type;
  uint64_t v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 224);
  if (*((_QWORD *)&_swiftEmptySetSingleton + 2) <= *(_QWORD *)(v1 + 16) >> 3)
  {
    v23 = *(_QWORD **)(v0 + 224);
    swift_bridgeObjectRetain(v1);
    sub_10063AE08((uint64_t)&_swiftEmptySetSingleton);
    v2 = v23;
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 224));
    v2 = sub_10063C9F4((uint64_t)&_swiftEmptySetSingleton, v1);
  }
  v3 = v2[2];
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v4 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  swift_bridgeObjectRetain_n(v5, 2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  swift_bridgeObjectRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 176);
  if (v10)
  {
    type = v9;
    v19 = *(_QWORD *)(v0 + 168);
    v22 = v3;
    v13 = swift_slowAlloc(52, -1);
    v20 = swift_slowAlloc(32, -1);
    v23 = (_QWORD *)v20;
    *(_DWORD *)v13 = 141559043;
    *(_QWORD *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    swift_bridgeObjectRetain(v12);
    *(_QWORD *)(v0 + 136) = sub_100016940(v19, v12, (uint64_t *)&v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v13 + 22) = 2048;
    v14 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 144) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 32) = 2048;
    v15 = *((_QWORD *)&_swiftEmptySetSingleton + 2);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 152) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v13 + 34, v13 + 42);
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 42) = 2048;
    v16 = v2[2];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 160) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v13 + 44, v13 + 52);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, type, "                Destination: %{private,mask.hash}s reported legacy endpoints: %ld, endpoints: %ld, remaining Legacy Endpoints: %ld.", (uint8_t *)v13, 0x34u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    v17 = v13;
    v3 = v22;
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_bridgeObjectRelease_n(v12, 2);
  }

  return (*(uint64_t (**)(BOOL))(v0 + 8))(v3 != 0);
}

uint64_t sub_1000C0DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v3[14] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C0E4C, v2, 0);
}

uint64_t sub_1000C0E4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, char, uint64_t);
  uint64_t v24;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[9];
  v3 = v0[13];
  v2 = v0[14];
  v4 = v0[12];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[14];
  v11 = v0[12];
  if (v9)
  {
    v22 = v0[13];
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(32, -1);
    v24 = v13;
    *(_DWORD *)v12 = 141558275;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    v0[8] = sub_100016940(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Create automatic share (UT only) for %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
  }

  v17 = *(_QWORD *)(v0[11] + 200);
  v18 = type metadata accessor for MemberCircleRevokeManager();
  v0[2] = v17;
  v0[5] = v18;
  v0[6] = &off_1010B7198;
  v19 = unk_1010F40D4;
  v23 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_1010F40D0 + dword_1010F40D0);
  swift_retain();
  v20 = (_QWORD *)swift_task_alloc(v19);
  v0[15] = v20;
  *v20 = v0;
  v20[1] = sub_1000C10E0;
  return v23(v0[9], v0[10], 0, (uint64_t)(v0 + 2));
}

uint64_t sub_1000C10E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 88);
    v5 = sub_1000DB6D8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 88);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_1000C1154;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000C1154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v3 + 16, v2);
  swift_retain(v3);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE268, v3);
  swift_release_n(v3, 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C1200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C1264, v2, 0);
}

uint64_t sub_1000C1264()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, char);
  uint64_t v21;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[4];
  v3 = v0[8];
  v2 = v0[9];
  v4 = v0[7];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[9];
  v11 = v0[7];
  if (v9)
  {
    v19 = v0[8];
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(32, -1);
    v21 = v13;
    *(_DWORD *)v12 = 141558275;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    v0[3] = sub_100016940(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Create automatic (self beaconing) share for %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
  }

  v20 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1010F40E8 + dword_1010F40E8);
  v17 = (_QWORD *)swift_task_alloc(unk_1010F40EC);
  v0[10] = v17;
  *v17 = v0;
  v17[1] = sub_1000C14C4;
  return v20(v0[4], v0[5], 1);
}

uint64_t sub_1000C14C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000C1534, *(_QWORD *)(v2 + 48), 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 72));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000C1534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v3 + 16, v2);
  swift_retain(v3);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE278, v3);
  swift_release_n(v3, 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C15E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v3[14] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C1644, v2, 0);
}

uint64_t sub_1000C1644()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, char, uint64_t);
  uint64_t v24;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[9];
  v3 = v0[13];
  v2 = v0[14];
  v4 = v0[12];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[14];
  v11 = v0[12];
  if (v9)
  {
    v22 = v0[13];
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(32, -1);
    v24 = v13;
    *(_DWORD *)v12 = 141558275;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    v0[8] = sub_100016940(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Create explicit share for %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
  }

  v17 = *(_QWORD *)(v0[11] + 200);
  v18 = type metadata accessor for MemberCircleRevokeManager();
  v0[2] = v17;
  v0[5] = v18;
  v0[6] = &off_1010B7198;
  v19 = unk_1010F40D4;
  v23 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_1010F40D0 + dword_1010F40D0);
  swift_retain();
  v20 = (_QWORD *)swift_task_alloc(v19);
  v0[15] = v20;
  *v20 = v0;
  v20[1] = sub_1000C18D8;
  return v23(v0[9], v0[10], 2, (uint64_t)(v0 + 2));
}

uint64_t sub_1000C18D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 88);
    v5 = sub_1000C19F8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 88);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_1000C194C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000C194C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v3 + 16, v2);
  swift_retain(v3);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE6D8, v3);
  swift_release_n(v3, 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C19F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C1A38(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  *(_QWORD *)(v9 + 176) = v51;
  *(_QWORD *)(v9 + 184) = v8;
  *(_QWORD *)(v9 + 160) = v49;
  *(_QWORD *)(v9 + 168) = v50;
  *(_DWORD *)(v9 + 300) = v48;
  *(_DWORD *)(v9 + 296) = v47;
  *(_QWORD *)(v9 + 144) = v45;
  *(_QWORD *)(v9 + 152) = v46;
  *(_QWORD *)(v9 + 128) = v43;
  *(_QWORD *)(v9 + 136) = v44;
  *(_QWORD *)(v9 + 112) = v41;
  *(_QWORD *)(v9 + 120) = v42;
  *(_QWORD *)(v9 + 96) = v37;
  *(_QWORD *)(v9 + 104) = v38;
  *(_QWORD *)(v9 + 80) = a7;
  *(_QWORD *)(v9 + 88) = a8;
  *(_QWORD *)(v9 + 64) = a5;
  *(_QWORD *)(v9 + 72) = a6;
  *(_QWORD *)(v9 + 56) = a4;
  *(_BYTE *)(v9 + 313) = a3;
  *(_BYTE *)(v9 + 312) = a2;
  v13 = (int *)sub_10001A9A8(&qword_1010EE1E0);
  *(_QWORD *)(v9 + 192) = v13;
  v14 = (*(_QWORD *)(*((_QWORD *)v13 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 200) = swift_task_alloc(v14);
  v15 = swift_task_alloc(v14);
  *(_QWORD *)(v9 + 208) = v15;
  v16 = (int *)sub_10001A9A8(&qword_1010EE1E8);
  *(_QWORD *)(v9 + 216) = v16;
  v17 = (*(_QWORD *)(*((_QWORD *)v16 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 224) = swift_task_alloc(v17);
  v18 = swift_task_alloc(v17);
  *(_QWORD *)(v9 + 232) = v18;
  v19 = type metadata accessor for UUID(0);
  *(_QWORD *)(v9 + 240) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v9 + 248) = v20;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  *(_QWORD *)(v9 + 256) = v21;
  v21(v18, a1, v19);
  *(_BYTE *)(v18 + v16[12]) = a2;
  v22 = v18 + v16[16];
  *(_BYTE *)v22 = a3;
  *(_QWORD *)(v22 + 8) = a4;
  *(_QWORD *)(v22 + 16) = a5;
  v23 = (_QWORD *)(v18 + v16[20]);
  *v23 = a6;
  v23[1] = a7;
  *(_QWORD *)(v18 + v16[24]) = a8;
  v24 = (uint64_t *)(v18 + v16[28]);
  *v24 = v37;
  v24[1] = v38;
  v25 = v13[12];
  *(_DWORD *)(v9 + 304) = v25;
  v26 = v15 + v25;
  v21(v15, v39, v19);
  sub_10000F9B8(v40, v26, &qword_1010ED860);
  v27 = (_QWORD *)(v15 + v13[16]);
  *v27 = v41;
  v27[1] = v42;
  v28 = (_QWORD *)(v15 + v13[20]);
  *v28 = v43;
  v28[1] = v44;
  v29 = (_QWORD *)(v15 + v13[24]);
  *v29 = v45;
  v29[1] = v46;
  *(_DWORD *)(v15 + v13[28]) = v47;
  *(_DWORD *)(v15 + v13[32]) = v48;
  *(_QWORD *)(v15 + v13[36]) = v49;
  v30 = (_QWORD *)(v15 + v13[40]);
  *v30 = v50;
  v30[1] = v51;
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  sub_10001BBBC(v37, v38);
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  return ((uint64_t (*)(void (*)(), _QWORD))swift_task_switch)(sub_1000C1D28, 0);
}

void sub_1000C1D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Handle incoming share suggestion", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v38 = *(int *)(v0 + 304);
  v54 = *(_QWORD *)(v0 + 240);
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
  v6 = *(_QWORD *)(v0 + 224);
  v53 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v7 = *(int **)(v0 + 216);
  v37 = v8;
  v9 = *(int **)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 200);
  v48 = *(_QWORD *)(v0 + 176);
  v49 = *(_QWORD *)(v0 + 184);
  v47 = *(_QWORD *)(v0 + 168);
  v46 = *(_DWORD *)(v0 + 300);
  v44 = *(_DWORD *)(v0 + 296);
  v45 = *(_QWORD *)(v0 + 160);
  v59 = *(_QWORD *)(v0 + 152);
  v43 = *(_QWORD *)(v0 + 144);
  v60 = *(_QWORD *)(v0 + 136);
  v41 = *(_QWORD *)(v0 + 120);
  v42 = *(_QWORD *)(v0 + 128);
  v40 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 88);
  v56 = *(_QWORD *)(v0 + 104);
  v57 = *(_QWORD *)(v0 + 96);
  v52 = v11;
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 64);
  v50 = v13;
  v51 = v12;
  v35 = *(_QWORD *)(v0 + 56);
  v36 = *(_QWORD *)(v0 + 72);
  v33 = *(_BYTE *)(v0 + 312);
  v34 = *(_BYTE *)(v0 + 313);

  v39 = v8 + v38;
  v14 = v6 + v7[16];
  v15 = (_QWORD *)(v6 + v7[20]);
  v31 = v7[12];
  v32 = v7[24];
  v16 = (uint64_t *)(v6 + v7[28]);
  v55(v6, v53, v54);
  *(_BYTE *)(v6 + v31) = v33;
  *(_BYTE *)v14 = v34;
  *(_QWORD *)(v14 + 8) = v35;
  *(_QWORD *)(v14 + 16) = v13;
  *v15 = v36;
  v15[1] = v12;
  *(_QWORD *)(v6 + v32) = v11;
  *v16 = v57;
  v16[1] = v56;
  v17 = v9[12];
  *(_DWORD *)(v0 + 308) = v17;
  v18 = v10 + v17;
  v19 = (_QWORD *)(v10 + v9[16]);
  v20 = (_QWORD *)(v10 + v9[20]);
  v21 = (_QWORD *)(v10 + v9[24]);
  v22 = v9[28];
  v23 = v9[32];
  v24 = v9[36];
  v25 = (_QWORD *)(v10 + v9[40]);
  v55(v10, v37, v54);
  sub_10000F9B8(v39, v18, &qword_1010ED860);
  *v19 = v40;
  v19[1] = v41;
  *v20 = v42;
  v20[1] = v60;
  *v21 = v43;
  v21[1] = v59;
  *(_DWORD *)(v10 + v22) = v44;
  *(_DWORD *)(v10 + v23) = v46;
  *(_QWORD *)(v10 + v24) = v45;
  *v25 = v47;
  v25[1] = v48;
  v26 = *(_QWORD *)(v49 + 200);
  *(_QWORD *)(v0 + 40) = type metadata accessor for MemberCircleRevokeManager();
  *(_QWORD *)(v0 + 48) = &off_1010B7198;
  *(_QWORD *)(v0 + 16) = v26;
  v27 = swift_allocObject(&unk_101055260, 24, 7);
  *(_QWORD *)(v0 + 264) = v27;
  swift_weakInit(v27 + 16, v49);
  v28 = swift_allocObject(&unk_101055260, 24, 7);
  *(_QWORD *)(v0 + 272) = v28;
  swift_weakInit(v28 + 16, v49);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v52);
  sub_10001BBBC(v57, v56);
  v29 = unk_1010F407C;
  v58 = (char *)&dword_1010F4078 + dword_1010F4078;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v48);
  swift_retain();
  swift_retain();
  swift_retain();
  v30 = (_QWORD *)swift_task_alloc(v29);
  *(_QWORD *)(v0 + 280) = v30;
  *v30 = v0;
  v30[1] = sub_1000C2154;
  __asm { BR              X8 }
}

uint64_t sub_1000C2154()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 280);
  *(_QWORD *)(*v1 + 288) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 184);
    v6 = *(_QWORD *)(v2 + 96);
    v5 = *(_QWORD *)(v2 + 104);
    swift_release();
    swift_release();
    sub_10001BC14(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = sub_1000C236C;
    v8 = v4;
  }
  else
  {
    v10 = *(_QWORD *)(v2 + 264);
    v9 = *(_QWORD *)(v2 + 272);
    v11 = *(_QWORD *)(v2 + 240);
    v16 = *(_QWORD *)(v2 + 248);
    v12 = *(_QWORD *)(v2 + 200);
    v17 = *(_QWORD *)(v2 + 224);
    v18 = *(_QWORD *)(v2 + 184);
    v13 = v12 + *(int *)(v2 + 308);
    sub_10001BC14(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n(v9, 2);
    swift_release_n(v10, 2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    sub_100004048(v13, &qword_1010ED860);
    v14 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v14(v12, v11);
    v14(v17, v11);
    v7 = sub_1000C22F0;
    v8 = v18;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_1000C22F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  sub_100004048(v3, &qword_1010EE1E0);
  sub_100004048(v2, &qword_1010EE1E8);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C236C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v6 = v5 + *(int *)(v0 + 308);
  sub_100004048(v4, &qword_1010EE1E0);
  sub_100004048(v2, &qword_1010EE1E8);
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  sub_100004048(v6, &qword_1010ED860);
  v7 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v7(v5, v1);
  v7(v3, v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C2460(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_1000C2478, 0, 0);
}

uint64_t sub_1000C2478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
    return swift_task_switch(sub_1000C24EC, Strong, 0);
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C24EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for Transaction(0);
  v2 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v2 + 16, v1);
  swift_retain(v2);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE210, v2);
  swift_release_n(v2, 2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C258C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch(sub_1000C25A4, 0, 0);
}

uint64_t sub_1000C25A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 56) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (_QWORD *)swift_task_alloc(dword_1010EDEDC);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_1000C2634;
  return sub_1000B9A94(*(_QWORD *)(v0 + 40));
}

uint64_t sub_1000C2634()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    swift_errorRelease(v0);
  swift_release(*(_QWORD *)(v2 + 56));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000C268C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v3 + 160) = a2;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 48) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 56) = v5;
  v6 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 64) = v6;
  *(_QWORD *)(v3 + 72) = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EE0E0);
  *(_QWORD *)(v3 + 80) = v7;
  *(_QWORD *)(v3 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v3 + 96) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 104) = v9;
  *(_QWORD *)(v3 + 112) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C2744, v2, 0);
}

uint64_t sub_1000C2744()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 136);
  *(_QWORD *)(v0 + 120) = v1;
  return swift_task_switch(sub_1000C2760, v1, 0);
}

uint64_t sub_1000C2760()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[15];
  v3 = v0[8];
  v2 = v0[9];
  v4 = v0[6];
  v5 = v0[7];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[4], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010558C8, v7 + v3, v6 | 7);
  v0[16] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[17] = v10;
  *v10 = v0;
  v10[1] = sub_1000C2838;
  return unsafeBlocking<A>(_:)(v0[11], sub_10007CC00, v8, v0[10]);
}

uint64_t sub_1000C2838()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release();
  return swift_task_switch(sub_1000C2898, v1, 0);
}

uint64_t sub_1000C2898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 48))(v1, 1, *(_QWORD *)(v0 + 96)) == 1)
  {
    sub_100004048(v1, &qword_1010EE0E0);
    type metadata accessor for SPBeaconSharingError(0);
    v3 = v2;
    *(_QWORD *)(v0 + 24) = 5;
    v4 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v5 = sub_100006C64((unint64_t *)&qword_1010EB490, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v6 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v4, v3, v5);
    swift_willThrow(v6);
    v7 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1000126EC(v1, *(_QWORD *)(v0 + 112), type metadata accessor for OwnerSharingCircle);
    v10 = (_QWORD *)swift_task_alloc(dword_1010EE2BC);
    *(_QWORD *)(v0 + 144) = v10;
    *v10 = v0;
    v10[1] = sub_1000C29F0;
    return sub_1000C2B20(*(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 160));
  }
}

uint64_t sub_1000C29F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000C2ABC;
  else
    v4 = sub_1000C2A54;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), 0);
}

uint64_t sub_1000C2A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C2ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C2B20(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 + 72) = a2;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v3 + 48) = v4;
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C2B80, v2, 0);
}

uint64_t sub_1000C2B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, char, uint64_t);
  uint64_t v19;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v1, v2, type metadata accessor for OwnerSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 56);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v19 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 24) = sub_100016940(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Upload keys for %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 56), type metadata accessor for OwnerSharingCircle);
  }

  v15 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 200);
  v18 = (uint64_t (*)(uint64_t, char, uint64_t))((char *)&dword_1010F4100 + dword_1010F4100);
  v16 = (_QWORD *)swift_task_alloc(unk_1010F4104);
  *(_QWORD *)(v0 + 64) = v16;
  *v16 = v0;
  v16[1] = sub_1000C2DF4;
  return v18(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 72), v15);
}

uint64_t sub_1000C2DF4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000C2E64, *(_QWORD *)(v2 + 40), 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 56));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000C2E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v3 + 16, v2);
  swift_retain(v3);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE2C0, v3);
  swift_release_n(v3, 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C2F10(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_BYTE *)(v3 + 280) = a2;
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v2;
  v4 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v3 + 128) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 136) = v5;
  *(_QWORD *)(v3 + 144) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101111440);
  *(_QWORD *)(v3 + 152) = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 160) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 168) = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 176) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 184) = v9;
  v10 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v3 + 192) = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 200) = swift_task_alloc(v11);
  *(_QWORD *)(v3 + 208) = swift_task_alloc(v11);
  return swift_task_switch(sub_1000C2FE8, v2, 0);
}

uint64_t sub_1000C2FE8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[14];
  v2 = v0[26];
  v3 = v0[22];
  v4 = v0[23];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[27] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[26];
  v12 = v0[22];
  if (v10)
  {
    v20 = v0[23];
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v21 = v14;
    *(_DWORD *)v13 = 141558275;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v0[13] = sub_100016940(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Download keys for %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[23] + 8))(v0[26], v0[22]);
  }

  v18 = *(_QWORD *)(v0[15] + 136);
  v0[28] = v18;
  return swift_task_switch(sub_1000C3224, v18, 0);
}

uint64_t sub_1000C3224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 216))(v2, *(_QWORD *)(v0 + 112), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101055418, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 232) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 240) = v10;
  *v10 = v0;
  v10[1] = sub_1000C32FC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 168), sub_100067DE8, v8, *(_QWORD *)(v0 + 152));
}

uint64_t sub_1000C32FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  swift_release();
  return swift_task_switch(sub_1000C335C, v1, 0);
}

uint64_t sub_1000C335C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)();
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  sub_10000F9B8(*(_QWORD *)(v0 + 168), v1, (uint64_t *)&unk_101111440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 168);
    sub_100004048(*(_QWORD *)(v0 + 160), (uint64_t *)&unk_101111440);
    v5 = sub_1000D9414();
    v6 = swift_allocError(&type metadata for BeaconSharingService.BeaconSharingServiceError, v5, 0, 0);
    *v7 = 3;
    swift_willThrow(v6);
    sub_100004048(v4, (uint64_t *)&unk_101111440);
    v8 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 120);
    v14 = *(unsigned __int8 *)(v0 + 280);
    sub_1000126EC(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144), type metadata accessor for MemberSharingCircle);
    v15 = *(_QWORD *)(v13 + 200);
    v16 = type metadata accessor for MemberCircleRevokeManager();
    if (v14 == 1)
    {
      *(_QWORD *)(v0 + 56) = v15;
      v17 = v0 + 56;
      *(_QWORD *)(v0 + 80) = v16;
      *(_QWORD *)(v0 + 88) = &off_1010B7198;
      v18 = unk_1010F40C4;
      v22 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F40C0 + dword_1010F40C0);
      swift_retain();
      v19 = (_QWORD *)swift_task_alloc(v18);
      *(_QWORD *)(v0 + 248) = v19;
      v20 = sub_1000C354C;
    }
    else
    {
      *(_QWORD *)(v0 + 16) = v15;
      v17 = v0 + 16;
      *(_QWORD *)(v0 + 40) = v16;
      *(_QWORD *)(v0 + 48) = &off_1010B7198;
      v21 = unk_1010F40CC;
      v22 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F40C8 + dword_1010F40C8);
      swift_retain();
      v19 = (_QWORD *)swift_task_alloc(v21);
      *(_QWORD *)(v0 + 264) = v19;
      v20 = sub_1000C3760;
    }
    *v19 = v0;
    v19[1] = v20;
    return v22(*(_QWORD *)(v0 + 144), v17);
  }
}

uint64_t sub_1000C354C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 120);
    v5 = sub_1000C36C4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 56));
    v5 = sub_1000C35C0;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000C35C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  type metadata accessor for Transaction(0);
  v7 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v7 + 16, v6);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE240, v7);
  swift_release_n(v7, 2);
  sub_1000126B0(v5, type metadata accessor for MemberSharingCircle);
  sub_100004048(v4, (uint64_t *)&unk_101111440);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C36C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 168);
  sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for MemberSharingCircle);
  sub_100004048(v1, (uint64_t *)&unk_101111440);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C3760()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 120);
    v5 = sub_1000C37D4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_1000DB5D0;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000C37D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 168);
  sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for MemberSharingCircle);
  sub_100004048(v1, (uint64_t *)&unk_101111440);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C3870(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2[30] = a1;
  v2[31] = v1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[32] = v3;
  v2[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SharedBeaconRecord(0);
  v2[34] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[35] = v5;
  v2[36] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MemberSharingCircle(0);
  v2[37] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[38] = v7;
  v2[39] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_101109390);
  v2[40] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[41] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[42] = swift_task_alloc(v10);
  v2[43] = swift_task_alloc(v10);
  v2[44] = swift_task_alloc(v10);
  v2[45] = swift_task_alloc(v10);
  v2[46] = swift_task_alloc(v10);
  v2[47] = swift_task_alloc(v10);
  v11 = type metadata accessor for OwnerSharingCircle(0);
  v2[48] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[49] = v12;
  v2[50] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v2[51] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[52] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v2[53] = v15;
  v2[54] = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C39E0, v1, 0);
}

uint64_t sub_1000C39E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 136);
  *(_QWORD *)(v0 + 440) = v1;
  return swift_task_switch(sub_1000C39FC, v1, 0);
}

uint64_t sub_1000C39FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 432);
  v1 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 448) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 696) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101055490, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 456) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 464) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 472) = v13;
  v14 = sub_10001A9A8(&qword_1010EC840);
  *v13 = v0;
  v13[1] = sub_1000C3B00;
  return unsafeBlocking<A>(_:)(v0 + 216, sub_1000D9288, v10, v14);
}

uint64_t sub_1000C3B00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 440);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));
  swift_release();
  return swift_task_switch(sub_1000C3B64, v1, 0);
}

uint64_t sub_1000C3B64()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[31];
  v0[60] = v0[27];
  return swift_task_switch(sub_1000C3B80, v1, 0);
}

uint64_t sub_1000C3B80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 440);
  *(_QWORD *)(v0 + 488) = sub_1003BA248((uint64_t)&off_1010485B8);
  return swift_task_switch(sub_1000C3BC8, v1, 0);
}

uint64_t sub_1000C3BC8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  v3 = *(unsigned __int8 *)(v0 + 696);
  v4 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 408);
  v8 = v3 | 7;
  v9 = (v3 + 24) & ~v3;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 448))(v5, *(_QWORD *)(v0 + 240), v7);
  v10 = (v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_1010554B8, v10 + 8, v8);
  *(_QWORD *)(v0 + 496) = v11;
  *(_QWORD *)(v11 + 16) = v4;
  v2(v11 + v9, v5, v7);
  *(_QWORD *)(v11 + v10) = v1;
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v1);
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 504) = v13;
  v14 = sub_10001A9A8(&qword_1010EE100);
  *v13 = v0;
  v13[1] = sub_1000C3CE0;
  return unsafeBlocking<A>(_:)(v0 + 208, sub_1000D82C0, v11, v14);
}

uint64_t sub_1000C3CE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 440);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 504));
  swift_release();
  return swift_task_switch(sub_1000C3D40, v1, 0);
}

uint64_t sub_1000C3D40()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[31];
  swift_bridgeObjectRelease();
  v0[64] = v0[26];
  return swift_task_switch(sub_1000C3D88, v1, 0);
}

uint64_t sub_1000C3D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 512);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 520) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 384);
    v3 = *(_QWORD *)(v0 + 392);
    *(_QWORD *)(v0 + 528) = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 128);
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 700) = v5;
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 552) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 544) = 0;
    v6 = *(_QWORD *)(v0 + 400);
    sub_10005972C(v1 + ((v5 + 32) & ~(unint64_t)v5), v6, type metadata accessor for OwnerSharingCircle);
    v7 = *(int *)(v4 + 20);
    *(_DWORD *)(v0 + 704) = v7;
    v8 = v6 + v7;
    v9 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 560) = v9;
    *v9 = v0;
    v9[1] = sub_1000C3FB0;
    return sub_10090C6D8(v0 + 16, v8);
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v0 + 480);
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v0 + 600) = v12;
    if (v12)
    {
      v14 = *(_QWORD *)(v0 + 296);
      v13 = *(_QWORD *)(v0 + 304);
      v15 = *(_DWORD *)(v13 + 80);
      *(_DWORD *)(v0 + 708) = v15;
      *(_QWORD *)(v0 + 608) = *(_QWORD *)(v13 + 72);
      *(_QWORD *)(v0 + 624) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v0 + 616) = 0;
      v16 = *(_QWORD *)(v0 + 440);
      sub_10005972C(v11 + ((v15 + 32) & ~(unint64_t)v15), *(_QWORD *)(v0 + 312), type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 712) = *(_DWORD *)(v14 + 24);
      return swift_task_switch(sub_1000C4A00, v16, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(v0 + 400);
      v19 = *(_QWORD *)(v0 + 368);
      v18 = *(_QWORD *)(v0 + 376);
      v21 = *(_QWORD *)(v0 + 352);
      v20 = *(_QWORD *)(v0 + 360);
      v23 = *(_QWORD *)(v0 + 336);
      v22 = *(_QWORD *)(v0 + 344);
      v24 = *(_QWORD *)(v0 + 312);
      v25 = *(_QWORD *)(v0 + 288);
      v26 = *(_QWORD *)(v0 + 264);
      swift_task_dealloc(*(_QWORD *)(v0 + 432));
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
    }
  }
}

uint64_t sub_1000C3FB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v2[74] = v0;
    v4 = v2[31];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_1000C4928;
    v6 = v4;
  }
  else
  {
    v6 = v2[66];
    v5 = sub_1000C4048;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_1000C4048()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = v0[8];
  if (v1 >> 60 != 15)
  {
    v7 = v0[7];
    sub_10001BBBC(v7, v0[8]);
    sub_10001BBBC(v7, v1);
    sub_1002F7C0C(57, v7, v1);
    __asm { BR              X10 }
  }
  v2 = sub_1000D94EC();
  v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
  *v4 = 12;
  swift_willThrow(v3);
  sub_1000D9530(v0 + 2);
  v0[74] = v3;
  v5 = v0[31];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000C4928, v5, 0);
}

uint64_t sub_1000C4170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (BYTE6(v4) == 57)
  {
    v26 = v2;
    v27 = v0;
    v6 = v3[71];
    sub_10001BBBC(v1, v4);
    sub_1007E7118(v1, v4);
    v8 = v6;
    if (!v6)
    {
      v9 = v7;
      v3[72] = sub_1007E3D28(v7, 0);
      v3[73] = v10;
      v25 = v10;
      CCECCryptorRelease(v9);
      sub_10001BC14(v1, v4);
      __asm { BR              X10 }
    }
    v11 = static os_log_type_t.error.getter(v7);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v12 = qword_1011B77E0;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
    *v5 = v8;
    swift_errorRetain(v8);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v16 = String.init<A>(describing:)(v5, v15);
    v18 = v17;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_10001AA00();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v18;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Error deriving advertisementKey: %@", 35, 2, v14);
    swift_bridgeObjectRelease();
    v19 = sub_1000D95A8();
    v20 = swift_allocError(&type metadata for CryptoTokenError, v19, 0, 0);
    *v21 = 0;
    swift_willThrow(v20);
    swift_errorRelease(v8);
    sub_10001BC14(v1, v4);
    _StringGuts.grow(_:)(35);
    v3[22] = 0;
    v3[23] = 0xE000000000000000;
    v22._countAndFlagsBits = 0xD000000000000021;
    v22._object = (void *)0x8000000100EC7AC0;
    String.append(_:)(v22);
    v3[25] = v20;
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    _print_unlocked<A, B>(_:_:)(v26, v27, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v3[22], v3[23], "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
  }
  else
  {
    sub_10001BC14(v1, v4);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x8000000100EC7A70, "searchpartyd/KeyRepresentable.swift", 35, 2, 178, 0);
  }
}

uint64_t sub_1000C4570()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(void (**)(void))(v0 + 448);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(_OWORD **)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 384);
  v51 = (char *)v3 + *(int *)(*(_QWORD *)(v0 + 320) + 48);
  *v3 = *(_OWORD *)(v0 + 576);
  v1();
  v5 = 0x201u >> (8 * *(_BYTE *)(v2 + *(int *)(v4 + 28)));
  v6 = *(_QWORD *)(v0 + 584);
  v7 = *(_QWORD *)(v0 + 576);
  v53 = *(_QWORD *)(v0 + 552);
  v50 = *(void (**)(char *, char *, uint64_t))(v0 + 464);
  v8 = *(void (**)(char *, char *, uint64_t))(v0 + 448);
  v9 = *(_QWORD *)(v0 + 408);
  v10 = *(uint64_t **)(v0 + 368);
  v11 = *(uint64_t **)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 320);
  *(_BYTE *)(*(_QWORD *)(v0 + 376) + *(int *)(v12 + 64)) = v5;
  v13 = (char *)v10 + *(int *)(v12 + 48);
  v14 = *(int *)(v12 + 64);
  *v10 = v7;
  v10[1] = v6;
  v8(v13, v51, v9);
  *((_BYTE *)v10 + v14) = v5;
  v15 = (char *)v11 + *(int *)(v12 + 48);
  v16 = *(int *)(v12 + 64);
  *v11 = v7;
  v11[1] = v6;
  v50(v15, v13, v9);
  *((_BYTE *)v11 + v16) = v5;
  sub_10001BBBC(v7, v6);
  sub_10001BBBC(v7, v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v53);
  v18 = *(_QWORD *)(v0 + 552);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v18 = sub_1007C8388(0, *(_QWORD *)(v18 + 16) + 1, 1, *(_QWORD *)(v0 + 552));
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
    v18 = sub_1007C8388(v19 > 1, v20 + 1, 1, v18);
  v21 = *(_QWORD *)(v0 + 584);
  v22 = *(_QWORD *)(v0 + 576);
  v23 = *(_QWORD *)(v0 + 520);
  v24 = *(_QWORD *)(v0 + 400);
  v25 = *(_QWORD *)(v0 + 376);
  v26 = *(_QWORD *)(v0 + 360);
  v27 = *(_QWORD *)(v0 + 328);
  v28 = *(_QWORD *)(v0 + 544) + 1;
  *(_QWORD *)(v18 + 16) = v20 + 1;
  sub_100005CF0(v26, v18+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v20, (uint64_t *)&unk_101109390);
  sub_10001BC14(v22, v21);
  sub_100004048(v25, (uint64_t *)&unk_101109390);
  sub_1000126B0(v24, type metadata accessor for OwnerSharingCircle);
  if (v28 == v23)
  {
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)(v0 + 480);
    v30 = *(_QWORD *)(v29 + 16);
    *(_QWORD *)(v0 + 600) = v30;
    if (v30)
    {
      v32 = *(_QWORD *)(v0 + 296);
      v31 = *(_QWORD *)(v0 + 304);
      v33 = *(_DWORD *)(v31 + 80);
      *(_DWORD *)(v0 + 708) = v33;
      *(_QWORD *)(v0 + 608) = *(_QWORD *)(v31 + 72);
      *(_QWORD *)(v0 + 624) = v18;
      *(_QWORD *)(v0 + 616) = 0;
      v34 = *(_QWORD *)(v0 + 440);
      sub_10005972C(v29 + ((v33 + 32) & ~(unint64_t)v33), *(_QWORD *)(v0 + 312), type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 712) = *(_DWORD *)(v32 + 24);
      return swift_task_switch(sub_1000C4A00, v34, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      v42 = *(_QWORD *)(v0 + 400);
      v44 = *(_QWORD *)(v0 + 368);
      v43 = *(_QWORD *)(v0 + 376);
      v46 = *(_QWORD *)(v0 + 352);
      v45 = *(_QWORD *)(v0 + 360);
      v48 = *(_QWORD *)(v0 + 336);
      v47 = *(_QWORD *)(v0 + 344);
      v49 = *(_QWORD *)(v0 + 312);
      v52 = *(_QWORD *)(v0 + 288);
      v54 = *(_QWORD *)(v0 + 264);
      swift_task_dealloc(*(_QWORD *)(v0 + 432));
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v52);
      swift_task_dealloc(v54);
      return (*(uint64_t (**)(unint64_t))(v0 + 8))(v18);
    }
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 544) + 1;
    *(_QWORD *)(v0 + 552) = v18;
    *(_QWORD *)(v0 + 544) = v36;
    v37 = *(_QWORD *)(v0 + 400);
    v38 = *(_QWORD *)(v0 + 384);
    sub_10005972C(*(_QWORD *)(v0 + 512)+ ((*(unsigned __int8 *)(v0 + 700) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 700))+ *(_QWORD *)(v0 + 536) * v36, v37, type metadata accessor for OwnerSharingCircle);
    v39 = *(int *)(v38 + 20);
    *(_DWORD *)(v0 + 704) = v39;
    v40 = v37 + v39;
    v41 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 560) = v41;
    *v41 = v0;
    v41[1] = sub_1000C3FB0;
    return sub_10090C6D8(v0 + 16, v40);
  }
}

uint64_t sub_1000C4928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_1000126B0(*(_QWORD *)(v0 + 400), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C4A00()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  v2 = *(unsigned __int8 *)(v0 + 696);
  v3 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 408);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 424);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 448))(v4, *(_QWORD *)(v0 + 312) + *(int *)(v0 + 712), v5);
  v9 = swift_allocObject(&unk_1010554E0, v7, v8);
  *(_QWORD *)(v0 + 632) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 640) = v11;
  *v11 = v0;
  v11[1] = sub_1000C4AEC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 264), sub_100067DF8, v9, *(_QWORD *)(v0 + 256));
}

uint64_t sub_1000C4AEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 640));
  swift_release();
  return swift_task_switch(sub_1000C4B50, v1, 0);
}

uint64_t sub_1000C4B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 48))(v1, 1, *(_QWORD *)(v0 + 272)) == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 312), type metadata accessor for MemberSharingCircle);
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
    v2 = *(_QWORD *)(v0 + 616) + 1;
    if (v2 == *(_QWORD *)(v0 + 600))
    {
      v19 = *(_QWORD *)(v0 + 624);
      swift_bridgeObjectRelease();
      v3 = *(_QWORD *)(v0 + 400);
      v5 = *(_QWORD *)(v0 + 368);
      v4 = *(_QWORD *)(v0 + 376);
      v7 = *(_QWORD *)(v0 + 352);
      v6 = *(_QWORD *)(v0 + 360);
      v9 = *(_QWORD *)(v0 + 336);
      v8 = *(_QWORD *)(v0 + 344);
      v10 = *(_QWORD *)(v0 + 312);
      v11 = *(_QWORD *)(v0 + 288);
      v18 = *(_QWORD *)(v0 + 264);
      swift_task_dealloc(*(_QWORD *)(v0 + 432));
      swift_task_dealloc(v3);
      swift_task_dealloc(v4);
      swift_task_dealloc(v5);
      swift_task_dealloc(v6);
      swift_task_dealloc(v7);
      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      swift_task_dealloc(v18);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
    }
    *(_QWORD *)(v0 + 616) = v2;
    v16 = *(_QWORD *)(v0 + 440);
    v17 = *(_QWORD *)(v0 + 296);
    sub_10005972C(*(_QWORD *)(v0 + 480)+ ((*(unsigned __int8 *)(v0 + 708) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 708))+ *(_QWORD *)(v0 + 608) * v2, *(_QWORD *)(v0 + 312), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 712) = *(_DWORD *)(v17 + 24);
    v14 = sub_1000C4A00;
    v15 = v16;
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 440);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 288), type metadata accessor for SharedBeaconRecord);
    v14 = sub_1000C4D14;
    v15 = v13;
  }
  return swift_task_switch(v14, v15, 0);
}

uint64_t sub_1000C4D14()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 464);
  v2 = *(unsigned __int8 *)(v0 + 696);
  v3 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 408);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 424);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 448))(v4, *(_QWORD *)(v0 + 312) + *(int *)(v0 + 712), v5);
  v9 = swift_allocObject(&unk_101055508, v7, v8);
  *(_QWORD *)(v0 + 648) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 656) = v11;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
  *v11 = v0;
  v11[1] = sub_1000C4E14;
  return unsafeBlocking<A>(_:)(v0 + 80, sub_1000D9638, v9, v12);
}

uint64_t sub_1000C4E14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 656));
  swift_release();
  return swift_task_switch(sub_1000C4E78, v1, 0);
}

uint64_t sub_1000C4E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 312);
  if (*(_QWORD *)(v0 + 104))
  {
    v2 = *(_QWORD *)(v0 + 296);
    sub_10000F9FC((__int128 *)(v0 + 80), v0 + 120);
    v3 = v1 + *(int *)(v2 + 20);
    v4 = (_QWORD *)swift_task_alloc(dword_10110D1FC);
    *(_QWORD *)(v0 + 664) = v4;
    *v4 = v0;
    v4[1] = sub_1000C5078;
    return sub_100955998(v3);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 288), type metadata accessor for SharedBeaconRecord);
    sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
    sub_100004048(v0 + 80, (uint64_t *)&unk_1010EE310);
    v6 = *(_QWORD *)(v0 + 616) + 1;
    if (v6 == *(_QWORD *)(v0 + 600))
    {
      v19 = *(_QWORD *)(v0 + 624);
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(v0 + 400);
      v9 = *(_QWORD *)(v0 + 368);
      v8 = *(_QWORD *)(v0 + 376);
      v11 = *(_QWORD *)(v0 + 352);
      v10 = *(_QWORD *)(v0 + 360);
      v13 = *(_QWORD *)(v0 + 336);
      v12 = *(_QWORD *)(v0 + 344);
      v14 = *(_QWORD *)(v0 + 312);
      v15 = *(_QWORD *)(v0 + 288);
      v18 = *(_QWORD *)(v0 + 264);
      swift_task_dealloc(*(_QWORD *)(v0 + 432));
      swift_task_dealloc(v7);
      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v18);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
    }
    else
    {
      *(_QWORD *)(v0 + 616) = v6;
      v16 = *(_QWORD *)(v0 + 440);
      v17 = *(_QWORD *)(v0 + 296);
      sub_10005972C(*(_QWORD *)(v0 + 480)+ ((*(unsigned __int8 *)(v0 + 708) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 708))+ *(_QWORD *)(v0 + 608) * v6, *(_QWORD *)(v0 + 312), type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 712) = *(_DWORD *)(v17 + 24);
      return swift_task_switch(sub_1000C4A00, v16, 0);
    }
  }
}

uint64_t sub_1000C5078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 664);
  v4[84] = a1;
  v4[85] = a2;
  v4[86] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = v4[31];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = sub_1000C55E0;
    v8 = v6;
  }
  else
  {
    v8 = v4[31];
    v7 = sub_1000C5108;
  }
  return swift_task_switch(v7, v8, 0);
}

void sub_1000C5108()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(v0[36] + *(int *)(v0[34] + 64));
  v2 = v0[18];
  v3 = v0[19];
  sub_10001AA44(v0 + 15, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 88))(v2, v3);
  __asm { BR              X9 }
}

uint64_t sub_1000C517C(char a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  if ((a1 & 1) != 0)
    v3 = 2;
  else
    v3 = 1;
  v4 = *(_QWORD *)(v2 + 680);
  v5 = *(_QWORD *)(v2 + 672);
  v42 = *(_QWORD *)(v2 + 624);
  v44 = v1;
  v6 = *(void (**)(void))(v2 + 448);
  v7 = *(_QWORD *)(v2 + 408);
  v8 = *(uint64_t **)(v2 + 344);
  v9 = *(uint64_t **)(v2 + 352);
  v10 = *(uint64_t **)(v2 + 336);
  v11 = *(_QWORD *)(v2 + 320);
  v40 = (char *)v9 + *(int *)(v11 + 48);
  v41 = *(void (**)(char *, char *, uint64_t))(v2 + 464);
  v38 = *(int *)(v11 + 64);
  *v9 = v5;
  v9[1] = v4;
  v6();
  *((_BYTE *)v9 + v38) = v3;
  v12 = (char *)v8 + *(int *)(v11 + 48);
  v39 = *(int *)(v11 + 64);
  *v8 = v5;
  v8[1] = v4;
  ((void (*)(char *, char *, uint64_t))v6)(v12, v40, v7);
  *((_BYTE *)v8 + v39) = v3;
  v13 = (char *)v10 + *(int *)(v11 + 48);
  v14 = *(int *)(v11 + 64);
  *v10 = v5;
  v10[1] = v4;
  v41(v13, v12, v7);
  *((_BYTE *)v10 + v14) = v3;
  sub_10001BBBC(v5, v4);
  sub_10001BBBC(v5, v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
  v16 = *(_QWORD *)(v2 + 624);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v16 = sub_1007C8388(0, *(_QWORD *)(v16 + 16) + 1, 1, *(_QWORD *)(v2 + 624));
  v18 = *(_QWORD *)(v16 + 16);
  v17 = *(_QWORD *)(v16 + 24);
  if (v18 >= v17 >> 1)
    v16 = sub_1007C8388(v17 > 1, v18 + 1, 1, v16);
  v19 = *(_QWORD *)(v2 + 680);
  v20 = *(_QWORD *)(v2 + 672);
  v21 = *(_QWORD *)(v2 + 352);
  v23 = *(_QWORD *)(v2 + 328);
  v22 = *(_QWORD *)(v2 + 336);
  v24 = *(_QWORD *)(v2 + 312);
  v25 = *(_QWORD *)(v2 + 288);
  *(_QWORD *)(v16 + 16) = v18 + 1;
  sub_100005CF0(v22, v16+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v18, (uint64_t *)&unk_101109390);
  sub_10001BC14(v20, v19);
  sub_100004048(v21, (uint64_t *)&unk_101109390);
  sub_1000126B0(v25, type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v24, type metadata accessor for MemberSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
  v26 = *(_QWORD *)(v2 + 616) + 1;
  if (v26 == *(_QWORD *)(v2 + 600))
  {
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v2 + 400);
    v29 = *(_QWORD *)(v2 + 368);
    v28 = *(_QWORD *)(v2 + 376);
    v31 = *(_QWORD *)(v2 + 352);
    v30 = *(_QWORD *)(v2 + 360);
    v33 = *(_QWORD *)(v2 + 336);
    v32 = *(_QWORD *)(v2 + 344);
    v34 = *(_QWORD *)(v2 + 312);
    v43 = *(_QWORD *)(v2 + 288);
    v45 = *(_QWORD *)(v2 + 264);
    swift_task_dealloc(*(_QWORD *)(v2 + 432));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(unint64_t))(v2 + 8))(v16);
  }
  else
  {
    *(_QWORD *)(v2 + 624) = v16;
    *(_QWORD *)(v2 + 616) = v26;
    v36 = *(_QWORD *)(v2 + 440);
    v37 = *(_QWORD *)(v2 + 296);
    sub_10005972C(*(_QWORD *)(v2 + 480)+ ((*(unsigned __int8 *)(v2 + 708) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 708))+ *(_QWORD *)(v2 + 608) * v26, *(_QWORD *)(v2 + 312), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v2 + 712) = *(_DWORD *)(v37 + 24);
    return swift_task_switch(sub_1000C4A00, v36, 0);
  }
}

uint64_t sub_1000C55E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 312);
  sub_1000126B0(*(_QWORD *)(v0 + 288), type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 120));
  v2 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C56D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EC838);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EE290);
  v2[10] = v7;
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerSharingCircle(0);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnerPeerTrust(0);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C57CC, v1, 0);
}

uint64_t sub_1000C57CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 136);
  *(_QWORD *)(v0 + 112) = v1;
  return swift_task_switch(sub_1000C57E8, v1, 0);
}

uint64_t sub_1000C57E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[14];
  v3 = v0[6];
  v2 = v0[7];
  v4 = v0[4];
  v5 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[2], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101055468, v7 + v3, v6 | 7);
  v0[15] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[16] = v10;
  *v10 = v0;
  v10[1] = sub_1000C58C0;
  return unsafeBlocking<A>(_:)(v0[9], sub_100066618, v8, v0[8]);
}

uint64_t sub_1000C58C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_release();
  return swift_task_switch(sub_1000C5920, v1, 0);
}

uint64_t sub_1000C5920()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;

  v1 = v0[9];
  v2 = sub_10001A9A8(&qword_1010EC848);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_1010EC838);
    v13 = (char *)&dword_1010F4018 + dword_1010F4018;
    v3 = (_QWORD *)swift_task_alloc(unk_1010F401C);
    v0[19] = v3;
    *v3 = v0;
    v3[1] = sub_1000C5CAC;
    return ((uint64_t (*)(_QWORD, _QWORD))v13)(v0[2], 0);
  }
  else
  {
    v6 = v0[12];
    v5 = v0[13];
    v8 = v0[10];
    v7 = v0[11];
    v9 = v1 + *(int *)(v2 + 48);
    v10 = v7 + *(int *)(v8 + 48);
    sub_1000126EC(v1, v7, type metadata accessor for OwnerPeerTrust);
    sub_1000126EC(v9, v10, type metadata accessor for OwnerSharingCircle);
    v11 = v7 + *(int *)(v8 + 48);
    sub_1000126EC(v7, v5, type metadata accessor for OwnerPeerTrust);
    sub_1000126EC(v11, v6, type metadata accessor for OwnerSharingCircle);
    v14 = (char *)&dword_1010F4090 + dword_1010F4090;
    v12 = (_QWORD *)swift_task_alloc(unk_1010F4094);
    v0[17] = v12;
    *v12 = v0;
    v12[1] = sub_1000C5AB0;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v14)(v0[13], v0[12], 0);
  }
}

uint64_t sub_1000C5AB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000C5C1C;
  else
    v4 = sub_1000C5B14;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 24), 0);
}

uint64_t sub_1000C5B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 104);
  sub_1000126B0(*(_QWORD *)(v0 + 96), type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 24);
  type metadata accessor for Transaction(0);
  v8 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v8 + 16, v7);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE2A0, v8);
  swift_release_n(v8, 2);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C5C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 104);
  sub_1000126B0(*(_QWORD *)(v0 + 96), type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C5CAC()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 152);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000C5D60, v2[3], 0);
  v6 = v2[12];
  v5 = v2[13];
  v7 = v2[11];
  v8 = v2[9];
  v9 = v2[7];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000C5D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 24);
  type metadata accessor for Transaction(0);
  v7 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v7 + 16, v6);
  swift_retain(v7);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE2A0, v7);
  swift_release_n(v7, 2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C5E48(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MemberSharingCircle(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v2[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C5EFC, v1, 0);
}

uint64_t sub_1000C5EFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 136);
  *(_QWORD *)(v0 + 104) = v1;
  return swift_task_switch(sub_1000C5F18, v1, 0);
}

uint64_t sub_1000C5F18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[13];
  v3 = v0[6];
  v2 = v0[7];
  v4 = v0[4];
  v5 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[2], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101055F30, v7 + v3, v6 | 7);
  v0[14] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[15] = v10;
  *v10 = v0;
  v10[1] = sub_1000C5FF0;
  return unsafeBlocking<A>(_:)(v0[9], sub_100067DE8, v8, v0[8]);
}

uint64_t sub_1000C5FF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_1000C6050, v1, 0);
}

uint64_t sub_1000C6050()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 48))(v1, 1, *(_QWORD *)(v0 + 80));
  v3 = *(_QWORD *)(v0 + 96);
  if (v2 == 1)
  {
    v4 = *(_QWORD *)(v0 + 56);
    sub_100004048(v1, (uint64_t *)&unk_101111440);
    v5 = sub_1000D9414();
    v6 = swift_allocError(&type metadata for BeaconSharingService.BeaconSharingServiceError, v5, 0, 0);
    *v7 = 3;
    swift_willThrow(v6);
    swift_task_dealloc(v3);
    swift_task_dealloc(v1);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1000126EC(v1, *(_QWORD *)(v0 + 96), type metadata accessor for MemberSharingCircle);
    v9 = (_QWORD *)swift_task_alloc(dword_10111A224);
    *(_QWORD *)(v0 + 128) = v9;
    *v9 = v0;
    v9[1] = sub_1000C6168;
    return sub_100C2EE60(*(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_1000C6168()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_1000C61C0, v1, 0);
}

uint64_t sub_1000C61C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 24);
  type metadata accessor for Transaction(0);
  v5 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v5 + 16, v4);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE698, v5);
  swift_release_n(v5, 2);
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C629C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  *(_QWORD *)(v5 + 264) = a4;
  *(_QWORD *)(v5 + 272) = v4;
  *(_BYTE *)(v5 + 636) = a2;
  *(_QWORD *)(v5 + 248) = a1;
  *(_QWORD *)(v5 + 256) = a3;
  v6 = sub_10001A9A8((uint64_t *)&unk_101111440);
  *(_QWORD *)(v5 + 280) = v6;
  *(_QWORD *)(v5 + 288) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v5 + 296) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 304) = v8;
  *(_QWORD *)(v5 + 312) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *(_QWORD *)(v5 + 320) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnerPeerTrust(0);
  *(_QWORD *)(v5 + 328) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 336) = v11;
  *(_QWORD *)(v5 + 344) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EE0E0);
  *(_QWORD *)(v5 + 352) = v12;
  *(_QWORD *)(v5 + 360) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v5 + 368) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v5 + 376) = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 384) = swift_task_alloc(v15);
  *(_QWORD *)(v5 + 392) = swift_task_alloc(v15);
  v16 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 400) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v5 + 408) = v17;
  v18 = *(_QWORD *)(v17 + 64);
  *(_QWORD *)(v5 + 416) = v18;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 424) = swift_task_alloc(v19);
  *(_QWORD *)(v5 + 432) = swift_task_alloc(v19);
  *(_QWORD *)(v5 + 440) = swift_task_alloc(v19);
  return swift_task_switch(sub_1000C6420, v4, 0);
}

uint64_t sub_1000C6420()
{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (__cdecl *v25)();
  uint64_t v26;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0[31];
  v3 = v0[55];
  v5 = v0[50];
  v4 = v0[51];
  v6 = type metadata accessor for Logger(0);
  v0[56] = v6;
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[57] = v7;
  v8 = v7(v3, v2, v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[55];
  v13 = v0[50];
  v14 = v0[51];
  if (v11)
  {
    v15 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(32, -1);
    v26 = v24;
    *(_DWORD *)v15 = 141558275;
    v0[29] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v0[30] = sub_100016940(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Handle decline %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v20 = v15;
    v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v0[55], v0[50]);
  }

  v0[58] = v19;
  v21 = qword_1010EA5B0;
  swift_retain();
  if (v21 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 22, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v25 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB58 + dword_1010EBB58);
    v23 = (_QWORD *)swift_task_alloc(unk_1010EBB5C);
    v0[59] = v23;
    *v23 = v0;
    v23[1] = sub_1000C6728;
    return v25();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C6728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000C6788, v3, 0);
}

uint64_t sub_1000C6788()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 480))
  {
    v2 = *(_QWORD *)(v0 + 272);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = *(_QWORD *)(v2 + 136);
    *(_QWORD *)(v0 + 488) = v3;
    return swift_task_switch(sub_1000C6978, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9940 != -1)
      swift_once(&qword_1010E9940, sub_1000B748C);
    v5 = sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B6760);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No BeaconStore available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    *v11 = 0x74536E6F63616542;
    v11[1] = 0xEB0000000065726FLL;
    swift_willThrow(v10);
    v12 = *(_QWORD *)(v0 + 432);
    v13 = *(_QWORD *)(v0 + 424);
    v15 = *(_QWORD *)(v0 + 384);
    v14 = *(_QWORD *)(v0 + 392);
    v16 = *(_QWORD *)(v0 + 360);
    v17 = *(_QWORD *)(v0 + 344);
    v19 = *(_QWORD *)(v0 + 312);
    v18 = *(_QWORD *)(v0 + 320);
    v20 = *(_QWORD *)(v0 + 288);
    swift_task_dealloc(*(_QWORD *)(v0 + 440));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000C6978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 400);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 456))(v2, *(_QWORD *)(v0 + 248), v5);
  LODWORD(v6) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 632) = v6;
  v6 = v6;
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010553C8, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 496) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 504) = v9;
  v9(v8 + v7, v2, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 512) = v11;
  *v11 = v0;
  v11[1] = sub_1000C6A60;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 360), sub_10007CC00, v8, *(_QWORD *)(v0 + 352));
}

uint64_t sub_1000C6A60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 512));
  swift_release();
  return swift_task_switch(sub_1000C6AC4, v1, 0);
}

uint64_t sub_1000C6AC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 360);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 376) + 48))(v1, 1, *(_QWORD *)(v0 + 368)) == 1)
  {
    sub_100004048(v1, &qword_1010EE0E0);
    return swift_task_switch(sub_1000C7734, *(_QWORD *)(v0 + 488), 0);
  }
  else
  {
    sub_1000126EC(v1, *(_QWORD *)(v0 + 392), type metadata accessor for OwnerSharingCircle);
    v3 = (_QWORD *)swift_task_alloc(dword_101112094);
    *(_QWORD *)(v0 + 520) = v3;
    *v3 = v0;
    v3[1] = sub_1000C6B7C;
    return sub_100AAF5B4(*(_BYTE *)(v0 + 636), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  }
}

uint64_t sub_1000C6B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 520);
  v3[66] = a1;
  v3[67] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1000C7EFC;
  else
    v5 = sub_1000C6BEC;
  return swift_task_switch(v5, v3[34], 0);
}

uint64_t sub_1000C6BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t (*v11)(void);

  v1 = *(_QWORD *)(v0 + 528);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 336) + 80);
    sub_10005972C(v1 + ((v2 + 32) & ~v2), *(_QWORD *)(v0 + 320), type metadata accessor for OwnerPeerTrust);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 320);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  v8 = *(_QWORD *)(v0 + 320);
  if (v7 == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 392), type metadata accessor for OwnerSharingCircle);
    sub_100004048(v8, (uint64_t *)&unk_1010EE160);
    return swift_task_switch(sub_1000C7734, *(_QWORD *)(v0 + 488), 0);
  }
  else
  {
    sub_1000126EC(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 344), type metadata accessor for OwnerPeerTrust);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 120))
    {
      sub_10000F9FC((__int128 *)(v0 + 96), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v11 = (uint64_t (*)(void))((char *)&dword_1010EBB10 + dword_1010EBB10);
      v10 = (_QWORD *)swift_task_alloc(unk_1010EBB14);
      *(_QWORD *)(v0 + 544) = v10;
      *v10 = v0;
      v10[1] = sub_1000C6D78;
      return v11();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000C6D78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000C6DD8, v3, 0);
}

uint64_t sub_1000C6DD8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char, uint64_t, uint64_t);

  v1 = (_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v0 + 552))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v19 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
    v2 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
    *(_QWORD *)(v0 + 560) = v2;
    *v2 = v0;
    v2[1] = sub_1000C6FDC;
    return v19(*(_BYTE *)(v0 + 636), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9940 != -1)
      swift_once(&qword_1010E9940, sub_1000B748C);
    v4 = sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B6760);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No FamilyCircleService available!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 344);

    swift_release();
    sub_1000126B0(v9, type metadata accessor for OwnerPeerTrust);
    sub_1000126B0(v8, type metadata accessor for OwnerSharingCircle);
    v10 = *(_QWORD *)(v0 + 432);
    v11 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 384);
    v12 = *(_QWORD *)(v0 + 392);
    v14 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 312);
    v16 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 288);
    swift_task_dealloc(*(_QWORD *)(v0 + 440));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000C6FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 560);
  v4[71] = a2;
  v4[72] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = v4[34];
    v7 = sub_1000C7128;
  }
  else
  {
    v6 = v4[69];
    v7 = sub_1000C7048;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1000C7048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(v0 + 272);
  if (*(_QWORD *)(v0 + 568))
  {
    swift_bridgeObjectRelease();
    v2 = sub_1000C7098;
  }
  else
  {
    v2 = sub_1000C7220;
  }
  return swift_task_switch(v2, v1, 0);
}

uint64_t sub_1000C7098()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = v0[48];
  sub_10005972C(v0[49], v1, type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  v4 = (char *)&dword_1010F4090 + dword_1010F4090;
  v2 = (_QWORD *)swift_task_alloc(unk_1010F4094);
  v0[73] = v2;
  *v2 = v0;
  v2[1] = sub_1000C7478;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v4)(v0[43], v0[49], 1);
}

uint64_t sub_1000C7128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 344);
  swift_release();
  swift_release();
  sub_1000126B0(v2, type metadata accessor for OwnerPeerTrust);
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C7220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t, uint64_t, char);

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 368);
  sub_10005972C(*(_QWORD *)(v0 + 392), v1, type metadata accessor for OwnerSharingCircle);
  v3 = sub_100CA8018((uint64_t)&off_101048F00);
  LOBYTE(v2) = sub_100A0658C(*(unsigned __int8 *)(v1 + *(int *)(v2 + 28)), v3);
  swift_bridgeObjectRelease();
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  if ((v2 & 1) != 0)
  {
    if (qword_1010E9940 != -1)
      swift_once(&qword_1010E9940, sub_1000B748C);
    v4 = sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B6760);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Ignoring incoming UTFS message from non-family member", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 344);

    swift_release();
    swift_release();
    sub_1000126B0(v9, type metadata accessor for OwnerPeerTrust);
    sub_1000126B0(v8, type metadata accessor for OwnerSharingCircle);
    v10 = *(_QWORD *)(v0 + 432);
    v11 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 384);
    v12 = *(_QWORD *)(v0 + 392);
    v14 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 312);
    v16 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 288);
    swift_task_dealloc(*(_QWORD *)(v0 + 440));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v21 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1010F4090 + dword_1010F4090);
    v20 = (_QWORD *)swift_task_alloc(unk_1010F4094);
    *(_QWORD *)(v0 + 584) = v20;
    *v20 = v0;
    v20[1] = sub_1000C7478;
    return v21(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 392), 1);
  }
}

uint64_t sub_1000C7478()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 584);
  *(_QWORD *)(*v1 + 592) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000C763C;
  else
    v4 = sub_1000C74DC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 272), 0);
}

uint64_t sub_1000C74DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 272);
  type metadata accessor for Transaction(0);
  v4 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v4 + 16, v3);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE228, v4);
  swift_release_n(v4, 2);
  swift_release();
  swift_release();
  sub_1000126B0(v2, type metadata accessor for OwnerPeerTrust);
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  v5 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 384);
  v7 = *(_QWORD *)(v0 + 392);
  v9 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C763C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 344);
  swift_release();
  swift_release();
  sub_1000126B0(v2, type metadata accessor for OwnerPeerTrust);
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C7734()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 504);
  v2 = *(unsigned __int8 *)(v0 + 632);
  v3 = *(_QWORD *)(v0 + 488);
  v4 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 400);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 416);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 456))(v4, *(_QWORD *)(v0 + 248), v5);
  v9 = swift_allocObject(&unk_1010553F0, v7, v8);
  *(_QWORD *)(v0 + 600) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 608) = v11;
  *v11 = v0;
  v11[1] = sub_1000C7820;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 288), sub_10007CC24, v9, *(_QWORD *)(v0 + 280));
}

uint64_t sub_1000C7820()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  swift_release();
  return swift_task_switch(sub_1000C7884, v1, 0);
}

uint64_t sub_1000C7884()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;

  v1 = v0[37];
  v2 = v0[36];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[38] + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, (uint64_t *)&unk_101111440);
    type metadata accessor for SPBeaconSharingError(0);
    v4 = v3;
    v0[27] = 4;
    v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100006C64((unint64_t *)&qword_1010EB490, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)byte_100E21930);
    v7 = _BridgedStoredNSError.init(_:userInfo:)(v0 + 28, v0 + 27, v5, v4, v6);
    swift_willThrow(v7);
    swift_release();
    v8 = v0[54];
    v9 = v0[53];
    v11 = v0[48];
    v10 = v0[49];
    v12 = v0[45];
    v13 = v0[43];
    v15 = v0[39];
    v14 = v0[40];
    v48 = v0[36];
    swift_task_dealloc(v0[55]);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v48);
    v16 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v17 = v0[39];
    sub_1000126EC(v2, v17, type metadata accessor for MemberSharingCircle);
    if (*(_BYTE *)(v17 + *(int *)(v1 + 40)) == 2)
    {
      v49 = (uint64_t (*)(uint64_t))((char *)&dword_1010F40A8 + dword_1010F40A8);
      v18 = (_QWORD *)swift_task_alloc(unk_1010F40AC);
      v0[77] = v18;
      *v18 = v0;
      v18[1] = sub_1000C7CF0;
      return v49(v0[39]);
    }
    if (qword_1010E9940 != -1)
      swift_once(&qword_1010E9940, sub_1000B748C);
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[57];
    v21 = v0[53];
    v22 = v0[50];
    v23 = v0[31];
    sub_10001A9E8(v0[56], (uint64_t)qword_1011B6760);
    v24 = v20(v21, v23, v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v28 = (void (*)(uint64_t, uint64_t))v0[58];
    v29 = v0[53];
    v30 = v0[50];
    v31 = v0[39];
    if (v27)
    {
      v50 = v0[39];
      v47 = (void (*)(uint64_t, uint64_t))v0[58];
      v32 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(32, -1);
      v51 = v33;
      *(_DWORD *)v32 = 141558275;
      v0[25] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2081;
      v34 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v30, v34);
      v0[26] = sub_100016940(v35, v36, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease();
      v47(v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Received decline for not requested member share %{private,mask.hash}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
      swift_release();

      v37 = v50;
    }
    else
    {

      swift_release();
      v28(v29, v30);
      v37 = v31;
    }
    sub_1000126B0(v37, type metadata accessor for MemberSharingCircle);
    v38 = v0[54];
    v39 = v0[53];
    v41 = v0[48];
    v40 = v0[49];
    v42 = v0[45];
    v43 = v0[43];
    v45 = v0[39];
    v44 = v0[40];
    v46 = v0[36];
    swift_task_dealloc(v0[55]);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    v16 = (uint64_t (*)(void))v0[1];
  }
  return v16();
}

uint64_t sub_1000C7CF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 616);
  *(_QWORD *)(*v1 + 624) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000C7E24;
  else
    v4 = sub_1000C7D54;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 272), 0);
}

uint64_t sub_1000C7D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 312);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C7E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 312);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C7EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 392);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C7FD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for MACAddress(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[10] = v5;
  v2[11] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EE540);
  v2[12] = v6;
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101109310);
  v2[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[15] = v8;
  v2[16] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WildModeAssociationRecord(0);
  v2[17] = v9;
  v2[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v2[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[20] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v2[21] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v13);
  v2[23] = swift_task_alloc(v13);
  return swift_task_switch(sub_1000C80EC, v1, 0);
}

uint64_t sub_1000C80EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[6];
  v2 = v0[23];
  v3 = v0[19];
  v4 = v0[20];
  v5 = type metadata accessor for Logger(0);
  v0[24] = sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[25] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[23];
  v12 = v0[19];
  if (v10)
  {
    v20 = v0[20];
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v21 = v14;
    *(_DWORD *)v13 = 141558275;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v0[5] = sub_100016940(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Request unknown beacon %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[20] + 8))(v0[23], v0[19]);
  }

  v18 = *(_QWORD *)(v0[7] + 136);
  v0[26] = v18;
  return swift_task_switch(sub_1000C832C, v18, 0);
}

uint64_t sub_1000C832C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 200))(v2, *(_QWORD *)(v0 + 48), v4);
  LODWORD(v6) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 312) = v6;
  v6 = v6;
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101055990, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 216) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 224) = v9;
  v9(v8 + v7, v2, v4);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 232) = v11;
  *v11 = v0;
  v11[1] = sub_1000C840C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 144), sub_1000DA468, v8, *(_QWORD *)(v0 + 136));
}

uint64_t sub_1000C840C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 208);
    v5 = sub_1000C885C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 56);
    swift_release();
    v5 = sub_1000C8480;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000C8480()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 144) + *(int *)(v1 + 48));
  v3 = v2[2];
  *(_QWORD *)(v0 + 248) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v0 + 256) = v2[1];
    *(_QWORD *)(v0 + 264) = *v2;
    *(_DWORD *)(v0 + 316) = *(_DWORD *)(v1 + 28);
    swift_bridgeObjectRetain(v3);
    return swift_task_switch(sub_1000C865C, v4, 0);
  }
  else
  {
    v6 = Logger.logObject.getter(0);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failure in share requesting, can't find beacon.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 144);

    type metadata accessor for SPBeaconSharingError(0);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = 4;
    v12 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v13 = sub_100006C64((unint64_t *)&qword_1010EB490, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v14 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v12, v11, v13);
    swift_willThrow(v14);
    sub_1000126B0(v9, type metadata accessor for WildModeAssociationRecord);
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000C865C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = *(_QWORD *)(v0 + 256);
  v24 = *(_QWORD *)(v0 + 264);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
  v22 = *(_QWORD *)(v0 + 248);
  v1 = *(unsigned __int8 *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 88);
  v19 = v5;
  v20 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 144) + *(int *)(v0 + 316);
  v9 = (v1 + 24) & ~v1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 200))(v2, *(_QWORD *)(v0 + 48), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v10 + v11 + 24) & ~v11;
  v13 = swift_allocObject(&unk_1010559B8, v12 + v18, v1 | v11 | 7);
  *(_QWORD *)(v0 + 272) = v13;
  *(_QWORD *)(v13 + 16) = v20;
  v21(v13 + v9, v2, v4);
  v14 = v13 + v10;
  *(_BYTE *)v14 = v24;
  *(_QWORD *)(v14 + 8) = v23;
  *(_QWORD *)(v14 + 16) = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v13 + v12, v19, v7);
  v15 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v22);
  v16 = (_QWORD *)swift_task_alloc(v15);
  *(_QWORD *)(v0 + 280) = v16;
  *v16 = v0;
  v16[1] = sub_1000C87DC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 104), sub_1000DA588, v13, *(_QWORD *)(v0 + 96));
}

uint64_t sub_1000C87DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 280);
  *(_QWORD *)(*v1 + 288) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 208);
    v5 = sub_1000C8B50;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 56);
    swift_release();
    swift_bridgeObjectRelease();
    v5 = sub_1000C8918;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000C885C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release();
  return swift_task_switch(sub_1000C889C, v1, 0);
}

uint64_t sub_1000C889C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C8918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 48))(v2, 1, v1) == 1)
  {
    v3 = sub_100004048(v2, (uint64_t *)&unk_1010EE540);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure in share requesting, can't find beacon.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 144);

    type metadata accessor for SPBeaconSharingError(0);
    v9 = v8;
    *(_QWORD *)(v0 + 24) = 4;
    v10 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v11 = sub_100006C64((unint64_t *)&qword_1010EB490, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v12 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v10, v9, v11);
    swift_willThrow(v12);
    sub_1000126B0(v7, type metadata accessor for WildModeAssociationRecord);
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 128);
    v20 = *(int *)(v1 + 48);
    v21 = v19 + v20;
    v22 = v2 + v20;
    sub_1000126EC(v2, v19, type metadata accessor for MemberPeerTrust);
    sub_1000126EC(v22, v21, type metadata accessor for MemberSharingCircle);
    v24 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F4178 + dword_1010F4178);
    v23 = (_QWORD *)swift_task_alloc(unk_1010F417C);
    *(_QWORD *)(v0 + 296) = v23;
    *v23 = v0;
    v23[1] = sub_1000C8C28;
    return v24(v21, *(_QWORD *)(v0 + 128));
  }
}

uint64_t sub_1000C8B50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000C8B9C, v1, 0);
}

uint64_t sub_1000C8B9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for WildModeAssociationRecord);
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C8C28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 296);
  *(_QWORD *)(*v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1000C8DA8;
  else
    v4 = sub_1000C8C8C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_1000C8C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 56);
  type metadata accessor for Transaction(0);
  v8 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v8 + 16, v7);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE550, v8);
  swift_release_n(v8, 2);
  sub_100004048(v4, (uint64_t *)&unk_101109310);
  sub_1000126B0(v3, type metadata accessor for WildModeAssociationRecord);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C8DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 144);
  sub_100004048(*(_QWORD *)(v0 + 128), (uint64_t *)&unk_101109310);
  sub_1000126B0(v1, type metadata accessor for WildModeAssociationRecord);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C8E48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch(sub_1000C8E60, v1, 0);
}

uint64_t sub_1000C8E60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0[8] + 200);
  v2 = type metadata accessor for MemberCircleRevokeManager();
  v0[2] = v1;
  v0[5] = v2;
  v0[6] = &off_1010B7198;
  v3 = unk_1010F41D4;
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F41D0 + dword_1010F41D0);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_1000C8EFC;
  return v6(v0[7], (uint64_t)(v0 + 2));
}

uint64_t sub_1000C8EFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 64);
    v5 = sub_1000C9010;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 64);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_1000C8F70;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000C8F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  type metadata accessor for Transaction(0);
  v2 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v2 + 16, v1);
  swift_retain(v2);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE678, v2);
  swift_release_n(v2, 2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C9010()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C9044(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2[60] = a1;
  v2[61] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[62] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[63] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[64] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[65] = swift_task_alloc(v6);
  v2[66] = swift_task_alloc(v6);
  v7 = sub_10001A9A8(&qword_1010ED860);
  v2[67] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000C90DC, v1, 0);
}

uint64_t sub_1000C90DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 544) = v2;
  v3 = *(_QWORD *)(v0 + 504);
  if (v2)
  {
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 680) = v4;
    *(_QWORD *)(v0 + 552) = *(_QWORD *)(v3 + 72);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    *(_QWORD *)(v0 + 560) = v5;
    *(_QWORD *)(v0 + 568) = 0;
    v6 = *(_QWORD *)(v0 + 536);
    v7 = *(_QWORD *)(v0 + 496);
    v8 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    v9 = swift_bridgeObjectRetain(v1);
    v5(v6, v8, v7, v9);
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56);
    *(_QWORD *)(v0 + 576) = v10;
    v10(v6, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v7) != 1)
    {
      v11 = *(_QWORD *)(v0 + 536);
      v12 = *(_QWORD *)(v0 + 528);
      v13 = *(_QWORD *)(v0 + 496);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 504) + 32);
      *(_QWORD *)(v0 + 584) = v14;
      v14(v12, v11, v13);
      return swift_task_switch(sub_1000C92A4, 0, 0);
    }
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56);
    v17 = *(_QWORD *)(v0 + 536);
    v18 = *(_QWORD *)(v0 + 496);
    v19 = swift_bridgeObjectRetain(v1);
    v16(v17, 1, 1, v18, v19);
  }
  v20 = *(_QWORD *)(v0 + 536);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 520);
  v23 = *(_QWORD *)(v0 + 488);
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction(0);
  v24 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v24 + 16, v23);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE250, v24);
  swift_release_n(v24, 2);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C92A4()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 456, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 592) = v2;
    *v2 = v0;
    v2[1] = sub_1000C9390;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C9390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  *(_QWORD *)(*(_QWORD *)v1 + 600) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000C93EC, 0, 0);
}

uint64_t sub_1000C93EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t (__cdecl *v9)();

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 600))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 216, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 240))
    {
      sub_10000F9FC((__int128 *)(v0 + 216), v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
      v9 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB28 + dword_1010EBB28);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB2C);
      *(_QWORD *)(v0 + 608) = v3;
      *v3 = v0;
      v3[1] = sub_1000C9578;
      return v9();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No BeaconStoreActor available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    return swift_task_switch(sub_1000DB6F0, *(_QWORD *)(v0 + 488), 0);
  }
  return result;
}

uint64_t sub_1000C9578(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  *(_QWORD *)(*(_QWORD *)v1 + 616) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000C95D4, 0, 0);
}

uint64_t sub_1000C95D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t (__cdecl *v11)();

  v1 = (_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 616);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
    *(_QWORD *)(v0 + 624) = v3;
    *(_QWORD *)(v0 + 160) = v3;
    *(_QWORD *)(v0 + 168) = &off_10109EA18;
    *(_QWORD *)(v0 + 136) = v2;
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 296, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 320))
    {
      sub_10000F9FC((__int128 *)(v0 + 296), v0 + 256);
      sub_10001AA44((_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 280));
      v11 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB10 + dword_1010EBB10);
      v5 = (_QWORD *)swift_task_alloc(unk_1010EBB14);
      *(_QWORD *)(v0 + 632) = v5;
      *v5 = v0;
      v5[1] = sub_1000C9788;
      return v11();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No IDSTransportService_ItemSharingCrossAccount available!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    swift_release();
    return swift_task_switch(sub_1000DB6F0, *(_QWORD *)(v0 + 488), 0);
  }
  return result;
}

uint64_t sub_1000C9788(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 632);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000C97E4, 0, 0);
}

uint64_t sub_1000C97E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t (*v36)(void *, uint64_t);

  v1 = (_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 640);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 624);
    v34 = *(_QWORD *)(v0 + 600);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = *(_QWORD *)(v0 + 160);
    sub_10009F5D0(v0 + 136, v4);
    v5 = *(_QWORD *)(v4 - 8);
    v35 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(void))(v5 + 16))();
    v6 = *v35;
    *(_QWORD *)(v0 + 360) = v3;
    *(_QWORD *)(v0 + 368) = &off_10109EA18;
    *(_QWORD *)(v0 + 336) = v6;
    v7 = type metadata accessor for FamilyCircleService();
    *(_QWORD *)(v0 + 400) = v7;
    *(_QWORD *)(v0 + 408) = &off_10109F1D0;
    *(_QWORD *)(v0 + 376) = v2;
    v8 = type metadata accessor for ShareDeclineUseCase();
    v9 = swift_allocObject(v8, 200, 15);
    *(_QWORD *)(v0 + 648) = v9;
    v10 = sub_10009F5D0(v0 + 336, v3);
    v11 = *(_QWORD *)(v3 - 8);
    v12 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v12, v10, v3);
    v13 = *(_QWORD *)(v0 + 400);
    v14 = sub_10009F5D0(v0 + 376, v13);
    v15 = *(_QWORD *)(v13 - 8);
    v16 = (_QWORD *)swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v15 + 16))(v16, v14, v13);
    v17 = *v12;
    *(_QWORD *)(v0 + 56) = *v16;
    *(_QWORD *)(v0 + 440) = v3;
    *(_QWORD *)(v0 + 448) = &off_10109EA18;
    *(_QWORD *)(v0 + 416) = v17;
    *(_QWORD *)(v0 + 80) = v7;
    *(_QWORD *)(v0 + 88) = &off_10109F1D0;
    swift_defaultActor_initialize(v9);
    *(_QWORD *)(v9 + 112) = v34;
    sub_10000F9FC((__int128 *)(v0 + 416), v9 + 120);
    sub_10000F9FC((__int128 *)(v0 + 56), v9 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 376));
    swift_task_dealloc(v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 336));
    swift_task_dealloc(v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
    swift_task_dealloc(v35);
    if (qword_1010E9AD0 != -1)
      swift_once(&qword_1010E9AD0, sub_100254F28);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 584);
    v19 = *(unsigned __int8 *)(v0 + 680);
    v20 = *(_QWORD *)(v0 + 520);
    v21 = *(_QWORD *)(v0 + 496);
    v22 = (v19 + 24) & ~v19;
    v23 = v22 + *(_QWORD *)(v0 + 512);
    v24 = v19 | 7;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 560))(v20, *(_QWORD *)(v0 + 528), v21);
    v25 = swift_allocObject(&unk_101055440, v23 + 1, v24);
    *(_QWORD *)(v0 + 656) = v25;
    *(_QWORD *)(v25 + 16) = v9;
    v18(v25 + v22, v20, v21);
    *(_BYTE *)(v25 + v23) = 1;
    v26 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
    v36 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                  + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
    swift_retain();
    v27 = (_QWORD *)swift_task_alloc(v26);
    *(_QWORD *)(v0 + 664) = v27;
    *v27 = v0;
    v27[1] = sub_1000C9BCC;
    return v36(&unk_1010EE258, v25);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B6748);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "No FamilyCircleService available!", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
    return swift_task_switch(sub_1000DB6F0, *(_QWORD *)(v0 + 488), 0);
  }
}

uint64_t sub_1000C9BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  *(_QWORD *)(*(_QWORD *)v1 + 672) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_1000C9E44;
  else
    v3 = sub_1000C9C3C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000C9C3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 488);
  swift_release();
  return swift_task_switch(sub_1000C9C7C, v1, 0);
}

uint64_t sub_1000C9C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 568) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 504) + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 496));
  if (v2 == v1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 576))(*(_QWORD *)(v0 + 536), 1, 1, *(_QWORD *)(v0 + 496));
LABEL_4:
    v8 = *(_QWORD *)(v0 + 536);
    v9 = *(_QWORD *)(v0 + 528);
    v10 = *(_QWORD *)(v0 + 520);
    v11 = *(_QWORD *)(v0 + 488);
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction(0);
    v12 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v12 + 16, v11);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE250, v12);
    swift_release_n(v12, 2);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 568) + 1;
  *(_QWORD *)(v0 + 568) = v3;
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 496);
  v6 = *(_QWORD *)(v0 + 504);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 560))(v4, *(_QWORD *)(v0 + 480)+ ((*(unsigned __int8 *)(v0 + 680) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 680))+ *(_QWORD *)(v0 + 552) * v3, v5);
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56);
  *(_QWORD *)(v0 + 576) = v7;
  v7(v4, 0, 1, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    goto LABEL_4;
  v14 = *(_QWORD *)(v0 + 536);
  v15 = *(_QWORD *)(v0 + 528);
  v16 = *(_QWORD *)(v0 + 496);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 504) + 32);
  *(_QWORD *)(v0 + 584) = v17;
  v17(v15, v14, v16);
  return swift_task_switch(sub_1000C92A4, 0, 0);
}

uint64_t sub_1000C9E44()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[84];
  swift_release(v0[81]);
  swift_errorRelease(v1);
  return swift_task_switch(sub_1000DB6F0, v0[61], 0);
}

uint64_t sub_1000C9E8C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[32] = a1;
  v2[33] = v1;
  v3 = type metadata accessor for MemberSharingCircle(0);
  v2[34] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[35] = v4;
  v2[36] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[37] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[38] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[39] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v8);
  v2[41] = swift_task_alloc(v8);
  v2[42] = swift_task_alloc(v8);
  v2[43] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000C9F40, v1, 0);
}

uint64_t sub_1000C9F40()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[33] + 136);
  v0[44] = v1;
  v0[45] = sub_1003BA248((uint64_t)&off_101048E10);
  return swift_task_switch(sub_1000C9F90, v1, 0);
}

uint64_t sub_1000C9F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 256);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 368) = v8;
  v8(v3, v7, v6);
  LODWORD(v9) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 584) = v9;
  v9 = v9;
  v10 = (v9 + 24) & ~v9;
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_101055DC8, v11 + 8, v9 | 7);
  *(_QWORD *)(v0 + 376) = v12;
  *(_QWORD *)(v12 + 16) = v2;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 384) = v13;
  v13(v12 + v10, v3, v6);
  *(_QWORD *)(v12 + v11) = v1;
  v14 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v1);
  v15 = (_QWORD *)swift_task_alloc(v14);
  *(_QWORD *)(v0 + 392) = v15;
  v16 = sub_10001A9A8(&qword_1010EE100);
  *v15 = v0;
  v15[1] = sub_1000CA0B8;
  return unsafeBlocking<A>(_:)(v0 + 216, sub_1000D82C0, v12, v16);
}

uint64_t sub_1000CA0B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 352);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 392));
  swift_release();
  return swift_task_switch(sub_1000CA11C, v1, 0);
}

uint64_t sub_1000CA11C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[33];
  swift_bridgeObjectRelease();
  v0[50] = v0[27];
  return swift_task_switch(sub_1000CA164, v1, 0);
}

uint64_t sub_1000CA164()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;

  if (*(_QWORD *)(v0[50] + 16))
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[46];
    v2 = v0[40];
    v3 = v0[37];
    v4 = v0[32];
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
    v6 = v1(v2, v4, v3);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = v0[40];
    v11 = v0[37];
    v12 = v0[38];
    if (v9)
    {
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(32, -1);
      v22 = v14;
      *(_DWORD *)v13 = 141558275;
      v0[30] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v11, v15);
      v0[29] = sub_100016940(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Stop sharing of %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v12 + 8))(v0[40], v0[37]);
    }

    v21 = (uint64_t (*)(uint64_t))((char *)&dword_1010F41B8 + dword_1010F41B8);
    v20 = (_QWORD *)swift_task_alloc(unk_1010F41BC);
    v0[71] = v20;
    *v20 = v0;
    v20[1] = sub_1000CB108;
    return v21(v0[50]);
  }
  else
  {
    v18 = v0[44];
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_1000CA3F4, v18, 0);
  }
}

uint64_t sub_1000CA3F4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
  v2 = *(unsigned __int8 *)(v0 + 584);
  v4 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 312);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 368))(v4, *(_QWORD *)(v0 + 256), v5);
  v9 = swift_allocObject(&unk_101055DF0, v7, v8);
  *(_QWORD *)(v0 + 408) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 416) = v11;
  v12 = sub_10001A9A8(&qword_1010EC840);
  *v11 = v0;
  v11[1] = sub_1000CA4F0;
  return unsafeBlocking<A>(_:)(v0 + 224, sub_1000D9288, v9, v12);
}

uint64_t sub_1000CA4F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 352);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  swift_release();
  return swift_task_switch(sub_1000CA550, v1, 0);
}

uint64_t sub_1000CA550()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[33];
  v0[53] = v0[28];
  return swift_task_switch(sub_1000CA56C, v1, 0);
}

uint64_t sub_1000CA56C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2 >= 2)
  {
    v3 = *(_QWORD *)(v0 + 424);
    if (qword_1010E9938 != -1)
    {
      swift_once(&qword_1010E9938, sub_1000AFBB0);
      v3 = *(_QWORD *)(v0 + 424);
    }
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    swift_bridgeObjectRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v8 = 134217984;
      *(_QWORD *)(v0 + 248) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Too much circles to decline on sharing stop! There is %ld circles.", v8, 0xCu);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    v2 = *(_QWORD *)(v1 + 16);
    v1 = *(_QWORD *)(v0 + 424);
  }
  *(_QWORD *)(v0 + 432) = v2;
  if (v2)
  {
    v10 = *(_QWORD *)(v0 + 280);
    v9 = *(_QWORD *)(v0 + 288);
    *(_DWORD *)(v0 + 588) = *(_DWORD *)(*(_QWORD *)(v0 + 272) + 28);
    v11 = *(_DWORD *)(v10 + 80);
    *(_DWORD *)(v0 + 592) = v11;
    *(_QWORD *)(v0 + 440) = *(_QWORD *)(v10 + 72);
    sub_10005972C(v1 + ((v11 + 32) & ~(unint64_t)v11), v9, type metadata accessor for MemberSharingCircle);
    *(_QWORD *)(v0 + 448) = 1;
    v12 = *(_QWORD *)(v0 + 288);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 368))(*(_QWORD *)(v0 + 336), v12 + *(int *)(v0 + 588), *(_QWORD *)(v0 + 296));
    sub_1000126B0(v12, type metadata accessor for MemberSharingCircle);
    v13 = (_QWORD *)swift_task_alloc(dword_1010F4024);
    *(_QWORD *)(v0 + 456) = v13;
    *v13 = v0;
    v13[1] = sub_1000CA820;
    return sub_1001BE998();
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v0 + 336);
    v15 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 328);
    v19 = *(_QWORD *)(v0 + 288);
    v20 = *(_QWORD *)(v0 + 264);
    type metadata accessor for Transaction(0);
    v21 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v21 + 16, v20);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE638, v21);
    swift_release_n(v21, 2);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    swift_task_dealloc(v17);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000CA820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 456);
  v4 = *(_QWORD **)v2;
  v4[58] = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4[70] = v1;
    v5 = v4[33];
    (*(void (**)(_QWORD, _QWORD))(v4[38] + 8))(v4[42], v4[37]);
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_1000CB09C, v5, 0);
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc(dword_1010F402C);
    v4[59] = v7;
    *v7 = v4;
    v7[1] = sub_1000CA8D4;
    return sub_100257AF8();
  }
}

uint64_t sub_1000CA8D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 472);
  *(_QWORD *)(*v2 + 480) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    v6 = sub_1000CAA30;
  }
  else
  {
    *(_QWORD *)(v4 + 488) = a1;
    v6 = sub_1000CA950;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000CA950()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[61];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[62] = v2;
  v0[25] = v2;
  v0[26] = &off_10109EA18;
  v0[22] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[63] = v3;
  *v3 = v0;
  v3[1] = sub_1000CA9B4;
  return sub_1001BECC4();
}

uint64_t sub_1000CA9B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 504);
  *(_QWORD *)(*v2 + 512) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    v6 = sub_1000CADD8;
  }
  else
  {
    *(_QWORD *)(v4 + 520) = a1;
    v6 = sub_1000CAA8C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000CAA30()
{
  _QWORD *v0;
  uint64_t v1;

  v0[70] = v0[60];
  v1 = v0[33];
  (*(void (**)(_QWORD, _QWORD))(v0[38] + 8))(v0[42], v0[37]);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000CB09C, v1, 0);
}

uint64_t sub_1000CAA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t (*v30)(void *, uint64_t);

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 496);
  v28 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 200);
  sub_10009F5D0(v0 + 176, v3);
  v4 = *(_QWORD *)(v3 - 8);
  v29 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(v4 + 16))();
  v5 = *v29;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = &off_10109EA18;
  *(_QWORD *)(v0 + 16) = v5;
  v27 = type metadata accessor for FamilyCircleService();
  *(_QWORD *)(v0 + 160) = v27;
  *(_QWORD *)(v0 + 168) = &off_10109F1D0;
  *(_QWORD *)(v0 + 136) = v1;
  v6 = type metadata accessor for ShareDeclineUseCase();
  v7 = swift_allocObject(v6, 200, 15);
  *(_QWORD *)(v0 + 528) = v7;
  v8 = sub_10009F5D0(v0 + 16, v2);
  v9 = *(_QWORD *)(v2 - 8);
  v10 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v10, v8, v2);
  v11 = *(_QWORD *)(v0 + 160);
  v12 = sub_10009F5D0(v0 + 136, v11);
  v13 = *(_QWORD *)(v11 - 8);
  v14 = (_QWORD *)swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 16))(v14, v12, v11);
  v15 = *v10;
  *(_QWORD *)(v0 + 56) = *v14;
  *(_QWORD *)(v0 + 120) = v2;
  *(_QWORD *)(v0 + 128) = &off_10109EA18;
  *(_QWORD *)(v0 + 96) = v15;
  *(_QWORD *)(v0 + 80) = v27;
  *(_QWORD *)(v0 + 88) = &off_10109F1D0;
  swift_defaultActor_initialize(v7);
  *(_QWORD *)(v7 + 112) = v28;
  sub_10000F9FC((__int128 *)(v0 + 96), v7 + 120);
  sub_10000F9FC((__int128 *)(v0 + 56), v7 + 160);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  swift_task_dealloc(v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
  swift_task_dealloc(v29);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
  v17 = *(unsigned __int8 *)(v0 + 584);
  v18 = *(_QWORD *)(v0 + 328);
  v19 = *(_QWORD *)(v0 + 296);
  v20 = (v17 + 24) & ~v17;
  v21 = v20 + *(_QWORD *)(v0 + 312);
  v22 = v17 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 368))(v18, *(_QWORD *)(v0 + 336), v19);
  v23 = swift_allocObject(&unk_101055E18, v21 + 1, v22);
  *(_QWORD *)(v0 + 536) = v23;
  *(_QWORD *)(v23 + 16) = v7;
  v16(v23 + v20, v18, v19);
  *(_BYTE *)(v23 + v21) = 0;
  v24 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v30 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v25 = (_QWORD *)swift_task_alloc(v24);
  *(_QWORD *)(v0 + 544) = v25;
  *v25 = v0;
  v25[1] = sub_1000CAD6C;
  return v30(&unk_1010EE640, v23);
}

uint64_t sub_1000CAD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_1000CB038;
  else
    v3 = sub_1000CAE3C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000CADD8()
{
  _QWORD *v0;
  uint64_t v1;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 22);
  v0[70] = v0[64];
  v1 = v0[33];
  (*(void (**)(_QWORD, _QWORD))(v0[38] + 8))(v0[42], v0[37]);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000CB09C, v1, 0);
}

uint64_t sub_1000CAE3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[42];
  v2 = v0[37];
  v3 = v0[38];
  v4 = v0[33];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_1000CAE9C, v4, 0);
}

uint64_t sub_1000CAE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 448);
  if (v1 == *(_QWORD *)(v0 + 432))
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 336);
    v2 = *(_QWORD *)(v0 + 344);
    v4 = *(_QWORD *)(v0 + 320);
    v5 = *(_QWORD *)(v0 + 328);
    v6 = *(_QWORD *)(v0 + 288);
    v7 = *(_QWORD *)(v0 + 264);
    type metadata accessor for Transaction(0);
    v8 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v8 + 16, v7);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE638, v8);
    swift_release_n(v8, 2);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    result = sub_10005972C(*(_QWORD *)(v0 + 424)+ ((*(unsigned __int8 *)(v0 + 592) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 592))+ *(_QWORD *)(v0 + 440) * v1, *(_QWORD *)(v0 + 288), type metadata accessor for MemberSharingCircle);
    *(_QWORD *)(v0 + 448) = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 288);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 368))(*(_QWORD *)(v0 + 336), v10 + *(int *)(v0 + 588), *(_QWORD *)(v0 + 296));
      sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
      v11 = (_QWORD *)swift_task_alloc(dword_1010F4024);
      *(_QWORD *)(v0 + 456) = v11;
      *v11 = v0;
      v11[1] = sub_1000CA820;
      return sub_1001BE998();
    }
  }
  return result;
}

uint64_t sub_1000CB038()
{
  _QWORD *v0;
  uint64_t v1;

  swift_release();
  v0[70] = v0[69];
  v1 = v0[33];
  (*(void (**)(_QWORD, _QWORD))(v0[38] + 8))(v0[42], v0[37]);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000CB09C, v1, 0);
}

uint64_t sub_1000CB09C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CB108()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 568);
  *(_QWORD *)(*v1 + 576) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 264);
    v5 = sub_1000CB260;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 264);
    swift_bridgeObjectRelease();
    v5 = sub_1000CB17C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000CB17C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  type metadata accessor for Transaction(0);
  v7 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v7 + 16, v6);
  swift_retain(v7);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE638, v7);
  swift_release_n(v7, 2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CB260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 400));
  v1 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CB2D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2[66] = v1;
  v2[65] = a1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[67] = v3;
  v2[68] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SharedBeaconRecord(0);
  v2[69] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[70] = v5;
  v2[71] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MemberSharingCircle(0);
  v2[72] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[73] = v7;
  v2[74] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v2[75] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[76] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v2[77] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[78] = swift_task_alloc(v11);
  v2[79] = swift_task_alloc(v11);
  v2[80] = swift_task_alloc(v11);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v2[81] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[82] = v13;
  v2[83] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CB3F8, v1, 0);
}

uint64_t sub_1000CB3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  *(_QWORD *)(v0 + 672) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 520);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v0 + 504) = v5;
    type metadata accessor for SPShareType(0);
    v9 = String.init<A>(describing:)(v0 + 504, v8);
    *(_QWORD *)(v0 + 512) = sub_100016940(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "forceBreakAllShares of %s type", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v11 = *(_QWORD *)(v0 + 520);
  if ((v11 & 1) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v0 + 528) + 136);
    *(_QWORD *)(v0 + 680) = v21;
    v22 = sub_1000CB6BC;
  }
  else
  {
    if ((v11 & 2) == 0)
    {
      v12 = *(_QWORD *)(v0 + 664);
      v13 = *(_QWORD *)(v0 + 640);
      v14 = *(_QWORD *)(v0 + 632);
      v15 = *(_QWORD *)(v0 + 624);
      v16 = *(_QWORD *)(v0 + 592);
      v17 = *(_QWORD *)(v0 + 568);
      v23 = *(_QWORD *)(v0 + 544);
      v18 = *(_QWORD *)(v0 + 528);
      type metadata accessor for Transaction(0);
      v19 = swift_allocObject(&unk_101055260, 24, 7);
      swift_weakInit(v19 + 16, v18);
      swift_retain();
      static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE610, v19);
      swift_release_n(v19, 2);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v23);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v21 = *(_QWORD *)(*(_QWORD *)(v0 + 528) + 136);
    *(_QWORD *)(v0 + 776) = v21;
    v22 = sub_1000CC0A0;
  }
  return swift_task_switch(v22, v21, 0);
}

uint64_t sub_1000CB6BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 688) = v2;
  v3 = sub_10001A9A8(&qword_1010EE190);
  *v2 = v0;
  v2[1] = sub_1000CB738;
  return unsafeBlocking<A>(_:)(v0 + 488, sub_10001ED38, *(_QWORD *)(v0 + 680), v3);
}

uint64_t sub_1000CB738()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 680);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 688));
  swift_release();
  return swift_task_switch(sub_1000CB798, v1, 0);
}

uint64_t sub_1000CB798()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[66];
  v0[87] = v0[61];
  return swift_task_switch(sub_1000CB7B4, v1, 0);
}

uint64_t sub_1000CB7B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 696);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 704) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 664);
    v4 = *(_QWORD *)(v0 + 656);
    v5 = *(_QWORD *)(v0 + 608);
    v6 = *(int *)(*(_QWORD *)(v0 + 648) + 20);
    *(_DWORD *)(v0 + 944) = v6;
    v7 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 948) = v7;
    *(_QWORD *)(v0 + 712) = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 720) = 0;
    v8 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 640);
    v10 = *(_QWORD *)(v0 + 600);
    v11 = v3 + v6;
    sub_10005972C(v1 + ((v7 + 32) & ~(unint64_t)v7), v3, type metadata accessor for OwnedBeaconRecord);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    *(_QWORD *)(v0 + 728) = v12;
    v12(v9, v11, v10);
    sub_1000126B0(v3, type metadata accessor for OwnedBeaconRecord);
    *(_QWORD *)(v0 + 736) = sub_1003BA248((uint64_t)&off_101048E38);
    v13 = sub_1000CB9BC;
    v14 = v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v0 + 520) & 2) == 0)
    {
      v15 = *(_QWORD *)(v0 + 664);
      v16 = *(_QWORD *)(v0 + 640);
      v17 = *(_QWORD *)(v0 + 632);
      v18 = *(_QWORD *)(v0 + 624);
      v19 = *(_QWORD *)(v0 + 592);
      v20 = *(_QWORD *)(v0 + 568);
      v24 = *(_QWORD *)(v0 + 544);
      v21 = *(_QWORD *)(v0 + 528);
      type metadata accessor for Transaction(0);
      v22 = swift_allocObject(&unk_101055260, 24, 7);
      swift_weakInit(v22 + 16, v21);
      swift_retain();
      static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE610, v22);
      swift_release_n(v22, 2);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v24);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v0 + 528) + 136);
    *(_QWORD *)(v0 + 776) = v14;
    v13 = sub_1000CC0A0;
  }
  return swift_task_switch(v13, v14, 0);
}

uint64_t sub_1000CB9BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 736);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(_QWORD *)(v0 + 632);
  v4 = *(_QWORD *)(v0 + 616);
  v5 = *(_QWORD *)(v0 + 608);
  v6 = *(_QWORD *)(v0 + 600);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 728))(v3, *(_QWORD *)(v0 + 640), v6);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_101055D50, v9 + 8, v7 | 7);
  *(_QWORD *)(v0 + 744) = v10;
  *(_QWORD *)(v10 + 16) = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v8, v3, v6);
  *(_QWORD *)(v10 + v9) = v1;
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v1);
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 752) = v12;
  v13 = sub_10001A9A8(&qword_1010EE100);
  *v12 = v0;
  v12[1] = sub_1000CBADC;
  return unsafeBlocking<A>(_:)(v0 + 496, sub_1000D82C0, v10, v13);
}

uint64_t sub_1000CBADC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 680);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 752));
  swift_release();
  return swift_task_switch(sub_1000CBB40, v1, 0);
}

uint64_t sub_1000CBB40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[80];
  v2 = v0[76];
  v3 = v0[75];
  v4 = v0[66];
  swift_bridgeObjectRelease();
  v0[95] = v0[62];
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1000CBBAC, v4, 0);
}

uint64_t sub_1000CBBAC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 760) + 16))
  {
    v21 = (uint64_t (*)(uint64_t))((char *)&dword_1010F4108 + dword_1010F4108);
    v1 = (_QWORD *)swift_task_alloc(unk_1010F410C);
    *(_QWORD *)(v0 + 768) = v1;
    *v1 = v0;
    v1[1] = sub_1000CBE18;
    return v21(*(_QWORD *)(v0 + 760));
  }
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 720) + 1;
  if (v3 == *(_QWORD *)(v0 + 704))
  {
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v0 + 520) & 2) == 0)
    {
      v4 = *(_QWORD *)(v0 + 664);
      v5 = *(_QWORD *)(v0 + 640);
      v6 = *(_QWORD *)(v0 + 632);
      v7 = *(_QWORD *)(v0 + 624);
      v8 = *(_QWORD *)(v0 + 592);
      v9 = *(_QWORD *)(v0 + 568);
      v22 = *(_QWORD *)(v0 + 544);
      v10 = *(_QWORD *)(v0 + 528);
      type metadata accessor for Transaction(0);
      v11 = swift_allocObject(&unk_101055260, 24, 7);
      swift_weakInit(v11 + 16, v10);
      swift_retain();
      static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE610, v11);
      swift_release_n(v11, 2);
      swift_task_dealloc(v4);
      swift_task_dealloc(v5);
      swift_task_dealloc(v6);
      swift_task_dealloc(v7);
      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v22);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v0 + 528) + 136);
    *(_QWORD *)(v0 + 776) = v20;
    v19 = sub_1000CC0A0;
  }
  else
  {
    *(_QWORD *)(v0 + 720) = v3;
    v12 = *(_QWORD *)(v0 + 680);
    v13 = *(_QWORD *)(v0 + 664);
    v14 = *(_QWORD *)(v0 + 640);
    v15 = *(_QWORD *)(v0 + 608);
    v16 = *(_QWORD *)(v0 + 600);
    v17 = v13 + *(int *)(v0 + 944);
    sub_10005972C(*(_QWORD *)(v0 + 696)+ ((*(unsigned __int8 *)(v0 + 948) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 948))+ *(_QWORD *)(v0 + 712) * v3, v13, type metadata accessor for OwnedBeaconRecord);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    *(_QWORD *)(v0 + 728) = v18;
    v18(v14, v17, v16);
    sub_1000126B0(v13, type metadata accessor for OwnedBeaconRecord);
    *(_QWORD *)(v0 + 736) = sub_1003BA248((uint64_t)&off_101048E38);
    v19 = sub_1000CB9BC;
    v20 = v12;
  }
  return swift_task_switch(v19, v20, 0);
}

uint64_t sub_1000CBE18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 768));
  v3 = *(_QWORD *)(v2 + 528);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_bridgeObjectRelease();
    v4 = sub_1000DB6E8;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = sub_1000CBEA0;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000CBEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 720) + 1;
  if (v1 == *(_QWORD *)(v0 + 704))
  {
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v0 + 520) & 2) == 0)
    {
      v2 = *(_QWORD *)(v0 + 664);
      v3 = *(_QWORD *)(v0 + 640);
      v4 = *(_QWORD *)(v0 + 632);
      v5 = *(_QWORD *)(v0 + 624);
      v6 = *(_QWORD *)(v0 + 592);
      v7 = *(_QWORD *)(v0 + 568);
      v20 = *(_QWORD *)(v0 + 544);
      v8 = *(_QWORD *)(v0 + 528);
      type metadata accessor for Transaction(0);
      v9 = swift_allocObject(&unk_101055260, 24, 7);
      swift_weakInit(v9 + 16, v8);
      swift_retain();
      static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE610, v9);
      swift_release_n(v9, 2);
      swift_task_dealloc(v2);
      swift_task_dealloc(v3);
      swift_task_dealloc(v4);
      swift_task_dealloc(v5);
      swift_task_dealloc(v6);
      swift_task_dealloc(v7);
      swift_task_dealloc(v20);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v19 = *(_QWORD *)(*(_QWORD *)(v0 + 528) + 136);
    *(_QWORD *)(v0 + 776) = v19;
    v18 = sub_1000CC0A0;
  }
  else
  {
    *(_QWORD *)(v0 + 720) = v1;
    v11 = *(_QWORD *)(v0 + 680);
    v12 = *(_QWORD *)(v0 + 664);
    v13 = *(_QWORD *)(v0 + 640);
    v14 = *(_QWORD *)(v0 + 608);
    v15 = *(_QWORD *)(v0 + 600);
    v16 = v12 + *(int *)(v0 + 944);
    sub_10005972C(*(_QWORD *)(v0 + 696)+ ((*(unsigned __int8 *)(v0 + 948) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 948))+ *(_QWORD *)(v0 + 712) * v1, v12, type metadata accessor for OwnedBeaconRecord);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    *(_QWORD *)(v0 + 728) = v17;
    v17(v13, v16, v15);
    sub_1000126B0(v12, type metadata accessor for OwnedBeaconRecord);
    *(_QWORD *)(v0 + 736) = sub_1003BA248((uint64_t)&off_101048E38);
    v18 = sub_1000CB9BC;
    v19 = v11;
  }
  return swift_task_switch(v18, v19, 0);
}

uint64_t sub_1000CC0A0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 784) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_1000CC11C;
  return unsafeBlocking<A>(_:)(v0 + 480, sub_10001ED30, *(_QWORD *)(v0 + 776), v3);
}

uint64_t sub_1000CC11C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 776);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 784));
  swift_release();
  return swift_task_switch(sub_1000CC17C, v1, 0);
}

uint64_t sub_1000CC17C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[66];
  v0[99] = v0[60];
  return swift_task_switch(sub_1000CC198, v1, 0);
}

uint64_t sub_1000CC198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 800) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 584);
    v4 = *(_QWORD *)(v0 + 576);
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 952) = v5;
    *(_QWORD *)(v0 + 808) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 816) = 0;
    v6 = *(_QWORD *)(v0 + 776);
    sub_10005972C(v1 + ((v5 + 32) & ~(unint64_t)v5), *(_QWORD *)(v0 + 592), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 956) = *(_DWORD *)(v4 + 24);
    return swift_task_switch(sub_1000CC334, v6, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v0 + 664);
    v9 = *(_QWORD *)(v0 + 640);
    v10 = *(_QWORD *)(v0 + 632);
    v11 = *(_QWORD *)(v0 + 624);
    v12 = *(_QWORD *)(v0 + 592);
    v13 = *(_QWORD *)(v0 + 568);
    v16 = *(_QWORD *)(v0 + 544);
    v14 = *(_QWORD *)(v0 + 528);
    type metadata accessor for Transaction(0);
    v15 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v15 + 16, v14);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE610, v15);
    swift_release_n(v15, 2);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000CC334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 776);
  v2 = *(_QWORD *)(v0 + 640);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 600);
  v6 = *(_QWORD *)(v0 + 592) + *(int *)(v0 + 956);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 824) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 960) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101055D00, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 832) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 840) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 848) = v13;
  *v13 = v0;
  v13[1] = sub_1000CC430;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 544), sub_100067DF8, v10, *(_QWORD *)(v0 + 536));
}

uint64_t sub_1000CC430()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 528);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 848));
  swift_release();
  return swift_task_switch(sub_1000CC494, v1, 0);
}

uint64_t sub_1000CC494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 544);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 560) + 48))(v2, 1, v1) == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 592), type metadata accessor for MemberSharingCircle);
    sub_100004048(v2, (uint64_t *)&unk_1010EE180);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 568);
    sub_1000126EC(v2, v3, type metadata accessor for SharedBeaconRecord);
    if (*(_BYTE *)(v3 + *(int *)(v1 + 64)) == 2)
    {
      *(_DWORD *)(v0 + 964) = *(_DWORD *)(*(_QWORD *)(v0 + 576) + 28);
      v4 = sub_1000CC6E4;
      v5 = 0;
      return swift_task_switch(v4, v5, 0);
    }
    v6 = *(_QWORD *)(v0 + 592);
    sub_1000126B0(*(_QWORD *)(v0 + 568), type metadata accessor for SharedBeaconRecord);
    sub_1000126B0(v6, type metadata accessor for MemberSharingCircle);
  }
  v7 = *(_QWORD *)(v0 + 816) + 1;
  if (v7 == *(_QWORD *)(v0 + 800))
  {
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v0 + 664);
    v9 = *(_QWORD *)(v0 + 640);
    v10 = *(_QWORD *)(v0 + 632);
    v11 = *(_QWORD *)(v0 + 624);
    v12 = *(_QWORD *)(v0 + 592);
    v13 = *(_QWORD *)(v0 + 568);
    v19 = *(_QWORD *)(v0 + 544);
    v14 = *(_QWORD *)(v0 + 528);
    type metadata accessor for Transaction(0);
    v15 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v15 + 16, v14);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE610, v15);
    swift_release_n(v15, 2);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 816) = v7;
  v17 = *(_QWORD *)(v0 + 776);
  v18 = *(_QWORD *)(v0 + 576);
  sub_10005972C(*(_QWORD *)(v0 + 792)+ ((*(unsigned __int8 *)(v0 + 952) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 952))+ *(_QWORD *)(v0 + 808) * v7, *(_QWORD *)(v0 + 592), type metadata accessor for MemberSharingCircle);
  *(_DWORD *)(v0 + 956) = *(_DWORD *)(v18 + 24);
  v4 = sub_1000CC334;
  v5 = v17;
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000CC6E4()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 456, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 856) = v2;
    *v2 = v0;
    v2[1] = sub_1000CC7D0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CC7D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 856);
  *(_QWORD *)(*(_QWORD *)v1 + 864) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000CC82C, 0, 0);
}

uint64_t sub_1000CC82C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t (__cdecl *v8)();

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 864))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 256, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 280))
    {
      sub_10000F9FC((__int128 *)(v0 + 256), v0 + 216);
      sub_10001AA44((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
      v8 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB28 + dword_1010EBB28);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB2C);
      *(_QWORD *)(v0 + 872) = v3;
      *v3 = v0;
      v3[1] = sub_1000CC97C;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconStoreActor available!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    return swift_task_switch(sub_1000DB684, *(_QWORD *)(v0 + 528), 0);
  }
  return result;
}

uint64_t sub_1000CC97C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 872);
  *(_QWORD *)(*(_QWORD *)v1 + 880) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000CC9D8, 0, 0);
}

uint64_t sub_1000CC9D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t (__cdecl *v10)();

  v1 = (_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 880);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
    *(_QWORD *)(v0 + 888) = v3;
    *(_QWORD *)(v0 + 200) = v3;
    *(_QWORD *)(v0 + 208) = &off_10109EA18;
    *(_QWORD *)(v0 + 176) = v2;
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 16, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 40))
    {
      sub_10000F9FC((__int128 *)(v0 + 16), v0 + 296);
      sub_10001AA44((_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 320));
      v10 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB10 + dword_1010EBB10);
      v5 = (_QWORD *)swift_task_alloc(unk_1010EBB14);
      *(_QWORD *)(v0 + 896) = v5;
      *v5 = v0;
      v5[1] = sub_1000CCB50;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v6 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, (os_log_type_t)v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)v8, "No IDSTransportService_ItemSharingCrossAccount available!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    swift_release();
    return swift_task_switch(sub_1000DB684, *(_QWORD *)(v0 + 528), 0);
  }
  return result;
}

uint64_t sub_1000CCB50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 896);
  *(_QWORD *)(*(_QWORD *)v1 + 904) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000CCBAC, 0, 0);
}

uint64_t sub_1000CCBAC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t (*v35)(void *, uint64_t);

  v1 = (_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 904);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 888);
    v33 = *(_QWORD *)(v0 + 864);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = *(_QWORD *)(v0 + 200);
    sub_10009F5D0(v0 + 176, v4);
    v5 = *(_QWORD *)(v4 - 8);
    v34 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(void))(v5 + 16))();
    v6 = *v34;
    *(_QWORD *)(v0 + 400) = v3;
    *(_QWORD *)(v0 + 408) = &off_10109EA18;
    *(_QWORD *)(v0 + 376) = v6;
    v7 = type metadata accessor for FamilyCircleService();
    *(_QWORD *)(v0 + 440) = v7;
    *(_QWORD *)(v0 + 448) = &off_10109F1D0;
    *(_QWORD *)(v0 + 416) = v2;
    v8 = type metadata accessor for ShareDeclineUseCase();
    v9 = swift_allocObject(v8, 200, 15);
    *(_QWORD *)(v0 + 912) = v9;
    v10 = sub_10009F5D0(v0 + 376, v3);
    v11 = *(_QWORD *)(v3 - 8);
    v12 = (_QWORD *)swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 16))(v12, v10, v3);
    v13 = *(_QWORD *)(v0 + 440);
    v14 = sub_10009F5D0(v0 + 416, v13);
    v15 = *(_QWORD *)(v13 - 8);
    v16 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v16, v14, v13);
    v17 = *v16;
    *(_QWORD *)(v0 + 96) = *v12;
    *(_QWORD *)(v0 + 120) = v3;
    *(_QWORD *)(v0 + 128) = &off_10109EA18;
    *(_QWORD *)(v0 + 360) = v7;
    *(_QWORD *)(v0 + 368) = &off_10109F1D0;
    *(_QWORD *)(v0 + 336) = v17;
    swift_defaultActor_initialize(v9);
    *(_QWORD *)(v9 + 112) = v33;
    sub_10000F9FC((__int128 *)(v0 + 96), v9 + 120);
    sub_10000F9FC((__int128 *)(v0 + 336), v9 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 416));
    swift_task_dealloc(v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 376));
    swift_task_dealloc(v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
    swift_task_dealloc(v34);
    if (qword_1010E9AD0 != -1)
      swift_once(&qword_1010E9AD0, sub_100254F28);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 840);
    v19 = *(unsigned __int8 *)(v0 + 960);
    v20 = *(_QWORD *)(v0 + 624);
    v21 = *(_QWORD *)(v0 + 600);
    v22 = (v19 + 24) & ~v19;
    v23 = v22 + *(_QWORD *)(v0 + 616);
    v24 = v19 | 7;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 824))(v20, *(_QWORD *)(v0 + 592) + *(int *)(v0 + 964), v21);
    v25 = swift_allocObject(&unk_101055D28, v23, v24);
    *(_QWORD *)(v0 + 920) = v25;
    *(_QWORD *)(v25 + 16) = v9;
    v18(v25 + v22, v20, v21);
    v26 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
    v35 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                  + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
    swift_retain();
    v27 = (_QWORD *)swift_task_alloc(v26);
    *(_QWORD *)(v0 + 928) = v27;
    *v27 = v0;
    v27[1] = sub_1000CCF54;
    return v35(&unk_1010EE618, v25);
  }
  else
  {
    v29 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No FamilyCircleService available!", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
    return swift_task_switch(sub_1000DB684, *(_QWORD *)(v0 + 528), 0);
  }
}

uint64_t sub_1000CCF54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 928);
  *(_QWORD *)(*(_QWORD *)v1 + 936) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_1000CD1C4;
  else
    v3 = sub_1000CCFC4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000CCFC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 528);
  swift_release();
  return swift_task_switch(sub_1000CD004, v1, 0);
}

uint64_t sub_1000CD004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 592);
  sub_1000126B0(*(_QWORD *)(v0 + 568), type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  v2 = *(_QWORD *)(v0 + 816) + 1;
  if (v2 == *(_QWORD *)(v0 + 800))
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 664);
    v4 = *(_QWORD *)(v0 + 640);
    v5 = *(_QWORD *)(v0 + 632);
    v6 = *(_QWORD *)(v0 + 624);
    v7 = *(_QWORD *)(v0 + 592);
    v8 = *(_QWORD *)(v0 + 568);
    v14 = *(_QWORD *)(v0 + 544);
    v9 = *(_QWORD *)(v0 + 528);
    type metadata accessor for Transaction(0);
    v10 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v10 + 16, v9);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE610, v10);
    swift_release_n(v10, 2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 816) = v2;
    v12 = *(_QWORD *)(v0 + 776);
    v13 = *(_QWORD *)(v0 + 576);
    sub_10005972C(*(_QWORD *)(v0 + 792)+ ((*(unsigned __int8 *)(v0 + 952) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 952))+ *(_QWORD *)(v0 + 808) * v2, *(_QWORD *)(v0 + 592), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 956) = *(_DWORD *)(v13 + 24);
    return swift_task_switch(sub_1000CC334, v12, 0);
  }
}

uint64_t sub_1000CD1C4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[117];
  swift_release(v0[114]);
  swift_errorRelease(v1);
  return swift_task_switch(sub_1000DB684, v0[66], 0);
}

uint64_t sub_1000CD20C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2[28] = a1;
  v2[29] = v1;
  v3 = type metadata accessor for MemberSharingCircle(0);
  v2[30] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[31] = v4;
  v2[32] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[33] = swift_task_alloc(v5);
  v2[34] = swift_task_alloc(v5);
  v6 = type metadata accessor for OwnerPeerTrust(0);
  v2[35] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[36] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[37] = swift_task_alloc(v8);
  v2[38] = swift_task_alloc(v8);
  v2[39] = swift_task_alloc(v8);
  v9 = type metadata accessor for OwnerSharingCircle(0);
  v2[40] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[41] = v10;
  v2[42] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MemberPeerTrust(0);
  v2[43] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[44] = v12;
  v2[45] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v2[46] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[47] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[48] = swift_task_alloc(v15);
  v2[49] = swift_task_alloc(v15);
  v2[50] = swift_task_alloc(v15);
  v2[51] = swift_task_alloc(v15);
  return swift_task_switch(sub_1000CD3B8, v1, 0);
}

uint64_t sub_1000CD3B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint8_t *v8;
  id v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  NSObject *log;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0 + 176;
  v2 = *(void **)(v0 + 224);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 416) = v3;
  *(_QWORD *)(v0 + 424) = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 224);
  if (v6)
  {
    log = v4;
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    *(_QWORD *)(v0 + 216) = v7;
    v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v8 + 4, v8 + 12);
    *v16 = v7;

    v4 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v5, "forceBreakAllShares for %@ user", v8, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v16, 1, v10);
    swift_slowDealloc(v16, -1, -1);
    v11 = v8;
    v1 = v0 + 176;
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {

  }
  v12 = qword_1010EA5B0;
  swift_retain();
  if (v12 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v1, 0, 0);
  sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (!*(_QWORD *)(v0 + 120))
    __break(1u);
  sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
  swift_release();
  sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v13 = dword_1010EBB58;
  v14 = (_QWORD *)swift_task_alloc(unk_1010EBB5C);
  *(_QWORD *)(v0 + 432) = v14;
  *v14 = v0;
  v14[1] = sub_1000CD660;
  return ((uint64_t (__cdecl *)())((char *)&dword_1010EBB58 + v13))();
}

uint64_t sub_1000CD660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 440) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000CD6EC, v3, 0);
}

uint64_t sub_1000CD6EC()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 440))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100ACD914();
    v3 = v2;
    v5 = v4;
    v7 = v6;
    *(_QWORD *)(v0 + 448) = v6;
    v8 = (_QWORD *)swift_task_alloc(dword_101112094);
    *(_QWORD *)(v0 + 456) = v8;
    *v8 = v0;
    v8[1] = sub_1000CD968;
    return sub_100AAF5B4(v3, v5, v7);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9940 != -1)
      swift_once(&qword_1010E9940, sub_1000B748C);
    v10 = sub_10001A9E8(*(_QWORD *)(v0 + 416), (uint64_t)qword_1011B6760);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No BeaconStore available!", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = sub_100033220();
    v15 = swift_allocError(&type metadata for DaemonError, v14, 0, 0);
    *v16 = 0x74536E6F63616542;
    v16[1] = 0xEB0000000065726FLL;
    swift_willThrow(v15);
    v17 = *(_QWORD *)(v0 + 400);
    v19 = *(_QWORD *)(v0 + 384);
    v18 = *(_QWORD *)(v0 + 392);
    v20 = *(_QWORD *)(v0 + 360);
    v21 = *(_QWORD *)(v0 + 336);
    v23 = *(_QWORD *)(v0 + 304);
    v22 = *(_QWORD *)(v0 + 312);
    v24 = *(_QWORD *)(v0 + 296);
    v25 = *(_QWORD *)(v0 + 272);
    v26 = *(_QWORD *)(v0 + 264);
    v27 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 408));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000CD968(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 456);
  v3[58] = a1;
  v3[59] = v1;
  swift_task_dealloc(v4);
  v5 = v3[29];
  swift_bridgeObjectRelease();
  if (v1)
    v6 = sub_1000CF99C;
  else
    v6 = sub_1000CDA2C;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000CDA2C()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  sub_100ACD914();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  *(_QWORD *)(v0 + 480) = v5;
  v7 = (_QWORD *)swift_task_alloc(dword_10111209C);
  *(_QWORD *)(v0 + 488) = v7;
  *v7 = v0;
  v7[1] = sub_1000CDAD8;
  return sub_100AB0348(v2, v4, v6);
}

uint64_t sub_1000CDAD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 488);
  v3[62] = a1;
  v3[63] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = sub_1000CFAA4;
  }
  else
  {
    v5 = v3[29];
    swift_bridgeObjectRelease();
    v6 = sub_1000CDBB4;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000CDBB4()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v1 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 376);
    v4 = *(_QWORD *)(v0 + 352);
    v34 = *(_QWORD *)(v0 + 344);
    v36 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v2, 0);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v8 = *(_QWORD *)(v0 + 408);
      v10 = *(_QWORD *)(v0 + 360);
      v9 = *(_QWORD *)(v0 + 368);
      sub_10005972C(v5, v10, type metadata accessor for MemberPeerTrust);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v8, v10 + *(int *)(v34 + 20), v9);
      sub_1000126B0(v10, type metadata accessor for MemberPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_10009A578(0, v7[2] + 1, 1);
        v7 = v36;
      }
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_10009A578(v11 > 1, v12 + 1, 1);
        v7 = v36;
      }
      v13 = *(_QWORD *)(v0 + 408);
      v14 = *(_QWORD *)(v0 + 368);
      v7[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v12, v13, v14);
      v36 = v7;
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = _swiftEmptyArrayStorage;
  }
  v15 = *(_QWORD *)(v0 + 464);
  v16 = sub_10001B664((uint64_t)v7);
  *(_QWORD *)(v0 + 512) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v0 + 520) = v17;
  if (v17 || *(_QWORD *)(v16 + 16))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v0 + 232) + 136);
    *(_QWORD *)(v0 + 528) = v18;
    return swift_task_switch(sub_1000CDF08, v18, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = swift_bridgeObjectRelease();
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Can't forceBreakAllShares, missing peer trust record.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    swift_release();
    v24 = *(_QWORD *)(v0 + 400);
    v26 = *(_QWORD *)(v0 + 384);
    v25 = *(_QWORD *)(v0 + 392);
    v27 = *(_QWORD *)(v0 + 360);
    v28 = *(_QWORD *)(v0 + 336);
    v30 = *(_QWORD *)(v0 + 304);
    v29 = *(_QWORD *)(v0 + 312);
    v31 = *(_QWORD *)(v0 + 296);
    v32 = *(_QWORD *)(v0 + 272);
    v33 = *(_QWORD *)(v0 + 264);
    v35 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 408));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000CDF08()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 536) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_1000CDFAC;
  return unsafeBlocking<A>(_:)(v0 + 200, sub_100068004, *(_QWORD *)(v0 + 528), v3);
}

uint64_t sub_1000CDFAC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 528);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 536));
  swift_release();
  return swift_task_switch(sub_1000CE038, v1, 0);
}

uint64_t sub_1000CE038()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[29];
  v0[68] = v0[25];
  return swift_task_switch(sub_1000CE0A0, v1, 0);
}

uint64_t sub_1000CE0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 552) = v2;
  if (!v2)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_1000CEA64, *(_QWORD *)(v0 + 528), 0);
  }
  *(_DWORD *)(v0 + 616) = *(_DWORD *)(*(_QWORD *)(v0 + 328) + 80);
  *(_QWORD *)(v0 + 560) = 0;
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v0 + 520);
      sub_10005972C(v1+ ((*(unsigned __int8 *)(v0 + 616) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 616))+ *(_QWORD *)(*(_QWORD *)(v0 + 328) + 72) * v3, *(_QWORD *)(v0 + 336), type metadata accessor for OwnerSharingCircle);
      if (v4)
      {
        v5 = *(_QWORD *)(v0 + 464);
        v6 = *(_QWORD *)(v0 + 288);
        v45 = *(int *)(*(_QWORD *)(v0 + 320) + 32);
        v46 = *(_QWORD *)(v0 + 336);
        v44 = v5 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        swift_bridgeObjectRetain(v5);
        v7 = 0;
        v43 = *(_QWORD *)(v6 + 72);
        do
        {
          sub_10005972C(v44 + v7 * v43, *(_QWORD *)(v0 + 296), type metadata accessor for OwnerPeerTrust);
          v8 = *(_QWORD *)(v46 + v45);
          v9 = *(_QWORD *)(v8 + 16);
          v47 = v7;
          if (v9)
          {
            v10 = *(_QWORD *)(v0 + 376);
            v11 = sub_10001A9A8(&qword_1011003C0);
            v12 = *(_QWORD *)(v10 + 72);
            v13 = *(unsigned __int8 *)(v10 + 80);
            v14 = (v13 + 32) & ~v13;
            v15 = (_QWORD *)swift_allocObject(v11, v14 + v12 * v9, v13 | 7);
            v16 = j__malloc_size(v15);
            if (!v12)
            {
              __break(1u);
LABEL_31:
              __break(1u);
LABEL_32:
              __break(1u);
            }
            if (v16 - v14 == 0x8000000000000000 && v12 == -1)
              goto LABEL_32;
            v15[2] = v9;
            v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
            swift_bridgeObjectRetain_n(v8, 2);
            v18 = sub_10050A294(v0 + 136, (char *)v15 + v14, v9, v8);
            sub_10007CC38(*(_QWORD *)(v0 + 136));
            if (v18 != v9)
              goto LABEL_31;
            swift_bridgeObjectRelease();
          }
          else
          {
            v15 = _swiftEmptyArrayStorage;
          }
          v19 = v15[2];
          v20 = *(_QWORD *)(v0 + 376);
          v48 = v15;
          if (v19)
          {
            v49 = *(_QWORD *)(v0 + 296) + *(int *)(*(_QWORD *)(v0 + 280) + 20);
            v21 = (char *)v15
                + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
            swift_retain();
            v22 = *(_QWORD *)(v20 + 72);
            v23 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 16);
            while (1)
            {
              v24 = *(_QWORD *)(v0 + 368);
              v25 = *(_QWORD *)(v0 + 376);
              v26 = *(_QWORD *)(v0 + 272);
              v23(v26, v21, v24);
              v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
              v27(v26, 0, 1, v24);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1)
                break;
              v28 = *(_QWORD *)(v0 + 400);
              v30 = *(_QWORD *)(v0 + 368);
              v29 = *(_QWORD *)(v0 + 376);
              (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 32))(v28, *(_QWORD *)(v0 + 272), v30);
              v31 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v32 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v49, v30, v31);
              (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
              if ((v32 & 1) != 0)
                goto LABEL_28;
              v21 += v22;
              if (!--v19)
                goto LABEL_22;
            }
          }
          else
          {
            swift_retain();
            v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
LABEL_22:
            v27(*(_QWORD *)(v0 + 272), 1, 1, *(_QWORD *)(v0 + 368));
          }
          v7 = v47 + 1;
          v33 = *(_QWORD *)(v0 + 520);
          v34 = *(_QWORD *)(v0 + 296);
          swift_release_n(v48, 2);
          sub_1000126B0(v34, type metadata accessor for OwnerPeerTrust);
        }
        while (v47 + 1 != v33);
        swift_bridgeObjectRelease();
      }
      v35 = *(_QWORD *)(v0 + 552);
      v36 = *(_QWORD *)(v0 + 560) + 1;
      sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for OwnerSharingCircle);
      if (v36 == v35)
        goto LABEL_29;
      v3 = *(_QWORD *)(v0 + 560) + 1;
      *(_QWORD *)(v0 + 560) = v3;
      v1 = *(_QWORD *)(v0 + 544);
    }
    while (v3 < *(_QWORD *)(v1 + 16));
  }
  __break(1u);
LABEL_28:
  v37 = *(_QWORD *)(v0 + 304);
  v38 = *(_QWORD *)(v0 + 312);
  v39 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRelease();
  swift_release_n(v48, 2);
  sub_1000126EC(v39, v37, type metadata accessor for OwnerPeerTrust);
  sub_1000126EC(v37, v38, type metadata accessor for OwnerPeerTrust);
  v40 = dword_1010F41A0;
  v41 = (_QWORD *)swift_task_alloc(unk_1010F41A4);
  *(_QWORD *)(v0 + 568) = v41;
  *v41 = v0;
  v41[1] = sub_1000CE520;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F41A0 + v40))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 336));
}

uint64_t sub_1000CE520()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 568));
  v3 = *(_QWORD *)(v2 + 232);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_1000DB634;
  }
  else
  {
    v4 = sub_1000CE5D8;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000CE5D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  sub_1000126B0(*(_QWORD *)(v0 + 312), type metadata accessor for OwnerPeerTrust);
  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 560) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for OwnerSharingCircle);
  if (v2 == v1)
    goto LABEL_2;
LABEL_3:
  v4 = *(_QWORD *)(v0 + 560) + 1;
  *(_QWORD *)(v0 + 560) = v4;
  v5 = *(_QWORD *)(v0 + 544);
  if (v4 >= *(_QWORD *)(v5 + 16))
    goto LABEL_30;
  v6 = *(_QWORD *)(v0 + 520);
  sub_10005972C(v5+ ((*(unsigned __int8 *)(v0 + 616) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 616))+ *(_QWORD *)(*(_QWORD *)(v0 + 328) + 72) * v4, *(_QWORD *)(v0 + 336), type metadata accessor for OwnerSharingCircle);
  if (!v6)
    goto LABEL_25;
  v7 = *(_QWORD *)(v0 + 464);
  v8 = *(_QWORD *)(v0 + 288);
  v46 = *(int *)(*(_QWORD *)(v0 + 320) + 32);
  v47 = *(_QWORD *)(v0 + 336);
  v45 = v7 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  swift_bridgeObjectRetain(v7);
  v9 = 0;
  v44 = *(_QWORD *)(v8 + 72);
  while (1)
  {
    sub_10005972C(v45 + v9 * v44, *(_QWORD *)(v0 + 296), type metadata accessor for OwnerPeerTrust);
    v10 = *(_QWORD *)(v47 + v46);
    v11 = *(_QWORD *)(v10 + 16);
    v48 = v9;
    if (v11)
    {
      v12 = *(_QWORD *)(v0 + 376);
      v13 = sub_10001A9A8(&qword_1011003C0);
      v14 = *(_QWORD *)(v12 + 72);
      v15 = *(unsigned __int8 *)(v12 + 80);
      v16 = (v15 + 32) & ~v15;
      v17 = (_QWORD *)swift_allocObject(v13, v16 + v14 * v11, v15 | 7);
      v18 = j__malloc_size(v17);
      if (!v14)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      if (v18 - v16 == 0x8000000000000000 && v14 == -1)
        goto LABEL_31;
      v17[2] = v11;
      v17[3] = 2 * ((uint64_t)(v18 - v16) / v14);
      swift_bridgeObjectRetain_n(v10, 2);
      v20 = sub_10050A294(v0 + 136, (char *)v17 + v16, v11, v10);
      sub_10007CC38(*(_QWORD *)(v0 + 136));
      if (v20 != v11)
        goto LABEL_29;
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = _swiftEmptyArrayStorage;
    }
    v21 = v17[2];
    v22 = *(_QWORD *)(v0 + 376);
    v49 = v17;
    if (v21)
      break;
    swift_retain();
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
LABEL_22:
    v29(*(_QWORD *)(v0 + 272), 1, 1, *(_QWORD *)(v0 + 368));
LABEL_23:
    v9 = v48 + 1;
    v35 = *(_QWORD *)(v0 + 520);
    v36 = *(_QWORD *)(v0 + 296);
    swift_release_n(v49, 2);
    sub_1000126B0(v36, type metadata accessor for OwnerPeerTrust);
    if (v48 + 1 == v35)
    {
      swift_bridgeObjectRelease();
LABEL_25:
      v37 = *(_QWORD *)(v0 + 552);
      v38 = *(_QWORD *)(v0 + 560) + 1;
      sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for OwnerSharingCircle);
      if (v38 == v37)
      {
LABEL_2:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_task_switch(sub_1000CEA64, *(_QWORD *)(v0 + 528), 0);
      }
      goto LABEL_3;
    }
  }
  v50 = *(_QWORD *)(v0 + 296) + *(int *)(*(_QWORD *)(v0 + 280) + 20);
  v23 = (char *)v17 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  swift_retain();
  v24 = *(_QWORD *)(v22 + 72);
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 16);
  while (1)
  {
    v26 = *(_QWORD *)(v0 + 368);
    v27 = *(_QWORD *)(v0 + 376);
    v28 = *(_QWORD *)(v0 + 272);
    v25(v28, v23, v26);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v29(v28, 0, 1, v26);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1, v26) == 1)
      goto LABEL_23;
    v30 = *(_QWORD *)(v0 + 400);
    v32 = *(_QWORD *)(v0 + 368);
    v31 = *(_QWORD *)(v0 + 376);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 32))(v30, *(_QWORD *)(v0 + 272), v32);
    v33 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v50, v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    if ((v34 & 1) != 0)
      break;
    v23 += v24;
    if (!--v21)
      goto LABEL_22;
  }
  v39 = *(_QWORD *)(v0 + 304);
  v40 = *(_QWORD *)(v0 + 312);
  v41 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRelease();
  swift_release_n(v49, 2);
  sub_1000126EC(v41, v39, type metadata accessor for OwnerPeerTrust);
  sub_1000126EC(v39, v40, type metadata accessor for OwnerPeerTrust);
  v42 = dword_1010F41A0;
  v43 = (_QWORD *)swift_task_alloc(unk_1010F41A4);
  *(_QWORD *)(v0 + 568) = v43;
  *v43 = v0;
  v43[1] = sub_1000CE520;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F41A0 + v42))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 336));
}

uint64_t sub_1000CEA64()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 576) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_1000CEB08;
  return unsafeBlocking<A>(_:)(v0 + 208, sub_10001ED30, *(_QWORD *)(v0 + 528), v3);
}

uint64_t sub_1000CEB08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 528);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 576));
  swift_release();
  return swift_task_switch(sub_1000CEB94, v1, 0);
}

uint64_t sub_1000CEB94()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[29];
  v0[73] = v0[26];
  return swift_task_switch(sub_1000CEBFC, v1, 0);
}

uint64_t sub_1000CEBFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, uint64_t, uint64_t, _QWORD);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(unint64_t, uint64_t, uint64_t);
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 592) = v2;
  if (v2)
  {
    *(_DWORD *)(v0 + 620) = *(_DWORD *)(*(_QWORD *)(v0 + 248) + 80);
    *(_QWORD *)(v0 + 600) = 0;
    if (*(_QWORD *)(v1 + 16))
    {
      v3 = 0;
      while (1)
      {
        v4 = *(_QWORD *)(v0 + 376);
        v5 = *(_QWORD *)(v0 + 256);
        v6 = *(_QWORD *)(v0 + 240);
        sub_10005972C(v1+ ((*(unsigned __int8 *)(v0 + 620) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 620))+ *(_QWORD *)(*(_QWORD *)(v0 + 248) + 72) * v3, v5, type metadata accessor for MemberSharingCircle);
        v7 = *(_QWORD *)(v5 + *(int *)(v6 + 36));
        v8 = *(_QWORD *)(v7 + 16);
        v9 = *(_QWORD *)(v4 + 72);
        v10 = *(unsigned __int8 *)(v4 + 80);
        if (v8)
        {
          v11 = sub_10001A9A8(&qword_1011003C0);
          v12 = (v10 + 32) & ~(unint64_t)v10;
          v13 = v10 | 7;
          v14 = (_QWORD *)swift_allocObject(v11, v12 + v9 * v8, v13);
          v15 = j__malloc_size(v14);
          if (!v9)
          {
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
          }
          if (v15 - v12 == 0x8000000000000000 && v9 == -1)
            goto LABEL_35;
          v14[2] = v8;
          v14[3] = 2 * ((uint64_t)(v15 - v12) / v9);
          swift_bridgeObjectRetain_n(v7, 2);
          v17 = sub_10050A294(v0 + 56, (char *)v14 + v12, v8, v7);
          sub_10007CC38(*(_QWORD *)(v0 + 56));
          if (v17 != v8)
            goto LABEL_34;
          swift_bridgeObjectRelease();
        }
        else
        {
          v12 = (v10 + 32) & ~v10;
          v13 = v10 | 7;
          v14 = _swiftEmptyArrayStorage;
        }
        v18 = *(_QWORD *)(v0 + 368);
        v19 = *(_QWORD *)(v0 + 376);
        v20 = *(_QWORD *)(v0 + 256);
        v21 = *(_QWORD *)(v0 + 240);
        v22 = sub_10001A9A8(&qword_1011003C0);
        v23 = swift_allocObject(v22, v12 + v9, v13);
        *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
        v75 = *(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16);
        v75(v23 + v12, v20 + *(int *)(v21 + 32), v18);
        sub_1003028FC(v23);
        v24 = v14;
        v25 = v14[2];
        v72 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v26 = Set.init(minimumCapacity:)(v25);
        v71 = v24[2];
        if (v71)
        {
          v27 = 0;
          v70 = (char *)v24 + v12;
          while (1)
          {
            v35 = *(_QWORD *)(v0 + 368);
            v34 = *(_QWORD *)(v0 + 376);
            v36 = *(_QWORD *)(v0 + 264);
            v75(v36, (uint64_t)&v70[v27 * v9], v35);
            v37 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56);
            v37(v36, 0, 1, v35);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35) == 1)
              break;
            v69 = v37;
            v73 = v27;
            v38 = *(_QWORD *)(v0 + 368);
            (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 264), v38);
            v39 = *(_QWORD *)(v26 + 40);
            swift_bridgeObjectRetain(v26);
            v40 = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v38, v72);
            v41 = -1 << *(_BYTE *)(v26 + 32);
            v42 = v40 & ~v41;
            if (((*(_QWORD *)(v26 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
            {
              v43 = ~v41;
              while (1)
              {
                v44 = *(_QWORD *)(v0 + 384);
                v45 = *(_QWORD *)(v0 + 392);
                v46 = *(_QWORD *)(v0 + 368);
                v47 = *(_QWORD *)(v0 + 376);
                v75(v44, *(_QWORD *)(v26 + 48) + v42 * v9, v46);
                v48 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                LOBYTE(v45) = dispatch thunk of static Equatable.== infix(_:_:)(v44, v45, v46, v48);
                v33 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
                v33(v44, v46);
                if ((v45 & 1) != 0)
                  break;
                v42 = (v42 + 1) & v43;
                if (((*(_QWORD *)(v26 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
                  goto LABEL_15;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
LABEL_15:
              v29 = *(_QWORD *)(v0 + 384);
              v28 = *(_QWORD *)(v0 + 392);
              v30 = *(_QWORD *)(v0 + 368);
              v31 = *(_QWORD *)(v0 + 376);
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
              v75(v29, v28, v30);
              sub_100A1CCB8(v29, v42, isUniquelyReferenced_nonNull_native);
              swift_bridgeObjectRelease();
              v33 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
            }
            v27 = v73 + 1;
            v33(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 368));
            if (v73 + 1 == v71)
            {
              v69(*(_QWORD *)(v0 + 264), 1, 1, *(_QWORD *)(v0 + 368));
              break;
            }
          }
        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 376) + 56))(*(_QWORD *)(v0 + 264), 1, 1, *(_QWORD *)(v0 + 368));
        }
        v49 = *(_QWORD *)(v0 + 512);
        swift_bridgeObjectRelease();
        sub_1001EE9B8(v49, v26);
        LOBYTE(v49) = v50;
        swift_bridgeObjectRelease();
        if ((v49 & 1) == 0)
          break;
        v51 = *(_QWORD *)(v0 + 592);
        v52 = *(_QWORD *)(v0 + 600) + 1;
        sub_1000126B0(*(_QWORD *)(v0 + 256), type metadata accessor for MemberSharingCircle);
        if (v52 == v51)
          goto LABEL_32;
        v3 = *(_QWORD *)(v0 + 600) + 1;
        *(_QWORD *)(v0 + 600) = v3;
        v1 = *(_QWORD *)(v0 + 584);
        if (v3 >= *(_QWORD *)(v1 + 16))
          goto LABEL_30;
      }
    }
    else
    {
LABEL_30:
      __break(1u);
    }
    v53 = *(_QWORD *)(v0 + 256);
    v54 = *(int *)(*(_QWORD *)(v0 + 240) + 28);
    v55 = dword_1010F4120;
    v56 = (_QWORD *)swift_task_alloc(unk_1010F4124);
    *(_QWORD *)(v0 + 608) = v56;
    *v56 = v0;
    v56[1] = sub_1000CF27C;
    return ((uint64_t (*)(uint64_t))((char *)&dword_1010F4120 + v55))(v53 + v54);
  }
  else
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58 = *(_QWORD *)(v0 + 232);
    type metadata accessor for Transaction(0);
    v59 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v59 + 16, v58);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE5F0, v59);
    swift_release();
    swift_release_n(v59, 2);
    v60 = *(_QWORD *)(v0 + 400);
    v62 = *(_QWORD *)(v0 + 384);
    v61 = *(_QWORD *)(v0 + 392);
    v63 = *(_QWORD *)(v0 + 360);
    v64 = *(_QWORD *)(v0 + 336);
    v66 = *(_QWORD *)(v0 + 304);
    v65 = *(_QWORD *)(v0 + 312);
    v67 = *(_QWORD *)(v0 + 296);
    v68 = *(_QWORD *)(v0 + 272);
    v74 = *(_QWORD *)(v0 + 264);
    v76 = *(_QWORD *)(v0 + 256);
    swift_task_dealloc(*(_QWORD *)(v0 + 408));
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000CF27C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 608));
  v3 = *(_QWORD *)(v2 + 232);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_1000DB5D8;
  }
  else
  {
    v4 = sub_1000CF334;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000CF334()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void (*v68)(_QWORD, uint64_t, uint64_t, _QWORD);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(unint64_t, uint64_t, uint64_t);
  uint64_t v75;

  do
  {
    v3 = *(_QWORD *)(v0 + 592);
    v4 = *(_QWORD *)(v0 + 600) + 1;
    sub_1000126B0(*(_QWORD *)(v0 + 256), type metadata accessor for MemberSharingCircle);
    if (v4 == v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v52 = *(_QWORD *)(v0 + 232);
      type metadata accessor for Transaction(0);
      v53 = swift_allocObject(&unk_101055260, 24, 7);
      swift_weakInit(v53 + 16, v52);
      swift_retain();
      static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE5F0, v53);
      swift_release();
      swift_release_n(v53, 2);
      v54 = *(_QWORD *)(v0 + 400);
      v56 = *(_QWORD *)(v0 + 384);
      v55 = *(_QWORD *)(v0 + 392);
      v57 = *(_QWORD *)(v0 + 360);
      v58 = *(_QWORD *)(v0 + 336);
      v60 = *(_QWORD *)(v0 + 304);
      v59 = *(_QWORD *)(v0 + 312);
      v61 = *(_QWORD *)(v0 + 296);
      v62 = *(_QWORD *)(v0 + 272);
      v73 = *(_QWORD *)(v0 + 264);
      v75 = *(_QWORD *)(v0 + 256);
      swift_task_dealloc(*(_QWORD *)(v0 + 408));
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v73);
      swift_task_dealloc(v75);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v5 = *(_QWORD *)(v0 + 600) + 1;
    *(_QWORD *)(v0 + 600) = v5;
    v6 = *(_QWORD *)(v0 + 584);
    if (v5 >= *(_QWORD *)(v6 + 16))
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
    v7 = *(_QWORD *)(v0 + 376);
    v8 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 240);
    sub_10005972C(v6+ ((*(unsigned __int8 *)(v0 + 620) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 620))+ *(_QWORD *)(*(_QWORD *)(v0 + 248) + 72) * v5, v8, type metadata accessor for MemberSharingCircle);
    v10 = *(_QWORD *)(v8 + *(int *)(v9 + 36));
    v11 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v7 + 72);
    v13 = *(unsigned __int8 *)(v7 + 80);
    if (v11)
    {
      v14 = sub_10001A9A8(&qword_1011003C0);
      v15 = (v13 + 32) & ~(unint64_t)v13;
      v16 = v13 | 7;
      v17 = (_QWORD *)swift_allocObject(v14, v15 + v12 * v11, v16);
      v18 = j__malloc_size(v17);
      if (!v12)
        goto LABEL_30;
      if (v18 - v15 == 0x8000000000000000 && v12 == -1)
        goto LABEL_32;
      v17[2] = v11;
      v17[3] = 2 * ((uint64_t)(v18 - v15) / v12);
      swift_bridgeObjectRetain_n(v10, 2);
      v20 = sub_10050A294(v0 + 56, (char *)v17 + v15, v11, v10);
      sub_10007CC38(*(_QWORD *)(v0 + 56));
      if (v20 != v11)
        goto LABEL_31;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = (v13 + 32) & ~v13;
      v16 = v13 | 7;
      v17 = _swiftEmptyArrayStorage;
    }
    v21 = *(_QWORD *)(v0 + 368);
    v22 = *(_QWORD *)(v0 + 376);
    v23 = *(_QWORD *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 240);
    v25 = sub_10001A9A8(&qword_1011003C0);
    v26 = swift_allocObject(v25, v15 + v12, v16);
    *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
    v74 = *(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 16);
    v74(v26 + v15, v23 + *(int *)(v24 + 32), v21);
    sub_1003028FC(v26);
    v27 = v17;
    v28 = v17[2];
    v71 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = Set.init(minimumCapacity:)(v28);
    v70 = v27[2];
    if (v70)
    {
      v30 = 0;
      v69 = (char *)v27 + v15;
      while (1)
      {
        v38 = *(_QWORD *)(v0 + 368);
        v37 = *(_QWORD *)(v0 + 376);
        v39 = *(_QWORD *)(v0 + 264);
        v74(v39, (uint64_t)&v69[v30 * v12], v38);
        v40 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56);
        v40(v39, 0, 1, v38);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v39, 1, v38) == 1)
          break;
        v68 = v40;
        v72 = v30;
        v41 = *(_QWORD *)(v0 + 368);
        (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 376) + 32))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 264), v41);
        v42 = *(_QWORD *)(v29 + 40);
        swift_bridgeObjectRetain(v29);
        v43 = dispatch thunk of Hashable._rawHashValue(seed:)(v42, v41, v71);
        v44 = -1 << *(_BYTE *)(v29 + 32);
        v45 = v43 & ~v44;
        if (((*(_QWORD *)(v29 + 56 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) != 0)
        {
          v46 = ~v44;
          while (1)
          {
            v47 = *(_QWORD *)(v0 + 384);
            v48 = *(_QWORD *)(v0 + 392);
            v49 = *(_QWORD *)(v0 + 368);
            v50 = *(_QWORD *)(v0 + 376);
            v74(v47, *(_QWORD *)(v29 + 48) + v45 * v12, v49);
            v51 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            LOBYTE(v48) = dispatch thunk of static Equatable.== infix(_:_:)(v47, v48, v49, v51);
            v36 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
            v36(v47, v49);
            if ((v48 & 1) != 0)
              break;
            v45 = (v45 + 1) & v46;
            if (((*(_QWORD *)(v29 + 56 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
              goto LABEL_16;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_16:
          v32 = *(_QWORD *)(v0 + 384);
          v31 = *(_QWORD *)(v0 + 392);
          v33 = *(_QWORD *)(v0 + 368);
          v34 = *(_QWORD *)(v0 + 376);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
          v74(v32, v31, v33);
          sub_100A1CCB8(v32, v45, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          v36 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
        }
        v30 = v72 + 1;
        v36(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 368));
        if (v72 + 1 == v70)
        {
          v68(*(_QWORD *)(v0 + 264), 1, 1, *(_QWORD *)(v0 + 368));
          break;
        }
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 376) + 56))(*(_QWORD *)(v0 + 264), 1, 1, *(_QWORD *)(v0 + 368));
    }
    v1 = *(_QWORD *)(v0 + 512);
    swift_bridgeObjectRelease();
    sub_1001EE9B8(v1, v29);
    LOBYTE(v1) = v2;
    swift_bridgeObjectRelease();
  }
  while ((v1 & 1) != 0);
  v64 = *(_QWORD *)(v0 + 256);
  v65 = *(int *)(*(_QWORD *)(v0 + 240) + 28);
  v66 = dword_1010F4120;
  v67 = (_QWORD *)swift_task_alloc(unk_1010F4124);
  *(_QWORD *)(v0 + 608) = v67;
  *v67 = v0;
  v67[1] = sub_1000CF27C;
  return ((uint64_t (*)(uint64_t))((char *)&dword_1010F4120 + v66))(v64 + v65);
}

uint64_t sub_1000CF99C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 440));
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 408));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CFAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 440));
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 408));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CFBAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CFC0C, v1, 0);
}

uint64_t sub_1000CFC0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[3];
  v3 = v0[6];
  v2 = v0[7];
  v4 = v0[5];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = v0[6];
  v10 = v0[7];
  v12 = v0[5];
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v21 = v19;
    *(_DWORD *)v13 = 136315138;
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v0[2] = sub_100016940(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "forceDecline shareIdentifier %s", v13, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(v0[7], v0[5]);
  }

  v20 = (uint64_t (*)(uint64_t))((char *)&dword_1010F4120 + dword_1010F4120);
  v17 = (_QWORD *)swift_task_alloc(unk_1010F4124);
  v0[8] = v17;
  *v17 = v0;
  v17[1] = sub_1000CFE40;
  return v20(v0[3]);
}

uint64_t sub_1000CFE40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1000CFEB0, *(_QWORD *)(v2 + 32), 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 56));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000CFEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v3 + 16, v2);
  swift_retain(v3);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE5C8, v3);
  swift_release_n(v3, 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CFF5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[33] = a1;
  v2[34] = v1;
  v3 = type metadata accessor for MemberSharingCircle(0);
  v2[35] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[36] = v4;
  v2[37] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[38] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[39] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[40] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[41] = swift_task_alloc(v8);
  v2[42] = swift_task_alloc(v8);
  v2[43] = swift_task_alloc(v8);
  v2[44] = swift_task_alloc(v8);
  v2[45] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000D001C, v1, 0);
}

uint64_t sub_1000D001C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[45];
  v2 = v0[38];
  v3 = v0[39];
  v4 = v0[33];
  v5 = type metadata accessor for Logger(0);
  v0[46] = sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[47] = v6;
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[45];
  v12 = v0[38];
  v13 = v0[39];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v22 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    v0[32] = sub_100016940(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "forceStopSharing beaconIdentifier %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v0[45], v0[38]);
  }

  v0[48] = v19;
  v20 = *(_QWORD *)(v0[34] + 136);
  v0[49] = v20;
  v0[50] = sub_1003BA248((uint64_t)&off_101048E60);
  return swift_task_switch(sub_1000D024C, v20, 0);
}

uint64_t sub_1000D024C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 304);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 376))(v3, *(_QWORD *)(v0 + 264), v6);
  LODWORD(v7) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 616) = v7;
  v7 = v7;
  v8 = (v7 + 24) & ~v7;
  v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_101055B48, v9 + 8, v7 | 7);
  *(_QWORD *)(v0 + 408) = v10;
  *(_QWORD *)(v10 + 16) = v2;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 416) = v11;
  v11(v10 + v8, v3, v6);
  *(_QWORD *)(v10 + v9) = v1;
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v1);
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 424) = v13;
  v14 = sub_10001A9A8(&qword_1010EE100);
  *v13 = v0;
  v13[1] = sub_1000D0370;
  return unsafeBlocking<A>(_:)(v0 + 216, sub_1000D82C0, v10, v14);
}

uint64_t sub_1000D0370()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 392);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 424));
  swift_release();
  return swift_task_switch(sub_1000D03D4, v1, 0);
}

uint64_t sub_1000D03D4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[34];
  swift_bridgeObjectRelease();
  v0[54] = v0[27];
  return swift_task_switch(sub_1000D041C, v1, 0);
}

uint64_t sub_1000D041C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 432) + 16))
  {
    v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 304));
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter(v2);
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(void (**)(uint64_t, uint64_t))(v0 + 384);
    v6 = *(_QWORD *)(v0 + 328);
    v7 = *(_QWORD *)(v0 + 304);
    if (v4)
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(32, -1);
      v17 = v9;
      *(_DWORD *)v8 = 141558275;
      *(_QWORD *)(v0 + 240) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2081;
      v10 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v11 = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
      *(_QWORD *)(v0 + 232) = sub_100016940(v11, v12, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease();
      v5(v6, v7);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Stop sharing of %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      v5(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 304));
    }

    v16 = (uint64_t (*)(uint64_t))((char *)&dword_1010F4108 + dword_1010F4108);
    v15 = (_QWORD *)swift_task_alloc(unk_1010F410C);
    *(_QWORD *)(v0 + 600) = v15;
    *v15 = v0;
    v15[1] = sub_1000D135C;
    return v16(*(_QWORD *)(v0 + 432));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 392);
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_1000D0658, v13, 0);
  }
}

uint64_t sub_1000D0658()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
  v2 = *(unsigned __int8 *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 304);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 320);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 376))(v4, *(_QWORD *)(v0 + 264), v5);
  v9 = swift_allocObject(&unk_101055B70, v7, v8);
  *(_QWORD *)(v0 + 440) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 448) = v11;
  v12 = sub_10001A9A8(&qword_1010EC840);
  *v11 = v0;
  v11[1] = sub_1000D0758;
  return unsafeBlocking<A>(_:)(v0 + 224, sub_1000D9288, v9, v12);
}

uint64_t sub_1000D0758()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 392);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 448));
  swift_release();
  return swift_task_switch(sub_1000D07B8, v1, 0);
}

uint64_t sub_1000D07B8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[34];
  v0[57] = v0[28];
  return swift_task_switch(sub_1000D07D4, v1, 0);
}

uint64_t sub_1000D07D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2 >= 2)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 456));
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v6 = 134217984;
      *(_QWORD *)(v0 + 248) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Too much circles to decline on sharing stop! There is %ld circles.", v6, 0xCu);
      swift_slowDealloc(v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    v2 = *(_QWORD *)(v1 + 16);
    v1 = *(_QWORD *)(v0 + 456);
  }
  *(_QWORD *)(v0 + 464) = v2;
  if (v2)
  {
    v8 = *(_QWORD *)(v0 + 288);
    v7 = *(_QWORD *)(v0 + 296);
    *(_DWORD *)(v0 + 620) = *(_DWORD *)(*(_QWORD *)(v0 + 280) + 28);
    v9 = *(_DWORD *)(v8 + 80);
    *(_DWORD *)(v0 + 624) = v9;
    *(_QWORD *)(v0 + 472) = *(_QWORD *)(v8 + 72);
    sub_10005972C(v1 + ((v9 + 32) & ~(unint64_t)v9), v7, type metadata accessor for MemberSharingCircle);
    *(_QWORD *)(v0 + 480) = 1;
    v10 = *(_QWORD *)(v0 + 296);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 344), v10 + *(int *)(v0 + 620), *(_QWORD *)(v0 + 304));
    sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
    v11 = (_QWORD *)swift_task_alloc(dword_1010F4024);
    *(_QWORD *)(v0 + 488) = v11;
    *v11 = v0;
    v11[1] = sub_1000D0A58;
    return sub_1001BE998();
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v0 + 352);
    v13 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 328);
    v18 = *(_QWORD *)(v0 + 296);
    v19 = *(_QWORD *)(v0 + 272);
    type metadata accessor for Transaction(0);
    v20 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v20 + 16, v19);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE590, v20);
    swift_release_n(v20, 2);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000D0A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(*v2 + 488);
  v4 = *v2;
  *(_QWORD *)(v4 + 496) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    *(_QWORD *)(v4 + 592) = v1;
    v5 = *(_QWORD *)(v4 + 272);
    (*(void (**)(_QWORD, _QWORD))(v4 + 384))(*(_QWORD *)(v4 + 344), *(_QWORD *)(v4 + 304));
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_1000D12E4, v5, 0);
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc(dword_1010F402C);
    *(_QWORD *)(v4 + 504) = v7;
    *v7 = v4;
    v7[1] = sub_1000D0B0C;
    return sub_100257AF8();
  }
}

uint64_t sub_1000D0B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 504);
  *(_QWORD *)(*v2 + 512) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    v6 = sub_1000D0C68;
  }
  else
  {
    *(_QWORD *)(v4 + 520) = a1;
    v6 = sub_1000D0B88;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000D0B88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[65];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[66] = v2;
  v0[25] = v2;
  v0[26] = &off_10109EA18;
  v0[22] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[67] = v3;
  *v3 = v0;
  v3[1] = sub_1000D0BEC;
  return sub_1001BECC4();
}

uint64_t sub_1000D0BEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 536);
  *(_QWORD *)(*v2 + 544) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    v6 = sub_1000D1008;
  }
  else
  {
    *(_QWORD *)(v4 + 552) = a1;
    v6 = sub_1000D0CC4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000D0C68()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 592) = *(_QWORD *)(v0 + 512);
  v1 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 304));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000D12E4, v1, 0);
}

uint64_t sub_1000D0CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t (*v30)(void *, uint64_t);

  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 528);
  v28 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 200);
  sub_10009F5D0(v0 + 176, v3);
  v4 = *(_QWORD *)(v3 - 8);
  v29 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(v4 + 16))();
  v5 = *v29;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = &off_10109EA18;
  *(_QWORD *)(v0 + 16) = v5;
  v27 = type metadata accessor for FamilyCircleService();
  *(_QWORD *)(v0 + 160) = v27;
  *(_QWORD *)(v0 + 168) = &off_10109F1D0;
  *(_QWORD *)(v0 + 136) = v1;
  v6 = type metadata accessor for ShareDeclineUseCase();
  v7 = swift_allocObject(v6, 200, 15);
  *(_QWORD *)(v0 + 560) = v7;
  v8 = sub_10009F5D0(v0 + 16, v2);
  v9 = *(_QWORD *)(v2 - 8);
  v10 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v10, v8, v2);
  v11 = *(_QWORD *)(v0 + 160);
  v12 = sub_10009F5D0(v0 + 136, v11);
  v13 = *(_QWORD *)(v11 - 8);
  v14 = (_QWORD *)swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 16))(v14, v12, v11);
  v15 = *v10;
  *(_QWORD *)(v0 + 56) = *v14;
  *(_QWORD *)(v0 + 120) = v2;
  *(_QWORD *)(v0 + 128) = &off_10109EA18;
  *(_QWORD *)(v0 + 96) = v15;
  *(_QWORD *)(v0 + 80) = v27;
  *(_QWORD *)(v0 + 88) = &off_10109F1D0;
  swift_defaultActor_initialize(v7);
  *(_QWORD *)(v7 + 112) = v28;
  sub_10000F9FC((__int128 *)(v0 + 96), v7 + 120);
  sub_10000F9FC((__int128 *)(v0 + 56), v7 + 160);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  swift_task_dealloc(v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
  swift_task_dealloc(v29);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
  v17 = *(unsigned __int8 *)(v0 + 616);
  v18 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 304);
  v20 = (v17 + 24) & ~v17;
  v21 = v20 + *(_QWORD *)(v0 + 320);
  v22 = v17 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 376))(v18, *(_QWORD *)(v0 + 344), v19);
  v23 = swift_allocObject(&unk_101055B98, v21, v22);
  *(_QWORD *)(v0 + 568) = v23;
  *(_QWORD *)(v23 + 16) = v7;
  v16(v23 + v20, v18, v19);
  v24 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v30 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v25 = (_QWORD *)swift_task_alloc(v24);
  *(_QWORD *)(v0 + 576) = v25;
  *v25 = v0;
  v25[1] = sub_1000D0F9C;
  return v30(&unk_1010EE598, v23);
}

uint64_t sub_1000D0F9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 576);
  *(_QWORD *)(*(_QWORD *)v1 + 584) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_1000D1280;
  else
    v3 = sub_1000D106C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D1008()
{
  uint64_t v0;
  uint64_t v1;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
  *(_QWORD *)(v0 + 592) = *(_QWORD *)(v0 + 544);
  v1 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 304));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000D12E4, v1, 0);
}

uint64_t sub_1000D106C()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void (*)(uint64_t, uint64_t))v0[48];
  v2 = v0[43];
  v3 = v0[38];
  v4 = v0[34];
  swift_release();
  v1(v2, v3);
  return swift_task_switch(sub_1000D10CC, v4, 0);
}

uint64_t sub_1000D10CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 480);
  if (v1 == *(_QWORD *)(v0 + 464))
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 352);
    v2 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 336);
    v5 = *(_QWORD *)(v0 + 344);
    v6 = *(_QWORD *)(v0 + 328);
    v7 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 272);
    type metadata accessor for Transaction(0);
    v9 = swift_allocObject(&unk_101055260, 24, 7);
    swift_weakInit(v9 + 16, v8);
    swift_retain();
    static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE590, v9);
    swift_release_n(v9, 2);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    result = sub_10005972C(*(_QWORD *)(v0 + 456)+ ((*(unsigned __int8 *)(v0 + 624) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 624))+ *(_QWORD *)(v0 + 472) * v1, *(_QWORD *)(v0 + 296), type metadata accessor for MemberSharingCircle);
    *(_QWORD *)(v0 + 480) = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(v0 + 296);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 344), v11 + *(int *)(v0 + 620), *(_QWORD *)(v0 + 304));
      sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
      v12 = (_QWORD *)swift_task_alloc(dword_1010F4024);
      *(_QWORD *)(v0 + 488) = v12;
      *v12 = v0;
      v12[1] = sub_1000D0A58;
      return sub_1001BE998();
    }
  }
  return result;
}

uint64_t sub_1000D1280()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  *(_QWORD *)(v0 + 592) = *(_QWORD *)(v0 + 584);
  v1 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD))(v0 + 384))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 304));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000D12E4, v1, 0);
}

uint64_t sub_1000D12E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D135C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 600);
  *(_QWORD *)(*v1 + 608) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 272);
    v5 = sub_1000D14C8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 272);
    swift_bridgeObjectRelease();
    v5 = sub_1000D13D0;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000D13D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 272);
  type metadata accessor for Transaction(0);
  v8 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v8 + 16, v7);
  swift_retain(v8);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE590, v8);
  swift_release_n(v8, 2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D14C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 432));
  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D1548(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[9] = v5;
  v2[10] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnedBeaconRecord(0);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D15D0, v1, 0);
}

uint64_t sub_1000D15D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v1, v2, type metadata accessor for OwnedBeaconRecord);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 96);
  if (v7)
  {
    v17 = *(_QWORD *)(v0 + 56);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v18 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v17, v11);
    *(_QWORD *)(v0 + 32) = sub_100016940(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "forceStopSharingAfterUnpairing ownedBeacon %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 96), type metadata accessor for OwnedBeaconRecord);
  }

  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 136);
  *(_QWORD *)(v0 + 104) = v15;
  *(_DWORD *)(v0 + 152) = *(_DWORD *)(v14 + 20);
  return swift_task_switch(sub_1000D1814, v15, 0);
}

uint64_t sub_1000D1814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 40) + *(int *)(v0 + 152), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = (v3 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_allocObject(&unk_101055238, v8 + 8, v6 | 7);
  *(_QWORD *)(v0 + 112) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v9 + v7, v2, v4);
  *(_QWORD *)(v9 + v8) = 0;
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 120) = v11;
  v12 = sub_10001A9A8(&qword_1010EE100);
  *v11 = v0;
  v11[1] = sub_1000D1920;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_1000D82C0, v9, v12);
}

uint64_t sub_1000D1920()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_1000D1980, v1, 0);
}

uint64_t sub_1000D1980()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v1 = v0[2];
  v0[16] = v1;
  v4 = (uint64_t (*)(uint64_t))((char *)&dword_1010F4060 + dword_1010F4060);
  v2 = (_QWORD *)swift_task_alloc(unk_1010F4064);
  v0[17] = v2;
  *v2 = v0;
  v2[1] = sub_1000D19E4;
  return v4(v1);
}

uint64_t sub_1000D19E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 48);
    v5 = sub_1000D1B18;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 48);
    swift_bridgeObjectRelease();
    v5 = sub_1000D1A58;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000D1A58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  type metadata accessor for Transaction(0);
  v4 = swift_allocObject(&unk_101055260, 24, 7);
  swift_weakInit(v4 + 16, v3);
  swift_retain(v4);
  static Transaction.asyncTask(name:block:)("BeaconSharingSerivce.ForwardShareUpdates", 40, 2, &unk_1010EE110, v4);
  swift_release_n(v4, 2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D1B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D1B64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 752);
  v2 = *(_QWORD *)(v0 + 592);
  v4 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 496);
  v6 = *(_QWORD *)(v0 + 736) + *(int *)(v0 + 1120);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 816) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1124) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010552B0, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 824) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 832) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 840) = v13;
  *v13 = v0;
  v13[1] = sub_1000D1C5C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 608), sub_100067DF8, v10, *(_QWORD *)(v0 + 600));
}

uint64_t sub_1000D1C5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 840));
  swift_release();
  return swift_task_switch(sub_1000D1CC0, v1, 0);
}

uint64_t sub_1000D1CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t My;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 608);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 624) + 48))(v1, 1, *(_QWORD *)(v0 + 616)) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
LABEL_19:
    v26 = *(_QWORD *)(v0 + 752);
    v27 = sub_1000D20A0;
    return swift_task_switch(v27, v26, 0);
  }
  v2 = *(unsigned int *)(v0 + 100);
  sub_1000126EC(v1, *(_QWORD *)(v0 + 640), type metadata accessor for SharedBeaconRecord);
  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v4 = sub_100018F08((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(My - 8) + 104))(v4, v2, My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 640);
    v6 = *(unsigned __int8 *)(v5 + *(int *)(*(_QWORD *)(v0 + 616) + 64));
    sub_10005972C(v5, *(_QWORD *)(v0 + 632), type metadata accessor for SharedBeaconRecord);
    v7 = *(_QWORD *)(v0 + 632);
    if (v6 == 4)
    {
      v8 = *(_BYTE *)(v0 + 73);
      sub_1000126B0(v7, type metadata accessor for SharedBeaconRecord);
      if ((v8 & 1) == 0)
        goto LABEL_6;
LABEL_18:
      sub_1000126B0(*(_QWORD *)(v0 + 640), type metadata accessor for SharedBeaconRecord);
      goto LABEL_19;
    }
    v34 = *(unsigned __int8 *)(v0 + 73);
    v35 = *(unsigned __int8 *)(v7 + *(int *)(*(_QWORD *)(v0 + 616) + 64));
    sub_1000126B0(v7, type metadata accessor for SharedBeaconRecord);
    if (v35 != 1 || v34 != 0)
      goto LABEL_18;
  }
LABEL_6:
  v9 = sub_10005972C(*(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 728), type metadata accessor for MemberSharingCircle);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 736);
  v14 = *(_QWORD *)(v0 + 728);
  if (v12)
  {
    v15 = *(_QWORD *)(v0 + 640);
    v16 = *(_QWORD *)(v0 + 496);
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(32, -1);
    v37 = v18;
    *(_DWORD *)v17 = 141558275;
    *(_QWORD *)(v17 + 4) = 1752392040;
    *(_WORD *)(v17 + 12) = 2081;
    v19 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
    *(_QWORD *)(v17 + 14) = sub_100016940(v20, v21, &v37);
    swift_bridgeObjectRelease();
    sub_1000126B0(v14, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Filtering beacon %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    sub_1000126B0(v15, type metadata accessor for SharedBeaconRecord);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 640);

    sub_1000126B0(v14, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v22, type metadata accessor for SharedBeaconRecord);
  }
  result = sub_1000126B0(v13, type metadata accessor for MemberSharingCircle);
  v24 = *(_QWORD *)(v0 + 792);
  v25 = *(_QWORD *)(v0 + 800) + 1;
  if (v25 == *(_QWORD *)(v0 + 784))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 968) = v24;
    v26 = *(_QWORD *)(v0 + 752);
    if ((*(_BYTE *)(v0 + 73) & 1) != 0)
      v27 = sub_1000D40B8;
    else
      v27 = sub_100004C70;
    return swift_task_switch(v27, v26, 0);
  }
  *(_QWORD *)(v0 + 800) = v25;
  *(_QWORD *)(v0 + 792) = v24;
  v28 = *(_QWORD *)(v0 + 776);
  if (v25 < *(_QWORD *)(v28 + 16))
  {
    v29 = *(_QWORD *)(v0 + 752);
    v30 = *(_QWORD *)(v0 + 736);
    v31 = *(_QWORD *)(v0 + 648);
    v32 = v28 + ((*(unsigned __int8 *)(v0 + 76) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 76));
    v33 = *(_QWORD *)(*(_QWORD *)(v0 + 656) + 72);
    *(_QWORD *)(v0 + 808) = v33;
    sub_10005972C(v32 + v33 * v25, v30, type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 1120) = *(_DWORD *)(v31 + 24);
    v27 = sub_1000D1B64;
    v26 = v29;
    return swift_task_switch(v27, v26, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D20A0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  v2 = *(unsigned __int8 *)(v0 + 1124);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 496);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 512) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 816))(v4, *(_QWORD *)(v0 + 736) + *(int *)(v0 + 1120), v5);
  v9 = swift_allocObject(&unk_1010552D8, v7, v8);
  *(_QWORD *)(v0 + 848) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 856) = v11;
  *v11 = v0;
  v11[1] = sub_1000D219C;
  return unsafeBlocking<A>(_:)(v0 + 104, sub_1000D9288, v9, *(_QWORD *)(v0 + 768));
}

uint64_t sub_1000D219C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 752);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 856));
  swift_release();
  return swift_task_switch(sub_1000D2200, v1, 0);
}

uint64_t sub_1000D2200()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[23];
  v0[108] = v0[13];
  return swift_task_switch(sub_1000D221C, v1, 0);
}

uint64_t sub_1000D221C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(uint64_t, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t result;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if ((*(_BYTE *)(v0 + 73) & 1) != 0
    || (v1 = *(_QWORD *)(v0 + 864), *(_BYTE *)(*(_QWORD *)(v0 + 736) + *(int *)(*(_QWORD *)(v0 + 648) + 40)) != 4)
    || (v2 = *(_QWORD *)(v1 + 16), v2 < 2))
  {
    swift_bridgeObjectRelease();
LABEL_9:
    v7 = *(_QWORD *)(v0 + 792);
    v8 = *(_QWORD *)(v0 + 736);
    v9 = *(int *)(*(_QWORD *)(v0 + 648) + 36);
    *(_DWORD *)(v0 + 1128) = v9;
    v10 = swift_bridgeObjectRetain(*(_QWORD *)(v8 + v9));
    v11 = sub_100508A54(v10);
    swift_bridgeObjectRelease();
    v12 = swift_task_alloc(32);
    *(_QWORD *)(v12 + 16) = v8;
    v13 = sub_100307244((uint64_t)&_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_1000D9294, v12, v11);
    *(_QWORD *)(v0 + 872) = v13;
    *(_QWORD *)(v0 + 880) = v7;
    swift_release();
    swift_task_dealloc(v12);
    v14 = *(_BYTE *)(v13 + 32);
    *(_BYTE *)(v0 + 74) = v14;
    v15 = -1;
    v16 = -1 << v14;
    if (-v16 < 64)
      v15 = ~(-1 << -(char)v16);
    v17 = v15 & *(_QWORD *)(v13 + 64);
    if (v17)
    {
      v18 = 0;
      v19 = __clz(__rbit64(v17));
      v20 = (v17 - 1) & v17;
      v21 = *(_QWORD **)(v0 + 872);
      goto LABEL_13;
    }
    v38 = 63 - v16;
    v21 = *(_QWORD **)(v0 + 872);
    if (v38 > 0x7F)
    {
      v39 = v21[9];
      if (v39)
      {
        v18 = 1;
LABEL_19:
        v20 = (v39 - 1) & v39;
        v19 = __clz(__rbit64(v39)) + (v18 << 6);
LABEL_13:
        *(_QWORD *)(v0 + 896) = v20;
        *(_QWORD *)(v0 + 888) = v18;
        v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 816);
        v23 = *(_QWORD *)(v0 + 496);
        v24 = *(_QWORD *)(v0 + 488);
        v25 = *(_QWORD *)(v0 + 424);
        v26 = *(_QWORD *)(v0 + 432);
        v27 = *(_QWORD *)(*(_QWORD *)(v0 + 504) + 72) * v19;
        v22(v24, v21[6] + v27, v23);
        v22(v24 + *(int *)(v25 + 48), v21[7] + v27, v23);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v24, 0, 1, v25);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) != 1)
        {
          v28 = *(void (**)(void))(v0 + 832);
          v29 = *(_QWORD *)(v0 + 752);
          v30 = *(_QWORD *)(v0 + 488);
          v31 = *(_QWORD *)(v0 + 496);
          v32 = *(_QWORD *)(v0 + 472);
          v33 = *(int *)(*(_QWORD *)(v0 + 424) + 48);
          *(_DWORD *)(v0 + 1132) = v33;
          v34 = v32 + v33;
          v35 = v30 + v33;
          v28();
          ((void (*)(uint64_t, uint64_t, uint64_t))v28)(v34, v35, v31);
          v36 = sub_1000D271C;
LABEL_15:
          v37 = v29;
          return swift_task_switch(v36, v37, 0);
        }
LABEL_45:
        swift_release();
        v56 = *(_QWORD *)(v0 + 648);
        *(_QWORD *)(v0 + 944) = qword_100E26BF8[*(char *)(*(_QWORD *)(v0 + 736) + *(int *)(v56 + 40))];
        v37 = *(_QWORD *)(v0 + 752);
        *(_DWORD *)(v0 + 1144) = *(_DWORD *)(v56 + 32);
        v36 = sub_1000D3858;
        return swift_task_switch(v36, v37, 0);
      }
      if (v38 >= 0xC0)
      {
        v39 = v21[10];
        if (v39)
        {
          v18 = 2;
          goto LABEL_19;
        }
        if (v38 >= 0x100)
        {
          v39 = v21[11];
          if (v39)
          {
            v18 = 3;
            goto LABEL_19;
          }
          if (v38 >= 0x140)
          {
            v39 = v21[12];
            if (v39)
            {
              v18 = 4;
              goto LABEL_19;
            }
            v53 = 0;
            v54 = v38 >> 6;
            if (v54 <= 5)
              v54 = 5;
            v55 = v54 - 5;
            while (v55 != v53)
            {
              v39 = v21[v53++ + 13];
              if (v39)
              {
                v18 = v53 + 4;
                goto LABEL_19;
              }
            }
          }
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 432) + 56))(*(_QWORD *)(v0 + 488), 1, 1, *(_QWORD *)(v0 + 424));
    goto LABEL_45;
  }
  v3 = v1 + ((*(unsigned __int8 *)(v0 + 76) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 76));
  swift_bridgeObjectRetain(v1);
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(v0 + 720);
    v6 = *(_QWORD *)(v0 + 648);
    sub_10005972C(v3 + *(_QWORD *)(v0 + 808) * v4, v5, type metadata accessor for MemberSharingCircle);
    LODWORD(v6) = *(unsigned __int8 *)(v5 + *(int *)(v6 + 40));
    sub_1000126B0(v5, type metadata accessor for MemberSharingCircle);
    if ((_DWORD)v6 != 4)
      break;
    if (v2 == ++v4)
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 864), 2);
      goto LABEL_9;
    }
  }
  v40 = *(_QWORD *)(v0 + 864);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v40);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = swift_slowAlloc(12, -1);
    *(_DWORD *)v44 = 134217984;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v44 + 4) = v2 - 1;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Filtering out tentativelyRevoked share that has %ld other member circle(s).", (uint8_t *)v44, 0xCu);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 864), 2);
  }

  result = sub_1000126B0(*(_QWORD *)(v0 + 736), type metadata accessor for MemberSharingCircle);
  v46 = *(_QWORD *)(v0 + 800) + 1;
  if (v46 == *(_QWORD *)(v0 + 784))
  {
    v47 = *(_QWORD *)(v0 + 792);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 968) = v47;
    v37 = *(_QWORD *)(v0 + 752);
    if ((*(_BYTE *)(v0 + 73) & 1) != 0)
      v36 = sub_1000D40B8;
    else
      v36 = sub_100004C70;
    return swift_task_switch(v36, v37, 0);
  }
  *(_QWORD *)(v0 + 800) = v46;
  v48 = *(_QWORD *)(v0 + 776);
  if (v46 < *(_QWORD *)(v48 + 16))
  {
    v29 = *(_QWORD *)(v0 + 752);
    v49 = *(_QWORD *)(v0 + 736);
    v50 = *(_QWORD *)(v0 + 648);
    v51 = v48 + ((*(unsigned __int8 *)(v0 + 76) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 76));
    v52 = *(_QWORD *)(*(_QWORD *)(v0 + 656) + 72);
    *(_QWORD *)(v0 + 808) = v52;
    sub_10005972C(v51 + v52 * v46, v49, type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 1120) = *(_DWORD *)(v50 + 24);
    v36 = sub_1000D1B64;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D271C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  v2 = *(unsigned __int8 *)(v0 + 1124);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 496);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 512);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 816))(v4, *(_QWORD *)(v0 + 472) + *(int *)(v0 + 1132), v5);
  v9 = swift_allocObject(&unk_101055350, v7, v8);
  *(_QWORD *)(v0 + 904) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 912) = v11;
  *v11 = v0;
  v11[1] = sub_1000D2814;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 360), sub_100067E08, v9, *(_QWORD *)(v0 + 336));
}

uint64_t sub_1000D2814()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 912));
  swift_release();
  return swift_task_switch(sub_1000D2878, v1, 0);
}

uint64_t sub_1000D2878()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, int *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, unint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = *(int **)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 360);
  v3 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(v0 + 376) + 48);
  *(_QWORD *)(v0 + 920) = v3;
  if (v3(v2, 1, v1) != 1)
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 816);
    v23 = *(_QWORD *)(v0 + 496);
    v25 = *(char **)(v0 + 408);
    v24 = *(_QWORD *)(v0 + 416);
    sub_1000126EC(v2, v24, type metadata accessor for MemberPeerTrust);
    v26 = (uint64_t *)(v24 + v1[8]);
    v27 = *v26;
    v28 = v26[1];
    v29 = sub_1007BE85C(*v26, v28);
    v31 = v30;
    v22(&v25[v1[5]], v24 + v1[5], v23);
    LOBYTE(v22) = *(_BYTE *)(v24 + v1[6]);
    sub_10005972C(v24 + v1[7], (uint64_t)&v25[v1[7]], type metadata accessor for PeerCommunicationIdentifier);
    v32 = (uint64_t *)(v24 + v1[9]);
    v33 = *v32;
    v34 = v32[1];
    *(_OWORD *)v25 = xmmword_100E22FC0;
    v25[v1[6]] = (char)v22;
    v35 = v1[8];
    *(_DWORD *)(v0 + 1136) = v35;
    v36 = (uint64_t *)&v25[v35];
    *v36 = v29;
    v36[1] = v31;
    v37 = (uint64_t *)&v25[v1[9]];
    *v37 = v33;
    v37[1] = v34;
    if (v29 == v27 && v31 == v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v27, v28, 0) & 1) != 0)
    {
      sub_10001BBBC(v33, v34);
    }
    else
    {
      sub_10001BBBC(v33, v34);
      swift_bridgeObjectRetain(v31);
      sub_100A0AE78(v0 + 56, v29, v31, 1);
      swift_bridgeObjectRelease();
    }
    v60 = *(_QWORD *)(v0 + 752);
    *(_DWORD *)(v0 + 1140) = *(_DWORD *)(*(_QWORD *)(v0 + 648) + 32);
    v59 = sub_1000D2E50;
    return swift_task_switch(v59, v60, 0);
  }
  v4 = *(_QWORD *)(v0 + 736);
  v5 = *(_QWORD *)(v0 + 688);
  v6 = *(_QWORD *)(v0 + 680);
  sub_100004048(v2, &qword_1010EC868);
  sub_10005972C(v4, v5, type metadata accessor for MemberSharingCircle);
  v7 = sub_10005972C(v4, v6, type metadata accessor for MemberSharingCircle);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 688);
  v12 = *(_QWORD *)(v0 + 680);
  if (v10)
  {
    v13 = *(_QWORD *)(v0 + 496);
    v67 = *(_QWORD *)(v0 + 472);
    v14 = swift_slowAlloc(42, -1);
    v15 = swift_slowAlloc(64, -1);
    v68 = v15;
    *(_DWORD *)v14 = 141558787;
    *(_QWORD *)(v14 + 4) = 1752392040;
    *(_WORD *)(v14 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    *(_QWORD *)(v14 + 14) = sub_100016940(v17, v18, &v68);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v14 + 22) = 2160;
    *(_QWORD *)(v14 + 24) = 1752392040;
    *(_WORD *)(v14 + 32) = 2081;
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    *(_QWORD *)(v14 + 34) = sub_100016940(v19, v20, &v68);
    swift_bridgeObjectRelease();
    sub_1000126B0(v12, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing member peer trust for member in member circle: %{private,mask.hash}s,\n owner: %{private,mask.hash}s.", (uint8_t *)v14, 0x2Au);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v21 = v67;
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 472);

    sub_1000126B0(v12, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
    v21 = v38;
  }
  result = sub_100004048(v21, &qword_1010EE170);
  v40 = *(_QWORD *)(v0 + 896);
  v41 = *(_QWORD *)(v0 + 888);
  if (v40)
  {
    v42 = (v40 - 1) & v40;
    v43 = __clz(__rbit64(v40)) | (v41 << 6);
    v44 = *(_QWORD *)(v0 + 872);
    goto LABEL_11;
  }
  v61 = v41 + 1;
  if (__OFADD__(v41, 1))
  {
    __break(1u);
  }
  else
  {
    v62 = (unint64_t)((1 << *(_BYTE *)(v0 + 74)) + 63) >> 6;
    v44 = *(_QWORD *)(v0 + 872);
    if (v61 >= v62)
      goto LABEL_29;
    v63 = v44 + 64;
    v64 = *(_QWORD *)(v44 + 64 + 8 * v61);
    ++v41;
    if (v64)
    {
LABEL_16:
      v42 = (v64 - 1) & v64;
      v43 = __clz(__rbit64(v64)) + (v41 << 6);
LABEL_11:
      *(_QWORD *)(v0 + 896) = v42;
      *(_QWORD *)(v0 + 888) = v41;
      v45 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 816);
      v46 = *(_QWORD *)(v0 + 496);
      v47 = *(_QWORD *)(v0 + 488);
      v48 = *(_QWORD *)(v0 + 424);
      v49 = *(_QWORD *)(v0 + 432);
      v50 = *(_QWORD *)(*(_QWORD *)(v0 + 504) + 72) * v43;
      v45(v47, *(_QWORD *)(v44 + 48) + v50, v46);
      v45(v47 + *(int *)(v48 + 48), *(_QWORD *)(v44 + 56) + v50, v46);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v47, 0, 1, v48);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) != 1)
      {
        v51 = *(void (**)(uint64_t))(v0 + 832);
        v52 = *(_QWORD *)(v0 + 752);
        v53 = *(_QWORD *)(v0 + 488);
        v54 = *(_QWORD *)(v0 + 496);
        v55 = *(_QWORD *)(v0 + 472);
        v56 = *(int *)(*(_QWORD *)(v0 + 424) + 48);
        *(_DWORD *)(v0 + 1132) = v56;
        v57 = v55 + v56;
        v58 = v53 + v56;
        v51(v55);
        ((void (*)(uint64_t, uint64_t, uint64_t))v51)(v57, v58, v54);
        v59 = sub_1000D271C;
        v60 = v52;
        return swift_task_switch(v59, v60, 0);
      }
LABEL_30:
      swift_release();
      v66 = *(_QWORD *)(v0 + 648);
      *(_QWORD *)(v0 + 944) = qword_100E26BF8[*(char *)(*(_QWORD *)(v0 + 736) + *(int *)(v66 + 40))];
      v60 = *(_QWORD *)(v0 + 752);
      *(_DWORD *)(v0 + 1144) = *(_DWORD *)(v66 + 32);
      v59 = sub_1000D3858;
      return swift_task_switch(v59, v60, 0);
    }
    v41 = v61 + 1;
    if (v61 + 1 >= v62)
      goto LABEL_29;
    v64 = *(_QWORD *)(v63 + 8 * v41);
    if (v64)
      goto LABEL_16;
    v41 = v61 + 2;
    if (v61 + 2 >= v62)
      goto LABEL_29;
    v64 = *(_QWORD *)(v63 + 8 * v41);
    if (v64)
      goto LABEL_16;
    v65 = v61 + 3;
    if (v65 >= v62)
    {
LABEL_29:
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 432) + 56))(*(_QWORD *)(v0 + 488), 1, 1, *(_QWORD *)(v0 + 424));
      goto LABEL_30;
    }
    v64 = *(_QWORD *)(v63 + 8 * v65);
    if (v64)
    {
      v41 = v65;
      goto LABEL_16;
    }
    while (1)
    {
      v41 = v65 + 1;
      if (__OFADD__(v65, 1))
        break;
      if (v41 >= v62)
        goto LABEL_29;
      v64 = *(_QWORD *)(v63 + 8 * v41);
      ++v65;
      if (v64)
        goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D2E50()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  v2 = *(unsigned __int8 *)(v0 + 1124);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 496);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 512) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 816))(v4, *(_QWORD *)(v0 + 736) + *(int *)(v0 + 1140), v5);
  v9 = swift_allocObject(&unk_101055378, v7, v8);
  *(_QWORD *)(v0 + 928) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 936) = v11;
  *v11 = v0;
  v11[1] = sub_1000D2F48;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 352), sub_100067E08, v9, *(_QWORD *)(v0 + 336));
}

uint64_t sub_1000D2F48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 936));
  swift_release();
  return swift_task_switch(sub_1000D2FAC, v1, 0);
}

uint64_t sub_1000D2FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(uint64_t, uint64_t);
  NSString v21;
  void *v22;
  id v23;
  NSString v24;
  id v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, unint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void (*v75)(void);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)();
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  uint64_t v87;
  unint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;

  v1 = *(_QWORD *)(v0 + 352);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0 + 920))(v1, 1, *(_QWORD *)(v0 + 368)) == 1)
  {
    sub_100004048(v1, &qword_1010EC868);
    goto LABEL_11;
  }
  v2 = *(int *)(v0 + 1128);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 816);
  v4 = *(_QWORD *)(v0 + 736);
  v5 = *(_QWORD *)(v0 + 496);
  v7 = *(_QWORD *)(v0 + 464);
  v6 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 424);
  v9 = v6 + *(int *)(v0 + 1132);
  sub_1000126EC(v1, *(_QWORD *)(v0 + 400), type metadata accessor for MemberPeerTrust);
  v10 = *(_QWORD *)(v4 + v2);
  v11 = v7 + *(int *)(v8 + 48);
  v3(v7, v6, v5);
  v3(v11, v9, v5);
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain(v10);
  v12 = sub_100003FB0(v11);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    v39 = *(_QWORD *)(v0 + 496);
    v40 = *(_QWORD *)(v0 + 464);
    v41 = *(_QWORD *)(v0 + 400);
    v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 504) + 8);
    v42(v11, v39);
    v42(v40, v39);
    v43 = v41;
LABEL_10:
    sub_1000126B0(v43, type metadata accessor for MemberPeerTrust);
    goto LABEL_11;
  }
  v14 = *(_QWORD *)(v0 + 496);
  v15 = *(_QWORD *)(v0 + 504);
  v16 = *(_QWORD *)(v0 + 464);
  v17 = *(_QWORD *)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 368);
  v19 = *(_BYTE *)(*(_QWORD *)(v10 + 56) + v12);
  swift_bridgeObjectRelease();
  v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v20(v11, v14);
  v20(v16, v14);
  swift_bridgeObjectRetain(*(_QWORD *)(v17 + *(int *)(v18 + 32) + 8));
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v22 = (void *)objc_opt_self(SPHandle);
  v23 = objc_msgSend(v22, "handleWithString:", v21);

  if (!v23)
  {
    v43 = *(_QWORD *)(v0 + 400);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 408) + *(int *)(v0 + 1136) + 8));
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v22, "handleWithString:", v24);

  if (v25)
  {
    v100 = v25;
    v26 = *(void (**)(void))(v0 + 816);
    v27 = *(_QWORD *)(v0 + 736);
    v28 = *(_QWORD *)(v0 + 712);
    v92 = *(_QWORD *)(v0 + 592);
    v93 = *(_QWORD *)(v0 + 648);
    v94 = *(_QWORD *)(v0 + 584);
    v101 = v19;
    v29 = *(_QWORD *)(v0 + 496);
    v30 = *(_QWORD *)(v0 + 472);
    v98 = v23;
    v31 = *(_QWORD *)(v0 + 456);
    v32 = *(_QWORD *)(v0 + 424);
    v102 = *(_QWORD *)(v0 + 416);
    v103 = *(_QWORD *)(v0 + 408);
    v105 = *(_QWORD *)(v0 + 448);
    v33 = v30 + *(int *)(v0 + 1132);
    v91 = v27 + *(int *)(v0 + 1120);
    v95 = *(_QWORD *)(v0 + 400);
    v96 = *(_QWORD *)(v0 + 392);
    sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    v97 = v31;
    v99 = v31 + *(int *)(v32 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v31, v30, v29);
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v99, v33, v29);
    sub_10005972C(v27, v28, type metadata accessor for MemberSharingCircle);
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v92, v91, v29);
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v94, v27 + *(int *)(v93 + 28), v29);
    v34 = v105 + *(int *)(v32 + 48);
    v26();
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v34, v33, v29);
    sub_10005972C(v95, v96, type metadata accessor for MemberPeerTrust);
    v35 = v98;
    v36 = v100;
    v37 = sub_1000D82C4(v97, v28, v92, v94, v34, (uint64_t)v35, (uint64_t)v36, v101, v96);

    v20(v105, v29);
    v20(v99, v29);
    sub_100A0B060((Swift::Int *)&v107, v37);

    sub_1000126B0(v95, type metadata accessor for MemberPeerTrust);
    sub_1000126B0(v102, type metadata accessor for MemberPeerTrust);
    sub_100004048(v30, &qword_1010EE170);
    v38 = v103;
    goto LABEL_15;
  }
  sub_1000126B0(*(_QWORD *)(v0 + 400), type metadata accessor for MemberPeerTrust);

LABEL_11:
  v44 = *(_QWORD *)(v0 + 736);
  v45 = *(_QWORD *)(v0 + 696);
  sub_10005972C(v44, *(_QWORD *)(v0 + 704), type metadata accessor for MemberSharingCircle);
  v46 = sub_10005972C(v44, v45, type metadata accessor for MemberSharingCircle);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.error.getter(v47);
  v49 = os_log_type_enabled(v47, v48);
  v50 = *(_QWORD *)(v0 + 704);
  v51 = *(_QWORD *)(v0 + 696);
  if (v49)
  {
    v52 = *(_QWORD *)(v0 + 496);
    v106 = *(_QWORD *)(v0 + 472);
    v104 = *(_QWORD *)(v0 + 416);
    v53 = swift_slowAlloc(42, -1);
    v54 = (void *)swift_slowAlloc(64, -1);
    v107 = v54;
    *(_DWORD *)v53 = 141558787;
    *(_QWORD *)(v53 + 4) = 1752392040;
    *(_WORD *)(v53 + 12) = 2081;
    v55 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v52, v55);
    *(_QWORD *)(v53 + 14) = sub_100016940(v56, v57, (uint64_t *)&v107);
    swift_bridgeObjectRelease();
    sub_1000126B0(v50, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v53 + 22) = 2160;
    *(_QWORD *)(v53 + 24) = 1752392040;
    *(_WORD *)(v53 + 32) = 2081;
    v58 = dispatch thunk of CustomStringConvertible.description.getter(v52, v55);
    *(_QWORD *)(v53 + 34) = sub_100016940(v58, v59, (uint64_t *)&v107);
    swift_bridgeObjectRelease();
    sub_1000126B0(v51, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Missing member peer trust for owner in member circle: %{private,mask.hash}s,\n owner: %{private,mask.hash}s.", (uint8_t *)v53, 0x2Au);
    swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);

    sub_1000126B0(v104, type metadata accessor for MemberPeerTrust);
    v60 = v106;
  }
  else
  {
    v61 = *(_QWORD *)(v0 + 472);
    v62 = *(_QWORD *)(v0 + 416);

    sub_1000126B0(v51, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v50, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v62, type metadata accessor for MemberPeerTrust);
    v60 = v61;
  }
  sub_100004048(v60, &qword_1010EE170);
  v38 = *(_QWORD *)(v0 + 408);
LABEL_15:
  result = sub_1000126B0(v38, type metadata accessor for MemberPeerTrust);
  v64 = *(_QWORD *)(v0 + 896);
  v65 = *(_QWORD *)(v0 + 888);
  if (v64)
  {
    v66 = (v64 - 1) & v64;
    v67 = __clz(__rbit64(v64)) | (v65 << 6);
    v68 = *(_QWORD *)(v0 + 872);
    goto LABEL_17;
  }
  v85 = v65 + 1;
  if (__OFADD__(v65, 1))
  {
    __break(1u);
  }
  else
  {
    v86 = (unint64_t)((1 << *(_BYTE *)(v0 + 74)) + 63) >> 6;
    v68 = *(_QWORD *)(v0 + 872);
    if (v85 >= v86)
      goto LABEL_35;
    v87 = v68 + 64;
    v88 = *(_QWORD *)(v68 + 64 + 8 * v85);
    ++v65;
    if (v88)
    {
LABEL_22:
      v66 = (v88 - 1) & v88;
      v67 = __clz(__rbit64(v88)) + (v65 << 6);
LABEL_17:
      *(_QWORD *)(v0 + 896) = v66;
      *(_QWORD *)(v0 + 888) = v65;
      v69 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 816);
      v70 = *(_QWORD *)(v0 + 496);
      v71 = *(_QWORD *)(v0 + 488);
      v72 = *(_QWORD *)(v0 + 424);
      v73 = *(_QWORD *)(v0 + 432);
      v74 = *(_QWORD *)(*(_QWORD *)(v0 + 504) + 72) * v67;
      v69(v71, *(_QWORD *)(v68 + 48) + v74, v70);
      v69(v71 + *(int *)(v72 + 48), *(_QWORD *)(v68 + 56) + v74, v70);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v71, 0, 1, v72);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72) != 1)
      {
        v75 = *(void (**)(void))(v0 + 832);
        v76 = *(_QWORD *)(v0 + 752);
        v77 = *(_QWORD *)(v0 + 488);
        v78 = *(_QWORD *)(v0 + 496);
        v79 = *(_QWORD *)(v0 + 472);
        v80 = *(int *)(*(_QWORD *)(v0 + 424) + 48);
        *(_DWORD *)(v0 + 1132) = v80;
        v81 = v79 + v80;
        v82 = v77 + v80;
        v75();
        ((void (*)(uint64_t, uint64_t, uint64_t))v75)(v81, v82, v78);
        v83 = sub_1000D271C;
        v84 = v76;
        return swift_task_switch(v83, v84, 0);
      }
LABEL_36:
      swift_release();
      v90 = *(_QWORD *)(v0 + 648);
      *(_QWORD *)(v0 + 944) = qword_100E26BF8[*(char *)(*(_QWORD *)(v0 + 736) + *(int *)(v90 + 40))];
      v84 = *(_QWORD *)(v0 + 752);
      *(_DWORD *)(v0 + 1144) = *(_DWORD *)(v90 + 32);
      v83 = sub_1000D3858;
      return swift_task_switch(v83, v84, 0);
    }
    v65 = v85 + 1;
    if (v85 + 1 >= v86)
      goto LABEL_35;
    v88 = *(_QWORD *)(v87 + 8 * v65);
    if (v88)
      goto LABEL_22;
    v65 = v85 + 2;
    if (v85 + 2 >= v86)
      goto LABEL_35;
    v88 = *(_QWORD *)(v87 + 8 * v65);
    if (v88)
      goto LABEL_22;
    v89 = v85 + 3;
    if (v89 >= v86)
    {
LABEL_35:
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 432) + 56))(*(_QWORD *)(v0 + 488), 1, 1, *(_QWORD *)(v0 + 424));
      goto LABEL_36;
    }
    v88 = *(_QWORD *)(v87 + 8 * v89);
    if (v88)
    {
      v65 = v89;
      goto LABEL_22;
    }
    while (1)
    {
      v65 = v89 + 1;
      if (__OFADD__(v89, 1))
        break;
      if (v65 >= v86)
        goto LABEL_35;
      v88 = *(_QWORD *)(v87 + 8 * v65);
      ++v89;
      if (v88)
        goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D3858()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  v2 = *(unsigned __int8 *)(v0 + 1124);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 496);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 512) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 816))(v4, *(_QWORD *)(v0 + 736) + *(int *)(v0 + 1144), v5);
  v9 = swift_allocObject(&unk_101055300, v7, v8);
  *(_QWORD *)(v0 + 952) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 960) = v11;
  *v11 = v0;
  v11[1] = sub_1000D394C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 344), sub_100067E08, v9, *(_QWORD *)(v0 + 336));
}

uint64_t sub_1000D394C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 960));
  swift_release();
  return swift_task_switch(sub_1000D39B0, v1, 0);
}

void sub_1000D39B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  void *v5;
  id v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t (*v37)();
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Class v46;
  Class v47;
  Class v48;
  Class v49;
  Class v50;
  void (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t, uint64_t);
  Class isa;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71[2];

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 344);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 376) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, &qword_1010EC868);
LABEL_7:
    v18 = *(_QWORD *)(v0 + 736);
    v19 = *(_QWORD *)(v0 + 664);
    sub_10005972C(v18, *(_QWORD *)(v0 + 672), type metadata accessor for MemberSharingCircle);
    v20 = sub_10005972C(v18, v19, type metadata accessor for MemberSharingCircle);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 736);
    v25 = *(_QWORD *)(v0 + 672);
    v26 = *(_QWORD *)(v0 + 664);
    if (v23)
    {
      v27 = *(_QWORD *)(v0 + 496);
      v28 = swift_slowAlloc(42, -1);
      v67 = (void *)swift_slowAlloc(64, -1);
      v71[0] = v67;
      *(_DWORD *)v28 = 141558787;
      *(_QWORD *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v28 + 4, v28 + 12);
      *(_WORD *)(v28 + 12) = 2081;
      v29 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v27, v29);
      *(_QWORD *)(v0 + 144) = sub_100016940(v30, v31, (uint64_t *)v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v25, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v28 + 22) = 2160;
      *(_QWORD *)(v0 + 152) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v28 + 24, v28 + 32);
      *(_WORD *)(v28 + 32) = 2081;
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v27, v29);
      *(_QWORD *)(v0 + 160) = sub_100016940(v32, v33, (uint64_t *)v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v28 + 34, v28 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v26, type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Missing ownerTrust for member circle: %{private,mask.hash}s,\n owner: %{private,mask.hash}s.", (uint8_t *)v28, 0x2Au);
      swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      sub_1000126B0(v26, type metadata accessor for MemberSharingCircle);
      sub_1000126B0(v25, type metadata accessor for MemberSharingCircle);
    }
    sub_1000126B0(v24, type metadata accessor for MemberSharingCircle);
    v34 = *(_QWORD *)(v0 + 880);
    goto LABEL_11;
  }
  v3 = *(_QWORD *)(v0 + 384);
  sub_1000126EC(v2, v3, type metadata accessor for MemberPeerTrust);
  swift_bridgeObjectRetain(*(_QWORD *)(v3 + *(int *)(v1 + 32) + 8));
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v5 = (void *)objc_opt_self(SPHandle);
  v6 = objc_msgSend(v5, "handleWithString:", v4);

  if (!v6)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 384), type metadata accessor for MemberPeerTrust);
    goto LABEL_7;
  }
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 816);
  v8 = *(_QWORD *)(v0 + 736);
  v9 = *(_QWORD *)(v0 + 568);
  v10 = *(_QWORD *)(v0 + 560);
  v11 = *(_QWORD *)(v0 + 496);
  v69 = *(_QWORD *)(v0 + 880);
  v12 = v8 + *(int *)(v0 + 1120);
  v13 = v8 + *(int *)(*(_QWORD *)(v0 + 648) + 20);
  v7(*(_QWORD *)(v0 + 576), v13, v11);
  v7(v9, v12, v11);
  v14 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v10, v13, v11);
  UUID.init()(v14);
  v66 = v6;
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v5, "handleWithEmailAddress:", v15);

  v17 = objc_autoreleasePoolPush();
  sub_10084EE10(v8);
  if (v69)
  {
    objc_autoreleasePoolPop(v17);
    return;
  }
  v57 = *(_QWORD *)(v0 + 944);
  v70 = *(_QWORD *)(v0 + 736);
  v60 = *(_QWORD *)(v0 + 560);
  v61 = *(_QWORD *)(v0 + 568);
  v59 = *(_QWORD *)(v0 + 552);
  v64 = *(_QWORD *)(v0 + 576);
  v65 = *(_QWORD *)(v0 + 504);
  v56 = *(_QWORD *)(v0 + 496);
  v68 = *(_QWORD *)(v0 + 384);
  v44 = *(_QWORD *)(v0 + 320);
  v55 = *(_QWORD *)(v0 + 328);
  v62 = *(_QWORD *)(v0 + 304);
  v63 = *(_QWORD *)(v0 + 296);
  objc_autoreleasePoolPop(v17);
  static Date.distantFuture.getter(v45);
  v54 = objc_allocWithZone((Class)SPBeaconShare);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v46 = UUID._bridgeToObjectiveC()().super.isa;
  v47 = UUID._bridgeToObjectiveC()().super.isa;
  v48 = UUID._bridgeToObjectiveC()().super.isa;
  v49 = Date._bridgeToObjectiveC()().super.isa;
  v50 = Date._bridgeToObjectiveC()().super.isa;
  v58 = objc_msgSend(v54, "initWithIdentifier:beaconIdentifier:sharingCircleIdentifier:peerTrustIdentifier:owner:sharee:state:creationDate:expirationDate:", isa, v46, v47, v48, v66, v16, v57, v49, v50);

  v51 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
  v51(v44, v63);
  v51(v55, v63);
  v52 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
  v52(v59, v56);
  v52(v60, v56);
  v52(v61, v56);
  v52(v64, v56);

  sub_100A0B060((Swift::Int *)v71, v58);
  sub_1000126B0(v68, type metadata accessor for MemberPeerTrust);
  sub_1000126B0(v70, type metadata accessor for MemberSharingCircle);
  v34 = 0;
LABEL_11:
  v35 = *(_QWORD *)(v0 + 800) + 1;
  if (v35 == *(_QWORD *)(v0 + 784))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 968) = v34;
    v36 = *(_QWORD *)(v0 + 752);
    if ((*(_BYTE *)(v0 + 73) & 1) != 0)
      v37 = sub_1000D40B8;
    else
      v37 = sub_100004C70;
    goto LABEL_17;
  }
  *(_QWORD *)(v0 + 800) = v35;
  *(_QWORD *)(v0 + 792) = v34;
  v38 = *(_QWORD *)(v0 + 776);
  if (v35 < *(_QWORD *)(v38 + 16))
  {
    v39 = *(_QWORD *)(v0 + 752);
    v40 = *(_QWORD *)(v0 + 736);
    v41 = *(_QWORD *)(v0 + 648);
    v42 = v38 + ((*(unsigned __int8 *)(v0 + 76) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 76));
    v43 = *(_QWORD *)(*(_QWORD *)(v0 + 656) + 72);
    *(_QWORD *)(v0 + 808) = v43;
    sub_10005972C(v42 + v43 * v35, v40, type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 1120) = *(_DWORD *)(v41 + 24);
    v37 = sub_1000D1B64;
    v36 = v39;
LABEL_17:
    swift_task_switch(v37, v36, 0);
    return;
  }
  __break(1u);
}

uint64_t sub_1000D40B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 976) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_1000D4134;
  return unsafeBlocking<A>(_:)(v0 + 176, sub_100068004, *(_QWORD *)(v0 + 752), v3);
}

uint64_t sub_1000D4134()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 752);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 976));
  swift_release();
  return swift_task_switch(sub_1000D4194, v1, 0);
}

uint64_t sub_1000D4194()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[23];
  v0[123] = v0[22];
  return swift_task_switch(sub_1000D41AC, v1, 0);
}

void sub_1000D41AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, unint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Class v51;
  Class v52;
  Class v53;
  uint64_t v54;
  Class v55;
  Class v56;
  void (*v57)(uint64_t, uint64_t);
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(void);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Class isa;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v134[3];

  v1 = *(_QWORD *)(v0 + 984);
  v2 = *(_QWORD *)(v0 + 968);
  *(_QWORD *)(v0 + 1032) = v1;
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 1040) = v3;
  if (!v3)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    v59 = *(_QWORD *)(v0 + 736);
    v60 = *(_QWORD *)(v0 + 728);
    v61 = *(_QWORD *)(v0 + 720);
    v62 = *(_QWORD *)(v0 + 712);
    v63 = *(_QWORD *)(v0 + 704);
    v64 = *(_QWORD *)(v0 + 696);
    v65 = *(_QWORD *)(v0 + 688);
    v76 = *(_QWORD *)(v0 + 680);
    v77 = *(_QWORD *)(v0 + 672);
    v78 = *(_QWORD *)(v0 + 664);
    v79 = *(_QWORD *)(v0 + 640);
    v80 = *(_QWORD *)(v0 + 632);
    v81 = *(_QWORD *)(v0 + 608);
    v82 = *(_QWORD *)(v0 + 592);
    v83 = *(_QWORD *)(v0 + 584);
    v84 = *(_QWORD *)(v0 + 576);
    v85 = *(_QWORD *)(v0 + 568);
    v86 = *(_QWORD *)(v0 + 560);
    v87 = *(_QWORD *)(v0 + 552);
    v88 = *(_QWORD *)(v0 + 544);
    v89 = *(_QWORD *)(v0 + 536);
    v90 = *(_QWORD *)(v0 + 528);
    v91 = *(_QWORD *)(v0 + 520);
    v92 = *(_QWORD *)(v0 + 488);
    v93 = *(_QWORD *)(v0 + 480);
    v94 = *(_QWORD *)(v0 + 472);
    v95 = *(_QWORD *)(v0 + 464);
    v96 = *(_QWORD *)(v0 + 456);
    v97 = *(_QWORD *)(v0 + 448);
    v98 = *(_QWORD *)(v0 + 440);
    v99 = *(_QWORD *)(v0 + 416);
    v100 = *(_QWORD *)(v0 + 408);
    v101 = *(_QWORD *)(v0 + 400);
    v102 = *(_QWORD *)(v0 + 392);
    v104 = *(_QWORD *)(v0 + 384);
    v106 = *(_QWORD *)(v0 + 360);
    v108 = *(_QWORD *)(v0 + 352);
    v110 = *(_QWORD *)(v0 + 344);
    v113 = *(_QWORD *)(v0 + 328);
    v115 = *(_QWORD *)(v0 + 320);
    v117 = *(_QWORD *)(v0 + 312);
    v119 = *(_QWORD *)(v0 + 288);
    v121 = *(_QWORD *)(v0 + 280);
    v123 = *(_QWORD *)(v0 + 272);
    v125 = *(_QWORD *)(v0 + 264);
    v127 = *(_QWORD *)(v0 + 240);
    v129 = *(_QWORD *)(v0 + 232);
    v131 = *(_QWORD *)(v0 + 224);
    v133 = *(_QWORD *)(v0 + 200);
    sub_100004F9C(*(_QWORD *)(v0 + 168));
    swift_bridgeObjectRelease();
    v66 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v125);
    swift_task_dealloc(v127);
    swift_task_dealloc(v129);
    swift_task_dealloc(v131);
    swift_task_dealloc(v133);
    (*(void (**)(uint64_t))(v0 + 8))(v66);
    return;
  }
  *(_DWORD *)(v0 + 1148) = *(_DWORD *)(*(_QWORD *)(v0 + 256) + 80);
  *(_QWORD *)(v0 + 1048) = 0;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v0 + 288);
      v6 = *(_QWORD *)(v0 + 248);
      sub_10005972C(v1+ ((*(unsigned __int8 *)(v0 + 1148) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1148))+ *(_QWORD *)(*(_QWORD *)(v0 + 256) + 72) * v4, v5, type metadata accessor for OwnerSharingCircle);
      v7 = swift_bridgeObjectRetain(*(_QWORD *)(v5 + *(int *)(v6 + 32)));
      v8 = sub_100508A54(v7);
      swift_bridgeObjectRelease();
      v9 = swift_task_alloc(32);
      *(_QWORD *)(v9 + 16) = v5;
      v10 = sub_100307244((uint64_t)&_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_1000D931C, v9, v8);
      *(_QWORD *)(v0 + 1056) = v10;
      *(_QWORD *)(v0 + 1064) = v2;
      swift_release();
      swift_task_dealloc(v9);
      v11 = *(_BYTE *)(v10 + 32);
      *(_BYTE *)(v0 + 75) = v11;
      v12 = -1 << v11;
      if (-v12 < 64)
        v13 = ~(-1 << -(char)v12);
      else
        v13 = -1;
      v14 = v13 & *(_QWORD *)(v10 + 64);
      if (v14)
      {
        v15 = 0;
        v16 = __clz(__rbit64(v14));
        v17 = (v14 - 1) & v14;
        v18 = *(_QWORD **)(v0 + 1056);
      }
      else
      {
        v27 = 63 - v12;
        v18 = *(_QWORD **)(v0 + 1056);
        if (v27 <= 0x7F)
          goto LABEL_30;
        v28 = v18[9];
        if (v28)
        {
          v15 = 1;
        }
        else
        {
          if (v27 < 0xC0)
            goto LABEL_30;
          v28 = v18[10];
          if (v28)
          {
            v15 = 2;
          }
          else
          {
            if (v27 < 0x100)
              goto LABEL_30;
            v28 = v18[11];
            if (v28)
            {
              v15 = 3;
            }
            else
            {
              if (v27 < 0x140)
                goto LABEL_30;
              v28 = v18[12];
              if (!v28)
              {
                v29 = 0;
                v30 = v27 >> 6;
                if (v30 <= 5)
                  v30 = 5;
                v31 = v30 - 5;
                while (v31 != v29)
                {
                  v28 = v18[v29++ + 13];
                  if (v28)
                  {
                    v15 = v29 + 4;
                    goto LABEL_14;
                  }
                }
LABEL_30:
                v32 = *(_QWORD *)(v0 + 504);
                (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 432) + 56))(*(_QWORD *)(v0 + 480), 1, 1, *(_QWORD *)(v0 + 424));
                swift_release();
                v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16);
                goto LABEL_31;
              }
              v15 = 4;
            }
          }
        }
LABEL_14:
        v17 = (v28 - 1) & v28;
        v16 = __clz(__rbit64(v28)) + (v15 << 6);
      }
      *(_QWORD *)(v0 + 1080) = v17;
      *(_QWORD *)(v0 + 1072) = v15;
      v20 = *(_QWORD *)(v0 + 496);
      v19 = *(_QWORD *)(v0 + 504);
      v21 = *(_QWORD *)(v0 + 480);
      v22 = *(_QWORD *)(v0 + 424);
      v23 = *(_QWORD *)(v0 + 432);
      v24 = *(_QWORD *)(v19 + 72) * v16;
      v25 = v18[6] + v24;
      v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
      *(_QWORD *)(v0 + 1088) = v26;
      v26(v21, v25, v20);
      v26(v21 + *(int *)(v22 + 48), v18[7] + v24, v20);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
      {
        v67 = *(_QWORD *)(v0 + 752);
        v69 = *(_QWORD *)(v0 + 496);
        v68 = *(_QWORD *)(v0 + 504);
        v70 = *(_QWORD *)(v0 + 480);
        v71 = *(_QWORD *)(v0 + 440);
        v72 = *(int *)(*(_QWORD *)(v0 + 424) + 48);
        *(_DWORD *)(v0 + 1152) = v72;
        v73 = v71 + v72;
        v74 = v70 + v72;
        v75 = *(void (**)(void))(v68 + 32);
        *(_QWORD *)(v0 + 1096) = v75;
        v75();
        ((void (*)(uint64_t, uint64_t, uint64_t))v75)(v73, v74, v69);
        swift_task_switch(sub_1000D4AA0, v67, 0);
        return;
      }
      swift_release();
LABEL_31:
      v33 = *(_QWORD *)(v0 + 536);
      v34 = *(_QWORD *)(v0 + 528);
      v35 = *(_QWORD *)(v0 + 496);
      v36 = *(_QWORD *)(v0 + 288);
      v37 = *(_QWORD *)(v0 + 248);
      v38 = v36 + *(int *)(v37 + 20);
      v26(*(_QWORD *)(v0 + 544), v38, v35);
      v26(v33, v36 + *(int *)(v37 + 24), v35);
      v39 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v26)(v34, v38, v35);
      UUID.init()(v39);
      if (qword_1010E9A00 != -1)
        swift_once(&qword_1010E9A00, sub_1001EB16C);
      v40 = *(_QWORD *)(v0 + 1064);
      v41 = *(_QWORD *)(v0 + 288);
      v42 = qword_1011B6A68;
      v43 = (void *)qword_1011B6A70;
      v44 = byte_1011B6A60;
      v45 = sub_100ACD7B4(byte_1011B6A60, qword_1011B6A68, (void *)qword_1011B6A70);
      v46 = sub_100ACD7B4(v44, v42, v43);
      v47 = objc_autoreleasePoolPush();
      sub_10084EE10(v41);
      if (v40)
      {
        objc_autoreleasePoolPop(v47);
        return;
      }
      v114 = *(_QWORD *)(v0 + 520);
      v116 = *(_QWORD *)(v0 + 528);
      v124 = *(_QWORD *)(v0 + 544);
      v126 = *(_QWORD *)(v0 + 504);
      v107 = (void *)v46;
      v48 = *(_QWORD *)(v0 + 496);
      v49 = *(_QWORD *)(v0 + 320);
      v105 = *(_QWORD *)(v0 + 312);
      v120 = *(_QWORD *)(v0 + 536);
      v122 = *(_QWORD *)(v0 + 304);
      v130 = *(_QWORD *)(v0 + 1048) + 1;
      v132 = *(_QWORD *)(v0 + 1040);
      v118 = *(_QWORD *)(v0 + 296);
      v128 = *(_QWORD *)(v0 + 288);
      objc_autoreleasePoolPop(v47);
      static Date.distantFuture.getter(v50);
      v111 = objc_allocWithZone((Class)SPBeaconShare);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v51 = UUID._bridgeToObjectiveC()().super.isa;
      v52 = UUID._bridgeToObjectiveC()().super.isa;
      v53 = UUID._bridgeToObjectiveC()().super.isa;
      v54 = v45;
      v109 = (void *)v45;
      v55 = Date._bridgeToObjectiveC()().super.isa;
      v56 = Date._bridgeToObjectiveC()().super.isa;
      v112 = objc_msgSend(v111, "initWithIdentifier:beaconIdentifier:sharingCircleIdentifier:peerTrustIdentifier:owner:sharee:state:creationDate:expirationDate:", isa, v51, v52, v53, v54, v107, 5, v55, v56);

      v57 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
      v57(v49, v118);
      v57(v105, v118);
      v58 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
      v58(v114, v48);
      v58(v116, v48);
      v58(v120, v48);
      v58(v124, v48);

      sub_100A0B060((Swift::Int *)v134, v112);
      sub_1000126B0(v128, type metadata accessor for OwnerSharingCircle);
      if (v130 == v132)
        goto LABEL_38;
      v2 = 0;
      v4 = *(_QWORD *)(v0 + 1048) + 1;
      *(_QWORD *)(v0 + 1048) = v4;
      v1 = *(_QWORD *)(v0 + 1032);
    }
    while (v4 < *(_QWORD *)(v1 + 16));
  }
  __break(1u);
}

uint64_t sub_1000D4AA0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1096);
  v2 = *(_QWORD *)(v0 + 752);
  v3 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 496);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1088))(v3, *(_QWORD *)(v0 + 440) + *(int *)(v0 + 1152), v6);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_101055328, v8 + v4, v7 | 7);
  *(_QWORD *)(v0 + 1104) = v9;
  *(_QWORD *)(v9 + 16) = v2;
  v1(v9 + v8, v3, v6);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1112) = v11;
  *v11 = v0;
  v11[1] = sub_1000D4B84;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 200), sub_10007CC14, v9, *(_QWORD *)(v0 + 192));
}

uint64_t sub_1000D4B84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1112));
  swift_release();
  return swift_task_switch(sub_1000D4BE8, v1, 0);
}

void sub_1000D4BE8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void (*v76)(uint64_t, unint64_t, uint64_t);
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  Class isa;
  Class v102;
  Class v103;
  Class v104;
  uint64_t v105;
  Class v106;
  Class v107;
  void (*v108)(uint64_t, uint64_t);
  void (*v109)(uint64_t, uint64_t);
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(void);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  id v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  id v200[3];

  v1 = *(int **)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)(v0 + 216) + 48))(v2, 1, v1) != 1)
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 1088);
    v17 = *(_QWORD *)(v0 + 496);
    v18 = *(char **)(v0 + 232);
    v19 = *(_QWORD *)(v0 + 240);
    sub_1000126EC(v2, v19, type metadata accessor for OwnerPeerTrust);
    v20 = (uint64_t *)(v19 + v1[8]);
    v21 = *v20;
    v22 = v20[1];
    v23 = sub_1007BE85C(*v20, v22);
    v195 = v24;
    v16(&v18[v1[5]], v19 + v1[5], v17);
    v25 = *(_BYTE *)(v19 + v1[6]);
    sub_10005972C(v19 + v1[7], (uint64_t)&v18[v1[7]], type metadata accessor for PeerCommunicationIdentifier);
    v26 = (uint64_t *)(v19 + v1[9]);
    v28 = *v26;
    v27 = v26[1];
    LOBYTE(v26) = *(_BYTE *)(v19 + v1[10]);
    *(_OWORD *)v18 = xmmword_100E22FC0;
    v18[v1[6]] = v25;
    v29 = (uint64_t *)&v18[v1[8]];
    *v29 = v23;
    v29[1] = v195;
    v30 = (uint64_t *)&v18[v1[9]];
    *v30 = v28;
    v30[1] = v27;
    v18[v1[10]] = (char)v26;
    if (v23 == v21 && v195 == v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v195, v21, v22, 0) & 1) != 0)
    {
      sub_10001BBBC(v28, v27);
    }
    else
    {
      sub_10001BBBC(v28, v27);
      swift_bridgeObjectRetain(v195);
      sub_100A0AE78(v0 + 80, v23, v195, 0);
      swift_bridgeObjectRelease();
    }
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
    v36 = *(_QWORD *)(v0 + 496);
    v37 = *(_QWORD *)(v0 + 456);
    v38 = *(_QWORD *)(v0 + 440);
    v39 = *(_QWORD *)(v0 + 424);
    v41 = *(_QWORD *)(v0 + 280);
    v40 = *(_QWORD *)(v0 + 288);
    v42 = v38 + *(int *)(v0 + 1152);
    v43 = *(_QWORD *)(v0 + 224);
    v192 = *(_QWORD *)(v0 + 232);
    v196 = *(_QWORD *)(v0 + 504);
    sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    v44 = v37 + *(int *)(v39 + 48);
    v35(v37, v38, v36);
    v35(v44, v42, v36);
    sub_10005972C(v40, v41, type metadata accessor for OwnerSharingCircle);
    sub_10005972C(v192, v43, type metadata accessor for OwnerPeerTrust);
    v45 = sub_1000D5D44(v37, v41, v43);
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v44, v36);
    if (v45)
    {
      v9 = *(_QWORD *)(v0 + 440);
      v47 = *(_QWORD *)(v0 + 232);
      v46 = *(_QWORD *)(v0 + 240);
      sub_100A0B060((Swift::Int *)v200, v45);

      sub_1000126B0(v47, type metadata accessor for OwnerPeerTrust);
      sub_1000126B0(v46, type metadata accessor for OwnerPeerTrust);
      goto LABEL_12;
    }
    v49 = sub_10005972C(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272), type metadata accessor for OwnerSharingCircle);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = *(_QWORD *)(v0 + 496);
      v197 = *(_QWORD *)(v0 + 440);
      v53 = *(_QWORD *)(v0 + 272);
      v54 = *(_QWORD *)(v0 + 240);
      v55 = *(_QWORD *)(v0 + 232);
      v56 = swift_slowAlloc(22, -1);
      v57 = (void *)swift_slowAlloc(32, -1);
      v200[0] = v57;
      *(_DWORD *)v56 = 141558275;
      *(_QWORD *)(v56 + 4) = 1752392040;
      *(_WORD *)(v56 + 12) = 2081;
      v58 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v52, v58);
      *(_QWORD *)(v56 + 14) = sub_100016940(v59, v60, (uint64_t *)v200);
      swift_bridgeObjectRelease();
      sub_1000126B0(v53, type metadata accessor for OwnerSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Cannot create client beacon share for owner circle: %{private,mask.hash}s.", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      sub_1000126B0(v55, type metadata accessor for OwnerPeerTrust);
      sub_1000126B0(v54, type metadata accessor for OwnerPeerTrust);
      v48 = v197;
      goto LABEL_17;
    }
    v31 = *(_QWORD *)(v0 + 440);
    v61 = *(_QWORD *)(v0 + 272);
    v63 = *(_QWORD *)(v0 + 232);
    v62 = *(_QWORD *)(v0 + 240);

    sub_1000126B0(v61, type metadata accessor for OwnerSharingCircle);
    sub_1000126B0(v63, type metadata accessor for OwnerPeerTrust);
    v34 = v62;
    v33 = type metadata accessor for OwnerPeerTrust;
LABEL_16:
    sub_1000126B0(v34, v33);
    v48 = v31;
    goto LABEL_17;
  }
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 264);
  sub_100004048(v2, (uint64_t *)&unk_1010EE160);
  v5 = sub_10005972C(v3, v4, type metadata accessor for OwnerSharingCircle);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (!os_log_type_enabled(v6, v7))
  {
    v31 = *(_QWORD *)(v0 + 440);
    v32 = *(_QWORD *)(v0 + 264);

    v33 = type metadata accessor for OwnerSharingCircle;
    v34 = v32;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(v0 + 496);
  v9 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 264);
  v11 = swift_slowAlloc(22, -1);
  v12 = (void *)swift_slowAlloc(32, -1);
  v200[0] = v12;
  *(_DWORD *)v11 = 141558275;
  *(_QWORD *)(v11 + 4) = 1752392040;
  *(_WORD *)(v11 + 12) = 2081;
  v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v14 = dispatch thunk of CustomStringConvertible.description.getter(v8, v13);
  *(_QWORD *)(v11 + 14) = sub_100016940(v14, v15, (uint64_t *)v200);
  swift_bridgeObjectRelease();
  sub_1000126B0(v10, type metadata accessor for OwnerSharingCircle);
  _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing ownerPeerTrust for owner circle: %{private,mask.hash}s.", (uint8_t *)v11, 0x16u);
  swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v12, -1, -1);
  swift_slowDealloc(v11, -1, -1);

LABEL_12:
  v48 = v9;
LABEL_17:
  sub_100004048(v48, &qword_1010EE170);
  v64 = *(_QWORD *)(v0 + 1080);
  v65 = *(_QWORD *)(v0 + 1072);
  v165 = v0;
  if (!v64)
    goto LABEL_21;
LABEL_18:
  v66 = (v64 - 1) & v64;
  v67 = __clz(__rbit64(v64)) | (v65 << 6);
  v68 = *(_QWORD *)(v0 + 1056);
  while (2)
  {
    *(_QWORD *)(v0 + 1080) = v66;
    *(_QWORD *)(v0 + 1072) = v65;
    v70 = *(_QWORD *)(v0 + 496);
    v69 = *(_QWORD *)(v0 + 504);
    v71 = *(_QWORD *)(v0 + 480);
    v72 = *(_QWORD *)(v0 + 424);
    v73 = *(_QWORD *)(v0 + 432);
    v74 = *(_QWORD *)(v69 + 72) * v67;
    v75 = *(_QWORD *)(v68 + 48) + v74;
    v76 = *(void (**)(uint64_t, unint64_t, uint64_t))(v69 + 16);
    *(_QWORD *)(v0 + 1088) = v76;
    v76(v71, v75, v70);
    v76(v71 + *(int *)(v72 + 48), *(_QWORD *)(v68 + 56) + v74, v70);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v71, 0, 1, v72);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72) == 1)
    {
      swift_release();
      while (1)
      {
        v83 = *(_QWORD *)(v0 + 536);
        v84 = *(_QWORD *)(v0 + 528);
        v85 = *(_QWORD *)(v0 + 496);
        v86 = *(_QWORD *)(v0 + 288);
        v87 = *(_QWORD *)(v0 + 248);
        v88 = v86 + *(int *)(v87 + 20);
        v76(*(_QWORD *)(v0 + 544), v88, v85);
        v76(v83, v86 + *(int *)(v87 + 24), v85);
        v89 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v76)(v84, v88, v85);
        UUID.init()(v89);
        if (qword_1010E9A00 != -1)
          swift_once(&qword_1010E9A00, sub_1001EB16C);
        v90 = *(_QWORD *)(v0 + 1064);
        v91 = *(_QWORD *)(v0 + 288);
        v92 = qword_1011B6A68;
        v93 = (void *)qword_1011B6A70;
        v94 = byte_1011B6A60;
        v95 = sub_100ACD7B4(byte_1011B6A60, qword_1011B6A68, (void *)qword_1011B6A70);
        v96 = sub_100ACD7B4(v94, v92, v93);
        v97 = objc_autoreleasePoolPush();
        sub_10084EE10(v91);
        if (v90)
        {
          objc_autoreleasePoolPop(v97);
          return;
        }
        v176 = *(_QWORD *)(v0 + 520);
        v178 = *(_QWORD *)(v0 + 528);
        v98 = *(_QWORD *)(v0 + 496);
        v186 = *(_QWORD *)(v0 + 544);
        v188 = *(_QWORD *)(v0 + 504);
        v169 = (void *)v96;
        v99 = *(_QWORD *)(v0 + 320);
        v167 = *(_QWORD *)(v0 + 312);
        v182 = *(_QWORD *)(v0 + 536);
        v184 = *(_QWORD *)(v0 + 304);
        v193 = *(_QWORD *)(v0 + 1048) + 1;
        v198 = *(_QWORD *)(v0 + 1040);
        v180 = *(_QWORD *)(v0 + 296);
        v190 = *(_QWORD *)(v0 + 288);
        objc_autoreleasePoolPop(v97);
        static Date.distantFuture.getter(v100);
        v173 = objc_allocWithZone((Class)SPBeaconShare);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v102 = UUID._bridgeToObjectiveC()().super.isa;
        v103 = UUID._bridgeToObjectiveC()().super.isa;
        v104 = UUID._bridgeToObjectiveC()().super.isa;
        v105 = v95;
        v171 = (void *)v95;
        v106 = Date._bridgeToObjectiveC()().super.isa;
        v107 = Date._bridgeToObjectiveC()().super.isa;
        v174 = objc_msgSend(v173, "initWithIdentifier:beaconIdentifier:sharingCircleIdentifier:peerTrustIdentifier:owner:sharee:state:creationDate:expirationDate:", isa, v102, v103, v104, v105, v169, 5, v106, v107);

        v108 = *(void (**)(uint64_t, uint64_t))(v184 + 8);
        v108(v99, v180);
        v108(v167, v180);
        v109 = *(void (**)(uint64_t, uint64_t))(v188 + 8);
        v109(v176, v98);
        v109(v178, v98);
        v109(v182, v98);
        v109(v186, v98);

        sub_100A0B060((Swift::Int *)v200, v174);
        sub_1000126B0(v190, type metadata accessor for OwnerSharingCircle);
        if (v193 == v198)
        {
          swift_bridgeObjectRelease();
          v121 = *(_QWORD *)(v165 + 736);
          v122 = *(_QWORD *)(v165 + 728);
          v123 = *(_QWORD *)(v165 + 720);
          v124 = *(_QWORD *)(v165 + 712);
          v125 = *(_QWORD *)(v165 + 704);
          v126 = *(_QWORD *)(v165 + 696);
          v127 = *(_QWORD *)(v165 + 688);
          v138 = *(_QWORD *)(v165 + 680);
          v139 = *(_QWORD *)(v165 + 672);
          v140 = *(_QWORD *)(v165 + 664);
          v141 = *(_QWORD *)(v165 + 640);
          v142 = *(_QWORD *)(v165 + 632);
          v143 = *(_QWORD *)(v165 + 608);
          v144 = *(_QWORD *)(v165 + 592);
          v145 = *(_QWORD *)(v165 + 584);
          v146 = *(_QWORD *)(v165 + 576);
          v147 = *(_QWORD *)(v165 + 568);
          v148 = *(_QWORD *)(v165 + 560);
          v149 = *(_QWORD *)(v165 + 552);
          v150 = *(_QWORD *)(v165 + 544);
          v151 = *(_QWORD *)(v165 + 536);
          v152 = *(_QWORD *)(v165 + 528);
          v153 = *(_QWORD *)(v165 + 520);
          v154 = *(_QWORD *)(v165 + 488);
          v155 = *(_QWORD *)(v165 + 480);
          v156 = *(_QWORD *)(v165 + 472);
          v157 = *(_QWORD *)(v165 + 464);
          v158 = *(_QWORD *)(v165 + 456);
          v159 = *(_QWORD *)(v165 + 448);
          v160 = *(_QWORD *)(v165 + 440);
          v161 = *(_QWORD *)(v165 + 416);
          v162 = *(_QWORD *)(v165 + 408);
          v163 = *(_QWORD *)(v165 + 400);
          v164 = *(_QWORD *)(v165 + 392);
          v166 = *(_QWORD *)(v165 + 384);
          v168 = *(_QWORD *)(v165 + 360);
          v170 = *(_QWORD *)(v165 + 352);
          v172 = *(_QWORD *)(v165 + 344);
          v175 = *(_QWORD *)(v165 + 328);
          v177 = *(_QWORD *)(v165 + 320);
          v179 = *(_QWORD *)(v165 + 312);
          v181 = *(_QWORD *)(v165 + 288);
          v183 = *(_QWORD *)(v165 + 280);
          v185 = *(_QWORD *)(v165 + 272);
          v187 = *(_QWORD *)(v165 + 264);
          v189 = *(_QWORD *)(v165 + 240);
          v191 = *(_QWORD *)(v165 + 232);
          v194 = *(_QWORD *)(v165 + 224);
          v199 = *(_QWORD *)(v165 + 200);
          sub_100004F9C(*(_QWORD *)(v165 + 168));
          swift_bridgeObjectRelease();
          v128 = *(_QWORD *)(v165 + 128);
          swift_task_dealloc(v121);
          swift_task_dealloc(v122);
          swift_task_dealloc(v123);
          swift_task_dealloc(v124);
          swift_task_dealloc(v125);
          swift_task_dealloc(v126);
          swift_task_dealloc(v127);
          swift_task_dealloc(v138);
          swift_task_dealloc(v139);
          swift_task_dealloc(v140);
          swift_task_dealloc(v141);
          swift_task_dealloc(v142);
          swift_task_dealloc(v143);
          swift_task_dealloc(v144);
          swift_task_dealloc(v145);
          swift_task_dealloc(v146);
          swift_task_dealloc(v147);
          swift_task_dealloc(v148);
          swift_task_dealloc(v149);
          swift_task_dealloc(v150);
          swift_task_dealloc(v151);
          swift_task_dealloc(v152);
          swift_task_dealloc(v153);
          swift_task_dealloc(v154);
          swift_task_dealloc(v155);
          swift_task_dealloc(v156);
          swift_task_dealloc(v157);
          swift_task_dealloc(v158);
          swift_task_dealloc(v159);
          swift_task_dealloc(v160);
          swift_task_dealloc(v161);
          swift_task_dealloc(v162);
          swift_task_dealloc(v163);
          swift_task_dealloc(v164);
          swift_task_dealloc(v166);
          swift_task_dealloc(v168);
          swift_task_dealloc(v170);
          swift_task_dealloc(v172);
          swift_task_dealloc(v175);
          swift_task_dealloc(v177);
          swift_task_dealloc(v179);
          swift_task_dealloc(v181);
          swift_task_dealloc(v183);
          swift_task_dealloc(v185);
          swift_task_dealloc(v187);
          swift_task_dealloc(v189);
          swift_task_dealloc(v191);
          swift_task_dealloc(v194);
          swift_task_dealloc(v199);
          (*(void (**)(uint64_t))(v165 + 8))(v128);
          return;
        }
        v0 = v165;
        v110 = *(_QWORD *)(v165 + 1048) + 1;
        *(_QWORD *)(v165 + 1048) = v110;
        v111 = *(_QWORD *)(v165 + 1032);
        if (v110 >= *(_QWORD *)(v111 + 16))
        {
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        v112 = *(_QWORD *)(v165 + 288);
        v113 = *(_QWORD *)(v165 + 248);
        sub_10005972C(v111+ ((*(unsigned __int8 *)(v165 + 1148) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 1148))+ *(_QWORD *)(*(_QWORD *)(v165 + 256) + 72) * v110, v112, type metadata accessor for OwnerSharingCircle);
        v114 = swift_bridgeObjectRetain(*(_QWORD *)(v112 + *(int *)(v113 + 32)));
        v115 = sub_100508A54(v114);
        swift_bridgeObjectRelease();
        v116 = swift_task_alloc(32);
        *(_QWORD *)(v116 + 16) = v112;
        v117 = sub_100307244((uint64_t)&_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_1000D931C, v116, v115);
        *(_QWORD *)(v165 + 1056) = v117;
        *(_QWORD *)(v165 + 1064) = 0;
        swift_release();
        swift_task_dealloc(v116);
        v65 = 0;
        v118 = *(_BYTE *)(v117 + 32);
        *(_BYTE *)(v165 + 75) = v118;
        v119 = 1 << v118;
        if (v119 < 64)
          v120 = ~(-1 << v119);
        else
          v120 = -1;
        v64 = v120 & *(_QWORD *)(v117 + 64);
        if (v64)
          goto LABEL_18;
LABEL_21:
        v77 = v65 + 1;
        if (__OFADD__(v65, 1))
          goto LABEL_51;
        v78 = (unint64_t)((1 << *(_BYTE *)(v0 + 75)) + 63) >> 6;
        v68 = *(_QWORD *)(v0 + 1056);
        if (v77 < v78)
        {
          v79 = v68 + 64;
          v80 = *(_QWORD *)(v68 + 64 + 8 * v77);
          ++v65;
          if (v80)
            goto LABEL_24;
          v65 = v77 + 1;
          if (v77 + 1 < v78)
          {
            v80 = *(_QWORD *)(v79 + 8 * v65);
            if (v80)
              goto LABEL_24;
            v65 = v77 + 2;
            if (v77 + 2 < v78)
            {
              v80 = *(_QWORD *)(v79 + 8 * v65);
              if (v80)
                goto LABEL_24;
              v81 = v77 + 3;
              if (v81 < v78)
                break;
            }
          }
        }
LABEL_36:
        v82 = *(_QWORD *)(v0 + 504);
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 432) + 56))(*(_QWORD *)(v0 + 480), 1, 1, *(_QWORD *)(v0 + 424));
        swift_release();
        v76 = *(void (**)(uint64_t, unint64_t, uint64_t))(v82 + 16);
      }
      v80 = *(_QWORD *)(v79 + 8 * v81);
      if (v80)
      {
        v65 = v81;
LABEL_24:
        v66 = (v80 - 1) & v80;
        v67 = __clz(__rbit64(v80)) + (v65 << 6);
        continue;
      }
      while (1)
      {
        v65 = v81 + 1;
        if (__OFADD__(v81, 1))
          break;
        if (v65 >= v78)
          goto LABEL_36;
        v80 = *(_QWORD *)(v79 + 8 * v65);
        ++v81;
        if (v80)
          goto LABEL_24;
      }
LABEL_52:
      __break(1u);
    }
    else
    {
      v129 = *(_QWORD *)(v0 + 752);
      v131 = *(_QWORD *)(v0 + 496);
      v130 = *(_QWORD *)(v0 + 504);
      v132 = *(_QWORD *)(v0 + 480);
      v133 = *(_QWORD *)(v0 + 440);
      v134 = *(int *)(*(_QWORD *)(v0 + 424) + 48);
      *(_DWORD *)(v0 + 1152) = v134;
      v135 = v133 + v134;
      v136 = v132 + v134;
      v137 = *(void (**)(void))(v130 + 32);
      *(_QWORD *)(v0 + 1096) = v137;
      v137();
      ((void (*)(uint64_t, uint64_t, uint64_t))v137)(v135, v136, v131);
      swift_task_switch(sub_1000D4AA0, v129, 0);
    }
    break;
  }
}

uint64_t sub_1000D5A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[8] = v7;
  v3[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D5AE0, a3, 0);
}

uint64_t sub_1000D5AE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 136);
  *(_QWORD *)(v0 + 80) = v1;
  *(_DWORD *)(v0 + 120) = *(_DWORD *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
  *(_QWORD *)(v0 + 88) = sub_1003BA248((uint64_t)&off_101048F28);
  return swift_task_switch(sub_1000D5B40, v1, 0);
}

uint64_t sub_1000D5B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v3, *(_QWORD *)(v0 + 32) + *(int *)(v0 + 120), v5);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_1010553A0, v9 + 8, v7 | 7);
  *(_QWORD *)(v0 + 96) = v10;
  *(_QWORD *)(v10 + 16) = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10 + v8, v3, v5);
  *(_QWORD *)(v10 + v9) = v1;
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v1);
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 104) = v12;
  v13 = sub_10001A9A8(&qword_1010EE100);
  *v12 = v0;
  v12[1] = sub_1000D5C5C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_1000D82C0, v10, v13);
}

uint64_t sub_1000D5C5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release();
  return swift_task_switch(sub_1000D5CBC, v1, 0);
}

uint64_t sub_1000D5CBC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  swift_bridgeObjectRelease();
  v0[14] = v0[2];
  return swift_task_switch(sub_1000D5D04, v1, 0);
}

uint64_t sub_1000D5D04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000D5D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSString v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  Class v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t v22;
  Class v23;
  void *v24;
  Class v25;
  Class v26;
  Class v27;
  Class v28;
  void *v29;
  id v30;
  uint64_t v31;
  Class v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  Class v37;
  Class v38;
  Class v39;
  Class isa;
  Class v41;
  uint64_t v42;

  v42 = a1;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v34 - v10;
  v12 = type metadata accessor for OwnerPeerTrust(0);
  swift_bridgeObjectRetain(*(_QWORD *)(a3 + *(int *)(v12 + 32) + 8));
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend((id)objc_opt_self(SPHandle), "handleWithString:", v13);

  if (!v14)
    goto LABEL_6;
  v15 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for OwnerSharingCircle(0) + 32));
  if (!*(_QWORD *)(v15 + 16) || (v16 = sub_100003FB0(a3 + *(int *)(v12 + 20)), (v17 & 1) == 0))
  {

LABEL_6:
    v30 = 0;
    goto LABEL_7;
  }
  v36 = qword_100E26BC8[*(char *)(*(_QWORD *)(v15 + 56) + v16)];
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v39 = UUID._bridgeToObjectiveC()().super.isa;
  v38 = UUID._bridgeToObjectiveC()().super.isa;
  v37 = UUID._bridgeToObjectiveC()().super.isa;
  v35 = objc_msgSend((id)objc_opt_self(SPBeacon), "SPOwner");
  v18 = objc_autoreleasePoolPush();
  sub_10084EE10(a2);
  v19 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v41));
  objc_autoreleasePoolPop(v18);
  v20 = Date._bridgeToObjectiveC()().super.isa;
  v41 = v20;
  v21 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v22 = v21(v11, v5);
  static Date.distantFuture.getter(v22);
  v23 = Date._bridgeToObjectiveC()().super.isa;
  v21(v9, v5);
  v33 = v20;
  v24 = v19;
  v26 = v39;
  v25 = isa;
  v28 = v37;
  v27 = v38;
  v29 = v35;
  v30 = objc_msgSend(v24, "initWithIdentifier:beaconIdentifier:sharingCircleIdentifier:peerTrustIdentifier:owner:sharee:state:creationDate:expirationDate:", isa, v39, v38, v37, v35, v14, v36, v33, v23);

LABEL_7:
  sub_1000126B0(a3, type metadata accessor for OwnerPeerTrust);
  v31 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v42, v31);
  sub_1000126B0(a2, type metadata accessor for OwnerSharingCircle);
  return v30;
}

uint64_t sub_1000D602C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch(sub_1000D6044, 0, 0);
}

uint64_t sub_1000D6044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCD0 + dword_1010EBCD0);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBCD4);
    *(_QWORD *)(v0 + 144) = v3;
    *v3 = v0;
    v3[1] = sub_1000D6144;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D6144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000D61A0, 0, 0);
}

uint64_t sub_1000D61A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 152))
  {
    v3 = *(_QWORD *)(v0 + 128);
    v2 = *(_QWORD *)(v0 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_bridgeObjectRetain(v3);
    *(_QWORD *)(v0 + 160) = sub_10001B664(v4);
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v2 + 136);
    *(_QWORD *)(v0 + 168) = v5;
    return swift_task_switch(sub_1000D626C, v5, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = sub_100033220();
    v8 = swift_allocError(&type metadata for DaemonError, v7, 0, 0);
    *v9 = 0xD000000000000012;
    v9[1] = 0x8000000100EC7C40;
    swift_willThrow(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000D626C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 176) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_1000D62E8;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_100068004, *(_QWORD *)(v0 + 168), v3);
}

uint64_t sub_1000D62E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_release();
  return swift_task_switch(sub_1000D6344, v1, 0);
}

uint64_t sub_1000D6344()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 120);
  return swift_task_switch(sub_1000D6360, 0, 0);
}

uint64_t sub_1000D6360()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = sub_1000D7F0C(*(_QWORD *)(v0 + 184), *(_QWORD **)(v0 + 160));
  *(_QWORD *)(v0 + 192) = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)swift_task_alloc(dword_10110DC74);
  *(_QWORD *)(v0 + 200) = v2;
  *v2 = v0;
  v2[1] = sub_1000D63E8;
  return sub_10096FF34((uint64_t)v1);
}

uint64_t sub_1000D63E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
    v3 = sub_1000D6488;
  else
    v3 = sub_1000D6454;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D6454()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6488()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D64BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_10001A9A8(&qword_1010EE0E0);
  v2[11] = v3;
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[13] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[14] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[15] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v7);
  v2[17] = swift_task_alloc(v7);
  v2[18] = swift_task_alloc(v7);
  v8 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[19] = v8;
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000D658C, v1, 0);
}

uint64_t sub_1000D658C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 136);
  *(_QWORD *)(v0 + 168) = v1;
  return swift_task_switch(sub_1000D65A8, v1, 0);
}

uint64_t sub_1000D65A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 176) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 280) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010551C0, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 184) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 192) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 200) = v13;
  *v13 = v0;
  v13[1] = sub_1000D6694;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 160), sub_10007CC24, v10, *(_QWORD *)(v0 + 152));
}

uint64_t sub_1000D6694()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_1000D66F8, v1, 0);
}

uint64_t sub_1000D66F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v5;
  char *v6;

  v1 = v0[20];
  v2 = type metadata accessor for MemberSharingCircle(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  sub_100004048(v1, (uint64_t *)&unk_101111440);
  if (v3 == 1)
    return swift_task_switch(sub_1000D684C, v0[21], 0);
  v6 = (char *)&dword_1010F4018 + dword_1010F4018;
  v5 = (_QWORD *)swift_task_alloc(unk_1010F401C);
  v0[26] = v5;
  *v5 = v0;
  v5[1] = sub_1000D67C4;
  return ((uint64_t (*)(_QWORD, uint64_t))v6)(v0[9], 1);
}

uint64_t sub_1000D67C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v1 = *(_QWORD **)v0;
  v8 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  v2 = v1[20];
  v4 = v1[17];
  v3 = v1[18];
  v5 = v1[16];
  v6 = v1[12];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return ((uint64_t (*)(void))v8[1])();
}

uint64_t sub_1000D684C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 192);
  v2 = *(unsigned __int8 *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 120);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 176))(v4, *(_QWORD *)(v0 + 72), v5);
  v9 = swift_allocObject(&unk_1010551E8, v7, v8);
  *(_QWORD *)(v0 + 216) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 224) = v11;
  *v11 = v0;
  v11[1] = sub_1000D6934;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 96), sub_10007CC00, v9, *(_QWORD *)(v0 + 88));
}

uint64_t sub_1000D6934()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_release();
  return swift_task_switch(sub_1000D6994, v1, 0);
}

uint64_t sub_1000D6994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for OwnerSharingCircle(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  sub_100004048(v1, &qword_1010EE0E0);
  if (v3 == 1)
  {
    if (qword_1010E9940 != -1)
      swift_once(&qword_1010E9940, sub_1000B748C);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 176);
    v6 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 104);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B6760);
    v9 = v5(v6, v4, v7);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 128);
    v14 = *(_QWORD *)(v0 + 104);
    if (v12)
    {
      v28 = *(_QWORD *)(v0 + 112);
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(32, -1);
      v29 = v16;
      *(_DWORD *)v15 = 141558275;
      *(_QWORD *)(v0 + 56) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2081;
      v17 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
      *(_QWORD *)(v0 + 64) = sub_100016940(v18, v19, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v13, v14);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No share for %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104));
    }

    v24 = *(_QWORD *)(v0 + 136);
    v25 = *(_QWORD *)(v0 + 144);
    v26 = *(_QWORD *)(v0 + 128);
    v27 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 200);
    *(_QWORD *)(v0 + 40) = type metadata accessor for MemberCircleRevokeManager();
    *(_QWORD *)(v0 + 48) = &off_1010B7198;
    *(_QWORD *)(v0 + 16) = v20;
    v21 = dword_1010F404C;
    swift_retain();
    v22 = (_QWORD *)swift_task_alloc(v21);
    *(_QWORD *)(v0 + 232) = v22;
    *v22 = v0;
    v22[1] = sub_1000D6CA4;
    return sub_100258308(v0 + 16);
  }
}

uint64_t sub_1000D6CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 232);
  *(_QWORD *)(*v2 + 240) = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    *(_QWORD *)(v3 + 272) = v1;
    v5 = *(_QWORD *)(v3 + 80);
    v6 = sub_1000D6F70;
  }
  else
  {
    v6 = sub_1000D6D18;
    v5 = 0;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000D6D18()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(void *, uint64_t);

  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 192);
  v3 = *(unsigned __int8 *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = (v3 + 24) & ~v3;
  v7 = v6 + *(_QWORD *)(v0 + 120);
  v8 = v3 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 176))(v4, *(_QWORD *)(v0 + 72), v5);
  v9 = swift_allocObject(&unk_101055210, v7, v8);
  *(_QWORD *)(v0 + 248) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  v2(v9 + v6, v4, v5);
  v10 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v13 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 256) = v11;
  *v11 = v0;
  v11[1] = sub_1000D6E44;
  return v13(&unk_1010EE0E8, v9);
}

uint64_t sub_1000D6E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_1000D6F2C;
  else
    v3 = sub_1000D6EB0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000D6EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6F2C()
{
  _QWORD *v0;

  swift_release();
  v0[34] = v0[33];
  return swift_task_switch(sub_1000D6F70, v0[10], 0);
}

uint64_t sub_1000D6F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D6FE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1010EE0DC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004C28;
  return sub_1000D64BC(a1);
}

uint64_t sub_1000D7034(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1010EE0D0, a2, (uint64_t (*)(uint64_t))type metadata accessor for BeaconSharingService, (uint64_t)&unk_100E26928);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000D7070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D70A8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_1000D708C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D70A8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for MemberSharingCircle);
}

uint64_t sub_1000D70A8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  _QWORD v25[2];
  uint64_t v26;
  unint64_t v27;

  v25[0] = a2;
  v25[1] = a1;
  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v25 - v13;
  a4(0);
  v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v26 = dispatch thunk of CustomStringConvertible.description.getter(v8, v15);
  v27 = v16;
  v17._countAndFlagsBits = 124;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v15);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19 = String.utf8Data.getter(v26, v27);
  v21 = v20;
  swift_bridgeObjectRelease();
  v26 = v19;
  v27 = v21;
  v22 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v22);
  sub_10001BC14(v19, v21);
  v23 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v23(v12, v14, v8);
  v23(v7, (char *)v25[0], v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  sub_1000FEB64((uint64_t)v7, (uint64_t)v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t sub_1000D72B0(void (*a1)(uint64_t), uint64_t a2)
{
  return sub_1000D72E8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (unint64_t *)&qword_1010EDAE0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1000D72CC(void (*a1)(uint64_t), uint64_t a2)
{
  return sub_1000D72E8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Date, &qword_1010EE0F0, (uint64_t)&protocol conformance descriptor for Date);
}

uint64_t sub_1000D72E8(void (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = a3(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v17 - v12;
  a1(v11);
  v14 = sub_100006C64(a4, 255, a3, a5);
  v15 = dispatch thunk of CustomStringConvertible.description.getter(v9, v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v15;
}

uint64_t sub_1000D73B0(_QWORD *(*a1)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v2 = type metadata accessor for String.Encoding(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1(v13, v3);
  v7 = v13[0];
  v8 = v13[1];
  static String.Encoding.utf8.getter(v6);
  v9 = String.init(data:encoding:)(v7, v8, v5);
  if (!v10)
    v9 = Data.hexString.getter(v7, v8);
  v11 = v9;
  sub_10001BC14(v7, v8);
  return v11;
}

uint64_t sub_1000D7464(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  a1(&v6);
  v1 = v6;
  v2 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v3 = sub_100059BCC();
  v4 = Dictionary.description.getter(v1, &type metadata for OwnedBeaconGroup.SerialNumber, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000D74DC(void (*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_1000D7650(a1, a2, (uint64_t)&type metadata for OwnedBeaconGroup.SerialNumber);
}

uint64_t sub_1000D74E8(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  a1(&v5);
  v1 = v5;
  v2 = sub_100059BCC();
  v3 = Set.description.getter(v1, &type metadata for OwnedBeaconGroup.SerialNumber, v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000D7550(void (*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_1000D7720(a1, a2, (uint64_t (*)(_QWORD))sub_1006918F8);
}

uint64_t sub_1000D755C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_1000D7584(a1, a2, type metadata accessor for StandaloneBeacon, (uint64_t (*)(uint64_t))sub_1008F1B70);
}

uint64_t sub_1000D7570(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_1000D7584(a1, a2, type metadata accessor for AccessoryProductInfo, (uint64_t (*)(uint64_t))sub_100D1A984);
}

uint64_t sub_1000D7584(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = a3(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v14 - v9;
  v11 = a1(v8);
  v12 = a4(v11);
  sub_1000126B0((uint64_t)v10, a3);
  return v12;
}

uint64_t sub_1000D761C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_1000D7584(a1, a2, type metadata accessor for SharingCircleKeyManager.Instruction, (uint64_t (*)(uint64_t))sub_100906C5C);
}

uint64_t sub_1000D7630(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_1000D7584(a1, a2, type metadata accessor for KeyDropInterface.KeyPackage, (uint64_t (*)(uint64_t))sub_100D7AD7C);
}

uint64_t sub_1000D7644(void (*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_1000D7650(a1, a2, (uint64_t)&type metadata for UInt64);
}

uint64_t sub_1000D7650(void (*a1)(uint64_t *__return_ptr), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  a1(&v7);
  v4 = v7;
  v5 = Array.description.getter(v7, a3);
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_1000D76B0(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  a1(&v5);
  v1 = v5;
  v2 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v3 = Array.description.getter(v1, v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000D7714(void (*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_1000D7720(a1, a2, (uint64_t (*)(_QWORD))sub_1002E3DF8);
}

uint64_t sub_1000D7720(void (*a1)(uint64_t *__return_ptr), uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  a1(&v5);
  return a3(v5);
}

uint64_t sub_1000D7758(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  a1(&v5);
  v1 = v5;
  v2 = v6;
  v3 = sub_1001EDC48(v5, v6);
  sub_10001BC14(v1, v2);
  return v3;
}

uint64_t sub_1000D77B8(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v2;

  a1(&v2);
  return sub_100C6C7C8(v2);
}

uint64_t sub_1000D77E8(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = sub_10001A9A8(&qword_1010EF7C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  v7 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
  v8 = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8;
}

uint64_t sub_1000D78AC(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v2;

  a1(&v2);
  return sub_10072CDE0();
}

uint64_t sub_1000D78DC(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  a1(&v5);
  v1 = v5;
  v2 = v6;
  v3 = Data.description.getter(v5, v6);
  sub_10001BC14(v1, v2);
  return v3;
}

uint64_t sub_1000D793C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  id v44;
  uint64_t result;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v50;
  _QWORD v51[5];
  _QWORD *v52;

  v4 = a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v5 = a2;
    else
      v5 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v6 = __CocoaSet.makeIterator()(v5);
    v7 = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
    v8 = sub_1000170AC(&qword_1010EE6B0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
    v9 = Set.Iterator.init(_cocoa:)(v51, v6, v7, v8);
    v4 = v51[0];
    v48 = v51[1];
    v10 = v51[2];
    v11 = v51[3];
    v12 = v51[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a2 + 32);
    v48 = a2 + 56;
    v14 = ~v13;
    v15 = -v13;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v12 = v16 & *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain(a2);
    v10 = v14;
    v11 = 0;
  }
  v47 = (unint64_t)(v10 + 64) >> 6;
  while (1)
  {
    if (v4 < 0)
    {
      v21 = __CocoaSet.Iterator.next()(v9);
      if (!v21)
        goto LABEL_45;
      v22 = v21;
      v50 = v21;
      v23 = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
      swift_unknownObjectRetain(v22);
      swift_dynamicCast(&v52, &v50, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
      v24 = v52;
      swift_unknownObjectRelease(v22);
      v20 = v11;
      v18 = v12;
      if (!v24)
        goto LABEL_45;
    }
    else
    {
      if (v12)
      {
        v18 = (v12 - 1) & v12;
        v19 = __clz(__rbit64(v12)) | (v11 << 6);
        v20 = v11;
      }
      else
      {
        v25 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_48;
        if (v25 >= v47)
          goto LABEL_45;
        v26 = *(_QWORD *)(v48 + 8 * v25);
        v20 = v11 + 1;
        if (!v26)
        {
          v20 = v11 + 2;
          if (v11 + 2 >= v47)
            goto LABEL_45;
          v26 = *(_QWORD *)(v48 + 8 * v20);
          if (!v26)
          {
            v20 = v11 + 3;
            if (v11 + 3 >= v47)
              goto LABEL_45;
            v26 = *(_QWORD *)(v48 + 8 * v20);
            if (!v26)
            {
              v20 = v11 + 4;
              if (v11 + 4 >= v47)
                goto LABEL_45;
              v26 = *(_QWORD *)(v48 + 8 * v20);
              if (!v26)
              {
                v20 = v11 + 5;
                if (v11 + 5 >= v47)
                  goto LABEL_45;
                v26 = *(_QWORD *)(v48 + 8 * v20);
                if (!v26)
                {
                  v27 = v11 + 6;
                  while (v47 != v27)
                  {
                    v26 = *(_QWORD *)(v48 + 8 * v27++);
                    if (v26)
                    {
                      v20 = v27 - 1;
                      goto LABEL_34;
                    }
                  }
LABEL_45:
                  sub_10007CC38(v4);
                  return (uint64_t)a1;
                }
              }
            }
          }
        }
LABEL_34:
        v18 = (v26 - 1) & v26;
        v19 = __clz(__rbit64(v26)) + (v20 << 6);
      }
      v24 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v19);
      if (!v24)
        goto LABEL_45;
    }
    v28 = v24;
    v29 = a3;
    swift_errorRetain(a3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v52 = a1;
    v32 = sub_1005190D4((uint64_t)v28);
    v33 = a1[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (a1[3] >= v35)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100A9A8C0();
    }
    else
    {
      sub_100A868E8(v35, isUniquelyReferenced_nonNull_native);
      v37 = sub_1005190D4((uint64_t)v28);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_49;
      v32 = v37;
    }
    v39 = v52;
    v40 = 8 * v32;
    a1 = v52;
    if ((v36 & 1) != 0)
    {
      v17 = v52[7];
      swift_errorRelease(*(_QWORD *)(v17 + 8 * v32));
      a3 = v29;
      *(_QWORD *)(v17 + v40) = v29;
    }
    else
    {
      v52[(v32 >> 6) + 8] |= 1 << v32;
      *(_QWORD *)(v39[6] + 8 * v32) = v28;
      *(_QWORD *)(v39[7] + 8 * v32) = v29;
      v41 = v39[2];
      v42 = __OFADD__(v41, 1);
      v43 = v41 + 1;
      if (v42)
        goto LABEL_47;
      a3 = v29;
      v39[2] = v43;
      v44 = v28;
    }

    v9 = (_QWORD *)swift_bridgeObjectRelease();
    v11 = v20;
    v12 = v18;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  v46 = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v46);
  __break(1u);
  return result;
}

void sub_1000D7D58(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 <= 9)
  {
    if (!v3)
      return;
    v9 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_100ADECF8(v10);
      if (v1)
        break;
      v10 += v11;
      --v3;
    }
    while (v3);
  }
  else
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    swift_bridgeObjectRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      *(_DWORD *)v8 = 134218240;
      v12 = 9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2048;
      v12 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "More than %ld shared secrets - leaving them orphaned for later cleanup. Count: %ld.", (uint8_t *)v8, 0x16u);
      swift_slowDealloc(v8, -1, -1);

      return;
    }

  }
  swift_bridgeObjectRelease();
}

_QWORD *sub_1000D7F0C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v5 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for OwnerSharingCircle(0);
  v8 = __chkstk_darwin(v34);
  v33 = (uint64_t)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v39 = (uint64_t)v31 - v11;
  result = _swiftEmptyArrayStorage;
  v42 = _swiftEmptyArrayStorage;
  v36 = *(_QWORD *)(a1 + 16);
  if (v36)
  {
    v13 = 0;
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v37 = *(_QWORD *)(v10 + 72);
    v31[1] = v2;
    v32 = v14;
    v35 = a1 + v14;
    v41 = a2 + 7;
    v15 = a2;
    do
    {
      v38 = v13;
      sub_10005972C(v35 + v37 * v13, v39, type metadata accessor for OwnerSharingCircle);
      if (!v15[2])
        goto LABEL_3;
      v16 = v39 + *(int *)(v34 + 20);
      v17 = v15;
      v18 = v15[5];
      v19 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v5, v19);
      v15 = v17;
      v21 = -1 << *((_BYTE *)v17 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)((char *)v41 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        v23 = ~v21;
        v24 = *(_QWORD *)(v40 + 72);
        v25 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
        while (1)
        {
          v25(v7, v15[6] + v24 * v22, v5);
          v26 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v27 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v16, v5, v26);
          (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v5);
          if ((v27 & 1) != 0)
            break;
          v22 = (v22 + 1) & v23;
          v15 = v17;
          if (((*(_QWORD *)((char *)v41 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            goto LABEL_3;
        }
        sub_1000126EC(v39, v33, type metadata accessor for OwnerSharingCircle);
        v28 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_10009A520(0, v28[2] + 1, 1);
          v28 = v42;
        }
        v30 = v28[2];
        v29 = v28[3];
        if (v30 >= v29 >> 1)
        {
          sub_10009A520(v29 > 1, v30 + 1, 1);
          v28 = v42;
        }
        v28[2] = v30 + 1;
        sub_1000126EC(v33, (uint64_t)v28 + v32 + v30 * v37, type metadata accessor for OwnerSharingCircle);
        v15 = v17;
      }
      else
      {
LABEL_3:
        sub_1000126B0(v39, type metadata accessor for OwnerSharingCircle);
      }
      v13 = v38 + 1;
    }
    while (v38 + 1 != v36);
    return v42;
  }
  return result;
}

uint64_t sub_1000D8250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F4044);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_10025558C(v3, v4);
}

id sub_1000D82C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  Class v22;
  Class v23;
  void *v24;
  id v25;
  Class v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  Class v29;
  void *v30;
  Class v31;
  Class v32;
  id v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  Class v39;
  Class isa;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v41 = a6;
  v42 = a7;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v37 - v20;
  v38 = qword_100E26BF8[a8];
  v47 = a1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v45 = a3;
  v39 = UUID._bridgeToObjectiveC()().super.isa;
  v44 = a4;
  v22 = UUID._bridgeToObjectiveC()().super.isa;
  v43 = a5;
  v23 = UUID._bridgeToObjectiveC()().super.isa;
  v24 = objc_autoreleasePoolPush();
  v46 = a2;
  sub_10084EE10(a2);
  v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v37));
  objc_autoreleasePoolPop(v24);
  v26 = Date._bridgeToObjectiveC()().super.isa;
  v27 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  v28 = v27(v21, v15);
  static Date.distantFuture.getter(v28);
  v29 = Date._bridgeToObjectiveC()().super.isa;
  v27(v19, v15);
  v30 = v25;
  v32 = v39;
  v31 = isa;
  v33 = objc_msgSend(v30, "initWithIdentifier:beaconIdentifier:sharingCircleIdentifier:peerTrustIdentifier:owner:sharee:state:creationDate:expirationDate:", isa, v39, v22, v23, v41, v42, v38, v26, v29);

  sub_1000126B0(a9, type metadata accessor for MemberPeerTrust);
  v34 = type metadata accessor for UUID(0);
  v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8);
  v35(v43, v34);
  v35(v44, v34);
  v35(v45, v34);
  sub_1000126B0(v46, type metadata accessor for MemberSharingCircle);
  v35(v47, v34);
  return v33;
}

void sub_1000D850C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD aBlock[6];
  uint64_t v19;

  v3 = *sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v4 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)(v3 + 184);
    v7 = *(NSObject **)(v6 + 16);
    v8 = swift_allocObject(&unk_1010559E0, 32, 7);
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v5;
    v9 = swift_allocObject(&unk_101055A08, 32, 7);
    *(_QWORD *)(v9 + 16) = sub_1000DA644;
    *(_QWORD *)(v9 + 24) = v8;
    aBlock[4] = sub_10001D850;
    aBlock[5] = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001D8B8;
    aBlock[3] = &unk_101055A20;
    v10 = _Block_copy(aBlock);
    swift_retain();
    v11 = v5;
    swift_retain();
    swift_release();
    dispatch_sync(v7, v10);
    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v9, "", 110, 87, 27, 1);
    swift_release();
    swift_release();
    if ((v7 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(a2 + 16))(a2, 1, 0);

    }
  }
  else
  {
    type metadata accessor for SPBeaconSharingError(0);
    v13 = v12;
    v19 = 1;
    v14 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v15 = sub_100006C64((unint64_t *)&qword_1010EB490, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v19, v14, v13, v15);
    v16 = (void *)aBlock[0];
    v17 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    (*(void (**)(uint64_t, _QWORD, void *))(a2 + 16))(a2, 0, v17);

  }
}

_QWORD *sub_1000D872C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  _QWORD v40[5];

  v36 = a3;
  v37 = a6;
  v38 = a2;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PrefixedDefaults(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[3] = type metadata accessor for SharingScheduler();
  v40[4] = &off_1010AA938;
  v40[0] = a1;
  v39[3] = type metadata accessor for SystemInfoDynamic();
  v39[4] = &off_1010C2D10;
  v39[0] = a5;
  swift_defaultActor_initialize(a7);
  v21 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v21);
  a7[27] = WorkItemQueue.__allocating_init(identifier:)(v20);
  a7[30] = 0;
  v22 = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isFindMyAppInstalledCached;
  if (qword_1010EA388 != -1)
    swift_once(&qword_1010EA388, sub_100BD6F84);
  v23 = (char *)a7 + v22;
  v24 = sub_10001A9E8(v14, (uint64_t)qword_101117FD8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v25(v17, v24, v14);
  v23[16] = 1;
  v26 = sub_10001A9A8(&qword_1010EE340);
  v27 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v27(&v23[*(int *)(v26 + 40)], v17, v14);
  strcpy(v23, "findmyappstate");
  v23[15] = -18;
  v28 = (char *)a7 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isThisMeDeviceCached;
  v25(v17, v24, v14);
  v28[16] = 0;
  v27(&v28[*(int *)(v26 + 40)], v17, v14);
  *(_QWORD *)v28 = 0xD000000000000011;
  *((_QWORD *)v28 + 1) = 0x8000000100EC7B50;
  v29 = (char *)a7 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles;
  v25(v17, v24, v14);
  *((_QWORD *)v29 + 2) = _swiftEmptyArrayStorage;
  v30 = sub_10001A9A8(&qword_1010EE348);
  v27(&v29[*(int *)(v30 + 40)], v17, v14);
  strcpy(v29, "revokedcircles");
  v29[15] = -18;
  a7[28] = v36;
  a7[29] = a4;
  sub_100030784((uint64_t)v40, (uint64_t)(a7 + 14));
  sub_100030784((uint64_t)v39, (uint64_t)(a7 + 19));
  v31 = v38;
  a7[24] = v37;
  a7[25] = &off_101075450;
  a7[26] = v31;
  type metadata accessor for Transaction(0);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("SharesRemovalManager.setup", 26, 2, &unk_1010EE350, a7);
  swift_release();
  v32 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v13, 1, 1, v32);
  v33 = (_QWORD *)swift_allocObject(&unk_101055558, 40, 7);
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = a7;
  swift_retain();
  sub_100028774((uint64_t)v13, (uint64_t)&unk_1010EE358, (uint64_t)v33);
  swift_release();
  sub_100004048((uint64_t)v13, &qword_1010F46C0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
  return a7;
}

_QWORD *sub_1000D8B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  _QWORD v27[3];
  uint64_t v28;
  _UNKNOWN **v29;

  v28 = type metadata accessor for SharingScheduler();
  v29 = &off_1010AA938;
  v27[0] = a1;
  v25 = type metadata accessor for SystemInfoDynamic();
  v26 = &off_1010C2D10;
  v24[0] = a5;
  v12 = type metadata accessor for SharesRemovalManager(0);
  v13 = (_QWORD *)swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v14 = sub_10009F5D0((uint64_t)v27, v28);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_10009F5D0((uint64_t)v24, v25);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_1000D872C(*v16, a2, a3, a4, *v20, a6, v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  return v22;
}

_QWORD *sub_1000D8C70(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Controller;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _UNKNOWN **v41;
  _UNKNOWN **v42;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v2);
  v2[14] = 0xD000000000000014;
  v2[15] = 0x8000000100E26860;
  v2[19] = 2;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_10001ED74(v39);
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = sub_10001A9A8(&qword_1010EE320);
  v2[20] = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v11, v10);
  v12 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v2[21] = XPCSessionManager.init(name:)(0xD000000000000014, 0x8000000100E26860);
  v2[22] = 0;
  v13 = type metadata accessor for BeaconSharingServiceConnections(0);
  v14 = swift_allocObject(v13, 40, 7);
  v2[23] = sub_100B1AC90(v14);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v15 = qword_1011B7160;
  v16 = type metadata accessor for BeaconObservationStore(0);
  v41 = &off_10107F6C8;
  v42 = &off_101059408;
  v40 = v16;
  *(_QWORD *)&v39 = v15;
  v17 = type metadata accessor for MemberCircleRevokeManager();
  v18 = swift_allocObject(v17, 80, 7);
  *(_QWORD *)(v18 + 24) = 0;
  swift_unknownObjectWeakInit(v18 + 16, 0);
  sub_100057E20(&v39, (_OWORD *)(v18 + 32));
  v3[25] = v18;
  Controller = type metadata accessor for MessagingQueryController();
  swift_allocObject(Controller, 136, 15);
  swift_retain();
  v3[26] = sub_100D8A504(0xD00000000000001BLL, 0x8000000100EC7AF0);
  swift_allocObject(Controller, 136, 15);
  v3[27] = sub_100D8A504(0xD000000000000037, 0x8000000100EC7B10);
  v3[28] = 0;
  v3[29] = _swiftEmptyArrayStorage;
  v3[30] = &_swiftEmptySetSingleton;
  v20 = type metadata accessor for DeviceIdentityUtility(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  swift_defaultActor_initialize(v21);
  v22 = v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v23 = type metadata accessor for Date(0);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(_QWORD *)(v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 0;
  v3[31] = v21;
  v3[32] = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v24, 86400.0);
  v3[17] = a1;
  v25 = type metadata accessor for SharingCircleKeyManager();
  v26 = swift_allocObject(v25, 128, 15);
  swift_retain_n(a1, 2);
  swift_defaultActor_initialize(v26);
  v27 = type metadata accessor for KeyDropInterface();
  v28 = swift_allocObject(v27, 128, 15);
  swift_defaultActor_initialize(v28);
  *(_QWORD *)(v28 + 112) = 0;
  *(_QWORD *)(v28 + 120) = 0;
  *(_QWORD *)(v26 + 112) = v28;
  *(_QWORD *)(v26 + 120) = a1;
  v3[16] = v26;
  v3[24] = a2;
  v29 = qword_1010EA640;
  swift_retain_n(a2, 2);
  swift_retain();
  if (v29 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v30 = qword_1011B8588;
  v31 = type metadata accessor for AppDeletionObserver();
  v32 = swift_allocObject(v31, 32, 7);
  v33 = type metadata accessor for TaskPriority(0);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v8, 1, 1, v33);
  v34 = (_QWORD *)swift_allocObject(&unk_101055530, 40, 7);
  v34[2] = 0;
  v34[3] = 0;
  v34[4] = v32;
  swift_retain();
  swift_retain();
  sub_100028774((uint64_t)v8, (uint64_t)&unk_1010EE338, (uint64_t)v34);
  swift_release();
  sub_100004048((uint64_t)v8, &qword_1010F46C0);
  v35 = sub_1000D8B00(a2, a1, (uint64_t)&unk_1010EE330, a1, v30, v32);
  swift_release();
  swift_release();
  v3[18] = v35;
  v36 = v3[25];
  *(_QWORD *)(v36 + 24) = &off_101055068;
  swift_unknownObjectWeakAssign(v36 + 16, v3);
  return v3;
}

uint64_t sub_1000D912C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D9150()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010EE10C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[7] = v0;
  return swift_task_switch(sub_1000BF164, 0, 0);
}

uint64_t sub_1000D91AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010EE11C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100067F58;
  v2[13] = v0;
  return swift_task_switch(sub_1000BF33C, 0, 0);
}

uint64_t sub_1000D9208()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101113774);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100AE691C(v0);
}

uint64_t sub_1000D9250()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000D9274()
{
  uint64_t v0;

  return sub_100A8059C(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_1000D9288()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A818F8);
}

uint64_t sub_1000D9294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000D70A8(a1, a2, *(_QWORD *)(v2 + 16), (void (*)(_QWORD))type metadata accessor for MemberSharingCircle);
}

uint64_t sub_1000D92B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1010EE19C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_1000D5A74(a1, a2, v2);
}

uint64_t sub_1000D931C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000D70A8(a1, a2, *(_QWORD *)(v2 + 16), (void (*)(_QWORD))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_1000D934C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010EE1F4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[5] = v0;
  return swift_task_switch(sub_1000C2478, 0, 0);
}

uint64_t sub_1000D93A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010EE204);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  v4[5] = a1;
  v4[6] = v1;
  return swift_task_switch(sub_1000C25A4, 0, 0);
}

unint64_t sub_1000D9414()
{
  unint64_t result;

  result = qword_1010EE238;
  if (!qword_1010EE238)
  {
    result = swift_getWitnessTable(&unk_100E26B84, &type metadata for BeaconSharingService.BeaconSharingServiceError);
    atomic_store(result, (unint64_t *)&qword_1010EE238);
  }
  return result;
}

uint64_t sub_1000D945C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = *(_BYTE *)(v0 + v3 + *(_QWORD *)(v2 + 64));
  v7 = (_QWORD *)swift_task_alloc(dword_1010F403C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_100255634(v4, v5, v6);
}

unint64_t sub_1000D94EC()
{
  unint64_t result;

  result = qword_1010EE2E0;
  if (!qword_1010EE2E0)
  {
    result = swift_getWitnessTable(&unk_100E558E0, &type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError);
    atomic_store(result, (unint64_t *)&qword_1010EE2E0);
  }
  return result;
}

uint64_t *sub_1000D9530(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[6];
  sub_10001EF3C(*a1, a1[1]);
  sub_10001EF3C(v2, v3);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v4, v5);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1000D95A8()
{
  unint64_t result;

  result = qword_1010EE300;
  if (!qword_1010EE300)
  {
    result = swift_getWitnessTable(&unk_100E50DBC, &type metadata for CryptoTokenError);
    atomic_store(result, (unint64_t *)&qword_1010EE300);
  }
  return result;
}

unint64_t sub_1000D95EC()
{
  unint64_t result;

  result = qword_1010EE308;
  if (!qword_1010EE308)
  {
    result = swift_getWitnessTable(&unk_100E36C38, &type metadata for KeyRepresentableError);
    atomic_store(result, (unint64_t *)&qword_1010EE308);
  }
  return result;
}

uint64_t sub_1000D9638@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A82760(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1000D9678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010EE32C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_1000B751C(a1, v1);
}

uint64_t sub_1000D96CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1010FAE84);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_1003ECF90(a1, v4, v5, v6);
}

uint64_t sub_1000D9738()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101118334);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100BD6FE4(v0);
}

uint64_t sub_1000D9784(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1011182E4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100BDA8EC(a1, v4, v5, v6);
}

unint64_t sub_1000D97F8()
{
  unint64_t result;

  result = qword_1010EE3A0;
  if (!qword_1010EE3A0)
  {
    result = swift_getWitnessTable(&unk_100E44924, &type metadata for ShareKeysDownloadUseCase.Error);
    atomic_store(result, (unint64_t *)&qword_1010EE3A0);
  }
  return result;
}

uint64_t sub_1000D983C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000D99D4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = type metadata accessor for SharedBeaconRecord(0);
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
    result = sub_1004A62F8(v1 + ((v5 + 24) & ~v5), *(_QWORD *)(v1 + 16));
  }
  *a1 = v4 == 0;
  return result;
}

uint64_t sub_1000D9A3C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1010EE3D4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_1000B91A8(a1, v4, v5, v7, v6);
}

uint64_t sub_1000D9AB4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B7F58(a1, v1);
}

uint64_t sub_1000D9ABC()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000D9AE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)swift_task_alloc(dword_1010EE3FC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v3 = (_QWORD *)swift_task_alloc(dword_1010EDED4);
  v2[2] = v3;
  *v3 = v2;
  v3[1] = sub_100004A74;
  return sub_1000B8050(v0 + 24);
}

uint64_t sub_1000D9B64()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101113774);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004C28;
  return sub_100AE691C(v0);
}

uint64_t sub_1000D9BB0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D9BE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1010EE414);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_1000B933C(a1, v4, v5, v7, v6);
}

uint64_t sub_1000D9C5C(uint64_t a1)
{
  uint64_t v1;

  return sub_100AE8EA0(a1, v1);
}

uint64_t sub_1000D9C64()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010EE464);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_1000D9CC0;
  v2[7] = v0;
  return swift_task_switch(sub_1000BE5B4, 0, 0);
}

uint64_t sub_1000D9CC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1000D9D10()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010F4134);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_100255F60();
}

uint64_t sub_1000D9D58()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D9D7C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D9DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010EE494);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_1000B70C0, 0, 0);
}

uint64_t sub_1000D9E08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D9E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_1010EE4AC);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_1000B6E90, 0, 0);
}

void sub_1000D9E98(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000B68C0(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1000D9EA4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000D9ED8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1010EE4BC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_1000B6928(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000D9F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  swift_release();
  return swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1000DA020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t (*v10)(uint64_t);

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = swift_task_alloc(dword_1010EE4CC);
  v7 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_100004A74;
  *(_OWORD *)(v6 + 24) = v7;
  v10 = (uint64_t (*)(uint64_t))((char *)&dword_1010F4170 + dword_1010F4170);
  v8 = (uint64_t *)swift_task_alloc(unk_1010F4174);
  *(_QWORD *)(v6 + 40) = v8;
  *v8 = v6;
  v8[1] = (uint64_t)sub_1000B63E4;
  return v10(v5);
}

uint64_t sub_1000DA0E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (char *)v1 + (v6 & 0xFFFFFFFFFFFFFFF8);
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[4];
  v11 = (uint64_t)v1 + v5;
  v12 = *((_BYTE *)v1 + v6);
  v13 = *((_QWORD *)v7 + 1);
  v14 = *((_QWORD *)v7 + 2);
  v15 = (_QWORD *)swift_task_alloc(dword_1010EE4DC);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_100004A74;
  return sub_1000B5D40(a1, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1000DA1A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v7 + 16));
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1000DA240(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (char *)v1 + (v6 & 0xFFFFFFFFFFFFFFF8);
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[4];
  v11 = (uint64_t)v1 + v5;
  v12 = *((_BYTE *)v1 + v6);
  v13 = *((_QWORD *)v7 + 1);
  v14 = *((_QWORD *)v7 + 2);
  v15 = (_QWORD *)swift_task_alloc(dword_1010EE4EC);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_100004A74;
  return sub_1000B55BC(a1, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1000DA304()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000DA340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc(dword_1010EE504);
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch(sub_1000B50A4, 0, 0);
}

uint64_t sub_1000DA3A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010EE52C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1000B4A60(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000DA468@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A82EA0(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1000DA4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 24) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 16));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

void sub_1000DA588(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for MACAddress(0);
  sub_100A81CA8(v1 + v4, *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + v5 + 16), a1);
}

uint64_t sub_1000DA618()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000DA644()
{
  uint64_t v0;

  sub_10032A72C(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000DA64C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DA660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_1010EE55C);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_1000B4840, 0, 0);
}

uint64_t sub_1000DA6CC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000DA700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_1010EE56C);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_1000B4764, 0, 0);
}

uint64_t sub_1000DA76C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010EE57C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1000B4120(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000DA834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F412C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_100255698(v3, v4);
}

uint64_t sub_1000DA8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc(dword_1010EE5A4);
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_100004A74;
  *(_OWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  return swift_task_switch(sub_1000B3C10, 0, 0);
}

uint64_t sub_1000DA918(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010EE5B4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1000B35CC(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000DA9D4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000DAA10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc(dword_1010EE5D4);
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 56) = v4;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch(sub_1000B30E8, 0, 0);
}

uint64_t sub_1000DAA78()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000DAAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc(dword_1010EE5FC);
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_100004A74;
  *(_OWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 40) = v2;
  *(_QWORD *)(v4 + 48) = v3;
  return swift_task_switch(sub_1000B2C30, 0, 0);
}

uint64_t sub_1000DAB2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010EE624);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1000B25EC(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000DABEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000DAC7C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_100A81138(*(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_1000DACD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000DAD54(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010EE64C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1000B1E38(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000DAE14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010EE664);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1000B17FC(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000DAED4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010EE684);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1000B11B8(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000DAF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000DB034(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010EE6A4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1000B0B90(a1, v6, v7, v8, v9, v11, v12);
}

void sub_1000DB0F0(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000B0AD4(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000DB0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_1000DB1A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  v11 = *(_QWORD *)((char *)v1 + v6);
  v12 = (uint64_t)v1 + v5;
  v13 = *(_QWORD *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc(dword_1010EE6BC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  return sub_1000AFC30(a1, v7, v8, v9, v10, v12, v11, v13);
}

uint64_t storeEnumTagSinglePayload for BeaconSharingEntitlement(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000DB2BC + 4 * byte_100E26755[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000DB2DC + 4 * byte_100E2675A[v4]))();
}

_BYTE *sub_1000DB2BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000DB2DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000DB2E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000DB2EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000DB2F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000DB2FC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingEntitlement()
{
  return &type metadata for BeaconSharingEntitlement;
}

uint64_t storeEnumTagSinglePayload for BeaconServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000DB364 + 4 * byte_100E26764[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000DB398 + 4 * byte_100E2675F[v4]))();
}

uint64_t sub_1000DB398(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB3A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DB3A8);
  return result;
}

uint64_t sub_1000DB3B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DB3BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000DB3C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB3C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconServiceError()
{
  return &type metadata for BeaconServiceError;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingService.BeaconSharingServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000DB430 + 4 * byte_100E2676E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000DB464 + 4 * byte_100E26769[v4]))();
}

uint64_t sub_1000DB464(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB46C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DB474);
  return result;
}

uint64_t sub_1000DB480(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DB488);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000DB48C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB494(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingService.BeaconSharingServiceError()
{
  return &type metadata for BeaconSharingService.BeaconSharingServiceError;
}

unint64_t sub_1000DB4B4()
{
  unint64_t result;

  result = qword_1010EE6E0;
  if (!qword_1010EE6E0)
  {
    result = swift_getWitnessTable(&unk_100E269EC, &type metadata for BeaconSharingService.BeaconSharingServiceError);
    atomic_store(result, (unint64_t *)&qword_1010EE6E0);
  }
  return result;
}

unint64_t sub_1000DB4FC()
{
  unint64_t result;

  result = qword_1010EE6E8;
  if (!qword_1010EE6E8)
  {
    result = swift_getWitnessTable(&unk_100E26A54, &type metadata for BeaconServiceError);
    atomic_store(result, (unint64_t *)&qword_1010EE6E8);
  }
  return result;
}

unint64_t sub_1000DB544()
{
  unint64_t result;

  result = qword_1010EE6F0;
  if (!qword_1010EE6F0)
  {
    result = swift_getWitnessTable(&unk_100E26AF4, &type metadata for BeaconSharingEntitlement);
    atomic_store(result, (unint64_t *)&qword_1010EE6F0);
  }
  return result;
}

unint64_t sub_1000DB58C()
{
  unint64_t result;

  result = qword_1010EE6F8;
  if (!qword_1010EE6F8)
  {
    result = swift_getWitnessTable(&unk_100E26A7C, &type metadata for BeaconSharingEntitlement);
    atomic_store(result, (unint64_t *)&qword_1010EE6F8);
  }
  return result;
}

uint64_t sub_1000DB5D8()
{
  return sub_1000CF334();
}

uint64_t sub_1000DB634()
{
  return sub_1000CE5D8();
}

uint64_t sub_1000DB6F4(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v30, v3, v4);
  v29 = *v1;
  v5 = v31;
  v6 = v32;
  sub_10009F5D0((uint64_t)v30, v31);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v29 = v1[1];
    v8 = v31;
    v9 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v8, v9);
    v29 = v1[3];
    v10 = v31;
    v11 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v10, v11);
    v29 = v1[4];
    v12 = v31;
    v13 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v12, v13);
    v29 = v1[2];
    v14 = v31;
    v15 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v14, v15);
    v29 = v1[5];
    v16 = v31;
    v17 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v16, v17);
    v29 = v1[7];
    v18 = v31;
    v19 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v18, v19);
    v29 = v1[6];
    v20 = v31;
    v21 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v20, v21);
    v29 = v1[8];
    v22 = v31;
    v23 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v22, v23);
    v29 = v1[9];
    v24 = v31;
    v25 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v24, v25);
    v29 = v1[10];
    v26 = v31;
    v27 = v32;
    sub_10009F5D0((uint64_t)v30, v31);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v29, &type metadata for Data, v7, v26, v27);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
}

double sub_1000DBA48@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  sub_1000DCCD4(a1, v11);
  if (!v2)
  {
    v5 = v19;
    a2[8] = v18;
    a2[9] = v5;
    v6 = v21;
    a2[10] = v20;
    a2[11] = v6;
    v7 = v15;
    a2[4] = v14;
    a2[5] = v7;
    v8 = v17;
    a2[6] = v16;
    a2[7] = v8;
    v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    result = *(double *)&v12;
    v10 = v13;
    a2[2] = v12;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_1000DBAA8(_QWORD *a1)
{
  return sub_1000DB6F4(a1);
}

void sub_1000DBABC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X26 }
}

void sub_1000DBB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a2) == 89)
    __asm { BR              X26 }
  __break(1u);
  JUMPOUT(0x1000DBED4);
}

void sub_1000DBFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

void sub_1000DC034()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t v5;
  unint64_t v6;

  if (!__OFSUB__(60, v3))
  {
    v5 = sub_10060C584(60 - v3);
    v6 = v0;
    sub_10051EB40((uint64_t)&v5);
    v1 = v5;
    v2 = v6;
    Data.append(_:)(v5, v6);
    sub_10001BC14(v1, v2);
    __asm { BR              X9 }
  }
  __break(1u);
  JUMPOUT(0x1000DC518);
}

uint64_t destroy for AirPodsLEFinalizePairingCommandPayload(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  sub_10001BC14(a1[4], a1[5]);
  sub_10001BC14(a1[6], a1[7]);
  sub_10001BC14(a1[8], a1[9]);
  sub_10001BC14(a1[10], a1[11]);
  sub_10001BC14(a1[12], a1[13]);
  sub_10001BC14(a1[14], a1[15]);
  sub_10001BC14(a1[16], a1[17]);
  sub_10001BC14(a1[18], a1[19]);
  result = sub_10001BC14(a1[20], a1[21]);
  v3 = a1[23];
  if (v3 >> 60 != 15)
    return sub_10001BC14(a1[22], v3);
  return result;
}

uint64_t initializeWithCopy for AirPodsLEFinalizePairingCommandPayload(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = a2[8];
  v13 = a2[9];
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  v14 = a2[10];
  v15 = a2[11];
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  v16 = a2[12];
  v17 = a2[13];
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  v18 = a2[14];
  v19 = a2[15];
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  v20 = a2[16];
  v21 = a2[17];
  sub_10001BBBC(v20, v21);
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  v22 = a2[18];
  v23 = a2[19];
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  v24 = a2[20];
  v25 = a2[21];
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  v26 = a2 + 22;
  v27 = a2[23];
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)v26;
  }
  else
  {
    v28 = *v26;
    sub_10001BBBC(*v26, v27);
    *(_QWORD *)(a1 + 176) = v28;
    *(_QWORD *)(a1 + 184) = v27;
  }
  return a1;
}

uint64_t *assignWithCopy for AirPodsLEFinalizePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_10001BBBC(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[6];
  v17 = a2[7];
  sub_10001BBBC(v16, v17);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2[8];
  v21 = a2[9];
  sub_10001BBBC(v20, v21);
  v22 = a1[8];
  v23 = a1[9];
  a1[8] = v20;
  a1[9] = v21;
  sub_10001BC14(v22, v23);
  v24 = a2[10];
  v25 = a2[11];
  sub_10001BBBC(v24, v25);
  v26 = a1[10];
  v27 = a1[11];
  a1[10] = v24;
  a1[11] = v25;
  sub_10001BC14(v26, v27);
  v28 = a2[12];
  v29 = a2[13];
  sub_10001BBBC(v28, v29);
  v30 = a1[12];
  v31 = a1[13];
  a1[12] = v28;
  a1[13] = v29;
  sub_10001BC14(v30, v31);
  v32 = a2[14];
  v33 = a2[15];
  sub_10001BBBC(v32, v33);
  v34 = a1[14];
  v35 = a1[15];
  a1[14] = v32;
  a1[15] = v33;
  sub_10001BC14(v34, v35);
  v36 = a2[16];
  v37 = a2[17];
  sub_10001BBBC(v36, v37);
  v38 = a1[16];
  v39 = a1[17];
  a1[16] = v36;
  a1[17] = v37;
  sub_10001BC14(v38, v39);
  v40 = a2[18];
  v41 = a2[19];
  sub_10001BBBC(v40, v41);
  v42 = a1[18];
  v43 = a1[19];
  a1[18] = v40;
  a1[19] = v41;
  sub_10001BC14(v42, v43);
  v44 = a2[20];
  v45 = a2[21];
  sub_10001BBBC(v44, v45);
  v46 = a1[20];
  v47 = a1[21];
  a1[20] = v44;
  a1[21] = v45;
  sub_10001BC14(v46, v47);
  v48 = a2 + 22;
  v49 = a2[23];
  if ((unint64_t)a1[23] >> 60 != 15)
  {
    if (v49 >> 60 != 15)
    {
      v51 = *v48;
      sub_10001BBBC(*v48, v49);
      v52 = a1[22];
      v53 = a1[23];
      a1[22] = v51;
      a1[23] = v49;
      sub_10001BC14(v52, v53);
      return a1;
    }
    sub_1000DC964((uint64_t)(a1 + 22));
    goto LABEL_6;
  }
  if (v49 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 11) = *(_OWORD *)v48;
    return a1;
  }
  v50 = *v48;
  sub_10001BBBC(*v48, v49);
  a1[22] = v50;
  a1[23] = v49;
  return a1;
}

uint64_t sub_1000DC964(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

__n128 initializeWithTake for AirPodsLEFinalizePairingCommandPayload(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t *assignWithTake for AirPodsLEFinalizePairingCommandPayload(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v10, v11);
  v12 = a1[8];
  v13 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v12, v13);
  v14 = a1[10];
  v15 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v14, v15);
  v16 = a1[12];
  v17 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v16, v17);
  v18 = a1[14];
  v19 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v18, v19);
  v20 = a1[16];
  v21 = a1[17];
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v20, v21);
  v22 = a1[18];
  v23 = a1[19];
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v22, v23);
  v24 = a1[20];
  v25 = a1[21];
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v24, v25);
  v26 = (uint64_t *)(a2 + 176);
  v27 = a1[23];
  if (v27 >> 60 != 15)
  {
    v28 = *(_QWORD *)(a2 + 184);
    if (v28 >> 60 != 15)
    {
      v29 = a1[22];
      a1[22] = *v26;
      a1[23] = v28;
      sub_10001BC14(v29, v27);
      return a1;
    }
    sub_1000DC964((uint64_t)(a1 + 22));
  }
  *((_OWORD *)a1 + 11) = *(_OWORD *)v26;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEFinalizePairingCommandPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 192))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLEFinalizePairingCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 192) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEFinalizePairingCommandPayload()
{
  return &type metadata for AirPodsLEFinalizePairingCommandPayload;
}

unint64_t sub_1000DCBDC(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1000DCC08();
  result = sub_1000DCC4C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000DCC08()
{
  unint64_t result;

  result = qword_1010EE700;
  if (!qword_1010EE700)
  {
    result = swift_getWitnessTable(&unk_100E26C58, &type metadata for AirPodsLEFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EE700);
  }
  return result;
}

unint64_t sub_1000DCC4C()
{
  unint64_t result;

  result = qword_1010EE708;
  if (!qword_1010EE708)
  {
    result = swift_getWitnessTable(&unk_100E26C80, &type metadata for AirPodsLEFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EE708);
  }
  return result;
}

unint64_t sub_1000DCC90()
{
  unint64_t result;

  result = qword_1010EE710;
  if (!qword_1010EE710)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1010EE710);
  }
  return result;
}

uint64_t sub_1000DCCD4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v58, v5, v6);
  v7 = v59;
  v8 = v60;
  sub_10009F5D0((uint64_t)v58, v59);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(89, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v59;
    v14 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v13, v14);
    v73 = v15;
    v17 = v59;
    v16 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    v18 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v17, v16);
    v56 = v19;
    v57 = v18;
    v20 = v59;
    v21 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v20, v21);
    sub_10001BBBC(v57, v56);
    v55 = sub_100035530();
    v22 = DataProtocol.intValue.getter(&type metadata for Data, v55);
    sub_1002F7C0C(v22, v57, v56);
    v23 = v59;
    v24 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v23, v24);
    v25 = v59;
    v26 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    v27 = dispatch thunk of BinaryDecodingContaining.decode(length:)(706, v25, v26);
    v54 = v28;
    v29 = v59;
    v30 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v29, v30);
    sub_10001BBBC(v27, v54);
    v31 = DataProtocol.intValue.getter(&type metadata for Data, v55);
    sub_1002F7C0C(v31, v27, v54);
    v32 = v59;
    v33 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    v34 = dispatch thunk of BinaryDecodingContaining.decode(length:)(554, v32, v33);
    v52 = v35;
    v53 = v34;
    v36 = v59;
    v37 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v36, v37);
    sub_10001BBBC(v53, v52);
    v38 = DataProtocol.intValue.getter(&type metadata for Data, v55);
    sub_1002F7C0C(v38, v53, v52);
    v39 = v59;
    v40 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(8, v39, v40);
    v41 = v59;
    v42 = v60;
    sub_10009F5D0((uint64_t)v58, v59);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(24, v41, v42);
    sub_10001BC14(v53, v52);
    sub_10001BC14(v27, v54);
    sub_10001BC14(v57, v56);
    sub_1000DBABC(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v44 = v70;
    v45 = v71;
    v46 = v68;
    a2[8] = v69;
    a2[9] = v44;
    v47 = v72;
    a2[10] = v45;
    a2[11] = v47;
    v48 = v66;
    v49 = v67;
    a2[4] = v65;
    a2[5] = v48;
    a2[6] = v49;
    a2[7] = v46;
    v50 = v62;
    *a2 = v61;
    a2[1] = v50;
    v51 = v64;
    a2[2] = v63;
    a2[3] = v51;
  }
  return result;
}

uint64_t sub_1000DD29C()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FindMyNetworkPublishDateProvider()
{
  return objc_opt_self(_TtC12searchpartyd32FindMyNetworkPublishDateProvider);
}

uint64_t storeEnumTagSinglePayload for FindMyNetworkPublishDateProviderFactory(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000DD318 + 4 * byte_100E26CD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000DD338 + 4 * byte_100E26CD5[v4]))();
}

_BYTE *sub_1000DD318(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000DD338(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000DD340(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000DD348(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000DD350(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000DD358(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FindMyNetworkPublishDateProviderFactory()
{
  return &type metadata for FindMyNetworkPublishDateProviderFactory;
}

unint64_t sub_1000DD378()
{
  unint64_t result;

  result = qword_1010EE7F0;
  if (!qword_1010EE7F0)
  {
    result = swift_getWitnessTable(&unk_100E26DC8, &type metadata for FindMyNetworkPublishDateProviderFactory);
    atomic_store(result, (unint64_t *)&qword_1010EE7F0);
  }
  return result;
}

BOOL sub_1000DD3BC(char *a1, char *a2)
{
  return qword_100E270B0[*a1] == qword_100E270B0[*a2];
}

Swift::Int sub_1000DD3E0()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E270B0[v1]);
  return Hasher._finalize()();
}

void sub_1000DD42C()
{
  char *v0;

  Hasher._combine(_:)(qword_100E270B0[*v0]);
}

Swift::Int sub_1000DD460()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E270B0[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1000DD4A8@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000F7964(*a1);
  *a2 = result;
  return result;
}

void sub_1000DD4D0(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100E270B0[*v1];
}

uint64_t sub_1000DD4E8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1000FC218();
  v5 = sub_100024908();
  return Error<>._code.getter(a1, a2, v4, v5);
}

unint64_t sub_1000DD52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v29;
  unint64_t v30;

  v1 = type metadata accessor for StandaloneBeacon(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v0, (uint64_t)v12, v13);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v3, type metadata accessor for StandaloneBeacon);
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v29 = 0xD000000000000014;
    v30 = 0x8000000100EC6640;
    v14 = type metadata accessor for UUID(0);
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 41;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18 = v29;
    v19 = (uint64_t)v3;
    v20 = type metadata accessor for StandaloneBeacon;
  }
  else
  {
    v21 = (uint64_t)&v12[*(int *)(sub_10001A9A8(&qword_1010EC568) + 48)];
    sub_1000126EC((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    sub_1000126EC(v21, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v29 = 0xD000000000000010;
    v30 = 0x8000000100EC6660;
    v22 = type metadata accessor for UUID(0);
    v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0x6E6F63616562202CLL;
    v25._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v25);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 41;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v18 = v29;
    sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    v19 = (uint64_t)v9;
    v20 = type metadata accessor for OwnedBeaconGroup;
  }
  sub_1000126B0(v19, v20);
  return v18;
}

uint64_t sub_1000DD86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010EE7F8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010EE7F8);
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7E28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1000DD8FC()
{
  uint64_t v0;

  if (qword_1010E9950 != -1)
    swift_once(&qword_1010E9950, sub_1000DD86C);
  v0 = type metadata accessor for Logger(0);
  return sub_10001A9E8(v0, (uint64_t)qword_1010EE7F8);
}

uint64_t sub_1000DD944(uint64_t a1)
{
  return sub_1000DD95C(a1, qword_1010EE810);
}

uint64_t sub_1000DD950(uint64_t a1)
{
  return sub_1000DD95C(a1, qword_1010EE828);
}

uint64_t sub_1000DD95C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  sub_1000234D8(v3, a2);
  v4 = sub_10001A9E8(v3, (uint64_t)a2);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v4, 60.0);
}

uint64_t sub_1000DD9A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  v5 = v4;
  v55 = a4;
  v56 = a1;
  v54 = a3;
  v57 = a2;
  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v53 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v14);
  static DispatchQoS.unspecified.getter(v18);
  v58 = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v20, v21, v8, v19);
  *(_QWORD *)(v5 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003DLL, 0x8000000100EC7E00, v13, v10, v17, 0);
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 72) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  v22 = sub_10001A9A8(&qword_1010FAB00);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v5 + 104) = PassthroughSubject.init()();
  *(_OWORD *)(v5 + 112) = xmmword_100E22B20;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 168) = 0xF000000000000000;
  *(_QWORD *)(v5 + 176) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v5 + 184) = 0;
  *(_QWORD *)(v5 + 192) = 0;
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7E28);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "AirPodsLEPairingManager.init", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  v28 = v57;
  *(_QWORD *)(v5 + 24) = v56;
  *(_QWORD *)(v5 + 32) = v28;
  v29 = type metadata accessor for AccessoryPairingValidator();
  v30 = swift_allocObject(v29, 32, 7);
  v31 = type metadata accessor for DeviceIdentityUtility(0);
  v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize(v32);
  v33 = v32 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v34 = type metadata accessor for Date(0);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  *(_QWORD *)(v32 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v32 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v32 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 5;
  *(_QWORD *)(v30 + 16) = v32;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v5 + 48) = v30;
  *(_BYTE *)(v5 + 200) = v54 & 1;
  *(_QWORD *)(v5 + 208) = v55;
  v36 = (uint64_t)v53;
  UUID.init()(v35);
  v37 = *(void **)(v5 + 16);
  v38 = type metadata accessor for AccessoryPairingCoordinator(0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  swift_retain();
  v39 = sub_100C9728C(v36, v30, v37);
  v40 = v39;
  if (v39)
  {
    *(_QWORD *)(v5 + 64) = v39;
    swift_retain();
    v41 = sub_10001A9A8((uint64_t *)&unk_1011106F0);
    unsafeFromAsyncTask<A>(_:)(&v58, &unk_101121848, 0, v41);
    v42 = v58;
    if (v58)
    {
      swift_release();
      swift_release();
      swift_release();
      *(_QWORD *)(v5 + 40) = v42;
      return v5;
    }
    v43 = sub_100059390();
    v44 = swift_allocError(&type metadata for CentralManager.Error, v43, 0, 0);
    *(_QWORD *)v45 = 15;
    *(_OWORD *)(v45 + 8) = 0u;
    *(_OWORD *)(v45 + 24) = 0u;
    *(_BYTE *)(v45 + 40) = 11;
    swift_willThrow(v44);
    v46 = swift_errorRelease(v44);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter(v47);
    if (!os_log_type_enabled(v47, v48))
    {

      swift_release();
      swift_release();
      goto LABEL_11;
    }
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Missing central manager service!", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
    swift_release();

  }
  swift_release();
LABEL_11:
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  if (v40)
    swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001EF3C(*(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120));
  swift_release();
  swift_release();
  sub_10001D8A8(*(_QWORD *)(v5 + 144), *(_QWORD *)(v5 + 152));
  sub_10001EF3C(*(_QWORD *)(v5 + 160), *(_QWORD *)(v5 + 168));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v50 = type metadata accessor for AirPodsLEPairingManager();
  swift_deallocPartialClassInstance(v5, v50, 216, 7);
  return 0;
}

uint64_t sub_1000DDFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = v0;
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7E28);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AirPodsLEPairingManager.deinit", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001EF3C(*(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120));
  swift_release();
  swift_release();
  sub_10001D8A8(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
  sub_10001EF3C(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000DE14C()
{
  uint64_t v0;

  sub_1000DDFD8();
  return swift_deallocClassInstance(v0, 216, 7);
}

uint64_t type metadata accessor for AirPodsLEPairingManager()
{
  return objc_opt_self(_TtC12searchpartyd23AirPodsLEPairingManager);
}

uint64_t sub_1000DE18C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD aBlock[7];

  v7 = v6;
  v38 = a3;
  v39 = a1;
  v12 = *v6;
  v13 = sub_10001A9A8(&qword_1010FAB00);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = PassthroughSubject.init()();
  v6[13] = v14;
  swift_retain();
  swift_release();
  v15 = v6[2];
  OS_dispatch_queue.sync<A>(execute:)(sub_1000FA024, v7, &type metadata for Bool);
  if ((aBlock[0] & 1) != 0)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7E28);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Existing pairing session in progress!", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    aBlock[0] = v14;
    v21 = sub_1000193A4(&qword_1010EEDC0, &qword_1010FAB00, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v22 = Publisher.eraseToAnyPublisher()(v13, v21);
    goto LABEL_9;
  }
  v35 = v12;
  v36 = a6;
  v37 = a2;
  v23 = swift_allocObject(&unk_1010585E0, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_1000FA03C;
  *(_QWORD *)(v23 + 24) = v7;
  aBlock[4] = sub_10001D850;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_1010585F8;
  v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v15, v24);
  _Block_release(v24);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v23, "", 132, 124, 26, 1);
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v27 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v27);
    v29[2] = v7;
    v29[3] = a4;
    v29[4] = a5;
    v30 = v36 & 1;
    v31 = v38 & 1;
    v32 = v39;
    v33 = v37;
    v34 = v35;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AirPodsLEPairingManager.startDiscoverySession", 75, 2, sub_1000FA054, v29, &type metadata for () + 1);
    aBlock[0] = v14;
    v28 = sub_1000193A4(&qword_1010EEDC0, &qword_1010FAB00, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v22 = Publisher.eraseToAnyPublisher()(v13, v28);
    swift_release();
LABEL_9:
    swift_release();
    return v22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DE4E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t result;
  uint64_t v9;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(a1 + 16);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
    *(_BYTE *)(a1 + 184) = 1;
  else
    __break(1u);
  return result;
}

uint64_t sub_1000DE5A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD aBlock[7];
  _QWORD *v55;

  v52 = a3;
  v40 = a8;
  v41 = a5;
  v42 = a6;
  v53 = a4;
  v43 = a1;
  v45 = a9;
  v48 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v47 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  __chkstk_darwin(v12);
  v44 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MACAddress(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v39 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v39 - v18;
  v46 = *(_QWORD *)(a2 + 16);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v20((char *)&v39 - v18, a7, v14);
  v20((char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v40, v14);
  v21 = *(unsigned __int8 *)(v15 + 80);
  v22 = (v21 + 42) & ~v21;
  v23 = v16 + 7;
  v24 = (v16 + 7 + v22) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v21 + v24 + 8) & ~v21;
  v26 = (v23 + v25) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_101058630, v26 + 8, v21 | 7);
  v28 = v52;
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = v28;
  *(_QWORD *)(v27 + 32) = v53;
  *(_BYTE *)(v27 + 40) = v41;
  *(_BYTE *)(v27 + 41) = v42;
  v29 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v29(v27 + v22, v19, v14);
  *(_QWORD *)(v27 + v24) = v43;
  v29(v27 + v25, v39, v14);
  *(_QWORD *)(v27 + v26) = v45;
  aBlock[4] = sub_1000FA154;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101058648;
  v30 = _Block_copy(aBlock);
  swift_retain();
  sub_10001BD08(v52, v53);
  v31 = swift_retain();
  v32 = v44;
  static DispatchQoS.unspecified.getter(v31);
  v55 = _swiftEmptyArrayStorage;
  v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v37 = v47;
  v36 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v34, v35, v48, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v37, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v36);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v50);
  return swift_release();
}

uint64_t sub_1000DE8D0(_QWORD *a1, uint64_t a2, unint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  id v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  id v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  void (*v124)(char *, uint64_t, uint64_t);
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v137;
  id v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t, uint64_t);
  void (*v146)(uint64_t, char *, uint64_t);
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void (*v188)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  id v196;
  id v197;

  v180 = a8;
  v183 = a7;
  v193 = type metadata accessor for MACAddress(0);
  v185 = *(_QWORD *)(v193 - 8);
  v191 = *(_QWORD *)(v185 + 64);
  v14 = __chkstk_darwin(v193);
  v182 = (char *)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v192 = (char *)&v137 - v16;
  v17 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v17);
  v19 = (char *)&v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_10001A9A8(&qword_1010EEDC8);
  v189 = *(_QWORD **)(v186 - 8);
  __chkstk_darwin(v186);
  v139 = (char *)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_10001A9A8(&qword_1010EEDD0);
  v149 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v140 = (char *)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_10001A9A8(&qword_1010EEDD8);
  v153 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v141 = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_10001A9A8(&qword_1010EEDE0);
  v156 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v148 = (char *)&v137 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_10001A9A8(&qword_1010EEDE8);
  v159 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v150 = (char *)&v137 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_10001A9A8(&qword_1010EEDF0);
  v162 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v154 = (char *)&v137 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_10001A9A8(&qword_1010EEDF8);
  v164 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v157 = (char *)&v137 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_10001A9A8(&qword_1010EEE00);
  v166 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v160 = (char *)&v137 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_10001A9A8(&qword_1010EEE08);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v152 = (char *)&v137 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_10001A9A8(&qword_1010EEE10);
  v172 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v171 = (char *)&v137 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_10001A9A8(&qword_1010EEE18);
  v175 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v174 = (char *)&v137 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10001A9A8(&qword_1010EEE20);
  v178 = *(_QWORD *)(v31 - 8);
  v179 = v31;
  __chkstk_darwin(v31);
  v190 = (char *)&v137 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a1[14];
  v34 = a1[15];
  a1[14] = a2;
  a1[15] = a3;
  sub_10001BD08(a2, a3);
  sub_10001EF3C(v33, v34);
  *(_BYTE *)(*(_QWORD *)(a1[8] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
           + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair) = a4;
  v35 = type metadata accessor for AnalyticsEvent(0);
  v36 = (char *)swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  swift_defaultActor_initialize(v36);
  v37 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v36 + 14) = v37;
  UUID.init()(v37);
  v38 = &v36[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v39 = type metadata accessor for DispatchTime(0);
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
  v40(v38, 1, 1, v39);
  v40(&v36[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v39);
  *((_QWORD *)v36 + 15) = 0xD00000000000002CLL;
  *((_QWORD *)v36 + 16) = 0x8000000100EC7FD0;
  a1[24] = v36;
  swift_retain();
  swift_release();
  type metadata accessor for Transaction(0);
  v41 = swift_allocObject(&unk_101058680, 25, 7);
  *(_QWORD *)(v41 + 16) = v36;
  *(_BYTE *)(v41 + 24) = a5;
  v177 = v36;
  swift_retain();
  static Transaction.asyncTask(name:block:)("AirPodsLEPairAnalytics", 22, 2, &unk_1010EEE30, v41);
  swift_release();
  v42 = type metadata accessor for AccessoryDiscoverySession(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v43 = sub_1004276D0();
  v44 = swift_allocObject(&unk_1010586A8, 24, 7);
  *(_QWORD *)(v44 + 16) = 0;
  v45 = a6;
  v167 = v43;
  v46 = (void *)sub_100427E88(a6);
  v196 = (id)a1[2];
  v47 = v196;
  v197 = v46;
  v195 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v188 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 56);
  v188(v19, 1, 1, v195);
  v138 = v47;
  v48 = sub_10001A9A8((uint64_t *)&unk_1010FB990);
  v49 = sub_10001F6FC();
  v187 = v49;
  v50 = sub_1000193A4(&qword_1010EEE38, (uint64_t *)&unk_1010FB990, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v194 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v51 = v139;
  Publisher.receive<A>(on:options:)(&v196, v19, v48, v49, v50, v194);
  sub_100004048((uint64_t)v19, &qword_1010EECC8);

  swift_release();
  v52 = v185;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v185 + 16);
  v54 = v192;
  v181 = v45;
  v55 = v45;
  v56 = v193;
  v145 = v53;
  v53(v192, v55, v193);
  v57 = *(unsigned __int8 *)(v52 + 80);
  v58 = v52;
  v142 = ~v57;
  v59 = (v57 + 24) & ~v57;
  v143 = v57;
  v60 = (v191 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  v144 = v57 | 7;
  v61 = swift_allocObject(&unk_1010586D0, v60 + 8, v57 | 7);
  *(_QWORD *)(v61 + 16) = a1;
  v146 = *(void (**)(uint64_t, char *, uint64_t))(v58 + 32);
  v146(v61 + v59, v54, v56);
  *(_QWORD *)(v61 + v60) = v44;
  v62 = type metadata accessor for Peripheral(0);
  v63 = sub_1000193A4(&qword_1010EEE40, &qword_1010EEDC8, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  v168 = v44;
  swift_retain();
  v64 = v140;
  v65 = v186;
  v184 = v62;
  Publisher.compactMap<A>(_:)(sub_1000FA2D8, v61, v186, v62, v63);
  swift_release();
  ((void (*)(char *, uint64_t))v189[1])(v51, v65);
  v66 = swift_retain();
  v67 = static Subscribers.Demand.unlimited.getter(v66);
  v68 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v185 = v68;
  v69 = sub_1000193A4(&qword_1010EEE48, &qword_1010EEDD0, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v186 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v70 = v141;
  v71 = v147;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v67, sub_1000FA33C, a1, v147, v62, v68, v69, v186);
  v189 = a1;
  swift_release();
  (*(void (**)(char *, uint64_t))(v149 + 8))(v64, v71);
  v72 = v138;
  v197 = v138;
  v73 = (uint64_t)v19;
  v74 = v19;
  v75 = v195;
  v76 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v188;
  v188(v74, 1, 1, v195);
  v77 = sub_1000193A4(&qword_1010EEE50, &qword_1010EEDD8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v78 = v72;
  v79 = v148;
  v80 = v151;
  v81 = v194;
  Publisher.receive<A>(on:options:)(&v197, v73, v151, v187, v77, v194);
  sub_100004048(v73, &qword_1010EECC8);

  v82 = (*(uint64_t (**)(char *, uint64_t))(v153 + 8))(v70, v80);
  v83 = static Subscribers.Demand.unlimited.getter(v82);
  v84 = sub_1000193A4(&qword_1010EEE58, &qword_1010EEDE0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v85 = v150;
  v86 = v155;
  v87 = v184;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v83, sub_1000E01BC, 0, v155, v184, v185, v84, v186);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v79, v86);
  v197 = v78;
  v76(v73, 1, 1, v75);
  v88 = sub_1000193A4(&qword_1010EEE60, &qword_1010EEDE8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v89 = v78;
  v90 = v154;
  v91 = v158;
  v92 = v187;
  Publisher.receive<A>(on:options:)(&v197, v73, v158, v187, v88, v81);
  sub_100004048(v73, &qword_1010EECC8);

  v93 = (*(uint64_t (**)(char *, uint64_t))(v159 + 8))(v85, v91);
  v94 = static Subscribers.Demand.unlimited.getter(v93);
  v95 = sub_1000193A4(&qword_1010EEE68, &qword_1010EEDF0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v96 = v157;
  v97 = v161;
  v98 = v87;
  v99 = v152;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v94, sub_1000E0260, 0, v161, v98, v185, v95, v186);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v90, v97);
  v197 = v89;
  v76(v73, 1, 1, v195);
  v100 = sub_1000193A4(&qword_1010EEE70, &qword_1010EEDF8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v101 = v89;
  v102 = v160;
  v103 = v163;
  Publisher.receive<A>(on:options:)(&v197, v73, v163, v92, v100, v194);
  sub_100004048(v73, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v164 + 8))(v96, v103);
  v104 = sub_1000193A4(&qword_1010EEE78, &qword_1010EEE00, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v105 = v99;
  v106 = v165;
  Publisher.compactMap<A>(_:)(sub_1000E0680, 0, v165, v184, v104);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v102, v106);
  if (qword_1010E9960 != -1)
    swift_once(&qword_1010E9960, sub_1000DD950);
  v107 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v108 = sub_10001A9E8(v107, (uint64_t)qword_1010EE828);
  v197 = v101;
  v188((char *)v73, 1, 1, v195);
  v109 = sub_1000193A4(&qword_1010EEE80, &qword_1010EEE08, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v110 = v101;
  v111 = v171;
  v112 = v170;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v108, &v197, v73, sub_1000FC3D0, 0, v170, v92, v109, v194);
  sub_100004048(v73, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v169 + 8))(v105, v112);
  v113 = sub_10001A9A8(&qword_1011074A0);
  v114 = sub_1000193A4(&qword_1010EEE88, &qword_1010EEE10, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v115 = v174;
  v116 = v173;
  Publisher.map<A>(_:)(sub_1000E068C, 0, v173, v113, v114);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v111, v116);
  v117 = sub_10001A9A8(&qword_1010EEE90);
  v118 = sub_1000193A4(&qword_1010EEE98, &qword_1010EEE18, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v119 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
  v120 = v176;
  Publisher.catch<A>(_:)(sub_1000E069C, 0, v176, v117, v118, v119);
  (*(void (**)(char *, uint64_t))(v175 + 8))(v115, v120);
  v121 = swift_allocObject(&unk_101056588, 24, 7);
  swift_weakInit(v121 + 16, v189);
  v123 = v192;
  v122 = v193;
  v124 = v145;
  v145(v192, v180, v193);
  v125 = v182;
  v124(v182, v181, v122);
  v126 = (v143 + 48) & v142;
  v127 = (v191 + v143 + v126) & v142;
  v128 = (char *)swift_allocObject(&unk_1010586F8, v127 + v191, v144);
  v129 = v183;
  *((_QWORD *)v128 + 2) = v121;
  *((_QWORD *)v128 + 3) = v129;
  v130 = v168;
  *((_QWORD *)v128 + 4) = v167;
  *((_QWORD *)v128 + 5) = v130;
  v131 = (void (*)(char *, char *, uint64_t))v146;
  v146((uint64_t)&v128[v126], v123, v122);
  v131(&v128[v127], v125, v122);
  v132 = sub_1000193A4(&qword_1010EEEA8, &qword_1010EEE20, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  swift_retain();
  v133 = v179;
  v134 = v190;
  v135 = Publisher<>.sink(receiveValue:)(sub_1000FA3F0, v128, v179, v132);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v178 + 8))(v134, v133);
  v189[17] = v135;
  swift_release();
  return swift_release();
}

uint64_t sub_1000DF918(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v4;

  *(_BYTE *)(v2 + 64) = a2;
  *(_QWORD *)(v2 + 40) = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 48) = swift_task_alloc(v4);
  *(_QWORD *)(v2 + 56) = swift_task_alloc(v4);
  return swift_task_switch(sub_1000DF98C, a1, 0);
}

uint64_t sub_1000DF98C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[6];
  v2 = v1[7];
  v4 = v1[5];
  static DispatchTime.now()(a1);
  v5 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
  sub_100005CF0(v2, v3, &qword_1010EBE20);
  v6 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 2, 33, 0);
  sub_100004084(v3, v6, &qword_1010EBE20);
  swift_endAccess(v1 + 2);
  return swift_task_switch(sub_1000DFA5C, v4, 0);
}

uint64_t sub_1000DFA5C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100CBF9C0(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000DFAB8(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  char *v35;
  id v36;
  void *v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  void *v40;
  id v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _BYTE v70[16];
  uint64_t v71;
  uint64_t v72;

  v67 = a3;
  v68 = a5;
  v8 = type metadata accessor for UUID(0);
  v65 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v64 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v63 = (char *)&v58 - v11;
  v12 = type metadata accessor for MACAddress(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7E28);
  v19 = v16;
  v66 = v18;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v59 = v15;
    v60 = v8;
    v22 = swift_slowAlloc(12, -1);
    v58 = a2;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(8, -1);
    v61 = a4;
    v25 = (_QWORD *)v24;
    *(_DWORD *)v23 = 138543362;
    v69 = v19;
    v26 = v19;
    v62 = v12;
    v27 = v26;
    v15 = v59;
    v8 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v23 + 4, v23 + 12);
    *v25 = v19;

    v12 = v62;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Discovered %{public}@", v23, 0xCu);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v25, 1, v28);
    v29 = v25;
    a4 = v61;
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
  __chkstk_darwin(v30);
  v31 = v67;
  *(&v58 - 2) = v67;
  *(&v58 - 1) = v32;
  sub_10001A9A8(&qword_101110700);
  Lock.callAsFunction<A>(_:)(sub_1000FA494);
  v33 = v69;
  if (!v69)
  {
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v31, v12);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(22, -1);
      v46 = v15;
      v47 = swift_slowAlloc(32, -1);
      v69 = (char *)v47;
      *(_DWORD *)v45 = 141558275;
      v71 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2081;
      v48 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v12, v48);
      v71 = sub_100016940(v49, v50, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v46, v12);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Missing connected peripheral for %{private,mask.hash}s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }

    goto LABEL_16;
  }
  v34 = objc_msgSend(*(id *)&v69[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
  v35 = v63;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

  v36 = objc_msgSend(v19, "identifier");
  v37 = v19;
  v38 = v64;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

  LOBYTE(v36) = static UUID.== infix(_:_:)(v35, v38);
  v39 = *(void (**)(char *, uint64_t))(v65 + 8);
  v39(v38, v8);
  v39(v35, v8);
  if ((v36 & 1) == 0)
  {
    v51 = v37;
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v54 = 138543362;
      v69 = v51;
      v56 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v54 + 4, v54 + 12);
      *v55 = v51;

      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Ignoring accessory %{public}@", v54, 0xCu);
      v57 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v55, 1, v57);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

    }
LABEL_16:
    v33 = 0;
    goto LABEL_17;
  }
  sub_1007885B0(0xD000000000000015, 0x8000000100EC8040);
  swift_beginAccess(a4 + 16, &v69, 1, 0);
  v40 = *(void **)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v37;
  v41 = v37;

LABEL_17:
  *v68 = v33;
}

uint64_t sub_1000E0114@<X0>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v4, &v10);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionHideFromBTSettings);
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  v7 = sub_1006B8B10(inited);
  v8 = sub_100E0799C(v3, v7);
  result = swift_bridgeObjectRelease();
  *a2 = v8;
  return result;
}

uint64_t sub_1000E01BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[72];

  v2 = sub_10001A9A8(&qword_1010ED4E8);
  inited = swift_initStackObject(v2, v7);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 56) = &type metadata for BAServiceIdentifier;
  *(_QWORD *)(inited + 64) = &off_101077A98;
  *(_BYTE *)(inited + 32) = 1;
  v4 = sub_10078921C(inited);
  swift_setDeallocating(inited);
  v5 = sub_10001A9A8(&qword_1010ED4F0);
  result = swift_arrayDestroy(inited + 32, 1, v5);
  *a1 = v4;
  return result;
}

uint64_t sub_1000E0260@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject **v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  unint64_t v37;
  uint64_t v38;
  NSObject **v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45[16];
  uint64_t *v46;
  char v47[24];
  uint64_t v48;
  _QWORD v49[4];

  v4 = sub_10001A9A8(&qword_1010EEEB0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (char *)*a1;
  v49[2] = &type metadata for BAServiceIdentifier;
  v49[3] = &off_101077A98;
  LOBYTE(v48) = 1;
  v13 = (uint64_t *)&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v47, 0, 0);
  v14 = *v13;
  v46 = &v48;
  swift_bridgeObjectRetain(v14);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)v45, v14);
  v16 = v15;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v48);
  if (v16)
  {
    v17 = sub_1007ED9A8((uint64_t)&off_101048F78);
    v18 = swift_allocObject(&unk_101058720, 32, 7);
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = v17;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    swift_retain();
    v20 = swift_bridgeObjectRetain(v17);
    v48 = Future.init(_:)(sub_1000FA48C, v18, v20);
    v21 = sub_1000193A4((unint64_t *)&qword_101121800, (uint64_t *)&unk_1010FBA90, (const char *)&protocol conformance descriptor for Future<A, B>);
    v22 = Publisher.eraseToAnyPublisher()(v19, v21);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    v44 = v5;
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B7E28);
    v25 = v12;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v42 = v8;
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = (NSObject **)swift_slowAlloc(8, -1);
      v43 = a2;
      v40 = v28;
      *(_DWORD *)v28 = 138412290;
      v48 = (uint64_t)v25;
      v29 = v25;
      v41 = v4;
      v30 = v29;
      v8 = v42;
      a2 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v28 + 4, v28 + 12);
      v31 = v39;
      *v39 = v25;

      v32 = v27;
      v33 = v40;
      v4 = v41;
      _os_log_impl((void *)&_mh_execute_header, v26, v32, "No FindMy service for %@", v40, 0xCu);
      v34 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v31, 1, v34);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {

      v26 = v25;
    }

    v48 = (uint64_t)v25;
    v35 = type metadata accessor for Peripheral(0);
    v36 = v25;
    Just.init(_:)(&v48, v35);
    v37 = sub_100059390();
    Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v4, &type metadata for CentralManager.Error, v37);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v4);
    v38 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v22 = Publisher.eraseToAnyPublisher()(v8, v38);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *a2 = v22;
  return result;
}

id sub_1000E0680@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

id sub_1000E068C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 41) = 0;
  return v2;
}

uint64_t sub_1000E069C(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[48];

  sub_100059280(a1, (uint64_t)v3);
  v3[41] = 1;
  v1 = sub_10001A9A8(&qword_1011074A0);
  return Just.init(_:)(v3, v1);
}

void sub_1000E06EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  _BYTE v40[16];
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[4];
  uint64_t v45;
  _QWORD v46[6];
  _QWORD v47[3];
  ValueMetadata *v48;
  _UNKNOWN **v49;
  _QWORD v50[5];
  char v51;
  _BYTE v52[32];

  v43 = a7;
  v11 = a2 + 16;
  swift_beginAccess(a2 + 16, v52, 0, 0);
  if (!swift_weakLoadStrong(v11))
    return;
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v50, &qword_1011074A0);
  if ((v51 & 1) == 0)
  {
    v43 = a6;
    v21 = (char *)v50[0];
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B7E28);
    sub_1007885B0(0xD000000000000013, 0x8000000100EC8020);
    v48 = &type metadata for BAServiceIdentifier;
    v49 = &off_101077A98;
    LOBYTE(v47[0]) = 1;
    v23 = (uint64_t *)&v21[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
    swift_beginAccess(&v21[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v46, 0, 0);
    v24 = *v23;
    __chkstk_darwin(v25);
    v41 = v47;
    swift_bridgeObjectRetain(v24);
    sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FA448, (uint64_t)v40, v24);
    v27 = v26;
    swift_bridgeObjectRelease();
    v28 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
    if (v27)
    {
      v42 = a4;
      v48 = &type metadata for BACharacteristicIdentifier.FindMy;
      v49 = &off_101077A78;
      LOBYTE(v47[0]) = 0;
      swift_beginAccess(v27 + 40, v44, 0, 0);
      v29 = *(_QWORD *)(v27 + 40);
      __chkstk_darwin(v30);
      v41 = v47;
      swift_bridgeObjectRetain(v29);
      sub_100A77748((uint64_t (*)(uint64_t *))sub_1000FA464, (uint64_t)v40, v29);
      v32 = v31;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
      if (v32)
      {
        swift_beginAccess(a5 + 16, v47, 0, 0);
        v33 = v42;
        if (!*(_QWORD *)(a5 + 16))
        {
          __break(1u);
          return;
        }
        v34 = *(id *)(a5 + 16);
        sub_1000E0E7C(v32, v21, v34, v43);

        sub_1000E3C08(v33, 0);
        swift_release();
        swift_release();
        goto LABEL_19;
      }
      v28 = swift_release();
      a4 = v42;
    }
    v35 = Logger.logObject.getter(v28);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = a4;
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "No pairing characteristic!", v38, 2u);
      v39 = v38;
      a4 = v37;
      swift_slowDealloc(v39, -1, -1);
    }

    sub_1000E3C08(a4, 1);
LABEL_19:
    swift_release();
    return;
  }
  sub_100059244((uint64_t)v50, (uint64_t)v47);
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7E28);
  v13 = sub_100059280(v47, (uint64_t)v46);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v44[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v18 = sub_100059390();
    v19 = Error.localizedDescription.getter(&type metadata for CentralManager.Error, v18);
    v45 = sub_100016940(v19, v20, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    sub_1000593D4(v46);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Peripheral discovery error: %{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    sub_1000593D4(v46);
  }

  sub_1000E0CF8(a6, v43);
  sub_1000E3C08(a4, 1);
  swift_release();
  sub_1000593D4(v47);
}

uint64_t sub_1000E0C14@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000E0C28(a1, a2);
}

uint64_t sub_1000E0C28@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(a1 + 16);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
    *a2 = *(_BYTE *)(a1 + 184);
  else
    __break(1u);
  return result;
}

uint64_t sub_1000E0CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v2 + 16);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    v15 = sub_1000F8428();
    v16 = swift_allocError(&type metadata for AirPodsLEPairingManager.AirPodsLEPairingManagerError, v15, 0, 0);
    *v17 = 3;
    v18 = type metadata accessor for MACAddress(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v7, a2, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v7, 0, 1, v18);
    sub_1000F6EB4(v16, a1, (uint64_t)v7);
    sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010F9890);
    return swift_errorRelease(v16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000E0E7C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void (*v20)(_QWORD *);
  void (*v21)(_QWORD *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  const char *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(_QWORD *, uint64_t);
  void (*v86)(_QWORD *, _QWORD, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  unsigned int v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[5];
  char v101;

  v96 = a3;
  v97 = a2;
  v87 = a1;
  v6 = *v4;
  v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v8 = __chkstk_darwin(v7);
  v89 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v88 = (uint64_t)&v83 - v10;
  v11 = type metadata accessor for MACAddress(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94 = v4;
  v19 = (void *)v4[2];
  *v18 = v19;
  v20 = *(void (**)(_QWORD *))(v16 + 104);
  v91 = enum case for DispatchPredicate.onQueue(_:);
  v20(v18);
  v90 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  v21 = *(void (**)(_QWORD *, uint64_t))(v16 + 8);
  v92 = v18;
  v93 = v15;
  v21(v18, v15);
  if ((v19 & 1) != 0)
  {
    v86 = (void (*)(_QWORD *, _QWORD, uint64_t))v20;
    if (qword_1010EA328 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_3:
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7E28);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  v95 = v23;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v84 = a4;
  v83 = v6;
  v85 = v21;
  if (v27)
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v100[0] = v29;
    *(_DWORD *)v28 = 136446210;
    v30 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v11, v30);
    v98 = sub_100016940(v31, v32, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Start pairing AirPods. classicMACAddress: %{public}s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  v33 = v96;
  v34 = v97;
  sub_1007885B0(0, 0xE000000000000000);
  v35 = objc_msgSend(v33, "discoveredMetadata");
  v36 = objc_msgSend(v35, "productData");

  v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v39 = v38;

  sub_1001EE65C(v37, v39);
  if (v41 >> 60 == 15)
  {
    v42 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Invalid product data!", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }
    goto LABEL_21;
  }
  v45 = v40;
  v46 = v41;
  v47 = objc_msgSend(v33, "productInformation");
  if (!v47)
  {
    v42 = Logger.logObject.getter(0);
    v57 = static os_log_type_t.error.getter(v42);
    if (!os_log_type_enabled(v42, v57))
    {
      sub_10001EF3C(v45, v46);
LABEL_21:

      return;
    }
    v58 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v57, "Missing product info!", v58, 2u);
    swift_slowDealloc(v58, -1, -1);

    goto LABEL_24;
  }
  v48 = v47;
  v49 = objc_msgSend(v47, "eligibleForPairing");
  if (!(_DWORD)v49)
  {
    v53 = Logger.logObject.getter(v49);
    v54 = static os_log_type_t.error.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      v56 = "Not eligible for pairing!";
      goto LABEL_18;
    }
LABEL_19:
    sub_10001EF3C(v45, v46);

    return;
  }
  v50 = (void *)v94[7];
  v94[7] = v34;
  v51 = v34;

  sub_1000E5188((uint64_t)v100);
  if ((v101 & 1) != 0)
  {
    v52 = sub_100004048((uint64_t)v100, &qword_1010EECC0);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      v56 = "Failed to create pairing coordinator!";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v53, v54, v56, v55, 2u);
      swift_slowDealloc(v55, -1, -1);

LABEL_24:
      sub_10001EF3C(v45, v46);
      return;
    }
    goto LABEL_19;
  }
  v59 = v100[0];
  v60 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v61 = *(_QWORD *)(v100[0] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  v62 = *(_QWORD *)(v61 + 104);
  v63 = *(_QWORD *)(v61 + 112);
  *(_QWORD *)(v61 + 104) = v45;
  *(_QWORD *)(v61 + 112) = v46;
  sub_10001BBBC(v45, v46);
  sub_10001EF3C(v62, v63);
  v64 = *(_QWORD *)(v59 + v60);
  swift_retain();
  v65 = v88;
  sub_100D14464(v88);
  v66 = type metadata accessor for AccessoryProductInfo(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 0, 1, v66);
  v97 = v48;
  v67 = v89;
  sub_100005CF0(v65, v89, (uint64_t *)&unk_10111C0A0);
  v68 = v64 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess(v64 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, v100, 33, 0);
  sub_100004084(v67, v68, (uint64_t *)&unk_10111C0A0);
  swift_endAccess(v100);
  swift_release();
  v69 = *(_QWORD *)(v59 + v60);
  swift_retain();
  v70 = objc_msgSend(v33, "discoveredMetadata");
  v71 = objc_msgSend(v70, "firmwareVersion");

  v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
  v74 = v73;

  *(_QWORD *)(v69 + 88) = v72;
  *(_QWORD *)(v69 + 96) = v74;
  swift_release();
  swift_bridgeObjectRelease();
  v76 = v92;
  v75 = v93;
  v77 = v90;
  *v92 = v90;
  v86(v76, v91, v75);
  v78 = v77;
  LOBYTE(v77) = _dispatchPreconditionTest(_:)(v76);
  v85(v76, v75);
  if ((v77 & 1) != 0)
  {
    v79 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v79);
    v80 = v87;
    *(&v83 - 4) = (uint64_t)v94;
    *(&v83 - 3) = v80;
    v81 = v84;
    v82 = v83;
    *(&v83 - 2) = v84;
    *(&v83 - 1) = v82;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AirPodsLEPairingManager.handleNotify", 66, 2, sub_1000F9D60, &v83 - 6, &type metadata for () + 1);
    sub_1000F7988(v80, v81);

    swift_release();
    goto LABEL_24;
  }
  __break(1u);
}

uint64_t sub_1000E1694(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94[2];
  id v95;

  v93 = a4;
  v87 = a5;
  v91 = a1;
  v7 = type metadata accessor for MACAddress(0);
  v89 = *(_QWORD *)(v7 - 8);
  v90 = v7;
  __chkstk_darwin(v7);
  v86 = v8;
  v88 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v9);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_10001A9A8(&qword_1010EECD0);
  v74 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EECD8);
  v75 = *(_QWORD *)(v14 - 8);
  v76 = v14;
  __chkstk_darwin(v14);
  v72 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010EECE0);
  v78 = *(_QWORD *)(v16 - 8);
  v79 = v16;
  __chkstk_darwin(v16);
  v77 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010EECE8);
  v81 = *(_QWORD *)(v18 - 8);
  v82 = v18;
  __chkstk_darwin(v18);
  v80 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010EECF0);
  v84 = *(_QWORD *)(v20 - 8);
  v85 = v20;
  __chkstk_darwin(v20);
  v83 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = (id)sub_100E00E3C(0, a3);
  v94[0] = *(id *)(a2 + 16);
  v22 = v94[0];
  v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v70(v11, 1, 1, v23);
  v69 = v22;
  v24 = sub_10001A9A8(&qword_1010EEBE8);
  v25 = sub_10001F6FC();
  v26 = sub_1000193A4(&qword_1010EEBF0, &qword_1010EEBE8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v27 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v71 = v25;
  v68 = v27;
  Publisher.receive<A>(on:options:)(v94, v11, v24, v25, v26, v27);
  sub_100004048((uint64_t)v11, &qword_1010EECC8);

  swift_release();
  v28 = swift_allocObject(&unk_101058518, 32, 7);
  v29 = v93;
  *(_QWORD *)(v28 + 16) = a2;
  *(_QWORD *)(v28 + 24) = v29;
  v92 = a2;
  swift_retain();
  v30 = swift_retain();
  v31 = static Subscribers.Demand.unlimited.getter(v30);
  v32 = sub_10001A9A8(&qword_1010EEC08);
  v33 = sub_1000193A4(&qword_1010EECF8, &qword_1010EECD0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v34 = v72;
  v35 = sub_1000193A4(&qword_1010EED00, &qword_1010EEC08, (const char *)&protocol conformance descriptor for Future<A, B>);
  v36 = v73;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v31, sub_1000F9DA8, v28, v73, &type metadata for AirPodsLEPairingCommand, v32, v33, v35);
  swift_release();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v13, v36);
  if (qword_1010E9960 != -1)
    swift_once(&qword_1010E9960, sub_1000DD950);
  v37 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v38 = sub_10001A9E8(v37, (uint64_t)qword_1010EE828);
  v39 = v69;
  v95 = v69;
  v70(v11, 1, 1, v23);
  v40 = sub_1000193A4(&qword_1010EED08, &qword_1010EECD8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v41 = v39;
  v42 = v77;
  v43 = v38;
  v44 = v76;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v43, &v95, v11, sub_1000FC3D0, 0, v76, v71, v40, v68);
  sub_100004048((uint64_t)v11, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v75 + 8))(v34, v44);
  v45 = sub_10001A9A8(&qword_1010EEC00);
  v46 = sub_1000193A4(&qword_1010EED10, &qword_1010EECE0, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v47 = v79;
  v48 = v80;
  Publisher.map<A>(_:)(sub_1000E1ED8, 0, v79, v45, v46);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v42, v47);
  v49 = sub_10001A9A8(&qword_1010EED18);
  v50 = sub_1000193A4(&qword_1010EED20, &qword_1010EECE8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v51 = sub_1000193A4(&qword_1010EED28, &qword_1010EED18, (const char *)&protocol conformance descriptor for Just<A>);
  v52 = v82;
  v53 = v83;
  Publisher.catch<A>(_:)(sub_1000E1EDC, 0, v82, v49, v50, v51);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v48, v52);
  v54 = swift_allocObject(&unk_101056588, 24, 7);
  v55 = v92;
  swift_weakInit(v54 + 16, v92);
  v57 = v88;
  v56 = v89;
  v58 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v88, v87, v90);
  v59 = *(unsigned __int8 *)(v56 + 80);
  v60 = (v59 + 40) & ~v59;
  v61 = (char *)swift_allocObject(&unk_101058540, v60 + v86, v59 | 7);
  *((_QWORD *)v61 + 2) = v54;
  v62 = v93;
  *((_QWORD *)v61 + 3) = v91;
  *((_QWORD *)v61 + 4) = v62;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(&v61[v60], v57, v58);
  v63 = sub_1000193A4(&qword_1010EED30, &qword_1010EECF0, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  v64 = v85;
  v65 = Publisher<>.sink(receiveValue:)(sub_1000F9DB4, v61, v85, v63);
  swift_release();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v53, v64);
  *(_QWORD *)(v55 + 88) = v65;
  return swift_release();
}

uint64_t sub_1000E1DA8@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[224];
  _BYTE v12[216];

  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7E28);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Getting beacon group data...", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  sub_1000F9DC0((uint64_t)v12);
  sub_1000F7F88((uint64_t)v12, (uint64_t)v11);
  v11[216] = 0;
  v9 = sub_1000E551C((uint64_t)v11, a1);
  result = sub_100004048((uint64_t)v11, &qword_1010EEC00);
  *a2 = v9;
  return result;
}

uint64_t sub_1000E1EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[27];
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];
  _BYTE v40[224];
  _BYTE v41[32];

  v9 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v41, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v13 = result;
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v40, &qword_1010EEC00);
    if ((v40[216] & 1) != 0)
    {
      sub_100059244((uint64_t)v40, (uint64_t)v36);
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v14 = type metadata accessor for Logger(0);
      sub_10001A9E8(v14, (uint64_t)qword_1011B7E28);
      v15 = sub_100059280(v36, (uint64_t)v39);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc(12, -1);
        v34 = a4;
        v19 = (uint8_t *)v18;
        v20 = swift_slowAlloc(32, -1);
        v38 = v20;
        *(_DWORD *)v19 = 136446210;
        v35 = a5;
        sub_100E01294();
        v37 = sub_100016940(v21, v22, &v38);
        a5 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v19 + 4, v19 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(v39);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to write initial pairing data. Error %{public}s", v19, 0xCu);
        swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        v23 = v19;
        a4 = v34;
        swift_slowDealloc(v23, -1, -1);
      }
      else
      {
        sub_1000593D4(v39);
      }

      sub_1000E3D9C(a4);
      v29 = sub_100059390();
      v30 = swift_allocError(&type metadata for CentralManager.Error, v29, 0, 0);
      sub_100059280(v36, v31);
      v32 = type metadata accessor for MACAddress(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v11, 1, 1, v32);
      sub_1000F6EB4(v30, a5, (uint64_t)v11);
      swift_release();
      sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F9890);
      sub_1000593D4(v36);
      return swift_errorRelease(v30);
    }
    else
    {
      sub_1000F7F88((uint64_t)v40, (uint64_t)v36);
      sub_1000F84B4((uint64_t)v36, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v24 = type metadata accessor for Logger(0);
      v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B7E28);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Requested beacon group data. Waiting for AirPods to respond.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      *(_QWORD *)(v13 + 88) = 0;
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000E22A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (**v74)(char *, uint64_t);
  uint64_t v75;
  void (**v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(void);
  uint64_t v112;
  char *v113;
  void (**v114)(char *, uint64_t);
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  id v140;
  void (**v141)(char *, uint64_t);

  v138 = a2;
  v134 = a4;
  v130 = a1;
  v136 = type metadata accessor for MACAddress(0);
  v122 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v133 = v5;
  v135 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v6);
  v139 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_10001A9A8(&qword_1010EED38);
  v114 = *(void (***)(char *, uint64_t))(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = (_QWORD *)sub_10001A9A8(&qword_1010EED40);
  v117 = *(v118 - 1);
  __chkstk_darwin(v118);
  v116 = (unint64_t)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EED48);
  v120 = *(_QWORD *)(v10 - 8);
  v121 = v10;
  __chkstk_darwin(v10);
  v119 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EED50);
  v124 = *(_QWORD *)(v12 - 8);
  v125 = v12;
  __chkstk_darwin(v12);
  v123 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EED58);
  v126 = *(_QWORD *)(v14 - 8);
  v127 = v14;
  __chkstk_darwin(v14);
  v132 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010EED60);
  v128 = *(_QWORD *)(v16 - 8);
  v129 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010EED68);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010EED70);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a3 + 16);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010FB900);
  v131 = a3;
  v112 = v28;
  v29 = v137;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9DF4, a3, v27, &type metadata for () + 1, v28);
  if (v29)
  {
    swift_errorRelease(v29);
    v30 = 0;
    v31 = v138;
  }
  else
  {
    v103 = v18;
    v104 = v22;
    v105 = v20;
    v106 = v19;
    v107 = 0;
    v108 = v26;
    v109 = v24;
    v110 = v23;
    v31 = v138;
    v140 = *(id *)(v138 + 16);
    v32 = v140;
    v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v111 = *(void (**)(void))(*(_QWORD *)(v33 - 8) + 56);
    v34 = (uint64_t)v139;
    v111();
    v35 = sub_10001F6FC();
    v137 = v35;
    v36 = sub_1000193A4(&qword_1010FB910, (uint64_t *)&unk_1010FB900, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v37 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v102 = v37;
    v101 = v32;
    v38 = v113;
    Publisher.receive<A>(on:options:)(&v140, v34, v112, v35, v36, v37);
    sub_100004048(v34, &qword_1010EECC8);

    swift_release();
    v39 = swift_retain();
    v40 = static Subscribers.Demand.unlimited.getter(v39);
    v41 = sub_10001A9A8(&qword_1010EC530);
    v42 = sub_10001A9A8(&qword_1010EEC28);
    v43 = sub_1000193A4(&qword_1010EED78, &qword_1010EED38, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v44 = sub_1000193A4(&qword_1010EED80, &qword_1010EEC28, (const char *)&protocol conformance descriptor for Future<A, B>);
    v45 = v116;
    v46 = v115;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v40, sub_1000F9E0C, v31, v115, v41, v42, v43, v44);
    swift_release();
    v114[1](v38, v46);
    v47 = v101;
    v141 = (void (**)(char *, uint64_t))v101;
    v48 = (uint64_t)v139;
    v115 = v33;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v111)(v139, 1, 1, v33);
    v49 = sub_1000193A4(&qword_1010EED88, &qword_1010EED40, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v114 = v47;
    v50 = v119;
    v51 = v118;
    v52 = v102;
    Publisher.receive<A>(on:options:)(&v141, v48, v118, v137, v49, v102);
    sub_100004048(v48, &qword_1010EECC8);

    (*(void (**)(unint64_t, _QWORD *))(v117 + 8))(v45, v51);
    v53 = v122;
    v54 = v135;
    v55 = v136;
    v118 = *(_QWORD **)(v122 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v118)(v135, v134, v136);
    v56 = *(unsigned __int8 *)(v53 + 80);
    v116 = ~v56;
    v57 = (v56 + 24) & ~v56;
    v117 = v56 | 7;
    v58 = swift_allocObject(&unk_101058568, v57 + v133, v56 | 7);
    *(_QWORD *)(v58 + 16) = v31;
    v122 = *(_QWORD *)(v53 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v122)(v58 + v57, v54, v55);
    swift_retain();
    v59 = sub_10001A9A8(&qword_1010EEC00);
    v60 = sub_1000193A4(&qword_1010EED90, &qword_1010EED48, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v61 = v123;
    v62 = v121;
    v113 = (char *)v59;
    Publisher.map<A>(_:)(sub_1000F9EAC, v58, v121, v59, v60);
    swift_release();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v50, v62);
    v63 = swift_allocObject(&unk_101058590, 32, 7);
    v64 = v131;
    *(_QWORD *)(v63 + 16) = v31;
    *(_QWORD *)(v63 + 24) = v64;
    swift_retain();
    v65 = swift_retain();
    v66 = static Subscribers.Demand.unlimited.getter(v65);
    v67 = sub_10001A9A8(&qword_1010EEC08);
    v68 = sub_1000193A4(&qword_1010EED98, &qword_1010EED50, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v69 = sub_1000193A4(&qword_1010EED00, &qword_1010EEC08, (const char *)&protocol conformance descriptor for Future<A, B>);
    v70 = v125;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v66, sub_1000F9F10, v63, v125, &type metadata for AirPodsLEPairingCommand, v67, v68, v69);
    swift_release();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v61, v70);
    v71 = (uint64_t)v139;
    if (qword_1010E9958 != -1)
      swift_once(&qword_1010E9958, sub_1000DD944);
    v72 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
    v73 = sub_10001A9E8(v72, (uint64_t)qword_1010EE810);
    v74 = v114;
    v141 = v114;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v111)(v71, 1, 1, v115);
    v75 = sub_1000193A4(&qword_1010EEDA0, &qword_1010EED58, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v76 = v74;
    v99 = v52;
    v77 = v103;
    v78 = v73;
    v79 = v127;
    v80 = v75;
    v81 = v132;
    Publisher.timeout<A>(_:scheduler:options:customError:)(v78, &v141, v71, sub_1000E2DBC, 0, v127, v137, v80, v99);
    sub_100004048(v71, &qword_1010EECC8);

    (*(void (**)(char *, uint64_t))(v126 + 8))(v81, v79);
    v82 = sub_1000193A4(&qword_1010EEDA8, &qword_1010EED60, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    v83 = v104;
    v84 = v129;
    Publisher.map<A>(_:)(sub_1000E1ED8, 0, v129, v113, v82);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v77, v84);
    v85 = sub_10001A9A8(&qword_1010EED18);
    v86 = sub_1000193A4(&qword_1010EEDB0, &qword_1010EED68, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v87 = sub_1000193A4(&qword_1010EED28, &qword_1010EED18, (const char *)&protocol conformance descriptor for Just<A>);
    v88 = v108;
    v89 = v106;
    Publisher.catch<A>(_:)(sub_1000E1EDC, 0, v106, v85, v86, v87);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v83, v89);
    v90 = swift_allocObject(&unk_101056588, 24, 7);
    swift_weakInit(v90 + 16, v31);
    v91 = v135;
    v92 = v136;
    ((void (*)(char *, uint64_t, uint64_t))v118)(v135, v134, v136);
    v93 = (v56 + 40) & v116;
    v94 = (_QWORD *)swift_allocObject(&unk_1010585B8, v93 + v133, v117);
    v94[2] = v90;
    v95 = v131;
    v94[3] = v130;
    v94[4] = v95;
    ((void (*)(char *, char *, uint64_t))v122)((char *)v94 + v93, v91, v92);
    v96 = sub_1000193A4(&qword_1010EEDB8, &qword_1010EED70, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    swift_retain();
    v97 = v110;
    v30 = Publisher<>.sink(receiveValue:)(sub_1000F9FC4, v94, v110, v96);
    swift_release();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v88, v97);
  }
  *(_QWORD *)(v31 + 80) = v30;
  return swift_release();
}

double sub_1000E2DBC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 10;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 11;
  return result;
}

uint64_t sub_1000E2DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[216];

  sub_1000F7F88(a1, (uint64_t)v4);
  sub_1000F7F88((uint64_t)v4, a2);
  *(_BYTE *)(a2 + 216) = 0;
  return sub_1000F84B4((uint64_t)v4, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
}

uint64_t sub_1000E2E30(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[224];

  sub_100059280(a1, (uint64_t)v3);
  v3[216] = 1;
  v1 = sub_10001A9A8(&qword_1010EEC00);
  return Just.init(_:)(v3, v1);
}

uint64_t sub_1000E2E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v8 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v8);
  if (result)
  {
    Transaction.capture()();
    sub_1000E2F08(a1, a4, a5);
    return swift_release();
  }
  return result;
}

void sub_1000E2F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  char *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  int v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118[27];
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[232];

  v4 = v3;
  v114 = a2;
  v115 = a1;
  v6 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v109 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v9);
  v110 = (uint64_t)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconGroup(0);
  v107 = *(_QWORD *)(v11 - 8);
  v108 = v11;
  __chkstk_darwin(v11);
  v106 = (uint64_t)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v13);
  v113 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v4 + 16);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v21 & 1) != 0)
  {
    v111 = v7;
    if (qword_1010EA328 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_3:
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7E28);
  v24 = sub_10000F9B8(v115, (uint64_t)v121, &qword_1010EEC00);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v112 = v6;
  if (v27)
  {
    v28 = swift_slowAlloc(12, -1);
    v103 = v22;
    v29 = (uint8_t *)v28;
    v30 = swift_slowAlloc(32, -1);
    v105 = v4;
    v31 = v30;
    v118[0] = v30;
    *(_DWORD *)v29 = 136315138;
    v104 = v23;
    sub_10000F9B8((uint64_t)v121, (uint64_t)&v116, &qword_1010EEC00);
    v32 = sub_10001A9A8(&qword_1010EEC00);
    v33 = String.init<A>(describing:)(&v116, v32);
    v116 = sub_100016940(v33, v34, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v121, &qword_1010EEC00);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "handlePublisherUpdate %s", v29, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    v35 = v31;
    v4 = v105;
    swift_slowDealloc(v35, -1, -1);
    v36 = v29;
    v22 = v103;
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    sub_100004048((uint64_t)v121, &qword_1010EEC00);
  }

  sub_10000F9B8(v115, (uint64_t)v121, &qword_1010EEC00);
  if ((v121[216] & 1) != 0)
  {
    sub_100059244((uint64_t)v121, (uint64_t)&v116);
    sub_100059280(&v116, (uint64_t)v118);
    v37 = swift_retain_n(v4, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v115 = a3;
      v41 = v40;
      v42 = swift_slowAlloc(64, -1);
      v120 = v42;
      *(_DWORD *)v41 = 136446466;
      sub_100E01294();
      v119 = sub_100016940(v43, v44, &v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v41 + 4, v41 + 12);
      swift_bridgeObjectRelease();
      sub_1000593D4(v118);
      *(_WORD *)(v41 + 12) = 2082;
      v45 = sub_100C9706C(*(_BYTE *)(*(_QWORD *)(v4 + 64)
                                   + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
      v119 = sub_100016940(v45, v46, &v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v41 + 14, v41 + 22);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Pairing error %{public}s). Pairing state: %{public}s)", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      v47 = v41;
      a3 = v115;
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {
      sub_1000593D4(v118);

      swift_release_n(v4, 2);
    }
    v54 = v111;
    v53 = v112;
    v55 = sub_100059390();
    v56 = swift_allocError(&type metadata for CentralManager.Error, v55, 0, 0);
    sub_100059280(&v116, v57);
    v58 = (uint64_t)v113;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v113, 1, 1, v53);
    sub_1000F6EB4(v56, a3, v58);
    sub_100004048(v58, (uint64_t *)&unk_1010F9890);
    swift_errorRelease(v56);
    sub_1000E3D9C(v114);
    v60 = *(void **)(v4 + 56);
    if (v60)
    {
      v61 = *(_QWORD *)(v4 + 64);
      if (*(unsigned __int8 *)(v61 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) >= 4u)
      {
        v62 = v60;
        v63 = v109;
        sub_100786FB4(v109);
        v64 = v110;
        sub_10081F5CC((uint64_t)v63, v110);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v63, v53);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v64, 1, v108) == 1)
        {
          sub_1000593D4(&v116);

          sub_100004048(v64, (uint64_t *)&unk_1010FF7F0);
          return;
        }
        v89 = v106;
        sub_1000126EC(v64, v106, type metadata accessor for OwnedBeaconGroup);
        v90 = (uint64_t *)(*(_QWORD *)(v61 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                        + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
        v91 = v90[1];
        if (v91 >> 60 == 15)
        {

        }
        else
        {
          v118[0] = *v90;
          v97 = v118[0];
          v118[1] = v91;
          sub_10001BBBC(v118[0], v91);
          v98 = sub_100035530();
          if ((DataProtocol.isNull.getter(&type metadata for Data, v98) & 1) != 0)
          {

          }
          else
          {
            v99 = Data.trimmed.getter(v97, v91);
            v101 = v100;
            sub_1000F3914(v99, v100, v89);

            sub_10001BC14(v99, v101);
          }
          sub_10001EF3C(v97, v91);
        }
        sub_1000126B0(v89, type metadata accessor for OwnedBeaconGroup);
      }
    }
    else
    {
      v65 = Logger.logObject.getter(v59);
      v66 = static os_log_type_t.error.getter(v65);
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "Missing peripheral to clean up pending pairing!", v67, 2u);
        swift_slowDealloc(v67, -1, -1);
      }

    }
    sub_1000593D4(&v116);
  }
  else
  {
    sub_1000F7F88((uint64_t)v121, (uint64_t)v118);
    sub_1000F7F88((uint64_t)v118, (uint64_t)&v116);
    v48 = sub_1000F9034((uint64_t)&v116);
    switch((int)v48)
    {
      case 1:
        v49 = sub_1000F9B34((uint64_t)&v116);
        v50 = Logger.logObject.getter(v49);
        v51 = static os_log_type_t.default.getter(v50);
        if (os_log_type_enabled(v50, v51))
        {
          v52 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Sent initiate pairing.", v52, 2u);
          swift_slowDealloc(v52, -1, -1);
        }

        sub_1000F84B4((uint64_t)v118, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        *(_BYTE *)(*(_QWORD *)(v4 + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 0;
        break;
      case 3:
        v75 = sub_1000F9B34((uint64_t)&v116);
        v76 = Logger.logObject.getter(v75);
        v77 = static os_log_type_t.default.getter(v76);
        if (os_log_type_enabled(v76, v77))
        {
          v78 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v78 = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "Sent finalize pairing.", v78, 2u);
          swift_slowDealloc(v78, -1, -1);
        }

        sub_1000F84B4((uint64_t)v118, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        *(_BYTE *)(*(_QWORD *)(v4 + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 4;
        break;
      case 5:
        if (qword_1010EA318 != -1)
          swift_once(&qword_1010EA318, sub_100B5E330);
        v79 = sub_10001A9E8(v22, (uint64_t)qword_1011B7DF8);
        v80 = Logger.logObject.getter(v79);
        v81 = static os_log_type_t.default.getter(v80);
        if (os_log_type_enabled(v80, v81))
        {
          v82 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v82 = 0;
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "Requested beacon group data.", v82, 2u);
          swift_slowDealloc(v82, -1, -1);
        }

        *(_BYTE *)(*(_QWORD *)(v4 + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 1;
        break;
      case 6:
        v83 = *(unsigned __int8 *)(v4 + 200);
        v84 = Logger.logObject.getter(v48);
        v85 = static os_log_type_t.default.getter(v84);
        v86 = os_log_type_enabled(v84, v85);
        if (v83 == 1)
        {
          if (v86)
          {
            v87 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v87 = 0;
            _os_log_impl((void *)&_mh_execute_header, v84, v85, "Sent pairing complete, skip ackRequest.", v87, 2u);
            swift_slowDealloc(v87, -1, -1);
          }

        }
        else
        {
          if (v86)
          {
            v92 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v92 = 0;
            _os_log_impl((void *)&_mh_execute_header, v84, v85, "Sent pairing complete, continue with ackRequest.", v92, 2u);
            swift_slowDealloc(v92, -1, -1);
          }

          sub_1000EE988(a3);
        }
        v93 = *(_QWORD *)(v4 + 64);
        if (*(_BYTE *)(v93 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) == 9)
        {
          v94 = Logger.logObject.getter(v88);
          v95 = static os_log_type_t.default.getter(v94);
          if (os_log_type_enabled(v94, v95))
          {
            v96 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v96 = 0;
            _os_log_impl((void *)&_mh_execute_header, v94, v95, "Pairing has been completed for all serial numbers.", v96, 2u);
            swift_slowDealloc(v96, -1, -1);
          }

        }
        else
        {
          *(_BYTE *)(v93 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 6;
        }
        sub_1000F6988();
        sub_1000E3D9C(v114);
        break;
      default:
        v68 = swift_retain_n(v4, 2);
        v69 = Logger.logObject.getter(v68);
        v70 = static os_log_type_t.error.getter(v69);
        if (os_log_type_enabled(v69, v70))
        {
          v71 = (uint8_t *)swift_slowAlloc(12, -1);
          v72 = swift_slowAlloc(32, -1);
          v120 = v72;
          *(_DWORD *)v71 = 136315138;
          v73 = sub_100C9706C(*(_BYTE *)(*(_QWORD *)(v4 + 64)
                                       + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
          v119 = sub_100016940(v73, v74, &v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v71 + 4, v71 + 12);
          swift_release_n(v4, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "Invalid pairing state %s!", v71, 0xCu);
          swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v72, -1, -1);
          swift_slowDealloc(v71, -1, -1);

        }
        else
        {

          swift_release_n(v4, 2);
        }
        sub_1000E3D9C(v114);
        sub_1000F84B4((uint64_t)v118, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        break;
    }
  }
}

void sub_1000E3C08(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v3 = v2;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v3 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    if (qword_1010EA328 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7E28);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "stopDiscovery", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  sub_100427C84();
  *(_QWORD *)(v3 + 136) = 0;
  swift_release();
  if ((a2 & 1) != 0)
    sub_1000E3D9C(0);
}

void sub_1000E3D9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint8_t *v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char v43;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v1 + 16);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v12(v7, v4);
  if ((v8 & 1) != 0)
  {
    v39 = v11;
    if (qword_1010EA328 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_3:
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7E28);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    v38 = a1;
    v18 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "cleanUp", v17, 2u);
    a1 = v38;
    swift_slowDealloc(v18, -1, -1);
  }

  *(_QWORD *)(v2 + 80) = 0;
  swift_release();
  *(_QWORD *)(v2 + 88) = 0;
  swift_release();
  if (a1)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9D48, a1, *(_QWORD *)(a1 + 16), &type metadata for () + 1, &type metadata for () + 1);
    v40 = 12;
    v41 = 0u;
    v42 = 0u;
    v43 = 11;
    sub_1007C63BC(&v40);
    sub_1000593D4(&v40);
  }
  v19 = v39;
  *v7 = v39;
  v10(v7, v9, v4);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v4);
  if ((v19 & 1) != 0)
  {
    *(_BYTE *)(v2 + 184) = 0;
    v21 = *(_QWORD *)(v2 + 160);
    v22 = *(_QWORD *)(v2 + 168);
    *(_OWORD *)(v2 + 160) = xmmword_100E22B20;
    sub_10001EF3C(v21, v22);
    v23 = swift_retain();
    PassthroughSubject.send(_:)(v23);
    swift_release();
    LOBYTE(v40) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)(&v40);
    v24 = swift_release();
    v25 = *(void **)(v2 + 56);
    if (!v25)
    {
      v34 = Logger.logObject.getter(v24);
      v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Missing peripheral to clean up!", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }
      goto LABEL_15;
    }
    v26 = v25;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Disconnecting on cleanUp", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v30 = *(_QWORD *)(v2 + 40);
    v40 = sub_100E08534(v26);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
    v32 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_1000E422C, 0, v31, v32);
    v33 = swift_release();
    if (*(_BYTE *)(v30 + OBJC_IVAR____TtC12searchpartyd14CentralManager_isSharedPairingAgent) == 1)
    {
      __chkstk_darwin(v33);
      *(&v37 - 2) = v30;
      type metadata accessor for SharedPairingAgent();
      Lock.callAsFunction<A>(_:)(sub_1000F9D30);
      v34 = v40;
      sub_100BF49E4(v26);

LABEL_15:
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000E422C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[48];
  _BYTE v13[48];
  id v14;
  _BYTE v15[40];

  sub_10000F9B8(a1, (uint64_t)&v14, &qword_1011074A0);
  if ((v15[33] & 1) != 0)
  {
    sub_100059244((uint64_t)&v14, (uint64_t)v13);
    v1 = sub_100059390();
    swift_willThrowTypedImpl(v13, &type metadata for CentralManager.Error, v1);
    sub_100059244((uint64_t)v13, (uint64_t)v12);
    v2 = swift_allocError(&type metadata for CentralManager.Error, v1, 0, 0);
    sub_100059244((uint64_t)v12, v3);
    swift_errorRetain(v2);
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7E28);
    v5 = swift_errorRetain(v2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138543362;
      v10 = (void *)_convertErrorToNSError(_:)(v2);
      v14 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v8 + 4, v8 + 12);
      *v9 = v10;
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Disconnection failure: %{public}@!", v8, 0xCu);
      v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v2);
    }
    else
    {
      swift_errorRelease(v2);
      swift_errorRelease(v2);

    }
    swift_errorRelease(v2);
  }
  else
  {

  }
}

void sub_1000E4448(uint8_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint8_t *v51;
  int v52;
  int v53;
  uint64_t My;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint8_t *v87;
  unint64_t v88;
  uint64_t *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char v128[24];
  _OWORD v129[6];

  v117 = a2;
  v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessoryProductInfo(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v119 = a1;
  v14 = *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo]
      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess(v14, v128, 0, 0);
  sub_10000F9B8(v14, (uint64_t)v9, (uint64_t *)&unk_10111C0A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_10111C0A0);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7DF8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v123 = v20;
      *(_DWORD *)v19 = 136446210;
      *(_QWORD *)&v129[0] = sub_100016940(0xD00000000000003ELL, 0x8000000100EC7EC0, (uint64_t *)&v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v129, (char *)v129 + 8, v19 + 4, v19 + 12);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s Missing productInfo!", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    *(_QWORD *)a4 = 7;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    goto LABEL_25;
  }
  v115 = a3;
  sub_1000126EC((uint64_t)v9, (uint64_t)v13, type metadata accessor for AccessoryProductInfo);
  v21 = (uint64_t *)&v13[*(int *)(v10 + 92)];
  v22 = *v21;
  v23 = v21[1];
  swift_retain();
  sub_10001BD08(v22, v23);
  v24 = sub_100B60988(v22, v23);
  v26 = v25;
  sub_10001EF3C(v22, v23);
  swift_release();
  if (v26 >> 60 == 15)
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7DF8);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to generate E1 blob.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

LABEL_24:
    sub_1000126B0((uint64_t)v13, type metadata accessor for AccessoryProductInfo);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_QWORD *)(a4 + 32) = 0;
LABEL_25:
    *(_BYTE *)(a4 + 40) = 11;
    *(_BYTE *)(a4 + 216) = 1;
    return;
  }
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v114 = type metadata accessor for Logger(0);
  sub_10001A9E8(v114, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(v24, v26);
  v32 = sub_10001BBBC(v24, v26);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v111 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v123 = v111;
    v110 = v35;
    *(_DWORD *)v35 = 136315138;
    *(_QWORD *)&v109 = v35 + 4;
    sub_10001BBBC(v24, v26);
    v36 = v13;
    v37 = a4;
    v38 = Data.hexString.getter(v24, v26);
    v40 = v39;
    sub_10001EF3C(v24, v26);
    v41 = v38;
    a4 = v37;
    v13 = v36;
    *(_QWORD *)&v129[0] = sub_100016940(v41, v40, (uint64_t *)&v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v129, (char *)v129 + 8, v109, v35 + 12);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v24, v26);
    sub_10001EF3C(v24, v26);
    v42 = v110;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "E1: %s", v110, 0xCu);
    v43 = v111;
    swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    sub_10001EF3C(v24, v26);
    sub_10001EF3C(v24, v26);
  }

  v44 = v119;
  v45 = *(_QWORD *)&v119[v118] + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId;
  v46 = *(_QWORD *)(v45 + 8);
  if (v46 >> 60 == 15)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v47 = sub_10001A9E8(v114, (uint64_t)qword_1011B7E28);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Missing FindMyNetworkId to generate init pairing.", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    sub_10001EF3C(v24, v26);
    goto LABEL_24;
  }
  v51 = *(uint8_t **)v45;
  v52 = *(unsigned __int8 *)(v116 + 200);
  v113 = v13;
  if (v52 == 1)
  {
    sub_10001BBBC((uint64_t)v51, v46);
    v53 = 0;
  }
  else
  {
    My = type metadata accessor for Feature.FindMy(0);
    *((_QWORD *)&v124 + 1) = My;
    *(_QWORD *)&v125 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v55 = sub_100018F08(&v123);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v55, enum case for Feature.FindMy.alphaWasp(_:), My);
    sub_10001BBBC((uint64_t)v51, v46);
    LOBYTE(My) = isFeatureEnabled(_:)(&v123);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v123);
    v53 = My & 1;
  }
  v116 = a4;
  v56 = *(_QWORD *)&v44[v118];
  v58 = *(_QWORD *)(v56 + 16);
  v57 = *(_QWORD *)(v56 + 24);
  v104 = v53;
  LOBYTE(v123) = v53;
  sub_10001BD08(v24, v26);
  sub_10001BD08((uint64_t)v51, v46);
  sub_10001BBBC(v58, v57);
  v59 = v117;
  sub_10001BBBC(v117, v115);
  v60 = sub_100059570();
  FixedWidthInteger.data.getter(&type metadata for UInt8, v60);
  v61 = v57;
  v62 = v59;
  v111 = v46;
  sub_1007311FC(v58, v61);
  v108 = v129[1];
  v109 = v129[0];
  v106 = v129[3];
  v107 = v129[2];
  v105 = v129[4];
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v63 = sub_10001A9E8(v114, (uint64_t)qword_1011B7E28);
  v64 = v119;
  v65 = swift_retain_n(v119, 2);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter(v66);
  v68 = os_log_type_enabled(v66, v67);
  v112 = v24;
  v110 = v51;
  v114 = v63;
  if (v68)
  {
    v69 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = swift_slowAlloc(32, -1);
    v103 = v70;
    *(_DWORD *)v69 = 136315138;
    *(_QWORD *)&v123 = v70;
    v102 = v69 + 4;
    v71 = *(_QWORD *)&v64[v118];
    v73 = *(_QWORD *)(v71 + 16);
    v72 = *(_QWORD *)(v71 + 24);
    sub_10001BBBC(v73, v72);
    v74 = Data.hexString.getter(v73, v72);
    v76 = v75;
    v77 = v72;
    v62 = v117;
    sub_10001BC14(v73, v77);
    v120 = sub_100016940(v74, v76, (uint64_t *)&v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v102, v69 + 12);
    swift_release_n(v119, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "sessionNonce: %s", v69, 0xCu);
    v78 = v103;
    swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v69, -1, -1);

  }
  else
  {

    swift_release_n(v64, 2);
  }
  v79 = v115;
  sub_10001BBBC(v62, v115);
  v80 = sub_10001BBBC(v62, v79);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.default.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    v83 = (uint8_t *)swift_slowAlloc(12, -1);
    v84 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v123 = v84;
    *(_DWORD *)v83 = 136315138;
    v119 = v83 + 4;
    v85 = Data.hexString.getter(v62, v79);
    v120 = sub_100016940(v85, v86, (uint64_t *)&v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v119, v83 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(v62, v79);
    sub_10001BC14(v62, v79);
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "companionSessionNonce: %s", v83, 0xCu);
    swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v83, -1, -1);
  }
  else
  {
    sub_10001BC14(v62, v79);
    sub_10001BC14(v62, v79);
  }

  v87 = v110;
  v88 = v111;
  v123 = v109;
  v124 = v108;
  v125 = v107;
  v126 = v106;
  v127 = v105;
  sub_1000F9C90((uint64_t)&v123);
  sub_10001BD08((uint64_t)v87, v88);
  sub_10001BD08((uint64_t)v87, v88);
  v89 = sub_10005A4CC((uint64_t *)v129, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  v90 = Logger.logObject.getter(v89);
  v91 = static os_log_type_t.default.getter(v90);
  if (os_log_type_enabled(v90, v91))
  {
    v92 = swift_slowAlloc(25, -1);
    v93 = swift_slowAlloc(32, -1);
    v119 = (uint8_t *)v26;
    v94 = v93;
    v122 = v93;
    *(_DWORD *)v92 = 141558531;
    v120 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v92 + 4, v92 + 12);
    *(_WORD *)(v92 + 12) = 2081;
    v120 = (uint64_t)v87;
    v121 = v88;
    v95 = sub_100059684();
    v96 = RawRepresentable<>.hexString.getter(&type metadata for FindMyNetworkId, v95);
    v120 = sub_100016940(v96, v97, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v92 + 14, v92 + 22);
    swift_bridgeObjectRelease();
    sub_10001EF3C((uint64_t)v87, v88);
    sub_10001EF3C((uint64_t)v87, v88);
    *(_WORD *)(v92 + 22) = 256;
    LOBYTE(v120) = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, (char *)&v120 + 1, v92 + 24, v92 + 25);
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "generateInitPairingPayload request success: fmNetworkId: %{private,mask.hash}s, accountHint: %hhu.", (uint8_t *)v92, 0x19u);
    swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1, -1);
    swift_slowDealloc(v92, -1, -1);

    sub_10001EF3C((uint64_t)v87, v88);
    sub_10005A4CC((uint64_t *)v129, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    v98 = v112;
    v99 = (unint64_t)v119;
  }
  else
  {

    sub_10001EF3C((uint64_t)v87, v88);
    sub_10001EF3C((uint64_t)v87, v88);
    sub_10001BC14((uint64_t)v87, v88);
    sub_10005A4CC((uint64_t *)v129, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    v98 = v112;
    v99 = v26;
  }
  sub_10001EF3C(v98, v99);
  sub_1000126B0((uint64_t)v113, type metadata accessor for AccessoryProductInfo);
  v100 = v116;
  sub_1000F7F88((uint64_t)&v123, v116);
  *(_BYTE *)(v100 + 216) = 0;
}

void sub_1000E5188(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint8_t **)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 16);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = sub_100B656E4();
  if (v11 >> 60 == 15)
  {
    if (qword_1010EA328 == -1)
    {
LABEL_4:
      v12 = type metadata accessor for Logger(0);
      v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7E28);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.error.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to generate FindMyNetworkId.", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
      }

      *(_QWORD *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_WORD *)(a1 + 40) = 267;
      return;
    }
LABEL_14:
    swift_once(&qword_1010EA328, sub_100B5E37C);
    goto LABEL_4;
  }
  v17 = v10;
  v18 = v11;
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B7E28);
  sub_10001BBBC(v17, v18);
  v20 = sub_10001BBBC(v17, v18);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v35 = v2;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v37 = v25;
    *(_DWORD *)v24 = 136315138;
    v34 = v24 + 4;
    sub_10001BBBC(v17, v18);
    v26 = Data.hexString.getter(v17, v18);
    v28 = v27;
    sub_10001EF3C(v17, v18);
    v36 = sub_100016940(v26, v28, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v34, v24 + 12);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v17, v18);
    sub_10001EF3C(v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "findMyNetworkId: %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v29 = v24;
    v2 = v35;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    sub_10001EF3C(v17, v18);
    sub_10001EF3C(v17, v18);
  }

  v30 = *(_QWORD *)(v2 + 64);
  v31 = (uint64_t *)(*(_QWORD *)(v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
  v32 = *v31;
  v33 = v31[1];
  *v31 = v17;
  v31[1] = v18;
  sub_10001EF3C(v32, v33);
  *(_QWORD *)a1 = v30;
  *(_BYTE *)(a1 + 41) = 0;
  swift_retain();
}

uint64_t sub_1000E551C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[224];
  _QWORD v29[28];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + 16);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1010EA328, sub_100B5E37C);
    goto LABEL_5;
  }
  sub_10000F9B8(a1, (uint64_t)v28, &qword_1010EEC00);
  if ((v28[216] & 1) != 0)
  {
    sub_100059244((uint64_t)v28, (uint64_t)v29);
    sub_100059280(v29, (uint64_t)&v25);
    v12 = swift_allocObject(&unk_1010584F0, 57, 7);
    sub_100059244((uint64_t)&v25, v12 + 16);
    v13 = sub_10001A9A8(&qword_1010EEC08);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = Future.init(_:)(sub_1000F9C30, v12, v14);
    sub_1000593D4(v29);
    return v15;
  }
  sub_1000F7F88((uint64_t)v28, (uint64_t)v29);
  if (qword_1010EA328 != -1)
    goto LABEL_11;
LABEL_5:
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B7E28);
  sub_1000F84B4((uint64_t)v29, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
  v17 = sub_1000F84B4((uint64_t)v29, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v27 = v21;
    *(_DWORD *)v20 = 136446210;
    sub_1000F7F88((uint64_t)v29, (uint64_t)&v25);
    sub_1000F84B4((uint64_t)v29, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    v22 = String.init<A>(describing:)(&v25, &type metadata for AirPodsLEPairingCommand);
    v25 = sub_100016940(v22, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    sub_1000F84B4((uint64_t)v29, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    sub_1000F84B4((uint64_t)v29, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Sending %{public}s)", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    sub_1000F84B4((uint64_t)v29, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    sub_1000F84B4((uint64_t)v29, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
  }

  v15 = sub_1000F562C((uint64_t)v29, a2);
  sub_1000F84B4((uint64_t)v29, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
  return v15;
}

uint64_t sub_1000E58B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  objc_class *v114;
  objc_class *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  NSObject *v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  NSObject *v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  _OWORD *v139;
  NSObject *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  os_log_type_t v149;
  NSObject *v150;
  uint8_t *v151;
  uint64_t v152;
  NSObject *v153;
  int v154;
  os_log_t v155;
  os_log_t v156;
  uint64_t *v157;
  uint64_t v158;
  NSObject *v159;
  NSObject *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  NSObject *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  uint8_t *v183;
  uint8_t *v184;
  uint64_t result;
  uint64_t *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  NSObject *v190;
  os_log_type_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint8_t *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  NSObject *v199;
  os_log_type_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint8_t *v203;
  uint64_t v204;
  os_log_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  NSObject *v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint8_t *v218;
  uint64_t (*v219)(uint64_t, uint64_t, uint64_t);
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  unsigned __int128 v232;
  uint64_t *v233;
  NSObject *v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint8_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t *v246;
  NSObject *v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint8_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int128 v261;
  char v262;
  unsigned __int128 v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  NSObject *v275;
  os_log_type_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  os_log_type_t v283;
  uint8_t *v284;
  uint64_t v285;
  char *v286;
  os_log_t v287;
  _QWORD *v288;
  os_log_t v289;
  uint64_t v290;
  uint64_t v291;
  NSObject *v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  os_log_t v302;
  uint8_t *v303;
  _QWORD *v304;
  os_log_t v305;
  uint64_t v306;
  uint64_t v307;
  NSObject *v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  NSObject *v318;
  uint8_t *v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  uint8_t *v323;
  void *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  id v329;
  uint64_t v330;
  NSObject *v331;
  uint64_t v332;
  uint64_t v333;
  NSObject *v334;
  os_log_type_t v335;
  _QWORD *v336;
  uint64_t v337;
  uint8_t *v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  unsigned __int128 v353;
  uint64_t *v354;
  NSObject *v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  uint8_t *v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  NSObject *v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  uint8_t *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  unsigned __int128 v389;
  uint64_t *v390;
  NSObject *v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  _QWORD *v398;
  uint8_t *v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  char *v403;
  uint64_t v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  unsigned __int128 v410;
  uint64_t *v411;
  NSObject *v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint8_t *v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  unsigned __int128 v431;
  uint64_t *v432;
  NSObject *v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  _QWORD *v440;
  uint8_t *v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  unsigned __int128 v452;
  uint64_t *v453;
  NSObject *v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  _QWORD *v461;
  uint8_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  unsigned __int128 v472;
  uint64_t v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  unsigned __int128 v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  os_log_t v491;
  uint8_t *v492;
  uint64_t v493;
  uint64_t v494;
  os_log_t v495;
  uint8_t *v496;
  uint64_t v497;
  uint64_t v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  unsigned __int128 v504;
  uint64_t v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  unsigned __int128 v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _QWORD *v522;
  os_log_t v523;
  uint8_t *v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  os_log_t v528;
  uint8_t *v529;
  unint64_t v530;
  uint64_t v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  unsigned __int128 v537;
  uint64_t *v538;
  NSObject *v539;
  os_log_type_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  _QWORD *v546;
  uint8_t *v547;
  uint64_t v548;
  NSObject *v549;
  NSObject *v550;
  uint64_t v551;
  unsigned __int128 v552;
  __int128 v553;
  uint64_t v554;
  unint64_t v555;
  __int128 v556;
  uint64_t *v557;
  uint64_t v558;
  unint64_t v559;
  __int128 v560;
  uint64_t *v561;
  uint64_t v562;
  unint64_t v563;
  __int128 v564;
  uint64_t *v565;
  uint64_t v566;
  unint64_t v567;
  __int128 v568;
  uint64_t *v569;
  uint64_t v570;
  unint64_t v571;
  __int128 v572;
  uint64_t *v573;
  uint64_t v574;
  unint64_t v575;
  __int128 v576;
  uint64_t *v577;
  uint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  __int128 v582;
  uint64_t *v583;
  uint64_t v584;
  unint64_t v585;
  __int128 v586;
  uint64_t *v587;
  uint64_t v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  unint64_t v594;
  char *v595;
  uint8_t *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  unint64_t v601;
  uint64_t v602;
  char *v603;
  uint64_t v604;
  uint64_t v605;
  NSObject *v606;
  int v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  _QWORD *v613;
  uint8_t *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  os_log_t v618;
  os_log_t v619;
  os_log_t v620;
  _QWORD *v621;
  os_log_t v622;
  os_log_t v623;
  uint64_t v624;
  char *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  NSObject *v629;
  os_log_type_t v630;
  _QWORD *v631;
  _BOOL4 v632;
  uint8_t *v633;
  uint64_t v634;
  char *v635;
  __int16 v636;
  __int16 v637;
  uint8_t *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  NSObject *v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  _QWORD *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t v654;
  os_log_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  NSObject *v660;
  int v661;
  uint64_t v662;
  char *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t *v671;
  os_log_t v672;
  uint64_t v673;
  uint64_t v674;
  _QWORD *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  char v681;
  uint64_t v682;
  uint64_t v683;
  char *v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  _QWORD *v694;
  NSObject *v695;
  NSObject *v696;
  uint8_t *v697;
  uint64_t v698;
  char *v699;
  NSObject *v700;
  os_log_t v701;
  char *v702;
  uint64_t v703;
  char *v704;
  uint64_t v705;
  uint64_t v706;
  NSObject *v707;
  int v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  _QWORD *v714;
  uint8_t *v715;
  uint64_t v716;
  char *v717;
  char *v718;
  uint8_t *v719;
  uint8_t *v720;
  uint64_t v721;
  os_log_t v722;
  NSObject *v723;
  uint8_t *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  os_log_t v728;
  uint64_t *v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t *v736;
  uint64_t v737;
  unint64_t v738;
  char *v739;
  uint64_t v740;
  uint64_t v741;
  NSObject *v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  _QWORD *v748;
  uint8_t *v750;
  uint64_t v751;
  uint64_t v752;
  char *v753;
  char *v754;
  uint64_t v755;
  NSObject *v756;
  os_log_type_t v757;
  _QWORD *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  _QWORD *v774;
  NSObject *v775;
  uint8_t *v776;
  NSObject *v777;
  uint64_t v778;
  uint64_t v779;
  char *v780;
  os_log_t v781;
  uint8_t *v782;
  os_log_t v783;
  void (*v784)(uint64_t, uint64_t);
  _OWORD *v785;
  unsigned __int128 v786;
  __int128 v787;
  _OWORD *v788;
  unsigned __int128 v789;
  __int128 v790;
  uint64_t *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  _QWORD *v801;
  os_log_t v802;
  uint8_t *v803;
  uint64_t v804;
  uint64_t v805;
  char *v806;
  os_log_t v807;
  uint8_t *v808;
  char *v809;
  char *v810;
  _OWORD *v811;
  unsigned __int128 v812;
  __int128 v813;
  uint64_t *v814;
  NSObject *v815;
  uint64_t v816;
  int v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  _QWORD *v823;
  uint8_t *v824;
  uint64_t v825;
  uint64_t *v826;
  uint8_t *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  os_log_t v831;
  char *v832;
  uint64_t v833;
  uint64_t v834;
  NSObject *v835;
  uint64_t v836;
  unint64_t v837;
  uint64_t v838;
  os_log_t v839;
  uint64_t *v840;
  uint64_t *v841;
  unsigned __int128 *v842;
  uint64_t v843;
  uint64_t v844;
  NSObject *v845;
  os_log_type_t v846;
  _QWORD *v847;
  char *v848;
  uint8_t *v849;
  char *v850;
  uint64_t v851;
  uint64_t *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  _QWORD *v861;
  uint8_t *v862;
  uint64_t v863;
  uint64_t v864;
  char *v865;
  char *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint8_t *v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  _QWORD *v895;
  os_log_t v896;
  os_log_t v897;
  os_log_t v898;
  uint8_t *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  os_log_t v904;
  uint64_t v905;
  uint8_t *v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t *v909;
  uint64_t v910;
  char *v911;
  uint64_t v912;
  NSObject *v913;
  os_log_type_t v914;
  _QWORD *v915;
  uint8_t *v916;
  uint8_t *v917;
  uint64_t v918;
  uint64_t *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  _QWORD *v923;
  uint64_t v924;
  uint64_t v925;
  char *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  char *v932;
  char *v933;
  uint64_t v934;
  uint64_t v935;
  char *v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t *v939;
  uint64_t v940;
  char *v941;
  char *v942;
  char *v943;
  char *v944;
  char *v945;
  char *v946;
  char *v947;
  char *v948;
  uint64_t v949;
  uint64_t v950;
  char *v951;
  uint64_t v952;
  char *v953;
  NSObject *v954;
  uint64_t v955;
  char *v956;
  uint64_t v957;
  char *v958;
  char *v959;
  char *v960;
  char *v961;
  uint64_t v962;
  char *v963;
  char *v964;
  char *v965;
  char *v966;
  char *v967;
  char *v968;
  char *v969;
  char *v970;
  uint64_t v971;
  unint64_t v972;
  char *v973;
  uint64_t v974;
  unint64_t v975;
  uint64_t v976;
  uint8_t *v977;
  char *v978;
  uint64_t v979;
  os_log_t v980;
  uint8_t *v981;
  uint64_t v982;
  uint8_t *v983;
  uint64_t v984;
  os_log_t v985;
  os_log_t v986;
  uint8_t *v987;
  uint64_t *v988;
  NSObject *v989;
  os_log_t v990;
  NSObject *v991;
  uint64_t v992;
  uint64_t v993;
  unsigned __int128 v994;
  unsigned __int128 v995;
  __int128 v996;
  __int128 v997;
  uint64_t (*v998)();
  uint64_t v999;
  unsigned __int128 v1000;
  unsigned __int128 v1001;
  __int128 v1002;
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  __int128 v1007;
  __int128 v1008;
  __int128 v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  uint64_t v1013;
  char v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint8_t *v1017;
  _BYTE v1018[224];
  _BYTE v1019[216];
  _BYTE v1020[48];
  unsigned __int128 v1021;
  unsigned __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  uint64_t v1034;
  _QWORD v1035[27];
  _QWORD v1036[28];

  v982 = a2;
  v988 = a3;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v5);
  v932 = (char *)&v924 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StandaloneBeacon(0);
  v927 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v928 = v9;
  v929 = (uint64_t)&v924 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v934 = (uint64_t)&v924 - v10;
  v11 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v11);
  v935 = (uint64_t)&v924 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v930 = type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult(0);
  v13 = __chkstk_darwin(v930);
  v931 = (uint64_t)&v924 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v940 = (uint64_t)&v924 - v15;
  v938 = sub_10001A9A8(&qword_1010EEC58);
  __chkstk_darwin(v938);
  v939 = (uint64_t *)((char *)&v924 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for OwnedBeaconGroup(0);
  v971 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v937 = (uint64_t)&v924 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v952 = (uint64_t)&v924 - v20;
  v21 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v21);
  v960 = (char *)&v924 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for MACAddress(0);
  v949 = *(_QWORD *)(v23 - 8);
  v950 = v23;
  __chkstk_darwin(v23);
  v948 = (char *)&v924 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v26 = __chkstk_darwin(v25);
  v955 = (uint64_t)&v924 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v957 = (uint64_t)&v924 - v29;
  v30 = __chkstk_darwin(v28);
  v962 = (uint64_t)&v924 - v31;
  __chkstk_darwin(v30);
  v956 = (char *)&v924 - v32;
  v33 = type metadata accessor for Logger(0);
  v992 = *(_QWORD *)(v33 - 8);
  v34 = __chkstk_darwin(v33);
  v959 = (char *)&v924 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v977 = (uint8_t *)&v924 - v37;
  v38 = __chkstk_darwin(v36);
  v991 = ((char *)&v924 - v39);
  v40 = __chkstk_darwin(v38);
  v986 = (os_log_t)((char *)&v924 - v41);
  v42 = __chkstk_darwin(v40);
  v964 = (char *)&v924 - v43;
  v44 = __chkstk_darwin(v42);
  v958 = (char *)&v924 - v45;
  v46 = __chkstk_darwin(v44);
  v953 = (char *)&v924 - v47;
  v48 = __chkstk_darwin(v46);
  v943 = (char *)&v924 - v49;
  v50 = __chkstk_darwin(v48);
  v936 = (char *)&v924 - v51;
  v52 = __chkstk_darwin(v50);
  v933 = (char *)&v924 - v53;
  v54 = __chkstk_darwin(v52);
  v926 = (char *)&v924 - v55;
  v56 = __chkstk_darwin(v54);
  v946 = (char *)&v924 - v57;
  v58 = __chkstk_darwin(v56);
  v951 = (char *)&v924 - v59;
  v60 = __chkstk_darwin(v58);
  v947 = (char *)&v924 - v61;
  v62 = __chkstk_darwin(v60);
  v985 = (os_log_t)((char *)&v924 - v63);
  v64 = __chkstk_darwin(v62);
  v979 = (uint64_t)&v924 - v65;
  v66 = __chkstk_darwin(v64);
  v944 = (char *)&v924 - v67;
  v68 = __chkstk_darwin(v66);
  v942 = (char *)&v924 - v69;
  v70 = __chkstk_darwin(v68);
  v941 = (char *)&v924 - v71;
  v72 = __chkstk_darwin(v70);
  v945 = (char *)&v924 - v73;
  v74 = __chkstk_darwin(v72);
  v961 = (char *)&v924 - v75;
  v76 = __chkstk_darwin(v74);
  v970 = (char *)&v924 - v77;
  v78 = __chkstk_darwin(v76);
  v976 = (uint64_t)&v924 - v79;
  v80 = __chkstk_darwin(v78);
  v975 = (unint64_t)&v924 - v81;
  v82 = __chkstk_darwin(v80);
  v974 = (uint64_t)&v924 - v83;
  v84 = __chkstk_darwin(v82);
  v969 = (char *)&v924 - v85;
  v86 = __chkstk_darwin(v84);
  v968 = (char *)&v924 - v87;
  v88 = __chkstk_darwin(v86);
  v967 = (char *)&v924 - v89;
  v90 = __chkstk_darwin(v88);
  v966 = (char *)&v924 - v91;
  v92 = __chkstk_darwin(v90);
  v965 = (char *)&v924 - v93;
  v94 = __chkstk_darwin(v92);
  v963 = (char *)&v924 - v95;
  v96 = __chkstk_darwin(v94);
  v972 = (unint64_t)&v924 - v97;
  v98 = __chkstk_darwin(v96);
  v973 = (char *)&v924 - v99;
  v100 = __chkstk_darwin(v98);
  v978 = (char *)&v924 - v101;
  v102 = __chkstk_darwin(v100);
  v981 = (uint8_t *)&v924 - v103;
  v104 = __chkstk_darwin(v102);
  v980 = (os_log_t)((char *)&v924 - v105);
  v106 = __chkstk_darwin(v104);
  v983 = (uint8_t *)&v924 - v107;
  __chkstk_darwin(v106);
  v109 = ((char *)&v924 - v108);
  v110 = type metadata accessor for DispatchPredicate(0);
  v111 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v113 = ((char *)&v924 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0));
  v984 = (uint64_t)v3;
  v114 = (objc_class *)*((_QWORD *)v3 + 2);
  v113->isa = v114;
  (*(void (**)(NSObject *, _QWORD, uint64_t))(v111 + 104))(v113, enum case for DispatchPredicate.onQueue(_:), v110);
  v115 = v114;
  LOBYTE(v114) = _dispatchPreconditionTest(_:)(v113);
  (*(void (**)(NSObject *, uint64_t))(v111 + 8))(v113, v110);
  if ((v114 & 1) == 0)
  {
    __break(1u);
    goto LABEL_180;
  }
  sub_100057DB8(a1, (uint64_t)v1020);
  v116 = sub_10001A9A8(&qword_1010EC530);
  v117 = swift_dynamicCast(v1019, v1020, v116, &type metadata for AirPodsLEPairingCommand, 6);
  v993 = v33;
  v118 = v33;
  if (!v117)
  {
    v136 = sub_100B5D428();
    v137 = v991;
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v992 + 16))(v991, v136, v33);
    sub_100057DB8(a1, (uint64_t)&v1000);
    v138 = swift_allocObject(&unk_101056718, 64, 7);
    v139 = sub_100057E20((__int128 *)&v1000, (_OWORD *)(v138 + 16));
    v140 = Logger.logObject.getter(v139);
    v141 = static os_log_type_t.error.getter(v140);
    v142 = swift_allocObject(&unk_101056740, 17, 7);
    *(_BYTE *)(v142 + 16) = 34;
    v143 = swift_allocObject(&unk_101056768, 17, 7);
    *(_BYTE *)(v143 + 16) = 8;
    v144 = swift_allocObject(&unk_101056790, 32, 7);
    *(_QWORD *)(v144 + 16) = sub_100057E38;
    *(_QWORD *)(v144 + 24) = v138;
    v145 = swift_allocObject(&unk_1010567B8, 32, 7);
    *(_QWORD *)(v145 + 16) = sub_10001D850;
    *(_QWORD *)(v145 + 24) = v144;
    v146 = sub_10001A9A8(&qword_1010EC538);
    v147 = swift_allocObject(v146, 80, 7);
    sub_100882D28(v147, 3);
    *v148 = sub_100057E50;
    v148[1] = v142;
    v148[2] = sub_10005CBC4;
    v148[3] = v143;
    v148[4] = sub_100057E68;
    v148[5] = v145;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v990) = v141;
    v149 = v141;
    v150 = v140;
    if (os_log_type_enabled(v140, v149))
    {
      v151 = (uint8_t *)sub_1006948A0(12);
      v152 = swift_slowAlloc(32, -1);
      v1035[0] = 0;
      *(_QWORD *)&v1021 = v152;
      *(_WORD *)v151 = 258;
      v1036[0] = v151 + 2;
      *(_QWORD *)&v1000 = sub_100057E50;
      *((_QWORD *)&v1000 + 1) = v142;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)v1036, (uint64_t)v1035, (uint64_t)&v1021);
      swift_release();
      *(_QWORD *)&v1000 = sub_10005CBC4;
      *((_QWORD *)&v1000 + 1) = v143;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)v1036, (uint64_t)v1035, (uint64_t)&v1021);
      swift_release();
      *(_QWORD *)&v1000 = sub_100057E68;
      *((_QWORD *)&v1000 + 1) = v145;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)v1036, (uint64_t)v1035, (uint64_t)&v1021);
      v137 = v991;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v150, (os_log_type_t)v990, "Invalid command from payload %{public}s", v151, 0xCu);
      swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v152, -1, -1);
      sub_100694894((uint64_t)v151);

    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
    }
    result = (*(uint64_t (**)(NSObject *, uint64_t))(v992 + 8))(v137, v993);
    v186 = v988;
    v187 = 6;
    goto LABEL_16;
  }
  v925 = v17;
  sub_1000F7F88((uint64_t)v1019, (uint64_t)v1035);
  sub_1000F7F88((uint64_t)v1019, (uint64_t)v1018);
  v119 = sub_100B5D428();
  v120 = *(NSObject **)(v992 + 16);
  v990 = v119;
  v991 = v120;
  ((void (*))v120)(v109);
  v121 = swift_allocObject(&unk_1010567E0, 232, 7);
  sub_1000F7F88((uint64_t)v1035, v121 + 16);
  v122 = sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
  v123 = Logger.logObject.getter(v122);
  v124 = static os_log_type_t.default.getter(v123);
  v989 = v109;
  v125 = v124;
  v126 = swift_allocObject(&unk_101056808, 17, 7);
  *(_BYTE *)(v126 + 16) = 34;
  v127 = swift_allocObject(&unk_101056830, 17, 7);
  *(_BYTE *)(v127 + 16) = 8;
  v128 = swift_allocObject(&unk_101056858, 32, 7);
  *(_QWORD *)(v128 + 16) = sub_1000F8FFC;
  *(_QWORD *)(v128 + 24) = v121;
  v129 = swift_allocObject(&unk_101056880, 32, 7);
  *(_QWORD *)(v129 + 16) = sub_10005CBA4;
  *(_QWORD *)(v129 + 24) = v128;
  v987 = (uint8_t *)sub_10001A9A8(&qword_1010EC538);
  v130 = swift_allocObject(v987, 80, 7);
  sub_100882D28(v130, 3);
  *v131 = sub_10005CBC4;
  v131[1] = v126;
  v131[2] = sub_10005CBC4;
  v131[3] = v127;
  v131[4] = sub_10005CBB4;
  v131[5] = v129;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  LODWORD(v954) = v125;
  if (os_log_type_enabled(v123, (os_log_type_t)v125))
  {
    v132 = v989;
    v133 = (uint8_t *)sub_1006948A0(12);
    v134 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v1021 = 0;
    *(_QWORD *)&v994 = v134;
    *(_WORD *)v133 = 258;
    v1036[0] = v133 + 2;
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v126;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)v1036, (uint64_t)&v1021, (uint64_t)&v994);
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v127;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)v1036, (uint64_t)&v1021, (uint64_t)&v994);
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBB4;
    *((_QWORD *)&v1000 + 1) = v129;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)v1036, (uint64_t)&v1021, (uint64_t)&v994);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v954, "Received command: %{public}s", v133, 0xCu);
    swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v134, -1, -1);
    sub_100694894((uint64_t)v133);

    v135 = v993;
    v989 = *(NSObject **)(v992 + 8);
    ((void (*)(NSObject *, uint64_t))v989)(v132, v993);
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    v153 = v989;
    v989 = *(NSObject **)(v992 + 8);
    ((void (*)(NSObject *, uint64_t))v989)(v153, v118);
    v135 = v118;
  }
  sub_1000F7F88((uint64_t)v1035, (uint64_t)v1036);
  v154 = sub_1000F9034((uint64_t)v1036);
  v156 = v985;
  v155 = v986;
  if (v154 != 4)
  {
    if (v154 != 2)
    {
      v954 = 0;
      if (!v154)
      {
        v157 = (uint64_t *)sub_1000F9B34((uint64_t)v1036);
        v158 = *v157;
        v159 = v157[1];
        v160 = v157[2];
        v161 = v157[3];
        ((void (*)(uint8_t *, os_log_t, uint64_t))v991)(v983, v990, v135);
        v162 = v135;
        v163 = (_QWORD *)swift_allocObject(&unk_101058018, 48, 7);
        v992 = v158;
        v163[2] = v158;
        v163[3] = v159;
        v985 = v160;
        v986 = v159;
        v163[4] = v160;
        v163[5] = v161;
        v979 = v161;
        sub_1000F7F88((uint64_t)v1018, (uint64_t)&v1021);
        v164 = (uint64_t *)sub_1000F9B34((uint64_t)&v1021);
        v165 = *v164;
        v166 = v164[1];
        v167 = v164[2];
        v168 = v164[3];
        sub_1000F7F88((uint64_t)v1018, (uint64_t)&v1000);
        v169 = (uint64_t *)sub_1000F9B34((uint64_t)&v1000);
        v170 = v169[2];
        v171 = v169[3];
        sub_10001BBBC(*v169, v169[1]);
        sub_10001BBBC(v170, v171);
        v974 = v165;
        v972 = v166;
        sub_10001BBBC(v165, v166);
        v975 = v168;
        v976 = v167;
        v172 = sub_10001BBBC(v167, v168);
        v173 = Logger.logObject.getter(v172);
        LODWORD(v168) = static os_log_type_t.default.getter(v173);
        v174 = swift_allocObject(&unk_101058040, 17, 7);
        *(_BYTE *)(v174 + 16) = 32;
        v175 = swift_allocObject(&unk_101058068, 17, 7);
        *(_BYTE *)(v175 + 16) = 8;
        v176 = swift_allocObject(&unk_101058090, 32, 7);
        *(_QWORD *)(v176 + 16) = sub_100059480;
        *(_QWORD *)(v176 + 24) = v163;
        v177 = swift_allocObject(&unk_1010580B8, 32, 7);
        *(_QWORD *)(v177 + 16) = sub_10005CBA4;
        *(_QWORD *)(v177 + 24) = v176;
        v178 = swift_allocObject(v987, 80, 7);
        sub_100882D28(v178, 3);
        *v179 = sub_10005CBC4;
        v179[1] = v174;
        v179[2] = sub_10005CBC4;
        v179[3] = v175;
        v179[4] = sub_10005CBB4;
        v179[5] = v177;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v970) = v168;
        if (os_log_type_enabled(v173, (os_log_type_t)v168))
        {
          v180 = sub_1006948A0(12);
          v181 = swift_slowAlloc(32, -1);
          v1017 = 0;
          v1016 = v181;
          *(_WORD *)v180 = 258;
          v998 = (uint64_t (*)())(v180 + 2);
          *(_QWORD *)&v994 = sub_10005CBC4;
          *((_QWORD *)&v994 + 1) = v174;
          v182 = v954;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
          if (v182)
            goto LABEL_193;
          swift_release();
          *(_QWORD *)&v994 = sub_10005CBC4;
          *((_QWORD *)&v994 + 1) = v175;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
          swift_release();
          *(_QWORD *)&v994 = sub_10005CBB4;
          *((_QWORD *)&v994 + 1) = v177;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
          v954 = 0;
          v183 = v983;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v173, (os_log_type_t)v970, "Received beacon group data %s", (uint8_t *)v180, 0xCu);
          swift_arrayDestroy(v181, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v181, -1, -1);
          sub_100694894(v180);

          v184 = v183;
          v162 = v993;
        }
        else
        {

          swift_release();
          swift_release();
          swift_release();
          v184 = v983;
        }
        ((void (*)(uint8_t *, uint64_t))v989)(v184, v162);
        v287 = v980;
        ((void (*)(os_log_t, os_log_t, uint64_t))v991)(v980, v990, v162);
        v288 = (_QWORD *)swift_allocObject(&unk_1010580E0, 48, 7);
        v289 = v986;
        v288[2] = v992;
        v288[3] = v289;
        v290 = v979;
        v288[4] = v985;
        v288[5] = v290;
        sub_10001BBBC(v974, v972);
        v291 = sub_10001BBBC(v976, v975);
        v292 = Logger.logObject.getter(v291);
        v293 = static os_log_type_t.debug.getter(v292);
        v294 = swift_allocObject(&unk_101058108, 17, 7);
        *(_BYTE *)(v294 + 16) = 32;
        v295 = swift_allocObject(&unk_101058130, 17, 7);
        *(_BYTE *)(v295 + 16) = 8;
        v296 = swift_allocObject(&unk_101058158, 32, 7);
        *(_QWORD *)(v296 + 16) = sub_100058F64;
        *(_QWORD *)(v296 + 24) = v288;
        v297 = swift_allocObject(&unk_101058180, 32, 7);
        *(_QWORD *)(v297 + 16) = sub_10005CBA4;
        *(_QWORD *)(v297 + 24) = v296;
        v298 = swift_allocObject(v987, 80, 7);
        sub_100882D28(v298, 3);
        *v299 = sub_10005CBC4;
        v299[1] = v294;
        v299[2] = sub_10005CBC4;
        v299[3] = v295;
        v299[4] = sub_10005CBB4;
        v299[5] = v297;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v983) = v293;
        if (os_log_type_enabled(v292, (os_log_type_t)v293))
        {
          v300 = sub_1006948A0(12);
          v301 = swift_slowAlloc(32, -1);
          v1017 = 0;
          v1016 = v301;
          *(_WORD *)v300 = 258;
          v998 = (uint64_t (*)())(v300 + 2);
          *(_QWORD *)&v994 = sub_10005CBC4;
          *((_QWORD *)&v994 + 1) = v294;
          v182 = v954;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
          if (v182)
            goto LABEL_193;
          swift_release();
          *(_QWORD *)&v994 = sub_10005CBC4;
          *((_QWORD *)&v994 + 1) = v295;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
          swift_release();
          *(_QWORD *)&v994 = sub_10005CBB4;
          *((_QWORD *)&v994 + 1) = v297;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
          v954 = 0;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v292, (os_log_type_t)v983, "numberOfBeacons: %s", (uint8_t *)v300, 0xCu);
          swift_arrayDestroy(v301, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v301, -1, -1);
          sub_100694894(v300);

          v302 = v980;
          v162 = v993;
        }
        else
        {

          swift_release();
          swift_release();
          swift_release();
          v302 = v287;
        }
        ((void (*)(os_log_t, uint64_t))v989)(v302, v162);
        v303 = v981;
        ((void (*)(uint8_t *, os_log_t, uint64_t))v991)(v981, v990, v162);
        v304 = (_QWORD *)swift_allocObject(&unk_1010581A8, 48, 7);
        v305 = v986;
        v304[2] = v992;
        v304[3] = v305;
        v306 = v979;
        v304[4] = v985;
        v304[5] = v306;
        sub_10001BBBC(v974, v972);
        v307 = sub_10001BBBC(v976, v975);
        v308 = Logger.logObject.getter(v307);
        v309 = static os_log_type_t.debug.getter(v308);
        v310 = swift_allocObject(&unk_1010581D0, 17, 7);
        *(_BYTE *)(v310 + 16) = 32;
        v311 = swift_allocObject(&unk_1010581F8, 17, 7);
        *(_BYTE *)(v311 + 16) = 8;
        v312 = swift_allocObject(&unk_101058220, 32, 7);
        *(_QWORD *)(v312 + 16) = sub_100058DF4;
        *(_QWORD *)(v312 + 24) = v304;
        v313 = swift_allocObject(&unk_101058248, 32, 7);
        *(_QWORD *)(v313 + 16) = sub_10005CBA4;
        *(_QWORD *)(v313 + 24) = v312;
        v314 = swift_allocObject(v987, 80, 7);
        sub_100882D28(v314, 3);
        *v315 = sub_10005CBC4;
        v315[1] = v310;
        v315[2] = sub_10005CBC4;
        v315[3] = v311;
        v315[4] = sub_10005CBB4;
        v315[5] = v313;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v983) = v309;
        if (!os_log_type_enabled(v308, (os_log_type_t)v309))
        {
          v318 = v954;

          swift_release();
          swift_release();
          swift_release();
          v319 = v303;
          goto LABEL_48;
        }
        v316 = sub_1006948A0(12);
        v317 = swift_slowAlloc(32, -1);
        v1017 = 0;
        v1016 = v317;
        *(_WORD *)v316 = 258;
        v998 = (uint64_t (*)())(v316 + 2);
        *(_QWORD *)&v994 = sub_10005CBC4;
        *((_QWORD *)&v994 + 1) = v310;
        v182 = v954;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
        if (!v182)
        {
          swift_release();
          *(_QWORD *)&v994 = sub_10005CBC4;
          *((_QWORD *)&v994 + 1) = v311;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
          swift_release();
          *(_QWORD *)&v994 = sub_10005CBB4;
          *((_QWORD *)&v994 + 1) = v313;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
          v318 = 0;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v308, (os_log_type_t)v983, "beaconGroupData: %s", (uint8_t *)v316, 0xCu);
          swift_arrayDestroy(v317, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v317, -1, -1);
          sub_100694894(v316);

          v319 = v981;
LABEL_48:
          v320 = v993;
          ((void (*)(uint8_t *, uint64_t))v989)(v319, v993);
          v321 = v978;
          v322 = v984;
          v323 = *(uint8_t **)(v984 + 64);
          v323[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState] = 2;
          v324 = *(void **)(v322 + 56);
          v325 = v982;
          v326 = v973;
          if (v324)
          {
            v981 = v323;
            v327 = v320;
            if (*(_BYTE *)(v322 + 200) == 1)
            {
              v328 = (uint64_t)v956;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v971 + 56))(v956, 1, 1, v925);
              v329 = v324;
              v330 = sub_100C99384(v328, 255);
              v332 = (uint64_t)v318;
LABEL_106:
              v638 = v977;
              v980 = v331;
              v982 = v330;
              v983 = (uint8_t *)v324;
              sub_100004048(v328, (uint64_t *)&unk_1010FF7F0);
              v639 = sub_100034340(v992, (unint64_t)v986, (uint64_t)v985, v979);
              v640 = v332;
              if (v332)
              {
                ((void (*)(uint8_t *, os_log_t, uint64_t))v991)(v638, v990, v327);
                v641 = swift_allocObject(&unk_101058270, 24, 7);
                *(_QWORD *)(v641 + 16) = v640;
                v642 = swift_errorRetain(v640);
                v643 = Logger.logObject.getter(v642);
                v644 = static os_log_type_t.error.getter(v643);
                v645 = swift_allocObject(&unk_101058298, 17, 7);
                *(_BYTE *)(v645 + 16) = 34;
                v646 = swift_allocObject(&unk_1010582C0, 17, 7);
                *(_BYTE *)(v646 + 16) = 8;
                v647 = swift_allocObject(&unk_1010582E8, 32, 7);
                *(_QWORD *)(v647 + 16) = sub_1000FC3D4;
                *(_QWORD *)(v647 + 24) = v641;
                v648 = swift_allocObject(&unk_101058310, 32, 7);
                *(_QWORD *)(v648 + 16) = sub_10005CBA4;
                *(_QWORD *)(v648 + 24) = v647;
                v649 = swift_allocObject(v987, 80, 7);
                sub_100882D28(v649, 3);
                *v650 = sub_10005CBC4;
                v650[1] = v645;
                v650[2] = sub_10005CBC4;
                v650[3] = v646;
                v650[4] = sub_10005CBB4;
                v650[5] = v648;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                LODWORD(v991) = v644;
                if (os_log_type_enabled(v643, (os_log_type_t)v644))
                {
                  v992 = v640;
                  v651 = sub_1006948A0(12);
                  v652 = swift_slowAlloc(32, -1);
                  v1017 = 0;
                  v1016 = v652;
                  *(_WORD *)v651 = 258;
                  v998 = (uint64_t (*)())(v651 + 2);
                  *(_QWORD *)&v994 = sub_10005CBC4;
                  *((_QWORD *)&v994 + 1) = v645;
                  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
                  swift_release();
                  *(_QWORD *)&v994 = sub_10005CBC4;
                  *((_QWORD *)&v994 + 1) = v646;
                  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
                  swift_release();
                  *(_QWORD *)&v994 = sub_10005CBB4;
                  *((_QWORD *)&v994 + 1) = v648;
                  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
                  swift_release();
                  _os_log_impl((void *)&_mh_execute_header, v643, (os_log_type_t)v991, "Unable to parse beacon group info due to %{public}s", (uint8_t *)v651, 0xCu);
                  swift_arrayDestroy(v652, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v652, -1, -1);
                  sub_100694894(v651);

                  ((void (*)(uint8_t *, uint64_t))v989)(v977, v993);
                  v653 = v988;
                  v654 = v982;
                  v655 = v980;
                  v640 = v992;
                }
                else
                {

                  swift_release();
                  swift_release();
                  swift_release();
                  ((void (*)(uint8_t *, uint64_t))v989)(v977, v327);
                  v654 = v982;
                  v655 = v980;
                  v653 = v988;
                }
                sub_1000E4448(v981, v654, (unint64_t)v655, (uint64_t)v653);
                sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
                swift_errorRelease(v640);
                sub_10001BC14(v654, (unint64_t)v655);

                return sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
              }
              v656 = v639;
              v992 = 0;
              ((void (*)(char *, os_log_t, uint64_t))v991)(v321, v990, v327);
              v657 = swift_allocObject(&unk_101058338, 24, 7);
              *(_QWORD *)(v657 + 16) = v656;
              v658 = swift_allocObject(&unk_101058360, 32, 7);
              *(_QWORD *)(v658 + 16) = sub_10005953C;
              *(_QWORD *)(v658 + 24) = v657;
              swift_bridgeObjectRetain(v656);
              v660 = Logger.logObject.getter(v659);
              v661 = static os_log_type_t.default.getter(v660);
              v662 = swift_allocObject(&unk_101058388, 17, 7);
              *(_BYTE *)(v662 + 16) = 32;
              v663 = v321;
              v664 = swift_allocObject(&unk_1010583B0, 17, 7);
              *(_BYTE *)(v664 + 16) = 8;
              v665 = swift_allocObject(&unk_1010583D8, 32, 7);
              *(_QWORD *)(v665 + 16) = sub_100059548;
              *(_QWORD *)(v665 + 24) = v658;
              v666 = swift_allocObject(&unk_101058400, 32, 7);
              *(_QWORD *)(v666 + 16) = sub_10005CBA4;
              *(_QWORD *)(v666 + 24) = v665;
              v667 = swift_allocObject(v987, 80, 7);
              sub_100882D28(v667, 3);
              *v668 = sub_10005CBC4;
              v668[1] = v662;
              v668[2] = sub_10005CBC4;
              v668[3] = v664;
              v668[4] = sub_10005CBB4;
              v668[5] = v666;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              LODWORD(v991) = v661;
              if (!os_log_type_enabled(v660, (os_log_type_t)v661))
              {

                swift_release();
                swift_release();
                swift_release();
                ((void (*)(char *, uint64_t))v989)(v663, v993);
                v671 = v988;
                goto LABEL_133;
              }
              v990 = v660;
              v669 = sub_1006948A0(12);
              v670 = swift_slowAlloc(32, -1);
              v1017 = 0;
              v1016 = v670;
              *(_WORD *)v669 = 258;
              v998 = (uint64_t (*)())(v669 + 2);
              *(_QWORD *)&v994 = sub_10005CBC4;
              *((_QWORD *)&v994 + 1) = v662;
              v182 = v992;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
              if (!v182)
              {
                swift_release();
                *(_QWORD *)&v994 = sub_10005CBC4;
                *((_QWORD *)&v994 + 1) = v664;
                sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
                swift_release();
                *(_QWORD *)&v994 = sub_10005CBB4;
                *((_QWORD *)&v994 + 1) = v666;
                sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
                v671 = v988;
                swift_release();
                v672 = v990;
                _os_log_impl((void *)&_mh_execute_header, v990, (os_log_type_t)v991, "beaconGroupInfo: %s", (uint8_t *)v669, 0xCu);
                swift_arrayDestroy(v670, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v670, -1, -1);
                sub_100694894(v669);

                ((void (*)(char *, uint64_t))v989)(v978, v993);
LABEL_133:
                v719 = v983;
                v720 = v981;
                *(_QWORD *)(*(_QWORD *)&v981[OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo]
                          + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds) = v656;
                swift_bridgeObjectRelease();
                v721 = v982;
                v722 = v980;
                sub_1000E4448(v720, v982, (unint64_t)v980, (uint64_t)v671);
                sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
                sub_10001BC14(v721, (unint64_t)v722);

                return sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
              }
              goto LABEL_193;
            }
            v324;
            v341 = v962;
            sub_10081F5CC(v325, v962);
            v342 = v341;
            v343 = v957;
            sub_10000F9B8(v342, v957, (uint64_t *)&unk_1010FF7F0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v971 + 48))(v343, 1, v925) == 1)
            {
              sub_100004048(v343, (uint64_t *)&unk_1010FF7F0);
              v332 = (uint64_t)v318;
            }
            else
            {
              v635 = v948;
              sub_100786FB4(v948);
              sub_100366A0C((uint64_t)v635);
              v637 = v636;
              (*(void (**)(char *, uint64_t))(v949 + 8))(v635, v950);
              sub_1000126B0(v343, type metadata accessor for OwnedBeaconGroup);
              v332 = (uint64_t)v318;
              if ((v637 & 0x100) == 0)
              {
LABEL_105:
                v328 = v962;
                v330 = sub_100C99384(v962, v637);
                goto LABEL_106;
              }
            }
            LOBYTE(v637) = -1;
            goto LABEL_105;
          }
          v333 = ((uint64_t (*)(char *, os_log_t, uint64_t))v991)(v973, v990, v320);
          v334 = Logger.logObject.getter(v333);
          v335 = static os_log_type_t.error.getter(v334);
          v336 = sub_100BD13F8(0);
          if (os_log_type_enabled(v334, v335))
          {
            v337 = v320;
            v338 = (uint8_t *)sub_1006948A0(2);
            v998 = 0;
            v1017 = 0;
            *(_WORD *)v338 = 0;
            *(_QWORD *)&v994 = v338 + 2;
            sub_100A3DD1C((uint64_t)v336, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v334, v335, "Missing peripheral to start pairing!", v338, 2u);
            sub_100694894((uint64_t)v338);

            sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
            sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
            v339 = v326;
            v340 = v337;
          }
          else
          {
            sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);

            swift_bridgeObjectRelease();
            sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
            v339 = v326;
            v340 = v320;
          }
          result = ((uint64_t (*)(char *, uint64_t))v989)(v339, v340);
          v187 = 7;
          v186 = v988;
LABEL_16:
          *v186 = v187;
          *(_OWORD *)(v186 + 1) = 0u;
          *(_OWORD *)(v186 + 3) = 0u;
          *((_BYTE *)v186 + 40) = 11;
          *((_BYTE *)v186 + 216) = 1;
          return result;
        }
LABEL_193:
        swift_errorRelease(v182);
        __break(1u);
        swift_errorRelease(v954);
        __break(1u);
        result = swift_errorRelease(v989);
        __break(1u);
        return result;
      }
      ((void (*)(os_log_t, os_log_t, uint64_t))v991)(v986, v990, v135);
      v207 = v135;
      v208 = swift_allocObject(&unk_1010568A8, 232, 7);
      sub_1000F7F88((uint64_t)v1035, v208 + 16);
      v209 = sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
      v210 = Logger.logObject.getter(v209);
      v211 = static os_log_type_t.error.getter(v210);
      v212 = swift_allocObject(&unk_1010568D0, 17, 7);
      *(_BYTE *)(v212 + 16) = 34;
      v213 = swift_allocObject(&unk_1010568F8, 17, 7);
      *(_BYTE *)(v213 + 16) = 8;
      v214 = swift_allocObject(&unk_101056920, 32, 7);
      *(_QWORD *)(v214 + 16) = sub_1000FC3E0;
      *(_QWORD *)(v214 + 24) = v208;
      v215 = swift_allocObject(&unk_101056948, 32, 7);
      *(_QWORD *)(v215 + 16) = sub_10005CBA4;
      *(_QWORD *)(v215 + 24) = v214;
      v216 = swift_allocObject(v987, 80, 7);
      sub_100882D28(v216, 3);
      *v217 = sub_10005CBC4;
      v217[1] = v212;
      v217[2] = sub_10005CBC4;
      v217[3] = v213;
      v217[4] = sub_10005CBB4;
      v217[5] = v215;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v992) = v211;
      if (os_log_type_enabled(v210, (os_log_type_t)v211))
      {
        v218 = (uint8_t *)sub_1006948A0(12);
        v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc(32, -1);
        *(_QWORD *)&v994 = 0;
        v998 = (uint64_t (*)())v219;
        *(_WORD *)v218 = 258;
        *(_QWORD *)&v1021 = v218 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v212;
        v182 = v954;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v994, (uint64_t)&v998);
        if (v182)
          goto LABEL_193;
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v213;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v994, (uint64_t)&v998);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v215;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v994, (uint64_t)&v998);
        v220 = v988;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v210, (os_log_type_t)v992, "Received unexpected command %{public}s", v218, 0xCu);
        swift_arrayDestroy(v219, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v219, -1, -1);
        sub_100694894((uint64_t)v218);

        sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        result = ((uint64_t (*)(os_log_t, uint64_t))v989)(v986, v993);
        v221 = 6;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        result = ((uint64_t (*)(os_log_t, uint64_t))v989)(v155, v207);
        v220 = v988;
        v221 = 6;
      }
LABEL_142:
      *v220 = v221;
      *(_OWORD *)(v220 + 1) = 0u;
      *(_OWORD *)(v220 + 3) = 0u;
      *((_BYTE *)v220 + 40) = 11;
      *((_BYTE *)v220 + 216) = 1;
      return result;
    }
    sub_1000F9B34((uint64_t)v1036);
    v188 = v972;
    v189 = ((uint64_t (*)(unint64_t, os_log_t, uint64_t))v991)(v972, v990, v135);
    v190 = Logger.logObject.getter(v189);
    v191 = static os_log_type_t.default.getter(v190);
    v192 = sub_100BD13F8(0);
    if (os_log_type_enabled(v190, v191))
    {
      v193 = v135;
      v194 = (uint8_t *)sub_1006948A0(2);
      *(_QWORD *)&v1021 = 0;
      *(_QWORD *)&v994 = 0;
      *(_WORD *)v194 = 0;
      *(_QWORD *)&v1000 = v194 + 2;
      sub_100A3DD1C((uint64_t)v192, (uint64_t)&v1000, (uint64_t)&v1021, (uint64_t)&v994);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v190, v191, "Received pairing data.", v194, 2u);
      v195 = (uint64_t)v194;
      v135 = v193;
      sub_100694894(v195);

      v196 = v188;
      v197 = v193;
    }
    else
    {

      swift_bridgeObjectRelease();
      v196 = v188;
      v197 = v135;
    }
    ((void (*)(unint64_t, uint64_t))v989)(v196, v197);
    sub_10099CCDC();
    v222 = sub_10001A9A8(&qword_1010EC540);
    v223 = swift_dynamicCast(&v1000, &v994, v222, &type metadata for AirPodsLESendPairingDataCommandPayload, 6);
    v224 = v979;
    if (v223)
    {
      v1031 = v1010;
      v1032 = v1011;
      v1033 = v1012;
      v1034 = v1013;
      v1027 = v1006;
      v1028 = v1007;
      v1029 = v1008;
      v1030 = v1009;
      v1023 = v1002;
      v1024 = v1003;
      v1025 = v1004;
      v1026 = v1005;
      v1021 = v1000;
      v1022 = v1001;
      v225 = v963;
      ((void (*)(char *, os_log_t, uint64_t))v991)(v963, v990, v135);
      v226 = swift_allocObject(&unk_101057348, 232, 7);
      v227 = v1032;
      *(_OWORD *)(v226 + 176) = v1031;
      *(_OWORD *)(v226 + 192) = v227;
      *(_OWORD *)(v226 + 208) = v1033;
      *(_QWORD *)(v226 + 224) = v1034;
      v228 = v1028;
      *(_OWORD *)(v226 + 112) = v1027;
      *(_OWORD *)(v226 + 128) = v228;
      v229 = v1030;
      *(_OWORD *)(v226 + 144) = v1029;
      *(_OWORD *)(v226 + 160) = v229;
      v230 = v1024;
      *(_OWORD *)(v226 + 48) = v1023;
      *(_OWORD *)(v226 + 64) = v230;
      v231 = v1026;
      *(_OWORD *)(v226 + 80) = v1025;
      *(_OWORD *)(v226 + 96) = v231;
      v232 = v1022;
      *(_OWORD *)(v226 + 16) = v1021;
      *(_OWORD *)(v226 + 32) = v232;
      v233 = sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v234 = Logger.logObject.getter(v233);
      v235 = static os_log_type_t.debug.getter(v234);
      v236 = swift_allocObject(&unk_101057370, 17, 7);
      *(_BYTE *)(v236 + 16) = 32;
      v237 = swift_allocObject(&unk_101057398, 17, 7);
      *(_BYTE *)(v237 + 16) = 8;
      v238 = swift_allocObject(&unk_1010573C0, 32, 7);
      *(_QWORD *)(v238 + 16) = sub_10005CBA0;
      *(_QWORD *)(v238 + 24) = v226;
      v239 = swift_allocObject(&unk_1010573E8, 32, 7);
      *(_QWORD *)(v239 + 16) = sub_10005CBA4;
      *(_QWORD *)(v239 + 24) = v238;
      v240 = swift_allocObject(v987, 80, 7);
      sub_100882D28(v240, 3);
      *v241 = sub_10005CBC4;
      v241[1] = v236;
      v241[2] = sub_10005CBC4;
      v241[3] = v237;
      v241[4] = sub_10005CBB4;
      v241[5] = v239;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v986) = v235;
      if (os_log_type_enabled(v234, (os_log_type_t)v235))
      {
        v242 = (uint8_t *)sub_1006948A0(12);
        v243 = swift_slowAlloc(32, -1);
        v998 = 0;
        v1017 = (uint8_t *)v243;
        *(_WORD *)v242 = 258;
        *(_QWORD *)&v994 = v242 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v236;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v237;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        v225 = v963;
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v239;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v234, (os_log_type_t)v986, "SerialNumber: %s", v242, 0xCu);
        swift_arrayDestroy(v243, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v243, -1, -1);
        sub_100694894((uint64_t)v242);

      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
      }
      v344 = v225;
      v345 = v993;
      ((void (*)(char *, uint64_t))v989)(v344, v993);
      v346 = v965;
      ((void (*)(char *, os_log_t, uint64_t))v991)(v965, v990, v345);
      v347 = swift_allocObject(&unk_101057410, 232, 7);
      v348 = v1032;
      *(_OWORD *)(v347 + 176) = v1031;
      *(_OWORD *)(v347 + 192) = v348;
      *(_OWORD *)(v347 + 208) = v1033;
      *(_QWORD *)(v347 + 224) = v1034;
      v349 = v1028;
      *(_OWORD *)(v347 + 112) = v1027;
      *(_OWORD *)(v347 + 128) = v349;
      v350 = v1030;
      *(_OWORD *)(v347 + 144) = v1029;
      *(_OWORD *)(v347 + 160) = v350;
      v351 = v1024;
      *(_OWORD *)(v347 + 48) = v1023;
      *(_OWORD *)(v347 + 64) = v351;
      v352 = v1026;
      *(_OWORD *)(v347 + 80) = v1025;
      *(_OWORD *)(v347 + 96) = v352;
      v353 = v1022;
      *(_OWORD *)(v347 + 16) = v1021;
      *(_OWORD *)(v347 + 32) = v353;
      v354 = sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v355 = Logger.logObject.getter(v354);
      v356 = static os_log_type_t.debug.getter(v355);
      v357 = swift_allocObject(&unk_101057438, 17, 7);
      *(_BYTE *)(v357 + 16) = 32;
      v358 = swift_allocObject(&unk_101057460, 17, 7);
      *(_BYTE *)(v358 + 16) = 8;
      v359 = swift_allocObject(&unk_101057488, 32, 7);
      *(_QWORD *)(v359 + 16) = sub_100058E84;
      *(_QWORD *)(v359 + 24) = v347;
      v360 = swift_allocObject(&unk_1010574B0, 32, 7);
      *(_QWORD *)(v360 + 16) = sub_10005CBA4;
      *(_QWORD *)(v360 + 24) = v359;
      v361 = swift_allocObject(v987, 80, 7);
      sub_100882D28(v361, 3);
      *v362 = sub_10005CBC4;
      v362[1] = v357;
      v362[2] = sub_10005CBC4;
      v362[3] = v358;
      v362[4] = sub_10005CBB4;
      v362[5] = v360;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v986) = v356;
      if (os_log_type_enabled(v355, (os_log_type_t)v356))
      {
        v363 = (uint8_t *)sub_1006948A0(12);
        v364 = swift_slowAlloc(32, -1);
        v998 = 0;
        v1017 = (uint8_t *)v364;
        *(_WORD *)v363 = 258;
        *(_QWORD *)&v994 = v363 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v357;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v358;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v360;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v355, (os_log_type_t)v986, "ChipId: %s", v363, 0xCu);
        swift_arrayDestroy(v364, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v364, -1, -1);
        sub_100694894((uint64_t)v363);

        v365 = v965;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v365 = v346;
      }
      v381 = v993;
      ((void (*)(char *, uint64_t))v989)(v365, v993);
      v382 = v966;
      ((void (*)(char *, os_log_t, uint64_t))v991)(v966, v990, v381);
      v383 = swift_allocObject(&unk_1010574D8, 232, 7);
      v384 = v1032;
      *(_OWORD *)(v383 + 176) = v1031;
      *(_OWORD *)(v383 + 192) = v384;
      *(_OWORD *)(v383 + 208) = v1033;
      *(_QWORD *)(v383 + 224) = v1034;
      v385 = v1028;
      *(_OWORD *)(v383 + 112) = v1027;
      *(_OWORD *)(v383 + 128) = v385;
      v386 = v1030;
      *(_OWORD *)(v383 + 144) = v1029;
      *(_OWORD *)(v383 + 160) = v386;
      v387 = v1024;
      *(_OWORD *)(v383 + 48) = v1023;
      *(_OWORD *)(v383 + 64) = v387;
      v388 = v1026;
      *(_OWORD *)(v383 + 80) = v1025;
      *(_OWORD *)(v383 + 96) = v388;
      v389 = v1022;
      *(_OWORD *)(v383 + 16) = v1021;
      *(_OWORD *)(v383 + 32) = v389;
      v390 = sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v391 = Logger.logObject.getter(v390);
      v392 = static os_log_type_t.debug.getter(v391);
      v393 = swift_allocObject(&unk_101057500, 17, 7);
      *(_BYTE *)(v393 + 16) = 32;
      v394 = swift_allocObject(&unk_101057528, 17, 7);
      *(_BYTE *)(v394 + 16) = 8;
      v395 = swift_allocObject(&unk_101057550, 32, 7);
      *(_QWORD *)(v395 + 16) = sub_100058E4C;
      *(_QWORD *)(v395 + 24) = v383;
      v396 = swift_allocObject(&unk_101057578, 32, 7);
      *(_QWORD *)(v396 + 16) = sub_10005CBA4;
      *(_QWORD *)(v396 + 24) = v395;
      v397 = swift_allocObject(v987, 80, 7);
      sub_100882D28(v397, 3);
      *v398 = sub_10005CBC4;
      v398[1] = v393;
      v398[2] = sub_10005CBC4;
      v398[3] = v394;
      v398[4] = sub_10005CBB4;
      v398[5] = v396;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v986) = v392;
      if (os_log_type_enabled(v391, (os_log_type_t)v392))
      {
        v399 = (uint8_t *)sub_1006948A0(12);
        v400 = swift_slowAlloc(32, -1);
        v998 = 0;
        v1017 = (uint8_t *)v400;
        *(_WORD *)v399 = 258;
        *(_QWORD *)&v994 = v399 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v393;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v394;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v396;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v391, (os_log_type_t)v986, "ECID: %s", v399, 0xCu);
        swift_arrayDestroy(v400, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v400, -1, -1);
        sub_100694894((uint64_t)v399);

        v401 = v966;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v401 = v382;
      }
      v402 = v993;
      ((void (*)(char *, uint64_t))v989)(v401, v993);
      v403 = v967;
      ((void (*)(char *, os_log_t, uint64_t))v991)(v967, v990, v402);
      v404 = swift_allocObject(&unk_1010575A0, 232, 7);
      v405 = v1032;
      *(_OWORD *)(v404 + 176) = v1031;
      *(_OWORD *)(v404 + 192) = v405;
      *(_OWORD *)(v404 + 208) = v1033;
      *(_QWORD *)(v404 + 224) = v1034;
      v406 = v1028;
      *(_OWORD *)(v404 + 112) = v1027;
      *(_OWORD *)(v404 + 128) = v406;
      v407 = v1030;
      *(_OWORD *)(v404 + 144) = v1029;
      *(_OWORD *)(v404 + 160) = v407;
      v408 = v1024;
      *(_OWORD *)(v404 + 48) = v1023;
      *(_OWORD *)(v404 + 64) = v408;
      v409 = v1026;
      *(_OWORD *)(v404 + 80) = v1025;
      *(_OWORD *)(v404 + 96) = v409;
      v410 = v1022;
      *(_OWORD *)(v404 + 16) = v1021;
      *(_OWORD *)(v404 + 32) = v410;
      v411 = sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v412 = Logger.logObject.getter(v411);
      v413 = static os_log_type_t.debug.getter(v412);
      v414 = swift_allocObject(&unk_1010575C8, 17, 7);
      *(_BYTE *)(v414 + 16) = 32;
      v415 = swift_allocObject(&unk_1010575F0, 17, 7);
      *(_BYTE *)(v415 + 16) = 8;
      v416 = swift_allocObject(&unk_101057618, 32, 7);
      *(_QWORD *)(v416 + 16) = sub_100058DF4;
      *(_QWORD *)(v416 + 24) = v404;
      v417 = swift_allocObject(&unk_101057640, 32, 7);
      *(_QWORD *)(v417 + 16) = sub_10005CBA4;
      *(_QWORD *)(v417 + 24) = v416;
      v418 = swift_allocObject(v987, 80, 7);
      sub_100882D28(v418, 3);
      *v419 = sub_10005CBC4;
      v419[1] = v414;
      v419[2] = sub_10005CBC4;
      v419[3] = v415;
      v419[4] = sub_10005CBB4;
      v419[5] = v417;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v986) = v413;
      if (os_log_type_enabled(v412, (os_log_type_t)v413))
      {
        v420 = (uint8_t *)sub_1006948A0(12);
        v421 = swift_slowAlloc(32, -1);
        v998 = 0;
        v1017 = (uint8_t *)v421;
        *(_WORD *)v420 = 258;
        *(_QWORD *)&v994 = v420 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v414;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v415;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v417;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v412, (os_log_type_t)v986, "numberOfBeacons: %s", v420, 0xCu);
        swift_arrayDestroy(v421, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v421, -1, -1);
        sub_100694894((uint64_t)v420);

        v422 = v967;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v422 = v403;
      }
      v423 = v993;
      ((void (*)(char *, uint64_t))v989)(v422, v993);
      v424 = v968;
      ((void (*)(char *, os_log_t, uint64_t))v991)(v968, v990, v423);
      v425 = swift_allocObject(&unk_101057668, 232, 7);
      v426 = v1032;
      *(_OWORD *)(v425 + 176) = v1031;
      *(_OWORD *)(v425 + 192) = v426;
      *(_OWORD *)(v425 + 208) = v1033;
      *(_QWORD *)(v425 + 224) = v1034;
      v427 = v1028;
      *(_OWORD *)(v425 + 112) = v1027;
      *(_OWORD *)(v425 + 128) = v427;
      v428 = v1030;
      *(_OWORD *)(v425 + 144) = v1029;
      *(_OWORD *)(v425 + 160) = v428;
      v429 = v1024;
      *(_OWORD *)(v425 + 48) = v1023;
      *(_OWORD *)(v425 + 64) = v429;
      v430 = v1026;
      *(_OWORD *)(v425 + 80) = v1025;
      *(_OWORD *)(v425 + 96) = v430;
      v431 = v1022;
      *(_OWORD *)(v425 + 16) = v1021;
      *(_OWORD *)(v425 + 32) = v431;
      v432 = sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v433 = Logger.logObject.getter(v432);
      v434 = static os_log_type_t.debug.getter(v433);
      v435 = swift_allocObject(&unk_101057690, 17, 7);
      *(_BYTE *)(v435 + 16) = 32;
      v436 = swift_allocObject(&unk_1010576B8, 17, 7);
      *(_BYTE *)(v436 + 16) = 8;
      v437 = swift_allocObject(&unk_1010576E0, 32, 7);
      *(_QWORD *)(v437 + 16) = sub_100058E20;
      *(_QWORD *)(v437 + 24) = v425;
      v438 = swift_allocObject(&unk_101057708, 32, 7);
      *(_QWORD *)(v438 + 16) = sub_10005CBA4;
      *(_QWORD *)(v438 + 24) = v437;
      v439 = swift_allocObject(v987, 80, 7);
      sub_100882D28(v439, 3);
      *v440 = sub_10005CBC4;
      v440[1] = v435;
      v440[2] = sub_10005CBC4;
      v440[3] = v436;
      v440[4] = sub_10005CBB4;
      v440[5] = v438;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v986) = v434;
      if (os_log_type_enabled(v433, (os_log_type_t)v434))
      {
        v441 = (uint8_t *)sub_1006948A0(12);
        v442 = swift_slowAlloc(32, -1);
        v998 = 0;
        v1017 = (uint8_t *)v442;
        *(_WORD *)v441 = 258;
        *(_QWORD *)&v994 = v441 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v435;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v436;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v438;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v433, (os_log_type_t)v986, "otherSerialNumber: %s", v441, 0xCu);
        swift_arrayDestroy(v442, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v442, -1, -1);
        sub_100694894((uint64_t)v441);

        v443 = v968;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v443 = v424;
      }
      v444 = v993;
      ((void (*)(char *, uint64_t))v989)(v443, v993);
      v445 = v969;
      ((void (*)(char *, os_log_t, uint64_t))v991)(v969, v990, v444);
      v446 = swift_allocObject(&unk_101057730, 232, 7);
      v447 = v1032;
      *(_OWORD *)(v446 + 176) = v1031;
      *(_OWORD *)(v446 + 192) = v447;
      *(_OWORD *)(v446 + 208) = v1033;
      *(_QWORD *)(v446 + 224) = v1034;
      v448 = v1028;
      *(_OWORD *)(v446 + 112) = v1027;
      *(_OWORD *)(v446 + 128) = v448;
      v449 = v1030;
      *(_OWORD *)(v446 + 144) = v1029;
      *(_OWORD *)(v446 + 160) = v449;
      v450 = v1024;
      *(_OWORD *)(v446 + 48) = v1023;
      *(_OWORD *)(v446 + 64) = v450;
      v451 = v1026;
      *(_OWORD *)(v446 + 80) = v1025;
      *(_OWORD *)(v446 + 96) = v451;
      v452 = v1022;
      *(_OWORD *)(v446 + 16) = v1021;
      *(_OWORD *)(v446 + 32) = v452;
      v453 = sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v454 = Logger.logObject.getter(v453);
      v455 = static os_log_type_t.debug.getter(v454);
      v456 = swift_allocObject(&unk_101057758, 17, 7);
      *(_BYTE *)(v456 + 16) = 32;
      v457 = swift_allocObject(&unk_101057780, 17, 7);
      *(_BYTE *)(v457 + 16) = 8;
      v458 = swift_allocObject(&unk_1010577A8, 32, 7);
      *(_QWORD *)(v458 + 16) = sub_100058F90;
      *(_QWORD *)(v458 + 24) = v446;
      v459 = swift_allocObject(&unk_1010577D0, 32, 7);
      *(_QWORD *)(v459 + 16) = sub_10005CBA4;
      *(_QWORD *)(v459 + 24) = v458;
      v460 = swift_allocObject(v987, 80, 7);
      sub_100882D28(v460, 3);
      *v461 = sub_10005CBC4;
      v461[1] = v456;
      v461[2] = sub_10005CBC4;
      v461[3] = v457;
      v461[4] = sub_10005CBB4;
      v461[5] = v459;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v986) = v455;
      if (os_log_type_enabled(v454, (os_log_type_t)v455))
      {
        v462 = (uint8_t *)sub_1006948A0(12);
        v463 = swift_slowAlloc(32, -1);
        v998 = 0;
        v1017 = (uint8_t *)v463;
        *(_WORD *)v462 = 258;
        *(_QWORD *)&v994 = v462 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v456;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v457;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v459;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        v464 = v974;
        v954 = 0;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v454, (os_log_type_t)v986, "seed: %s", v462, 0xCu);
        swift_arrayDestroy(v463, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v463, -1, -1);
        sub_100694894((uint64_t)v462);

        v465 = v993;
        ((void (*)(char *, uint64_t))v989)(v969, v993);
      }
      else
      {
        v954 = 0;

        swift_release();
        swift_release();
        swift_release();
        v465 = v993;
        ((void (*)(char *, uint64_t))v989)(v445, v993);
        v464 = v974;
      }
      ((void (*)(uint64_t, os_log_t, uint64_t))v991)(v464, v990, v465);
      v466 = swift_allocObject(&unk_1010577F8, 232, 7);
      v467 = v1032;
      *(_OWORD *)(v466 + 176) = v1031;
      *(_OWORD *)(v466 + 192) = v467;
      *(_OWORD *)(v466 + 208) = v1033;
      *(_QWORD *)(v466 + 224) = v1034;
      v468 = v1028;
      *(_OWORD *)(v466 + 112) = v1027;
      *(_OWORD *)(v466 + 128) = v468;
      v469 = v1030;
      *(_OWORD *)(v466 + 144) = v1029;
      *(_OWORD *)(v466 + 160) = v469;
      v470 = v1024;
      *(_OWORD *)(v466 + 48) = v1023;
      *(_OWORD *)(v466 + 64) = v470;
      v471 = v1026;
      *(_OWORD *)(v466 + 80) = v1025;
      *(_OWORD *)(v466 + 96) = v471;
      v472 = v1022;
      *(_OWORD *)(v466 + 16) = v1021;
      *(_OWORD *)(v466 + 32) = v472;
      v473 = swift_allocObject(&unk_101057820, 232, 7);
      v474 = v1032;
      *(_OWORD *)(v473 + 176) = v1031;
      *(_OWORD *)(v473 + 192) = v474;
      *(_OWORD *)(v473 + 208) = v1033;
      *(_QWORD *)(v473 + 224) = v1034;
      v475 = v1028;
      *(_OWORD *)(v473 + 112) = v1027;
      *(_OWORD *)(v473 + 128) = v475;
      v476 = v1030;
      *(_OWORD *)(v473 + 144) = v1029;
      *(_OWORD *)(v473 + 160) = v476;
      v477 = v1024;
      *(_OWORD *)(v473 + 48) = v1023;
      *(_OWORD *)(v473 + 64) = v477;
      v478 = v1026;
      *(_OWORD *)(v473 + 80) = v1025;
      *(_OWORD *)(v473 + 96) = v478;
      v479 = v1022;
      *(_OWORD *)(v473 + 16) = v1021;
      *(_OWORD *)(v473 + 32) = v479;
      sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v480 = sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v986 = (os_log_t)Logger.logObject.getter(v480);
      LODWORD(v985) = static os_log_type_t.debug.getter(v986);
      v481 = swift_allocObject(&unk_101057848, 17, 7);
      *(_BYTE *)(v481 + 16) = 0;
      v482 = swift_allocObject(&unk_101057870, 17, 7);
      *(_BYTE *)(v482 + 16) = 8;
      v483 = swift_allocObject(&unk_101057898, 32, 7);
      *(_QWORD *)(v483 + 16) = sub_1000F9430;
      *(_QWORD *)(v483 + 24) = v466;
      v484 = swift_allocObject(&unk_1010578C0, 32, 7);
      *(_QWORD *)(v484 + 16) = sub_10005CD4C;
      *(_QWORD *)(v484 + 24) = v483;
      v485 = swift_allocObject(&unk_1010578E8, 17, 7);
      *(_BYTE *)(v485 + 16) = 32;
      v486 = swift_allocObject(&unk_101057910, 17, 7);
      *(_BYTE *)(v486 + 16) = 8;
      v487 = swift_allocObject(&unk_101057938, 32, 7);
      *(_QWORD *)(v487 + 16) = sub_1000F943C;
      *(_QWORD *)(v487 + 24) = v473;
      v488 = swift_allocObject(&unk_101057960, 32, 7);
      *(_QWORD *)(v488 + 16) = sub_10005CBA4;
      *(_QWORD *)(v488 + 24) = v487;
      v489 = swift_allocObject(v987, 128, 7);
      sub_100882D28(v489, 6);
      *v490 = sub_10005CBC4;
      v490[1] = v481;
      v490[2] = sub_10005CBC4;
      v490[3] = v482;
      v490[4] = sub_10005CBB8;
      v490[5] = v484;
      v490[6] = sub_10005CBC4;
      v490[7] = v485;
      v490[8] = sub_10005CBC4;
      v490[9] = v486;
      v490[10] = sub_10005CBB4;
      v490[11] = v488;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v491 = v986;
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v491, (os_log_type_t)v985))
      {
        v492 = (uint8_t *)sub_1006948A0(22);
        v493 = swift_slowAlloc(32, -1);
        v998 = 0;
        v1017 = (uint8_t *)v493;
        v983 = v492;
        *(_WORD *)v492 = 514;
        *(_QWORD *)&v994 = v492 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v481;
        v182 = v954;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        if (v182)
          goto LABEL_193;
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v482;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB8;
        *((_QWORD *)&v1000 + 1) = v484;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v485;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v486;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        v494 = v993;
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v488;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        v954 = 0;
        swift_release();
        v495 = v986;
        v496 = v983;
        _os_log_impl((void *)&_mh_execute_header, v986, (os_log_type_t)v985, "attestation (S1) count %ld: %s", v983, 0x16u);
        swift_arrayDestroy(v493, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v493, -1, -1);
        sub_100694894((uint64_t)v496);

        v497 = v974;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v497 = v974;
        v494 = v993;
      }
      ((void (*)(uint64_t, uint64_t))v989)(v497, v494);
      ((void (*)(unint64_t, os_log_t, uint64_t))v991)(v975, v990, v494);
      v498 = swift_allocObject(&unk_101057988, 232, 7);
      v499 = v1032;
      *(_OWORD *)(v498 + 176) = v1031;
      *(_OWORD *)(v498 + 192) = v499;
      *(_OWORD *)(v498 + 208) = v1033;
      *(_QWORD *)(v498 + 224) = v1034;
      v500 = v1028;
      *(_OWORD *)(v498 + 112) = v1027;
      *(_OWORD *)(v498 + 128) = v500;
      v501 = v1030;
      *(_OWORD *)(v498 + 144) = v1029;
      *(_OWORD *)(v498 + 160) = v501;
      v502 = v1024;
      *(_OWORD *)(v498 + 48) = v1023;
      *(_OWORD *)(v498 + 64) = v502;
      v503 = v1026;
      *(_OWORD *)(v498 + 80) = v1025;
      *(_OWORD *)(v498 + 96) = v503;
      v504 = v1022;
      *(_OWORD *)(v498 + 16) = v1021;
      *(_OWORD *)(v498 + 32) = v504;
      v505 = swift_allocObject(&unk_1010579B0, 232, 7);
      v506 = v1032;
      *(_OWORD *)(v505 + 176) = v1031;
      *(_OWORD *)(v505 + 192) = v506;
      *(_OWORD *)(v505 + 208) = v1033;
      *(_QWORD *)(v505 + 224) = v1034;
      v507 = v1028;
      *(_OWORD *)(v505 + 112) = v1027;
      *(_OWORD *)(v505 + 128) = v507;
      v508 = v1030;
      *(_OWORD *)(v505 + 144) = v1029;
      *(_OWORD *)(v505 + 160) = v508;
      v509 = v1024;
      *(_OWORD *)(v505 + 48) = v1023;
      *(_OWORD *)(v505 + 64) = v509;
      v510 = v1026;
      *(_OWORD *)(v505 + 80) = v1025;
      *(_OWORD *)(v505 + 96) = v510;
      v511 = v1022;
      *(_OWORD *)(v505 + 16) = v1021;
      *(_OWORD *)(v505 + 32) = v511;
      sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v512 = sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v986 = (os_log_t)Logger.logObject.getter(v512);
      LODWORD(v985) = static os_log_type_t.debug.getter(v986);
      v513 = swift_allocObject(&unk_1010579D8, 17, 7);
      *(_BYTE *)(v513 + 16) = 0;
      v514 = swift_allocObject(&unk_101057A00, 17, 7);
      *(_BYTE *)(v514 + 16) = 8;
      v515 = swift_allocObject(&unk_101057A28, 32, 7);
      *(_QWORD *)(v515 + 16) = sub_1000F9488;
      *(_QWORD *)(v515 + 24) = v498;
      v516 = swift_allocObject(&unk_101057A50, 32, 7);
      *(_QWORD *)(v516 + 16) = sub_10005CD4C;
      *(_QWORD *)(v516 + 24) = v515;
      v517 = swift_allocObject(&unk_101057A78, 17, 7);
      *(_BYTE *)(v517 + 16) = 32;
      v518 = swift_allocObject(&unk_101057AA0, 17, 7);
      *(_BYTE *)(v518 + 16) = 8;
      v519 = swift_allocObject(&unk_101057AC8, 32, 7);
      *(_QWORD *)(v519 + 16) = sub_100058FE8;
      *(_QWORD *)(v519 + 24) = v505;
      v520 = swift_allocObject(&unk_101057AF0, 32, 7);
      *(_QWORD *)(v520 + 16) = sub_10005CBA4;
      *(_QWORD *)(v520 + 24) = v519;
      v521 = swift_allocObject(v987, 128, 7);
      sub_100882D28(v521, 6);
      *v522 = sub_10005CBC4;
      v522[1] = v513;
      v522[2] = sub_10005CBC4;
      v522[3] = v514;
      v522[4] = sub_10005CBB8;
      v522[5] = v516;
      v522[6] = sub_10005CBC4;
      v522[7] = v517;
      v522[8] = sub_10005CBC4;
      v522[9] = v518;
      v522[10] = sub_10005CBB4;
      v522[11] = v520;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v523 = v986;
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v523, (os_log_type_t)v985))
      {
        v524 = (uint8_t *)sub_1006948A0(22);
        v525 = swift_slowAlloc(32, -1);
        v998 = 0;
        v1017 = (uint8_t *)v525;
        v983 = v524;
        *(_WORD *)v524 = 514;
        *(_QWORD *)&v994 = v524 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v513;
        v182 = v954;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        if (v182)
          goto LABEL_193;
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v514;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB8;
        *((_QWORD *)&v1000 + 1) = v516;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v517;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v518;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        v526 = v993;
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v520;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        v527 = v975;
        v954 = 0;
        swift_release();
        v528 = v986;
        v529 = v983;
        _os_log_impl((void *)&_mh_execute_header, v986, (os_log_type_t)v985, "BAA signature (S2) count %ld: %s", v983, 0x16u);
        swift_arrayDestroy(v525, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v525, -1, -1);
        sub_100694894((uint64_t)v529);

        v530 = v527;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v530 = v975;
        v526 = v993;
      }
      ((void (*)(unint64_t, uint64_t))v989)(v530, v526);
      ((void (*)(uint64_t, os_log_t, uint64_t))v991)(v976, v990, v526);
      v531 = swift_allocObject(&unk_101057B18, 232, 7);
      v532 = v1032;
      *(_OWORD *)(v531 + 176) = v1031;
      *(_OWORD *)(v531 + 192) = v532;
      *(_OWORD *)(v531 + 208) = v1033;
      *(_QWORD *)(v531 + 224) = v1034;
      v533 = v1028;
      *(_OWORD *)(v531 + 112) = v1027;
      *(_OWORD *)(v531 + 128) = v533;
      v534 = v1030;
      *(_OWORD *)(v531 + 144) = v1029;
      *(_OWORD *)(v531 + 160) = v534;
      v535 = v1024;
      *(_OWORD *)(v531 + 48) = v1023;
      *(_OWORD *)(v531 + 64) = v535;
      v536 = v1026;
      *(_OWORD *)(v531 + 80) = v1025;
      *(_OWORD *)(v531 + 96) = v536;
      v537 = v1022;
      *(_OWORD *)(v531 + 16) = v1021;
      *(_OWORD *)(v531 + 32) = v537;
      v538 = sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v539 = Logger.logObject.getter(v538);
      v540 = static os_log_type_t.debug.getter(v539);
      v541 = swift_allocObject(&unk_101057B40, 17, 7);
      *(_BYTE *)(v541 + 16) = 0;
      v542 = swift_allocObject(&unk_101057B68, 17, 7);
      *(_BYTE *)(v542 + 16) = 1;
      v543 = swift_allocObject(&unk_101057B90, 32, 7);
      *(_QWORD *)(v543 + 16) = sub_1000F94D8;
      *(_QWORD *)(v543 + 24) = v531;
      v544 = swift_allocObject(&unk_101057BB8, 32, 7);
      *(_QWORD *)(v544 + 16) = sub_100058F50;
      *(_QWORD *)(v544 + 24) = v543;
      v545 = swift_allocObject(v987, 80, 7);
      sub_100882D28(v545, 3);
      *v546 = sub_10005CBC4;
      v546[1] = v541;
      v546[2] = sub_10005CBC4;
      v546[3] = v542;
      v546[4] = sub_100058F58;
      v546[5] = v544;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v539, v540))
      {
        v547 = (uint8_t *)sub_1006948A0(5);
        v998 = 0;
        v1017 = 0;
        *(_WORD *)v547 = 256;
        *(_QWORD *)&v994 = v547 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v541;
        v182 = v954;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        if (v182)
          goto LABEL_193;
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v542;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        v548 = v993;
        swift_release();
        *(_QWORD *)&v1000 = sub_100058F58;
        *((_QWORD *)&v1000 + 1) = v544;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v539, v540, "beaconPartId: %hhu", v547, 5u);
        sub_100694894((uint64_t)v547);

        ((void (*)(uint64_t, uint64_t))v989)(v976, v548);
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        ((void (*)(uint64_t, uint64_t))v989)(v976, v526);
        v182 = v954;
      }
      v549 = *(NSObject **)(v984 + 64);
      *((_BYTE *)&v549->isa + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 3;
      v550 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
      v551 = *(uint64_t *)((char *)&v549->isa + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
      v552 = v1021;
      swift_retain();
      sub_10001BBBC(v552, *((unint64_t *)&v552 + 1));
      sub_1002F702C(v552, *((uint64_t *)&v552 + 1));
      if (v182)
      {
        swift_errorRelease(v182);
        v553 = xmmword_100E22B20;
      }
      else
      {
        v553 = v1000;
      }
      v554 = *(_QWORD *)(v551 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
      v555 = *(_QWORD *)(v551 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1 + 8);
      *(_OWORD *)(v551 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = v553;
      sub_10001EF3C(v554, v555);
      swift_release();
      v556 = v1025;
      v557 = (uint64_t *)(*(char **)((char *)&v550->isa + (_QWORD)v549)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
      v558 = *v557;
      v559 = v557[1];
      *(_OWORD *)v557 = v1025;
      sub_10001BBBC(v556, *((unint64_t *)&v556 + 1));
      sub_10001EF3C(v558, v559);
      v560 = v1023;
      v561 = (uint64_t *)(*(char **)((char *)&v550->isa + (_QWORD)v549)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
      v562 = *v561;
      v563 = v561[1];
      *(_OWORD *)v561 = v1023;
      sub_10001BBBC(v560, *((unint64_t *)&v560 + 1));
      sub_10001EF3C(v562, v563);
      v564 = v1026;
      v565 = (uint64_t *)(*(char **)((char *)&v550->isa + (_QWORD)v549)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
      v566 = *v565;
      v567 = v565[1];
      *(_OWORD *)v565 = v1026;
      sub_10001BBBC(v564, *((unint64_t *)&v564 + 1));
      sub_10001EF3C(v566, v567);
      v568 = v1029;
      v569 = (uint64_t *)(*(char **)((char *)&v550->isa + (_QWORD)v549)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2);
      v570 = *v569;
      v571 = v569[1];
      *(_OWORD *)v569 = v1029;
      sub_10001BBBC(v568, *((unint64_t *)&v568 + 1));
      sub_10001EF3C(v570, v571);
      v572 = v1028;
      v573 = (uint64_t *)(*(char **)((char *)&v550->isa + (_QWORD)v549)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
      v574 = *v573;
      v575 = v573[1];
      *(_OWORD *)v573 = v1028;
      sub_10001BBBC(v572, *((unint64_t *)&v572 + 1));
      sub_10001EF3C(v574, v575);
      v576 = v1027;
      v577 = (uint64_t *)(*(char **)((char *)&v550->isa + (_QWORD)v549)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
      v578 = *v577;
      v579 = v577[1];
      *(_OWORD *)v577 = v1027;
      sub_10001BBBC(v576, *((unint64_t *)&v576 + 1));
      sub_10001EF3C(v578, v579);
      v580 = *(uint64_t *)((char *)&v550->isa + (_QWORD)v549);
      *(_WORD *)(v580 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId) = v1033;
      v1000 = v1022;
      v581 = sub_100035530();
      swift_retain();
      *(_QWORD *)(v580 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons) = DataProtocol.intValue.getter(&type metadata for Data, v581);
      swift_release();
      v582 = v1031;
      v583 = (uint64_t *)(*(char **)((char *)&v550->isa + (_QWORD)v549)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey);
      v584 = *v583;
      v585 = v583[1];
      *(_OWORD *)v583 = v1031;
      sub_10001BBBC(v582, *((unint64_t *)&v582 + 1));
      sub_10001EF3C(v584, v585);
      v586 = v1030;
      v587 = (uint64_t *)(*(char **)((char *)&v550->isa + (_QWORD)v549)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey);
      v588 = *v587;
      v589 = v587[1];
      *(_OWORD *)v587 = v1030;
      sub_10001BBBC(v586, *((unint64_t *)&v586 + 1));
      sub_10001EF3C(v588, v589);
      v590 = *((_QWORD *)&v1033 + 1);
      v591 = v1034;
      v592 = Data.trimmed.getter(*((_QWORD *)&v1033 + 1), v1034);
      v594 = v593;
      v595 = v960;
      static String.Encoding.utf8.getter(v592);
      v596 = (uint8_t *)String.init(data:encoding:)(v592, v594, v595);
      v598 = v597;
      sub_10001BC14(v592, v594);
      v985 = v550;
      v986 = v549;
      v989 = 0;
      if (!v598)
      {
        v599 = Data.trimmed.getter(v590, v591);
        v601 = v600;
        v596 = (uint8_t *)Data.hexString.getter(v599, v600);
        v598 = v602;
        sub_10001BC14(v599, v601);
      }
      v603 = v970;
      ((void (*)(char *, os_log_t, uint64_t))v991)(v970, v990, v993);
      v604 = swift_allocObject(&unk_101057BE0, 32, 7);
      v983 = v596;
      *(_QWORD *)(v604 + 16) = v596;
      *(_QWORD *)(v604 + 24) = v598;
      swift_bridgeObjectRetain(v598);
      v606 = Logger.logObject.getter(v605);
      v607 = static os_log_type_t.default.getter(v606);
      v608 = swift_allocObject(&unk_101057C08, 17, 7);
      *(_BYTE *)(v608 + 16) = 34;
      v609 = swift_allocObject(&unk_101057C30, 17, 7);
      *(_BYTE *)(v609 + 16) = 8;
      v610 = swift_allocObject(&unk_101057C58, 32, 7);
      *(_QWORD *)(v610 + 16) = sub_100059034;
      *(_QWORD *)(v610 + 24) = v604;
      v611 = swift_allocObject(&unk_101057C80, 32, 7);
      *(_QWORD *)(v611 + 16) = sub_10005CBA4;
      *(_QWORD *)(v611 + 24) = v610;
      v612 = swift_allocObject(v987, 80, 7);
      sub_100882D28(v612, 3);
      *v613 = sub_10005CBC4;
      v613[1] = v608;
      v613[2] = sub_10005CBC4;
      v613[3] = v609;
      v613[4] = sub_10005CBB4;
      v613[5] = v611;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v981) = v607;
      if (os_log_type_enabled(v606, (os_log_type_t)v607))
      {
        v980 = v606;
        v614 = (uint8_t *)sub_1006948A0(12);
        v615 = swift_slowAlloc(32, -1);
        v998 = 0;
        v1017 = (uint8_t *)v615;
        *(_WORD *)v614 = 258;
        *(_QWORD *)&v994 = v614 + 2;
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v608;
        v182 = v989;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        if (v182)
          goto LABEL_193;
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBC4;
        *((_QWORD *)&v1000 + 1) = v609;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        swift_release();
        *(_QWORD *)&v1000 = sub_10005CBB4;
        *((_QWORD *)&v1000 + 1) = v611;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
        v616 = v993;
        v617 = v984;
        v989 = 0;
        swift_release();
        v618 = v980;
        _os_log_impl((void *)&_mh_execute_header, v980, (os_log_type_t)v981, "beaconDisplayName: %{public}s", v614, 0xCu);
        swift_arrayDestroy(v615, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v615, -1, -1);
        sub_100694894((uint64_t)v614);

        v992 = *(_QWORD *)(v992 + 8);
        ((void (*)(char *, uint64_t))v992)(v970, v616);
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        v992 = *(_QWORD *)(v992 + 8);
        ((void (*)(char *, uint64_t))v992)(v603, v993);
        v617 = v984;
      }
      v620 = v985;
      v619 = v986;
      v621 = (_QWORD *)(*(char **)((char *)&v985->isa + (_QWORD)v986)
                      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryDisplayName);
      *v621 = v983;
      v621[1] = v598;
      swift_bridgeObjectRelease();
      v622 = v619;
      v623 = v620;
      swift_retain();
      LOBYTE(v620) = sub_1001480D0();
      swift_release();
      v624 = v982;
      v625 = v961;
      if ((v620 & 1) != 0)
      {
        v626 = sub_1000DD8FC();
        v627 = v993;
        v628 = ((uint64_t (*)(char *, uint64_t, uint64_t))v991)(v625, v626, v993);
        v629 = Logger.logObject.getter(v628);
        v630 = static os_log_type_t.default.getter(v629);
        v631 = sub_100BD13F8(0);
        v632 = os_log_type_enabled(v629, v630);
        v182 = v989;
        if (v632)
        {
          v633 = (uint8_t *)sub_1006948A0(2);
          *(_QWORD *)&v994 = 0;
          v998 = 0;
          *(_WORD *)v633 = 0;
          *(_QWORD *)&v1000 = v633 + 2;
          sub_100A3DD1C((uint64_t)v631, (uint64_t)&v1000, (uint64_t)&v994, (uint64_t)&v998);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v629, v630, "S1 contains session nonce. Hardcoded pairing detected!", v633, 2u);
          v634 = (uint64_t)v633;
          v617 = v984;
          sub_100694894(v634);

        }
        else
        {

          swift_bridgeObjectRelease();
        }
        ((void (*)(char *, uint64_t))v992)(v625, v627);
        v624 = v982;
      }
      else
      {
        v182 = v989;
      }
      v673 = sub_1005FD720();
      v674 = Data.chunked(into:)(v673, v1024, *((_QWORD *)&v1024 + 1));
      v675 = sub_10004F2F8(v674);
      *(_QWORD *)(*(char **)((char *)&v623->isa + (_QWORD)v622)
                + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers) = v674;
      swift_bridgeObjectRelease();
      if ((*(_BYTE *)(v617 + 200) & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v676 = v955;
        sub_10081F5CC(v624, v955);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v971 + 48))(v676, 1, v925) == 1)
        {
          swift_bridgeObjectRelease();
          sub_100004048(v676, (uint64_t *)&unk_1010FF7F0);
        }
        else
        {
          v677 = v624;
          v678 = v952;
          sub_1000126EC(v676, v952, type metadata accessor for OwnedBeaconGroup);
          v679 = sub_100367114();
          v680 = sub_100CA7E28(v679);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain(v680);
          v681 = sub_100058270((uint64_t)v675, v680);
          swift_bridgeObjectRelease();
          if ((v681 & 1) == 0)
          {
            ((void (*)(char *, os_log_t, uint64_t))v991)(v945, v990, v993);
            v761 = swift_allocObject(&unk_101057E38, 24, 7);
            *(_QWORD *)(v761 + 16) = v675;
            v762 = swift_allocObject(&unk_101057E60, 32, 7);
            *(_QWORD *)(v762 + 16) = sub_10005CD3C;
            *(_QWORD *)(v762 + 24) = v761;
            v763 = swift_allocObject(&unk_101057E88, 24, 7);
            *(_QWORD *)(v763 + 16) = v680;
            v764 = swift_allocObject(&unk_101057EB0, 32, 7);
            *(_QWORD *)(v764 + 16) = sub_10005CD3C;
            *(_QWORD *)(v764 + 24) = v763;
            v989 = Logger.logObject.getter(v764);
            LODWORD(v986) = static os_log_type_t.error.getter(v989);
            v765 = swift_allocObject(&unk_101057ED8, 17, 7);
            *(_BYTE *)(v765 + 16) = 32;
            v766 = swift_allocObject(&unk_101057F00, 17, 7);
            *(_BYTE *)(v766 + 16) = 8;
            v767 = swift_allocObject(&unk_101057F28, 32, 7);
            *(_QWORD *)(v767 + 16) = sub_10005942C;
            *(_QWORD *)(v767 + 24) = v762;
            v768 = swift_allocObject(&unk_101057F50, 32, 7);
            *(_QWORD *)(v768 + 16) = sub_10005CBA4;
            *(_QWORD *)(v768 + 24) = v767;
            v769 = swift_allocObject(&unk_101057F78, 17, 7);
            *(_BYTE *)(v769 + 16) = 32;
            v770 = swift_allocObject(&unk_101057FA0, 17, 7);
            *(_BYTE *)(v770 + 16) = 8;
            v771 = swift_allocObject(&unk_101057FC8, 32, 7);
            *(_QWORD *)(v771 + 16) = sub_100059434;
            *(_QWORD *)(v771 + 24) = v764;
            v772 = swift_allocObject(&unk_101057FF0, 32, 7);
            *(_QWORD *)(v772 + 16) = sub_10005CBA4;
            *(_QWORD *)(v772 + 24) = v771;
            v773 = swift_allocObject(v987, 128, 7);
            sub_100882D28(v773, 6);
            *v774 = sub_10005CBC4;
            v774[1] = v765;
            v774[2] = sub_10005CBC4;
            v774[3] = v766;
            v774[4] = sub_10005CBB4;
            v774[5] = v768;
            v774[6] = sub_10005CBC4;
            v774[7] = v769;
            v774[8] = sub_10005CBC4;
            v774[9] = v770;
            v774[10] = sub_10005CBB4;
            v774[11] = v772;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            v775 = v989;
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v775, (os_log_type_t)v986))
            {
              v776 = (uint8_t *)sub_1006948A0(22);
              v777 = swift_slowAlloc(64, -1);
              v998 = 0;
              v985 = v777;
              v1017 = (uint8_t *)v777;
              v987 = v776;
              *(_WORD *)v776 = 514;
              *(_QWORD *)&v994 = v776 + 2;
              *(_QWORD *)&v1000 = sub_10005CBC4;
              *((_QWORD *)&v1000 + 1) = v765;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
              if (v182)
                goto LABEL_193;
              swift_release();
              *(_QWORD *)&v1000 = sub_10005CBC4;
              *((_QWORD *)&v1000 + 1) = v766;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
              swift_release();
              *(_QWORD *)&v1000 = sub_10005CBB4;
              *((_QWORD *)&v1000 + 1) = v768;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
              v220 = v988;
              swift_release();
              *(_QWORD *)&v1000 = sub_10005CBC4;
              *((_QWORD *)&v1000 + 1) = v769;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
              v778 = v952;
              swift_release();
              *(_QWORD *)&v1000 = sub_10005CBC4;
              *((_QWORD *)&v1000 + 1) = v770;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
              v779 = v993;
              v780 = v945;
              swift_release();
              *(_QWORD *)&v1000 = sub_10005CBB4;
              *((_QWORD *)&v1000 + 1) = v772;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
              swift_release();
              v781 = v989;
              v782 = v987;
              _os_log_impl((void *)&_mh_execute_header, v989, (os_log_type_t)v986, "Invalid otherSerialNumbers: %s. allSerialNumbers: %s", v987, 0x16u);
              v783 = v985;
              swift_arrayDestroy(v985, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v783, -1, -1);
              sub_100694894((uint64_t)v782);

              v784 = (void (*)(uint64_t, uint64_t))v992;
              ((void (*)(char *, uint64_t))v992)(v780, v779);
            }
            else
            {

              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v779 = v993;
              v784 = (void (*)(uint64_t, uint64_t))v992;
              ((void (*)(char *, uint64_t))v992)(v945, v993);
              v220 = v988;
              v778 = v952;
            }
            v843 = (uint64_t)v941;
            ((void (*)(char *, os_log_t, uint64_t))v991)(v941, v990, v779);
            sub_100367170(v843);
            sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
            sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14);
            v784(v843, v779);
            result = sub_1000126B0(v778, type metadata accessor for OwnedBeaconGroup);
            v221 = 13;
            goto LABEL_142;
          }
          sub_1000126B0(v678, type metadata accessor for OwnedBeaconGroup);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v624 = v677;
        }
      }
      v682 = *(uint64_t *)((char *)&v623->isa + (_QWORD)v622);
      swift_retain();
      v683 = sub_1000EDD30();
      if (v182)
      {
        swift_release();
        v684 = v959;
        ((void (*)(char *, os_log_t, uint64_t))v991)(v959, v990, v993);
        v685 = swift_allocObject(&unk_101057CA8, 24, 7);
        *(_QWORD *)(v685 + 16) = v182;
        v686 = swift_errorRetain(v182);
        v991 = Logger.logObject.getter(v686);
        v687 = static os_log_type_t.error.getter(v991);
        v688 = swift_allocObject(&unk_101057CD0, 17, 7);
        v989 = v182;
        v689 = v688;
        *(_BYTE *)(v688 + 16) = 34;
        v690 = swift_allocObject(&unk_101057CF8, 17, 7);
        *(_BYTE *)(v690 + 16) = 8;
        v691 = swift_allocObject(&unk_101057D20, 32, 7);
        *(_QWORD *)(v691 + 16) = sub_1000F9544;
        *(_QWORD *)(v691 + 24) = v685;
        v692 = swift_allocObject(&unk_101057D48, 32, 7);
        *(_QWORD *)(v692 + 16) = sub_10005CBA4;
        *(_QWORD *)(v692 + 24) = v691;
        v693 = swift_allocObject(v987, 80, 7);
        sub_100882D28(v693, 3);
        *v694 = sub_10005CBC4;
        v694[1] = v689;
        v694[2] = sub_10005CBC4;
        v694[3] = v690;
        v694[4] = sub_10005CBB4;
        v694[5] = v692;
        swift_retain();
        swift_retain();
        swift_retain();
        v695 = v991;
        swift_bridgeObjectRelease();
        LODWORD(v990) = v687;
        if (os_log_type_enabled(v695, (os_log_type_t)v687))
        {
          v696 = v989;
          v697 = (uint8_t *)sub_1006948A0(12);
          v698 = swift_slowAlloc(32, -1);
          v998 = 0;
          v1017 = (uint8_t *)v698;
          *(_WORD *)v697 = 258;
          *(_QWORD *)&v994 = v697 + 2;
          *(_QWORD *)&v1000 = sub_10005CBC4;
          *((_QWORD *)&v1000 + 1) = v689;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
          swift_release();
          *(_QWORD *)&v1000 = sub_10005CBC4;
          *((_QWORD *)&v1000 + 1) = v690;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
          v699 = v959;
          swift_release();
          *(_QWORD *)&v1000 = sub_10005CBB4;
          *((_QWORD *)&v1000 + 1) = v692;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v994, (uint64_t)&v998, (uint64_t)&v1017);
          v700 = v696;
          swift_release();
          v701 = v991;
          _os_log_impl((void *)&_mh_execute_header, v991, (os_log_type_t)v990, "Unable to parse otherSerialNumbersAndMacAddressesMap due to %{public}s", v697, 0xCu);
          swift_arrayDestroy(v698, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v698, -1, -1);
          sub_100694894((uint64_t)v697);

          sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
          swift_errorRelease(v700);
          sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          v702 = v699;
        }
        else
        {
          swift_errorRelease(v989);

          swift_release();
          swift_release();
          swift_release();
          sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
          v702 = v684;
        }
        result = ((uint64_t (*)(char *, uint64_t))v992)(v702, v993);
        v186 = v988;
        v187 = 13;
        goto LABEL_16;
      }
      *(_QWORD *)(v682 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses) = v683;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1000EF464(v624, (unint64_t)&v1000);
      v703 = v993;
      if ((v1014 & 1) != 0)
      {
        v989 = 0;
        sub_100059244((uint64_t)&v1000, (uint64_t)&v994);
        v704 = v944;
        ((void (*)(char *, os_log_t, uint64_t))v991)(v944, v990, v703);
        sub_100059280(&v994, (uint64_t)&v998);
        v705 = swift_allocObject(&unk_101057D70, 57, 7);
        v706 = sub_100059244((uint64_t)&v998, v705 + 16);
        v707 = Logger.logObject.getter(v706);
        v708 = static os_log_type_t.error.getter(v707);
        v709 = swift_allocObject(&unk_101057D98, 17, 7);
        *(_BYTE *)(v709 + 16) = 34;
        v710 = swift_allocObject(&unk_101057DC0, 17, 7);
        *(_BYTE *)(v710 + 16) = 8;
        v711 = swift_allocObject(&unk_101057DE8, 32, 7);
        *(_QWORD *)(v711 + 16) = sub_100059350;
        *(_QWORD *)(v711 + 24) = v705;
        v712 = swift_allocObject(&unk_101057E10, 32, 7);
        *(_QWORD *)(v712 + 16) = sub_10005CBA4;
        *(_QWORD *)(v712 + 24) = v711;
        v713 = swift_allocObject(v987, 80, 7);
        sub_100882D28(v713, 3);
        *v714 = sub_10005CBC4;
        v714[1] = v709;
        v714[2] = sub_10005CBC4;
        v714[3] = v710;
        v714[4] = sub_10005CBB4;
        v714[5] = v712;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v991) = v708;
        if (os_log_type_enabled(v707, (os_log_type_t)v708))
        {
          v715 = (uint8_t *)sub_1006948A0(12);
          v716 = swift_slowAlloc(32, -1);
          v1016 = 0;
          v1015 = v716;
          *(_WORD *)v715 = 258;
          v1017 = v715 + 2;
          v998 = sub_10005CBC4;
          v999 = v709;
          v182 = v989;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v998, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          if (v182)
            goto LABEL_193;
          swift_release();
          v998 = sub_10005CBC4;
          v999 = v710;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v998, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          v717 = v944;
          swift_release();
          v998 = sub_10005CBB4;
          v999 = v712;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v998, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v707, (os_log_type_t)v991, "Unable to generate finalizeCommand payload due to %{public}s", v715, 0xCu);
          swift_arrayDestroy(v716, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v716, -1, -1);
          sub_100694894((uint64_t)v715);

          sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
          sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          v718 = v717;
        }
        else
        {

          swift_release();
          swift_release();
          swift_release();
          sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
          v718 = v704;
        }
        ((void (*)(char *, uint64_t))v992)(v718, v993);
        v840 = v988;
        result = sub_100059244((uint64_t)&v994, (uint64_t)v988);
        *((_BYTE *)v840 + 216) = 1;
        return result;
      }
      sub_1000F7F88((uint64_t)&v1000, (uint64_t)&v994);
      v754 = v942;
      v755 = ((uint64_t (*)(char *, os_log_t, uint64_t))v991)(v942, v990, v703);
      v756 = Logger.logObject.getter(v755);
      v757 = static os_log_type_t.default.getter(v756);
      v758 = sub_100BD13F8(0);
      if (os_log_type_enabled(v756, v757))
      {
        v759 = sub_1006948A0(2);
        v1017 = 0;
        v1016 = 0;
        *(_WORD *)v759 = 0;
        v998 = (uint64_t (*)())(v759 + 2);
        sub_100A3DD1C((uint64_t)v758, (uint64_t)&v998, (uint64_t)&v1017, (uint64_t)&v1016);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v756, v757, "Successfully generated finalize pairing command.", (uint8_t *)v759, 2u);
        sub_100694894(v759);

        sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      }
      else
      {

        swift_bridgeObjectRelease();
        sub_1000F957C((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      }
      ((void (*)(char *, uint64_t))v992)(v754, v703);
      v841 = v988;
      v842 = &v994;
LABEL_163:
      result = sub_1000F7F88((uint64_t)v842, (uint64_t)v841);
      *((_BYTE *)v841 + 216) = 0;
      return result;
    }
    ((void (*)(uint64_t, os_log_t, uint64_t))v991)(v979, v990, v135);
    v244 = swift_allocObject(&unk_101057280, 232, 7);
    sub_1000F7F88((uint64_t)v1035, v244 + 16);
    sub_1000F7F88((uint64_t)v1018, (uint64_t)&v1021);
    v245 = (uint64_t *)sub_1000F9B34((uint64_t)&v1021);
    v246 = sub_1000F957C(v245, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
    v247 = Logger.logObject.getter(v246);
    v248 = static os_log_type_t.error.getter(v247);
    v249 = swift_allocObject(&unk_1010572A8, 17, 7);
    *(_BYTE *)(v249 + 16) = 34;
    v250 = swift_allocObject(&unk_1010572D0, 17, 7);
    *(_BYTE *)(v250 + 16) = 8;
    v251 = swift_allocObject(&unk_1010572F8, 32, 7);
    *(_QWORD *)(v251 + 16) = sub_1000FC3E4;
    *(_QWORD *)(v251 + 24) = v244;
    v252 = swift_allocObject(&unk_101057320, 32, 7);
    *(_QWORD *)(v252 + 16) = sub_10005CBA4;
    *(_QWORD *)(v252 + 24) = v251;
    v253 = swift_allocObject(v987, 80, 7);
    sub_100882D28(v253, 3);
    *v254 = sub_10005CBC4;
    v254[1] = v249;
    v254[2] = sub_10005CBC4;
    v254[3] = v250;
    v254[4] = sub_10005CBB4;
    v254[5] = v252;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v992) = v248;
    if (os_log_type_enabled(v247, (os_log_type_t)v248))
    {
      v255 = (uint8_t *)sub_1006948A0(12);
      v256 = swift_slowAlloc(32, -1);
      v1016 = 0;
      v1015 = v256;
      *(_WORD *)v255 = 258;
      v1017 = v255 + 2;
      v998 = sub_10005CBC4;
      v999 = v249;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v998, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
      swift_release();
      v998 = sub_10005CBC4;
      v999 = v250;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v998, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
      swift_release();
      v998 = sub_10005CBB4;
      v999 = v252;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v998, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
      v220 = v988;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v247, (os_log_type_t)v992, "Invalid sendPairingData payload %{public}s", v255, 0xCu);
      swift_arrayDestroy(v256, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v256, -1, -1);
      sub_100694894((uint64_t)v255);

      sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      v257 = v979;
LABEL_37:
      result = ((uint64_t (*)(uint64_t, uint64_t))v989)(v257, v993);
LABEL_141:
      v221 = 9;
      goto LABEL_142;
    }

    swift_release();
    swift_release();
    swift_release();
    sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    v366 = v224;
    v760 = v993;
    goto LABEL_140;
  }
  sub_1000F9B34((uint64_t)v1036);
  v198 = ((uint64_t (*)(os_log_t, os_log_t, uint64_t))v991)(v156, v990, v135);
  v199 = Logger.logObject.getter(v198);
  v200 = static os_log_type_t.default.getter(v199);
  v201 = sub_100BD13F8(0);
  if (os_log_type_enabled(v199, v200))
  {
    v202 = v135;
    v203 = (uint8_t *)sub_1006948A0(2);
    *(_QWORD *)&v1021 = 0;
    *(_QWORD *)&v994 = 0;
    *(_WORD *)v203 = 0;
    *(_QWORD *)&v1000 = v203 + 2;
    sub_100A3DD1C((uint64_t)v201, (uint64_t)&v1000, (uint64_t)&v1021, (uint64_t)&v994);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v199, v200, "Received pairing status.", v203, 2u);
    v204 = (uint64_t)v203;
    v135 = v202;
    sub_100694894(v204);

    v205 = v156;
    v206 = v202;
  }
  else
  {

    swift_bridgeObjectRelease();
    v205 = v156;
    v206 = v135;
  }
  ((void (*)(os_log_t, uint64_t))v989)(v205, v206);
  v258 = *(_QWORD *)(v984 + 64);
  v259 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState;
  *(_BYTE *)(v258 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 5;
  sub_10099CCDC();
  v260 = sub_10001A9A8(&qword_1010EC540);
  if (!swift_dynamicCast(&v1021, &v998, v260, &type metadata for AirPodsLESendPairingStatusCommandPayload, 6))
  {
    v954 = 0;
    v264 = v964;
    ((void (*)(char *, os_log_t, uint64_t))v991)(v964, v990, v135);
    v265 = v135;
    v266 = swift_allocObject(&unk_101056970, 232, 7);
    sub_1000F7F88((uint64_t)v1035, v266 + 16);
    sub_1000F7F88((uint64_t)v1018, (uint64_t)&v1000);
    v267 = (uint64_t *)sub_1000F9B34((uint64_t)&v1000);
    v268 = v267[2];
    v269 = v267[3];
    v270 = v267[4];
    v271 = v267[5];
    v272 = v267[6];
    v273 = v267[7];
    sub_10001BBBC(*v267, v267[1]);
    sub_10001BBBC(v268, v269);
    sub_10001BBBC(v270, v271);
    v274 = sub_10001BBBC(v272, v273);
    v275 = Logger.logObject.getter(v274);
    v276 = static os_log_type_t.error.getter(v275);
    v277 = swift_allocObject(&unk_101056998, 17, 7);
    *(_BYTE *)(v277 + 16) = 34;
    v278 = swift_allocObject(&unk_1010569C0, 17, 7);
    *(_BYTE *)(v278 + 16) = 8;
    v279 = swift_allocObject(&unk_1010569E8, 32, 7);
    *(_QWORD *)(v279 + 16) = sub_1000F9088;
    *(_QWORD *)(v279 + 24) = v266;
    v280 = swift_allocObject(&unk_101056A10, 32, 7);
    *(_QWORD *)(v280 + 16) = sub_10005CBA4;
    *(_QWORD *)(v280 + 24) = v279;
    v281 = swift_allocObject(v987, 80, 7);
    sub_100882D28(v281, 3);
    *v282 = sub_10005CBC4;
    v282[1] = v277;
    v282[2] = sub_10005CBC4;
    v282[3] = v278;
    v282[4] = sub_10005CBB4;
    v282[5] = v280;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v275, v276))
    {
      v283 = v276;
      v284 = (uint8_t *)sub_1006948A0(12);
      v285 = swift_slowAlloc(32, -1);
      v1016 = 0;
      v1015 = v285;
      *(_WORD *)v284 = 258;
      v1017 = v284 + 2;
      *(_QWORD *)&v994 = sub_10005CBC4;
      *((_QWORD *)&v994 + 1) = v277;
      v182 = v954;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
      if (v182)
        goto LABEL_193;
      swift_release();
      *(_QWORD *)&v994 = sub_10005CBC4;
      *((_QWORD *)&v994 + 1) = v278;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
      swift_release();
      *(_QWORD *)&v994 = sub_10005CBB4;
      *((_QWORD *)&v994 + 1) = v280;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v994, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
      v220 = v988;
      v286 = v964;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v275, v283, "Invalid sendPairingStatus payload %{public}s", v284, 0xCu);
      swift_arrayDestroy(v285, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v285, -1, -1);
      sub_100694894((uint64_t)v284);

      sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      v257 = (uint64_t)v286;
      goto LABEL_37;
    }

    swift_release();
    swift_release();
    swift_release();
    sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    v366 = (uint64_t)v264;
    v760 = v265;
LABEL_140:
    result = ((uint64_t (*)(uint64_t, uint64_t))v989)(v366, v760);
    v220 = v988;
    goto LABEL_141;
  }
  v994 = v1021;
  v995 = v1022;
  v996 = v1023;
  v997 = v1024;
  v261 = v1022;
  sub_10001BBBC(v1022, *((unint64_t *)&v1022 + 1));
  v262 = sub_100691A58(v261, *((unint64_t *)&v261 + 1));
  if (!static DatabaseCheckpointMode.__derived_enum_equals(_:_:)(v262, 0))
  {
    v367 = v958;
    ((void (*)(char *, os_log_t, uint64_t))v991)(v958, v990, v135);
    v368 = swift_allocObject(&unk_101056A38, 17, 7);
    *(_BYTE *)(v368 + 16) = v262;
    v369 = swift_allocObject(&unk_101056A60, 32, 7);
    *(_QWORD *)(v369 + 16) = sub_10005832C;
    *(_QWORD *)(v369 + 24) = v368;
    v370 = Logger.logObject.getter(v369);
    v371 = static os_log_type_t.error.getter(v370);
    v372 = swift_allocObject(&unk_101056A88, 17, 7);
    *(_BYTE *)(v372 + 16) = 34;
    v373 = swift_allocObject(&unk_101056AB0, 17, 7);
    *(_BYTE *)(v373 + 16) = 8;
    v374 = swift_allocObject(&unk_101056AD8, 32, 7);
    *(_QWORD *)(v374 + 16) = sub_100058338;
    *(_QWORD *)(v374 + 24) = v369;
    v375 = swift_allocObject(&unk_101056B00, 32, 7);
    *(_QWORD *)(v375 + 16) = sub_10005CBA4;
    *(_QWORD *)(v375 + 24) = v374;
    v376 = swift_allocObject(v987, 80, 7);
    sub_100882D28(v376, 3);
    *v377 = sub_10005CBC4;
    v377[1] = v372;
    v377[2] = sub_10005CBC4;
    v377[3] = v373;
    v377[4] = sub_10005CBB4;
    v377[5] = v375;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v992) = v371;
    if (os_log_type_enabled(v370, (os_log_type_t)v371))
    {
      v378 = (uint8_t *)sub_1006948A0(12);
      v379 = swift_slowAlloc(32, -1);
      v998 = 0;
      v1017 = (uint8_t *)v379;
      *(_WORD *)v378 = 258;
      *(_QWORD *)&v1021 = v378 + 2;
      *(_QWORD *)&v1000 = sub_10005CBC4;
      *((_QWORD *)&v1000 + 1) = v372;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
      swift_release();
      *(_QWORD *)&v1000 = sub_10005CBC4;
      *((_QWORD *)&v1000 + 1) = v373;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
      swift_release();
      *(_QWORD *)&v1000 = sub_10005CBB4;
      *((_QWORD *)&v1000 + 1) = v375;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
      v220 = v988;
      v380 = v958;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v370, (os_log_type_t)v992, "Pairing failed with status %{public}s", v378, 0xCu);
      swift_arrayDestroy(v379, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v379, -1, -1);
      sub_100694894((uint64_t)v378);

      sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      result = ((uint64_t (*)(char *, uint64_t))v989)(v380, v993);
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      result = ((uint64_t (*)(char *, uint64_t))v989)(v367, v993);
      v220 = v988;
    }
    v221 = 7;
    goto LABEL_142;
  }
  v263 = v994;
  sub_10001BBBC(v994, *((unint64_t *)&v994 + 1));
  sub_1002F74B0(v263, *((uint64_t *)&v263 + 1));
  v989 = 0;
  v978 = (char *)v259;
  v723 = *((_QWORD *)&v1000 + 1);
  v724 = (uint8_t *)v1000;
  v986 = (os_log_t)OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v725 = *(_QWORD *)(v258 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  *((_QWORD *)&v1001 + 1) = &type metadata for CollaborativeKeyGen.v1.C3;
  *(_QWORD *)&v1002 = sub_100058360();
  v1000 = __PAIR128__((unint64_t)v723, (unint64_t)v724);
  sub_100005CF0((uint64_t)&v1000, (uint64_t)&v1021, &qword_1010EC550);
  v726 = v258;
  v727 = v725 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
  swift_beginAccess(v725 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3, &v998, 33, 0);
  swift_retain();
  v980 = v723;
  v981 = v724;
  sub_10001BBBC((uint64_t)v724, (unint64_t)v723);
  sub_100004084((uint64_t)&v1021, v727, &qword_1010EC550);
  swift_endAccess(&v998);
  swift_release();
  v728 = v986;
  v729 = (uint64_t *)(*(char **)((char *)&v986->isa + v726) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
  v730 = *v729;
  v731 = v729[1];
  *(_OWORD *)v729 = v261;
  sub_10001BBBC(v261, *((unint64_t *)&v261 + 1));
  sub_10001EF3C(v730, v731);
  v979 = v726;
  v732 = *(uint64_t *)((char *)&v728->isa + v726);
  v733 = v993;
  v735 = *((_QWORD *)&v996 + 1);
  v734 = v996;
  v736 = (uint64_t *)(v732 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
  v737 = *v736;
  v738 = v736[1];
  *v736 = v996;
  v736[1] = v735;
  sub_10001BBBC(v734, v735);
  sub_10001EF3C(v737, v738);
  v739 = v947;
  ((void (*)(char *, os_log_t, uint64_t))v991)(v947, v990, v733);
  v740 = swift_allocObject(&unk_101056BF0, 17, 7);
  *(_BYTE *)(v740 + 16) = v262;
  v741 = swift_allocObject(&unk_101056C18, 32, 7);
  *(_QWORD *)(v741 + 16) = sub_10005CD38;
  *(_QWORD *)(v741 + 24) = v740;
  v742 = Logger.logObject.getter(v741);
  LODWORD(v724) = static os_log_type_t.default.getter(v742);
  v743 = swift_allocObject(&unk_101056C40, 17, 7);
  *(_BYTE *)(v743 + 16) = 34;
  v744 = swift_allocObject(&unk_101056C68, 17, 7);
  *(_BYTE *)(v744 + 16) = 8;
  v745 = swift_allocObject(&unk_101056C90, 32, 7);
  *(_QWORD *)(v745 + 16) = sub_10005CBA8;
  *(_QWORD *)(v745 + 24) = v741;
  v746 = swift_allocObject(&unk_101056CB8, 32, 7);
  *(_QWORD *)(v746 + 16) = sub_10005CBA4;
  *(_QWORD *)(v746 + 24) = v745;
  v747 = swift_allocObject(v987, 80, 7);
  sub_100882D28(v747, 3);
  *v748 = sub_10005CBC4;
  v748[1] = v743;
  v748[2] = sub_10005CBC4;
  v748[3] = v744;
  v748[4] = sub_10005CBB4;
  v748[5] = v746;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  LODWORD(v986) = (_DWORD)v724;
  if (os_log_type_enabled(v742, (os_log_type_t)v724))
  {
    v750 = (uint8_t *)sub_1006948A0(12);
    v751 = swift_slowAlloc(32, -1);
    v998 = 0;
    v1017 = (uint8_t *)v751;
    *(_WORD *)v750 = 258;
    *(_QWORD *)&v1021 = v750 + 2;
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v743;
    v182 = v989;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    if (v182)
      goto LABEL_193;
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v744;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBB4;
    *((_QWORD *)&v1000 + 1) = v746;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    v752 = v992;
    v753 = v951;
    v989 = 0;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v742, (os_log_type_t)v986, "status: %{public}s", v750, 0xCu);
    swift_arrayDestroy(v751, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v751, -1, -1);
    sub_100694894((uint64_t)v750);

    v733 = v993;
    v986 = *(os_log_t *)(v752 + 8);
    ((void (*)(char *, uint64_t))v986)(v947, v993);
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    v986 = *(os_log_t *)(v992 + 8);
    ((void (*)(char *, uint64_t))v986)(v739, v733);
    v753 = v951;
  }
  ((void (*)(char *, os_log_t, uint64_t))v991)(v753, v990, v733);
  v785 = (_OWORD *)swift_allocObject(&unk_101056CE0, 80, 7);
  v786 = v995;
  v785[1] = v994;
  v785[2] = v786;
  v787 = v997;
  v785[3] = v996;
  v785[4] = v787;
  v788 = (_OWORD *)swift_allocObject(&unk_101056D08, 80, 7);
  v789 = v995;
  v788[1] = v994;
  v788[2] = v789;
  v790 = v997;
  v788[3] = v996;
  v788[4] = v790;
  sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  v791 = sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  v985 = (os_log_t)Logger.logObject.getter(v791);
  LODWORD(v983) = static os_log_type_t.debug.getter(v985);
  v792 = swift_allocObject(&unk_101056D30, 17, 7);
  *(_BYTE *)(v792 + 16) = 0;
  v793 = swift_allocObject(&unk_101056D58, 17, 7);
  *(_BYTE *)(v793 + 16) = 8;
  v794 = swift_allocObject(&unk_101056D80, 32, 7);
  *(_QWORD *)(v794 + 16) = sub_1000F916C;
  *(_QWORD *)(v794 + 24) = v785;
  v795 = swift_allocObject(&unk_101056DA8, 32, 7);
  *(_QWORD *)(v795 + 16) = sub_1000584DC;
  *(_QWORD *)(v795 + 24) = v794;
  v796 = swift_allocObject(&unk_101056DD0, 17, 7);
  *(_BYTE *)(v796 + 16) = 32;
  v797 = swift_allocObject(&unk_101056DF8, 17, 7);
  *(_BYTE *)(v797 + 16) = 8;
  v798 = swift_allocObject(&unk_101056E20, 32, 7);
  *(_QWORD *)(v798 + 16) = sub_1000584B4;
  *(_QWORD *)(v798 + 24) = v788;
  v799 = swift_allocObject(&unk_101056E48, 32, 7);
  *(_QWORD *)(v799 + 16) = sub_10005CBA4;
  *(_QWORD *)(v799 + 24) = v798;
  v800 = swift_allocObject(v987, 128, 7);
  sub_100882D28(v800, 6);
  *v801 = sub_10005CBC4;
  v801[1] = v792;
  v801[2] = sub_10005CBC4;
  v801[3] = v793;
  v801[4] = sub_1000584E4;
  v801[5] = v795;
  v801[6] = sub_10005CBC4;
  v801[7] = v796;
  v801[8] = sub_10005CBC4;
  v801[9] = v797;
  v801[10] = sub_10005CBB4;
  v801[11] = v799;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v802 = v985;
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v802, (os_log_type_t)v983))
  {
    v803 = (uint8_t *)sub_1006948A0(22);
    v804 = swift_slowAlloc(32, -1);
    v998 = 0;
    v1017 = (uint8_t *)v804;
    v977 = v803;
    *(_WORD *)v803 = 514;
    *(_QWORD *)&v1021 = v803 + 2;
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v792;
    v182 = v989;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    if (v182)
      goto LABEL_193;
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v793;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    swift_release();
    *(_QWORD *)&v1000 = sub_1000584E4;
    *((_QWORD *)&v1000 + 1) = v795;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    v805 = v993;
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v796;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v797;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBB4;
    *((_QWORD *)&v1000 + 1) = v799;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    v806 = v951;
    v989 = 0;
    swift_release();
    v807 = v985;
    v808 = v977;
    _os_log_impl((void *)&_mh_execute_header, v985, (os_log_type_t)v983, "S4 count %ld: %s", v977, 0x16u);
    swift_arrayDestroy(v804, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v804, -1, -1);
    sub_100694894((uint64_t)v808);

    v809 = v806;
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v809 = v951;
    v805 = v993;
  }
  ((void (*)(char *, uint64_t))v986)(v809, v805);
  v810 = v946;
  ((void (*)(char *, os_log_t, uint64_t))v991)(v946, v990, v805);
  v811 = (_OWORD *)swift_allocObject(&unk_101056E70, 80, 7);
  v812 = v995;
  v811[1] = v994;
  v811[2] = v812;
  v813 = v997;
  v811[3] = v996;
  v811[4] = v813;
  v814 = sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  v815 = Logger.logObject.getter(v814);
  v816 = v805;
  v817 = static os_log_type_t.debug.getter(v815);
  v818 = swift_allocObject(&unk_101056E98, 17, 7);
  *(_BYTE *)(v818 + 16) = 32;
  v819 = swift_allocObject(&unk_101056EC0, 17, 7);
  *(_BYTE *)(v819 + 16) = 8;
  v820 = swift_allocObject(&unk_101056EE8, 32, 7);
  *(_QWORD *)(v820 + 16) = sub_10005CD50;
  *(_QWORD *)(v820 + 24) = v811;
  v821 = swift_allocObject(&unk_101056F10, 32, 7);
  *(_QWORD *)(v821 + 16) = sub_10005CBA4;
  *(_QWORD *)(v821 + 24) = v820;
  v822 = swift_allocObject(v987, 80, 7);
  sub_100882D28(v822, 3);
  *v823 = sub_10005CBC4;
  v823[1] = v818;
  v823[2] = sub_10005CBC4;
  v823[3] = v819;
  v823[4] = sub_10005CBB4;
  v823[5] = v821;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  LODWORD(v985) = v817;
  if (os_log_type_enabled(v815, (os_log_type_t)v817))
  {
    v824 = (uint8_t *)sub_1006948A0(12);
    v825 = swift_slowAlloc(32, -1);
    v998 = 0;
    v1017 = (uint8_t *)v825;
    *(_WORD *)v824 = 258;
    *(_QWORD *)&v1021 = v824 + 2;
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v818;
    v182 = v989;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    if (v182)
      goto LABEL_193;
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBC4;
    *((_QWORD *)&v1000 + 1) = v819;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    swift_release();
    *(_QWORD *)&v1000 = sub_10005CBB4;
    *((_QWORD *)&v1000 + 1) = v821;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1021, (uint64_t)&v998, (uint64_t)&v1017);
    v826 = v988;
    v827 = v981;
    v989 = 0;
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v815, (os_log_type_t)v985, "C3: %s", v824, 0xCu);
    swift_arrayDestroy(v825, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v825, -1, -1);
    sub_100694894((uint64_t)v824);

    v828 = v993;
    ((void (*)(char *, uint64_t))v986)(v946, v993);
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v986)(v810, v816);
    v826 = v988;
    v827 = v981;
    v828 = v816;
  }
  v829 = v979 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess(v979 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext, &v998, 0, 0);
  sub_10000F9B8(v829, (uint64_t)&v1000, &qword_1010EC418);
  v830 = v982;
  v831 = v980;
  v832 = v943;
  if (!*((_QWORD *)&v1001 + 1))
  {
    v836 = v828;
    v839 = v980;
    v838 = (uint64_t)v827;
    sub_100004048((uint64_t)&v1000, &qword_1010EC418);
    goto LABEL_168;
  }
  v833 = sub_10001A9A8(&qword_1010EC630);
  v834 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  if ((swift_dynamicCast(&v1021, &v1000, v833, v834, 6) & 1) == 0)
  {
    v836 = v828;
    v839 = v831;
    v838 = (uint64_t)v827;
    goto LABEL_168;
  }
  v835 = v1021;
  sub_10001BBBC((uint64_t)v827, (unint64_t)v831);
  v182 = v989;
  sub_1007DF07C((uint64_t)v835, (uint64_t)v827, (uint64_t)v831);
  if (!v182)
  {
    sub_10001BC14((uint64_t)v827, (unint64_t)v831);
    v851 = v830;
    v852 = v939;
    sub_1000F2524((__int128 *)&v1021, v851, (uint64_t)v939);
    if (swift_getEnumCaseMultiPayload(v852, v938) != 1)
    {
      v868 = (uint64_t)v852;
      v869 = v940;
      sub_1000126EC(v868, v940, type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
      v870 = v869;
      v871 = v931;
      sub_10005972C(v870, v931, type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
      if (swift_getEnumCaseMultiPayload(v871, v930) == 1)
      {
        v986 = 0;
        v989 = v835;
        v872 = v934;
        sub_1000126EC(v871, v934, type metadata accessor for StandaloneBeacon);
        v873 = sub_100B5D40C();
        ((void (*)(char *, uint64_t, uint64_t))v991)(v933, v873, v828);
        v874 = v929;
        sub_10005972C(v872, v929, type metadata accessor for StandaloneBeacon);
        v875 = *(unsigned __int8 *)(v927 + 80);
        v876 = (v875 + 16) & ~v875;
        v877 = v876 + v928;
        v878 = v875 | 7;
        v879 = swift_allocObject(&unk_101057000, v876 + v928, v875 | 7);
        sub_1000126EC(v874, v879 + v876, type metadata accessor for StandaloneBeacon);
        v880 = swift_allocObject(&unk_101057028, 32, 7);
        *(_QWORD *)(v880 + 16) = sub_100058684;
        *(_QWORD *)(v880 + 24) = v879;
        sub_10005972C(v872, v874, type metadata accessor for StandaloneBeacon);
        v881 = swift_allocObject(&unk_101057050, v877, v878);
        sub_1000126EC(v874, v881 + v876, type metadata accessor for StandaloneBeacon);
        v882 = swift_allocObject(&unk_101057078, 32, 7);
        *(_QWORD *)(v882 + 16) = sub_100058808;
        *(_QWORD *)(v882 + 24) = v881;
        v991 = Logger.logObject.getter(v882);
        LODWORD(v990) = static os_log_type_t.default.getter(v991);
        v883 = (uint8_t *)swift_allocObject(&unk_1010570A0, 17, 7);
        v883[16] = 32;
        v985 = (os_log_t)swift_allocObject(&unk_1010570C8, 17, 7);
        LOBYTE(v985[2].isa) = 8;
        v884 = swift_allocObject(&unk_1010570F0, 32, 7);
        *(_QWORD *)(v884 + 16) = sub_1000586CC;
        *(_QWORD *)(v884 + 24) = v880;
        v885 = swift_allocObject(&unk_101057118, 32, 7);
        *(_QWORD *)(v885 + 16) = sub_10005CBA4;
        *(_QWORD *)(v885 + 24) = v884;
        v886 = swift_allocObject(&unk_101057140, 17, 7);
        *(_BYTE *)(v886 + 16) = 112;
        v887 = swift_allocObject(&unk_101057168, 17, 7);
        *(_BYTE *)(v887 + 16) = 8;
        v888 = swift_allocObject(&unk_101057190, 24, 7);
        *(_QWORD *)(v888 + 16) = 1752392040;
        v889 = swift_allocObject(&unk_1010571B8, 32, 7);
        *(_QWORD *)(v889 + 16) = sub_1000588B4;
        *(_QWORD *)(v889 + 24) = v888;
        v890 = swift_allocObject(&unk_1010571E0, 17, 7);
        *(_BYTE *)(v890 + 16) = 33;
        v891 = swift_allocObject(&unk_101057208, 17, 7);
        *(_BYTE *)(v891 + 16) = 8;
        v892 = swift_allocObject(&unk_101057230, 32, 7);
        *(_QWORD *)(v892 + 16) = sub_10005885C;
        *(_QWORD *)(v892 + 24) = v882;
        v893 = swift_allocObject(&unk_101057258, 32, 7);
        *(_QWORD *)(v893 + 16) = sub_10005CBA4;
        *(_QWORD *)(v893 + 24) = v892;
        v894 = swift_allocObject(v987, 176, 7);
        sub_100882D28(v894, 9);
        *v895 = sub_10005CBC4;
        v895[1] = v883;
        v896 = v985;
        v895[2] = sub_10005CBC4;
        v895[3] = v896;
        v895[4] = sub_10005CBB4;
        v895[5] = v885;
        v895[6] = sub_10005CBC4;
        v895[7] = v886;
        v895[8] = sub_10005CBC4;
        v895[9] = v887;
        v895[10] = sub_1000584E4;
        v895[11] = v889;
        v895[12] = sub_10005CBC4;
        v895[13] = v890;
        v895[14] = sub_10005CBC4;
        v895[15] = v891;
        v895[16] = sub_10005CBB4;
        v895[17] = v893;
        v987 = v883;
        v897 = v896;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        v898 = v991;
        if (os_log_type_enabled(v991, (os_log_type_t)v990))
        {
          v983 = (uint8_t *)v893;
          v984 = v890;
          v899 = (uint8_t *)sub_1006948A0(32);
          v900 = swift_slowAlloc(64, -1);
          v1016 = 0;
          v982 = v900;
          v1015 = v900;
          *(_WORD *)v899 = 771;
          v1017 = v899 + 2;
          *(_QWORD *)&v1000 = sub_10005CBC4;
          v182 = v986;
          *((_QWORD *)&v1000 + 1) = v987;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          if (v182)
            goto LABEL_193;
          swift_release();
          *(_QWORD *)&v1000 = sub_10005CBC4;
          *((_QWORD *)&v1000 + 1) = v897;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          v901 = v993;
          swift_release();
          *(_QWORD *)&v1000 = sub_10005CBB4;
          *((_QWORD *)&v1000 + 1) = v885;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          swift_release();
          *(_QWORD *)&v1000 = sub_10005CBC4;
          *((_QWORD *)&v1000 + 1) = v886;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          v831 = v980;
          swift_release();
          *(_QWORD *)&v1000 = sub_10005CBC4;
          *((_QWORD *)&v1000 + 1) = v887;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          swift_release();
          *(_QWORD *)&v1000 = sub_1000584E4;
          *((_QWORD *)&v1000 + 1) = v889;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          v902 = v934;
          swift_release();
          *(_QWORD *)&v1000 = sub_10005CBC4;
          *((_QWORD *)&v1000 + 1) = v984;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          swift_release();
          *(_QWORD *)&v1000 = sub_10005CBC4;
          *((_QWORD *)&v1000 + 1) = v891;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          v903 = v901;
          swift_release();
          *(_QWORD *)&v1000 = sub_10005CBB4;
          *((_QWORD *)&v1000 + 1) = v983;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
          swift_release();
          v904 = v991;
          _os_log_impl((void *)&_mh_execute_header, v991, (os_log_type_t)v990, "Created standalone beacon: %s. BeaconId: %{private,mask.hash}s", v899, 0x20u);
          v905 = v982;
          swift_arrayDestroy(v982, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v905, -1, -1);
          sub_100694894((uint64_t)v899);

          (*(void (**)(char *, uint64_t))(v992 + 8))(v933, v903);
          sub_1000126B0(v902, type metadata accessor for StandaloneBeacon);
          sub_1000126B0(v940, type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          (*(void (**)(char *, uint64_t))(v992 + 8))(v933, v993);
          sub_1000126B0(v934, type metadata accessor for StandaloneBeacon);
          sub_1000126B0(v940, type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
          v831 = v980;
          v182 = v986;
        }
        v978[v979] = 9;
      }
      else
      {
        v910 = v871 + *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
        sub_1000126EC(v871, v937, type metadata accessor for OwnedBeaconGroup);
        sub_1000126EC(v910, v935, type metadata accessor for OwnedBeaconRecord);
        v911 = v926;
        v912 = ((uint64_t (*)(char *, os_log_t, uint64_t))v991)(v926, v990, v828);
        v913 = Logger.logObject.getter(v912);
        v914 = static os_log_type_t.default.getter(v913);
        v915 = sub_100BD13F8(0);
        if (os_log_type_enabled(v913, v914))
        {
          v916 = (uint8_t *)sub_1006948A0(2);
          v989 = v835;
          v917 = v916;
          v1017 = 0;
          v1016 = 0;
          *(_WORD *)v916 = 0;
          *(_QWORD *)&v1000 = v916 + 2;
          sub_100A3DD1C((uint64_t)v915, (uint64_t)&v1000, (uint64_t)&v1017, (uint64_t)&v1016);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v913, v914, "Saved new beacon. Proceed to sending pairing complete.", v917, 2u);
          sub_100694894((uint64_t)v917);

        }
        else
        {

          swift_bridgeObjectRelease();
        }
        ((void (*)(char *, uint64_t))v986)(v911, v828);
        if ((sub_1003690A8() & 1) != 0)
          v978[v979] = 9;
        v918 = v935;
        sub_1007BEC2C(v935);
        sub_1000126B0(v918, type metadata accessor for OwnedBeaconRecord);
        sub_1000126B0(v937, type metadata accessor for OwnedBeaconGroup);
        sub_1000126B0(v940, type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
      }
      v919 = sub_100C2E560();
      v920 = static Data.random(bytes:)(*v919);
      v922 = v921;
      sub_1000F9298();
      BinaryDecodable.init(data:)(v923, v920, v922);
      if (v182)
      {
        swift_errorRelease(v182);
        sub_10001BC14((uint64_t)v981, (unint64_t)v831);
        swift_release();
        sub_10005A4CC((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_1000FC25C);
        sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        result = sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        v187 = 9;
        v186 = v988;
        goto LABEL_16;
      }
      sub_10001BC14((uint64_t)v981, (unint64_t)v831);
      swift_release();
      sub_10005A4CC((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_1000FC25C);
      sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      sub_1000F92DC((uint64_t)&v1000);
      v842 = &v1000;
      v841 = v988;
      goto LABEL_163;
    }
    v989 = v835;
    v853 = *v852;
    v3 = v936;
    ((void (*)(char *, os_log_t, uint64_t))v991)(v936, v990, v828);
    v854 = swift_allocObject(&unk_101056F38, 24, 7);
    *(_QWORD *)(v854 + 16) = v853;
    v992 = v853;
    v855 = swift_errorRetain(v853);
    v113 = Logger.logObject.getter(v855);
    LODWORD(v853) = static os_log_type_t.error.getter(v113);
    v856 = swift_allocObject(&unk_101056F60, 17, 7);
    *(_BYTE *)(v856 + 16) = 34;
    v857 = swift_allocObject(&unk_101056F88, 17, 7);
    *(_BYTE *)(v857 + 16) = 8;
    v858 = swift_allocObject(&unk_101056FB0, 32, 7);
    *(_QWORD *)(v858 + 16) = sub_1000FC3D4;
    *(_QWORD *)(v858 + 24) = v854;
    v859 = swift_allocObject(&unk_101056FD8, 32, 7);
    *(_QWORD *)(v859 + 16) = sub_10005CBA4;
    *(_QWORD *)(v859 + 24) = v858;
    v860 = swift_allocObject(v987, 80, 7);
    sub_100882D28(v860, 3);
    *v861 = sub_10005CBC4;
    v861[1] = v856;
    v861[2] = sub_10005CBC4;
    v861[3] = v857;
    v861[4] = sub_10005CBB4;
    v861[5] = v859;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v991) = v853;
    if (os_log_type_enabled(v113, (os_log_type_t)v853))
    {
      v862 = (uint8_t *)sub_1006948A0(12);
      v863 = swift_slowAlloc(32, -1);
      v1016 = 0;
      v1015 = v863;
      *(_WORD *)v862 = 258;
      v1017 = v862 + 2;
      *(_QWORD *)&v1000 = sub_10005CBC4;
      *((_QWORD *)&v1000 + 1) = v856;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
      swift_release();
      *(_QWORD *)&v1000 = sub_10005CBC4;
      *((_QWORD *)&v1000 + 1) = v857;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
      swift_release();
      *(_QWORD *)&v1000 = sub_10005CBB4;
      *((_QWORD *)&v1000 + 1) = v859;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v1000, (uint64_t)&v1017, (uint64_t)&v1016, (uint64_t)&v1015);
      v864 = v993;
      v865 = v936;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v991, "Failed to create new beacon. %{public}s", v862, 0xCu);
      swift_arrayDestroy(v863, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v863, -1, -1);
      sub_100694894((uint64_t)v862);

      v866 = v865;
      v867 = v864;
LABEL_181:
      ((void (*)(char *, uint64_t))v986)(v866, v867);
      v906 = v981;
      v907 = (uint64_t)v932;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v949 + 56))(v932, 1, 1, v950);
      v908 = v992;
      sub_1000F6EB4(v992, v982, v907);
      swift_release();
      sub_10005A4CC((uint64_t *)&v1021, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_1000FC25C);
      sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      swift_errorRelease(v908);
      sub_10001BC14((uint64_t)v906, (unint64_t)v980);
      sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      result = sub_100004048(v907, (uint64_t *)&unk_1010F9890);
      v909 = v988;
      *v988 = 9;
      *(_OWORD *)(v909 + 1) = 0u;
      *(_OWORD *)(v909 + 3) = 0u;
      *((_BYTE *)v909 + 40) = 11;
      *((_BYTE *)v909 + 216) = 1;
      return result;
    }
LABEL_180:

    swift_release();
    swift_release();
    swift_release();
    v866 = v3;
    v867 = v993;
    goto LABEL_181;
  }
  v836 = v828;
  swift_errorRelease(v182);
  v837 = (unint64_t)v831;
  v838 = (uint64_t)v827;
  v839 = (os_log_t)v837;
  sub_10001BC14((uint64_t)v827, v837);
  swift_release();
  v989 = 0;
  v826 = v988;
LABEL_168:
  v844 = ((uint64_t (*)(char *, os_log_t, uint64_t))v991)(v832, v990, v836);
  v845 = Logger.logObject.getter(v844);
  v846 = static os_log_type_t.error.getter(v845);
  v847 = sub_100BD13F8(0);
  if (os_log_type_enabled(v845, v846))
  {
    v848 = v832;
    v849 = (uint8_t *)sub_1006948A0(2);
    v1017 = 0;
    v1016 = 0;
    *(_WORD *)v849 = 0;
    *(_QWORD *)&v1000 = v849 + 2;
    sub_100A3DD1C((uint64_t)v847, (uint64_t)&v1000, (uint64_t)&v1017, (uint64_t)&v1016);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v845, v846, "Unable to generate initial pairing data from owner context and C3!)", v849, 2u);
    sub_100694894((uint64_t)v849);

    sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    sub_10001BC14(v838, (unint64_t)v839);
    sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    v850 = v848;
    v826 = v988;
  }
  else
  {
    sub_10001BC14(v838, (unint64_t)v839);

    swift_bridgeObjectRelease();
    sub_1000583DC((uint64_t *)&v994, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    sub_1000F84B4((uint64_t)v1035, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    v850 = v832;
  }
  result = ((uint64_t (*)(char *, uint64_t))v986)(v850, v836);
  *v826 = 9;
  *(_OWORD *)(v826 + 1) = 0u;
  *(_OWORD *)(v826 + 3) = 0u;
  *((_BYTE *)v826 + 40) = 11;
  *((_BYTE *)v826 + 216) = 1;
  return result;
}

void sub_1000EDBD0(uint64_t a1)
{
  __int128 v1;
  _BYTE v2[16];
  _BYTE v3[8];

  v1 = *(_OWORD *)(a1 + 112);
  sub_100059F58((uint64_t)&v1, (uint64_t)v2);
  sub_100059F58((uint64_t)v2, (uint64_t)v3);
  __asm { BR              X11 }
}

uint64_t sub_1000EDC20@<X0>(uint64_t a1@<X8>)
{
  return BYTE6(a1);
}

void sub_1000EDC80(uint64_t a1)
{
  __int128 v1;
  _BYTE v2[16];
  _BYTE v3[8];

  v1 = *(_OWORD *)(a1 + 128);
  sub_100059F58((uint64_t)&v1, (uint64_t)v2);
  sub_100059F58((uint64_t)v2, (uint64_t)v3);
  __asm { BR              X11 }
}

uint64_t sub_1000EDCD0@<X0>(uint64_t a1@<X8>)
{
  return BYTE6(a1);
}

uint64_t sub_1000EDD30()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[4];
  _QWORD *v36;

  v36 = _swiftEmptyDictionarySingleton;
  *(_OWORD *)v35 = *(_OWORD *)(v0 + 16);
  v1 = sub_100035530();
  v2 = DataProtocol.intValue.getter(&type metadata for Data, v1);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7DF8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134349056;
    v35[0] = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, &v35[1], v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Number of beacons: %{public}ld", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  if (v2 < 2)
    return (uint64_t)v36;
  v8 = Data.chunked(into:)(20, *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (__int128 *)(v8 + 32);
    do
    {
      v11 = *v10++;
      *(_OWORD *)v35 = v11;
      sub_100056AC8(v35);
      --v9;
    }
    while (v9);
  }
  v12 = swift_bridgeObjectRelease();
  v13 = v36[2];
  v14 = Logger.logObject.getter(v12);
  v15 = v14;
  if (v13 == v2 - 1)
  {
    v16 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v35[0] = v18;
      *(_DWORD *)v17 = 136315138;
      swift_beginAccess(&v36, &v33, 0, 0);
      v19 = v36;
      swift_bridgeObjectRetain(v36);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      v21 = sub_100059BCC();
      v22 = Dictionary.description.getter(v19, &type metadata for OwnedBeaconGroup.SerialNumber, v20, v21);
      v24 = v23;
      swift_bridgeObjectRelease();
      v32 = sub_100016940(v22, v24, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "serialNumbersAndMacAddressesMap: %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    swift_beginAccess(&v36, v35, 0, 0);
    return (uint64_t)v36;
  }
  v26 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v15, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v27 = 134349056;
    swift_beginAccess(&v36, v35, 0, 0);
    v33 = v36[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v26, "Unexpected number of other serial numbers: %{public}ld", v27, 0xCu);
    swift_slowDealloc(v27, -1, -1);
  }

  v28 = type metadata accessor for BinaryEncodingError(0);
  v29 = sub_100006204((unint64_t *)&qword_1010EC000, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError, (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
  swift_allocError(v28, v29, 0, 0);
  v31 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, enum case for BinaryEncodingError.encodingError(_:), v28);
  swift_willThrow(v31);
  return swift_bridgeObjectRelease();
}

void sub_1000EE170(uint64_t a1)
{
  char *v2;
  _BYTE v3[216];
  _BYTE v4[216];
  _BYTE v5[216];

  sub_1000F7F88(a1, (uint64_t)v3);
  sub_1000F7F88((uint64_t)v3, (uint64_t)v5);
  sub_1000F7F88(a1, (uint64_t)v4);
  v2 = (char *)sub_1000EE1D8 + 4 * byte_100E26E40[sub_1000F9034((uint64_t)v4)];
  __asm { BR              X10 }
}

uint64_t sub_1000EE1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  _BYTE v10[216];
  _QWORD v11[32];
  uint64_t v12;
  uint64_t v13;

  v0 = sub_1000F9B34((uint64_t)&v12);
  v9 = *(_OWORD *)v0;
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v11[3] = &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
  v11[4] = sub_10005A2C0();
  v3 = swift_allocObject(&unk_1010584C8, 48, 7);
  v11[0] = v3;
  *(_OWORD *)(v3 + 16) = v9;
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v2;
  sub_1000F7F88((uint64_t)&v13, (uint64_t)v10);
  v4 = (uint64_t *)sub_1000F9B34((uint64_t)v10);
  v5 = v4[2];
  v6 = v4[3];
  sub_10001BBBC(*v4, v4[1]);
  sub_10001BBBC(v5, v6);
  v7 = sub_10001A9A8(&qword_1010EC540);
  return String.init<A>(describing:)(v11, v7);
}

void sub_1000EE52C(uint64_t a1)
{
  __int128 v1;
  _BYTE v2[16];
  _BYTE v3[8];

  v1 = *(_OWORD *)(a1 + 32);
  sub_100059F58((uint64_t)&v1, (uint64_t)v2);
  sub_100059F58((uint64_t)v2, (uint64_t)v3);
  __asm { BR              X11 }
}

uint64_t sub_1000EE57C@<X0>(uint64_t a1@<X8>)
{
  return BYTE6(a1);
}

uint64_t sub_1000EE5DC(uint64_t a1)
{
  _BYTE v3[216];

  sub_1000F7F88(a1, (uint64_t)v3);
  sub_1000F84B4(a1, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
  return String.init<A>(describing:)(v3, &type metadata for AirPodsLEPairingCommand);
}

uint64_t sub_1000EE630@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;

  v3 = v2;
  v32 = a1;
  v34 = a2;
  v4 = sub_10001A9A8(&qword_1010EEC78);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = type metadata accessor for AirPodsLEPairingLockCheckResponse(0);
  v7 = __chkstk_darwin(v30);
  v28 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v29 = (uint64_t)&v27 - v9;
  v10 = swift_allocBox(v4);
  v12 = v11;
  type metadata accessor for SPPairingSessionError(0);
  v14 = v13;
  v36 = 1;
  v15 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v16 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(v35, &v36, v15, v14, v16);
  *v12 = v35[0];
  swift_storeEnumTagMultiPayload(v12, v4, 1);
  v17 = dispatch_group_create();
  dispatch_group_enter(v17);
  v31 = v3;
  LOBYTE(v3) = *(_BYTE *)(v3 + 200);
  v18 = swift_allocObject(&unk_1010566F0, 32, 7);
  *(_QWORD *)(v18 + 16) = v10;
  *(_QWORD *)(v18 + 24) = v17;
  v33 = v10;
  swift_retain();
  v19 = v17;
  sub_1006EE6A4(v32, v3, (void (*)(_QWORD *))sub_1000F8EEC, v18);
  swift_release();
  OS_dispatch_group.wait()();
  swift_beginAccess(v12, v35, 0, 0);
  sub_10000F9B8((uint64_t)v12, (uint64_t)v6, &qword_1010EEC78);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    v36 = *v6;
    v20 = (void *)v36;
    v21 = sub_100006204(&qword_1010EB048, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E20E9C);
    swift_willThrowTypedImpl(&v36, v14, v21);

  }
  else
  {
    v22 = v28;
    sub_1000126EC((uint64_t)v6, v28, type metadata accessor for AirPodsLEPairingLockCheckResponse);

    v23 = v29;
    sub_1000126EC(v22, v29, type metadata accessor for AirPodsLEPairingLockCheckResponse);
    v24 = *(_QWORD *)(*(_QWORD *)(v31 + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    v25 = *(_QWORD *)(v23 + *(int *)(v30 + 56));
    swift_retain();
    sub_1000126B0(v23, type metadata accessor for AirPodsLEPairingLockCheckResponse);
    *(_QWORD *)(v24 + 32) = v25;
    swift_release();
  }
  sub_10000F9B8((uint64_t)v12, v34, &qword_1010EEC78);
  return swift_release();
}

void sub_1000EE920(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  _BYTE v6[24];

  v5 = swift_projectBox(a2);
  swift_beginAccess(v5, v6, 1, 0);
  sub_1000F8EF4(a1, v5, &qword_1010EEC78);
  dispatch_group_leave(a3);
}

void sub_1000EE988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD v11[8];
  _BYTE v12[272];
  _BYTE v13[272];
  _BYTE v14[272];

  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  swift_retain();
  sub_10001BD08(v3, v4);
  sub_100B62420(v3, v4, (uint64_t)v12);
  sub_10001EF3C(v3, v4);
  swift_release();
  sub_100005CF0((uint64_t)v12, (uint64_t)v13, &qword_1010EEC88);
  if (sub_100057AD4((uint64_t)v13) == 1)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B7E28);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to generate ack data!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
  else
  {
    memcpy(v14, v13, sizeof(v14));
    v10 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v10);
    v11[2] = v1;
    v11[3] = v14;
    v11[4] = a1;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-AirPodsAckRegister", 48, 2, sub_1000F8B50, v11, &type metadata for () + 1);
    sub_1000F8B6C((uint64_t)v12);
  }
}

uint64_t sub_1000EEB70(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v16 = a3;
  v7 = type metadata accessor for MACAddress(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = swift_allocObject(&unk_101056588, 24, 7);
  swift_weakInit(v10 + 16, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v7);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(&unk_101056678, v12 + v9, v11 | 7);
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_retain();
  swift_retain();
  sub_1006EEEE0(v16, (void (*)(uint64_t))sub_1000F8DF0, v13);
  swift_release();
  return swift_release();
}

uint64_t sub_1000EECAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t result;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t aBlock[6];
  char v79[32];

  v70 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v74 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v9 - 8);
  v73 = v9;
  __chkstk_darwin(v9);
  v71 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MACAddress(0);
  v68 = *(_QWORD *)(v11 - 8);
  v69 = v11;
  v12 = *(_QWORD *)(v68 + 64);
  __chkstk_darwin(v11);
  v67 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AirPodsLEPairingLockAckResponse(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v64 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v64 - v20;
  v22 = sub_10001A9A8(&qword_1010EEC90);
  __chkstk_darwin(v22);
  v24 = (void **)((char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v79, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v66 = result;
    v65 = a3;
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v24, &qword_1010EEC90);
    if (swift_getEnumCaseMultiPayload(v24, v22) == 1)
    {
      v26 = *v24;
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v27 = type metadata accessor for Logger(0);
      sub_10001A9E8(v27, (uint64_t)qword_1011B7E28);
      v28 = v26;
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.error.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        v77 = v28;
        aBlock[0] = v32;
        *(_DWORD *)v31 = 136446210;
        type metadata accessor for SPPairingSessionError(0);
        v34 = v33;
        v35 = v28;
        v36 = String.init<A>(describing:)(&v77, v34);
        v77 = (_QWORD *)sub_100016940(v36, v37, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, aBlock, v31 + 4, v31 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Ack register failed with error - %{public}s", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

      }
      v46 = v65;
      v47 = v66;
      v48 = v67;
      v50 = v68;
      v49 = v69;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v70, v69);
      v51 = *(unsigned __int8 *)(v50 + 80);
      v52 = (v51 + 40) & ~v51;
      v53 = (char *)swift_allocObject(&unk_1010566A0, v52 + v12, v51 | 7);
      *((_QWORD *)v53 + 2) = v46;
      *((_QWORD *)v53 + 3) = v47;
      *((_QWORD *)v53 + 4) = v28;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v53[v52], v48, v49);
      aBlock[4] = (uint64_t)sub_1000F8EB4;
      aBlock[5] = (uint64_t)v53;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100016FB8;
      aBlock[3] = (uint64_t)&unk_1010566B8;
      v54 = _Block_copy(aBlock);
      v55 = v28;
      swift_retain();
      v56 = swift_retain();
      v57 = v71;
      static DispatchQoS.unspecified.getter(v56);
      v77 = _swiftEmptyArrayStorage;
      v58 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v59 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v60 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v61 = v74;
      v62 = v59;
      v63 = v76;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v62, v60, v76, v58);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v57, v61, v54);
      _Block_release(v54);

      (*(void (**)(char *, uint64_t))(v75 + 8))(v61, v63);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v57, v73);
      swift_release();
      return swift_release();
    }
    else
    {
      sub_1000126EC((uint64_t)v24, (uint64_t)v21, type metadata accessor for AirPodsLEPairingLockAckResponse);
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v38 = type metadata accessor for Logger(0);
      sub_10001A9E8(v38, (uint64_t)qword_1011B7E28);
      v39 = sub_10005972C((uint64_t)v21, (uint64_t)v19, type metadata accessor for AirPodsLEPairingLockAckResponse);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.default.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        aBlock[0] = v43;
        *(_DWORD *)v42 = 136446210;
        sub_10005972C((uint64_t)v19, (uint64_t)v16, type metadata accessor for AirPodsLEPairingLockAckResponse);
        v44 = String.init<A>(describing:)(v16, v13);
        v77 = (_QWORD *)sub_100016940(v44, v45, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, aBlock, v42 + 4, v42 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v19, type metadata accessor for AirPodsLEPairingLockAckResponse);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Ack register was success. %{public}s", v42, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);
        swift_release();

      }
      else
      {

        sub_1000126B0((uint64_t)v19, type metadata accessor for AirPodsLEPairingLockAckResponse);
        swift_release();
      }
      return sub_1000126B0((uint64_t)v21, type metadata accessor for AirPodsLEPairingLockAckResponse);
    }
  }
  return result;
}

uint64_t sub_1000EF3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v6 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  v9 = type metadata accessor for MACAddress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_1000F6EB4(a3, a4, (uint64_t)v8);
  return sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010F9890);
}

void sub_1000EF464(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  unint64_t v44;
  uint8_t *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  unint64_t v70;
  os_log_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int64_t v83;
  _QWORD *v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  _OWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v119;
  uint64_t v120;
  _BOOL8 v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t *v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  _BOOL4 v135;
  uint64_t v136;
  uint8_t *v137;
  _QWORD *v138;
  id *v139;
  id v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint64_t v155;
  uint8_t *v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD v197[2];
  uint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  id *v219;
  uint64_t v220;
  int64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t *v226;
  _OWORD *v227;
  _OWORD *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int64_t v234;
  uint8_t *v235;
  os_log_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t *v239;
  uint64_t v240;
  _BYTE v241[352];
  _BYTE v242[216];
  uint64_t v243;
  _BYTE v244[208];
  uint64_t v245[27];
  _QWORD v246[44];
  uint64_t v247[45];

  v5 = sub_10001A9A8(&qword_1010ED860);
  v6 = __chkstk_darwin(v5);
  v215 = (uint64_t)v197 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v214 = (char *)v197 - v8;
  v217 = type metadata accessor for AirPodsLEPairingLockCheckResponse(0);
  v9 = __chkstk_darwin(v217);
  v216 = (uint64_t)v197 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)v197 - v11;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v13);
  v15 = (char *)v197 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_10001A9A8(&qword_1010EEC78);
  __chkstk_darwin(v218);
  v219 = (id *)((char *)v197 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v231 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v223 = *(_QWORD *)(v231 - 8);
  v17 = __chkstk_darwin(v231);
  v240 = (uint64_t)v197 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v230 = (char *)v197 - v19;
  v229 = sub_10001A9A8(&qword_1010EBFF8);
  v20 = __chkstk_darwin(v229);
  v228 = (_OWORD *)((char *)v197 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __chkstk_darwin(v20);
  v227 = (_OWORD *)((char *)v197 - v23);
  v24 = __chkstk_darwin(v22);
  v226 = (_QWORD *)((char *)v197 - v25);
  v26 = __chkstk_darwin(v24);
  v225 = (_QWORD *)((char *)v197 - v27);
  v28 = __chkstk_darwin(v26);
  v239 = (_QWORD *)((char *)v197 - v29);
  __chkstk_darwin(v28);
  v224 = (_QWORD *)((char *)v197 - v30);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v31);
  v238 = (_QWORD *)((char *)v197 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = type metadata accessor for HashAlgorithm(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char *)v197 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(v2 + 64);
  v38 = (uint64_t *)(*(_QWORD *)(v37 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  v39 = v38[1];
  if (v39 >> 60 == 15)
  {
    if (qword_1010EA328 != -1)
      goto LABEL_71;
    goto LABEL_3;
  }
  v212 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v213 = v37;
  v208 = v15;
  v209 = v12;
  v210 = a1;
  v211 = v2;
  v47 = *v38;
  sub_10001BBBC(*v38, v39);
  sub_10001BBBC(v47, v39);
  v48 = sub_1007DE864(v47, v39);
  v50 = v49;
  v206 = v47;
  v207 = v51;
  sub_10001EF3C(v47, v39);
  sub_10001BBBC(v48, v50);
  sub_1002F7278(v48, v50);
  v52 = v48;
  v205 = v50;
  v199 = v39;
  v200 = (_QWORD *)a2;
  v53 = v247[0];
  v54 = v247[1];
  v55 = v213;
  v56 = *(_QWORD *)(v213 + v212);
  v247[3] = (uint64_t)&type metadata for CollaborativeKeyGen.v1.C2;
  v247[4] = sub_100059ED0();
  v247[0] = v53;
  v247[1] = v54;
  sub_100005CF0((uint64_t)v247, (uint64_t)v246, &qword_1010EC598);
  v57 = v56 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  swift_beginAccess(v56 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2, v241, 33, 0);
  swift_retain();
  v203 = v53;
  v204 = v54;
  sub_10001BBBC(v53, v54);
  sub_100004084((uint64_t)v246, v57, &qword_1010EC598);
  swift_endAccess(v241);
  swift_release();
  v58 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  v247[4] = (uint64_t)&off_101093D30;
  v247[3] = v58;
  v247[0] = v207;
  sub_100005CF0((uint64_t)v247, (uint64_t)v246, &qword_1010EC418);
  v59 = v55 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess(v59, v241, 33, 0);
  swift_retain();
  sub_100004084((uint64_t)v246, v59, &qword_1010EC418);
  swift_endAccess(v241);
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v60 = type metadata accessor for Logger(0);
  v61 = sub_10001A9E8(v60, (uint64_t)qword_1011B7E28);
  v62 = v205;
  sub_10001BBBC(v52, v205);
  v63 = sub_10001BBBC(v52, v62);
  v197[1] = v61;
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.debug.getter(v64);
  v66 = os_log_type_enabled(v64, v65);
  v198 = v52;
  if (v66)
  {
    v67 = swift_slowAlloc(12, -1);
    v236 = v64;
    v68 = (uint8_t *)v67;
    v237 = swift_slowAlloc(32, -1);
    v247[0] = v237;
    *(_DWORD *)v68 = 136315138;
    v235 = v68 + 4;
    v69 = Data.hexString.getter(v52, v62);
    v246[0] = sub_100016940(v69, v70, v247);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v246, &v246[1], v235, v68 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(v52, v62);
    sub_10001BC14(v52, v62);
    v71 = v236;
    _os_log_impl((void *)&_mh_execute_header, v236, v65, "C2: %s", v68, 0xCu);
    v72 = v237;
    swift_arrayDestroy(v237, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v68, -1, -1);

  }
  else
  {
    sub_10001BC14(v52, v62);
    sub_10001BC14(v52, v62);

  }
  v73 = v210;
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v36, enum case for HashAlgorithm.sha256(_:), v33);
  v75 = v203;
  v74 = v204;
  sub_10001BBBC(v203, v204);
  v201 = Data.hash(algorithm:)(v36, v75, v74);
  v202 = v76;
  sub_10001BC14(v75, v74);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
  a2 = (unint64_t)v238;
  sub_10081F5CC(v73, (uint64_t)v238);
  v77 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48))(a2, 1, v77) != 1)
  {
    v84 = *(_QWORD **)(a2 + *(int *)(v77 + 40));
    swift_bridgeObjectRetain(v84);
    sub_1000126B0(a2, type metadata accessor for OwnedBeaconGroup);
LABEL_48:
    v130 = *(_QWORD *)(v211 + 112);
    v131 = *(_QWORD *)(v211 + 120);
    swift_retain();
    sub_10001BD08(v130, v131);
    sub_100B62808(v201, v202, v130, v131, (uint64_t)v84, (uint64_t)v241);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v130, v131);
    swift_release();
    sub_100005CF0((uint64_t)v241, (uint64_t)v246, &qword_1010EEC80);
    v132 = sub_100059714((uint64_t)v246);
    if ((_DWORD)v132 == 1)
    {
      v133 = Logger.logObject.getter(v132);
      v134 = static os_log_type_t.error.getter(v133);
      v135 = os_log_type_enabled(v133, v134);
      v136 = v206;
      if (v135)
      {
        v137 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v137 = 0;
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "Unable to create pairing check data.", v137, 2u);
        swift_slowDealloc(v137, -1, -1);
      }

      swift_release();
      sub_10001BC14(v203, v204);
      sub_10001EF3C(v136, v199);
      sub_10001BC14(v198, v205);
      sub_10001BC14(v201, v202);
      v138 = v200;
      *v200 = 0xD00000000000001ALL;
      v138[1] = 0x8000000100EC64E0;
      *((_BYTE *)v138 + 40) = 9;
      *((_BYTE *)v138 + 216) = 1;
    }
    else
    {
      memcpy(v247, v246, 0x160uLL);
      v139 = v219;
      sub_1000EE630(v247, (uint64_t)v219);
      if (swift_getEnumCaseMultiPayload(v139, v218) == 1)
      {
        v140 = *v139;
        v141 = Logger.logObject.getter(v140);
        v142 = static os_log_type_t.error.getter(v141);
        if (os_log_type_enabled(v141, v142))
        {
          v143 = (uint8_t *)swift_slowAlloc(12, -1);
          v144 = swift_slowAlloc(32, -1);
          v245[0] = v144;
          *(_DWORD *)v143 = 136446210;
          v243 = (uint64_t)v140;
          type metadata accessor for SPPairingSessionError(0);
          v146 = v145;
          v147 = v140;
          v148 = String.init<A>(describing:)(&v243, v146);
          v243 = sub_100016940(v148, v149, v245);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v243, v244, v143 + 4, v143 + 12);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v141, v142, "Pairing lock check failed. Error %{public}s", v143, 0xCu);
          swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v144, -1, -1);
          swift_slowDealloc(v143, -1, -1);

        }
        else
        {

        }
        v162 = (uint64_t)v208;
        v163 = type metadata accessor for MACAddress(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 56))(v162, 1, 1, v163);
        v164 = v140;
        sub_1000F6EB4((uint64_t)v164, v210, v162);

        sub_100004048(v162, (uint64_t *)&unk_1010F9890);
        v243 = (uint64_t)v164;
        type metadata accessor for SPPairingSessionError(0);
        v166 = v165;
        v167 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
        _BridgedStoredNSError.code.getter(v245, v166, v167);
        if (v245[0] == 18)
        {
          sub_1000F0A6C(v213, (uint64_t)v200);
          swift_release();
          sub_10001BC14(v203, v204);
          sub_10001EF3C(v206, v199);
          sub_10001BC14(v198, v205);
          sub_10001BC14(v201, v202);
          sub_1000F88D8((uint64_t)v241);

        }
        else
        {
          swift_release();
          sub_10001BC14(v203, v204);
          sub_10001EF3C(v206, v199);
          sub_10001BC14(v198, v205);
          sub_10001BC14(v201, v202);
          sub_1000F88D8((uint64_t)v241);
          v168 = v200;
          *v200 = v164;
          *((_BYTE *)v168 + 40) = 0;
          *((_BYTE *)v168 + 216) = 1;
        }
      }
      else
      {
        v150 = v209;
        sub_1000126EC((uint64_t)v139, (uint64_t)v209, type metadata accessor for AirPodsLEPairingLockCheckResponse);
        v151 = v216;
        v152 = sub_10005972C((uint64_t)v150, v216, type metadata accessor for AirPodsLEPairingLockCheckResponse);
        v153 = Logger.logObject.getter(v152);
        v154 = static os_log_type_t.default.getter(v153);
        if (os_log_type_enabled(v153, v154))
        {
          v155 = v151;
          v156 = (uint8_t *)swift_slowAlloc(12, -1);
          v157 = swift_slowAlloc(32, -1);
          v245[0] = v157;
          *(_DWORD *)v156 = 136446210;
          v158 = (_QWORD *)(v155 + *(int *)(v217 + 52));
          v159 = v158[1];
          if (v159 >> 60 == 15)
          {
            v160 = 0;
            v161 = 0xE000000000000000;
          }
          else
          {
            v160 = Data.hexString.getter(*v158, v159);
            v161 = v169;
          }
          v243 = sub_100016940(v160, v161, v245);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v243, v244, v156 + 4, v156 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v216, type metadata accessor for AirPodsLEPairingLockCheckResponse);
          _os_log_impl((void *)&_mh_execute_header, v153, v154, "Received SeedS and S3 from server. Pairing token: %{public}s", v156, 0xCu);
          swift_arrayDestroy(v157, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v157, -1, -1);
          swift_slowDealloc(v156, -1, -1);

          v150 = v209;
        }
        else
        {
          sub_1000126B0(v151, type metadata accessor for AirPodsLEPairingLockCheckResponse);

        }
        v171 = v212;
        v170 = v213;
        v172 = *(_QWORD *)(v213 + v212);
        v173 = v217;
        v174 = (char *)v150 + *(int *)(v217 + 36);
        v175 = type metadata accessor for UUID(0);
        v176 = *(_QWORD *)(v175 - 8);
        v177 = v214;
        (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v214, v174, v175);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v176 + 56))(v177, 0, 1, v175);
        v178 = (uint64_t)v177;
        v179 = v215;
        sub_100005CF0(v178, v215, &qword_1010ED860);
        v180 = v172 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
        swift_beginAccess(v172 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, v245, 33, 0);
        swift_retain();
        sub_100004084(v179, v180, &qword_1010ED860);
        swift_endAccess(v245);
        swift_release();
        v181 = (_QWORD *)((char *)v150 + *(int *)(v173 + 44));
        v182 = *v181;
        v183 = v181[1];
        v184 = (uint64_t *)(*(_QWORD *)(v170 + v171) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert);
        v185 = *v184;
        v186 = v184[1];
        *v184 = *v181;
        v184[1] = v183;
        sub_10001BBBC(v182, v183);
        sub_10001EF3C(v185, v186);
        v187 = (_QWORD *)((char *)v150 + *(int *)(v173 + 48));
        v188 = *v187;
        v189 = v187[1];
        v190 = (uint64_t *)(*(_QWORD *)(v170 + v171) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1);
        v191 = *v190;
        v192 = v190[1];
        *v190 = *v187;
        v190[1] = v189;
        sub_10001BBBC(v188, v189);
        sub_10001EF3C(v191, v192);
        v193 = v198;
        v194 = v205;
        sub_1000F13A4(v150, v198, v205, v210, (uint64_t)v242);
        sub_100005CF0((uint64_t)v242, (uint64_t)&v243, &qword_1010EEC70);
        if (sub_1000F881C((uint64_t)&v243) == 1)
        {
          sub_10001EF3C(v206, v199);
          sub_10001BC14(v201, v202);
          sub_1000F88D8((uint64_t)v241);
          swift_release();
          sub_10001BC14(v203, v204);
          sub_10001BC14(v193, v194);
          sub_1000126B0((uint64_t)v150, type metadata accessor for AirPodsLEPairingLockCheckResponse);
          v195 = v200;
          *v200 = 0xD000000000000019;
          v195[1] = 0x8000000100EC6500;
          *((_BYTE *)v195 + 40) = 9;
          *((_BYTE *)v195 + 216) = 1;
        }
        else
        {
          sub_1000F7F88((uint64_t)&v243, (uint64_t)v245);
          sub_1000126B0((uint64_t)v150, type metadata accessor for AirPodsLEPairingLockCheckResponse);
          swift_release();
          sub_10001BC14(v203, v204);
          sub_10001EF3C(v206, v199);
          sub_10001BC14(v193, v194);
          sub_10001BC14(v201, v202);
          sub_1000F88D8((uint64_t)v241);
          v196 = v200;
          sub_1000F7F88((uint64_t)v245, (uint64_t)v200);
          *((_BYTE *)v196 + 216) = 0;
        }
      }
    }
    return;
  }
  sub_100004048(a2, (uint64_t *)&unk_1010FF7F0);
  v78 = *(_QWORD *)(*(_QWORD *)(v213 + v212)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  v79 = *(_QWORD *)(v78 + 64);
  v220 = v78 + 64;
  v80 = 1 << *(_BYTE *)(v78 + 32);
  v81 = -1;
  if (v80 < 64)
    v81 = ~(-1 << v80);
  v82 = v81 & v79;
  v221 = (unint64_t)(v80 + 63) >> 6;
  v222 = v78;
  swift_bridgeObjectRetain_n(v78, 2);
  v83 = 0;
  v84 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    v238 = v84;
    if (v82)
    {
      v233 = (v82 - 1) & v82;
      v234 = v83;
      v85 = __clz(__rbit64(v82)) | (v83 << 6);
    }
    else
    {
      v86 = v83 + 1;
      if (__OFADD__(v83, 1))
        goto LABEL_70;
      if (v86 >= v221)
      {
LABEL_47:
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      v87 = *(_QWORD *)(v220 + 8 * v86);
      v88 = v83 + 1;
      if (!v87)
      {
        v88 = v83 + 2;
        if (v83 + 2 >= v221)
          goto LABEL_47;
        v87 = *(_QWORD *)(v220 + 8 * v88);
        if (!v87)
        {
          v88 = v83 + 3;
          if (v83 + 3 >= v221)
            goto LABEL_47;
          v87 = *(_QWORD *)(v220 + 8 * v88);
          if (!v87)
          {
            v88 = v83 + 4;
            if (v83 + 4 >= v221)
              goto LABEL_47;
            v87 = *(_QWORD *)(v220 + 8 * v88);
            if (!v87)
            {
              v89 = v83 + 5;
              if (v83 + 5 >= v221)
                goto LABEL_47;
              v87 = *(_QWORD *)(v220 + 8 * v89);
              if (!v87)
              {
                while (1)
                {
                  v88 = v89 + 1;
                  if (__OFADD__(v89, 1))
                    break;
                  if (v88 >= v221)
                    goto LABEL_47;
                  v87 = *(_QWORD *)(v220 + 8 * v88);
                  ++v89;
                  if (v87)
                    goto LABEL_34;
                }
                __break(1u);
LABEL_73:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
                __break(1u);
                return;
              }
              v88 = v83 + 5;
            }
          }
        }
      }
LABEL_34:
      v233 = (v87 - 1) & v87;
      v234 = v88;
      v85 = __clz(__rbit64(v87)) + (v88 << 6);
    }
    v90 = *(_QWORD *)(v222 + 56);
    v91 = (uint64_t *)(*(_QWORD *)(v222 + 48) + 16 * v85);
    v92 = v91[1];
    v235 = (uint8_t *)*v91;
    v93 = (uint64_t)v235;
    v236 = v92;
    v94 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    v95 = *(_QWORD *)(v94 - 8);
    v237 = v94;
    v96 = v229;
    v97 = v224;
    sub_10005972C(v90 + *(_QWORD *)(v95 + 72) * v85, (uint64_t)v224 + *(int *)(v229 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
    *v97 = v93;
    v97[1] = (uint64_t)v92;
    v98 = v239;
    sub_100005CF0((uint64_t)v97, (uint64_t)v239, &qword_1010EBFF8);
    v99 = *(int *)(v96 + 48);
    v100 = v225;
    v101 = (uint64_t)v225 + v99;
    v102 = (uint64_t)v98 + v99;
    v103 = *v98;
    v104 = v98[1];
    *v225 = *v98;
    v100[1] = v104;
    v232 = (uint64_t)v100 + v99;
    sub_10005972C((uint64_t)v98 + v99, v101, type metadata accessor for MultipartAccessoryPairingInfo);
    v105 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
    v106 = (uint64_t)v230;
    v107 = &v230[*(int *)(v105 + 48)];
    v108 = *(int *)(v96 + 48);
    v109 = v226;
    v110 = (uint64_t)v226 + v108;
    *v226 = v103;
    v109[1] = v104;
    sub_10005972C(v102, (uint64_t)v109 + v108, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_10000F9B8(v110 + *(int *)(v94 + 24), v106, (uint64_t *)&unk_1010F9890);
    sub_10001BBBC((uint64_t)v235, (unint64_t)v236);
    sub_10001BBBC(v103, v104);
    sub_1000126B0(v110, type metadata accessor for MultipartAccessoryPairingInfo);
    v111 = *(int *)(v96 + 48);
    v112 = v227;
    v113 = (unsigned __int8 *)v227 + v111;
    *v227 = *(_OWORD *)v98;
    sub_10005972C(v102, (uint64_t)v112 + v111, type metadata accessor for MultipartAccessoryPairingInfo);
    LODWORD(v236) = *v113;
    sub_1000126B0((uint64_t)v113, type metadata accessor for MultipartAccessoryPairingInfo);
    v114 = *(int *)(v96 + 48);
    v115 = v228;
    v116 = (uint64_t)v228 + v114;
    *v228 = *(_OWORD *)v98;
    sub_10005972C(v102, (uint64_t)v115 + v114, type metadata accessor for MultipartAccessoryPairingInfo);
    LOBYTE(v96) = *(_BYTE *)(v116 + *(int *)(v237 + 28));
    sub_1000126B0(v116, type metadata accessor for MultipartAccessoryPairingInfo);
    *(_WORD *)v107 = v236;
    v107[2] = v96;
    swift_storeEnumTagMultiPayload(v106, v231, 0);
    sub_1000126EC(v106, v240, type metadata accessor for OwnedBeaconGroup.PairingState);
    v117 = (uint64_t)v238;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v238);
    v247[0] = v117;
    a2 = sub_100518E4C(v103, v104);
    v120 = *(_QWORD *)(v117 + 16);
    v121 = (v119 & 1) == 0;
    v122 = v120 + v121;
    if (__OFADD__(v120, v121))
      break;
    v123 = v119;
    if (*(_QWORD *)(v117 + 24) >= v122)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v84 = (_QWORD *)v247[0];
        if ((v119 & 1) != 0)
          goto LABEL_15;
      }
      else
      {
        sub_100A99F50();
        v84 = (_QWORD *)v247[0];
        if ((v123 & 1) != 0)
          goto LABEL_15;
      }
    }
    else
    {
      sub_100A850F8(v122, isUniquelyReferenced_nonNull_native);
      v124 = sub_100518E4C(v103, v104);
      if ((v123 & 1) != (v125 & 1))
        goto LABEL_73;
      a2 = v124;
      v84 = (_QWORD *)v247[0];
      if ((v123 & 1) != 0)
      {
LABEL_15:
        sub_1000596D0(v240, v84[7] + *(_QWORD *)(v223 + 72) * a2);
        goto LABEL_16;
      }
    }
    v84[(a2 >> 6) + 8] |= 1 << a2;
    v126 = (uint64_t *)(v84[6] + 16 * a2);
    *v126 = v103;
    v126[1] = v104;
    sub_1000126EC(v240, v84[7] + *(_QWORD *)(v223 + 72) * a2, type metadata accessor for OwnedBeaconGroup.PairingState);
    v127 = v84[2];
    v128 = __OFADD__(v127, 1);
    v129 = v127 + 1;
    if (v128)
      goto LABEL_69;
    v84[2] = v129;
    sub_10001BBBC(v103, v104);
LABEL_16:
    swift_bridgeObjectRelease();
    sub_10001BC14(v103, v104);
    sub_1000126B0(v232, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_100004048((uint64_t)v239, &qword_1010EBFF8);
    v82 = v233;
    v83 = v234;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_3:
  v40 = type metadata accessor for Logger(0);
  v41 = sub_10001A9E8(v40, (uint64_t)qword_1011B7E28);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = a2;
    v45 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Missing C1 from accessory!", v45, 2u);
    v46 = v45;
    a2 = v44;
    swift_slowDealloc(v46, -1, -1);
  }

  *(_QWORD *)a2 = 0xD00000000000001ALL;
  *(_QWORD *)(a2 + 8) = 0x8000000100EC6490;
  *(_BYTE *)(a2 + 40) = 9;
  *(_BYTE *)(a2 + 216) = 1;
}

double sub_1000F0A6C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t *v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  _BOOL4 v38;
  unint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  double result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[2];

  v3 = v2;
  v6 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(v3 + 56);
  if (v13)
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    v15 = v14[1];
    if (v15 >> 60 == 15)
    {
      v16 = v13;
LABEL_10:
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v24 = type metadata accessor for Logger(0);
      v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B7E28);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.error.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Invalid serial number.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      goto LABEL_33;
    }
    v84 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
    v81 = v6;
    v87[0] = *v14;
    v22 = v87[0];
    v87[1] = v15;
    v82 = v13;
    sub_10001BD08(v22, v15);
    v23 = sub_100035530();
    if ((DataProtocol.isNull.getter(&type metadata for Data, v23) & 1) != 0)
    {
      sub_10001EF3C(v22, v15);
      goto LABEL_10;
    }
    v29 = Data.trimmed.getter(v22, v15);
    v31 = v30;
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v74 = v22;
    v75 = v15;
    v32 = type metadata accessor for Logger(0);
    v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B7E28);
    sub_10001BBBC(v29, v31);
    v34 = sub_10001BBBC(v29, v31);
    v35 = v29;
    v80 = v33;
    v36 = Logger.logObject.getter(v34);
    v37 = static os_log_type_t.debug.getter(v36);
    v83 = v36;
    v38 = os_log_type_enabled(v36, (os_log_type_t)v37);
    v78 = v35;
    v79 = v31;
    if (v38)
    {
      LODWORD(v73) = v37;
      v39 = v31;
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v72 = swift_slowAlloc(32, -1);
      v87[0] = v72;
      *(_DWORD *)v40 = 136315138;
      v41 = sub_10001BBBC(v35, v39);
      static String.Encoding.utf8.getter(v41);
      v42 = String.init(data:encoding:)(v35, v39, v12);
      if (v43)
      {
        v44 = v43;
        v71 = v42;
      }
      else
      {
        v71 = Data.hexString.getter(v35, v39);
        v44 = v45;
      }
      sub_10001BC14(v35, v39);
      v85 = sub_100016940(v71, v44, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v35, v39);
      sub_10001BC14(v35, v39);
      v46 = v83;
      _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v73, "Accessory serial number: %s.", v40, 0xCu);
      v47 = v72;
      swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {
      sub_10001BC14(v35, v31);
      sub_10001BC14(v35, v31);

    }
    v48 = *(NSObject **)(*(_QWORD *)(a1 + v84)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    swift_bridgeObjectRetain_n(v48, 3);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.debug.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v83 = v48;
    v76 = a1;
    if (v52)
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      v87[0] = v73;
      *(_DWORD *)v53 = 136315138;
      v72 = (uint64_t)(v53 + 4);
      v54 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      v55 = sub_100059BCC();
      swift_bridgeObjectRetain(v83);
      v56 = Dictionary.description.getter(v83, &type metadata for OwnedBeaconGroup.SerialNumber, v54, v55);
      v58 = v57;
      swift_bridgeObjectRelease();
      v85 = sub_100016940(v56, v58, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v72, v53 + 12);
      swift_bridgeObjectRelease_n(v83, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "beaconGroupInfo: %s", v53, 0xCu);
      v59 = v73;
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v48, 2);
    }
    v60 = v82;
    v61 = *(_QWORD *)&v82[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8];
    v77 = v7;
    if (v61)
    {
      v62 = *(_QWORD *)&v82[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
      v63 = v61;
    }
    else
    {
      v64 = objc_msgSend(*(id *)&v82[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "name");
      if (!v64)
      {
        v62 = 0;
        v63 = 0xE000000000000000;
        goto LABEL_31;
      }
      v65 = v64;
      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
      v63 = v66;

      v61 = 0;
    }
    swift_bridgeObjectRetain(v61);
LABEL_31:
    sub_100786FB4(v9);
    v67 = *(_QWORD *)(v76 + v84);
    swift_retain();
    v68 = v78;
    v69 = v79;
    sub_1008E20AC(v78, v79, v62, v63, (uint64_t)v9, (uint64_t)v83, v67);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v9, v81);
    sub_10001EF3C(v74, v75);
    sub_10001BC14(v68, v69);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_33;
  }
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7E28);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing peripheral to handle pairing lock error!", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

LABEL_33:
  *(_QWORD *)a2 = 8;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_BYTE *)(a2 + 40) = 11;
  *(_BYTE *)(a2 + 216) = 1;
  return result;
}

uint64_t sub_1000F13A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  _DWORD *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _DWORD *v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  unint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  unint64_t v89;
  unint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t *v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  os_log_type_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  _BYTE *v134;
  _BYTE v135[16];
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  unint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  _QWORD *v146;
  _BYTE *v147;
  _BYTE *v148;
  _BYTE *v149;
  _BYTE *v150;
  uint8_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD v155[26];
  uint64_t v156;
  _BYTE v157[208];
  uint64_t v158;
  _QWORD v159[28];

  v136 = a4;
  v151 = (uint8_t *)a2;
  v152 = a3;
  v145 = a5;
  v7 = type metadata accessor for String.Encoding(0);
  v140 = *(_QWORD *)(v7 - 8);
  v141 = v7;
  __chkstk_darwin(v7);
  v139 = &v135[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v10 = __chkstk_darwin(v9);
  v12 = &v135[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v10);
  v138 = &v135[-v14];
  __chkstk_darwin(v13);
  v142 = &v135[-v15];
  v16 = type metadata accessor for AirPodsLEPairingLockCheckResponse(0);
  v17 = __chkstk_darwin(v16);
  v19 = &v135[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v17);
  v148 = &v135[-v21];
  v22 = __chkstk_darwin(v20);
  v147 = &v135[-v23];
  v24 = __chkstk_darwin(v22);
  v150 = &v135[-v25];
  v26 = __chkstk_darwin(v24);
  v149 = &v135[-v27];
  v28 = __chkstk_darwin(v26);
  v30 = &v135[-v29];
  __chkstk_darwin(v28);
  v32 = &v135[-v31];
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v153 = v5;
  v144 = v19;
  v33 = type metadata accessor for Logger(0);
  v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B7E28);
  sub_10005972C((uint64_t)a1, (uint64_t)v32, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  v35 = sub_10005972C((uint64_t)a1, (uint64_t)v30, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter(v36);
  v38 = os_log_type_enabled(v36, v37);
  v137 = (unint64_t)v12;
  v154 = v34;
  v146 = a1;
  v143 = v16;
  if (v38)
  {
    v39 = (_DWORD *)swift_slowAlloc(22, -1);
    v158 = swift_slowAlloc(32, -1);
    *v39 = 134218242;
    __asm { BR              X12 }
  }
  sub_1000126B0((uint64_t)v32, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  sub_1000126B0((uint64_t)v30, type metadata accessor for AirPodsLEPairingLockCheckResponse);

  v40 = v16;
  v41 = v149;
  sub_10005972C((uint64_t)a1, (uint64_t)v149, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  v42 = v150;
  v43 = sub_10005972C((uint64_t)a1, (uint64_t)v150, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.debug.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (_DWORD *)swift_slowAlloc(22, -1);
    v158 = swift_slowAlloc(32, -1);
    *v46 = 134218242;
    __asm { BR              X12 }
  }
  sub_1000126B0((uint64_t)v41, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  sub_1000126B0((uint64_t)v42, type metadata accessor for AirPodsLEPairingLockCheckResponse);

  v47 = v147;
  sub_10005972C((uint64_t)a1, (uint64_t)v147, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  v48 = v148;
  v49 = sub_10005972C((uint64_t)a1, (uint64_t)v148, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (_DWORD *)swift_slowAlloc(22, -1);
    v158 = swift_slowAlloc(32, -1);
    *v52 = 134218242;
    __asm { BR              X12 }
  }
  sub_1000126B0((uint64_t)v47, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  sub_1000126B0((uint64_t)v48, type metadata accessor for AirPodsLEPairingLockCheckResponse);

  v54 = v153;
  if (*(_BYTE *)(v153 + 200) != 1)
  {
    v85 = (_QWORD *)((char *)a1 + *(int *)(v16 + 40));
    v86 = v85[1];
    if (v86
      && (v87 = *v85,
          v88 = v139,
          static String.Encoding.utf8.getter(v53),
          v150 = (_BYTE *)String.data(using:allowLossyConversion:)(v88, 0, v87, v86),
          v90 = v89,
          v53 = (*(uint64_t (**)(_BYTE *, uint64_t))(v140 + 8))(v88, v141),
          v90 >> 60 != 15))
    {
      v105 = v40;
      v106 = *(_QWORD *)(v54 + 64);
      v107 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
      v108 = *(_QWORD *)(v106 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
      v109 = (char *)(v108 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
      if ((*(_BYTE *)(v108 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1) & 1) == 0)
      {
        v110 = (uint64_t *)(v108 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
        v111 = v110[1];
        if (v111 >> 60 != 15)
        {
          v149 = (_BYTE *)v90;
          v112 = *v109;
          v158 = *v110;
          v113 = v158;
          v159[0] = v111;
          sub_10001BBBC(v158, v111);
          v114 = sub_100035530();
          if ((DataProtocol.isNull.getter(&type metadata for Data, v114) & 1) == 0)
          {
            v147 = (_BYTE *)Data.trimmed.getter(v113, v111);
            v128 = v127;
            v129 = v138;
            sub_10081F5CC(v136, (uint64_t)v138);
            v59 = v129;
            v130 = (uint64_t)v129;
            v131 = v137;
            sub_10000F9B8(v130, v137, (uint64_t *)&unk_1010FF7F0);
            v132 = type metadata accessor for OwnedBeaconGroup(0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 48))(v131, 1, v132) == 1)
            {
              sub_100004048(v131, (uint64_t *)&unk_1010FF7F0);
            }
            else
            {
              v133 = sub_1003692E4((uint64_t)v147, v128);
              sub_1000126B0(v131, type metadata accessor for OwnedBeaconGroup);
              if ((v133 & 0x100) == 0)
                v112 = v133;
              v59 = v138;
            }
            v153 = sub_100C99E90((uint64_t)v59, v112);
            v148 = v134;
            sub_10001BC14((uint64_t)v147, v128);
            sub_10001EF3C(v113, v111);
            v57 = v149;
            v40 = v105;
            goto LABEL_11;
          }
          sub_10001EF3C(v113, v111);
          v54 = v153;
          v90 = (unint64_t)v149;
        }
      }
      v115 = swift_retain_n(v54, 2);
      v91 = Logger.logObject.getter(v115);
      v116 = static os_log_type_t.error.getter(v91);
      if (os_log_type_enabled(v91, v116))
      {
        v117 = v90;
        v118 = swift_slowAlloc(22, -1);
        v119 = v54;
        v120 = swift_slowAlloc(32, -1);
        v156 = v120;
        *(_DWORD *)v118 = 141558275;
        v158 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v118 + 4, v118 + 12);
        *(_WORD *)(v118 + 12) = 2081;
        v121 = (uint64_t *)(*(_QWORD *)(v106 + v107)
                         + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
        v122 = v121[1];
        v158 = *v121;
        v159[0] = v122;
        sub_10001BD08(v158, v122);
        v123 = sub_10001A9A8(&qword_1011194A0);
        v124 = String.init<A>(describing:)(&v158, v123);
        v158 = sub_100016940(v124, v125, &v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v118 + 14, v118 + 22);
        swift_release_n(v119, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v91, v116, "Invalid serial number %{private,mask.hash}s!", (uint8_t *)v118, 0x16u);
        swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v120, -1, -1);
        swift_slowDealloc(v118, -1, -1);

        sub_10001EF3C((uint64_t)v150, v117);
LABEL_30:
        sub_1000F8744((uint64_t)&v156);
        goto LABEL_31;
      }
      swift_release_n(v54, 2);
      sub_10001EF3C((uint64_t)v150, v90);
    }
    else
    {
      v91 = Logger.logObject.getter(v53);
      v92 = static os_log_type_t.error.getter(v91);
      if (os_log_type_enabled(v91, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v93 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Unable to decode masked apple ID", v93, 2u);
        swift_slowDealloc(v93, -1, -1);
      }
    }

    goto LABEL_30;
  }
  v55 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  v56 = __DataStorage.init(length:)(60);
  v158 = 0x3C00000000;
  v159[0] = v56;
  sub_10051ED28((int *)&v158, 0);
  v150 = (_BYTE *)v158;
  v57 = (_BYTE *)(v159[0] | 0x4000000000000000);
  v58 = type metadata accessor for OwnedBeaconGroup(0);
  v59 = v142;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v142, 1, 1, v58);
  v153 = sub_100C99E90((uint64_t)v59, 255);
  v148 = v60;
LABEL_11:
  v149 = v57;
  sub_100004048((uint64_t)v59, (uint64_t *)&unk_1010FF7F0);
  v61 = a1[7];
  v147 = (_BYTE *)a1[6];
  v62 = v147;
  v64 = a1[9];
  v141 = a1[8];
  v63 = v141;
  v142 = (_BYTE *)v61;
  v65 = *(int *)(v40 + 48);
  v66 = (char *)a1 + *(int *)(v40 + 44);
  v139 = *(_BYTE **)v66;
  v67 = (uint64_t)v139;
  v140 = v64;
  v68 = v40;
  v69 = *((_QWORD *)v66 + 1);
  v70 = *(_QWORD *)((char *)a1 + v65);
  v138 = *(_BYTE **)((char *)a1 + v65 + 8);
  v158 = *(_QWORD *)((char *)a1 + *(int *)(v68 + 56));
  sub_10001BBBC((uint64_t)v151, v152);
  sub_10001BBBC((uint64_t)v62, v61);
  v71 = v150;
  sub_10001BBBC((uint64_t)v150, (unint64_t)v57);
  sub_10001BBBC(v63, v64);
  sub_10001BBBC(v67, v69);
  sub_10001BBBC(v70, (unint64_t)v138);
  v137 = sub_100059CC8();
  FixedWidthInteger.data.getter(&type metadata for Int64, v137);
  sub_10001BBBC(v153, (unint64_t)v148);
  sub_1000DBFA4((uint64_t)v151, v152, (uint64_t)v147, (uint64_t)v142, (uint64_t)v71, (uint64_t)v149);
  v72 = (uint64_t)v144;
  v73 = sub_10005972C((uint64_t)a1, (uint64_t)v144, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter(v74);
  if (os_log_type_enabled(v74, v75))
  {
    v76 = (uint8_t *)swift_slowAlloc(12, -1);
    v77 = swift_slowAlloc(32, -1);
    v152 = v77;
    *(_DWORD *)v76 = 136446210;
    v158 = v77;
    v151 = v76 + 4;
    v156 = *(_QWORD *)(v72 + *(int *)(v143 + 56));
    v78 = FixedWidthInteger.data.getter(&type metadata for Int64, v137);
    v80 = v79;
    v81 = Data.hexString.getter(v78, v79);
    v83 = v82;
    sub_10001BC14(v78, v80);
    v156 = sub_100016940(v81, v83, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v151, v76 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v144, type metadata accessor for AirPodsLEPairingLockCheckResponse);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "pairingEpoch: %{public}s", v76, 0xCu);
    v84 = v152;
    swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v76, -1, -1);
  }
  else
  {
    sub_1000126B0(v72, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  }

  v94 = v153;
  v95 = v148;
  sub_10001BBBC(v153, (unint64_t)v148);
  v96 = sub_10001BBBC(v94, (unint64_t)v95);
  v97 = Logger.logObject.getter(v96);
  v98 = static os_log_type_t.default.getter(v97);
  if (os_log_type_enabled(v97, v98))
  {
    v99 = (uint8_t *)swift_slowAlloc(12, -1);
    v100 = swift_slowAlloc(32, -1);
    v158 = v100;
    *(_DWORD *)v99 = 136446210;
    v101 = Data.hexString.getter(v94, v95);
    v153 = v94;
    v156 = sub_100016940(v101, v102, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v99 + 4, v99 + 12);
    swift_bridgeObjectRelease();
    v103 = v153;
    sub_10001BC14(v153, (unint64_t)v95);
    sub_10001BC14(v103, (unint64_t)v95);
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "companionPairingEpochs: %{public}s", v99, 0xCu);
    swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1, -1);
    swift_slowDealloc(v99, -1, -1);

    v104 = v103;
  }
  else
  {

    sub_10001BC14(v94, (unint64_t)v95);
    sub_10001BC14(v94, (unint64_t)v95);
    v104 = v94;
  }
  sub_10001BC14(v104, (unint64_t)v95);
  sub_10001BC14((uint64_t)v150, (unint64_t)v149);
  v155[8] = v155[22];
  v155[9] = v155[23];
  v155[10] = v155[24];
  v155[11] = v155[25];
  v155[4] = v155[18];
  v155[5] = v155[19];
  v155[6] = v155[20];
  v155[7] = v155[21];
  v155[0] = v155[14];
  v155[1] = v155[15];
  v155[2] = v155[16];
  v155[3] = v155[17];
  sub_1000F8778((uint64_t)v155);
  sub_1000F7F88((uint64_t)v155, (uint64_t)&v156);
  SharingCircleWildAdvertisementKey.init(key:)(&v156);
LABEL_31:
  sub_100005CF0((uint64_t)&v156, (uint64_t)&v158, &qword_1010EEC70);
  return sub_100005CF0((uint64_t)&v158, v145, &qword_1010EEC70);
}

uint64_t sub_1000F2524@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t *v30;
  uint8_t *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  int v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  NSObject *v69;
  NSObject *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(_BYTE *, uint64_t, uint64_t);
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  __int128 *v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  id v116;
  _QWORD *v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  void (*v123)(_QWORD, _QWORD, _QWORD);
  uint64_t v124;
  void (*v125)(_QWORD, _QWORD, _QWORD);
  uint64_t v126;
  uint64_t v127;
  void *v128;
  id v129;
  void *v130;
  void (*v131)(_QWORD, _QWORD, _QWORD);
  void **v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE v144[4];
  int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  __int128 *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint8_t *v156;
  uint64_t v157;
  unint64_t v158;
  os_log_t v159;
  _BYTE *v160;
  uint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165[3];
  uint64_t v166;
  _BYTE v167[16];

  v164 = (uint64_t *)a3;
  v161 = type metadata accessor for StandaloneBeacon(0);
  __chkstk_darwin(v161);
  v162 = &v144[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v163 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v163 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v163);
  v160 = &v144[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v11 = &v144[-v10];
  v12 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v12);
  v14 = &v144[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v159 = (os_log_t)type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v159);
  v16 = &v144[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v17);
  v19 = &v144[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = *(void **)(v3 + 56);
  if (v20)
  {
    v156 = v16;
    v21 = *(_QWORD *)(v3 + 64);
    v22 = (uint64_t *)(*(_QWORD *)(v21 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    v23 = v22[1];
    if (v23 >> 60 == 15)
    {
      v24 = v20;
LABEL_11:
      v40 = v164;
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v41 = type metadata accessor for Logger(0);
      v42 = sub_10001A9E8(v41, (uint64_t)qword_1011B7E28);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Invalid serial number.", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

      v46 = sub_1000F8428();
      v47 = swift_allocError(&type metadata for AirPodsLEPairingManager.AirPodsLEPairingManagerError, v46, 0, 0);
      *v48 = 1;

      *v40 = v47;
      v49 = sub_10001A9A8(&qword_1010EEC58);
      v50 = v40;
      v51 = 1;
      return swift_storeEnumTagMultiPayload(v50, v49, v51);
    }
    v154 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
    v155 = v21;
    v150 = v14;
    v151 = a1;
    v153 = v3;
    v37 = a2;
    v165[0] = *v22;
    v38 = v165[0];
    v165[1] = v23;
    v152 = v20;
    sub_10001BD08(v38, v23);
    v39 = sub_100035530();
    if ((DataProtocol.isNull.getter(&type metadata for Data, v39) & 1) != 0)
    {
      sub_10001EF3C(v38, v23);
      goto LABEL_11;
    }
    v147 = v38;
    v148 = v23;
    v157 = Data.trimmed.getter(v38, v23);
    v158 = v52;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v53 = type metadata accessor for Logger(0);
    sub_10001A9E8(v53, (uint64_t)qword_1011B7DF8);
    v55 = v157;
    v54 = v158;
    sub_10001BBBC(v157, v158);
    v56 = sub_10001BBBC(v55, v54);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.default.getter(v57);
    v59 = os_log_type_enabled(v57, (os_log_type_t)v58);
    v60 = v37;
    v149 = v7;
    if (v59)
    {
      v145 = v58;
      v146 = v37;
      v61 = swift_slowAlloc(22, -1);
      v62 = swift_slowAlloc(32, -1);
      v165[0] = v62;
      *(_DWORD *)v61 = 141558275;
      v166 = 1752392040;
      v63 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v61 + 4, v61 + 12);
      *(_WORD *)(v61 + 12) = 2081;
      static String.Encoding.utf8.getter(v63);
      v64 = String.init(data:encoding:)(v157, v158, v19);
      v66 = v153;
      v67 = v163;
      if (v65)
      {
        v68 = v65;
        v69 = v57;
      }
      else
      {
        v69 = v57;
        v64 = Data.hexString.getter(v157, v158);
        v68 = v73;
      }
      v166 = sub_100016940(v64, v68, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v61 + 14, v61 + 22);
      swift_bridgeObjectRelease();
      v75 = v157;
      v74 = v158;
      sub_10001BC14(v157, v158);
      sub_10001BC14(v75, v74);
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v145, "Creating beacon for %{private,mask.hash}s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      v60 = v146;
    }
    else
    {
      v70 = v57;
      v72 = v157;
      v71 = v158;
      sub_10001BC14(v157, v158);
      sub_10001BC14(v72, v71);

      v66 = v153;
      v67 = v163;
    }
    if ((*(_BYTE *)(v66 + 200) & 1) != 0)
    {
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v76 = sub_10001A9E8(v53, (uint64_t)qword_1011B7E28);
      v77 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v149 + 16);
      v78 = v77(v11, v60, v67);
      v163 = v76;
      v79 = Logger.logObject.getter(v78);
      v80 = static os_log_type_t.default.getter(v79);
      if (os_log_type_enabled(v79, v80))
      {
        v159 = v79;
        v81 = (uint8_t *)swift_slowAlloc(12, -1);
        v165[0] = swift_slowAlloc(32, -1);
        v146 = v60;
        v82 = v165[0];
        *(_DWORD *)v81 = 136446210;
        v156 = v81 + 4;
        v83 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        v84 = dispatch thunk of CustomStringConvertible.description.getter(v67, v83);
        v166 = sub_100016940(v84, v85, v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v156, v81 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v149 + 8))(v11, v67);
        v79 = v159;
        _os_log_impl((void *)&_mh_execute_header, v159, v80, "Creating standalone beacon. classicMACAddress %{public}s", v81, 0xCu);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        v86 = v82;
        v60 = v146;
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v81, -1, -1);
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v149 + 8))(v11, v67);
      }

      v104 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
      v105 = __DataStorage.init(length:)(96) | 0x4000000000000000;
      v106 = v160;
      v77(v160, v60, v67);
      v107 = v149;
      v108 = *(unsigned __int8 *)(v149 + 80);
      v109 = (v108 + 112) & ~v108;
      v110 = (v8 + v109 + 7) & 0xFFFFFFFFFFFFFFF8;
      v111 = swift_allocObject(&unk_101056650, v110 + 16, v108 | 7);
      v112 = v151;
      v113 = *v151;
      *(_OWORD *)(v111 + 40) = v151[1];
      v114 = v112[3];
      *(_OWORD *)(v111 + 56) = v112[2];
      *(_OWORD *)(v111 + 72) = v114;
      *(_OWORD *)(v111 + 88) = v112[4];
      *(_QWORD *)(v111 + 16) = v66;
      *(_OWORD *)(v111 + 24) = v113;
      v115 = v107;
      v116 = v152;
      *(_QWORD *)(v111 + 104) = v152;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v115 + 32))(v111 + v109, v106, v67);
      v117 = (_QWORD *)(v111 + v110);
      *v117 = 0x6000000000;
      v117[1] = v105;
      v118 = v116;
      swift_retain();
      sub_10005A4CC((uint64_t *)v112, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10005CB9C);
      swift_retain();
      v119 = (uint64_t)v162;
      unsafeFromAsyncTask<A>(_:)(&unk_1010EEC68, v111, v161);
      sub_10001EF3C(v147, v148);
      sub_10001BC14(v157, v158);
      swift_release();

      swift_release();
      v126 = (uint64_t)v164;
      sub_1000126EC(v119, (uint64_t)v164, type metadata accessor for StandaloneBeacon);
      v127 = type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult(0);
      swift_storeEnumTagMultiPayload(v126, v127, 1);
      v49 = sub_10001A9A8(&qword_1010EEC58);
      v50 = (uint64_t *)v126;
      v51 = 0;
      return swift_storeEnumTagMultiPayload(v50, v49, v51);
    }
    v87 = *(_QWORD *)(*(_QWORD *)(v155 + v154)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    v88 = qword_1010EA328;
    swift_bridgeObjectRetain(v87);
    if (v88 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v89 = sub_10001A9E8(v53, (uint64_t)qword_1011B7E28);
    swift_bridgeObjectRetain_n(v87, 4);
    v163 = v89;
    v91 = Logger.logObject.getter(v90);
    v92 = static os_log_type_t.debug.getter(v91);
    v93 = os_log_type_enabled(v91, v92);
    v94 = (uint64_t)v150;
    if (v93)
    {
      v95 = swift_slowAlloc(22, -1);
      v96 = swift_slowAlloc(32, -1);
      v165[0] = v96;
      *(_DWORD *)v95 = 136315394;
      v97 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      v98 = sub_100059BCC();
      swift_bridgeObjectRetain(v87);
      v100 = Dictionary.description.getter(v99, &type metadata for OwnedBeaconGroup.SerialNumber, v97, v98);
      v102 = v101;
      swift_bridgeObjectRelease();
      v166 = sub_100016940(v100, v102, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v95 + 4, v95 + 12);
      swift_bridgeObjectRelease_n(v87, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v95 + 12) = 2048;
      v103 = *(_QWORD *)(v87 + 16);
      swift_bridgeObjectRelease();
      v166 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v95 + 14, v95 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "allSerialNumbersAndPartIds: %s. Count %ld", (uint8_t *)v95, 0x16u);
      swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v95, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v87, 4);
    }
    v120 = *(_QWORD *)(v153 + 24);
    v121 = (uint64_t)v156;
    v122 = *(_QWORD **)(v155 + v154);
    v123 = *(void (**)(_QWORD, _QWORD, _QWORD))&v152[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName
                                                              + 8];
    if (v123)
    {
      v124 = *(_QWORD *)&v152[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
      swift_retain();
      v125 = v123;
    }
    else
    {
      v128 = *(void **)&v152[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
      swift_retain();
      v129 = objc_msgSend(v128, "name");
      if (!v129)
      {
        v124 = 0;
        v125 = (void (*)(_QWORD, _QWORD, _QWORD))0xE000000000000000;
        goto LABEL_42;
      }
      v130 = v129;
      v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
      v125 = v131;

      v123 = 0;
    }
    swift_bridgeObjectRetain(v123);
LABEL_42:
    sub_1008E2C44(v121, v94, v151, v122, v124, v125, v60, v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v132 = (void **)(*(_QWORD *)(v155 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_locationMonitor)
                   + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess(v132, v165, 0, 0);
    v134 = *v132;
    if (*v132)
    {
      v135 = v121 + SHIDWORD(v159[2].isa);
      v136 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v136);
      v144[-32] = 0;
      *(_QWORD *)&v144[-24] = v134;
      *(_QWORD *)&v144[-16] = v135;
      *(_QWORD *)&v144[-8] = v120;
      v137 = v134;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconStore.saveEstimatedLocation", 63, 2, sub_10005A56C, &v144[-48], &type metadata for () + 1);
      sub_10001EF3C(v147, v148);
      sub_10001BC14(v157, v158);

    }
    else
    {
      v138 = Logger.logObject.getter(v133);
      v139 = static os_log_type_t.error.getter(v138);
      if (os_log_type_enabled(v138, v139))
      {
        v140 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v140 = 0;
        _os_log_impl((void *)&_mh_execute_header, v138, v139, "Unable to retrieve current location from CL for pairing", v140, 2u);
        swift_slowDealloc(v140, -1, -1);

        sub_10001BC14(v157, v158);
        sub_10001EF3C(v147, v148);
      }
      else
      {
        sub_10001EF3C(v147, v148);
        sub_10001BC14(v157, v158);

      }
    }
    v141 = (uint64_t)v164;
    v142 = v141 + *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
    sub_1000126EC((uint64_t)v150, v141, type metadata accessor for OwnedBeaconGroup);
    sub_1000126EC(v121, v142, type metadata accessor for OwnedBeaconRecord);
    v143 = type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult(0);
    swift_storeEnumTagMultiPayload(v141, v143, 0);
    v49 = sub_10001A9A8(&qword_1010EEC58);
    v50 = (uint64_t *)v141;
    v51 = 0;
    return swift_storeEnumTagMultiPayload(v50, v49, v51);
  }
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B7E28);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v30 = v164;
  if (v29)
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Missing peripheral to create beacon!", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

  v32 = sub_1000F8428();
  v33 = swift_allocError(&type metadata for AirPodsLEPairingManager.AirPodsLEPairingManagerError, v32, 0, 0);
  *v34 = 1;
  *v30 = v33;
  v35 = sub_10001A9A8(&qword_1010EEC58);
  return swift_storeEnumTagMultiPayload(v30, v35, 1);
}

uint64_t sub_1000F3724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v8 = type metadata accessor for MACAddress(0);
  v7[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[10] = v9;
  v7[11] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000F3790, 0, 0);
}

uint64_t sub_1000F3790()
{
  uint64_t *v0;
  char *v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = (char *)v0[11];
  v2 = *(_QWORD *)(*(_QWORD *)(v0[3] + 64) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  v0[12] = v2;
  swift_retain();
  sub_100786FB4(v1);
  v3 = (uint64_t **)swift_task_alloc(dword_10110C744);
  v0[13] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1000F3834;
  return sub_1008E6368(v0[2], v0[4], v2, v0[11], v0[6], v0[7], v0[8]);
}

uint64_t sub_1000F3834()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 80);
  v3 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 72);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0)
    return swift_task_switch(sub_1000F38E0, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000F38E0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F3914(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v6 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v6);
  v86 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconGroup(0);
  v85 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v80 - v13;
  __chkstk_darwin(v12);
  v84 = (uint64_t)&v80 - v15;
  v16 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v16);
  v88 = ((char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for UUID(0);
  v90 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v87 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7E28);
  sub_10001BBBC(a1, a2);
  v25 = sub_10001BBBC(a1, a2);
  v89 = v24;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  v28 = os_log_type_enabled(v26, v27);
  v91 = v8;
  v92 = v18;
  v83 = v14;
  if (v28)
  {
    v81 = a3;
    v82 = v11;
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(32, -1);
    *(_DWORD *)v29 = 141558275;
    v93 = 1752392040;
    v94 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2081;
    v31 = sub_10001BBBC(a1, a2);
    static String.Encoding.utf8.getter(v31);
    v32 = String.init(data:encoding:)(a1, a2, v22);
    if (!v33)
      v32 = Data.hexString.getter(a1, a2);
    v34 = v32;
    v35 = v33;
    sub_10001BC14(a1, a2);
    v93 = sub_100016940(v34, v35, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Clean up pending pairing for %{private,mask.hash}s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    v8 = v91;
    a3 = v81;
    v11 = v82;
  }
  else
  {
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);

  }
  v36 = swift_allocBox(v8);
  sub_10005972C(a3, v37, type metadata accessor for OwnedBeaconGroup);
  if ((sub_10036A524(a1, a2) & 1) != 0)
  {
    v38 = dispatch_group_create();
    dispatch_group_enter(v38);
    v39 = a3;
    v40 = swift_allocObject(&unk_101056628, 24, 7);
    *(_QWORD *)(v40 + 16) = v38;
    swift_retain();
    v41 = v38;
    sub_1007A0418(v39, 0, (void (*)(uint64_t))sub_1000F8530, v36, sub_1000F855C, (void (*)(uint64_t))v40);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();
    v42 = v88;
    sub_10036A9C8(a1, a2, (uint64_t)v88);
    v43 = v90;
    v44 = v92;
    if ((*(unsigned int (**)(NSObject *, uint64_t, uint64_t))(v90 + 48))(v42, 1, v92) == 1)
    {

      sub_100004048((uint64_t)v42, &qword_1010ED860);
    }
    else
    {
      v56 = v41;
      v57 = (uint64_t)v87;
      (*(void (**)(char *, NSObject *, uint64_t))(v43 + 32))(v87, v42, v44);
      v58 = v86;
      sub_10081EDA8(v57, v86);
      v59 = v44;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v58, 1, v8) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v57, v44);

        sub_100004048(v58, (uint64_t *)&unk_1010FF7F0);
      }
      else
      {
        v60 = v84;
        sub_1000126EC(v58, v84, type metadata accessor for OwnedBeaconGroup);
        v61 = sub_100A3E400(v60);
        if (v61)
        {
          v62 = v61;
          v88 = v56;
          v63 = (uint64_t)v83;
          sub_10005972C(v60, (uint64_t)v83, type metadata accessor for OwnedBeaconGroup);
          swift_errorRetain(v62);
          v64 = swift_errorRetain(v62);
          v65 = Logger.logObject.getter(v64);
          v66 = static os_log_type_t.error.getter(v65);
          if (os_log_type_enabled(v65, v66))
          {
            v67 = swift_slowAlloc(32, -1);
            v68 = swift_slowAlloc(64, -1);
            v89 = v68;
            *(_DWORD *)v67 = 141558531;
            v93 = 1752392040;
            v94 = v68;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v67 + 4, v67 + 12);
            *(_WORD *)(v67 + 12) = 2081;
            v69 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v70 = dispatch thunk of CustomStringConvertible.description.getter(v59, v69);
            v93 = sub_100016940(v70, v71, &v94);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v67 + 14, v67 + 22);
            swift_bridgeObjectRelease();
            sub_1000126B0(v63, type metadata accessor for OwnedBeaconGroup);
            *(_WORD *)(v67 + 22) = 2082;
            v93 = v62;
            swift_errorRetain(v62);
            v72 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
            v73 = String.init<A>(describing:)(&v93, v72);
            v93 = sub_100016940(v73, v74, &v94);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v67 + 24, v67 + 32);
            swift_bridgeObjectRelease();
            swift_errorRelease(v62);
            swift_errorRelease(v62);
            _os_log_impl((void *)&_mh_execute_header, v65, v66, "\"Failed to delete pending record %{private,mask.hash}s\ndue to %{public}s", (uint8_t *)v67, 0x20u);
            v75 = v89;
            swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v75, -1, -1);
            swift_slowDealloc(v67, -1, -1);

            swift_errorRelease(v62);
            sub_1000126B0(v84, type metadata accessor for OwnedBeaconGroup);
          }
          else
          {

            swift_errorRelease(v62);
            swift_errorRelease(v62);
            sub_1000126B0(v63, type metadata accessor for OwnedBeaconGroup);
            swift_errorRelease(v62);

            sub_1000126B0(v60, type metadata accessor for OwnedBeaconGroup);
          }
          (*(void (**)(char *, uint64_t))(v90 + 8))(v87, v59);
        }
        else
        {

          sub_1000126B0(v60, type metadata accessor for OwnedBeaconGroup);
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v57, v59);
        }
      }
    }
    swift_release();
  }
  else
  {
    sub_10005972C(a3, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    sub_10001BBBC(a1, a2);
    v45 = sub_10001BBBC(a1, a2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v90 = v36;
      v48 = swift_slowAlloc(42, -1);
      v49 = swift_slowAlloc(64, -1);
      v93 = 1752392040;
      v94 = v49;
      *(_DWORD *)v48 = 141558787;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2081;
      v50 = sub_10001BBBC(a1, a2);
      static String.Encoding.utf8.getter(v50);
      v51 = String.init(data:encoding:)(a1, a2, v22);
      if (v52)
      {
        v53 = v51;
        v54 = v52;
        v55 = (uint64_t)v11;
      }
      else
      {
        v55 = (uint64_t)v11;
        v53 = Data.hexString.getter(a1, a2);
        v54 = v76;
      }
      sub_10001BC14(a1, a2);
      v93 = sub_100016940(v53, v54, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      *(_WORD *)(v48 + 22) = 2160;
      v93 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v48 + 24, v48 + 32);
      *(_WORD *)(v48 + 32) = 2081;
      v77 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v92, v77);
      v93 = sub_100016940(v78, v79, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v48 + 34, v48 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v55, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unable to unpair %{private,mask.hash}s from %{private,mask.hash}s!", (uint8_t *)v48, 0x2Au);
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    }
    swift_release();

  }
}

uint64_t sub_1000F43E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  v4 = type metadata accessor for OwnedBeaconGroup(0);
  v5 = swift_projectBox(a2);
  swift_beginAccess(v5, v9, 0, 0);
  v6 = *(int *)(v4 + 40);
  v7 = *(_QWORD *)(v5 + v6);
  swift_bridgeObjectRetain(v7);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v6) = v7;
  return result;
}

void sub_1000F4458(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for OwnedBeaconGroup(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  v10 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v12, &qword_1010EEC50);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    v13 = *v12;
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B7E28);
    swift_errorRetain(v13);
    v15 = swift_errorRetain(v13);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v38 = v13;
      v39 = v19;
      *(_DWORD *)v18 = 136446210;
      swift_errorRetain(v13);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v21 = String.init<A>(describing:)(&v38, v20);
      v38 = sub_100016940(v21, v22, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to modify existing group. Error %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(v13);
    }
    else
    {
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      swift_errorRelease(v13);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7E28);
    v25 = sub_10005972C((uint64_t)v9, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(32, -1);
      v37 = a2;
      v30 = v29;
      *(_DWORD *)v28 = 141558275;
      v38 = 1752392040;
      v39 = v29;
      v36 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v28 + 4, v28 + 12);
      *(_WORD *)(v28 + 12) = 2081;
      v31 = type metadata accessor for UUID(0);
      v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      v38 = sub_100016940(v33, v34, &v39);
      v24 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully modified existing group %{private,mask.hash}s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      v35 = v30;
      a2 = v37;
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
    }

    sub_100367170(v24);
    sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_1000F4900(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + 16);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    if (qword_1010EA328 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7E28);
  v13 = sub_10001BBBC(a1, a2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
    __asm { BR              X10 }
  }
  sub_10001BC14(a1, a2);

  v16 = swift_allocObject(&unk_101056588, 24, 7);
  swift_weakInit(v16 + 16, v3);
  v17 = (_QWORD *)swift_allocObject(&unk_1010565D8, 40, 7);
  v17[2] = v16;
  v17[3] = a1;
  v17[4] = a2;
  v18 = sub_10001A9A8(&qword_1010EEC28);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  sub_10001BBBC(a1, a2);
  return Future.init(_:)(sub_1000F841C, v17, v19);
}

uint64_t sub_1000F4B9C(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint8_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v95;
  uint8_t *v96;
  uint8_t *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t *);
  uint64_t v115;
  _QWORD v116[6];
  char v117;
  uint64_t v118;
  _BYTE v119[208];
  uint64_t v120;
  uint64_t v121[4];
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  unint64_t v126;
  char v127[32];

  v113 = a2;
  v114 = a1;
  v8 = type metadata accessor for BinaryDecodingError(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v110 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BinaryDecoder(0);
  v102 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v103 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EEC30);
  __chkstk_darwin(v13);
  v108 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for Bit(0);
  v109 = *(_QWORD *)(v112 - 8);
  v15 = __chkstk_darwin(v112);
  v17 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v111 = (char *)&v95 - v18;
  a3 += 16;
  swift_beginAccess(a3, v127, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    v122 = 0;
    memset(v121, 0, sizeof(v121));
    v123 = 11;
    v124 = 1;
    v114(v121);
    return sub_100004048((uint64_t)v121, &qword_1010EEC38);
  }
  v20 = Strong;
  v100 = v11;
  v106 = v9;
  v107 = v8;
  v21 = *(_QWORD *)(Strong + 160);
  v22 = *(_QWORD *)(v20 + 168);
  if (v22 >> 60 == 15)
    v23 = 0;
  else
    v23 = v21;
  v24 = 0xC000000000000000;
  if (v22 >> 60 != 15)
    v24 = *(_QWORD *)(v20 + 168);
  v125 = v23;
  v126 = v24;
  sub_10001BD08(v21, v22);
  sub_10001BBBC(a4, a5);
  sub_100AEF294(1, a4, a5);
  v25 = *(_OWORD *)v121;
  Data.append(_:)(v121[0], v121[1]);
  sub_10001BC14(v25, *((unint64_t *)&v25 + 1));
  v26 = v125;
  v27 = v126;
  v28 = *(_QWORD *)(v20 + 160);
  v29 = *(_QWORD *)(v20 + 168);
  *(_QWORD *)(v20 + 160) = v125;
  *(_QWORD *)(v20 + 168) = v27;
  sub_10001BBBC(v26, v27);
  sub_10001EF3C(v28, v29);
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v30 = type metadata accessor for Logger(0);
  v104 = sub_10001A9E8(v30, (uint64_t)qword_1011B7E28);
  v31 = Logger.logObject.getter(v104);
  v32 = static os_log_type_t.info.getter(v31);
  v33 = v32;
  v34 = os_log_type_enabled(v31, v32);
  v105 = v20;
  v101 = v17;
  if (v34)
  {
    v35 = swift_slowAlloc(12, -1);
    v98 = v33;
    v36 = (uint8_t *)v35;
    v99 = swift_slowAlloc(32, -1);
    v121[0] = v99;
    *(_DWORD *)v36 = 136315138;
    v96 = v36 + 4;
    v97 = v36;
    swift_beginAccess(&v125, &v115, 0, 0);
    v37 = v125;
    v38 = v126;
    sub_10001BBBC(v125, v126);
    v39 = a5;
    v40 = Data.description.getter(v37, v38);
    v42 = v41;
    sub_10001BC14(v37, v38);
    v43 = v40;
    a5 = v39;
    v118 = sub_100016940(v43, v42, v121);
    v20 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v96, v36 + 12);
    swift_bridgeObjectRelease();
    v44 = v97;
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v98, "localReadBuffer %s", v97, 0xCu);
    v45 = v99;
    swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }

  v46 = v106;
  v47 = v111;
  v48 = v112;
  sub_10001BBBC(a4, a5);
  sub_1000FC3EC(a4, a5);
  v50 = v49;
  sub_10001BC14(a4, a5);
  if ((v50 & 0x100) != 0)
    goto LABEL_18;
  LOBYTE(v121[0]) = v50;
  v51 = sub_100059570();
  v52 = FixedWidthInteger.bits()(&type metadata for UInt8, v51);
  if (*(_QWORD *)(v52 + 16))
  {
    v53 = (uint64_t)v108;
    v54 = v109;
    (*(void (**)(char *, unint64_t, uint64_t))(v109 + 16))(v108, v52 + ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80)), v48);
    v55 = 0;
  }
  else
  {
    v55 = 1;
    v53 = (uint64_t)v108;
    v54 = v109;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v53, v55, 1, v48);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v53, 1, v48) == 1)
  {
    sub_100004048(v53, &qword_1010EEC30);
LABEL_18:
    v56 = sub_1000F8428();
    v57 = swift_allocError(&type metadata for AirPodsLEPairingManager.AirPodsLEPairingManagerError, v56, 0, 0);
    *v58 = 2;
    swift_willThrow(v57);
    sub_10001BC14(v125, v126);
    goto LABEL_19;
  }
  v108 = (char *)a5;
  v109 = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v47, v53, v48);
  v66 = v101;
  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v101, enum case for Bit.one(_:), v48);
  v67 = v47;
  v68 = sub_100006204((unint64_t *)&qword_1010EDCA0, (uint64_t (*)(uint64_t))&type metadata accessor for Bit, (uint64_t)&protocol conformance descriptor for Bit);
  dispatch thunk of RawRepresentable.rawValue.getter(v121, v48, v68);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v48, v68);
  v69 = LOBYTE(v121[0]);
  LODWORD(v68) = v118;
  v70 = *(uint64_t (**)(char *, uint64_t))(v54 + 8);
  v71 = v70(v66, v48);
  if (v69 == (_DWORD)v68)
  {
    v72 = v103;
    BinaryDecoder.init()(v71);
    swift_beginAccess(&v125, &v120, 0, 0);
    v74 = v125;
    v73 = v126;
    sub_10001BBBC(v125, v126);
    v75 = sub_1000F846C();
    BinaryDecoder.decode<A>(_:from:)(&type metadata for AirPodsLEPairingCommand, v74, v73, &type metadata for AirPodsLEPairingCommand, v75);
    sub_10001BC14(v74, v73);
    sub_1000F7F88((uint64_t)v121, (uint64_t)&v118);
    v92 = *(_QWORD *)(v105 + 160);
    v93 = *(_QWORD *)(v105 + 168);
    *(_OWORD *)(v105 + 160) = xmmword_100E22B20;
    sub_10001EF3C(v92, v93);
    v116[3] = &type metadata for AirPodsLEPairingCommand;
    v116[4] = v75;
    v116[5] = sub_1000F8394();
    v116[0] = swift_allocObject(&unk_101056600, 232, 7);
    sub_1000F7F88((uint64_t)&v118, v116[0] + 16);
    v117 = 0;
    sub_1000F84B4((uint64_t)&v118, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    v114(v116);
    swift_release();
    sub_1000F84B4((uint64_t)&v118, (void (*)(void))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v72, v100);
    v70(v111, v112);
    sub_100004048((uint64_t)v116, &qword_1010EEC38);
    return sub_10001BC14(v125, v126);
  }
  v87 = v48;
  v88 = sub_100006204((unint64_t *)&qword_1010EC010, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError, (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
  v89 = v107;
  v57 = swift_allocError(v107, v88, 0, 0);
  v91 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v90, enum case for BinaryDecodingError.insufficientData(_:), v89);
  swift_willThrow(v91);
  v70(v67, v87);
  sub_10001BC14(v125, v126);
  a5 = (unint64_t)v108;
  a4 = v109;
LABEL_19:
  v121[0] = v57;
  swift_errorRetain(v57);
  v59 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v60 = v110;
  v61 = v107;
  if (!swift_dynamicCast(v110, v121, v59, v107, 0))
  {
LABEL_26:
    swift_errorRelease(v121[0]);
    sub_10001BBBC(a4, a5);
    v76 = sub_10001BBBC(a4, a5);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.error.getter(v77);
    if (os_log_type_enabled(v77, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = swift_slowAlloc(32, -1);
      v121[0] = v112;
      *(_DWORD *)v79 = 136446210;
      v111 = (char *)(v79 + 4);
      v80 = v79;
      sub_10001BBBC(a4, a5);
      v81 = Data.description.getter(a4, a5);
      v83 = v82;
      sub_10001BC14(a4, a5);
      v118 = sub_100016940(v81, v83, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v111, v79 + 12);
      v20 = v105;
      swift_bridgeObjectRelease();
      sub_10001BC14(a4, a5);
      sub_10001BC14(a4, a5);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Failed to decode data %{public}s", v79, 0xCu);
      v84 = v112;
      swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v80, -1, -1);
    }
    else
    {
      sub_10001BC14(a4, a5);
      sub_10001BC14(a4, a5);
    }

    v85 = *(_QWORD *)(v20 + 160);
    v86 = *(_QWORD *)(v20 + 168);
    *(_OWORD *)(v20 + 160) = xmmword_100E22B20;
    sub_10001EF3C(v85, v86);
    v121[0] = v57;
    v123 = 10;
    v124 = 1;
    swift_errorRetain(v57);
    v114(v121);
    swift_release();
    swift_errorRelease(v57);
    return sub_100004048((uint64_t)v121, &qword_1010EEC38);
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v46 + 88))(v60, v61) != enum case for BinaryDecodingError.insufficientData(_:))
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v60, v61);
    goto LABEL_26;
  }
  v62 = swift_errorRelease(v57);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.info.getter(v63);
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "insufficientData. Keep reading...", v65, 2u);
    swift_slowDealloc(v65, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
  }
  return swift_errorRelease(v121[0]);
}

uint64_t sub_1000F562C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v12 = swift_allocObject(&unk_101056588, 24, 7);
    swift_weakInit(v12 + 16, v2);
    v13 = swift_allocObject(&unk_1010565B0, 248, 7);
    *(_QWORD *)(v13 + 16) = v12;
    sub_1000F7F88(a1, v13 + 24);
    *(_QWORD *)(v13 + 240) = a2;
    v14 = sub_10001A9A8(&qword_1010EEC08);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    sub_1000F84B4(a1, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    swift_retain();
    return Future.init(_:)(sub_1000F8384, v13, v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F578C(void (*a1)(__int128 *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *Strong;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  NSObject *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[24];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72[32];

  v10 = type metadata accessor for BinaryEncoder(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v72, 0, 0);
  Strong = (_QWORD *)swift_weakLoadStrong(a3);
  if (!Strong)
  {
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    v70 = 11;
    v71 = 1;
    a1(&v67);
    return sub_100004048((uint64_t)&v67, &qword_1010EEC00);
  }
  v15 = Strong;
  v61 = a5;
  v16 = (void *)Strong[7];
  if (!v16)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B7E28);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Missing peripheral to write!", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    v70 = 11;
    v71 = 1;
    a1(&v67);
    swift_release();
    return sub_100004048((uint64_t)&v67, &qword_1010EEC00);
  }
  v63 = v11;
  v17 = Strong[18];
  v18 = Strong[19];
  Strong[18] = a1;
  Strong[19] = a2;
  swift_retain();
  v19 = v16;
  v20 = sub_10001D8A8(v17, v18);
  BinaryEncoder.init()(v20);
  sub_1000F7F88(a4, (uint64_t)&v67);
  v21 = sub_1000F8394();
  v22 = 0;
  v23 = BinaryEncoder.encode<A>(_:)(&v67, &type metadata for AirPodsLEPairingCommand, v21);
  v62 = v13;
  v58 = v30;
  v59 = v23;
  __chkstk_darwin(v23);
  *(&v53 - 2) = (uint64_t)v19;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F83D8, &v53 - 4, v31, &type metadata for () + 1, &type metadata for Int);
  v32 = v67;
  if (__OFSUB__((_QWORD)v67, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  v60 = v10;
  v22 = Data.chunked(into:)(v67 - 1, v59, v58);
  if (qword_1010EA328 != -1)
LABEL_18:
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v33 = type metadata accessor for Logger(0);
  sub_10001A9E8(v33, (uint64_t)qword_1011B7E28);
  swift_retain_n(v15, 4);
  swift_bridgeObjectRetain_n(v22, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter(v35);
  v37 = v36;
  v38 = v35;
  if (os_log_type_enabled(v35, v36))
  {
    v39 = swift_slowAlloc(42, -1);
    v56 = v37;
    v40 = v39;
    v55 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v67 = v55;
    *(_DWORD *)v40 = 136315906;
    v57 = v19;
    swift_bridgeObjectRetain(v22);
    v42 = Array.description.getter(v41, &type metadata for Data);
    v44 = v43;
    swift_bridgeObjectRelease();
    v65 = sub_100016940(v42, v44, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease_n(v22, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2048;
    v65 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v40 + 14, v40 + 22);
    *(_WORD *)(v40 + 22) = 2048;
    swift_beginAccess(v15 + 22, &v65, 0, 0);
    v45 = *(_QWORD *)(v15[22] + 16);
    swift_release();
    v64 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v40 + 24, v40 + 32);
    swift_release();
    *(_WORD *)(v40 + 32) = 2080;
    v54 = v40 + 34;
    swift_bridgeObjectRetain(v15[22]);
    v47 = Array.description.getter(v46, &type metadata for Data);
    v49 = v48;
    swift_bridgeObjectRelease();
    v64 = sub_100016940(v47, v49, (uint64_t *)&v67);
    v19 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v54, v40 + 42);
    swift_release_n(v15, 2);
    swift_bridgeObjectRelease();
    v50 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v56, "Enqueuing %s. MTU %ld. Current queue [%ld] %s", (uint8_t *)v40, 0x2Au);
    v51 = v55;
    swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
    swift_release_n(v15, 4);
  }
  v52 = sub_1000F7B84(v22);
  swift_bridgeObjectRelease();
  swift_beginAccess(v15 + 22, &v67, 33, 0);
  sub_10030294C((uint64_t)v52);
  swift_endAccess(&v67);
  sub_1000F5F58(v61, a4);
  sub_10001BC14(v59, v58);
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v62, v60);
}

void sub_1000F5F58(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  void (*isa)(uint64_t, unint64_t);
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint8_t *v64;
  _QWORD *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void (*v77)(uint64_t *);
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[12];
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  unint64_t v90;
  _QWORD *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[5];
  char v97;
  char v98;
  uint64_t v99;
  _BYTE v100[40];
  uint64_t v101;
  _BYTE v102[40];
  char v103[24];
  char v104[32];

  v93 = a1;
  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(NSObject **)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v83[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v92 = &v83[-v9];
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v83[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (void *)v2[2];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v17 = v2 + 22;
  swift_beginAccess(v2 + 22, v104, 0, 0);
  if (*(_QWORD *)(v2[22] + 16))
  {
    swift_beginAccess(v2 + 22, v96, 33, 0);
    v18 = *v17;
    if (*(_QWORD *)(*v17 + 16))
    {
      v86 = a2;
      v91 = v2;
      v10 = *(_QWORD *)(v18 + 32);
      v16 = *(_QWORD *)(v18 + 40);
      sub_10001BBBC(v10, v16);
      sub_100779578(0, 1);
      swift_endAccess(v96);
      if (qword_1010EA328 == -1)
        goto LABEL_5;
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_5:
    v88 = (uint64_t)v8;
    v89 = v5;
    v90 = v4;
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B7E28);
    sub_10001BBBC(v10, v16);
    swift_retain();
    sub_10001BBBC(v10, v16);
    v21 = swift_retain();
    v87 = v20;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter(v22);
    v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      v25 = swift_slowAlloc(22, -1);
      v85 = swift_slowAlloc(64, -1);
      v96[0] = v85;
      *(_DWORD *)v25 = 136315394;
      v84 = v24;
      sub_10001BBBC(v10, v16);
      v26 = Data.description.getter(v10, v16);
      v27 = v93;
      v28 = v16;
      v29 = v26;
      v31 = v30;
      sub_10001BC14(v10, v28);
      v101 = sub_100016940(v29, v31, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v10, v28);
      sub_10001BC14(v10, v28);
      *(_WORD *)(v25 + 12) = 2082;
      swift_retain();
      v32 = sub_1007C6C74();
      v33 = v10;
      v35 = v34;
      swift_release();
      v101 = sub_100016940(v32, v35, v96);
      v16 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v25 + 14, v25 + 22);
      swift_release_n(v27, 2);
      v10 = v33;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v84, "processQueuedUpdates: writing %s. Characteristic %{public}s.", (uint8_t *)v25, 0x16u);
      v36 = v85;
      swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {
      sub_10001BC14(v10, v16);
      sub_10001BC14(v10, v16);

      swift_release_n(v93, 2);
    }
    v39 = swift_allocObject(&unk_101056538, 58, 7);
    *(_OWORD *)(v39 + 16) = 0u;
    v40 = v39 + 16;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_QWORD *)(v39 + 48) = 0;
    *(_WORD *)(v39 + 56) = 267;
    v41 = dispatch_group_create();
    dispatch_group_enter(v41);
    v96[0] = sub_1007C5C3C(v10, v16);
    v42 = swift_allocObject(&unk_101056560, 32, 7);
    *(_QWORD *)(v42 + 16) = v39;
    *(_QWORD *)(v42 + 24) = v41;
    swift_retain();
    v43 = v41;
    v44 = sub_10001A9A8(&qword_1010EEBE8);
    v45 = sub_1000193A4(&qword_1010EEBF0, &qword_1010EEBE8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_1000F7F80, v42, v44, v45);
    swift_release();
    v46 = swift_release();
    v47 = v88;
    static DispatchTime.now()(v46);
    v48 = v92;
    + infix(_:_:)(v47, 30.0);
    v49 = v90;
    isa = (void (*)(uint64_t, unint64_t))v89[1].isa;
    isa(v47, v90);
    v89 = v43;
    v51 = OS_dispatch_group.wait(timeout:)(v48) & 1;
    isa((uint64_t)v48, v49);
    v52 = static DispatchTimeoutResult.== infix(_:_:)(v51, 1);
    if ((v52 & 1) != 0)
    {
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.error.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Timed out waiting for writeFuture", v55, 2u);
        swift_slowDealloc(v55, -1, -1);
      }

    }
    swift_beginAccess(v40, v103, 0, 0);
    sub_10000F9B8(v40, (uint64_t)&v101, &qword_1010EEBF8);
    if ((v102[33] & 1) != 0)
    {
      sub_100059244((uint64_t)&v101, (uint64_t)&v99);
      v56 = sub_100059280(&v99, (uint64_t)v96);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.error.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc(12, -1);
        v92 = (_BYTE *)v10;
        v60 = (uint8_t *)v59;
        v61 = swift_slowAlloc(32, -1);
        v95 = v61;
        *(_DWORD *)v60 = 136446210;
        sub_100E01294();
        v94 = sub_100016940(v62, v63, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v60 + 4, v60 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(v96);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "writeFuture error: %{public}s", v60, 0xCu);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        v64 = v60;
        v10 = (uint64_t)v92;
        swift_slowDealloc(v64, -1, -1);
      }
      else
      {
        sub_1000593D4(v96);
      }

      v77 = (void (*)(uint64_t *))v91[18];
      if (v77)
      {
        v78 = v91[19];
        v79 = sub_100059390();
        v80 = swift_allocError(&type metadata for CentralManager.Error, v79, 0, 0);
        sub_100059280(&v99, v81);
        v96[0] = v80;
        v97 = 0;
        v98 = 1;
        swift_retain();
        v77(v96);
        sub_10001D8A8((uint64_t)v77, v78);

        sub_10001BC14(v10, v16);
        sub_100004048((uint64_t)v96, &qword_1010EEC00);
        sub_1000593D4(&v99);
LABEL_26:
        swift_release();
        return;
      }
      sub_1000593D4(&v99);

      v82 = v10;
    }
    else
    {
      v92 = (_BYTE *)v10;
      v65 = v91;
      v66 = swift_retain_n(v91, 2);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.info.getter(v67);
      v69 = v68;
      if (os_log_type_enabled(v67, v68))
      {
        v70 = swift_slowAlloc(22, -1);
        v88 = swift_slowAlloc(32, -1);
        v96[0] = v88;
        *(_DWORD *)v70 = 134218242;
        v99 = *(_QWORD *)(v65[22] + 16);
        LODWORD(v87) = v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v70 + 4, v70 + 12);
        *(_WORD *)(v70 + 12) = 2080;
        v90 = v16;
        swift_bridgeObjectRetain(v65[22]);
        v72 = Array.description.getter(v71, &type metadata for Data);
        v74 = v73;
        swift_bridgeObjectRelease();
        v75 = v91;
        v99 = sub_100016940(v72, v74, v96);
        v16 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v70 + 14, v70 + 22);
        swift_release_n(v75, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v87, "writeFuture success. writeQueue [%ld] %s", (uint8_t *)v70, 0x16u);
        v76 = v88;
        swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v76, -1, -1);
        swift_slowDealloc(v70, -1, -1);

      }
      else
      {

        swift_release_n(v65, 2);
      }
      sub_1000F5F58(v93, v86);

      v82 = (uint64_t)v92;
    }
    sub_10001BC14(v82, v16);
    goto LABEL_26;
  }
  v37 = (void (*)(uint64_t *))v2[18];
  if (v37)
  {
    v38 = v2[19];
    sub_1000F7F88(a2, (uint64_t)v96);
    v98 = 0;
    sub_10001D898((uint64_t)v37, v38);
    sub_1000F84B4(a2, (void (*)(void))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    v37(v96);
    sub_10001D8A8((uint64_t)v37, v38);
    sub_100004048((uint64_t)v96, &qword_1010EEC00);
  }
}

void sub_1000F6924(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  _BYTE v6[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 1, 0);
  sub_1000F8EF4(a1, v5, &qword_1010EEBF8);
  dispatch_group_leave(a3);
}

void sub_1000F6988()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (void *)v1[2];
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_1010EA328 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_3:
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7E28);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "pairingCompleteAnalyticsEvent", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v14 = v1[24];
  if (v14)
  {
    v15 = *(_QWORD *)(v1[8] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    type metadata accessor for Transaction(0);
    v16 = swift_allocObject(&unk_101056510, 32, 7);
    *(_QWORD *)(v16 + 16) = v14;
    *(_QWORD *)(v16 + 24) = v15;
    swift_retain_n(v14, 2);
    swift_retain_n(v15, 2);
    static Transaction.asyncTask(name:block:)("pairingCompleteAnalyticsEvent", 29, 2, &unk_1010EEBE0, v16);
    swift_release();
    swift_release();
    swift_release();
    v1[24] = 0;
    swift_release();
  }
  else
  {
    v17 = Logger.logObject.getter(v13);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No analytics event!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

  }
}

uint64_t sub_1000F6BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000F6C10, 0, 0);
}

uint64_t sub_1000F6C10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return swift_task_switch(sub_1000F6C4C, v1, 0);
}

uint64_t sub_1000F6C4C()
{
  uint64_t v0;

  sub_100CDEFC4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  return swift_task_switch(sub_1000F6CB4, 0, 0);
}

uint64_t sub_1000F6CB4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[4] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[5] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1000F6D20;
  return sub_100CD63AC(v0[2]);
}

uint64_t sub_1000F6D20()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 32);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

unint64_t sub_1000F6D70()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v3;

  v0 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_100E26E00;
  *(_QWORD *)(inited + 32) = 0x6563637553736177;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  *(_QWORD *)(inited + 48) = 1;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = 0x626D754E74726170;
  *(_QWORD *)(inited + 72) = 0xEA00000000007265;
  *(NSNumber *)(inited + 80) = UInt8._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "numberOfParts");
  *(_WORD *)(inited + 110) = -4864;
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0x6961506563726F66;
  *(_QWORD *)(inited + 136) = 0xE900000000000072;
  *(NSNumber *)(inited + 144) = Bool._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 152) = 0;
  return sub_1006B9444(inited);
}

void sub_1000F6EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;

  v4 = v3;
  v63 = a3;
  v68 = a2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v7 = __chkstk_darwin(v6);
  v70 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v59 - v9;
  v11 = type metadata accessor for MACAddress(0);
  v64 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v14);
  v67 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for OwnedBeaconGroup(0);
  v66 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v65 = (uint64_t)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = (void *)v4[2];
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  v23 = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v23 & 1) != 0)
  {
    if (qword_1010EA328 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_3:
  v24 = type metadata accessor for Logger(0);
  sub_10001A9E8(v24, (uint64_t)qword_1011B7E28);
  swift_errorRetain(a1);
  v25 = swift_errorRetain(a1);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  v28 = os_log_type_enabled(v26, v27);
  v62 = v13;
  if (v28)
  {
    v29 = swift_slowAlloc(12, -1);
    v60 = v11;
    v30 = (uint8_t *)v29;
    v31 = swift_slowAlloc(32, -1);
    v61 = v4;
    v32 = v31;
    v71 = a1;
    v72 = v31;
    *(_DWORD *)v30 = 136446210;
    swift_errorRetain(a1);
    v33 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v34 = String.init<A>(describing:)(&v71, v33);
    v71 = sub_100016940(v34, v35, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "pairingFailureAnalyticsEvent %{public}s", v30, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    v36 = v32;
    v4 = v61;
    swift_slowDealloc(v36, -1, -1);
    v37 = v30;
    v11 = v60;
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v39 = (uint64_t)v70;
  v40 = v4[24];
  if (v40)
  {
    v41 = *(_QWORD *)(v4[8] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    v42 = (_BYTE *)(v41 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
    if ((*(_BYTE *)(v41 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1) & 1) != 0)
    {
      swift_retain();
      swift_retain();
      v43 = v67;
      sub_10081F5CC(v68, v67);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v43, 1, v69) == 1)
      {
        sub_100004048(v43, (uint64_t *)&unk_1010FF7F0);
      }
      else
      {
        sub_1000126EC(v43, v65, type metadata accessor for OwnedBeaconGroup);
        sub_10000F9B8(v63, v39, (uint64_t *)&unk_1010F9890);
        v48 = v64;
        v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
        if (v49(v39, 1, v11) == 1)
        {
          v50 = (void *)v4[7];
          if (v50)
          {
            v51 = v50;
            sub_100786FB4(v10);

            v48 = v64;
            v52 = 0;
          }
          else
          {
            v52 = 1;
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v10, v52, 1, v11);
          sub_100004048(v39, (uint64_t *)&unk_1010F9890);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v10, v39, v11);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v10, 0, 1, v11);
        }
        if (v49((uint64_t)v10, 1, v11) == 1)
        {
          sub_1000126B0(v65, type metadata accessor for OwnedBeaconGroup);
          sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F9890);
        }
        else
        {
          v53 = (uint64_t)v62;
          (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v62, v10, v11);
          v54 = v48;
          v55 = v65;
          sub_100366A0C(v53);
          *v42 = v56;
          v42[1] = v57 & 1;
          v58 = *(_QWORD *)(*(_QWORD *)(v55 + *(int *)(v69 + 40)) + 16);
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v11);
          sub_1000126B0(v55, type metadata accessor for OwnedBeaconGroup);
          *(_QWORD *)(v41 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons) = v58;
        }
      }
    }
    else
    {
      swift_retain();
      swift_retain();
    }
    type metadata accessor for Transaction(0);
    v47 = (_QWORD *)swift_allocObject(&unk_1010564E8, 40, 7);
    v47[2] = v40;
    v47[3] = v41;
    v47[4] = a1;
    swift_errorRetain(a1);
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("pairingFailureAnalyticsEvent", 28, 2, &unk_1010EEBC8, v47);
    swift_release();
    swift_release();
    swift_release();
    v4[24] = 0;
    swift_release();
  }
  else
  {
    v44 = Logger.logObject.getter(v38);
    v45 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "No analytics event!", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

  }
}

uint64_t sub_1000F753C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1000F7558, 0, 0);
}

uint64_t sub_1000F7558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  swift_errorRetain(v1);
  return swift_task_switch(sub_1000F75A0, v2, 0);
}

uint64_t sub_1000F75A0()
{
  uint64_t *v0;

  sub_100CDEFE8(v0[2], v0[3], v0[4]);
  swift_errorRelease(v0[4]);
  swift_release();
  return swift_task_switch(sub_1000F7614, 0, 0);
}

uint64_t sub_1000F7614()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[5] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[6] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1000F7680;
  return sub_100CD63AC(v0[2]);
}

uint64_t sub_1000F7680()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

unint64_t sub_1000F76D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t inited;
  NSString v5;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];
  _BYTE v10[8];
  _BYTE v11[224];

  v3 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v3, v11);
  *(_OWORD *)(inited + 16) = xmmword_100E26E10;
  *(_QWORD *)(inited + 32) = 0x6563637553736177;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  *(_QWORD *)(inited + 48) = 0;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = 0x6D6F44726F727265;
  *(_QWORD *)(inited + 72) = 0xEB000000006E6961;
  swift_getErrorValue(a2, v10, v9);
  Error.domain.getter(v9[1], v9[2]);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 80) = v5;
  *(_BYTE *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0x646F43726F727265;
  *(_QWORD *)(inited + 104) = 0xE900000000000065;
  swift_getErrorValue(a2, v8, v7);
  Error.code.getter(v7[1], v7[2]);
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 120) = 0;
  strcpy((char *)(inited + 128), "numberOfParts");
  *(_WORD *)(inited + 142) = -4864;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0x626D754E74726170;
  *(_QWORD *)(inited + 168) = 0xEA00000000007265;
  *(NSNumber *)(inited + 176) = UInt8._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 184) = 0;
  *(_QWORD *)(inited + 192) = 0x6961506563726F66;
  *(_QWORD *)(inited + 200) = 0xE900000000000072;
  *(NSNumber *)(inited + 208) = Bool._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 216) = 0;
  return sub_1006B9444(inited);
}

uint64_t sub_1000F78C8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_errorRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F78FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_1010EEBC4);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004C28;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_1000F7558, 0, 0);
}

uint64_t sub_1000F7964(unint64_t a1)
{
  if (a1 >= 5)
    return 5;
  else
    return (0x104030200uLL >> (8 * a1));
}

void sub_1000F7988(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _BYTE v20[16];

  v5 = *v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (void *)v2[2];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1010EA328, sub_100B5E37C);
    goto LABEL_5;
  }
  v12 = (void *)v2[7];
  if (v12)
  {
    v13 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v13);
    *(_QWORD *)&v20[-48] = v2;
    *(_QWORD *)&v20[-40] = v12;
    *(_QWORD *)&v20[-32] = a1;
    *(_QWORD *)&v20[-24] = a2;
    *(_QWORD *)&v20[-16] = v5;
    v14 = v12;
    static Transaction.named<A>(_:with:)("AirPodsLEPairingManager.startPairing", 36, 2, sub_1000F9D7C, &v20[-64], &type metadata for () + 1);

    return;
  }
  if (qword_1010EA328 != -1)
    goto LABEL_9;
LABEL_5:
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7E28);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing peripheral to start pairing!", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

}

_QWORD *sub_1000F7B84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _BYTE __dst[14];
  unsigned __int8 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v2 = _swiftEmptyArrayStorage;
  v4 = (unint64_t *)(v3 + 40);
  do
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = sub_10001A9A8(&qword_1010ED318);
    v8 = swift_allocObject(v7, 33, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v8 + 32) = v1 == 1;
    v9 = sub_10001A9A8(&qword_1010EEC18);
    v30 = v9;
    v31 = sub_1000193A4(&qword_1010EEC20, &qword_1010EEC18, (const char *)&protocol conformance descriptor for <A> [A]);
    v28 = v8;
    v10 = sub_10001AA44(&v28, v9);
    v11 = *v10;
    v12 = *(_QWORD *)(*v10 + 16);
    if (v12)
    {
      v13 = v11 + 32;
      if (v12 <= 0xE)
      {
        memset(__dst, 0, sizeof(__dst));
        v27 = v12;
        memcpy(__dst, (const void *)(v11 + 32), v12);
        v17 = *(_QWORD *)__dst;
        v18 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v27 << 48);
        sub_10001BBBC(v5, v6);
        swift_bridgeObjectRetain(v8);
      }
      else
      {
        v14 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
        sub_10001BBBC(v5, v6);
        swift_bridgeObjectRetain(v8);
        v15 = __DataStorage.init(bytes:length:)(v13, v12);
        v16 = v15;
        if (v12 >= 0x7FFFFFFF)
        {
          v19 = type metadata accessor for Data.RangeReference(0);
          v17 = swift_allocObject(v19, 32, 7);
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)(v17 + 24) = v12;
          v18 = v16 | 0x8000000000000000;
        }
        else
        {
          v17 = v12 << 32;
          v18 = v15 | 0x4000000000000000;
        }
      }
    }
    else
    {
      sub_10001BBBC(v5, v6);
      swift_bridgeObjectRetain(v8);
      v17 = 0;
      v18 = 0xC000000000000000;
    }
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v28);
    v28 = v17;
    v29 = v18;
    Data.append(_:)(v5, v6);
    v20 = v28;
    v21 = v29;
    sub_10001BBBC(v28, v29);
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1007C77D4(0, v2[2] + 1, 1, v2);
    v23 = v2[2];
    v22 = v2[3];
    if (v23 >= v22 >> 1)
      v2 = sub_1007C77D4((_QWORD *)(v22 > 1), v23 + 1, 1, v2);
    v4 += 2;
    v2[2] = v23 + 1;
    v24 = &v2[2 * v23];
    v24[4] = v20;
    v24[5] = v21;
    sub_10001BC14(v5, v6);
    sub_10001BC14(v20, v21);
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1000F7E70()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000F7E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010EEBDC);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1000F6C10, 0, 0);
}

uint64_t sub_1000F7EDC()
{
  uint64_t v0;
  id *v1;
  id v2;

  if (*(_BYTE *)(v0 + 57) == 1)
  {
    v1 = (id *)(v0 + 16);
    switch(*(_BYTE *)(v0 + 56))
    {
      case 0:
      case 7:
      case 0xA:
        v2 = *v1;
        goto LABEL_10;
      case 1:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
        return swift_deallocObject(v0, 58, 7);
      case 2:

        goto LABEL_9;
      case 3:

        return swift_deallocObject(v0, 58, 7);
      case 4:
      case 5:
      case 6:
        swift_release();
        return swift_deallocObject(v0, 58, 7);
      case 8:
        swift_release();
LABEL_9:
        v2 = *(id *)(v0 + 24);
LABEL_10:
        swift_errorRelease(v2);
        break;
      case 9:
        swift_bridgeObjectRelease();
        break;
      default:
        return swift_deallocObject(v0, 58, 7);
    }
  }
  return swift_deallocObject(v0, 58, 7);
}

void sub_1000F7F80(uint64_t a1)
{
  uint64_t v1;

  sub_1000F6924(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1000F7F88(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AirPodsLESendPairingDataCommandPayload(a2, a1);
  return a2;
}

uint64_t sub_1000F7FC4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F7FE8()
{
  uint64_t v0;

  swift_release();
  sub_1000F8084(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    *(_QWORD *)(v0 + 232),
    (void (*)(void))sub_10001BC14,
    (void (*)(uint64_t, uint64_t))sub_10001EF3C);
  swift_release();
  return swift_deallocObject(v0, 248, 7);
}

void sub_1000F8084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25,uint64_t a26,unint64_t a27,void (*a28)(void),void (*a29)(uint64_t, uint64_t))
{
  switch((a27 >> 59) & 6 | (a25 >> 63))
  {
    case 0uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      break;
    case 1uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a28)(a9, a10);
      break;
    case 2uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      ((void (*)(uint64_t, uint64_t))a28)(a23, a24);
      ((void (*)(uint64_t, unint64_t))a28)(a26, a27 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      a29(a23, a24);
      break;
    case 4uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      break;
    default:
      return;
  }
}

uint64_t sub_1000F8384(void (*a1)(__int128 *), uint64_t a2)
{
  uint64_t v2;

  return sub_1000F578C(a1, a2, *(_QWORD *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 240));
}

unint64_t sub_1000F8394()
{
  unint64_t result;

  result = qword_1010EEC10;
  if (!qword_1010EEC10)
  {
    result = swift_getWitnessTable(&unk_100E57758, &type metadata for AirPodsLEPairingCommand);
    atomic_store(result, (unint64_t *)&qword_1010EEC10);
  }
  return result;
}

id sub_1000F83D8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100787394(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000F83F0()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F841C(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;

  return sub_1000F4B9C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

unint64_t sub_1000F8428()
{
  unint64_t result;

  result = qword_1010EEC40;
  if (!qword_1010EEC40)
  {
    result = swift_getWitnessTable(&unk_100E27068, &type metadata for AirPodsLEPairingManager.AirPodsLEPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_1010EEC40);
  }
  return result;
}

unint64_t sub_1000F846C()
{
  unint64_t result;

  result = qword_1010EEC48;
  if (!qword_1010EEC48)
  {
    result = swift_getWitnessTable(&unk_100E57780, &type metadata for AirPodsLEPairingCommand);
    atomic_store(result, (unint64_t *)&qword_1010EEC48);
  }
  return result;
}

uint64_t sub_1000F84B4(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t, uint64_t))
{
  sub_1000F8084(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    a2,
    a3);
  return a1;
}

uint64_t sub_1000F8530(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F43E0(a1, v1);
}

uint64_t sub_1000F8538()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F855C(uint64_t a1)
{
  uint64_t v1;

  sub_1000F4458(a1, *(NSObject **)(v1 + 16));
}

uint64_t type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EEF30;
  if (!qword_1010EEF30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsLEPairingManager.BeaconCreationResult);
  return result;
}

uint64_t sub_1000F85A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_10001BC14(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_10001BC14(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  v5 = *(_QWORD *)(v0 + 80);
  if (v5 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 72), v5);
  v6 = *(_QWORD *)(v0 + 96);
  if (v6 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 88), v6);
  v7 = (v3 + 112) & ~v3;
  v8 = (v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v7, v1);
  sub_10001BC14(*(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v3 | 7);
}

uint64_t sub_1000F8684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + 24;
  v8 = *(_QWORD *)(v1 + 104);
  v9 = v1 + v5;
  v10 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010EEC64);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004C28;
  return sub_1000F3724(a1, v6, v7, v8, v9, v11, v12);
}

double sub_1000F8744(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_100E22B30;
  *(_OWORD *)(a1 + 16) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 32) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 48) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 64) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 80) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 96) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 112) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 128) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 144) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 160) = xmmword_100E22B30;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 261888;
  return result;
}

uint64_t sub_1000F8778(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v2 = *(_QWORD *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(unsigned __int8 *)(result + 192) | 0x8000000000000000;
  v12 = *(_QWORD *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 24) = v1;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 56) = v3;
  *(_QWORD *)(result + 72) = v4;
  *(_QWORD *)(result + 88) = v5;
  *(_QWORD *)(result + 104) = v6;
  *(_QWORD *)(result + 120) = v7;
  *(_QWORD *)(result + 136) = v8;
  *(_QWORD *)(result + 152) = v9;
  *(_QWORD *)(result + 168) = v10;
  *(_QWORD *)(result + 192) = v11;
  *(_QWORD *)(result + 208) = v12;
  return result;
}

uint64_t sub_1000F881C(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (*(_QWORD *)(a1 + 56) >> 54) & 0xC0 | (*(_QWORD *)(a1 + 72) >> 52) & 0x300 | (*(_QWORD *)(a1 + 88) >> 50) & 0xC00 | *(_WORD *)(a1 + 110) & 0x3000 | (*(_QWORD *)(a1 + 120) >> 46) & 0xC000 | (*(_QWORD *)(a1 + 136) >> 44) & 0x30000 | (*(_QWORD *)(a1 + 152) >> 42) & 0xC0000 | (*(_QWORD *)(a1 + 168) >> 40) & 0x300000 | (*(_DWORD *)(a1 + 192) >> 8 << 22);
  if (v1 > 0x80000000)
    return -v1;
  else
    return 0;
}

uint64_t sub_1000F88D8(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = *(_OWORD *)(a1 + 304);
  v9 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 208);
  sub_1000F8968(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((unint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((unint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((unint64_t *)&v8 + 1),
    v9,
    *((unint64_t *)&v9 + 1),
    *(_QWORD *)(a1 + 336),
    *(_QWORD *)(a1 + 344));
  return a1;
}

uint64_t sub_1000F8968(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,unint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40,uint64_t a41,unint64_t a42,uint64_t a43,unint64_t a44)
{
  if (a22)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001EF3C(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a14, a15);
    sub_10001BC14(a16, a17);
    sub_10001BC14(a18, a19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a25, a26);
    sub_10001BC14(a27, a28);
    sub_10001BC14(a29, a30);
    sub_10001BC14(a31, a32);
    sub_10001BC14(a33, a34);
    sub_10001EF3C(a35, a36);
    swift_bridgeObjectRelease();
    sub_10001EF3C(a39, a40);
    sub_10001BC14(a41, a42);
    return sub_10001BC14(a43, a44);
  }
  return result;
}

uint64_t sub_1000F8B50(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EEB70(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000F8B6C(uint64_t a1)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  sub_1000F8BE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((unint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264));
  return a1;
}

uint64_t sub_1000F8BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unint64_t a34)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a7, a8);
    sub_10001BC14(a9, a10);
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    sub_10001BC14(a15, a16);
    sub_10001BC14(a17, a18);
    sub_10001BC14(a19, a20);
    sub_10001BC14(a21, a22);
    sub_10001BC14(a23, a24);
    sub_10001EF3C(a25, a26);
    sub_10001BC14(a27, a28);
    sub_10001BC14(a29, a30);
    swift_bridgeObjectRelease();
    return sub_10001EF3C(a33, a34);
  }
  return result;
}

uint64_t sub_1000F8D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F8DF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  return sub_1000EECAC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_1000F8E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F8EB4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  return sub_1000EF3A4(v0[2], v0[3], v0[4], (uint64_t)v0 + ((v1 + 40) & ~v1));
}

void sub_1000F8EEC(uint64_t a1)
{
  uint64_t v1;

  sub_1000EE920(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1000F8EF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001A9A8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000F8F38()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000F8F5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F8F6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F8F80()
{
  uint64_t v0;

  sub_1000F8084(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    (void (*)(void))sub_10001BC14,
    (void (*)(uint64_t, uint64_t))sub_10001EF3C);
  return swift_deallocObject(v0, 232, 7);
}

uint64_t sub_1000F8FFC()
{
  uint64_t v0;

  return sub_1000EE5DC(v0 + 16);
}

uint64_t sub_1000F9014()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9024()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9034(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 208) >> 59) & 6 | (*(_QWORD *)(a1 + 192) >> 63);
  if (v1 <= 4)
    return v1;
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_1000F9064()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9074()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1000F9088()
{
  uint64_t v0;

  sub_1000EE170(v0 + 16);
}

uint64_t sub_1000F90A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F90B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F90C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F90E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F90F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9104()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9118()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9128()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9138()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9148()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9158()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1000F916C()
{
  uint64_t v0;

  sub_1000EE52C(v0 + 16);
}

uint64_t sub_1000F9178()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9188()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9198()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F91A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F91BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F91CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F91DC()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F9200()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9210()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9228()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9238()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9248()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9258()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9268()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F9278()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9288()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1000F9298()
{
  unint64_t result;

  result = qword_1010EEC98;
  if (!qword_1010EEC98)
  {
    result = swift_getWitnessTable(&unk_100E68828, &type metadata for AirPodsPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EEC98);
  }
  return result;
}

double sub_1000F92DC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  result = -0.0;
  *(_OWORD *)(a1 + 192) = xmmword_100E26E20;
  *(_QWORD *)(a1 + 208) = 0x2000000000000000;
  return result;
}

uint64_t sub_1000F9334()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9344()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9358()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9368()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F937C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F938C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F93A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F93B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F93C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F93D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F93E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F93F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F940C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F941C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1000F9430()
{
  uint64_t v0;

  sub_1000EDBD0(v0 + 16);
}

uint64_t sub_1000F943C()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
}

uint64_t sub_1000F9444()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9454()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9464()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9474()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1000F9488()
{
  uint64_t v0;

  sub_1000EDC80(v0 + 16);
}

uint64_t sub_1000F9494()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F94A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F94B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F94C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F94D8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 208);
}

uint64_t sub_1000F94E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F94F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9500()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F9524()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9534()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9544()
{
  uint64_t v0;

  return sub_10004F894(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000F955C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F956C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_1000F957C(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v13 = a1[11];
  v14 = a1[10];
  v15 = a1[13];
  v16 = a1[12];
  v17 = a1[15];
  v18 = a1[14];
  v19 = a1[17];
  v20 = a1[16];
  v21 = a1[19];
  v22 = a1[18];
  v23 = a1[21];
  v24 = a1[20];
  v25 = a1[23];
  v26 = a1[22];
  v27 = a1[26];
  v28 = a1[25];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v8);
  a2(v7, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  a2(v26, v25);
  a2(v28, v27);
  return a1;
}

uint64_t sub_1000F96B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F96C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F96D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F96F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9708()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9718()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9728()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F973C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F974C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9760()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9770()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9784()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F9794()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F97A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F97B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F97C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000F97D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1000F97E4()
{
  unint64_t result;

  result = qword_1010EECA0;
  if (!qword_1010EECA0)
  {
    result = swift_getWitnessTable(&unk_100E68878, &type metadata for AirPodsPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EECA0);
  }
  return result;
}

unint64_t sub_1000F9828()
{
  unint64_t result;

  result = qword_1010EECA8;
  if (!qword_1010EECA8)
  {
    result = swift_getWitnessTable(&unk_100E46960, &type metadata for AirPodsLESendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EECA8);
  }
  return result;
}

unint64_t sub_1000F9870()
{
  unint64_t result;

  result = qword_1010EECB0;
  if (!qword_1010EECB0)
  {
    result = swift_getWitnessTable(&unk_100E26CA8, &type metadata for AirPodsLEFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EECB0);
  }
  return result;
}

uint64_t sub_1000F98B4()
{
  _QWORD *v0;
  unint64_t v1;

  sub_10001BC14(v0[2], v0[3]);
  sub_10001BC14(v0[4], v0[5]);
  sub_10001BC14(v0[6], v0[7]);
  sub_10001BC14(v0[8], v0[9]);
  sub_10001BC14(v0[10], v0[11]);
  sub_10001BC14(v0[12], v0[13]);
  sub_10001BC14(v0[14], v0[15]);
  sub_10001BC14(v0[16], v0[17]);
  sub_10001BC14(v0[18], v0[19]);
  sub_10001BC14(v0[20], v0[21]);
  sub_10001BC14(v0[22], v0[23]);
  v1 = v0[25];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[24], v1);
  return swift_deallocObject(v0, 208, 7);
}

uint64_t *sub_1000F9940(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v12 = a1[11];
  v13 = a1[13];
  v14 = a1[12];
  v15 = a1[15];
  v16 = a1[14];
  v17 = a1[17];
  v18 = a1[16];
  v19 = a1[19];
  v22 = a1[20];
  v20 = a1[18];
  v21 = a1[21];
  v24 = a1[22];
  v23 = a1[23];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BBBC(v20, v19);
  sub_10001BBBC(v22, v21);
  sub_10001BD08(v24, v23);
  return a1;
}

unint64_t sub_1000F9A68()
{
  unint64_t result;

  result = qword_1010EECB8;
  if (!qword_1010EECB8)
  {
    result = swift_getWitnessTable(&unk_100E2FE28, &type metadata for AirPodsLESendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EECB8);
  }
  return result;
}

uint64_t sub_1000F9AB0()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  sub_10001BC14(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
  return swift_deallocObject(v0, 232, 7);
}

uint64_t sub_1000F9B34(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 192) &= ~0x8000000000000000;
  *(_QWORD *)(result + 208) = v1;
  return result;
}

uint64_t sub_1000F9B50()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000F9B9C()
{
  uint64_t v0;
  id *v1;
  id v2;

  v1 = (id *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 57, 7);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 57, 7);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 57, 7);
    case 8:
      swift_release();
LABEL_8:
      v2 = *(id *)(v0 + 24);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 57, 7);
  }
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1000F9C30(void (*a1)(_BYTE *))
{
  uint64_t v1;
  _BYTE v4[224];

  sub_100059280((_QWORD *)(v1 + 16), (uint64_t)v4);
  v4[216] = 1;
  a1(v4);
  return sub_100004048((uint64_t)v4, &qword_1010EEC00);
}

uint64_t sub_1000F9C90(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v2 = *(_QWORD *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(unsigned __int8 *)(result + 192) | 0x8000000000000000;
  *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 24) = v1;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 56) = v3;
  *(_QWORD *)(result + 72) = v4;
  *(_QWORD *)(result + 88) = v5;
  *(_QWORD *)(result + 104) = v6;
  *(_QWORD *)(result + 120) = v7;
  *(_QWORD *)(result + 136) = v8;
  *(_QWORD *)(result + 152) = v9;
  *(_QWORD *)(result + 168) = v10;
  *(_QWORD *)(result + 192) = v12;
  *(_QWORD *)(result + 208) = v11;
  return result;
}

id sub_1000F9D30@<X0>(char **a1@<X8>)
{
  uint64_t v1;

  return sub_100E02AFC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000F9D48()
{
  uint64_t v0;

  return sub_1007C62EC(v0);
}

uint64_t sub_1000F9D60(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000E22A4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000F9D7C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E1694(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000F9D9C()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000F9DA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000E1DA8(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000F9DB4(uint64_t a1)
{
  return sub_1000F9FD0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_1000E1EE0);
}

double sub_1000F9DC0(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = -0.0;
  *(_OWORD *)(a1 + 192) = xmmword_100E26E20;
  *(_QWORD *)(a1 + 208) = 0x2000000000000000;
  return result;
}

uint64_t sub_1000F9DF4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_1007C614C(v1, a1);
}

uint64_t sub_1000F9E0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1000F4900(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_1000F9E38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F9EAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  return sub_1000E58B8(a1, v2 + ((v5 + 24) & ~v5), a2);
}

uint64_t sub_1000F9F04()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000F9F10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1000E551C(a1, *(_QWORD *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_1000F9F40()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 3));
  swift_release(*((_QWORD *)v0 + 4));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F9FC4(uint64_t a1)
{
  return sub_1000F9FD0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_1000E2E80);
}

uint64_t sub_1000F9FD0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, char *))
{
  char *v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  return a2(a1, *((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), &v2[(v4 + 40) & ~v4]);
}

uint64_t sub_1000FA024@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000E0C28(v1, a1);
}

uint64_t sub_1000FA03C()
{
  uint64_t v0;

  return sub_1000DE4E4(v0);
}

uint64_t sub_1000FA044()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FA054(uint64_t a1)
{
  uint64_t v1;

  return sub_1000DE5A0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1000FA08C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_release();
  v5 = *(_QWORD *)(v0 + 32);
  if (v5 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 24), v5);
  v6 = (v3 + 42) & ~v3;
  v7 = (v3 + ((v4 + 7 + v6) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v6, v1);
  swift_release();
  v8(v0 + v7, v1);
  return swift_deallocObject(v0, ((v4 + 7 + v7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1000FA154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 42) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + 7 + v3) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000DE8D0(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_BYTE *)(v0 + 41), v0 + v3, *(_QWORD *)(v0 + v4), v0 + ((v2 + v4 + 8) & ~v2));
}

uint64_t sub_1000FA1D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000FA1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1010EEE2C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_1000DF918(v2, v3);
}

uint64_t sub_1000FA248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000FA2D8(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_1000DFAB8(a1, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_1000FA33C@<X0>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000E0114(a1, a2);
}

uint64_t sub_1000FA344()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;
  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 3));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 5));
  v9 = *(void (**)(char *, uint64_t))(v2 + 8);
  v9(&v0[v4], v1);
  v9(&v0[v7], v1);
  return swift_deallocObject(v0, v8, v6);
}

void sub_1000FA3F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  sub_1000E06EC(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)v1 + ((v4 + 48) & ~v4), (uint64_t)v1 + ((*(_QWORD *)(v3 + 64) + v4 + ((v4 + 48) & ~v4)) & ~v4));
}

uint64_t sub_1000FA448(uint64_t a1)
{
  uint64_t v1;

  return sub_100789688(a1, *(_QWORD **)(v1 + 16)) & 1;
}

uint64_t sub_1000FA464(uint64_t a1)
{
  uint64_t v1;

  return sub_100C8EC20(a1, *(_QWORD **)(v1 + 16)) & 1;
}

uint64_t sub_1000FA480()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1000FA48C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100C8ED3C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_1000FA494(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100E02E70(*(_QWORD *)(v1 + 16), *(char **)(v1 + 24), a1);
}

unint64_t sub_1000FA4AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v71;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v43 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v43 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) != 1)
    {
      v44 = *(_QWORD *)a2;
      v45 = *(_QWORD *)(a2 + 8);
      sub_10001BBBC(*(_QWORD *)a2, v45);
      *(_QWORD *)a1 = v44;
      *(_QWORD *)(a1 + 8) = v45;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v46 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      v47 = v46[6];
      v48 = a1 + v47;
      v49 = a2 + v47;
      v50 = type metadata accessor for UUID(0);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
      v51(v48, v49, v50);
      v52 = v46[7];
      v53 = a1 + v52;
      v54 = a2 + v52;
      v55 = type metadata accessor for MACAddress(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      *(_BYTE *)(a1 + v46[8]) = *(_BYTE *)(a2 + v46[8]);
      v56 = v46[9];
      v57 = (_QWORD *)(a1 + v56);
      v58 = (_QWORD *)(a2 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      v60 = v46[10];
      v61 = *(_QWORD *)(a2 + v60);
      *(_QWORD *)(a1 + v60) = v61;
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v61);
      v62 = *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
      v63 = (uint64_t *)(a1 + v62);
      v64 = a2 + v62;
      v65 = *(_QWORD *)(a2 + v62);
      v66 = *(_QWORD *)(v64 + 8);
      sub_10001BBBC(v65, v66);
      *v63 = v65;
      v63[1] = v66;
      v67 = type metadata accessor for OwnedBeaconRecord(0);
      v51((uint64_t)v63 + *(int *)(v67 + 20), v64 + *(int *)(v67 + 20), v50);
      v68 = v64 + *(int *)(v67 + 24);
      v71 = type metadata accessor for StableIdentifier(0);
      v69 = (char *)&loc_1000FA7C8 + 4 * byte_100E26E63[swift_getEnumCaseMultiPayload(v68, v71)];
      __asm { BR              X10 }
    }
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for StandaloneBeacon(0);
    v9 = v8[5];
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = type metadata accessor for MACAddress(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13(a1 + v8[6], a2 + v8[6], v12);
    v14 = v8[7];
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v8[8];
    v19 = a1 + v18;
    v20 = a2 + v18;
    v21 = type metadata accessor for Date(0);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
    v23 = swift_bridgeObjectRetain(v17);
    v22(v19, v20, v21, v23);
    v24 = v8[9];
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)(a2 + v24);
    v27 = *v26;
    v28 = v26[1];
    sub_10001BBBC(*v26, v28);
    *v25 = v27;
    v25[1] = v28;
    v29 = v8[10];
    v30 = (uint64_t *)(a1 + v29);
    v31 = (_QWORD *)(a2 + v29);
    v32 = *(_QWORD *)(a2 + v29);
    v33 = *(_QWORD *)(a2 + v29 + 8);
    sub_10001BBBC(v32, v33);
    *v30 = v32;
    v30[1] = v33;
    v34 = v31[2];
    v35 = v31[3];
    sub_10001BBBC(v34, v35);
    v30[2] = v34;
    v30[3] = v35;
    v36 = v31[4];
    v37 = v31[5];
    sub_10001BBBC(v36, v37);
    v30[4] = v36;
    v30[5] = v37;
    v38 = v8[11];
    v39 = (uint64_t *)(a1 + v38);
    v40 = (uint64_t *)(a2 + v38);
    v41 = *v40;
    v42 = v40[1];
    sub_10001BBBC(*v40, v42);
    *v39 = v41;
    v39[1] = v42;
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  return a1;
}

uint64_t sub_1000FAB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v3 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = (int *)type metadata accessor for StandaloneBeacon(0);
    v5 = a1 + v4[5];
    v6 = type metadata accessor for MACAddress(0);
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v5, v6);
    v7(a1 + v4[6], v6);
    swift_bridgeObjectRelease();
    v8 = a1 + v4[8];
    v9 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    sub_10001BC14(*(_QWORD *)(a1 + v4[9]), *(_QWORD *)(a1 + v4[9] + 8));
    v10 = a1 + v4[10];
    sub_10001BC14(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
    sub_10001BC14(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
    sub_10001BC14(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40));
    return sub_10001BC14(*(_QWORD *)(a1 + v4[11]), *(_QWORD *)(a1 + v4[11] + 8));
  }
  else
  {
    sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v12 = type metadata accessor for OwnedBeaconGroup(0);
    v13 = a1 + *(int *)(v12 + 24);
    v14 = type metadata accessor for UUID(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v16(v13, v14);
    v17 = a1 + *(int *)(v12 + 28);
    v18 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = a1 + *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
    sub_10001BC14(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
    v20 = (int *)type metadata accessor for OwnedBeaconRecord(0);
    v16(v19 + v20[5], v14);
    v21 = v19 + v20[6];
    v22 = type metadata accessor for StableIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v21, v22))
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v16(v21, v14);
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v16(v21, v14);
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    v23 = v19 + v20[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v23, 1, v14))
      v16(v23, v14);
    v24 = v19 + v20[8];
    v25 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
    sub_10001BC14(*(_QWORD *)(v19 + v20[9]), *(_QWORD *)(v19 + v20[9] + 8));
    v26 = (uint64_t *)(v19 + v20[10]);
    v27 = v26[1];
    if (v27 >> 60 != 15)
      sub_10001BC14(*v26, v27);
    v28 = (uint64_t *)(v19 + v20[11]);
    v29 = v28[1];
    if (v29 >> 60 != 15)
      sub_10001BC14(*v28, v29);
    sub_10001BC14(*(_QWORD *)(v19 + v20[12]), *(_QWORD *)(v19 + v20[12] + 8));
    sub_10001BC14(*(_QWORD *)(v19 + v20[13]), *(_QWORD *)(v19 + v20[13] + 8));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000FAEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;

  if (swift_getEnumCaseMultiPayload(a2, a3) != 1)
  {
    v42 = *(_QWORD *)a2;
    v43 = *(_QWORD *)(a2 + 8);
    sub_10001BBBC(*(_QWORD *)a2, v43);
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v44 = (int *)type metadata accessor for OwnedBeaconGroup(0);
    v45 = v44[6];
    v46 = a1 + v45;
    v47 = a2 + v45;
    v48 = type metadata accessor for UUID(0);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
    v49(v46, v47, v48);
    v50 = v44[7];
    v51 = a1 + v50;
    v52 = a2 + v50;
    v53 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
    *(_BYTE *)(a1 + v44[8]) = *(_BYTE *)(a2 + v44[8]);
    v54 = v44[9];
    v55 = (_QWORD *)(a1 + v54);
    v56 = (_QWORD *)(a2 + v54);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = v44[10];
    v59 = *(_QWORD *)(a2 + v58);
    *(_QWORD *)(a1 + v58) = v59;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v59);
    v60 = *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
    v61 = (uint64_t *)(a1 + v60);
    v62 = a2 + v60;
    v63 = *(_QWORD *)(a2 + v60);
    v64 = *(_QWORD *)(v62 + 8);
    sub_10001BBBC(v63, v64);
    *v61 = v63;
    v61[1] = v64;
    v65 = type metadata accessor for OwnedBeaconRecord(0);
    v49((uint64_t)v61 + *(int *)(v65 + 20), v62 + *(int *)(v65 + 20), v48);
    v66 = v62 + *(int *)(v65 + 24);
    v67 = type metadata accessor for StableIdentifier(0);
    v68 = (char *)&loc_1000FB1EC + 4 * byte_100E26E6D[swift_getEnumCaseMultiPayload(v66, v67)];
    __asm { BR              X10 }
  }
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for StandaloneBeacon(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for MACAddress(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v7[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Date(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
  v22 = swift_bridgeObjectRetain(v16);
  v21(v18, v19, v20, v22);
  v23 = v7[9];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  v27 = v25[1];
  sub_10001BBBC(*v25, v27);
  *v24 = v26;
  v24[1] = v27;
  v28 = v7[10];
  v29 = (uint64_t *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  v31 = *(_QWORD *)(a2 + v28);
  v32 = *(_QWORD *)(a2 + v28 + 8);
  sub_10001BBBC(v31, v32);
  *v29 = v31;
  v29[1] = v32;
  v33 = v30[2];
  v34 = v30[3];
  sub_10001BBBC(v33, v34);
  v29[2] = v33;
  v29[3] = v34;
  v35 = v30[4];
  v36 = v30[5];
  sub_10001BBBC(v35, v36);
  v29[4] = v35;
  v29[5] = v36;
  v37 = v7[11];
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v40 = *v39;
  v41 = v39[1];
  sub_10001BBBC(*v39, v41);
  *v38 = v40;
  v38[1] = v41;
  swift_storeEnumTagMultiPayload(a1, a3, 1);
  return a1;
}

uint64_t sub_1000FB564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;

  if (a1 != a2)
  {
    sub_1000126B0(a1, type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
    if (swift_getEnumCaseMultiPayload(a2, a3) != 1)
    {
      v42 = *(_QWORD *)a2;
      v43 = *(_QWORD *)(a2 + 8);
      sub_10001BBBC(*(_QWORD *)a2, v43);
      *(_QWORD *)a1 = v42;
      *(_QWORD *)(a1 + 8) = v43;
      v44 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v44;
      v45 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      v46 = v45[6];
      v47 = a1 + v46;
      v48 = a2 + v46;
      v49 = type metadata accessor for UUID(0);
      v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      v50(v47, v48, v49);
      v51 = v45[7];
      v52 = a1 + v51;
      v53 = a2 + v51;
      v54 = type metadata accessor for MACAddress(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
      *(_BYTE *)(a1 + v45[8]) = *(_BYTE *)(a2 + v45[8]);
      v55 = v45[9];
      v56 = (_QWORD *)(a1 + v55);
      v57 = (_QWORD *)(a2 + v55);
      *v56 = *v57;
      v58 = v57[1];
      v56[1] = v58;
      v59 = v45[10];
      v60 = *(_QWORD *)(a2 + v59);
      *(_QWORD *)(a1 + v59) = v60;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v60);
      v61 = *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
      v62 = (uint64_t *)(a1 + v61);
      v63 = a2 + v61;
      v64 = *(_QWORD *)(a2 + v61);
      v65 = *(_QWORD *)(v63 + 8);
      sub_10001BBBC(v64, v65);
      *v62 = v64;
      v62[1] = v65;
      v66 = type metadata accessor for OwnedBeaconRecord(0);
      v50((uint64_t)v62 + *(int *)(v66 + 20), v63 + *(int *)(v66 + 20), v49);
      v67 = v63 + *(int *)(v66 + 24);
      v68 = type metadata accessor for StableIdentifier(0);
      v69 = (char *)&loc_1000FB880 + 4 * byte_100E26E72[swift_getEnumCaseMultiPayload(v67, v68)];
      __asm { BR              X10 }
    }
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = (int *)type metadata accessor for StandaloneBeacon(0);
    v8 = v7[5];
    v9 = a1 + v8;
    v10 = a2 + v8;
    v11 = type metadata accessor for MACAddress(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v12(a1 + v7[6], a2 + v7[6], v11);
    v13 = v7[7];
    v14 = (_QWORD *)(a1 + v13);
    v15 = (_QWORD *)(a2 + v13);
    *v14 = *v15;
    v16 = v15[1];
    v14[1] = v16;
    v17 = v7[8];
    v18 = a1 + v17;
    v19 = a2 + v17;
    v20 = type metadata accessor for Date(0);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
    v22 = swift_bridgeObjectRetain(v16);
    v21(v18, v19, v20, v22);
    v23 = v7[9];
    v24 = (uint64_t *)(a1 + v23);
    v25 = (uint64_t *)(a2 + v23);
    v26 = *v25;
    v27 = v25[1];
    sub_10001BBBC(*v25, v27);
    *v24 = v26;
    v24[1] = v27;
    v28 = v7[10];
    v29 = (uint64_t *)(a1 + v28);
    v30 = (_QWORD *)(a2 + v28);
    v31 = *(_QWORD *)(a2 + v28);
    v32 = *(_QWORD *)(a2 + v28 + 8);
    sub_10001BBBC(v31, v32);
    *v29 = v31;
    v29[1] = v32;
    v33 = v30[2];
    v34 = v30[3];
    sub_10001BBBC(v33, v34);
    v29[2] = v33;
    v29[3] = v34;
    v35 = v30[4];
    v36 = v30[5];
    sub_10001BBBC(v35, v36);
    v29[4] = v35;
    v29[5] = v36;
    v37 = v7[11];
    v38 = (uint64_t *)(a1 + v37);
    v39 = (uint64_t *)(a2 + v37);
    v40 = *v39;
    v41 = v39[1];
    sub_10001BBBC(*v39, v41);
    *v38 = v40;
    v38[1] = v41;
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  return a1;
}

uint64_t sub_1000FBC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  int EnumCaseMultiPayload;
  int *v43;
  int *v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;

  if (a1 != a2)
  {
    sub_1000126B0(a1, type metadata accessor for AirPodsLEPairingManager.BeaconCreationResult);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)type metadata accessor for StandaloneBeacon(0);
      v8 = v7[5];
      v9 = a1 + v8;
      v10 = a2 + v8;
      v11 = type metadata accessor for MACAddress(0);
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(v9, v10, v11);
      v12(a1 + v7[6], a2 + v7[6], v11);
      *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
      v13 = v7[8];
      v14 = a1 + v13;
      v15 = a2 + v13;
      v16 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
      v17 = v7[10];
      v18 = (_OWORD *)(a1 + v17);
      v19 = (_OWORD *)(a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      v18[2] = v19[2];
      *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
      v21 = a1;
      v22 = a3;
      v23 = 1;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v24 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      v25 = v24[6];
      v26 = a1 + v25;
      v27 = a2 + v25;
      v28 = type metadata accessor for UUID(0);
      v54 = *(_QWORD *)(v28 - 8);
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
      v29(v26, v27, v28);
      v30 = v24[7];
      v31 = a1 + v30;
      v32 = a2 + v30;
      v33 = type metadata accessor for MACAddress(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      *(_BYTE *)(a1 + v24[8]) = *(_BYTE *)(a2 + v24[8]);
      *(_OWORD *)(a1 + v24[9]) = *(_OWORD *)(a2 + v24[9]);
      *(_QWORD *)(a1 + v24[10]) = *(_QWORD *)(a2 + v24[10]);
      v34 = *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
      v35 = a1 + v34;
      v36 = a2 + v34;
      *(_OWORD *)(a1 + v34) = *(_OWORD *)(a2 + v34);
      v37 = (int *)type metadata accessor for OwnedBeaconRecord(0);
      v29(v35 + v37[5], v36 + v37[5], v28);
      v38 = v37[6];
      v39 = (_BYTE *)(v35 + v38);
      v40 = (_BYTE *)(v36 + v38);
      v41 = type metadata accessor for StableIdentifier(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v40, v41);
      if (EnumCaseMultiPayload == 3)
      {
        v29((uint64_t)v39, (uint64_t)v40, v28);
        v44 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        *(_OWORD *)&v39[v44[12]] = *(_OWORD *)&v40[v44[12]];
        *(_OWORD *)&v39[v44[16]] = *(_OWORD *)&v40[v44[16]];
        *(_OWORD *)&v39[v44[20]] = *(_OWORD *)&v40[v44[20]];
        v39[v44[24]] = v40[v44[24]];
        swift_storeEnumTagMultiPayload(v39, v41, 3);
      }
      else if (EnumCaseMultiPayload == 2)
      {
        v29((uint64_t)v39, (uint64_t)v40, v28);
        v43 = (int *)sub_10001A9A8(&qword_101106F40);
        *(_OWORD *)&v39[v43[12]] = *(_OWORD *)&v40[v43[12]];
        *(_OWORD *)&v39[v43[16]] = *(_OWORD *)&v40[v43[16]];
        *(_OWORD *)&v39[v43[20]] = *(_OWORD *)&v40[v43[20]];
        *(_WORD *)&v39[v43[24]] = *(_WORD *)&v40[v43[24]];
        *(_OWORD *)&v39[v43[28]] = *(_OWORD *)&v40[v43[28]];
        swift_storeEnumTagMultiPayload(v39, v41, 2);
      }
      else
      {
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      v45 = v37[7];
      v46 = (void *)(v35 + v45);
      v47 = (const void *)(v36 + v45);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v36 + v45, 1, v28))
      {
        v48 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v29((uint64_t)v46, (uint64_t)v47, v28);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v46, 0, 1, v28);
      }
      v49 = v37[8];
      v50 = v35 + v49;
      v51 = v36 + v49;
      v52 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
      *(_OWORD *)(v35 + v37[9]) = *(_OWORD *)(v36 + v37[9]);
      *(_OWORD *)(v35 + v37[10]) = *(_OWORD *)(v36 + v37[10]);
      *(_OWORD *)(v35 + v37[11]) = *(_OWORD *)(v36 + v37[11]);
      *(_OWORD *)(v35 + v37[12]) = *(_OWORD *)(v36 + v37[12]);
      *(_OWORD *)(v35 + v37[13]) = *(_OWORD *)(v36 + v37[13]);
      *(_OWORD *)(v35 + v37[14]) = *(_OWORD *)(v36 + v37[14]);
      *(_OWORD *)(v35 + v37[15]) = *(_OWORD *)(v36 + v37[15]);
      *(_QWORD *)(v35 + v37[16]) = *(_QWORD *)(v36 + v37[16]);
      *(_QWORD *)(v35 + v37[17]) = *(_QWORD *)(v36 + v37[17]);
      *(_BYTE *)(v35 + v37[18]) = *(_BYTE *)(v36 + v37[18]);
      *(_BYTE *)(v35 + v37[19]) = *(_BYTE *)(v36 + v37[19]);
      *(_BYTE *)(v35 + v37[20]) = *(_BYTE *)(v36 + v37[20]);
      v21 = a1;
      v22 = a3;
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v22, v23);
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingManager.AirPodsLEPairingManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000FC150 + 4 * byte_100E26E7C[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000FC184 + 4 * byte_100E26E77[v4]))();
}

uint64_t sub_1000FC184(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FC18C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FC194);
  return result;
}

uint64_t sub_1000FC1A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FC1A8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000FC1AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FC1B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingManager.AirPodsLEPairingManagerError()
{
  return &type metadata for AirPodsLEPairingManager.AirPodsLEPairingManagerError;
}

unint64_t sub_1000FC1D4()
{
  unint64_t result;

  result = qword_1010EEF68;
  if (!qword_1010EEF68)
  {
    result = swift_getWitnessTable(&unk_100E27018, &type metadata for AirPodsLEPairingManager.AirPodsLEPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_1010EEF68);
  }
  return result;
}

unint64_t sub_1000FC218()
{
  unint64_t result;

  result = qword_1010EEF70;
  if (!qword_1010EEF70)
  {
    result = swift_getWitnessTable(&unk_100E26FA0, &type metadata for AirPodsLEPairingManager.AirPodsLEPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_1010EEF70);
  }
  return result;
}

uint64_t sub_1000FC260(uint64_t a1)
{
  return sub_1000FA448(a1) & 1;
}

void sub_1000FC3EC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_1000FC434(unsigned __int8 a1, uint64_t a2)
{
  unsigned __int8 v2;

  if ((a2 & 0xFF000000000000) != 0)
    v2 = a1;
  else
    v2 = 0;
  return v2 | (((a2 & 0xFF000000000000) == 0) << 8);
}

void sub_1000FC534(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;

  v2 = sub_10001D620(a1);
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  if (v2 != 1 << *(_BYTE *)(a1 + 32))
  {
    v5 = sub_1000FE2F0(v2, v3, 0, a1);
    swift_bridgeObjectRetain(v5);
  }
}

uint64_t sub_1000FC598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  result = sub_1003B2D14(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 1;
  }
  else
  {
    sub_100283074(result, v5, a1, a2);
    v7 = type metadata accessor for UUID(0);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v9 = a2;
    v10 = 0;
  }
  return v8(v9, v10, 1, v7);
}

uint64_t sub_1000FC638(uint64_t a1)
{
  return sub_1000FC7B0(a1, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_10028311C);
}

uint64_t sub_1000FC644@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1010EEFD0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_10001D6A8(a1);
  if ((v10 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v9)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v11 = (uint64_t)v7 + *(int *)(v4 + 48);
  sub_1000FDFE0(v7, v11, result, v9, 0, a1);
  v12 = *v7;
  v13 = v7[1];
  *a2 = *v7;
  a2[1] = v13;
  v14 = (char *)a2 + *(int *)(v4 + 48);
  v15 = type metadata accessor for MACAddress(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v11, v15);
  sub_10001BBBC(v12, v13);
  sub_1000FE2B0((uint64_t)v7);
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_1000FC7A4(uint64_t a1)
{
  return sub_1000FC7B0(a1, (uint64_t (*)(uint64_t, uint64_t, BOOL, uint64_t))sub_100283390);
}

uint64_t sub_1000FC7B0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, BOOL, uint64_t))
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;

  v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    v6 = __CocoaSet.startIndex.getter(v5);
    v8 = v7;
    v9 = __CocoaSet.endIndex.getter(v5);
    v11 = static __CocoaSet.Index.== infix(_:_:)(v6, v8, v9, v10);
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_1000FDF58(a1);
  if ((v15 & 1) == 0)
  {
    v8 = v14;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v14)
    {
      v6 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_1000FE2A4(v6, v8, v4 != 0);
        return 0;
      }
LABEL_10:
      v12 = a2(v6, v8, v4 != 0, a1);
      sub_1000FE2A4(v6, v8, v4 != 0);
      return v12;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FC8C8()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10001A9A8(&qword_1010FAAF0);
  result = swift_allocObject(v0, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  qword_1010EEF78 = result;
  return result;
}

_QWORD *sub_1000FC8FC()
{
  uint64_t Controller;
  _QWORD *result;

  Controller = type metadata accessor for MessagingQueryController();
  swift_allocObject(Controller, 136, 15);
  result = sub_100D8A504(0xD00000000000001BLL, 0x8000000100EC7AF0);
  qword_1010EEF90 = (uint64_t)result;
  return result;
}

uint64_t sub_1000FC950(uint64_t a1)
{
  uint64_t v1;

  v1 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA278 != -1)
    swift_once(&qword_1010EA278, sub_100B5DB4C);
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1011B7D58, "Flushing FamilyCircle cache", 27, 2, _swiftEmptyArrayStorage);
  qword_1010EEF80 = 0;
  swift_bridgeObjectRelease();
  qword_1010EEF88 = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FC9F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  id v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  char v16;
  _QWORD v17[6];

  v2 = qword_1010EEF80;
  if (qword_1010EEF80)
  {
    swift_bridgeObjectRetain(qword_1010EEF80);
    v4 = static os_log_type_t.debug.getter(v3);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    result = os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7D58, "Using cached FamilyCircle", 25, 2, _swiftEmptyArrayStorage);
    *(_QWORD *)a1 = v2;
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v6 = objc_msgSend(objc_allocWithZone((Class)FAFetchFamilyCircleRequest), "init");
    objc_msgSend(v6, "setCachePolicy:", 1);
    v7 = dispatch_group_create();
    v8 = swift_allocObject(&unk_101058890, 25, 7);
    v9 = sub_1000FE220();
    v10 = swift_allocError(&type metadata for FamilyCircle.FamilyCircleError, v9, 0, 0);
    *v11 = 1;
    *(_QWORD *)(v8 + 16) = v10;
    *(_BYTE *)(v8 + 24) = 1;
    dispatch_group_enter(v7);
    v12 = swift_allocObject(&unk_1010588B8, 32, 7);
    *(_QWORD *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 24) = v8;
    v17[4] = sub_1000FE290;
    v17[5] = v12;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_1000270FC;
    v17[3] = &unk_1010588D0;
    v13 = _Block_copy(v17);
    v14 = v7;
    swift_retain();
    swift_release();
    objc_msgSend(v6, "startRequestWithCompletionHandler:", v13);
    _Block_release(v13);
    OS_dispatch_group.wait()();

    swift_beginAccess(v8 + 16, v17, 0, 0);
    v15 = *(_QWORD *)(v8 + 16);
    v16 = *(_BYTE *)(v8 + 24);
    *(_QWORD *)a1 = v15;
    *(_BYTE *)(a1 + 8) = v16;
    sub_1000FE298(v15, v16);
    return swift_release();
  }
  return result;
}

void sub_1000FCC08(void *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE v20[24];

  v6 = a4 + 16;
  if (a2)
  {
    swift_beginAccess(a4 + 16, v20, 1, 0);
    v8 = *(_QWORD *)(a4 + 16);
    v9 = *(_BYTE *)(a4 + 24);
    *(_QWORD *)(a4 + 16) = a2;
    *(_BYTE *)(a4 + 24) = 1;
    swift_errorRetain(a2);
    v10 = v8;
    v11 = v9;
  }
  else if (a1)
  {
    v12 = a1;
    v13 = objc_msgSend(v12, "members");
    v14 = sub_10000F4A0(0, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    v16 = sub_100CA8034(v15);
    swift_bridgeObjectRelease();
    qword_1010EEF80 = v16;
    swift_bridgeObjectRetain(v16);

    swift_bridgeObjectRelease();
    swift_beginAccess(v6, v20, 1, 0);
    v10 = *(_QWORD *)(a4 + 16);
    v11 = *(_BYTE *)(a4 + 24);
    *(_QWORD *)(a4 + 16) = v16;
    *(_BYTE *)(a4 + 24) = 0;
  }
  else
  {
    v17 = sub_1000FE220();
    v18 = swift_allocError(&type metadata for FamilyCircle.FamilyCircleError, v17, 0, 0);
    *v19 = 1;
    swift_beginAccess(v6, v20, 1, 0);
    v10 = *(_QWORD *)(a4 + 16);
    v11 = *(_BYTE *)(a4 + 24);
    *(_QWORD *)(a4 + 16) = v18;
    *(_BYTE *)(a4 + 24) = 1;
  }
  sub_1000FE214(v10, v11);
  dispatch_group_leave(a3);
}

uint64_t sub_1000FCD8C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = qword_1010EEF88;
  *a1 = qword_1010EEF88;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000FCDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[14] = a5;
  v6[15] = a6;
  v6[13] = a4;
  return swift_task_switch(sub_1000FCDC8, 0, 0);
}

uint64_t sub_1000FCDC8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 88) = &_swiftEmptySetSingleton;
  v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 256) = v2;
  v3 = -1;
  v4 = -1 << v2;
  if (-(-1 << v2) < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v1 + 56);
  swift_bridgeObjectRetain(v1);
  if (!v5)
  {
    v15 = 63 - v4;
    if ((unint64_t)(63 - v4) > 0x7F)
    {
      v16 = v6[8];
      if (v16)
      {
        v7 = 1;
LABEL_11:
        v9 = (v16 - 1) & v16;
        v8 = __clz(__rbit64(v16)) + (v7 << 6);
        goto LABEL_5;
      }
      if (v15 >= 0xC0)
      {
        v16 = v6[9];
        if (v16)
        {
          v7 = 2;
          goto LABEL_11;
        }
        if (v15 >= 0x100)
        {
          v16 = v6[10];
          if (v16)
          {
            v7 = 3;
            goto LABEL_11;
          }
          if (v15 >= 0x140)
          {
            v16 = v6[11];
            if (v16)
            {
              v7 = 4;
              goto LABEL_11;
            }
            v17 = 0;
            v18 = v15 >> 6;
            if (v18 <= 5)
              v18 = 5;
            v19 = v18 - 5;
            while (v19 != v17)
            {
              v16 = v6[v17++ + 12];
              if (v16)
              {
                v7 = v17 + 4;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
    swift_release();
    v20 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 128) = v20;
    v21 = swift_allocObject(&unk_101058868, 24, 7);
    *(_QWORD *)(v0 + 136) = v21;
    *(_QWORD *)(v21 + 16) = v20;
    v22 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_bridgeObjectRetain(v20);
    v23 = (_QWORD *)swift_task_alloc(v22);
    *(_QWORD *)(v0 + 144) = v23;
    *v23 = v0;
    v23[1] = sub_1000FCFF0;
    return unsafeBlocking<A>(_:)(v23, sub_1000FE1A8, v21, &type metadata for () + 1);
  }
  v7 = 0;
  v8 = __clz(__rbit64(v5));
  v9 = (v5 - 1) & v5;
LABEL_5:
  *(_QWORD *)(v0 + 152) = v7;
  *(_QWORD *)(v0 + 160) = v9;
  v10 = v6[6] + 24 * v8;
  *(_BYTE *)(v0 + 257) = *(_BYTE *)v10;
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v10 + 8);
  v11 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v0 + 176) = v11;
  v12 = qword_1010E9970;
  swift_bridgeObjectRetain(v11);
  if (v12 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v13 = qword_1010EEF90;
  *(_QWORD *)(v0 + 184) = qword_1010EEF90;
  return swift_task_switch(sub_1000FD090, v13, 0);
}

uint64_t sub_1000FCFF0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_release();
  return swift_task_switch(sub_1000FD04C, 0, 0);
}

uint64_t sub_1000FD04C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  (*(void (**)(uint64_t, _QWORD))(v0 + 112))(v1, 0);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FD090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t inited;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_BYTE *)(v0 + 257);
  v5 = sub_10001A9A8(&qword_1010EE2B0);
  inited = swift_initStackObject(v5, v0 + 16);
  *(_QWORD *)(v0 + 192) = inited;
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_BYTE *)(inited + 32) = v4;
  *(_QWORD *)(inited + 40) = v3;
  *(_QWORD *)(inited + 48) = v1;
  v7 = *(void **)(v2 + 112);
  *(_QWORD *)(v0 + 200) = v7;
  swift_bridgeObjectRetain(v1);
  if (v7)
  {
    v8 = *(_QWORD *)(v0 + 184);
    v9 = sub_1000FE130();
    v10 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 208) = v10;
    v10[2] = inited;
    v10[3] = v7;
    v10[4] = v8;
    v11 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    v12 = v7;
    v13 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 216) = v13;
    v14 = sub_10001A9A8(&qword_1010EEFB8);
    *v13 = v0;
    v13[1] = sub_1000FD248;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 96, v8, v9, 0xD00000000000001CLL, 0x8000000100EC8090, sub_1000FE178, v10, v14);
  }
  else
  {
    v16 = sub_1000FE094();
    v17 = swift_allocError(&type metadata for MessagingError, v16, 0, 0);
    *v18 = 6;
    swift_willThrow(v17);
    *(_QWORD *)(v0 + 232) = v17;
    v19 = *(_QWORD *)(v0 + 192);
    swift_setDeallocating(v19);
    swift_arrayDestroy(v19 + 32, *(_QWORD *)(v19 + 16), &type metadata for MessagingDestination);
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_1000FD54C, 0, 0);
  }
}

uint64_t sub_1000FD248()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 184);
    v5 = sub_1000FD4C8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 184);
    swift_task_dealloc(*(_QWORD *)(v2 + 208));
    v5 = sub_1000FD2BC;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000FD2BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 192);

  v2 = v1 + 32;
  swift_setDeallocating(v1);
  swift_arrayDestroy(v1 + 32, *(_QWORD *)(v1 + 16), &type metadata for MessagingDestination);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_BYTE *)(v3 + 32);
  v6 = 1 << v5;
  if (v4)
  {
    v7 = 0;
  }
  else
  {
    if ((v5 & 0x3Fu) < 7)
      goto LABEL_24;
    v4 = *(_QWORD *)(v3 + 72);
    if (!v4)
    {
      v18 = (unint64_t)(v6 + 63) >> 6;
      if (v18 <= 2)
        v18 = 2;
      v19 = (unint64_t *)(v3 + 80);
      v20 = v18 - 2;
      v7 = 64;
      while (v20)
      {
        v21 = *v19++;
        v4 = v21;
        v7 += 64;
        --v20;
        if (v21)
          goto LABEL_3;
      }
      goto LABEL_24;
    }
    v7 = 64;
  }
LABEL_3:
  v8 = __clz(__rbit64(v4));
  v9 = v8 + v7;
  if (v9 == v6)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    v17 = sub_1000FE458;
    return swift_task_switch(v17, 0, 0);
  }
  if (v9 < 0 || v9 >= v6)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (((*(_QWORD *)(v3 + 64 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v2 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v9);
  swift_bridgeObjectRetain(v2);
  result = swift_bridgeObjectRelease();
  if (!((unint64_t)v2 >> 62))
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_28:
  if (v2 < 0)
    v22 = v2;
  else
    v22 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v23 = _CocoaArrayWrapper.endIndex.getter(v22);
  result = swift_bridgeObjectRelease();
  if (!v23)
    goto LABEL_24;
LABEL_9:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
LABEL_12:
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v12, "senderCorrelationIdentifier");

    if (v13)
    {
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      *(_QWORD *)(v0 + 240) = v14;
      *(_QWORD *)(v0 + 248) = v16;
      v17 = sub_1000FD820;
    }
    else
    {
      v17 = sub_1000FDA44;
    }
    return swift_task_switch(v17, 0, 0);
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v2 + 32);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FD4C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 208);

  swift_task_dealloc(v1);
  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 192);
  swift_setDeallocating(v2);
  swift_arrayDestroy(v2 + 32, *(_QWORD *)(v2 + 16), &type metadata for MessagingDestination);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000FD54C, 0, 0);
}

uint64_t sub_1000FD54C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA278 != -1)
    swift_once(&qword_1010EA278, sub_100B5DB4C);
  v3 = *(_QWORD *)(v1 + 232);
  v4 = qword_1011B7D58;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  v7 = _convertErrorToNSError(_:)(v3);
  *(_QWORD *)(v6 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
  *(_QWORD *)(v6 + 64) = sub_1000FE0D8();
  *(_QWORD *)(v6 + 32) = v7;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v4, "Error getting correlationIdentifier: %@", 39, 2, v6);
  swift_bridgeObjectRelease();
  result = swift_errorRelease(v3);
  v9 = *(_QWORD *)(v1 + 152);
  v10 = *(_QWORD *)(v1 + 160);
  if (!v10)
  {
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
    }
    else
    {
      v18 = (unint64_t)((1 << *(_BYTE *)(v1 + 256)) + 63) >> 6;
      result = *(_QWORD *)(v1 + 104);
      if (v17 >= v18)
        goto LABEL_22;
      v19 = result + 56;
      v20 = *(_QWORD *)(result + 56 + 8 * v17);
      ++v9;
      if (v20)
      {
LABEL_11:
        v11 = (v20 - 1) & v20;
        v12 = __clz(__rbit64(v20)) + (v9 << 6);
        goto LABEL_5;
      }
      v9 = v17 + 1;
      if (v17 + 1 >= v18)
        goto LABEL_22;
      v20 = *(_QWORD *)(v19 + 8 * v9);
      if (v20)
        goto LABEL_11;
      v9 = v17 + 2;
      if (v17 + 2 >= v18)
        goto LABEL_22;
      v20 = *(_QWORD *)(v19 + 8 * v9);
      if (v20)
        goto LABEL_11;
      v21 = v17 + 3;
      if (v21 >= v18)
      {
LABEL_22:
        swift_release();
        v22 = *(_QWORD *)(v1 + 88);
        *(_QWORD *)(v1 + 128) = v22;
        v23 = swift_allocObject(&unk_101058868, 24, 7);
        *(_QWORD *)(v1 + 136) = v23;
        *(_QWORD *)(v23 + 16) = v22;
        v24 = async function pointer to unsafeBlocking<A>(_:)[1];
        swift_bridgeObjectRetain(v22);
        v25 = (_QWORD *)swift_task_alloc(v24);
        *(_QWORD *)(v1 + 144) = v25;
        *v25 = v1;
        v25[1] = sub_1000FCFF0;
        return unsafeBlocking<A>(_:)(v25, sub_1000FE1A8, v23, &type metadata for () + 1);
      }
      v20 = *(_QWORD *)(v19 + 8 * v21);
      if (v20)
      {
        v9 = v21;
        goto LABEL_11;
      }
      while (1)
      {
        v9 = v21 + 1;
        if (__OFADD__(v21, 1))
          break;
        if (v9 >= v18)
          goto LABEL_22;
        v20 = *(_QWORD *)(v19 + 8 * v9);
        ++v21;
        if (v20)
          goto LABEL_11;
      }
    }
    __break(1u);
    return result;
  }
  v11 = (v10 - 1) & v10;
  v12 = __clz(__rbit64(v10)) | (v9 << 6);
  result = *(_QWORD *)(v1 + 104);
LABEL_5:
  *(_QWORD *)(v1 + 152) = v9;
  *(_QWORD *)(v1 + 160) = v11;
  v13 = *(_QWORD *)(result + 48) + 24 * v12;
  *(_BYTE *)(v1 + 257) = *(_BYTE *)v13;
  *(_QWORD *)(v1 + 168) = *(_QWORD *)(v13 + 8);
  v14 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v1 + 176) = v14;
  v15 = qword_1010E9970;
  swift_bridgeObjectRetain(v14);
  if (v15 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v16 = qword_1010EEF90;
  *(_QWORD *)(v1 + 184) = qword_1010EEF90;
  return swift_task_switch(sub_1000FD090, v16, 0);
}

uint64_t sub_1000FD820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRelease();
  sub_100A092C0((uint64_t *)(v0 + 72), v2, v1);
  result = swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  if (!v5)
  {
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
    }
    else
    {
      v13 = (unint64_t)((1 << *(_BYTE *)(v0 + 256)) + 63) >> 6;
      result = *(_QWORD *)(v0 + 104);
      if (v12 >= v13)
        goto LABEL_20;
      v14 = result + 56;
      v15 = *(_QWORD *)(result + 56 + 8 * v12);
      ++v4;
      if (v15)
      {
LABEL_9:
        v6 = (v15 - 1) & v15;
        v7 = __clz(__rbit64(v15)) + (v4 << 6);
        goto LABEL_3;
      }
      v4 = v12 + 1;
      if (v12 + 1 >= v13)
        goto LABEL_20;
      v15 = *(_QWORD *)(v14 + 8 * v4);
      if (v15)
        goto LABEL_9;
      v4 = v12 + 2;
      if (v12 + 2 >= v13)
        goto LABEL_20;
      v15 = *(_QWORD *)(v14 + 8 * v4);
      if (v15)
        goto LABEL_9;
      v16 = v12 + 3;
      if (v16 >= v13)
      {
LABEL_20:
        swift_release();
        v17 = *(_QWORD *)(v0 + 88);
        *(_QWORD *)(v0 + 128) = v17;
        v18 = swift_allocObject(&unk_101058868, 24, 7);
        *(_QWORD *)(v0 + 136) = v18;
        *(_QWORD *)(v18 + 16) = v17;
        v19 = async function pointer to unsafeBlocking<A>(_:)[1];
        swift_bridgeObjectRetain(v17);
        v20 = (_QWORD *)swift_task_alloc(v19);
        *(_QWORD *)(v0 + 144) = v20;
        *v20 = v0;
        v20[1] = sub_1000FCFF0;
        return unsafeBlocking<A>(_:)(v20, sub_1000FE1A8, v18, &type metadata for () + 1);
      }
      v15 = *(_QWORD *)(v14 + 8 * v16);
      if (v15)
      {
        v4 = v16;
        goto LABEL_9;
      }
      while (1)
      {
        v4 = v16 + 1;
        if (__OFADD__(v16, 1))
          break;
        if (v4 >= v13)
          goto LABEL_20;
        v15 = *(_QWORD *)(v14 + 8 * v4);
        ++v16;
        if (v15)
          goto LABEL_9;
      }
    }
    __break(1u);
    return result;
  }
  v6 = (v5 - 1) & v5;
  v7 = __clz(__rbit64(v5)) | (v4 << 6);
  result = *(_QWORD *)(v0 + 104);
LABEL_3:
  *(_QWORD *)(v0 + 152) = v4;
  *(_QWORD *)(v0 + 160) = v6;
  v8 = *(_QWORD *)(result + 48) + 24 * v7;
  *(_BYTE *)(v0 + 257) = *(_BYTE *)v8;
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v8 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v0 + 176) = v9;
  v10 = qword_1010E9970;
  swift_bridgeObjectRetain(v9);
  if (v10 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v11 = qword_1010EEF90;
  *(_QWORD *)(v0 + 184) = qword_1010EEF90;
  return swift_task_switch(sub_1000FD090, v11, 0);
}

uint64_t sub_1000FDA44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA278 != -1)
    swift_once(&qword_1010EA278, sub_100B5DB4C);
  v4 = *(_QWORD *)(v1 + 168);
  v3 = *(_QWORD *)(v1 + 176);
  v5 = qword_1011B7D58;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v3;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v5, "Could not get correlationIdentifier for: %@", 43, 2, v7);
  result = swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v1 + 152);
  v10 = *(_QWORD *)(v1 + 160);
  if (!v10)
  {
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
    }
    else
    {
      v18 = (unint64_t)((1 << *(_BYTE *)(v1 + 256)) + 63) >> 6;
      result = *(_QWORD *)(v1 + 104);
      if (v17 >= v18)
        goto LABEL_22;
      v19 = result + 56;
      v20 = *(_QWORD *)(result + 56 + 8 * v17);
      ++v9;
      if (v20)
      {
LABEL_11:
        v11 = (v20 - 1) & v20;
        v12 = __clz(__rbit64(v20)) + (v9 << 6);
        goto LABEL_5;
      }
      v9 = v17 + 1;
      if (v17 + 1 >= v18)
        goto LABEL_22;
      v20 = *(_QWORD *)(v19 + 8 * v9);
      if (v20)
        goto LABEL_11;
      v9 = v17 + 2;
      if (v17 + 2 >= v18)
        goto LABEL_22;
      v20 = *(_QWORD *)(v19 + 8 * v9);
      if (v20)
        goto LABEL_11;
      v21 = v17 + 3;
      if (v21 >= v18)
      {
LABEL_22:
        swift_release();
        v22 = *(_QWORD *)(v1 + 88);
        *(_QWORD *)(v1 + 128) = v22;
        v23 = swift_allocObject(&unk_101058868, 24, 7);
        *(_QWORD *)(v1 + 136) = v23;
        *(_QWORD *)(v23 + 16) = v22;
        v24 = async function pointer to unsafeBlocking<A>(_:)[1];
        swift_bridgeObjectRetain(v22);
        v25 = (_QWORD *)swift_task_alloc(v24);
        *(_QWORD *)(v1 + 144) = v25;
        *v25 = v1;
        v25[1] = sub_1000FCFF0;
        return unsafeBlocking<A>(_:)(v25, sub_1000FE1A8, v23, &type metadata for () + 1);
      }
      v20 = *(_QWORD *)(v19 + 8 * v21);
      if (v20)
      {
        v9 = v21;
        goto LABEL_11;
      }
      while (1)
      {
        v9 = v21 + 1;
        if (__OFADD__(v21, 1))
          break;
        if (v9 >= v18)
          goto LABEL_22;
        v20 = *(_QWORD *)(v19 + 8 * v9);
        ++v21;
        if (v20)
          goto LABEL_11;
      }
    }
    __break(1u);
    return result;
  }
  v11 = (v10 - 1) & v10;
  v12 = __clz(__rbit64(v10)) | (v9 << 6);
  result = *(_QWORD *)(v1 + 104);
LABEL_5:
  *(_QWORD *)(v1 + 152) = v9;
  *(_QWORD *)(v1 + 160) = v11;
  v13 = *(_QWORD *)(result + 48) + 24 * v12;
  *(_BYTE *)(v1 + 257) = *(_BYTE *)v13;
  *(_QWORD *)(v1 + 168) = *(_QWORD *)(v13 + 8);
  v14 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v1 + 176) = v14;
  v15 = qword_1010E9970;
  swift_bridgeObjectRetain(v14);
  if (v15 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v16 = qword_1010EEF90;
  *(_QWORD *)(v1 + 184) = qword_1010EEF90;
  return swift_task_switch(sub_1000FD090, v16, 0);
}

uint64_t sub_1000FDCF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[6];

  v1 = a1;
  if (qword_1010E9968 != -1)
    a1 = swift_once(&qword_1010E9968, sub_1000FC8C8);
  __chkstk_darwin(a1);
  v4[2] = v1;
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000FE1B0, v4, v2, &type metadata for () + 1, &type metadata for () + 1);
}

uint64_t sub_1000FDD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 40) = a8;
  *(_BYTE *)(v8 + 80) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  return swift_task_switch(sub_1000FDDB8, 0, 0);
}

uint64_t sub_1000FDDB8()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v1 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1000FDE38;
  return sub_100D8C77C(*(_BYTE *)(v0 + 80), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000FDE38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 48);
  *(_QWORD *)(*v3 + 56) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_1000FDEF4;
  }
  else
  {
    *(_QWORD *)(v6 + 64) = a2;
    *(_QWORD *)(v6 + 72) = a1;
    v8 = sub_1000FDEB0;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1000FDEB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 72), v1, 0);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FDEF4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 16);
  swift_errorRetain(v1);
  v2(v1, 0, 1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FDF58(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t *sub_1000FDFE0(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a3 < 0 || 1 << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    v8 = *(_QWORD *)(a6 + 56);
    v9 = (uint64_t *)(*(_QWORD *)(a6 + 48) + 16 * a3);
    v10 = *v9;
    v11 = v9[1];
    *result = *v9;
    result[1] = v11;
    v12 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a2, v8 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a3, v12);
    return (uint64_t *)sub_10001BBBC(v10, v11);
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_1000FE094()
{
  unint64_t result;

  result = qword_1010EEFA0;
  if (!qword_1010EEFA0)
  {
    result = swift_getWitnessTable(&unk_100E29924, &type metadata for MessagingError);
    atomic_store(result, (unint64_t *)&qword_1010EEFA0);
  }
  return result;
}

unint64_t sub_1000FE0D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EEFA8;
  if (!qword_1010EEFA8)
  {
    v1 = sub_10000F4A0(255, (unint64_t *)&qword_1010F3060, NSError_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1010EEFA8);
  }
  return result;
}

unint64_t sub_1000FE130()
{
  unint64_t result;
  uint64_t Controller;

  result = qword_1010EEFB0;
  if (!qword_1010EEFB0)
  {
    Controller = type metadata accessor for MessagingQueryController();
    result = swift_getWitnessTable(asc_100E7126C, Controller);
    atomic_store(result, (unint64_t *)&qword_1010EEFB0);
  }
  return result;
}

void sub_1000FE178(uint64_t a1)
{
  uint64_t v1;

  sub_100D8BB20(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000FE184()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FE1A8()
{
  uint64_t v0;

  return sub_1000FDCF4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000FE1B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = qword_1010EEF88;
  qword_1010EEF88 = v1;
  swift_bridgeObjectRelease(v2);
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000FE1EC()
{
  uint64_t v0;

  sub_1000FE214(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000FE214(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a1);
}

unint64_t sub_1000FE220()
{
  unint64_t result;

  result = qword_1010EEFC0;
  if (!qword_1010EEFC0)
  {
    result = swift_getWitnessTable(&unk_100E27184, &type metadata for FamilyCircle.FamilyCircleError);
    atomic_store(result, &qword_1010EEFC0);
  }
  return result;
}

uint64_t sub_1000FE264()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000FE290(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000FCC08(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000FE298(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000FE2A4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1000FE2B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EEFD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000FE2F0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for FamilyCircle.FamilyCircleError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000FE390 + 4 * byte_100E270E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000FE3C4 + 4 * byte_100E270E0[v4]))();
}

uint64_t sub_1000FE3C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FE3CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000FE3D4);
  return result;
}

uint64_t sub_1000FE3E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000FE3E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000FE3EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FE3F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FamilyCircle.FamilyCircleError()
{
  return &type metadata for FamilyCircle.FamilyCircleError;
}

unint64_t sub_1000FE414()
{
  unint64_t result;

  result = qword_1010EEFD8[0];
  if (!qword_1010EEFD8[0])
  {
    result = swift_getWitnessTable(&unk_100E2715C, &type metadata for FamilyCircle.FamilyCircleError);
    atomic_store(result, qword_1010EEFD8);
  }
  return result;
}

uint64_t sub_1000FE45C(uint64_t a1)
{
  type metadata accessor for Array(0);
  return a1;
}

uint64_t sub_1000FE484(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = sub_10001A9A8(&qword_1010EC008);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EC008);
    sub_100102CC4(a2, a3, type metadata accessor for MultipartAccessoryPairingInfo, (void (*)(void))sub_100A99950, (uint64_t)v10);
    sub_10001BC14(a2, a3);
    return sub_100004048((uint64_t)v10, &qword_1010EC008);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v13, type metadata accessor for MultipartAccessoryPairingInfo);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_100109E68((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100A99950, (void (*)(void))sub_100A84704, type metadata accessor for MultipartAccessoryPairingInfo, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_100A97D6C);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return sub_10001BC14(a2, a3);
  }
}

uint64_t sub_1000FE620(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = sub_10001A9A8(&qword_1010EC5E8);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EC5E8);
    sub_100102AA8(a2, a3, (uint64_t)v10);
    sub_10001BC14(a2, a3);
    return sub_100004048((uint64_t)v10, &qword_1010EC5E8);
  }
  else
  {
    sub_100005CF0(a1, (uint64_t)v13, (uint64_t *)&unk_1010F9890);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_100109AA8((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return sub_10001BC14(a2, a3);
  }
}

uint64_t sub_1000FE790(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EF198);
    sub_100102CC4(a2, a3, type metadata accessor for OwnedBeaconGroup.PairingState, (void (*)(void))sub_100A99F50, (uint64_t)v10);
    sub_10001BC14(a2, a3);
    return sub_100004048((uint64_t)v10, &qword_1010EF198);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_100109E68((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100A99F50, (void (*)(void))sub_100A850F8, type metadata accessor for OwnedBeaconGroup.PairingState, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_100A97EDC);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return sub_10001BC14(a2, a3);
  }
}

uint64_t sub_1000FE92C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10010F90C((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_10010A0FC(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for CodingUserInfoKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_100004048(a1, (uint64_t *)&unk_1010F6390);
    sub_100102DFC(a2, v9);
    v7 = type metadata accessor for CodingUserInfoKey(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F6390);
  }
}

uint64_t sub_1000FEA10(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EF188);
    sub_100102FDC((uint64_t)a2, (uint64_t)v8);

    return sub_100004048((uint64_t)v8, &qword_1010EF188);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v11, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010A3DC((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v16;

    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000FEB64(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_100004048(a1, &qword_1010ED860);
    sub_100103108(a2, (uint64_t)v8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    return sub_100004048((uint64_t)v8, &qword_1010ED860);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010A64C((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
}

uint64_t sub_1000FECD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10010F90C((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010A7E4(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100004048(a1, (uint64_t *)&unk_1010F6390);
    sub_100103238(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F6390);
  }
}

uint64_t sub_1000FEDAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010F0F00);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ObservedAdvertisement(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010F0F00);
    sub_100103328(a2, (uint64_t)v8);
    sub_1000126B0(a2, type metadata accessor for BeaconIdentifier);
    return sub_100004048((uint64_t)v8, &qword_1010F0F00);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v11, type metadata accessor for ObservedAdvertisement);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010A914((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    swift_bridgeObjectRelease();
    return sub_1000126B0(a2, type metadata accessor for BeaconIdentifier);
  }
}

uint64_t sub_1000FEF14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  unint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v17 = *v2;
    *v2 = 0x8000000000000000;
    sub_10010D98C(a1, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100A9B308, (void (*)(void))sub_100A879D8, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
    *v2 = v17;
    swift_bridgeObjectRelease();
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
  }
  else
  {
    swift_bridgeObjectRetain(*v2);
    v9 = sub_100003FB0(a2);
    v11 = v10;
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      v12 = swift_isUniquelyReferenced_nonNull_native(*v2);
      v13 = *v2;
      v18 = *v3;
      *v3 = 0x8000000000000000;
      if ((v12 & 1) == 0)
      {
        sub_100A9B308();
        v13 = v18;
      }
      v14 = *(_QWORD *)(v13 + 48);
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v9, v15);
      sub_100105D30(v9, v13);
      *v3 = v13;
      swift_bridgeObjectRelease();
    }
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000FF098(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_100004048(a1, (uint64_t *)&unk_1010EA690);
    sub_100103478(a2, (uint64_t)v8);
    return sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010AD50((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000FF1EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EF1D8);
    sub_1001047D8(a2, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, (void (*)(void))sub_100A9B8CC, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF1D8);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v11, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010CC8C((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100A9B8CC, (void (*)(void))sub_100A88E38, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A984FC);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1000FF39C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[40];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10000F9FC((__int128 *)a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_10010B8C4((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100A9C2D0, (void (*)(void))sub_100A89E50, (uint64_t (*)(uint64_t, _QWORD *))sub_10000F9FC, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A985A0);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_100004048(a1, (uint64_t *)&unk_101107010);
    sub_10010418C(a2, (void (*)(unint64_t, uint64_t))sub_10000F9FC, (void (*)(void))sub_100A9C2D0, (uint64_t)v9);
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_100004048((uint64_t)v9, (uint64_t *)&unk_101107010);
  }
}

uint64_t sub_1000FF4B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_100004048(a1, (uint64_t *)&unk_1010EA690);
    sub_100103914(a2, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010BA5C((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1000FF640(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  __n128 v8;
  uint64_t result;
  char v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010C78C(a1, a2, isUniquelyReferenced_nonNull_native, v8);
    *v3 = v15;
  }
  else
  {
    result = sub_100519460(a2, a3);
    if ((v10 & 1) == 0)
      return result;
    v11 = result;
    v12 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v13 = *v3;
    v16 = *v4;
    *v4 = 0x8000000000000000;
    if (!v12)
    {
      sub_100A9D9B4();
      v13 = v16;
    }
    v14 = *(void **)(*(_QWORD *)(v13 + 56) + 8 * v11);
    sub_1001074C0(v11, v13);
    *v4 = v13;

  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FF71C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconEstimatedLocation(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, (uint64_t *)&unk_1010F7810);
    sub_1001047D8(a2, type metadata accessor for BeaconEstimatedLocation, (void (*)(void))sub_100A9E848, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010F7810);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v11, type metadata accessor for BeaconEstimatedLocation);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010CC8C((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100A9E848, (void (*)(void))sub_100A8E3FC, type metadata accessor for BeaconEstimatedLocation, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A98A0C);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1000FF8CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF1E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF1F0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_100004048(a1, &qword_1010EF1E8);
    sub_100104664(a2, &qword_1010EF1F0, (void (*)(void))sub_100A9EE58, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF1E8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010E874((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100A9EE58, (void (*)(void))sub_100A8F250, &qword_1010EF1F0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A98AD0);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1000FFA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SecureLocation(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_101119450);
    sub_100103E20(a2, a3, type metadata accessor for SecureLocation, sub_100A9F3CC, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v10, &qword_101119450);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v13, type metadata accessor for SecureLocation);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_10010D618((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native, sub_100A9F3CC, (void (*)(void))sub_100A8FF8C, type metadata accessor for SecureLocation, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A98B90);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000FFC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = sub_10001A9A8(&qword_1010EF1C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SecureLocationsSubscription(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EF1C0);
    sub_100103E20(a2, a3, type metadata accessor for SecureLocationsSubscription, sub_100A9F628, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v10, &qword_1010EF1C0);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v13, type metadata accessor for SecureLocationsSubscription);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_10010D618((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native, sub_100A9F628, (void (*)(void))sub_100A90350, type metadata accessor for SecureLocationsSubscription, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A98C34);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000FFDBC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF1C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF1D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EF1C8);
    sub_100103F64(a2, &qword_1010EF1D0, (void (*)(void))sub_100A9F8EC, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF1C8);
  }
  else
  {
    sub_100005CF0(a1, (uint64_t)v11, &qword_1010EF1D0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010DC74((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100A9F8EC, (void (*)(void))sub_100A90C08, &qword_1010EF1D0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A98C40);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1000FFF70(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconNamingRecord(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, (uint64_t *)&unk_101105880);
    sub_1001047D8(a2, type metadata accessor for BeaconNamingRecord, (void (*)(void))sub_100AA0898, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, (uint64_t *)&unk_101105880);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v11, type metadata accessor for BeaconNamingRecord);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010CC8C((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100AA0898, (void (*)(void))sub_100A92BAC, type metadata accessor for BeaconNamingRecord, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A98CFC);
    v16 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v16);
    v17 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  }
}

uint64_t sub_100100120(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF160);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF168);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EF160);
    sub_100103F64(a2, &qword_1010EF168, (void (*)(void))sub_100AA0C24, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF160);
  }
  else
  {
    sub_100005CF0(a1, (uint64_t)v11, &qword_1010EF168);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010DC74((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100AA0C24, (void (*)(void))sub_100A92F58, &qword_1010EF168, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A98D08);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1001002D4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  __int128 v11;

  if (a2 >> 60 == 15)
  {
    sub_1001040A8(a3, a4, &v11);
    sub_10001BC14(a3, a4);
    return sub_10001EF3C(v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    *(_QWORD *)&v11 = *v4;
    *v4 = 0x8000000000000000;
    sub_10010DF68(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return sub_10001BC14(a3, a4);
  }
}

uint64_t sub_1001003A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF1B8);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101111940);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_100004048(a1, &qword_1010EF1B8);
    sub_100104664(a2, &qword_101111940, (void (*)(void))sub_100AA14C4, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF1B8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010E874((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100AA14C4, (void (*)(void))sub_100A94074, &qword_101111940, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A98DCC);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100100560(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10000F9FC((__int128 *)a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_10010B8C4((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100AA14D8, (void (*)(void))sub_100A94088, (uint64_t (*)(uint64_t, _QWORD *))sub_10000F9FC, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A985A0);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_10010418C(a2, (void (*)(unint64_t, uint64_t))sub_10000F9FC, (void (*)(void))sub_100AA14D8, (uint64_t)v9);
    v7 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    if (v9[3])
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
  }
  return result;
}

uint64_t sub_100100668(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF180);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF178);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_100004048(a1, &qword_1010EF180);
    sub_100104664(a2, &qword_1010EF178, (void (*)(void))sub_100A9BB40, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF180);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010E874((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100A9BB40, (void (*)(void))sub_100A89244, &qword_1010EF178, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A98E80);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100100828(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF1A8);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconScanner.AISLookupState(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EF1A8);
    sub_100104524(a2, (uint64_t)v8);
    v13 = sub_10001A9A8(&qword_1010EF7C0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF1A8);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v11, type metadata accessor for BeaconScanner.AISLookupState);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010E700((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = sub_10001A9A8(&qword_1010EF7C0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1001009B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF1A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101111900);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_100004048(a1, &qword_1010EF1A0);
    sub_100104664(a2, &qword_101111900, (void (*)(void))sub_100AA2134, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF1A0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010E874((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100AA2134, (void (*)(void))sub_100A954BC, &qword_101111900, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A99044);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100100B70(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF190);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
  __chkstk_darwin(updated);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EF190);
    sub_1001047D8(a2, type metadata accessor for AccessoryFirmwareUpdateStateInfo, (void (*)(void))sub_100AA2F3C, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF190);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v11, type metadata accessor for AccessoryFirmwareUpdateStateInfo);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010CC8C((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100AA2F3C, (void (*)(void))sub_100A96714, type metadata accessor for AccessoryFirmwareUpdateStateInfo, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A99200);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_100100D20(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010EF1E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo(0);
  __chkstk_darwin(updated);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100004048(a1, &qword_1010EF1E0);
    sub_1001047D8(a2, type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (void (*)(void))sub_100AA2F50, (uint64_t)v8);
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100004048((uint64_t)v8, &qword_1010EF1E0);
  }
  else
  {
    sub_1000126EC(a1, (uint64_t)v11, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_10010CC8C((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_100AA2F50, (void (*)(void))sub_100A96728, type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9920C);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

unint64_t sub_100100ED0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049068, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_100100F1C(char a1)
{
  return qword_100E274D0[a1];
}

uint64_t sub_100100F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100E273E0, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_100100F88(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100E273E0, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_100100FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100E273E0, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_100101024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100E273E0, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_100101074@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100100ED0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001010A0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_100100F1C(*v1);
  *a1 = result;
  a1[1] = 0xE100000000000000;
  return result;
}

uint64_t sub_1001010CC()
{
  char *v0;

  return sub_100100F1C(*v0);
}

uint64_t sub_1001010E8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100100F18(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10010110C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000A4BD4();
  *a1 = result;
  return result;
}

uint64_t sub_100101134(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100E27480, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100101168(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100E27480, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

BOOL static Message.MessageError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Message.MessageError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int Message.MessageError.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_100101214(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Message.MessageError.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100101220()
{
  char *v0;

  return Message.MessageError.hashValue.getter(*v0);
}

void sub_100101228(uint64_t a1)
{
  char *v1;

  Message.MessageError.hash(into:)(a1, *v1);
}

Swift::Int sub_100101230()
{
  char *v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  Message.MessageError.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t Message.type.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Message.version.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t SessionMessage.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t SessionMessage.init<A>(type:version:payload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t WitnessTable;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[32];
  _QWORD v47[4];
  uint64_t v48;

  v41 = a7;
  v45 = a3;
  v14 = type metadata accessor for CodingUserInfoKey(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(a4 - 8);
  v44 = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(a8, a1, a4);
  v19 = (int *)type metadata accessor for SessionMessage(0, a4, a6, v18);
  *(_QWORD *)(a8 + v19[9]) = a2;
  v40 = a8 + v19[10];
  UUID.init()(v19);
  v20 = type metadata accessor for PropertyListEncoder(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  PropertyListEncoder.init()(v21);
  if (qword_1010EA610 != -1)
    swift_once(&qword_1010EA610, sub_100DB0924);
  v22 = sub_10001A9E8(v14, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v22, v14);
  v47[3] = &type metadata for Bool;
  LOBYTE(v47[0]) = 1;
  v23 = (void (*)(_BYTE *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(v46);
  sub_1000FE92C((uint64_t)v47, (uint64_t)v17);
  v23(v46, 0);
  v24 = sub_100101F20(a5, a5);
  v25 = *(_QWORD *)(a5 - 8);
  v26 = swift_allocObject(v24, ((*(unsigned __int8 *)(v25 + 80) + (unint64_t)*(unsigned int *)(v24 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72), *(unsigned __int8 *)(v25 + 80) | (unint64_t)*(unsigned __int16 *)(v24 + 52));
  v27 = static Array._adoptStorage(_:count:)(v26, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v28, v45, a5);
  v29 = type metadata accessor for Array(0);
  v47[0] = v27;
  v48 = v41;
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v29, &v48);
  v31 = v42;
  v32 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v47, v29, WitnessTable);
  if (v31)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v45, a5);
    v34 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v34(v44, a4);
    swift_bridgeObjectRelease();
    v34(a8, a4);
    v35 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v40, v35);
  }
  else
  {
    v37 = v32;
    v38 = v33;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v45, a5);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, a4);
    result = swift_bridgeObjectRelease();
    v39 = (uint64_t *)(a8 + v19[11]);
    *v39 = v37;
    v39[1] = v38;
  }
  return result;
}

uint64_t type metadata accessor for SessionMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionMessage);
}

uint64_t SessionMessage.extract<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v30 = a4;
  v9 = type metadata accessor for Optional(0, a2);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v31 = (char *)&v29 - v11;
  v12 = type metadata accessor for PropertyListDecoder(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  PropertyListDecoder.init()(v13);
  v14 = type metadata accessor for Array(0);
  v29 = a1;
  v15 = (uint64_t *)(v4 + *(int *)(a1 + 44));
  v17 = *v15;
  v16 = v15[1];
  v32 = a3;
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v14, &v32);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v14, v17, v16, v14, WitnessTable);
  result = swift_release();
  if (!v5)
  {
    v20 = v30;
    v21 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v14);
    v22 = v31;
    Collection.first.getter(v14, v21);
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v22, v9);
      v25 = type metadata accessor for SessionMessage.MessageError(0, *(_QWORD *)(v29 + 16), *(_QWORD *)(v29 + 24), v24);
      v26 = swift_getWitnessTable(protocol conformance descriptor for SessionMessage<A>.MessageError, v25);
      v27 = swift_allocError(v25, v26, 0, 0);
      *v28 = 0;
      return swift_willThrow(v27);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v20, v22, a2);
    }
  }
  return result;
}

uint64_t SessionMessage.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v26 = a2;
  v27 = v5;
  v7 = type metadata accessor for SessionMessage.CodingKeys(255, v5, v6, a4);
  WitnessTable = swift_getWitnessTable(aI_72, v7);
  v9 = type metadata accessor for KeyedEncodingContainer(0, v7, WitnessTable);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - v11;
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v14, v13);
  LOBYTE(v30) = 0;
  v15 = *(_QWORD *)(v6 + 16);
  v16 = v28;
  v17 = v29;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v30, v9, v27, v15);
  if (v17)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v19 = v10;
  v20 = v26;
  v21 = *(_QWORD *)(v16 + *(int *)(v26 + 36));
  LOBYTE(v30) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v21, &v30, v9);
  v22 = v16 + *(int *)(v20 + 40);
  LOBYTE(v30) = 2;
  v23 = type metadata accessor for UUID(0);
  v24 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v30, v9, v23, v24);
  v30 = *(_OWORD *)(v16 + *(int *)(v20 + 44));
  v31 = 3;
  v25 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v31, v9, &type metadata for Data, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v9);
}

uint64_t SessionMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char v45;

  v32 = a4;
  v36 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v36 - 8);
  v7 = __chkstk_darwin(v36);
  v33 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v7);
  v40 = (uint64_t *)((char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for SessionMessage.CodingKeys(255, a2, a3, v10);
  WitnessTable = swift_getWitnessTable(aI_72, v11);
  v42 = type metadata accessor for KeyedDecodingContainer(0, v11, WitnessTable);
  v35 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v14 = (char *)&v32 - v13;
  v37 = a3;
  v38 = a2;
  v16 = (int *)type metadata accessor for SessionMessage(0, a2, a3, v15);
  v17 = *((_QWORD *)v16 - 1);
  __chkstk_darwin(v16);
  v19 = (char *)&v32 - v18;
  v21 = a1[3];
  v20 = a1[4];
  sub_10001AA44(a1, v21);
  v41 = v14;
  v22 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, WitnessTable, v21, v20);
  if (v22)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v43 = v17;
  v23 = v35;
  v24 = v36;
  LOBYTE(v44) = 0;
  v25 = v38;
  v26 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v38, &v44, v42, v38, *(_QWORD *)(v37 + 8));
  (*(void (**)(char *, _QWORD *, uint64_t))(v26 + 32))(v19, v40, v25);
  LOBYTE(v44) = 1;
  *(_QWORD *)&v19[v16[9]] = KeyedDecodingContainer.decode(_:forKey:)(&v44, v42);
  LOBYTE(v44) = 2;
  v27 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v28 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v24, &v44, v42, v24, v27);
  (*(void (**)(char *, _QWORD *, uint64_t))(v34 + 32))(&v19[v16[10]], v28, v24);
  v45 = 3;
  v29 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for Data, &v45, v42, &type metadata for Data, v29);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v41, v42);
  *(_OWORD *)&v19[v16[11]] = v44;
  v30 = v43;
  (*(void (**)(uint64_t, char *, int *))(v43 + 16))(v32, v19, v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return (*(uint64_t (**)(char *, int *))(v30 + 8))(v19, v16);
}

uint64_t sub_100101D24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SessionMessage.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_100101D40(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SessionMessage.encode(to:)(a1, a2, a3, a4);
}

uint64_t SessionMessage.description.getter(uint64_t a1)
{
  uint64_t v1;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;

  _StringGuts.grow(_:)(65);
  v3._object = (void *)0x8000000100EC8150;
  v3._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v1, *(_QWORD *)(a1 + 16));
  v4._countAndFlagsBits = 0x6F6973726576202CLL;
  v4._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x69746E656469202CLL;
  v6._object = (void *)0xEE00203A72656966;
  String.append(_:)(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x64616F6C79617020;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  v11 = (uint64_t *)(v1 + *(int *)(a1 + 44));
  v12 = *v11;
  v13 = v11[1];
  sub_10001BBBC(*v11, v13);
  v14._countAndFlagsBits = Data.description.getter(v12, v13);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  sub_10001BC14(v12, v13);
  v15._countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 0;
}

uint64_t sub_100101F20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType(a2))
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return sub_10001A9A8(&qword_10111BE20);
  else
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
}

uint64_t type metadata accessor for SessionMessage.MessageError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionMessage.MessageError);
}

uint64_t type metadata accessor for SessionMessage.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionMessage.CodingKeys);
}

uint64_t sub_100101F84(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for SessionMessage<A>.MessageError, a1);
}

uint64_t sub_100101F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_100101F9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_100E27328;
      swift_initStructMetadata(a1, 0, 4, v5, a1 + 32);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100102038(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64) + 7;
  v12 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v11 + ((v10 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  else
  {
    v16 = v8;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v17 = (_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *v18;
    v19 = ((unint64_t)v17 + v10 + 8) & ~v10;
    v20 = ((unint64_t)v18 + v10 + 8) & ~v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v19, v20, v16);
    v21 = (_QWORD *)((v11 + v19) & 0xFFFFFFFFFFFFFFF8);
    v22 = (uint64_t *)((v11 + v20) & 0xFFFFFFFFFFFFFFF8);
    v23 = *v22;
    v24 = v22[1];
    sub_10001BBBC(*v22, v24);
    *v21 = v23;
    v21[1] = v24;
  }
  return a1;
}

uint64_t sub_100102194(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10001BC14(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
}

uint64_t sub_100102210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (uint64_t *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v16;
  v18 = v16[1];
  sub_10001BBBC(*v16, v18);
  *v15 = v17;
  v15[1] = v18;
  return a1;
}

uint64_t sub_1001022D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v12, v13, v9);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (uint64_t *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = (uint64_t *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v16;
  v18 = v16[1];
  sub_10001BBBC(*v16, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  sub_10001BC14(v19, v20);
  return a1;
}

uint64_t sub_1001023A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v12, v13, v9);
  *(_OWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100102464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v12, v13, v9);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (uint64_t *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  v17 = v15[1];
  *(_OWORD *)v15 = *(_OWORD *)((v14 + v13) & 0xFFFFFFFFFFFFF8);
  sub_10001BC14(v16, v17);
  return a1;
}

uint64_t sub_100102528(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  unint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0xC)
    v11 = 12;
  if (!a2)
    return 0;
  v12 = v8;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = *(_QWORD *)(v9 + 64) + 7;
  if (v11 < a2)
  {
    if (((((v15 + ((v14 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v11 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X17 }
  }
  if ((_DWORD)v7 == v11)
  {
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v21 = a1;
    v10 = v7;
    v12 = v5;
    return v20(v21, v10, v12);
  }
  v21 = (((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + v14 + 8) & ~v14;
  if ((_DWORD)v10 == v11)
  {
    v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    return v20(v21, v10, v12);
  }
  v22 = *(_QWORD *)(((v15 + v21) & 0xFFFFFFFFFFFFF8) + 8) >> 60;
  if (((4 * (_DWORD)v22) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v22) & 0xC | (v22 >> 2));
  else
    return 0;
}

void sub_1001026E4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0xC)
    v10 = 12;
  if (v10 >= a3)
  {
    v13 = 0;
    if (a2 <= v10)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64)
         + 7
         + ((*(unsigned __int8 *)(v9 + 80) + ((*(_DWORD *)(v7 + 64) + 7) & 0xFFFFFFF8) + 8) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v11 = a3 - v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (a2 <= v10)
LABEL_19:
      __asm { BR              X16 }
  }
  if (((*(_DWORD *)(v9 + 64)
       + 7
       + ((*(unsigned __int8 *)(v9 + 80) + ((*(_DWORD *)(v7 + 64) + 7) & 0xFFFFFFF8) + 8) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v14 = ~v10 + a2;
    bzero(a1, ((*(_QWORD *)(v9 + 64)+ 7+ ((*(unsigned __int8 *)(v9 + 80) + ((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v14;
  }
  __asm { BR              X10 }
}

void sub_100102820()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1001028DCLL);
}

void sub_100102828()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x100102830);
  JUMPOUT(0x1001028DCLL);
}

void sub_100102890()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1001028DCLL);
}

void sub_100102898()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1001028DCLL);
}

uint64_t sub_1001028A0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_WORD *)(v12 + v15) = 0;
  if (!(_DWORD)v11)
    JUMPOUT(0x1001028DCLL);
  if ((_DWORD)v14 == v7)
  {
    v3 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v4 = v12;
    v5 = v11;
    a1 = v14;
    a2 = v13;
  }
  else
  {
    v4 = (((v12 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v10;
    if ((_DWORD)a1 != v7)
      JUMPOUT(0x1001028ACLL);
    v3 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    v5 = v11;
  }
  return v3(v4, v5, a1, a2);
}

uint64_t sub_1001028F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_100102900(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10010294C + 4 * byte_100E271DC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100102980 + 4 * byte_100E271D7[v4]))();
}

uint64_t sub_100102980(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100102988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100102990);
  return result;
}

uint64_t sub_10010299C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001029A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001029A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001029B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001029BC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100102A08 + 4 * byte_100E271E6[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100102A3C + 4 * byte_100E271E1[v4]))();
}

uint64_t sub_100102A3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100102A44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100102A4CLL);
  return result;
}

uint64_t sub_100102A58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100102A60);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100102A64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100102A6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100102A78(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100E27458, a1);
}

uint64_t sub_100102A88(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100E27390, a1);
}

uint64_t sub_100102A98(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100E273B8, a1);
}

uint64_t sub_100102AA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain(*v4);
  v8 = sub_100518E4C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100A99964();
      v11 = v17;
    }
    sub_10001BC14(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8 + 8));
    v12 = *(_QWORD *)(v11 + 56);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
    v14 = *(_QWORD *)(v13 - 8);
    sub_100005CF0(v12 + *(_QWORD *)(v14 + 72) * v8, a3, (uint64_t *)&unk_1010F9890);
    sub_100104D80(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

uint64_t sub_100102BE0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_100518DA0(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100A99D98();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v6);
  sub_100104F94(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100102CC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  unint64_t v12;
  char v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v8 = v5;
  swift_bridgeObjectRetain(*v8);
  v12 = sub_100518E4C(a1, a2);
  LOBYTE(a2) = v13;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v15 = *v8;
    v21 = *v8;
    *v8 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v15 = v21;
    }
    sub_10001BC14(*(_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v12), *(_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v12 + 8));
    v16 = *(_QWORD *)(v15 + 56);
    v17 = a3(0);
    v18 = *(_QWORD *)(v17 - 8);
    sub_1000126EC(v16 + *(_QWORD *)(v18 + 72) * v12, a5, a3);
    sub_100105168(v12, v15, a3);
    *v8 = v15;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a5, 0, 1, v17);
  }
  else
  {
    v20 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a5, 1, 1, v20);
  }
}

double sub_100102DFC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_100518F54(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100A9A3CC();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for CodingUserInfoKey(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_10010F90C((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_100105378(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_100102EF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain(*v2);
  v4 = sub_100003FB0(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100A9A608();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 56) + v4);
  sub_1001055FC(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100102FD0(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100A9A614);
}

uint64_t sub_100102FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_100518FA4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100A9A634();
      v9 = v15;
    }

    v10 = *(_QWORD *)(v9 + 56);
    v11 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
    v12 = *(_QWORD *)(v11 - 8);
    sub_1000126EC(v10 + *(_QWORD *)(v12 + 72) * v6, a2, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    sub_100107E8C(v6, v9, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  else
  {
    v14 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_100103108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_100003FB0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v16 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100A9AA68();
      v9 = v16;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(_QWORD *)(v12 + 72) * v6;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10 + v13, v11);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32))(a2, *(_QWORD *)(v9 + 56) + v13, v11);
    sub_10010589C(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  else
  {
    v15 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
}

double sub_100103238@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain(*v4);
  v8 = sub_100518DA0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100A9ACD0();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10010F90C((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_100105B58(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_100103328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_1005191EC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100A9AEAC();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for BeaconIdentifier(0);
    sub_1000126B0(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, type metadata accessor for BeaconIdentifier);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for ObservedAdvertisement(0);
    v14 = *(_QWORD *)(v13 - 8);
    sub_1000126EC(v12 + *(_QWORD *)(v14 + 72) * v6, a2, type metadata accessor for ObservedAdvertisement);
    sub_100107B30(v6, v9, type metadata accessor for ObservedAdvertisement);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for ObservedAdvertisement(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

uint64_t sub_10010346C(uint64_t a1)
{
  return sub_100103D28(a1, (void (*)(void))sub_100A9B308);
}

uint64_t sub_100103478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_100518D70(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100A9B690();
      v9 = v15;
    }
    v10 = *(_QWORD *)(v9 + 56);
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32))(a2, v10 + *(_QWORD *)(v12 + 72) * v6, v11);
    sub_100105FD0(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  else
  {
    v14 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_100103590(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain(*v2);
  v4 = sub_1005193C8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100A9B8B8();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for MACAddress(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_1001062A4(v4, v7, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (unint64_t *)&unk_101110150, (uint64_t)&protocol conformance descriptor for MACAddress);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10010368C(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100A9BB20);
}

uint64_t sub_100103698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100104664(a1, &qword_1010EF178, (void (*)(void))sub_100A9BB40, a2);
}

uint64_t sub_1001036AC(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100A9BD18);
}

uint64_t sub_1001036B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_1005193C8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100A9BD2C();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for MACAddress(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    sub_100106560(v6, v9, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (unint64_t *)&unk_101110150, (uint64_t)&protocol conformance descriptor for MACAddress, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

uint64_t sub_100103824(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain(*v1);
  v4 = sub_1005193C8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v7 = *v1;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100A9BD40();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for MACAddress(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_10010682C(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100103908(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100A9BF6C);
}

uint64_t sub_100103914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_100003FB0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100A9C52C();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    sub_100106560(v6, v9, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

uint64_t sub_100103A80(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain(*v2);
  v4 = sub_100519510(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100A9CC58();
    v7 = v10;
  }

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  sub_100106B0C(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_100103B54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain(*v2);
  v4 = sub_100003FB0(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0xF000000000000007;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100A9CE0C();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_100105D30(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100103C2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_100518DA0(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100A9D3C4();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_100106CBC(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100103CF8(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100A9EE2C);
}

uint64_t sub_100103D04(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100A9EE38);
}

uint64_t sub_100103D10(uint64_t a1)
{
  return sub_100103D28(a1, (void (*)(void))sub_100A9EE4C);
}

uint64_t sub_100103D1C(uint64_t a1)
{
  return sub_100103D28(a1, (void (*)(void))sub_100A9F3E0);
}

uint64_t sub_100103D28(uint64_t a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = v2;
  v6 = *v4;
  swift_bridgeObjectRetain(*v4);
  v7 = sub_100003FB0(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v10 = *v4;
  v16 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v10 = v16;
  }
  v11 = *(_QWORD *)(v10 + 48);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_100105D30(v7, v10);
  v14 = *v4;
  *v4 = v10;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_100103E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100103E20(a1, a2, type metadata accessor for SecureLocationsSubscription, sub_100A9F628, a3);
}

uint64_t sub_100103E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  unint64_t v12;
  char v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v8 = v5;
  swift_bridgeObjectRetain(*v8);
  v12 = sub_100518DA0(a1, a2);
  LOBYTE(a2) = v13;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v15 = *v8;
    v21 = *v8;
    *v8 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v15 = v21;
    }
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v15 + 56);
    v17 = a3(0);
    v18 = *(_QWORD *)(v17 - 8);
    sub_1000126EC(v16 + *(_QWORD *)(v18 + 72) * v12, a5, a3);
    sub_10010791C(v12, v15, a3);
    *v8 = v15;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a5, 0, 1, v17);
  }
  else
  {
    v20 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a5, 1, 1, v20);
  }
}

uint64_t sub_100103F58(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100A9F86C);
}

uint64_t sub_100103F64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v7 = v4;
  swift_bridgeObjectRetain(*v7);
  v10 = sub_100003FB0(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v13 = *v7;
    v21 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      v13 = v21;
    }
    v14 = *(_QWORD *)(v13 + 48);
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v10, v15);
    v16 = *(_QWORD *)(v13 + 56);
    v17 = sub_10001A9A8(a2);
    v18 = *(_QWORD *)(v17 - 8);
    sub_100005CF0(v16 + *(_QWORD *)(v18 + 72) * v10, a4, a2);
    sub_100107678(v10, v13, a2);
    *v7 = v13;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a4, 0, 1, v17);
  }
  else
  {
    v20 = sub_10001A9A8(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a4, 1, 1, v20);
  }
}

double sub_1001040A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain(*v4);
  v8 = sub_100519764(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100AA1300();
      v11 = v13;
    }
    sub_10001BC14(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v8 + 8));
    *a3 = *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v8);
    sub_100108070(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = xmmword_100E22B20;
  }
  return result;
}

double sub_10010418C@<D0>(uint64_t a1@<X0>, void (*a2)(unint64_t, uint64_t)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v7 = v4;
  swift_bridgeObjectRetain(*v7);
  v10 = sub_100003FB0(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v13 = *v7;
    v17 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      v13 = v17;
    }
    v14 = *(_QWORD *)(v13 + 48);
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v10, v15);
    a2(*(_QWORD *)(v13 + 56) + 40 * v10, a4);
    sub_100108254(v10, v13);
    *v7 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

double sub_1001042A4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_1005193C8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100AA1694();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for MACAddress(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    *a2 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v6);
    sub_100108500(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = xmmword_100E22B20;
  }
  return result;
}

uint64_t sub_100104390(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = sub_100518D38(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100AA191C();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v5);
  sub_1001087A0(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100104438(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100AA1C6C);
}

uint64_t sub_100104444(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  swift_bridgeObjectRetain(*v4);
  v8 = sub_100519120(a1, a2, a3);
  LOBYTE(a3) = v9;
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v11 = *v4;
  v14 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100AA1C94();
    v11 = v14;
  }
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v8);
  sub_100108934(v8, v11);
  *v4 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100104524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_100519C70(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100AA1E54();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_10001A9A8(&qword_1010EF7C0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for BeaconScanner.AISLookupState(0);
    v14 = *(_QWORD *)(v13 - 8);
    sub_1000126EC(v12 + *(_QWORD *)(v14 + 72) * v6, a2, type metadata accessor for BeaconScanner.AISLookupState);
    sub_100108B30(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for BeaconScanner.AISLookupState(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

uint64_t sub_100104664@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v7 = v4;
  swift_bridgeObjectRetain(*v7);
  v10 = sub_100003FB0(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v13 = *v7;
    v21 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      v13 = v21;
    }
    v14 = *(_QWORD *)(v13 + 48);
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v10, v15);
    v16 = *(_QWORD *)(v13 + 56);
    v17 = sub_10001A9A8(a2);
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 32))(a4, v16 + *(_QWORD *)(v18 + 72) * v10, v17);
    sub_100107678(v10, v13, a2);
    *v7 = v13;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a4, 0, 1, v17);
  }
  else
  {
    v20 = sub_10001A9A8(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a4, 1, 1, v20);
  }
}

uint64_t sub_1001047AC(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100AA25F0);
}

uint64_t sub_1001047B8(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100AA2F28);
}

uint64_t sub_1001047C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001047D8(a1, type metadata accessor for AccessoryFirmwareUpdateCommandInfo, (void (*)(void))sub_100AA2F50, a2);
}

uint64_t sub_1001047D8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v7 = v4;
  v10 = *v7;
  swift_bridgeObjectRetain(*v7);
  v11 = sub_100003FB0(a1);
  LOBYTE(a1) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v14 = *v7;
    v23 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      v14 = v23;
    }
    v15 = *(_QWORD *)(v14 + 48);
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v11, v16);
    v17 = *(_QWORD *)(v14 + 56);
    v18 = a2(0);
    v19 = *(_QWORD *)(v18 - 8);
    sub_1000126EC(v17 + *(_QWORD *)(v19 + 72) * v11, a4, a2);
    sub_100106560(v11, v14, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID, a2);
    v20 = *v7;
    *v7 = v14;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a4, 0, 1, v18);
  }
  else
  {
    v22 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a4, 1, 1, v22);
  }
}

uint64_t sub_100104940@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain(*v3);
  v6 = sub_100519D70(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100AA32F4();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
    sub_1000126B0(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, type metadata accessor for ShareAttemptTracker.AttemptKey);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    sub_100109178(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

uint64_t sub_100104A7C(uint64_t a1)
{
  return sub_100104A94(a1, (void (*)(void))sub_100AA39F4);
}

uint64_t sub_100104A88(uint64_t a1)
{
  return sub_100104A94(a1, (void (*)(void))sub_100AA3A08);
}

uint64_t sub_100104A94(uint64_t a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v4;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v2;
  swift_bridgeObjectRetain(*v4);
  v6 = sub_100519AC8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v9 = *v4;
  v14 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v9 = v14;
  }
  v10 = *(_QWORD *)(v9 + 48);
  v11 = type metadata accessor for BeaconKeyManager.FileKey(0);
  sub_1000126B0(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, type metadata accessor for BeaconKeyManager.FileKey);
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_100109488(v6, v9);
  *v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100104B78(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100AA3B3C);
}

uint64_t sub_100104B84(uint64_t a1)
{
  return sub_100104B90(a1, (void (*)(void))sub_100AA3D70);
}

uint64_t sub_100104B90(uint64_t a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v4;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v2;
  swift_bridgeObjectRetain(*v4);
  v6 = sub_100003FB0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v9 = *v4;
  v14 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v9 = v14;
  }
  v10 = *(_QWORD *)(v9 + 48);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_1001062A4(v6, v9, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
  *v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100104C90(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain(*v2);
  v4 = sub_100003FB0(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100AA3FB4();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  sub_1001097C8(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_100104D80(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD v31[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v31);
        sub_10001BBBC(v10, v11);
        Data.hash(into:)(v31, v10, v11);
        v12 = Hasher._finalize()();
        result = sub_10001BC14(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72);
        v20 = v19 * v3;
        result = v17 + v19 * v3;
        v21 = v19 * v6;
        v22 = v17 + v19 * v6;
        v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v22, 1, v18);
        }
        else
        {
          v3 = v6;
          if (v20 == v21)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result, v22);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100104F94(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100105168(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD v33[9];

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v6);
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      while (1)
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v7);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v33);
        sub_10001BBBC(v12, v13);
        Data.hash(into:)(v33, v12, v13);
        v14 = Hasher._finalize()();
        result = sub_10001BC14(v12, v13);
        v15 = v14 & v9;
        if (v4 >= (uint64_t)v10)
          break;
        if (v15 < v10)
          goto LABEL_11;
LABEL_12:
        v16 = *(_QWORD *)(a2 + 48);
        v17 = (_OWORD *)(v16 + 16 * v4);
        v18 = (_OWORD *)(v16 + 16 * v7);
        if (v4 != v7 || v17 >= v18 + 1)
          *v17 = *v18;
        v19 = *(_QWORD *)(a2 + 56);
        v20 = a3(0);
        v21 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
        v22 = v21 * v4;
        result = v19 + v21 * v4;
        v23 = v21 * v7;
        v24 = v19 + v21 * v7;
        v25 = v24 + v21;
        if (v22 < v23 || result >= v25)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v24, 1, v20);
        }
        else
        {
          v4 = v7;
          if (v22 == v23)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result, v24);
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_21;
      }
      if (v15 < v10)
        goto LABEL_6;
LABEL_11:
      if (v4 < (uint64_t)v15)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v27 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v28 = *v27;
    v29 = (-1 << v4) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v5 + 8 * (result >> 6));
    v29 = *v27;
    v28 = (-1 << result) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100105378(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for CodingUserInfoKey(0);
  v37 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin();
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v36 = (result + 1) & v11;
      v12 = *(_QWORD *)(v37 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v35(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40), v4, &protocol witness table for CodingUserInfoKey);
        result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v23 = v22 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v23 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v23, 1, v4);
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v24 = *(_QWORD *)(a2 + 56);
            v25 = (_OWORD *)(v24 + 32 * a1);
            v26 = (_OWORD *)(v24 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v25 >= v26 + 2))
            {
              v27 = v26[1];
              *v25 = *v26;
              v25[1] = v27;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v28;
    v30 = (-1 << a1) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001055FC(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_BYTE *)(v26 + a1);
            v28 = (_BYTE *)(v26 + v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10010589C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v38 = (result + 1) & v11;
      v12 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12 * v10;
        v16 = v13;
        v37(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v17 = *(_QWORD *)(a2 + 40);
        v18 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v4, v18);
        result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        v13 = v16;
        v20 = v19 & v16;
        if (a1 >= (uint64_t)v38)
        {
          if (v20 >= v38 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v23 = *(_QWORD *)(a2 + 48);
            v24 = v12 * a1;
            v25 = v23 + v12 * a1;
            v26 = v23 + v15;
            if (v12 * a1 < v15 || v25 >= v26 + v12)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v4);
            }
            else if (v24 != v15)
            {
              swift_arrayInitWithTakeBackToFront(v25, v26);
            }
            v27 = *(_QWORD *)(a2 + 56);
            result = v27 + v24;
            v28 = v27 + v15;
            if (v24 < v15 || result >= v28 + v12)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v28, 1, v4);
              a1 = v10;
              v8 = v14;
              v13 = v16;
            }
            else
            {
              a1 = v10;
              v29 = v24 == v15;
              v8 = v14;
              v13 = v16;
              if (!v29)
              {
                result = swift_arrayInitWithTakeBackToFront(result, v28);
                v13 = v16;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v38 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100105B58(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100105D30(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100105FD0(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD v14[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
      Hasher.init(_seed:)(v14);
      __asm { BR              X8 }
    }
    v8 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v9 = *v8;
    v10 = (-1 << v3) - 1;
  }
  else
  {
    v8 = (uint64_t *)(v4 + 8 * (result >> 6));
    v10 = *v8;
    v9 = (-1 << result) - 1;
  }
  *v8 = v10 & v9;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x100106284);
  }
  *(_QWORD *)(a2 + 16) = v13;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1001062A4(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  unint64_t v40;
  uint64_t (*v41)(uint64_t);
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a4;
  v43 = a5;
  v41 = a3;
  v7 = a3(0);
  v44 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v10 = (char *)&v39 - v9;
  v11 = a2 + 64;
  v12 = -1 << *(_BYTE *)(a2 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(a2 + 64 + 8 * (v13 >> 6))) != 0)
  {
    v14 = ~v12;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v12);
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v40 = (result + 1) & v14;
      v15 = *(_QWORD *)(v44 + 72);
      v39 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      v16 = v14;
      do
      {
        v17 = v11;
        v18 = v15;
        v19 = v15 * v13;
        v20 = v16;
        v39(v10, *(_QWORD *)(a2 + 48) + v15 * v13, v7);
        v21 = *(_QWORD *)(a2 + 40);
        v22 = sub_100006204(v42, v41, v43);
        v23 = dispatch thunk of Hashable._rawHashValue(seed:)(v21, v7, v22);
        result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v10, v7);
        v16 = v20;
        v24 = v23 & v20;
        if (a1 >= (uint64_t)v40)
        {
          if (v24 >= v40 && a1 >= (uint64_t)v24)
          {
LABEL_16:
            v27 = *(_QWORD *)(a2 + 48);
            v15 = v18;
            result = v27 + v18 * a1;
            v28 = v27 + v19;
            if (v18 * a1 < v19 || result >= v28 + v18)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v28, 1, v7);
              v16 = v20;
              v11 = v17;
            }
            else
            {
              v29 = v18 * a1 == v19;
              v11 = v17;
              if (!v29)
              {
                result = swift_arrayInitWithTakeBackToFront(result, v28);
                v16 = v20;
              }
            }
            v30 = *(_QWORD *)(a2 + 56);
            v31 = (_QWORD *)(v30 + 8 * a1);
            v32 = (_QWORD *)(v30 + 8 * v13);
            if (a1 != v13 || (a1 = v13, v31 >= v32 + 1))
            {
              *v31 = *v32;
              a1 = v13;
            }
            goto LABEL_5;
          }
        }
        else if (v24 >= v40 || a1 >= (uint64_t)v24)
        {
          goto LABEL_16;
        }
        v11 = v17;
        v15 = v18;
LABEL_5:
        v13 = (v13 + 1) & v16;
      }
      while (((*(_QWORD *)(v11 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    v33 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v34 = *v33;
    v35 = (-1 << a1) - 1;
  }
  else
  {
    v33 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v35 = *v33;
    v34 = (-1 << a1) - 1;
  }
  *v33 = v35 & v34;
  v36 = *(_QWORD *)(a2 + 16);
  v37 = __OFSUB__(v36, 1);
  v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10010653C(int64_t a1, uint64_t a2)
{
  return sub_100106560(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

unint64_t sub_100106560(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD);
  void (*v47)(char *, unint64_t, uint64_t);
  unint64_t v48;
  uint64_t (*v49)(uint64_t);
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a6;
  v50 = a4;
  v51 = a5;
  v49 = a3;
  v8 = a3(0);
  v52 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v11 = (char *)&v45 - v10;
  v12 = a2 + 64;
  v13 = -1 << *(_BYTE *)(a2 + 32);
  v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(_QWORD *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    v15 = ~v13;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v13);
    if ((*(_QWORD *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      v48 = (result + 1) & v15;
      v16 = *(_QWORD *)(v52 + 72);
      v47 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
      v17 = v15;
      do
      {
        v18 = v12;
        v19 = v16;
        v20 = v16 * v14;
        v47(v11, *(_QWORD *)(a2 + 48) + v16 * v14, v8);
        v21 = v17;
        v22 = *(_QWORD *)(a2 + 40);
        v23 = sub_100006204(v50, v49, v51);
        v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v8, v23);
        result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v11, v8);
        v25 = v24 & v21;
        v17 = v21;
        if (a1 >= (uint64_t)v48)
        {
          if (v25 >= v48 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            v28 = *(_QWORD *)(a2 + 48);
            v29 = v28 + v19 * a1;
            v30 = v28 + v20;
            if (v19 * a1 < v20 || v29 >= v30 + v19)
            {
              swift_arrayInitWithTakeFrontToBack(v29, v30, 1, v8);
            }
            else if (v19 * a1 != v20)
            {
              swift_arrayInitWithTakeBackToFront(v29, v30);
            }
            v31 = *(_QWORD *)(a2 + 56);
            v32 = v46(0);
            v33 = *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72);
            v34 = v33 * a1;
            result = v31 + v33 * a1;
            v35 = v33 * v14;
            v36 = v31 + v33 * v14;
            v37 = v36 + v33;
            v38 = v34 < v35 || result >= v37;
            v12 = v18;
            if (v38)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v36, 1, v32);
              a1 = v14;
              v17 = v21;
            }
            else
            {
              a1 = v14;
              v17 = v21;
              if (v34 != v35)
              {
                result = swift_arrayInitWithTakeBackToFront(result, v36);
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v48 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        v12 = v18;
LABEL_5:
        v14 = (v14 + 1) & v17;
        v16 = v19;
      }
      while (((*(_QWORD *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v40 = *v39;
    v41 = (-1 << a1) - 1;
  }
  else
  {
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v41 = *v39;
    v40 = (-1 << a1) - 1;
  }
  *v39 = v41 & v40;
  v42 = *(_QWORD *)(a2 + 16);
  v43 = __OFSUB__(v42, 1);
  v44 = v42 - 1;
  if (v43)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v44;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10010682C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for MACAddress(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100106ACC(int64_t a1, uint64_t a2)
{
  return sub_100106560(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

unint64_t sub_100106AF0(int64_t a1, uint64_t a2)
{
  return sub_1001062A4(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

void sub_100106B0C(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 16 * v3);
            v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_100106CBC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100106E90(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  uint64_t v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  _QWORD v57[9];

  v4 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for BeaconSharingSessionContext(0);
  v7 = *(_QWORD *)(v48 - 8);
  v8 = __chkstk_darwin(v48);
  v55 = (unsigned __int8 *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v56 = (uint64_t)&v48 - v11;
  v12 = a2 + 64;
  v13 = -1 << *(_BYTE *)(a2 + 32);
  v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(_QWORD *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    v15 = ~v13;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v13);
    if ((*(_QWORD *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      v52 = (result + 1) & v15;
      v53 = v15;
      v16 = *(_QWORD *)(v7 + 72);
      v17 = v48;
      v18 = (uint64_t)v55;
      v51 = a2 + 64;
      v54 = v16;
      do
      {
        v19 = v16 * v14;
        v20 = v56;
        sub_10005972C(*(_QWORD *)(a2 + 48) + v16 * v14, v56, type metadata accessor for BeaconSharingSessionContext);
        Hasher.init(_seed:)(v57);
        sub_10005972C(v20, v18, type metadata accessor for BeaconSharingSessionContext);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v17);
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            v22 = *v55;
            v49 = a1;
            v23 = a2;
            v24 = v4;
            v25 = *((_QWORD *)v55 + 1);
            v26 = *((_QWORD *)v55 + 2);
            Hasher._combine(_:)(1uLL);
            v27 = v22;
            v18 = (uint64_t)v55;
            Hasher._combine(_:)(v27);
            swift_bridgeObjectRetain(v26);
            v28 = v25;
            v4 = v24;
            a2 = v23;
            a1 = v49;
            String.hash(into:)(v57, v28, v26);
            v29 = v26;
            v17 = v48;
            swift_bridgeObjectRelease_n(v29, 2);
            goto LABEL_12;
          }
          v30 = v50;
          (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v6, v18, v4);
          v31 = 2;
        }
        else
        {
          v30 = v50;
          (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v6, v18, v4);
          v31 = 0;
        }
        Hasher._combine(_:)(v31);
        v32 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v57, v4, v32);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
LABEL_12:
        v33 = Hasher._finalize()();
        result = sub_1000126B0(v56, type metadata accessor for BeaconSharingSessionContext);
        v34 = v33 & v53;
        v35 = v53;
        if (a1 >= (uint64_t)v52)
        {
          v16 = v54;
          if (v34 >= v52 && a1 >= v34)
          {
LABEL_18:
            v36 = *(_QWORD *)(a2 + 48);
            result = v36 + v16 * a1;
            v37 = v36 + v19;
            if (v16 * a1 < v19 || result >= v37 + v16)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v37, 1, v17);
              v16 = v54;
              v12 = v51;
            }
            else
            {
              v38 = v16 * a1 == v19;
              v12 = v51;
              if (!v38)
              {
                result = swift_arrayInitWithTakeBackToFront(result, v37);
                v16 = v54;
              }
            }
            v39 = *(_QWORD *)(a2 + 56);
            v40 = (_QWORD *)(v39 + 8 * a1);
            v41 = (_QWORD *)(v39 + 8 * v14);
            if (a1 != v14 || (a1 = v14, v40 >= v41 + 1))
            {
              *v40 = *v41;
              a1 = v14;
            }
            goto LABEL_5;
          }
        }
        else
        {
          v16 = v54;
          if (v34 >= v52 || a1 >= v34)
            goto LABEL_18;
        }
        v12 = v51;
LABEL_5:
        v14 = (v14 + 1) & v35;
      }
      while (((*(_QWORD *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    v42 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v43 = *v42;
    v44 = (-1 << a1) - 1;
  }
  else
  {
    v42 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v44 = *v42;
    v43 = (-1 << a1) - 1;
  }
  *v42 = v44 & v43;
  v45 = *(_QWORD *)(a2 + 16);
  v46 = __OFSUB__(v45, 1);
  v47 = v45 - 1;
  if (v46)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v47;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10010729C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD v33[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 24 * v6);
        v10 = *v9;
        v11 = *((_QWORD *)v9 + 1);
        v12 = *((_QWORD *)v9 + 2);
        Hasher.init(_seed:)(v33);
        Hasher._combine(_:)(v10);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v33, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v14 < v8)
          goto LABEL_11;
LABEL_12:
        v15 = *(_QWORD *)(a2 + 48);
        v16 = v15 + 24 * v3;
        v17 = (__int128 *)(v15 + 24 * v6);
        if (v3 != v6 || v16 >= (unint64_t)v17 + 24)
        {
          v18 = *v17;
          *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
          *(_OWORD *)v16 = v18;
        }
        v19 = *(_QWORD *)(a2 + 56);
        v20 = type metadata accessor for UUID(0);
        v21 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
        v22 = v21 * v3;
        result = v19 + v21 * v3;
        v23 = v21 * v6;
        v24 = v19 + v21 * v6;
        v25 = v24 + v21;
        if (v22 < v23 || result >= v25)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v24, 1, v20);
        }
        else
        {
          v3 = v6;
          if (v22 == v23)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v14 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v14)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v27 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v28 = *v27;
    v29 = (-1 << v3) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v4 + 8 * (result >> 6));
    v29 = *v27;
    v28 = (-1 << result) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001074C0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v23);
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100107678(int64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;

  v39 = a3;
  v5 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v42 = a2 + 64;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    v12 = v42;
    if ((*(_QWORD *)(v42 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (result + 1) & v11;
      v14 = *(_QWORD *)(v41 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      do
      {
        v15 = v14 * v10;
        v40(v8, *(_QWORD *)(a2 + 48) + v14 * v10, v5);
        v16 = *(_QWORD *)(a2 + 40);
        v17 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v5, v17);
        result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v8, v5);
        v19 = v18 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v19 < v13 || a1 < (uint64_t)v19)
            goto LABEL_6;
        }
        else if (v19 < v13 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        v22 = *(_QWORD *)(a2 + 48);
        v23 = v22 + v14 * a1;
        v24 = v22 + v15;
        if (v14 * a1 < v15 || v23 >= v24 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1, v5);
        }
        else if (v14 * a1 != v15)
        {
          swift_arrayInitWithTakeBackToFront(v23, v24);
        }
        v25 = *(_QWORD *)(a2 + 56);
        v26 = sub_10001A9A8(v39);
        v27 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72);
        v28 = v27 * a1;
        result = v25 + v27 * a1;
        v29 = v27 * v10;
        v30 = v25 + v27 * v10;
        v31 = v30 + v27;
        if (v28 < v29 || result >= v31)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v30, 1, v26);
        }
        else
        {
          a1 = v10;
          if (v28 == v29)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result, v30);
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
        v12 = v42;
      }
      while (((*(_QWORD *)(v42 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v33 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v34 = *v33;
    v35 = (-1 << a1) - 1;
  }
  else
  {
    v33 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v35 = *v33;
    v34 = (-1 << a1) - 1;
  }
  *v33 = v35 & v34;
  v36 = *(_QWORD *)(a2 + 16);
  v37 = __OFSUB__(v36, 1);
  v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10010791C(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD v33[9];

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v6);
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      while (1)
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v7);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v33);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v33, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v9;
        if (v4 >= (uint64_t)v10)
          break;
        if (v15 < v10)
          goto LABEL_11;
LABEL_12:
        v16 = *(_QWORD *)(a2 + 48);
        v17 = (_OWORD *)(v16 + 16 * v4);
        v18 = (_OWORD *)(v16 + 16 * v7);
        if (v4 != v7 || v17 >= v18 + 1)
          *v17 = *v18;
        v19 = *(_QWORD *)(a2 + 56);
        v20 = a3(0);
        v21 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
        v22 = v21 * v4;
        result = v19 + v21 * v4;
        v23 = v21 * v7;
        v24 = v19 + v21 * v7;
        v25 = v24 + v21;
        if (v22 < v23 || result >= v25)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v24, 1, v20);
        }
        else
        {
          v4 = v7;
          if (v22 == v23)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_21;
      }
      if (v15 < v10)
        goto LABEL_6;
LABEL_11:
      if (v4 < (uint64_t)v15)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v27 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v28 = *v27;
    v29 = (-1 << v4) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v5 + 8 * (result >> 6));
    v29 = *v27;
    v28 = (-1 << result) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100107B24(uint64_t a1, uint64_t a2)
{
  return sub_100107B30(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

unint64_t sub_100107B30(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD v49[9];

  v44 = a3;
  v48 = type metadata accessor for BeaconIdentifier(0);
  v4 = *(_QWORD *)(v48 - 8);
  result = __chkstk_darwin(v48);
  v47 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (v6 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = v6;
    result = _HashTable.previousHole(before:)(v6, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (result + 1) & v11;
      v14 = *(_QWORD *)(v4 + 72);
      v15 = v11;
      v45 = v14;
      v46 = a2 + 64;
      v16 = (uint64_t)v47;
      do
      {
        v17 = v14 * v10;
        sub_10005972C(*(_QWORD *)(a2 + 48) + v14 * v10, v16, type metadata accessor for BeaconIdentifier);
        v18 = a2;
        Hasher.init(_seed:)(v49);
        v19 = v13;
        v20 = v15;
        v21 = type metadata accessor for UUID(0);
        v22 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v49, v21, v22);
        v23 = v21;
        v15 = v20;
        v13 = v19;
        dispatch thunk of Hashable.hash(into:)(v49, v23, v22);
        v24 = Hasher._finalize()();
        result = sub_1000126B0(v16, type metadata accessor for BeaconIdentifier);
        v25 = v24 & v15;
        v26 = v12;
        if (v12 >= (uint64_t)v19)
        {
          if (v25 < v19)
          {
            v8 = v46;
            a2 = v18;
          }
          else
          {
            v8 = v46;
            a2 = v18;
            if (v12 >= v25)
              goto LABEL_13;
          }
        }
        else
        {
          v8 = v46;
          a2 = v18;
          if (v25 >= v13 || v12 >= v25)
          {
LABEL_13:
            v27 = *(_QWORD *)(a2 + 48);
            v14 = v45;
            v28 = v27 + v45 * v12;
            v29 = v27 + v17;
            if (v45 * v12 < v17 || v28 >= v29 + v45)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v29, 1, v48);
            }
            else if (v45 * v12 != v17)
            {
              swift_arrayInitWithTakeBackToFront(v28, v29);
            }
            v30 = *(_QWORD *)(a2 + 56);
            v31 = v44(0);
            v32 = *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72);
            v33 = v32 * v12;
            result = v30 + v32 * v12;
            v34 = v32 * v10;
            v35 = v30 + v32 * v10;
            v36 = v35 + v32;
            if (v33 < v34 || result >= v36)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v35, 1, v31);
              v26 = v10;
            }
            else
            {
              v26 = v10;
              if (v33 != v34)
              {
                result = swift_arrayInitWithTakeBackToFront(result, v35);
                v26 = v10;
              }
            }
            goto LABEL_6;
          }
        }
        v14 = v45;
LABEL_6:
        v12 = v26;
        v10 = (v10 + 1) & v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v38 = (uint64_t *)(v8 + 8 * ((unint64_t)v12 >> 6));
    v39 = *v38;
    v40 = (-1 << v12) - 1;
  }
  else
  {
    v38 = (uint64_t *)(v8 + 8 * (v6 >> 6));
    v40 = *v38;
    v39 = (-1 << v6) - 1;
  }
  *v38 = v40 & v39;
  v41 = *(_QWORD *)(a2 + 16);
  v42 = __OFSUB__(v41, 1);
  v43 = v41 - 1;
  if (v42)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v43;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100107E5C(int64_t a1, uint64_t a2)
{
  return sub_100106560(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID, type metadata accessor for BeaconState);
}

void sub_100107E80(unint64_t a1, uint64_t a2)
{
  sub_100107E8C(a1, a2, type metadata accessor for BeaconStoreFileRecord);
}

void sub_100107E8C(unint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  id v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;

  v4 = a1;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (a1 + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    v10 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v6);
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v11 = (v10 + 1) & v9;
      do
      {
        v12 = *(_QWORD *)(a2 + 40);
        v13 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v7);
        v14 = NSObject._rawHashValue(seed:)(v12);

        v15 = v14 & v9;
        if (v4 >= (uint64_t)v11)
        {
          if (v15 < v11 || v4 < v15)
            goto LABEL_6;
        }
        else if (v15 < v11 && v4 < v15)
        {
          goto LABEL_6;
        }
        v18 = *(_QWORD *)(a2 + 48);
        v19 = (_QWORD *)(v18 + 8 * v4);
        v20 = (_QWORD *)(v18 + 8 * v7);
        if (v4 != v7 || v19 >= v20 + 1)
          *v19 = *v20;
        v21 = *(_QWORD *)(a2 + 56);
        v22 = a3(0);
        v23 = *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72);
        v24 = v23 * v4;
        v25 = v21 + v23 * v4;
        v26 = v23 * v7;
        v27 = v21 + v23 * v7;
        v28 = v27 + v23;
        if (v24 < v26 || v25 >= v28)
        {
          swift_arrayInitWithTakeFrontToBack(v25, v27, 1, v22);
        }
        else
        {
          v4 = v7;
          if (v24 == v26)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
      }
      while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    v30 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v31 = *v30;
    v32 = (-1 << v4) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v5 + 8 * (a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_100108070(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        sub_10001BBBC(v10, v11);
        Data.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = sub_10001BC14(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100108254(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v39 = (result + 1) & v11;
      v12 = *(_QWORD *)(v40 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v38(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v39)
        {
          if (v21 >= v39 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = v26 + 40 * a1;
            v28 = (__int128 *)(v26 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 40))
            {
              v29 = *v28;
              v30 = v28[1];
              *(_QWORD *)(v27 + 32) = *((_QWORD *)v28 + 4);
              *(_OWORD *)v27 = v29;
              *(_OWORD *)(v27 + 16) = v30;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v39 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v31;
    v33 = (-1 << a1) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v33 = *v31;
    v32 = (-1 << a1) - 1;
  }
  *v31 = v33 & v32;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100108500(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for MACAddress(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_OWORD *)(v26 + 16 * a1);
            v28 = (_OWORD *)(v26 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001087A0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_OWORD *)(v15 + 16 * v3);
            v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100108934(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 24 * v6);
        v10 = *v9;
        v11 = *((_QWORD *)v9 + 1);
        v12 = *((_QWORD *)v9 + 2);
        Hasher.init(_seed:)(v28);
        Hasher._combine(_:)(v10);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v28, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = v15 + 24 * v3;
          v17 = (__int128 *)(v15 + 24 * v6);
          if (v3 != v6 || v16 >= (unint64_t)v17 + 24)
          {
            v18 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v18;
          }
          v19 = *(_QWORD *)(a2 + 56);
          v20 = (_QWORD *)(v19 + 8 * v3);
          v21 = (_QWORD *)(v19 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
          {
            *v20 = *v21;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100108B30(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v4 = sub_10001A9A8(&qword_1010EF7C0);
  v40 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v41 = a2 + 64;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v8);
    v11 = v41;
    if ((*(_QWORD *)(v41 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (result + 1) & v10;
      v13 = *(_QWORD *)(v40 + 72);
      v39 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      do
      {
        v14 = v13 * v9;
        v39(v7, *(_QWORD *)(a2 + 48) + v13 * v9, v4);
        v15 = *(_QWORD *)(a2 + 40);
        v16 = sub_10010F990();
        v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v4, v16);
        result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        v18 = v17 & v10;
        if (a1 >= (uint64_t)v12)
        {
          if (v18 < v12 || a1 < (uint64_t)v18)
            goto LABEL_6;
        }
        else if (v18 < v12 && a1 < (uint64_t)v18)
        {
          goto LABEL_6;
        }
        v21 = *(_QWORD *)(a2 + 48);
        v22 = v21 + v13 * a1;
        v23 = v21 + v14;
        if (v13 * a1 < v14 || v22 >= v23 + v13)
        {
          swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v4);
        }
        else if (v13 * a1 != v14)
        {
          swift_arrayInitWithTakeBackToFront(v22, v23);
        }
        v24 = *(_QWORD *)(a2 + 56);
        v25 = type metadata accessor for BeaconScanner.AISLookupState(0);
        v26 = *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72);
        v27 = v26 * a1;
        result = v24 + v26 * a1;
        v28 = v26 * v9;
        v29 = v24 + v26 * v9;
        v30 = v29 + v26;
        if (v27 < v28 || result >= v30)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v29, 1, v25);
        }
        else
        {
          a1 = v9;
          if (v27 == v28)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result, v29);
        }
        a1 = v9;
LABEL_6:
        v9 = (v9 + 1) & v10;
        v11 = v41;
      }
      while (((*(_QWORD *)(v41 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    v32 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v33 = *v32;
    v34 = (-1 << a1) - 1;
  }
  else
  {
    v32 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v34 = *v32;
    v33 = (-1 << a1) - 1;
  }
  *v32 = v34 & v33;
  v35 = *(_QWORD *)(a2 + 16);
  v36 = __OFSUB__(v35, 1);
  v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v37;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100108DBC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_WORD *)(v17 + 2 * v3);
          v19 = (_WORD *)(v17 + 2 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100108F90(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = v18 + 24 * v3;
          v20 = (__int128 *)(v18 + 24 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= (unint64_t)v20 + 24))
          {
            v9 = *v20;
            *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
            *(_OWORD *)v19 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100109178(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v37 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  v4 = *(_QWORD *)(v37 - 8);
  result = __chkstk_darwin(v37);
  v7 = (unsigned __int8 *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v36 = (result + 1) & v11;
      v12 = *(_QWORD *)(v4 + 72);
      v38 = v12;
      do
      {
        v13 = v8;
        v14 = v12 * v10;
        sub_10005972C(*(_QWORD *)(a2 + 48) + v12 * v10, (uint64_t)v7, type metadata accessor for ShareAttemptTracker.AttemptKey);
        Hasher.init(_seed:)(v39);
        Hasher._combine(_:)(*v7);
        v15 = type metadata accessor for UUID(0);
        v16 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v39, v15, v16);
        v17 = Hasher._finalize()();
        result = sub_1000126B0((uint64_t)v7, type metadata accessor for ShareAttemptTracker.AttemptKey);
        v18 = v17 & v11;
        if (a1 >= (uint64_t)v36)
        {
          if (v18 < v36)
          {
            v8 = v13;
            v12 = v38;
          }
          else
          {
            v8 = v13;
            v12 = v38;
            if (a1 >= v18)
              goto LABEL_12;
          }
        }
        else
        {
          v8 = v13;
          v12 = v38;
          if (v18 >= v36 || a1 >= v18)
          {
LABEL_12:
            v19 = *(_QWORD *)(a2 + 48);
            v20 = v19 + v12 * a1;
            v21 = v19 + v14;
            if (v12 * a1 < v14 || v20 >= v21 + v12)
            {
              swift_arrayInitWithTakeFrontToBack(v20, v21, 1, v37);
            }
            else if (v12 * a1 != v14)
            {
              swift_arrayInitWithTakeBackToFront(v20, v21);
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = type metadata accessor for Date(0);
            v24 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72);
            v25 = v24 * a1;
            result = v22 + v24 * a1;
            v26 = v24 * v10;
            v27 = v22 + v24 * v10;
            v28 = v27 + v24;
            if (v25 < v26 || result >= v28)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v27, 1, v23);
              a1 = v10;
              v12 = v38;
            }
            else
            {
              a1 = v10;
              v12 = v38;
              if (v25 != v26)
              {
                result = swift_arrayInitWithTakeBackToFront(result, v27);
                a1 = v10;
              }
            }
          }
        }
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100109488(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v39 = type metadata accessor for BeaconKeyManager.FileKey(0);
  v4 = *(_QWORD *)(v39 - 8);
  result = __chkstk_darwin(v39);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v38 = a2;
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, v8, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v12 = (result + 1) & v11;
      v13 = *(_QWORD *)(v4 + 72);
      v14 = v11;
      a2 = v38;
      while (1)
      {
        v15 = v14;
        v16 = v8;
        v17 = *(_QWORD *)(a2 + 48);
        v18 = v13;
        v19 = v13 * v10;
        sub_10005972C(v17 + v13 * v10, (uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
        Hasher.init(_seed:)(v40);
        v20 = type metadata accessor for UUID(0);
        v21 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v40, v20, v21);
        if (v7[*(int *)(v39 + 20)])
        {
          if (v7[*(int *)(v39 + 20)] == 1)
          {
            v22 = 0xE900000000000079;
            v23 = 0x7261646E6F636553;
          }
          else
          {
            v22 = 0xEF736E6F69746163;
            v23 = 0x6F4C657275636553;
          }
        }
        else
        {
          v22 = 0xE700000000000000;
          v23 = 0x7972616D697250;
        }
        v8 = v16;
        String.hash(into:)(v40, v23, v22);
        swift_bridgeObjectRelease();
        v24 = Hasher._finalize()();
        result = sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
        v14 = v15;
        v25 = v24 & v15;
        if (a1 >= (uint64_t)v12)
        {
          v13 = v18;
          if (v25 < v12)
          {
            a2 = v38;
          }
          else
          {
            a2 = v38;
            if (a1 >= v25)
              goto LABEL_17;
          }
        }
        else
        {
          v13 = v18;
          a2 = v38;
          if (v25 >= v12 || a1 >= v25)
          {
LABEL_17:
            v26 = *(_QWORD *)(a2 + 48);
            result = v26 + v13 * a1;
            v27 = v26 + v19;
            if (v13 * a1 < v19 || result >= v27 + v13)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v27, 1, v39);
            }
            else if (v13 * a1 != v19)
            {
              result = swift_arrayInitWithTakeBackToFront(result, v27);
            }
            v28 = *(_QWORD *)(a2 + 56);
            v29 = (_QWORD *)(v28 + 8 * a1);
            v30 = (_QWORD *)(v28 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v29 >= v30 + 1))
            {
              *v29 = *v30;
              a1 = v10;
            }
          }
        }
        v10 = (v10 + 1) & v15;
        if (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          goto LABEL_28;
      }
    }
    a2 = v38;
LABEL_28:
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v33 = *v31;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v31;
    v33 = (-1 << a1) - 1;
  }
  *v31 = v32 & v33;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001097C8(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_OWORD *)(v26 + 16 * a1);
            v28 = (_OWORD *)(v26 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100109A68(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10010C140(a1, a2, a3, a4, (void (*)(void))sub_100A99944, (void (*)(void))sub_100A846F8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A97D68);
}

uint64_t sub_100109A84(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  return sub_100109E68(a1, a2, a3, a4, (void (*)(void))sub_100A99950, (void (*)(void))sub_100A84704, type metadata accessor for MultipartAccessoryPairingInfo, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_100A97D6C);
}

uint64_t sub_100109AA8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100518E4C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        return sub_100004084(a1, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, (uint64_t *)&unk_1010F9890);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100A99964();
      goto LABEL_7;
    }
    sub_100A84718(v15, a4 & 1);
    v22 = sub_100518E4C(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A97D78(v12, a2, a3, a1, v18);
      return sub_10001BBBC(a2, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

_OWORD *sub_100109BF0(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100518E58(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
        return sub_10010F90C(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100A99BB4();
      goto LABEL_7;
    }
    sub_100A84AC0(v13, a3 & 1);
    v19 = sub_100518E58(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10010F9DC(a2, (uint64_t)v21);
      return sub_100A97E14(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_100109D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_100518DA0(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        swift_bridgeObjectRelease();
        *v21 = a1;
        v21[1] = a2;
        return;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_100A99D98();
      goto LABEL_7;
    }
    sub_100A84DD4(v17, a5 & 1);
    v22 = sub_100518DA0(a3, a4);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A97E8C(v14, a3, a4, a1, a2, v20);
      swift_bridgeObjectRetain(a4);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100109E68(uint64_t a1, uint64_t a2, unint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(_QWORD), void (*a8)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  char v29;

  v11 = v8;
  v16 = *v8;
  v18 = sub_100518E4C(a2, a3);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a4 & 1) != 0)
    {
LABEL_7:
      v24 = *v11;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = *(_QWORD *)(v24 + 56);
        v26 = a7(0);
        return sub_10010FA18(a1, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v18, a7);
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v28 = sub_100518E4C(a2, a3);
    if ((v22 & 1) == (v29 & 1))
    {
      v18 = v28;
      v24 = *v11;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a8(v18, a2, a3, a1, v24);
      return sub_10001BBBC(a2, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

uint64_t sub_100109FD4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100518EE0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for BookmarkMetaData(0);
        return sub_10010FA18(a1, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, type metadata accessor for BookmarkMetaData);
      }
      return sub_100A97F80(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100A9A1A4();
      goto LABEL_7;
    }
    sub_100A859AC(v13, a3 & 1);
    v20 = sub_100518EE0(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100A97F80(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for KeyDropInterface.KeyType);
  __break(1u);
  return result;
}

_OWORD *sub_10010A0FC(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CodingUserInfoKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100518F54(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(v20[7] + 32 * v14);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
        return sub_10010F90C(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100A9A3CC();
      goto LABEL_7;
    }
    sub_100A85F28(v17, a3 & 1);
    v23 = sub_100518F54(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100A9800C(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

int64_t sub_10010A278(unsigned int a1, uint64_t a2, char a3)
{
  return sub_10010B008(a1, a2, a3, (uint64_t (*)(void))sub_100A9A608, (void (*)(void))sub_100A862AC, (uint64_t (*)(unint64_t, char *, _QWORD, uint64_t))sub_100A980AC);
}

uint64_t sub_10010A294(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9A614, (void (*)(void))sub_100A862B8, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

void sub_10010A2B0(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_100518FA4((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];

        *(_QWORD *)(v16 + 8 * v9) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100A9A628();
      goto LABEL_7;
    }
    sub_100A862DC(v12, a3 & 1);
    v17 = sub_100518FA4((uint64_t)a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A980BC(v9, (uint64_t)a2, a1, v15);
      v19 = a2;
      return;
    }
  }
  v20 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
}

id sub_10010A3DC(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id result;
  unint64_t v19;
  char v20;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_100518FA4((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];
        v17 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
        return (id)sub_10010FA18(a1, v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v9, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100A9A634();
      goto LABEL_7;
    }
    sub_100A862E8(v12, a3 & 1);
    v19 = sub_100518FA4((uint64_t)a2);
    if ((v13 & 1) == (v20 & 1))
    {
      v9 = v19;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A980C0(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  v21 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

uint64_t sub_10010A51C(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100518FF0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return sub_100A9814C(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100A9A648();
      goto LABEL_7;
    }
    sub_100A862FC(v13, a3 & 1);
    v19 = sub_100518FF0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100A9814C(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconObservation.ObservationType);
  __break(1u);
  return result;
}

void sub_10010A630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  sub_10010C8BC(a1, a2, a3, a4, a5, (void (*)(void))sub_100A9A8B4, (void (*)(void))sub_100A868DC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A981D8);
}

uint64_t sub_10010A64C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100003FB0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v20[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100A9AA68();
      goto LABEL_7;
    }
    sub_100A86BBC(v17, a3 & 1);
    v22 = sub_100003FB0(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v20[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100A981DC(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10010A7C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10010DE14(a1, a2, a3, a4, sub_100A9ACC4, (void (*)(void))sub_100A86F98, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A97D68);
}

void sub_10010A7E4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100518DA0(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
        sub_10010F90C(a1, v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100A9ACD0();
      goto LABEL_7;
    }
    sub_100A86FA4(v15, a4 & 1);
    v20 = sub_100518DA0(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A98288(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010A914(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for BeaconIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1005191EC(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      v21 = type metadata accessor for ObservedAdvertisement(0);
      return sub_10010FA18(a1, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, type metadata accessor for ObservedAdvertisement);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100A9AEAC();
    goto LABEL_7;
  }
  sub_100A872AC(v16, a3 & 1);
  v23 = sub_1005191EC(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v13 = v23;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_10005972C(a2, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
  return sub_100A982F0(v13, (uint64_t)v10, a1, v19);
}

_OWORD *sub_10010AA84(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1005191F8((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
        return sub_10010F90C(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100A9B144();
      goto LABEL_7;
    }
    sub_100A87708(v12, a3 & 1);
    v18 = sub_1005191F8((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A983A8(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  v20 = sub_10000F4A0(0, &qword_1010F7800, NSObject_ptr);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_10010ABB4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9B308, (void (*)(void))sub_100A879D8, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

uint64_t sub_10010ABD0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9B4AC, (void (*)(void))sub_100A87F54, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

void sub_10010ABEC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10010DE14(a1, a2, a3, a4, sub_100A9B4B8, (void (*)(void))sub_100A882FC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A97D68);
}

void sub_10010AC08(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_100518DA0(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 16 * v14;
        sub_10010F8FC(*(id *)v21, *(_BYTE *)(v21 + 8));
        *(_QWORD *)v21 = a1;
        *(_BYTE *)(v21 + 8) = a2;
        return;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_100A9B4C4();
      goto LABEL_7;
    }
    sub_100A88308(v17, a5 & 1);
    v22 = sub_100518DA0(a3, a4);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A98410(v14, a3, a4, a1, a2, v20);
      swift_bridgeObjectRetain(a4);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010AD50(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100518D70(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for Date(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return sub_100A98464(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100A9B690();
      goto LABEL_7;
    }
    sub_100A88624(v13, a3 & 1);
    v20 = sub_100518D70(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100A98464(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WildModeObservationState);
  __break(1u);
  return result;
}

uint64_t sub_10010AE74(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9B8AC, (void (*)(void))sub_100A88A78, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

uint64_t sub_10010AE90(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1005193C8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100A9B8B8();
    goto LABEL_7;
  }
  sub_100A88A84(v17, a3 & 1);
  v23 = sub_1005193C8(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100A984F0(v14, (uint64_t)v11, a1, v20);
}

int64_t sub_10010AFEC(unsigned int a1, uint64_t a2, char a3)
{
  return sub_10010B008(a1, a2, a3, (uint64_t (*)(void))sub_100A9B8E0, (void (*)(void))sub_100A88E4C, (uint64_t (*)(unint64_t, char *, _QWORD, uint64_t))sub_100A980AC);
}

int64_t sub_10010B008(unsigned int a1, uint64_t a2, char a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, char *, _QWORD, uint64_t))
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  int64_t result;
  char v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t (*v27)(unint64_t, char *, _QWORD, uint64_t);
  unsigned int v28;

  v26 = a5;
  v27 = a6;
  v8 = v6;
  v28 = a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  v17 = sub_100003FB0(a2);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  result = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = *(_QWORD *)(v15 + 24);
  if (v22 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v23 = *v8;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(*(_QWORD *)(v23 + 56) + v17) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= result && (a3 & 1) == 0)
  {
    result = a4();
    goto LABEL_7;
  }
  v26();
  result = sub_100003FB0(a2);
  if ((v21 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return result;
  }
  v17 = result;
  v23 = *v8;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  return v27(v17, v14, v28, v23);
}

uint64_t sub_10010B170(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010B8C4(a1, a2, a3, (void (*)(void))sub_100A9BB0C, (void (*)(void))sub_100A89200, (uint64_t (*)(uint64_t, _QWORD *))sub_10000F9FC, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A985A0);
}

_OWORD *sub_10010B194(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_100519464(a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
        return sub_10010F90C(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100A9BB54();
      goto LABEL_7;
    }
    sub_100A89258(v12, a3 & 1);
    v18 = sub_100519464(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A983A8(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for CBConnectionEventMatchingOption(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_10010B2B4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9BD18, (void (*)(void))sub_100A89590, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010B2D0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1005193C8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for Date(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100A9BD2C();
      goto LABEL_7;
    }
    sub_100A895B4(v17, a3 & 1);
    v24 = sub_1005193C8(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100A985AC(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_10010B458(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1005193C8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_100A9BD40();
    goto LABEL_7;
  }
  sub_100A895D8(result, a3 & 1);
  result = sub_1005193C8(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100A984F0(v14, (uint64_t)v11, a1, v20);
}

void sub_10010B5A8(uint64_t a1, uint64_t a2, char a3)
{
  sub_10010F48C(a1, a2, a3, (void (*)(void))sub_100A9BF6C, (void (*)(void))sub_100A8994C, (void (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010B5C4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  v4 = (_QWORD **)v3;
  v7 = *(_QWORD *)a1;
  HIDWORD(v31) = *(unsigned __int8 *)(a1 + 8);
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 24);
  v34 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 40);
  v36 = v8;
  v37 = *(_QWORD *)(a1 + 56);
  LODWORD(v8) = *(unsigned __int8 *)(a1 + 65);
  v38 = *(unsigned __int8 *)(a1 + 64);
  v39 = v8;
  v9 = *(_QWORD *)(a1 + 80);
  v40 = *(_QWORD *)(a1 + 72);
  v41 = v9;
  v42 = *(_QWORD *)(a1 + 88);
  v43 = *(unsigned __int8 *)(a1 + 96);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v3;
  v16 = sub_100003FB0(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = *v4;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7] + 104 * v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)v23 = v7;
      *(_BYTE *)(v23 + 8) = BYTE4(v31);
      v25 = v33;
      *(_QWORD *)(v23 + 16) = v32;
      *(_QWORD *)(v23 + 24) = v25;
      v26 = v35;
      *(_QWORD *)(v23 + 32) = v34;
      *(_QWORD *)(v23 + 40) = v26;
      v27 = v37;
      *(_QWORD *)(v23 + 48) = v36;
      *(_QWORD *)(v23 + 56) = v27;
      *(_BYTE *)(v23 + 64) = v38;
      *(_BYTE *)(v23 + 65) = v39;
      v28 = v41;
      *(_QWORD *)(v23 + 72) = v40;
      *(_QWORD *)(v23 + 80) = v28;
      *(_QWORD *)(v23 + 88) = v42;
      *(_BYTE *)(v23 + 96) = v43;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_100A9BF78();
    goto LABEL_7;
  }
  sub_100A89958(v19, a3 & 1);
  v29 = sub_100003FB0(a2);
  if ((v20 & 1) != (v30 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v16 = v29;
  v22 = *v4;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v44 = v7;
  v45 = BYTE4(v31);
  v46 = v32;
  v47 = v33;
  v48 = v34;
  v49 = v35;
  v50 = v36;
  v51 = v37;
  v52 = v38;
  v53 = v39;
  v54 = v40;
  v55 = v41;
  v56 = v42;
  v57 = v43;
  return sub_100A985B8(v16, (uint64_t)v13, &v44, v22);
}

uint64_t sub_10010B8A8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9C2C4, (void (*)(void))sub_100A89E44, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

uint64_t sub_10010B8C4(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t, _QWORD *), uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  unint64_t v27;
  char v28;
  void (*v29)(void);
  uint64_t (*v30)(uint64_t, _QWORD *);
  uint64_t (*v31)(unint64_t, char *, uint64_t, uint64_t);
  uint64_t v32;

  v30 = a6;
  v31 = a7;
  v29 = a5;
  v9 = v7;
  v32 = a1;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v7;
  v18 = sub_100003FB0(a2);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a3 & 1) != 0)
    {
LABEL_7:
      v24 = *v9;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = (_QWORD *)(*(_QWORD *)(v24 + 56) + 40 * v18);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
        return v30(v32, v25);
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    v29();
    v27 = sub_100003FB0(a2);
    if ((v22 & 1) == (v28 & 1))
    {
      v18 = v27;
      v24 = *v9;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
      return v31(v18, v15, v32, v24);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
  __break(1u);
  return result;
}

uint64_t sub_10010BA5C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100003FB0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for Date(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_100A9C52C();
      goto LABEL_7;
    }
    sub_100A8A220(v17, a3 & 1);
    v24 = sub_100003FB0(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100A986E4(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10010BBE4(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_100519464(a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];

        *(_QWORD *)(v16 + 8 * v9) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100A9C82C();
      goto LABEL_7;
    }
    sub_100A8A64C(v12, a3 & 1);
    v17 = sub_100519464(a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A987A8(v9, (uint64_t)a2, a1, v15);
      v19 = a2;
      return;
    }
  }
  type metadata accessor for SPBeaconTaskName(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
}

uint64_t sub_10010BD00(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9C9D0, (void (*)(void))sub_100A8A978, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010BD1C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9C9E4, (void (*)(void))sub_100A8A99C, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

id sub_10010BD38(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  id result;
  unint64_t v20;
  char v21;
  uint64_t v22;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v11 = sub_100519510((uint64_t)a3);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = v9[3];
    if (v16 >= v14 && (a4 & 1) != 0)
    {
LABEL_7:
      v17 = *v5;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = (uint64_t *)(v17[7] + 16 * v11);
        result = (id)swift_bridgeObjectRelease();
        *v18 = a1;
        v18[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a4 & 1) == 0)
    {
      sub_100A9CC58();
      goto LABEL_7;
    }
    sub_100A8AD64(v14, a4 & 1);
    v20 = sub_100519510((uint64_t)a3);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      v17 = *v5;
      if ((v15 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A987F0(v11, (uint64_t)a3, a1, a2, v17);
      return a3;
    }
  }
  v22 = sub_10000F4A0(0, &qword_1010EF1F8, IDSService_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
  return result;
}

unint64_t sub_10010BE78(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100003FB0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = sub_10010F91C(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100A9CE0C();
    goto LABEL_7;
  }
  sub_100A8B048(v17, a3 & 1);
  v23 = sub_100003FB0(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100A98838(v14, (uint64_t)v11, a1, v20);
}

void sub_10010BFD4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_100519120(a3, a4, a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7] + 16 * v16;
        sub_10001BC14(*(_QWORD *)v23, *(_QWORD *)(v23 + 8));
        *(_QWORD *)v23 = a1;
        *(_QWORD *)(v23 + 8) = a2;
        return;
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      sub_100A9D03C();
      goto LABEL_7;
    }
    sub_100A8B3E0(v19, a6 & 1);
    v24 = sub_100519120(a3, a4, a5);
    if ((v20 & 1) == (v25 & 1))
    {
      v16 = v24;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A988D0(v16, a3, a4, a5, a1, a2, v22);
      swift_bridgeObjectRetain(a5);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
  __break(1u);
}

void sub_10010C124(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10010C140(a1, a2, a3, a4, (void (*)(void))sub_100A9D210, (void (*)(void))sub_100A8B718, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A97D68);
}

void sub_10010C140(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v10 = v7;
  v15 = *v7;
  v17 = sub_100518DA0(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);

        *(_QWORD *)(v24 + 8 * v17) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v25 = sub_100518DA0(a2, a3);
    if ((v21 & 1) == (v26 & 1))
    {
      v17 = v25;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a3, a1, v23);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10010C294(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100518DA0(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        swift_release();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100A9D3C4();
      goto LABEL_7;
    }
    sub_100A8BA2C(v15, a4 & 1);
    v20 = sub_100518DA0(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A97D68(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010C3C0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1005194F4(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100A9D578();
    goto LABEL_7;
  }
  sub_100A8BD40(v16, a3 & 1);
  v22 = sub_1005194F4(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_10005972C(a2, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
  return sub_100A98924(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_10010C51C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1005195B4(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = swift_release();
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100A9D58C();
    goto LABEL_7;
  }
  sub_100A8C040(v16, a3 & 1);
  v22 = sub_1005195B4(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_10005972C(a2, (uint64_t)v10, type metadata accessor for BeaconSharingSessionContext);
  return sub_100A989BC(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_10010C678(uint64_t a1, uint64_t a2, char a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  __n128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v11 = sub_100519460(a2, a4);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = v9[3];
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v17 = *v5;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = v17[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v18 + 8 * v11) = a1;
        return result;
      }
      return sub_100A987A8(v11, a2, a1, v17);
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100A9D814();
      goto LABEL_7;
    }
    sub_100A8C8E0(v14, a3 & 1);
    v21 = sub_100519460(a2, v20);
    if ((v15 & 1) == (v22 & 1))
    {
      v11 = v21;
      v17 = *v5;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      return sub_100A987A8(v11, a2, a1, v17);
    }
  }
  type metadata accessor for SPBTRSSIChannel(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v23);
  __break(1u);
  return result;
}

void sub_10010C78C(uint64_t a1, uint64_t a2, char a3, __n128 a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v11 = sub_100519460(a2, a4);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = v9[3];
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v17 = *v5;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = v17[7];

        *(_QWORD *)(v18 + 8 * v11) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100A9D9B4();
      goto LABEL_7;
    }
    sub_100A8CBB8(v14, a3 & 1);
    v20 = sub_100519460(a2, v19);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      v17 = *v5;
      if ((v15 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A987A8(v11, a2, a1, v17);
      return;
    }
  }
  type metadata accessor for ShutdownReason(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
}

void sub_10010C8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  sub_10010C8BC(a1, a2, a3, a4, a5, (void (*)(void))sub_100A9DB54, (void (*)(void))sub_100A8CE88, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A981D8);
}

void sub_10010C8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), void (*a7)(void), void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;

  v11 = v8;
  v16 = *v8;
  v18 = sub_100518DA0(a3, a4);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a5 & 1) != 0)
    {
LABEL_7:
      v24 = *v11;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = (_QWORD *)(*(_QWORD *)(v24 + 56) + 16 * v18);
        swift_release();
        *v25 = a1;
        v25[1] = a2;
        return;
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a5 & 1) == 0)
    {
      a6();
      goto LABEL_7;
    }
    a7();
    v26 = sub_100518DA0(a3, a4);
    if ((v22 & 1) == (v27 & 1))
    {
      v18 = v26;
      v24 = *v11;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a8(v18, a3, a4, a1, a2, v24);
      swift_bridgeObjectRetain(a4);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010CA14(char a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1005191B0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v16[7] + v10) = a1 & 1;
        return result;
      }
      return sub_100A989C8(v10, a2, a1 & 1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)sub_100A9DF5C();
      goto LABEL_7;
    }
    sub_100A8D5F8(result, a3 & 1);
    result = sub_1005191B0(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100A989C8(v10, a2, a1 & 1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt8);
  __break(1u);
  return result;
}

uint64_t sub_10010CB20(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9E0E4, (void (*)(void))sub_100A8D8A8, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

uint64_t sub_10010CB3C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100003FB0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_100A9E0F0();
    goto LABEL_7;
  }
  sub_100A8D8B4(result, a3 & 1);
  result = sub_100003FB0(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100A980B0(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10010CC8C(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(_QWORD), uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  char v30;
  void (*v31)(void);
  uint64_t (*v32)(_QWORD);
  uint64_t (*v33)(unint64_t, char *, uint64_t, uint64_t);
  uint64_t v34;

  v32 = a6;
  v33 = a7;
  v31 = a5;
  v9 = v7;
  v34 = a1;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v7;
  v18 = sub_100003FB0(a2);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  v22 = v17;
  v23 = *(_QWORD *)(v16 + 24);
  if (v23 >= v21 && (a3 & 1) != 0)
  {
LABEL_7:
    v24 = *v9;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = *(_QWORD *)(v24 + 56);
      v26 = v32;
      v27 = v32(0);
      return sub_10010FA18(v34, v25 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v18, v26);
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v31();
  v29 = sub_100003FB0(a2);
  if ((v22 & 1) != (v30 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
    __break(1u);
    return result;
  }
  v18 = v29;
  v24 = *v9;
  if ((v22 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  return v33(v18, v15, v34, v24);
}

uint64_t sub_10010CE10(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100003FB0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_100A9EC00();
    goto LABEL_7;
  }
  sub_100A8EACC(result, a3 & 1);
  result = sub_100003FB0(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100A98508(v14, (uint64_t)v11, a1 & 1, v20);
}

uint64_t sub_10010CF64(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9EE20, (void (*)(void))sub_100A8EE6C, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

void sub_10010CF80(uint64_t a1, uint64_t a2, char a3)
{
  sub_10010F48C(a1, a2, a3, (void (*)(void))sub_100A9EE2C, (void (*)(void))sub_100A8EE78, (void (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010CF9C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9EE38, (void (*)(void))sub_100A8F220, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010CFB8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9EE4C, (void (*)(void))sub_100A8F244, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

uint64_t sub_10010CFD4(uint64_t a1, uint64_t a2, Swift::UInt64 a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100519880(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 16 * v12;
        result = sub_10001BC14(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
        *(_QWORD *)v19 = a1;
        *(_QWORD *)(v19 + 8) = a2;
        return result;
      }
      return sub_100A987F0(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100A9EE6C();
      goto LABEL_7;
    }
    sub_100A8F664(v15, a4 & 1);
    v21 = sub_100519880(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return sub_100A987F0(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PrimaryIndex);
  __break(1u);
  return result;
}

uint64_t sub_10010D0F0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9F018, (void (*)(void))sub_100A8F93C, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

uint64_t sub_10010D10C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9F024, (void (*)(void))sub_100A8F948, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

void sub_10010D128(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1005198D8((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];

        *(_QWORD *)(v16 + 8 * v9) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100A9F030();
      goto LABEL_7;
    }
    sub_100A8F954(v12, a3 & 1);
    v17 = sub_1005198D8((uint64_t)a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A980BC(v9, (uint64_t)a2, a1, v15);
      v19 = a2;
      return;
    }
  }
  v20 = sub_10000F4A0(0, (unint64_t *)&qword_101111D20, NRDevice_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
}

void sub_10010D254(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100518DA0(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        sub_10010F954(a1, v18[7] + 48 * v12);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100A9F03C();
      goto LABEL_7;
    }
    sub_100A8F960(v15, a4 & 1);
    v19 = sub_100518DA0(a2, a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = v19;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A98ADC(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10010D37C(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100518DA0(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v18[7] + v12) = a1 & 1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100A9F224();
      goto LABEL_7;
    }
    sub_100A8FC84(v15, a4 & 1);
    v19 = sub_100518DA0(a2, a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = v19;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A98B48(v12, a2, a3, a1 & 1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010D4A0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100A9F3E0, (void (*)(void))sub_100A8FFA0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

uint64_t sub_10010D4BC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100003FB0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100A9F3F8();
    goto LABEL_7;
  }
  sub_100A8FFB8(v17, a3 & 1);
  v23 = sub_100003FB0(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100A980B0(v14, (uint64_t)v11, a1, v20);
}

void sub_10010D618(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(_QWORD), void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v11 = v8;
  v16 = *v8;
  v18 = sub_100518DA0(a2, a3);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a4 & 1) != 0)
    {
LABEL_7:
      v24 = *v11;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = *(_QWORD *)(v24 + 56);
        v26 = a7(0);
        sub_10010FA18(a1, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v18, a7);
        return;
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v27 = sub_100518DA0(a2, a3);
    if ((v22 & 1) == (v28 & 1))
    {
      v18 = v27;
      v24 = *v11;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a8(v18, a2, a3, a1, v24);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010D780(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9F86C, (void (*)(void))sub_100A906D8, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010D79C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9F880, (void (*)(void))sub_100A906FC, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010D7B8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9F894, (void (*)(void))sub_100A90720, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010D7D4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9F8D8, (void (*)(void))sub_100A90BE4, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010D7F0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010CC8C(a1, a2, a3, (void (*)(void))sub_100A9F90C, (void (*)(void))sub_100A90EF4, type metadata accessor for BeaconState, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A98C4C);
}

void sub_10010D814(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for ManagedCBPeripheralManager.KeyType(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_100519924(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];

      *(_QWORD *)(v20 + 8 * v13) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100A9FE40();
    goto LABEL_7;
  }
  sub_100A91718(v16, a3 & 1);
  v21 = sub_100519924(a2);
  if ((v17 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v13 = v21;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_10005972C(a2, (uint64_t)v10, type metadata accessor for ManagedCBPeripheralManager.KeyType);
  sub_100A98C58(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_10010D970(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010D98C(a1, a2, a3, (void (*)(void))sub_100AA088C, (void (*)(void))sub_100A92BA0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9840C);
}

uint64_t sub_10010D98C(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t (*v30)(unint64_t, char *, uint64_t, uint64_t);
  uint64_t v31;

  v29 = a5;
  v30 = a6;
  v8 = v6;
  v31 = a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  v17 = sub_100003FB0(a2);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = *(_QWORD *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    v23 = *v8;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = *(_QWORD *)(v23 + 56);
      result = swift_bridgeObjectRelease(*(_QWORD *)(v24 + 8 * v17));
      *(_QWORD *)(v24 + 8 * v17) = v31;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v29();
  v26 = sub_100003FB0(a2);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return result;
  }
  v17 = v26;
  v23 = *v8;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  return v30(v17, v14, v31, v23);
}

uint64_t sub_10010DAFC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100A9BB20, (void (*)(void))sub_100A89214, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010DB18(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100003FB0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100AA09F4();
    goto LABEL_7;
  }
  sub_100A92BC0(v17, a3 & 1);
  v23 = sub_100003FB0(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100A98838(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10010DC74(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t *a6, uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  char v30;
  void (*v31)(void);
  uint64_t *v32;
  uint64_t (*v33)(unint64_t, char *, uint64_t, uint64_t);
  uint64_t v34;

  v32 = a6;
  v33 = a7;
  v31 = a5;
  v9 = v7;
  v34 = a1;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v7;
  v18 = sub_100003FB0(a2);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  v22 = v17;
  v23 = *(_QWORD *)(v16 + 24);
  if (v23 >= v21 && (a3 & 1) != 0)
  {
LABEL_7:
    v24 = *v9;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = *(_QWORD *)(v24 + 56);
      v26 = v32;
      v27 = sub_10001A9A8(v32);
      return sub_100004084(v34, v25 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v18, v26);
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v31();
  v29 = sub_100003FB0(a2);
  if ((v22 & 1) != (v30 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
    __break(1u);
    return result;
  }
  v18 = v29;
  v24 = *v9;
  if ((v22 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  return v33(v18, v15, v34, v24);
}

void sub_10010DDF8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10010DE14(a1, a2, a3, a4, sub_100AA1148, (void (*)(void))sub_100A93A44, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100A97D68);
}

void sub_10010DE14(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v10 = v7;
  v15 = *v7;
  v17 = sub_100518DA0(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v24 + 8 * v17) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v25 = sub_100518DA0(a2, a3);
    if ((v21 & 1) == (v26 & 1))
    {
      v17 = v25;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a3, a1, v23);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010DF68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_100519764(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 16 * v14;
        result = sub_10001BC14(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
        *(_QWORD *)v21 = a1;
        *(_QWORD *)(v21 + 8) = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_100AA1300();
      goto LABEL_7;
    }
    sub_100A93D60(v17, a5 & 1);
    v23 = sub_100519764(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A97E8C(v14, a3, a4, a1, a2, v20);
      return sub_10001BBBC(a3, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

void sub_10010E0AC(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100518DA0(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v18[7] + v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100AA14EC();
      goto LABEL_7;
    }
    sub_100A9409C(v15, a4 & 1);
    v19 = sub_100518DA0(a2, a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = v19;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A98B48(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010E1CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_1005193C8(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7] + 16 * v15;
      result = sub_10001BC14(*(_QWORD *)v22, *(_QWORD *)(v22 + 8));
      v24 = v28;
      *(_QWORD *)v22 = a1;
      *(_QWORD *)(v22 + 8) = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_100AA1694();
    goto LABEL_7;
  }
  sub_100A943A4(v18, a4 & 1);
  v25 = sub_1005193C8(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100A98E8C(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_10010E338(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100518D38(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = swift_release();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return sub_100A987F0(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100AA191C();
      goto LABEL_7;
    }
    sub_100A9475C(v15, a4 & 1);
    v21 = sub_100518D38(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return sub_100A987F0(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
  __break(1u);
  return result;
}

uint64_t sub_10010E454(char a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100518E4C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v18[7] + v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)sub_100AA1AC4();
      goto LABEL_7;
    }
    sub_100A94A0C(result, a4 & 1);
    result = sub_100518E4C(a2, a3);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A98B48(v12, a2, a3, a1, v18);
      return sub_10001BBBC(a2, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

uint64_t sub_10010E578(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100AA1C6C, (void (*)(void))sub_100A94D38, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010E594(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010CC8C(a1, a2, a3, (void (*)(void))sub_100AA1C80, (void (*)(void))sub_100A94D5C, type metadata accessor for SafeLocation, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A98F2C);
}

void sub_10010E5B8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_100519120(a2, a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        swift_release();
        *(_QWORD *)(v21 + 8 * v14) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_100AA1C94();
      goto LABEL_7;
    }
    sub_100A94D70(v17, a5 & 1);
    v22 = sub_100519120(a2, a3, a4);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A98F38(v14, a2, a3, a4, a1, v20);
      swift_bridgeObjectRetain(a4);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
  __break(1u);
}

uint64_t sub_10010E700(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100519C70(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      v22 = type metadata accessor for BeaconScanner.AISLookupState(0);
      return sub_10010FA18(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, type metadata accessor for BeaconScanner.AISLookupState);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100AA1E54();
    goto LABEL_7;
  }
  sub_100A950B0(v17, a3 & 1);
  v24 = sub_100519C70(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v24;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100A98F88(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10010E874(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t *a6, uint64_t (*a7)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  char v29;
  void (*v30)(void);
  uint64_t *v31;
  uint64_t (*v32)(unint64_t, char *, uint64_t, uint64_t);
  uint64_t v33;

  v31 = a6;
  v32 = a7;
  v30 = a5;
  v9 = v7;
  v33 = a1;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v7;
  v18 = sub_100003FB0(a2);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a3 & 1) != 0)
    {
LABEL_7:
      v24 = *v9;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = *(_QWORD *)(v24 + 56);
        v26 = sub_10001A9A8(v31);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v18, v33, v26);
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    v30();
    v28 = sub_100003FB0(a2);
    if ((v22 & 1) == (v29 & 1))
    {
      v18 = v28;
      v24 = *v9;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
      return v32(v18, v15, v33, v24);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
  __break(1u);
  return result;
}

void sub_10010EA10(uint64_t a1, uint64_t a2, char a3)
{
  sub_10010F48C(a1, a2, a3, (void (*)(void))sub_100AA25E4, (void (*)(void))sub_100A957A4, (void (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010EA2C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100AA25F0, (void (*)(void))sub_100A957B0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010EA48(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_100003FB0(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      result = swift_release();
      v24 = v28;
      *v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_100AA2604();
    goto LABEL_7;
  }
  sub_100A957D4(v18, a4 & 1);
  v25 = sub_100003FB0(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v25;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100A9910C(v15, (uint64_t)v12, a1, v28, v21);
}

void sub_10010EBB4(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_100519D24((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7];

        *(_QWORD *)(v16 + 8 * v9) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100AA2840();
      goto LABEL_7;
    }
    sub_100A95B70(v12, a3 & 1);
    v17 = sub_100519D24((uint64_t)a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A980BC(v9, (uint64_t)a2, a1, v15);
      v19 = a2;
      return;
    }
  }
  v20 = sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
}

id sub_10010ECE0(uint64_t a1, char a2, void *a3, char a4)
{
  return sub_10010ED28(a1, a2, a3, a4, (void (*)(void))sub_100AA29E8, (void (*)(void))sub_100A95E48, (uint64_t (*)(_QWORD, _QWORD))sub_10010F948, (void (*)(unint64_t, void *, uint64_t, uint64_t, uint64_t))sub_100A991AC);
}

id sub_10010ED04(uint64_t a1, char a2, void *a3, char a4)
{
  return sub_10010ED28(a1, a2, a3, a4, (void (*)(void))sub_100AA29FC, (void (*)(void))sub_100A95E5C, (uint64_t (*)(_QWORD, _QWORD))sub_10010F93C, (void (*)(unint64_t, void *, uint64_t, uint64_t, uint64_t))sub_100A991AC);
}

id sub_10010ED28(uint64_t a1, char a2, void *a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(_QWORD, _QWORD), void (*a8)(unint64_t, void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v12;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  id result;
  uint64_t v31;

  v12 = v8;
  v16 = *v8;
  v18 = sub_100518FA4((uint64_t)a3);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_13;
  }
  v22 = v17;
  v23 = *(_QWORD *)(v16 + 24);
  if (v23 >= v21 && (a4 & 1) != 0)
    goto LABEL_9;
  if (v23 >= v21 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_9;
  }
  a6();
  v24 = sub_100518FA4((uint64_t)a3);
  if ((v22 & 1) != (v25 & 1))
  {
LABEL_13:
    v31 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
    result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v31);
    __break(1u);
    return result;
  }
  v18 = v24;
LABEL_9:
  v26 = a2 & 1;
  v27 = *v12;
  if ((v22 & 1) != 0)
  {
    v28 = (_DWORD)v26 != 0;
    v29 = *(_QWORD *)(v27 + 56) + 16 * v18;
    result = (id)a7(*(_QWORD *)v29, *(unsigned __int8 *)(v29 + 8));
    *(_QWORD *)v29 = a1;
    *(_BYTE *)(v29 + 8) = v28;
  }
  else
  {
    a8(v18, a3, a1, v26, v27);
    return a3;
  }
  return result;
}

uint64_t sub_10010EE90(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100AA2F28, (void (*)(void))sub_100A966F0, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

void sub_10010EEAC(__int16 a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100518DA0(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_WORD *)(v18[7] + 2 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100AA2F64();
      goto LABEL_7;
    }
    sub_100A9673C(v15, a4 & 1);
    v19 = sub_100518DA0(a2, a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = v19;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A99218(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10010EFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_100518DA0(a4, a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = (uint64_t *)(v22[7] + 24 * v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *v23 = a1;
        v23[1] = a2;
        v23[2] = a3;
        return;
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      sub_100AA3110();
      goto LABEL_7;
    }
    sub_100A96A58(v19, a6 & 1);
    v24 = sub_100518DA0(a4, a5);
    if ((v20 & 1) == (v25 & 1))
    {
      v16 = v24;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_100A99260(v16, a4, a5, a1, a2, a3, v22);
      swift_bridgeObjectRetain(a5);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10010F124(uint64_t a1, unsigned __int8 *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_100519D70(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v20 = v19[7];
        v21 = type metadata accessor for Date(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, a1, v21);
      }
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100AA32F4();
      goto LABEL_7;
    }
    sub_100A96D98(v16, a3 & 1);
    v23 = sub_100519D70(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v19 = *v4;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10005972C((uint64_t)a2, (uint64_t)v10, type metadata accessor for ShareAttemptTracker.AttemptKey);
      return sub_100A992B4(v13, (uint64_t)v10, a1, v19);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10010F2AC(uint64_t a1, uint64_t a2, char a3)
{
  sub_10010F48C(a1, a2, a3, (void (*)(void))sub_100AA35D8, (void (*)(void))sub_100A971D4, (void (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010F2C8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F300(a1, a2, a3, (void (*)(void))sub_100AA39F4, (void (*)(void))sub_100A97540, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9936C);
}

uint64_t sub_10010F2E4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F300(a1, a2, a3, (void (*)(void))sub_100AA3A08, (void (*)(void))sub_100A9754C, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A9936C);
}

uint64_t sub_10010F300(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  void (*v28)(void);
  uint64_t (*v29)(unint64_t, char *, uint64_t, uint64_t);

  v28 = a5;
  v29 = a6;
  v8 = v6;
  v12 = type metadata accessor for BeaconKeyManager.FileKey(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  v17 = sub_100519AC8(a2);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = *(_QWORD *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    v23 = *v8;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = *(_QWORD *)(v23 + 56);
      result = swift_release(*(_QWORD *)(v24 + 8 * v17));
      *(_QWORD *)(v24 + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v28();
  v26 = sub_100519AC8(a2);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
    __break(1u);
    return result;
  }
  v17 = v26;
  v23 = *v8;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_10005972C(a2, (uint64_t)v14, type metadata accessor for BeaconKeyManager.FileKey);
  return v29(v17, v14, a1, v23);
}

void sub_10010F470(uint64_t a1, uint64_t a2, char a3)
{
  sub_10010F48C(a1, a2, a3, (void (*)(void))sub_100AA3B3C, (void (*)(void))sub_100A9797C, (void (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

void sub_10010F48C(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void (*v28)(void);
  void (*v29)(unint64_t, char *, uint64_t, uint64_t);
  uint64_t v30;

  v28 = a5;
  v29 = a6;
  v8 = v6;
  v30 = a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  v17 = sub_100003FB0(a2);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = *(_QWORD *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    v23 = *v8;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = *(_QWORD *)(v23 + 56);

      *(_QWORD *)(v24 + 8 * v17) = v30;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v28();
  v25 = sub_100003FB0(a2);
  if ((v21 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return;
  }
  v17 = v25;
  v23 = *v8;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v29(v17, v14, v30, v23);
}

uint64_t sub_10010F5FC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10010F618(a1, a2, a3, (void (*)(void))sub_100AA3D70, (void (*)(void))sub_100A97988, (uint64_t (*)(unint64_t, char *, uint64_t, uint64_t))sub_100A980B0);
}

uint64_t sub_10010F618(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, char *, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t (*v30)(unint64_t, char *, uint64_t, uint64_t);
  uint64_t v31;

  v29 = a5;
  v30 = a6;
  v8 = v6;
  v31 = a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  v17 = sub_100003FB0(a2);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = *(_QWORD *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    v23 = *v8;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = *(_QWORD *)(v23 + 56);
      result = swift_release();
      *(_QWORD *)(v24 + 8 * v17) = v31;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v29();
  v26 = sub_100003FB0(a2);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return result;
  }
  v17 = v26;
  v23 = *v8;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  return v30(v17, v14, v31, v23);
}

uint64_t sub_10010F788(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD **)v4;
  v27 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_100003FB0(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7] + 16 * v15;
      result = swift_release();
      *(_BYTE *)v22 = a1 & 1;
      *(_QWORD *)(v22 + 8) = v27;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_100AA3FB4();
    goto LABEL_7;
  }
  sub_100A979AC(v18, a4 & 1);
  v24 = sub_100003FB0(a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100A99378(v15, (uint64_t)v12, a1 & 1, v27, v21);
}

void sub_10010F8FC(id a1, char a2)
{
  if (!a2)

}

_OWORD *sub_10010F90C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10010F91C(unint64_t result)
{
  if (result >> 62 == 1)
    return swift_errorRelease(result & 0x3FFFFFFFFFFFFFFFLL);
  if (!(result >> 62))
    return swift_release(result);
  return result;
}

void sub_10010F93C(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_10010F948(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_10010F954(uint64_t a1, uint64_t a2)
{
  assignWithTake for AnalyticsEvent.Mode(a2, a1);
  return a2;
}

unint64_t sub_10010F990()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EF1B0;
  if (!qword_1010EF1B0)
  {
    v1 = sub_10001F784(&qword_1010EF7C0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Identifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1010EF1B0);
  }
  return result;
}

uint64_t sub_10010F9DC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10010FA18(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for BeaconKeyManagerURLChangeSubscriber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for BeaconKeyManagerURLChangeSubscriber(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for BeaconKeyManagerURLChangeSubscriber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t *assignWithTake for BeaconKeyManagerURLChangeSubscriber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconKeyManagerURLChangeSubscriber(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BeaconKeyManagerURLChangeSubscriber(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyManagerURLChangeSubscriber()
{
  return &type metadata for BeaconKeyManagerURLChangeSubscriber;
}

uint64_t sub_10010FBB4(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_10001A9A8(&qword_1010EF200);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(v5 + 48);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v7, a1, v9);
  v7[v8] = *(_BYTE *)(a1 + v8);
  a2(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v7, v9);
}

uint64_t storeEnumTagSinglePayload for PublishingPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10010FCC4 + 4 * byte_100E27525[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10010FCF8 + 4 * asc_100E27520[v4]))();
}

uint64_t sub_10010FCF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010FD00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10010FD08);
  return result;
}

uint64_t sub_10010FD14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10010FD1CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10010FD20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10010FD28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PublishingPolicy()
{
  return &type metadata for PublishingPolicy;
}

unint64_t sub_10010FD48()
{
  unint64_t result;

  result = qword_1010EF208;
  if (!qword_1010EF208)
  {
    result = swift_getWitnessTable(&unk_100E27614, &type metadata for PublishingPolicy);
    atomic_store(result, (unint64_t *)&qword_1010EF208);
  }
  return result;
}

uint64_t sub_10010FD8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10010FDC0 + 4 * byte_100E2752A[a1]))(0x7265776F50776F6CLL, 0xE800000000000000);
}

uint64_t sub_10010FDC0()
{
  return 0x6F506D756964656DLL;
}

uint64_t sub_10010FDE0()
{
  return 0x65776F5068676968;
}

uint64_t sub_10010FDFC()
{
  return 0x4F7265776F506E6FLL;
}

uint64_t sub_10010FE30()
{
  return 0x7265747461426E6FLL;
}

uint64_t sub_10010FE68()
{
  return 0x6F696E61706D6F63;
}

uint64_t sub_10010FE8C()
{
  return 0x6857796669746F6ELL;
}

void sub_10010FEB0(char *a1)
{
  sub_100513F8C(*a1);
}

Swift::Int sub_10010FEBC()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_100515B58((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10010FF00(uint64_t a1)
{
  char *v1;

  sub_100515B58(a1, *v1);
}

Swift::Int sub_10010FF08()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_100515B58((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t sub_10010FF48@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10011002C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10010FF74@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10010FD8C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_10010FF9C(char *a1, char *a2)
{
  return qword_100E27640[*a1] < qword_100E27640[*a2];
}

BOOL sub_10010FFC0(char *a1, char *a2)
{
  return qword_100E27640[*a2] >= qword_100E27640[*a1];
}

BOOL sub_10010FFE4(char *a1, char *a2)
{
  return qword_100E27640[*a1] >= qword_100E27640[*a2];
}

BOOL sub_100110008(char *a1, char *a2)
{
  return qword_100E27640[*a2] < qword_100E27640[*a1];
}

unint64_t sub_10011002C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101047DF8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t destroy for PencilSendPairingCommandPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  sub_10001BC14(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_10001BC14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_10001BC14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_10001BC14(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  return sub_10001BC14(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
}

uint64_t *initializeWithCopy for PencilSendPairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_10001BBBC(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_10001BBBC(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  v12 = a2[8];
  v13 = a2[9];
  sub_10001BBBC(v12, v13);
  a1[8] = v12;
  a1[9] = v13;
  v14 = a2[10];
  v15 = a2[11];
  sub_10001BBBC(v14, v15);
  a1[10] = v14;
  a1[11] = v15;
  v16 = a2[12];
  v17 = a2[13];
  sub_10001BBBC(v16, v17);
  a1[12] = v16;
  a1[13] = v17;
  v18 = a2[14];
  v19 = a2[15];
  sub_10001BBBC(v18, v19);
  a1[14] = v18;
  a1[15] = v19;
  v21 = a2[16];
  v20 = a2[17];
  sub_10001BBBC(v21, v20);
  a1[16] = v21;
  a1[17] = v20;
  return a1;
}

uint64_t *assignWithCopy for PencilSendPairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_10001BBBC(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[6];
  v17 = a2[7];
  sub_10001BBBC(v16, v17);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2[8];
  v21 = a2[9];
  sub_10001BBBC(v20, v21);
  v22 = a1[8];
  v23 = a1[9];
  a1[8] = v20;
  a1[9] = v21;
  sub_10001BC14(v22, v23);
  v24 = a2[10];
  v25 = a2[11];
  sub_10001BBBC(v24, v25);
  v26 = a1[10];
  v27 = a1[11];
  a1[10] = v24;
  a1[11] = v25;
  sub_10001BC14(v26, v27);
  v28 = a2[12];
  v29 = a2[13];
  sub_10001BBBC(v28, v29);
  v30 = a1[12];
  v31 = a1[13];
  a1[12] = v28;
  a1[13] = v29;
  sub_10001BC14(v30, v31);
  v32 = a2[14];
  v33 = a2[15];
  sub_10001BBBC(v32, v33);
  v34 = a1[14];
  v35 = a1[15];
  a1[14] = v32;
  a1[15] = v33;
  sub_10001BC14(v34, v35);
  v37 = a2[16];
  v36 = a2[17];
  sub_10001BBBC(v37, v36);
  v38 = a1[16];
  v39 = a1[17];
  a1[16] = v37;
  a1[17] = v36;
  sub_10001BC14(v38, v39);
  return a1;
}

__n128 initializeWithTake for PencilSendPairingCommandPayload(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t *assignWithTake for PencilSendPairingCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001BC14(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001BC14(v10, v11);
  v12 = a1[8];
  v13 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001BC14(v12, v13);
  v14 = a1[10];
  v15 = a1[11];
  *((_OWORD *)a1 + 5) = a2[5];
  sub_10001BC14(v14, v15);
  v16 = a1[12];
  v17 = a1[13];
  *((_OWORD *)a1 + 6) = a2[6];
  sub_10001BC14(v16, v17);
  v18 = a1[14];
  v19 = a1[15];
  *((_OWORD *)a1 + 7) = a2[7];
  sub_10001BC14(v18, v19);
  v20 = a1[16];
  v21 = a1[17];
  *((_OWORD *)a1 + 8) = a2[8];
  sub_10001BC14(v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSendPairingCommandPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PencilSendPairingCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSendPairingCommandPayload()
{
  return &type metadata for PencilSendPairingCommandPayload;
}

uint64_t sub_10011049C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _BYTE v22[16];
  _QWORD v23[4];

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v18, v3, v4);
  v17 = *v1;
  v5 = v19;
  v6 = v20;
  sub_10009F5D0((uint64_t)v18, v19);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v17 = v1[1];
    v8 = v19;
    v9 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v8, v9);
    v17 = v1[2];
    v10 = v19;
    v11 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v10, v11);
    v17 = v1[3];
    v12 = v19;
    v13 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v12, v13);
    v17 = v1[4];
    v14 = v19;
    v15 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v14, v15);
    v21 = v1[5];
    sub_100059F58((uint64_t)&v21, (uint64_t)v22);
    sub_100059F58((uint64_t)v22, (uint64_t)v23);
    __asm { BR              X12 }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
}

uint64_t sub_1001108D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_QWORD *)(v37 - 128) = v33 & 0x3FFFFFFFFFFFFFFFLL;
  LOWORD(a19) = BYTE6(v33);
  v38 = FixedWidthInteger.data.getter(&type metadata for UInt16, v36);
  v40 = v39;
  *(_QWORD *)&a19 = v38;
  *((_QWORD *)&a19 + 1) = v39;
  v42 = a26;
  v41 = a27;
  sub_10009F5D0((uint64_t)&a23, a26);
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&a19, &type metadata for Data, v34, v42, v41);
  if (v35)
  {
    sub_10001BC14(v38, v40);
    JUMPOUT(0x100110860);
  }
  sub_10001BC14(v38, v40);
  a19 = a32;
  v43 = sub_100059F58((uint64_t)&a33, v37 - 152);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1001109BC
                                          + *((int *)qword_100110E18 + (*(_QWORD *)(v37 - 144) >> 62))))(v43);
}

__n128 sub_100110E48@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[9];

  sub_10011115C(a1, v8);
  if (!v2)
  {
    v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100110EA0(_QWORD *a1)
{
  return sub_10011049C(a1);
}

unint64_t sub_100110EB4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100110EE0();
  result = sub_100110F24();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100110EE0()
{
  unint64_t result;

  result = qword_1010EF210;
  if (!qword_1010EF210)
  {
    result = swift_getWitnessTable(&unk_100E276D8, &type metadata for PencilSendPairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EF210);
  }
  return result;
}

unint64_t sub_100110F24()
{
  unint64_t result;

  result = qword_1010EF218;
  if (!qword_1010EF218)
  {
    result = swift_getWitnessTable(&unk_100E276B0, &type metadata for PencilSendPairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EF218);
  }
  return result;
}

void sub_100110F68(uint64_t a1, uint64_t a2)
{
  __asm { BR              X22 }
}

void sub_100110FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a2) == 16)
    __asm { BR              X22 }
  __break(1u);
  JUMPOUT(0x100111110);
}

uint64_t sub_10011115C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  NSObject *v98;
  NSObject *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t result;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint8_t *v123;
  NSObject *v124;
  NSObject *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint8_t *v129;
  NSObject *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  NSObject *v134;
  NSObject *v135;
  unint64_t v136;
  NSObject *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  NSObject *v150;
  NSObject *v151;
  _QWORD v152[3];
  uint64_t v153;
  unint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;

  v5 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v152, v8, v9);
  v10 = v153;
  v11 = v154;
  sub_10009F5D0((uint64_t)v152, v153);
  v12 = dispatch thunk of BinaryDecodingContaining.decode(length:)(16, v10, v11);
  if (!v2)
  {
    v14 = v12;
    v15 = v13;
    v16 = v153;
    v17 = v154;
    sub_10009F5D0((uint64_t)v152, v153);
    v148 = dispatch thunk of BinaryDecodingContaining.decode(length:)(16, v16, v17);
    v149 = v18;
    v19 = v153;
    v20 = v154;
    sub_10009F5D0((uint64_t)v152, v153);
    v146 = dispatch thunk of BinaryDecodingContaining.decode(length:)(18, v19, v20);
    v147 = v21;
    v22 = v153;
    v23 = v154;
    sub_10009F5D0((uint64_t)v152, v153);
    v144 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v22, v23);
    v145 = v24;
    v25 = v153;
    v26 = v154;
    sub_10009F5D0((uint64_t)v152, v153);
    v142 = dispatch thunk of BinaryDecodingContaining.decode(length:)(64, v25, v26);
    v143 = v27;
    v28 = v153;
    v29 = v154;
    sub_10009F5D0((uint64_t)v152, v153);
    v140 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v28, v29);
    v141 = v30;
    v31 = v153;
    v32 = v154;
    sub_10009F5D0((uint64_t)v152, v153);
    v139 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1900, v31, v32);
    v138 = v33;
    v34 = v140;
    v35 = v141;
    v36 = sub_10001BBBC(v140, v141);
    static Endianness.current.getter(v36);
    v137 = sub_100112060();
    FixedWidthInteger.init(data:ofEndianness:)(&v150, v34, v35, v7);
    if (BYTE2(v150) == 1)
    {
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v37 = type metadata accessor for Logger(0);
      sub_10001A9E8(v37, (uint64_t)qword_1011B7E28);
      sub_10001BBBC(v34, v35);
      v38 = sub_10001BBBC(v34, v35);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = swift_slowAlloc(32, -1);
        v150 = v42;
        *(_DWORD *)v41 = 136315138;
        v137 = (v41 + 4);
        v43 = Data.hexString.getter(v140, v141);
        v164 = sub_100016940(v43, v44, (uint64_t *)&v150);
        v35 = v141;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v137, v41 + 12);
        v34 = v140;
        swift_bridgeObjectRelease();
        sub_10001BC14(v34, v35);
        sub_10001BC14(v34, v35);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Invalid certs length: %s", v41, 0xCu);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);
      }
      else
      {
        sub_10001BC14(v34, v35);
        sub_10001BC14(v34, v35);
      }

      v49 = type metadata accessor for BinaryEncodingError(0);
      v50 = sub_1001120A4();
      swift_allocError(v49, v50, 0, 0);
      v52 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v51, enum case for BinaryEncodingError.encodingError(_:), v49);
      swift_willThrow(v52);
      sub_10001BC14(v139, v138);
      v53 = v34;
      v54 = v35;
    }
    else
    {
      v45 = (unsigned __int16)v150;
      v46 = v139;
      v47 = v138;
      sub_10001BBBC(v139, v138);
      sub_1002F7C0C(v45, v46, v47);
      v134 = v150;
      v135 = v151;
      v48 = v153;
      v136 = v154;
      sub_10009F5D0((uint64_t)v152, v153);
      v133 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v48, v136);
      v136 = v55;
      v56 = v153;
      v57 = v154;
      sub_10009F5D0((uint64_t)v152, v153);
      v131 = dispatch thunk of BinaryDecodingContaining.decode(length:)(600, v56, v57);
      v132 = v58;
      v59 = v133;
      v60 = v136;
      v61 = sub_10001BBBC(v133, v136);
      static Endianness.current.getter(v61);
      FixedWidthInteger.init(data:ofEndianness:)(&v150, v59, v60, v7);
      if (BYTE2(v150) == 1)
      {
        if (qword_1010EA328 != -1)
          swift_once(&qword_1010EA328, sub_100B5E37C);
        v62 = type metadata accessor for Logger(0);
        sub_10001A9E8(v62, (uint64_t)qword_1011B7E28);
        v63 = v133;
        v64 = v136;
        sub_10001BBBC(v133, v136);
        v65 = sub_10001BBBC(v63, v64);
        v66 = Logger.logObject.getter(v65);
        v67 = static os_log_type_t.error.getter(v66);
        v137 = v66;
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc(12, -1);
          v130 = swift_slowAlloc(32, -1);
          v150 = v130;
          *(_DWORD *)v68 = 136315138;
          v129 = v68 + 4;
          v69 = v133;
          v70 = v136;
          v71 = Data.hexString.getter(v133, v136);
          v164 = sub_100016940(v71, v72, (uint64_t *)&v150);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v129, v68 + 12);
          swift_bridgeObjectRelease();
          sub_10001BC14(v69, v70);
          sub_10001BC14(v69, v70);
          v73 = v137;
          _os_log_impl((void *)&_mh_execute_header, v137, v67, "Invalid CSR length: %s", v68, 0xCu);
          v74 = (uint64_t)v130;
          swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v74, -1, -1);
          swift_slowDealloc(v68, -1, -1);

        }
        else
        {
          v100 = v133;
          v101 = v136;
          sub_10001BC14(v133, v136);
          sub_10001BC14(v100, v101);

        }
        v102 = type metadata accessor for BinaryEncodingError(0);
        v103 = sub_1001120A4();
        swift_allocError(v102, v103, 0, 0);
        v105 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v102 - 8) + 104))(v104, enum case for BinaryEncodingError.encodingError(_:), v102);
        swift_willThrow(v105);
      }
      else
      {
        v75 = (unsigned __int16)v150;
        v76 = v131;
        v77 = v132;
        sub_10001BBBC(v131, v132);
        sub_1002F7C0C(v75, v76, v77);
        v130 = v150;
        v137 = v151;
        v78 = v153;
        v79 = v154;
        sub_10009F5D0((uint64_t)v152, v153);
        v128 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v78, v79);
        v129 = (uint8_t *)v80;
        v81 = v153;
        v82 = v154;
        sub_10009F5D0((uint64_t)v152, v153);
        v126 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v81, v82);
        v127 = v83;
        v84 = v128;
        v85 = (unint64_t)v129;
        v86 = sub_10001BBBC(v128, (unint64_t)v129);
        static Endianness.current.getter(v86);
        sub_100059570();
        FixedWidthInteger.init(data:ofEndianness:)(&v150, v84, v85, v7);
        if (BYTE1(v150) != 1)
        {
          v106 = v150;
          v107 = v126;
          v108 = v127;
          sub_10001BBBC(v126, v127);
          sub_1002F7C0C(v106, v107, v108);
          v125 = v150;
          v109 = v153;
          v110 = v154;
          sub_10009F5D0((uint64_t)v152, v153);
          dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v109, v110);
          sub_10001BC14(v126, v127);
          sub_10001BC14(v128, (unint64_t)v129);
          sub_10001BC14(v131, v132);
          sub_10001BC14(v133, v136);
          sub_10001BC14(v139, v138);
          sub_10001BC14(v140, v141);
          sub_100110F68(v14, v15);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v152);
          result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
          v118 = v162;
          a2[6] = v161;
          a2[7] = v118;
          a2[8] = v163;
          v119 = v158;
          a2[2] = v157;
          a2[3] = v119;
          v120 = v160;
          a2[4] = v159;
          a2[5] = v120;
          v121 = v156;
          *a2 = v155;
          a2[1] = v121;
          return result;
        }
        if (qword_1010EA328 != -1)
          swift_once(&qword_1010EA328, sub_100B5E37C);
        v87 = type metadata accessor for Logger(0);
        sub_10001A9E8(v87, (uint64_t)qword_1011B7E28);
        v88 = v128;
        v89 = (unint64_t)v129;
        sub_10001BBBC(v128, (unint64_t)v129);
        v90 = sub_10001BBBC(v88, v89);
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.error.getter(v91);
        v125 = v91;
        if (os_log_type_enabled(v91, v92))
        {
          v93 = (uint8_t *)swift_slowAlloc(12, -1);
          v124 = swift_slowAlloc(32, -1);
          v150 = v124;
          *(_DWORD *)v93 = 136315138;
          v123 = v93 + 4;
          v94 = v128;
          v95 = (unint64_t)v129;
          v96 = Data.hexString.getter(v128, v129);
          v164 = sub_100016940(v96, v97, (uint64_t *)&v150);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v123, v93 + 12);
          swift_bridgeObjectRelease();
          sub_10001BC14(v94, v95);
          sub_10001BC14(v94, v95);
          v98 = v125;
          _os_log_impl((void *)&_mh_execute_header, v125, v92, "Invalid signature length: %s", v93, 0xCu);
          v99 = v124;
          swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v99, -1, -1);
          swift_slowDealloc(v93, -1, -1);

        }
        else
        {
          v111 = v128;
          v112 = (unint64_t)v129;
          sub_10001BC14(v128, (unint64_t)v129);
          sub_10001BC14(v111, v112);

        }
        v113 = type metadata accessor for BinaryEncodingError(0);
        v114 = sub_1001120A4();
        swift_allocError(v113, v114, 0, 0);
        v116 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v113 - 8) + 104))(v115, enum case for BinaryEncodingError.encodingError(_:), v113);
        swift_willThrow(v116);
        sub_10001BC14(v126, v127);
        sub_10001BC14(v128, (unint64_t)v129);
        sub_10001BC14((uint64_t)v130, (unint64_t)v137);
      }
      sub_10001BC14(v131, v132);
      sub_10001BC14(v133, v136);
      sub_10001BC14((uint64_t)v134, (unint64_t)v135);
      sub_10001BC14(v139, v138);
      v53 = v140;
      v54 = v141;
    }
    sub_10001BC14(v53, v54);
    sub_10001BC14(v142, v143);
    sub_10001BC14(v144, v145);
    sub_10001BC14(v146, v147);
    sub_10001BC14(v148, v149);
    sub_10001BC14(v14, v15);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v152);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

unint64_t sub_100112060()
{
  unint64_t result;

  result = qword_1010EF220;
  if (!qword_1010EF220)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_1010EF220);
  }
  return result;
}

unint64_t sub_1001120A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EC000;
  if (!qword_1010EC000)
  {
    v1 = type metadata accessor for BinaryEncodingError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for BinaryEncodingError, v1);
    atomic_store(result, (unint64_t *)&qword_1010EC000);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FinderActiveCache(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100112138 + 4 * byte_100E27725[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10011216C + 4 * byte_100E27720[v4]))();
}

uint64_t sub_10011216C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100112174(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10011217CLL);
  return result;
}

uint64_t sub_100112188(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100112190);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100112194(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011219C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FinderActiveCache()
{
  return &type metadata for FinderActiveCache;
}

Swift::Int sub_1001121B8()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 1;
  else
    v2 = -1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100112204()
{
  _BYTE *v0;
  Swift::UInt v1;

  if (*v0)
    v1 = 1;
  else
    v1 = -1;
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100112238()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 1;
  else
    v2 = -1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100112280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001123A8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001122DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001123A8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

_QWORD *sub_100112328@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result == -1)
    v3 = 0;
  else
    v3 = v2;
  *a2 = v3;
  return result;
}

void sub_100112348(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1;
  if (!*v1)
    v2 = -1;
  *a1 = v2;
}

unint64_t sub_100112364()
{
  unint64_t result;

  result = qword_1010EF228;
  if (!qword_1010EF228)
  {
    result = swift_getWitnessTable(&unk_100E2782C, &type metadata for FinderActiveCache);
    atomic_store(result, (unint64_t *)&qword_1010EF228);
  }
  return result;
}

unint64_t sub_1001123A8()
{
  unint64_t result;

  result = qword_1010EF230;
  if (!qword_1010EF230)
  {
    result = swift_getWitnessTable(&unk_100E27764, &type metadata for FinderActiveCache);
    atomic_store(result, (unint64_t *)&qword_1010EF230);
  }
  return result;
}

uint64_t sub_1001123EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6778);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6778);
  if (qword_1010E9980 != -1)
    swift_once(&qword_1010E9980, sub_100112F80);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6790);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10011247C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[24];
  uint64_t v31;

  v29 = sub_10001A9A8(&qword_1010EF338);
  __chkstk_darwin(v29);
  v8 = (_QWORD *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_10001A9A8(&qword_1010EF340);
  v24 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101109480);
  v31 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 128, v30, 0, 0);
  result = *(_QWORD *)(a2 + 128);
  v16 = *(_QWORD *)(result + 16);
  if (v16)
  {
    v23[1] = *(_QWORD *)(a2 + 128);
    v23[2] = v3;
    v17 = result + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    v27 = *(_QWORD *)(v31 + 72);
    v28 = a3;
    v26 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v31 + 16);
    v18 = swift_bridgeObjectRetain(result);
    v20 = v24;
    v19 = v25;
    do
    {
      v26(v14, v17, v12, v18);
      v21 = v28;
      v22 = (uint64_t)v8 + *(int *)(v29 + 48);
      *v8 = a1;
      sub_100113048(v21, v22);
      swift_retain();
      AsyncStream.Continuation.yield(_:)(v8, v12);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v19);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
      v17 += v27;
      --v16;
    }
    while (v16);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100112658()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LeechScanningService()
{
  return objc_opt_self(_TtC12searchpartyd20LeechScanningService);
}

unint64_t sub_1001126A4(uint64_t a1)
{
  unint64_t result;

  result = sub_1001126C8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001126C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EF320;
  if (!qword_1010EF320)
  {
    v1 = type metadata accessor for LeechScanningService();
    result = swift_getWitnessTable(byte_100E278B4, v1);
    atomic_store(result, &qword_1010EF320);
  }
  return result;
}

uint64_t sub_10011270C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100112714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = sub_10001A9A8((uint64_t *)&unk_101109480);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (char *)swift_allocObject(&unk_101059040, v12 + v6, v11 | 7);
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v13[v12], (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  sub_100691AC0((uint64_t)v9, (uint64_t)&unk_1010EF350, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_10011285C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = a5;
  v7 = sub_10001A9A8((uint64_t *)&unk_101109480);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001128C4, a4, 0);
}

uint64_t sub_1001128C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v2 = (unint64_t *)(v1 + 128);
  swift_beginAccess(v1 + 128, v0 + 16, 33, 0);
  v3 = *(_QWORD *)(v1 + 128);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  *(_QWORD *)(v1 + 128) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = sub_1007C889C(0, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v2 = v3;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    v3 = sub_1007C889C(v5 > 1, v6 + 1, 1, v3);
    *v2 = v3;
  }
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 16) = v6 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v6, v8, v9);
  swift_endAccess(v0 + 16);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001129D8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_DWORD *)(v3 + 88) = a2;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = sub_10001A9A8(&qword_1010EF330);
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DiscoveredObject(0);
  *(_QWORD *)(v3 + 56) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 72) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v7);
  return swift_task_switch(sub_100112A70, 0, 0);
}

uint64_t sub_100112A70()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v1 = (_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_DWORD *)(v0 + 88);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  sub_1001B28B0(v6, v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
  {
    sub_100112F40(*(_QWORD *)(v0 + 48));
    if (qword_1010E9978 != -1)
      swift_once(&qword_1010E9978, sub_1001123EC);
    v7 = *v1;
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B6778);
    swift_bridgeObjectRetain_n(v7, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *v1;
    if (v12)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v35 = v15;
      *(_DWORD *)v14 = 136446210;
      swift_bridgeObjectRetain(v13);
      v17 = Dictionary.description.getter(v16, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v19 = v18;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 16) = sub_100016940(v17, v19, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v13, 2);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to parse: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*v1, 2);
    }

    v32 = *(_QWORD *)(v0 + 72);
    v33 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_100113004(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 80));
    if (qword_1010E9978 != -1)
      swift_once(&qword_1010E9978, sub_1001123EC);
    v21 = *(_QWORD *)(v0 + 72);
    v20 = *(_QWORD *)(v0 + 80);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B6778);
    v23 = sub_100113048(v20, v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(_QWORD *)(v0 + 72);
    if (v26)
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      *(_DWORD *)v28 = 136446210;
      v35 = v29;
      v30 = sub_1001B5454();
      *(_QWORD *)(v0 + 24) = sub_100016940(v30, v31, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_10011308C(v27);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Discovered: %{public}s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_10011308C(*(_QWORD *)(v0 + 72));
    }

    return swift_task_switch(sub_100112E54, *(_QWORD *)(v0 + 40), 0);
  }
}

uint64_t sub_100112E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 40);
  type metadata accessor for Transaction(0);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  static Transaction.named<A>(_:with:)("LeechScanningService", 20, 2, sub_1001130C8, v3, &type metadata for () + 1);
  swift_task_dealloc(v3);
  return swift_task_switch(sub_100112EF4, 0, 0);
}

uint64_t sub_100112EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10011308C(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112F40(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF330);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100112F80()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6790);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6790);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100E27850);
}

uint64_t sub_100113004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiscoveredObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100113048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DiscoveredObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011308C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DiscoveredObject(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001130C8(uint64_t a1)
{
  uint64_t v1;

  return sub_10011247C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001130E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8((uint64_t *)&unk_101109480);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100113160(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101109480) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1010EF34C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004C28;
  return sub_10011285C(a1, v5, v6, v7, v8);
}

ValueMetadata *type metadata accessor for ObservationStore()
{
  return &type metadata for ObservationStore;
}

_QWORD *sub_100113208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(type metadata accessor for ObservedAdvertisement(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 72);
  swift_bridgeObjectRetain(a1);
  v6 = (_BYTE *)(v4 + a1 + 8);
  v7 = _swiftEmptyArrayStorage;
  do
  {
    if ((*v6 & 1) == 0)
    {
      v8 = *((_QWORD *)v6 - 1);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        v7 = sub_1007C84D8(0, v7[2] + 1, 1, v7);
      v10 = v7[2];
      v9 = v7[3];
      if (v10 >= v9 >> 1)
        v7 = sub_1007C84D8((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      v7[2] = v10 + 1;
      v7[v10 + 4] = v8;
    }
    v6 += v5;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v7;
}

_QWORD *sub_100113324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    v19 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v7, 0);
    v8 = v19;
    v9 = type metadata accessor for BeaconIdentifier(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 20), v3);
      v19 = v8;
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009A578(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_100113494()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B67A8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B67A8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100EC81A0);
}

uint64_t sub_100113518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  double v10;
  uint64_t v12;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v8 = sub_100518DA0(0xD000000000000015, 0x8000000100EC2810);
  if ((v9 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v10 = *(double *)(*(_QWORD *)(a1 + 56) + 8 * v8);
  static Date.trustedNow.getter((uint64_t)v7);
  Date.addingTimeInterval(_:)(-v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_10011362C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v8, (char *)&type metadata for () + 8, v9);
  if (v22)
  {
    v10 = *(_QWORD *)(v22 + 24);
    swift_retain();
    v11 = swift_release();
    v12 = __chkstk_darwin(v11);
    *(&v21 - 4) = a1;
    *(&v21 - 3) = a2;
    *(&v21 - 2) = v10;
    v13 = UUID.init()(v12);
    v14 = UUID.uuidString.getter(v13);
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    Connection.savepoint(_:block:)(v14, v16, sub_10012C478, &v21 - 6);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v18 = sub_10012C434();
    v19 = swift_allocError(&type metadata for DatabaseError, v18, 0, 0);
    *(_DWORD *)v20 = 2;
    *(_BYTE *)(v20 + 4) = 1;
    return swift_willThrow(v19);
  }
}

uint64_t sub_1001137D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  _QWORD *v80;
  void (*v81)(_QWORD *, char *, uint64_t);
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  int v128;
  _DWORD *v129;
  int *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t);
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  void (*v156)(char *, uint64_t);
  _QWORD *v157;
  uint64_t v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  void (*v181)(char *, uint64_t);
  void (*v182)(_QWORD *, char *, uint64_t);
  void (*v183)(char *, uint64_t);
  char *v184;
  void (*v185)(char *, uint64_t);
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  int *v236;
  char *v237;
  char *v238;
  unint64_t v239;
  uint64_t v240;
  void *v241;

  v232 = a3;
  v228 = a2;
  v4 = sub_10001A9A8(&qword_1010EF3F8);
  __chkstk_darwin(v4);
  v192 = (char *)&v182 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v191 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v187 = (uint64_t)&v182 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for OnConflict(0);
  v216 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207);
  v219 = (char *)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_101100320);
  __chkstk_darwin(v8);
  v204 = (uint64_t)&v182 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for ObservedAdvertisement.Location(0);
  v203 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v190 = (uint64_t *)((char *)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v236 = (int *)type metadata accessor for ObservedAdvertisement(0);
  v11 = __chkstk_darwin(v236);
  v206 = (uint64_t)&v182 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v198 = (uint64_t)&v182 - v13;
  v200 = type metadata accessor for Setter(0);
  v218 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v211 = (char *)&v182 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for Insert(0);
  v208 = *(_QWORD *)(v209 - 8);
  v15 = __chkstk_darwin(v209);
  v184 = (char *)&v182 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v189 = (char *)&v182 - v18;
  __chkstk_darwin(v17);
  v199 = (char *)&v182 - v19;
  v20 = sub_10001A9A8(&qword_1010EF3A8);
  __chkstk_darwin(v20);
  v212 = (char *)&v182 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = type metadata accessor for Row(0);
  v220 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v210 = (char *)&v182 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = sub_10001A9A8(&qword_1010EF358);
  v235 = *(char **)(v229 - 8);
  v23 = __chkstk_darwin(v229);
  v25 = (char *)&v182 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23);
  v222 = (char *)&v182 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v182 - v29;
  __chkstk_darwin(v28);
  v227 = (char *)&v182 - v31;
  v233 = type metadata accessor for Table(0);
  v223 = *(_QWORD *)(v233 - 8);
  v32 = __chkstk_darwin(v233);
  v186 = (char *)&v182 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v226 = (char *)&v182 - v35;
  __chkstk_darwin(v34);
  v231 = (char *)&v182 - v36;
  v37 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v38 = __chkstk_darwin(v37);
  v40 = (char *)&v182 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v42 = (char *)&v182 - v41;
  v43 = type metadata accessor for MACAddress(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = __chkstk_darwin(v43);
  v237 = (char *)&v182 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *(_QWORD *)(a1 + 16);
  v47 = *(_QWORD *)(a1 + 24);
  v224 = v44;
  v225 = v45;
  v234 = a1;
  if ((v47 & 0x2000000000000000) == 0)
  {
    sub_10001BBBC(v48, v47);
    sub_10001BBBC(v48, v47);
    sub_10001BBBC(v48, v47);
    sub_1002F7C0C(6, v48, v47);
    v49 = v48;
    v50 = v47;
    v52 = (uint64_t)v238;
    v51 = v239;
    sub_10001BBBC((uint64_t)v238, v239);
    MACAddress.init(addressToSanitize:type:)(v52, v51, 1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v237, v42, v43);
      sub_10012C494(v49, v50);
      sub_10001BC14(v52, v51);
      v53 = v50;
      v47 = v50;
      v48 = v49;
      a1 = v234;
      goto LABEL_6;
    }
    __break(1u);
LABEL_70:
    __break(1u);
    JUMPOUT(0x100115560);
  }
  v53 = v47 & 0xDFFFFFFFFFFFFFFFLL;
  sub_10001BBBC(v48, v47 & 0xDFFFFFFFFFFFFFFFLL);
  sub_10001BBBC(v48, v47 & 0xDFFFFFFFFFFFFFFFLL);
  sub_10001BBBC(v48, v47 & 0xDFFFFFFFFFFFFFFFLL);
  MACAddress.init(addressToSanitize:type:)(v48, v47 & 0xDFFFFFFFFFFFFFFFLL, 1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v40, 1, v43) == 1)
    goto LABEL_70;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v237, v40, v43);
  sub_10012C494(v48, v47);
LABEL_6:
  v54 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  v55 = v30;
  if (qword_1010EA4E0 != -1)
    swift_once(&qword_1010EA4E0, sub_100D29498);
  v56 = (char *)(v228 + v54);
  v202 = sub_10001A9A8(&qword_1010EF3E8);
  v57 = sub_10001A9E8(v202, (uint64_t)qword_1011B8188);
  LOBYTE(v238) = *(_BYTE *)(a1 + 9);
  v58 = sub_10012C49C();
  v59 = v222;
  v193 = v57;
  v214 = v58;
  == infix<A>(_:_:)(v57, &v238, &type metadata for UInt8, v58, &protocol witness table for Int64);
  if (qword_1010EA518 != -1)
    swift_once(&qword_1010EA518, sub_100D298A0);
  v194 = sub_10001A9A8(&qword_1010EF408);
  v60 = sub_10001A9E8(v194, (uint64_t)qword_1011B8230);
  v238 = (char *)v48;
  v239 = v53;
  v61 = sub_100006204((unint64_t *)&qword_1010EF410, (uint64_t (*)(uint64_t))&type metadata accessor for Blob, (uint64_t)&protocol conformance descriptor for Blob);
  v195 = v60;
  == infix<A>(_:_:)(v60, &v238, &type metadata for Data, &protocol witness table for Data, v61);
  && infix(_:_:)(v59, v25);
  v62 = v55;
  v63 = (void (*)(char *, uint64_t))*((_QWORD *)v235 + 1);
  v64 = v25;
  v65 = v229;
  v63(v64, v229);
  v63(v59, v65);
  if (qword_1010EA548 != -1)
    swift_once(&qword_1010EA548, sub_100D29BFC);
  v205 = v53;
  v235 = (char *)v48;
  v230 = v47;
  v188 = sub_10001A9A8(&qword_1010EF3B0);
  v66 = sub_10001A9E8(v188, (uint64_t)qword_1011B82C0);
  v67 = a1 + v236[11];
  v68 = type metadata accessor for Date(0);
  v197 = v66;
  v196 = v67;
  v215 = v68;
  == infix<A>(_:_:)(v66, v67, v68, &protocol witness table for Date, &protocol witness table for String);
  v69 = v227;
  && infix(_:_:)(v62, v59);
  v63(v59, v65);
  v63(v62, v65);
  v70 = v63;
  v71 = v226;
  v72 = v65;
  v73 = v233;
  v222 = v56;
  QueryType.filter(_:)(v69, v233, &protocol witness table for Table);
  v185 = v70;
  v70(v69, v72);
  if (qword_1010EA4B8 != -1)
    swift_once(&qword_1010EA4B8, sub_100D291C4);
  v74 = sub_10001A9A8(&qword_1010EF370);
  v75 = sub_10001A9E8(v74, (uint64_t)qword_1011B8110);
  v240 = v74;
  v241 = (void *)sub_1000193A4(&qword_1010EF3E0, &qword_1010EF370, (const char *)&protocol conformance descriptor for Expression<A>);
  v76 = sub_100018F08(&v238);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v76, v75, v74);
  v77 = v231;
  SchemaType.select(_:_:)(&v238, _swiftEmptyArrayStorage, v73, &protocol witness table for Table);
  v78 = v223;
  v79 = *(void (**)(char *, uint64_t))(v223 + 8);
  v79(v71, v73);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v238);
  v240 = v73;
  v241 = &protocol witness table for Table;
  v80 = sub_100018F08(&v238);
  v81 = *(void (**)(_QWORD *, char *, uint64_t))(v78 + 16);
  v81(v80, v77, v73);
  v82 = v221;
  Connection.prepare(_:)(&v238);
  if (v82)
  {
    sub_10012C494((uint64_t)v235, v230);
    v79(v77, v73);
LABEL_16:
    (*(void (**)(char *, uint64_t))(v224 + 8))(v237, v225);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v238);
  }
  v221 = v75;
  v183 = v79;
  v84 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v238);
  dispatch thunk of _AnySequenceBox._makeIterator()(v84);
  v85 = swift_release();
  v86 = (uint64_t)v212;
  dispatch thunk of _AnyIteratorBoxBase.next()(v85);
  swift_release();
  v87 = v220;
  v88 = v217;
  v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v220 + 48))(v86, 1, v217);
  v223 = 0;
  v182 = v81;
  if (v89 == 1)
  {
    sub_100004048(v86, &qword_1010EF3A8);
    LOBYTE(v238) = *(_BYTE *)(v234 + 9);
    <- infix<A>(_:_:)(v193, &v238, &type metadata for UInt8, v214);
    v90 = sub_10001A9A8(&qword_1010EF388);
    v91 = swift_allocObject(v90, ((*(unsigned __int8 *)(v218 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v218 + 80))+ 10 * *(_QWORD *)(v218 + 72), *(unsigned __int8 *)(v218 + 80) | 7);
    *(_OWORD *)(v91 + 16) = xmmword_100E27900;
    v220 = v91;
    if (qword_1010EA510 != -1)
      swift_once(&qword_1010EA510, sub_100D2980C);
    v92 = sub_10001A9E8(v194, (uint64_t)qword_1011B8218);
    v93 = MACAddress.data.getter(v92);
    v95 = v94;
    v238 = (char *)v93;
    v239 = v94;
    <- infix<A>(_:_:)(v92, &v238, &type metadata for Data, &protocol witness table for Data);
    sub_10001BC14(v93, v95);
    v238 = v235;
    v239 = v205;
    <- infix<A>(_:_:)(v195, &v238, &type metadata for Data, &protocol witness table for Data);
    if (qword_1010EA520 != -1)
      swift_once(&qword_1010EA520, sub_100D29934);
    v96 = v202;
    v97 = sub_10001A9E8(v202, (uint64_t)qword_1011B8248);
    v98 = v234;
    LOBYTE(v238) = *(_BYTE *)(v234 + 32);
    v99 = v214;
    <- infix<A>(_:_:)(v97, &v238, &type metadata for UInt8, v214);
    v100 = v219;
    if (qword_1010EA528 != -1)
      swift_once(&qword_1010EA528, sub_100D299C0);
    v101 = sub_10001A9E8(v96, (uint64_t)qword_1011B8260);
    LOBYTE(v238) = sub_1000AF25C(*(_BYTE *)(v98 + 32) & 0xB);
    <- infix<A>(_:_:)(v101, &v238, &type metadata for UInt8, v99);
    v73 = v233;
    v102 = v218;
    if (qword_1010EA530 != -1)
      swift_once(&qword_1010EA530, sub_100D29A54);
    v103 = sub_10001A9E8(v96, (uint64_t)qword_1011B8278);
    LOBYTE(v238) = *(_BYTE *)(v98 + 33);
    <- infix<A>(_:_:)(v103, &v238, &type metadata for UInt8, v99);
    if (qword_1010EA538 != -1)
      swift_once(&qword_1010EA538, sub_100D29AEC);
    v104 = sub_10001A9A8(&qword_1010EF418);
    v105 = sub_10001A9E8(v104, (uint64_t)qword_1011B8290);
    v106 = *(_BYTE *)(v98 + 35);
    LOBYTE(v238) = *(_BYTE *)(v98 + 34);
    BYTE1(v238) = v106;
    <- infix<A>(_:_:)(v105, &v238, &type metadata for UInt8, v99);
    v107 = v199;
    if (qword_1010EA540 != -1)
      swift_once(&qword_1010EA540, sub_100D29B74);
    v108 = sub_10001A9A8(&qword_1010EF420);
    v109 = sub_10001A9E8(v108, (uint64_t)qword_1011B82A8);
    LODWORD(v238) = *(_DWORD *)(v98 + 36);
    v110 = sub_10012C578();
    <- infix<A>(_:_:)(v109, &v238, &type metadata for Int32, v110);
    <- infix<A>(_:_:)(v197, v196, v215, &protocol witness table for Date);
    if (qword_1010EA558 != -1)
      swift_once(&qword_1010EA558, sub_100D29D24);
    v111 = v229;
    v112 = sub_10001A9E8(v229, (uint64_t)qword_1011B82F0);
    LOBYTE(v238) = *(_BYTE *)(v98 + v236[14]);
    <- infix<A>(_:_:)(v112, &v238, &type metadata for Bool, &protocol witness table for Bool);
    if (qword_1010EA550 != -1)
      swift_once(&qword_1010EA550, sub_100D29C8C);
    v113 = sub_10001A9E8(v111, (uint64_t)qword_1011B82D8);
    LOBYTE(v238) = 0;
    <- infix<A>(_:_:)(v113, &v238, &type metadata for Bool, &protocol witness table for Bool);
    v114 = v211;
    QueryType.insert(_:_:)(v211, v220, v73, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v102 + 8))(v114, v200);
    v115 = v223;
    v116 = Connection.run(_:)(v107);
    v117 = v183;
    v118 = v221;
    if (v115)
    {
      sub_10012C494((uint64_t)v235, v230);
      (*(void (**)(char *, uint64_t))(v208 + 8))(v107, v209);
      v117(v231, v73);
      return (*(uint64_t (**)(char *, uint64_t))(v224 + 8))(v237, v225);
    }
    v222 = (char *)v116;
    v223 = 0;
    (*(void (**)(char *, uint64_t))(v208 + 8))(v107, v209);
    v124 = (uint64_t)v235;
    v130 = v236;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(v210, v86, v88);
    Row.subscript.getter(&v238, v221, &type metadata for Int64, &protocol witness table for Int64);
    v222 = v238;
    v119 = v234;
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v120 = type metadata accessor for Logger(0);
    sub_10001A9E8(v120, (uint64_t)qword_1011B7660);
    v121 = v198;
    sub_10005972C(v119, v198, type metadata accessor for ObservedAdvertisement);
    v122 = v119;
    v123 = v206;
    sub_10005972C(v122, v206, type metadata accessor for ObservedAdvertisement);
    v124 = (uint64_t)v235;
    v125 = v230;
    sub_10012C644((uint64_t)v235, v230);
    v126 = sub_10012C644(v124, v125);
    v127 = Logger.logObject.getter(v126);
    v128 = static os_log_type_t.info.getter(v127);
    if (os_log_type_enabled(v127, (os_log_type_t)v128))
    {
      LODWORD(v212) = v128;
      v129 = (_DWORD *)swift_slowAlloc(42, -1);
      v238 = (char *)swift_slowAlloc(96, -1);
      *v129 = 136315906;
      __asm { BR              X10 }
    }

    sub_1000126B0(v123, type metadata accessor for ObservedAdvertisement);
    sub_10012C494(v124, v125);
    sub_10012C494(v124, v125);
    sub_1000126B0(v121, type metadata accessor for ObservedAdvertisement);
    (*(void (**)(char *, uint64_t))(v220 + 8))(v210, v88);
    v100 = v219;
    v130 = v236;
    v118 = v221;
  }
  v131 = v204;
  sub_10000F9B8(v234 + v130[12], v204, (uint64_t *)&unk_101100320);
  v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v203 + 48))(v131, 1, v213);
  v133 = v216;
  if (v132 == 1)
  {
    sub_100004048(v131, (uint64_t *)&unk_101100320);
    v134 = v201;
    v135 = (uint64_t)v192;
    v136 = v191;
    v137 = v223;
    v138 = v183;
  }
  else
  {
    v139 = v190;
    sub_1000126EC(v131, (uint64_t)v190, type metadata accessor for ObservedAdvertisement.Location);
    (*(void (**)(char *, _QWORD, uint64_t))(v133 + 104))(v100, enum case for OnConflict.ignore(_:), v207);
    v140 = sub_10001A9A8(&qword_1010EF388);
    v141 = swift_allocObject(v140, ((*(unsigned __int8 *)(v218 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v218 + 80))+ 5 * *(_QWORD *)(v218 + 72), *(unsigned __int8 *)(v218 + 80) | 7);
    *(_OWORD *)(v141 + 16) = xmmword_100E27910;
    v238 = v222;
    <- infix<A>(_:_:)(v118, &v238, &type metadata for Int64, &protocol witness table for Int64);
    if (qword_1010EA560 != -1)
      swift_once(&qword_1010EA560, sub_100D29DB0);
    v142 = sub_10001A9A8(&qword_1010EF448);
    v143 = sub_10001A9E8(v142, (uint64_t)qword_1011B8308);
    v238 = (char *)*v139;
    <- infix<A>(_:_:)(v143, &v238, &type metadata for Double, &protocol witness table for Double);
    v138 = v183;
    if (qword_1010EA568 != -1)
      swift_once(&qword_1010EA568, sub_100D29E40);
    v144 = sub_10001A9E8(v142, (uint64_t)qword_1011B8320);
    v238 = (char *)v139[1];
    <- infix<A>(_:_:)(v144, &v238, &type metadata for Double, &protocol witness table for Double);
    if (qword_1010EA570 != -1)
      swift_once(&qword_1010EA570, sub_100D29ED4);
    v145 = sub_10001A9E8(v142, (uint64_t)qword_1011B8338);
    v238 = (char *)v139[2];
    <- infix<A>(_:_:)(v145, &v238, &type metadata for Double, &protocol witness table for Double);
    v137 = v223;
    if (qword_1010EA578 != -1)
      swift_once(&qword_1010EA578, sub_100D29F68);
    v146 = sub_10001A9E8(v188, (uint64_t)qword_1011B8350);
    <- infix<A>(_:_:)(v146, (char *)v139 + *(int *)(v213 + 28), v215, &protocol witness table for Date);
    v147 = v189;
    v148 = v219;
    v73 = v233;
    QueryType.insert(or:_:)(v219, v141, v233, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v216 + 8))(v148, v207);
    Connection.run(_:)(v147);
    if (v137)
    {
      sub_10012C494((uint64_t)v235, v230);
      (*(void (**)(char *, uint64_t))(v208 + 8))(v147, v209);
      sub_1000126B0((uint64_t)v139, type metadata accessor for ObservedAdvertisement.Location);
      v138(v231, v73);
      return (*(uint64_t (**)(char *, uint64_t))(v224 + 8))(v237, v225);
    }
    (*(void (**)(char *, uint64_t))(v208 + 8))(v147, v209);
    sub_1000126B0((uint64_t)v139, type metadata accessor for ObservedAdvertisement.Location);
    v134 = v201;
    v124 = (uint64_t)v235;
    v135 = (uint64_t)v192;
    v136 = v191;
  }
  sub_10000F9B8(v234 + v236[13], v135, &qword_1010EF3F8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v135, 1, v134) == 1)
  {
    sub_10012C494(v124, v230);
    v138(v231, v73);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v237, v225);
    return sub_100004048(v135, &qword_1010EF3F8);
  }
  v223 = v137;
  v149 = v187;
  sub_1000126EC(v135, v187, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v150 = sub_10001A9A8(&qword_1010EF3B8);
  v151 = sub_10001A9E8(v150, (uint64_t)qword_1011B8128);
  v152 = type metadata accessor for UUID(0);
  v153 = v227;
  v236 = (int *)v151;
  == infix<A>(_:_:)(v151, v149, v152, &protocol witness table for UUID, &protocol witness table for String);
  v154 = v226;
  QueryType.filter(_:)(v153, v73, &protocol witness table for Table);
  v185(v153, v229);
  v155 = v186;
  QueryType.limit(_:)(1, 0, v73, &protocol witness table for Table);
  v156 = v183;
  v183(v154, v73);
  v240 = v73;
  v241 = &protocol witness table for Table;
  v157 = sub_100018F08(&v238);
  v182(v157, v155, v73);
  v158 = v223;
  Connection.prepare(_:)(&v238);
  if (v158)
  {
    sub_10012C494((uint64_t)v235, v230);
    v156(v155, v73);
    sub_1000126B0(v149, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v156(v231, v73);
    goto LABEL_16;
  }
  v159 = v236;
  v160 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v238);
  v161 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v160);
  swift_release();
  v162 = *(_QWORD *)(v161 + 16);
  swift_release();
  if (v162)
  {
    v234 = v228 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
    (*(void (**)(char *, _QWORD, uint64_t))(v216 + 104))(v219, enum case for OnConflict.ignore(_:), v207);
    v163 = sub_10001A9A8(&qword_1010EF388);
    v164 = swift_allocObject(v163, ((*(unsigned __int8 *)(v218 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v218 + 80))+ 4 * *(_QWORD *)(v218 + 72), *(unsigned __int8 *)(v218 + 80) | 7);
    *(_OWORD *)(v164 + 16) = xmmword_100E26E00;
    v165 = v164;
    v238 = v222;
    <- infix<A>(_:_:)(v221, &v238, &type metadata for Int64, &protocol witness table for Int64);
    v166 = v187;
    <- infix<A>(_:_:)(v159, v187, v152, &protocol witness table for UUID);
    v167 = v183;
    if (qword_1010EA4D0 != -1)
      swift_once(&qword_1010EA4D0, sub_100D29370);
    v168 = sub_10001A9E8(v202, (uint64_t)qword_1011B8158);
    v169 = v201;
    LOBYTE(v238) = *(_BYTE *)(v166 + *(int *)(v201 + 20));
    <- infix<A>(_:_:)(v168, &v238, &type metadata for UInt8, v214);
    if (qword_1010EA4C8 != -1)
      swift_once(&qword_1010EA4C8, sub_100D292E4);
    v170 = sub_10001A9A8(&qword_1010EF430);
    v171 = sub_10001A9E8(v170, (uint64_t)qword_1011B8140);
    v238 = *(char **)(v166 + *(int *)(v169 + 24));
    v172 = sub_10012C5BC();
    <- infix<A>(_:_:)(v171, &v238, &type metadata for UInt64, v172);
    v173 = v184;
    v174 = v219;
    v175 = v233;
    QueryType.insert(or:_:)(v219, v165, v233, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v216 + 8))(v174, v207);
    Connection.run(_:)(v173);
    v176 = v186;
    sub_10012C494((uint64_t)v235, v230);
    (*(void (**)(char *, uint64_t))(v208 + 8))(v173, v209);
    v167(v176, v175);
    sub_1000126B0(v166, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v167(v231, v175);
  }
  else
  {
    v177 = sub_10012C600();
    v178 = swift_allocError(&type metadata for ObservationStore.Error, v177, 0, 0);
    *v179 = 0;
    swift_willThrow(v178);
    sub_10012C494((uint64_t)v235, v230);
    v180 = v233;
    v181 = v183;
    v183(v186, v233);
    sub_1000126B0(v187, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v181(v231, v180);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v224 + 8))(v237, v225);
}

uint64_t sub_100115570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  BOOL v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v3 = v2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v53 - v14;
  if (a1)
  {
    sub_100113518(a1, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
      v16 = sub_10012C64C();
      v17 = swift_allocError(&type metadata for ObservationStore.ObservationStoreError, v16, 0, 0);
      swift_willThrow(v17);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
      v18 = sub_100115D2C((uint64_t)v15, a2);
      v59 = v15;
      if (v2)
      {
        if (qword_1010E9988 != -1)
          swift_once(&qword_1010E9988, sub_100113494);
        v19 = type metadata accessor for Logger(0);
        sub_10001A9E8(v19, (uint64_t)qword_1011B67A8);
        swift_errorRetain(v2);
        v20 = swift_errorRetain(v2);
        v21 = Logger.logObject.getter(v20);
        v22 = static os_log_type_t.error.getter(v21);
        if (os_log_type_enabled(v21, v22))
        {
          v58 = a1;
          v23 = swift_slowAlloc(12, -1);
          v57 = v10;
          v24 = (uint8_t *)v23;
          v25 = swift_slowAlloc(8, -1);
          v56 = a2;
          v26 = (_QWORD *)v25;
          *(_DWORD *)v24 = 138543362;
          swift_errorRetain(v2);
          v27 = _swift_stdlib_bridgeErrorToNSError(v2);
          v62 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 4, v24 + 12);
          *v26 = v27;
          swift_errorRelease(v2);
          swift_errorRelease(v2);
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Purge failed to delete advertisements: %{public}@.", v24, 0xCu);
          v28 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v26, 1, v28);
          v29 = v26;
          a2 = v56;
          swift_slowDealloc(v29, -1, -1);
          v30 = v24;
          v10 = v57;
          swift_slowDealloc(v30, -1, -1);

          swift_errorRelease(v2);
        }
        else
        {
          swift_errorRelease(v2);
          swift_errorRelease(v2);
          swift_errorRelease(v2);

        }
        v31 = 0;
      }
      else
      {
        v31 = (uint64_t)v18;
        if (qword_1010E9988 != -1)
          swift_once(&qword_1010E9988, sub_100113494);
        v32 = type metadata accessor for Logger(0);
        sub_10001A9E8(v32, (uint64_t)qword_1011B67A8);
        v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.default.getter(v34);
        v36 = v35;
        if (os_log_type_enabled(v34, v35))
        {
          v37 = swift_slowAlloc(22, -1);
          v56 = a2;
          v38 = v37;
          v58 = swift_slowAlloc(32, -1);
          v62 = v58;
          *(_DWORD *)v38 = 134218242;
          v60 = v31;
          v55 = &v61;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v38 + 4, v38 + 12);
          *(_WORD *)(v38 + 12) = 2082;
          v54 = v38 + 14;
          v39 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          LODWORD(v57) = v36;
          v40 = v34;
          v41 = dispatch thunk of CustomStringConvertible.description.getter(v9, v39);
          v60 = sub_100016940(v41, v42, &v62);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v55, v54, v38 + 22);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
          _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v57, "Purge deleted %ld advertisements older than %{public}s.", (uint8_t *)v38, 0x16u);
          v43 = v58;
          swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v43, -1, -1);
          v44 = v38;
          a2 = v56;
          swift_slowDealloc(v44, -1, -1);

        }
        else
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);

        }
      }
      v45 = sub_100116180(a2);
      if (qword_1010E9988 != -1)
        swift_once(&qword_1010E9988, sub_100113494);
      v46 = type metadata accessor for Logger(0);
      v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B67A8);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.default.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v58 = v31;
        v50 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v50 = 134217984;
        v31 = v58;
        v62 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v50 + 4, v50 + 12);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Purge deleted %ld reconciled advertisements.", v50, 0xCu);
        swift_slowDealloc(v50, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
      v51 = __OFADD__(v31, v45);
      v3 = v31 + v45;
      if (v51)
      {
        __break(1u);

        swift_errorRelease(0);
        swift_errorRelease(0);
        swift_errorRelease(0);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
      }
    }
  }
  else
  {
    sub_100C64290();
    if (!v2)
      return 0;
  }
  return v3;
}

char *sub_100115D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v42 = a1;
  v4 = sub_10001A9A8(&qword_1010EF358);
  v43 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v39 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v39 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v39 - v14;
  v46 = type metadata accessor for Table(0);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Delete(0);
  v47 = *(_QWORD *)(v18 - 8);
  v48 = v18;
  __chkstk_darwin(v18);
  v45 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a2 + 32);
  v21 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v20, &type metadata for () + 1, v21);
  if (v49)
  {
    v22 = *(_QWORD *)(v49 + 24);
    swift_retain();
    swift_release();
    v23 = sub_1001166B8(v22, a2);
    if (v2)
    {
      swift_release();
    }
    else
    {
      v41 = v23;
      v39 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      if (qword_1010EA548 != -1)
        swift_once(&qword_1010EA548, sub_100D29BFC);
      v40 = v4;
      v24 = sub_10001A9A8(&qword_1010EF3B0);
      v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B82C0);
      v26 = type metadata accessor for Date(0);
      < infix<A>(_:_:)(v25, v42, v26, &protocol witness table for Date, &protocol witness table for String);
      v49 = v41;
      if (qword_1010EA4B8 != -1)
        swift_once(&qword_1010EA4B8, sub_100D291C4);
      v27 = sub_10001A9A8(&qword_1010EF370);
      v42 = sub_10001A9E8(v27, (uint64_t)qword_1011B8110);
      v28 = sub_10001A9A8(&qword_1010EF390);
      v29 = sub_1000193A4(&qword_1010EF398, &qword_1010EF390, (const char *)&protocol conformance descriptor for Set<A>);
      Collection<>.contains(_:)(v42, v28, v29, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      LOBYTE(v49) = 0;
      == infix<A>(_:_:)(v7, &v49, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Int64);
      v30 = *(void (**)(char *, uint64_t))(v43 + 8);
      v31 = v7;
      v32 = v40;
      v30(v31, v40);
      && infix(_:_:)(v13, v10);
      v30(v10, v32);
      v30(v13, v32);
      v33 = v46;
      QueryType.filter(_:)(v15, v46, &protocol witness table for Table);
      v30(v15, v32);
      v34 = v45;
      QueryType.delete()(v33, &protocol witness table for Table);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v33);
      v7 = (char *)Connection.run(_:)(v34);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v48);
      swift_release();
    }
  }
  else
  {
    v35 = sub_10012C434();
    v36 = swift_allocError(&type metadata for DatabaseError, v35, 0, 0);
    *(_DWORD *)v37 = 2;
    *(_BYTE *)(v37 + 4) = 1;
    swift_willThrow(v36);
  }
  return v7;
}

uint64_t sub_100116180(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v41;
  uint64_t v42;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v52 = sub_10001A9A8(&qword_1010EF358);
  v50 = *(_QWORD *)(v52 - 8);
  v3 = __chkstk_darwin(v52);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v41 - v6;
  v8 = type metadata accessor for Delete(0);
  v58 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v53 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Table(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v51 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v41 - v14;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a1, v16, &type metadata for () + 1, v17);
  if (v54)
  {
    v49 = v7;
    v18 = *(_QWORD *)(v54 + 24);
    swift_retain();
    swift_release();
    v19 = sub_1001166B8(v18, a1);
    if (v1)
    {
      swift_release();
    }
    else
    {
      v45 = v19;
      v47 = v18;
      v48 = v8;
      v46 = (void (*)(char *, uint64_t))(a1
                                                 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
      if (qword_1010EA4B8 != -1)
        swift_once(&qword_1010EA4B8, sub_100D291C4);
      v23 = sub_10001A9A8(&qword_1010EF370);
      v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B8110);
      v42 = v24;
      v56 = v23;
      v57 = sub_1000193A4(&qword_1010EF3E0, &qword_1010EF370, (const char *)&protocol conformance descriptor for Expression<A>);
      sub_100018F08(&v54);
      QueryType.subscript.getter(v24, v10, &type metadata for Int64, &protocol witness table for Table);
      SchemaType.select(_:_:)(&v54, _swiftEmptyArrayStorage, v10, &protocol witness table for Table);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v54);
      v25 = Expressible.asSQL()();
      object = v25._object;
      countAndFlagsBits = v25._countAndFlagsBits;
      v46 = *(void (**)(char *, uint64_t))(v11 + 8);
      v46(v15, v10);
      v54 = v45;
      v26 = sub_10001A9A8(&qword_1010EF390);
      v27 = sub_1000193A4(&qword_1010EF398, &qword_1010EF390, (const char *)&protocol conformance descriptor for Set<A>);
      Collection<>.contains(_:)(v42, v26, v27, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      LOBYTE(v54) = 0;
      v28 = v49;
      == infix<A>(_:_:)(v5, &v54, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Int64);
      v29 = *(void (**)(char *, uint64_t))(v50 + 8);
      v30 = v5;
      v31 = v52;
      v29(v30, v52);
      v32 = v51;
      QueryType.filter(_:)(v28, v10, &protocol witness table for Table);
      v29(v28, v31);
      v54 = 0;
      v55 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v54 = 0xD000000000000028;
      v55 = 0x8000000100EC81C0;
      v33._countAndFlagsBits = countAndFlagsBits;
      v33._object = object;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = 41;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      v35 = v54;
      v36 = v55;
      v37 = sub_1000193A4(&qword_1010EF458, &qword_1010EF358, (const char *)&protocol conformance descriptor for Expression<A>);
      ExpressionType.init(literal:)(v35, v36, v31, v37);
      QueryType.filter(_:)(v28, v10, &protocol witness table for Table);
      v29(v28, v31);
      v38 = v46;
      v46(v32, v10);
      v39 = v53;
      QueryType.delete()(v10, &protocol witness table for Table);
      v38(v15, v10);
      v11 = Connection.run(_:)(v39);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v48);
      swift_release();
    }
  }
  else
  {
    v20 = sub_10012C434();
    v21 = swift_allocError(&type metadata for DatabaseError, v20, 0, 0);
    *(_DWORD *)v22 = 2;
    *(_BYTE *)(v22 + 4) = 1;
    swift_willThrow(v21);
  }
  return v11;
}

uint64_t sub_1001166B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(os_log_t);
  os_log_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  void (*v73)(_QWORD, _QWORD, _QWORD);
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  _QWORD *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  uint64_t *v120;
  os_log_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  void (*v124)(char *, uint64_t);
  void (*v125)(char *, uint64_t);
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  char *v132;
  __int128 v133;
  uint64_t *v134;
  os_log_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void (*v140)(_QWORD, _QWORD, _QWORD);
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169[8];
  uint64_t v170;
  void *v171;
  _QWORD *v172;

  v139 = a1;
  v159 = sub_10001A9A8(&qword_1010EF3A0);
  v147 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v4 = (char *)&v127 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v5);
  v128 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for Date(0);
  v156 = *(_QWORD *)(v146 - 8);
  v7 = __chkstk_darwin(v146);
  v142 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v141 = (char *)&v127 - v9;
  v155 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v155 - 8);
  v11 = __chkstk_darwin(v155);
  v127 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v165 = (char *)&v127 - v13;
  v14 = type metadata accessor for Row(0);
  v151 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v158 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010EF3A8);
  __chkstk_darwin(v16);
  v150 = (char *)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_10001A9A8(&qword_1010EF3B0);
  v137 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v135 = (os_log_t)((char *)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v164 = sub_10001A9A8(&qword_1010EF370);
  v152 = *(_QWORD *)(v164 - 8);
  v19 = __chkstk_darwin(v164);
  v149 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v163 = (char *)&v127 - v22;
  __chkstk_darwin(v21);
  v154 = (char *)&v127 - v23;
  v145 = sub_10001A9A8(&qword_1010EF358);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  *(_QWORD *)&v133 = (char *)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for Table(0);
  v25 = *(_QWORD *)(v166 - 8);
  v26 = __chkstk_darwin(v166);
  v153 = (char *)&v127 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v127 - v29;
  __chkstk_darwin(v28);
  v143 = (char *)&v127 - v31;
  if (qword_1010E9988 != -1)
    swift_once(&qword_1010E9988, sub_100113494);
  v138 = v30;
  v148 = v10;
  v161 = v14;
  v32 = type metadata accessor for Logger(0);
  v130 = sub_10001A9E8(v32, (uint64_t)qword_1011B67A8);
  v33 = Logger.logObject.getter(v130);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Gathering high-value owned observations.", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }
  v129 = v4;

  v172 = &_swiftEmptySetSingleton;
  v36 = (char *)(a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement);
  v37 = (void (*)(char *, uint64_t))(a2
                                             + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo);
  v38 = v166;
  v170 = v166;
  v171 = &protocol witness table for Table;
  v39 = sub_100018F08(&v168);
  v136 = v25;
  v40 = *(uint64_t **)(v25 + 16);
  v160 = v37;
  v134 = v40;
  ((void (*)(_QWORD *, void (*)(char *, uint64_t), uint64_t))v40)(v39, v37, v38);
  if (qword_1010EA4B8 != -1)
    swift_once(&qword_1010EA4B8, sub_100D291C4);
  v41 = v164;
  v42 = sub_10001A9E8(v164, (uint64_t)qword_1011B8110);
  v43 = v154;
  v44 = v166;
  QueryType.subscript.getter(v42, v166, &type metadata for Int64, &protocol witness table for Table);
  v45 = v163;
  v162 = v42;
  QueryType.subscript.getter(v42, v44, &type metadata for Int64, &protocol witness table for Table);
  v46 = v133;
  == infix<A>(_:_:)(v43, v45, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v47 = *(void (**)(char *, uint64_t))(v152 + 8);
  v47(v45, v41);
  v160 = v47;
  v47(v43, v41);
  v163 = v36;
  QueryType.join(_:on:)(&v168, v46, v44, &protocol witness table for Table);
  (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v46, v145);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v168);
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v48 = sub_10001A9A8(&qword_1010EF3B8);
  v49 = sub_10001A9E8(v48, (uint64_t)qword_1011B8128);
  v170 = v48;
  *(_QWORD *)&v133 = sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  v171 = (void *)v133;
  v50 = sub_100018F08(&v168);
  v132 = *(char **)(*(_QWORD *)(v48 - 8) + 16);
  ((void (*)(_QWORD *, uint64_t, uint64_t))v132)(v50, v49, v48);
  v51 = sub_10001A9A8(&qword_1010EF3C8);
  v52 = swift_allocObject(v51, 112, 7);
  v131 = xmmword_100E22B10;
  *(_OWORD *)(v52 + 16) = xmmword_100E22B10;
  if (qword_1010EA548 != -1)
    swift_once(&qword_1010EA548, sub_100D29BFC);
  v53 = v157;
  v54 = sub_10001A9E8(v157, (uint64_t)qword_1011B82C0);
  v55 = v137;
  v56 = *(void (**)(os_log_t))(v137 + 16);
  v57 = v135;
  v145 = v54;
  v56(v135);
  *(_QWORD *)(v52 + 56) = v159;
  *(_QWORD *)(v52 + 64) = sub_1000193A4(&qword_1010EF3D0, &qword_1010EF3A0, (const char *)&protocol conformance descriptor for Expression<A>);
  sub_100018F08((_QWORD *)(v52 + 32));
  v144 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType<>.max.getter(v53, v144, &protocol witness table for Date, &protocol witness table for String);
  (*(void (**)(os_log_t, uint64_t))(v55 + 8))(v57, v53);
  v58 = v154;
  v59 = v164;
  (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v154, v162, v164);
  *(_QWORD *)(v52 + 96) = v59;
  *(_QWORD *)(v52 + 104) = sub_1000193A4(&qword_1010EF3E0, &qword_1010EF370, (const char *)&protocol conformance descriptor for Expression<A>);
  sub_100018F08((_QWORD *)(v52 + 72));
  v60 = v166;
  QueryType.subscript.getter(v58, v166, &type metadata for Int64, &protocol witness table for Table);
  v160(v58, v59);
  v61 = v138;
  v62 = v153;
  SchemaType.select(_:_:)(&v168, v52, v60, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v63 = *(void (**)(char *, uint64_t))(v136 + 8);
  v63(v62, v60);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v168);
  v64 = swift_allocObject(v51, 112, 7);
  *(_OWORD *)(v64 + 16) = v131;
  v65 = v133;
  *(_QWORD *)(v64 + 56) = v48;
  *(_QWORD *)(v64 + 64) = v65;
  v66 = sub_100018F08((_QWORD *)(v64 + 32));
  v154 = (char *)v49;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v132)(v66, v49, v48);
  if (qword_1010EA520 != -1)
    swift_once(&qword_1010EA520, sub_100D29934);
  v67 = sub_10001A9A8(&qword_1010EF3E8);
  v68 = sub_10001A9E8(v67, (uint64_t)qword_1011B8248);
  *(_QWORD *)(v64 + 96) = v67;
  *(_QWORD *)(v64 + 104) = sub_1000193A4(&qword_1010EF3F0, &qword_1010EF3E8, (const char *)&protocol conformance descriptor for Expression<A>);
  v69 = sub_100018F08((_QWORD *)(v64 + 72));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v69, v68, v67);
  v70 = v143;
  v71 = v166;
  QueryType.group(_:)(v64, v166, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v63(v61, v71);
  v170 = v71;
  v171 = &protocol witness table for Table;
  v72 = sub_100018F08(&v168);
  ((void (*)(_QWORD *, char *, uint64_t))v134)(v72, v70, v71);
  v73 = v140;
  Connection.prepare(_:)(&v168);
  v74 = (char *)v63;
  v75 = v161;
  v76 = v158;
  if (v73)
  {
    v63(v70, v166);
    swift_bridgeObjectRelease();
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v168);
  }
  else
  {
    v78 = v155;
    v138 = v74;
    v79 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v168);
    v80 = dispatch thunk of _AnySequenceBox._makeIterator()(v79);
    swift_release();
    v81 = swift_retain();
    v82 = v150;
    v153 = (char *)v80;
    dispatch thunk of _AnyIteratorBoxBase.next()(v81);
    v83 = v151;
    v152 = *(_QWORD *)(v151 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v152)(v82, 1, v75) != 1)
    {
      v134 = &v168;
      v140 = *(void (**)(_QWORD, _QWORD, _QWORD))(v83 + 32);
      *(_QWORD *)&v84 = 141558787;
      v133 = v84;
      v132 = (char *)&type metadata for Any + 8;
      v90 = v129;
      v91 = (uint64_t)v128;
      v140(v76, v82, v75);
      while (1)
      {
        Row.get<A>(_:)(v154, v78, &protocol witness table for UUID);
        v96 = v149;
        QueryType.subscript.getter(v162, v166, &type metadata for Int64, &protocol witness table for Table);
        Row.get<A>(_:)(v96, &type metadata for Int64, &protocol witness table for Int64);
        v160(v96, v164);
        v97 = v168;
        ExpressionType<>.max.getter(v157, v144, &protocol witness table for Date, &protocol witness table for String);
        v98 = v146;
        Row.get<A>(_:)(v90, v146, &protocol witness table for Date);
        (*(void (**)(char *, uint64_t))(v147 + 8))(v90, v159);
        v99 = v156;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v91, 1, v98) == 1)
        {
          (*(void (**)(char *, uint64_t))(v148 + 8))(v165, v78);
          v92 = v158;
          v93 = v161;
          (*(void (**)(char *, uint64_t))(v151 + 8))(v158, v161);
          v94 = sub_100004048(v91, (uint64_t *)&unk_1010EA690);
        }
        else
        {
          v100 = v141;
          (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v141, v91, v98);
          v101 = v98;
          sub_100A0A194(&v168, v97);
          v102 = v148;
          v103 = v127;
          (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v127, v165, v78);
          v104 = v142;
          v105 = (*(uint64_t (**)(char *, char *, uint64_t))(v99 + 16))(v142, v100, v101);
          v106 = Logger.logObject.getter(v105);
          v107 = static os_log_type_t.info.getter(v106);
          LODWORD(v139) = v107;
          if (os_log_type_enabled(v106, v107))
          {
            v108 = swift_slowAlloc(42, -1);
            v109 = swift_slowAlloc(64, -1);
            v137 = v109;
            *(_DWORD *)v108 = v133;
            v167 = 1752392040;
            v168 = v109;
            v110 = v134;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v134, v108 + 4, v108 + 12);
            *(_WORD *)(v108 + 12) = 2081;
            v111 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v135 = v106;
            v112 = dispatch thunk of CustomStringConvertible.description.getter(v155, v111);
            v167 = sub_100016940(v112, v113, &v168);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v110, v108 + 14, v108 + 22);
            swift_bridgeObjectRelease();
            v136 = *(_QWORD *)(v102 + 8);
            ((void (*)(char *, uint64_t))v136)(v103, v155);
            *(_WORD *)(v108 + 22) = 2080;
            v114 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v115 = v142;
            v116 = dispatch thunk of CustomStringConvertible.description.getter(v101, v114);
            v167 = sub_100016940(v116, v117, &v168);
            v118 = v155;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v110, v108 + 24, v108 + 32);
            swift_bridgeObjectRelease();
            v119 = *(void (**)(char *, uint64_t))(v156 + 8);
            v119(v115, v101);
            *(_WORD *)(v108 + 32) = 2048;
            v167 = v97;
            v120 = v110;
            v78 = v118;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, v120, v108 + 34, v108 + 42);
            v121 = v135;
            _os_log_impl((void *)&_mh_execute_header, v135, (os_log_type_t)v139, "Adding high-value Owned Observations for beacon: %{private,mask.hash}s, scanDate: %s, advId: %lld.", (uint8_t *)v108, 0x2Au);
            v122 = v137;
            swift_arrayDestroy(v137, 2, v132);
            v93 = v161;
            swift_slowDealloc(v122, -1, -1);
            swift_slowDealloc(v108, -1, -1);

            v119(v141, v101);
            ((void (*)(char *, uint64_t))v136)(v165, v78);
            v92 = v158;
            v94 = (*(uint64_t (**)(char *, uint64_t))(v151 + 8))(v158, v93);
          }
          else
          {

            v123 = *(void (**)(char *, uint64_t))(v156 + 8);
            v123(v104, v101);
            v124 = *(void (**)(char *, uint64_t))(v102 + 8);
            v124(v103, v78);
            v123(v100, v101);
            v124(v165, v78);
            v92 = v158;
            v93 = v161;
            v94 = (*(uint64_t (**)(char *, uint64_t))(v151 + 8))(v158, v161);
          }
          v90 = v129;
          v91 = (uint64_t)v128;
        }
        v95 = v150;
        dispatch thunk of _AnyIteratorBoxBase.next()(v94);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v152)(v95, 1, v93) == 1)
          break;
        v140(v92, v95, v93);
      }
    }
    swift_release();
    v85 = v172;
    swift_bridgeObjectRetain(v172);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.default.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v89 = 134217984;
      v168 = v85[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, v169, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Found high-value owned observations count: %ld.", v89, 0xCu);
      swift_slowDealloc(v89, -1, -1);
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    v125 = (void (*)(char *, uint64_t))v138;
    v126 = v143;

    v125(v126, v166);
    swift_beginAccess(&v172, &v168, 0, 0);
    return (uint64_t)v172;
  }
}

uint64_t sub_1001178B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v2[44] = a1;
  v2[45] = a2;
  v3 = sub_10001A9A8(&qword_1010EF3B0);
  v2[46] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[47] = v4;
  v2[48] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010ED860);
  v2[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v2[50] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[51] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[52] = swift_task_alloc(v8);
  v2[53] = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EF3A8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[54] = swift_task_alloc(v9);
  v2[55] = swift_task_alloc(v9);
  v10 = type metadata accessor for Row(0);
  v2[56] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[57] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[58] = swift_task_alloc(v12);
  v2[59] = swift_task_alloc(v12);
  v13 = sub_10001A9A8(&qword_1010EF370);
  v2[60] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[61] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[62] = swift_task_alloc(v15);
  v2[63] = swift_task_alloc(v15);
  v16 = sub_10001A9A8(&qword_1010EF358);
  v2[64] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[65] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[66] = swift_task_alloc(v18);
  v2[67] = swift_task_alloc(v18);
  v2[68] = swift_task_alloc(v18);
  v19 = type metadata accessor for JoinType(0);
  v2[69] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v2[70] = v20;
  v2[71] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Table(0);
  v2[72] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v2[73] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[74] = swift_task_alloc(v23);
  v2[75] = swift_task_alloc(v23);
  v2[76] = swift_task_alloc(v23);
  v2[77] = swift_task_alloc(v23);
  v2[78] = swift_task_alloc(v23);
  v2[79] = swift_task_alloc(v23);
  v2[80] = swift_task_alloc(v23);
  v24 = type metadata accessor for Delete(0);
  v2[81] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v2[82] = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[83] = swift_task_alloc(v26);
  v2[84] = swift_task_alloc(v26);
  return swift_task_switch(sub_100117B3C, 0, 0);
}

uint64_t sub_100117B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(_QWORD *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void (*v59)(_QWORD *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  void (*v75)(uint64_t, _QWORD, uint64_t);
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, _QWORD, uint64_t);
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  void (*v170)(uint64_t, uint64_t);
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(uint64_t, uint64_t);
  uint64_t v211;
  uint64_t v212;
  void (*v213)(uint64_t);
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int (*v222)(uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  void (*v225)(_QWORD *, uint64_t, uint64_t);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void (*v231)(uint64_t, uint64_t);
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v1 + 32);
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, v1, v2, &type metadata for () + 1, v3);
  if (*(_QWORD *)(v0 + 336))
  {
    v219 = (_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 584);
    v5 = *(_QWORD *)(v0 + 576);
    v6 = *(_QWORD *)(v0 + 568);
    v7 = *(_QWORD *)(v0 + 560);
    v8 = *(_QWORD *)(v0 + 360);
    swift_retain();
    swift_release();
    v216 = enum case for JoinType.leftOuter(_:);
    v213 = *(void (**)(uint64_t))(v7 + 104);
    v213(v6);
    v9 = v8 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEventLocation;
    *(_QWORD *)(v0 + 80) = v5;
    *(_QWORD *)(v0 + 88) = &protocol witness table for Table;
    v169 = (_QWORD *)(v0 + 56);
    v10 = sub_100018F08((_QWORD *)(v0 + 56));
    v179 = v9;
    v225 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 16);
    v225(v10, v9, v5);
    if (qword_1010EA598 != -1)
      swift_once(&qword_1010EA598, sub_100D2A1A4);
    v198 = *(_QWORD *)(v0 + 624);
    v173 = *(_QWORD *)(v0 + 584);
    v11 = *(_QWORD *)(v0 + 576);
    v188 = *(_QWORD *)(v0 + 568);
    v193 = *(_QWORD *)(v0 + 552);
    v182 = *(_QWORD *)(v0 + 544);
    v230 = *(_QWORD *)(v0 + 520);
    v12 = *(_QWORD *)(v0 + 504);
    v204 = *(_QWORD *)(v0 + 512);
    v209 = *(_QWORD *)(v0 + 560);
    v13 = *(_QWORD *)(v0 + 496);
    v163 = *(_QWORD *)(v0 + 488);
    v14 = *(_QWORD *)(v0 + 480);
    v166 = *(_QWORD *)(v0 + 360);
    v171 = *(_QWORD *)(v0 + 352);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B83B0);
    QueryType.subscript.getter(v15, v11, &type metadata for Int64, &protocol witness table for Table);
    QueryType.subscript.getter(v15, v11, &type metadata for Int64, &protocol witness table for Table);
    == infix<A>(_:_:)(v12, v13, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
    v16 = *(void (**)(uint64_t, uint64_t))(v163 + 8);
    v16(v13, v14);
    v16(v12, v14);
    QueryType.join(_:_:on:)(v188, v169, v182, v11, &protocol witness table for Table);
    v231 = *(void (**)(uint64_t, uint64_t))(v230 + 8);
    v231(v182, v204);
    v210 = *(void (**)(uint64_t, uint64_t))(v209 + 8);
    v210(v188, v193);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v169);
    ((void (*)(uint64_t, _QWORD, uint64_t))v213)(v188, v216, v193);
    v17 = v166 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_attachmentInfo;
    *(_QWORD *)(v0 + 120) = v11;
    *(_QWORD *)(v0 + 128) = &protocol witness table for Table;
    v18 = sub_100018F08(v219);
    v225(v18, v17, v11);
    QueryType.subscript.getter(v15, v11, &type metadata for Int64, &protocol witness table for Table);
    v178 = v15;
    v167 = v17;
    QueryType.subscript.getter(v15, v11, &type metadata for Int64, &protocol witness table for Table);
    == infix<A>(_:_:)(v12, v13, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
    v16(v13, v14);
    v170 = v16;
    v16(v12, v14);
    QueryType.join(_:_:on:)(v188, v219, v182, v11, &protocol witness table for Table);
    v231(v182, v204);
    v210(v188, v193);
    v19 = *(void (**)(uint64_t, uint64_t))(v173 + 8);
    v19(v198, v11);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v219);
    *(_QWORD *)(v0 + 344) = v171;
    if (qword_1010EA4C0 != -1)
      swift_once(&qword_1010EA4C0, sub_100D29250);
    v220 = *(_QWORD *)(v0 + 672);
    v20 = *(_QWORD *)(v0 + 640);
    v205 = *(_QWORD *)(v0 + 632);
    v21 = *(_QWORD *)(v0 + 576);
    v22 = *(_QWORD *)(v0 + 544);
    v23 = *(_QWORD *)(v0 + 536);
    v24 = *(_QWORD *)(v0 + 512);
    v194 = sub_10001A9A8(&qword_1010EF3B8);
    v25 = sub_10001A9E8(v194, (uint64_t)qword_1011B8128);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
    v27 = sub_1000193A4(&qword_1010EF548, (uint64_t *)&unk_1010F7730, (const char *)&protocol conformance descriptor for [A]);
    v199 = v25;
    Collection<>.contains(_:)(v25, v26, v27, &protocol witness table for UUID);
    *(_BYTE *)(v0 + 680) = 0;
    == infix<A>(_:_:)(v23, v0 + 680, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Int64);
    v231(v23, v24);
    QueryType.filter(_:)(v22, v21, &protocol witness table for Table);
    v231(v22, v24);
    v19(v205, v21);
    QueryType.delete()(v21, &protocol witness table for Table);
    v19(v20, v21);
    v28 = Connection.run(_:)(v220);
    v221 = 0;
    v152 = v28;
    v165 = v19;
    v189 = (_QWORD *)(v0 + 16);
    v32 = (_QWORD *)(v0 + 216);
    if (qword_1010EA4E0 != -1)
      goto LABEL_47;
    while (1)
    {
      v33 = *(_QWORD *)(v0 + 640);
      v183 = *(_QWORD *)(v0 + 616);
      v34 = *(_QWORD *)(v0 + 576);
      v35 = sub_10001A9A8(&qword_1010EF3E8);
      v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B8188);
      *(_QWORD *)(v0 + 240) = v35;
      v37 = sub_1000193A4(&qword_1010EF3F0, &qword_1010EF3E8, (const char *)&protocol conformance descriptor for Expression<A>);
      *(_QWORD *)(v0 + 248) = v37;
      v38 = sub_100018F08(v32);
      v39 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
      v39(v38, v36, v35);
      SchemaType.select(_:_:)(v32, _swiftEmptyArrayStorage, v34, &protocol witness table for Table);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
      v40 = sub_10001A9A8(&qword_1010EF3C8);
      v41 = swift_allocObject(v40, 72, 7);
      *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v41 + 56) = v35;
      *(_QWORD *)(v41 + 64) = v37;
      v42 = sub_100018F08((_QWORD *)(v41 + 32));
      v206 = v36;
      v39(v42, v36, v35);
      QueryType.group(_:)(v41, v34, &protocol witness table for Table);
      swift_bridgeObjectRelease();
      v165(v33, v34);
      *(_QWORD *)(v0 + 40) = v34;
      *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
      v43 = sub_100018F08(v189);
      v225(v43, v183, v34);
      Connection.prepare(_:)(v189);
      if (v221)
      {
        v44 = *(_QWORD *)(v0 + 672);
        v45 = *(_QWORD *)(v0 + 656);
        v46 = *(_QWORD *)(v0 + 648);
        v47 = *(_QWORD *)(v0 + 616);
        v48 = *(_QWORD *)(v0 + 576);
        swift_release();
        v165(v47, v48);
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v189);
        goto LABEL_13;
      }
      v156 = v40;
      v184 = (_QWORD *)(v0 + 256);
      v176 = (_QWORD *)(v0 + 296);
      v49 = *(_QWORD *)(v0 + 448);
      v50 = *(_QWORD *)(v0 + 456);
      v51 = *(_QWORD *)(v0 + 440);
      v52 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v189);
      dispatch thunk of _AnySequenceBox._makeIterator()(v52);
      swift_release();
      sub_10009A9F4(0, 0, 0);
      v53 = swift_retain();
      dispatch thunk of _AnyIteratorBoxBase.next()(v53);
      v222 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
      if (v222(v51, 1, v49) != 1)
      {
        v74 = *(_QWORD *)(v0 + 456);
        v75 = *(void (**)(uint64_t, _QWORD, uint64_t))(v74 + 32);
        do
        {
          v76 = *(_QWORD *)(v0 + 472);
          v77 = *(_QWORD *)(v0 + 448);
          v75(v76, *(_QWORD *)(v0 + 440), v77);
          v78 = sub_10012C49C();
          Row.subscript.getter((_QWORD *)(v0 + 682), v206, &type metadata for UInt8, v78);
          (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v76, v77);
          v79 = *(_BYTE *)(v0 + 682);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            isUniquelyReferenced_nonNull_native = sub_10009A9F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
          v82 = _swiftEmptyArrayStorage[2];
          v81 = _swiftEmptyArrayStorage[3];
          if (v82 >= v81 >> 1)
            isUniquelyReferenced_nonNull_native = sub_10009A9F4(v81 > 1, v82 + 1, 1);
          v84 = *(_QWORD *)(v0 + 440);
          v83 = *(_QWORD *)(v0 + 448);
          _swiftEmptyArrayStorage[2] = v82 + 1;
          *((_BYTE *)&_swiftEmptyArrayStorage[4] + v82) = v79;
          dispatch thunk of _AnyIteratorBoxBase.next()(isUniquelyReferenced_nonNull_native);
        }
        while (v222(v84, 1, v83) != 1);
      }
      v54 = *(_QWORD *)(v0 + 640);
      v190 = *(_QWORD *)(v0 + 608);
      v55 = *(_QWORD *)(v0 + 576);
      v56 = *(_QWORD *)(v0 + 440);
      swift_release();
      sub_100004048(v56, &qword_1010EF3A8);
      *(_QWORD *)(v0 + 320) = v194;
      v57 = sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
      *(_QWORD *)(v0 + 328) = v57;
      v58 = sub_100018F08(v176);
      v59 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v194 - 8) + 16);
      v60 = v199;
      v59(v58, v199, v194);
      SchemaType.select(_:_:)(v176, _swiftEmptyArrayStorage, v55, &protocol witness table for Table);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v176);
      v61 = swift_allocObject(v40, 72, 7);
      *(_OWORD *)(v61 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v61 + 56) = v194;
      *(_QWORD *)(v61 + 64) = v57;
      v62 = sub_100018F08((_QWORD *)(v61 + 32));
      v59(v62, v199, v194);
      QueryType.group(_:)(v61, v55, &protocol witness table for Table);
      swift_bridgeObjectRelease();
      v165(v54, v55);
      *(_QWORD *)(v0 + 280) = v55;
      *(_QWORD *)(v0 + 288) = &protocol witness table for Table;
      v63 = sub_100018F08(v184);
      v225(v63, v190, v55);
      Connection.prepare(_:)(v184);
      v85 = *(_QWORD *)(v0 + 448);
      v86 = *(_QWORD *)(v0 + 432);
      v87 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v184);
      dispatch thunk of _AnySequenceBox._makeIterator()(v87);
      swift_release();
      v234 = _swiftEmptyArrayStorage;
      sub_10009A578(0, 0, 0);
      v88 = swift_retain();
      dispatch thunk of _AnyIteratorBoxBase.next()(v88);
      v89 = v222(v86, 1, v85);
      if (v89 == 1)
      {
        v90 = _swiftEmptyArrayStorage;
      }
      else
      {
        v117 = *(_QWORD *)(v0 + 456);
        v118 = *(_QWORD *)(v0 + 408);
        v119 = *(void (**)(uint64_t, _QWORD, uint64_t))(v117 + 32);
        v90 = _swiftEmptyArrayStorage;
        do
        {
          v120 = *(_QWORD *)(v0 + 464);
          v121 = *(_QWORD *)(v0 + 448);
          v122 = *(_QWORD **)(v0 + 424);
          v123 = *(_QWORD *)(v0 + 400);
          v119(v120, *(_QWORD *)(v0 + 432), v121);
          Row.subscript.getter(v122, v60, v123, &protocol witness table for UUID);
          (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v120, v121);
          if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0)
          {
            sub_10009A578(0, v90[2] + 1, 1);
            v90 = v234;
          }
          v125 = v90[2];
          v124 = v90[3];
          if (v125 >= v124 >> 1)
          {
            sub_10009A578(v124 > 1, v125 + 1, 1);
            v90 = v234;
          }
          v126 = *(_QWORD *)(v0 + 448);
          v127 = *(_QWORD *)(v0 + 424);
          v128 = *(_QWORD *)(v0 + 432);
          v129 = *(_QWORD *)(v0 + 400);
          v90[2] = v125 + 1;
          v130 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v118 + 32))((unint64_t)v90+ ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80))+ *(_QWORD *)(v118 + 72) * v125, v127, v129);
          v234 = v90;
          dispatch thunk of _AnyIteratorBoxBase.next()(v130);
          v60 = v199;
        }
        while (v222(v128, 1, v126) != 1);
      }
      v91 = *(_QWORD *)(v0 + 432);
      swift_release();
      result = sub_100004048(v91, &qword_1010EF3A8);
      v92 = v90[2];
      v151 = v90;
      v93 = 0;
      if (!v92)
        break;
      v94 = 0;
      v172 = (_QWORD *)(v0 + 136);
      v168 = (_QWORD *)(v0 + 176);
      v95 = *(_QWORD *)(v0 + 408);
      v154 = *(_QWORD *)(v0 + 656);
      v153 = *(_QWORD *)(v0 + 376);
      v96 = (char *)v90 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
      v149 = v95;
      v146 = v96;
      v147 = v90[2];
      while (1)
      {
        if (v94 >= v90[2])
        {
          __break(1u);
          goto LABEL_49;
        }
        v97 = *(_QWORD *)(v0 + 392);
        v98 = *(_QWORD *)(v0 + 400);
        (*(void (**)(uint64_t, char *, uint64_t))(v95 + 16))(v97, &v96[*(_QWORD *)(v95 + 72) * v94], v98);
        v150 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
        v150(v97, 0, 1, v98);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v97, 1, v98) == 1)
          goto LABEL_43;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v95 + 32))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
        v155 = _swiftEmptyArrayStorage[2];
        if (v155)
          break;
LABEL_25:
        ++v94;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(v95 + 8))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 400));
        v90 = v151;
        if (v94 == v92)
        {
          v150(*(_QWORD *)(v0 + 392), 1, 1, *(_QWORD *)(v0 + 400));
          goto LABEL_43;
        }
      }
      v148 = v94;
      swift_retain();
      v99 = 0;
      while (1)
      {
        v158 = v93;
        v189 = *(_QWORD **)(v0 + 600);
        v223 = *(_QWORD *)(v0 + 592);
        v100 = *(_QWORD *)(v0 + 576);
        v175 = *(_QWORD *)(v0 + 568);
        v177 = *(_QWORD *)(v0 + 552);
        v174 = *(_QWORD *)(v0 + 544);
        v160 = *(_QWORD *)(v0 + 536);
        v164 = *(_QWORD *)(v0 + 528);
        v101 = *(_QWORD *)(v0 + 504);
        v196 = *(_QWORD *)(v0 + 512);
        v102 = *(_QWORD *)(v0 + 496);
        v186 = *(_QWORD *)(v0 + 480);
        v161 = *(_QWORD *)(v0 + 400);
        v162 = *(_QWORD *)(v0 + 416);
        v157 = v99;
        v159 = *((_BYTE *)&_swiftEmptyArrayStorage[4] + v99);
        ((void (*)(void))v213)();
        *(_QWORD *)(v0 + 200) = v100;
        *(_QWORD *)(v0 + 208) = &protocol witness table for Table;
        v103 = sub_100018F08(v168);
        v225(v103, v179, v100);
        QueryType.subscript.getter(v178, v100, &type metadata for Int64, &protocol witness table for Table);
        QueryType.subscript.getter(v178, v100, &type metadata for Int64, &protocol witness table for Table);
        == infix<A>(_:_:)(v101, v102, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
        v170(v102, v186);
        v170(v101, v186);
        QueryType.join(_:_:on:)(v175, v168, v174, v100, &protocol witness table for Table);
        v231(v174, v196);
        v210(v175, v177);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v168);
        ((void (*)(uint64_t, _QWORD, uint64_t))v213)(v175, v216, v177);
        *(_QWORD *)(v0 + 160) = v100;
        *(_QWORD *)(v0 + 168) = &protocol witness table for Table;
        v104 = sub_100018F08(v172);
        v225(v104, v167, v100);
        QueryType.subscript.getter(v178, v100, &type metadata for Int64, &protocol witness table for Table);
        QueryType.subscript.getter(v178, v100, &type metadata for Int64, &protocol witness table for Table);
        == infix<A>(_:_:)(v101, v102, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
        v170(v102, v186);
        v170(v101, v186);
        QueryType.join(_:_:on:)(v175, v172, v174, v100, &protocol witness table for Table);
        v231(v174, v196);
        v210(v175, v177);
        v165(v223, v100);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v172);
        *(_BYTE *)(v0 + 681) = v159;
        v105 = sub_10012C49C();
        == infix<A>(_:_:)(v206, v0 + 681, &type metadata for UInt8, v105, &protocol witness table for Int64);
        == infix<A>(_:_:)(v199, v162, v161, &protocol witness table for UUID, &protocol witness table for String);
        && infix(_:_:)(v160, v164);
        v231(v164, v196);
        v231(v160, v196);
        QueryType.filter(_:)(v174, v100, &protocol witness table for Table);
        v231(v174, v196);
        v165((uint64_t)v189, v100);
        v106 = swift_allocObject(v156, 72, 7);
        *(_OWORD *)(v106 + 16) = xmmword_100E22B00;
        if (qword_1010EA578 != -1)
          swift_once(&qword_1010EA578, sub_100D29F68);
        v194 = v106 + 32;
        v221 = *(_QWORD *)(v0 + 664);
        v107 = *(_QWORD *)(v0 + 640);
        v108 = *(_QWORD *)(v0 + 632);
        v109 = *(_QWORD *)(v0 + 624);
        v110 = *(_QWORD *)(v0 + 576);
        v111 = *(_QWORD *)(v0 + 384);
        v112 = *(_QWORD *)(v0 + 368);
        v113 = sub_10001A9E8(v112, (uint64_t)qword_1011B8350);
        v114 = type metadata accessor for Date(0);
        QueryType.subscript.getter(v113, v110, v114, &protocol witness table for Table);
        v115 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
        ExpressionType.desc.getter(v112, v115);
        (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v111, v112);
        QueryType.order(_:)(v106, v110, &protocol witness table for Table);
        swift_bridgeObjectRelease();
        v165(v109, v110);
        v32 = &protocol witness table for Table;
        QueryType.limit(_:offset:)(-1, 2, v110, &protocol witness table for Table);
        v165(v108, v110);
        QueryType.delete()(v110, &protocol witness table for Table);
        v165(v107, v110);
        v116 = Connection.run(_:)(v221);
        (*(void (**)(_QWORD, _QWORD))(v154 + 8))(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 648));
        v93 = v158 + v116;
        if (__OFADD__(v158, v116))
          break;
        v99 = v157 + 1;
        if (v155 == v157 + 1)
        {
          swift_release();
          v94 = v148;
          v95 = v149;
          v96 = v146;
          v92 = v147;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_47:
      swift_once(&qword_1010EA4E0, sub_100D29498);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 408) + 56))(*(_QWORD *)(v0 + 392), 1, 1, *(_QWORD *)(v0 + 400));
LABEL_43:
    v131 = *(_QWORD *)(v0 + 672);
    v132 = *(_QWORD *)(v0 + 656);
    v133 = *(_QWORD *)(v0 + 648);
    v134 = *(_QWORD *)(v0 + 616);
    v135 = *(_QWORD *)(v0 + 608);
    v136 = *(_QWORD *)(v0 + 576);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v165(v135, v136);
    v165(v134, v136);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v132 + 8))(v131, v133);
    v233 = v93 + v152;
    if (__OFADD__(v93, v152))
    {
LABEL_49:
      __break(1u);
    }
    else
    {
      v137 = *(_QWORD *)(v0 + 664);
      v138 = *(_QWORD *)(v0 + 640);
      v139 = *(_QWORD *)(v0 + 632);
      v140 = *(_QWORD *)(v0 + 624);
      v141 = *(_QWORD *)(v0 + 616);
      v142 = *(_QWORD *)(v0 + 608);
      v143 = *(_QWORD *)(v0 + 600);
      v144 = *(_QWORD *)(v0 + 592);
      v145 = *(_QWORD *)(v0 + 568);
      v181 = *(_QWORD *)(v0 + 544);
      v187 = *(_QWORD *)(v0 + 536);
      v192 = *(_QWORD *)(v0 + 528);
      v197 = *(_QWORD *)(v0 + 504);
      v201 = *(_QWORD *)(v0 + 496);
      v203 = *(_QWORD *)(v0 + 472);
      v208 = *(_QWORD *)(v0 + 464);
      v212 = *(_QWORD *)(v0 + 440);
      v215 = *(_QWORD *)(v0 + 432);
      v218 = *(_QWORD *)(v0 + 424);
      v224 = *(_QWORD *)(v0 + 416);
      v227 = *(_QWORD *)(v0 + 392);
      v229 = *(_QWORD *)(v0 + 384);
      swift_task_dealloc(*(_QWORD *)(v0 + 672));
      swift_task_dealloc(v137);
      swift_task_dealloc(v138);
      swift_task_dealloc(v139);
      swift_task_dealloc(v140);
      swift_task_dealloc(v141);
      swift_task_dealloc(v142);
      swift_task_dealloc(v143);
      swift_task_dealloc(v144);
      swift_task_dealloc(v145);
      swift_task_dealloc(v181);
      swift_task_dealloc(v187);
      swift_task_dealloc(v192);
      swift_task_dealloc(v197);
      swift_task_dealloc(v201);
      swift_task_dealloc(v203);
      swift_task_dealloc(v208);
      swift_task_dealloc(v212);
      swift_task_dealloc(v215);
      swift_task_dealloc(v218);
      swift_task_dealloc(v224);
      swift_task_dealloc(v227);
      swift_task_dealloc(v229);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v233);
    }
  }
  else
  {
    v29 = sub_10012C434();
    v30 = swift_allocError(&type metadata for DatabaseError, v29, 0, 0);
    *(_DWORD *)v31 = 2;
    *(_BYTE *)(v31 + 4) = 1;
    swift_willThrow(v30);
LABEL_13:
    v64 = *(_QWORD *)(v0 + 664);
    v65 = *(_QWORD *)(v0 + 640);
    v66 = *(_QWORD *)(v0 + 632);
    v67 = *(_QWORD *)(v0 + 624);
    v68 = *(_QWORD *)(v0 + 616);
    v69 = *(_QWORD *)(v0 + 608);
    v70 = *(_QWORD *)(v0 + 600);
    v71 = *(_QWORD *)(v0 + 592);
    v72 = *(_QWORD *)(v0 + 568);
    v180 = *(_QWORD *)(v0 + 544);
    v185 = *(_QWORD *)(v0 + 536);
    v191 = *(_QWORD *)(v0 + 528);
    v195 = *(_QWORD *)(v0 + 504);
    v200 = *(_QWORD *)(v0 + 496);
    v202 = *(_QWORD *)(v0 + 472);
    v207 = *(_QWORD *)(v0 + 464);
    v211 = *(_QWORD *)(v0 + 440);
    v214 = *(_QWORD *)(v0 + 432);
    v217 = *(_QWORD *)(v0 + 424);
    v226 = *(_QWORD *)(v0 + 416);
    v228 = *(_QWORD *)(v0 + 392);
    v232 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 672));
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v180);
    swift_task_dealloc(v185);
    swift_task_dealloc(v191);
    swift_task_dealloc(v195);
    swift_task_dealloc(v200);
    swift_task_dealloc(v202);
    swift_task_dealloc(v207);
    swift_task_dealloc(v211);
    swift_task_dealloc(v214);
    swift_task_dealloc(v217);
    swift_task_dealloc(v226);
    swift_task_dealloc(v228);
    swift_task_dealloc(v232);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100119230(uint64_t a1, uint64_t a2)
{
  void (*v2)(_QWORD, _QWORD, _QWORD);
  void (*v3)(_QWORD, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(_QWORD, _QWORD, _QWORD);
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;

  v3 = v2;
  v5 = sub_10001A9A8(&qword_1010EF370);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  v6 = __chkstk_darwin(v5);
  v57 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v53 = (char *)&v50 - v8;
  v9 = type metadata accessor for ObservedAdvertisement(0);
  v60 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v65 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v58 = (uint64_t)&v50 - v12;
  v13 = sub_10001A9A8(&qword_1010EF3A8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v54 = (char *)&v50 - v17;
  v18 = type metadata accessor for Row(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v56 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v51 = (char *)&v50 - v23;
  v24 = __chkstk_darwin(v22);
  v52 = (char *)&v50 - v25;
  v26 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v24);
  v68 = _swiftEmptyArrayStorage;
  sub_10009AA18(0, v26 & ~(v26 >> 63), 0);
  v27 = swift_retain();
  v63 = dispatch thunk of _AnySequenceBox._makeIterator()(v27);
  result = swift_release();
  if (v26 < 0)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  v59 = a2;
  v66 = v19;
  if (v26)
  {
    v55 = v18;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()(result);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
      if ((_DWORD)result == 1)
        goto LABEL_29;
      v64 = v3;
      v29 = (uint64_t)v56;
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v56, v16, v18);
      if (qword_1010EA4B8 != -1)
        swift_once(&qword_1010EA4B8, sub_100D291C4);
      v30 = v62;
      v31 = sub_10001A9E8(v62, (uint64_t)qword_1011B8110);
      v32 = type metadata accessor for Table(0);
      v33 = v57;
      QueryType.subscript.getter(v31, v32, &type metadata for Int64, &protocol witness table for Table);
      Row.subscript.getter(&v67, v33, &type metadata for Int64, &protocol witness table for Int64);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v33, v30);
      v34 = v64;
      sub_10011E7F0(v29, v67, (uint64_t)v65);
      v3 = v34;
      if (v34)
      {
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v16, v55);
        return swift_release();
      }
      v18 = v55;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v16, v55);
      v35 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
      {
        sub_10009AA18(0, v35[2] + 1, 1);
        v35 = v68;
      }
      v37 = v35[2];
      v36 = v35[3];
      if (v37 >= v36 >> 1)
      {
        sub_10009AA18(v36 > 1, v37 + 1, 1);
        v35 = v68;
      }
      v35[2] = v37 + 1;
      result = sub_1000126EC((uint64_t)v65, (uint64_t)v35+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v37, type metadata accessor for ObservedAdvertisement);
      --v26;
      v19 = v66;
    }
    while (v26);
  }
  v38 = v3;
  v39 = (uint64_t)v54;
  dispatch thunk of _AnyIteratorBoxBase.next()(result);
  v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v65(v39, 1, v18) == 1)
  {
LABEL_14:
    swift_release();
    sub_100004048(v39, &qword_1010EF3A8);
    swift_release();
    return (uint64_t)v68;
  }
  else
  {
    v64 = *(void (**)(_QWORD, _QWORD, _QWORD))(v19 + 32);
    v40 = (uint64_t)v51;
    v41 = v52;
    v42 = v53;
    while (1)
    {
      v64(v41, v39, v18);
      (*(void (**)(uint64_t, char *, uint64_t))(v66 + 16))(v40, v41, v18);
      if (qword_1010EA4B8 != -1)
        swift_once(&qword_1010EA4B8, sub_100D291C4);
      v43 = v62;
      v44 = sub_10001A9E8(v62, (uint64_t)qword_1011B8110);
      v45 = type metadata accessor for Table(0);
      QueryType.subscript.getter(v44, v45, &type metadata for Int64, &protocol witness table for Table);
      Row.subscript.getter(&v67, v42, &type metadata for Int64, &protocol witness table for Int64);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v42, v43);
      sub_10011E7F0(v40, v67, v58);
      if (v38)
        break;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v41, v18);
      v46 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
      {
        sub_10009AA18(0, v46[2] + 1, 1);
        v46 = v68;
      }
      v38 = 0;
      v48 = v46[2];
      v47 = v46[3];
      if (v48 >= v47 >> 1)
      {
        sub_10009AA18(v47 > 1, v48 + 1, 1);
        v46 = v68;
      }
      v46[2] = v48 + 1;
      v49 = sub_1000126EC(v58, (uint64_t)v46+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v48, type metadata accessor for ObservedAdvertisement);
      v39 = (uint64_t)v54;
      dispatch thunk of _AnyIteratorBoxBase.next()(v49);
      if (v65(v39, 1, v18) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v66 + 8))(v41, v18);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1001198EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint8_t *v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _BYTE *v139;
  uint64_t v140;
  _BYTE *v141;
  _BYTE *v142;
  _BYTE *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(_BYTE *, uint64_t);
  _BYTE *v152;
  _BYTE *v153;
  void (*v154)(_BYTE *, uint64_t);
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  uint8_t *v164;
  uint8_t *v165;
  _BYTE *v166;
  _QWORD *v167;
  void (*v168)(_BYTE *, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE *v175;
  uint64_t v176;
  __int128 v177;
  void (*v178)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  NSObject *v190;
  os_log_type_t v191;
  _BOOL4 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t *v196;
  _BYTE *v197;
  uint64_t v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(_BYTE *, uint64_t);
  _BYTE *v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  NSObject *v214;
  os_log_type_t v215;
  _BOOL4 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  uint64_t v224;
  _BYTE *v225;
  _QWORD *v226;
  _BYTE *v227;
  _BYTE *v228;
  _BYTE *v229;
  _BYTE *v230;
  _BYTE *v231;
  uint64_t v232;
  void (*v233)(_BYTE *, uint64_t);
  _BYTE *v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE *v237;
  _BYTE *v238;
  _BYTE *v239;
  void (*v240)(_BYTE *, uint64_t);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  _BYTE *v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _BYTE *v254;
  unint64_t v255;
  uint64_t v256;
  NSObject *v257;
  os_log_type_t v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t v261;
  uint64_t *v262;
  _BYTE *v263;
  double v264;
  _BYTE *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _BYTE *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _BYTE *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  NSObject *v284;
  os_log_type_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  _BYTE *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void (*v294)(_BYTE *, uint64_t);
  uint64_t v295;
  uint64_t v296;
  _BYTE *v297;
  uint64_t *v298;
  _BYTE *v299;
  _BYTE *v300;
  _BYTE *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  void (*v305)(_BYTE *, uint64_t);
  _BYTE *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  NSObject *v311;
  os_log_type_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  _BYTE *v318;
  NSObject *v319;
  uint64_t v320;
  _BYTE *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void (*v329)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v330;
  _BYTE *v331;
  uint64_t v332;
  void (*v333)(_BYTE *, uint64_t);
  _BYTE *v334;
  _BYTE *v335;
  _BYTE *v336;
  _BYTE *v337;
  _BYTE *v338;
  unint64_t v339;
  uint64_t v340;
  NSObject *v341;
  os_log_type_t v342;
  uint64_t v343;
  uint64_t v344;
  _BYTE *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  _BYTE *v351;
  _BYTE *v352;
  double v353;
  uint64_t v354;
  uint64_t v355;
  double v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _BYTE *v360;
  _BYTE *v361;
  _BYTE *v362;
  _BYTE *v363;
  _BYTE *v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  NSObject *v368;
  os_log_type_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  double v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  NSObject *v380;
  void (*v381)(_QWORD, _QWORD);
  _BYTE *v382;
  _BYTE *v383;
  _BYTE *v384;
  _BYTE *v385;
  unint64_t v386;
  uint64_t v387;
  NSObject *v388;
  os_log_type_t v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  NSObject *v393;
  uint64_t *v394;
  _BYTE *v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  void (*v400)(_BYTE *, uint64_t);
  NSObject *v401;
  int v402;
  double *v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  BOOL v407;
  void (*v408)(_BYTE *, uint64_t);
  uint64_t v409;
  uint64_t v410;
  void (*v411)(_BYTE *, uint64_t);
  _BYTE *v412;
  _BYTE *v413;
  _BYTE *v414;
  _BYTE *v415;
  _BYTE *v416;
  _BYTE *v417;
  unint64_t v418;
  uint64_t v419;
  NSObject *v420;
  os_log_type_t v421;
  uint64_t v422;
  uint64_t v423;
  os_log_type_t v424;
  uint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  void (*v430)(_BYTE *, uint64_t);
  NSObject *v431;
  double v432;
  _BYTE *v433;
  _BYTE *v434;
  _BYTE *v435;
  _BYTE *v436;
  unint64_t v437;
  uint64_t v438;
  NSObject *v439;
  os_log_type_t v440;
  uint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  _BYTE *v445;
  uint64_t v446;
  _BYTE *v447;
  uint64_t v448;
  unint64_t v449;
  void (*v450)(_BYTE *, uint64_t);
  NSObject *v451;
  void (*v452)(_BYTE *, uint64_t);
  uint64_t v453;
  _BYTE *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  NSObject *v458;
  os_log_type_t v459;
  double v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  void (*v464)(_BYTE *, uint64_t);
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  _BYTE *v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  NSObject *v473;
  os_log_type_t v474;
  uint64_t v475;
  _BYTE *v476;
  uint64_t v477;
  uint64_t *v478;
  _BYTE *v479;
  void (*v480)(_BYTE *, uint64_t);
  _BYTE *v481;
  uint64_t v482;
  uint64_t v483;
  void (*v484)(_BYTE *, uint64_t);
  void (*v485)(_BYTE *, uint64_t);
  uint64_t v486;
  void (*v487)(_BYTE *, uint64_t);
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  void (*v491)(_BYTE *, uint64_t);
  void (*v492)(_BYTE *, uint64_t);
  uint64_t v493;
  uint64_t v494;
  void (*v495)(_BYTE *, uint64_t);
  uint64_t v496;
  _BYTE v497[12];
  int v498;
  void (*v499)(_QWORD, _QWORD);
  char *v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  unsigned int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  __int128 v509;
  __int128 v510;
  void (*v511)(_BYTE *, uint64_t);
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t *v515;
  NSObject *v516;
  void (*v517)(_BYTE *, uint64_t, uint64_t);
  uint64_t v518;
  uint64_t v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t (*v523)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v524;
  _BYTE *v525;
  uint64_t v526;
  __int128 v527;
  uint64_t v528;
  _BYTE *v529;
  uint64_t v530;
  _BYTE *v531;
  void (*v532)(_BYTE *, uint64_t, uint64_t);
  uint64_t v533;
  void (*v534)(_BYTE *, uint64_t);
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  _BYTE *v539;
  uint64_t v540;
  uint64_t v541;
  _BYTE *v542;
  _BYTE *v543;
  _BYTE *v544;
  _BYTE *v545;
  _BYTE *v546;
  _BYTE *v547;
  _BYTE *v548;
  double *v549;
  _BYTE *v550;
  _BYTE *v551;
  _BYTE *v552;
  _BYTE *v553;
  _BYTE *v554;
  uint64_t v555;
  uint64_t v556;
  _BYTE *v557;
  _BYTE *v558;
  _BYTE *v559;
  _BYTE *v560;
  _BYTE *v561;
  _BYTE *v562;
  _BYTE *v563;
  _BYTE *v564;
  _BYTE *v565;
  _BYTE *v566;
  _BYTE *v567;
  uint64_t v568;
  _BYTE *v569;
  _BYTE *v570;
  _BYTE *v571;
  _BYTE *v572;
  _BYTE *v573;
  _BYTE *v574;
  _BYTE *v575;
  _BYTE *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  _BYTE *v580;
  _BYTE *v581;
  uint64_t v582;
  _BYTE *v583;
  _BYTE *v584;
  _BYTE *v585;
  _BYTE *v586;
  _BYTE *v587;
  _BYTE *v588;
  _BYTE *v589;
  _BYTE *v590;
  _BYTE *v591;
  _BYTE *v592;
  uint64_t v593;
  _BYTE *v594;
  uint64_t v595;
  _QWORD *v596;
  _BYTE *v597;
  uint64_t v598;
  _BYTE *v599;
  _BYTE *v600;
  uint64_t v601;
  uint64_t v602;
  _BYTE *v603;
  uint64_t v604;
  unint64_t v605;
  _BYTE *v606;
  _BYTE *v607;
  uint64_t v608;
  uint64_t v609;
  _BYTE *v610;
  uint64_t v611;
  uint64_t v612;
  _BYTE *v613;
  uint64_t v614;
  _BYTE *v615;
  _BYTE *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  char v622[8];
  char v623[8];
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  void *v628;

  v556 = type metadata accessor for Delete(0);
  v555 = *(_QWORD *)(v556 - 8);
  __chkstk_darwin(v556);
  v574 = &v497[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = sub_10001A9A8((uint64_t *)&unk_101100320);
  __chkstk_darwin(v3);
  v549 = (double *)&v497[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v609 = type metadata accessor for ObservedAdvertisement(0);
  v593 = *(_QWORD *)(v609 - 8);
  v5 = __chkstk_darwin(v609);
  v590 = &v497[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v607 = &v497[-v7];
  v614 = type metadata accessor for Date(0);
  v604 = *(_QWORD *)(v614 - 8);
  v8 = __chkstk_darwin(v614);
  v10 = &v497[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8);
  v13 = &v497[-v12];
  v14 = __chkstk_darwin(v11);
  v581 = &v497[-v15];
  v16 = __chkstk_darwin(v14);
  v544 = &v497[-v17];
  v18 = __chkstk_darwin(v16);
  v20 = &v497[-v19];
  v21 = __chkstk_darwin(v18);
  v543 = &v497[-v22];
  v23 = __chkstk_darwin(v21);
  v548 = &v497[-v24];
  v25 = __chkstk_darwin(v23);
  v547 = &v497[-v26];
  v27 = __chkstk_darwin(v25);
  v546 = &v497[-v28];
  v29 = __chkstk_darwin(v27);
  v560 = &v497[-v30];
  v31 = __chkstk_darwin(v29);
  v554 = &v497[-v32];
  v33 = __chkstk_darwin(v31);
  v553 = &v497[-v34];
  v35 = __chkstk_darwin(v33);
  v573 = &v497[-v36];
  v37 = __chkstk_darwin(v35);
  v39 = &v497[-v38];
  v40 = __chkstk_darwin(v37);
  v572 = &v497[-v41];
  v42 = __chkstk_darwin(v40);
  v44 = &v497[-v43];
  __chkstk_darwin(v42);
  v594 = &v497[-v45];
  v46 = sub_10001A9A8(&qword_1010F0F00);
  v47 = __chkstk_darwin(v46);
  v588 = &v497[-((v48 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v47);
  v610 = &v497[-v49];
  v579 = type metadata accessor for JoinType(0);
  v578 = *(_QWORD *)(v579 - 8);
  __chkstk_darwin(v579);
  v569 = &v497[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v577 = sub_10001A9A8(&qword_1010EF370);
  v568 = *(_QWORD *)(v577 - 8);
  v51 = __chkstk_darwin(v577);
  v567 = &v497[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v51);
  v584 = &v497[-v53];
  v608 = type metadata accessor for Row(0);
  v602 = *(_QWORD *)(v608 - 8);
  v54 = __chkstk_darwin(v608);
  v589 = &v497[-((v55 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v56 = __chkstk_darwin(v54);
  v592 = &v497[-v57];
  __chkstk_darwin(v56);
  v580 = &v497[-v58];
  v59 = sub_10001A9A8(&qword_1010EF3A8);
  v60 = __chkstk_darwin(v59);
  v591 = &v497[-((v61 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v62 = __chkstk_darwin(v60);
  v550 = &v497[-v63];
  __chkstk_darwin(v62);
  v575 = &v497[-v64];
  v65 = type metadata accessor for Logger(0);
  v582 = *(_QWORD *)(v65 - 8);
  v66 = __chkstk_darwin(v65);
  v552 = &v497[-((v67 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v68 = __chkstk_darwin(v66);
  v558 = &v497[-v69];
  v70 = __chkstk_darwin(v68);
  v557 = &v497[-v71];
  v72 = __chkstk_darwin(v70);
  v586 = &v497[-v73];
  v74 = __chkstk_darwin(v72);
  v545 = &v497[-v75];
  v76 = __chkstk_darwin(v74);
  v551 = &v497[-v77];
  v78 = __chkstk_darwin(v76);
  v559 = &v497[-v79];
  v80 = __chkstk_darwin(v78);
  v571 = &v497[-v81];
  v82 = __chkstk_darwin(v80);
  v561 = &v497[-v83];
  v84 = __chkstk_darwin(v82);
  v542 = &v497[-v85];
  v86 = __chkstk_darwin(v84);
  v566 = &v497[-v87];
  v88 = __chkstk_darwin(v86);
  v570 = &v497[-v89];
  __chkstk_darwin(v88);
  v587 = &v497[-v90];
  v601 = sub_10001A9A8(&qword_1010EF408);
  v612 = *(_QWORD *)(v601 - 8);
  __chkstk_darwin(v601);
  v597 = &v497[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v598 = sub_10001A9A8(&qword_1010EF500);
  v92 = *(_QWORD *)(v598 - 8);
  v93 = __chkstk_darwin(v598);
  v583 = &v497[-((v94 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v93);
  v599 = &v497[-v95];
  v620 = sub_10001A9A8(&qword_1010EF4E0);
  v596 = *(_QWORD **)(v620 - 8);
  __chkstk_darwin(v620);
  v600 = &v497[-((v96 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v617 = sub_10001A9A8(&qword_1010EF358);
  v595 = *(_QWORD *)(v617 - 8);
  v97 = __chkstk_darwin(v617);
  v565 = &v497[-((v98 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v99 = __chkstk_darwin(v97);
  v564 = &v497[-v100];
  v101 = __chkstk_darwin(v99);
  v563 = &v497[-v102];
  __chkstk_darwin(v101);
  v606 = &v497[-v103];
  v618 = type metadata accessor for Table(0);
  v605 = *(_QWORD *)(v618 - 8);
  v104 = __chkstk_darwin(v618);
  v562 = &v497[-((v105 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v106 = __chkstk_darwin(v104);
  v576 = &v497[-v107];
  v108 = __chkstk_darwin(v106);
  v585 = &v497[-v109];
  v110 = __chkstk_darwin(v108);
  v603 = &v497[-v111];
  v112 = __chkstk_darwin(v110);
  v615 = &v497[-v113];
  __chkstk_darwin(v112);
  v613 = &v497[-v114];
  if (qword_1010E9988 != -1)
    swift_once(&qword_1010E9988, sub_100113494);
  v619 = v65;
  v611 = sub_10001A9E8(v65, (uint64_t)qword_1011B67A8);
  v115 = Logger.logObject.getter(v611);
  v116 = static os_log_type_t.default.getter(v115);
  if (os_log_type_enabled(v115, v116))
  {
    v117 = (uint8_t *)swift_slowAlloc(2, -1);
    v616 = v44;
    v118 = v39;
    v119 = v20;
    v120 = v13;
    v121 = v10;
    v122 = a1;
    v123 = v117;
    *(_WORD *)v117 = 0;
    _os_log_impl((void *)&_mh_execute_header, v115, v116, "Decimation - starting to decimate low-value observations.", v117, 2u);
    v124 = v123;
    a1 = v122;
    v10 = v121;
    v13 = v120;
    v20 = v119;
    v39 = v118;
    v44 = v616;
    swift_slowDealloc(v124, -1, -1);
  }

  v125 = *(_QWORD *)(a1 + 32);
  v126 = sub_10001A9A8(&qword_1010EF360);
  v127 = v621;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a1, v125, &type metadata for () + 1, v126);
  if (!v625)
  {
    v132 = sub_10012C434();
    v133 = swift_allocError(&type metadata for DatabaseError, v132, 0, 0);
    *(_DWORD *)v134 = 2;
    *(_BYTE *)(v134 + 4) = 1;
    return swift_willThrow(v133);
  }
  v539 = v20;
  v541 = v92;
  v128 = *(_QWORD *)(v625 + 24);
  swift_retain();
  swift_release();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v129 = sub_100C1AE68(v625);
  swift_bridgeObjectRelease();
  v130 = sub_1001166B8(v128, a1);
  if (v127)
    return swift_release();
  v530 = v129;
  v536 = v130;
  v540 = v128;
  v621 = 0;
  v616 = v44;
  v525 = v39;
  v529 = v13;
  v531 = v10;
  v526 = a1;
  v135 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  if (qword_1010EA518 != -1)
    swift_once(&qword_1010EA518, sub_100D298A0);
  v136 = v601;
  v137 = sub_10001A9E8(v601, (uint64_t)qword_1011B8230);
  v627 = v136;
  v533 = sub_1000193A4(&qword_1010EF508, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  v628 = (void *)v533;
  v138 = sub_100018F08(&v625);
  v532 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v612 + 16);
  v532(v138, v137, v136);
  v139 = v603;
  v140 = v618;
  SchemaType.select(_:_:)(&v625, _swiftEmptyArrayStorage, v618, &protocol witness table for Table);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
  v535 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  v141 = v600;
  ExpressionType<>.length.getter(v136, v535);
  v625 = 28;
  v537 = v135;
  v142 = v606;
  == infix<A>(_:_:)(v141, &v625, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  v534 = (void (*)(_BYTE *, uint64_t))v596[1];
  v534(v141, v620);
  v143 = v615;
  QueryType.filter(_:)(v142, v140, &protocol witness table for Table);
  v595 = *(_QWORD *)(v595 + 8);
  ((void (*)(_BYTE *, uint64_t))v595)(v142, v617);
  v144 = *(_QWORD **)(v605 + 8);
  ((void (*)(_BYTE *, uint64_t))v144)(v139, v140);
  v528 = sub_10001A9A8(&qword_1010EF3C8);
  v145 = swift_allocObject(v528, 72, 7);
  v527 = xmmword_100E22B00;
  *(_OWORD *)(v145 + 16) = xmmword_100E22B00;
  v146 = v533;
  *(_QWORD *)(v145 + 56) = v136;
  *(_QWORD *)(v145 + 64) = v146;
  v147 = sub_100018F08((_QWORD *)(v145 + 32));
  v538 = v137;
  v532(v147, v137, v136);
  v596 = v144;
  QueryType.group(_:)(v145, v140, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v148 = v143;
  v149 = v140;
  ((void (*)(_BYTE *, uint64_t))v144)(v148, v140);
  v150 = v535;
  ExpressionType<>.length.getter(v136, v535);
  v625 = 28;
  == infix<A>(_:_:)(v141, &v625, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  v151 = v534;
  v534(v141, v620);
  v152 = v615;
  QueryType.filter(_:)(v142, v149, &protocol witness table for Table);
  ((void (*)(_BYTE *, uint64_t))v595)(v142, v617);
  v153 = v597;
  ExpressionType<>.distinct.getter(v136, v150, &protocol witness table for Data);
  v154 = (void (*)(_BYTE *, uint64_t))v596;
  ExpressionType<>.count.getter(v136, v150, &protocol witness table for Data);
  v155 = v618;
  (*(void (**)(_BYTE *, uint64_t))(v612 + 8))(v153, v136);
  v156 = v599;
  SchemaType.select<A>(_:)(v141, v155, &type metadata for Int, &protocol witness table for Table, &protocol witness table for Int);
  v151(v141, v620);
  v154(v152, v155);
  v157 = v621;
  Connection.scalar<A>(_:)(&v625, v156, &type metadata for Int, &protocol witness table for Int);
  if (v157)
  {
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v541 + 8))(v156, v598);
    return ((uint64_t (*)(_BYTE *, uint64_t))v154)(v613, v155);
  }
  v158 = v625;
  v159 = v582;
  v160 = v587;
  v612 = *(_QWORD *)(v582 + 16);
  v161 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v612)(v587, v611, v619);
  v162 = Logger.logObject.getter(v161);
  v163 = static os_log_type_t.info.getter(v162);
  if (os_log_type_enabled(v162, v163))
  {
    v164 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v164 = 134217984;
    v625 = v158;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v625, &v626, v164 + 4, v164 + 12);
    _os_log_impl((void *)&_mh_execute_header, v162, v163, "Decimation - uniqueAdvertisements count: %ld.", v164, 0xCu);
    v165 = v164;
    v160 = v587;
    swift_slowDealloc(v165, -1, -1);
  }

  v166 = *(_BYTE **)(v159 + 8);
  ((void (*)(_BYTE *, uint64_t))v166)(v160, v619);
  v627 = v155;
  v628 = &protocol witness table for Table;
  v167 = sub_100018F08(&v625);
  v168 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v605 + 16);
  v168(v167, (uint64_t)v613, v155);
  Connection.prepare(_:)(&v625);
  v169 = v608;
  v621 = 0;
  v170 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
  v171 = dispatch thunk of _AnySequenceBox._makeIterator()(v170);
  swift_release();
  v172 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
  v173 = swift_retain();
  v174 = v169;
  v175 = v575;
  dispatch thunk of _AnyIteratorBoxBase.next()(v173);
  swift_release();
  v176 = v602;
  v587 = *(_BYTE **)(v602 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v587)(v175, 1, v174) == 1)
  {
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v541 + 8))(v599, v598);
    return ((uint64_t (*)(_BYTE *, uint64_t))v596)(v613, v618);
  }
  v517 = v168;
  v505 = v526 + v172;
  v520 = &v625;
  v178 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v176 + 32);
  v504 = enum case for JoinType.leftOuter(_:);
  v500 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v177 = 141558275;
  v503 = v177;
  *(_QWORD *)&v177 = 134218499;
  v509 = v177;
  *(_QWORD *)&v177 = 134218755;
  v501 = v177;
  *(_QWORD *)&v177 = 141558787;
  v510 = v177;
  *(_QWORD *)&v177 = 134219011;
  v502 = v177;
  v179 = v570;
  v180 = v538;
  v597 = v166;
  v506 = v171;
  v532 = v178;
  while (1)
  {
    v178(v580, (uint64_t)v175, v174);
    v181 = v621;
    Row.get<A>(_:)(v180, &type metadata for Data, &protocol witness table for Data);
    if (v181)
    {
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(_BYTE *, uint64_t))(v602 + 8))(v580, v174);
      swift_release();
      (*(void (**)(_BYTE *, uint64_t))(v541 + 8))(v599, v598);
      return ((uint64_t (*)(_BYTE *, uint64_t))v596)(v613, v618);
    }
    v182 = v625;
    v183 = v626;
    sub_10001BBBC(v625, v626);
    v518 = v182;
    sub_1002F7C0C(6, v182, v183);
    v184 = v625;
    v185 = v626;
    v186 = Data.hexString.getter(v625, v626);
    v188 = v187;
    sub_10001BC14(v184, v185);
    ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v179, v611, v619);
    swift_bridgeObjectRetain_n(v188, 2);
    v190 = Logger.logObject.getter(v189);
    v191 = static os_log_type_t.info.getter(v190);
    v192 = os_log_type_enabled(v190, v191);
    v605 = v188;
    v621 = 0;
    v519 = v183;
    v521 = v186;
    if (v192)
    {
      v193 = swift_slowAlloc(22, -1);
      v194 = swift_slowAlloc(32, -1);
      *(_DWORD *)v193 = v503;
      v624 = 1752392040;
      v625 = v194;
      v195 = v520;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v193 + 4, v193 + 12);
      *(_WORD *)(v193 + 12) = 2081;
      swift_bridgeObjectRetain(v188);
      *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v186, v188, &v625));
      v196 = v195;
      v183 = v519;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v196, v193 + 14, v193 + 22);
      swift_bridgeObjectRelease_n(v188, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v190, v191, "Decimation - advertisementRow decimation within advertisement: %{private,mask.hash}s.", (uint8_t *)v193, 0x16u);
      swift_arrayDestroy(v194, 1, v500);
      swift_slowDealloc(v194, -1, -1);
      swift_slowDealloc(v193, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v188, 2);
    }
    ((void (*)(_BYTE *, uint64_t))v597)(v179, v619);
    v197 = v615;
    v198 = v528;
    v625 = v518;
    v626 = v183;
    v199 = sub_100006204((unint64_t *)&qword_1010EF410, (uint64_t (*)(uint64_t))&type metadata accessor for Blob, (uint64_t)&protocol conformance descriptor for Blob);
    v200 = v606;
    v533 = v199;
    == infix<A>(_:_:)(v538, &v625, &type metadata for Data, &protocol witness table for Data, v199);
    v201 = v618;
    QueryType.filter(_:)(v200, v618, &protocol witness table for Table);
    ((void (*)(_BYTE *, uint64_t))v595)(v200, v617);
    v202 = swift_allocObject(v198, 72, 7);
    *(_OWORD *)(v202 + 16) = v527;
    if (qword_1010EA548 != -1)
      swift_once(&qword_1010EA548, sub_100D29BFC);
    v203 = sub_10001A9A8(&qword_1010EF3B0);
    sub_10001A9E8(v203, (uint64_t)qword_1011B82C0);
    v204 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
    ExpressionType.desc.getter(v203, v204);
    QueryType.order(_:)(v202, v201, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    v205 = (void (*)(_BYTE *, uint64_t))v596;
    ((void (*)(_BYTE *, uint64_t))v596)(v197, v201);
    v625 = v518;
    v626 = v519;
    == infix<A>(_:_:)(v538, &v625, &type metadata for Data, &protocol witness table for Data, v533);
    QueryType.filter(_:)(v200, v201, &protocol witness table for Table);
    ((void (*)(_BYTE *, uint64_t))v595)(v200, v617);
    v206 = v600;
    ExpressionType<>.count.getter(v601, v535, &protocol witness table for Data);
    v207 = v583;
    SchemaType.select<A>(_:)(v206, v201, &type metadata for Int, &protocol witness table for Table, &protocol witness table for Int);
    v534(v206, v620);
    v205(v197, v201);
    v208 = v621;
    Connection.scalar<A>(_:)(&v625, v207, &type metadata for Int, &protocol witness table for Int);
    if (v208)
    {
      swift_bridgeObjectRelease();
      swift_release();
      sub_10001BC14(v518, v519);
      swift_bridgeObjectRelease();
      v487 = *(void (**)(_BYTE *, uint64_t))(v541 + 8);
      v488 = v598;
      v487(v583, v598);
      v489 = v618;
      v205(v585, v618);
      (*(void (**)(_BYTE *, uint64_t))(v602 + 8))(v580, v608);
      swift_release();
      v487(v599, v488);
      return ((uint64_t (*)(_BYTE *, uint64_t))v205)(v613, v489);
    }
    v209 = v625;
    v210 = v566;
    v211 = v619;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v566, v611, v619);
    v212 = v605;
    swift_bridgeObjectRetain_n(v605, 2);
    v214 = Logger.logObject.getter(v213);
    v215 = static os_log_type_t.info.getter(v214);
    v216 = os_log_type_enabled(v214, v215);
    v512 = v209;
    if (v216)
    {
      v217 = swift_slowAlloc(32, -1);
      v218 = swift_slowAlloc(32, -1);
      v624 = v209;
      v625 = v218;
      *(_DWORD *)v217 = v509;
      v219 = v520;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v217 + 4, v217 + 12);
      *(_WORD *)(v217 + 12) = 2160;
      v624 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v219, v217 + 14, v217 + 22);
      *(_WORD *)(v217 + 22) = 2081;
      swift_bridgeObjectRetain(v605);
      *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v605, &v625));
      v220 = v605;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v219, v217 + 24, v217 + 32);
      swift_bridgeObjectRelease_n(v220, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v214, v215, "Decimation - byAdvertisement start count: %ld within advertisement: %{private,mask.hash}s.", (uint8_t *)v217, 0x20u);
      swift_arrayDestroy(v218, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v218, -1, -1);
      swift_slowDealloc(v217, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v212, 2);
    }
    ((void (*)(_BYTE *, uint64_t))v597)(v210, v211);
    v621 = 0;
    if (qword_1010EA4B8 != -1)
      swift_once(&qword_1010EA4B8, sub_100D291C4);
    v221 = v577;
    v222 = sub_10001A9E8(v577, (uint64_t)qword_1011B8110);
    v223 = v584;
    v224 = v618;
    QueryType.subscript.getter(v222, v618, &type metadata for Int64, &protocol witness table for Table);
    v225 = v569;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v578 + 104))(v569, v504, v579);
    v627 = v224;
    v628 = &protocol witness table for Table;
    v226 = sub_100018F08(&v625);
    v517(v226, v505, v224);
    v227 = v567;
    v582 = v222;
    QueryType.subscript.getter(v222, v224, &type metadata for Int64, &protocol witness table for Table);
    v228 = v606;
    == infix<A>(_:_:)(v223, v227, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
    v229 = v227;
    v230 = v228;
    v511 = *(void (**)(_BYTE *, uint64_t))(v568 + 8);
    v511(v229, v221);
    v231 = v562;
    QueryType.join(_:_:on:)(v225, &v625, v228, v224, &protocol witness table for Table);
    v232 = v617;
    v233 = (void (*)(_BYTE *, uint64_t))v595;
    ((void (*)(_BYTE *, uint64_t))v595)(v228, v617);
    (*(void (**)(_BYTE *, uint64_t))(v578 + 8))(v225, v579);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
    v625 = v518;
    v626 = v519;
    v234 = v563;
    == infix<A>(_:_:)(v538, &v625, &type metadata for Data, &protocol witness table for Data, v533);
    v625 = v536;
    v235 = sub_10001A9A8(&qword_1010EF390);
    v236 = sub_1000193A4(&qword_1010EF398, &qword_1010EF390, (const char *)&protocol conformance descriptor for Set<A>);
    v237 = v565;
    v508 = v235;
    v507 = v236;
    Collection<>.contains(_:)(v584, v235, v236, &protocol witness table for Int64);
    LOBYTE(v625) = 0;
    v238 = v564;
    == infix<A>(_:_:)(v237, &v625, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Int64);
    v233(v237, v232);
    && infix(_:_:)(v234, v238);
    v233(v238, v232);
    v233(v234, v232);
    v239 = v603;
    QueryType.filter(_:)(v230, v224, &protocol witness table for Table);
    v233(v230, v232);
    v240 = (void (*)(_BYTE *, uint64_t))v596;
    ((void (*)(_BYTE *, uint64_t))v596)(v231, v224);
    v241 = swift_allocObject(v528, 72, 7);
    *(_OWORD *)(v241 + 16) = v527;
    if (qword_1010EA570 != -1)
      swift_once(&qword_1010EA570, sub_100D29ED4);
    v242 = sub_10001A9A8(&qword_1010EF448);
    v243 = sub_10001A9E8(v242, (uint64_t)qword_1011B8338);
    v244 = sub_1000193A4(&qword_1010EF510, &qword_1010EF448, (const char *)&protocol conformance descriptor for Expression<A>);
    ExpressionType.desc.getter(v242, v244);
    v245 = v615;
    QueryType.order(_:)(v241, v224, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    v240(v239, v224);
    v246 = v576;
    QueryType.limit(_:offset:)(1, v512 / 2, v224, &protocol witness table for Table);
    v240(v245, v224);
    v627 = v224;
    v628 = &protocol witness table for Table;
    v247 = sub_100018F08(&v625);
    v517(v247, (uint64_t)v246, v224);
    v248 = v621;
    Connection.prepare(_:)(&v625);
    v249 = v608;
    if (v248)
    {
      swift_errorRelease(v248);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
      v621 = 0;
LABEL_38:
      v253 = v619;
      v254 = v561;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v561, v611, v619);
      v255 = v605;
      swift_bridgeObjectRetain_n(v605, 2);
      v257 = Logger.logObject.getter(v256);
      v258 = static os_log_type_t.info.getter(v257);
      if (os_log_type_enabled(v257, v258))
      {
        v259 = swift_slowAlloc(22, -1);
        v260 = v254;
        v261 = swift_slowAlloc(32, -1);
        *(_DWORD *)v259 = v503;
        v624 = 1752392040;
        v625 = v261;
        v262 = v520;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v259 + 4, v259 + 12);
        *(_WORD *)(v259 + 12) = 2081;
        swift_bridgeObjectRetain(v255);
        *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v255, &v625));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v262, v259 + 14, v259 + 22);
        swift_bridgeObjectRelease_n(v255, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v257, v258, "Decimation - not found - lowerHalfMedianAccuracy: decimating all lower or equal,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v259, 0x16u);
        swift_arrayDestroy(v261, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v261, -1, -1);
        swift_slowDealloc(v259, -1, -1);

        v263 = v260;
      }
      else
      {

        swift_bridgeObjectRelease_n(v255, 2);
        v263 = v254;
      }
      ((void (*)(_BYTE *, uint64_t))v597)(v263, v253);
      v264 = 0.0;
      goto LABEL_42;
    }
    v250 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
    dispatch thunk of _AnySequenceBox._makeIterator()(v250);
    v251 = swift_release();
    v252 = (uint64_t)v550;
    dispatch thunk of _AnyIteratorBoxBase.next()(v251);
    swift_release();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v587)(v252, 1, v249) == 1)
    {
      v621 = 0;
      sub_100004048(v252, &qword_1010EF3A8);
      goto LABEL_38;
    }
    Row.get<A>(_:)(v243, &type metadata for Double, &protocol witness table for Double);
    v621 = 0;
    (*(void (**)(uint64_t, uint64_t))(v602 + 8))(v252, v608);
    v264 = *(double *)&v624;
    v469 = v542;
    v470 = v619;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v542, v611, v619);
    v471 = v605;
    swift_bridgeObjectRetain_n(v605, 2);
    v473 = Logger.logObject.getter(v472);
    v474 = static os_log_type_t.info.getter(v473);
    if (os_log_type_enabled(v473, v474))
    {
      v475 = swift_slowAlloc(32, -1);
      v476 = v469;
      v477 = swift_slowAlloc(32, -1);
      v625 = v477;
      *(_DWORD *)v475 = v509;
      *(double *)&v624 = v264;
      v478 = v520;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v475 + 4, v475 + 12);
      *(_WORD *)(v475 + 12) = 2160;
      v624 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v478, v475 + 14, v475 + 22);
      *(_WORD *)(v475 + 22) = 2081;
      swift_bridgeObjectRetain(v471);
      *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v471, &v625));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v478, v475 + 24, v475 + 32);
      swift_bridgeObjectRelease_n(v471, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v473, v474, "Decimation - found - lowerHalfMedianAccuracy: %f,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v475, 0x20u);
      swift_arrayDestroy(v477, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v477, -1, -1);
      swift_slowDealloc(v475, -1, -1);

      v479 = v476;
    }
    else
    {

      swift_bridgeObjectRelease_n(v471, 2);
      v479 = v469;
    }
    ((void (*)(_BYTE *, uint64_t))v597)(v479, v470);
LABEL_42:
    v265 = v592;
    v266 = swift_allocObject(&unk_1010590B8, 24, 7);
    v514 = v266;
    *(_QWORD *)(v266 + 16) = &_swiftEmptySetSingleton;
    v515 = (uint64_t *)(v266 + 16);
    v267 = swift_allocObject(&unk_1010590B8, 24, 7);
    *(_QWORD *)(v267 + 16) = &_swiftEmptySetSingleton;
    v523 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v593 + 56);
    v268 = v523(v610, 1, 1, v609);
    static Date.distantPast.getter(v268);
    v269 = v618;
    v627 = v618;
    v628 = &protocol witness table for Table;
    v270 = sub_100018F08(&v625);
    v517(v270, (uint64_t)v585, v269);
    v271 = v621;
    Connection.prepare(_:)(&v625);
    v272 = v602;
    if (v271)
    {
      swift_bridgeObjectRelease();
      swift_release();
      sub_10001BC14(v518, v519);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v604 + 8))(v594, v614);
      sub_100004048((uint64_t)v610, &qword_1010F0F00);
      v490 = v618;
      v491 = (void (*)(_BYTE *, uint64_t))v596;
      ((void (*)(_BYTE *, uint64_t))v596)(v576, v618);
      v511(v584, v577);
      v492 = *(void (**)(_BYTE *, uint64_t))(v541 + 8);
      v493 = v598;
      v492(v583, v598);
      v491(v585, v490);
      (*(void (**)(_BYTE *, uint64_t))(v272 + 8))(v580, v608);
      swift_release();
      v492(v599, v493);
      v491(v613, v490);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
      swift_release();
      return swift_release();
    }
    v621 = 0;
    v513 = v267;
    v273 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v625);
    v274 = dispatch thunk of _AnySequenceBox._makeIterator()(v273);
    swift_release();
    swift_beginAccess(v267 + 16, v623, 0, 0);
    v275 = swift_retain();
    v276 = v591;
    dispatch thunk of _AnyIteratorBoxBase.next()(v275);
    v533 = v274;
    swift_release();
    v277 = v608;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v587)(v276, 1, v608) != 1)
    {
      v522 = v267 + 16;
      v292 = v582;
      v293 = (uint64_t)v607;
      do
      {
        v532(v265, (uint64_t)v276, v277);
        v323 = (uint64_t)v589;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v272 + 16))(v589, v265, v277);
        Row.subscript.getter(&v625, v292, &type metadata for Int64, &protocol witness table for Int64);
        v324 = v621;
        sub_10011E7F0(v323, v625, v293);
        if (v324)
        {
          swift_bridgeObjectRelease();
          swift_release();
          sub_10001BC14(v518, v519);
          swift_bridgeObjectRelease();
          v480 = *(void (**)(_BYTE *, uint64_t))(v602 + 8);
          v481 = v265;
          v482 = v608;
          v480(v481, v608);
          swift_release();
          (*(void (**)(_BYTE *, uint64_t))(v604 + 8))(v594, v614);
          sub_100004048((uint64_t)v610, &qword_1010F0F00);
          v483 = v618;
          v484 = (void (*)(_BYTE *, uint64_t))v596;
          ((void (*)(_BYTE *, uint64_t))v596)(v576, v618);
          v511(v584, v577);
          v485 = *(void (**)(_BYTE *, uint64_t))(v541 + 8);
          v486 = v598;
          v485(v583, v598);
          v484(v585, v483);
          v480(v580, v482);
          swift_release();
          v485(v599, v486);
          v484(v613, v483);
          swift_release();
          return swift_release();
        }
        Row.get<A>(_:)(v292, &type metadata for Int64, &protocol witness table for Int64);
        v621 = 0;
        v325 = v614;
        v326 = v625;
        v327 = v609;
        v328 = v604;
        v329 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v604 + 16);
        v330 = v616;
        v329(v616, &v607[*(int *)(v609 + 44)], v614);
        v331 = v588;
        sub_10000F9B8((uint64_t)v610, (uint64_t)v588, &qword_1010F0F00);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v593 + 48))(v331, 1, v327) == 1)
        {
          sub_100004048((uint64_t)v331, &qword_1010F0F00);
          swift_beginAccess(v522, &v625, 33, 0);
          sub_100A0A194(&v624, v326);
          swift_endAccess(&v625);
          v332 = v328;
          v524 = v326;
          v333 = *(void (**)(_BYTE *, uint64_t))(v328 + 8);
          v334 = v594;
          v333(v594, v325);
          v329(v334, v330, v325);
          v335 = v586;
          ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v586, v611, v619);
          v336 = v581;
          v329(v581, v330, v325);
          v337 = v529;
          v329(v529, v336, v325);
          v338 = v531;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v332 + 32))(v531, v336, v325);
          v339 = v605;
          swift_bridgeObjectRetain_n(v605, 2);
          v341 = Logger.logObject.getter(v340);
          v342 = static os_log_type_t.info.getter(v341);
          LODWORD(v516) = v342;
          if (!os_log_type_enabled(v341, v342))
          {

            v333(v338, v325);
            v333(v337, v325);
            swift_bridgeObjectRelease_n(v339, 2);
            ((void (*)(_BYTE *, uint64_t))v597)(v335, v619);
            v333(v330, v325);
            v293 = (uint64_t)v607;
            v265 = v592;
            v320 = v608;
LABEL_64:
            v292 = v582;
            v276 = v591;
LABEL_65:
            v272 = v602;
            goto LABEL_53;
          }
          v343 = swift_slowAlloc(42, -1);
          v344 = swift_slowAlloc(64, -1);
          *(_DWORD *)v343 = v510;
          v624 = 1752392040;
          v625 = v344;
          v345 = v330;
          v346 = v520;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v343 + 4, v343 + 12);
          *(_WORD *)(v343 + 12) = 2081;
          swift_bridgeObjectRetain(v339);
          *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v339, &v625));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v346, v343 + 14, v343 + 22);
          swift_bridgeObjectRelease_n(v339, 2);
          swift_bridgeObjectRelease();
          *(_WORD *)(v343 + 22) = 2080;
          v347 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v348 = dispatch thunk of CustomStringConvertible.description.getter(v614, v347);
          *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v348, v349, &v625));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v346, v343 + 24, v343 + 32);
          swift_bridgeObjectRelease();
          v333(v531, v614);
          v333(v337, v614);
          *(_WORD *)(v343 + 32) = 2048;
          v624 = v524;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v346, v343 + 34, v343 + 42);
          _os_log_impl((void *)&_mh_execute_header, v341, (os_log_type_t)v516, "Decimation - preserveByKey (latest for advertisement): %{private,mask.hash}s,\npreserving scanDate: %s, advId: %lld.", (uint8_t *)v343, 0x2Au);
          swift_arrayDestroy(v344, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v344, -1, -1);
          v272 = v602;
          swift_slowDealloc(v343, -1, -1);

          ((void (*)(_BYTE *, uint64_t))v597)(v586, v619);
          v333(v345, v614);
          v293 = (uint64_t)v607;
          v265 = v592;
          v320 = v608;
        }
        else
        {
          sub_1000126EC((uint64_t)v331, (uint64_t)v590, type metadata accessor for ObservedAdvertisement);
          v350 = v522;
          if (*(_QWORD *)(*(_QWORD *)v522 + 16) >= v530)
          {
            swift_beginAccess(v515, &v625, 33, 0);
            sub_100A0A194(&v624, v326);
            swift_endAccess(&v625);
            v382 = v571;
            ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v571, v611, v619);
            v383 = v572;
            v329(v572, v616, v325);
            v384 = v525;
            v329(v525, v383, v325);
            v385 = v573;
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v328 + 32))(v573, v383, v325);
            v386 = v605;
            swift_bridgeObjectRetain_n(v605, 2);
            v388 = Logger.logObject.getter(v387);
            v389 = static os_log_type_t.info.getter(v388);
            v390 = v389;
            if (os_log_type_enabled(v388, v389))
            {
              v391 = swift_slowAlloc(52, -1);
              LODWORD(v524) = v390;
              v392 = v391;
              v393 = swift_slowAlloc(64, -1);
              v516 = v393;
              *(_DWORD *)v392 = v502;
              v624 = v530;
              v625 = (uint64_t)v393;
              v394 = v520;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v392 + 4, v392 + 12);
              *(_WORD *)(v392 + 12) = 2048;
              v624 = v326;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v394, v392 + 14, v392 + 22);
              *(_WORD *)(v392 + 22) = 2080;
              v395 = v382;
              v396 = v386;
              v397 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              v398 = dispatch thunk of CustomStringConvertible.description.getter(v614, v397);
              *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v398, v399, &v625));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v394, v392 + 24, v392 + 32);
              swift_bridgeObjectRelease();
              v400 = *(void (**)(_BYTE *, uint64_t))(v604 + 8);
              v400(v385, v614);
              v400(v384, v614);
              *(_WORD *)(v392 + 32) = 2160;
              v624 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v394, v392 + 34, v392 + 42);
              *(_WORD *)(v392 + 42) = 2081;
              swift_bridgeObjectRetain(v396);
              *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v396, &v625));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v394, v392 + 44, v392 + 52);
              swift_bridgeObjectRelease_n(v396, 2);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v388, (os_log_type_t)v524, "Decimation - remove all above limit - >= maxPayloads %ld currentId: %lld,\nscan date: %s,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v392, 0x34u);
              v401 = v516;
              swift_arrayDestroy(v516, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v401, -1, -1);
              swift_slowDealloc(v392, -1, -1);

              ((void (*)(_BYTE *, uint64_t))v597)(v395, v619);
              sub_1000126B0((uint64_t)v590, type metadata accessor for ObservedAdvertisement);
              v400(v616, v614);
            }
            else
            {
              swift_bridgeObjectRelease_n(v386, 2);

              v408 = *(void (**)(_BYTE *, uint64_t))(v328 + 8);
              v408(v385, v325);
              v408(v384, v325);
              ((void (*)(_BYTE *, uint64_t))v597)(v382, v619);
              sub_1000126B0((uint64_t)v590, type metadata accessor for ObservedAdvertisement);
              v408(v616, v325);
            }
            v272 = v602;
            v265 = v592;
            v276 = v591;
            v292 = v582;
            v293 = (uint64_t)v607;
            goto LABEL_73;
          }
          v524 = v326;
          v351 = v594;
          v352 = v616;
          v353 = fabs(Date.timeIntervalSince(_:)(v594));
          v354 = v621;
          OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
          v355 = v625;
          v356 = (double)sub_100C1A848(v625);
          v357 = sub_100C1AE68(v355);
          swift_bridgeObjectRelease();
          v621 = v354;
          if (v356 * 60.0 / (double)v357 < v353)
          {
            swift_beginAccess(v350, &v625, 33, 0);
            v358 = v524;
            sub_100A0A194(&v624, v524);
            swift_endAccess(&v625);
            v359 = v604;
            v516 = *(NSObject **)(v604 + 8);
            ((void (*)(_BYTE *, uint64_t))v516)(v351, v325);
            v329(v351, v352, v325);
            v360 = v559;
            ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v559, v611, v619);
            v361 = v553;
            v329(v553, v352, v325);
            v362 = v360;
            v363 = v554;
            v329(v554, v361, v325);
            v364 = v560;
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v359 + 32))(v560, v361, v325);
            v365 = v605;
            swift_bridgeObjectRetain_n(v605, 2);
            v366 = v526;
            v367 = swift_retain_n(v526, 2);
            v368 = Logger.logObject.getter(v367);
            v369 = static os_log_type_t.info.getter(v368);
            v370 = v369;
            if (os_log_type_enabled(v368, v369))
            {
              v371 = swift_slowAlloc(52, -1);
              v499 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(64, -1);
              v625 = (uint64_t)v499;
              *(_DWORD *)v371 = v502;
              v498 = v370;
              v372 = v621;
              OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
              v621 = v372;
              v373 = v624;
              v374 = (double)sub_100C1A848(v624);
              v375 = sub_100C1AE68(v373);
              swift_bridgeObjectRelease();
              *(double *)&v624 = v374 * 60.0 / (double)v375;
              v376 = v520;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v371 + 4, v371 + 12);
              swift_release();
              swift_release();
              *(_WORD *)(v371 + 12) = 2048;
              v624 = v358;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v376, v371 + 14, v371 + 22);
              *(_WORD *)(v371 + 22) = 2080;
              v377 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              v378 = dispatch thunk of CustomStringConvertible.description.getter(v614, v377);
              *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v378, v379, &v625));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v376, v371 + 24, v371 + 32);
              swift_bridgeObjectRelease();
              v380 = v516;
              ((void (*)(_BYTE *, uint64_t))v516)(v560, v614);
              ((void (*)(_BYTE *, uint64_t))v380)(v363, v614);
              *(_WORD *)(v371 + 32) = 2160;
              v624 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v376, v371 + 34, v371 + 42);
              *(_WORD *)(v371 + 42) = 2081;
              swift_bridgeObjectRetain(v365);
              *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v365, &v625));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v376, v371 + 44, v371 + 52);
              swift_bridgeObjectRelease_n(v365, 2);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v368, (os_log_type_t)v498, "Decimation - keep - > locationTimeResolution %f currentId: %lld,\nscan date: %s,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v371, 0x34u);
              v381 = v499;
              swift_arrayDestroy(v499, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v381, -1, -1);
              swift_slowDealloc(v371, -1, -1);

              ((void (*)(_BYTE *, uint64_t))v597)(v559, v619);
              sub_1000126B0((uint64_t)v590, type metadata accessor for ObservedAdvertisement);
              ((void (*)(_BYTE *, uint64_t))v380)(v616, v614);
            }
            else
            {
              swift_bridgeObjectRelease_n(v365, 2);

              v319 = v516;
              ((void (*)(_BYTE *, uint64_t))v516)(v364, v325);
              ((void (*)(_BYTE *, uint64_t))v319)(v363, v325);
              swift_release_n(v366, 2);
              ((void (*)(_BYTE *, uint64_t))v597)(v362, v619);
              sub_1000126B0((uint64_t)v590, type metadata accessor for ObservedAdvertisement);
              ((void (*)(_BYTE *, uint64_t))v319)(v616, v325);
            }
            v320 = v608;
            v272 = v602;
            v293 = (uint64_t)v607;
            v265 = v592;
            v276 = v591;
            v292 = v582;
            goto LABEL_53;
          }
          v293 = (uint64_t)v607;
          v402 = sub_1000AF25C(v607[32] & 0xB);
          if (v402 == sub_1000AF25C(v590[32] & 0xB))
          {
            v403 = v549;
            sub_10000F9B8(v293 + *(int *)(v609 + 48), (uint64_t)v549, (uint64_t *)&unk_101100320);
            v404 = type metadata accessor for ObservedAdvertisement.Location(0);
            v405 = (*(uint64_t (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v404 - 8) + 48))(v403, 1, v404);
            v406 = v524;
            if (v405 == 1)
            {
              sub_100004048((uint64_t)v403, (uint64_t *)&unk_101100320);
              v407 = v264 > 1.79769313e308;
            }
            else
            {
              v432 = v403[2];
              sub_1000126B0((uint64_t)v403, type metadata accessor for ObservedAdvertisement.Location);
              v407 = v264 > v432;
            }
            v292 = v582;
            if (v407)
            {
              sub_1000126B0((uint64_t)v590, type metadata accessor for ObservedAdvertisement);
              (*(void (**)(_BYTE *, uint64_t))(v604 + 8))(v616, v325);
            }
            else
            {
              swift_beginAccess(v515, &v625, 33, 0);
              sub_100A0A194(&v624, v406);
              swift_endAccess(&v625);
              v433 = v545;
              ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v545, v611, v619);
              v434 = v543;
              v435 = v616;
              v329(v543, v616, v325);
              v329(v539, v434, v325);
              v436 = v544;
              (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v604 + 32))(v544, v434, v325);
              v437 = v605;
              swift_bridgeObjectRetain_n(v605, 2);
              v439 = Logger.logObject.getter(v438);
              v440 = static os_log_type_t.info.getter(v439);
              v516 = v439;
              LODWORD(v499) = v440;
              if (os_log_type_enabled(v439, v440))
              {
                v442 = swift_slowAlloc(42, -1);
                v443 = swift_slowAlloc(64, -1);
                v624 = v406;
                v625 = v443;
                *(_DWORD *)v442 = v501;
                v444 = v520;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v442 + 4, v442 + 12);
                *(_WORD *)(v442 + 12) = 2080;
                v445 = v436;
                v446 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                v447 = v539;
                v448 = dispatch thunk of CustomStringConvertible.description.getter(v614, v446);
                *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v448, v449, &v625));
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v444, v442 + 14, v442 + 22);
                swift_bridgeObjectRelease();
                v450 = *(void (**)(_BYTE *, uint64_t))(v604 + 8);
                v450(v445, v614);
                v450(v447, v614);
                *(_WORD *)(v442 + 22) = 2160;
                v624 = 1752392040;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v444, v442 + 24, v442 + 32);
                *(_WORD *)(v442 + 32) = 2081;
                swift_bridgeObjectRetain(v437);
                *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v437, &v625));
                v293 = (uint64_t)v607;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v444, v442 + 34, v442 + 42);
                swift_bridgeObjectRelease_n(v437, 2);
                swift_bridgeObjectRelease();
                v451 = v516;
                _os_log_impl((void *)&_mh_execute_header, v516, (os_log_type_t)v499, "Decimation - remove - worse than median accuracy currentId: %lld,\nscan date: %s,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v442, 0x2Au);
                swift_arrayDestroy(v443, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v443, -1, -1);
                v272 = v602;
                swift_slowDealloc(v442, -1, -1);

                ((void (*)(_BYTE *, uint64_t))v597)(v545, v619);
                sub_1000126B0((uint64_t)v590, type metadata accessor for ObservedAdvertisement);
                v450(v616, v614);
                v265 = v592;
                v276 = v591;
LABEL_73:
                v320 = v608;
                goto LABEL_53;
              }
              swift_bridgeObjectRelease_n(v437, 2);

              v452 = *(void (**)(_BYTE *, uint64_t))(v604 + 8);
              v452(v436, v325);
              v452(v539, v325);
              ((void (*)(_BYTE *, uint64_t))v597)(v433, v619);
              sub_1000126B0((uint64_t)v590, type metadata accessor for ObservedAdvertisement);
              v452(v435, v325);
            }
            v265 = v592;
            v276 = v591;
            v320 = v608;
            goto LABEL_65;
          }
          swift_beginAccess(v350, &v625, 33, 0);
          v409 = v524;
          sub_100A0A194(&v624, v524);
          swift_endAccess(&v625);
          v410 = v604;
          v411 = *(void (**)(_BYTE *, uint64_t))(v604 + 8);
          v412 = v594;
          v411(v594, v325);
          v413 = v616;
          v329(v412, v616, v325);
          v414 = v551;
          ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v551, v611, v619);
          v415 = v546;
          v329(v546, v413, v325);
          v416 = v547;
          v329(v547, v415, v325);
          v417 = v548;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v410 + 32))(v548, v415, v325);
          v418 = v605;
          swift_bridgeObjectRetain_n(v605, 2);
          v420 = Logger.logObject.getter(v419);
          v421 = static os_log_type_t.info.getter(v420);
          if (!os_log_type_enabled(v420, v421))
          {
            swift_bridgeObjectRelease_n(v418, 2);

            v411(v417, v325);
            v411(v416, v325);
            ((void (*)(_BYTE *, uint64_t))v597)(v414, v619);
            sub_1000126B0((uint64_t)v590, type metadata accessor for ObservedAdvertisement);
            v411(v616, v325);
            v293 = (uint64_t)v607;
            v265 = v592;
            v320 = v608;
            goto LABEL_64;
          }
          v422 = swift_slowAlloc(42, -1);
          v499 = (void (*)(_QWORD, _QWORD))v411;
          v423 = v422;
          v516 = swift_slowAlloc(64, -1);
          v624 = v409;
          v625 = (uint64_t)v516;
          *(_DWORD *)v423 = v501;
          v424 = v421;
          v425 = v520;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v423 + 4, v423 + 12);
          *(_WORD *)(v423 + 12) = 2080;
          v426 = v418;
          v427 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v428 = dispatch thunk of CustomStringConvertible.description.getter(v614, v427);
          *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v428, v429, &v625));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v425, v423 + 14, v423 + 22);
          swift_bridgeObjectRelease();
          v430 = (void (*)(_BYTE *, uint64_t))v499;
          v499(v417, v614);
          v430(v416, v614);
          *(_WORD *)(v423 + 22) = 2160;
          v624 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v425, v423 + 24, v423 + 32);
          *(_WORD *)(v423 + 32) = 2081;
          swift_bridgeObjectRetain(v426);
          *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v426, &v625));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v425, v423 + 34, v423 + 42);
          swift_bridgeObjectRelease_n(v426, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v420, v424, "Decimation - keep - multipart changed currentId: %lld,\nscan date: %s,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v423, 0x2Au);
          v431 = v516;
          swift_arrayDestroy(v516, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v431, -1, -1);
          v272 = v602;
          swift_slowDealloc(v423, -1, -1);

          ((void (*)(_BYTE *, uint64_t))v597)(v551, v619);
          sub_1000126B0((uint64_t)v590, type metadata accessor for ObservedAdvertisement);
          v430(v616, v614);
          v293 = (uint64_t)v607;
          v265 = v592;
          v320 = v608;
        }
        v292 = v582;
        v276 = v591;
LABEL_53:
        v321 = v610;
        sub_100004048((uint64_t)v610, &qword_1010F0F00);
        sub_10005972C(v293, (uint64_t)v321, type metadata accessor for ObservedAdvertisement);
        v523(v321, 0, 1, v609);
        sub_1000126B0(v293, type metadata accessor for ObservedAdvertisement);
        (*(void (**)(_BYTE *, uint64_t))(v272 + 8))(v265, v320);
        v322 = swift_retain();
        dispatch thunk of _AnyIteratorBoxBase.next()(v322);
        swift_release();
        v277 = v320;
      }
      while (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v587)(v276, 1, v320) != 1);
    }
    swift_release();
    v278 = v513;
    swift_bridgeObjectRetain(*(_QWORD *)(v513 + 16));
    v536 = sub_100BBCF2C(v279, v536);
    v280 = v557;
    v281 = v619;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v557, v611, v619);
    v282 = v605;
    swift_bridgeObjectRetain_n(v605, 2);
    v283 = swift_retain_n(v278, 2);
    v284 = Logger.logObject.getter(v283);
    v285 = static os_log_type_t.default.getter(v284);
    if (os_log_type_enabled(v284, v285))
    {
      v286 = swift_slowAlloc(32, -1);
      v287 = swift_slowAlloc(32, -1);
      v625 = v287;
      *(_DWORD *)v286 = v509;
      v288 = *(_QWORD *)(*(_QWORD *)(v278 + 16) + 16);
      swift_release();
      v624 = v288;
      v289 = v520;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v286 + 4, v286 + 12);
      swift_release();
      *(_WORD *)(v286 + 12) = 2160;
      v624 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v289, v286 + 14, v286 + 22);
      *(_WORD *)(v286 + 22) = 2081;
      swift_bridgeObjectRetain(v282);
      *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v282, &v625));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v289, v286 + 24, v286 + 32);
      swift_bridgeObjectRelease_n(v282, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v284, v285, "Decimation - byAdvertisement preserving count: %ld,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v286, 0x20u);
      swift_arrayDestroy(v287, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v287, -1, -1);
      swift_slowDealloc(v286, -1, -1);

      v290 = v280;
      v291 = v619;
    }
    else
    {

      swift_bridgeObjectRelease_n(v282, 2);
      swift_release_n(v278, 2);
      v290 = v280;
      v291 = v281;
    }
    ((void (*)(_BYTE *, uint64_t))v597)(v290, v291);
    v294 = (void (*)(_BYTE *, uint64_t))v596;
    v296 = v617;
    v295 = v618;
    v297 = v603;
    v517(v603, v537, v618);
    v298 = v515;
    swift_beginAccess(v515, v622, 0, 0);
    v625 = *v298;
    swift_bridgeObjectRetain(v625);
    v299 = v606;
    Collection<>.contains(_:)(v582, v508, v507, &protocol witness table for Int64);
    swift_bridgeObjectRelease();
    v300 = v615;
    QueryType.filter(_:)(v299, v295, &protocol witness table for Table);
    ((void (*)(_BYTE *, uint64_t))v595)(v299, v296);
    v294(v297, v295);
    v301 = v574;
    QueryType.delete()(v295, &protocol witness table for Table);
    v294(v300, v295);
    v302 = v621;
    Connection.run(_:)(v301);
    v303 = v608;
    v304 = v519;
    v305 = v294;
    if (v302)
      break;
    v306 = v558;
    v307 = v619;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v558, v611, v619);
    v308 = v605;
    swift_bridgeObjectRetain_n(v605, 2);
    v309 = v514;
    v310 = swift_retain_n(v514, 2);
    v311 = Logger.logObject.getter(v310);
    v312 = static os_log_type_t.default.getter(v311);
    if (os_log_type_enabled(v311, v312))
    {
      v313 = swift_slowAlloc(32, -1);
      v314 = swift_slowAlloc(32, -1);
      v625 = v314;
      *(_DWORD *)v313 = v509;
      v315 = *(_QWORD *)(*(_QWORD *)(v309 + 16) + 16);
      swift_release();
      v624 = v315;
      v316 = v520;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v313 + 4, v313 + 12);
      swift_release();
      *(_WORD *)(v313 + 12) = 2160;
      v624 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v316, v313 + 14, v313 + 22);
      *(_WORD *)(v313 + 22) = 2081;
      swift_bridgeObjectRetain(v605);
      *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v605, &v625));
      v308 = v605;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v316, v313 + 24, v313 + 32);
      swift_bridgeObjectRelease_n(v308, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v311, v312, "Decimation - remove - decimate count: %ld,\nwithin advertisement: %{private,mask.hash}s.", (uint8_t *)v313, 0x20u);
      swift_arrayDestroy(v314, 1, (char *)&type metadata for Any + 8);
      v317 = v314;
      v305 = (void (*)(_BYTE *, uint64_t))v596;
      swift_slowDealloc(v317, -1, -1);
      swift_slowDealloc(v313, -1, -1);

      v318 = v558;
    }
    else
    {

      swift_bridgeObjectRelease_n(v308, 2);
      swift_release_n(v309, 2);
      v318 = v306;
    }
    ((void (*)(_BYTE *, uint64_t))v597)(v318, v307);
    v453 = v518;
    Connection.scalar<A>(_:)(&v625, v583, &type metadata for Int, &protocol witness table for Int);
    v454 = v552;
    v621 = 0;
    v455 = v453;
    v456 = v625;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v612)(v552, v611, v307);
    swift_bridgeObjectRetain(v308);
    v458 = Logger.logObject.getter(v457);
    v459 = static os_log_type_t.default.getter(v458);
    if (os_log_type_enabled(v458, v459))
    {
      v460 = (double)v456 / (double)v512 * 100.0;
      v461 = swift_slowAlloc(42, -1);
      v462 = swift_slowAlloc(32, -1);
      v624 = v456;
      v625 = v462;
      *(_DWORD *)v461 = v501;
      v463 = v520;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v520, v461 + 4, v461 + 12);
      *(_WORD *)(v461 + 12) = 2160;
      v624 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v463, v461 + 14, v461 + 22);
      *(_WORD *)(v461 + 22) = 2081;
      swift_bridgeObjectRetain(v308);
      *(double *)&v624 = COERCE_DOUBLE(sub_100016940(v521, v308, &v625));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v463, v461 + 24, v461 + 32);
      swift_bridgeObjectRelease_n(v308, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v461 + 32) = 2048;
      *(double *)&v624 = v460;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v624, v463, v461 + 34, v461 + 42);
      _os_log_impl((void *)&_mh_execute_header, v458, v459, "Decimation - byAdvertisement end count: %ld\nwithin advertisement: %{private,mask.hash}s kept %f%%.", (uint8_t *)v461, 0x2Au);
      swift_arrayDestroy(v462, 1, (char *)&type metadata for Any + 8);
      v464 = (void (*)(_BYTE *, uint64_t))v596;
      swift_slowDealloc(v462, -1, -1);
      swift_slowDealloc(v461, -1, -1);

      sub_10001BC14(v455, v519);
      ((void (*)(_BYTE *, uint64_t))v597)(v454, v619);
      (*(void (**)(_BYTE *, uint64_t))(v555 + 8))(v574, v556);
      (*(void (**)(_BYTE *, uint64_t))(v604 + 8))(v594, v614);
      sub_100004048((uint64_t)v610, &qword_1010F0F00);
      v465 = v618;
      v464(v576, v618);
      v511(v584, v577);
      (*(void (**)(_BYTE *, uint64_t))(v541 + 8))(v583, v598);
      v464(v585, v465);
    }
    else
    {
      swift_bridgeObjectRelease_n(v308, 2);

      sub_10001BC14(v455, v519);
      ((void (*)(_BYTE *, uint64_t))v597)(v454, v307);
      (*(void (**)(_BYTE *, uint64_t))(v555 + 8))(v574, v556);
      (*(void (**)(_BYTE *, uint64_t))(v604 + 8))(v594, v614);
      sub_100004048((uint64_t)v610, &qword_1010F0F00);
      v466 = v618;
      v305(v576, v618);
      v511(v584, v577);
      (*(void (**)(_BYTE *, uint64_t))(v541 + 8))(v583, v598);
      v305(v585, v466);
    }
    v174 = v608;
    (*(void (**)(_BYTE *, uint64_t))(v602 + 8))(v580, v608);
    swift_release();
    swift_release();
    v175 = v575;
    v467 = swift_retain();
    dispatch thunk of _AnyIteratorBoxBase.next()(v467);
    swift_release();
    v468 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v587)(v175, 1, v174);
    v179 = v570;
    v180 = v538;
    v178 = v532;
    if (v468 == 1)
      goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(v518, v304);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v555 + 8))(v574, v556);
  (*(void (**)(_BYTE *, uint64_t))(v604 + 8))(v594, v614);
  sub_100004048((uint64_t)v610, &qword_1010F0F00);
  v494 = v618;
  v294(v576, v618);
  v511(v584, v577);
  v495 = *(void (**)(_BYTE *, uint64_t))(v541 + 8);
  v496 = v598;
  v495(v583, v598);
  v294(v585, v494);
  (*(void (**)(_BYTE *, uint64_t))(v602 + 8))(v580, v303);
  swift_release();
  v495(v599, v496);
  v294(v613, v494);
  swift_release();
  return swift_release();
}

